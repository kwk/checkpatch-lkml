WARNING:REPEATED_WORD: Possible repeated word: 'the'
#110: 
will make /dev/ide be a devlink the the ide tree within devfs.

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#125: 
of a shortcoming the the devfs code (that normally would never be

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#208: FILE: fs/proc/base.c:914:
+	return vfs_follow_link(nd,tmp,dentry);
 	                       ^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#208: FILE: fs/proc/base.c:914:
+	return vfs_follow_link(nd,tmp,dentry);
 	                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#208: FILE: fs/proc/base.c:914:
+	return vfs_follow_link(nd,tmp,dentry);
 	                             ^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#219: FILE: fs/proc/generic.c:222:
+	return vfs_follow_link(nd, s, dentry);
 	                       ^^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#230: FILE: fs/nfs/symlink.c:96:
+	int res = vfs_follow_link(nd, nfs_getlink(inode,&page),
 	                          ^^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#230: FILE: fs/nfs/symlink.c:96:
+	int res = vfs_follow_link(nd, nfs_getlink(inode,&page),
 	                                               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#230: FILE: fs/nfs/symlink.c:96:
+	int res = vfs_follow_link(nd, nfs_getlink(inode,&page),
 	                                                ^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#242: FILE: fs/ext2/symlink.c:32:
+	return vfs_follow_link(nd, s, dentry);
 	                       ^^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#253: FILE: fs/sysv/symlink.c:19:
+	return vfs_follow_link(nd, s,dentry);
 	                       ^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#253: FILE: fs/sysv/symlink.c:19:
+	return vfs_follow_link(nd, s,dentry);
 	                            ^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#264: FILE: fs/ufs/symlink.c:39:
+	return vfs_follow_link(nd, s, dentry);
 	                       ^^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#275: FILE: fs/autofs/symlink.c:24:
+	return vfs_follow_link(nd, s, dentry);
 	                       ^^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#286: FILE: fs/devfs/base.c:3052:
+	err = vfs_follow_link (nd, copy, dentry);
 	                       ^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#286: FILE: fs/devfs/base.c:3052:
+	err = vfs_follow_link (nd, copy, dentry);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#297: FILE: fs/autofs4/symlink.c:26:
+	return vfs_follow_link(nd, ino->u.symlink, dentry);
 	                       ^^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#308: FILE: fs/freevxfs/vxfs_immed.c:104:
+	return (vfs_follow_link(np, vip->vii_immed.vi_immed, dentry));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#319: FILE: fs/jffs2/symlink.c:102:
+	ret = vfs_follow_link(nd, buf, dentry);
 	                      ^^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#330: FILE: fs/ext3/symlink.c:33:
+	return vfs_follow_link(nd, s, dentry);
 	                       ^^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:TRAILING_WHITESPACE: trailing whitespace
#340: FILE: fs/attr.c:83:
+^I^Iif (S_ISLNK(inode->i_mode) && $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that '!' (ctx:ExW)
#341: FILE: fs/attr.c:84:
+		    ! (ia_valid&ATTR_FORCE)) {
 		    ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#341: FILE: fs/attr.c:84:
+		    ! (ia_valid&ATTR_FORCE)) {
 		               ^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#357: FILE: fs/open.c:239:
+	error = user_path_walk_devlink(filename, &nd);
 	                                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#366: FILE: fs/open.c:283:
+	error = user_path_walk_devlink(filename, &nd);
 	                                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#375: FILE: fs/open.c:494:
+	error = user_path_walk_devlink(filename, &nd);
 	                                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#384: FILE: fs/open.c:584:
+	error = user_path_walk_devlink(filename, &nd);
 	                                          ^^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#409: FILE: fs/namei.c:601:
 		if ((lookup_flags & LOOKUP_FOLLOW)
+		    && inode && inode->i_op && inode->i_op->follow_link

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#410: FILE: fs/namei.c:602:
+		    && inode && inode->i_op && inode->i_op->follow_link
+		    && ((inode->i_mode&S_ISVTX)==0 || (lookup_flags& LOOKUP_DEVLINK)==0)

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#410: FILE: fs/namei.c:602:
+		    && ((inode->i_mode&S_ISVTX)==0 || (lookup_flags& LOOKUP_DEVLINK)==0)
 		                      ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#410: FILE: fs/namei.c:602:
+		    && ((inode->i_mode&S_ISVTX)==0 || (lookup_flags& LOOKUP_DEVLINK)==0)
 		                               ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxW)
#410: FILE: fs/namei.c:602:
+		    && ((inode->i_mode&S_ISVTX)==0 || (lookup_flags& LOOKUP_DEVLINK)==0)
 		                                                   ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#410: FILE: fs/namei.c:602:
+		    && ((inode->i_mode&S_ISVTX)==0 || (lookup_flags& LOOKUP_DEVLINK)==0)
 		                                                                    ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#421: FILE: fs/namei.c:1229:
+	if ((S_ISCHR(mode) || S_ISBLK(mode))
+	    && dev == MKDEV(0,0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#421: FILE: fs/namei.c:1229:
+	    && dev == MKDEV(0,0)
 	                     ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#422: FILE: fs/namei.c:1230:
+	    && dev == MKDEV(0,0)
+	    && dentry->d_inode

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#423: FILE: fs/namei.c:1231:
+	    && dentry->d_inode
+	    && S_ISLNK(dentry->d_inode->i_mode)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#425: FILE: fs/namei.c:1233:
+		struct iattr attr;
+		attr.ia_valid = ATTR_MODE | ATTR_FORCE;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#427: FILE: fs/namei.c:1235:
+			| (mode & S_IRWXUGO)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#441: FILE: fs/namei.c:1969:
+__vfs_follow_link(struct nameidata *nd, const char *link, struct dentry *dentry)
                                     ^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#456: FILE: fs/namei.c:1984:
+	if (!(nd->mnt->mnt_flags & MNT_NODEV)
+	    && dentry->d_inode

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#457: FILE: fs/namei.c:1985:
+	    && dentry->d_inode
+	    && (dentry->d_inode->i_mode & S_ISVTX)) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#475: FILE: fs/namei.c:2021:
+int vfs_follow_link(struct nameidata *nd, const char *link, struct dentry *dentry)
                                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#478: FILE: fs/namei.c:2023:
+	return __vfs_follow_link(nd, link, dentry);
 	                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#487: FILE: fs/namei.c:2065:
+	int res = __vfs_follow_link(nd, s, dentry);
 	                            ^^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#494: FILE: fs/devlink.c:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#526: FILE: fs/devlink.c:33:
+struct directory_type
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#527: FILE: fs/devlink.c:34:
+    struct devfs_entry *first;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#528: FILE: fs/devlink.c:35:
+    struct devfs_entry *last;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#529: FILE: fs/devlink.c:36:
+    unsigned int num_removable;$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#533: FILE: fs/devlink.c:40:
+struct file_type
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#534: FILE: fs/devlink.c:41:
+    unsigned long size;$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#538: FILE: fs/devlink.c:45:
+struct device_type
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#539: FILE: fs/devlink.c:46:
+    unsigned short major;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#540: FILE: fs/devlink.c:47:
+    unsigned short minor;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#545: FILE: fs/devlink.c:52:
+    uid_t default_uid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#546: FILE: fs/devlink.c:53:
+    gid_t default_gid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#547: FILE: fs/devlink.c:54:
+    void *ops;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#548: FILE: fs/devlink.c:55:
+    union $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#548: FILE: fs/devlink.c:55:
+    union $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#549: FILE: fs/devlink.c:56:
+    {$

ERROR:OPEN_BRACE: open brace '{' following union go on the same line
#549: FILE: fs/devlink.c:56:
+    union 
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#552: FILE: fs/devlink.c:59:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#553: FILE: fs/devlink.c:60:
+    u;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#554: FILE: fs/devlink.c:61:
+    unsigned char auto_owner:1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#555: FILE: fs/devlink.c:62:
+    unsigned char aopen_notify:1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#556: FILE: fs/devlink.c:63:
+    unsigned char removable:1;  /*  Belongs in device_type, but save space   */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#557: FILE: fs/devlink.c:64:
+    unsigned char open:1;       /*  Not entirely correct                     */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#558: FILE: fs/devlink.c:65:
+    unsigned char autogen:1;    /*  Belongs in device_type, but save space   */$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#562: FILE: fs/devlink.c:69:
+struct symlink_type
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#563: FILE: fs/devlink.c:70:
+    unsigned int length;         /*  Not including the NULL-termimator       */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#564: FILE: fs/devlink.c:71:
+    char *linkname;              /*  This is NULL-terminated                 */$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#568: FILE: fs/devlink.c:75:
+struct fifo_type
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#569: FILE: fs/devlink.c:76:
+    uid_t uid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#570: FILE: fs/devlink.c:77:
+    gid_t gid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#575: FILE: fs/devlink.c:82:
+    time_t atime;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#576: FILE: fs/devlink.c:83:
+    time_t mtime;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#577: FILE: fs/devlink.c:84:
+    time_t ctime;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#578: FILE: fs/devlink.c:85:
+    unsigned int ino;          /*  Inode number as seen in the VFS  */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#579: FILE: fs/devlink.c:86:
+    struct dentry *dentry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#580: FILE: fs/devlink.c:87:
+    umode_t mode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#581: FILE: fs/devlink.c:88:
+    uid_t uid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#582: FILE: fs/devlink.c:89:
+    gid_t gid;$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#586: FILE: fs/devlink.c:93:
+struct devfs_entry
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#587: FILE: fs/devlink.c:94:
+    void *info;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#588: FILE: fs/devlink.c:95:
+    union $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#588: FILE: fs/devlink.c:95:
+    union $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#589: FILE: fs/devlink.c:96:
+    {$

ERROR:OPEN_BRACE: open brace '{' following union go on the same line
#589: FILE: fs/devlink.c:96:
+    union 
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#594: FILE: fs/devlink.c:101:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#595: FILE: fs/devlink.c:102:
+    u;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#596: FILE: fs/devlink.c:103:
+    struct devfs_entry *prev;    /*  Previous entry in the parent directory  */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#597: FILE: fs/devlink.c:104:
+    struct devfs_entry *next;    /*  Next entry in the parent directory      */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#598: FILE: fs/devlink.c:105:
+    struct devfs_entry *parent;  /*  The parent directory                    */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#599: FILE: fs/devlink.c:106:
+    struct devfs_entry *slave;   /*  Another entry to unregister             */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#600: FILE: fs/devlink.c:107:
+    struct devfs_inode inode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#601: FILE: fs/devlink.c:108:
+    umode_t mode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#602: FILE: fs/devlink.c:109:
+    unsigned short namelen;  /*  I think 64k+ filenames are a way off...  */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#603: FILE: fs/devlink.c:110:
+    unsigned char registered:1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#604: FILE: fs/devlink.c:111:
+    unsigned char hide:1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#605: FILE: fs/devlink.c:112:
+    unsigned char no_persistence:1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#606: FILE: fs/devlink.c:113:
+    char name[1];            /*  This is just a dummy: the allocated array is$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#607: FILE: fs/devlink.c:114:
+    char name[1];            /*  This is just a dummy: the allocated array is
+				 bigger. This is NULL-terminated  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#607: FILE: fs/devlink.c:114:
+				 bigger. This is NULL-terminated  */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#616: FILE: fs/devlink.c:123:
+}
+static inline void set_de(struct inode *i, devfs_handle_t de)

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#625: FILE: fs/devlink.c:132:
+static struct inode_operations devlink_dir_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#626: FILE: fs/devlink.c:133:
+static struct file_operations devlink_dir_fops;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#627: FILE: fs/devlink.c:134:
+static struct inode_operations devlink_dev_ops;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#628: FILE: fs/devlink.c:135:
+static struct inode_operations devlink_link_ops;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#629: FILE: fs/devlink.c:136:
+static struct dentry_operations devlink_dops;^I$

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#629: FILE: fs/devlink.c:136:
+static struct dentry_operations devlink_dops;	

CHECK:LINE_SPACING: Please don't use multiple blank lines
#632: FILE: fs/devlink.c:139:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!de"
#656: FILE: fs/devlink.c:163:
+			if (de == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#698: FILE: fs/devlink.c:205:
+	struct inode *inode, *parent;
+	inode = dentry->d_inode;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#704: FILE: fs/devlink.c:211:
+	} while (dentry != dentry->d_parent
+		 && ! S_ISLNK(dentry->d_inode->i_mode));

ERROR:SPACING: space prohibited after that '!' (ctx:WxW)
#704: FILE: fs/devlink.c:211:
+		 && ! S_ISLNK(dentry->d_inode->i_mode));
 		    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#711: FILE: fs/devlink.c:218:
+			(inode->i_mode & (S_IFMT|S_ISVTX))
 			                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#712: FILE: fs/devlink.c:219:
+			| (parent->i_mode & (S_IRUGO|S_IWUGO));
 			                            ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUGO' are not preferred. Consider using octal permissions '0666'.
#712: FILE: fs/devlink.c:219:
+			| (parent->i_mode & (S_IRUGO|S_IWUGO));

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#716: FILE: fs/devlink.c:223:
+			inode->i_mode |= (parent->i_mode & S_IRUGO)>>2;
 			                                           ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#716: FILE: fs/devlink.c:223:
+			inode->i_mode |= (parent->i_mode & S_IRUGO)>>2;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!de"
#730: FILE: fs/devlink.c:237:
+	if (de == NULL)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#741: FILE: fs/devlink.c:248:
+		mode = S_IFLNK|S_ISVTX;
 		              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#749: FILE: fs/devlink.c:256:
+^I^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#750: FILE: fs/devlink.c:257:
+		inode->i_mode= mode;
 		             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#751: FILE: fs/devlink.c:258:
+		inode->i_nlink=1;
 		              ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#752: FILE: fs/devlink.c:259:
+		inode->i_uid = inode->i_gid = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#754: FILE: fs/devlink.c:261:
+		inode->i_atime = inode->i_mtime = inode->i_ctime =

ERROR:SPACING: space required before the open parenthesis '('
#757: FILE: fs/devlink.c:264:
+		switch(mode) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#761: FILE: fs/devlink.c:268:
+					   MKDEV (de->u.fcb.u.device.major,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#769: FILE: fs/devlink.c:276:
+		case S_IFLNK|S_ISVTX:
 		            ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#776: FILE: fs/devlink.c:283:
+}
+static struct dentry *dl_lookup(struct inode *dir, struct dentry *dentry)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#783: FILE: fs/devlink.c:290:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#797: FILE: fs/devlink.c:304:
+	int i=0;
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#798: FILE: fs/devlink.c:305:
+	int err=0;
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#799: FILE: fs/devlink.c:306:
+	int stored=0;
 	          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#801: FILE: fs/devlink.c:308:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#802: FILE: fs/devlink.c:309:
+	switch(pos) {

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#805: FILE: fs/devlink.c:312:
+		if (err<0) break;
 		       ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#805: FILE: fs/devlink.c:312:
+		if (err<0) break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#808: FILE: fs/devlink.c:315:
+		/* FALLTHROUGH */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#812: FILE: fs/devlink.c:319:
+		if (err < 0) break;

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#815: FILE: fs/devlink.c:322:
+		/* FALLTHROUGH */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#817: FILE: fs/devlink.c:324:
+		i=1;
 		 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#818: FILE: fs/devlink.c:325:
+		for (de = parent->u.dir.first; de != NULL; de=de->next) {
 		                                             ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "de"
#818: FILE: fs/devlink.c:325:
+		for (de = parent->u.dir.first; de != NULL; de=de->next) {

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#822: FILE: fs/devlink.c:329:
+			if (i<pos)
 			     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#827: FILE: fs/devlink.c:334:
+			if (err < 0) break;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#840: FILE: fs/devlink.c:347:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#843: FILE: fs/devlink.c:350:
+	char *link = de->u.symlink.linkname;
+	if (link && de->registered)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#850: FILE: fs/devlink.c:357:
+static int dl_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                    ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#854: FILE: fs/devlink.c:361:
+	char *link = de->u.symlink.linkname;
+	if (link && de->registered) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#854: FILE: fs/devlink.c:361:
+	if (link && de->registered) {
[...]
+	} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#857: FILE: fs/devlink.c:364:
+		struct dentry *d = devlink_find(dentry, link);
+		dput(nd->dentry);

CHECK:BRACES: Unbalanced braces around else statement
#860: FILE: fs/devlink.c:367:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dentry->d_inode"
#868: FILE: fs/devlink.c:375:
+	if (dentry->d_inode == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#885: FILE: fs/devlink.c:392:
+^I^Ireturn 0;^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#907: FILE: fs/devlink.c:414:
+	struct inode *root = new_inode(sb);
+	if (!root)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#909: FILE: fs/devlink.c:416:
+	root->i_mode = S_IFDIR | S_IRUSR | S_IWUSR;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#910: FILE: fs/devlink.c:417:
+	root->i_uid = root->i_gid = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#911: FILE: fs/devlink.c:418:
+	root->i_atime = root->i_mtime = root->i_ctime = CURRENT_TIME;

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#918: FILE: fs/devlink.c:425:
+		iput(root);
 		^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#927: FILE: fs/devlink.c:434:
+
+}

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#929: FILE: fs/devlink.c:436:
+static struct inode_operations devlink_dir_ops = {

WARNING:INDENTED_LABEL: labels should not be indented
#930: FILE: fs/devlink.c:437:
+	lookup:		dl_lookup,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#931: FILE: fs/devlink.c:438:
+^Isetattr: ^Idl_setattr,$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#931: FILE: fs/devlink.c:438:
+	setattr: 	dl_setattr,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#931: FILE: fs/devlink.c:438:
+	setattr: 	dl_setattr,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#932: FILE: fs/devlink.c:439:
+	revalidate:	dl_i_revalidate,
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#932: FILE: fs/devlink.c:439:
+	revalidate:	dl_i_revalidate,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#935: FILE: fs/devlink.c:442:
+static struct file_operations devlink_dir_fops = {

WARNING:INDENTED_LABEL: labels should not be indented
#936: FILE: fs/devlink.c:443:
+	readdir:	dl_readdir,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#938: FILE: fs/devlink.c:445:
+};
+static struct inode_operations devlink_dev_ops = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#938: FILE: fs/devlink.c:445:
+static struct inode_operations devlink_dev_ops = {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#939: FILE: fs/devlink.c:446:
+^Isetattr: ^Idl_setattr,$

WARNING:INDENTED_LABEL: labels should not be indented
#939: FILE: fs/devlink.c:446:
+	setattr: 	dl_setattr,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#940: FILE: fs/devlink.c:447:
+	revalidate:	dl_i_revalidate,
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#940: FILE: fs/devlink.c:447:
+	revalidate:	dl_i_revalidate,

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#943: FILE: fs/devlink.c:450:
+static struct inode_operations devlink_link_ops = {

WARNING:INDENTED_LABEL: labels should not be indented
#944: FILE: fs/devlink.c:451:
+	readlink:	dl_readlink,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#945: FILE: fs/devlink.c:452:
+	follow_link:	dl_follow_link,
 	           ^

WARNING:INDENTED_LABEL: labels should not be indented
#945: FILE: fs/devlink.c:452:
+	follow_link:	dl_follow_link,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#946: FILE: fs/devlink.c:453:
+	setattr:	dl_setattr,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#946: FILE: fs/devlink.c:453:
+	setattr:	dl_setattr,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#947: FILE: fs/devlink.c:454:
+	revalidate:	dl_i_revalidate,
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#947: FILE: fs/devlink.c:454:
+	revalidate:	dl_i_revalidate,

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#950: FILE: fs/devlink.c:457:
+static struct dentry_operations devlink_dops = {

WARNING:INDENTED_LABEL: labels should not be indented
#951: FILE: fs/devlink.c:458:
+	d_revalidate:	dl_revalidate,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#953: FILE: fs/devlink.c:460:
+^I$

WARNING:INDENTED_LABEL: labels should not be indented
#955: FILE: fs/devlink.c:462:
+	put_inode:	dl_put_inode,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#958: FILE: fs/devlink.c:465:
+
+

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#959: FILE: fs/devlink.c:466:
+static DECLARE_FSTYPE(dl_fs_type, "devlink", dl_read_super, FS_SINGLE|FS_NOMOUNT);
                                                                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#964: FILE: fs/devlink.c:471:
+	int err = register_filesystem(&dl_fs_type);
+	if (!err) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#984: FILE: fs/devlink.c:491:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#986: FILE: fs/devlink.c:493:
+
+

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1031: FILE: mm/shmem.c:1153:
+	return vfs_follow_link(nd, (const char *)SHMEM_I(dentry->d_inode), dentry);
 	                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1040: FILE: mm/shmem.c:1177:
+	res = vfs_follow_link(nd, kmap(page), dentry);
 	                      ^^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1071: FILE: include/linux/fs.h:1301:
+#define	user_path_walk_devlink(name,nd) __user_walk(name, LOOKUP_FOLLOW|LOOKUP_POSITIVE|LOOKUP_DEVLINK, nd)
        	                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1071: FILE: include/linux/fs.h:1301:
+#define	user_path_walk_devlink(name,nd) __user_walk(name, LOOKUP_FOLLOW|LOOKUP_POSITIVE|LOOKUP_DEVLINK, nd)
        	                                                                                                ^^

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#1071: FILE: include/linux/fs.h:1301:
+#define	user_path_walk_devlink(name,nd) __user_walk(name, LOOKUP_FOLLOW|LOOKUP_POSITIVE|LOOKUP_DEVLINK, nd)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1071: FILE: include/linux/fs.h:1301:
+#define	user_path_walk_devlink(name,nd) __user_walk(name, LOOKUP_FOLLOW|LOOKUP_POSITIVE|LOOKUP_DEVLINK, nd)
        	                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1071: FILE: include/linux/fs.h:1301:
+#define	user_path_walk_devlink(name,nd) __user_walk(name, LOOKUP_FOLLOW|LOOKUP_POSITIVE|LOOKUP_DEVLINK, nd)
        	                                                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1071: FILE: include/linux/fs.h:1301:
+#define	user_path_walk_devlink(name,nd) __user_walk(name, LOOKUP_FOLLOW|LOOKUP_POSITIVE|LOOKUP_DEVLINK, nd)
        	                                                                               ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1072: FILE: include/linux/fs.h:1302:
+extern struct dentry *devlink_find(struct dentry *ldentry, const char *link);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1081: FILE: include/linux/fs.h:1395:
+extern int vfs_follow_link(struct nameidata *, const char *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#1081: FILE: include/linux/fs.h:1395:
+extern int vfs_follow_link(struct nameidata *, const char *, struct dentry *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1081: FILE: include/linux/fs.h:1395:
+extern int vfs_follow_link(struct nameidata *, const char *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#1081: FILE: include/linux/fs.h:1395:
+extern int vfs_follow_link(struct nameidata *, const char *, struct dentry *);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1100: FILE: Documentation/Configure.help:14126:
+  When you access a devlink, it provides you with an image of the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1101: FILE: Documentation/Configure.help:14127:
+  thing named in devfs, but with the same owner/group/perm as the $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000499377.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 51 errors, 141 warnings, 40 checks, 832 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000499377.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
