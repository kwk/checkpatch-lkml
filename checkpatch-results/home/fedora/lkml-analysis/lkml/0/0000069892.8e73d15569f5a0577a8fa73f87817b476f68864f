WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#45: 
  files(/dev/hda).
             ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#90: 
I guess the location attrs might be useful for someone. However I need strong

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#100: 
# file ALL

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#101: 
#      ino       size   cached cached%  state   refcnt  uid     gid     dev             file

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#102: 
    413605         23       24    100   --      0       0       0       03:00(hda)      /sbin/modprobe
                                                                              ^^^

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#103: 
    381701         17       20    100   --      1       0       0       03:00(hda)      /bin/cat
                                                                              ^^^

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#104: 
    398088          1        4    100   --      0       0       0       03:00(hda)      /root/bin/checkpath
                                                                              ^^^

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#105: 
    381698        611      612    100   --      1       0       0       03:00(hda)      /bin/bash
                                                                              ^^^

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#106: 
    159498          1        4    100   --      0       0       0       03:00(hda)      /etc/mtab
                                                                              ^^^

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#107: 
    381719         30       32    100   --      0       0       0       03:00(hda)      /bin/rm
                                                                              ^^^

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#108: 
    335993          4        4    100   --      0       0       43      03:00(hda)      /var/run/utmp
                                                                              ^^^

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#110: 
    159701          5        8    100   --      0       0       0       03:00(hda)      /etc/modprobe.d/aliases
                                                                              ^^^

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#111: 
     31866       1238     1240    100   --      4       0       0       03:00(hda)      /lib/tls/libc-2.3.5.so
                                                                              ^^^

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#112: 
    381705         51       52    100   --      0       0       0       03:00(hda)      /bin/cp
                                                                              ^^^

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#113: 
     31814         27       28    100   --      0       0       0       03:00(hda)      /lib/libblkid.so.1.0
                                                                              ^^^

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#114: 
    159534         17       20    100   --      0       0       0       03:00(hda)      /etc/ld.so.cache
                                                                              ^^^

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#120: 
# file /lib/tls/libc-2.3.5.so

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#121: 
# flags LK:locked ER:error RF:referenced UD:uptodate DT:dirty AC:active SL:slab CK:checked A1:arch_1 RS:reserved PV:private WB:writeback NS:nosave CP:compound SC:swapcache MD:mappedtodisk RC:reclaim ns:nosave_free RA:readahead MM:mmap

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#121: 
# flags LK:locked ER:error RF:referenced UD:uptodate DT:dirty AC:active SL:slab CK:checked A1:arch_1 RS:reserved PV:private WB:writeback NS:nosave CP:compound SC:swapcache MD:mappedtodisk RC:reclaim ns:nosave_free RA:readahead MM:mmap
                                            ^^^^^^^^

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#122: 
# idx   len                     state                   	refcnt  location

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#132: 
root ~# echo -n /dev/hda > /proc/filecache
                     ^^^

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#134: 
# file /dev/hda

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#134: 
# file /dev/hda
            ^^^

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#135: 
# flags LK:locked ER:error RF:referenced UD:uptodate DT:dirty AC:active SL:slab CK:checked A1:arch_1 RS:reserved PV:private WB:writeback NS:nosave CP:compound SC:swapcache MD:mappedtodisk RC:reclaim ns:nosave_free RA:readahead MM:mmap

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#135: 
# flags LK:locked ER:error RF:referenced UD:uptodate DT:dirty AC:active SL:slab CK:checked A1:arch_1 RS:reserved PV:private WB:writeback NS:nosave CP:compound SC:swapcache MD:mappedtodisk RC:reclaim ns:nosave_free RA:readahead MM:mmap
                                            ^^^^^^^^

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#136: 
# idx   len                     state                   	refcnt  location

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#165: FILE: fs/Kconfig:897:
+config PROC_FILECACHE
+	tristate "/proc/filecache support"
+	default m
+	depends on PROC_FS
+	help
+	  This option creates a file /proc/filecache which enables one to
+	  get the listing of cached files/pages.
+
+	  It can be a handy tool for sysadms and desktop users.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#181: FILE: fs/proc/filecache.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#182: FILE: fs/proc/filecache.c:2:
+ * linux/fs/proc/filecache.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#201: FILE: fs/proc/filecache.c:21:
+#include <asm/uaccess.h>

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#203: FILE: fs/proc/filecache.c:23:
+static char name_all[] = "ALL";

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#219: FILE: fs/proc/filecache.c:39:
+	[PG_uptodate]		= "UD:uptodate",
 	             		      ^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#250: FILE: fs/proc/filecache.c:70:
+ * ^I^Iecho -n ALL > /proc/filecache$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#251: FILE: fs/proc/filecache.c:71:
+ * ^I^Icat /proc/filecache$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#255: FILE: fs/proc/filecache.c:75:
+ * ^I- list_for_each(super_blocks)/list_for_each_prev(s_dirty)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#256: FILE: fs/proc/filecache.c:76:
+ * ^I- list_for_each(inode_in_use)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#257: FILE: fs/proc/filecache.c:77:
+ * ^I- list_for_each(inode_unused)$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#275: FILE: fs/proc/filecache.c:95:
+	if (inode->i_state & (I_DIRTY_DATASYNC|I_DIRTY_PAGES))
 	                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#286: FILE: fs/proc/filecache.c:106:
+	seq_printf(m, "%10lu %10llu %8lu %6d\t%s\t%d\t%u\t%u\t%02x:%02x(%s)\t",
+			inode->i_ino,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#304: FILE: fs/proc/filecache.c:124:
+			seq_printf(m, "%02x:%02x\n",
+					imajor(inode), iminor(inode));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#307: FILE: fs/proc/filecache.c:127:
+		alias = list_entry(inode->i_dentry.next,
+							struct dentry, d_alias);

CHECK:SPACING: No space is necessary after a cast
#326: FILE: fs/proc/filecache.c:146:
+	unsigned long index = *(loff_t *) v;

ERROR:CODE_INDENT: code indent should use tabs where possible
#329: FILE: fs/proc/filecache.c:149:
+        struct inode * inode;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: fs/proc/filecache.c:149:
+        struct inode * inode;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#329: FILE: fs/proc/filecache.c:149:
+        struct inode * inode;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#332: FILE: fs/proc/filecache.c:152:
+		seq_printf(m, "# file %s\n" , name_all);
 		                            ^

WARNING:SPLIT_STRING: quoted string split across lines
#334: FILE: fs/proc/filecache.c:154:
+		seq_puts(m, "#      ino       size   cached cached%"
+				"\tstate\trefcnt\tuid\tgid\tdev\t\tfile\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#337: FILE: fs/proc/filecache.c:157:
+	BUG_ON (head == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#337: FILE: fs/proc/filecache.c:157:
+	BUG_ON (head == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!head"
#337: FILE: fs/proc/filecache.c:157:
+	BUG_ON (head == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#338: FILE: fs/proc/filecache.c:158:
+        hlist_for_each (node, head) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#338: FILE: fs/proc/filecache.c:158:
+        hlist_for_each (node, head) {$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#338: FILE: fs/proc/filecache.c:158:
+        hlist_for_each (node, head) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#339: FILE: fs/proc/filecache.c:159:
+                inode = hlist_entry(node, struct inode, i_hash);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#339: FILE: fs/proc/filecache.c:159:
+                inode = hlist_entry(node, struct inode, i_hash);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#367: FILE: fs/proc/filecache.c:187:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#372: FILE: fs/proc/filecache.c:192:
+ * ^I^Iecho -n 'file name' > /proc/filecache$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#373: FILE: fs/proc/filecache.c:193:
+ * ^I^Icat /proc/filecache$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#376: FILE: fs/proc/filecache.c:196:
+static unsigned long page_flags(struct page* page)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#388: FILE: fs/proc/filecache.c:208:
+static int pages_similiar(struct page* page0, struct page* page)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#388: FILE: fs/proc/filecache.c:208:
+static int pages_similiar(struct page* page0, struct page* page)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#402: FILE: fs/proc/filecache.c:222:
+static void show_range(struct seq_file *m, struct page* page, unsigned long len)

ERROR:SPACING: space prohibited after that open parenthesis '('
#412: FILE: fs/proc/filecache.c:232:
+	for (	s = flag_names, flags = page_flags(page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#418: FILE: fs/proc/filecache.c:238:
+	BUG_ON(!PageLRU(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#419: FILE: fs/proc/filecache.c:239:
+	BUG_ON(PageBuddy(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#422: FILE: fs/proc/filecache.c:242:
+	seq_printf(m, "\t%d\t%lu.%lu.%s\n",
+			page_count(page),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#430: FILE: fs/proc/filecache.c:250:
+static pgoff_t show_file_cache(struct seq_file *m,
+				struct address_space *mapping, pgoff_t start)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#442: FILE: fs/proc/filecache.c:262:
+		pvec.nr = radix_tree_gang_lookup(&mapping->page_tree,
+				(void **)pvec.pages, start + len, PAGEVEC_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#457: FILE: fs/proc/filecache.c:277:
+			if (page->index == start + len &&
+					pages_similiar(page0, page))

CHECK:BRACES: Unbalanced braces around else statement
#459: FILE: fs/proc/filecache.c:279:
+			else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#482: FILE: fs/proc/filecache.c:302:
+	offset = *(loff_t *) v;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#483: FILE: fs/proc/filecache.c:303:
+	BUG_ON (offset != (pgoff_t)m->private);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#483: FILE: fs/proc/filecache.c:303:
+	BUG_ON (offset != (pgoff_t)m->private);

WARNING:LINE_SPACING: Missing a blank line after declarations
#487: FILE: fs/proc/filecache.c:307:
+		int i;
+		seq_puts(m, "# file ");

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#548: FILE: fs/proc/filecache.c:368:
+struct seq_operations seq_filecache_op = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#555: FILE: fs/proc/filecache.c:375:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#560: FILE: fs/proc/filecache.c:380:
+ * ^I- NULL: show a comprehensive cached inode listing$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#561: FILE: fs/proc/filecache.c:381:
+ * 	- filp: show cached pages of filp
    	  ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#561: FILE: fs/proc/filecache.c:381:
+ * 	- filp: show cached pages of filp
    	                             ^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#561: FILE: fs/proc/filecache.c:381:
+ * ^I- filp: show cached pages of filp$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#579: FILE: fs/proc/filecache.c:399:
+static struct file* fcache_target_open(struct file *file, const char *name)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#586: FILE: fs/proc/filecache.c:406:
+		tf = filp_open(name, O_RDONLY|O_LARGEFILE, 0);
 		                             ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#608: FILE: fs/proc/filecache.c:428:
+static struct file* fcache_target_update(struct file *file, char *name)

WARNING:LINE_SPACING: Missing a blank line after declarations
#634: FILE: fs/proc/filecache.c:454:
+	int ret = seq_open(file, &seq_filecache_op);
+	fcache_target_init(file);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#644: FILE: fs/proc/filecache.c:464:
+ssize_t filecache_write(struct file *file, const char __user * buffer,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#656: FILE: fs/proc/filecache.c:476:
+	name = kmalloc(count+1, GFP_KERNEL);
 	                    ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#657: FILE: fs/proc/filecache.c:477:
+	if (name == NULL)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#674: FILE: fs/proc/filecache.c:494:
+static struct file_operations proc_filecache_fops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#683: FILE: fs/proc/filecache.c:503:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#711: FILE: fs/inode.c:1331:
+struct hlist_head * get_inode_hash_budget(unsigned long index)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#729: FILE: include/linux/fs.h:1677:
 }
+struct hlist_head * get_inode_hash_budget(unsigned long index);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#729: FILE: include/linux/fs.h:1677:
+struct hlist_head * get_inode_hash_budget(unsigned long index);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000069892.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 58 warnings, 19 checks, 592 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000069892.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
