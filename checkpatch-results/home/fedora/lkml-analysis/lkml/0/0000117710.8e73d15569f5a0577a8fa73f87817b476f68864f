CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#36: 
    November 20, 2005), with a copy to the linux-parport and
            ^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#62: FILE: drivers/parport/Kconfig:93:
+config PARPORT_IP32
+	tristate "SGI IP32 builtin port (EXPERIMENTAL)"
+	depends on SGI_IP32 && PARPORT && EXPERIMENTAL
+	select PARPORT_NOT_PC
+	help
+	  Say Y here if you need support for the parallel port on
+	  SGI O2 machines. This code is also available as a module (say M),
+	  called parport_ip32.  If in doubt, saying N is the safe plan.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#86: FILE: drivers/parport/parport_ip32.c:1:
+/* Low-level parallel port routines for built-in port on SGI IP32

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#90: FILE: drivers/parport/parport_ip32.c:5:
+ * $Id: parport_ip32.c,v 1.63 2005/11/15 00:00:16 arnaud Exp $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#111: FILE: drivers/parport/parport_ip32.c:26:
+ * with this program; if not, write to the Free Software Foundation, Inc., 59$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#193: FILE: drivers/parport/parport_ip32.c:108:
+#include <asm/io.h>

CHECK:BIT_MACRO: Prefer using the BIT macro
#216: FILE: drivers/parport/parport_ip32.c:131:
+#define PARPORT_IP32_ENABLE_IRQ	(1U << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#217: FILE: drivers/parport/parport_ip32.c:132:
+#define PARPORT_IP32_ENABLE_DMA	(1U << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#218: FILE: drivers/parport/parport_ip32.c:133:
+#define PARPORT_IP32_ENABLE_SPP	(1U << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#219: FILE: drivers/parport/parport_ip32.c:134:
+#define PARPORT_IP32_ENABLE_EPP	(1U << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#220: FILE: drivers/parport/parport_ip32.c:135:
+#define PARPORT_IP32_ENABLE_ECP	(1U << 4)

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#225: FILE: drivers/parport/parport_ip32.c:140:
+static struct parport *this_port = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:CAMELCASE: Avoid CamelCase: <eppAddr>
#256: FILE: drivers/parport/parport_ip32.c:171:
+	void __iomem *eppAddr;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <eppData0>
#257: FILE: drivers/parport/parport_ip32.c:172:
+	void __iomem *eppData0;

CHECK:CAMELCASE: Avoid CamelCase: <eppData1>
#258: FILE: drivers/parport/parport_ip32.c:173:
+	void __iomem *eppData1;

CHECK:CAMELCASE: Avoid CamelCase: <eppData2>
#259: FILE: drivers/parport/parport_ip32.c:174:
+	void __iomem *eppData2;

CHECK:CAMELCASE: Avoid CamelCase: <eppData3>
#260: FILE: drivers/parport/parport_ip32.c:175:
+	void __iomem *eppData3;

CHECK:CAMELCASE: Avoid CamelCase: <ecpAFifo>
#261: FILE: drivers/parport/parport_ip32.c:176:
+	void __iomem *ecpAFifo;

CHECK:CAMELCASE: Avoid CamelCase: <DSR_nBUSY>
#269: FILE: drivers/parport/parport_ip32.c:184:
+#define DSR_nBUSY		(1U << 7)	/* PARPORT_STATUS_BUSY */

CHECK:BIT_MACRO: Prefer using the BIT macro
#269: FILE: drivers/parport/parport_ip32.c:184:
+#define DSR_nBUSY		(1U << 7)	/* PARPORT_STATUS_BUSY */

CHECK:CAMELCASE: Avoid CamelCase: <DSR_nACK>
#270: FILE: drivers/parport/parport_ip32.c:185:
+#define DSR_nACK		(1U << 6)	/* PARPORT_STATUS_ACK */

CHECK:BIT_MACRO: Prefer using the BIT macro
#270: FILE: drivers/parport/parport_ip32.c:185:
+#define DSR_nACK		(1U << 6)	/* PARPORT_STATUS_ACK */

CHECK:BIT_MACRO: Prefer using the BIT macro
#271: FILE: drivers/parport/parport_ip32.c:186:
+#define DSR_PERROR		(1U << 5)	/* PARPORT_STATUS_PAPEROUT */

CHECK:BIT_MACRO: Prefer using the BIT macro
#272: FILE: drivers/parport/parport_ip32.c:187:
+#define DSR_SELECT		(1U << 4)	/* PARPORT_STATUS_SELECT */

CHECK:CAMELCASE: Avoid CamelCase: <DSR_nFAULT>
#273: FILE: drivers/parport/parport_ip32.c:188:
+#define DSR_nFAULT		(1U << 3)	/* PARPORT_STATUS_ERROR */

CHECK:BIT_MACRO: Prefer using the BIT macro
#273: FILE: drivers/parport/parport_ip32.c:188:
+#define DSR_nFAULT		(1U << 3)	/* PARPORT_STATUS_ERROR */

CHECK:CAMELCASE: Avoid CamelCase: <DSR_nPRINT>
#274: FILE: drivers/parport/parport_ip32.c:189:
+#define DSR_nPRINT		(1U << 2)	/* specific to TL16PIR552 */

CHECK:BIT_MACRO: Prefer using the BIT macro
#274: FILE: drivers/parport/parport_ip32.c:189:
+#define DSR_nPRINT		(1U << 2)	/* specific to TL16PIR552 */

CHECK:BIT_MACRO: Prefer using the BIT macro
#276: FILE: drivers/parport/parport_ip32.c:191:
+#define DSR_TIMEOUT		(1U << 0)	/* EPP timeout */

CHECK:BIT_MACRO: Prefer using the BIT macro
#280: FILE: drivers/parport/parport_ip32.c:195:
+#define DCR_DIR			(1U << 5)	/* direction */

CHECK:BIT_MACRO: Prefer using the BIT macro
#281: FILE: drivers/parport/parport_ip32.c:196:
+#define DCR_IRQ			(1U << 4)	/* interrupt on nAck */

CHECK:BIT_MACRO: Prefer using the BIT macro
#282: FILE: drivers/parport/parport_ip32.c:197:
+#define DCR_SELECT		(1U << 3)	/* PARPORT_CONTROL_SELECT */

CHECK:CAMELCASE: Avoid CamelCase: <DCR_nINIT>
#283: FILE: drivers/parport/parport_ip32.c:198:
+#define DCR_nINIT		(1U << 2)	/* PARPORT_CONTROL_INIT */

CHECK:BIT_MACRO: Prefer using the BIT macro
#283: FILE: drivers/parport/parport_ip32.c:198:
+#define DCR_nINIT		(1U << 2)	/* PARPORT_CONTROL_INIT */

CHECK:BIT_MACRO: Prefer using the BIT macro
#284: FILE: drivers/parport/parport_ip32.c:199:
+#define DCR_AUTOFD		(1U << 1)	/* PARPORT_CONTROL_AUTOFD */

CHECK:BIT_MACRO: Prefer using the BIT macro
#285: FILE: drivers/parport/parport_ip32.c:200:
+#define DCR_STROBE		(1U << 0)	/* PARPORT_CONTROL_STROBE */

CHECK:BIT_MACRO: Prefer using the BIT macro
#288: FILE: drivers/parport/parport_ip32.c:203:
+#define CNFGA_IRQ		(1U << 7)

CHECK:CAMELCASE: Avoid CamelCase: <CNFGA_nBYTEINTRANS>
#295: FILE: drivers/parport/parport_ip32.c:210:
+#define CNFGA_nBYTEINTRANS	(1U << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#295: FILE: drivers/parport/parport_ip32.c:210:
+#define CNFGA_nBYTEINTRANS	(1U << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#299: FILE: drivers/parport/parport_ip32.c:214:
+#define CNFGB_COMPRESS		(1U << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#300: FILE: drivers/parport/parport_ip32.c:215:
+#define CNFGB_INTRVAL		(1U << 6)

CHECK:CAMELCASE: Avoid CamelCase: <ECR_nERRINTR>
#317: FILE: drivers/parport/parport_ip32.c:232:
+#define ECR_nERRINTR		(1U << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#317: FILE: drivers/parport/parport_ip32.c:232:
+#define ECR_nERRINTR		(1U << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#318: FILE: drivers/parport/parport_ip32.c:233:
+#define ECR_DMAEN		(1U << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#319: FILE: drivers/parport/parport_ip32.c:234:
+#define ECR_SERVINTR		(1U << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#320: FILE: drivers/parport/parport_ip32.c:235:
+#define ECR_F_FULL		(1U << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#321: FILE: drivers/parport/parport_ip32.c:236:
+#define ECR_F_EMPTY		(1U << 0)

CHECK:CAMELCASE: Avoid CamelCase: <readIntrThreshold>
#352: FILE: drivers/parport/parport_ip32.c:267:
+	unsigned int			readIntrThreshold;

CHECK:CAMELCASE: Avoid CamelCase: <writeIntrThreshold>
#353: FILE: drivers/parport/parport_ip32.c:268:
+	unsigned int			writeIntrThreshold;

WARNING:LINE_SPACING: Missing a blank line after declarations
#370: FILE: drivers/parport/parport_ip32.c:285:
+	u8 val = readb(addr);
+	rmb();

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MEMORY_BARRIER: memory barrier without comment
#370: FILE: drivers/parport/parport_ip32.c:285:
+	rmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#382: FILE: drivers/parport/parport_ip32.c:297:
+	wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#395: FILE: drivers/parport/parport_ip32.c:310:
+	rmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#408: FILE: drivers/parport/parport_ip32.c:323:
+	wmb();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#419: FILE: drivers/parport/parport_ip32.c:334:
+#	define pr_debug1(...)	printk(KERN_DEBUG __VA_ARGS__)

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#438: FILE: drivers/parport/parport_ip32.c:353:
+		   __p? __p->name: "parport_ip32"; }),			\
 		      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#438: FILE: drivers/parport/parport_ip32.c:353:
+		   __p? __p->name: "parport_ip32"; }),			\
 		                 ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#439: FILE: drivers/parport/parport_ip32.c:354:
+	   __func__ , ##__VA_ARGS__)
 	            ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#440: FILE: drivers/parport/parport_ip32.c:355:
+#define pr_trace(p, fmt, ...)	__pr_trace(pr_debug, p, fmt , ##__VA_ARGS__)
                              	                            ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#441: FILE: drivers/parport/parport_ip32.c:356:
+#define pr_trace1(p, fmt, ...)	__pr_trace(pr_debug1, p, fmt , ##__VA_ARGS__)
                               	                             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#452: FILE: drivers/parport/parport_ip32.c:367:
+	do { if (verbose_probing) printk(__VA_ARGS__); } while (0)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#454: FILE: drivers/parport/parport_ip32.c:369:
+	__pr_probe(KERN_INFO PPIP32 "0x%lx: " fmt, (p)->base , ##__VA_ARGS__)
 	                                                     ^

WARNING:TYPO_SPELLING: 'resetted' may be misspelled - perhaps 'reset'?
#464: FILE: drivers/parport/parport_ip32.c:379:
+ * Especially if @show_ecp_config is true, the parallel port is resetted.
                                                                 ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#472: FILE: drivers/parport/parport_ip32.c:387:
+	 * anything underneath */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#476: FILE: drivers/parport/parport_ip32.c:391:
+	printk(KERN_DEBUG PPIP32 "%s: state (%s):\n", p->name, str);

WARNING:LINE_SPACING: Missing a blank line after declarations
#482: FILE: drivers/parport/parport_ip32.c:397:
+		unsigned int ecr = parport_ip32_in(priv->regs.ecr);
+		printk(KERN_DEBUG PPIP32 "    ecr=0x%02x", ecr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#482: FILE: drivers/parport/parport_ip32.c:397:
+		printk(KERN_DEBUG PPIP32 "    ecr=0x%02x", ecr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#483: FILE: drivers/parport/parport_ip32.c:398:
+		printk(" %s",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#485: FILE: drivers/parport/parport_ip32.c:400:
+		if (ecr & ECR_nERRINTR)	printk(",nErrIntrEn");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#485: FILE: drivers/parport/parport_ip32.c:400:
+		if (ecr & ECR_nERRINTR)	printk(",nErrIntrEn");

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#486: FILE: drivers/parport/parport_ip32.c:401:
+		if (ecr & ECR_DMAEN)	printk(",dmaEn");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#486: FILE: drivers/parport/parport_ip32.c:401:
+		if (ecr & ECR_DMAEN)	printk(",dmaEn");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#487: FILE: drivers/parport/parport_ip32.c:402:
+		if (ecr & ECR_SERVINTR)	printk(",serviceIntr");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#487: FILE: drivers/parport/parport_ip32.c:402:
+		if (ecr & ECR_SERVINTR)	printk(",serviceIntr");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#488: FILE: drivers/parport/parport_ip32.c:403:
+		if (ecr & ECR_F_FULL)	printk(",f_full");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#488: FILE: drivers/parport/parport_ip32.c:403:
+		if (ecr & ECR_F_FULL)	printk(",f_full");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#489: FILE: drivers/parport/parport_ip32.c:404:
+		if (ecr & ECR_F_EMPTY)	printk(",f_empty");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#489: FILE: drivers/parport/parport_ip32.c:404:
+		if (ecr & ECR_F_EMPTY)	printk(",f_empty");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#490: FILE: drivers/parport/parport_ip32.c:405:
+		printk("\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#494: FILE: drivers/parport/parport_ip32.c:409:
+		unsigned int oecr, cnfgA, cnfgB;
+		oecr = parport_ip32_in(priv->regs.ecr);

CHECK:CAMELCASE: Avoid CamelCase: <cnfgA>
#497: FILE: drivers/parport/parport_ip32.c:412:
+		cnfgA = parport_ip32_in(priv->regs.cnfgA);

CHECK:CAMELCASE: Avoid CamelCase: <cnfgB>
#498: FILE: drivers/parport/parport_ip32.c:413:
+		cnfgB = parport_ip32_in(priv->regs.cnfgB);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#501: FILE: drivers/parport/parport_ip32.c:416:
+		printk(KERN_DEBUG PPIP32 "    cnfgA=0x%02x", cnfgA);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#502: FILE: drivers/parport/parport_ip32.c:417:
+		printk(" ISA-%s", (cnfgA & CNFGA_IRQ)? "Level": "Pulses");

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#502: FILE: drivers/parport/parport_ip32.c:417:
+		printk(" ISA-%s", (cnfgA & CNFGA_IRQ)? "Level": "Pulses");
 		                                     ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#502: FILE: drivers/parport/parport_ip32.c:417:
+		printk(" ISA-%s", (cnfgA & CNFGA_IRQ)? "Level": "Pulses");
 		                                              ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#504: FILE: drivers/parport/parport_ip32.c:419:
+		case CNFGA_ID_8:	printk(",8 bits"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#504: FILE: drivers/parport/parport_ip32.c:419:
+		case CNFGA_ID_8:	printk(",8 bits"); break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#505: FILE: drivers/parport/parport_ip32.c:420:
+		case CNFGA_ID_16:	printk(",16 bits"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#505: FILE: drivers/parport/parport_ip32.c:420:
+		case CNFGA_ID_16:	printk(",16 bits"); break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#506: FILE: drivers/parport/parport_ip32.c:421:
+		case CNFGA_ID_32:	printk(",32 bits"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#506: FILE: drivers/parport/parport_ip32.c:421:
+		case CNFGA_ID_32:	printk(",32 bits"); break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#507: FILE: drivers/parport/parport_ip32.c:422:
+		default:		printk(",unknown ID"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#507: FILE: drivers/parport/parport_ip32.c:422:
+		default:		printk(",unknown ID"); break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#509: FILE: drivers/parport/parport_ip32.c:424:
+		if (!(cnfgA & CNFGA_nBYTEINTRANS))  printk(",ByteInTrans");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#509: FILE: drivers/parport/parport_ip32.c:424:
+		if (!(cnfgA & CNFGA_nBYTEINTRANS))  printk(",ByteInTrans");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#511: FILE: drivers/parport/parport_ip32.c:426:
+			printk(",%d byte%s left", cnfgA & CNFGA_PWORDLEFT,

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#512: FILE: drivers/parport/parport_ip32.c:427:
+			       ((cnfgA & CNFGA_PWORDLEFT) > 1)? "s": "");
 			                                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#512: FILE: drivers/parport/parport_ip32.c:427:
+			       ((cnfgA & CNFGA_PWORDLEFT) > 1)? "s": "");
 			                                           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#514: FILE: drivers/parport/parport_ip32.c:429:
+		printk("\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#515: FILE: drivers/parport/parport_ip32.c:430:
+		printk(KERN_DEBUG PPIP32 "    cnfgB=0x%02x", cnfgB);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#516: FILE: drivers/parport/parport_ip32.c:431:
+		printk(" irq=%u,dma=%u",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#519: FILE: drivers/parport/parport_ip32.c:434:
+		printk(",intrValue=%d", !!(cnfgB & CNFGB_INTRVAL));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#520: FILE: drivers/parport/parport_ip32.c:435:
+		if (cnfgB & CNFGB_COMPRESS)	printk(",compress");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#520: FILE: drivers/parport/parport_ip32.c:435:
+		if (cnfgB & CNFGB_COMPRESS)	printk(",compress");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#521: FILE: drivers/parport/parport_ip32.c:436:
+		printk("\n");

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#525: FILE: drivers/parport/parport_ip32.c:440:
+			i? priv->dcr_cache: parport_ip32_in(priv->regs.dcr);
 			 ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#525: FILE: drivers/parport/parport_ip32.c:440:
+			i? priv->dcr_cache: parport_ip32_in(priv->regs.dcr);
 			                  ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#526: FILE: drivers/parport/parport_ip32.c:441:
+		printk(KERN_DEBUG PPIP32 "    dcr(%s)=0x%02x",

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#527: FILE: drivers/parport/parport_ip32.c:442:
+		       i? "soft": "hard", dcr);
 		        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#527: FILE: drivers/parport/parport_ip32.c:442:
+		       i? "soft": "hard", dcr);
 		                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#528: FILE: drivers/parport/parport_ip32.c:443:
+		printk(" %s", (dcr & DCR_DIR)? "rev": "fwd");

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#528: FILE: drivers/parport/parport_ip32.c:443:
+		printk(" %s", (dcr & DCR_DIR)? "rev": "fwd");
 		                             ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#528: FILE: drivers/parport/parport_ip32.c:443:
+		printk(" %s", (dcr & DCR_DIR)? "rev": "fwd");
 		                                    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#529: FILE: drivers/parport/parport_ip32.c:444:
+		if (dcr & DCR_IRQ)		printk(",ackIntEn");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#529: FILE: drivers/parport/parport_ip32.c:444:
+		if (dcr & DCR_IRQ)		printk(",ackIntEn");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#530: FILE: drivers/parport/parport_ip32.c:445:
+		if (!(dcr & DCR_SELECT))	printk(",nSelectIn");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#530: FILE: drivers/parport/parport_ip32.c:445:
+		if (!(dcr & DCR_SELECT))	printk(",nSelectIn");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#531: FILE: drivers/parport/parport_ip32.c:446:
+		if (dcr & DCR_nINIT)		printk(",nInit");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#531: FILE: drivers/parport/parport_ip32.c:446:
+		if (dcr & DCR_nINIT)		printk(",nInit");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#532: FILE: drivers/parport/parport_ip32.c:447:
+		if (!(dcr & DCR_AUTOFD))	printk(",nAutoFD");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#532: FILE: drivers/parport/parport_ip32.c:447:
+		if (!(dcr & DCR_AUTOFD))	printk(",nAutoFD");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#533: FILE: drivers/parport/parport_ip32.c:448:
+		if (!(dcr & DCR_STROBE))	printk(",nStrobe");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#533: FILE: drivers/parport/parport_ip32.c:448:
+		if (!(dcr & DCR_STROBE))	printk(",nStrobe");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#534: FILE: drivers/parport/parport_ip32.c:449:
+		printk("\n");

ERROR:SPACING: spaces required around that '?' (ctx:OxW)
#536: FILE: drivers/parport/parport_ip32.c:451:
+#define sep (f++? ',': ' ')
                 ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#536: FILE: drivers/parport/parport_ip32.c:451:
+#define sep (f++? ',': ' ')
                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#540: FILE: drivers/parport/parport_ip32.c:455:
+		unsigned int dsr = parport_ip32_in(priv->regs.dsr);
+		printk(KERN_DEBUG PPIP32 "    dsr=0x%02x", dsr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#540: FILE: drivers/parport/parport_ip32.c:455:
+		printk(KERN_DEBUG PPIP32 "    dsr=0x%02x", dsr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#541: FILE: drivers/parport/parport_ip32.c:456:
+		if (!(dsr & DSR_nBUSY))		printk("%cBusy", sep);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#541: FILE: drivers/parport/parport_ip32.c:456:
+		if (!(dsr & DSR_nBUSY))		printk("%cBusy", sep);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#542: FILE: drivers/parport/parport_ip32.c:457:
+		if (dsr & DSR_nACK)		printk("%cnAck", sep);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#542: FILE: drivers/parport/parport_ip32.c:457:
+		if (dsr & DSR_nACK)		printk("%cnAck", sep);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#543: FILE: drivers/parport/parport_ip32.c:458:
+		if (dsr & DSR_PERROR)		printk("%cPError", sep);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#543: FILE: drivers/parport/parport_ip32.c:458:
+		if (dsr & DSR_PERROR)		printk("%cPError", sep);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#544: FILE: drivers/parport/parport_ip32.c:459:
+		if (dsr & DSR_SELECT)		printk("%cSelect", sep);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#544: FILE: drivers/parport/parport_ip32.c:459:
+		if (dsr & DSR_SELECT)		printk("%cSelect", sep);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#545: FILE: drivers/parport/parport_ip32.c:460:
+		if (dsr & DSR_nFAULT)		printk("%cnFault", sep);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#545: FILE: drivers/parport/parport_ip32.c:460:
+		if (dsr & DSR_nFAULT)		printk("%cnFault", sep);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#546: FILE: drivers/parport/parport_ip32.c:461:
+		if (!(dsr & DSR_nPRINT))	printk("%c(Print)", sep);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#546: FILE: drivers/parport/parport_ip32.c:461:
+		if (!(dsr & DSR_nPRINT))	printk("%c(Print)", sep);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#547: FILE: drivers/parport/parport_ip32.c:462:
+		if (dsr & DSR_TIMEOUT)		printk("%cTimeout", sep);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#547: FILE: drivers/parport/parport_ip32.c:462:
+		if (dsr & DSR_TIMEOUT)		printk("%cTimeout", sep);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#548: FILE: drivers/parport/parport_ip32.c:463:
+		printk("\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#602: FILE: drivers/parport/parport_ip32.c:517:
+};
+static struct parport_ip32_dma_data parport_ip32_dma;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#616: FILE: drivers/parport/parport_ip32.c:531:
+		 * early return. */

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#620: FILE: drivers/parport/parport_ip32.c:535:
+		volatile u64 __iomem *ctxreg = (parport_ip32_dma.ctx == 0)?
 		                                                          ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#620: FILE: drivers/parport/parport_ip32.c:535:
+		volatile u64 __iomem *ctxreg = (parport_ip32_dma.ctx == 0)?

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#621: FILE: drivers/parport/parport_ip32.c:536:
+			&mace->perif.ctrl.parport.context_a:
 			                                   ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#625: FILE: drivers/parport/parport_ip32.c:540:
+		u64 ctxval;
+		if (parport_ip32_dma.left <= limit) {

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#639: FILE: drivers/parport/parport_ip32.c:554:
+			 parport_ip32_dma.ctx, ctxval? "*": "");
 			                             ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#639: FILE: drivers/parport/parport_ip32.c:554:
+			 parport_ip32_dma.ctx, ctxval? "*": "");
 			                                  ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#646: FILE: drivers/parport/parport_ip32.c:561:
+		wmb();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#653: FILE: drivers/parport/parport_ip32.c:568:
+	 * only once. */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#655: FILE: drivers/parport/parport_ip32.c:570:
+	if (parport_ip32_dma.left == 0
+	    && !down_trylock(&parport_ip32_dma.noirq)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#704: FILE: drivers/parport/parport_ip32.c:619:
+	 * be 64 bytes aligned. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#705: FILE: drivers/parport/parport_ip32.c:620:
+	BUG_ON(dir != DMA_TO_DEVICE);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:MEMORY_BARRIER: memory barrier without comment
#710: FILE: drivers/parport/parport_ip32.c:625:
+	wmb();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#714: FILE: drivers/parport/parport_ip32.c:629:
+		 * interrupts anyway. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#715: FILE: drivers/parport/parport_ip32.c:630:
+		printk(KERN_DEBUG PPIP32 "enabling DMA interrupts\n");

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#731: FILE: drivers/parport/parport_ip32.c:646:
+	ctrl = (dir == DMA_TO_DEVICE)? 0: MACEPAR_CTLSTAT_DIRECTION;
 	                             ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#731: FILE: drivers/parport/parport_ip32.c:646:
+	ctrl = (dir == DMA_TO_DEVICE)? 0: MACEPAR_CTLSTAT_DIRECTION;
 	                                ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#733: FILE: drivers/parport/parport_ip32.c:648:
+	wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#743: FILE: drivers/parport/parport_ip32.c:658:
+	wmb();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#771: FILE: drivers/parport/parport_ip32.c:686:
+	 * elsewhere. */

WARNING:MEMORY_BARRIER: memory barrier without comment
#779: FILE: drivers/parport/parport_ip32.c:694:
+	wmb();

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#786: FILE: drivers/parport/parport_ip32.c:701:
+	res[0] = (ctrl & MACEPAR_CTLSTAT_CTXA_VALID)?
 	                                            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#788: FILE: drivers/parport/parport_ip32.c:703:
+		     MACEPAR_CONTEXT_DATALEN_SHIFT):
 		                                   ^

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#790: FILE: drivers/parport/parport_ip32.c:705:
+	res[1] = (ctrl & MACEPAR_CTLSTAT_CTXB_VALID)?
 	                                            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#792: FILE: drivers/parport/parport_ip32.c:707:
+		     MACEPAR_CONTEXT_DATALEN_SHIFT):
 		                                   ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#804: FILE: drivers/parport/parport_ip32.c:719:
+	wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#833: FILE: drivers/parport/parport_ip32.c:748:
+	wmb();

WARNING:LINE_SPACING: Missing a blank line after declarations
#886: FILE: drivers/parport/parport_ip32.c:801:
+	struct parport_ip32_private * const priv = p->physport->private_data;
+	complete(&priv->irq_complete);

WARNING:LINE_SPACING: Missing a blank line after declarations
#901: FILE: drivers/parport/parport_ip32.c:816:
+	enum parport_ip32_irq_mode irq_mode = priv->irq_mode;
+	barrier();		/* ensures that priv->irq_mode is read */

WARNING:LINE_SPACING: Missing a blank line after declarations
#919: FILE: drivers/parport/parport_ip32.c:834:
+	struct parport * const p = (struct parport *)data;
+	parport_ip32_wakeup(p);

WARNING:LINE_SPACING: Missing a blank line after declarations
#931: FILE: drivers/parport/parport_ip32.c:846:
+	struct parport_ip32_private * const priv = p->physport->private_data;
+	return parport_ip32_in(priv->regs.ecr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#943: FILE: drivers/parport/parport_ip32.c:858:
+	struct parport_ip32_private * const priv = p->physport->private_data;
+	parport_ip32_out(c, priv->regs.ecr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#960: FILE: drivers/parport/parport_ip32.c:875:
+	unsigned int c;
+	c = (parport_ip32_read_econtrol(p) & ~mask) ^ val;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#980: FILE: drivers/parport/parport_ip32.c:895:
+	if (!(mode == ECR_MODE_SPP || mode == ECR_MODE_PS2
+	      || omode == ECR_MODE_SPP || omode == ECR_MODE_PS2)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#983: FILE: drivers/parport/parport_ip32.c:898:
+		unsigned int ecr = ECR_MODE_PS2 | ECR_nERRINTR | ECR_SERVINTR;
+		parport_ip32_write_econtrol(p, ecr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#997: FILE: drivers/parport/parport_ip32.c:912:
+	struct parport_ip32_private * const priv = p->physport->private_data;
+	return parport_ip32_in(priv->regs.data);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1008: FILE: drivers/parport/parport_ip32.c:923:
+	struct parport_ip32_private * const priv = p->physport->private_data;
+	parport_ip32_out(d, priv->regs.data);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1018: FILE: drivers/parport/parport_ip32.c:933:
+	struct parport_ip32_private * const priv = p->physport->private_data;
+	return parport_ip32_in(priv->regs.dsr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1028: FILE: drivers/parport/parport_ip32.c:943:
+	struct parport_ip32_private * const priv = p->physport->private_data;
+	return priv->dcr_cache; /* use soft copy */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1054: FILE: drivers/parport/parport_ip32.c:969:
+	struct parport_ip32_private * const priv = p->physport->private_data;
+	CHECK_EXTRA_BITS(p, c, priv->dcr_writable);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1075: FILE: drivers/parport/parport_ip32.c:990:
+	unsigned int c;
+	c = (__parport_ip32_read_control(p) & ~mask) ^ val;

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#1218: FILE: drivers/parport/parport_ip32.c:1133:
+	pr_trace(p, "(): %s", cleared? "cleared": "failed");
 	                             ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1218: FILE: drivers/parport/parport_ip32.c:1133:
+	pr_trace(p, "(): %s", cleared? "cleared": "failed");
 	                                        ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1236: FILE: drivers/parport/parport_ip32.c:1151:
+	size_t got;
+	parport_ip32_set_mode(p, ECR_MODE_EPP);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len > 1'
#1239: FILE: drivers/parport/parport_ip32.c:1154:
+	if ((flags & PARPORT_EPP_FAST) && (len > 1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LINE_SPACING: Missing a blank line after declarations
#1248: FILE: drivers/parport/parport_ip32.c:1163:
+		u8 *bufp = buf;
+		for (got = 0; got < len; got++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1275: FILE: drivers/parport/parport_ip32.c:1190:
+	size_t written;
+	parport_ip32_set_mode(p, ECR_MODE_EPP);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len > 1'
#1278: FILE: drivers/parport/parport_ip32.c:1193:
+	if ((flags & PARPORT_EPP_FAST) && (len > 1)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1287: FILE: drivers/parport/parport_ip32.c:1202:
+		const u8 *bufp = buf;
+		for (written = 0; written < len; written++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1306: FILE: drivers/parport/parport_ip32.c:1221:
+	struct parport_ip32_private * const priv = p->physport->private_data;
+	return parport_ip32_epp_read(priv->regs.eppData0, p, buf, len, flags);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1316: FILE: drivers/parport/parport_ip32.c:1231:
+	struct parport_ip32_private * const priv = p->physport->private_data;
+	return parport_ip32_epp_write(priv->regs.eppData0, p, buf, len, flags);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1326: FILE: drivers/parport/parport_ip32.c:1241:
+	struct parport_ip32_private * const priv = p->physport->private_data;
+	return parport_ip32_epp_read(priv->regs.eppAddr, p, buf, len, flags);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1336: FILE: drivers/parport/parport_ip32.c:1251:
+	struct parport_ip32_private * const priv = p->physport->private_data;
+	return parport_ip32_epp_write(priv->regs.eppAddr, p, buf, len, flags);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1358: FILE: drivers/parport/parport_ip32.c:1273:
+		printk(KERN_DEBUG PPIP32

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1363: FILE: drivers/parport/parport_ip32.c:1278:
+		printk(KERN_DEBUG PPIP32

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1368: FILE: drivers/parport/parport_ip32.c:1283:
+		printk(KERN_DEBUG PPIP32

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1400: FILE: drivers/parport/parport_ip32.c:1315:
+		 * the chip gets confused if we give it another byte. */

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1425: FILE: drivers/parport/parport_ip32.c:1340:
+	static unsigned int lost_interrupt = 0;

WARNING:MINMAX: min() should probably be min_t(unsigned long, physport->cad->timeout, msecs_to_jiffies(FIFO_NFAULT_TIMEOUT))
#1434: FILE: drivers/parport/parport_ip32.c:1349:
+	nfault_timeout = min((unsigned long)physport->cad->timeout,
 			     msecs_to_jiffies(FIFO_NFAULT_TIMEOUT));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1450: FILE: drivers/parport/parport_ip32.c:1365:
+		 * now. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1454: FILE: drivers/parport/parport_ip32.c:1369:
+			 * timeout to occur */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1460: FILE: drivers/parport/parport_ip32.c:1375:
+			if ((ecr & ECR_F_EMPTY) && !(ecr & ECR_SERVINTR)
+			    && !lost_interrupt) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1461: FILE: drivers/parport/parport_ip32.c:1376:
+				printk(KERN_WARNING PPIP32

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1478: FILE: drivers/parport/parport_ip32.c:1393:
+			 * writeIntrThreshold bytes into it */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1485: FILE: drivers/parport/parport_ip32.c:1400:
+		 * parport_ip32_fifo_wait_break(), so we continue the loop. */

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#1514: FILE: drivers/parport/parport_ip32.c:1429:
+		count = (p->irq == PARPORT_IRQ_NONE)?
 		                                    ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#1515: FILE: drivers/parport/parport_ip32.c:1430:
+			parport_ip32_fwp_wait_polling(p):
 			                                ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1521: FILE: drivers/parport/parport_ip32.c:1436:
+		if (count > left) {
+			count = left;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_COMMA_SEMICOLON: Possible comma where semicolon could be used
#1529: FILE: drivers/parport/parport_ip32.c:1444:
+			bufp += count, left -= count;

WARNING:MINMAX: min() should probably be min_t(unsigned long, physport->cad->timeout, msecs_to_jiffies(FIFO_NFAULT_TIMEOUT))
#1566: FILE: drivers/parport/parport_ip32.c:1481:
+	nfault_timeout = min((unsigned long)physport->cad->timeout,
 			     msecs_to_jiffies(FIFO_NFAULT_TIMEOUT));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1603: FILE: drivers/parport/parport_ip32.c:1518:
+	size_t written = 0;
+	if (len) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1605: FILE: drivers/parport/parport_ip32.c:1520:
+		 * under which we revert to PIO mode? */

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#1606: FILE: drivers/parport/parport_ip32.c:1521:
+		written = (p->modes & PARPORT_MODE_DMA)?
 		                                       ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#1607: FILE: drivers/parport/parport_ip32.c:1522:
+			parport_ip32_fifo_write_block_dma(p, buf, len):
 			                                              ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1639: FILE: drivers/parport/parport_ip32.c:1554:
+	 * increased exponentially until 128.  */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1647: FILE: drivers/parport/parport_ip32.c:1562:
+		if (polling_interval < 128) {
+			polling_interval *= 2;
+		}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1677: FILE: drivers/parport/parport_ip32.c:1592:
+		printk(KERN_DEBUG PPIP32 "%s: FIFO is stuck\n", p->name);

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#1703: FILE: drivers/parport/parport_ip32.c:1618:
+			  (residue == 1)? " was": "s were");
 			                ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1703: FILE: drivers/parport/parport_ip32.c:1618:
+			  (residue == 1)? " was": "s were");
 			                        ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1737: FILE: drivers/parport/parport_ip32.c:1652:
+	 * PWord != 1 byte. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1763: FILE: drivers/parport/parport_ip32.c:1678:
+	 * Also if O_NONBLOCK is set then use the default implementation. */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1764: FILE: drivers/parport/parport_ip32.c:1679:
+	if (physport->cad->timeout <= PARPORT_INACTIVITY_O_NONBLOCK) {
+		return parport_ieee1284_write_compat(p, buf, len, flags);
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1778: FILE: drivers/parport/parport_ip32.c:1693:
+	if (parport_wait_peripheral(p, DSR_nBUSY | DSR_nFAULT,
+				       DSR_nBUSY | DSR_nFAULT)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1781: FILE: drivers/parport/parport_ip32.c:1696:
+			printk(KERN_DEBUG PPIP32 "%s: not ready in %s\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1799: FILE: drivers/parport/parport_ip32.c:1714:
+		printk(KERN_DEBUG PPIP32 "%s: BUSY timeout in %s\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1832: FILE: drivers/parport/parport_ip32.c:1747:
+	 * Also if O_NONBLOCK is set then use the default implementation. */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1833: FILE: drivers/parport/parport_ip32.c:1748:
+	if (physport->cad->timeout <= PARPORT_INACTIVITY_O_NONBLOCK) {
+		return parport_ieee1284_ecp_write_data(p, buf, len, flags);
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1841: FILE: drivers/parport/parport_ip32.c:1756:
+		parport_ip32_frob_control(p, DCR_nINIT | DCR_AUTOFD,
+					     DCR_nINIT | DCR_AUTOFD);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1844: FILE: drivers/parport/parport_ip32.c:1759:
+		if (parport_wait_peripheral (p, DSR_PERROR, DSR_PERROR)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1845: FILE: drivers/parport/parport_ip32.c:1760:
+			printk (KERN_DEBUG PPIP32 "%s: PError timeout in %s",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1845: FILE: drivers/parport/parport_ip32.c:1760:
+			printk (KERN_DEBUG PPIP32 "%s: PError timeout in %s",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1862: FILE: drivers/parport/parport_ip32.c:1777:
+	if (parport_wait_peripheral(p, DSR_nBUSY | DSR_nFAULT,
+				       DSR_nBUSY | DSR_nFAULT)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1865: FILE: drivers/parport/parport_ip32.c:1780:
+			printk(KERN_INFO PPIP32 "%s: not ready in %s\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1883: FILE: drivers/parport/parport_ip32.c:1798:
+		printk(KERN_DEBUG PPIP32 "%s: BUSY timeout in %s\n",

WARNING:MISPLACED_INIT: __initdata should be placed after parport_ip32_ops
#1901: FILE: drivers/parport/parport_ip32.c:1816:
+static __initdata struct parport_operations parport_ip32_ops = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2009: FILE: drivers/parport/parport_ip32.c:1924:
+	case CNFGA_ID_8:	pword = 1; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2010: FILE: drivers/parport/parport_ip32.c:1925:
+	case CNFGA_ID_16:	pword = 2; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2011: FILE: drivers/parport/parport_ip32.c:1926:
+	case CNFGA_ID_32:	pword = 4; break;

WARNING:UNNECESSARY_BREAK: break is not useful after a goto
#2016: FILE: drivers/parport/parport_ip32.c:1931:
+		goto fail;
+		break;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2027: FILE: drivers/parport/parport_ip32.c:1942:
+	if (parport_ip32_in(priv->regs.cnfgB) & CNFGB_COMPRESS) {
+		pr_probe(p, "Hardware compression detected (unsupported)\n");
+	}

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2065: FILE: drivers/parport/parport_ip32.c:1980:
+	 * if we get an interrupt. */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2073: FILE: drivers/parport/parport_ip32.c:1988:
+		if (!priv->writeIntrThreshold
+		    && parport_ip32_in(priv->regs.ecr) & ECR_SERVINTR) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2078: FILE: drivers/parport/parport_ip32.c:1993:
+		if (i + 1 < priv->fifo_depth
+		    && parport_ip32_in(priv->regs.ecr) & ECR_F_EMPTY) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2106: FILE: drivers/parport/parport_ip32.c:2021:
+	 * an interrupt. */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2111: FILE: drivers/parport/parport_ip32.c:2026:
+		if (!priv->readIntrThreshold
+		    && parport_ip32_in(priv->regs.ecr) & ECR_SERVINTR) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ops)...) over kmalloc(sizeof(struct parport_operations)...)
#2190: FILE: drivers/parport/parport_ip32.c:2105:
+	ops = kmalloc(sizeof(struct parport_operations), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*priv)...) over kmalloc(sizeof(struct parport_ip32_private)...)
#2191: FILE: drivers/parport/parport_ip32.c:2106:
+	priv = kmalloc(sizeof(struct parport_ip32_private), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ops"
#2193: FILE: drivers/parport/parport_ip32.c:2108:
+	if (ops == NULL || priv == NULL || p == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!priv"
#2193: FILE: drivers/parport/parport_ip32.c:2108:
+	if (ops == NULL || priv == NULL || p == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#2193: FILE: drivers/parport/parport_ip32.c:2108:
+	if (ops == NULL || priv == NULL || p == NULL) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2215: FILE: drivers/parport/parport_ip32.c:2130:
+	parport_ip32_dump_state (p, "begin init", 0);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2218: FILE: drivers/parport/parport_ip32.c:2133:
+	 * that all modes are correctly supported.  Enable basic modes. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2223: FILE: drivers/parport/parport_ip32.c:2138:
+		printk(KERN_WARNING PPIP32

WARNING:LINE_SPACING: Missing a blank line after declarations
#2235: FILE: drivers/parport/parport_ip32.c:2150:
+		int irq = MACEISA_PARALLEL_IRQ;
+		if (request_irq(irq, parport_ip32_interrupt, 0, p->name, p)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2236: FILE: drivers/parport/parport_ip32.c:2151:
+			printk(KERN_WARNING PPIP32

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2250: FILE: drivers/parport/parport_ip32.c:2165:
+			printk(KERN_WARNING PPIP32

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2290: FILE: drivers/parport/parport_ip32.c:2205:
+	parport_ip32_dump_state (p, "end init", 0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2293: FILE: drivers/parport/parport_ip32.c:2208:
+	printk(KERN_INFO "%s: SGI IP32 at 0x%lx (0x%lx)",

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2295: FILE: drivers/parport/parport_ip32.c:2210:
+	if (p->irq != PARPORT_IRQ_NONE) {
+		printk(", irq %d", p->irq);
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2296: FILE: drivers/parport/parport_ip32.c:2211:
+		printk(", irq %d", p->irq);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2298: FILE: drivers/parport/parport_ip32.c:2213:
+	printk(" [");

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#2299: FILE: drivers/parport/parport_ip32.c:2214:
+#define printmode(x)	if (p->modes & PARPORT_MODE_##x)		\
+				printk("%s%s", f++? ",": "", #x)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2300: FILE: drivers/parport/parport_ip32.c:2215:
+				printk("%s%s", f++? ",": "", #x)

ERROR:SPACING: spaces required around that '?' (ctx:OxW)
#2300: FILE: drivers/parport/parport_ip32.c:2215:
+				printk("%s%s", f++? ",": "", #x)
 				                  ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2300: FILE: drivers/parport/parport_ip32.c:2215:
+				printk("%s%s", f++? ",": "", #x)
 				                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2303: FILE: drivers/parport/parport_ip32.c:2218:
+		unsigned int f = 0;
+		printmode(PCSPP);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2311: FILE: drivers/parport/parport_ip32.c:2226:
+	printk("]\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2317: FILE: drivers/parport/parport_ip32.c:2232:
+	if (p) {
+		parport_put_port(p);
+	}

ERROR:DATE_TIME: Use of the '__DATE__' macro makes the build non-deterministic
#2353: FILE: drivers/parport/parport_ip32.c:2268:
+	pr_debug1(PPIP32 "Compiled on %s, %s\n", __DATE__, __TIME__);

It is generally desirable that building the same source code with
the same set of tools is reproducible, i.e. the output is always
exactly the same.

The kernel does *not* use the ``__DATE__`` and ``__TIME__`` macros,
and enables warnings if they are used as they can lead to
non-deterministic builds.

See: https://www.kernel.org/doc/html/latest/kbuild/reproducible-builds.html#timestamps

ERROR:DATE_TIME: Use of the '__TIME__' macro makes the build non-deterministic
#2353: FILE: drivers/parport/parport_ip32.c:2268:
+	pr_debug1(PPIP32 "Compiled on %s, %s\n", __DATE__, __TIME__);

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#2355: FILE: drivers/parport/parport_ip32.c:2270:
+	return IS_ERR(this_port)? PTR_ERR(this_port): 0;
 	                        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2355: FILE: drivers/parport/parport_ip32.c:2270:
+	return IS_ERR(this_port)? PTR_ERR(this_port): 0;
 	                                            ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2376: FILE: drivers/parport/parport_ip32.c:2291:
+module_param(verbose_probing, bool, S_IRUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2379: FILE: drivers/parport/parport_ip32.c:2294:
+module_param(features, uint, S_IRUGO);

WARNING:SPLIT_STRING: quoted string split across lines
#2382: FILE: drivers/parport/parport_ip32.c:2297:
+		 "Bit mask of features to enable"
+		 ", bit 0: IRQ support"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#2383: FILE: drivers/parport/parport_ip32.c:2298:
+		 ", bit 0: IRQ support"
+		 ", bit 1: DMA support"

WARNING:SPLIT_STRING: quoted string split across lines
#2384: FILE: drivers/parport/parport_ip32.c:2299:
+		 ", bit 1: DMA support"
+		 ", bit 2: hardware SPP mode"

WARNING:SPLIT_STRING: quoted string split across lines
#2385: FILE: drivers/parport/parport_ip32.c:2300:
+		 ", bit 2: hardware SPP mode"
+		 ", bit 3: hardware EPP mode"

WARNING:SPLIT_STRING: quoted string split across lines
#2386: FILE: drivers/parport/parport_ip32.c:2301:
+		 ", bit 3: hardware EPP mode"
+		 ", bit 4: hardware ECP mode");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000117710.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 72 errors, 150 warnings, 62 checks, 2350 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000117710.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
