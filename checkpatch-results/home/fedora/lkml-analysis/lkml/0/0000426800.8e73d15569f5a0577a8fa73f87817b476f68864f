ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#59: 
--- a/drivers/scsi/scsi_debug.c	Fri Oct  4 07:53:21 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host>
#70: FILE: drivers/scsi/scsi_debug.c:115:
+	struct Scsi_Host *host;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#81: FILE: drivers/scsi/scsi_debug.c:161:
+static struct sdebug_dev_info * devInfoReg(Scsi_Cmnd *scmd);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <devInfoReg>
#81: FILE: drivers/scsi/scsi_debug.c:161:
+static struct sdebug_dev_info * devInfoReg(Scsi_Cmnd *scmd);

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Cmnd>
#81: FILE: drivers/scsi/scsi_debug.c:161:
+static struct sdebug_dev_info * devInfoReg(Scsi_Cmnd *scmd);

CHECK:CAMELCASE: Avoid CamelCase: <SCpnt>
#90: FILE: drivers/scsi/scsi_debug.c:229:
+	if (SCpnt->lun != 0)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#107: FILE: drivers/scsi/scsi_debug.c:238:
+	if (NULL == devip)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#108: FILE: drivers/scsi/scsi_debug.c:239:
+^I^Ireturn schedule_resp(SCpnt, NULL, done, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#119: FILE: drivers/scsi/scsi_debug.c:477:
+^I^Idev_id_num = ((devip->host->host_no + 1) * 1000) + $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#129: FILE: drivers/scsi/scsi_debug.c:873:
+static struct sdebug_dev_info * devInfoReg(Scsi_Cmnd *scmd)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'devip->channel == scmd->channel'
#137: FILE: drivers/scsi/scsi_debug.c:880:
+		if ((devip->channel == scmd->channel) &&
+		    (devip->target == scmd->target) &&
+		    (devip->lun == scmd->lun) &&
+		    (devip->host == scmd->host))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'devip->target == scmd->target'
#137: FILE: drivers/scsi/scsi_debug.c:880:
+		if ((devip->channel == scmd->channel) &&
+		    (devip->target == scmd->target) &&
+		    (devip->lun == scmd->lun) &&
+		    (devip->host == scmd->host))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'devip->lun == scmd->lun'
#137: FILE: drivers/scsi/scsi_debug.c:880:
+		if ((devip->channel == scmd->channel) &&
+		    (devip->target == scmd->target) &&
+		    (devip->lun == scmd->lun) &&
+		    (devip->host == scmd->host))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'devip->host == scmd->host'
#137: FILE: drivers/scsi/scsi_debug.c:880:
+		if ((devip->channel == scmd->channel) &&
+		    (devip->target == scmd->target) &&
+		    (devip->lun == scmd->lun) &&
+		    (devip->host == scmd->host))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#163: FILE: drivers/scsi/scsi_debug.c:944:
+	struct sdebug_dev_info * devip;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#187: FILE: drivers/scsi/scsi_debug.c:966:
+	if (SCpnt && ((sdp = SCpnt->device)) && ((hp = SCpnt->host))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:CAMELCASE: Avoid CamelCase: <devInfop>
#190: FILE: drivers/scsi/scsi_debug.c:968:
+			if (hp == devInfop[k].host)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000426800.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 1 warnings, 9 checks, 125 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000426800.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
