WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#48: FILE: arch/s390/mm/extmem.c:2:
+ * File...........: arch/s390/mm/extmem.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#50: FILE: arch/s390/mm/extmem.c:4:
+ * ^I^I    Rob M van der Heij <rvdheij@nl.ibm.com>$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#51: FILE: arch/s390/mm/extmem.c:5:
+ * ^I^I    Steven Shultz <shultzss@us.ibm.com>$

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#111: FILE: arch/s390/mm/extmem.c:85:
+static void inline

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

CHECK:LINE_SPACING: Please don't use multiple blank lines
#135: FILE: arch/s390/mm/extmem.c:100:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#141: FILE: arch/s390/mm/extmem.c:106:
+segment_by_name (char *name)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#147: FILE: arch/s390/mm/extmem.c:112:
+	BUG_ON (!spin_is_locked(&dcss_lock));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#147: FILE: arch/s390/mm/extmem.c:112:
+	BUG_ON (!spin_is_locked(&dcss_lock));

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#147: FILE: arch/s390/mm/extmem.c:112:
+	BUG_ON (!spin_is_locked(&dcss_lock));

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#148: FILE: arch/s390/mm/extmem.c:113:
+	dcss_mkname (name, dcss_name);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#149: FILE: arch/s390/mm/extmem.c:114:
+	list_for_each (l, &dcss_list) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#150: FILE: arch/s390/mm/extmem.c:115:
+		tmp = list_entry (l, struct dcss_segment, list);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#159: FILE: arch/s390/mm/extmem.c:124:
+
+

CHECK:SPACING: No space is necessary after a cast
#175: FILE: arch/s390/mm/extmem.c:135:
+	rx = (unsigned long) parameter;

CHECK:SPACING: No space is necessary after a cast
#176: FILE: arch/s390/mm/extmem.c:136:
+	ry = (unsigned long) func;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#177: FILE: arch/s390/mm/extmem.c:137:
+	__asm__ __volatile__(

ERROR:SPACING: space prohibited before that close parenthesis ')'
#197: FILE: arch/s390/mm/extmem.c:147:
+		: "+d" (rx), "+d" (ry), "=d" (rc) : : "cc" );

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#207: FILE: arch/s390/mm/extmem.c:154:
+dcss_diag_translate_rc (int vm_rc) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#213: FILE: arch/s390/mm/extmem.c:160:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#218: FILE: arch/s390/mm/extmem.c:165:
+query_segment_info (struct dcss_segment *seg)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#222: FILE: arch/s390/mm/extmem.c:167:
+	struct qin64  *qin = kmalloc (sizeof(struct qin64), GFP_DMA);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*qin)...) over kmalloc(sizeof(struct qin64)...)
#222: FILE: arch/s390/mm/extmem.c:167:
+	struct qin64  *qin = kmalloc (sizeof(struct qin64), GFP_DMA);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#223: FILE: arch/s390/mm/extmem.c:168:
+	struct qout64 *qout = kmalloc (sizeof(struct qout64), GFP_DMA);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*qout)...) over kmalloc(sizeof(struct qout64)...)
#223: FILE: arch/s390/mm/extmem.c:168:
+	struct qout64 *qout = kmalloc (sizeof(struct qout64), GFP_DMA);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'qin == NULL'
#337: FILE: arch/s390/mm/extmem.c:173:
+	if ((qin == NULL) || (qout == NULL)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'qout == NULL'
#337: FILE: arch/s390/mm/extmem.c:173:
+	if ((qin == NULL) || (qout == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qin"
#337: FILE: arch/s390/mm/extmem.c:173:
+	if ((qin == NULL) || (qout == NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qout"
#337: FILE: arch/s390/mm/extmem.c:173:
+	if ((qin == NULL) || (qout == NULL)) {

CHECK:SPACING: No space is necessary after a cast
#344: FILE: arch/s390/mm/extmem.c:180:
+	qin->qoutptr = (unsigned long) qout;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#346: FILE: arch/s390/mm/extmem.c:182:
+	memcpy (qin->qname, seg->dcss_name, 8);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#348: FILE: arch/s390/mm/extmem.c:184:
+	diag_cc = dcss_diag (DCSS_SEGEXT, qin, &dummy, &vmrc);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#351: FILE: arch/s390/mm/extmem.c:187:
+		rc = dcss_diag_translate_rc (vmrc);

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#356: FILE: arch/s390/mm/extmem.c:192:
+		rc = -ENOTSUPP;

ENOTSUPP is not a standard error code and should be avoided in new patches.
EOPNOTSUPP should be used instead.

See: https://lore.kernel.org/netdev/20200510182252.GA411829@lunn.ch/

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#369: FILE: arch/s390/mm/extmem.c:205:
+	if (qin) kfree(qin);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#370: FILE: arch/s390/mm/extmem.c:206:
+	if (qout) kfree(qout);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#383: FILE: arch/s390/mm/extmem.c:219:
+	for (i=0; i < MEMORY_CHUNKS && memory_chunk[i].size > 0; i++) {
 	      ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#401: FILE: arch/s390/mm/extmem.c:237:
+segment_overlaps_others (struct dcss_segment *seg)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#406: FILE: arch/s390/mm/extmem.c:242:
+	BUG_ON (!spin_is_locked(&dcss_lock));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#406: FILE: arch/s390/mm/extmem.c:242:
+	BUG_ON (!spin_is_locked(&dcss_lock));

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#406: FILE: arch/s390/mm/extmem.c:242:
+	BUG_ON (!spin_is_locked(&dcss_lock));

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#432: FILE: arch/s390/mm/extmem.c:268:
+segment_info (char* name)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#432: FILE: arch/s390/mm/extmem.c:268:
+segment_info (char* name)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#438: FILE: arch/s390/mm/extmem.c:274:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#441: FILE: arch/s390/mm/extmem.c:277:
+	rc = query_segment_info (&seg);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#451: FILE: arch/s390/mm/extmem.c:287:
+__segment_load (char *name, int do_nonshared, unsigned long *addr, unsigned long *end)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*seg)...) over kmalloc(sizeof(struct dcss_segment)...)
#453: FILE: arch/s390/mm/extmem.c:289:
+	struct dcss_segment *seg = kmalloc(sizeof(struct dcss_segment),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!seg"
#457: FILE: arch/s390/mm/extmem.c:293:
+	if (seg == NULL) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#461: FILE: arch/s390/mm/extmem.c:297:
+	dcss_mkname (name, seg->dcss_name);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#462: FILE: arch/s390/mm/extmem.c:298:
+	rc = query_segment_info (seg);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#466: FILE: arch/s390/mm/extmem.c:302:
+		PRINT_WARN ("segment_load: not loading segment %s - overlaps"

ERROR:SPACING: space required after that ',' (ctx:VxV)
#467: FILE: arch/s390/mm/extmem.c:303:
+				" storage\n",name);
 				            ^

WARNING:SPLIT_STRING: quoted string split across lines
#467: FILE: arch/s390/mm/extmem.c:303:
+		PRINT_WARN ("segment_load: not loading segment %s - overlaps"
+				" storage\n",name);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#472: FILE: arch/s390/mm/extmem.c:308:
+		PRINT_WARN ("segment_load: not loading segment %s - overlaps"

ERROR:SPACING: space required after that ',' (ctx:VxV)
#473: FILE: arch/s390/mm/extmem.c:309:
+				" other segments\n",name);
 				                   ^

WARNING:SPLIT_STRING: quoted string split across lines
#473: FILE: arch/s390/mm/extmem.c:309:
+		PRINT_WARN ("segment_load: not loading segment %s - overlaps"
+				" other segments\n",name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#483: FILE: arch/s390/mm/extmem.c:319:
+	diag_cc = dcss_diag(dcss_command, seg->dcss_name,
+			&seg->start_addr, &seg->end);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#485: FILE: arch/s390/mm/extmem.c:321:
+		PRINT_WARN ("segment_load: could not load segment %s - "

ERROR:SPACING: space required after that ',' (ctx:VxV)
#486: FILE: arch/s390/mm/extmem.c:322:
+				"diag returned error (%ld)\n",name,seg->end);
 				                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#486: FILE: arch/s390/mm/extmem.c:322:
+				"diag returned error (%ld)\n",name,seg->end);
 				                                  ^

WARNING:SPLIT_STRING: quoted string split across lines
#486: FILE: arch/s390/mm/extmem.c:322:
+		PRINT_WARN ("segment_load: could not load segment %s - "
+				"diag returned error (%ld)\n",name,seg->end);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#487: FILE: arch/s390/mm/extmem.c:323:
+		rc = dcss_diag_translate_rc (seg->end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#489: FILE: arch/s390/mm/extmem.c:325:
+		dcss_diag(DCSS_PURGESEG, seg->dcss_name,
+				&seg->start_addr, &seg->end);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#499: FILE: arch/s390/mm/extmem.c:335:
+		PRINT_INFO ("segment_load: loaded segment %s range %p .. %p "

WARNING:SPLIT_STRING: quoted string split across lines
#500: FILE: arch/s390/mm/extmem.c:336:
+		PRINT_INFO ("segment_load: loaded segment %s range %p .. %p "
+				"type %s in non-shared mode\n", name,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#501: FILE: arch/s390/mm/extmem.c:337:
+				(void*)seg->start_addr, (void*)seg->end,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#501: FILE: arch/s390/mm/extmem.c:337:
+				(void*)seg->start_addr, (void*)seg->end,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#504: FILE: arch/s390/mm/extmem.c:340:
+		PRINT_INFO ("segment_load: loaded segment %s range %p .. %p "

WARNING:SPLIT_STRING: quoted string split across lines
#505: FILE: arch/s390/mm/extmem.c:341:
+		PRINT_INFO ("segment_load: loaded segment %s range %p .. %p "
+				"type %s in shared mode\n", name,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#506: FILE: arch/s390/mm/extmem.c:342:
+				(void*)seg->start_addr, (void*)seg->end,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#506: FILE: arch/s390/mm/extmem.c:342:
+				(void*)seg->start_addr, (void*)seg->end,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#510: FILE: arch/s390/mm/extmem.c:346:
+	kfree (seg);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#538: FILE: arch/s390/mm/extmem.c:370:
+segment_load (char *name, int do_nonshared, unsigned long *addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#539: FILE: arch/s390/mm/extmem.c:371:
+segment_load (char *name, int do_nonshared, unsigned long *addr,
+		unsigned long *end)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#718: FILE: arch/s390/mm/extmem.c:377:
+		return -ENOSYS;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#720: FILE: arch/s390/mm/extmem.c:379:
+	spin_lock (&dcss_lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#721: FILE: arch/s390/mm/extmem.c:380:
+	seg = segment_by_name (name);

CHECK:BRACES: braces {} should be used on all arms of this statement
#722: FILE: arch/s390/mm/extmem.c:381:
+	if (seg == NULL)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!seg"
#722: FILE: arch/s390/mm/extmem.c:381:
+	if (seg == NULL)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#723: FILE: arch/s390/mm/extmem.c:382:
+		rc = __segment_load (name, do_nonshared, addr, end);

CHECK:BRACES: Unbalanced braces around else statement
#724: FILE: arch/s390/mm/extmem.c:383:
+	else {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#743: FILE: arch/s390/mm/extmem.c:394:
+	spin_unlock (&dcss_lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#834: FILE: arch/s390/mm/extmem.c:413:
+	seg = segment_by_name (name);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!seg"
#835: FILE: arch/s390/mm/extmem.c:414:
+	if (seg == NULL) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#836: FILE: arch/s390/mm/extmem.c:415:
+		PRINT_ERR ("could not find segment %s in segment_unload, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'segment_unload', this function's name, in a string
#836: FILE: arch/s390/mm/extmem.c:415:
+		PRINT_ERR ("could not find segment %s in segment_unload, "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#837: FILE: arch/s390/mm/extmem.c:416:
+				"please report to linux390@de.ibm.com\n",name);
 				                                        ^

WARNING:SPLIT_STRING: quoted string split across lines
#837: FILE: arch/s390/mm/extmem.c:416:
+		PRINT_ERR ("could not find segment %s in segment_unload, "
+				"please report to linux390@de.ibm.com\n",name);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#867: FILE: arch/s390/mm/extmem.c:444:
+	seg = segment_by_name (name);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!seg"
#869: FILE: arch/s390/mm/extmem.c:446:
+	if (seg == NULL) {

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#870: FILE: arch/s390/mm/extmem.c:447:
+		PRINT_ERR ("could not find segment %s in segment_save, please report to linux390@de.ibm.com\n",name);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#870: FILE: arch/s390/mm/extmem.c:447:
+		PRINT_ERR ("could not find segment %s in segment_save, please report to linux390@de.ibm.com\n",name);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#870: FILE: arch/s390/mm/extmem.c:447:
+		PRINT_ERR ("could not find segment %s in segment_save, please report to linux390@de.ibm.com\n",name);
 		                                                                                              ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'segment_save', this function's name, in a string
#870: FILE: arch/s390/mm/extmem.c:447:
+		PRINT_ERR ("could not find segment %s in segment_save, please report to linux390@de.ibm.com\n",name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#877: FILE: arch/s390/mm/extmem.c:454:
+	sprintf(cmd1, "DEFSEG %s %X-%X %s", name, startpfn, endpfn,
+			segtype_string[seg->vm_segtype]);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#888: FILE: arch/s390/mm/extmem.c:464:
+EXPORT_SYMBOL(segment_info);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#900: FILE: drivers/s390/block/dcssblk.c:147:
+dcssblk_segment_warn(int rc, char* seg_name)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#907: FILE: drivers/s390/block/dcssblk.c:154:
+	case -ENOSYS:

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#915: FILE: drivers/s390/block/dcssblk.c:162:
+	case -ENOTSUPP:

WARNING:SPLIT_STRING: quoted string split across lines
#917: FILE: drivers/s390/block/dcssblk.c:164:
+		PRINT_WARN("cannot load/query segment %s, is a multi-part "
+			   "segment\n", seg_name);

WARNING:SPLIT_STRING: quoted string split across lines
#921: FILE: drivers/s390/block/dcssblk.c:168:
+		PRINT_WARN("cannot load/query segment %s, overlaps with "
+			   "storage\n", seg_name);

WARNING:SPLIT_STRING: quoted string split across lines
#925: FILE: drivers/s390/block/dcssblk.c:172:
+		PRINT_WARN("cannot load/query segment %s, overlaps with "
+			   "already loaded dcss\n", seg_name);

WARNING:SPLIT_STRING: quoted string split across lines
#929: FILE: drivers/s390/block/dcssblk.c:176:
+		PRINT_WARN("cannot load/query segment %s, already loaded in "
+			   "incompatible mode\n", seg_name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#952: FILE: drivers/s390/block/dcssblk.c:236:
+		rc = segment_load(dev_info->segment_name, SEGMENT_SHARED,
 					&dev_info->start, &dev_info->end);

WARNING:SPLIT_STRING: quoted string split across lines
#968: FILE: drivers/s390/block/dcssblk.c:248:
+			PRINT_ERR("Segment type SC (%s) cannot be loaded in "
+				  "non-shared mode\n", dev_info->segment_name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#975: FILE: drivers/s390/block/dcssblk.c:254:
+		rc = segment_load(dev_info->segment_name, SEGMENT_EXCLUSIVE,
 					&dev_info->start, &dev_info->end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1036: FILE: drivers/s390/block/dcssblk.c:418:
+	rc = segment_load(local_buf, SEGMENT_SHARED,
 				&dev_info->start, &dev_info->end);

WARNING:SPLIT_STRING: quoted string split across lines
#1049: FILE: drivers/s390/block/dcssblk.c:426:
+	PRINT_INFO("Loaded segment %s, size = %lu Byte, "
+		   "capacity = %lu (512 Byte) sectors\n", local_buf,

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1057: FILE: drivers/s390/block/dcssblk.c:476:
 	switch (dev_info->segment_type) {
+		case SEG_TYPE_SR:
+		case SEG_TYPE_ER:
+		case SEG_TYPE_SC:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1092: FILE: drivers/s390/char/monreader.c:123:
+mon_segment_warn(int rc, char* seg_name)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1099: FILE: drivers/s390/char/monreader.c:130:
+	case -ENOSYS:

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#1107: FILE: drivers/s390/char/monreader.c:138:
+	case -ENOTSUPP:

WARNING:SPLIT_STRING: quoted string split across lines
#1109: FILE: drivers/s390/char/monreader.c:140:
+		P_WARNING("cannot load/query segment %s, is a multi-part "
+			  "segment\n", seg_name);

WARNING:SPLIT_STRING: quoted string split across lines
#1113: FILE: drivers/s390/char/monreader.c:144:
+		P_WARNING("cannot load/query segment %s, overlaps with "
+			  "storage\n", seg_name);

WARNING:SPLIT_STRING: quoted string split across lines
#1117: FILE: drivers/s390/char/monreader.c:148:
+		P_WARNING("cannot load/query segment %s, overlaps with "
+			  "already loaded dcss\n", seg_name);

WARNING:SPLIT_STRING: quoted string split across lines
#1121: FILE: drivers/s390/char/monreader.c:152:
+		P_WARNING("cannot load/query segment %s, already loaded in "
+			  "incompatible mode\n", seg_name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1188: FILE: include/asm-s390/extmem.h:26:
+extern void segment_save(char *name);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1189: FILE: include/asm-s390/extmem.h:27:
+extern int segment_info (char* name);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1189: FILE: include/asm-s390/extmem.h:27:
+extern int segment_info (char* name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1189: FILE: include/asm-s390/extmem.h:27:
+extern int segment_info (char* name);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000238832.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 70 warnings, 29 checks, 1127 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000238832.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
