WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#22: 
The attached patch does some surgery on header files so that struct page can

WARNING:TYPO_SPELLING: 'arrangment' may be misspelled - perhaps 'arrangement'?
#73: 
possible with the traditional arrangment.
                              ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#112: FILE: include/asm-i386/atomic_t.h:1:
+#ifndef ATOMIC_T_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#120: FILE: include/asm-i386/atomic_t.h:9:
+typedef struct { volatile int counter; } atomic_t;

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#158: FILE: include/asm-um/atomic_t.h:1:
+#ifndef __UM_ATOMIC_T_H

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#183: FILE: include/asm-um/page.h:28:
+#define PAGE_BUG(page) do { BUG(); } while (0)

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#183: FILE: include/asm-um/page.h:28:
+#define PAGE_BUG(page) do { BUG(); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:SPACING: No space is necessary after a cast
#198: FILE: include/asm-um/page.h:38:
+	return (unsigned long) (virt) - PAGE_OFFSET;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#203: FILE: include/asm-um/page.h:43:
+	return (void *) ((unsigned long) (phys) + PAGE_OFFSET);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#248: FILE: include/linux/list_head.h:1:
+#ifndef _LINUX_LISTHEAD_H

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#255: FILE: include/linux/list_head.h:8:
+#define LIST_HEAD_INIT(name) { &(name), &(name) }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#257: FILE: include/linux/list_head.h:10:
+#define LIST_HEAD(name) \
+	struct list_head name = LIST_HEAD_INIT(name)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#264: FILE: include/linux/mem_map.h:1:
+#ifndef _MEM_MAP_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#291: FILE: include/linux/mem_map.h:28:
+typedef struct page {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#296: FILE: include/linux/mem_map.h:33:
+	struct page *next_hash;		/* Next page sharing our hash bucket in
+					   the pagecache hash table. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#296: FILE: include/linux/mem_map.h:33:
+					   the pagecache hash table. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#299: FILE: include/linux/mem_map.h:36:
+	unsigned long flags;		/* atomic flags, some possibly
+					   updated asynchronously */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#299: FILE: include/linux/mem_map.h:36:
+					   updated asynchronously */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#301: FILE: include/linux/mem_map.h:38:
+	struct list_head lru;		/* Pageout list, eg. active_list;
+					   protected by pagemap_lru_lock !! */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#301: FILE: include/linux/mem_map.h:38:
+					   protected by pagemap_lru_lock !! */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#304: FILE: include/linux/mem_map.h:41:
+	struct buffer_head * buffers;	/* Buffer maps us to a disk block. */

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#306: FILE: include/linux/mem_map.h:43:
+	void *virtual;			/* Kernel virtual address (NULL if
+					   not kmapped, ie. highmem) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#306: FILE: include/linux/mem_map.h:43:
+					   not kmapped, ie. highmem) */

WARNING:MISSING_EOF_NEWLINE: adding a line without newline at end of file
#313: FILE: include/linux/mem_map.h:50:
+#endif

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#462: FILE: include/linux/spinlock_t.h:1:
+#ifndef _SPINLOCK_H

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#477: FILE: include/linux/spinlock_t.h:16:
+  typedef struct { } spinlock_t;$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#477: FILE: include/linux/spinlock_t.h:16:
+  typedef struct { } spinlock_t;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#478: FILE: include/linux/spinlock_t.h:17:
+  #define SPIN_LOCK_UNLOCKED (spinlock_t) { }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#480: FILE: include/linux/spinlock_t.h:19:
+  typedef struct { int gcc_is_buggy; } spinlock_t;$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#480: FILE: include/linux/spinlock_t.h:19:
+  typedef struct { int gcc_is_buggy; } spinlock_t;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#481: FILE: include/linux/spinlock_t.h:20:
+  #define SPIN_LOCK_UNLOCKED (spinlock_t) { 0 }

WARNING:NEW_TYPEDEFS: do not add new typedefs
#486: FILE: include/linux/spinlock_t.h:25:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#487: FILE: include/linux/spinlock_t.h:26:
+	volatile unsigned long lock;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#489: FILE: include/linux/spinlock_t.h:28:
+#define SPIN_LOCK_UNLOCKED (spinlock_t) { 0 }

WARNING:NEW_TYPEDEFS: do not add new typedefs
#493: FILE: include/linux/spinlock_t.h:32:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#494: FILE: include/linux/spinlock_t.h:33:
+	volatile unsigned long lock;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#495: FILE: include/linux/spinlock_t.h:34:
+	volatile unsigned int babble;

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#581: FILE: include/linux/wait_queue.h:1:
+#ifndef _WAIT_QUEUE_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#629: FILE: include/linux/wait_queue.h:49:
+typedef struct __wait_queue {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#640: FILE: include/linux/wait_queue.h:60:
+typedef struct __wait_queue_head {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000467411.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 47 warnings, 4 checks, 503 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000467411.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
