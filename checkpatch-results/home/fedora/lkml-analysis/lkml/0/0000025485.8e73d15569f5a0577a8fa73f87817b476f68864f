WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#61: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#227: FILE: drivers/block/pktcdvd.c:94:
+static struct class	*class_pktcdvd = NULL;    /* /sys/class/pktcdvd */

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#228: FILE: drivers/block/pktcdvd.c:95:
+static struct dentry	*pkt_debugfs_root = NULL; /* /debug/pktcdvd */

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#231: FILE: drivers/block/pktcdvd.c:98:
+static int pkt_setup_dev(dev_t dev, dev_t* pkt_dev);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#235: FILE: drivers/block/pktcdvd.c:102:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#240: FILE: drivers/block/pktcdvd.c:107:
+static struct pktcdvd_kobj* pkt_kobj_create(struct pktcdvd_device *pd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#241: FILE: drivers/block/pktcdvd.c:108:
+static struct pktcdvd_kobj* pkt_kobj_create(struct pktcdvd_device *pd,
+					const char* name,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#241: FILE: drivers/block/pktcdvd.c:108:
+					const char* name,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#242: FILE: drivers/block/pktcdvd.c:109:
+					struct kobject* parent,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#243: FILE: drivers/block/pktcdvd.c:110:
+					struct kobj_type* ktype)

WARNING:LINE_SPACING: Missing a blank line after declarations
#246: FILE: drivers/block/pktcdvd.c:113:
+	struct pktcdvd_kobj *p;
+	p = kzalloc(sizeof(*p), GFP_KERNEL);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#257: FILE: drivers/block/pktcdvd.c:124:
+}
+/*

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#265: FILE: drivers/block/pktcdvd.c:132:
+}
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#273: FILE: drivers/block/pktcdvd.c:140:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#281: FILE: drivers/block/pktcdvd.c:148:
+#define DEF_ATTR(_obj,_name,_mode) \
                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#281: FILE: drivers/block/pktcdvd.c:148:
+#define DEF_ATTR(_obj,_name,_mode) \
                            ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#286: FILE: drivers/block/pktcdvd.c:153:
+/**********************************************************
+  /sys/class/pktcdvd/pktcdvd[0-7]/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#287: FILE: drivers/block/pktcdvd.c:154:
+                     stat/reset$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#288: FILE: drivers/block/pktcdvd.c:155:
+                     stat/packets_started$

ERROR:CODE_INDENT: code indent should use tabs where possible
#289: FILE: drivers/block/pktcdvd.c:156:
+                     stat/packets_finished$

ERROR:CODE_INDENT: code indent should use tabs where possible
#290: FILE: drivers/block/pktcdvd.c:157:
+                     stat/kb_written$

ERROR:CODE_INDENT: code indent should use tabs where possible
#291: FILE: drivers/block/pktcdvd.c:158:
+                     stat/kb_read$

ERROR:CODE_INDENT: code indent should use tabs where possible
#292: FILE: drivers/block/pktcdvd.c:159:
+                     stat/kb_read_gather$

ERROR:CODE_INDENT: code indent should use tabs where possible
#293: FILE: drivers/block/pktcdvd.c:160:
+                     write_queue/size$

ERROR:CODE_INDENT: code indent should use tabs where possible
#294: FILE: drivers/block/pktcdvd.c:161:
+                     write_queue/congestion_off$

ERROR:CODE_INDENT: code indent should use tabs where possible
#295: FILE: drivers/block/pktcdvd.c:162:
+                     write_queue/congestion_on$

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_dbuf' - possible side-effects?
#330: FILE: drivers/block/pktcdvd.c:197:
+#define DECLARE_BUF_AS_STRING(_dbuf, _b, _l) \
+	char _dbuf[64]; int dlen = (_l) < 0 ? 0 : (_l); \
+	if (dlen >= sizeof(_dbuf)) dlen = sizeof(_dbuf)-1; \
+	memcpy(_dbuf, _b, dlen); _dbuf[dlen] = 0

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_l' - possible side-effects?
#330: FILE: drivers/block/pktcdvd.c:197:
+#define DECLARE_BUF_AS_STRING(_dbuf, _b, _l) \
+	char _dbuf[64]; int dlen = (_l) < 0 ? 0 : (_l); \
+	if (dlen >= sizeof(_dbuf)) dlen = sizeof(_dbuf)-1; \
+	memcpy(_dbuf, _b, dlen); _dbuf[dlen] = 0

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#332: FILE: drivers/block/pktcdvd.c:199:
+	if (dlen >= sizeof(_dbuf)) dlen = sizeof(_dbuf)-1; \
 	                                               ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#332: FILE: drivers/block/pktcdvd.c:199:
+	if (dlen >= sizeof(_dbuf)) dlen = sizeof(_dbuf)-1; \

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#336: FILE: drivers/block/pktcdvd.c:203:
+static ssize_t kobj_pkt_show(struct kobject *kobj,
+			struct attribute *attr, char *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#341: FILE: drivers/block/pktcdvd.c:208:
+	int v;
+	if (strcmp(attr->name, "packets_started") == 0) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#377: FILE: drivers/block/pktcdvd.c:244:
+static void init_write_congestion_marks(int* lo, int* hi)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#377: FILE: drivers/block/pktcdvd.c:244:
+static void init_write_congestion_marks(int* lo, int* hi)

CHECK:BRACES: braces {} should be used on all arms of this statement
#382: FILE: drivers/block/pktcdvd.c:249:
+		if (*lo <= 0)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#384: FILE: drivers/block/pktcdvd.c:251:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#395: FILE: drivers/block/pktcdvd.c:262:
+static ssize_t kobj_pkt_store(struct kobject *kobj,
+			struct attribute *attr,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#410: FILE: drivers/block/pktcdvd.c:277:
+	} else if (strcmp(attr->name, "congestion_off") == 0
+		   && sscanf(dbuf, "%d", &val) == 1) {

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#410: FILE: drivers/block/pktcdvd.c:277:
+		   && sscanf(dbuf, "%d", &val) == 1) {
+		spin_lock(&pd->lock);
+		pd->write_congestion_off = val;
+		init_write_congestion_marks(&pd->write_congestion_off,
+					&pd->write_congestion_on);
+		spin_unlock(&pd->lock);
+
+	} else if (strcmp(attr->name, "congestion_on") == 0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#414: FILE: drivers/block/pktcdvd.c:281:
+		init_write_congestion_marks(&pd->write_congestion_off,
+					&pd->write_congestion_on);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#418: FILE: drivers/block/pktcdvd.c:285:
+	} else if (strcmp(attr->name, "congestion_on") == 0
+		   && sscanf(dbuf, "%d", &val) == 1) {

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#418: FILE: drivers/block/pktcdvd.c:285:
+		   && sscanf(dbuf, "%d", &val) == 1) {
+		spin_lock(&pd->lock);
+		pd->write_congestion_on = val;
+		init_write_congestion_marks(&pd->write_congestion_off,
+					&pd->write_congestion_on);
+		spin_unlock(&pd->lock);
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#422: FILE: drivers/block/pktcdvd.c:289:
+		init_write_congestion_marks(&pd->write_congestion_off,
+					&pd->write_congestion_on);

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#428: FILE: drivers/block/pktcdvd.c:295:
+static struct sysfs_ops kobj_pkt_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#432: FILE: drivers/block/pktcdvd.c:299:
+};
+static struct kobj_type kobj_pkt_type_stat = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#437: FILE: drivers/block/pktcdvd.c:304:
+};
+static struct kobj_type kobj_pkt_type_wqueue = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#447: FILE: drivers/block/pktcdvd.c:314:
+		pd->clsdev = class_device_create(class_pktcdvd,
+					NULL, pd->pkt_dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#454: FILE: drivers/block/pktcdvd.c:321:
+		pd->kobj_stat = pkt_kobj_create(pd, "stat",
+					&pd->clsdev->kobj,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#457: FILE: drivers/block/pktcdvd.c:324:
+		pd->kobj_wqueue = pkt_kobj_create(pd, "write_queue",
+					&pd->clsdev->kobj,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#470: FILE: drivers/block/pktcdvd.c:337:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#472: FILE: drivers/block/pktcdvd.c:339:
+/********************************************************************
+  /sys/class/pktcdvd/

ERROR:CODE_INDENT: code indent should use tabs where possible
#473: FILE: drivers/block/pktcdvd.c:340:
+                     add            map block device$

ERROR:CODE_INDENT: code indent should use tabs where possible
#474: FILE: drivers/block/pktcdvd.c:341:
+                     remove         unmap packet dev$

ERROR:CODE_INDENT: code indent should use tabs where possible
#475: FILE: drivers/block/pktcdvd.c:342:
+                     device_map     show mappings$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#482: FILE: drivers/block/pktcdvd.c:349:
+}
+static ssize_t class_pktcdvd_show_map(struct class *c, char *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#486: FILE: drivers/block/pktcdvd.c:353:
+	int idx;
+	mutex_lock_nested(&ctl_mutex, SINGLE_DEPTH_NESTING);

WARNING:LINE_SPACING: Missing a blank line after declarations
#489: FILE: drivers/block/pktcdvd.c:356:
+		struct pktcdvd_device *pd = pkt_devs[idx];
+		if (!pd)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#491: FILE: drivers/block/pktcdvd.c:358:
+		n += sprintf(data+n, "%s %u:%u %u:%u\n",
 		                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#502: FILE: drivers/block/pktcdvd.c:369:
+static ssize_t class_pktcdvd_store_add(struct class *c, const char *buf,
+					size_t count)

WARNING:LINE_SPACING: Missing a blank line after declarations
#506: FILE: drivers/block/pktcdvd.c:373:
+	DECLARE_BUF_AS_STRING(dbuf, buf, count);
+	if (sscanf(dbuf, "%u:%u", &major, &minor) == 2) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#514: FILE: drivers/block/pktcdvd.c:381:
+static ssize_t class_pktcdvd_store_remove(struct class *c, const char *buf,
+					size_t count)

WARNING:LINE_SPACING: Missing a blank line after declarations
#518: FILE: drivers/block/pktcdvd.c:385:
+	DECLARE_BUF_AS_STRING(dbuf, buf, count);
+	if (sscanf(dbuf, "%u:%u", &major, &minor) == 2) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#526: FILE: drivers/block/pktcdvd.c:393:
+ __ATTR(add,            0200, NULL, class_pktcdvd_store_add),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#527: FILE: drivers/block/pktcdvd.c:394:
+ __ATTR(remove,         0200, NULL, class_pktcdvd_store_remove),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#528: FILE: drivers/block/pktcdvd.c:395:
+ __ATTR(device_map,     0444, class_pktcdvd_show_map, NULL),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#529: FILE: drivers/block/pktcdvd.c:396:
+ __ATTR_NULL$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#532: FILE: drivers/block/pktcdvd.c:399:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#552: FILE: drivers/block/pktcdvd.c:419:
+		printk(DRIVER_NAME": failed to create class pktcdvd\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#552: FILE: drivers/block/pktcdvd.c:419:
+		printk(DRIVER_NAME": failed to create class pktcdvd\n");

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#566: FILE: drivers/block/pktcdvd.c:433:
+/********************************************************************
+  entries in debugfs

WARNING:CONST_STRUCT: struct file_operations should normally be const
#583: FILE: drivers/block/pktcdvd.c:450:
+static struct file_operations debug_fops = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#601: FILE: drivers/block/pktcdvd.c:468:
+	pd->dfs_f_info = debugfs_create_file("info", S_IRUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#602: FILE: drivers/block/pktcdvd.c:469:
+	pd->dfs_f_info = debugfs_create_file("info", S_IRUGO,
+				pd->dfs_d_root, pd, &debug_fops);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#614: FILE: drivers/block/pktcdvd.c:481:
+	if (pd->dfs_f_info)
+		debugfs_remove(pd->dfs_f_info);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#617: FILE: drivers/block/pktcdvd.c:484:
+	if (pd->dfs_d_root)
+		debugfs_remove(pd->dfs_d_root);

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#741: FILE: include/linux/pktcdvd.h:252:
+struct pktcdvd_kobj
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#745: FILE: include/linux/pktcdvd.h:256:
+};
+#define to_pktcdvdkobj(_k) \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#746: FILE: include/linux/pktcdvd.h:257:
+  ((struct pktcdvd_kobj*)container_of(_k,struct pktcdvd_kobj,kobj))$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#746: FILE: include/linux/pktcdvd.h:257:
+  ((struct pktcdvd_kobj*)container_of(_k,struct pktcdvd_kobj,kobj))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#746: FILE: include/linux/pktcdvd.h:257:
+  ((struct pktcdvd_kobj*)container_of(_k,struct pktcdvd_kobj,kobj))
                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#746: FILE: include/linux/pktcdvd.h:257:
+  ((struct pktcdvd_kobj*)container_of(_k,struct pktcdvd_kobj,kobj))
                                                             ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000025485.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 28 errors, 23 warnings, 30 checks, 669 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000025485.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
