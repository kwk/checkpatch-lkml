WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#38: 
Here is the architecture dependant part of ARTiS for x86.
                         ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#47: 
diff -urpN -X /export/src/patches/dontdiff -X /export/src/patches/dontdiff2 2.6.11-pfm/arch/i386/Kconfig 2.6.11-artis-cvs/arch/i386/Kconfig

WARNING:TYPO_SPELLING: 'debuging' may be misspelled - perhaps 'debugging'?
#70: FILE: arch/i386/Kconfig:547:
+		Activate debuging code in ARTiS, you probably don't want this, excepted
 		         ^^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#120: FILE: arch/i386/kernel/traps.c:99:
+void artis_put_trace(void **bt, struct task_struct *task, unsigned long * stack)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: arch/i386/kernel/traps.c:101:
+       int i, artis_skip_bt=0;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#122: FILE: arch/i386/kernel/traps.c:101:
+       int i, artis_skip_bt=0;
                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: arch/i386/kernel/traps.c:102:
+       unsigned long addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: arch/i386/kernel/traps.c:104:
+       if (!stack)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#125: FILE: arch/i386/kernel/traps.c:104:
+       if (!stack)
+               stack = (unsigned long*)&stack;

ERROR:CODE_INDENT: code indent should use tabs where possible
#126: FILE: arch/i386/kernel/traps.c:105:
+               stack = (unsigned long*)&stack;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: arch/i386/kernel/traps.c:105:
+               stack = (unsigned long*)&stack;$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#126: FILE: arch/i386/kernel/traps.c:105:
+               stack = (unsigned long*)&stack;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: arch/i386/kernel/traps.c:106:
+       memset(bt, 0, ARTIS_BT_SIZE*sizeof(void *));$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#127: FILE: arch/i386/kernel/traps.c:106:
+       memset(bt, 0, ARTIS_BT_SIZE*sizeof(void *));
                                   ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: arch/i386/kernel/traps.c:107:
+       for(i=artis_skip_bt; i>0 && !kstack_end(stack); ) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#128: FILE: arch/i386/kernel/traps.c:107:
+       for(i=artis_skip_bt; i>0 && !kstack_end(stack); ) {
+               addr = *stack++;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#128: FILE: arch/i386/kernel/traps.c:107:
+       for(i=artis_skip_bt; i>0 && !kstack_end(stack); ) {
             ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#128: FILE: arch/i386/kernel/traps.c:107:
+       for(i=artis_skip_bt; i>0 && !kstack_end(stack); ) {
                              ^

ERROR:SPACING: space required before the open parenthesis '('
#128: FILE: arch/i386/kernel/traps.c:107:
+       for(i=artis_skip_bt; i>0 && !kstack_end(stack); ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#129: FILE: arch/i386/kernel/traps.c:108:
+               addr = *stack++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: arch/i386/kernel/traps.c:108:
+               addr = *stack++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#130: FILE: arch/i386/kernel/traps.c:109:
+               if (kernel_text_address(addr))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: arch/i386/kernel/traps.c:109:
+               if (kernel_text_address(addr))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#130: FILE: arch/i386/kernel/traps.c:109:
+               if (kernel_text_address(addr))
+                       i--;

ERROR:CODE_INDENT: code indent should use tabs where possible
#131: FILE: arch/i386/kernel/traps.c:110:
+                       i--;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: arch/i386/kernel/traps.c:110:
+                       i--;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: arch/i386/kernel/traps.c:111:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: arch/i386/kernel/traps.c:112:
+       for(i=ARTIS_BT_SIZE; i>0 && !kstack_end(stack); ) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#133: FILE: arch/i386/kernel/traps.c:112:
+       for(i=ARTIS_BT_SIZE; i>0 && !kstack_end(stack); ) {
+               addr = *stack++;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#133: FILE: arch/i386/kernel/traps.c:112:
+       for(i=ARTIS_BT_SIZE; i>0 && !kstack_end(stack); ) {
             ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#133: FILE: arch/i386/kernel/traps.c:112:
+       for(i=ARTIS_BT_SIZE; i>0 && !kstack_end(stack); ) {
                              ^

ERROR:SPACING: space required before the open parenthesis '('
#133: FILE: arch/i386/kernel/traps.c:112:
+       for(i=ARTIS_BT_SIZE; i>0 && !kstack_end(stack); ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#134: FILE: arch/i386/kernel/traps.c:113:
+               addr = *stack++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: arch/i386/kernel/traps.c:113:
+               addr = *stack++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: arch/i386/kernel/traps.c:114:
+               if (kernel_text_address(addr)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: arch/i386/kernel/traps.c:114:
+               if (kernel_text_address(addr)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#135: FILE: arch/i386/kernel/traps.c:114:
+               if (kernel_text_address(addr)) {
+                       i--;

ERROR:CODE_INDENT: code indent should use tabs where possible
#136: FILE: arch/i386/kernel/traps.c:115:
+                       i--;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: arch/i386/kernel/traps.c:115:
+                       i--;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#137: FILE: arch/i386/kernel/traps.c:116:
+                       bt[i]=(void *)addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: arch/i386/kernel/traps.c:116:
+                       bt[i]=(void *)addr;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#137: FILE: arch/i386/kernel/traps.c:116:
+                       bt[i]=(void *)addr;
                             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#138: FILE: arch/i386/kernel/traps.c:117:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: arch/i386/kernel/traps.c:117:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: arch/i386/kernel/traps.c:118:
+       }$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#143: FILE: arch/i386/kernel/traps.c:122:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#163: FILE: include/asm-i386/bug.h:14:
+#define _old_BUG()				\
  __asm__ __volatile__(	"ud2\n"		\
 			"\t.word %c0\n"	\
 			"\t.long %c1\n"	\
 			 : : "i" (__LINE__), "i" (__FILE__))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#170: FILE: include/asm-i386/bug.h:20:
+#define _old_BUG() __asm__ __volatile__("ud2\n")

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#174: FILE: include/asm-i386/bug.h:24:
+#define BUG() ARTIS_BUG(1,0)

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required after that ',' (ctx:VxV)
#174: FILE: include/asm-i386/bug.h:24:
+#define BUG() ARTIS_BUG(1,0)
                          ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#176: FILE: include/asm-i386/bug.h:26:
+#define BUG() _old_BUG()

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#191: FILE: include/asm-i386/system.h:445:
+do { ^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#192: FILE: include/asm-i386/system.h:446:
+^Itypecheck(unsigned long,x); ^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#192: FILE: include/asm-i386/system.h:446:
+	typecheck(unsigned long,x); 	\
 	                       ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#193: FILE: include/asm-i386/system.h:447:
+	__asm__ __volatile__("pushfl ; popl %0":"=g" (x): /* no input */); \
 	                                       ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#193: FILE: include/asm-i386/system.h:447:
+	__asm__ __volatile__("pushfl ; popl %0":"=g" (x): /* no input */); \
 	                                                ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#196: FILE: include/asm-i386/system.h:450:
+#define _raw_local_irq_disable() __asm__ __volatile__("cli": : :"memory")
                                                            ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#196: FILE: include/asm-i386/system.h:450:
+#define _raw_local_irq_disable() __asm__ __volatile__("cli": : :"memory")
                                                                ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#196: FILE: include/asm-i386/system.h:450:
+#define _raw_local_irq_disable() __asm__ __volatile__("cli": : :"memory")

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#205: FILE: include/asm-i386/system.h:463:
+#define _raw_local_irq_save(x) __asm__ __volatile__("pushfl ; popl %0 ; cli":"=g" (x): /* no input */ :"memory")

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#205: FILE: include/asm-i386/system.h:463:
+#define _raw_local_irq_save(x) __asm__ __volatile__("pushfl ; popl %0 ; cli":"=g" (x): /* no input */ :"memory")
                                                                             ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#205: FILE: include/asm-i386/system.h:463:
+#define _raw_local_irq_save(x) __asm__ __volatile__("pushfl ; popl %0 ; cli":"=g" (x): /* no input */ :"memory")
                                                                                      ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#205: FILE: include/asm-i386/system.h:463:
+#define _raw_local_irq_save(x) __asm__ __volatile__("pushfl ; popl %0 ; cli":"=g" (x): /* no input */ :"memory")
                                                                                                       ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#205: FILE: include/asm-i386/system.h:463:
+#define _raw_local_irq_save(x) __asm__ __volatile__("pushfl ; popl %0 ; cli":"=g" (x): /* no input */ :"memory")

CHECK:LINE_SPACING: Please don't use multiple blank lines
#207: FILE: include/asm-i386/system.h:465:
+
+

WARNING:TYPO_SPELLING: 'funtion' may be misspelled - perhaps 'function'?
#211: FILE: include/asm-i386/system.h:469:
+ * around to do it because the funtion "artis_try_to_migrate" assume
                                ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#212: FILE: include/asm-i386/system.h:470:
+ * that preemption is already disabled */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#213: FILE: include/asm-i386/system.h:471:
+#define local_irq_restore(x)   ^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#213: FILE: include/asm-i386/system.h:471:
+#define local_irq_restore(x)   		\
+do { 					\
+	typecheck(unsigned long,x); 	\
+	if (!((x) & (1<<9))) { 		\
+		artis_force_migration();\
+	}; 				\
+	__asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc");  \
+} while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#214: FILE: include/asm-i386/system.h:472:
+do { ^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#215: FILE: include/asm-i386/system.h:473:
+^Itypecheck(unsigned long,x); ^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#215: FILE: include/asm-i386/system.h:473:
+	typecheck(unsigned long,x); 	\
 	                       ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#216: FILE: include/asm-i386/system.h:474:
+^Iif (!((x) & (1<<9))) { ^I^I\$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#216: FILE: include/asm-i386/system.h:474:
+	if (!((x) & (1<<9))) { 		\
 	              ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#218: FILE: include/asm-i386/system.h:476:
+^I}; ^I^I^I^I\$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#219: FILE: include/asm-i386/system.h:477:
+	__asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc");  \
 	                                       ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#219: FILE: include/asm-i386/system.h:477:
+	__asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc");  \
 	                                                         ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#219: FILE: include/asm-i386/system.h:477:
+	__asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc");  \
 	                                                                 ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#222: FILE: include/asm-i386/system.h:480:
+#define local_irq_disable()    ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#223: FILE: include/asm-i386/system.h:481:
+do {  ^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#225: FILE: include/asm-i386/system.h:483:
+^I_raw_local_irq_disable(); ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#228: FILE: include/asm-i386/system.h:486:
+#define local_irq_save(x)      ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#229: FILE: include/asm-i386/system.h:487:
+do { ^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#231: FILE: include/asm-i386/system.h:489:
+^I_raw_local_irq_save(x); ^I\$

ERROR:SPACING: space required before the open parenthesis '('
#232: FILE: include/asm-i386/system.h:490:
+} while(0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#236: FILE: include/asm-i386/system.h:494:
+#define local_irq_restore(x)      ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#237: FILE: include/asm-i386/system.h:495:
+do { ^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#238: FILE: include/asm-i386/system.h:496:
+^Itypecheck(unsigned long,x); ^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#238: FILE: include/asm-i386/system.h:496:
+	typecheck(unsigned long,x); 	\
 	                       ^

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#239: FILE: include/asm-i386/system.h:497:
+	__asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc");  				\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#239: FILE: include/asm-i386/system.h:497:
+^I__asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc");  ^I^I^I^I\$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#239: FILE: include/asm-i386/system.h:497:
+	__asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc");  				\
 	                                       ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#239: FILE: include/asm-i386/system.h:497:
+	__asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc");  				\
 	                                                         ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#239: FILE: include/asm-i386/system.h:497:
+	__asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc");  				\
 	                                                                 ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000185972.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 37 errors, 48 warnings, 9 checks, 181 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000185972.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
