WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
> So we only loop for the actual number processors found in mpparse.c?  This 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#52: FILE: arch/i386/kernel/smpboot.c:1023:
+       for (bit = 0; kicked < NR_CPUS && bit < MAX_APICS; bit++, kicked++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#52: FILE: arch/i386/kernel/smpboot.c:1023:
+       for (bit = 0; kicked < NR_CPUS && bit < MAX_APICS; bit++, kicked++) {
                apicid = cpu_present_to_apicid(bit);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#52: FILE: arch/i386/kernel/smpboot.c:1023:
+       for (bit = 0; kicked < NR_CPUS && bit < MAX_APICS; bit++, kicked++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#58: FILE: arch/i386/kernel/smpboot.c:1028:
+               printk("smp_boot_cpus() bit: %d\n", bit);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#58: FILE: arch/i386/kernel/smpboot.c:1028:
+               printk("smp_boot_cpus() bit: %d\n", bit);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#58: FILE: arch/i386/kernel/smpboot.c:1028:
+               printk("smp_boot_cpus() bit: %d\n", bit);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'smp_boot_cpus', this function's name, in a string
#58: FILE: arch/i386/kernel/smpboot.c:1028:
+               printk("smp_boot_cpus() bit: %d\n", bit);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:CODE_INDENT: code indent should use tabs where possible
#59: FILE: arch/i386/kernel/smpboot.c:1029:
+               if ((apicid == boot_cpu_apicid) || (apicid == BAD_APICID)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#59: FILE: arch/i386/kernel/smpboot.c:1029:
+               if ((apicid == boot_cpu_apicid) || (apicid == BAD_APICID)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#59: FILE: arch/i386/kernel/smpboot.c:1029:
+               if ((apicid == boot_cpu_apicid) || (apicid == BAD_APICID)) {
+                       printk("(apicid == boot_cpu_apicid) || (apicid == BAD_APICID)\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'apicid == boot_cpu_apicid'
#59: FILE: arch/i386/kernel/smpboot.c:1029:
+               if ((apicid == boot_cpu_apicid) || (apicid == BAD_APICID)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'apicid == BAD_APICID'
#59: FILE: arch/i386/kernel/smpboot.c:1029:
+               if ((apicid == boot_cpu_apicid) || (apicid == BAD_APICID)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#60: FILE: arch/i386/kernel/smpboot.c:1030:
+                       printk("(apicid == boot_cpu_apicid) || (apicid == BAD_APICID)\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#60: FILE: arch/i386/kernel/smpboot.c:1030:
+                       printk("(apicid == boot_cpu_apicid) || (apicid == BAD_APICID)\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#60: FILE: arch/i386/kernel/smpboot.c:1030:
+                       printk("(apicid == boot_cpu_apicid) || (apicid == BAD_APICID)\n");

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#61: FILE: arch/i386/kernel/smpboot.c:1031:
+                       printk("apicid: %08lx boot_cpu_apicid: %08lx BAD_APICID: %08lx\n", apicid, boot_cpu_apicid, BAD_APICID);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:CODE_INDENT: code indent should use tabs where possible
#61: FILE: arch/i386/kernel/smpboot.c:1031:
+                       printk("apicid: %08lx boot_cpu_apicid: %08lx BAD_APICID: %08lx\n", apicid, boot_cpu_apicid, BAD_APICID);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#61: FILE: arch/i386/kernel/smpboot.c:1031:
+                       printk("apicid: %08lx boot_cpu_apicid: %08lx BAD_APICID: %08lx\n", apicid, boot_cpu_apicid, BAD_APICID);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#61: FILE: arch/i386/kernel/smpboot.c:1031:
+                       printk("apicid: %08lx boot_cpu_apicid: %08lx BAD_APICID: %08lx\n", apicid, boot_cpu_apicid, BAD_APICID);

ERROR:CODE_INDENT: code indent should use tabs where possible
#63: FILE: arch/i386/kernel/smpboot.c:1033:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#63: FILE: arch/i386/kernel/smpboot.c:1033:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#66: FILE: arch/i386/kernel/smpboot.c:1035:
+               if (!check_apicid_present(bit)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#66: FILE: arch/i386/kernel/smpboot.c:1035:
+               if (!check_apicid_present(bit)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#66: FILE: arch/i386/kernel/smpboot.c:1035:
+               if (!check_apicid_present(bit)) {
+                       printk("!check_apicid_present(bit)\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#67: FILE: arch/i386/kernel/smpboot.c:1036:
+                       printk("!check_apicid_present(bit)\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#67: FILE: arch/i386/kernel/smpboot.c:1036:
+                       printk("!check_apicid_present(bit)\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#67: FILE: arch/i386/kernel/smpboot.c:1036:
+                       printk("!check_apicid_present(bit)\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#70: FILE: arch/i386/kernel/smpboot.c:1038:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#70: FILE: arch/i386/kernel/smpboot.c:1038:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#71: FILE: arch/i386/kernel/smpboot.c:1039:
+               if (max_cpus <= cpucount+1) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#71: FILE: arch/i386/kernel/smpboot.c:1039:
+               if (max_cpus <= cpucount+1) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#71: FILE: arch/i386/kernel/smpboot.c:1039:
+               if (max_cpus <= cpucount+1) {
+                       printk("(max_cpus <= cpucount+1)\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#71: FILE: arch/i386/kernel/smpboot.c:1039:
+               if (max_cpus <= cpucount+1) {
                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#72: FILE: arch/i386/kernel/smpboot.c:1040:
+                       printk("(max_cpus <= cpucount+1)\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: arch/i386/kernel/smpboot.c:1040:
+                       printk("(max_cpus <= cpucount+1)\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#72: FILE: arch/i386/kernel/smpboot.c:1040:
+                       printk("(max_cpus <= cpucount+1)\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#74: FILE: arch/i386/kernel/smpboot.c:1042:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: arch/i386/kernel/smpboot.c:1042:
+               }$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000343550.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 25 warnings, 3 checks, 36 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000343550.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
