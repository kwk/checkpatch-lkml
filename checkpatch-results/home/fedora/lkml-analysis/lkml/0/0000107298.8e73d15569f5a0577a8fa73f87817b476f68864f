WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
controller (see Documentation/spi/spi_summary). The driver has the following

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#85: FILE: drivers/spi/pxa2xx_spi.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#99: FILE: drivers/spi/pxa2xx_spi.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#100: FILE: drivers/spi/pxa2xx_spi.c:16:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#116: FILE: drivers/spi/pxa2xx_spi.c:32:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/delay.h> instead of <asm/delay.h>
#119: FILE: drivers/spi/pxa2xx_spi.c:35:
+#include <asm/delay.h>

WARNING:TYPO_SPELLING: 'Contoller' may be misspelled - perhaps 'Controller'?
#127: FILE: drivers/spi/pxa2xx_spi.c:43:
+MODULE_DESCRIPTION("PXA2xx SSP SPI Contoller");
                                    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#135: FILE: drivers/spi/pxa2xx_spi.c:51:
+#define IS_DMA_ALIGNED(x) (((u32)(x)&0x07)==0)
                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#135: FILE: drivers/spi/pxa2xx_spi.c:51:
+#define IS_DMA_ALIGNED(x) (((u32)(x)&0x07)==0)
                                           ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#137: FILE: drivers/spi/pxa2xx_spi.c:53:
+#define SSP_REG(x) (*((volatile unsigned long *)x))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#139: FILE: drivers/spi/pxa2xx_spi.c:55:
+#define START_STATE ((void*)0)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#140: FILE: drivers/spi/pxa2xx_spi.c:56:
+#define RUNNING_STATE ((void*)1)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#141: FILE: drivers/spi/pxa2xx_spi.c:57:
+#define DONE_STATE ((void*)2)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#142: FILE: drivers/spi/pxa2xx_spi.c:58:
+#define ERROR_STATE ((void*)-1)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#185: FILE: drivers/spi/pxa2xx_spi.c:101:
+	spinlock_t lock;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#194: FILE: drivers/spi/pxa2xx_spi.c:110:
+	struct spi_message* cur_msg;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#195: FILE: drivers/spi/pxa2xx_spi.c:111:
+	struct spi_transfer* cur_transfer;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#239: FILE: drivers/spi/pxa2xx_spi.c:155:
+		while (SSP_REG(sssr) & SSSR_RNE) {
+			(void)SSP_REG(ssdr);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited before semicolon
#243: FILE: drivers/spi/pxa2xx_spi.c:159:
+	SSP_REG(sssr) = SSSR_ROR ;

WARNING:SPLIT_STRING: quoted string split across lines
#275: FILE: drivers/spi/pxa2xx_spi.c:191:
+		"rx_channel=0x%08x, "
+		"dcsr=0x%08x, "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#276: FILE: drivers/spi/pxa2xx_spi.c:192:
+		"dcsr=0x%08x, "
+		"dsadr=0x%08x, "

WARNING:SPLIT_STRING: quoted string split across lines
#277: FILE: drivers/spi/pxa2xx_spi.c:193:
+		"dsadr=0x%08x, "
+		"dtadr=0x%08x, "

WARNING:SPLIT_STRING: quoted string split across lines
#278: FILE: drivers/spi/pxa2xx_spi.c:194:
+		"dtadr=0x%08x, "
+		"dcmd=0x%08x\n",

WARNING:SPLIT_STRING: quoted string split across lines
#286: FILE: drivers/spi/pxa2xx_spi.c:202:
+		"tx_channel=0x%08x, "
+		"dcsr=0x%08x, "

WARNING:SPLIT_STRING: quoted string split across lines
#287: FILE: drivers/spi/pxa2xx_spi.c:203:
+		"dcsr=0x%08x, "
+		"dsadr=0x%08x, "

WARNING:SPLIT_STRING: quoted string split across lines
#288: FILE: drivers/spi/pxa2xx_spi.c:204:
+		"dsadr=0x%08x, "
+		"dtadr=0x%08x, "

WARNING:SPLIT_STRING: quoted string split across lines
#289: FILE: drivers/spi/pxa2xx_spi.c:205:
+		"dtadr=0x%08x, "
+		"dcmd=0x%08x\n",

WARNING:SPLIT_STRING: quoted string split across lines
#302: FILE: drivers/spi/pxa2xx_spi.c:218:
+			"NSSP dump: sscr0=0x%08lx, sscr1=0x%08lx, "
+			"ssto=0x%08lx, sspsp=0x%08lx, sssr=0x%08lx\n",

WARNING:SPLIT_STRING: quoted string split across lines
#309: FILE: drivers/spi/pxa2xx_spi.c:225:
+			"SSP dump: sscr0=0x%08lx, sscr1=0x%08lx, "
+			"sssr=0x%04lx\n",

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#344: FILE: drivers/spi/pxa2xx_spi.c:260:
+static inline void dump_transfer_state(char* header, struct driver_data *drv_data)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!drv_data->cur_msg"
#348: FILE: drivers/spi/pxa2xx_spi.c:264:
+	if (drv_data->cur_msg == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#349: FILE: drivers/spi/pxa2xx_spi.c:265:
+		printk(KERN_DEBUG "cur_msg is null\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#365: FILE: drivers/spi/pxa2xx_spi.c:281:
+static inline void dump_chip_state(struct device *dev,
+				char * header,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#365: FILE: drivers/spi/pxa2xx_spi.c:281:
+				char * header,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#396: FILE: drivers/spi/pxa2xx_spi.c:312:
+	while ((SSP_REG(sssr) & SSSR_TNF)
+			&& (drv_data->tx < drv_data->tx_end)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#409: FILE: drivers/spi/pxa2xx_spi.c:325:
+	while ((SSP_REG(sssr) & SSSR_RNE)
+			&& (drv_data->rx < drv_data->rx_end)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#421: FILE: drivers/spi/pxa2xx_spi.c:337:
+	while ((SSP_REG(sssr) & SSSR_TNF)
+			&& (drv_data->tx < drv_data->tx_end)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#433: FILE: drivers/spi/pxa2xx_spi.c:349:
+	while ((SSP_REG(sssr) & SSSR_RNE)
+			&& (drv_data->rx < drv_data->rx_end)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#445: FILE: drivers/spi/pxa2xx_spi.c:361:
+	while ((SSP_REG(sssr) & SSSR_TNF)
+				&& (drv_data->tx < drv_data->tx_end)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#457: FILE: drivers/spi/pxa2xx_spi.c:373:
+	while ((SSP_REG(sssr) & SSSR_RNE)
+			&& (drv_data->rx < drv_data->rx_end)) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#462: FILE: drivers/spi/pxa2xx_spi.c:378:
+}
+static void u32_writer(struct driver_data *drv_data)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#468: FILE: drivers/spi/pxa2xx_spi.c:384:
+	while ((SSP_REG(sssr) & SSSR_TNF)
+			&& (drv_data->tx < drv_data->tx_end)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#480: FILE: drivers/spi/pxa2xx_spi.c:396:
+	while ((SSP_REG(sssr) & SSSR_RNE)
+			&& (drv_data->rx < drv_data->rx_end)) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#486: FILE: drivers/spi/pxa2xx_spi.c:402:
+static inline void* next_transfer(struct driver_data *drv_data)

CHECK:BRACES: braces {} should be used on all arms of this statement
#492: FILE: drivers/spi/pxa2xx_spi.c:408:
+	if (trans->transfer_list.next != &msg->transfers) {
[...]
+	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#495: FILE: drivers/spi/pxa2xx_spi.c:411:
+			list_entry(trans->transfer_list.next,
+					struct spi_transfer,

CHECK:BRACES: Unbalanced braces around else statement
#498: FILE: drivers/spi/pxa2xx_spi.c:414:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#520: FILE: drivers/spi/pxa2xx_spi.c:436:
+	if (drv_data->rx == NULL) {
[...]
+	} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!drv_data->rx"
#520: FILE: drivers/spi/pxa2xx_spi.c:436:
+	if (drv_data->rx == NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#524: FILE: drivers/spi/pxa2xx_spi.c:440:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#527: FILE: drivers/spi/pxa2xx_spi.c:443:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#529: FILE: drivers/spi/pxa2xx_spi.c:445:
+	if (drv_data->tx == NULL) {
[...]
+	} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!drv_data->tx"
#529: FILE: drivers/spi/pxa2xx_spi.c:445:
+	if (drv_data->tx == NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#533: FILE: drivers/spi/pxa2xx_spi.c:449:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#538: FILE: drivers/spi/pxa2xx_spi.c:454:
+	drv_data->rx_dma = dma_map_single(dev, drv_data->rx,
+						drv_data->rx_map_len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#545: FILE: drivers/spi/pxa2xx_spi.c:461:
+	drv_data->tx_dma = dma_map_single(dev, drv_data->tx,
+						drv_data->tx_map_len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#550: FILE: drivers/spi/pxa2xx_spi.c:466:
+		dma_unmap_single(dev, drv_data->rx_dma,
+					drv_data->rx_map_len, DMA_FROM_DEVICE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#567: FILE: drivers/spi/pxa2xx_spi.c:483:
+		dma_unmap_single(dev, drv_data->rx_dma,
+					drv_data->rx_map_len, DMA_FROM_DEVICE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#569: FILE: drivers/spi/pxa2xx_spi.c:485:
+		dma_unmap_single(dev, drv_data->tx_dma,
+					drv_data->tx_map_len, DMA_FROM_DEVICE);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#578: FILE: drivers/spi/pxa2xx_spi.c:494:
+	struct spi_transfer* last_transfer;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#581: FILE: drivers/spi/pxa2xx_spi.c:497:
+	last_transfer = list_entry(message->transfers.prev,
+					struct spi_transfer,

WARNING:BRACES: braces {} are not necessary for single statement blocks
#588: FILE: drivers/spi/pxa2xx_spi.c:504:
+	if (message->complete) {
+		message->complete(message->context);
+	}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#609: FILE: drivers/spi/pxa2xx_spi.c:525:
+	if (irq_status & DCSR_BUSERR) {
+

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dma_handler', this function's name, in a string
#623: FILE: drivers/spi/pxa2xx_spi.c:539:
+				"dma_handler: bad bus address on "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#624: FILE: drivers/spi/pxa2xx_spi.c:540:
+				"dma_handler: bad bus address on "
+				"tx channel %d, source %x target = %x\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dma_handler', this function's name, in a string
#628: FILE: drivers/spi/pxa2xx_spi.c:544:
+				"dma_handler: bad bus address on "

WARNING:SPLIT_STRING: quoted string split across lines
#629: FILE: drivers/spi/pxa2xx_spi.c:545:
+				"dma_handler: bad bus address on "
+				"rx channel %d, source %x target = %x\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'drv_data->ssp_type == PXA25x_SSP'
#637: FILE: drivers/spi/pxa2xx_spi.c:553:
+	if ((drv_data->ssp_type == PXA25x_SSP)
+		&& (channel == drv_data->tx_channel)
+		&& (irq_status & DCSR_ENDINTR)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'channel == drv_data->tx_channel'
#637: FILE: drivers/spi/pxa2xx_spi.c:553:
+	if ((drv_data->ssp_type == PXA25x_SSP)
+		&& (channel == drv_data->tx_channel)
+		&& (irq_status & DCSR_ENDINTR)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#638: FILE: drivers/spi/pxa2xx_spi.c:554:
+	if ((drv_data->ssp_type == PXA25x_SSP)
+		&& (channel == drv_data->tx_channel)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#639: FILE: drivers/spi/pxa2xx_spi.c:555:
+		&& (channel == drv_data->tx_channel)
+		&& (irq_status & DCSR_ENDINTR)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#640: FILE: drivers/spi/pxa2xx_spi.c:556:
+		&& (irq_status & DCSR_ENDINTR)) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#666: FILE: drivers/spi/pxa2xx_spi.c:582:
+		 * handled in pump_transfers */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'overun' may be misspelled - perhaps 'overrun'?
#697: FILE: drivers/spi/pxa2xx_spi.c:613:
+		dev_warn(&drv_data->pdev->dev, "dma_transfer: fifo overun\n");
 		                                                   ^^^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dma_transfer', this function's name, in a string
#697: FILE: drivers/spi/pxa2xx_spi.c:613:
+		dev_warn(&drv_data->pdev->dev, "dma_transfer: fifo overun\n");

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#712: FILE: drivers/spi/pxa2xx_spi.c:628:
+	if (irq_status & SSSR_TINT || drv_data->rx == drv_data->rx_end) {
+

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#720: FILE: drivers/spi/pxa2xx_spi.c:636:
+		while (!(DCSR(drv_data->rx_channel) & DCSR_STOPSTATE)
+				|| (SSP_REG(sssr) & SSSR_BSY))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#735: FILE: drivers/spi/pxa2xx_spi.c:651:
+		 * handled in pump_transfers */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#761: FILE: drivers/spi/pxa2xx_spi.c:677:
+	while ((irq_status = (SSP_REG(sssr) & drv_data->mask_sr))) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#763: FILE: drivers/spi/pxa2xx_spi.c:679:
+		if (irq_status & SSSR_ROR) {
+

WARNING:TYPO_SPELLING: 'overun' may be misspelled - perhaps 'overrun'?
#771: FILE: drivers/spi/pxa2xx_spi.c:687:
+					"interrupt_transfer: fifo overun\n");
 					                          ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#771: FILE: drivers/spi/pxa2xx_spi.c:687:
+			dev_warn(&drv_data->pdev->dev,
+					"interrupt_transfer: fifo overun\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'interrupt_transfer', this function's name, in a string
#771: FILE: drivers/spi/pxa2xx_spi.c:687:
+					"interrupt_transfer: fifo overun\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'drv_data->rx < drv_data->rx_end'
#780: FILE: drivers/spi/pxa2xx_spi.c:696:
+		if ((irq_status & SSSR_TINT)
+				&& (drv_data->rx < drv_data->rx_end))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#781: FILE: drivers/spi/pxa2xx_spi.c:697:
+		if ((irq_status & SSSR_TINT)
+				&& (drv_data->rx < drv_data->rx_end))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'drv_data->rx == drv_data->rx_end'
#799: FILE: drivers/spi/pxa2xx_spi.c:715:
+		if ((irq_status & SSSR_TINT)
+				|| (drv_data->rx == drv_data->rx_end)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#800: FILE: drivers/spi/pxa2xx_spi.c:716:
+		if ((irq_status & SSSR_TINT)
+				|| (drv_data->rx == drv_data->rx_end)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#801: FILE: drivers/spi/pxa2xx_spi.c:717:
+				|| (drv_data->rx == drv_data->rx_end)) {
+

WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#807: FILE: drivers/spi/pxa2xx_spi.c:723:
+			/* Update total byte transfered */
 			                     ^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#811: FILE: drivers/spi/pxa2xx_spi.c:727:
+			 * handled in pump_transfers */

WARNING:SPLIT_STRING: quoted string split across lines
#834: FILE: drivers/spi/pxa2xx_spi.c:750:
+		dev_err(&drv_data->pdev->dev, "bad message state "
+				"in interrupt handler\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#875: FILE: drivers/spi/pxa2xx_spi.c:791:
+		previous = list_entry(transfer->transfer_list.prev,
+					struct spi_transfer,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#897: FILE: drivers/spi/pxa2xx_spi.c:813:
+	if ((drv_data->dma_mapped = map_dma_buffers(drv_data))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#898: FILE: drivers/spi/pxa2xx_spi.c:814:
+	if ((drv_data->dma_mapped = map_dma_buffers(drv_data))) {
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#937: FILE: drivers/spi/pxa2xx_spi.c:853:
+		if (drv_data->ssp_type == PXA25x_SSP) {
+			DCMD(drv_data->tx_channel) |= DCMD_ENDIRQEN;
+		}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#989: FILE: drivers/spi/pxa2xx_spi.c:905:
+	drv_data->cur_msg = list_entry(drv_data->queue.next,
+					struct spi_message, queue);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#997: FILE: drivers/spi/pxa2xx_spi.c:913:
+	drv_data->cur_transfer = list_entry(drv_data->cur_msg->transfers.next,
+						struct spi_transfer,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1044: FILE: drivers/spi/pxa2xx_spi.c:960:
+	if (drv_data->ssp_type != PXA25x_SSP
+			&& (spi->bits_per_word < 4 || spi->bits_per_word > 32))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chip"
#1051: FILE: drivers/spi/pxa2xx_spi.c:967:
+	if (chip == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*chip)...) over kzalloc(sizeof(struct chip_data)...)
#1052: FILE: drivers/spi/pxa2xx_spi.c:968:
+		chip = kzalloc(sizeof(struct chip_data), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:CAMELCASE: Avoid CamelCase: <SSCR1_RxTresh>
#1059: FILE: drivers/spi/pxa2xx_spi.c:975:
+		chip->threshold = SSCR1_RxTresh(1) | SSCR1_TxTresh(1);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <SSCR1_TxTresh>
#1059: FILE: drivers/spi/pxa2xx_spi.c:975:
+		chip->threshold = SSCR1_RxTresh(1) | SSCR1_TxTresh(1);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1077: FILE: drivers/spi/pxa2xx_spi.c:993:
+		chip->enable_dma = chip_info->dma_burst_size != 0
+					&& drv_data->master_info->enable_dma;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1096: FILE: drivers/spi/pxa2xx_spi.c:1012:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <SSCR0_SerClkDiv>
#1101: FILE: drivers/spi/pxa2xx_spi.c:1017:
+	chip->cr0 = SSCR0_SerClkDiv((CLOCK_SPEED_HZ / spi->max_speed_hz) + 2)

CHECK:CAMELCASE: Avoid CamelCase: <SSCR0_Motorola>
#1102: FILE: drivers/spi/pxa2xx_spi.c:1018:
+			| SSCR0_Motorola

CHECK:CAMELCASE: Avoid CamelCase: <SSCR0_DataSize>
#1103: FILE: drivers/spi/pxa2xx_spi.c:1019:
+			| SSCR0_DataSize(spi->bits_per_word & 0x0f)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1112: FILE: drivers/spi/pxa2xx_spi.c:1028:
+		dev_dbg(&spi->dev, "%d bits/word, %d Hz, mode %d\n",
+				spi->bits_per_word,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1118: FILE: drivers/spi/pxa2xx_spi.c:1034:
+		dev_dbg(&spi->dev, "%d bits/word, %d Hz, mode %d\n",
+				spi->bits_per_word,

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1119: FILE: drivers/spi/pxa2xx_spi.c:1035:
+				(CLOCK_SPEED_HZ/2)
 				               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1153: FILE: drivers/spi/pxa2xx_spi.c:1069:
+	struct chip_data *chip = spi_get_ctldata((struct spi_device *)spi);
+	if (chip)

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1154: FILE: drivers/spi/pxa2xx_spi.c:1070:
+	if (chip)
+		kfree(chip);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1166: FILE: drivers/spi/pxa2xx_spi.c:1082:
+	tasklet_init(&drv_data->pump_transfers,
+			pump_transfers,	(unsigned long)drv_data);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1169: FILE: drivers/spi/pxa2xx_spi.c:1085:
+	drv_data->workqueue = create_singlethread_workqueue(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!drv_data->workqueue"
#1171: FILE: drivers/spi/pxa2xx_spi.c:1087:
+	if (drv_data->workqueue == NULL)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1202: FILE: drivers/spi/pxa2xx_spi.c:1118:
+	unsigned limit = 500;

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#1210: FILE: drivers/spi/pxa2xx_spi.c:1126:
+		msleep(10);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1321: FILE: drivers/spi/pxa2xx_spi.c:1237:
+	if (platform_info->enable_dma) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1324: FILE: drivers/spi/pxa2xx_spi.c:1240:
+		drv_data->rx_channel = pxa_request_dma("pxa2xx_spi_ssp_rx",
+							DMA_PRIO_HIGH,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1334: FILE: drivers/spi/pxa2xx_spi.c:1250:
+		drv_data->tx_channel = pxa_request_dma("pxa2xx_spi_ssp_tx",
+							DMA_PRIO_MEDIUM,

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1344: FILE: drivers/spi/pxa2xx_spi.c:1260:
+		switch (platform_info->ssp_type) {
+			case PXA25x_SSP:
[...]
+			case PXA25x_NSSP:
[...]
+			case PXA27x_SSP:
[...]
+			default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1443: FILE: drivers/spi/pxa2xx_spi.c:1359:
+		switch (drv_data->ssp_type) {
+			case PXA25x_SSP:
[...]
+			case PXA25x_NSSP:
[...]
+			case PXA27x_SSP:
[...]
+			default:

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1481: FILE: drivers/spi/pxa2xx_spi.c:1397:
+	if ((status = pxa2xx_spi_remove(pdev)) != 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1481: FILE: drivers/spi/pxa2xx_spi.c:1397:
+	if ((status = pxa2xx_spi_remove(pdev)) != 0) {
+		dev_err(&pdev->dev, "shutdown failed with %d\n", status);
+	}

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1490: FILE: drivers/spi/pxa2xx_spi.c:1406:
+	unsigned limit = 500;

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#1498: FILE: drivers/spi/pxa2xx_spi.c:1414:
+		msleep(10);

WARNING:TYPO_SPELLING: 'childern' may be misspelled - perhaps 'children'?
#1527: FILE: drivers/spi/pxa2xx_spi.c:1443:
+	/* First forward to childern */
 	                    ^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1600: FILE: include/asm-arm/arch-pxa/pxa2xx_spi.h:1:
+/* Copyright (C) 2005 Stephen Street / StreetFire Sound Labs

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1613: FILE: include/asm-arm/arch-pxa/pxa2xx_spi.h:14:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1614: FILE: include/asm-arm/arch-pxa/pxa2xx_spi.h:15:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1651: FILE: include/asm-arm/arch-pxa/pxa2xx_spi.h:52:
+static inline void pxa2xx_dump_spi_master(struct device *dev, char *header,
+						struct pxa2xx_spi_master *info)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1662: FILE: include/asm-arm/arch-pxa/pxa2xx_spi.h:63:
+static inline void pxa2xx_dump_spi_chip(struct device *dev, char *header,
+						struct pxa2xx_spi_chip *info)

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#1804: FILE: Documentation/spi/pxa2xx:127:
+slave device.  Please note the the PXA2xx SSP 1 does not support trailing byte

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#1809: FILE: Documentation/spi/pxa2xx:132:
+connects the SSPTX pin the the SSPRX pin.  This is useful for initial setup

WARNING:TYPO_SPELLING: 'hardward' may be misspelled - perhaps 'hardware'?
#1842: FILE: Documentation/spi/pxa2xx:165:
+	.tx_threshold = 12, /* SSP hardward FIFO threshold */
 	                           ^^^^^^^^

WARNING:TYPO_SPELLING: 'hardward' may be misspelled - perhaps 'hardware'?
#1843: FILE: Documentation/spi/pxa2xx:166:
+	.rx_threshold = 4, /* SSP hardward FIFO threshold */
 	                          ^^^^^^^^

WARNING:TYPO_SPELLING: 'hardward' may be misspelled - perhaps 'hardware'?
#1850: FILE: Documentation/spi/pxa2xx:173:
+	.tx_threshold = 12, /* SSP hardward FIFO threshold */
 	                           ^^^^^^^^

WARNING:TYPO_SPELLING: 'hardward' may be misspelled - perhaps 'hardware'?
#1851: FILE: Documentation/spi/pxa2xx:174:
+	.rx_threshold = 4, /* SSP hardward FIFO threshold */
 	                          ^^^^^^^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000107298.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 49 warnings, 70 checks, 1842 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000107298.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
