WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#62: FILE: include/linux/mm.h:991:
+ * ^I^I^I^I^I^I^I max_highmem_pfn};$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#64: FILE: include/linux/mm.h:993:
+ * ^Iadd_active_range(node_id, start_pfn, end_pfn)$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#76: FILE: include/linux/mm.h:1005:
+extern void free_area_init_nodes(unsigned long *max_zone_pfn);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#77: FILE: include/linux/mm.h:1006:
+extern void add_active_range(unsigned int nid, unsigned long start_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#78: FILE: include/linux/mm.h:1007:
+extern void add_active_range(unsigned int nid, unsigned long start_pfn,
+					unsigned long end_pfn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#79: FILE: include/linux/mm.h:1008:
+extern void shrink_active_range(unsigned int nid, unsigned long old_end_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#80: FILE: include/linux/mm.h:1009:
+extern void shrink_active_range(unsigned int nid, unsigned long old_end_pfn,
+						unsigned long new_end_pfn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#81: FILE: include/linux/mm.h:1010:
+extern void remove_all_active_ranges(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#82: FILE: include/linux/mm.h:1011:
+extern unsigned long absent_pages_in_range(unsigned long start_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#83: FILE: include/linux/mm.h:1012:
+extern unsigned long absent_pages_in_range(unsigned long start_pfn,
+						unsigned long end_pfn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#84: FILE: include/linux/mm.h:1013:
+extern void get_pfn_range_for_nid(unsigned int nid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#85: FILE: include/linux/mm.h:1014:
+extern void get_pfn_range_for_nid(unsigned int nid,
+			unsigned long *start_pfn, unsigned long *end_pfn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#86: FILE: include/linux/mm.h:1015:
+extern unsigned long find_min_pfn_with_active_regions(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#87: FILE: include/linux/mm.h:1016:
+extern unsigned long find_max_pfn_with_active_regions(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#88: FILE: include/linux/mm.h:1017:
+extern void free_bootmem_with_active_regions(int nid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#89: FILE: include/linux/mm.h:1018:
+extern void free_bootmem_with_active_regions(int nid,
+						unsigned long max_low_pfn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#90: FILE: include/linux/mm.h:1019:
+extern void sparse_memory_present_with_active_regions(int nid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#92: FILE: include/linux/mm.h:1021:
+extern int early_pfn_to_nid(unsigned long pfn);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#155: FILE: mm/page_alloc.c:122:
+      #define MAX_ACTIVE_REGIONS (MAX_NUMNODES*50)
                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: mm/page_alloc.c:129:
+  struct node_active_region __initdata early_node_map[MAX_ACTIVE_REGIONS];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: mm/page_alloc.c:130:
+  int __initdata nr_nodemap_entries;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: mm/page_alloc.c:131:
+  unsigned long __initdata arch_zone_lowest_possible_pfn[MAX_NR_ZONES];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: mm/page_alloc.c:132:
+  unsigned long __initdata arch_zone_highest_possible_pfn[MAX_NR_ZONES];$

WARNING:TYPO_SPELLING: 'regardles' may be misspelled - perhaps 'regardless'?
#219: FILE: mm/page_alloc.c:2098:
+ * Note: nid == MAX_NUMNODES returns next region regardles of node
                                                  ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#254: FILE: mm/page_alloc.c:2133:
+#define for_each_active_range_index_in_nid(i, nid) \
+	for (i = first_active_region_index_in_nid(nid); i != -1; \
+				i = next_active_region_index_in_nid(i, nid))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nid' - possible side-effects?
#254: FILE: mm/page_alloc.c:2133:
+#define for_each_active_range_index_in_nid(i, nid) \
+	for (i = first_active_region_index_in_nid(nid); i != -1; \
+				i = next_active_region_index_in_nid(i, nid))

WARNING:REPEATED_WORD: Possible repeated word: 'this'
#265: FILE: mm/page_alloc.c:2144:
+ * add_active_ranges() contain no holes and may be freed, this
+ * this function may be used instead of calling free_bootmem() manually.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#268: FILE: mm/page_alloc.c:2147:
+void __init free_bootmem_with_active_regions(int nid,
+						unsigned long max_low_pfn)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#284: FILE: mm/page_alloc.c:2163:
+		free_bootmem_node(NODE_DATA(early_node_map[i].nid),
+				PFN_PHYS(early_node_map[i].start_pfn),

WARNING:REPEATED_WORD: Possible repeated word: 'this'
#295: FILE: mm/page_alloc.c:2174:
+ * add_active_ranges() contain no holes and may be freed, this
+ * this function may be used instead of calling memory_present() manually.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#303: FILE: mm/page_alloc.c:2182:
+		memory_present(early_node_map[i].nid,
+				early_node_map[i].start_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#319: FILE: mm/page_alloc.c:2198:
+void __init get_pfn_range_for_nid(unsigned int nid,
+			unsigned long *start_pfn, unsigned long *end_pfn)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#331: FILE: mm/page_alloc.c:2210:
+		printk(KERN_WARNING "Node %u active with no memory\n", nid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: mm/page_alloc.c:2220:
+unsigned long __init zone_spanned_pages_in_node(int nid,
+					unsigned long zone_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: mm/page_alloc.c:2248:
+unsigned long __init __absent_pages_in_range(int nid,
+				unsigned long range_start_pfn,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#385: FILE: mm/page_alloc.c:2264:
+	for (; i != -1; i = next_active_region_index_in_nid(i, nid)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'cound' may be misspelled - perhaps 'could'?
#394: FILE: mm/page_alloc.c:2273:
+		/* Update the hole size cound and move on */
 		                        ^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#396: FILE: mm/page_alloc.c:2275:
+			BUG_ON(prev_end_pfn > start_pfn);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#413: FILE: mm/page_alloc.c:2292:
+unsigned long __init absent_pages_in_range(unsigned long start_pfn,
+							unsigned long end_pfn)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#420: FILE: mm/page_alloc.c:2299:
+unsigned long __init zone_absent_pages_in_node(int nid,
+					unsigned long zone_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#429: FILE: mm/page_alloc.c:2308:
+static inline unsigned long zone_spanned_pages_in_node(int nid,
+					unsigned long zone_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#436: FILE: mm/page_alloc.c:2315:
+static inline unsigned long zone_absent_pages_in_node(int nid,
+						unsigned long zone_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#447: FILE: mm/page_alloc.c:2326:
+static void __init calculate_node_totalpages(struct pglist_data *pgdat,
+		unsigned long *zones_size, unsigned long *zholes_size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#461: FILE: mm/page_alloc.c:2340:
+			zone_absent_pages_in_node(pgdat->node_id, i,
+								zholes_size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#463: FILE: mm/page_alloc.c:2342:
+	printk(KERN_DEBUG "On node %d totalpages: %lu\n", pgdat->node_id,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#464: FILE: mm/page_alloc.c:2343:
+	printk(KERN_DEBUG "On node %d totalpages: %lu\n", pgdat->node_id,
+							realtotalpages);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#524: FILE: mm/page_alloc.c:2479:
+void __init add_active_range(unsigned int nid, unsigned long start_pfn,
+						unsigned long end_pfn)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#528: FILE: mm/page_alloc.c:2483:
+	printk(KERN_DEBUG "Entering add_active_range(%d, %lu, %lu) "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'add_active_range', this function's name, in a string
#528: FILE: mm/page_alloc.c:2483:
+	printk(KERN_DEBUG "Entering add_active_range(%d, %lu, %lu) "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#529: FILE: mm/page_alloc.c:2484:
+	printk(KERN_DEBUG "Entering add_active_range(%d, %lu, %lu) "
+			  "%d entries of %d used\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#540: FILE: mm/page_alloc.c:2495:
+		if (start_pfn >= early_node_map[i].start_pfn &&
+				end_pfn <= early_node_map[i].end_pfn)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#545: FILE: mm/page_alloc.c:2500:
+		if (start_pfn <= early_node_map[i].end_pfn &&
+				end_pfn > early_node_map[i].end_pfn) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#552: FILE: mm/page_alloc.c:2507:
+		if (start_pfn < early_node_map[i].end_pfn &&
+				end_pfn >= early_node_map[i].start_pfn) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#560: FILE: mm/page_alloc.c:2515:
+		printk(KERN_CRIT "More than %d memory regions, truncating\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#561: FILE: mm/page_alloc.c:2516:
+		printk(KERN_CRIT "More than %d memory regions, truncating\n",
+							MAX_ACTIVE_REGIONS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#583: FILE: mm/page_alloc.c:2538:
+void __init shrink_active_range(unsigned int nid, unsigned long old_end_pfn,
+						unsigned long new_end_pfn)

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void __init remove_all_active_ranges() should probably be void __init remove_all_active_ranges(void)
#601: FILE: mm/page_alloc.c:2556:
+void __init remove_all_active_ranges()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#626: FILE: mm/page_alloc.c:2581:
+	sort(early_node_map, (size_t)nr_nodemap_entries,
+			sizeof(struct node_active_region),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#639: FILE: mm/page_alloc.c:2594:
+	printk(KERN_WARNING "Could not find start_pfn for node %lu\n", nid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#694: FILE: mm/page_alloc.c:2649:
+	memset(arch_zone_lowest_possible_pfn, 0,
+				sizeof(arch_zone_lowest_possible_pfn));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#696: FILE: mm/page_alloc.c:2651:
+	memset(arch_zone_highest_possible_pfn, 0,
+				sizeof(arch_zone_highest_possible_pfn));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#701: FILE: mm/page_alloc.c:2656:
+			arch_zone_highest_possible_pfn[i-1];
 			                                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#710: FILE: mm/page_alloc.c:2665:
+	printk("Zone PFN ranges:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#712: FILE: mm/page_alloc.c:2667:
+		printk("  %-8s %8lu -> %8lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#713: FILE: mm/page_alloc.c:2668:
+		printk("  %-8s %8lu -> %8lu\n",
+				zone_names[i],

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#718: FILE: mm/page_alloc.c:2673:
+	printk("early_node_map[%d] active PFN ranges\n", nr_nodemap_entries);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#720: FILE: mm/page_alloc.c:2675:
+		printk("  %3d: %8lu -> %8lu\n", early_node_map[i].nid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#721: FILE: mm/page_alloc.c:2676:
+		printk("  %3d: %8lu -> %8lu\n", early_node_map[i].nid,
+						early_node_map[i].start_pfn,

WARNING:LINE_SPACING: Missing a blank line after declarations
#727: FILE: mm/page_alloc.c:2682:
+		pg_data_t *pgdat = NODE_DATA(nid);
+		free_area_init_node(nid, pgdat, NULL,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#728: FILE: mm/page_alloc.c:2683:
+		free_area_init_node(nid, pgdat, NULL,
+				find_min_pfn_for_node(nid), NULL);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000045559.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 23 warnings, 46 checks, 676 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000045559.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
