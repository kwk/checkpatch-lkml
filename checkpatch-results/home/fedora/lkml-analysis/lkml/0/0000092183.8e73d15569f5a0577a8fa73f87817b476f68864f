ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Corey Minyard'
#42: 
Signed-off-by: Corey Minyard

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#63: FILE: drivers/char/ipmi/ipmi_msghandler.c:166:
+struct bmc_device
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#82: FILE: drivers/char/ipmi/ipmi_msghandler.c:185:
+};
+#define to_bmc_device(device) container_of(device, struct bmc_device, dev)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#113: FILE: drivers/char/ipmi/ipmi_msghandler.c:339:
 };
+#define to_si_intf_from_dev(device) container_of(device, struct ipmi_smi, dev)

CHECK:SPACING: No space is necessary after a cast
#185: FILE: drivers/char/ipmi/ipmi_msghandler.c:1749:
+	unsigned char *id = (unsigned char *) data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#192: FILE: drivers/char/ipmi/ipmi_msghandler.c:1756:
+struct bmc_device * ipmi_find_bmc_guid(struct device_driver *drv,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#211: FILE: drivers/char/ipmi/ipmi_msghandler.c:1775:
+	struct prod_dev_id *id = (struct prod_dev_id *) data;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#216: FILE: drivers/char/ipmi/ipmi_msghandler.c:1780:
+	return (bmc->id.product_id == id->product_id
+		&& bmc->id.product_id == id->product_id

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#217: FILE: drivers/char/ipmi/ipmi_msghandler.c:1781:
+		&& bmc->id.product_id == id->product_id
+		&& bmc->id.device_id == id->device_id);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#220: FILE: drivers/char/ipmi/ipmi_msghandler.c:1784:
+static struct bmc_device *ipmi_find_bmc_prod_dev_id(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#239: FILE: drivers/char/ipmi/ipmi_msghandler.c:1803:
+	printk(KERN_DEBUG "ipmi_bmc release\n");

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#347: FILE: drivers/char/ipmi/ipmi_msghandler.c:1911:
+	return snprintf(buf, 100, "%Lx%Lx\n",

CHECK:SPACING: No space is necessary after a cast
#348: FILE: drivers/char/ipmi/ipmi_msghandler.c:1912:
+			(long long) bmc->guid[0],

CHECK:SPACING: No space is necessary after a cast
#349: FILE: drivers/char/ipmi/ipmi_msghandler.c:1913:
+			(long long) bmc->guid[8]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#366: FILE: drivers/char/ipmi/ipmi_msghandler.c:1930:
+		device_remove_file(&bmc->dev.dev,
+				&bmc->device_id_attr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#368: FILE: drivers/char/ipmi/ipmi_msghandler.c:1932:
+		device_remove_file(&bmc->dev.dev,
+				&bmc->provides_dev_sdrs_attr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#370: FILE: drivers/char/ipmi/ipmi_msghandler.c:1934:
+		device_remove_file(&bmc->dev.dev,
+				&bmc->revision_attr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#372: FILE: drivers/char/ipmi/ipmi_msghandler.c:1936:
+		device_remove_file(&bmc->dev.dev,
+				&bmc->firmware_rev_attr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#374: FILE: drivers/char/ipmi/ipmi_msghandler.c:1938:
+		device_remove_file(&bmc->dev.dev,
+				&bmc->version_attr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#376: FILE: drivers/char/ipmi/ipmi_msghandler.c:1940:
+		device_remove_file(&bmc->dev.dev,
+				&bmc->add_dev_support_attr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#378: FILE: drivers/char/ipmi/ipmi_msghandler.c:1942:
+		device_remove_file(&bmc->dev.dev,
+				&bmc->manufacturer_id_attr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#380: FILE: drivers/char/ipmi/ipmi_msghandler.c:1944:
+		device_remove_file(&bmc->dev.dev,
+				&bmc->product_id_attr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#382: FILE: drivers/char/ipmi/ipmi_msghandler.c:1946:
+		device_remove_file(&bmc->dev.dev,
+				&bmc->aux_firmware_rev_attr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#420: FILE: drivers/char/ipmi/ipmi_msghandler.c:1984:
+		printk(KERN_INFO

WARNING:SPLIT_STRING: quoted string split across lines
#422: FILE: drivers/char/ipmi/ipmi_msghandler.c:1986:
+		       "ipmi: interfacing existing BMC (man_id: 0x%6.6x,"
+		       " prod_id: 0x%4.4x, dev_id: 0x%2.2x)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#435: FILE: drivers/char/ipmi/ipmi_msghandler.c:1999:
+			printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#437: FILE: drivers/char/ipmi/ipmi_msghandler.c:2001:
+			       "ipmi_msghandler:"
+			       " Unable to register bmc device: %d\n",

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#444: FILE: drivers/char/ipmi/ipmi_msghandler.c:2008:
+		bmc->device_id_attr.attr.mode = S_IRUGO;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#449: FILE: drivers/char/ipmi/ipmi_msghandler.c:2013:
+		bmc->provides_dev_sdrs_attr.attr.mode = S_IRUGO;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#452: FILE: drivers/char/ipmi/ipmi_msghandler.c:2016:
+
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#455: FILE: drivers/char/ipmi/ipmi_msghandler.c:2019:
+		bmc->revision_attr.attr.mode = S_IRUGO;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#460: FILE: drivers/char/ipmi/ipmi_msghandler.c:2024:
+		bmc->firmware_rev_attr.attr.mode = S_IRUGO;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#465: FILE: drivers/char/ipmi/ipmi_msghandler.c:2029:
+		bmc->version_attr.attr.mode = S_IRUGO;

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#469: FILE: drivers/char/ipmi/ipmi_msghandler.c:2033:
+		bmc->add_dev_support_attr.attr.name
+			= "additional_device_support";

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#471: FILE: drivers/char/ipmi/ipmi_msghandler.c:2035:
+		bmc->add_dev_support_attr.attr.mode = S_IRUGO;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#476: FILE: drivers/char/ipmi/ipmi_msghandler.c:2040:
+		bmc->manufacturer_id_attr.attr.mode = S_IRUGO;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#481: FILE: drivers/char/ipmi/ipmi_msghandler.c:2045:
+		bmc->product_id_attr.attr.mode = S_IRUGO;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#486: FILE: drivers/char/ipmi/ipmi_msghandler.c:2050:
+		bmc->guid_attr.attr.mode = S_IRUGO;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#491: FILE: drivers/char/ipmi/ipmi_msghandler.c:2055:
+		bmc->aux_firmware_rev_attr.attr.mode = S_IRUGO;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#517: FILE: drivers/char/ipmi/ipmi_msghandler.c:2081:
+		printk(KERN_INFO

WARNING:SPLIT_STRING: quoted string split across lines
#519: FILE: drivers/char/ipmi/ipmi_msghandler.c:2083:
+		       "ipmi: Found new BMC (man_id: 0x%6.6x, "
+		       " prod_id: 0x%4.4x, dev_id: 0x%2.2x)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#532: FILE: drivers/char/ipmi/ipmi_msghandler.c:2096:
+		printk(KERN_ERR

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#539: FILE: drivers/char/ipmi/ipmi_msghandler.c:2103:
+	intf->my_dev_name = kmalloc(size+1, GFP_KERNEL);
 	                                ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#542: FILE: drivers/char/ipmi/ipmi_msghandler.c:2106:
+		printk(KERN_ERR

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#547: FILE: drivers/char/ipmi/ipmi_msghandler.c:2111:
+	snprintf(intf->my_dev_name, size+1, "ipmi%d", intf->intf_num);
 	                                ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#554: FILE: drivers/char/ipmi/ipmi_msghandler.c:2118:
+		printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#556: FILE: drivers/char/ipmi/ipmi_msghandler.c:2120:
+		       "ipmi_msghandler:"
+		       " Unable to create symlink to bmc: %d\n",

CHECK:SPACING: No space is necessary after a cast
#584: FILE: drivers/char/ipmi/ipmi_msghandler.c:2148:
+			      (struct ipmi_addr *) &si,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msg->addr.addr_type != IPMI_SYSTEM_INTERFACE_ADDR_TYPE'
#599: FILE: drivers/char/ipmi/ipmi_msghandler.c:2163:
+	if ((msg->addr.addr_type != IPMI_SYSTEM_INTERFACE_ADDR_TYPE)
+	    || (msg->msg.netfn != IPMI_NETFN_APP_RESPONSE)
+	    || (msg->msg.cmd != IPMI_GET_DEVICE_GUID_CMD))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msg->msg.netfn != IPMI_NETFN_APP_RESPONSE'
#599: FILE: drivers/char/ipmi/ipmi_msghandler.c:2163:
+	if ((msg->addr.addr_type != IPMI_SYSTEM_INTERFACE_ADDR_TYPE)
+	    || (msg->msg.netfn != IPMI_NETFN_APP_RESPONSE)
+	    || (msg->msg.cmd != IPMI_GET_DEVICE_GUID_CMD))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msg->msg.cmd != IPMI_GET_DEVICE_GUID_CMD'
#599: FILE: drivers/char/ipmi/ipmi_msghandler.c:2163:
+	if ((msg->addr.addr_type != IPMI_SYSTEM_INTERFACE_ADDR_TYPE)
+	    || (msg->msg.netfn != IPMI_NETFN_APP_RESPONSE)
+	    || (msg->msg.cmd != IPMI_GET_DEVICE_GUID_CMD))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#600: FILE: drivers/char/ipmi/ipmi_msghandler.c:2164:
+	if ((msg->addr.addr_type != IPMI_SYSTEM_INTERFACE_ADDR_TYPE)
+	    || (msg->msg.netfn != IPMI_NETFN_APP_RESPONSE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#601: FILE: drivers/char/ipmi/ipmi_msghandler.c:2165:
+	    || (msg->msg.netfn != IPMI_NETFN_APP_RESPONSE)
+	    || (msg->msg.cmd != IPMI_GET_DEVICE_GUID_CMD))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#613: FILE: drivers/char/ipmi/ipmi_msghandler.c:2177:
+		printk(KERN_WARNING PFX

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'guid_handler', this function's name, in a string
#614: FILE: drivers/char/ipmi/ipmi_msghandler.c:2178:
+		       "guid_handler: The GUID response from the BMC was too"

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#615: FILE: drivers/char/ipmi/ipmi_msghandler.c:2179:
+		       "guid_handler: The GUID response from the BMC was too"
+		       " short, it was %d but should have been 17.  Assuming"

WARNING:SPLIT_STRING: quoted string split across lines
#616: FILE: drivers/char/ipmi/ipmi_msghandler.c:2180:
+		       " short, it was %d but should have been 17.  Assuming"
+		       " GUID is not available.\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#742: FILE: drivers/char/ipmi/ipmi_msghandler.c:3714:
+		printk(KERN_ERR PFX "Could not register IPMI driver\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#805: FILE: include/linux/ipmi_smi.h:136:
+/* Take a pointer to a raw data buffer and a length and extract device
+   id information from it.  The first byte of data must point to the

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#808: FILE: include/linux/ipmi_smi.h:139:
+   11 and the command completed without error. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#821: FILE: include/linux/ipmi_smi.h:152:
+	if (data_len >= 15) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#822: FILE: include/linux/ipmi_smi.h:153:
+		memcpy(id->aux_firmware_revision, data+11, 4);
 		                                      ^

CHECK:BRACES: Unbalanced braces around else statement
#824: FILE: include/linux/ipmi_smi.h:155:
+	} else

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#863: FILE: drivers/char/ipmi/ipmi_si_intf.c:118:
+static struct device_driver ipmi_driver =
+{

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#935: FILE: drivers/char/ipmi/ipmi_si_intf.c:1960:
+	ipmi_demangle_device_id(resp+3, resp_len-3, &smi_info->device_id);
 	                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#935: FILE: drivers/char/ipmi/ipmi_si_intf.c:1960:
+	ipmi_demangle_device_id(resp+3, resp_len-3, &smi_info->device_id);
 	                                        ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#970: FILE: drivers/char/ipmi/ipmi_si_intf.c:2238:
+	printk(KERN_DEBUG "ipmi_si release\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#982: FILE: drivers/char/ipmi/ipmi_si_intf.c:2369:
+		 * else (like PCI), then register a new one. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#990: FILE: drivers/char/ipmi/ipmi_si_intf.c:2377:
+			printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#992: FILE: drivers/char/ipmi/ipmi_si_intf.c:2379:
+			       "ipmi_si_intf:"
+			       " Unable to register system interface device:"

WARNING:SPLIT_STRING: quoted string split across lines
#993: FILE: drivers/char/ipmi/ipmi_si_intf.c:2380:
+			       " Unable to register system interface device:"
+			       " %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1060: FILE: drivers/char/ipmi/ipmi_si_intf.c:2477:
+		printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'init_ipmi_si', this function's name, in a string
#1061: FILE: drivers/char/ipmi/ipmi_si_intf.c:2478:
+		       "init_ipmi_si: Unable to register driver: %d\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1066: FILE: drivers/char/ipmi/ipmi_si_intf.c:2483:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1123: FILE: drivers/char/ipmi/ipmi_devintf.c:797:
+};
+static LIST_HEAD(reg_list);

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1139: FILE: drivers/char/ipmi/ipmi_devintf.c:811:
+	if (! entry) {
 	    ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1140: FILE: drivers/char/ipmi/ipmi_devintf.c:812:
+		printk(KERN_ERR "ipmi_devintf: Unable to create the"

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1140: FILE: drivers/char/ipmi/ipmi_devintf.c:812:
+	if (! entry) {
+		printk(KERN_ERR "ipmi_devintf: Unable to create the"

WARNING:SPLIT_STRING: quoted string split across lines
#1141: FILE: drivers/char/ipmi/ipmi_devintf.c:813:
+		printk(KERN_ERR "ipmi_devintf: Unable to create the"
+		       " ipmi class device link\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#1176: FILE: drivers/char/ipmi/ipmi_devintf.c:892:
+	struct ipmi_reg_list *entry, *entry2;
+	down(&reg_list_sem);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000092183.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 40 warnings, 35 checks, 1080 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000092183.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
