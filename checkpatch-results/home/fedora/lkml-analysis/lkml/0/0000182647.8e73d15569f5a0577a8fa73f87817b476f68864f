ERROR:TRAILING_WHITESPACE: trailing whitespace
#64: FILE: fs/open.c:810:
+^I^Iif (!f->f_mapping->a_ops || $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!f->f_mapping->a_ops->direct_IO'
#64: FILE: fs/open.c:810:
+		if (!f->f_mapping->a_ops || 
+		    ((!f->f_mapping->a_ops->direct_IO) &&
+		    (!f->f_mapping->a_ops->get_xip_page))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!f->f_mapping->a_ops->get_xip_page'
#64: FILE: fs/open.c:810:
+		if (!f->f_mapping->a_ops || 
+		    ((!f->f_mapping->a_ops->direct_IO) &&
+		    (!f->f_mapping->a_ops->get_xip_page))) {

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#77: FILE: include/linux/fs.h:333:
+	struct page* (*get_xip_page)(struct address_space *, sector_t,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t' should also have an identifier name
#77: FILE: include/linux/fs.h:333:
+	struct page* (*get_xip_page)(struct address_space *, sector_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#77: FILE: include/linux/fs.h:333:
+	struct page* (*get_xip_page)(struct address_space *, sector_t,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#78: FILE: include/linux/fs.h:334:
+	struct page* (*get_xip_page)(struct address_space *, sector_t,
+			int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#86: FILE: include/linux/fs.h:1478:
+extern ssize_t generic_file_xip_write(struct kiocb *, const struct iovec *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#86: FILE: include/linux/fs.h:1478:
+extern ssize_t generic_file_xip_write(struct kiocb *, const struct iovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct iovec *' should also have an identifier name
#86: FILE: include/linux/fs.h:1478:
+extern ssize_t generic_file_xip_write(struct kiocb *, const struct iovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#86: FILE: include/linux/fs.h:1478:
+extern ssize_t generic_file_xip_write(struct kiocb *, const struct iovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#86: FILE: include/linux/fs.h:1478:
+extern ssize_t generic_file_xip_write(struct kiocb *, const struct iovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#86: FILE: include/linux/fs.h:1478:
+extern ssize_t generic_file_xip_write(struct kiocb *, const struct iovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#86: FILE: include/linux/fs.h:1478:
+extern ssize_t generic_file_xip_write(struct kiocb *, const struct iovec *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#87: FILE: include/linux/fs.h:1479:
+extern ssize_t generic_file_xip_write(struct kiocb *, const struct iovec *,
+		unsigned long, loff_t, loff_t *, size_t);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#98: FILE: include/linux/fs.h:1488:
+extern void do_xip_mapping_read   (struct address_space *mapping,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#98: FILE: include/linux/fs.h:1488:
+extern void do_xip_mapping_read   (struct address_space *mapping,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_ra_state *' should also have an identifier name
#98: FILE: include/linux/fs.h:1488:
+extern void do_xip_mapping_read   (struct address_space *mapping,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#98: FILE: include/linux/fs.h:1488:
+extern void do_xip_mapping_read   (struct address_space *mapping,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#98: FILE: include/linux/fs.h:1488:
+extern void do_xip_mapping_read   (struct address_space *mapping,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'read_descriptor_t *' should also have an identifier name
#98: FILE: include/linux/fs.h:1488:
+extern void do_xip_mapping_read   (struct address_space *mapping,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'read_actor_t' should also have an identifier name
#98: FILE: include/linux/fs.h:1488:
+extern void do_xip_mapping_read   (struct address_space *mapping,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#108: FILE: include/linux/fs.h:1504:
+extern int xip_truncate_page(struct address_space *mapping, loff_t from);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'file' may be better as '(file)' to avoid precedence issues
#111: FILE: include/linux/fs.h:1507:
+#define file_is_xip(file)   unlikely(file->f_mapping->a_ops->get_xip_page)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#126: FILE: include/linux/fs.h:1516:
+	if (file_is_xip(filp))
 	                ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: include/linux/fs.h:1518:
+		do_xip_mapping_read(filp->f_mapping,
+					&filp->f_ra,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#129: FILE: include/linux/fs.h:1519:
+					filp,
 					^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#136: FILE: include/linux/fs.h:1526:
+					filp,
 					^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#166: FILE: mm/filemap.c:972:
+	int xip = file_is_xip(filp) ? 1 : 0;
 	                      ^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#176: FILE: mm/filemap.c:996:
+	/* do not use generic_file_direct_IO on xip files, xip IO is
+	   implicitly direct as well */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#176: FILE: mm/filemap.c:996:
+	   implicitly direct as well */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!mapping->a_ops->readpage'
#196: FILE: mm/filemap.c:1548:
+	if ((!mapping->a_ops->readpage) && (!mapping_is_xip(mapping)))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#300: FILE: mm/filemap.c:2067:
+		written = generic_file_xip_write (iocb, iov,

ERROR:CODE_INDENT: code indent should use tabs where possible
#301: FILE: mm/filemap.c:2068:
+^I^I^I        nr_segs, pos, ppos, count);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#301: FILE: mm/filemap.c:2068:
+		written = generic_file_xip_write (iocb, iov,
+			        nr_segs, pos, ppos, count);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#312: FILE: mm/filemap.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#313: FILE: mm/filemap.h:2:
+ *	linux/mm/filemap.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#331: FILE: mm/filemap.h:20:
+#include <asm/uaccess.h>

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#334: FILE: mm/filemap.h:23:
+extern struct vm_operations_struct xip_file_vm_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#339: FILE: mm/filemap.h:28:
+		    struct file *filp,
 		                 ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#345: FILE: mm/filemap.h:34:
+__filemap_xip_unmap (struct address_space * mapping,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#345: FILE: mm/filemap.h:34:
+__filemap_xip_unmap (struct address_space * mapping,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#349: FILE: mm/filemap.h:38:
+filemap_xip_nopage(struct vm_area_struct * area,

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'map' may be better as '(map)' to avoid precedence issues
#362: FILE: mm/filemap.h:51:
+#define mapping_is_xip(map)      unlikely(map->a_ops->get_xip_page)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'map' - possible side-effects?
#363: FILE: mm/filemap.h:52:
+#define mapping_is_xip_save(map) unlikely(map && map->a_ops \
+                                          && map->a_ops->get_xip_page)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'map' may be better as '(map)' to avoid precedence issues
#363: FILE: mm/filemap.h:52:
+#define mapping_is_xip_save(map) unlikely(map && map->a_ops \
+                                          && map->a_ops->get_xip_page)

ERROR:CODE_INDENT: code indent should use tabs where possible
#364: FILE: mm/filemap.h:53:
+                                          && map->a_ops->get_xip_page)$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#364: FILE: mm/filemap.h:53:
+#define mapping_is_xip_save(map) unlikely(map && map->a_ops \
+                                          && map->a_ops->get_xip_page)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#364: FILE: mm/filemap.h:53:
+                                          && map->a_ops->get_xip_page)$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#368: FILE: mm/filemap.h:57:
+#define do_xip_mapping_read(arg1, arg2, arg3, arg4, arg5) BUG()

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#369: FILE: mm/filemap.h:58:
+#define xip_truncate_page(map, from) BUG()

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#372: FILE: mm/filemap.h:61:
+extern struct vm_operations_struct xip_file_vm_ops;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#375: FILE: mm/filemap.h:64:
+__filemap_copy_from_user_iovec(char *vaddr, $

WARNING:TYPO_SPELLING: 'sucessfully' may be misspelled - perhaps 'successfully'?
#382: FILE: mm/filemap.h:71:
+ * were sucessfully copied.  If a fault is encountered then clear the page
         ^^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#387: FILE: mm/filemap.h:76:
+filemap_copy_from_user(struct page *page, unsigned long offset,
+			const char __user *buf, unsigned bytes)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#387: FILE: mm/filemap.h:76:
+			const char __user *buf, unsigned bytes)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#413: FILE: mm/filemap.h:102:
+filemap_copy_from_user_iovec(struct page *page, unsigned long offset,
+			const struct iovec *iov, size_t base, size_t bytes)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#451: FILE: mm/filemap.h:140:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#457: FILE: mm/filemap_xip.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#458: FILE: mm/filemap_xip.c:2:
+ *	linux/mm/filemap_xip.c

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#472: FILE: mm/filemap_xip.c:16:
+struct vm_operations_struct xip_file_vm_ops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#476: FILE: mm/filemap_xip.c:20:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#478: FILE: mm/filemap_xip.c:22:
+ * This is a generic file read routine for execute in place files, and uses $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#487: FILE: mm/filemap_xip.c:31:
+		    struct file *filp,
 		                 ^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#496: FILE: mm/filemap_xip.c:40:
+	BUG_ON(!mapping->a_ops->get_xip_page);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#516: FILE: mm/filemap_xip.c:60:
+			if (nr <= offset) {
+				goto out;
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#523: FILE: mm/filemap_xip.c:67:
+			index*(PAGE_SIZE/512), 0);
 			     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#523: FILE: mm/filemap_xip.c:67:
+			index*(PAGE_SIZE/512), 0);
 			                ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#526: FILE: mm/filemap_xip.c:70:
+		if (unlikely(IS_ERR(page))) {
[...]
+		} else
[...]

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#526: FILE: mm/filemap_xip.c:70:
+		if (unlikely(IS_ERR(page))) {

CHECK:BRACES: Unbalanced braces around else statement
#534: FILE: mm/filemap_xip.c:78:
+		} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#535: FILE: mm/filemap_xip.c:79:
+			BUG_ON(!PageUptodate(page));

CHECK:SPACING: No space is necessary after a cast
#570: FILE: mm/filemap_xip.c:114:
+	*ppos = ((loff_t) index << PAGE_CACHE_SHIFT) + offset;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#571: FILE: mm/filemap_xip.c:115:
+	if (filp)
 	    ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#572: FILE: mm/filemap_xip.c:116:
+		file_accessed(filp);
 		              ^^^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#575: FILE: mm/filemap_xip.c:119:
+EXPORT_SYMBOL(do_xip_mapping_read);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#577: FILE: mm/filemap_xip.c:121:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#586: FILE: mm/filemap_xip.c:130:
+__filemap_xip_unmap (struct address_space * mapping,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#586: FILE: mm/filemap_xip.c:130:
+__filemap_xip_unmap (struct address_space * mapping,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#604: FILE: mm/filemap_xip.c:148:
+		BUG_ON(address < vma->vm_start || address >= vma->vm_end);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#619: FILE: mm/filemap_xip.c:163:
+^I^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#630: FILE: mm/filemap_xip.c:174:
+		BUG_ON(pte_dirty(pteval));

WARNING:INDENTED_LABEL: labels should not be indented
#631: FILE: mm/filemap_xip.c:175:
+	next_unmap:

WARNING:INDENTED_LABEL: labels should not be indented
#633: FILE: mm/filemap_xip.c:177:
+	next_unlock:

CHECK:LINE_SPACING: Please don't use multiple blank lines
#639: FILE: mm/filemap_xip.c:183:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#647: FILE: mm/filemap_xip.c:191:
+filemap_xip_nopage(struct vm_area_struct * area,

WARNING:BRACES: braces {} are not necessary for single statement blocks
#663: FILE: mm/filemap_xip.c:207:
+	if (pgoff >= size) {
+		return NULL;
+	}

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#667: FILE: mm/filemap_xip.c:211:
+	page = mapping->a_ops->get_xip_page(mapping, pgoff*(PAGE_SIZE/512), 0);
 	                                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#667: FILE: mm/filemap_xip.c:211:
+	page = mapping->a_ops->get_xip_page(mapping, pgoff*(PAGE_SIZE/512), 0);
 	                                                             ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#669: FILE: mm/filemap_xip.c:213:
+		BUG_ON(!PageUptodate(page));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxW)
#677: FILE: mm/filemap_xip.c:221:
+	    (area->vm_flags & (VM_SHARED| VM_MAYSHARE)) &&
 	                                ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#680: FILE: mm/filemap_xip.c:224:
+		page = mapping->a_ops->get_xip_page (mapping,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#681: FILE: mm/filemap_xip.c:225:
+			pgoff*(PAGE_SIZE/512), 1);
 			     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#681: FILE: mm/filemap_xip.c:225:
+			pgoff*(PAGE_SIZE/512), 1);
 			                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#684: FILE: mm/filemap_xip.c:228:
+		BUG_ON(!PageUptodate(page));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#695: FILE: mm/filemap_xip.c:239:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#702: FILE: mm/filemap_xip.c:246:
+	struct address_space * mapping = file->f_mapping;

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#703: FILE: mm/filemap_xip.c:247:
+	struct address_space_operations *a_ops = mapping->a_ops;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#704: FILE: mm/filemap_xip.c:248:
+^Istruct inode ^I*inode = mapping->host;$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#713: FILE: mm/filemap_xip.c:257:
+	BUG_ON(!mapping->a_ops->get_xip_page);

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#721: FILE: mm/filemap_xip.c:265:
+		offset = (pos & (PAGE_CACHE_SIZE -1)); /* Within page */
 		                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#736: FILE: mm/filemap_xip.c:280:
+						    index*(PAGE_SIZE/512), 0);
 						         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#736: FILE: mm/filemap_xip.c:280:
+						    index*(PAGE_SIZE/512), 0);
 						                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#740: FILE: mm/filemap_xip.c:284:
+				index*(PAGE_SIZE/512), 1);
 				     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#740: FILE: mm/filemap_xip.c:284:
+				index*(PAGE_SIZE/512), 1);
 				                ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#741: FILE: mm/filemap_xip.c:285:
+			if (!IS_ERR(page))
[...]
+			__filemap_xip_unmap(mapping, index);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#745: FILE: mm/filemap_xip.c:289:
+
+		}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#752: FILE: mm/filemap_xip.c:296:
+		BUG_ON(!PageUptodate(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#759: FILE: mm/filemap_xip.c:303:
+			copied = filemap_copy_from_user_iovec(page, offset,
+						cur_iov, iov_base, bytes);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#771: FILE: mm/filemap_xip.c:315:
+					filemap_set_next_iovec(&cur_iov,
+							&iov_base, status);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#794: FILE: mm/filemap_xip.c:338:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#804: FILE: mm/filemap_xip.c:348:
+	unsigned offset = from & (PAGE_CACHE_SIZE-1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#804: FILE: mm/filemap_xip.c:348:
+	unsigned offset = from & (PAGE_CACHE_SIZE-1);
 	                                         ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#805: FILE: mm/filemap_xip.c:349:
+	unsigned blocksize;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#806: FILE: mm/filemap_xip.c:350:
+	unsigned length;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#821: FILE: mm/filemap_xip.c:365:
+					    index*(PAGE_SIZE/512), 0);
 					         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#821: FILE: mm/filemap_xip.c:365:
+					    index*(PAGE_SIZE/512), 0);
 					                    ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#825: FILE: mm/filemap_xip.c:369:
+	if (unlikely(IS_ERR(page))) {
[...]
+	} else
[...]

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#825: FILE: mm/filemap_xip.c:369:
+	if (unlikely(IS_ERR(page))) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#829: FILE: mm/filemap_xip.c:373:
+			return 0;
+		} else {

CHECK:BRACES: Unbalanced braces around else statement
#833: FILE: mm/filemap_xip.c:377:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#834: FILE: mm/filemap_xip.c:378:
+		BUG_ON(!PageUptodate(page));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000182647.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 65 warnings, 46 checks, 756 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000182647.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
