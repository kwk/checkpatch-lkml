WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#48: FILE: fs/exec.c:863:
+	ptab(printk(">>> execve %s\n", filename));

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#59: FILE: include/linux/mm.h:414:
+extern pte_t *FASTCALL(__pte_alloc(struct mm_struct *mm, pmd_t *pmd, unsigned long address, int write));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#59: FILE: include/linux/mm.h:414:
+extern pte_t *FASTCALL(__pte_alloc(struct mm_struct *mm, pmd_t *pmd, unsigned long address, int write));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#97: FILE: kernel/fork.c:143:
+	ptab(printk(">>> dup_mmap\n"));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#105: FILE: kernel/fork.c:570:
+	ptab(printk(">>> fork, stack=%lx\n", stack_start));

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#122: FILE: kernel/sys.c:520:
+	printk(">>> user: uid=%i pid=%i pf=%x\n", current->uid, current->pid, current->flags);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#123: FILE: kernel/sys.c:521:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#143: FILE: mm/memory.c:55:
+#define assert(cond) do { if (!(cond)) BUG(); } while (0)

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#154: FILE: mm/memory.c:108:
+	ptab(printk(">>> free page table %p (%i--)\n", pte, page_count(virt_to_page(pte))));

WARNING:LINE_SPACING: Missing a blank line after declarations
#169: FILE: mm/memory.c:155:
+	pgd_t *page_dir = mm->pgd;
+	ptab(printk(">>> clear_page_tables\n"));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#169: FILE: mm/memory.c:155:
+	ptab(printk(">>> clear_page_tables\n"));

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#190: FILE: mm/memory.c:192:
+#if 0

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#191: FILE: mm/memory.c:193:
+	static int teststart = 2, testcount = 99, tests = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:LINE_SPACING: Missing a blank line after declarations
#192: FILE: mm/memory.c:194:
+	static int teststart = 2, testcount = 99, tests = 0;
+	if (share_page_tables && (tests++ < teststart || tests > teststart + testcount))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#195: FILE: mm/memory.c:197:
+		printk(">>> copy_page_range test %i\n", tests - 1);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'copy_page_range', this function's name, in a string
#195: FILE: mm/memory.c:197:
+		printk(">>> copy_page_range test %i\n", tests - 1);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#251: FILE: mm/memory.c:241:
+			if (!share_page_tables) goto no_share;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: No space is necessary after a cast
#256: FILE: mm/memory.c:246:
+				pmd_populate(dst, dst_pmd, ((ulong) src_ptb & PAGE_MASK));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 128 exceeds 100 columns
#257: FILE: mm/memory.c:247:
+				ptab(printk(">>> share %p @ %p (++%i)\n", src_ptb, address, page_count(virt_to_page(src_ptb))));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#257: FILE: mm/memory.c:247:
+				ptab(printk(">>> share %p @ %p (++%i)\n", src_ptb, address, page_count(virt_to_page(src_ptb))));

WARNING:LINE_SPACING: Missing a blank line after declarations
#266: FILE: mm/memory.c:256:
+				pte_t pte = *src_ptb;
+				if (!pte_none(pte) && pte_present(pte)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#268: FILE: mm/memory.c:258:
+					struct page *page = pte_page(pte);
+					if (VALID_PAGE(page) && !PageReserved(page) && cow)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#271: FILE: mm/memory.c:261:
+				if ((address += PAGE_SIZE) >= end)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: No space is necessary after a cast
#274: FILE: mm/memory.c:264:
+			} while ((ulong) src_ptb & PTE_TABLE_MASK);

CHECK:SPACING: No space is necessary after a cast
#326: FILE: mm/memory.c:308:
+			} while ((ulong) src_ptb & PTE_TABLE_MASK);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#348: FILE: mm/memory.c:343:
+^I^Ipmd_clear(pmd);^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#356: FILE: mm/memory.c:351:
+		ptab(printk(">>> zap table!!! %p (%i)\n", ptep, page_count(virt_to_page(ptep))));

CHECK:SPACING: No space is necessary after a cast
#357: FILE: mm/memory.c:352:
+		tlb_remove_page(tlb, (pte_t *) pmd, pmd_val(*pmd));

WARNING:LINE_SPACING: Missing a blank line after declarations
#376: FILE: mm/memory.c:413:
+			pmd_t *pmd = pmd_offset(dir, address);
+			if (!pmd_none(*pmd)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#378: FILE: mm/memory.c:415:
+				pte_t *ptb = pte_offset(pmd, address);
+				if (page_count(virt_to_page(ptb)) > 1) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#411: FILE: mm/memory.c:598:
+^I^I$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#439: FILE: mm/memory.c:1488:
+		if (!new) return NULL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#463: FILE: mm/memory.c:1501:
+	if (!new) return NULL;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#471: FILE: mm/memory.c:1509:
+	ptab(printk(">>> make page table %p @ %p %s\n", new, address,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#472: FILE: mm/memory.c:1510:
+	ptab(printk(">>> make page table %p @ %p %s\n", new, address,
+		unshare == 2? "write fault":

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#472: FILE: mm/memory.c:1510:
+		unshare == 2? "write fault":
 		            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#472: FILE: mm/memory.c:1510:
+		unshare == 2? "write fault":
 		                           ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#473: FILE: mm/memory.c:1511:
+		unshare == 1? "unshared":
 		            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#473: FILE: mm/memory.c:1511:
+		unshare == 1? "unshared":
 		                        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#478: FILE: mm/memory.c:1516:
+	ptab(printk(">>> unshare %p (%i--)\n", *pmd, page_count(ptb_page)));

WARNING:LINE_SPACING: Missing a blank line after declarations
#482: FILE: mm/memory.c:1520:
+		pte_t pte = *src_ptb;
+		if (!pte_none(pte)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#483: FILE: mm/memory.c:1521:
+			if (pte_present(pte)) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#485: FILE: mm/memory.c:1523:
+				struct page *page = pte_page(pte);
+				if (VALID_PAGE(page) && !PageReserved(page)) {

CHECK:BRACES: Unbalanced braces around else statement
#490: FILE: mm/memory.c:1528:
+			} else

CHECK:SPACING: No space is necessary after a cast
#496: FILE: mm/memory.c:1534:
+	} while ((ulong) dst_ptb & PTE_TABLE_MASK);

ERROR:CODE_INDENT: code indent should use tabs where possible
#507: FILE: mm/memory.c:1545:
+        goto unshared;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#507: FILE: mm/memory.c:1545:
+        goto unshared;$

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#517: FILE: mm/mremap.c:95:
+	ptab(printk(">>> mremap\n"));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000475898.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 33 warnings, 9 checks, 442 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000475898.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
