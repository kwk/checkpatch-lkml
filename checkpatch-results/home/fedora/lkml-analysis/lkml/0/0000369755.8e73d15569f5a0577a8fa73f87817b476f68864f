ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#61: 
--- a/include/linux/security.h	Thu May 15 09:29:12 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#68: FILE: include/linux/security.h:380:
+ *^ICopy the extended attribute representation of the security label $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#69: FILE: include/linux/security.h:381:
+ *^Iassociated with @name for @dentry into @buffer.  @buffer may be $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#75: FILE: include/linux/security.h:387:
+ *^ISet the security label associated with @name for @dentry from the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#78: FILE: include/linux/security.h:390:
+ *^INote that @name is the remainder of the attribute name after the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#83: FILE: include/linux/security.h:395:
+ *^Iassociated with @dentry into @buffer.  @buffer may be NULL to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#84: FILE: include/linux/security.h:396:
+ *^Irequest the size of the buffer required.  $

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#93: FILE: include/linux/security.h:1066:
+  	int (*inode_getsecurity)(struct dentry *dentry, const char *name, void *buffer, size_t size);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:CODE_INDENT: code indent should use tabs where possible
#93: FILE: include/linux/security.h:1066:
+  ^Iint (*inode_getsecurity)(struct dentry *dentry, const char *name, void *buffer, size_t size);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#93: FILE: include/linux/security.h:1066:
+  ^Iint (*inode_getsecurity)(struct dentry *dentry, const char *name, void *buffer, size_t size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: include/linux/security.h:1066:
+  ^Iint (*inode_getsecurity)(struct dentry *dentry, const char *name, void *buffer, size_t size);$

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#94: FILE: include/linux/security.h:1067:
+  	int (*inode_setsecurity)(struct dentry *dentry, const char *name, const void *value, size_t size, int flags);

ERROR:CODE_INDENT: code indent should use tabs where possible
#94: FILE: include/linux/security.h:1067:
+  ^Iint (*inode_setsecurity)(struct dentry *dentry, const char *name, const void *value, size_t size, int flags);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#94: FILE: include/linux/security.h:1067:
+  ^Iint (*inode_setsecurity)(struct dentry *dentry, const char *name, const void *value, size_t size, int flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: include/linux/security.h:1067:
+  ^Iint (*inode_setsecurity)(struct dentry *dentry, const char *name, const void *value, size_t size, int flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#95: FILE: include/linux/security.h:1068:
+  ^Iint (*inode_listsecurity)(struct dentry *dentry, char *buffer);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#95: FILE: include/linux/security.h:1068:
+  ^Iint (*inode_listsecurity)(struct dentry *dentry, char *buffer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: include/linux/security.h:1068:
+  ^Iint (*inode_listsecurity)(struct dentry *dentry, char *buffer);$

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#103: FILE: include/linux/security.h:1515:
+static inline int security_inode_getsecurity(struct dentry *dentry, const char *name, void *buffer, size_t size)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#108: FILE: include/linux/security.h:1520:
+static inline int security_inode_setsecurity(struct dentry *dentry, const char *name, const void *value, size_t size, int flags) $

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#108: FILE: include/linux/security.h:1520:
+static inline int security_inode_setsecurity(struct dentry *dentry, const char *name, const void *value, size_t size, int flags) 

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#127: FILE: include/linux/security.h:2133:
+static inline int security_inode_getsecurity(struct dentry *dentry, const char *name, void *buffer, size_t size)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#132: FILE: include/linux/security.h:2138:
+static inline int security_inode_setsecurity(struct dentry *dentry, const char *name, const void *value, size_t size, int flags) $

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#132: FILE: include/linux/security.h:2138:
+static inline int security_inode_setsecurity(struct dentry *dentry, const char *name, const void *value, size_t size, int flags) 

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#150: FILE: security/dummy.c:357:
+static int dummy_inode_getsecurity(struct dentry *dentry, const char *name, void *buffer, size_t size)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#155: FILE: security/dummy.c:362:
+static int dummy_inode_setsecurity(struct dentry *dentry, const char *name, const void *value, size_t size, int flags) $

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#155: FILE: security/dummy.c:362:
+static int dummy_inode_setsecurity(struct dentry *dentry, const char *name, const void *value, size_t size, int flags) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#219: FILE: fs/devpts/Makefile:10:
+devpts-objs += xattr.o $

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#240: FILE: fs/devpts/inode.c:134:
+static struct inode_operations devpts_file_inode_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#264: FILE: fs/devpts/inode.c:180:
+	int err = init_devpts_xattr();
+	if (err)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#282: FILE: fs/devpts/xattr.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#283: FILE: fs/devpts/xattr.c:2:
+  File: fs/devpts/xattr.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#283: FILE: fs/devpts/xattr.c:2:
+/*
+  File: fs/devpts/xattr.c

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#284: FILE: fs/devpts/xattr.c:3:
+ $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#308: FILE: fs/devpts/xattr.c:27:
+		if (!devpts_xattr_handlers[name_index-1]) {
 		                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#309: FILE: fs/devpts/xattr.c:28:
+			devpts_xattr_handlers[name_index-1] = handler;
 			                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#322: FILE: fs/devpts/xattr.c:41:
+		devpts_xattr_handlers[name_index-1] = NULL;
 		                                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#350: FILE: fs/devpts/xattr.c:69:
+	for (i=0; i<DEVPTS_XATTR_INDEX_MAX; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#350: FILE: fs/devpts/xattr.c:69:
+	for (i=0; i<DEVPTS_XATTR_INDEX_MAX; i++) {
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#369: FILE: fs/devpts/xattr.c:88:
+	struct devpts_xattr_handler *handler = NULL;
+	if (name_index > 0 && name_index <= DEVPTS_XATTR_INDEX_MAX) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#371: FILE: fs/devpts/xattr.c:90:
+		handler = devpts_xattr_handlers[name_index-1];
 		                                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#384: FILE: fs/devpts/xattr.c:103:
+devpts_getxattr(struct dentry *dentry, const char *name,
+	      void *buffer, size_t size)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#409: FILE: fs/devpts/xattr.c:128:
+	for (i=0; i<DEVPTS_XATTR_INDEX_MAX; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#409: FILE: fs/devpts/xattr.c:128:
+	for (i=0; i<DEVPTS_XATTR_INDEX_MAX; i++) {
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#425: FILE: fs/devpts/xattr.c:144:
+	for (i=0; i<DEVPTS_XATTR_INDEX_MAX; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#425: FILE: fs/devpts/xattr.c:144:
+	for (i=0; i<DEVPTS_XATTR_INDEX_MAX; i++) {
 	           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#444: FILE: fs/devpts/xattr.c:163:
+devpts_setxattr(struct dentry *dentry, const char *name,
+	      const void *value, size_t size, int flags)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#475: FILE: fs/devpts/xattr.c:194:
+#ifdef CONFIG_DEVPTS_FS_SECURITY^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#490: FILE: fs/devpts/xattr.c:209:
+#ifdef CONFIG_DEVPTS_FS_SECURITY^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#495: FILE: fs/devpts/xattr.c:214:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#500: FILE: fs/devpts/xattr.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#501: FILE: fs/devpts/xattr.h:2:
+  File: fs/devpts/xattr.h

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#501: FILE: fs/devpts/xattr.h:2:
+/*
+  File: fs/devpts/xattr.h

ERROR:TRAILING_WHITESPACE: trailing whitespace
#502: FILE: fs/devpts/xattr.h:3:
+ $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#527: FILE: fs/devpts/xattr.h:28:
+extern int devpts_xattr_register(int, struct devpts_xattr_handler *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#527: FILE: fs/devpts/xattr.h:28:
+extern int devpts_xattr_register(int, struct devpts_xattr_handler *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct devpts_xattr_handler *' should also have an identifier name
#527: FILE: fs/devpts/xattr.h:28:
+extern int devpts_xattr_register(int, struct devpts_xattr_handler *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#528: FILE: fs/devpts/xattr.h:29:
+extern void devpts_xattr_unregister(int, struct devpts_xattr_handler *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#528: FILE: fs/devpts/xattr.h:29:
+extern void devpts_xattr_unregister(int, struct devpts_xattr_handler *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct devpts_xattr_handler *' should also have an identifier name
#528: FILE: fs/devpts/xattr.h:29:
+extern void devpts_xattr_unregister(int, struct devpts_xattr_handler *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#530: FILE: fs/devpts/xattr.h:31:
+extern int devpts_setxattr(struct dentry *, const char *, const void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#530: FILE: fs/devpts/xattr.h:31:
+extern int devpts_setxattr(struct dentry *, const char *, const void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#530: FILE: fs/devpts/xattr.h:31:
+extern int devpts_setxattr(struct dentry *, const char *, const void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#530: FILE: fs/devpts/xattr.h:31:
+extern int devpts_setxattr(struct dentry *, const char *, const void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#530: FILE: fs/devpts/xattr.h:31:
+extern int devpts_setxattr(struct dentry *, const char *, const void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#530: FILE: fs/devpts/xattr.h:31:
+extern int devpts_setxattr(struct dentry *, const char *, const void *, size_t, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#531: FILE: fs/devpts/xattr.h:32:
+extern ssize_t devpts_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#531: FILE: fs/devpts/xattr.h:32:
+extern ssize_t devpts_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#531: FILE: fs/devpts/xattr.h:32:
+extern ssize_t devpts_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#531: FILE: fs/devpts/xattr.h:32:
+extern ssize_t devpts_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#531: FILE: fs/devpts/xattr.h:32:
+extern ssize_t devpts_getxattr(struct dentry *, const char *, void *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#532: FILE: fs/devpts/xattr.h:33:
+extern ssize_t devpts_listxattr(struct dentry *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#532: FILE: fs/devpts/xattr.h:33:
+extern ssize_t devpts_listxattr(struct dentry *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#532: FILE: fs/devpts/xattr.h:33:
+extern ssize_t devpts_listxattr(struct dentry *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#532: FILE: fs/devpts/xattr.h:33:
+extern ssize_t devpts_listxattr(struct dentry *, char *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#533: FILE: fs/devpts/xattr.h:34:
+extern int devpts_removexattr(struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#533: FILE: fs/devpts/xattr.h:34:
+extern int devpts_removexattr(struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#533: FILE: fs/devpts/xattr.h:34:
+extern int devpts_removexattr(struct dentry *, const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#535: FILE: fs/devpts/xattr.h:36:
+extern int init_devpts_xattr(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#536: FILE: fs/devpts/xattr.h:37:
+extern void exit_devpts_xattr(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#563: FILE: fs/devpts/xattr_security.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#564: FILE: fs/devpts/xattr_security.c:2:
+ * File: fs/devpts/xattr_security.c

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000369755.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 24 errors, 43 warnings, 15 checks, 505 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000369755.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
