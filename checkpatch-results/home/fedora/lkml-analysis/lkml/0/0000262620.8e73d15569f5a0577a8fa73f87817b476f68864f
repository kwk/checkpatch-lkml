WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#37: FILE: arch/ppc/platforms/4xx/Kconfig:178:
+config PPC4xx_DMA
+	bool "PPC4xx DMA controller support"
+	depends on 4xx
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#93: FILE: arch/ppc/syslib/ppc4xx_dma.c:21:
+ * 675 Mass Ave, Cambridge, MA 02139, USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#107: FILE: arch/ppc/syslib/ppc4xx_dma.c:32:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#115: FILE: arch/ppc/syslib/ppc4xx_dma.c:40:
+	return (mfdcr(DCRN_DMASR));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#122: FILE: arch/ppc/syslib/ppc4xx_dma.c:47:
+		printk("set_src_addr: bad channel: %d\n", dmanr);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#127: FILE: arch/ppc/syslib/ppc4xx_dma.c:52:
+	mtdcr(DCRN_DMASAH0 + dmanr*2, (u32)(src_addr >> 32));
 	                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#129: FILE: arch/ppc/syslib/ppc4xx_dma.c:54:
+	mtdcr(DCRN_DMASA0 + dmanr*2, (u32)src_addr);
 	                         ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#137: FILE: arch/ppc/syslib/ppc4xx_dma.c:62:
+		printk("set_dst_addr: bad channel: %d\n", dmanr);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#142: FILE: arch/ppc/syslib/ppc4xx_dma.c:67:
+	mtdcr(DCRN_DMADAH0 + dmanr*2, (u32)(dst_addr >> 32));
 	                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#144: FILE: arch/ppc/syslib/ppc4xx_dma.c:69:
+	mtdcr(DCRN_DMADA0 + dmanr*2, (u32)dst_addr);
 	                         ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#159: FILE: arch/ppc/syslib/ppc4xx_dma.c:84:
+		printk("enable_dma: channel %d in use\n", dmanr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#164: FILE: arch/ppc/syslib/ppc4xx_dma.c:89:
+		printk("enable_dma: bad channel: %d\n", dmanr);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p_dma_ch->mode == DMA_MODE_MM_DEVATDST'
#204: FILE: arch/ppc/syslib/ppc4xx_dma.c:129:
+	if ((p_dma_ch->mode == DMA_MODE_MM_DEVATDST) ||
+	    (p_dma_ch->mode == DMA_MODE_MM_DEVATSRC))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p_dma_ch->mode == DMA_MODE_MM_DEVATSRC'
#204: FILE: arch/ppc/syslib/ppc4xx_dma.c:129:
+	if ((p_dma_ch->mode == DMA_MODE_MM_DEVATDST) ||
+	    (p_dma_ch->mode == DMA_MODE_MM_DEVATSRC))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#226: FILE: arch/ppc/syslib/ppc4xx_dma.c:151:
+		printk("disable_dma: channel %d not in use\n", dmanr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#231: FILE: arch/ppc/syslib/ppc4xx_dma.c:156:
+		printk("disable_dma: bad channel: %d\n", dmanr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#265: FILE: arch/ppc/syslib/ppc4xx_dma.c:190:
+		printk("set_dma_mode: bad channel 0x%x\n", dmanr);

CHECK:CAMELCASE: Avoid CamelCase: <DEBUG_4xxDMA>
#285: FILE: arch/ppc/syslib/ppc4xx_dma.c:210:
+#ifdef DEBUG_4xxDMA

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LINE_SPACING: Missing a blank line after declarations
#288: FILE: arch/ppc/syslib/ppc4xx_dma.c:213:
+		int error = 0;
+		switch (p_dma_ch->pwidth) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#304: FILE: arch/ppc/syslib/ppc4xx_dma.c:229:
+			printk("set_dma_count: invalid bus width: 0x%x\n",

WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#322: FILE: arch/ppc/syslib/ppc4xx_dma.c:246:
+ *   Returns the number of bytes left to be transfered.
                                             ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#341: FILE: arch/ppc/syslib/ppc4xx_dma.c:258:
+		printk("ppc4xx_get_dma_residue: bad channel 0x%x\n", dmanr);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_get_dma_residue', this function's name, in a string
#341: FILE: arch/ppc/syslib/ppc4xx_dma.c:258:
+		printk("ppc4xx_get_dma_residue: bad channel 0x%x\n", dmanr);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#362: FILE: arch/ppc/syslib/ppc4xx_dma.c:278:
+		printk("ppc4xx_set_dma_addr: bad channel: %d\n", dmanr);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_set_dma_addr', this function's name, in a string
#362: FILE: arch/ppc/syslib/ppc4xx_dma.c:278:
+		printk("ppc4xx_set_dma_addr: bad channel: %d\n", dmanr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#369: FILE: arch/ppc/syslib/ppc4xx_dma.c:285:
+		int error = 0;
+		switch (p_dma_ch->pwidth) {

CHECK:SPACING: No space is necessary after a cast
#373: FILE: arch/ppc/syslib/ppc4xx_dma.c:289:
+			if ((unsigned) addr & 0x1)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#373: FILE: arch/ppc/syslib/ppc4xx_dma.c:289:
+			if ((unsigned) addr & 0x1)

CHECK:SPACING: No space is necessary after a cast
#377: FILE: arch/ppc/syslib/ppc4xx_dma.c:293:
+			if ((unsigned) addr & 0x3)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#377: FILE: arch/ppc/syslib/ppc4xx_dma.c:293:
+			if ((unsigned) addr & 0x3)

CHECK:SPACING: No space is necessary after a cast
#381: FILE: arch/ppc/syslib/ppc4xx_dma.c:297:
+			if ((unsigned) addr & 0x7)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#381: FILE: arch/ppc/syslib/ppc4xx_dma.c:297:
+			if ((unsigned) addr & 0x7)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#385: FILE: arch/ppc/syslib/ppc4xx_dma.c:301:
+			printk("ppc4xx_set_dma_addr: invalid bus width: 0x%x\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_set_dma_addr', this function's name, in a string
#385: FILE: arch/ppc/syslib/ppc4xx_dma.c:301:
+			printk("ppc4xx_set_dma_addr: invalid bus width: 0x%x\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#390: FILE: arch/ppc/syslib/ppc4xx_dma.c:306:
+			printk("Warning: ppc4xx_set_dma_addr addr 0x%x bus width %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_set_dma_addr', this function's name, in a string
#390: FILE: arch/ppc/syslib/ppc4xx_dma.c:306:
+			printk("Warning: ppc4xx_set_dma_addr addr 0x%x bus width %d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#409: FILE: arch/ppc/syslib/ppc4xx_dma.c:325:
+		printk("ppc4xx_set_dma_addr2: bad channel: %d\n", dmanr);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_set_dma_addr2', this function's name, in a string
#409: FILE: arch/ppc/syslib/ppc4xx_dma.c:325:
+		printk("ppc4xx_set_dma_addr2: bad channel: %d\n", dmanr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#417: FILE: arch/ppc/syslib/ppc4xx_dma.c:333:
+		int error = 0;
+		switch (p_dma_ch->pwidth) {

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#417: FILE: arch/ppc/syslib/ppc4xx_dma.c:333:
+		switch (p_dma_ch->pwidth) {
+			case PW_8:
[...]
+			case PW_16:
[...]
+			case PW_32:
[...]
+			case PW_64:
[...]
+			default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: No space is necessary after a cast
#421: FILE: arch/ppc/syslib/ppc4xx_dma.c:337:
+				if (((unsigned) src_dma_addr & 0x1) ||

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#421: FILE: arch/ppc/syslib/ppc4xx_dma.c:337:
+				if (((unsigned) src_dma_addr & 0x1) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#422: FILE: arch/ppc/syslib/ppc4xx_dma.c:338:
+				if (((unsigned) src_dma_addr & 0x1) ||
+						((unsigned) dst_dma_addr & 0x1)

CHECK:SPACING: No space is necessary after a cast
#422: FILE: arch/ppc/syslib/ppc4xx_dma.c:338:
+						((unsigned) dst_dma_addr & 0x1)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#422: FILE: arch/ppc/syslib/ppc4xx_dma.c:338:
+						((unsigned) dst_dma_addr & 0x1)

CHECK:SPACING: No space is necessary after a cast
#427: FILE: arch/ppc/syslib/ppc4xx_dma.c:343:
+				if (((unsigned) src_dma_addr & 0x3) ||

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#427: FILE: arch/ppc/syslib/ppc4xx_dma.c:343:
+				if (((unsigned) src_dma_addr & 0x3) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#428: FILE: arch/ppc/syslib/ppc4xx_dma.c:344:
+				if (((unsigned) src_dma_addr & 0x3) ||
+						((unsigned) dst_dma_addr & 0x3)

CHECK:SPACING: No space is necessary after a cast
#428: FILE: arch/ppc/syslib/ppc4xx_dma.c:344:
+						((unsigned) dst_dma_addr & 0x3)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#428: FILE: arch/ppc/syslib/ppc4xx_dma.c:344:
+						((unsigned) dst_dma_addr & 0x3)

CHECK:SPACING: No space is necessary after a cast
#433: FILE: arch/ppc/syslib/ppc4xx_dma.c:349:
+				if (((unsigned) src_dma_addr & 0x7) ||

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#433: FILE: arch/ppc/syslib/ppc4xx_dma.c:349:
+				if (((unsigned) src_dma_addr & 0x7) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#434: FILE: arch/ppc/syslib/ppc4xx_dma.c:350:
+				if (((unsigned) src_dma_addr & 0x7) ||
+						((unsigned) dst_dma_addr & 0x7)

CHECK:SPACING: No space is necessary after a cast
#434: FILE: arch/ppc/syslib/ppc4xx_dma.c:350:
+						((unsigned) dst_dma_addr & 0x7)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#434: FILE: arch/ppc/syslib/ppc4xx_dma.c:350:
+						((unsigned) dst_dma_addr & 0x7)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#439: FILE: arch/ppc/syslib/ppc4xx_dma.c:355:
+				printk("ppc4xx_set_dma_addr2: invalid bus width: 0x%x\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_set_dma_addr2', this function's name, in a string
#439: FILE: arch/ppc/syslib/ppc4xx_dma.c:355:
+				printk("ppc4xx_set_dma_addr2: invalid bus width: 0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#440: FILE: arch/ppc/syslib/ppc4xx_dma.c:356:
+				printk("ppc4xx_set_dma_addr2: invalid bus width: 0x%x\n",
+						p_dma_ch->pwidth);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_set_dma_addr2', this function's name, in a string
#445: FILE: arch/ppc/syslib/ppc4xx_dma.c:361:
+				("Warning: ppc4xx_set_dma_addr2 src 0x%x dst 0x%x bus width %d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#469: FILE: arch/ppc/syslib/ppc4xx_dma.c:385:
+		printk("ppc4xx_enable_dma_interrupt: bad channel: %d\n", dmanr);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_enable_dma_interrupt', this function's name, in a string
#469: FILE: arch/ppc/syslib/ppc4xx_dma.c:385:
+		printk("ppc4xx_enable_dma_interrupt: bad channel: %d\n", dmanr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#497: FILE: arch/ppc/syslib/ppc4xx_dma.c:413:
+		printk("ppc4xx_disable_dma_interrupt: bad channel: %d\n", dmanr);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_disable_dma_interrupt', this function's name, in a string
#497: FILE: arch/ppc/syslib/ppc4xx_dma.c:413:
+		printk("ppc4xx_disable_dma_interrupt: bad channel: %d\n", dmanr);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#518: FILE: arch/ppc/syslib/ppc4xx_dma.c:436:
+ppc4xx_init_dma_channel(unsigned int dmanr, ppc_dma_ch_t * p_init)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#535: FILE: arch/ppc/syslib/ppc4xx_dma.c:439:
+	uint32_t control = 0;

CHECK:SPACING: No space is necessary after a cast
#538: FILE: arch/ppc/syslib/ppc4xx_dma.c:442:
+	DMA_MODE_READ = (unsigned long) DMA_TD;	/* Peripheral to Memory */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#542: FILE: arch/ppc/syslib/ppc4xx_dma.c:446:
+		printk("ppc4xx_init_dma_channel: NULL p_init\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_init_dma_channel', this function's name, in a string
#542: FILE: arch/ppc/syslib/ppc4xx_dma.c:446:
+		printk("ppc4xx_init_dma_channel: NULL p_init\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#547: FILE: arch/ppc/syslib/ppc4xx_dma.c:451:
+		printk("ppc4xx_init_dma_channel: bad channel %d\n", dmanr);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_init_dma_channel', this function's name, in a string
#547: FILE: arch/ppc/syslib/ppc4xx_dma.c:451:
+		printk("ppc4xx_init_dma_channel: bad channel %d\n", dmanr);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#656: FILE: arch/ppc/syslib/ppc4xx_dma.c:476:
+	memcpy(p_dma_ch, p_init, sizeof (ppc_dma_ch_t));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#686: FILE: arch/ppc/syslib/ppc4xx_dma.c:505:
+ppc4xx_get_channel_config(unsigned int dmanr, ppc_dma_ch_t * p_dma_ch)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#694: FILE: arch/ppc/syslib/ppc4xx_dma.c:511:
+		printk("ppc4xx_get_channel_config: bad channel %d\n", dmanr);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_get_channel_config', this function's name, in a string
#694: FILE: arch/ppc/syslib/ppc4xx_dma.c:511:
+		printk("ppc4xx_get_channel_config: bad channel %d\n", dmanr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#783: FILE: arch/ppc/syslib/ppc4xx_dma.c:562:
+		printk("ppc4xx_set_channel_priority: bad channel %d\n", dmanr);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_set_channel_priority', this function's name, in a string
#783: FILE: arch/ppc/syslib/ppc4xx_dma.c:562:
+		printk("ppc4xx_set_channel_priority: bad channel %d\n", dmanr);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'priority != PRIORITY_LOW'
#816: FILE: arch/ppc/syslib/ppc4xx_dma.c:566:
+	if ((priority != PRIORITY_LOW) &&
+	    (priority != PRIORITY_MID_LOW) &&
+	    (priority != PRIORITY_MID_HIGH) && (priority != PRIORITY_HIGH)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'priority != PRIORITY_MID_LOW'
#816: FILE: arch/ppc/syslib/ppc4xx_dma.c:566:
+	if ((priority != PRIORITY_LOW) &&
+	    (priority != PRIORITY_MID_LOW) &&
+	    (priority != PRIORITY_MID_HIGH) && (priority != PRIORITY_HIGH)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'priority != PRIORITY_MID_HIGH'
#816: FILE: arch/ppc/syslib/ppc4xx_dma.c:566:
+	if ((priority != PRIORITY_LOW) &&
+	    (priority != PRIORITY_MID_LOW) &&
+	    (priority != PRIORITY_MID_HIGH) && (priority != PRIORITY_HIGH)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'priority != PRIORITY_HIGH'
#816: FILE: arch/ppc/syslib/ppc4xx_dma.c:566:
+	if ((priority != PRIORITY_LOW) &&
+	    (priority != PRIORITY_MID_LOW) &&
+	    (priority != PRIORITY_MID_HIGH) && (priority != PRIORITY_HIGH)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#819: FILE: arch/ppc/syslib/ppc4xx_dma.c:569:
+		printk("ppc4xx_set_channel_priority: bad priority: 0x%x\n", priority);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_set_channel_priority', this function's name, in a string
#819: FILE: arch/ppc/syslib/ppc4xx_dma.c:569:
+		printk("ppc4xx_set_channel_priority: bad priority: 0x%x\n", priority);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#936: FILE: arch/ppc/syslib/ppc4xx_dma.c:598:
+		printk("ppc4xx_get_peripheral_width: bad channel %d\n", dmanr);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_get_peripheral_width', this function's name, in a string
#936: FILE: arch/ppc/syslib/ppc4xx_dma.c:598:
+		printk("ppc4xx_get_peripheral_width: bad channel %d\n", dmanr);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1042: FILE: arch/ppc/syslib/ppc4xx_dma.c:604:
+	return (GET_DMA_PW(control));

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1052: FILE: arch/ppc/syslib/ppc4xx_dma.c:608:
+EXPORT_SYMBOL(ppc4xx_init_dma_channel);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1054: FILE: arch/ppc/syslib/ppc4xx_dma.c:610:
+EXPORT_SYMBOL(ppc4xx_set_channel_priority);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1055: FILE: arch/ppc/syslib/ppc4xx_dma.c:611:
+EXPORT_SYMBOL(ppc4xx_get_peripheral_width);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1058: FILE: arch/ppc/syslib/ppc4xx_dma.c:614:
+EXPORT_SYMBOL(ppc4xx_set_dst_addr);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1059: FILE: arch/ppc/syslib/ppc4xx_dma.c:615:
+EXPORT_SYMBOL(ppc4xx_set_dma_addr);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1060: FILE: arch/ppc/syslib/ppc4xx_dma.c:616:
+EXPORT_SYMBOL(ppc4xx_set_dma_addr2);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1061: FILE: arch/ppc/syslib/ppc4xx_dma.c:617:
+EXPORT_SYMBOL(ppc4xx_enable_dma);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1062: FILE: arch/ppc/syslib/ppc4xx_dma.c:618:
+EXPORT_SYMBOL(ppc4xx_disable_dma);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1063: FILE: arch/ppc/syslib/ppc4xx_dma.c:619:
+EXPORT_SYMBOL(ppc4xx_set_dma_mode);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1064: FILE: arch/ppc/syslib/ppc4xx_dma.c:620:
+EXPORT_SYMBOL(ppc4xx_set_dma_count);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1065: FILE: arch/ppc/syslib/ppc4xx_dma.c:621:
+EXPORT_SYMBOL(ppc4xx_get_dma_residue);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1066: FILE: arch/ppc/syslib/ppc4xx_dma.c:622:
+EXPORT_SYMBOL(ppc4xx_enable_dma_interrupt);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1067: FILE: arch/ppc/syslib/ppc4xx_dma.c:623:
+EXPORT_SYMBOL(ppc4xx_disable_dma_interrupt);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1068: FILE: arch/ppc/syslib/ppc4xx_dma.c:624:
+EXPORT_SYMBOL(ppc4xx_get_dma_status);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1073: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1076: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:4:
+ * IBM PPC4xx DMA engine scatter/gather library $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1085: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:13:
+ *   $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1093: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:21:
+ * 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#1104: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:32:
+#include <asm/io.h>

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1111: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:39:
+		printk("ppc4xx_set_sg_addr: bad channel: %d\n", dmanr);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_set_sg_addr', this function's name, in a string
#1111: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:39:
+		printk("ppc4xx_set_sg_addr: bad channel: %d\n", dmanr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1117: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:45:
+#endif^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1122: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:50:
+ *   Add a new sgl descriptor to the end of a scatter/gather list $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1123: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:51:
+ *   which was created by alloc_dma_handle(). $

CHECK:SPACING: No space is necessary after a cast
#1135: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:63:
+	sgl_list_info_t *psgl = (sgl_list_info_t *) handle;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1139: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:67:
+		printk("ppc4xx_add_dma_sgl: null handle\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_add_dma_sgl', this function's name, in a string
#1139: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:67:
+		printk("ppc4xx_add_dma_sgl: null handle\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1144: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:72:
+		printk("ppc4xx_add_dma_sgl: bad channel: %d\n", psgl->dmanr);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_add_dma_sgl', this function's name, in a string
#1144: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:72:
+		printk("ppc4xx_add_dma_sgl: bad channel: %d\n", psgl->dmanr);

CHECK:SPACING: No space is necessary after a cast
#1154: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:82:
+		    (unsigned) src_addr | (unsigned) dst_addr | count;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1154: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:82:
+		    (unsigned) src_addr | (unsigned) dst_addr | count;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1154: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:82:
+		    (unsigned) src_addr | (unsigned) dst_addr | count;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1171: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:99:
+			printk("ppc4xx_add_dma_sgl: invalid bus width: 0x%x\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_add_dma_sgl', this function's name, in a string
#1171: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:99:
+			printk("ppc4xx_add_dma_sgl: invalid bus width: 0x%x\n",

WARNING:LONG_LINE_STRING: line length of 117 exceeds 100 columns
#1177: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:105:
+			    ("Alignment warning: ppc4xx_add_dma_sgl src 0x%x dst 0x%x count 0x%x bus width var %d\n",

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_add_dma_sgl', this function's name, in a string
#1177: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:105:
+			    ("Alignment warning: ppc4xx_add_dma_sgl src 0x%x dst 0x%x count 0x%x bus width var %d\n",

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1180: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:108:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#1183: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:111:
+	if ((unsigned) (psgl->ptail + 1) >= ((unsigned) psgl + SGL_LIST_SIZE)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1183: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:111:
+	if ((unsigned) (psgl->ptail + 1) >= ((unsigned) psgl + SGL_LIST_SIZE)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1183: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:111:
+	if ((unsigned) (psgl->ptail + 1) >= ((unsigned) psgl + SGL_LIST_SIZE)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1184: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:112:
+		printk("sgl handle out of memory \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1184: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:112:
+		printk("sgl handle out of memory \n");

CHECK:SPACING: No space is necessary after a cast
#1190: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:118:
+		    ((unsigned) psgl + sizeof (sgl_list_info_t));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1190: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:118:
+		    ((unsigned) psgl + sizeof (sgl_list_info_t));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1190: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:118:
+		    ((unsigned) psgl + sizeof (sgl_list_info_t));

CHECK:SPACING: No space is necessary after a cast
#1205: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:133:
+	psgl->ptail->next = (uint32_t) NULL;

CHECK:SPACING: No space is necessary after a cast
#1216: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:144:
+	sgl_list_info_t *psgl = (sgl_list_info_t *) handle;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1218: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:146:
+	uint32_t sg_command;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1221: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:149:
+		printk("ppc4xx_enable_dma_sgl: null handle\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_enable_dma_sgl', this function's name, in a string
#1221: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:149:
+		printk("ppc4xx_enable_dma_sgl: null handle\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1224: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:152:
+		printk("ppc4xx_enable_dma_sgl: bad channel in handle %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_enable_dma_sgl', this function's name, in a string
#1224: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:152:
+		printk("ppc4xx_enable_dma_sgl: bad channel in handle %d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1228: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:156:
+		printk("ppc4xx_enable_dma_sgl: sg list empty\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_enable_dma_sgl', this function's name, in a string
#1228: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:156:
+		printk("ppc4xx_enable_dma_sgl: sg list empty\n");

CHECK:SPACING: No space is necessary after a cast
#1249: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:177:
+	sgl_list_info_t *psgl = (sgl_list_info_t *) handle;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1250: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:178:
+	uint32_t sg_command;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1253: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:181:
+		printk("ppc4xx_enable_dma_sgl: null handle\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1256: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:184:
+		printk("ppc4xx_enable_dma_sgl: bad channel in handle %d\n",

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1274: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:202:
+ppc4xx_get_dma_sgl_residue(sgl_handle_t handle, phys_addr_t * src_addr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1275: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:203:
+			   phys_addr_t * dst_addr)

CHECK:SPACING: No space is necessary after a cast
#1277: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:205:
+	sgl_list_info_t *psgl = (sgl_list_info_t *) handle;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1280: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:208:
+	uint32_t count_left;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1283: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:211:
+		printk("ppc4xx_get_dma_sgl_residue: null handle\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_get_dma_sgl_residue', this function's name, in a string
#1283: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:211:
+		printk("ppc4xx_get_dma_sgl_residue: null handle\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1286: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:214:
+		printk("ppc4xx_get_dma_sgl_residue: bad channel in handle %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_get_dma_sgl_residue', this function's name, in a string
#1286: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:214:
+		printk("ppc4xx_get_dma_sgl_residue: bad channel in handle %d\n",

CHECK:SPACING: No space is necessary after a cast
#1291: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:219:
+	sgl_addr = (ppc_sgl_t *) __va(mfdcr(DCRN_ASG0 + (psgl->dmanr * 0x8)));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1295: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:223:
+		printk("ppc4xx_get_dma_sgl_residue: sgl addr register is null\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_get_dma_sgl_residue', this function's name, in a string
#1295: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:223:
+		printk("ppc4xx_get_dma_sgl_residue: sgl addr register is null\n");

CHECK:SPACING: No space is necessary after a cast
#1301: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:229:
+	       ((unsigned) pnext < ((unsigned) psgl + SGL_LIST_SIZE) &&

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1301: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:229:
+	       ((unsigned) pnext < ((unsigned) psgl + SGL_LIST_SIZE) &&

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1301: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:229:
+	       ((unsigned) pnext < ((unsigned) psgl + SGL_LIST_SIZE) &&

CHECK:SPACING: No space is necessary after a cast
#1320: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:248:
+		       ((unsigned) pnext < ((unsigned) psgl + SGL_LIST_SIZE))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1320: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:248:
+		       ((unsigned) pnext < ((unsigned) psgl + SGL_LIST_SIZE))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1320: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:248:
+		       ((unsigned) pnext < ((unsigned) psgl + SGL_LIST_SIZE))

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_get_dma_sgl_residue', this function's name, in a string
#1327: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:255:
+			    ("ppc4xx_get_dma_sgl_residue error (1) psgl->ptail 0x%x handle 0x%x\n",

CHECK:SPACING: No space is necessary after a cast
#1328: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:256:
+			     (unsigned int) psgl->ptail, (unsigned int) handle);

CHECK:SPACING: No space is necessary after a cast
#1340: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:268:
+		     (unsigned int) sgl_addr, (unsigned int) handle);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1342: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:270:
+
+	}

WARNING:INDENTED_LABEL: labels should not be indented
#1344: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:272:
+      error:

CHECK:SPACING: No space is necessary after a cast
#1345: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:273:
+	*src_addr = (phys_addr_t) NULL;

CHECK:SPACING: No space is necessary after a cast
#1346: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:274:
+	*dst_addr = (phys_addr_t) NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1358: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:286:
+ppc4xx_delete_dma_sgl_element(sgl_handle_t handle, phys_addr_t * src_dma_addr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1359: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:287:
+			      phys_addr_t * dst_dma_addr)

CHECK:SPACING: No space is necessary after a cast
#1361: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:289:
+	sgl_list_info_t *psgl = (sgl_list_info_t *) handle;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1364: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:292:
+		printk("ppc4xx_delete_sgl_element: null handle\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1367: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:295:
+		printk("ppc4xx_delete_sgl_element: bad channel in handle %d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1373: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:301:
+		printk("ppc4xx_delete_sgl_element: sgl list empty\n");

CHECK:SPACING: No space is necessary after a cast
#1374: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:302:
+		*src_dma_addr = (phys_addr_t) NULL;

CHECK:SPACING: No space is necessary after a cast
#1375: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:303:
+		*dst_dma_addr = (phys_addr_t) NULL;

CHECK:SPACING: No space is necessary after a cast
#1379: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:307:
+	*src_dma_addr = (phys_addr_t) psgl->phead->src_addr;

CHECK:SPACING: No space is necessary after a cast
#1380: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:308:
+	*dst_dma_addr = (phys_addr_t) psgl->phead->dst_addr;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1394: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:322:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1399: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:327:
+ *   A handle is returned in "handle" which the driver should save in order to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1400: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:328:
+ *   be able to access this list later.  A chunk of memory will be allocated $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1401: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:329:
+ *   to be used by the API for internal management purposes, including managing $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1402: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:330:
+ *   the sg list and allocating memory for the sgl descriptors.  One page should $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1403: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:331:
+ *   be more than enough for that purpose.  Perhaps it's a bit wasteful to use $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1404: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:332:
+ *   a whole page for a single sg list, but most likely there will be only one $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1409: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:337:
+ *   loads in the control register.  The control word has a "global" interrupt $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1415: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:343:
+ *   change after powerup, then enable_dma_interrupt()/disable_dma_interrupt() $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1419: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:347:
+ *   however, only the last descriptor will be setup to interrupt. Thus, an $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1424: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:352:
+ppc4xx_alloc_dma_handle(sgl_handle_t * phandle, unsigned int mode, unsigned int dmanr)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1429: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:357:
+	uint32_t sg_command;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1433: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:361:
+		printk("ppc4xx_alloc_dma_handle: invalid channel 0x%x\n", dmanr);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_alloc_dma_handle', this function's name, in a string
#1433: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:361:
+		printk("ppc4xx_alloc_dma_handle: invalid channel 0x%x\n", dmanr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1438: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:366:
+		printk("ppc4xx_alloc_dma_handle: null handle pointer\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_alloc_dma_handle', this function's name, in a string
#1438: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:366:
+		printk("ppc4xx_alloc_dma_handle: null handle pointer\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ret"
#1444: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:372:
+	if (ret != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#1446: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:374:
+		psgl = (sgl_list_info_t *) ret;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!psgl"
#1449: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:377:
+	if (psgl == NULL) {

CHECK:SPACING: No space is necessary after a cast
#1450: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:378:
+		*phandle = (sgl_handle_t) NULL;

CHECK:SPACING: No space is necessary after a cast
#1494: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:422:
+	*phandle = (sgl_handle_t) psgl;

CHECK:SPACING: No space is necessary after a cast
#1505: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:433:
+	sgl_list_info_t *psgl = (sgl_list_info_t *) handle;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1508: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:436:
+		printk("ppc4xx_free_dma_handle: got NULL\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_free_dma_handle', this function's name, in a string
#1508: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:436:
+		printk("ppc4xx_free_dma_handle: got NULL\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1511: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:439:
+		printk("ppc4xx_free_dma_handle: list not empty\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_free_dma_handle', this function's name, in a string
#1511: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:439:
+		printk("ppc4xx_free_dma_handle: list not empty\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1514: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:442:
+		printk("ppc4xx_free_dma_handle: no dma address\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ppc4xx_free_dma_handle', this function's name, in a string
#1514: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:442:
+		printk("ppc4xx_free_dma_handle: no dma address\n");

CHECK:SPACING: No space is necessary after a cast
#1518: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:446:
+	dma_free_coherent(NULL, DMA_PPC4xx_SIZE, (void *) psgl, 0);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1521: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:449:
+EXPORT_SYMBOL(ppc4xx_alloc_dma_handle);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1522: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:450:
+EXPORT_SYMBOL(ppc4xx_free_dma_handle);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1523: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:451:
+EXPORT_SYMBOL(ppc4xx_add_dma_sgl);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1524: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:452:
+EXPORT_SYMBOL(ppc4xx_delete_dma_sgl_element);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1525: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:453:
+EXPORT_SYMBOL(ppc4xx_enable_dma_sgl);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1526: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:454:
+EXPORT_SYMBOL(ppc4xx_disable_dma_sgl);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1527: FILE: arch/ppc/syslib/ppc4xx_sgdma.c:455:
+EXPORT_SYMBOL(ppc4xx_get_dma_sgl_residue);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2807: FILE: include/asm-ppc/ppc4xx_dma.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#2808: FILE: include/asm-ppc/ppc4xx_dma.h:2:
+ * include/asm-ppc/ppc4xx_dma.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2826: FILE: include/asm-ppc/ppc4xx_dma.h:20:
+ * 675 Mass Ave, Cambridge, MA 02139, USA.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2845: FILE: include/asm-ppc/ppc4xx_dma.h:39:
+/* $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2871: FILE: include/asm-ppc/ppc4xx_dma.h:65:
+
+

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2883: FILE: include/asm-ppc/ppc4xx_dma.h:77:
+#define DMA_CE_ENABLE        (1<<31)	/* DMA Channel Enable */
                                ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#2883: FILE: include/asm-ppc/ppc4xx_dma.h:77:
+#define DMA_CE_ENABLE        (1<<31)	/* DMA Channel Enable */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2884: FILE: include/asm-ppc/ppc4xx_dma.h:78:
+#define SET_DMA_CE_ENABLE(x) (((x)&0x1)<<31)
                                   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2884: FILE: include/asm-ppc/ppc4xx_dma.h:78:
+#define SET_DMA_CE_ENABLE(x) (((x)&0x1)<<31)
                                        ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2885: FILE: include/asm-ppc/ppc4xx_dma.h:79:
+#define GET_DMA_CE_ENABLE(x) (((x)&DMA_CE_ENABLE)>>31)
                                   ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2885: FILE: include/asm-ppc/ppc4xx_dma.h:79:
+#define GET_DMA_CE_ENABLE(x) (((x)&DMA_CE_ENABLE)>>31)
                                                  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2887: FILE: include/asm-ppc/ppc4xx_dma.h:81:
+#define DMA_CIE_ENABLE        (1<<30)	/* DMA Channel Interrupt Enable */
                                 ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#2887: FILE: include/asm-ppc/ppc4xx_dma.h:81:
+#define DMA_CIE_ENABLE        (1<<30)	/* DMA Channel Interrupt Enable */

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2888: FILE: include/asm-ppc/ppc4xx_dma.h:82:
+#define SET_DMA_CIE_ENABLE(x) (((x)&0x1)<<30)
                                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2888: FILE: include/asm-ppc/ppc4xx_dma.h:82:
+#define SET_DMA_CIE_ENABLE(x) (((x)&0x1)<<30)
                                         ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2889: FILE: include/asm-ppc/ppc4xx_dma.h:83:
+#define GET_DMA_CIE_ENABLE(x) (((x)&DMA_CIE_ENABLE)>>30)
                                    ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2889: FILE: include/asm-ppc/ppc4xx_dma.h:83:
+#define GET_DMA_CIE_ENABLE(x) (((x)&DMA_CIE_ENABLE)>>30)
                                                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2891: FILE: include/asm-ppc/ppc4xx_dma.h:85:
+#define DMA_TD                (1<<29)
                                 ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#2891: FILE: include/asm-ppc/ppc4xx_dma.h:85:
+#define DMA_TD                (1<<29)

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2892: FILE: include/asm-ppc/ppc4xx_dma.h:86:
+#define SET_DMA_TD(x)         (((x)&0x1)<<29)
                                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2892: FILE: include/asm-ppc/ppc4xx_dma.h:86:
+#define SET_DMA_TD(x)         (((x)&0x1)<<29)
                                         ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2893: FILE: include/asm-ppc/ppc4xx_dma.h:87:
+#define GET_DMA_TD(x)         (((x)&DMA_TD)>>29)
                                    ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2893: FILE: include/asm-ppc/ppc4xx_dma.h:87:
+#define GET_DMA_TD(x)         (((x)&DMA_TD)>>29)
                                            ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2895: FILE: include/asm-ppc/ppc4xx_dma.h:89:
+#define DMA_PL                (1<<28)	/* Peripheral Location */
                                 ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#2895: FILE: include/asm-ppc/ppc4xx_dma.h:89:
+#define DMA_PL                (1<<28)	/* Peripheral Location */

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2896: FILE: include/asm-ppc/ppc4xx_dma.h:90:
+#define SET_DMA_PL(x)         (((x)&0x1)<<28)
                                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2896: FILE: include/asm-ppc/ppc4xx_dma.h:90:
+#define SET_DMA_PL(x)         (((x)&0x1)<<28)
                                         ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2897: FILE: include/asm-ppc/ppc4xx_dma.h:91:
+#define GET_DMA_PL(x)         (((x)&DMA_PL)>>28)
                                    ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2897: FILE: include/asm-ppc/ppc4xx_dma.h:91:
+#define GET_DMA_PL(x)         (((x)&DMA_PL)>>28)
                                            ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2902: FILE: include/asm-ppc/ppc4xx_dma.h:96:
+#define SET_DMA_PW(x)     (((x)&0x3)<<(26-DMA_CR_OFFSET))	/* Peripheral Width */
                                ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2902: FILE: include/asm-ppc/ppc4xx_dma.h:96:
+#define SET_DMA_PW(x)     (((x)&0x3)<<(26-DMA_CR_OFFSET))	/* Peripheral Width */
                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2902: FILE: include/asm-ppc/ppc4xx_dma.h:96:
+#define SET_DMA_PW(x)     (((x)&0x3)<<(26-DMA_CR_OFFSET))	/* Peripheral Width */
                                          ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2909: FILE: include/asm-ppc/ppc4xx_dma.h:103:
+#define GET_DMA_PW(x)     (((x)&DMA_PW_MASK)>>(26-DMA_CR_OFFSET))
                                ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2909: FILE: include/asm-ppc/ppc4xx_dma.h:103:
+#define GET_DMA_PW(x)     (((x)&DMA_PW_MASK)>>(26-DMA_CR_OFFSET))
                                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2909: FILE: include/asm-ppc/ppc4xx_dma.h:103:
+#define GET_DMA_PW(x)     (((x)&DMA_PW_MASK)>>(26-DMA_CR_OFFSET))
                                                  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2911: FILE: include/asm-ppc/ppc4xx_dma.h:105:
+#define DMA_DAI           (1<<(25-DMA_CR_OFFSET))	/* Destination Address Increment */
                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2911: FILE: include/asm-ppc/ppc4xx_dma.h:105:
+#define DMA_DAI           (1<<(25-DMA_CR_OFFSET))	/* Destination Address Increment */
                                  ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2912: FILE: include/asm-ppc/ppc4xx_dma.h:106:
+#define SET_DMA_DAI(x)    (((x)&0x1)<<(25-DMA_CR_OFFSET))
                                ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2912: FILE: include/asm-ppc/ppc4xx_dma.h:106:
+#define SET_DMA_DAI(x)    (((x)&0x1)<<(25-DMA_CR_OFFSET))
                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2912: FILE: include/asm-ppc/ppc4xx_dma.h:106:
+#define SET_DMA_DAI(x)    (((x)&0x1)<<(25-DMA_CR_OFFSET))
                                          ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2914: FILE: include/asm-ppc/ppc4xx_dma.h:108:
+#define DMA_SAI           (1<<(24-DMA_CR_OFFSET))	/* Source Address Increment */
                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2914: FILE: include/asm-ppc/ppc4xx_dma.h:108:
+#define DMA_SAI           (1<<(24-DMA_CR_OFFSET))	/* Source Address Increment */
                                  ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2915: FILE: include/asm-ppc/ppc4xx_dma.h:109:
+#define SET_DMA_SAI(x)    (((x)&0x1)<<(24-DMA_CR_OFFSET))
                                ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2915: FILE: include/asm-ppc/ppc4xx_dma.h:109:
+#define SET_DMA_SAI(x)    (((x)&0x1)<<(24-DMA_CR_OFFSET))
                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2915: FILE: include/asm-ppc/ppc4xx_dma.h:109:
+#define SET_DMA_SAI(x)    (((x)&0x1)<<(24-DMA_CR_OFFSET))
                                          ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2917: FILE: include/asm-ppc/ppc4xx_dma.h:111:
+#define DMA_BEN           (1<<(23-DMA_CR_OFFSET))	/* Buffer Enable */
                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2917: FILE: include/asm-ppc/ppc4xx_dma.h:111:
+#define DMA_BEN           (1<<(23-DMA_CR_OFFSET))	/* Buffer Enable */
                                  ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2918: FILE: include/asm-ppc/ppc4xx_dma.h:112:
+#define SET_DMA_BEN(x)    (((x)&0x1)<<(23-DMA_CR_OFFSET))
                                ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2918: FILE: include/asm-ppc/ppc4xx_dma.h:112:
+#define SET_DMA_BEN(x)    (((x)&0x1)<<(23-DMA_CR_OFFSET))
                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2918: FILE: include/asm-ppc/ppc4xx_dma.h:112:
+#define SET_DMA_BEN(x)    (((x)&0x1)<<(23-DMA_CR_OFFSET))
                                          ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2920: FILE: include/asm-ppc/ppc4xx_dma.h:114:
+#define SET_DMA_TM(x)     (((x)&0x3)<<(21-DMA_CR_OFFSET))	/* Transfer Mode */
                                ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2920: FILE: include/asm-ppc/ppc4xx_dma.h:114:
+#define SET_DMA_TM(x)     (((x)&0x3)<<(21-DMA_CR_OFFSET))	/* Transfer Mode */
                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2920: FILE: include/asm-ppc/ppc4xx_dma.h:114:
+#define SET_DMA_TM(x)     (((x)&0x3)<<(21-DMA_CR_OFFSET))	/* Transfer Mode */
                                          ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2926: FILE: include/asm-ppc/ppc4xx_dma.h:120:
+#define GET_DMA_TM(x)     (((x)&DMA_TM_MASK)>>(21-DMA_CR_OFFSET))
                                ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2926: FILE: include/asm-ppc/ppc4xx_dma.h:120:
+#define GET_DMA_TM(x)     (((x)&DMA_TM_MASK)>>(21-DMA_CR_OFFSET))
                                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2926: FILE: include/asm-ppc/ppc4xx_dma.h:120:
+#define GET_DMA_TM(x)     (((x)&DMA_TM_MASK)>>(21-DMA_CR_OFFSET))
                                                  ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2928: FILE: include/asm-ppc/ppc4xx_dma.h:122:
+#define SET_DMA_PSC(x)    (((x)&0x3)<<(19-DMA_CR_OFFSET))	/* Peripheral Setup Cycles */
                                ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2928: FILE: include/asm-ppc/ppc4xx_dma.h:122:
+#define SET_DMA_PSC(x)    (((x)&0x3)<<(19-DMA_CR_OFFSET))	/* Peripheral Setup Cycles */
                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2928: FILE: include/asm-ppc/ppc4xx_dma.h:122:
+#define SET_DMA_PSC(x)    (((x)&0x3)<<(19-DMA_CR_OFFSET))	/* Peripheral Setup Cycles */
                                          ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2930: FILE: include/asm-ppc/ppc4xx_dma.h:124:
+#define GET_DMA_PSC(x)    (((x)&DMA_PSC_MASK)>>(19-DMA_CR_OFFSET))
                                ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2930: FILE: include/asm-ppc/ppc4xx_dma.h:124:
+#define GET_DMA_PSC(x)    (((x)&DMA_PSC_MASK)>>(19-DMA_CR_OFFSET))
                                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2930: FILE: include/asm-ppc/ppc4xx_dma.h:124:
+#define GET_DMA_PSC(x)    (((x)&DMA_PSC_MASK)>>(19-DMA_CR_OFFSET))
                                                   ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2932: FILE: include/asm-ppc/ppc4xx_dma.h:126:
+#define SET_DMA_PWC(x)    (((x)&0x3F)<<(13-DMA_CR_OFFSET))	/* Peripheral Wait Cycles */
                                ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2932: FILE: include/asm-ppc/ppc4xx_dma.h:126:
+#define SET_DMA_PWC(x)    (((x)&0x3F)<<(13-DMA_CR_OFFSET))	/* Peripheral Wait Cycles */
                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2932: FILE: include/asm-ppc/ppc4xx_dma.h:126:
+#define SET_DMA_PWC(x)    (((x)&0x3F)<<(13-DMA_CR_OFFSET))	/* Peripheral Wait Cycles */
                                           ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2934: FILE: include/asm-ppc/ppc4xx_dma.h:128:
+#define GET_DMA_PWC(x)    (((x)&DMA_PWC_MASK)>>(13-DMA_CR_OFFSET))
                                ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2934: FILE: include/asm-ppc/ppc4xx_dma.h:128:
+#define GET_DMA_PWC(x)    (((x)&DMA_PWC_MASK)>>(13-DMA_CR_OFFSET))
                                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2934: FILE: include/asm-ppc/ppc4xx_dma.h:128:
+#define GET_DMA_PWC(x)    (((x)&DMA_PWC_MASK)>>(13-DMA_CR_OFFSET))
                                                   ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2936: FILE: include/asm-ppc/ppc4xx_dma.h:130:
+#define SET_DMA_PHC(x)    (((x)&0x7)<<(10-DMA_CR_OFFSET))	/* Peripheral Hold Cycles */
                                ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2936: FILE: include/asm-ppc/ppc4xx_dma.h:130:
+#define SET_DMA_PHC(x)    (((x)&0x7)<<(10-DMA_CR_OFFSET))	/* Peripheral Hold Cycles */
                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2936: FILE: include/asm-ppc/ppc4xx_dma.h:130:
+#define SET_DMA_PHC(x)    (((x)&0x7)<<(10-DMA_CR_OFFSET))	/* Peripheral Hold Cycles */
                                          ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2938: FILE: include/asm-ppc/ppc4xx_dma.h:132:
+#define GET_DMA_PHC(x)    (((x)&DMA_PHC_MASK)>>(10-DMA_CR_OFFSET))
                                ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2938: FILE: include/asm-ppc/ppc4xx_dma.h:132:
+#define GET_DMA_PHC(x)    (((x)&DMA_PHC_MASK)>>(10-DMA_CR_OFFSET))
                                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2938: FILE: include/asm-ppc/ppc4xx_dma.h:132:
+#define GET_DMA_PHC(x)    (((x)&DMA_PHC_MASK)>>(10-DMA_CR_OFFSET))
                                                   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2940: FILE: include/asm-ppc/ppc4xx_dma.h:134:
+#define DMA_ETD_OUTPUT     (1<<(9-DMA_CR_OFFSET))	/* EOT pin is a TC output */
                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2940: FILE: include/asm-ppc/ppc4xx_dma.h:134:
+#define DMA_ETD_OUTPUT     (1<<(9-DMA_CR_OFFSET))	/* EOT pin is a TC output */
                                  ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2941: FILE: include/asm-ppc/ppc4xx_dma.h:135:
+#define SET_DMA_ETD(x)     (((x)&0x1)<<(9-DMA_CR_OFFSET))
                                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2941: FILE: include/asm-ppc/ppc4xx_dma.h:135:
+#define SET_DMA_ETD(x)     (((x)&0x1)<<(9-DMA_CR_OFFSET))
                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2941: FILE: include/asm-ppc/ppc4xx_dma.h:135:
+#define SET_DMA_ETD(x)     (((x)&0x1)<<(9-DMA_CR_OFFSET))
                                          ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2943: FILE: include/asm-ppc/ppc4xx_dma.h:137:
+#define DMA_TCE_ENABLE     (1<<(8-DMA_CR_OFFSET))
                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2943: FILE: include/asm-ppc/ppc4xx_dma.h:137:
+#define DMA_TCE_ENABLE     (1<<(8-DMA_CR_OFFSET))
                                  ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2944: FILE: include/asm-ppc/ppc4xx_dma.h:138:
+#define SET_DMA_TCE(x)     (((x)&0x1)<<(8-DMA_CR_OFFSET))
                                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2944: FILE: include/asm-ppc/ppc4xx_dma.h:138:
+#define SET_DMA_TCE(x)     (((x)&0x1)<<(8-DMA_CR_OFFSET))
                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2944: FILE: include/asm-ppc/ppc4xx_dma.h:138:
+#define SET_DMA_TCE(x)     (((x)&0x1)<<(8-DMA_CR_OFFSET))
                                          ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2946: FILE: include/asm-ppc/ppc4xx_dma.h:140:
+#define DMA_DEC            (1<<(2)	/* Address Decrement */
                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2946: FILE: include/asm-ppc/ppc4xx_dma.h:140:
+#define DMA_DEC            (1<<(2)	/* Address Decrement */

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2947: FILE: include/asm-ppc/ppc4xx_dma.h:141:
+#define SET_DMA_DEC(x)     (((x)&0x1)<<2)
                                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2947: FILE: include/asm-ppc/ppc4xx_dma.h:141:
+#define SET_DMA_DEC(x)     (((x)&0x1)<<2)
                                      ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2948: FILE: include/asm-ppc/ppc4xx_dma.h:142:
+#define GET_DMA_DEC(x)     (((x)&DMA_DEC)>>2)
                                 ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2948: FILE: include/asm-ppc/ppc4xx_dma.h:142:
+#define GET_DMA_DEC(x)     (((x)&DMA_DEC)>>2)
                                          ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2967: FILE: include/asm-ppc/ppc4xx_dma.h:161:
+#define SET_DMA_PREFETCH(x)   (((x)&0x3)<<(4-DMA_CR_OFFSET))	/* Memory Read Prefetch */
                                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2967: FILE: include/asm-ppc/ppc4xx_dma.h:161:
+#define SET_DMA_PREFETCH(x)   (((x)&0x3)<<(4-DMA_CR_OFFSET))	/* Memory Read Prefetch */
                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2967: FILE: include/asm-ppc/ppc4xx_dma.h:161:
+#define SET_DMA_PREFETCH(x)   (((x)&0x3)<<(4-DMA_CR_OFFSET))	/* Memory Read Prefetch */
                                             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2972: FILE: include/asm-ppc/ppc4xx_dma.h:166:
+#define GET_DMA_PREFETCH(x) (((x)&DMA_PREFETCH_MASK)>>(4-DMA_CR_OFFSET))
                                  ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2972: FILE: include/asm-ppc/ppc4xx_dma.h:166:
+#define GET_DMA_PREFETCH(x) (((x)&DMA_PREFETCH_MASK)>>(4-DMA_CR_OFFSET))
                                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2972: FILE: include/asm-ppc/ppc4xx_dma.h:166:
+#define GET_DMA_PREFETCH(x) (((x)&DMA_PREFETCH_MASK)>>(4-DMA_CR_OFFSET))
                                                         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2974: FILE: include/asm-ppc/ppc4xx_dma.h:168:
+#define DMA_PCE            (1<<(3-DMA_CR_OFFSET))	/* Parity Check Enable */
                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2974: FILE: include/asm-ppc/ppc4xx_dma.h:168:
+#define DMA_PCE            (1<<(3-DMA_CR_OFFSET))	/* Parity Check Enable */
                                  ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2975: FILE: include/asm-ppc/ppc4xx_dma.h:169:
+#define SET_DMA_PCE(x)     (((x)&0x1)<<(3-DMA_CR_OFFSET))
                                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2975: FILE: include/asm-ppc/ppc4xx_dma.h:169:
+#define SET_DMA_PCE(x)     (((x)&0x1)<<(3-DMA_CR_OFFSET))
                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2975: FILE: include/asm-ppc/ppc4xx_dma.h:169:
+#define SET_DMA_PCE(x)     (((x)&0x1)<<(3-DMA_CR_OFFSET))
                                          ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2976: FILE: include/asm-ppc/ppc4xx_dma.h:170:
+#define GET_DMA_PCE(x)     (((x)&DMA_PCE)>>(3-DMA_CR_OFFSET))
                                 ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2976: FILE: include/asm-ppc/ppc4xx_dma.h:170:
+#define GET_DMA_PCE(x)     (((x)&DMA_PCE)>>(3-DMA_CR_OFFSET))
                                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2976: FILE: include/asm-ppc/ppc4xx_dma.h:170:
+#define GET_DMA_PCE(x)     (((x)&DMA_PCE)>>(3-DMA_CR_OFFSET))
                                              ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2980: FILE: include/asm-ppc/ppc4xx_dma.h:174:
+#define DMA_ECE_ENABLE (1<<5)
                          ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#2980: FILE: include/asm-ppc/ppc4xx_dma.h:174:
+#define DMA_ECE_ENABLE (1<<5)

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2981: FILE: include/asm-ppc/ppc4xx_dma.h:175:
+#define SET_DMA_ECE(x) (((x)&0x1)<<5)
                             ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2981: FILE: include/asm-ppc/ppc4xx_dma.h:175:
+#define SET_DMA_ECE(x) (((x)&0x1)<<5)
                                  ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2982: FILE: include/asm-ppc/ppc4xx_dma.h:176:
+#define GET_DMA_ECE(x) (((x)&DMA_ECE_ENABLE)>>5)
                             ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2982: FILE: include/asm-ppc/ppc4xx_dma.h:176:
+#define GET_DMA_ECE(x) (((x)&DMA_ECE_ENABLE)>>5)
                                             ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2984: FILE: include/asm-ppc/ppc4xx_dma.h:178:
+#define DMA_TCD_DISABLE	(1<<4)
                        	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#2984: FILE: include/asm-ppc/ppc4xx_dma.h:178:
+#define DMA_TCD_DISABLE	(1<<4)

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2985: FILE: include/asm-ppc/ppc4xx_dma.h:179:
+#define SET_DMA_TCD(x) (((x)&0x1)<<4)
                             ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2985: FILE: include/asm-ppc/ppc4xx_dma.h:179:
+#define SET_DMA_TCD(x) (((x)&0x1)<<4)
                                  ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2986: FILE: include/asm-ppc/ppc4xx_dma.h:180:
+#define GET_DMA_TCD(x) (((x)&DMA_TCD_DISABLE)>>4)
                             ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2986: FILE: include/asm-ppc/ppc4xx_dma.h:180:
+#define GET_DMA_TCD(x) (((x)&DMA_TCD_DISABLE)>>4)
                                              ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2988: FILE: include/asm-ppc/ppc4xx_dma.h:182:
+typedef uint32_t sgl_handle_t;

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2995: FILE: include/asm-ppc/ppc4xx_dma.h:189:
+#define SET_DMA_PRIORITY(x)   (((x)&0x3)<<(6-DMA_CR_OFFSET))	/* DMA Channel Priority */
                                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2995: FILE: include/asm-ppc/ppc4xx_dma.h:189:
+#define SET_DMA_PRIORITY(x)   (((x)&0x3)<<(6-DMA_CR_OFFSET))	/* DMA Channel Priority */
                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2995: FILE: include/asm-ppc/ppc4xx_dma.h:189:
+#define SET_DMA_PRIORITY(x)   (((x)&0x3)<<(6-DMA_CR_OFFSET))	/* DMA Channel Priority */
                                             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#3001: FILE: include/asm-ppc/ppc4xx_dma.h:195:
+#define GET_DMA_PRIORITY(x) (((x)&DMA_PRIORITY_MASK)>>(6-DMA_CR_OFFSET))
                                  ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#3001: FILE: include/asm-ppc/ppc4xx_dma.h:195:
+#define GET_DMA_PRIORITY(x) (((x)&DMA_PRIORITY_MASK)>>(6-DMA_CR_OFFSET))
                                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3001: FILE: include/asm-ppc/ppc4xx_dma.h:195:
+#define GET_DMA_PRIORITY(x) (((x)&DMA_PRIORITY_MASK)>>(6-DMA_CR_OFFSET))
                                                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3003: FILE: include/asm-ppc/ppc4xx_dma.h:197:
+/* $

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3006: FILE: include/asm-ppc/ppc4xx_dma.h:200:
+#define DMAReq_ActiveLow(chan) (1<<(31-(chan*3)))
                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3006: FILE: include/asm-ppc/ppc4xx_dma.h:200:
+#define DMAReq_ActiveLow(chan) (1<<(31-(chan*3)))
                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3006: FILE: include/asm-ppc/ppc4xx_dma.h:200:
+#define DMAReq_ActiveLow(chan) (1<<(31-(chan*3)))
                                             ^

CHECK:CAMELCASE: Avoid CamelCase: <DMAReq_ActiveLow>
#3006: FILE: include/asm-ppc/ppc4xx_dma.h:200:
+#define DMAReq_ActiveLow(chan) (1<<(31-(chan*3)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#3006: FILE: include/asm-ppc/ppc4xx_dma.h:200:
+#define DMAReq_ActiveLow(chan) (1<<(31-(chan*3)))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3007: FILE: include/asm-ppc/ppc4xx_dma.h:201:
+#define DMAAck_ActiveLow(chan) (1<<(30-(chan*3)))
                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3007: FILE: include/asm-ppc/ppc4xx_dma.h:201:
+#define DMAAck_ActiveLow(chan) (1<<(30-(chan*3)))
                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3007: FILE: include/asm-ppc/ppc4xx_dma.h:201:
+#define DMAAck_ActiveLow(chan) (1<<(30-(chan*3)))
                                             ^

CHECK:CAMELCASE: Avoid CamelCase: <DMAAck_ActiveLow>
#3007: FILE: include/asm-ppc/ppc4xx_dma.h:201:
+#define DMAAck_ActiveLow(chan) (1<<(30-(chan*3)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#3007: FILE: include/asm-ppc/ppc4xx_dma.h:201:
+#define DMAAck_ActiveLow(chan) (1<<(30-(chan*3)))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3008: FILE: include/asm-ppc/ppc4xx_dma.h:202:
+#define EOT_ActiveLow(chan)    (1<<(29-(chan*3)))	/* End of Transfer */
                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3008: FILE: include/asm-ppc/ppc4xx_dma.h:202:
+#define EOT_ActiveLow(chan)    (1<<(29-(chan*3)))	/* End of Transfer */
                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3008: FILE: include/asm-ppc/ppc4xx_dma.h:202:
+#define EOT_ActiveLow(chan)    (1<<(29-(chan*3)))	/* End of Transfer */
                                             ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#3008: FILE: include/asm-ppc/ppc4xx_dma.h:202:
+#define EOT_ActiveLow(chan)    (1<<(29-(chan*3)))	/* End of Transfer */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3013: FILE: include/asm-ppc/ppc4xx_dma.h:207:
+#define SLEEP_MODE_ENABLE (1<<21)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3013: FILE: include/asm-ppc/ppc4xx_dma.h:207:
+#define SLEEP_MODE_ENABLE (1<<21)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3018: FILE: include/asm-ppc/ppc4xx_dma.h:212:
+#define DMA_CS0           (1<<31)	/* Terminal Count has been reached */
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3018: FILE: include/asm-ppc/ppc4xx_dma.h:212:
+#define DMA_CS0           (1<<31)	/* Terminal Count has been reached */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3019: FILE: include/asm-ppc/ppc4xx_dma.h:213:
+#define DMA_CS1           (1<<30)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3019: FILE: include/asm-ppc/ppc4xx_dma.h:213:
+#define DMA_CS1           (1<<30)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3020: FILE: include/asm-ppc/ppc4xx_dma.h:214:
+#define DMA_CS2           (1<<29)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3020: FILE: include/asm-ppc/ppc4xx_dma.h:214:
+#define DMA_CS2           (1<<29)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3021: FILE: include/asm-ppc/ppc4xx_dma.h:215:
+#define DMA_CS3           (1<<28)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3021: FILE: include/asm-ppc/ppc4xx_dma.h:215:
+#define DMA_CS3           (1<<28)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3023: FILE: include/asm-ppc/ppc4xx_dma.h:217:
+#define DMA_TS0           (1<<27)	/* End of Transfer has been requested */
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3023: FILE: include/asm-ppc/ppc4xx_dma.h:217:
+#define DMA_TS0           (1<<27)	/* End of Transfer has been requested */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3024: FILE: include/asm-ppc/ppc4xx_dma.h:218:
+#define DMA_TS1           (1<<26)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3024: FILE: include/asm-ppc/ppc4xx_dma.h:218:
+#define DMA_TS1           (1<<26)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3025: FILE: include/asm-ppc/ppc4xx_dma.h:219:
+#define DMA_TS2           (1<<25)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3025: FILE: include/asm-ppc/ppc4xx_dma.h:219:
+#define DMA_TS2           (1<<25)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3026: FILE: include/asm-ppc/ppc4xx_dma.h:220:
+#define DMA_TS3           (1<<24)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3026: FILE: include/asm-ppc/ppc4xx_dma.h:220:
+#define DMA_TS3           (1<<24)

WARNING:TYPO_SPELLING: 'Chanel' may be misspelled - perhaps 'Channel'?
#3028: FILE: include/asm-ppc/ppc4xx_dma.h:222:
+#define DMA_CH0_ERR       (1<<23)	/* DMA Chanel 0 Error */
                                  	       ^^^^^^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3028: FILE: include/asm-ppc/ppc4xx_dma.h:222:
+#define DMA_CH0_ERR       (1<<23)	/* DMA Chanel 0 Error */
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3028: FILE: include/asm-ppc/ppc4xx_dma.h:222:
+#define DMA_CH0_ERR       (1<<23)	/* DMA Chanel 0 Error */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3029: FILE: include/asm-ppc/ppc4xx_dma.h:223:
+#define DMA_CH1_ERR       (1<<22)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3029: FILE: include/asm-ppc/ppc4xx_dma.h:223:
+#define DMA_CH1_ERR       (1<<22)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3030: FILE: include/asm-ppc/ppc4xx_dma.h:224:
+#define DMA_CH2_ERR       (1<<21)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3030: FILE: include/asm-ppc/ppc4xx_dma.h:224:
+#define DMA_CH2_ERR       (1<<21)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3031: FILE: include/asm-ppc/ppc4xx_dma.h:225:
+#define DMA_CH3_ERR       (1<<20)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3031: FILE: include/asm-ppc/ppc4xx_dma.h:225:
+#define DMA_CH3_ERR       (1<<20)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3033: FILE: include/asm-ppc/ppc4xx_dma.h:227:
+#define DMA_IN_DMA_REQ0   (1<<19)	/* Internal DMA Request is pending */
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3033: FILE: include/asm-ppc/ppc4xx_dma.h:227:
+#define DMA_IN_DMA_REQ0   (1<<19)	/* Internal DMA Request is pending */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3034: FILE: include/asm-ppc/ppc4xx_dma.h:228:
+#define DMA_IN_DMA_REQ1   (1<<18)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3034: FILE: include/asm-ppc/ppc4xx_dma.h:228:
+#define DMA_IN_DMA_REQ1   (1<<18)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3035: FILE: include/asm-ppc/ppc4xx_dma.h:229:
+#define DMA_IN_DMA_REQ2   (1<<17)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3035: FILE: include/asm-ppc/ppc4xx_dma.h:229:
+#define DMA_IN_DMA_REQ2   (1<<17)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3036: FILE: include/asm-ppc/ppc4xx_dma.h:230:
+#define DMA_IN_DMA_REQ3   (1<<16)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3036: FILE: include/asm-ppc/ppc4xx_dma.h:230:
+#define DMA_IN_DMA_REQ3   (1<<16)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3038: FILE: include/asm-ppc/ppc4xx_dma.h:232:
+#define DMA_EXT_DMA_REQ0  (1<<15)	/* External DMA Request is pending */
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3038: FILE: include/asm-ppc/ppc4xx_dma.h:232:
+#define DMA_EXT_DMA_REQ0  (1<<15)	/* External DMA Request is pending */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3039: FILE: include/asm-ppc/ppc4xx_dma.h:233:
+#define DMA_EXT_DMA_REQ1  (1<<14)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3039: FILE: include/asm-ppc/ppc4xx_dma.h:233:
+#define DMA_EXT_DMA_REQ1  (1<<14)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3040: FILE: include/asm-ppc/ppc4xx_dma.h:234:
+#define DMA_EXT_DMA_REQ2  (1<<13)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3040: FILE: include/asm-ppc/ppc4xx_dma.h:234:
+#define DMA_EXT_DMA_REQ2  (1<<13)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3041: FILE: include/asm-ppc/ppc4xx_dma.h:235:
+#define DMA_EXT_DMA_REQ3  (1<<12)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3041: FILE: include/asm-ppc/ppc4xx_dma.h:235:
+#define DMA_EXT_DMA_REQ3  (1<<12)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3043: FILE: include/asm-ppc/ppc4xx_dma.h:237:
+#define DMA_CH0_BUSY      (1<<11)	/* DMA Channel 0 Busy */
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3043: FILE: include/asm-ppc/ppc4xx_dma.h:237:
+#define DMA_CH0_BUSY      (1<<11)	/* DMA Channel 0 Busy */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3044: FILE: include/asm-ppc/ppc4xx_dma.h:238:
+#define DMA_CH1_BUSY      (1<<10)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3044: FILE: include/asm-ppc/ppc4xx_dma.h:238:
+#define DMA_CH1_BUSY      (1<<10)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3045: FILE: include/asm-ppc/ppc4xx_dma.h:239:
+#define DMA_CH2_BUSY       (1<<9)
                              ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3045: FILE: include/asm-ppc/ppc4xx_dma.h:239:
+#define DMA_CH2_BUSY       (1<<9)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3046: FILE: include/asm-ppc/ppc4xx_dma.h:240:
+#define DMA_CH3_BUSY       (1<<8)
                              ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3046: FILE: include/asm-ppc/ppc4xx_dma.h:240:
+#define DMA_CH3_BUSY       (1<<8)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3048: FILE: include/asm-ppc/ppc4xx_dma.h:242:
+#define DMA_SG0            (1<<7)	/* DMA Channel 0 Scatter/Gather in progress */
                              ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3048: FILE: include/asm-ppc/ppc4xx_dma.h:242:
+#define DMA_SG0            (1<<7)	/* DMA Channel 0 Scatter/Gather in progress */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3049: FILE: include/asm-ppc/ppc4xx_dma.h:243:
+#define DMA_SG1            (1<<6)
                              ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3049: FILE: include/asm-ppc/ppc4xx_dma.h:243:
+#define DMA_SG1            (1<<6)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3050: FILE: include/asm-ppc/ppc4xx_dma.h:244:
+#define DMA_SG2            (1<<5)
                              ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3050: FILE: include/asm-ppc/ppc4xx_dma.h:244:
+#define DMA_SG2            (1<<5)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3051: FILE: include/asm-ppc/ppc4xx_dma.h:245:
+#define DMA_SG3            (1<<4)
                              ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3051: FILE: include/asm-ppc/ppc4xx_dma.h:245:
+#define DMA_SG3            (1<<4)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3056: FILE: include/asm-ppc/ppc4xx_dma.h:250:
+#define SSG_ENABLE(chan)   ^I(1<<(31-chan))^I/* Start Scatter Gather */$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3056: FILE: include/asm-ppc/ppc4xx_dma.h:250:
+#define SSG_ENABLE(chan)   	(1<<(31-chan))	/* Start Scatter Gather */
                            	  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3056: FILE: include/asm-ppc/ppc4xx_dma.h:250:
+#define SSG_ENABLE(chan)   	(1<<(31-chan))	/* Start Scatter Gather */
                            	       ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#3056: FILE: include/asm-ppc/ppc4xx_dma.h:250:
+#define SSG_ENABLE(chan)   	(1<<(31-chan))	/* Start Scatter Gather */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3057: FILE: include/asm-ppc/ppc4xx_dma.h:251:
+#define SSG_MASK_ENABLE(chan)	(1<<(15-chan))	/* Enable writing to SSG0 bit */
                              	  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3057: FILE: include/asm-ppc/ppc4xx_dma.h:251:
+#define SSG_MASK_ENABLE(chan)	(1<<(15-chan))	/* Enable writing to SSG0 bit */
                              	       ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#3057: FILE: include/asm-ppc/ppc4xx_dma.h:251:
+#define SSG_MASK_ENABLE(chan)	(1<<(15-chan))	/* Enable writing to SSG0 bit */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3060: FILE: include/asm-ppc/ppc4xx_dma.h:254:
+ * DMA Scatter/Gather Descriptor Bit fields $

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3062: FILE: include/asm-ppc/ppc4xx_dma.h:256:
+#define SG_LINK            (1<<31)	/* Link */
                              ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3062: FILE: include/asm-ppc/ppc4xx_dma.h:256:
+#define SG_LINK            (1<<31)	/* Link */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3063: FILE: include/asm-ppc/ppc4xx_dma.h:257:
+#define SG_TCI_ENABLE      (1<<29)	/* Enable Terminal Count Interrupt */
                              ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3063: FILE: include/asm-ppc/ppc4xx_dma.h:257:
+#define SG_TCI_ENABLE      (1<<29)	/* Enable Terminal Count Interrupt */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3064: FILE: include/asm-ppc/ppc4xx_dma.h:258:
+#define SG_ETI_ENABLE      (1<<28)	/* Enable End of Transfer Interrupt */
                              ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3064: FILE: include/asm-ppc/ppc4xx_dma.h:258:
+#define SG_ETI_ENABLE      (1<<28)	/* Enable End of Transfer Interrupt */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3065: FILE: include/asm-ppc/ppc4xx_dma.h:259:
+#define SG_ERI_ENABLE      (1<<27)	/* Enable Error Interrupt */
                              ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3065: FILE: include/asm-ppc/ppc4xx_dma.h:259:
+#define SG_ERI_ENABLE      (1<<27)	/* Enable Error Interrupt */

ERROR:CODE_INDENT: code indent should use tabs where possible
#3069: FILE: include/asm-ppc/ppc4xx_dma.h:263:
+ ^I^I(SET_DMA_CIE_ENABLE(p_init->int_enable) | /* interrupt enable         */ \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3069: FILE: include/asm-ppc/ppc4xx_dma.h:263:
+ ^I^I(SET_DMA_CIE_ENABLE(p_init->int_enable) | /* interrupt enable         */ \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3069: FILE: include/asm-ppc/ppc4xx_dma.h:263:
+ ^I^I(SET_DMA_CIE_ENABLE(p_init->int_enable) | /* interrupt enable         */ \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3070: FILE: include/asm-ppc/ppc4xx_dma.h:264:
+ ^I^ISET_DMA_BEN(p_init->buffer_enable)     | /* buffer enable            */\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3070: FILE: include/asm-ppc/ppc4xx_dma.h:264:
+ ^I^ISET_DMA_BEN(p_init->buffer_enable)     | /* buffer enable            */\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3070: FILE: include/asm-ppc/ppc4xx_dma.h:264:
+ ^I^ISET_DMA_BEN(p_init->buffer_enable)     | /* buffer enable            */\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3072: FILE: include/asm-ppc/ppc4xx_dma.h:266:
+^I       ^ISET_DMA_TCE(p_init->tce_enable)        | /* terminal count enable    */ \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3072: FILE: include/asm-ppc/ppc4xx_dma.h:266:
+^I       ^ISET_DMA_TCE(p_init->tce_enable)        | /* terminal count enable    */ \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3073: FILE: include/asm-ppc/ppc4xx_dma.h:267:
+                SET_DMA_PL(p_init->pl)                 | /* peripheral location      */ \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3073: FILE: include/asm-ppc/ppc4xx_dma.h:267:
+                SET_DMA_PL(p_init->pl)                 | /* peripheral location      */ \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3074: FILE: include/asm-ppc/ppc4xx_dma.h:268:
+                SET_DMA_DAI(p_init->dai)               | /* dest addr increment      */ \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3074: FILE: include/asm-ppc/ppc4xx_dma.h:268:
+                SET_DMA_DAI(p_init->dai)               | /* dest addr increment      */ \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3075: FILE: include/asm-ppc/ppc4xx_dma.h:269:
+                SET_DMA_SAI(p_init->sai)               | /* src addr increment       */ \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3075: FILE: include/asm-ppc/ppc4xx_dma.h:269:
+                SET_DMA_SAI(p_init->sai)               | /* src addr increment       */ \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3076: FILE: include/asm-ppc/ppc4xx_dma.h:270:
+                SET_DMA_PRIORITY(p_init->cp)           |  /* channel priority        */ \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3076: FILE: include/asm-ppc/ppc4xx_dma.h:270:
+                SET_DMA_PRIORITY(p_init->cp)           |  /* channel priority        */ \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3077: FILE: include/asm-ppc/ppc4xx_dma.h:271:
+                SET_DMA_PW(p_init->pwidth)             |  /* peripheral/bus width    */ \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3077: FILE: include/asm-ppc/ppc4xx_dma.h:271:
+                SET_DMA_PW(p_init->pwidth)             |  /* peripheral/bus width    */ \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3078: FILE: include/asm-ppc/ppc4xx_dma.h:272:
+                SET_DMA_PSC(p_init->psc)               |  /* peripheral setup cycles */ \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3078: FILE: include/asm-ppc/ppc4xx_dma.h:272:
+                SET_DMA_PSC(p_init->psc)               |  /* peripheral setup cycles */ \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3079: FILE: include/asm-ppc/ppc4xx_dma.h:273:
+                SET_DMA_PWC(p_init->pwc)               |  /* peripheral wait cycles  */ \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3079: FILE: include/asm-ppc/ppc4xx_dma.h:273:
+                SET_DMA_PWC(p_init->pwc)               |  /* peripheral wait cycles  */ \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3080: FILE: include/asm-ppc/ppc4xx_dma.h:274:
+                SET_DMA_PHC(p_init->phc)               |  /* peripheral hold cycles  */ \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3080: FILE: include/asm-ppc/ppc4xx_dma.h:274:
+                SET_DMA_PHC(p_init->phc)               |  /* peripheral hold cycles  */ \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3081: FILE: include/asm-ppc/ppc4xx_dma.h:275:
+                SET_DMA_PREFETCH(p_init->pf)              /* read prefetch           */)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3081: FILE: include/asm-ppc/ppc4xx_dma.h:275:
+                SET_DMA_PREFETCH(p_init->pf)              /* read prefetch           */)$

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#3083: FILE: include/asm-ppc/ppc4xx_dma.h:277:
+#define GET_DMA_POLARITY(chan) (DMAReq_ActiveLow(chan) | DMAAck_ActiveLow(chan) | EOT_ActiveLow(chan))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chan' - possible side-effects?
#3083: FILE: include/asm-ppc/ppc4xx_dma.h:277:
+#define GET_DMA_POLARITY(chan) (DMAReq_ActiveLow(chan) | DMAAck_ActiveLow(chan) | EOT_ActiveLow(chan))

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#3093: FILE: include/asm-ppc/ppc4xx_dma.h:287:
+#define SET_DMA_PRIORITY(x)   (((x)&0x00800001))	/* DMA Channel Priority */
                                    ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3095: FILE: include/asm-ppc/ppc4xx_dma.h:289:
+#define   PRIORITY_LOW         ^I0x00000000$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3096: FILE: include/asm-ppc/ppc4xx_dma.h:290:
+#define   PRIORITY_MID_LOW     ^I0x00000001$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3097: FILE: include/asm-ppc/ppc4xx_dma.h:291:
+#define   PRIORITY_MID_HIGH    ^I0x00800000$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3098: FILE: include/asm-ppc/ppc4xx_dma.h:292:
+#define   PRIORITY_HIGH        ^I0x00800001$

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#3099: FILE: include/asm-ppc/ppc4xx_dma.h:293:
+#define GET_DMA_PRIORITY(x) (((((x)&DMA_PRIORITY_MASK) &0x00800000) >> 22 ) | (((x)&DMA_PRIORITY_MASK) &0x00000001))

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#3099: FILE: include/asm-ppc/ppc4xx_dma.h:293:
+#define GET_DMA_PRIORITY(x) (((((x)&DMA_PRIORITY_MASK) &0x00800000) >> 22 ) | (((x)&DMA_PRIORITY_MASK) &0x00000001))
                                    ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#3099: FILE: include/asm-ppc/ppc4xx_dma.h:293:
+#define GET_DMA_PRIORITY(x) (((((x)&DMA_PRIORITY_MASK) &0x00800000) >> 22 ) | (((x)&DMA_PRIORITY_MASK) &0x00000001))
                                                        ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#3099: FILE: include/asm-ppc/ppc4xx_dma.h:293:
+#define GET_DMA_PRIORITY(x) (((((x)&DMA_PRIORITY_MASK) &0x00800000) >> 22 ) | (((x)&DMA_PRIORITY_MASK) &0x00000001))
                                                                                    ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#3099: FILE: include/asm-ppc/ppc4xx_dma.h:293:
+#define GET_DMA_PRIORITY(x) (((((x)&DMA_PRIORITY_MASK) &0x00800000) >> 22 ) | (((x)&DMA_PRIORITY_MASK) &0x00000001))
                                                                                                        ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#3099: FILE: include/asm-ppc/ppc4xx_dma.h:293:
+#define GET_DMA_PRIORITY(x) (((((x)&DMA_PRIORITY_MASK) &0x00800000) >> 22 ) | (((x)&DMA_PRIORITY_MASK) &0x00000001))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#3099: FILE: include/asm-ppc/ppc4xx_dma.h:293:
+#define GET_DMA_PRIORITY(x) (((((x)&DMA_PRIORITY_MASK) &0x00800000) >> 22 ) | (((x)&DMA_PRIORITY_MASK) &0x00000001))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3101: FILE: include/asm-ppc/ppc4xx_dma.h:295:
+#define DMA_CS0           (1<<31)	/* Terminal Count has been reached */
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3101: FILE: include/asm-ppc/ppc4xx_dma.h:295:
+#define DMA_CS0           (1<<31)	/* Terminal Count has been reached */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3102: FILE: include/asm-ppc/ppc4xx_dma.h:296:
+#define DMA_CS1           (1<<30)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3102: FILE: include/asm-ppc/ppc4xx_dma.h:296:
+#define DMA_CS1           (1<<30)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3103: FILE: include/asm-ppc/ppc4xx_dma.h:297:
+#define DMA_CS2           (1<<29)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3103: FILE: include/asm-ppc/ppc4xx_dma.h:297:
+#define DMA_CS2           (1<<29)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3104: FILE: include/asm-ppc/ppc4xx_dma.h:298:
+#define DMA_CS3           (1<<28)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3104: FILE: include/asm-ppc/ppc4xx_dma.h:298:
+#define DMA_CS3           (1<<28)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3106: FILE: include/asm-ppc/ppc4xx_dma.h:300:
+#define DMA_TS0           (1<<27)	/* End of Transfer has been requested */
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3106: FILE: include/asm-ppc/ppc4xx_dma.h:300:
+#define DMA_TS0           (1<<27)	/* End of Transfer has been requested */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3107: FILE: include/asm-ppc/ppc4xx_dma.h:301:
+#define DMA_TS1           (1<<26)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3107: FILE: include/asm-ppc/ppc4xx_dma.h:301:
+#define DMA_TS1           (1<<26)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3108: FILE: include/asm-ppc/ppc4xx_dma.h:302:
+#define DMA_TS2           (1<<25)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3108: FILE: include/asm-ppc/ppc4xx_dma.h:302:
+#define DMA_TS2           (1<<25)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3109: FILE: include/asm-ppc/ppc4xx_dma.h:303:
+#define DMA_TS3           (1<<24)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3109: FILE: include/asm-ppc/ppc4xx_dma.h:303:
+#define DMA_TS3           (1<<24)

WARNING:TYPO_SPELLING: 'Chanel' may be misspelled - perhaps 'Channel'?
#3111: FILE: include/asm-ppc/ppc4xx_dma.h:305:
+#define DMA_CH0_ERR       (1<<23)	/* DMA Chanel 0 Error */
                                  	       ^^^^^^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3111: FILE: include/asm-ppc/ppc4xx_dma.h:305:
+#define DMA_CH0_ERR       (1<<23)	/* DMA Chanel 0 Error */
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3111: FILE: include/asm-ppc/ppc4xx_dma.h:305:
+#define DMA_CH0_ERR       (1<<23)	/* DMA Chanel 0 Error */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3112: FILE: include/asm-ppc/ppc4xx_dma.h:306:
+#define DMA_CH1_ERR       (1<<22)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3112: FILE: include/asm-ppc/ppc4xx_dma.h:306:
+#define DMA_CH1_ERR       (1<<22)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3113: FILE: include/asm-ppc/ppc4xx_dma.h:307:
+#define DMA_CH2_ERR       (1<<21)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3113: FILE: include/asm-ppc/ppc4xx_dma.h:307:
+#define DMA_CH2_ERR       (1<<21)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3114: FILE: include/asm-ppc/ppc4xx_dma.h:308:
+#define DMA_CH3_ERR       (1<<20)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3114: FILE: include/asm-ppc/ppc4xx_dma.h:308:
+#define DMA_CH3_ERR       (1<<20)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3116: FILE: include/asm-ppc/ppc4xx_dma.h:310:
+#define DMA_CT0		  (1<<19)	/* Chained transfere */
                		    ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3116: FILE: include/asm-ppc/ppc4xx_dma.h:310:
+#define DMA_CT0		  (1<<19)	/* Chained transfere */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3118: FILE: include/asm-ppc/ppc4xx_dma.h:312:
+#define DMA_IN_DMA_REQ0   (1<<18)	/* Internal DMA Request is pending */
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3118: FILE: include/asm-ppc/ppc4xx_dma.h:312:
+#define DMA_IN_DMA_REQ0   (1<<18)	/* Internal DMA Request is pending */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3119: FILE: include/asm-ppc/ppc4xx_dma.h:313:
+#define DMA_IN_DMA_REQ1   (1<<17)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3119: FILE: include/asm-ppc/ppc4xx_dma.h:313:
+#define DMA_IN_DMA_REQ1   (1<<17)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3120: FILE: include/asm-ppc/ppc4xx_dma.h:314:
+#define DMA_IN_DMA_REQ2   (1<<16)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3120: FILE: include/asm-ppc/ppc4xx_dma.h:314:
+#define DMA_IN_DMA_REQ2   (1<<16)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3121: FILE: include/asm-ppc/ppc4xx_dma.h:315:
+#define DMA_IN_DMA_REQ3   (1<<15)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3121: FILE: include/asm-ppc/ppc4xx_dma.h:315:
+#define DMA_IN_DMA_REQ3   (1<<15)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3123: FILE: include/asm-ppc/ppc4xx_dma.h:317:
+#define DMA_EXT_DMA_REQ0  (1<<14)	/* External DMA Request is pending */
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3123: FILE: include/asm-ppc/ppc4xx_dma.h:317:
+#define DMA_EXT_DMA_REQ0  (1<<14)	/* External DMA Request is pending */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3124: FILE: include/asm-ppc/ppc4xx_dma.h:318:
+#define DMA_EXT_DMA_REQ1  (1<<13)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3124: FILE: include/asm-ppc/ppc4xx_dma.h:318:
+#define DMA_EXT_DMA_REQ1  (1<<13)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3125: FILE: include/asm-ppc/ppc4xx_dma.h:319:
+#define DMA_EXT_DMA_REQ2  (1<<12)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3125: FILE: include/asm-ppc/ppc4xx_dma.h:319:
+#define DMA_EXT_DMA_REQ2  (1<<12)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3126: FILE: include/asm-ppc/ppc4xx_dma.h:320:
+#define DMA_EXT_DMA_REQ3  (1<<11)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3126: FILE: include/asm-ppc/ppc4xx_dma.h:320:
+#define DMA_EXT_DMA_REQ3  (1<<11)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3128: FILE: include/asm-ppc/ppc4xx_dma.h:322:
+#define DMA_CH0_BUSY      (1<<10)	/* DMA Channel 0 Busy */
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3128: FILE: include/asm-ppc/ppc4xx_dma.h:322:
+#define DMA_CH0_BUSY      (1<<10)	/* DMA Channel 0 Busy */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3129: FILE: include/asm-ppc/ppc4xx_dma.h:323:
+#define DMA_CH1_BUSY      (1<<9)
                             ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3129: FILE: include/asm-ppc/ppc4xx_dma.h:323:
+#define DMA_CH1_BUSY      (1<<9)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3130: FILE: include/asm-ppc/ppc4xx_dma.h:324:
+#define DMA_CH2_BUSY       (1<<8)
                              ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3130: FILE: include/asm-ppc/ppc4xx_dma.h:324:
+#define DMA_CH2_BUSY       (1<<8)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3131: FILE: include/asm-ppc/ppc4xx_dma.h:325:
+#define DMA_CH3_BUSY       (1<<7)
                              ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3131: FILE: include/asm-ppc/ppc4xx_dma.h:325:
+#define DMA_CH3_BUSY       (1<<7)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3133: FILE: include/asm-ppc/ppc4xx_dma.h:327:
+#define DMA_CT1            (1<<6)	/* Chained transfere */
                              ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3133: FILE: include/asm-ppc/ppc4xx_dma.h:327:
+#define DMA_CT1            (1<<6)	/* Chained transfere */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3134: FILE: include/asm-ppc/ppc4xx_dma.h:328:
+#define DMA_CT2            (1<<5)
                              ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3134: FILE: include/asm-ppc/ppc4xx_dma.h:328:
+#define DMA_CT2            (1<<5)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3135: FILE: include/asm-ppc/ppc4xx_dma.h:329:
+#define DMA_CT3            (1<<4)
                              ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3135: FILE: include/asm-ppc/ppc4xx_dma.h:329:
+#define DMA_CT3            (1<<4)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3137: FILE: include/asm-ppc/ppc4xx_dma.h:331:
+#define DMA_CH_ENABLE (1<<7)
                         ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#3137: FILE: include/asm-ppc/ppc4xx_dma.h:331:
+#define DMA_CH_ENABLE (1<<7)

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#3138: FILE: include/asm-ppc/ppc4xx_dma.h:332:
+#define SET_DMA_CH(x) (((x)&0x1)<<7)
                            ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3138: FILE: include/asm-ppc/ppc4xx_dma.h:332:
+#define SET_DMA_CH(x) (((x)&0x1)<<7)
                                 ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#3139: FILE: include/asm-ppc/ppc4xx_dma.h:333:
+#define GET_DMA_CH(x) (((x)&DMA_CH_ENABLE)>>7)
                            ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#3139: FILE: include/asm-ppc/ppc4xx_dma.h:333:
+#define GET_DMA_CH(x) (((x)&DMA_CH_ENABLE)>>7)
                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3142: FILE: include/asm-ppc/ppc4xx_dma.h:336:
+/* enable device port on a dma channel $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3151: FILE: include/asm-ppc/ppc4xx_dma.h:345:
+#define EXT_DMA_2^I9 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3152: FILE: include/asm-ppc/ppc4xx_dma.h:346:
+#define^IEXT_DMA_3^I8 $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3155: FILE: include/asm-ppc/ppc4xx_dma.h:349:
+#define SC0_XMIT ^I5$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3157: FILE: include/asm-ppc/ppc4xx_dma.h:351:
+#define^ISERIAL1_XMIT^I3 $

ERROR:CODE_INDENT: code indent should use tabs where possible
#3175: FILE: include/asm-ppc/ppc4xx_dma.h:369:
+       ^I^I(SET_DMA_CIE_ENABLE(p_init->int_enable) |  /* interrupt enable         */ \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3175: FILE: include/asm-ppc/ppc4xx_dma.h:369:
+       ^I^I(SET_DMA_CIE_ENABLE(p_init->int_enable) |  /* interrupt enable         */ \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3175: FILE: include/asm-ppc/ppc4xx_dma.h:369:
+       ^I^I(SET_DMA_CIE_ENABLE(p_init->int_enable) |  /* interrupt enable         */ \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3188: FILE: include/asm-ppc/ppc4xx_dma.h:382:
+^I^ISET_DMA_CH(p_init->ch_enable)^I|    /* Chain enable ^I        */ \$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3195: FILE: include/asm-ppc/ppc4xx_dma.h:389:
+typedef struct {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3199: FILE: include/asm-ppc/ppc4xx_dma.h:393:
+^I/* $

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3278: FILE: include/asm-ppc/ppc4xx_dma.h:472:
+	uint32_t control;	/* channel control word                      */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3301: FILE: include/asm-ppc/ppc4xx_dma.h:495:
+typedef struct {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3302: FILE: include/asm-ppc/ppc4xx_dma.h:496:
+	uint32_t control;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3303: FILE: include/asm-ppc/ppc4xx_dma.h:497:
+	uint32_t control_count;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3309: FILE: include/asm-ppc/ppc4xx_dma.h:503:
+typedef struct {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3310: FILE: include/asm-ppc/ppc4xx_dma.h:504:
+	uint32_t control;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3313: FILE: include/asm-ppc/ppc4xx_dma.h:507:
+	uint32_t control_count;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3314: FILE: include/asm-ppc/ppc4xx_dma.h:508:
+	uint32_t next;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3318: FILE: include/asm-ppc/ppc4xx_dma.h:512:
+typedef struct {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3320: FILE: include/asm-ppc/ppc4xx_dma.h:514:
+	uint32_t control;	/* channel ctrl word; loaded from each descrptr */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3321: FILE: include/asm-ppc/ppc4xx_dma.h:515:
+	uint32_t sgl_control;	/* LK, TCI, ETI, and ERI bits in sgl descriptor */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3329: FILE: include/asm-ppc/ppc4xx_dma.h:523:
+typedef struct {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3341: FILE: include/asm-ppc/ppc4xx_dma.h:535:
+extern int ppc4xx_init_dma_channel(unsigned int, ppc_dma_ch_t *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#3341: FILE: include/asm-ppc/ppc4xx_dma.h:535:
+extern int ppc4xx_init_dma_channel(unsigned int, ppc_dma_ch_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ppc_dma_ch_t *' should also have an identifier name
#3341: FILE: include/asm-ppc/ppc4xx_dma.h:535:
+extern int ppc4xx_init_dma_channel(unsigned int, ppc_dma_ch_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3342: FILE: include/asm-ppc/ppc4xx_dma.h:536:
+extern int ppc4xx_get_channel_config(unsigned int, ppc_dma_ch_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#3342: FILE: include/asm-ppc/ppc4xx_dma.h:536:
+extern int ppc4xx_get_channel_config(unsigned int, ppc_dma_ch_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ppc_dma_ch_t *' should also have an identifier name
#3342: FILE: include/asm-ppc/ppc4xx_dma.h:536:
+extern int ppc4xx_get_channel_config(unsigned int, ppc_dma_ch_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3343: FILE: include/asm-ppc/ppc4xx_dma.h:537:
+extern int ppc4xx_set_channel_priority(unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#3343: FILE: include/asm-ppc/ppc4xx_dma.h:537:
+extern int ppc4xx_set_channel_priority(unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#3343: FILE: include/asm-ppc/ppc4xx_dma.h:537:
+extern int ppc4xx_set_channel_priority(unsigned int, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3344: FILE: include/asm-ppc/ppc4xx_dma.h:538:
+extern unsigned int ppc4xx_get_peripheral_width(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#3344: FILE: include/asm-ppc/ppc4xx_dma.h:538:
+extern unsigned int ppc4xx_get_peripheral_width(unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3345: FILE: include/asm-ppc/ppc4xx_dma.h:539:
+extern void ppc4xx_set_sg_addr(int, phys_addr_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#3345: FILE: include/asm-ppc/ppc4xx_dma.h:539:
+extern void ppc4xx_set_sg_addr(int, phys_addr_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'phys_addr_t' should also have an identifier name
#3345: FILE: include/asm-ppc/ppc4xx_dma.h:539:
+extern void ppc4xx_set_sg_addr(int, phys_addr_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3346: FILE: include/asm-ppc/ppc4xx_dma.h:540:
+extern int ppc4xx_add_dma_sgl(sgl_handle_t, phys_addr_t, phys_addr_t, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sgl_handle_t' should also have an identifier name
#3346: FILE: include/asm-ppc/ppc4xx_dma.h:540:
+extern int ppc4xx_add_dma_sgl(sgl_handle_t, phys_addr_t, phys_addr_t, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'phys_addr_t' should also have an identifier name
#3346: FILE: include/asm-ppc/ppc4xx_dma.h:540:
+extern int ppc4xx_add_dma_sgl(sgl_handle_t, phys_addr_t, phys_addr_t, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'phys_addr_t' should also have an identifier name
#3346: FILE: include/asm-ppc/ppc4xx_dma.h:540:
+extern int ppc4xx_add_dma_sgl(sgl_handle_t, phys_addr_t, phys_addr_t, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#3346: FILE: include/asm-ppc/ppc4xx_dma.h:540:
+extern int ppc4xx_add_dma_sgl(sgl_handle_t, phys_addr_t, phys_addr_t, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3347: FILE: include/asm-ppc/ppc4xx_dma.h:541:
+extern void ppc4xx_enable_dma_sgl(sgl_handle_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sgl_handle_t' should also have an identifier name
#3347: FILE: include/asm-ppc/ppc4xx_dma.h:541:
+extern void ppc4xx_enable_dma_sgl(sgl_handle_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3348: FILE: include/asm-ppc/ppc4xx_dma.h:542:
+extern void ppc4xx_disable_dma_sgl(sgl_handle_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sgl_handle_t' should also have an identifier name
#3348: FILE: include/asm-ppc/ppc4xx_dma.h:542:
+extern void ppc4xx_disable_dma_sgl(sgl_handle_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3349: FILE: include/asm-ppc/ppc4xx_dma.h:543:
+extern int ppc4xx_get_dma_sgl_residue(sgl_handle_t, phys_addr_t *, phys_addr_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sgl_handle_t' should also have an identifier name
#3349: FILE: include/asm-ppc/ppc4xx_dma.h:543:
+extern int ppc4xx_get_dma_sgl_residue(sgl_handle_t, phys_addr_t *, phys_addr_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'phys_addr_t *' should also have an identifier name
#3349: FILE: include/asm-ppc/ppc4xx_dma.h:543:
+extern int ppc4xx_get_dma_sgl_residue(sgl_handle_t, phys_addr_t *, phys_addr_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'phys_addr_t *' should also have an identifier name
#3349: FILE: include/asm-ppc/ppc4xx_dma.h:543:
+extern int ppc4xx_get_dma_sgl_residue(sgl_handle_t, phys_addr_t *, phys_addr_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3350: FILE: include/asm-ppc/ppc4xx_dma.h:544:
+extern int ppc4xx_delete_dma_sgl_element(sgl_handle_t, phys_addr_t *, phys_addr_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sgl_handle_t' should also have an identifier name
#3350: FILE: include/asm-ppc/ppc4xx_dma.h:544:
+extern int ppc4xx_delete_dma_sgl_element(sgl_handle_t, phys_addr_t *, phys_addr_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'phys_addr_t *' should also have an identifier name
#3350: FILE: include/asm-ppc/ppc4xx_dma.h:544:
+extern int ppc4xx_delete_dma_sgl_element(sgl_handle_t, phys_addr_t *, phys_addr_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'phys_addr_t *' should also have an identifier name
#3350: FILE: include/asm-ppc/ppc4xx_dma.h:544:
+extern int ppc4xx_delete_dma_sgl_element(sgl_handle_t, phys_addr_t *, phys_addr_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3351: FILE: include/asm-ppc/ppc4xx_dma.h:545:
+extern int ppc4xx_alloc_dma_handle(sgl_handle_t *, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sgl_handle_t *' should also have an identifier name
#3351: FILE: include/asm-ppc/ppc4xx_dma.h:545:
+extern int ppc4xx_alloc_dma_handle(sgl_handle_t *, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#3351: FILE: include/asm-ppc/ppc4xx_dma.h:545:
+extern int ppc4xx_alloc_dma_handle(sgl_handle_t *, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#3351: FILE: include/asm-ppc/ppc4xx_dma.h:545:
+extern int ppc4xx_alloc_dma_handle(sgl_handle_t *, unsigned int, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3352: FILE: include/asm-ppc/ppc4xx_dma.h:546:
+extern void ppc4xx_free_dma_handle(sgl_handle_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sgl_handle_t' should also have an identifier name
#3352: FILE: include/asm-ppc/ppc4xx_dma.h:546:
+extern void ppc4xx_free_dma_handle(sgl_handle_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3353: FILE: include/asm-ppc/ppc4xx_dma.h:547:
+extern int ppc4xx_get_dma_status(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3354: FILE: include/asm-ppc/ppc4xx_dma.h:548:
+extern void ppc4xx_set_src_addr(int dmanr, phys_addr_t src_addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3355: FILE: include/asm-ppc/ppc4xx_dma.h:549:
+extern void ppc4xx_set_dst_addr(int dmanr, phys_addr_t dst_addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3356: FILE: include/asm-ppc/ppc4xx_dma.h:550:
+extern void ppc4xx_enable_dma(unsigned int dmanr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3357: FILE: include/asm-ppc/ppc4xx_dma.h:551:
+extern void ppc4xx_disable_dma(unsigned int dmanr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3358: FILE: include/asm-ppc/ppc4xx_dma.h:552:
+extern void ppc4xx_set_dma_count(unsigned int dmanr, unsigned int count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3359: FILE: include/asm-ppc/ppc4xx_dma.h:553:
+extern int ppc4xx_get_dma_residue(unsigned int dmanr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3360: FILE: include/asm-ppc/ppc4xx_dma.h:554:
+extern void ppc4xx_set_dma_addr2(unsigned int dmanr, phys_addr_t src_dma_addr,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3362: FILE: include/asm-ppc/ppc4xx_dma.h:556:
+extern int ppc4xx_enable_dma_interrupt(unsigned int dmanr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3363: FILE: include/asm-ppc/ppc4xx_dma.h:557:
+extern int ppc4xx_disable_dma_interrupt(unsigned int dmanr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3364: FILE: include/asm-ppc/ppc4xx_dma.h:558:
+extern int ppc4xx_clr_dma_status(unsigned int dmanr);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3365: FILE: include/asm-ppc/ppc4xx_dma.h:559:
+extern int ppc4xx_map_dma_port(unsigned int dmanr, unsigned int ocp_dma,short dma_chan);
                                                                        ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3365: FILE: include/asm-ppc/ppc4xx_dma.h:559:
+extern int ppc4xx_map_dma_port(unsigned int dmanr, unsigned int ocp_dma,short dma_chan);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3366: FILE: include/asm-ppc/ppc4xx_dma.h:560:
+extern int ppc4xx_disable_dma_port(unsigned int dmanr, unsigned int ocp_dma,short dma_chan);
                                                                            ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3366: FILE: include/asm-ppc/ppc4xx_dma.h:560:
+extern int ppc4xx_disable_dma_port(unsigned int dmanr, unsigned int ocp_dma,short dma_chan);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3367: FILE: include/asm-ppc/ppc4xx_dma.h:561:
+extern int ppc4xx_set_dma_mode(unsigned int dmanr, unsigned int mode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3372: FILE: include/asm-ppc/ppc4xx_dma.h:566:
+extern int request_dma(unsigned int dmanr, const char *device_id);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3374: FILE: include/asm-ppc/ppc4xx_dma.h:568:
+extern void free_dma(unsigned int dmanr);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000262620.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 52 errors, 184 warnings, 371 checks, 2049 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000262620.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
