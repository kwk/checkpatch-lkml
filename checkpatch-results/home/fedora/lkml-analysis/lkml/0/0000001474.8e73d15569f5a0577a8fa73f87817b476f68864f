CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#108: FILE: include/linux/rcupdate.h:223:
+extern long rcu_batches_completed(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#109: FILE: include/linux/rcupdate.h:224:
+extern long rcu_batches_completed_bh(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#114: FILE: include/linux/rcupdate.h:229:
+extern int rcu_needs_cpu(int cpu);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#122: FILE: include/linux/rcupreempt.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#136: FILE: include/linux/rcupreempt.h:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#137: FILE: include/linux/rcupreempt.h:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#142: FILE: include/linux/rcupreempt.h:21:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#150: FILE: include/linux/rcupreempt.h:29:
+ * ^I^Ihttp://lse.sourceforge.net/locking/rcupdate.html$

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_bh', prefer 'call_rcu' instead
#168: FILE: include/linux/rcupreempt.h:47:
+#define call_rcu_bh(head, rcu) call_rcu(head, rcu)

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#170: FILE: include/linux/rcupreempt.h:49:
+extern void __rcu_read_lock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#171: FILE: include/linux/rcupreempt.h:50:
+extern void __rcu_read_unlock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#172: FILE: include/linux/rcupreempt.h:51:
+extern int rcu_pending(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#179: FILE: include/linux/rcupreempt.h:58:
+extern void __synchronize_sched(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#181: FILE: include/linux/rcupreempt.h:60:
+extern void __rcu_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#182: FILE: include/linux/rcupreempt.h:61:
+extern void rcu_check_callbacks(int cpu, int user);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#183: FILE: include/linux/rcupreempt.h:62:
+extern void rcu_restart_cpu(int cpu);

ERROR:CODE_INDENT: code indent should use tabs where possible
#195: FILE: include/linux/sched.h:852:
+        int rcu_read_lock_nesting;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: include/linux/sched.h:852:
+        int rcu_read_lock_nesting;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: include/linux/sched.h:853:
+        int rcu_flipctr_idx;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: include/linux/sched.h:853:
+        int rcu_flipctr_idx;$

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#237: FILE: kernel/Kconfig.preempt:66:
+choice
+	prompt "RCU implementation type:"
+	default CLASSIC_RCU
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#291: FILE: kernel/rcupreempt.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#305: FILE: kernel/rcupreempt.c:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#306: FILE: kernel/rcupreempt.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#319: FILE: kernel/rcupreempt.c:29:
+ * ^I^IDocumentation/RCU/ *.txt$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#330: FILE: kernel/rcupreempt.c:40:
+#include <asm/atomic.h>

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#349: FILE: kernel/rcupreempt.c:59:
+	spinlock_t	lock;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#358: FILE: kernel/rcupreempt.c:68:
+};
+struct rcu_ctrlblk {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#359: FILE: kernel/rcupreempt.c:69:
+	spinlock_t	fliplock;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#362: FILE: kernel/rcupreempt.c:72:
+};
+static struct rcu_data rcu_data;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#367: FILE: kernel/rcupreempt.c:77:
+};
+static DEFINE_PER_CPU(int [2], rcu_flipctr) = { 0, 0 };

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#375: FILE: kernel/rcupreempt.c:85:
+^IRCU_TRY_FLIP_WAITACK, ^I/* "A" */$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#379: FILE: kernel/rcupreempt.c:89:
+};
+static enum rcu_try_flip_state rcu_try_flip_state = RCU_TRY_FLIP_IDLE;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#391: FILE: kernel/rcupreempt.c:101:
+};
+static DEFINE_PER_CPU(enum rcu_flip_flag_value, rcu_flip_flag) = RCU_FLIP_SEEN;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#404: FILE: kernel/rcupreempt.c:114:
+};
+static DEFINE_PER_CPU(enum rcu_mb_flag_value, rcu_mb_flag) = RCU_MB_DONE;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#427: FILE: kernel/rcupreempt.c:137:
+	if (nesting != 0) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#505: FILE: kernel/rcupreempt.c:215:
+^I^I/* $

CHECK:BRACES: braces {} should be used on all arms of this statement
#538: FILE: kernel/rcupreempt.c:248:
+	if ((rcu_data.completed >> 1) != (rcu_ctrlblk.completed >> 1)) {
[...]
+	} else if (rcu_data.completed != rcu_ctrlblk.completed)
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.waitlist"
#539: FILE: kernel/rcupreempt.c:249:
+		if (rcu_data.waitlist != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.nextlist"
#543: FILE: kernel/rcupreempt.c:253:
+		if (rcu_data.nextlist != NULL) {

WARNING:TYPO_SPELLING: 'acknowledgement' may be misspelled - perhaps 'acknowledgment'?
#593: FILE: kernel/rcupreempt.c:303:
+	/* Now ask each CPU for acknowledgement of the flip. */
 	                        ^^^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#609: FILE: kernel/rcupreempt.c:319:
+^I^Iif (per_cpu(rcu_flip_flag, cpu) != RCU_FLIP_SEEN) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#677: FILE: kernel/rcupreempt.c:387:
+^Iif (unlikely(!spin_trylock_irqsave(&rcu_ctrlblk.fliplock, oldirq))) $

WARNING:TYPO_SPELLING: 'acccesses' may be misspelled - perhaps 'accesses'?
#718: FILE: kernel/rcupreempt.c:428:
+		smp_mb();  /* Subsequent counter acccesses must see new value */
 		                                 ^^^^^^^^^

WARNING:MEMORY_BARRIER: memory barrier without comment
#733: FILE: kernel/rcupreempt.c:443:
+		smp_mb();

WARNING:BRACES: braces {} are not necessary for single statement blocks
#750: FILE: kernel/rcupreempt.c:460:
+		if (rcu_ctrlblk.completed == rcu_data.completed) {
+			return;
+		}

CHECK:BRACES: braces {} should be used on all arms of this statement
#756: FILE: kernel/rcupreempt.c:466:
+	if (rcu_data.donelist == NULL)
[...]
+	else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcu_data.donelist"
#756: FILE: kernel/rcupreempt.c:466:
+	if (rcu_data.donelist == NULL)

CHECK:BRACES: Unbalanced braces around else statement
#758: FILE: kernel/rcupreempt.c:468:
+	else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#785: FILE: kernel/rcupreempt.c:495:
+		if (rcu_ctrlblk.completed == rcu_data.completed) {
+			return;
+		}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!list"
#801: FILE: kernel/rcupreempt.c:511:
+	if (list == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#816: FILE: kernel/rcupreempt.c:526:
+void fastcall call_rcu(struct rcu_head *head,
+				void (*func)(struct rcu_head *rcu))

WARNING:BRACES: braces {} are not necessary for single statement blocks
#840: FILE: kernel/rcupreempt.c:550:
+	if (sched_getaffinity(0, &oldmask) < 0) {
+		oldmask = cpu_possible_map;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.donelist"
#852: FILE: kernel/rcupreempt.c:562:
+	return (rcu_data.donelist != NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.waitlist"
#853: FILE: kernel/rcupreempt.c:563:
+		rcu_data.waitlist != NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.nextlist"
#854: FILE: kernel/rcupreempt.c:564:
+		rcu_data.nextlist != NULL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#878: FILE: kernel/rcupreempt.c:588:
+
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#879: FILE: kernel/rcupreempt.c:589:
+EXPORT_SYMBOL_GPL(call_rcu);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#880: FILE: kernel/rcupreempt.c:590:
+EXPORT_SYMBOL_GPL(rcu_batches_completed);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#881: FILE: kernel/rcupreempt.c:591:
+EXPORT_SYMBOL_GPL(rcu_batches_completed_bh);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#882: FILE: kernel/rcupreempt.c:592:
+EXPORT_SYMBOL_GPL(__synchronize_sched);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#883: FILE: kernel/rcupreempt.c:593:
+EXPORT_SYMBOL_GPL(__rcu_read_lock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#884: FILE: kernel/rcupreempt.c:594:
+EXPORT_SYMBOL_GPL(__rcu_read_unlock);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000001474.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 22 warnings, 31 checks, 794 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000001474.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
