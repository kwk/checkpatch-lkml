WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
> On Thu, Apr 29, 2004 at 02:02:50PM +0200, stefan.eletzhofer@eletztrick.de wrote:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#84: 
#

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#85: 
# Patch managed by http://www.mn-logistik.de/unsupported/pxa250/patcher

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#86: 
#

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#91: FILE: drivers/i2c/chips/rtc8564.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#92: FILE: drivers/i2c/chips/rtc8564.c:2:
+ *  linux/drivers/i2c/chips/rtc8564.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#117: FILE: drivers/i2c/chips/rtc8564.c:27:
+# define _DBG(x, fmt, args...) do{ if (debug>=x) printk(KERN_DEBUG"%s: " fmt "\n", __FUNCTION__, ##args); } while(0);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#117: FILE: drivers/i2c/chips/rtc8564.c:27:
+# define _DBG(x, fmt, args...) do{ if (debug>=x) printk(KERN_DEBUG"%s: " fmt "\n", __FUNCTION__, ##args); } while(0);

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#117: FILE: drivers/i2c/chips/rtc8564.c:27:
+# define _DBG(x, fmt, args...) do{ if (debug>=x) printk(KERN_DEBUG"%s: " fmt "\n", __FUNCTION__, ##args); } while(0);
                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#117: FILE: drivers/i2c/chips/rtc8564.c:27:
+# define _DBG(x, fmt, args...) do{ if (debug>=x) printk(KERN_DEBUG"%s: " fmt "\n", __FUNCTION__, ##args); } while(0);

ERROR:SPACING: space required before the open parenthesis '('
#117: FILE: drivers/i2c/chips/rtc8564.c:27:
+# define _DBG(x, fmt, args...) do{ if (debug>=x) printk(KERN_DEBUG"%s: " fmt "\n", __FUNCTION__, ##args); } while(0);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#117: FILE: drivers/i2c/chips/rtc8564.c:27:
+# define _DBG(x, fmt, args...) do{ if (debug>=x) printk(KERN_DEBUG"%s: " fmt "\n", __FUNCTION__, ##args); } while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#117: FILE: drivers/i2c/chips/rtc8564.c:27:
+# define _DBG(x, fmt, args...) do{ if (debug>=x) printk(KERN_DEBUG"%s: " fmt "\n", __FUNCTION__, ##args); } while(0);

do {} while(0) macros should not have a trailing semicolon.

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#117: FILE: drivers/i2c/chips/rtc8564.c:27:
+# define _DBG(x, fmt, args...) do{ if (debug>=x) printk(KERN_DEBUG"%s: " fmt "\n", __FUNCTION__, ##args); } while(0);

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#117: FILE: drivers/i2c/chips/rtc8564.c:27:
+# define _DBG(x, fmt, args...) do{ if (debug>=x) printk(KERN_DEBUG"%s: " fmt "\n", __FUNCTION__, ##args); } while(0);

ERROR:SPACING: space required before the open parenthesis '('
#119: FILE: drivers/i2c/chips/rtc8564.c:29:
+# define _DBG(x, fmt, args...) do { } while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#119: FILE: drivers/i2c/chips/rtc8564.c:29:
+# define _DBG(x, fmt, args...) do { } while(0);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#122: FILE: drivers/i2c/chips/rtc8564.c:32:
+#define _DBGRTCTM(x, rtctm) if (debug>=x) printk("%s: secs=%d, mins=%d, hours=%d, mday=%d, " \

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#122: FILE: drivers/i2c/chips/rtc8564.c:32:
+#define _DBGRTCTM(x, rtctm) if (debug>=x) printk("%s: secs=%d, mins=%d, hours=%d, mday=%d, " \
                                      ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#122: FILE: drivers/i2c/chips/rtc8564.c:32:
+#define _DBGRTCTM(x, rtctm) if (debug>=x) printk("%s: secs=%d, mins=%d, hours=%d, mday=%d, " \
+			"mon=%d, year=%d, wday=%d VL=%d\n", __FUNCTION__, \
+			(rtctm).secs, (rtctm).mins, (rtctm).hours, (rtctm).mday, \
+			(rtctm).mon, (rtctm).year, (rtctm).wday, (rtctm).vl);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#122: FILE: drivers/i2c/chips/rtc8564.c:32:
+#define _DBGRTCTM(x, rtctm) if (debug>=x) printk("%s: secs=%d, mins=%d, hours=%d, mday=%d, " \
+			"mon=%d, year=%d, wday=%d VL=%d\n", __FUNCTION__, \
+			(rtctm).secs, (rtctm).mins, (rtctm).hours, (rtctm).mday, \
+			(rtctm).mon, (rtctm).year, (rtctm).wday, (rtctm).vl);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rtctm' - possible side-effects?
#122: FILE: drivers/i2c/chips/rtc8564.c:32:
+#define _DBGRTCTM(x, rtctm) if (debug>=x) printk("%s: secs=%d, mins=%d, hours=%d, mday=%d, " \
+			"mon=%d, year=%d, wday=%d VL=%d\n", __FUNCTION__, \
+			(rtctm).secs, (rtctm).mins, (rtctm).hours, (rtctm).mday, \
+			(rtctm).mon, (rtctm).year, (rtctm).wday, (rtctm).vl);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#122: FILE: drivers/i2c/chips/rtc8564.c:32:
+#define _DBGRTCTM(x, rtctm) if (debug>=x) printk("%s: secs=%d, mins=%d, hours=%d, mday=%d, " \
+			"mon=%d, year=%d, wday=%d VL=%d\n", __FUNCTION__, \
+			(rtctm).secs, (rtctm).mins, (rtctm).hours, (rtctm).mday, \
+			(rtctm).mon, (rtctm).year, (rtctm).wday, (rtctm).vl);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#123: FILE: drivers/i2c/chips/rtc8564.c:33:
+			"mon=%d, year=%d, wday=%d VL=%d\n", __FUNCTION__, \

WARNING:LINE_SPACING: Missing a blank line after declarations
#135: FILE: drivers/i2c/chips/rtc8564.c:45:
+	struct rtc8564_data *data = i2c_get_clientdata(client);
+	return data->ctrl & 0xff;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#137: FILE: drivers/i2c/chips/rtc8564.c:47:
+}
+static inline u8 _rtc8564_ctrl2(struct i2c_client *client)

WARNING:LINE_SPACING: Missing a blank line after declarations
#140: FILE: drivers/i2c/chips/rtc8564.c:50:
+	struct rtc8564_data *data = i2c_get_clientdata(client);
+	return (data->ctrl & 0xff00) >> 8;

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#146: FILE: drivers/i2c/chips/rtc8564.c:56:
+#define BCD_TO_BIN(val) (((val)&15) + ((val)>>4)*10)
                                ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#146: FILE: drivers/i2c/chips/rtc8564.c:56:
+#define BCD_TO_BIN(val) (((val)&15) + ((val)>>4)*10)
                                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#146: FILE: drivers/i2c/chips/rtc8564.c:56:
+#define BCD_TO_BIN(val) (((val)&15) + ((val)>>4)*10)
                                                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#146: FILE: drivers/i2c/chips/rtc8564.c:56:
+#define BCD_TO_BIN(val) (((val)&15) + ((val)>>4)*10)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#147: FILE: drivers/i2c/chips/rtc8564.c:57:
+#define BIN_TO_BCD(val) ((((val)/10)<<4) + (val)%10)
                                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#147: FILE: drivers/i2c/chips/rtc8564.c:57:
+#define BIN_TO_BCD(val) ((((val)/10)<<4) + (val)%10)
                                     ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#147: FILE: drivers/i2c/chips/rtc8564.c:57:
+#define BIN_TO_BCD(val) ((((val)/10)<<4) + (val)%10)
                                                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#147: FILE: drivers/i2c/chips/rtc8564.c:57:
+#define BIN_TO_BCD(val) ((((val)/10)<<4) + (val)%10)

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#149: FILE: drivers/i2c/chips/rtc8564.c:59:
+static int debug = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#188: FILE: drivers/i2c/chips/rtc8564.c:98:
+	if (ret == 2) {
+		ret = 0;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#223: FILE: drivers/i2c/chips/rtc8564.c:133:
+	if (ret == 1) {
+		ret = 0;
+	}

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*d)...) over kmalloc(sizeof(struct rtc8564_data)...)
#246: FILE: drivers/i2c/chips/rtc8564.c:156:
+	d = kmalloc(sizeof(struct rtc8564_data), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#254: FILE: drivers/i2c/chips/rtc8564.c:164:
+	strlcpy(new_client->name, "RTC8564", I2C_NAME_SIZE);

WARNING:TYPO_SPELLING: 'cant' may be misspelled - perhaps 'can't'?
#270: FILE: drivers/i2c/chips/rtc8564.c:180:
+		printk(KERN_INFO "rtc8564: cant init ctrl1\n");
 		                           ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#270: FILE: drivers/i2c/chips/rtc8564.c:180:
+		printk(KERN_INFO "rtc8564: cant init ctrl1\n");

WARNING:TYPO_SPELLING: 'cant' may be misspelled - perhaps 'can't'?
#278: FILE: drivers/i2c/chips/rtc8564.c:188:
+		printk(KERN_INFO "rtc8564: cant read ctrl\n");
 		                           ^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#278: FILE: drivers/i2c/chips/rtc8564.c:188:
+		printk(KERN_INFO "rtc8564: cant read ctrl\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#290: FILE: drivers/i2c/chips/rtc8564.c:200:
+	if (ret) {
+		kfree(d);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#371: FILE: drivers/i2c/chips/rtc8564.c:281:
+	if (ret) {
+		_DBG(1, "error writing data! %d", ret);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#377: FILE: drivers/i2c/chips/rtc8564.c:287:
+	if (ret) {
+		_DBG(1, "error writing data! %d", ret);
+	}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#412: FILE: drivers/i2c/chips/rtc8564.c:322:
+{
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#421: FILE: drivers/i2c/chips/rtc8564.c:331:
+{
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#431: FILE: drivers/i2c/chips/rtc8564.c:341:
+{
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#490: FILE: drivers/i2c/chips/rtc8564.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#491: FILE: drivers/i2c/chips/rtc8564.h:2:
+ *  linux/drivers/i2c/chips/rtc8564.h

WARNING:TYPO_SPELLING: 'TE' may be misspelled - perhaps 'THE'?
#541: FILE: drivers/i2c/chips/rtc8564.h:52:
+#define RTC8564_REG_TCTL		0xe /* TE x x x | x x FD1 FD0 */
                         		       ^^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#545: FILE: drivers/i2c/chips/rtc8564.h:56:
+#define RTC8564_CTRL1_TEST1		(1<<3)
                            		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#545: FILE: drivers/i2c/chips/rtc8564.h:56:
+#define RTC8564_CTRL1_TEST1		(1<<3)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#546: FILE: drivers/i2c/chips/rtc8564.h:57:
+#define RTC8564_CTRL1_STOP		(1<<5)
                           		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#546: FILE: drivers/i2c/chips/rtc8564.h:57:
+#define RTC8564_CTRL1_STOP		(1<<5)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#547: FILE: drivers/i2c/chips/rtc8564.h:58:
+#define RTC8564_CTRL1_TEST2		(1<<7)
                            		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#547: FILE: drivers/i2c/chips/rtc8564.h:58:
+#define RTC8564_CTRL1_TEST2		(1<<7)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#549: FILE: drivers/i2c/chips/rtc8564.h:60:
+#define RTC8564_CTRL2_TIE		(1<<0)
                          		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#549: FILE: drivers/i2c/chips/rtc8564.h:60:
+#define RTC8564_CTRL2_TIE		(1<<0)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#550: FILE: drivers/i2c/chips/rtc8564.h:61:
+#define RTC8564_CTRL2_AIE		(1<<1)
                          		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#550: FILE: drivers/i2c/chips/rtc8564.h:61:
+#define RTC8564_CTRL2_AIE		(1<<1)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#551: FILE: drivers/i2c/chips/rtc8564.h:62:
+#define RTC8564_CTRL2_TF		(1<<2)
                         		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#551: FILE: drivers/i2c/chips/rtc8564.h:62:
+#define RTC8564_CTRL2_TF		(1<<2)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#552: FILE: drivers/i2c/chips/rtc8564.h:63:
+#define RTC8564_CTRL2_AF		(1<<3)
                         		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#552: FILE: drivers/i2c/chips/rtc8564.h:63:
+#define RTC8564_CTRL2_AF		(1<<3)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#553: FILE: drivers/i2c/chips/rtc8564.h:64:
+#define RTC8564_CTRL2_TI_TP		(1<<4)
                            		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#553: FILE: drivers/i2c/chips/rtc8564.h:64:
+#define RTC8564_CTRL2_TI_TP		(1<<4)

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#584: FILE: drivers/i2c/chips/Kconfig:233:
+config SENSORS_RTC8564
+	tristate "Epson 8564 RTC chip"
+	depends on I2C && EXPERIMENTAL
+	select I2C_SENSOR
+	help
+	  If you say yes here you get support for the Epson 8564 RTC chip.
+
+	  This driver can also be built as a module.  If so, the module
+	  will be called i2c-rtc8564.
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000284728.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 30 warnings, 33 checks, 495 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000284728.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
