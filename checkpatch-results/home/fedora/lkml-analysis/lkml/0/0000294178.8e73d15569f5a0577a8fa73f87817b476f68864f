WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
o This patch has the changes required for attribute groups and misc. routines.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#78: FILE: fs/sysfs/sysfs.h:10:
+extern int sysfs_add_file(struct dentry *, const struct attribute *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#78: FILE: fs/sysfs/sysfs.h:10:
+extern int sysfs_add_file(struct dentry *, const struct attribute *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct attribute *' should also have an identifier name
#78: FILE: fs/sysfs/sysfs.h:10:
+extern int sysfs_add_file(struct dentry *, const struct attribute *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#78: FILE: fs/sysfs/sysfs.h:10:
+extern int sysfs_add_file(struct dentry *, const struct attribute *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#84: FILE: fs/sysfs/sysfs.h:16:
+extern loff_t sysfs_dir_lseek(struct file *, loff_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#84: FILE: fs/sysfs/sysfs.h:16:
+extern loff_t sysfs_dir_lseek(struct file *, loff_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#84: FILE: fs/sysfs/sysfs.h:16:
+extern loff_t sysfs_dir_lseek(struct file *, loff_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#84: FILE: fs/sysfs/sysfs.h:16:
+extern loff_t sysfs_dir_lseek(struct file *, loff_t, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#85: FILE: fs/sysfs/sysfs.h:17:
+extern int sysfs_readdir(struct file *, void *, filldir_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#85: FILE: fs/sysfs/sysfs.h:17:
+extern int sysfs_readdir(struct file *, void *, filldir_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#85: FILE: fs/sysfs/sysfs.h:17:
+extern int sysfs_readdir(struct file *, void *, filldir_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'filldir_t' should also have an identifier name
#85: FILE: fs/sysfs/sysfs.h:17:
+extern int sysfs_readdir(struct file *, void *, filldir_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#86: FILE: fs/sysfs/sysfs.h:18:
+extern void sysfs_umount_begin(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#86: FILE: fs/sysfs/sysfs.h:18:
+extern void sysfs_umount_begin(struct super_block *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#87: FILE: fs/sysfs/sysfs.h:19:
+extern char * sysfs_get_name(struct sysfs_dirent *);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#87: FILE: fs/sysfs/sysfs.h:19:
+extern char * sysfs_get_name(struct sysfs_dirent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysfs_dirent *' should also have an identifier name
#87: FILE: fs/sysfs/sysfs.h:19:
+extern char * sysfs_get_name(struct sysfs_dirent *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#88: FILE: fs/sysfs/sysfs.h:20:
+extern struct dentry * sysfs_lookup(struct inode *, struct dentry *, struct nameidata *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#88: FILE: fs/sysfs/sysfs.h:20:
+extern struct dentry * sysfs_lookup(struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#88: FILE: fs/sysfs/sysfs.h:20:
+extern struct dentry * sysfs_lookup(struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#88: FILE: fs/sysfs/sysfs.h:20:
+extern struct dentry * sysfs_lookup(struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#88: FILE: fs/sysfs/sysfs.h:20:
+extern struct dentry * sysfs_lookup(struct inode *, struct dentry *, struct nameidata *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#89: FILE: fs/sysfs/sysfs.h:21:
+extern int sysfs_symlink(struct inode * dir, struct dentry *dentry, const char * symname);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#89: FILE: fs/sysfs/sysfs.h:21:
+extern int sysfs_symlink(struct inode * dir, struct dentry *dentry, const char * symname);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#89: FILE: fs/sysfs/sysfs.h:21:
+extern int sysfs_symlink(struct inode * dir, struct dentry *dentry, const char * symname);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#91: FILE: fs/sysfs/sysfs.h:23:
+extern struct file_operations sysfs_file_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#92: FILE: fs/sysfs/sysfs.h:24:
+extern struct file_operations bin_fops;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#93: FILE: fs/sysfs/sysfs.h:25:
+extern struct inode_operations sysfs_dir_inode_operations;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#94: FILE: fs/sysfs/sysfs.h:26:
+extern struct file_operations sysfs_dir_operations;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#96: FILE: fs/sysfs/sysfs.h:28:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#97: FILE: fs/sysfs/sysfs.h:29:
+static inline $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#98: FILE: fs/sysfs/sysfs.h:30:
+struct sysfs_dirent * sysfs_new_dirent(struct sysfs_dirent * p, void * e, int t)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#98: FILE: fs/sysfs/sysfs.h:30:
+struct sysfs_dirent * sysfs_new_dirent(struct sysfs_dirent * p, void * e, int t)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#98: FILE: fs/sysfs/sysfs.h:30:
+struct sysfs_dirent * sysfs_new_dirent(struct sysfs_dirent * p, void * e, int t)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#100: FILE: fs/sysfs/sysfs.h:32:
+	struct sysfs_dirent * sd;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#116: FILE: fs/sysfs/sysfs.h:48:
+static inline struct sysfs_dirent * sysfs_get(struct sysfs_dirent * sd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#116: FILE: fs/sysfs/sysfs.h:48:
+static inline struct sysfs_dirent * sysfs_get(struct sysfs_dirent * sd)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#119: FILE: fs/sysfs/sysfs.h:51:
+^I^IWARN_ON(!atomic_read(&sd->s_count)); $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#125: FILE: fs/sysfs/sysfs.h:57:
+static inline void sysfs_put(struct sysfs_dirent * sd)

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#129: FILE: fs/sysfs/sysfs.h:61:
+			char ** link_names = sd->s_element;

WARNING:LINE_SPACING: Missing a blank line after declarations
#130: FILE: fs/sysfs/sysfs.h:62:
+			char ** link_names = sd->s_element;
+			kfree(link_names[0]);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#138: FILE: fs/sysfs/sysfs.h:70:
+static inline $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#139: FILE: fs/sysfs/sysfs.h:71:
+void sysfs_remove_dirent(struct sysfs_dirent * parent_sd, const char * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#139: FILE: fs/sysfs/sysfs.h:71:
+void sysfs_remove_dirent(struct sysfs_dirent * parent_sd, const char * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#141: FILE: fs/sysfs/sysfs.h:73:
+	struct list_head * tmp;

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#144: FILE: fs/sysfs/sysfs.h:76:
+	while (tmp != & parent_sd->s_children) {
 	              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#145: FILE: fs/sysfs/sysfs.h:77:
+		struct sysfs_dirent * sd;

WARNING:LINE_SPACING: Missing a blank line after declarations
#146: FILE: fs/sysfs/sysfs.h:78:
+		struct sysfs_dirent * sd;
+		sd = list_entry(tmp, struct sysfs_dirent, s_sibling);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000294178.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 21 warnings, 8 checks, 96 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000294178.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
