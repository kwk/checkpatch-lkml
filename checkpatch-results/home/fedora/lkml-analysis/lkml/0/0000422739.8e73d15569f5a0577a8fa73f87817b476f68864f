WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#55: 
diff -urN linux-2.5.43-base/include/linux/list.h linux-2.5.43-list_rcu/include/linux/list.h

ERROR:TRAILING_WHITESPACE: trailing whitespace
#70: FILE: include/linux/list.h:75:
+ * Insert a new entry between two known consecutive entries. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#75: FILE: include/linux/list.h:80:
+static __inline__ void __list_add_rcu(struct list_head * new,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INLINE: plain inline is preferred over __inline__
#75: FILE: include/linux/list.h:80:
+static __inline__ void __list_add_rcu(struct list_head * new,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#76: FILE: include/linux/list.h:81:
+static __inline__ void __list_add_rcu(struct list_head * new,
+	struct list_head * prev,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#76: FILE: include/linux/list.h:81:
+	struct list_head * prev,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#77: FILE: include/linux/list.h:82:
+	struct list_head * next)

WARNING:MEMORY_BARRIER: memory barrier without comment
#81: FILE: include/linux/list.h:86:
+	wmb();

WARNING:INLINE: plain inline is preferred over __inline__
#94: FILE: include/linux/list.h:99:
+static __inline__ void list_add_rcu(struct list_head *new, struct list_head *head)

WARNING:INLINE: plain inline is preferred over __inline__
#107: FILE: include/linux/list.h:112:
+static __inline__ void list_add_tail_rcu(struct list_head *new, struct list_head *head)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#120: FILE: include/linux/list.h:140:
 }
+/**

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#123: FILE: include/linux/list.h:143:
+ * Note: list_empty on entry does not return true after this, $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#143: FILE: include/linux/list.h:303:
+#define list_for_each_rcu(pos, head) \
+	for (pos = (head)->next, prefetch(pos->next); pos != (head); \
+        	pos = pos->next, ({ read_barrier_depends(); 0;}), prefetch(pos->next))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#143: FILE: include/linux/list.h:303:
+#define list_for_each_rcu(pos, head) \
+	for (pos = (head)->next, prefetch(pos->next); pos != (head); \
+        	pos = pos->next, ({ read_barrier_depends(); 0;}), prefetch(pos->next))

ERROR:CODE_INDENT: code indent should use tabs where possible
#145: FILE: include/linux/list.h:305:
+        ^Ipos = pos->next, ({ read_barrier_depends(); 0;}), prefetch(pos->next))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#145: FILE: include/linux/list.h:305:
+        ^Ipos = pos->next, ({ read_barrier_depends(); 0;}), prefetch(pos->next))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: include/linux/list.h:305:
+        ^Ipos = pos->next, ({ read_barrier_depends(); 0;}), prefetch(pos->next))$

ERROR:SPACING: space required after that ';' (ctx:VxV)
#145: FILE: include/linux/list.h:305:
+        	pos = pos->next, ({ read_barrier_depends(); 0;}), prefetch(pos->next))
         	                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#146: FILE: include/linux/list.h:306:
+        ^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#146: FILE: include/linux/list.h:306:
+        ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#146: FILE: include/linux/list.h:306:
+        ^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: include/linux/list.h:306:
+        ^I$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#147: FILE: include/linux/list.h:307:
+#define __list_for_each_rcu(pos, head) \
+	for (pos = (head)->next; pos != (head); \
+        	pos = pos->next, ({ read_barrier_depends(); 0;}))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#147: FILE: include/linux/list.h:307:
+#define __list_for_each_rcu(pos, head) \
+	for (pos = (head)->next; pos != (head); \
+        	pos = pos->next, ({ read_barrier_depends(); 0;}))

ERROR:CODE_INDENT: code indent should use tabs where possible
#149: FILE: include/linux/list.h:309:
+        ^Ipos = pos->next, ({ read_barrier_depends(); 0;}))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#149: FILE: include/linux/list.h:309:
+        ^Ipos = pos->next, ({ read_barrier_depends(); 0;}))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: include/linux/list.h:309:
+        ^Ipos = pos->next, ({ read_barrier_depends(); 0;}))$

ERROR:SPACING: space required after that ';' (ctx:VxV)
#149: FILE: include/linux/list.h:309:
+        	pos = pos->next, ({ read_barrier_depends(); 0;}))
         	                                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#150: FILE: include/linux/list.h:310:
+        ^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#150: FILE: include/linux/list.h:310:
+        ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#150: FILE: include/linux/list.h:310:
+        ^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: include/linux/list.h:310:
+        ^I$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#158: FILE: include/linux/list.h:318:
+#define list_for_each_safe_rcu(pos, n, head) \
+	for (pos = (head)->next, n = pos->next; pos != (head); \
+		pos = n, ({ read_barrier_depends(); 0;}), n = pos->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#158: FILE: include/linux/list.h:318:
+#define list_for_each_safe_rcu(pos, n, head) \
+	for (pos = (head)->next, n = pos->next; pos != (head); \
+		pos = n, ({ read_barrier_depends(); 0;}), n = pos->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#158: FILE: include/linux/list.h:318:
+#define list_for_each_safe_rcu(pos, n, head) \
+	for (pos = (head)->next, n = pos->next; pos != (head); \
+		pos = n, ({ read_barrier_depends(); 0;}), n = pos->next)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#160: FILE: include/linux/list.h:320:
+		pos = n, ({ read_barrier_depends(); 0;}), n = pos->next)
 		                                     ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000422739.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 13 warnings, 9 checks, 103 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000422739.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
