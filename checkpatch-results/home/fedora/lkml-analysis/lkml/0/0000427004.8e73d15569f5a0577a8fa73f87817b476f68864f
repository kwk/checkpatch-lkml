WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#70: 
diff -urN -X /home/vamsi/.dontdiff /usr/src/40-pure/arch/i386/Config.help 40-kprobes/arch/i386/Config.help

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: arch/i386/kernel/entry.S:414:
+^Itestl %eax,%eax $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#129: FILE: arch/i386/kernel/entry.S:436:
+^Itestl %eax,%eax $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#139: FILE: arch/i386/kernel/kprobes.c:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#139: FILE: arch/i386/kernel/kprobes.c:1:
+/* 

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#162: FILE: arch/i386/kernel/kprobes.c:24:
+	switch(opcode) {
+		case 0xfa: 	/* cli */
+		case 0xfb:	/* sti */
+		case 0xcf:	/* iret/iretd */
+		case 0x9d:	/* popf/popfd */

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#162: FILE: arch/i386/kernel/kprobes.c:24:
+	switch(opcode) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#163: FILE: arch/i386/kernel/kprobes.c:25:
+^I^Icase 0xfa: ^I/* cli */$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#186: FILE: arch/i386/kernel/kprobes.c:48:
+	u8 *addr = (u8 *)(regs->eip-1);
 	                           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#194: FILE: arch/i386/kernel/kprobes.c:56:
+                   Disarm the probe we just hit, and ignore it. */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#194: FILE: arch/i386/kernel/kprobes.c:56:
+		/* We *are* holding lock here, so this is safe.
+                   Disarm the probe we just hit, and ignore it. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#194: FILE: arch/i386/kernel/kprobes.c:56:
+                   Disarm the probe we just hit, and ignore it. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#205: FILE: arch/i386/kernel/kprobes.c:67:
+^Ip = get_kprobe(addr); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: arch/i386/kernel/kprobes.c:79:
+^Ikprobe_saved_eflags = kprobe_old_eflags $

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#218: FILE: arch/i386/kernel/kprobes.c:80:
+	kprobe_saved_eflags = kprobe_old_eflags 
+		= (regs->eflags & (TF_MASK|IF_MASK));

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#218: FILE: arch/i386/kernel/kprobes.c:80:
+		= (regs->eflags & (TF_MASK|IF_MASK));
 		                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#242: FILE: arch/i386/kernel/kprobes.c:104:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#272: FILE: arch/i386/kernel/kprobes.c:134:
+        /*$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#287: FILE: arch/i386/kernel/kprobes.c:149:
+	if (current_kprobe->fault_handler
+	    && current_kprobe->fault_handler(current_kprobe, regs, trapnr))

ERROR:SPACING: space prohibited after that '&&' (ctx:ExW)
#287: FILE: arch/i386/kernel/kprobes.c:149:
+	    && current_kprobe->fault_handler(current_kprobe, regs, trapnr))
 	    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#292: FILE: arch/i386/kernel/kprobes.c:154:
+        ^Iregs->eflags |= kprobe_old_eflags;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#292: FILE: arch/i386/kernel/kprobes.c:154:
+        ^Iregs->eflags |= kprobe_old_eflags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: arch/i386/kernel/kprobes.c:154:
+        ^Iregs->eflags |= kprobe_old_eflags;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#333: FILE: arch/i386/kernel/traps.c:418:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#348: FILE: arch/i386/kernel/traps.c:526:
+           disabled.  Normal trap handlers don't. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#348: FILE: arch/i386/kernel/traps.c:526:
+	/* This is an interrupt gate, because kprobes wants interrupts
+           disabled.  Normal trap handlers don't. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#348: FILE: arch/i386/kernel/traps.c:526:
+           disabled.  Normal trap handlers don't. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#362: FILE: arch/i386/kernel/traps.c:554:
+asmlinkage int do_debug(struct pt_regs * regs, long error_code)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#412: FILE: arch/i386/kernel/traps.c:885:
+	_set_gate(idt_table+1,14,3,&debug); /* debug trap for kprobes */
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#412: FILE: arch/i386/kernel/traps.c:885:
+	_set_gate(idt_table+1,14,3,&debug); /* debug trap for kprobes */
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#412: FILE: arch/i386/kernel/traps.c:885:
+	_set_gate(idt_table+1,14,3,&debug); /* debug trap for kprobes */
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#412: FILE: arch/i386/kernel/traps.c:885:
+	_set_gate(idt_table+1,14,3,&debug); /* debug trap for kprobes */
 	                          ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#412: FILE: arch/i386/kernel/traps.c:885:
+	_set_gate(idt_table+1,14,3,&debug); /* debug trap for kprobes */
 	                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#415: FILE: arch/i386/kernel/traps.c:887:
+	_set_gate(idt_table+3,14,3,&int3); /* int3-5 can be called from all */
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#415: FILE: arch/i386/kernel/traps.c:887:
+	_set_gate(idt_table+3,14,3,&int3); /* int3-5 can be called from all */
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#415: FILE: arch/i386/kernel/traps.c:887:
+	_set_gate(idt_table+3,14,3,&int3); /* int3-5 can be called from all */
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#415: FILE: arch/i386/kernel/traps.c:887:
+	_set_gate(idt_table+3,14,3,&int3); /* int3-5 can be called from all */
 	                          ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#415: FILE: arch/i386/kernel/traps.c:887:
+	_set_gate(idt_table+3,14,3,&int3); /* int3-5 can be called from all */
 	                           ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#444: FILE: include/asm-i386/kprobes.h:1:
+#ifndef _ASM_KPROBES_H

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#448: FILE: include/asm-i386/kprobes.h:5:
+ *  ^IVamsi Krishna S <vamsi_krishna@in.ibm.com>, July, 2002$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#469: FILE: include/asm-i386/kprobes.h:26:
+extern int kprobe_fault_handler(struct pt_regs *regs, int trapnr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#470: FILE: include/asm-i386/kprobes.h:27:
+extern int post_kprobe_handler(struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#471: FILE: include/asm-i386/kprobes.h:28:
+extern int kprobe_handler(struct pt_regs *regs);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#482: FILE: include/linux/kprobes.h:1:
+#ifndef _LINUX_KPROBES_H

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#512: FILE: include/linux/kprobes.h:31:
+	  * Return 1 if it handled fault, otherwise kernel will see it. */

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#538: FILE: include/linux/kprobes.h:57:
+static inline int register_kprobe(struct kprobe *p) { return -ENOSYS; }

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#546: FILE: kernel/kprobes.c:1:
+/* Support for kernel probes.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#547: FILE: kernel/kprobes.c:2:
+/* Support for kernel probes.
+   (C) 2002 Vamsi Krishna S <vamsi_krishna@in.ibm.com>.

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#554: FILE: kernel/kprobes.c:9:
+#include <asm/cacheflush.h>

CHECK:BIT_MACRO: Prefer using the BIT macro
#558: FILE: kernel/kprobes.c:13:
+#define KPROBE_TABLE_SIZE (1 << KPROBE_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#562: FILE: kernel/kprobes.c:17:
+unsigned int kprobe_cpu = NR_CPUS;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#574: FILE: kernel/kprobes.c:29:
+	kprobe_cpu = NR_CPUS;

WARNING:LINE_SPACING: Missing a blank line after declarations
#586: FILE: kernel/kprobes.c:41:
+		struct kprobe *p = list_entry(tmp, struct kprobe, list);
+		if (p->addr == addr)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#631: FILE: kernel/kprobes.c:86:
+__initcall(init_kprobes);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#633: FILE: kernel/kprobes.c:88:
+EXPORT_SYMBOL_GPL(register_kprobe);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#634: FILE: kernel/kprobes.c:89:
+EXPORT_SYMBOL_GPL(unregister_kprobe);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000427004.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 23 errors, 23 warnings, 10 checks, 530 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000427004.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
