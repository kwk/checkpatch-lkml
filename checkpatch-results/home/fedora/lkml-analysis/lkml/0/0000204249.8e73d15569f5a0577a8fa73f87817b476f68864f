WARNING:TYPO_SPELLING: 'fo' may be misspelled - perhaps 'of'?
#25: 
This adds acl support fo nfs clients via the NFSACL protocol extension, by
                      ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
implementing the getxattr, listxattr, setxattr, and removexattr iops for the

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#72: FILE: fs/nfs/dir.c:80:
+struct inode_operations nfs3_dir_inode_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#104: FILE: fs/nfs/file.c:71:
+struct inode_operations nfs3_file_inode_operations = {

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#128: FILE: fs/nfs/inode.c:109:
+static struct rpc_version *	nfsacl_version[] = {

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(nfsacl_version)
#135: FILE: fs/nfs/inode.c:116:
+	.nrvers =		sizeof(nfsacl_version) / sizeof(nfsacl_version[0]),

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#149: FILE: fs/nfs/inode.c:184:
+	if ((rpc = server->client_acl) != NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#182: FILE: fs/nfs/inode.c:662:
+struct inode_operations nfs3_special_inode_operations = {

CHECK:BRACES: Unbalanced braces around else statement
#210: FILE: fs/nfs/inode.c:726:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'rpc_ops->special_inode_ops'
#213: FILE: fs/nfs/inode.c:729:
+				inode->i_op = NFS_SB(sb)->rpc_ops->
+						       special_inode_ops;

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "server->client_acl"
#224: FILE: fs/nfs/inode.c:1509:
+	if (server->client_acl != NULL && !IS_ERR(server->client_acl))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#287: FILE: fs/nfs/nfs3proc.c:743:
+	switch (type) {
+		case ACL_TYPE_ACCESS:
[...]
+		case ACL_TYPE_DEFAULT:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#289: FILE: fs/nfs/nfs3proc.c:745:
+			args.mask = NFS3_ACLCNT|NFS3_ACL;
 			                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#295: FILE: fs/nfs/nfs3proc.c:751:
+			args.mask = NFS3_DFACLCNT|NFS3_DFACL;
 			                         ^

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#313: FILE: fs/nfs/nfs3proc.c:769:
+		if (status == -ENOSYS || status == -EOPNOTSUPP) {

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:BRACES: braces {} should be used on all arms of this statement
#313: FILE: fs/nfs/nfs3proc.c:769:
+		if (status == -ENOSYS || status == -EOPNOTSUPP) {
[...]
+		} else if (status == -ENOTSUPP)
[...]

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#317: FILE: fs/nfs/nfs3proc.c:773:
+		} else if (status == -ENOTSUPP)

ENOTSUPP is not a standard error code and should be avoided in new patches.
EOPNOTSUPP should be used instead.

See: https://lore.kernel.org/netdev/20200510182252.GA411829@lunn.ch/

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#334: FILE: fs/nfs/nfs3proc.c:790:
+	switch(type) {
+		case ACL_TYPE_ACCESS:
[...]
+		case ACL_TYPE_DEFAULT:

ERROR:SPACING: space required before the open parenthesis '('
#334: FILE: fs/nfs/nfs3proc.c:790:
+	switch(type) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#375: FILE: fs/nfs/nfs3proc.c:831:
+	/* We are doing this here, because XDR marshalling can only
+	   return -ENOMEM. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#375: FILE: fs/nfs/nfs3proc.c:831:
+	   return -ENOMEM. */

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#398: FILE: fs/nfs/nfs3proc.c:854:
+		if (status == -ENOSYS || status == -EOPNOTSUPP) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#398: FILE: fs/nfs/nfs3proc.c:854:
+		if (status == -ENOSYS || status == -EOPNOTSUPP) {
[...]
+		} else if (status == -ENOTSUPP)
[...]

WARNING:SPLIT_STRING: quoted string split across lines
#400: FILE: fs/nfs/nfs3proc.c:856:
+			dprintk("NFS_ACL SETACL RPC not supported"
+				"(will not retry)\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#403: FILE: fs/nfs/nfs3proc.c:859:
+		} else if (status == -ENOTSUPP)

WARNING:LINE_SPACING: Missing a blank line after declarations
#407: FILE: fs/nfs/nfs3proc.c:863:
+		struct rpc_cred **cred = &NFS_I(inode)->cache_access.cred;
+		if (*cred) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:REPEATED_WORD: Possible repeated word: 'mode'
#414: FILE: fs/nfs/nfs3proc.c:870:
+			 * Updating the access acl modifies the file mode
+			 * mode permission bits, so update the icache.

WARNING:LINE_SPACING: Missing a blank line after declarations
#418: FILE: fs/nfs/nfs3proc.c:874:
+			int error = posix_acl_equiv_mode(acl, &mode);
+			if (error >= 0)

CHECK:BRACES: braces {} should be used on all arms of this statement
#442: FILE: fs/nfs/nfs3proc.c:898:
+	if (S_ISDIR(inode->i_mode)) {
[...]
+	} else if (type != ACL_TYPE_ACCESS)
[...]

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#443: FILE: fs/nfs/nfs3proc.c:899:
+		switch(type) {
+			case ACL_TYPE_ACCESS:
[...]
+			case ACL_TYPE_DEFAULT:
[...]
+			default:

ERROR:SPACING: space required before the open parenthesis '('
#443: FILE: fs/nfs/nfs3proc.c:899:
+		switch(type) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#445: FILE: fs/nfs/nfs3proc.c:901:
+				alloc = dfacl = NFS_PROTO(inode)->

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#453: FILE: fs/nfs/nfs3proc.c:909:
+				alloc = acl = NFS_PROTO(inode)->

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#462: FILE: fs/nfs/nfs3proc.c:918:
+	} else if (type != ACL_TYPE_ACCESS)
+			return -EINVAL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!acl"
#465: FILE: fs/nfs/nfs3proc.c:921:
+	if (acl == NULL) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#466: FILE: fs/nfs/nfs3proc.c:922:
+		alloc = acl = posix_acl_from_mode(inode->i_mode, GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#519: FILE: fs/nfs/nfs3xdr.c:66:
+#define NFS3_getaclargs_sz	(NFS3_fh_sz+1)
                           	           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#520: FILE: fs/nfs/nfs3xdr.c:67:
+#define NFS3_setaclargs_sz	(NFS3_fh_sz+1+2*(2+5*3))
                           	           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#520: FILE: fs/nfs/nfs3xdr.c:67:
+#define NFS3_setaclargs_sz	(NFS3_fh_sz+1+2*(2+5*3))
                           	             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#520: FILE: fs/nfs/nfs3xdr.c:67:
+#define NFS3_setaclargs_sz	(NFS3_fh_sz+1+2*(2+5*3))
                           	               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#520: FILE: fs/nfs/nfs3xdr.c:67:
+#define NFS3_setaclargs_sz	(NFS3_fh_sz+1+2*(2+5*3))
                           	                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#520: FILE: fs/nfs/nfs3xdr.c:67:
+#define NFS3_setaclargs_sz	(NFS3_fh_sz+1+2*(2+5*3))
                           	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#528: FILE: fs/nfs/nfs3xdr.c:84:
+#define NFS3_getaclres_sz	(1+NFS3_post_op_attr_sz+1+2*(2+5*3))
                          	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#528: FILE: fs/nfs/nfs3xdr.c:84:
+#define NFS3_getaclres_sz	(1+NFS3_post_op_attr_sz+1+2*(2+5*3))
                          	                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#528: FILE: fs/nfs/nfs3xdr.c:84:
+#define NFS3_getaclres_sz	(1+NFS3_post_op_attr_sz+1+2*(2+5*3))
                          	                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#528: FILE: fs/nfs/nfs3xdr.c:84:
+#define NFS3_getaclres_sz	(1+NFS3_post_op_attr_sz+1+2*(2+5*3))
                          	                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#528: FILE: fs/nfs/nfs3xdr.c:84:
+#define NFS3_getaclres_sz	(1+NFS3_post_op_attr_sz+1+2*(2+5*3))
                          	                              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#528: FILE: fs/nfs/nfs3xdr.c:84:
+#define NFS3_getaclres_sz	(1+NFS3_post_op_attr_sz+1+2*(2+5*3))
                          	                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#529: FILE: fs/nfs/nfs3xdr.c:85:
+#define NFS3_setaclres_sz	(1+NFS3_post_op_attr_sz)
                          	  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#569: FILE: fs/nfs/nfs3xdr.c:667:
+                   struct nfs3_setaclargs *args)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#569: FILE: fs/nfs/nfs3xdr.c:667:
+nfs3_xdr_setaclargs(struct rpc_rqst *req, u32 *p,
+                   struct nfs3_setaclargs *args)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#569: FILE: fs/nfs/nfs3xdr.c:667:
+                   struct nfs3_setaclargs *args)$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#572: FILE: fs/nfs/nfs3xdr.c:670:
+	unsigned int base, len_in_head, len = nfsacl_size(

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#632: FILE: fs/nfs/nfs3xdr.c:1074:
+	if (res->mask & ~(NFS3_ACL|NFS3_ACLCNT|NFS3_DFACL|NFS3_DFACLCNT))
 	                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#632: FILE: fs/nfs/nfs3xdr.c:1074:
+	if (res->mask & ~(NFS3_ACL|NFS3_ACLCNT|NFS3_DFACL|NFS3_DFACLCNT))
 	                                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#632: FILE: fs/nfs/nfs3xdr.c:1074:
+	if (res->mask & ~(NFS3_ACL|NFS3_ACLCNT|NFS3_DFACL|NFS3_DFACLCNT))
 	                                                 ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#673: FILE: fs/nfs/nfs3xdr.c:1151:
+  PROC(GETACL,^I^Igetaclargs,^Igetaclres, 1),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#674: FILE: fs/nfs/nfs3xdr.c:1152:
+  PROC(SETACL,^I^Isetaclargs,^Isetaclres, 0),$

CHECK:SPACING: space preferred before that '/' (ctx:VxE)
#679: FILE: fs/nfs/nfs3xdr.c:1157:
+	.nrprocs		= sizeof(nfs3_acl_procedures)/
 	        		                             ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#689: FILE: fs/nfs/xattr.c:1:
+#include <linux/fs.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#700: FILE: fs/nfs/xattr.c:12:
+	int pos=0, len=0;
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#700: FILE: fs/nfs/xattr.c:12:
+	int pos=0, len=0;
 	              ^

ERROR:SPACING: space required before the open parenthesis '('
#708: FILE: fs/nfs/xattr.c:20:
+		} while(0)

CHECK:BRACES: braces {} should be used on all arms of this statement
#750: FILE: fs/nfs/xattr.c:62:
+	if (IS_ERR(acl))
[...]
+	else if (acl) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#758: FILE: fs/nfs/xattr.c:70:
+	} else

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#811: FILE: include/linux/nfs_fs.h:288:
+extern struct inode_operations nfs3_special_inode_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#820: FILE: include/linux/nfs_fs.h:323:
+extern struct inode_operations nfs3_file_inode_operations;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#831: FILE: include/linux/nfs_fs.h:342:
+extern ssize_t nfs_listxattr(struct dentry *, char *, size_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#832: FILE: include/linux/nfs_fs.h:343:
+extern ssize_t nfs_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#832: FILE: include/linux/nfs_fs.h:343:
+extern ssize_t nfs_getxattr(struct dentry *, const char *, void *, size_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#832: FILE: include/linux/nfs_fs.h:343:
+extern ssize_t nfs_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#832: FILE: include/linux/nfs_fs.h:343:
+extern ssize_t nfs_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#832: FILE: include/linux/nfs_fs.h:343:
+extern ssize_t nfs_getxattr(struct dentry *, const char *, void *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#833: FILE: include/linux/nfs_fs.h:344:
+extern int nfs_setxattr(struct dentry *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#833: FILE: include/linux/nfs_fs.h:344:
+extern int nfs_setxattr(struct dentry *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#833: FILE: include/linux/nfs_fs.h:344:
+extern int nfs_setxattr(struct dentry *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#833: FILE: include/linux/nfs_fs.h:344:
+extern int nfs_setxattr(struct dentry *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#833: FILE: include/linux/nfs_fs.h:344:
+extern int nfs_setxattr(struct dentry *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#833: FILE: include/linux/nfs_fs.h:344:
+extern int nfs_setxattr(struct dentry *, const char *,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#835: FILE: include/linux/nfs_fs.h:346:
+extern int nfs_removexattr (struct dentry *, const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#835: FILE: include/linux/nfs_fs.h:346:
+extern int nfs_removexattr (struct dentry *, const char *name);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#835: FILE: include/linux/nfs_fs.h:346:
+extern int nfs_removexattr (struct dentry *, const char *name);

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#851: FILE: include/linux/nfs_fs.h:368:
+extern struct inode_operations nfs3_dir_inode_operations;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#864: FILE: include/linux/nfs_fs_sb.h:14:
+	struct rpc_clnt *	client_acl;	/* ACL RPC client handle */

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#898: FILE: include/linux/nfs_xdr.h:359:
+	struct nfs_fh *		fh;

ERROR:POINTER_LOCATION: "foo **		bar" should be "foo **bar"
#900: FILE: include/linux/nfs_xdr.h:361:
+	struct page **		pages;

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#904: FILE: include/linux/nfs_xdr.h:365:
+	struct inode *		inode;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#906: FILE: include/linux/nfs_xdr.h:367:
+	struct posix_acl *	acl_access;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#907: FILE: include/linux/nfs_xdr.h:368:
+	struct posix_acl *	acl_default;

ERROR:POINTER_LOCATION: "foo **		bar" should be "foo **bar"
#908: FILE: include/linux/nfs_xdr.h:369:
+	struct page **		pages;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#919: FILE: include/linux/nfs_xdr.h:496:
+	struct nfs_fattr *	fattr;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#923: FILE: include/linux/nfs_xdr.h:500:
+	struct posix_acl *	acl_access;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#924: FILE: include/linux/nfs_xdr.h:501:
+	struct posix_acl *	acl_default;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#934: FILE: include/linux/nfs_xdr.h:692:
+	struct inode_operations *file_inode_ops;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#936: FILE: include/linux/nfs_xdr.h:694:
+	struct inode_operations *special_inode_ops;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#946: FILE: include/linux/nfs_xdr.h:743:
+	int	(*setacl)(struct inode *, int, struct posix_acl *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#946: FILE: include/linux/nfs_xdr.h:743:
+	int	(*setacl)(struct inode *, int, struct posix_acl *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct posix_acl *' should also have an identifier name
#946: FILE: include/linux/nfs_xdr.h:743:
+	int	(*setacl)(struct inode *, int, struct posix_acl *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#947: FILE: include/linux/nfs_xdr.h:744:
+	int	(*setacls)(struct inode *, struct posix_acl *, struct posix_acl *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct posix_acl *' should also have an identifier name
#947: FILE: include/linux/nfs_xdr.h:744:
+	int	(*setacls)(struct inode *, struct posix_acl *, struct posix_acl *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct posix_acl *' should also have an identifier name
#947: FILE: include/linux/nfs_xdr.h:744:
+	int	(*setacls)(struct inode *, struct posix_acl *, struct posix_acl *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000204249.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 44 warnings, 36 checks, 856 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000204249.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
