WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#50: 
o Fixed up a miscalculation in the bitmap size as pointed out by Mike Kravetz

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#172: 
loss. The results are compiler dependant and there are variances of 1-2%
                               ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#242: FILE: fs/buffer.c:1138:
+^Ipage = find_or_create_page(inode->i_mapping, index, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#243: FILE: fs/buffer.c:1139:
+	page = find_or_create_page(inode->i_mapping, index, 
+					GFP_NOFS | __GFP_USERRCLM);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#252: FILE: fs/buffer.c:3060:
+^Istruct buffer_head *ret = kmem_cache_alloc(bh_cachep, $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#253: FILE: fs/buffer.c:3061:
+						gfp_flags|__GFP_KERNRCLM);
 						         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#265: FILE: fs/dcache.c:722:
+^Identry = kmem_cache_alloc(dentry_cache, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#266: FILE: fs/dcache.c:723:
+^I^I^I^IGFP_KERNEL|__GFP_KERNRCLM); $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#266: FILE: fs/dcache.c:723:
+	dentry = kmem_cache_alloc(dentry_cache, 
+				GFP_KERNEL|__GFP_KERNRCLM); 

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#266: FILE: fs/dcache.c:723:
+				GFP_KERNEL|__GFP_KERNRCLM); 
 				          ^

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#278: FILE: fs/ext2/super.c:140:
+	ei = (struct ext2_inode_info *)kmem_cache_alloc(ext2_inode_cachep, SLAB_KERNEL|__GFP_KERNRCLM);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#278: FILE: fs/ext2/super.c:140:
+	ei = (struct ext2_inode_info *)kmem_cache_alloc(ext2_inode_cachep, SLAB_KERNEL|__GFP_KERNRCLM);
 	                                                                              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#290: FILE: fs/ext3/super.c:443:
+	ei = kmem_cache_alloc(ext3_inode_cachep, SLAB_NOFS|__GFP_KERNRCLM);
 	                                                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#302: FILE: fs/ntfs/inode.c:321:
+			SLAB_NOFS|__GFP_KERNRCLM);
 			         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#311: FILE: fs/ntfs/inode.c:346:
+^Ini = (ntfs_inode *)kmem_cache_alloc(ntfs_inode_cache, $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#312: FILE: fs/ntfs/inode.c:347:
+					SLAB_NOFS|__GFP_KERNRCLM);
 					         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#335: FILE: include/linux/gfp.h:53:
+			__GFP_NOMEMALLOC|__GFP_KERNRCLM|__GFP_USERRCLM)
 			                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#335: FILE: include/linux/gfp.h:53:
+			__GFP_NOMEMALLOC|__GFP_KERNRCLM|__GFP_USERRCLM)
 			                               ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#343: FILE: include/linux/gfp.h:59:
+#define GFP_USER	(__GFP_WAIT | __GFP_IO | __GFP_FS | __GFP_USERRCLM )

CHECK:LINE_SPACING: Please don't use multiple blank lines
#383: FILE: include/linux/mmzone.h:67:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#405: FILE: include/linux/mmzone.h:158:
+ ^I/*$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#405: FILE: include/linux/mmzone.h:158:
+ ^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#405: FILE: include/linux/mmzone.h:158:
+ ^I/*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#406: FILE: include/linux/mmzone.h:159:
+ ^I * The map tracks what each 2^MAX_ORDER-1 sized block is being used for$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#406: FILE: include/linux/mmzone.h:159:
+ ^I * The map tracks what each 2^MAX_ORDER-1 sized block is being used for$

ERROR:CODE_INDENT: code indent should use tabs where possible
#409: FILE: include/linux/mmzone.h:162:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#409: FILE: include/linux/mmzone.h:162:
+ ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#410: FILE: include/linux/mmzone.h:163:
+ ^Iunsigned long^I^I*free_area_usemap;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#410: FILE: include/linux/mmzone.h:163:
+ ^Iunsigned long^I^I*free_area_usemap;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#410: FILE: include/linux/mmzone.h:163:
+ ^Iunsigned long^I^I*free_area_usemap;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#411: FILE: include/linux/mmzone.h:164:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#413: FILE: include/linux/mmzone.h:166:
+^I * There are ALLOC_TYPE number of MAX_ORDER free lists. Once a $

ERROR:CODE_INDENT: code indent should use tabs where possible
#417: FILE: include/linux/mmzone.h:170:
+ ^Istruct free_area^Ifree_area_lists[ALLOC_TYPES][MAX_ORDER];$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#417: FILE: include/linux/mmzone.h:170:
+ ^Istruct free_area^Ifree_area_lists[ALLOC_TYPES][MAX_ORDER];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#417: FILE: include/linux/mmzone.h:170:
+ ^Istruct free_area^Ifree_area_lists[ALLOC_TYPES][MAX_ORDER];$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#439: FILE: include/linux/mmzone.h:267:
+#define inc_reserve_count(zone, type) \
+	type == ALLOC_FALLBACK ? zone->fallback_reserve++ : 0

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#439: FILE: include/linux/mmzone.h:267:
+#define inc_reserve_count(zone, type) \
+	type == ALLOC_FALLBACK ? zone->fallback_reserve++ : 0

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#441: FILE: include/linux/mmzone.h:269:
+#define dec_reserve_count(zone, type) \
+	(type == ALLOC_FALLBACK && zone->fallback_reserve) ? \
+		zone->fallback_reserve-- : 0

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'zone' - possible side-effects?
#441: FILE: include/linux/mmzone.h:269:
+#define dec_reserve_count(zone, type) \
+	(type == ALLOC_FALLBACK && zone->fallback_reserve) ? \
+		zone->fallback_reserve-- : 0

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#441: FILE: include/linux/mmzone.h:269:
+#define dec_reserve_count(zone, type) \
+	(type == ALLOC_FALLBACK && zone->fallback_reserve) ? \
+		zone->fallback_reserve-- : 0

ERROR:TRAILING_WHITESPACE: trailing whitespace
#466: FILE: mm/page_alloc.c:79:
+int fallback_allocs[ALLOC_TYPES][ALLOC_TYPES+1] = { $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#466: FILE: mm/page_alloc.c:79:
+int fallback_allocs[ALLOC_TYPES][ALLOC_TYPES+1] = { 
                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#467: FILE: mm/page_alloc.c:80:
+	{ALLOC_KERNNORCLM,ALLOC_FALLBACK,  ALLOC_KERNRCLM,  ALLOC_USERRCLM,-1},
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#467: FILE: mm/page_alloc.c:80:
+	{ALLOC_KERNNORCLM,ALLOC_FALLBACK,  ALLOC_KERNRCLM,  ALLOC_USERRCLM,-1},
 	                                                                  ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#467: FILE: mm/page_alloc.c:80:
+	{ALLOC_KERNNORCLM,ALLOC_FALLBACK,  ALLOC_KERNRCLM,  ALLOC_USERRCLM,-1},
 	                                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#468: FILE: mm/page_alloc.c:81:
+	{ALLOC_KERNRCLM,  ALLOC_FALLBACK,  ALLOC_KERNNORCLM,ALLOC_USERRCLM,-1},
 	                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#468: FILE: mm/page_alloc.c:81:
+	{ALLOC_KERNRCLM,  ALLOC_FALLBACK,  ALLOC_KERNNORCLM,ALLOC_USERRCLM,-1},
 	                                                                  ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#468: FILE: mm/page_alloc.c:81:
+	{ALLOC_KERNRCLM,  ALLOC_FALLBACK,  ALLOC_KERNNORCLM,ALLOC_USERRCLM,-1},
 	                                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#469: FILE: mm/page_alloc.c:82:
+	{ALLOC_USERRCLM,  ALLOC_FALLBACK,  ALLOC_KERNNORCLM,ALLOC_KERNRCLM,-1},
 	                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#469: FILE: mm/page_alloc.c:82:
+	{ALLOC_USERRCLM,  ALLOC_FALLBACK,  ALLOC_KERNNORCLM,ALLOC_KERNRCLM,-1},
 	                                                                  ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#469: FILE: mm/page_alloc.c:82:
+	{ALLOC_USERRCLM,  ALLOC_FALLBACK,  ALLOC_KERNNORCLM,ALLOC_KERNRCLM,-1},
 	                                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#470: FILE: mm/page_alloc.c:83:
+	{ALLOC_FALLBACK,  ALLOC_KERNNORCLM,ALLOC_KERNRCLM,  ALLOC_USERRCLM,-1}
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#470: FILE: mm/page_alloc.c:83:
+	{ALLOC_FALLBACK,  ALLOC_KERNNORCLM,ALLOC_KERNRCLM,  ALLOC_USERRCLM,-1}
 	                                                                  ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#470: FILE: mm/page_alloc.c:83:
+	{ALLOC_FALLBACK,  ALLOC_KERNNORCLM,ALLOC_KERNRCLM,  ALLOC_USERRCLM,-1}
 	                                                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#481: FILE: mm/page_alloc.c:141:
+ * Return what type of page is being allocated from this 2^MAX_ORDER-1 block $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#484: FILE: mm/page_alloc.c:144:
+static inline unsigned int get_pageblock_type(struct zone *zone, struct page *page) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#485: FILE: mm/page_alloc.c:145:
+	int bitidx = (page_to_pfn(page) >> (MAX_ORDER-1)) * BITS_PER_ALLOC_TYPE;
 	                                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#489: FILE: mm/page_alloc.c:149:
+	for (i=1; i < BITS_PER_ALLOC_TYPE; i++) {
 	      ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#489: FILE: mm/page_alloc.c:149:
+	for (i=1; i < BITS_PER_ALLOC_TYPE; i++) {
+		type = (type << 1) | (!!test_bit(bitidx+i, zone->free_area_usemap));
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#490: FILE: mm/page_alloc.c:150:
+		type = (type << 1) | (!!test_bit(bitidx+i, zone->free_area_usemap));
 		                                       ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#495: FILE: mm/page_alloc.c:155:
+		printk("\nBogus type in get_pageblock_type: %u\n", type);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#496: FILE: mm/page_alloc.c:156:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#505: FILE: mm/page_alloc.c:165:
+static inline void set_pageblock_type(struct zone *zone, struct page *page, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#506: FILE: mm/page_alloc.c:166:
+static inline void set_pageblock_type(struct zone *zone, struct page *page, 
+					int type) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#507: FILE: mm/page_alloc.c:167:
+	int bitidx = (page_to_pfn(page) >> (MAX_ORDER-1)) * BITS_PER_ALLOC_TYPE;
 	                                             ^

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#510: FILE: mm/page_alloc.c:170:
+	switch (type) {
+		case ALLOC_KERNRCLM:
[...]
+		case ALLOC_USERRCLM:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#513: FILE: mm/page_alloc.c:173:
+			set_bit(bitidx+1, zone->free_area_usemap);
 			              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#518: FILE: mm/page_alloc.c:178:
+			clear_bit(bitidx+1, zone->free_area_usemap);
 			                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#523: FILE: mm/page_alloc.c:183:
+			set_bit(bitidx+1, zone->free_area_usemap);
 			              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'zone' - possible side-effects?
#533: FILE: mm/page_alloc.c:193:
+#define need_min_fallback_reserve(zone) \
+	(zone->free_pages >> (MAX_ORDER) < zone->fallback_reserve)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#533: FILE: mm/page_alloc.c:193:
+#define need_min_fallback_reserve(zone) \
+	(zone->free_pages >> (MAX_ORDER) < zone->fallback_reserve)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#535: FILE: mm/page_alloc.c:195:
+#define is_min_fallback_reserved(zone) \
+	(zone->fallback_balance < 0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#555: FILE: mm/page_alloc.c:368:
+	freelist = zone->free_area_lists[get_pageblock_type(zone,page)];
 	                                                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#556: FILE: mm/page_alloc.c:369:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#563: FILE: mm/page_alloc.c:374:
+^I^I$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#580: FILE: mm/page_alloc.c:391:
+	if (unlikely(order == MAX_ORDER-1)) zone->fallback_balance++;
 	                               ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#580: FILE: mm/page_alloc.c:391:
+	if (unlikely(order == MAX_ORDER-1)) zone->fallback_balance++;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#598: FILE: mm/page_alloc.c:551:
+static inline struct page* steal_largepage(struct zone *zone, int alloctype) {

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#598: FILE: mm/page_alloc.c:551:
+static inline struct page* steal_largepage(struct zone *zone, int alloctype) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#601: FILE: mm/page_alloc.c:554:
+	int i=0;
 	     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#605: FILE: mm/page_alloc.c:558:
+		area = &(zone->free_area_lists[i][MAX_ORDER-1]);
 		                                           ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_lists[i][MAX_ORDER-1]
#605: FILE: mm/page_alloc.c:558:
+		area = &(zone->free_area_lists[i][MAX_ORDER-1]);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around area->free_list
#606: FILE: mm/page_alloc.c:559:
+		if (!list_empty(&(area->free_list))) break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#606: FILE: mm/page_alloc.c:559:
+		if (!list_empty(&(area->free_list))) break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#607: FILE: mm/page_alloc.c:560:
+		if (++i == alloctype) i++;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#609: FILE: mm/page_alloc.c:562:
+	if (i == ALLOC_TYPES) return NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#618: FILE: mm/page_alloc.c:571:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#619: FILE: mm/page_alloc.c:572:
+^I * Reserve this whole block of pages. When the pool shrinks, a $

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#633: FILE: mm/page_alloc.c:586:
+
+}

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#658: FILE: mm/page_alloc.c:606:
+		if (list_empty(&area->free_list)) continue;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#670: FILE: mm/page_alloc.c:614:
+	if ((page = steal_largepage(zone, alloctype)) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#686: FILE: mm/page_alloc.c:630:
+	while ((alloctype = *(++fallback_list)) != -1) {
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#687: FILE: mm/page_alloc.c:631:
+		if (alloctype < 0 || alloctype >= ALLOC_TYPES) BUG();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#687: FILE: mm/page_alloc.c:631:
+		if (alloctype < 0 || alloctype >= ALLOC_TYPES) BUG();

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#691: FILE: mm/page_alloc.c:635:
+		current_order=MAX_ORDER;
 		             ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#696: FILE: mm/page_alloc.c:640:
+			if (!list_empty(&area->free_list)) {
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#704: FILE: mm/page_alloc.c:648:
+
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#705: FILE: mm/page_alloc.c:649:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#707: FILE: mm/page_alloc.c:651:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#710: FILE: mm/page_alloc.c:654:
+ ^I * If we are falling back, and the allocation is KERNNORCLM,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#710: FILE: mm/page_alloc.c:654:
+ ^I * If we are falling back, and the allocation is KERNNORCLM,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#711: FILE: mm/page_alloc.c:655:
+ ^I * then reserve any buddies for the KERNNORCLM pool. These$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#711: FILE: mm/page_alloc.c:655:
+ ^I * then reserve any buddies for the KERNNORCLM pool. These$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#712: FILE: mm/page_alloc.c:656:
+ ^I * allocations fragment the worst so this helps keep them $

ERROR:CODE_INDENT: code indent should use tabs where possible
#712: FILE: mm/page_alloc.c:656:
+ ^I * allocations fragment the worst so this helps keep them $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#712: FILE: mm/page_alloc.c:656:
+ ^I * allocations fragment the worst so this helps keep them $

ERROR:CODE_INDENT: code indent should use tabs where possible
#713: FILE: mm/page_alloc.c:657:
+ ^I * in the one place$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#713: FILE: mm/page_alloc.c:657:
+ ^I * in the one place$

ERROR:CODE_INDENT: code indent should use tabs where possible
#714: FILE: mm/page_alloc.c:658:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#714: FILE: mm/page_alloc.c:658:
+ ^I */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#720: FILE: mm/page_alloc.c:664:
+			int reserve_type=ALLOC_KERNNORCLM;
 			                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#721: FILE: mm/page_alloc.c:665:
+			int reserve_type=ALLOC_KERNNORCLM;
+			dec_reserve_count(zone, get_pageblock_type(zone,page));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#721: FILE: mm/page_alloc.c:665:
+			dec_reserve_count(zone, get_pageblock_type(zone,page));
 			                                               ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#734: FILE: mm/page_alloc.c:678:
+
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#740: FILE: mm/page_alloc.c:684:
+^I * updated $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#742: FILE: mm/page_alloc.c:686:
+	if (unlikely(current_order == MAX_ORDER-1)) zone->fallback_balance--;
 	                                       ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#742: FILE: mm/page_alloc.c:686:
+	if (unlikely(current_order == MAX_ORDER-1)) zone->fallback_balance--;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#753: FILE: mm/page_alloc.c:694:
+ * Obtain a specified number of order-0 elements from the buddy allocator, all $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#754: FILE: mm/page_alloc.c:695:
+ * under a single hold of the lock, for efficiency.  Add them to the supplied $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#756: FILE: mm/page_alloc.c:697:
+ * contiguous blocks. Returns the number of new pages which were placed at $

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#771: FILE: mm/page_alloc.c:709:
+	unsigned long current_order= 0;
 	                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#785: FILE: mm/page_alloc.c:717:
+^I * Satisfy the request in as the largest possible physically $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#789: FILE: mm/page_alloc.c:721:
+^I^Iif ((1 << current_order) > allocated) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#794: FILE: mm/page_alloc.c:726:
+		if (page == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#795: FILE: mm/page_alloc.c:727:
+			if (current_order == 0) break;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#819: FILE: mm/page_alloc.c:750:
 
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#854: FILE: mm/page_alloc.c:791:
+	for (type=0; type < ALLOC_TYPES; type++) {
 	         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#860: FILE: mm/page_alloc.c:796:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#865: FILE: mm/page_alloc.c:799:
+				for (i=0; i < (1<<order); i++)
 				      ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#865: FILE: mm/page_alloc.c:799:
+				for (i=0; i < (1<<order); i++)
 				                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#866: FILE: mm/page_alloc.c:800:
+					SetPageNosaveFree(pfn_to_page(start_pfn+i));
 					                                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#884: FILE: mm/page_alloc.c:865:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#890: FILE: mm/page_alloc.c:871:
+^Ielse $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#927: FILE: mm/page_alloc.c:920:
+		if (alloctype == __GFP_USERRCLM) plist = &pcp->pcpu_list[1];

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#928: FILE: mm/page_alloc.c:921:
+		else plist = &pcp->pcpu_list[0];

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#969: FILE: mm/page_alloc.c:980:
+		free_pages -= (

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#991: FILE: mm/page_alloc.c:1016:
+	int highorder_retry=3;
 	                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1033: FILE: mm/page_alloc.c:1093:
+				page = buffered_rmqueue(z, order, gfp_mask,
+						alloctype);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1057: FILE: mm/page_alloc.c:1160:
+		if (order < MAX_ORDER/2) out_of_memory(gfp_mask);
 		                     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1057: FILE: mm/page_alloc.c:1160:
+		if (order < MAX_ORDER/2) out_of_memory(gfp_mask);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1063: FILE: mm/page_alloc.c:1166:
+		if (order >= MAX_ORDER/2 && --highorder_retry > 0)
 		                      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1072: FILE: mm/page_alloc.c:1184:
+		if (order >= MAX_ORDER/2 && --highorder_retry > 0)
 		                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1073: FILE: mm/page_alloc.c:1185:
+			do_retry=1;
 			        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1091: FILE: mm/page_alloc.c:1606:
+			for (type=0; type < ALLOC_TYPES; type++) {
 			         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1105: FILE: mm/page_alloc.c:1905:
+ ^Iint type;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1105: FILE: mm/page_alloc.c:1905:
+ ^Iint type;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1105: FILE: mm/page_alloc.c:1905:
+ ^Iint type;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1106: FILE: mm/page_alloc.c:1906:
+ ^Istruct free_area *area;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1106: FILE: mm/page_alloc.c:1906:
+ ^Istruct free_area *area;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1106: FILE: mm/page_alloc.c:1906:
+ ^Istruct free_area *area;$

WARNING:TYPO_SPELLING: 'Initialse' may be misspelled - perhaps 'Initialise'?
#1108: FILE: mm/page_alloc.c:1908:
+ 	/* Initialse the three size ordered lists of free_areas */
  	   ^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1108: FILE: mm/page_alloc.c:1908:
+ ^I/* Initialse the three size ordered lists of free_areas */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1108: FILE: mm/page_alloc.c:1908:
+ ^I/* Initialse the three size ordered lists of free_areas */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1108: FILE: mm/page_alloc.c:1908:
+ ^I/* Initialse the three size ordered lists of free_areas */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1109: FILE: mm/page_alloc.c:1909:
+	for (type=0; type < ALLOC_TYPES; type++) {
 	         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1112: FILE: mm/page_alloc.c:1912:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1112: FILE: mm/page_alloc.c:1912:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1117: FILE: mm/page_alloc.c:1917:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1117: FILE: mm/page_alloc.c:1917:
+ $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1127: FILE: mm/page_alloc.c:1928:
+static unsigned long __init usemap_size(unsigned long zonesize) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1131: FILE: mm/page_alloc.c:1932:
+	usemapsize = (zonesize + (1 << (MAX_ORDER-1)) - 1) >> (MAX_ORDER-1);
 	                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1131: FILE: mm/page_alloc.c:1932:
+	usemapsize = (zonesize + (1 << (MAX_ORDER-1)) - 1) >> (MAX_ORDER-1);
 	                                                                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1135: FILE: mm/page_alloc.c:1936:
+^I$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1137: FILE: mm/page_alloc.c:1938:
+	usemapsize = usemapsize + (sizeof(unsigned long) * 8 + BITS_PER_LONG-1);
 	                                                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1162: FILE: mm/page_alloc.c:1987:
+^I^Izone->fallback_balance = (realsize >> (MAX_ORDER-1)) - $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1162: FILE: mm/page_alloc.c:1987:
+		zone->fallback_balance = (realsize >> (MAX_ORDER-1)) - 
 		                                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1163: FILE: mm/page_alloc.c:1988:
+					 (realsize >> (MAX_ORDER+2));
 					                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1201: FILE: mm/page_alloc.c:2080:
+^I^Izone->free_area_usemap = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1202: FILE: mm/page_alloc.c:2081:
+^I^I^I(unsigned long *)alloc_bootmem_node(pgdat, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1206: FILE: mm/page_alloc.c:2085:
+		memset((unsigned long *)zone->free_area_usemap,
+				ALLOC_KERNNORCLM, usemapsize);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1208: FILE: mm/page_alloc.c:2087:
+		printk(KERN_DEBUG "  %s zone: %lu pages, %lu real pages, usemap size:%lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1209: FILE: mm/page_alloc.c:2088:
+		printk(KERN_DEBUG "  %s zone: %lu pages, %lu real pages, usemap size:%lu\n",
+				zone_names[j], size, realsize, usemapsize);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1220: FILE: mm/page_alloc.c:2178:
+ ^Iunsigned long nr_bufs = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1220: FILE: mm/page_alloc.c:2178:
+ ^Iunsigned long nr_bufs = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1220: FILE: mm/page_alloc.c:2178:
+ ^Iunsigned long nr_bufs = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1222: FILE: mm/page_alloc.c:2180:
+ ^I/* Show global fragmentation statistics */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1222: FILE: mm/page_alloc.c:2180:
+ ^I/* Show global fragmentation statistics */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1222: FILE: mm/page_alloc.c:2180:
+ ^I/* Show global fragmentation statistics */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1234: FILE: mm/page_alloc.c:2186:
+ ^I^Iseq_printf(m, "Node %d, zone %8s", pgdat->node_id, zone->name);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1234: FILE: mm/page_alloc.c:2186:
+ ^I^Iseq_printf(m, "Node %d, zone %8s", pgdat->node_id, zone->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1234: FILE: mm/page_alloc.c:2186:
+ ^I^Iseq_printf(m, "Node %d, zone %8s", pgdat->node_id, zone->name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1235: FILE: mm/page_alloc.c:2187:
+ ^I^Ifor (order = 0; order < MAX_ORDER-1; ++order) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1235: FILE: mm/page_alloc.c:2187:
+ ^I^Ifor (order = 0; order < MAX_ORDER-1; ++order) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1235: FILE: mm/page_alloc.c:2187:
+ ^I^Ifor (order = 0; order < MAX_ORDER-1; ++order) {$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1235: FILE: mm/page_alloc.c:2187:
+ 		for (order = 0; order < MAX_ORDER-1; ++order) {
  		                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1236: FILE: mm/page_alloc.c:2188:
+ ^I^I^Inr_bufs = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1236: FILE: mm/page_alloc.c:2188:
+ ^I^I^Inr_bufs = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1236: FILE: mm/page_alloc.c:2188:
+ ^I^I^Inr_bufs = 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1237: FILE: mm/page_alloc.c:2189:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1237: FILE: mm/page_alloc.c:2189:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1238: FILE: mm/page_alloc.c:2190:
+ ^I^I^Ifor (type=0; type < ALLOC_TYPES; type++) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1238: FILE: mm/page_alloc.c:2190:
+ ^I^I^Ifor (type=0; type < ALLOC_TYPES; type++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1238: FILE: mm/page_alloc.c:2190:
+ ^I^I^Ifor (type=0; type < ALLOC_TYPES; type++) {$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1238: FILE: mm/page_alloc.c:2190:
+ 			for (type=0; type < ALLOC_TYPES; type++) {
  			         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1239: FILE: mm/page_alloc.c:2191:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1239: FILE: mm/page_alloc.c:2191:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1239: FILE: mm/page_alloc.c:2191:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_lists[type][order].free_list
#1239: FILE: mm/page_alloc.c:2191:
+ 				list_for_each(elem, &(zone->free_area_lists[type][order].free_list))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1240: FILE: mm/page_alloc.c:2192:
+ ^I^I^I^I^I++nr_bufs;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1240: FILE: mm/page_alloc.c:2192:
+ ^I^I^I^I^I++nr_bufs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1240: FILE: mm/page_alloc.c:2192:
+ ^I^I^I^I^I++nr_bufs;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1241: FILE: mm/page_alloc.c:2193:
+ ^I^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1241: FILE: mm/page_alloc.c:2193:
+ ^I^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1241: FILE: mm/page_alloc.c:2193:
+ ^I^I^I}$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1242: FILE: mm/page_alloc.c:2194:
+ ^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1242: FILE: mm/page_alloc.c:2194:
+ ^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1242: FILE: mm/page_alloc.c:2194:
+ ^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1243: FILE: mm/page_alloc.c:2195:
+ ^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1243: FILE: mm/page_alloc.c:2195:
+ ^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1243: FILE: mm/page_alloc.c:2195:
+ ^I^I}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1244: FILE: mm/page_alloc.c:2196:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1244: FILE: mm/page_alloc.c:2196:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1245: FILE: mm/page_alloc.c:2197:
+ ^I^I/* Scan global list */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1245: FILE: mm/page_alloc.c:2197:
+ ^I^I/* Scan global list */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1245: FILE: mm/page_alloc.c:2197:
+ ^I^I/* Scan global list */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1246: FILE: mm/page_alloc.c:2198:
+ ^I^Inr_bufs = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1246: FILE: mm/page_alloc.c:2198:
+ ^I^Inr_bufs = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1246: FILE: mm/page_alloc.c:2198:
+ ^I^Inr_bufs = 0;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1247: FILE: mm/page_alloc.c:2199:
+		for (type=0; type < ALLOC_TYPES; type++) {
 		         ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1247: FILE: mm/page_alloc.c:2199:
+		for (type=0; type < ALLOC_TYPES; type++) {
+			nr_bufs += zone->free_area_lists[type][MAX_ORDER-1].nr_free;
+		}

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1248: FILE: mm/page_alloc.c:2200:
+			nr_bufs += zone->free_area_lists[type][MAX_ORDER-1].nr_free;
 			                                                ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1250: FILE: mm/page_alloc.c:2202:
+ ^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1250: FILE: mm/page_alloc.c:2202:
+ ^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1250: FILE: mm/page_alloc.c:2202:
+ ^I^Iseq_printf(m, "%6lu ", nr_bufs);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1251: FILE: mm/page_alloc.c:2203:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1251: FILE: mm/page_alloc.c:2203:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1252: FILE: mm/page_alloc.c:2204:
+ ^I^Ispin_unlock_irqrestore(&zone->lock, flags);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1252: FILE: mm/page_alloc.c:2204:
+ ^I^Ispin_unlock_irqrestore(&zone->lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1252: FILE: mm/page_alloc.c:2204:
+ ^I^Ispin_unlock_irqrestore(&zone->lock, flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1253: FILE: mm/page_alloc.c:2205:
+ ^I^Iseq_putc(m, '\n');$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1253: FILE: mm/page_alloc.c:2205:
+ ^I^Iseq_putc(m, '\n');$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1253: FILE: mm/page_alloc.c:2205:
+ ^I^Iseq_putc(m, '\n');$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1254: FILE: mm/page_alloc.c:2206:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1254: FILE: mm/page_alloc.c:2206:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1254: FILE: mm/page_alloc.c:2206:
+ ^I}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1255: FILE: mm/page_alloc.c:2207:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1255: FILE: mm/page_alloc.c:2207:
+ $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000179819.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 113 errors, 70 warnings, 54 checks, 955 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000179819.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
