CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#61: FILE: include/linux/utsname.h:50:
+extern int unshare_utsname(unsigned long unshare_flags,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#62: FILE: include/linux/utsname.h:51:
+extern int unshare_utsname(unsigned long unshare_flags,
+				struct uts_namespace **new_uts);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#71: FILE: include/linux/utsname.h:70:
+static inline int unshare_utsname(unsigned long unshare_flags,
+			struct uts_namespace **new_uts)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#94: FILE: kernel/fork.c:1580:
+				CLONE_VM|CLONE_FILES|CLONE_SYSVSEM|CLONE_NEWUTS))
 				        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#94: FILE: kernel/fork.c:1580:
+				CLONE_VM|CLONE_FILES|CLONE_SYSVSEM|CLONE_NEWUTS))
 				                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#94: FILE: kernel/fork.c:1580:
+				CLONE_VM|CLONE_FILES|CLONE_SYSVSEM|CLONE_NEWUTS))
 				                                  ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#102: FILE: kernel/fork.c:1597:
+	if ((err = unshare_utsname(unshare_flags, &new_uts)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#107: FILE: kernel/fork.c:1601:
+	if (new_fs || new_ns || new_sigh || new_mm || new_fd || new_ulist ||
+				new_uts) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ns)...) over kmalloc(sizeof(struct uts_namespace)...)
#139: FILE: kernel/utsname.c:27:
+	ns = kmalloc(sizeof(struct uts_namespace), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000078981.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 0 warnings, 8 checks, 135 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000078981.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
