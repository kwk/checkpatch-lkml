CHECK:SPACING: No space is necessary after a cast
#66: FILE: drivers/char/rio/rioboot.c:385:
+		writeb(NFIX(((unsigned short) (~offset) >> (unsigned short) 12) & 0xF), DestP);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <DestP>
#66: FILE: drivers/char/rio/rioboot.c:385:
+		writeb(NFIX(((unsigned short) (~offset) >> (unsigned short) 12) & 0xF), DestP);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: No space is necessary after a cast
#78: FILE: drivers/char/rio/rioboot.c:514:
+		HostP->PhbP = (struct PHB *) RIO_PTR(Cad, readw(&ParmMapP->phb_ptr));

CHECK:CAMELCASE: Avoid CamelCase: <HostP>
#78: FILE: drivers/char/rio/rioboot.c:514:
+		HostP->PhbP = (struct PHB *) RIO_PTR(Cad, readw(&ParmMapP->phb_ptr));

CHECK:CAMELCASE: Avoid CamelCase: <PhbP>
#78: FILE: drivers/char/rio/rioboot.c:514:
+		HostP->PhbP = (struct PHB *) RIO_PTR(Cad, readw(&ParmMapP->phb_ptr));

CHECK:CAMELCASE: Avoid CamelCase: <Cad>
#78: FILE: drivers/char/rio/rioboot.c:514:
+		HostP->PhbP = (struct PHB *) RIO_PTR(Cad, readw(&ParmMapP->phb_ptr));

CHECK:CAMELCASE: Avoid CamelCase: <ParmMapP>
#78: FILE: drivers/char/rio/rioboot.c:514:
+		HostP->PhbP = (struct PHB *) RIO_PTR(Cad, readw(&ParmMapP->phb_ptr));

CHECK:SPACING: No space is necessary after a cast
#79: FILE: drivers/char/rio/rioboot.c:515:
+		HostP->RupP = (struct RUP *) RIO_PTR(Cad, readw(&ParmMapP->rups));

CHECK:CAMELCASE: Avoid CamelCase: <RupP>
#79: FILE: drivers/char/rio/rioboot.c:515:
+		HostP->RupP = (struct RUP *) RIO_PTR(Cad, readw(&ParmMapP->rups));

CHECK:SPACING: No space is necessary after a cast
#80: FILE: drivers/char/rio/rioboot.c:516:
+		HostP->PhbNumP = (unsigned short *) RIO_PTR(Cad, readw(&ParmMapP->phb_num_ptr));

CHECK:CAMELCASE: Avoid CamelCase: <PhbNumP>
#80: FILE: drivers/char/rio/rioboot.c:516:
+		HostP->PhbNumP = (unsigned short *) RIO_PTR(Cad, readw(&ParmMapP->phb_num_ptr));

CHECK:SPACING: No space is necessary after a cast
#81: FILE: drivers/char/rio/rioboot.c:517:
+		HostP->LinkStrP = (struct LPB *) RIO_PTR(Cad, readw(&ParmMapP->link_str_ptr));

CHECK:CAMELCASE: Avoid CamelCase: <LinkStrP>
#81: FILE: drivers/char/rio/rioboot.c:517:
+		HostP->LinkStrP = (struct LPB *) RIO_PTR(Cad, readw(&ParmMapP->link_str_ptr));

CHECK:SPACING: No space is necessary after a cast
#90: FILE: drivers/char/rio/rioboot.c:638:
+	CmdBlkP->Packet.dest_unit = Rup < (unsigned short) MAX_RUP ? Rup : 0;

CHECK:CAMELCASE: Avoid CamelCase: <CmdBlkP>
#90: FILE: drivers/char/rio/rioboot.c:638:
+	CmdBlkP->Packet.dest_unit = Rup < (unsigned short) MAX_RUP ? Rup : 0;

CHECK:CAMELCASE: Avoid CamelCase: <Packet>
#90: FILE: drivers/char/rio/rioboot.c:638:
+	CmdBlkP->Packet.dest_unit = Rup < (unsigned short) MAX_RUP ? Rup : 0;

CHECK:CAMELCASE: Avoid CamelCase: <Rup>
#90: FILE: drivers/char/rio/rioboot.c:638:
+	CmdBlkP->Packet.dest_unit = Rup < (unsigned short) MAX_RUP ? Rup : 0;

CHECK:SPACING: No space is necessary after a cast
#99: FILE: drivers/char/rio/rioboot.c:747:
+	if (Rup >= (unsigned short) MAX_RUP)

CHECK:CAMELCASE: Avoid CamelCase: <RtaUniq>
#144: FILE: drivers/char/rio/rioboot.c:960:
+			rio_fill_host_slot(entry, entry2, RtaUniq, HostP);

CHECK:CAMELCASE: Avoid CamelCase: <Host>
#194: FILE: drivers/char/rio/rioboot.c:1079:
+void rio_fill_host_slot(int entry, int entry2, unsigned int rta_uniq, struct Host *host)

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#199: FILE: drivers/char/rio/rioboot.c:1083:
+	rio_dprintk(RIO_DEBUG_BOOT, "rio_fill_host_slot(%d, %d, 0x%x...)\n", entry, entry2, rta_uniq);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rio_fill_host_slot', this function's name, in a string
#199: FILE: drivers/char/rio/rioboot.c:1083:
+	rio_dprintk(RIO_DEBUG_BOOT, "rio_fill_host_slot(%d, %d, 0x%x...)\n", entry, entry2, rta_uniq);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:CAMELCASE: Avoid CamelCase: <Mapping>
#207: FILE: drivers/char/rio/rioboot.c:1085:
+	host->Mapping[entry].Flags = (RTA_BOOTED | RTA_NEWBOOT | SLOT_TENTATIVE);

CHECK:CAMELCASE: Avoid CamelCase: <Flags>
#207: FILE: drivers/char/rio/rioboot.c:1085:
+	host->Mapping[entry].Flags = (RTA_BOOTED | RTA_NEWBOOT | SLOT_TENTATIVE);

CHECK:CAMELCASE: Avoid CamelCase: <SysPort>
#208: FILE: drivers/char/rio/rioboot.c:1086:
+	host->Mapping[entry].SysPort = NO_PORT;

CHECK:CAMELCASE: Avoid CamelCase: <RtaUniqueNum>
#209: FILE: drivers/char/rio/rioboot.c:1087:
+	host->Mapping[entry].RtaUniqueNum = rta_uniq;

CHECK:CAMELCASE: Avoid CamelCase: <HostUniqueNum>
#210: FILE: drivers/char/rio/rioboot.c:1088:
+	host->Mapping[entry].HostUniqueNum = host->UniqueNum;

CHECK:CAMELCASE: Avoid CamelCase: <UniqueNum>
#210: FILE: drivers/char/rio/rioboot.c:1088:
+	host->Mapping[entry].HostUniqueNum = host->UniqueNum;

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#222: FILE: drivers/char/rio/rioboot.c:1092:
+		host->Mapping[entry2].Flags = (RTA_BOOTED | RTA_NEWBOOT | SLOT_TENTATIVE | RTA16_SECOND_SLOT);

CHECK:CAMELCASE: Avoid CamelCase: <Name>
#226: FILE: drivers/char/rio/rioboot.c:1096:
+		host->Mapping[entry2].Name[0] = '\0';

CHECK:CAMELCASE: Avoid CamelCase: <Topology>
#238: FILE: drivers/char/rio/rioboot.c:1106:
+		host->Mapping[entry].Topology[link].Unit = ROUTE_DISCONNECT;

CHECK:CAMELCASE: Avoid CamelCase: <Unit>
#238: FILE: drivers/char/rio/rioboot.c:1106:
+		host->Mapping[entry].Topology[link].Unit = ROUTE_DISCONNECT;

CHECK:CAMELCASE: Avoid CamelCase: <Link>
#239: FILE: drivers/char/rio/rioboot.c:1107:
+		host->Mapping[entry].Topology[link].Link = NO_LINK;

CHECK:CAMELCASE: Avoid CamelCase: <RtaUnique>
#285: FILE: drivers/char/rio/riocmd.c:146:
+	rio_dprintk(RIO_DEBUG_CMD, "Command RTA 0x%lx func %p\n", RtaUnique, func);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#294: FILE: drivers/char/rio/riocmd.c:373:
+static int RIOCommandRup(struct rio_info *p, uint Rup, struct Host *HostP, struct PKT * PacketP)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <RIOCommandRup>
#294: FILE: drivers/char/rio/riocmd.c:373:
+static int RIOCommandRup(struct rio_info *p, uint Rup, struct Host *HostP, struct PKT * PacketP)

CHECK:CAMELCASE: Avoid CamelCase: <PacketP>
#294: FILE: drivers/char/rio/riocmd.c:373:
+static int RIOCommandRup(struct rio_info *p, uint Rup, struct Host *HostP, struct PKT * PacketP)

WARNING:LONG_LINE: line length of 148 exceeds 100 columns
#330: FILE: drivers/char/rio/riocmd.c:598:
+																	     : 1)) {

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#337: FILE: drivers/char/rio/riocmd.c:604:
+		HostP->Copy((caddr_t) & CmdBlkP->Packet, RIO_PTR(HostP->Caddr, UnixRupP->RupP->txpkt), sizeof(struct PKT));

CHECK:SPACING: No space is necessary after a cast
#337: FILE: drivers/char/rio/riocmd.c:604:
+		HostP->Copy((caddr_t) & CmdBlkP->Packet, RIO_PTR(HostP->Caddr, UnixRupP->RupP->txpkt), sizeof(struct PKT));

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#337: FILE: drivers/char/rio/riocmd.c:604:
+		HostP->Copy((caddr_t) & CmdBlkP->Packet, RIO_PTR(HostP->Caddr, UnixRupP->RupP->txpkt), sizeof(struct PKT));
 		                      ^

CHECK:CAMELCASE: Avoid CamelCase: <Copy>
#337: FILE: drivers/char/rio/riocmd.c:604:
+		HostP->Copy((caddr_t) & CmdBlkP->Packet, RIO_PTR(HostP->Caddr, UnixRupP->RupP->txpkt), sizeof(struct PKT));

CHECK:CAMELCASE: Avoid CamelCase: <Caddr>
#337: FILE: drivers/char/rio/riocmd.c:604:
+		HostP->Copy((caddr_t) & CmdBlkP->Packet, RIO_PTR(HostP->Caddr, UnixRupP->RupP->txpkt), sizeof(struct PKT));

CHECK:CAMELCASE: Avoid CamelCase: <UnixRupP>
#337: FILE: drivers/char/rio/riocmd.c:604:
+		HostP->Copy((caddr_t) & CmdBlkP->Packet, RIO_PTR(HostP->Caddr, UnixRupP->RupP->txpkt), sizeof(struct PKT));

CHECK:CAMELCASE: Avoid CamelCase: <Base>
#355: FILE: drivers/char/rio/riocmd.c:631:
+	rio_dprintk(RIO_DEBUG_CMD, "First try to queue cmdblk %p at %p\n", CmdBlkP, Base);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#386: FILE: drivers/char/rio/riocmd.c:679:
+			PacketP = (struct PKT *) RIO_PTR(HostP->Caddr, readw(&UnixRupP->RupP->rxpkt));

CHECK:SPACING: No space is necessary after a cast
#386: FILE: drivers/char/rio/riocmd.c:679:
+			PacketP = (struct PKT *) RIO_PTR(HostP->Caddr, readw(&UnixRupP->RupP->rxpkt));

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#405: FILE: drivers/char/rio/riocmd.c:778:
+			if (!(CmdBlkP->PreFuncP ? (*CmdBlkP->PreFuncP) (CmdBlkP->PreArg, CmdBlkP) : 1)) {

CHECK:CAMELCASE: Avoid CamelCase: <PreFuncP>
#405: FILE: drivers/char/rio/riocmd.c:778:
+			if (!(CmdBlkP->PreFuncP ? (*CmdBlkP->PreFuncP) (CmdBlkP->PreArg, CmdBlkP) : 1)) {

CHECK:CAMELCASE: Avoid CamelCase: <PreArg>
#405: FILE: drivers/char/rio/riocmd.c:778:
+			if (!(CmdBlkP->PreFuncP ? (*CmdBlkP->PreFuncP) (CmdBlkP->PreArg, CmdBlkP) : 1)) {

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#406: FILE: drivers/char/rio/riocmd.c:779:
+				rio_dprintk(RIO_DEBUG_CMD, "Not ready to start command %p\n", CmdBlkP);

WARNING:LONG_LINE: line length of 136 exceeds 100 columns
#409: FILE: drivers/char/rio/riocmd.c:781:
+				rio_dprintk(RIO_DEBUG_CMD, "Start new command %p Cmd byte is 0x%x\n", CmdBlkP, CmdBlkP->Packet.data[0]);

WARNING:LONG_LINE: line length of 139 exceeds 100 columns
#414: FILE: drivers/char/rio/riocmd.c:785:
+				HostP->Copy((caddr_t) & CmdBlkP->Packet, RIO_PTR(HostP->Caddr, UnixRupP->RupP->txpkt), sizeof(struct PKT));

CHECK:SPACING: No space is necessary after a cast
#414: FILE: drivers/char/rio/riocmd.c:785:
+				HostP->Copy((caddr_t) & CmdBlkP->Packet, RIO_PTR(HostP->Caddr, UnixRupP->RupP->txpkt), sizeof(struct PKT));

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#414: FILE: drivers/char/rio/riocmd.c:785:
+				HostP->Copy((caddr_t) & CmdBlkP->Packet, RIO_PTR(HostP->Caddr, UnixRupP->RupP->txpkt), sizeof(struct PKT));
 				                      ^

CHECK:CAMELCASE: Avoid CamelCase: <PortSetup>
#501: FILE: drivers/char/rio/rioctrl.c:570:
+		memcpy(PortSetup.XpOn, p->RIOPortp[port]->Xprint.XpOn, MAX_XP_CTRL_LEN);

CHECK:CAMELCASE: Avoid CamelCase: <XpOn>
#501: FILE: drivers/char/rio/rioctrl.c:570:
+		memcpy(PortSetup.XpOn, p->RIOPortp[port]->Xprint.XpOn, MAX_XP_CTRL_LEN);

CHECK:CAMELCASE: Avoid CamelCase: <RIOPortp>
#501: FILE: drivers/char/rio/rioctrl.c:570:
+		memcpy(PortSetup.XpOn, p->RIOPortp[port]->Xprint.XpOn, MAX_XP_CTRL_LEN);

CHECK:CAMELCASE: Avoid CamelCase: <Xprint>
#501: FILE: drivers/char/rio/rioctrl.c:570:
+		memcpy(PortSetup.XpOn, p->RIOPortp[port]->Xprint.XpOn, MAX_XP_CTRL_LEN);

CHECK:CAMELCASE: Avoid CamelCase: <XpOff>
#502: FILE: drivers/char/rio/rioctrl.c:571:
+		memcpy(PortSetup.XpOff, p->RIOPortp[port]->Xprint.XpOff, MAX_XP_CTRL_LEN);

CHECK:CAMELCASE: Avoid CamelCase: <PortP>
#511: FILE: drivers/char/rio/rioctrl.c:1402:
+	rio_dprintk(RIO_DEBUG_CTRL, "Command blk %p - InUse now %d\n", CmdBlkP, PortP->InUse);

CHECK:CAMELCASE: Avoid CamelCase: <InUse>
#511: FILE: drivers/char/rio/rioctrl.c:1402:
+	rio_dprintk(RIO_DEBUG_CTRL, "Command blk %p - InUse now %d\n", CmdBlkP, PortP->InUse);

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#520: FILE: drivers/char/rio/rioctrl.c:1428:
+		rio_dprintk(RIO_DEBUG_CTRL, "Queue MEMDUMP command blk %p (addr 0x%x)\n", CmdBlkP, (int) SubCmd.Addr);

CHECK:SPACING: No space is necessary after a cast
#520: FILE: drivers/char/rio/rioctrl.c:1428:
+		rio_dprintk(RIO_DEBUG_CTRL, "Queue MEMDUMP command blk %p (addr 0x%x)\n", CmdBlkP, (int) SubCmd.Addr);

CHECK:CAMELCASE: Avoid CamelCase: <SubCmd>
#520: FILE: drivers/char/rio/rioctrl.c:1428:
+		rio_dprintk(RIO_DEBUG_CTRL, "Queue MEMDUMP command blk %p (addr 0x%x)\n", CmdBlkP, (int) SubCmd.Addr);

CHECK:CAMELCASE: Avoid CamelCase: <Addr>
#520: FILE: drivers/char/rio/rioctrl.c:1428:
+		rio_dprintk(RIO_DEBUG_CTRL, "Queue MEMDUMP command blk %p (addr 0x%x)\n", CmdBlkP, (int) SubCmd.Addr);

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#530: FILE: drivers/char/rio/rioctrl.c:1436:
+		rio_dprintk(RIO_DEBUG_CTRL, "Queue READ_REGISTER (0x%x) command blk %p\n", (int) SubCmd.Addr, CmdBlkP);

CHECK:SPACING: No space is necessary after a cast
#530: FILE: drivers/char/rio/rioctrl.c:1436:
+		rio_dprintk(RIO_DEBUG_CTRL, "Queue READ_REGISTER (0x%x) command blk %p\n", (int) SubCmd.Addr, CmdBlkP);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#652: FILE: drivers/char/rio/rio.h:113:
+#define	HUNDRED_MS		((HZ/10)?(HZ/10):1)
        	          		    ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#652: FILE: drivers/char/rio/rio.h:113:
+#define	HUNDRED_MS		((HZ/10)?(HZ/10):1)
        	          		        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#652: FILE: drivers/char/rio/rio.h:113:
+#define	HUNDRED_MS		((HZ/10)?(HZ/10):1)
        	          		            ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#652: FILE: drivers/char/rio/rio.h:113:
+#define	HUNDRED_MS		((HZ/10)?(HZ/10):1)
        	          		                ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pkt_ptr' - possible side-effects?
#727: FILE: drivers/char/rio/rio.h:147:
+#define CSUM(pkt_ptr)  (((u16 *)(pkt_ptr))[0] + ((u16 *)(pkt_ptr))[1] + \
+			((u16 *)(pkt_ptr))[2] + ((u16 *)(pkt_ptr))[3] + \
+			((u16 *)(pkt_ptr))[4] + ((u16 *)(pkt_ptr))[5] + \
+			((u16 *)(pkt_ptr))[6] + ((u16 *)(pkt_ptr))[7] + \
+			((u16 *)(pkt_ptr))[8] + ((u16 *)(pkt_ptr))[9] )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#731: FILE: drivers/char/rio/rio.h:151:
+			((u16 *)(pkt_ptr))[8] + ((u16 *)(pkt_ptr))[9] )

ERROR:SPACING: space prohibited after that open parenthesis '('
#763: FILE: drivers/char/rio/rio.h:173:
+#define IFOAD		( CONTROL + 1 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#763: FILE: drivers/char/rio/rio.h:173:
+#define IFOAD		( CONTROL + 1 )

ERROR:SPACING: space prohibited after that open parenthesis '('
#764: FILE: drivers/char/rio/rio.h:174:
+#define	IDENTIFY	( CONTROL + 2 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#764: FILE: drivers/char/rio/rio.h:174:
+#define	IDENTIFY	( CONTROL + 2 )

ERROR:SPACING: space prohibited after that open parenthesis '('
#765: FILE: drivers/char/rio/rio.h:175:
+#define	ZOMBIE		( CONTROL + 3 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#765: FILE: drivers/char/rio/rio.h:175:
+#define	ZOMBIE		( CONTROL + 3 )

ERROR:SPACING: space prohibited after that open parenthesis '('
#766: FILE: drivers/char/rio/rio.h:176:
+#define	UFOAD		( CONTROL + 4 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#766: FILE: drivers/char/rio/rio.h:176:
+#define	UFOAD		( CONTROL + 4 )

ERROR:SPACING: space prohibited after that open parenthesis '('
#767: FILE: drivers/char/rio/rio.h:177:
+#define IWAIT		( CONTROL + 5 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#767: FILE: drivers/char/rio/rio.h:177:
+#define IWAIT		( CONTROL + 5 )

CHECK:SPACING: No space is necessary after a cast
#776: FILE: drivers/char/rio/rio.h:186:
+#define E_NO_ERROR                       ((ushort) 0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#788: FILE: drivers/char/rio/rio.h:198:
+ * to by the TxAdd pointer has PKT_IN_USE clear in its address. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:CAMELCASE: Avoid CamelCase: <Top>
#793: FILE: drivers/char/rio/rio.h:203:
+struct Top {

CHECK:CAMELCASE: Avoid CamelCase: <RIOScrub>
#835: FILE: drivers/char/rio/rioinit.c:82:
+static int RIOScrub(int, u8 *, int);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#844: FILE: drivers/char/rio/rioinit.c:123:
+^Iwriteb(BOOT_FROM_RAM | EXTERNAL_BUS_OFF | p->RIOHosts[p->RIONumHosts].Mode | INTERRUPT_DISABLE , $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#844: FILE: drivers/char/rio/rioinit.c:123:
+	writeb(BOOT_FROM_RAM | EXTERNAL_BUS_OFF | p->RIOHosts[p->RIONumHosts].Mode | INTERRUPT_DISABLE , 

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#844: FILE: drivers/char/rio/rioinit.c:123:
+	writeb(BOOT_FROM_RAM | EXTERNAL_BUS_OFF | p->RIOHosts[p->RIONumHosts].Mode | INTERRUPT_DISABLE , 
 	                                                                                               ^

CHECK:CAMELCASE: Avoid CamelCase: <RIOHosts>
#844: FILE: drivers/char/rio/rioinit.c:123:
+	writeb(BOOT_FROM_RAM | EXTERNAL_BUS_OFF | p->RIOHosts[p->RIONumHosts].Mode | INTERRUPT_DISABLE , 

CHECK:CAMELCASE: Avoid CamelCase: <RIONumHosts>
#844: FILE: drivers/char/rio/rioinit.c:123:
+	writeb(BOOT_FROM_RAM | EXTERNAL_BUS_OFF | p->RIOHosts[p->RIONumHosts].Mode | INTERRUPT_DISABLE , 

CHECK:CAMELCASE: Avoid CamelCase: <Mode>
#844: FILE: drivers/char/rio/rioinit.c:123:
+	writeb(BOOT_FROM_RAM | EXTERNAL_BUS_OFF | p->RIOHosts[p->RIONumHosts].Mode | INTERRUPT_DISABLE , 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#845: FILE: drivers/char/rio/rioinit.c:124:
+	writeb(BOOT_FROM_RAM | EXTERNAL_BUS_OFF | p->RIOHosts[p->RIONumHosts].Mode | INTERRUPT_DISABLE , 
 		&p->RIOHosts[p->RIONumHosts].Control);

CHECK:CAMELCASE: Avoid CamelCase: <RIOBoardTest>
#853: FILE: drivers/char/rio/rioinit.c:154:
+int RIOBoardTest(unsigned long paddr, caddr_t	caddr, unsigned char type, int slot)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#862: FILE: drivers/char/rio/rioinit.c:162:
+	rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Reset host type=%d, DpRam=%p, slot=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#863: FILE: drivers/char/rio/rioinit.c:163:
+	rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Reset host type=%d, DpRam=%p, slot=%d\n",
 			type, DpRam, slot);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#871: FILE: drivers/char/rio/rioinit.c:191:
+		rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Memory: %p(0x%x), %p(0x%x), %p(0x%x)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#872: FILE: drivers/char/rio/rioinit.c:192:
+		rio_dprintk (RIO_DEBUG_INIT, "RIO-init: Memory: %p(0x%x), %p(0x%x), %p(0x%x)\n",
 				ram[0], size[0], ram[1], size[1], ram[2], size[2]);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#875: FILE: drivers/char/rio/rioinit.c:194:
+		rio_dprintk (RIO_DEBUG_INIT, "RIO-init: %p(0x%x), %p(0x%x), %p(0x%x), %p(0x%x)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#876: FILE: drivers/char/rio/rioinit.c:195:
+		rio_dprintk (RIO_DEBUG_INIT, "RIO-init: %p(0x%x), %p(0x%x), %p(0x%x), %p(0x%x)\n",
 				ram[0], size[0], ram[1], size[1], ram[2], size[2], ram[3], size[3]);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#920: FILE: drivers/char/rio/rioinit.c:410:
+^I^Iwriteb(BOOT_FROM_RAM | EXTERNAL_BUS_OFF | INTERRUPT_DISABLE | $

WARNING:LONG_LINE: line length of 186 exceeds 100 columns
#969: FILE: drivers/char/rio/riointr.c:410:
+					if (RIOParam(PortP, OPEN, ((PortP->Cor2Copy & (COR2_RTSFLOW | COR2_CTSFLOW)) == (COR2_RTSFLOW | COR2_CTSFLOW)) ? 1 : 0, DONT_SLEEP) == RIO_FAIL) {

CHECK:CAMELCASE: Avoid CamelCase: <RIOParam>
#969: FILE: drivers/char/rio/riointr.c:410:
+					if (RIOParam(PortP, OPEN, ((PortP->Cor2Copy & (COR2_RTSFLOW | COR2_CTSFLOW)) == (COR2_RTSFLOW | COR2_CTSFLOW)) ? 1 : 0, DONT_SLEEP) == RIO_FAIL) {

CHECK:CAMELCASE: Avoid CamelCase: <Cor2Copy>
#969: FILE: drivers/char/rio/riointr.c:410:
+					if (RIOParam(PortP, OPEN, ((PortP->Cor2Copy & (COR2_RTSFLOW | COR2_CTSFLOW)) == (COR2_RTSFLOW | COR2_CTSFLOW)) ? 1 : 0, DONT_SLEEP) == RIO_FAIL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#969: FILE: drivers/char/rio/riointr.c:410:
+					if (RIOParam(PortP, OPEN, ((PortP->Cor2Copy & (COR2_RTSFLOW | COR2_CTSFLOW)) == (COR2_RTSFLOW | COR2_CTSFLOW)) ? 1 : 0, DONT_SLEEP) == RIO_FAIL) {
 						continue;	/* with next port */
 					}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#1041: FILE: drivers/char/rio/rio_linux.c:348:
+	return RIOParam((struct Port *) ptr, CONFIG, 1, 1);

CHECK:CAMELCASE: Avoid CamelCase: <Port>
#1041: FILE: drivers/char/rio/rio_linux.c:348:
+	return RIOParam((struct Port *) ptr, CONFIG, 1, 1);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1058: FILE: drivers/char/rio/rio_linux.c:976:
+^I^I$

CHECK:CAMELCASE: Avoid CamelCase: <PaddrP>
#1078: FILE: drivers/char/rio/rio_linux.c:997:
+		hp->PaddrP = pci_resource_start(pdev, 2);

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#1087: FILE: drivers/char/rio/rio_linux.c:1011:
+		if (RIOBoardTest(p->RIOHosts[p->RIONumHosts].PaddrP, p->RIOHosts[p->RIONumHosts].Caddr, RIO_PCI, 0) == 0) {

CHECK:CAMELCASE: Avoid CamelCase: <RIOLastPCISearch>
#1096: FILE: drivers/char/rio/rio_linux.c:1020:
+			p->RIOLastPCISearch = 0;

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#1117: FILE: drivers/char/rio/rio_linux.c:1062:
+		if (RIOBoardTest(p->RIOHosts[p->RIONumHosts].PaddrP, p->RIOHosts[p->RIONumHosts].Caddr, RIO_PCI, 0) == 0) {

CHECK:CAMELCASE: Avoid CamelCase: <PktP>
#1241: FILE: drivers/char/rio/rioparam.c:583:
+int can_add_transmit(struct PKT **PktP, struct Port *PortP)

CHECK:SPACING: No space is necessary after a cast
#1247: FILE: drivers/char/rio/rioparam.c:587:
+	*PktP = tp = (struct PKT *) RIO_PTR(PortP->Caddr, readw(PortP->TxAdd));

CHECK:CAMELCASE: Avoid CamelCase: <TxAdd>
#1247: FILE: drivers/char/rio/rioparam.c:587:
+	*PktP = tp = (struct PKT *) RIO_PTR(PortP->Caddr, readw(PortP->TxAdd));

CHECK:SPACING: No space is necessary after a cast
#1270: FILE: drivers/char/rio/rioparam.c:628:
+		tmp_pointer = (struct rio_free_list *) RIO_PTR(HostP->Caddr, old_end);

CHECK:SPACING: No space is necessary after a cast
#1274: FILE: drivers/char/rio/rioparam.c:630:
+		writew(old_end, &((struct rio_free_list *) PktP)->prev);

CHECK:SPACING: No space is necessary after a cast
#1275: FILE: drivers/char/rio/rioparam.c:631:
+		writew(TPNULL, &((struct rio_free_list *) PktP)->next);

CHECK:SPACING: No space is necessary after a cast
#1281: FILE: drivers/char/rio/rioparam.c:636:
+		tmp_pointer = (struct rio_free_list *) PktP;

CHECK:SPACING: No space is necessary after a cast
#1294: FILE: drivers/char/rio/rioparam.c:653:
+		*PktP = (struct PKT *) RIO_PTR(PortP->Caddr, readw(PortP->RxRemove) & ~PKT_IN_USE);

CHECK:CAMELCASE: Avoid CamelCase: <RxRemove>
#1294: FILE: drivers/char/rio/rioparam.c:653:
+		*PktP = (struct PKT *) RIO_PTR(PortP->Caddr, readw(PortP->RxRemove) & ~PKT_IN_USE);

CHECK:CAMELCASE: Avoid CamelCase: <RIOCheckIsolated>
#1337: FILE: drivers/char/rio/rioroute.c:79:
+static int RIOCheckIsolated(struct rio_info *, struct Host *, unsigned int);

CHECK:CAMELCASE: Avoid CamelCase: <RIOIsolate>
#1338: FILE: drivers/char/rio/rioroute.c:80:
+static int RIOIsolate(struct rio_info *, struct Host *, unsigned int);

CHECK:CAMELCASE: Avoid CamelCase: <RIOCheck>
#1339: FILE: drivers/char/rio/rioroute.c:81:
+static int RIOCheck(struct Host *, unsigned int);

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#1340: FILE: drivers/char/rio/rioroute.c:82:
+static void RIOConCon(struct rio_info *, struct Host *, unsigned int, unsigned int, unsigned int, unsigned int, int);

CHECK:CAMELCASE: Avoid CamelCase: <RIOConCon>
#1340: FILE: drivers/char/rio/rioroute.c:82:
+static void RIOConCon(struct rio_info *, struct Host *, unsigned int, unsigned int, unsigned int, unsigned int, int);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1348: FILE: drivers/char/rio/rioroute.c:89:
+int RIORouteRup(struct rio_info *p, unsigned int Rup, struct Host *HostP, struct PKT * PacketP)

CHECK:CAMELCASE: Avoid CamelCase: <RIORouteRup>
#1348: FILE: drivers/char/rio/rioroute.c:89:
+int RIORouteRup(struct rio_info *p, unsigned int Rup, struct Host *HostP, struct PKT * PacketP)

CHECK:CAMELCASE: Avoid CamelCase: <RtaType>
#1360: FILE: drivers/char/rio/rioroute.c:100:
+	unsigned short RtaType;

CHECK:CAMELCASE: Avoid CamelCase: <ThisUnit>
#1362: FILE: drivers/char/rio/rioroute.c:102:
+	unsigned int ThisUnit, ThisUnit2;	/* 2 ids to accommodate 16 port RTA */

CHECK:CAMELCASE: Avoid CamelCase: <ThisUnit2>
#1362: FILE: drivers/char/rio/rioroute.c:102:
+	unsigned int ThisUnit, ThisUnit2;	/* 2 ids to accommodate 16 port RTA */

CHECK:CAMELCASE: Avoid CamelCase: <OldUnit>
#1363: FILE: drivers/char/rio/rioroute.c:103:
+	unsigned int OldUnit, NewUnit, OldLink, NewLink;

CHECK:CAMELCASE: Avoid CamelCase: <NewUnit>
#1363: FILE: drivers/char/rio/rioroute.c:103:
+	unsigned int OldUnit, NewUnit, OldLink, NewLink;

CHECK:CAMELCASE: Avoid CamelCase: <OldLink>
#1363: FILE: drivers/char/rio/rioroute.c:103:
+	unsigned int OldUnit, NewUnit, OldLink, NewLink;

CHECK:CAMELCASE: Avoid CamelCase: <NewLink>
#1363: FILE: drivers/char/rio/rioroute.c:103:
+	unsigned int OldUnit, NewUnit, OldLink, NewLink;

CHECK:SPACING: No space is necessary after a cast
#1372: FILE: drivers/char/rio/rioroute.c:121:
+		if (Rup >= (unsigned short) MAX_RUP) {

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1381: FILE: drivers/char/rio/rioroute.c:147:
+			if (readb(&PktCmdP->RouteTopology[ThisLink].Unit) > (unsigned short) MAX_RUP)

CHECK:SPACING: No space is necessary after a cast
#1381: FILE: drivers/char/rio/rioroute.c:147:
+			if (readb(&PktCmdP->RouteTopology[ThisLink].Unit) > (unsigned short) MAX_RUP)

CHECK:CAMELCASE: Avoid CamelCase: <PktCmdP>
#1381: FILE: drivers/char/rio/rioroute.c:147:
+			if (readb(&PktCmdP->RouteTopology[ThisLink].Unit) > (unsigned short) MAX_RUP)

CHECK:CAMELCASE: Avoid CamelCase: <RouteTopology>
#1381: FILE: drivers/char/rio/rioroute.c:147:
+			if (readb(&PktCmdP->RouteTopology[ThisLink].Unit) > (unsigned short) MAX_RUP)

CHECK:CAMELCASE: Avoid CamelCase: <ThisLink>
#1381: FILE: drivers/char/rio/rioroute.c:147:
+			if (readb(&PktCmdP->RouteTopology[ThisLink].Unit) > (unsigned short) MAX_RUP)

CHECK:CAMELCASE: Avoid CamelCase: <RIOFixPhbs>
#1477: FILE: drivers/char/rio/rioroute.c:499:
+void RIOFixPhbs(struct rio_info *p, struct Host *HostP, unsigned int unit)

CHECK:CAMELCASE: Avoid CamelCase: <TxPktP>
#1501: FILE: drivers/char/rio/rioroute.c:520:
+			u16 *TxPktP;

CHECK:CAMELCASE: Avoid CamelCase: <Pkt>
#1502: FILE: drivers/char/rio/rioroute.c:521:
+			struct PKT *Pkt;

CHECK:SPACING: No space is necessary after a cast
#1511: FILE: drivers/char/rio/rioroute.c:558:
+				Pkt = (struct PKT *) RIO_PTR(HostP->Caddr, readw(TxPktP));

CHECK:SPACING: No space is necessary after a cast
#1517: FILE: drivers/char/rio/rioroute.c:563:
+				Pkt = (struct PKT *) ((unsigned long) Pkt & ~PKT_IN_USE);

CHECK:CAMELCASE: Avoid CamelCase: <UnitId>
#1529: FILE: drivers/char/rio/rioroute.c:592:
+static int RIOCheckIsolated(struct rio_info *p, struct Host *HostP, unsigned int UnitId)

CHECK:CAMELCASE: Avoid CamelCase: <GetUnitType>
#1565: FILE: drivers/char/rio/rioroute.c:695:
+unsigned int GetUnitType(unsigned int Uniq)

CHECK:CAMELCASE: Avoid CamelCase: <Uniq>
#1565: FILE: drivers/char/rio/rioroute.c:695:
+unsigned int GetUnitType(unsigned int Uniq)

CHECK:CAMELCASE: Avoid CamelCase: <RIOSetChange>
#1575: FILE: drivers/char/rio/rioroute.c:716:
+int RIOSetChange(struct rio_info *p)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1592: FILE: drivers/char/rio/rioroute.c:731:
+^I^I      struct Host *HostP, $

CHECK:CAMELCASE: Avoid CamelCase: <FromId>
#1593: FILE: drivers/char/rio/rioroute.c:732:
+		      unsigned int FromId,

CHECK:CAMELCASE: Avoid CamelCase: <FromLink>
#1594: FILE: drivers/char/rio/rioroute.c:733:
+		      unsigned int FromLink,

CHECK:CAMELCASE: Avoid CamelCase: <ToId>
#1595: FILE: drivers/char/rio/rioroute.c:734:
+		      unsigned int ToId,

CHECK:CAMELCASE: Avoid CamelCase: <ToLink>
#1596: FILE: drivers/char/rio/rioroute.c:735:
+		      unsigned int ToLink,

CHECK:CAMELCASE: Avoid CamelCase: <Change>
#1597: FILE: drivers/char/rio/rioroute.c:736:
+		      int Change)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1607: FILE: drivers/char/rio/rioroute.c:891:
+int RIOFindFreeID(struct rio_info *p, struct Host *HostP, unsigned int * pID1, unsigned int * pID2)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1607: FILE: drivers/char/rio/rioroute.c:891:
+int RIOFindFreeID(struct rio_info *p, struct Host *HostP, unsigned int * pID1, unsigned int * pID2)

CHECK:CAMELCASE: Avoid CamelCase: <RIOFindFreeID>
#1607: FILE: drivers/char/rio/rioroute.c:891:
+int RIOFindFreeID(struct rio_info *p, struct Host *HostP, unsigned int * pID1, unsigned int * pID2)

CHECK:CAMELCASE: Avoid CamelCase: <pID1>
#1607: FILE: drivers/char/rio/rioroute.c:891:
+int RIOFindFreeID(struct rio_info *p, struct Host *HostP, unsigned int * pID1, unsigned int * pID2)

CHECK:CAMELCASE: Avoid CamelCase: <pID2>
#1607: FILE: drivers/char/rio/rioroute.c:891:
+int RIOFindFreeID(struct rio_info *p, struct Host *HostP, unsigned int * pID1, unsigned int * pID2)

CHECK:CAMELCASE: Avoid CamelCase: <MapP>
#1653: FILE: drivers/char/rio/riotable.c:132:
+				memcpy(MapP->Name, MapP->RtaUniqueNum ? "RTA	NN" : "HOST NN", 8);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1689: FILE: drivers/char/rio/riotable.c:425:
+^I^I$

CHECK:CAMELCASE: Avoid CamelCase: <HostMapP>
#1708: FILE: drivers/char/rio/riotable.c:535:
+							u16 dest_unit = HostMapP->ID;

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#1721: FILE: drivers/char/rio/riotable.c:548:
+								Pkt = (struct PKT *) RIO_PTR(HostP->Caddr, readw(&*TxPktP));

CHECK:SPACING: No space is necessary after a cast
#1721: FILE: drivers/char/rio/riotable.c:548:
+								Pkt = (struct PKT *) RIO_PTR(HostP->Caddr, readw(&*TxPktP));

CHECK:SPACING: No space is necessary after a cast
#1730: FILE: drivers/char/rio/riotable.c:596:
+	if ((MapP->ID != (u16) - 1) && ((int) MapP->ID < (int) 1 || (int) MapP->ID > MAX_RUP)) {

ERROR:SPACING: space prohibited after that '-' (ctx:WxW)
#1730: FILE: drivers/char/rio/riotable.c:596:
+	if ((MapP->ID != (u16) - 1) && ((int) MapP->ID < (int) 1 || (int) MapP->ID > MAX_RUP)) {
 	                       ^

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(int) 1' could be '1'
#1730: FILE: drivers/char/rio/riotable.c:596:
+	if ((MapP->ID != (u16) - 1) && ((int) MapP->ID < (int) 1 || (int) MapP->ID > MAX_RUP)) {

CHECK:SPACING: No space is necessary after a cast
#1739: FILE: drivers/char/rio/riotable.c:642:
+			if (MapP->ID == (u16) - 1) {

ERROR:SPACING: space prohibited after that '-' (ctx:WxW)
#1739: FILE: drivers/char/rio/riotable.c:642:
+			if (MapP->ID == (u16) - 1) {
 			                      ^

CHECK:SPACING: No space is necessary after a cast
#1748: FILE: drivers/char/rio/riotable.c:661:
+				MapP->ID = (u16) nNewID + 1;

CHECK:CAMELCASE: Avoid CamelCase: <nNewID>
#1748: FILE: drivers/char/rio/riotable.c:661:
+				MapP->ID = (u16) nNewID + 1;

CHECK:CAMELCASE: Avoid CamelCase: <SubEnt>
#1769: FILE: drivers/char/rio/riotable.c:739:
+	unsigned int SubEnt;

CHECK:CAMELCASE: Avoid CamelCase: <HostPort>
#1770: FILE: drivers/char/rio/riotable.c:740:
+	unsigned int HostPort;

CHECK:CAMELCASE: Avoid CamelCase: <SecondBlock>
#1781: FILE: drivers/char/rio/riotable.c:804:
+			PortP->SecondBlock = 1;

CHECK:CAMELCASE: Avoid CamelCase: <RIOShortCommand>
#1883: FILE: drivers/char/rio/riotty.c:88:
+int RIOShortCommand(struct rio_info *p, struct Port *PortP, int command, int len, int arg);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1883: FILE: drivers/char/rio/riotty.c:88:
+int RIOShortCommand(struct rio_info *p, struct Port *PortP, int command, int len, int arg);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#1908: FILE: drivers/char/rio/riotty.c:117:
+	rio_dprintk(RIO_DEBUG_TTY, "port open SysPort %d (mapped:%d)\n", SysPort, p->RIOPortp[SysPort]->Mapped);

CHECK:CAMELCASE: Avoid CamelCase: <Mapped>
#1908: FILE: drivers/char/rio/riotty.c:117:
+	rio_dprintk(RIO_DEBUG_TTY, "port open SysPort %d (mapped:%d)\n", SysPort, p->RIOPortp[SysPort]->Mapped);

CHECK:CAMELCASE: Avoid CamelCase: <ModemState>
#1963: FILE: drivers/char/rio/riotty.c:301:
+	if ((PortP->gs.tty->termios->c_cflag & CLOCAL) || (PortP->ModemState & MSVR1_CD)) {

CHECK:CAMELCASE: Avoid CamelCase: <State>
#1974: FILE: drivers/char/rio/riotty.c:307:
+		PortP->State |= RIO_CARR_ON;

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1988: FILE: drivers/char/rio/riotty.c:314:
+		while (!(PortP->State & RIO_CARR_ON) && !(filp->f_flags & O_NONBLOCK) && !p->RIOHalted) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#1988: FILE: drivers/char/rio/riotty.c:314:
+		while (!(PortP->State & RIO_CARR_ON) && !(filp->f_flags & O_NONBLOCK) && !p->RIOHalted) {
+				rio_dprintk(RIO_DEBUG_TTY, "open(%d) sleeping for carr on\n", SysPort);

CHECK:CAMELCASE: Avoid CamelCase: <RIOHalted>
#1988: FILE: drivers/char/rio/riotty.c:314:
+		while (!(PortP->State & RIO_CARR_ON) && !(filp->f_flags & O_NONBLOCK) && !p->RIOHalted) {

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1989: FILE: drivers/char/rio/riotty.c:315:
+				rio_dprintk(RIO_DEBUG_TTY, "open(%d) sleeping for carr on\n", SysPort);

CHECK:CAMELCASE: Avoid CamelCase: <portSem>
#1999: FILE: drivers/char/rio/riotty.c:320:
+			rio_spin_unlock_irqrestore(&PortP->portSem, flags);

CHECK:CAMELCASE: Avoid CamelCase: <RIODelay>
#2000: FILE: drivers/char/rio/riotty.c:321:
+			if (RIODelay(PortP, HUNDRED_MS) == RIO_FAIL) {

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#2006: FILE: drivers/char/rio/riotty.c:327:
+				rio_dprintk(RIO_DEBUG_TTY, "open(%d) sleeping for carr broken by signal\n", SysPort);

CHECK:CAMELCASE: Avoid CamelCase: <RIOPreemptiveCmd>
#2007: FILE: drivers/char/rio/riotty.c:328:
+				RIOPreemptiveCmd(p, PortP, FCLOSE);

CHECK:CAMELCASE: Avoid CamelCase: <RIOClearUp>
#2114: FILE: drivers/char/rio/riotty.c:552:
+static void RIOClearUp(struct Port *PortP)

CHECK:CAMELCASE: Avoid CamelCase: <Id>
#2521: FILE: drivers/char/rio/unixrup.h:48:
+	unsigned int Id;		/* Id number */

CHECK:CAMELCASE: Avoid CamelCase: <BaseSysPort>
#2522: FILE: drivers/char/rio/unixrup.h:49:
+	unsigned int BaseSysPort;	/* SysPort of first tty on this RTA */

CHECK:CAMELCASE: Avoid CamelCase: <ModTypes>
#2523: FILE: drivers/char/rio/unixrup.h:50:
+	unsigned int ModTypes;		/* Modules on this RTA */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000093090.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 31 warnings, 140 checks, 1914 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000093090.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
