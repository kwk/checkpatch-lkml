WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
I seek to keep this swsusp compatible, but it might be a little out of sync with Pavel's changes.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#166: FILE: include/linux/suspend.h:80:
+#define SUSPEND_EAT_MEMORY ^I2$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#182: FILE: include/linux/suspend.h:96:
+#define SUSPEND_LOW^I ^I3$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#183: FILE: include/linux/suspend.h:97:
+#define SUSPEND_MEDIUM^I ^I4$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#184: FILE: include/linux/suspend.h:98:
+#define SUSPEND_HIGH^I  ^I5$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#187: FILE: include/linux/suspend.h:101:
+extern void __suspend_message(unsigned long section, unsigned long level, int log_normally,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#188: FILE: include/linux/suspend.h:102:
+extern void __suspend_message(unsigned long section, unsigned long level, int log_normally,
+		const char *fmt, ...);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#191: FILE: include/linux/suspend.h:105:
+extern int suspend_memory_pool_level(int only_lowmem);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#192: FILE: include/linux/suspend.h:106:
+extern int real_nr_free_pages(void);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sn' - possible side-effects?
#193: FILE: include/linux/suspend.h:107:
+#define suspend_message(sn, lev, log, fmt, a...) \
+do { \
+	if (TEST_DEBUG_STATE(sn)) \
+		suspend2_core_ops->suspend_message(sn, lev, log, fmt, ##a); \
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#197: FILE: include/linux/suspend.h:111:
+} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#198: FILE: include/linux/suspend.h:112:
+#define PRINTFREEMEM(desn) \
+	suspend_message(SUSPEND_MEMORY, SUSPEND_HIGH, 1, \
+		"Free memory %s: %d+%d.\n", desn, \
+		real_nr_free_pages() + suspend_amount_grabbed, \
+		suspend_memory_pool_level(0));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: space required before the open parenthesis '('
#204: FILE: include/linux/suspend.h:118:
+#define PRINTFREEMEM(desn) do { } while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lev' - possible side-effects?
#205: FILE: include/linux/suspend.h:119:
+#define suspend_message(sn, lev, log, fmt, a...) \
+do { \
+	if (lev == 0) \
+		suspend2_core_ops->suspend_message(sn, lev, log, fmt, ##a); \
+} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'lev' may be better as '(lev)' to avoid precedence issues
#205: FILE: include/linux/suspend.h:119:
+#define suspend_message(sn, lev, log, fmt, a...) \
+do { \
+	if (lev == 0) \
+		suspend2_core_ops->suspend_message(sn, lev, log, fmt, ##a); \
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#209: FILE: include/linux/suspend.h:123:
+} while(0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#211: FILE: include/linux/suspend.h:125:
+  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: include/linux/suspend.h:125:
+  $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#224: FILE: include/linux/suspend.h:134:
+extern int software_suspend(void);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#225: FILE: include/linux/suspend.h:135:
+^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#232: FILE: include/linux/suspend.h:142:
+#define SUSPEND_COMMANDLINE_ERROR ^I4$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#262: FILE: include/linux/suspend.h:172:
+#define get_suspend_state() ^I^I(software_suspend_state)$

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#263: FILE: include/linux/suspend.h:173:
+#define restore_suspend_state(saved_state) \
+	do { software_suspend_state = saved_state; } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required before the open parenthesis '('
#264: FILE: include/linux/suspend.h:174:
+	do { software_suspend_state = saved_state; } while(0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#265: FILE: include/linux/suspend.h:175:
+^I$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#267: FILE: include/linux/suspend.h:177:
+extern void suspend_try_suspend(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#274: FILE: include/linux/suspend.h:184:
+extern int freeze_processes(int no_progress);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#275: FILE: include/linux/suspend.h:185:
+extern void thaw_processes(int which_threads);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#277: FILE: include/linux/suspend.h:187:
+extern int pm_prepare_console(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#278: FILE: include/linux/suspend.h:188:
+extern void pm_restore_console(void);

WARNING:SPACING: Unnecessary space before function pointer name
#287: FILE: include/linux/suspend.h:197:
+	void (* do_suspend) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#287: FILE: include/linux/suspend.h:197:
+	void (* do_suspend) (void);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#287: FILE: include/linux/suspend.h:197:
+	void (* do_suspend) (void);
 	      ^

WARNING:SPACING: Unnecessary space before function pointer name
#288: FILE: include/linux/suspend.h:198:
+	int (* do_resume) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#288: FILE: include/linux/suspend.h:198:
+	int (* do_resume) (void);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#288: FILE: include/linux/suspend.h:198:
+	int (* do_resume) (void);
 	     ^

WARNING:SPACING: Unnecessary space before function pointer name
#291: FILE: include/linux/suspend.h:201:
+	void (* suspend1) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#291: FILE: include/linux/suspend.h:201:
+	void (* suspend1) (void);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#291: FILE: include/linux/suspend.h:201:
+	void (* suspend1) (void);
 	      ^

WARNING:SPACING: Unnecessary space before function pointer name
#292: FILE: include/linux/suspend.h:202:
+	void (* suspend2) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#292: FILE: include/linux/suspend.h:202:
+	void (* suspend2) (void);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#292: FILE: include/linux/suspend.h:202:
+	void (* suspend2) (void);
 	      ^

WARNING:SPACING: Unnecessary space before function pointer name
#293: FILE: include/linux/suspend.h:203:
+	void (* resume1) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#293: FILE: include/linux/suspend.h:203:
+	void (* resume1) (void);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#293: FILE: include/linux/suspend.h:203:
+	void (* resume1) (void);
 	      ^

WARNING:SPACING: Unnecessary space before function pointer name
#294: FILE: include/linux/suspend.h:204:
+	void (* resume2) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#294: FILE: include/linux/suspend.h:204:
+	void (* resume2) (void);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#294: FILE: include/linux/suspend.h:204:
+	void (* resume2) (void);
 	      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#295: FILE: include/linux/suspend.h:205:
+^I$

WARNING:SPACING: Unnecessary space before function pointer name
#296: FILE: include/linux/suspend.h:206:
+	void (* free_pool_pages) (struct page *page, unsigned int order);

WARNING:SPACING: Unnecessary space before function pointer arguments
#296: FILE: include/linux/suspend.h:206:
+	void (* free_pool_pages) (struct page *page, unsigned int order);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#296: FILE: include/linux/suspend.h:206:
+	void (* free_pool_pages) (struct page *page, unsigned int order);
 	      ^

WARNING:SPACING: Unnecessary space before function pointer name
#297: FILE: include/linux/suspend.h:207:
+	struct page * (* get_pool_pages) (unsigned int gfp_mask, unsigned int order);

WARNING:SPACING: Unnecessary space before function pointer arguments
#297: FILE: include/linux/suspend.h:207:
+	struct page * (* get_pool_pages) (unsigned int gfp_mask, unsigned int order);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#297: FILE: include/linux/suspend.h:207:
+	struct page * (* get_pool_pages) (unsigned int gfp_mask, unsigned int order);
 	               ^

WARNING:SPACING: Unnecessary space before function pointer name
#299: FILE: include/linux/suspend.h:209:
+	unsigned long (* get_grabbed_pages) (int order);

WARNING:SPACING: Unnecessary space before function pointer arguments
#299: FILE: include/linux/suspend.h:209:
+	unsigned long (* get_grabbed_pages) (int order);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#299: FILE: include/linux/suspend.h:209:
+	unsigned long (* get_grabbed_pages) (int order);
 	               ^

WARNING:SPACING: Unnecessary space before function pointer name
#300: FILE: include/linux/suspend.h:210:
+	void (* cleanup_finished_io) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#300: FILE: include/linux/suspend.h:210:
+	void (* cleanup_finished_io) (void);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#300: FILE: include/linux/suspend.h:210:
+	void (* cleanup_finished_io) (void);
 	      ^

WARNING:SPACING: Unnecessary space before function pointer name
#302: FILE: include/linux/suspend.h:212:
+	void (* suspend_message) (unsigned long, unsigned long, int, const char *, ...);

WARNING:SPACING: Unnecessary space before function pointer arguments
#302: FILE: include/linux/suspend.h:212:
+	void (* suspend_message) (unsigned long, unsigned long, int, const char *, ...);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#302: FILE: include/linux/suspend.h:212:
+	void (* suspend_message) (unsigned long, unsigned long, int, const char *, ...);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#302: FILE: include/linux/suspend.h:212:
+	void (* suspend_message) (unsigned long, unsigned long, int, const char *, ...);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#302: FILE: include/linux/suspend.h:212:
+	void (* suspend_message) (unsigned long, unsigned long, int, const char *, ...);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#302: FILE: include/linux/suspend.h:212:
+	void (* suspend_message) (unsigned long, unsigned long, int, const char *, ...);

WARNING:SPACING: Unnecessary space before function pointer name
#303: FILE: include/linux/suspend.h:213:
+	unsigned long (* update_status) (unsigned long value, unsigned long maximum,

WARNING:SPACING: Unnecessary space before function pointer arguments
#303: FILE: include/linux/suspend.h:213:
+	unsigned long (* update_status) (unsigned long value, unsigned long maximum,

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#303: FILE: include/linux/suspend.h:213:
+	unsigned long (* update_status) (unsigned long value, unsigned long maximum,
 	               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#304: FILE: include/linux/suspend.h:214:
+	unsigned long (* update_status) (unsigned long value, unsigned long maximum,
+		const char *fmt, ...);

WARNING:SPACING: Unnecessary space before function pointer arguments
#305: FILE: include/linux/suspend.h:215:
+	void (*prepare_status) (int printalways, int clearbar, const char *fmt, ...);

WARNING:SPACING: Unnecessary space before function pointer name
#306: FILE: include/linux/suspend.h:216:
+	void (* schedule_message) (int message_number);

WARNING:SPACING: Unnecessary space before function pointer arguments
#306: FILE: include/linux/suspend.h:216:
+	void (* schedule_message) (int message_number);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#306: FILE: include/linux/suspend.h:216:
+	void (* schedule_message) (int message_number);
 	      ^

WARNING:SPACING: Unnecessary space before function pointer name
#307: FILE: include/linux/suspend.h:217:
+	void (* early_boot_plugins) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#307: FILE: include/linux/suspend.h:217:
+	void (* early_boot_plugins) (void);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#307: FILE: include/linux/suspend.h:217:
+	void (* early_boot_plugins) (void);
 	      ^

WARNING:SPACING: Unnecessary space before function pointer name
#308: FILE: include/linux/suspend.h:218:
+	int (* keypress) (unsigned int keycode);

WARNING:SPACING: Unnecessary space before function pointer arguments
#308: FILE: include/linux/suspend.h:218:
+	int (* keypress) (unsigned int keycode);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#308: FILE: include/linux/suspend.h:218:
+	int (* keypress) (unsigned int keycode);
 	     ^

WARNING:SPACING: Unnecessary space before function pointer name
#310: FILE: include/linux/suspend.h:220:
+	void (* verify_checksums) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#310: FILE: include/linux/suspend.h:220:
+	void (* verify_checksums) (void);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#310: FILE: include/linux/suspend.h:220:
+	void (* verify_checksums) (void);
 	      ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#312: FILE: include/linux/suspend.h:222:
+};
+extern volatile struct suspend2_core_ops * suspend2_core_ops;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#312: FILE: include/linux/suspend.h:222:
+extern volatile struct suspend2_core_ops * suspend2_core_ops;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#312: FILE: include/linux/suspend.h:222:
+extern volatile struct suspend2_core_ops * suspend2_core_ops;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#314: FILE: include/linux/suspend.h:224:
+extern void software_suspend_try_resume(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#315: FILE: include/linux/suspend.h:225:
+extern void suspend_handle_keypress(unsigned int keycode, int source);

ERROR:SPACING: space required before the open parenthesis '('
#317: FILE: include/linux/suspend.h:227:
+#define software_suspend_try_resume()	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#318: FILE: include/linux/suspend.h:228:
+#define suspend_handle_keypress(a, b) do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#329: FILE: include/linux/suspend.h:239:
+#define suspend_try_suspend()		do { } while(0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#332: FILE: include/linux/suspend.h:242:
+#define test_suspend_state(bit) ^I(0)$

ERROR:SPACING: space required before the open parenthesis '('
#334: FILE: include/linux/suspend.h:244:
+#define set_suspend_state(bit)		do { } while(0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#335: FILE: include/linux/suspend.h:245:
+#define get_suspend_state() ^I^I(0)$

ERROR:SPACING: space required before the open parenthesis '('
#336: FILE: include/linux/suspend.h:246:
+#define restore_suspend_state(saved_state) do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#337: FILE: include/linux/suspend.h:247:
+#define software_suspend_try_resume()	do { } while(0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#341: FILE: include/linux/suspend.h:251:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#346: FILE: include/linux/suspend.h:256:
+#define suspend2_get_pool_pages(mask, order) (struct page *) suspend_bug()

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#346: FILE: include/linux/suspend.h:256:
+#define suspend2_get_pool_pages(mask, order) (struct page *) suspend_bug()

CHECK:SPACING: No space is necessary after a cast
#347: FILE: include/linux/suspend.h:257:
+#define suspend2_get_grabbed_pages(order) (struct page *) suspend_bug()

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#347: FILE: include/linux/suspend.h:257:
+#define suspend2_get_grabbed_pages(order) (struct page *) suspend_bug()

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#348: FILE: include/linux/suspend.h:258:
+#define suspend2_cleanup_finished_io()	do { BUG(); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#348: FILE: include/linux/suspend.h:258:
+#define suspend2_cleanup_finished_io()	do { BUG(); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#348: FILE: include/linux/suspend.h:258:
+#define suspend2_cleanup_finished_io()	do { BUG(); } while(0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#349: FILE: include/linux/suspend.h:259:
+#define suspend2_verify_checksums() do { BUG(); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#349: FILE: include/linux/suspend.h:259:
+#define suspend2_verify_checksums() do { BUG(); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#349: FILE: include/linux/suspend.h:259:
+#define suspend2_verify_checksums() do { BUG(); } while(0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#353: FILE: include/linux/suspend.h:263:
+	printk("Warning: fake suspend called\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#356: FILE: include/linux/suspend.h:266:
+}
+#define software_resume()		do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#356: FILE: include/linux/suspend.h:266:
+#define software_resume()		do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#357: FILE: include/linux/suspend.h:267:
+#define suspend_handle_keypress(a, b) do { } while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#365: FILE: kernel/power/block_io.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: No space is necessary after a cast
#377: FILE: kernel/power/block_io.h:13:
+#define MAX_READAHEAD (int) (8192)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#377: FILE: kernel/power/block_io.h:13:
+#define MAX_READAHEAD (int) (8192)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#383: FILE: kernel/power/block_io.h:19:
+	struct page * page;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#384: FILE: kernel/power/block_io.h:20:
+	struct block_device * dev;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#385: FILE: kernel/power/block_io.h:21:
+	long blocks[PAGE_SIZE/512];
 	                     ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#388: FILE: kernel/power/block_io.h:24:
+	struct submit_params * next;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#391: FILE: kernel/power/block_io.h:27:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#395: FILE: kernel/power/block_io.h:31:
+/* $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#400: FILE: kernel/power/block_io.h:36:
+	int (*set_block_size) (struct block_device * bdev, int size);

WARNING:SPACING: Unnecessary space before function pointer arguments
#400: FILE: kernel/power/block_io.h:36:
+	int (*set_block_size) (struct block_device * bdev, int size);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#401: FILE: kernel/power/block_io.h:37:
+	int (*get_block_size) (struct block_device * bdev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#401: FILE: kernel/power/block_io.h:37:
+	int (*get_block_size) (struct block_device * bdev);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#402: FILE: kernel/power/block_io.h:38:
+^Iint (*submit_io) (int rw, $

WARNING:SPACING: Unnecessary space before function pointer arguments
#402: FILE: kernel/power/block_io.h:38:
+	int (*submit_io) (int rw, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#403: FILE: kernel/power/block_io.h:39:
+	int (*submit_io) (int rw, 
+		struct submit_params * submit_info, int syncio);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#403: FILE: kernel/power/block_io.h:39:
+		struct submit_params * submit_info, int syncio);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#404: FILE: kernel/power/block_io.h:40:
+	int (*bdev_page_io) (int rw, struct block_device * bdev, long pos,

WARNING:SPACING: Unnecessary space before function pointer arguments
#404: FILE: kernel/power/block_io.h:40:
+	int (*bdev_page_io) (int rw, struct block_device * bdev, long pos,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#405: FILE: kernel/power/block_io.h:41:
+	int (*bdev_page_io) (int rw, struct block_device * bdev, long pos,
+			struct page * page);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#405: FILE: kernel/power/block_io.h:41:
+			struct page * page);

WARNING:SPACING: Unnecessary space before function pointer arguments
#406: FILE: kernel/power/block_io.h:42:
+	void (*wait_on_readahead) (int readahead_index);

WARNING:SPACING: Unnecessary space before function pointer arguments
#407: FILE: kernel/power/block_io.h:43:
+	void (*check_io_stats) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#408: FILE: kernel/power/block_io.h:44:
+	void (*reset_io_stats) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#409: FILE: kernel/power/block_io.h:45:
+	void (*finish_all_io) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#410: FILE: kernel/power/block_io.h:46:
+	int (*prepare_readahead) (int index);

WARNING:SPACING: Unnecessary space before function pointer arguments
#411: FILE: kernel/power/block_io.h:47:
+	void (*cleanup_readahead) (int index);

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#412: FILE: kernel/power/block_io.h:48:
+	struct page ** readahead_pages;

WARNING:SPACING: Unnecessary space before function pointer arguments
#413: FILE: kernel/power/block_io.h:49:
+	int (*readahead_ready) (int readahead_index);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#421: FILE: kernel/power/pageflags.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#422: FILE: kernel/power/pageflags.h:2:
+ * kernel/power/pageflags.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#433: FILE: kernel/power/pageflags.h:13:
+extern unsigned long * in_use_map;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#434: FILE: kernel/power/pageflags.h:14:
+extern unsigned long * pageset2_map;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#435: FILE: kernel/power/pageflags.h:15:
+extern unsigned long * checksum_map;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#437: FILE: kernel/power/pageflags.h:17:
+extern unsigned long * unmap_map;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#440: FILE: kernel/power/pageflags.h:20:
+#define PAGENUMBER(page) (page-mem_map)
                               ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'page' may be better as '(page)' to avoid precedence issues
#440: FILE: kernel/power/pageflags.h:20:
+#define PAGENUMBER(page) (page-mem_map)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#441: FILE: kernel/power/pageflags.h:21:
+#define PAGEINDEX(page) ((PAGENUMBER(page))/(8*sizeof(unsigned long)))
                                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#441: FILE: kernel/power/pageflags.h:21:
+#define PAGEINDEX(page) ((PAGENUMBER(page))/(8*sizeof(unsigned long)))
                                               ^

CHECK:SPACING: No space is necessary after a cast
#442: FILE: kernel/power/pageflags.h:22:
+#define PAGEBIT(page) ((int) ((PAGENUMBER(page))%(8 * sizeof(unsigned long))))

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#442: FILE: kernel/power/pageflags.h:22:
+#define PAGEBIT(page) ((int) ((PAGENUMBER(page))%(8 * sizeof(unsigned long))))
                                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#444: FILE: kernel/power/pageflags.h:24:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#445: FILE: kernel/power/pageflags.h:25:
+ * freepagesmap is used in two ways: $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#446: FILE: kernel/power/pageflags.h:26:
+ * - During suspend, to tag pages which are not used (to speed up $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#448: FILE: kernel/power/pageflags.h:28:
+ * - During resume, to tag pages which are in pagedir1. This does not tag $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#451: FILE: kernel/power/pageflags.h:31:
+#define PageInUse(page) \
+	test_bit(PAGEBIT(page), &in_use_map[PAGEINDEX(page)])

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#453: FILE: kernel/power/pageflags.h:33:
+#define SetPageInUse(page) \
+	set_bit(PAGEBIT(page), &in_use_map[PAGEINDEX(page)])

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#455: FILE: kernel/power/pageflags.h:35:
+#define ClearPageInUse(page) \
+	clear_bit(PAGEBIT(page), &in_use_map[PAGEINDEX(page)])

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#458: FILE: kernel/power/pageflags.h:38:
+#define PagePageset2(page) \
+	(pageset2_map ? \
+		test_bit(PAGEBIT(page), &pageset2_map[PAGEINDEX(page)]) : \
+		0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#462: FILE: kernel/power/pageflags.h:42:
+^I^I^I$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#463: FILE: kernel/power/pageflags.h:43:
+#define SetPagePageset2(page) \
+	set_bit(PAGEBIT(page), &pageset2_map[PAGEINDEX(page)])

CHECK:CAMELCASE: Avoid CamelCase: <TestAndSetPagePageset2>
#465: FILE: kernel/power/pageflags.h:45:
+#define TestAndSetPagePageset2(page) \

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#465: FILE: kernel/power/pageflags.h:45:
+#define TestAndSetPagePageset2(page) \
+	test_and_set_bit(PAGEBIT(page), &pageset2_map[PAGEINDEX(page)])

CHECK:CAMELCASE: Avoid CamelCase: <TestAndClearPagePageset2>
#467: FILE: kernel/power/pageflags.h:47:
+#define TestAndClearPagePageset2(page) \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#467: FILE: kernel/power/pageflags.h:47:
+#define TestAndClearPagePageset2(page) \
+	test_and_clear_bit(PAGEBIT(page), &pageset2_map[PAGEINDEX(page)])

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#469: FILE: kernel/power/pageflags.h:49:
+#define ClearPagePageset2(page)	\
+do { \
+	if (pageset2_map) \
+		clear_bit(PAGEBIT(page), &pageset2_map[PAGEINDEX(page)]); \
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#473: FILE: kernel/power/pageflags.h:53:
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#475: FILE: kernel/power/pageflags.h:55:
+#define PageChecksumIgnore(page) \
+	(checksum_map ? \
+		test_bit(PAGEBIT(page), &checksum_map[PAGEINDEX(page)]) : \
+		0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#480: FILE: kernel/power/pageflags.h:60:
+#define SetPageChecksumIgnore(page) \
+do { \
+	if (checksum_map) \
+		set_bit(PAGEBIT(page), &checksum_map[PAGEINDEX(page)]); \
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#484: FILE: kernel/power/pageflags.h:64:
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#486: FILE: kernel/power/pageflags.h:66:
+#define ClearPageChecksumIgnore(page) \
+do { \
+	if (checksum_map) \
+		clear_bit(PAGEBIT(page), &checksum_map[PAGEINDEX(page)]); \
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#490: FILE: kernel/power/pageflags.h:70:
+} while(0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#492: FILE: kernel/power/pageflags.h:72:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#493: FILE: kernel/power/pageflags.h:73:
+#define SetPageUnmap(page) \
+	set_bit(PAGEBIT(page), &unmap_map[PAGEINDEX(page)])

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#495: FILE: kernel/power/pageflags.h:75:
+#define PageUnmap(page) \
+	test_bit(PAGEBIT(page), &unmap_map[PAGEINDEX(page)])

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#498: FILE: kernel/power/pageflags.h:78:
+extern int allocate_local_pageflags(unsigned long ** pagemap, int setnosave);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#498: FILE: kernel/power/pageflags.h:78:
+extern int allocate_local_pageflags(unsigned long ** pagemap, int setnosave);

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#499: FILE: kernel/power/pageflags.h:79:
+extern int free_local_pageflags(unsigned long ** pagemap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#499: FILE: kernel/power/pageflags.h:79:
+extern int free_local_pageflags(unsigned long ** pagemap);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#500: FILE: kernel/power/pageflags.h:80:
+extern void clear_map(unsigned long * pagemap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#500: FILE: kernel/power/pageflags.h:80:
+extern void clear_map(unsigned long * pagemap);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#505: FILE: kernel/power/plugins.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#530: FILE: kernel/power/plugins.h:26:
+extern unsigned long memory_for_plugins(void);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#542: FILE: kernel/power/plugins.h:38:
+#define SUSPEND_COMMON_IO_OPS \
+	/* Writing the image proper */ \
+	int (*write_init) (int stream_number); \
+	int (*write_chunk) (struct page * buffer_page); \
+	int (*write_cleanup) (void); \
+\
+	/* Reading the image proper */ \
+	int (*read_init) (int stream_number); \
+	int (*read_chunk) (struct page * buffer_page, int sync); \
+	int (*read_cleanup) (void); \
+\
+	/* Reset plugin if image exists but reading aborted */ \
+	void (*noresume_reset) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#544: FILE: kernel/power/plugins.h:40:
+	int (*write_init) (int stream_number); \

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#545: FILE: kernel/power/plugins.h:41:
+	int (*write_chunk) (struct page * buffer_page); \

WARNING:SPACING: Unnecessary space before function pointer arguments
#545: FILE: kernel/power/plugins.h:41:
+	int (*write_chunk) (struct page * buffer_page); \

WARNING:SPACING: Unnecessary space before function pointer arguments
#546: FILE: kernel/power/plugins.h:42:
+	int (*write_cleanup) (void); \

WARNING:SPACING: Unnecessary space before function pointer arguments
#549: FILE: kernel/power/plugins.h:45:
+	int (*read_init) (int stream_number); \

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#550: FILE: kernel/power/plugins.h:46:
+	int (*read_chunk) (struct page * buffer_page, int sync); \

WARNING:SPACING: Unnecessary space before function pointer arguments
#550: FILE: kernel/power/plugins.h:46:
+	int (*read_chunk) (struct page * buffer_page, int sync); \

WARNING:SPACING: Unnecessary space before function pointer arguments
#551: FILE: kernel/power/plugins.h:47:
+	int (*read_cleanup) (void); \

WARNING:SPACING: Unnecessary space before function pointer arguments
#554: FILE: kernel/power/plugins.h:50:
+	void (*noresume_reset) (void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#557: FILE: kernel/power/plugins.h:53:
+	SUSPEND_COMMON_IO_OPS

WARNING:SPACING: Unnecessary space before function pointer arguments
#558: FILE: kernel/power/plugins.h:54:
+	int (*expected_compression) (void);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#563: FILE: kernel/power/plugins.h:59:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#563: FILE: kernel/power/plugins.h:59:
+struct suspend_writer_ops {
+	

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#568: FILE: kernel/power/plugins.h:64:
+	long (*storage_available) (void); // Maximum size of image we can save

ERROR:TRAILING_WHITESPACE: trailing whitespace
#570: FILE: kernel/power/plugins.h:66:
+^I$

WARNING:SPACING: Unnecessary space before function pointer arguments
#571: FILE: kernel/power/plugins.h:67:
+	unsigned long (*storage_allocated) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#573: FILE: kernel/power/plugins.h:69:
+	int (*release_storage) (void);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#574: FILE: kernel/power/plugins.h:70:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#575: FILE: kernel/power/plugins.h:71:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#577: FILE: kernel/power/plugins.h:73:
+^I * of space for the header might result in allocated space $

WARNING:SPACING: Unnecessary space before function pointer arguments
#583: FILE: kernel/power/plugins.h:79:
+	long (*allocate_header_space) (unsigned long space_requested);

WARNING:SPACING: Unnecessary space before function pointer arguments
#584: FILE: kernel/power/plugins.h:80:
+	int (*allocate_storage) (unsigned long space_requested);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#585: FILE: kernel/power/plugins.h:81:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#586: FILE: kernel/power/plugins.h:82:
+^I/* Read and write the metadata */^I$

WARNING:SPACING: Unnecessary space before function pointer arguments
#587: FILE: kernel/power/plugins.h:83:
+	int (*write_header_init) (void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#588: FILE: kernel/power/plugins.h:84:
+	int (*write_header_chunk) (char * buffer_start, int buffer_size);

WARNING:SPACING: Unnecessary space before function pointer arguments
#588: FILE: kernel/power/plugins.h:84:
+	int (*write_header_chunk) (char * buffer_start, int buffer_size);

WARNING:SPACING: Unnecessary space before function pointer arguments
#589: FILE: kernel/power/plugins.h:85:
+	int (*write_header_cleanup) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#591: FILE: kernel/power/plugins.h:87:
+	int (*read_header_init) (void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#592: FILE: kernel/power/plugins.h:88:
+	int (*read_header_chunk) (char * buffer_start, int buffer_size);

WARNING:SPACING: Unnecessary space before function pointer arguments
#592: FILE: kernel/power/plugins.h:88:
+	int (*read_header_chunk) (char * buffer_start, int buffer_size);

WARNING:SPACING: Unnecessary space before function pointer arguments
#593: FILE: kernel/power/plugins.h:89:
+	int (*read_header_cleanup) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#596: FILE: kernel/power/plugins.h:92:
+	int (*prepare_save_ranges) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#597: FILE: kernel/power/plugins.h:93:
+	int (*post_load_ranges) (void);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#598: FILE: kernel/power/plugins.h:94:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#600: FILE: kernel/power/plugins.h:96:
+	int (*parse_image_location) (char * buffer, int only_writer);

WARNING:SPACING: Unnecessary space before function pointer arguments
#600: FILE: kernel/power/plugins.h:96:
+	int (*parse_image_location) (char * buffer, int only_writer);

WARNING:SPACING: Unnecessary space before function pointer arguments
#603: FILE: kernel/power/plugins.h:99:
+	int (*image_exists) (void);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#604: FILE: kernel/power/plugins.h:100:
+^I$

WARNING:SPACING: Unnecessary space before function pointer arguments
#606: FILE: kernel/power/plugins.h:102:
+	void (*mark_resume_attempted) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#609: FILE: kernel/power/plugins.h:105:
+	int (*invalidate_image) (void);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#610: FILE: kernel/power/plugins.h:106:
+^I$

WARNING:SPACING: Unnecessary space before function pointer arguments
#612: FILE: kernel/power/plugins.h:108:
+	int (*wait_on_io) (int flush_all);

WARNING:SPACING: Unnecessary space before function pointer arguments
#618: FILE: kernel/power/plugins.h:114:
+	void (*early_boot_message_prep) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#619: FILE: kernel/power/plugins.h:115:
+	void (*prepare) (void);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#620: FILE: kernel/power/plugins.h:116:
+	void (*message) (

WARNING:SPACING: Unnecessary space before function pointer arguments
#620: FILE: kernel/power/plugins.h:116:
+	void (*message) (

WARNING:SPACING: Unnecessary space before function pointer arguments
#624: FILE: kernel/power/plugins.h:120:
+	void (*log_level_change) (void);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#625: FILE: kernel/power/plugins.h:121:
+	unsigned long (*update_progress) (

WARNING:SPACING: Unnecessary space before function pointer arguments
#625: FILE: kernel/power/plugins.h:121:
+	unsigned long (*update_progress) (

WARNING:SPACING: Unnecessary space before function pointer arguments
#628: FILE: kernel/power/plugins.h:124:
+	void (*cleanup) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#629: FILE: kernel/power/plugins.h:125:
+	int (*keypress) (unsigned int key);

WARNING:SPACING: Unnecessary space before function pointer arguments
#630: FILE: kernel/power/plugins.h:126:
+	void (*post_kernel_restore_redraw) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#636: FILE: kernel/power/plugins.h:132:
+	void (*calculate_checksums) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#637: FILE: kernel/power/plugins.h:133:
+	void (*check_checksums) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#638: FILE: kernel/power/plugins.h:134:
+	void (*print_differences) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#639: FILE: kernel/power/plugins.h:135:
+	int (*allocate_pages) (void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#645: FILE: kernel/power/plugins.h:141:
+	char * name;

WARNING:SPACING: Unnecessary space before function pointer arguments
#648: FILE: kernel/power/plugins.h:144:
+	unsigned long (*memory_needed) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#649: FILE: kernel/power/plugins.h:145:
+	unsigned long (*storage_needed) (void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#650: FILE: kernel/power/plugins.h:146:
+	int (*print_debug_info) (char * buffer, int size);

WARNING:SPACING: Unnecessary space before function pointer arguments
#650: FILE: kernel/power/plugins.h:146:
+	int (*print_debug_info) (char * buffer, int size);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#651: FILE: kernel/power/plugins.h:147:
+	int (*save_config_info) (char * buffer);

WARNING:SPACING: Unnecessary space before function pointer arguments
#651: FILE: kernel/power/plugins.h:147:
+	int (*save_config_info) (char * buffer);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#652: FILE: kernel/power/plugins.h:148:
+	void (*load_config_info) (char * buffer, int len);

WARNING:SPACING: Unnecessary space before function pointer arguments
#652: FILE: kernel/power/plugins.h:148:
+	void (*load_config_info) (char * buffer, int len);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#653: FILE: kernel/power/plugins.h:149:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#655: FILE: kernel/power/plugins.h:151:
+	 * at the start and end of a cycle. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACING: Unnecessary space before function pointer arguments
#656: FILE: kernel/power/plugins.h:152:
+	int (*initialise) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#657: FILE: kernel/power/plugins.h:153:
+	void (*cleanup) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#660: FILE: kernel/power/plugins.h:156:
+	void (*dpm_set_devices) (void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#670: FILE: kernel/power/plugins.h:166:
+extern struct suspend_plugin_ops * active_writer;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#672: FILE: kernel/power/plugins.h:168:
+extern struct suspend_plugin_ops * checksum_plugin;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#673: FILE: kernel/power/plugins.h:169:
+extern void prepare_console_plugins(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#674: FILE: kernel/power/plugins.h:170:
+extern void cleanup_console_plugins(void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#675: FILE: kernel/power/plugins.h:171:
+extern struct suspend_plugin_ops * find_plugin_given_name(char * name);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#675: FILE: kernel/power/plugins.h:171:
+extern struct suspend_plugin_ops * find_plugin_given_name(char * name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#675: FILE: kernel/power/plugins.h:171:
+extern struct suspend_plugin_ops * find_plugin_given_name(char * name);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#676: FILE: kernel/power/plugins.h:172:
+extern struct suspend_plugin_ops * get_next_filter(struct suspend_plugin_ops *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#676: FILE: kernel/power/plugins.h:172:
+extern struct suspend_plugin_ops * get_next_filter(struct suspend_plugin_ops *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct suspend_plugin_ops *' should also have an identifier name
#676: FILE: kernel/power/plugins.h:172:
+extern struct suspend_plugin_ops * get_next_filter(struct suspend_plugin_ops *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#677: FILE: kernel/power/plugins.h:173:
+extern int suspend_register_plugin(struct suspend_plugin_ops * plugin);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#677: FILE: kernel/power/plugins.h:173:
+extern int suspend_register_plugin(struct suspend_plugin_ops * plugin);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#678: FILE: kernel/power/plugins.h:174:
+extern void suspend_move_plugin_tail(struct suspend_plugin_ops * plugin);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#678: FILE: kernel/power/plugins.h:174:
+extern void suspend_move_plugin_tail(struct suspend_plugin_ops * plugin);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#680: FILE: kernel/power/plugins.h:176:
+extern int initialise_suspend_plugins(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#681: FILE: kernel/power/plugins.h:177:
+extern void cleanup_suspend_plugins(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#682: FILE: kernel/power/plugins.h:178:
+extern unsigned long header_storage_for_plugins(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#683: FILE: kernel/power/plugins.h:179:
+extern unsigned long memory_for_plugins(void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#684: FILE: kernel/power/plugins.h:180:
+extern int print_plugin_debug_info(char * buffer, int buffer_size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#684: FILE: kernel/power/plugins.h:180:
+extern int print_plugin_debug_info(char * buffer, int buffer_size);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#685: FILE: kernel/power/plugins.h:181:
+extern int suspend_register_plugin(struct suspend_plugin_ops * plugin);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#685: FILE: kernel/power/plugins.h:181:
+extern int suspend_register_plugin(struct suspend_plugin_ops * plugin);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#686: FILE: kernel/power/plugins.h:182:
+extern void suspend_unregister_plugin(struct suspend_plugin_ops * plugin);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#686: FILE: kernel/power/plugins.h:182:
+extern void suspend_unregister_plugin(struct suspend_plugin_ops * plugin);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#687: FILE: kernel/power/plugins.h:183:
+extern int initialise_suspend_plugins(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#688: FILE: kernel/power/plugins.h:184:
+extern void cleanup_suspend_plugins(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#689: FILE: kernel/power/plugins.h:185:
+extern void suspend_post_restore_redraw(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#726: FILE: kernel/power/proc.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#727: FILE: kernel/power/proc.h:2:
+ * kernel/power/proc.h

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#740: FILE: kernel/power/proc.h:15:
+	char * filename;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#745: FILE: kernel/power/proc.h:20:
+			unsigned long * bit_vector;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#749: FILE: kernel/power/proc.h:24:
+			int * variable;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#754: FILE: kernel/power/proc.h:29:
+			unsigned long * variable;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#759: FILE: kernel/power/proc.h:34:
+			char * variable;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#763: FILE: kernel/power/proc.h:38:
+			void * read_proc;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#764: FILE: kernel/power/proc.h:39:
+			void * write_proc;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#765: FILE: kernel/power/proc.h:40:
+			void * data;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#768: FILE: kernel/power/proc.h:43:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#770: FILE: kernel/power/proc.h:45:
+	 * resume2 entry when it changes */

WARNING:SPACING: Unnecessary space before function pointer name
#771: FILE: kernel/power/proc.h:46:
+	int (* read_proc) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#771: FILE: kernel/power/proc.h:46:
+	int (* read_proc) (void);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#771: FILE: kernel/power/proc.h:46:
+	int (* read_proc) (void);
 	     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#772: FILE: kernel/power/proc.h:47:
+^Iint (* write_proc) (void); $

WARNING:SPACING: Unnecessary space before function pointer name
#772: FILE: kernel/power/proc.h:47:
+	int (* write_proc) (void); 

WARNING:SPACING: Unnecessary space before function pointer arguments
#772: FILE: kernel/power/proc.h:47:
+	int (* write_proc) (void); 

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#772: FILE: kernel/power/proc.h:47:
+	int (* write_proc) (void); 
 	     ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#786: FILE: kernel/power/proc.h:61:
+struct proc_dir_entry * suspend_register_procfile(

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#786: FILE: kernel/power/proc.h:61:
+struct proc_dir_entry * suspend_register_procfile(

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#787: FILE: kernel/power/proc.h:62:
+		struct suspend_proc_data * suspend_proc_data);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#788: FILE: kernel/power/proc.h:63:
+void suspend_unregister_procfile(struct suspend_proc_data * suspend_proc_data);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#794: FILE: kernel/power/range.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#795: FILE: kernel/power/range.h:2:
+ * kernel/power/range.h

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#808: FILE: kernel/power/range.h:15:
+	struct range * first;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#809: FILE: kernel/power/range.h:16:
+	struct range * last;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#815: FILE: kernel/power/range.h:22:
+	char * name;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#816: FILE: kernel/power/range.h:23:
+	struct range * lastaccessed, *prevtolastaccessed, *prevtoprev;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#827: FILE: kernel/power/range.h:34:
+	struct range * next;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#830: FILE: kernel/power/range.h:37:
+
+

CHECK:SPACING: No space is necessary after a cast
#833: FILE: kernel/power/range.h:40:
+		((((unsigned long) x) & PAGE_MASK) + PAGE_SIZE - \

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#836: FILE: kernel/power/range.h:43:
+#define range_for_each(rangechain, rangepointer, value) \
+if ((rangechain)->first) \
+	for ((rangepointer) = (rangechain)->first, (value) = \
+			(rangepointer)->minimum; \
+	     ((rangepointer) && ((rangepointer)->next || (value) <= \
+				 (rangepointer)->maximum)); \
+	     (((value) == (rangepointer)->maximum) ? \
+		((rangepointer) = (rangepointer)->next, (value) = \
+		 ((rangepointer) ? (rangepointer)->minimum : 0)) : \
+			(value)++))

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rangechain' - possible side-effects?
#836: FILE: kernel/power/range.h:43:
+#define range_for_each(rangechain, rangepointer, value) \
+if ((rangechain)->first) \
+	for ((rangepointer) = (rangechain)->first, (value) = \
+			(rangepointer)->minimum; \
+	     ((rangepointer) && ((rangepointer)->next || (value) <= \
+				 (rangepointer)->maximum)); \
+	     (((value) == (rangepointer)->maximum) ? \
+		((rangepointer) = (rangepointer)->next, (value) = \
+		 ((rangepointer) ? (rangepointer)->minimum : 0)) : \
+			(value)++))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rangepointer' - possible side-effects?
#836: FILE: kernel/power/range.h:43:
+#define range_for_each(rangechain, rangepointer, value) \
+if ((rangechain)->first) \
+	for ((rangepointer) = (rangechain)->first, (value) = \
+			(rangepointer)->minimum; \
+	     ((rangepointer) && ((rangepointer)->next || (value) <= \
+				 (rangepointer)->maximum)); \
+	     (((value) == (rangepointer)->maximum) ? \
+		((rangepointer) = (rangepointer)->next, (value) = \
+		 ((rangepointer) ? (rangepointer)->minimum : 0)) : \
+			(value)++))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'value' - possible side-effects?
#836: FILE: kernel/power/range.h:43:
+#define range_for_each(rangechain, rangepointer, value) \
+if ((rangechain)->first) \
+	for ((rangepointer) = (rangechain)->first, (value) = \
+			(rangepointer)->minimum; \
+	     ((rangepointer) && ((rangepointer)->next || (value) <= \
+				 (rangepointer)->maximum)); \
+	     (((value) == (rangepointer)->maximum) ? \
+		((rangepointer) = (rangepointer)->next, (value) = \
+		 ((rangepointer) ? (rangepointer)->minimum : 0)) : \
+			(value)++))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'currentrange' - possible side-effects?
#852: FILE: kernel/power/range.h:59:
+#define GET_RANGE_NEXT(currentrange, currentval) \
+{ \
+	if (currentrange) { \
+		if ((currentval) == (currentrange)->maximum) { \
+			if ((currentrange)->next) { \
+				(currentrange) = (currentrange)->next; \
+				(currentval) = (currentrange)->minimum; \
+			} else { \
+				(currentrange) = NULL; \
+				(currentval) = 0; \
+			} \
+		} else \
+			currentval++; \
+	} \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'currentval' - possible side-effects?
#852: FILE: kernel/power/range.h:59:
+#define GET_RANGE_NEXT(currentrange, currentval) \
+{ \
+	if (currentrange) { \
+		if ((currentval) == (currentrange)->maximum) { \
+			if ((currentrange)->next) { \
+				(currentrange) = (currentrange)->next; \
+				(currentval) = (currentrange)->minimum; \
+			} else { \
+				(currentrange) = NULL; \
+				(currentval) = 0; \
+			} \
+		} else \
+			currentval++; \
+	} \
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#870: FILE: kernel/power/range.h:77:
+int add_to_range_chain(struct rangechain * chain, unsigned long value);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#871: FILE: kernel/power/range.h:78:
+void put_range_chain(struct rangechain * chain);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#872: FILE: kernel/power/range.h:79:
+void print_chain(int debuglevel, struct rangechain * chain, int printasswap);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#876: FILE: kernel/power/range.h:83:
+void relativise_chain(struct rangechain * chain);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#878: FILE: kernel/power/range.h:85:
+void absolutise_chain(struct rangechain * chain);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#881: FILE: kernel/power/range.h:88:
+unsigned long * get_rangepages_list_entry(int index);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#884: FILE: kernel/power/range.h:91:
+extern struct range * first_range_page, * last_range_page;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#884: FILE: kernel/power/range.h:91:
+extern struct range * first_range_page, * last_range_page;
                                         ^

CHECK:SPACING: No space is necessary after a cast
#886: FILE: kernel/power/range.h:93:
+#define RANGE_RELATIVE(x) (struct range *) ((((unsigned long) x) & \

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#886: FILE: kernel/power/range.h:93:
+#define RANGE_RELATIVE(x) (struct range *) ((((unsigned long) x) & \
+			(PAGE_SIZE - 1)) | \
+		((*RANGEPAGELINK(x) & (PAGE_SIZE - 1)) << PAGE_SHIFT))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#886: FILE: kernel/power/range.h:93:
+#define RANGE_RELATIVE(x) (struct range *) ((((unsigned long) x) & \
+			(PAGE_SIZE - 1)) | \
+		((*RANGEPAGELINK(x) & (PAGE_SIZE - 1)) << PAGE_SHIFT))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#889: FILE: kernel/power/range.h:96:
+#define RANGE_ABSOLUTE(entry) (struct range *) \
+	((((unsigned long) (entry)) & (PAGE_SIZE - 1)) | \
+	 (unsigned long) get_rangepages_list_entry(((unsigned long) (entry)) >> PAGE_SHIFT))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'entry' - possible side-effects?
#889: FILE: kernel/power/range.h:96:
+#define RANGE_ABSOLUTE(entry) (struct range *) \
+	((((unsigned long) (entry)) & (PAGE_SIZE - 1)) | \
+	 (unsigned long) get_rangepages_list_entry(((unsigned long) (entry)) >> PAGE_SHIFT))

CHECK:SPACING: No space is necessary after a cast
#890: FILE: kernel/power/range.h:97:
+	((((unsigned long) (entry)) & (PAGE_SIZE - 1)) | \

CHECK:SPACING: No space is necessary after a cast
#891: FILE: kernel/power/range.h:98:
+	 (unsigned long) get_rangepages_list_entry(((unsigned long) (entry)) >> PAGE_SHIFT))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#893: FILE: kernel/power/range.h:100:
+/* swap_entry_to_range_val & range_val_to_swap_entry: $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#895: FILE: kernel/power/range.h:102:
+ * make consecutive range values */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#897: FILE: kernel/power/range.h:104:
+#define range_val_to_swap_entry(val) (swp_entry_t) { (val) }

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#914: FILE: kernel/power/suspend.h:1:
+/*

WARNING:NEW_TYPEDEFS: do not add new typedefs
#932: FILE: kernel/power/suspend.h:19:
+typedef struct pbe {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#935: FILE: kernel/power/suspend.h:22:
+^Iswp_entry_t swap_address;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#936: FILE: kernel/power/suspend.h:23:
+^Iswp_entry_t dummy;^I^I/* we need scratch space at $

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#941: FILE: kernel/power/suspend.h:28:
+#define SUSPEND_PD_PAGES(x)     (((x)*sizeof(struct pbe))/PAGE_SIZE+1)
                                      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#941: FILE: kernel/power/suspend.h:28:
+#define SUSPEND_PD_PAGES(x)     (((x)*sizeof(struct pbe))/PAGE_SIZE+1)
                                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#941: FILE: kernel/power/suspend.h:28:
+#define SUSPEND_PD_PAGES(x)     (((x)*sizeof(struct pbe))/PAGE_SIZE+1)
                                                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#942: FILE: kernel/power/suspend.h:29:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#942: FILE: kernel/power/suspend.h:29:
+   $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#944: FILE: kernel/power/suspend.h:31:
+extern void drain_local_pages(void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#961: FILE: kernel/power/suspend.h:48:
+	struct page * origaddress;	/* Original address of page */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#962: FILE: kernel/power/suspend.h:49:
+	struct page * address;		/* Address of copy of page */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#963: FILE: kernel/power/suspend.h:50:
+	struct range * currentorigrange;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#964: FILE: kernel/power/suspend.h:51:
+	struct range * currentdestrange;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#966: FILE: kernel/power/suspend.h:53:
+	struct pagedir * pagedir;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#983: FILE: kernel/power/suspend.h:70:
+ * for debugging */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#984: FILE: kernel/power/suspend.h:71:
+void set_chain_names(struct pagedir * p);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1007: FILE: kernel/power/suspend.h:94:
+	struct range * unused_ranges;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1019: FILE: kernel/power/suspend.h:106:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1030: FILE: kernel/power/suspend.h:117:
+struct page * get_suspend_pool_pages(unsigned int gfp_mask, unsigned int order);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1033: FILE: kernel/power/suspend.h:120:
+extern void schedule_suspend_message(int message_number);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1036: FILE: kernel/power/suspend.h:123:
+extern void suspend_restore_avenrun(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1037: FILE: kernel/power/suspend.h:124:
+extern void suspend_save_avenrun(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1039: FILE: kernel/power/suspend.h:126:
+extern unsigned long get_highstart_pfn(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1069: FILE: kernel/power/suspend.h:156:
+extern void prepare_status(int printalways, int clearbar, const char *fmt, ...);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1070: FILE: kernel/power/suspend.h:157:
+extern void abort_suspend(const char *fmt, ...);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1072: FILE: kernel/power/suspend.h:159:
+extern int suspend_snprintf(char * buffer, int buffer_size,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1072: FILE: kernel/power/suspend.h:159:
+extern int suspend_snprintf(char * buffer, int buffer_size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1073: FILE: kernel/power/suspend.h:160:
+extern int suspend_snprintf(char * buffer, int buffer_size,
+		const char *fmt, ...);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1076: FILE: kernel/power/suspend.h:163:
+extern unsigned long get_grabbed_pages(int order);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1082: FILE: kernel/power/suspend.h:169:
+void check_shift_keys(int pause, char * message);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1084: FILE: kernel/power/suspend.h:171:
+unsigned long update_status(unsigned long value, unsigned long maximum,
+		const char *fmt, ...);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1086: FILE: kernel/power/suspend.h:173:
+extern int expected_compression_ratio(void);

CHECK:SPACING: No space is necessary after a cast
#1096: FILE: kernel/power/suspend.h:183:
+	 (int) header_storage_for_plugins() + \

ERROR:CODE_INDENT: code indent should use tabs where possible
#1098: FILE: kernel/power/suspend.h:185:
+^I ^I(sizeof(struct plugin_header) + sizeof(int)))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1098: FILE: kernel/power/suspend.h:185:
+^I ^I(sizeof(struct plugin_header) + sizeof(int)))$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1099: FILE: kernel/power/suspend.h:186:
+^I$

CHECK:SPACING: No space is necessary after a cast
#1100: FILE: kernel/power/suspend.h:187:
+#define HEADER_STORAGE_NEEDED ((HEADER_BYTES_NEEDED + (int) PAGE_SIZE - 1) >> PAGE_SHIFT)

ERROR:SPACING: space required before the open parenthesis '('
#1114: FILE: kernel/power/suspend.h:201:
+} while(0)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1146: FILE: kernel/power/suspend.h:233:
+};
+extern void suspend_store_free_mem(int slot, int side);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1146: FILE: kernel/power/suspend.h:233:
+extern void suspend_store_free_mem(int slot, int side);

ERROR:SPACING: space required before the open parenthesis '('
#1149: FILE: kernel/power/suspend.h:236:
+#define suspend_store_free_mem(a, b) do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1151: FILE: kernel/power/suspend.h:238:
+#define cond_show_pcp_lists() do { } while(0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1155: FILE: kernel/power/suspend.h:242:
+extern int expected_compression_ratio(void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1156: FILE: kernel/power/suspend.h:243:
+int print_module_list_to_buffer(char * buffer, int size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1161: FILE: kernel/power/suspend.h:248:
+extern int suspend_wait_for_keypress(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1164: FILE: kernel/power/suspend.h:251:
+extern void smp_suspend(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1165: FILE: kernel/power/suspend.h:252:
+extern void smp_continue(void);

ERROR:SPACING: space required before the open parenthesis '('
#1167: FILE: kernel/power/suspend.h:254:
+#define smp_suspend() do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1168: FILE: kernel/power/suspend.h:255:
+#define smp_continue() do { } while(0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1173: FILE: kernel/power/suspend.h:260:
+extern asmlinkage ssize_t sys_write(unsigned int fd, const char __user * buf, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1173: FILE: kernel/power/suspend.h:260:
+extern asmlinkage ssize_t sys_write(unsigned int fd, const char __user * buf, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1180: FILE: kernel/power/suspend.h:267:
+static inline struct splash_data * get_splash_data(int consolenr)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1182: FILE: kernel/power/suspend.h:269:
+	BUG_ON(consolenr >= MAX_NR_CONSOLES);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1186: FILE: kernel/power/suspend.h:273:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1191: FILE: kernel/power/suspend.h:278:
+extern asmlinkage ssize_t sys_write(unsigned int fd, const char __user * buf, size_t count);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1193: FILE: kernel/power/suspend.h:280:
+extern struct pm_ops * pm_ops;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1194: FILE: kernel/power/suspend.h:281:
+extern dev_t name_to_dev_t(char *line);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1196: FILE: kernel/power/suspend.h:283:
+extern void signal_wake_up(struct task_struct *t, int resume);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1198: FILE: kernel/power/suspend.h:285:
+extern struct partial_device_tree * suspend_device_tree;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1201: FILE: kernel/power/suspend.h:288:
+extern int suspend_map_kernel_page(struct page * page, int enable);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1201: FILE: kernel/power/suspend.h:288:
+extern int suspend_map_kernel_page(struct page * page, int enable);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1204: FILE: kernel/power/suspend.h:291:
+extern void suspend_map_atomic_copy_pages(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1205: FILE: kernel/power/suspend.h:292:
+extern void suspend_unmap_atomic_copy_pages(void);

ERROR:SPACING: space required before the open parenthesis '('
#1207: FILE: kernel/power/suspend.h:294:
+#define suspend_map_atomic_copy_pages() do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1208: FILE: kernel/power/suspend.h:295:
+#define suspend_unmap_atomic_copy_pages() do { } while(0)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000227967.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 158 errors, 137 warnings, 111 checks, 1167 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000227967.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
