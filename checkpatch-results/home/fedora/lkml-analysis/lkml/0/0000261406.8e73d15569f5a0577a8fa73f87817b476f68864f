WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
o This patch introduces the new sysfs_dirent data structure. The sysfs_dirent 

WARNING:TYPO_SPELLING: 'alocated' may be misspelled - perhaps 'allocated'?
#52: 
  got a newly alocated (and hashed) dentry from sysfs_get_dentry() by 
              ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#74: FILE: include/linux/sysfs.h:12:
+#include <asm/atomic.h>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#87: FILE: include/linux/sysfs.h:66:
+^Ivoid ^I^I^I* s_element;$

ERROR:POINTER_LOCATION: "foo 			* bar" should be "foo 			*bar"
#87: FILE: include/linux/sysfs.h:66:
+	void 			* s_element;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo		* bar" should be "foo		*bar"
#90: FILE: include/linux/sysfs.h:69:
+	struct dentry		* s_dentry;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#95: FILE: include/linux/sysfs.h:74:
+#define SYSFS_KOBJ_ATTR ^I0x0004$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#97: FILE: include/linux/sysfs.h:76:
+#define SYSFS_KOBJ_LINK ^I0x0020$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#110: FILE: fs/sysfs/dir.c:15:
+static void sysfs_d_iput(struct dentry * dentry, struct inode * inode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#110: FILE: fs/sysfs/dir.c:15:
+static void sysfs_d_iput(struct dentry * dentry, struct inode * inode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#112: FILE: fs/sysfs/dir.c:17:
+	struct sysfs_dirent * sd = dentry->d_fsdata;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#115: FILE: fs/sysfs/dir.c:20:
+		BUG_ON(sd->s_dentry != dentry);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#119: FILE: fs/sysfs/dir.c:24:
+	iput(inode);
 	^^^^

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#122: FILE: fs/sysfs/dir.c:27:
+static struct dentry_operations sysfs_dentry_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#129: FILE: fs/sysfs/dir.c:34:
+static struct sysfs_dirent * sysfs_new_dirent(struct sysfs_dirent * parent_sd,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#129: FILE: fs/sysfs/dir.c:34:
+static struct sysfs_dirent * sysfs_new_dirent(struct sysfs_dirent * parent_sd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#130: FILE: fs/sysfs/dir.c:35:
+static struct sysfs_dirent * sysfs_new_dirent(struct sysfs_dirent * parent_sd,
+						void * element)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#130: FILE: fs/sysfs/dir.c:35:
+						void * element)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#132: FILE: fs/sysfs/dir.c:37:
+	struct sysfs_dirent * sd;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#147: FILE: fs/sysfs/dir.c:52:
+int sysfs_make_dirent(struct sysfs_dirent * parent_sd, struct dentry * dentry, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#147: FILE: fs/sysfs/dir.c:52:
+int sysfs_make_dirent(struct sysfs_dirent * parent_sd, struct dentry * dentry, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#147: FILE: fs/sysfs/dir.c:52:
+int sysfs_make_dirent(struct sysfs_dirent * parent_sd, struct dentry * dentry, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#148: FILE: fs/sysfs/dir.c:53:
+int sysfs_make_dirent(struct sysfs_dirent * parent_sd, struct dentry * dentry, 
+			void * element, umode_t mode, int type)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#148: FILE: fs/sysfs/dir.c:53:
+			void * element, umode_t mode, int type)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#150: FILE: fs/sysfs/dir.c:55:
+	struct sysfs_dirent * sd;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxW)
#172: FILE: fs/sysfs/dir.c:85:
+	umode_t mode = S_IFDIR| S_IRWXU | S_IRUGO | S_IXUGO;
 	                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0755'.
#172: FILE: fs/sysfs/dir.c:85:
+	umode_t mode = S_IFDIR| S_IRWXU | S_IRUGO | S_IXUGO;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#185: FILE: fs/sysfs/dir.c:93:
+			error = sysfs_make_dirent(p->d_fsdata, *d, k, mode,
+						SYSFS_DIR);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#200: FILE: fs/sysfs/dir.c:124:
+	BUG_ON(!kobj);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#208: FILE: fs/sysfs/dir.c:143:
+	struct sysfs_dirent * sd;

ERROR:CODE_INDENT: code indent should use tabs where possible
#213: FILE: fs/sysfs/dir.c:148:
+ ^Ilist_del_init(&sd->s_sibling);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#213: FILE: fs/sysfs/dir.c:148:
+ ^Ilist_del_init(&sd->s_sibling);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: fs/sysfs/dir.c:148:
+ ^Ilist_del_init(&sd->s_sibling);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#221: FILE: fs/sysfs/dir.c:194:
+			struct sysfs_dirent * sd = d->d_fsdata;

CHECK:BRACES: Unbalanced braces around else statement
#243: FILE: fs/sysfs/dir.c:252:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#256: FILE: fs/sysfs/file.c:349:
+int sysfs_add_file(struct dentry * dir, const struct attribute * attr, int type)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#256: FILE: fs/sysfs/file.c:349:
+int sysfs_add_file(struct dentry * dir, const struct attribute * attr, int type)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#260: FILE: fs/sysfs/file.c:352:
+	struct sysfs_dirent * parent_sd = dir->d_fsdata;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#273: FILE: fs/sysfs/file.c:361:
+^I^I^Ierror = sysfs_make_dirent(parent_sd, dentry, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#274: FILE: fs/sysfs/file.c:362:
+			error = sysfs_make_dirent(parent_sd, dentry, 
+						(void *) attr, mode, type);

CHECK:SPACING: No space is necessary after a cast
#274: FILE: fs/sysfs/file.c:362:
+						(void *) attr, mode, type);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#287: FILE: fs/sysfs/file.c:381:
+	BUG_ON(!kobj || !kobj->dentry || !attr);

CHECK:BRACES: Unbalanced braces around else statement
#299: FILE: fs/sysfs/file.c:416:
+		} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#316: FILE: fs/sysfs/bin.c:166:
+	BUG_ON(!kobj || !kobj->dentry || !attr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#331: FILE: fs/sysfs/bin.c:177:
+^I^I^Ierror = sysfs_make_dirent(parent->d_fsdata, dentry, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#332: FILE: fs/sysfs/bin.c:178:
+^I^I^I^I^I^I  (void *) attr, mode, $

CHECK:SPACING: No space is necessary after a cast
#332: FILE: fs/sysfs/bin.c:178:
+						  (void *) attr, mode, 

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#356: FILE: fs/sysfs/group.c:48:
+	BUG_ON(!kobj || !kobj->dentry);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#393: FILE: fs/sysfs/sysfs.h:7:
+extern int sysfs_make_dirent(struct sysfs_dirent *, struct dentry *, void *, $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#393: FILE: fs/sysfs/sysfs.h:7:
+extern int sysfs_make_dirent(struct sysfs_dirent *, struct dentry *, void *, 

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysfs_dirent *' should also have an identifier name
#393: FILE: fs/sysfs/sysfs.h:7:
+extern int sysfs_make_dirent(struct sysfs_dirent *, struct dentry *, void *, 

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#393: FILE: fs/sysfs/sysfs.h:7:
+extern int sysfs_make_dirent(struct sysfs_dirent *, struct dentry *, void *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#393: FILE: fs/sysfs/sysfs.h:7:
+extern int sysfs_make_dirent(struct sysfs_dirent *, struct dentry *, void *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'umode_t' should also have an identifier name
#393: FILE: fs/sysfs/sysfs.h:7:
+extern int sysfs_make_dirent(struct sysfs_dirent *, struct dentry *, void *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#393: FILE: fs/sysfs/sysfs.h:7:
+extern int sysfs_make_dirent(struct sysfs_dirent *, struct dentry *, void *, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: fs/sysfs/sysfs.h:8:
+extern int sysfs_make_dirent(struct sysfs_dirent *, struct dentry *, void *, 
+				umode_t, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#398: FILE: fs/sysfs/sysfs.h:11:
+extern int sysfs_add_file(struct dentry *, const struct attribute *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#398: FILE: fs/sysfs/sysfs.h:11:
+extern int sysfs_add_file(struct dentry *, const struct attribute *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct attribute *' should also have an identifier name
#398: FILE: fs/sysfs/sysfs.h:11:
+extern int sysfs_add_file(struct dentry *, const struct attribute *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#398: FILE: fs/sysfs/sysfs.h:11:
+extern int sysfs_add_file(struct dentry *, const struct attribute *, int);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#407: FILE: fs/sysfs/sysfs.h:22:
+	char * link_name;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#408: FILE: fs/sysfs/sysfs.h:23:
+	struct kobject * target_kobj;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#414: FILE: fs/sysfs/sysfs.h:28:
+	struct sysfs_dirent * sd = dentry->d_fsdata;

CHECK:SPACING: No space is necessary after a cast
#415: FILE: fs/sysfs/sysfs.h:29:
+	return ((struct kobject *) sd->s_element);

WARNING:LINE_SPACING: Missing a blank line after declarations
#415: FILE: fs/sysfs/sysfs.h:29:
+	struct sysfs_dirent * sd = dentry->d_fsdata;
+	return ((struct kobject *) sd->s_element);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#421: FILE: fs/sysfs/sysfs.h:34:
+	struct sysfs_dirent * sd = dentry->d_fsdata;

CHECK:SPACING: No space is necessary after a cast
#422: FILE: fs/sysfs/sysfs.h:35:
+	return ((struct attribute *) sd->s_element);

WARNING:LINE_SPACING: Missing a blank line after declarations
#422: FILE: fs/sysfs/sysfs.h:35:
+	struct sysfs_dirent * sd = dentry->d_fsdata;
+	return ((struct attribute *) sd->s_element);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#428: FILE: fs/sysfs/sysfs.h:40:
+	struct sysfs_dirent * sd = dentry->d_fsdata;

CHECK:SPACING: No space is necessary after a cast
#429: FILE: fs/sysfs/sysfs.h:41:
+	return ((struct bin_attribute *) sd->s_element);

WARNING:LINE_SPACING: Missing a blank line after declarations
#429: FILE: fs/sysfs/sysfs.h:41:
+	struct sysfs_dirent * sd = dentry->d_fsdata;
+	return ((struct bin_attribute *) sd->s_element);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#440: FILE: fs/sysfs/sysfs.h:50:
+		struct sysfs_dirent * sd = dentry->d_fsdata;

WARNING:LINE_SPACING: Missing a blank line after declarations
#441: FILE: fs/sysfs/sysfs.h:51:
+		struct sysfs_dirent * sd = dentry->d_fsdata;
+		if (sd->s_type & SYSFS_KOBJ_LINK) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#441: FILE: fs/sysfs/sysfs.h:51:
+		if (sd->s_type & SYSFS_KOBJ_LINK) {
[...]
+		} else
[...]

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#442: FILE: fs/sysfs/sysfs.h:52:
+			struct sysfs_symlink * sl = sd->s_element;

WARNING:LINE_SPACING: Missing a blank line after declarations
#443: FILE: fs/sysfs/sysfs.h:53:
+			struct sysfs_symlink * sl = sd->s_element;
+			kobj = kobject_get(sl->target_kobj);

CHECK:BRACES: Unbalanced braces around else statement
#444: FILE: fs/sysfs/sysfs.h:54:
+		} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#452: FILE: fs/sysfs/sysfs.h:62:
+static inline void release_sysfs_dirent(struct sysfs_dirent * sd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#455: FILE: fs/sysfs/sysfs.h:65:
+		struct sysfs_symlink * sl = sd->s_element;

WARNING:LINE_SPACING: Missing a blank line after declarations
#456: FILE: fs/sysfs/sysfs.h:66:
+		struct sysfs_symlink * sl = sd->s_element;
+		kfree(sl->link_name);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#470: FILE: fs/sysfs/symlink.c:56:
+static int sysfs_add_link(struct dentry * dentry, char * name, struct kobject * target)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#470: FILE: fs/sysfs/symlink.c:56:
+static int sysfs_add_link(struct dentry * dentry, char * name, struct kobject * target)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#470: FILE: fs/sysfs/symlink.c:56:
+static int sysfs_add_link(struct dentry * dentry, char * name, struct kobject * target)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#472: FILE: fs/sysfs/symlink.c:58:
+	struct sysfs_dirent * parent_sd = dentry->d_parent->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#473: FILE: fs/sysfs/symlink.c:59:
+	struct sysfs_symlink * sl;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#488: FILE: fs/sysfs/symlink.c:74:
+^Ierror = sysfs_make_dirent(parent_sd, dentry, sl, S_IFLNK|S_IRWXUGO, $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#488: FILE: fs/sysfs/symlink.c:74:
+	error = sysfs_make_dirent(parent_sd, dentry, sl, S_IFLNK|S_IRWXUGO, 
 	                                                        ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#488: FILE: fs/sysfs/symlink.c:74:
+	error = sysfs_make_dirent(parent_sd, dentry, sl, S_IFLNK|S_IRWXUGO, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#489: FILE: fs/sysfs/symlink.c:75:
+	error = sysfs_make_dirent(parent_sd, dentry, sl, S_IFLNK|S_IRWXUGO, 
+				SYSFS_KOBJ_LINK);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#507: FILE: fs/sysfs/symlink.c:98:
+	BUG_ON(!kobj || !kobj->dentry || !name);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#540: FILE: fs/sysfs/inode.c:96:
+	struct sysfs_dirent * sd;

CHECK:BRACES: Unbalanced braces around else statement
#559: FILE: fs/sysfs/inode.c:116:
+		} else

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000261406.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 40 errors, 32 warnings, 20 checks, 445 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000261406.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
