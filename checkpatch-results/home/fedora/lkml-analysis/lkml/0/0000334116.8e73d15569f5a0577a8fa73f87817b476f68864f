WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
This was briefly discussed in April '02 but it was never resolved.  Here goes my

WARNING:TYPO_SPELLING: 'capabilites' may be misspelled - perhaps 'capabilities'?
#61: 
full, and CAP_SETPCAP no longer allows a thread to gain capabilites by calling
                                                        ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: security/capability.c:93:
+    int setuid_nonroot = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: security/capability.c:96:
+    cap_set_full(bprm->cap_inheritable);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: security/capability.c:97:
+    cap_clear(bprm->cap_permitted);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: security/capability.c:98:
+    cap_set_full(bprm->cap_effective);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: security/capability.c:100:
+    if(!(bprm->file->f_vfsmnt->mnt_flags & MNT_NOSUID)) {$

ERROR:SPACING: space required before the open parenthesis '('
#194: FILE: security/capability.c:100:
+    if(!(bprm->file->f_vfsmnt->mnt_flags & MNT_NOSUID)) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#195: FILE: security/capability.c:101:
+        /* Account for suid-ness */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: security/capability.c:102:
+        if(bprm->file->f_dentry->d_inode->i_mode & S_ISUID$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: security/capability.c:102:
+        if(bprm->file->f_dentry->d_inode->i_mode & S_ISUID$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#196: FILE: security/capability.c:102:
+        if(bprm->file->f_dentry->d_inode->i_mode & S_ISUID
[...]
+            if(bprm->file->f_dentry->d_inode->i_uid == 0)

ERROR:SPACING: space required before the open parenthesis '('
#196: FILE: security/capability.c:102:
+        if(bprm->file->f_dentry->d_inode->i_mode & S_ISUID

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: security/capability.c:103:
+         && !issecure(SECURE_NOROOT)) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#197: FILE: security/capability.c:103:
+        if(bprm->file->f_dentry->d_inode->i_mode & S_ISUID
+         && !issecure(SECURE_NOROOT)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: security/capability.c:103:
+         && !issecure(SECURE_NOROOT)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: security/capability.c:104:
+            if(bprm->file->f_dentry->d_inode->i_uid == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: security/capability.c:104:
+            if(bprm->file->f_dentry->d_inode->i_uid == 0)$

ERROR:SPACING: space required before the open parenthesis '('
#198: FILE: security/capability.c:104:
+            if(bprm->file->f_dentry->d_inode->i_uid == 0)

CHECK:BRACES: braces {} should be used on all arms of this statement
#198: FILE: security/capability.c:104:
+            if(bprm->file->f_dentry->d_inode->i_uid == 0)
[...]
+            else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: security/capability.c:105:
+                cap_set_full(bprm->cap_permitted);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: security/capability.c:105:
+                cap_set_full(bprm->cap_permitted);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: security/capability.c:106:
+            else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: security/capability.c:106:
+            else {$

CHECK:BRACES: Unbalanced braces around else statement
#200: FILE: security/capability.c:106:
+            else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#201: FILE: security/capability.c:107:
+                cap_clear(bprm->cap_effective);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: security/capability.c:107:
+                cap_clear(bprm->cap_effective);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: security/capability.c:108:
+                setuid_nonroot = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: security/capability.c:108:
+                setuid_nonroot = 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#203: FILE: security/capability.c:109:
+            }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: security/capability.c:109:
+            }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#208: FILE: security/capability.c:112:
+        /* At this point, VFS capabilities should be applied. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#210: FILE: security/capability.c:114:
+        /* kludge: setuid-nonroot sometimes causes a loss of$

ERROR:CODE_INDENT: code indent should use tabs where possible
#211: FILE: security/capability.c:115:
+         * permitted capabilities.  It should be handled in$

ERROR:CODE_INDENT: code indent should use tabs where possible
#212: FILE: security/capability.c:116:
+         * cap_bprm_compute_creds, but that would require an$

ERROR:CODE_INDENT: code indent should use tabs where possible
#213: FILE: security/capability.c:117:
+         * extra field in the bprm.  This works identically.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#214: FILE: security/capability.c:118:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#215: FILE: security/capability.c:119:
+        if(setuid_nonroot && current->uid != 0 && current->euid == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: security/capability.c:119:
+        if(setuid_nonroot && current->uid != 0 && current->euid == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#215: FILE: security/capability.c:119:
+        if(setuid_nonroot && current->uid != 0 && current->euid == 0)
+            cap_clear(bprm->cap_inheritable);

ERROR:SPACING: space required before the open parenthesis '('
#215: FILE: security/capability.c:119:
+        if(setuid_nonroot && current->uid != 0 && current->euid == 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#216: FILE: security/capability.c:120:
+            cap_clear(bprm->cap_inheritable);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: security/capability.c:120:
+            cap_clear(bprm->cap_inheritable);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#219: FILE: security/capability.c:123:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#235: FILE: security/capability.c:141:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: security/capability.c:145:
+    kernel_cap_t new_permitted;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: security/capability.c:147:
+    new_permitted = cap_intersect (current->cap_permitted,$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#246: FILE: security/capability.c:147:
+    new_permitted = cap_intersect (current->cap_permitted,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#247: FILE: security/capability.c:148:
+    new_permitted = cap_intersect (current->cap_permitted,
+     bprm->cap_inheritable);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: security/capability.c:148:
+     bprm->cap_inheritable);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: security/capability.c:149:
+    new_permitted = cap_intersect (new_permitted,$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#248: FILE: security/capability.c:149:
+    new_permitted = cap_intersect (new_permitted,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#249: FILE: security/capability.c:150:
+    new_permitted = cap_intersect (new_permitted,
+     current->cap_inheritable);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: security/capability.c:150:
+     current->cap_inheritable);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: security/capability.c:151:
+    new_permitted = cap_combine (new_permitted, bprm->cap_permitted);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#250: FILE: security/capability.c:151:
+    new_permitted = cap_combine (new_permitted, bprm->cap_permitted);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: security/capability.c:152:
+    new_permitted = cap_intersect (new_permitted, cap_bset);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#251: FILE: security/capability.c:152:
+    new_permitted = cap_intersect (new_permitted, cap_bset);

ERROR:CODE_INDENT: code indent should use tabs where possible
#264: FILE: security/capability.c:162:
+            new_permitted = cap_intersect(new_permitted,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#264: FILE: security/capability.c:162:
+            new_permitted = cap_intersect(new_permitted,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#265: FILE: security/capability.c:163:
+             current->cap_permitted);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#265: FILE: security/capability.c:163:
+            new_permitted = cap_intersect(new_permitted,
+             current->cap_permitted);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: security/capability.c:163:
+             current->cap_permitted);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#276: FILE: security/capability.c:172:
+            cap_combine(current->cap_effective,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#276: FILE: security/capability.c:172:
+            cap_combine(current->cap_effective,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#277: FILE: security/capability.c:173:
+            bprm->cap_permitted);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#277: FILE: security/capability.c:173:
+            cap_combine(current->cap_effective,
+            bprm->cap_permitted);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#277: FILE: security/capability.c:173:
+            bprm->cap_permitted);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#278: FILE: security/capability.c:174:
+        current->cap_effective =$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: security/capability.c:174:
+        current->cap_effective =$

ERROR:CODE_INDENT: code indent should use tabs where possible
#279: FILE: security/capability.c:175:
+            cap_intersect(current->cap_effective,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: security/capability.c:175:
+            cap_intersect(current->cap_effective,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#280: FILE: security/capability.c:176:
+            bprm->cap_effective);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#280: FILE: security/capability.c:176:
+            cap_intersect(current->cap_effective,
+            bprm->cap_effective);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: security/capability.c:176:
+            bprm->cap_effective);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#281: FILE: security/capability.c:177:
+        current->cap_effective =$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#281: FILE: security/capability.c:177:
+        current->cap_effective =$

ERROR:CODE_INDENT: code indent should use tabs where possible
#282: FILE: security/capability.c:178:
+            cap_intersect(current->cap_effective, new_permitted);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#282: FILE: security/capability.c:178:
+            cap_intersect(current->cap_effective, new_permitted);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#283: FILE: security/capability.c:179:
+        current->cap_permitted = new_permitted;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: security/capability.c:179:
+        current->cap_permitted = new_permitted;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#284: FILE: security/capability.c:180:
+        cap_set_full(current->cap_inheritable);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#284: FILE: security/capability.c:180:
+        cap_set_full(current->cap_inheritable);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000334116.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 32 errors, 41 warnings, 10 checks, 142 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000334116.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
