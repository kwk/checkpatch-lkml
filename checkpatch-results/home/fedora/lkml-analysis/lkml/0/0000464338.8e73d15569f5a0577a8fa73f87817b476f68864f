WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#43: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#44: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#46: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#47: 
#	           ChangeSet	1.456   -> 1.457

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
#	include/linux/mmzone.h	1.8     -> 1.9

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#49: 
#	     mm/page_alloc.c	1.44    -> 1.45

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#50: 
#	         mm/vmscan.c	1.59    -> 1.60

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#51: 
#	        mm/bootmem.c	1.8     -> 1.9

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#52: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#53: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#54: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#55: 
# 02/04/11	riel@duckman.distro.conectiva	1.457

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#56: 
# replace slightly obscure while loops with for_each_zone and

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#57: 
# for_each_pgdat macros, this version has the added optimisation

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#58: 
# of skipping empty zones       (thanks to William Lee Irwin)

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#59: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#60: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#62: 
--- a/include/linux/mmzone.h	Thu Apr 11 21:23:50 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pgdat' - possible side-effects?
#79: FILE: include/linux/mmzone.h:171:
+#define for_each_pgdat(pgdat) \
+	for (pgdat = pgdat_list; pgdat; pgdat = pgdat->node_next)

CHECK:BRACES: braces {} should be used on all arms of this statement
#91: FILE: include/linux/mmzone.h:183:
+		if (zone - pgdat->node_zones < MAX_NR_ZONES - 1)
[...]
+		else if (pgdat->node_next) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#97: FILE: include/linux/mmzone.h:189:
+		} else

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'zone' - possible side-effects?
#120: FILE: include/linux/mmzone.h:212:
+#define for_each_zone(zone) \
+	for(zone = pgdat_list->node_zones; zone; zone = next_zone(zone))

ERROR:SPACING: space required before the open parenthesis '('
#121: FILE: include/linux/mmzone.h:213:
+	for(zone = pgdat_list->node_zones; zone; zone = next_zone(zone))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#123: FILE: include/linux/mmzone.h:215:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#157: FILE: mm/page_alloc.c:487:
+	for_each_zone(zone)
 			sum += zone->free_pages;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000464338.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 20 warnings, 5 checks, 150 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000464338.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
