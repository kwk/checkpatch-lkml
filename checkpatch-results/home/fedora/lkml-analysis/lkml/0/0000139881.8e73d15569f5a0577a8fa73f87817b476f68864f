WARNING:TYPO_SPELLING: 'independant' may be misspelled - perhaps 'independent'?
#32: 
This patch is the architecture independant part of djprobe.
                               ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#64: FILE: include/linux/djprobe.h:1:
+#ifndef _LINUX_DJPROBE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#68: FILE: include/linux/djprobe.h:5:
+ *  include/linux/djprobe.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#81: FILE: include/linux/djprobe.h:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#82: FILE: include/linux/djprobe.h:19:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#87: FILE: include/linux/djprobe.h:24:
+ * ^I^IInitial implementation of Direct jump probe (djprobe)$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#104: FILE: include/linux/djprobe.h:41:
+};
+#define DJPI_EMPTY(djpi)  (list_empty(&djpi->plist))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'djpi' may be better as '(djpi)' to avoid precedence issues
#104: FILE: include/linux/djprobe.h:41:
+#define DJPI_EMPTY(djpi)  (list_empty(&djpi->plist))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#117: FILE: include/linux/djprobe.h:54:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#123: FILE: include/linux/djprobe.h:60:
+extern int arch_prepare_djprobe_instance(struct djprobe_instance *djpi,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#125: FILE: include/linux/djprobe.h:62:
+extern int djprobe_pre_handler(struct kprobe *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kprobe *' should also have an identifier name
#125: FILE: include/linux/djprobe.h:62:
+extern int djprobe_pre_handler(struct kprobe *, struct pt_regs *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#125: FILE: include/linux/djprobe.h:62:
+extern int djprobe_pre_handler(struct kprobe *, struct pt_regs *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#126: FILE: include/linux/djprobe.h:63:
+extern void djprobe_post_handler(struct kprobe *, struct pt_regs *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kprobe *' should also have an identifier name
#126: FILE: include/linux/djprobe.h:63:
+extern void djprobe_post_handler(struct kprobe *, struct pt_regs *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#126: FILE: include/linux/djprobe.h:63:
+extern void djprobe_post_handler(struct kprobe *, struct pt_regs *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#126: FILE: include/linux/djprobe.h:63:
+extern void djprobe_post_handler(struct kprobe *, struct pt_regs *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#128: FILE: include/linux/djprobe.h:65:
+extern void arch_install_djprobe_instance(struct djprobe_instance *djpi);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#129: FILE: include/linux/djprobe.h:66:
+extern void arch_uninstall_djprobe_instance(struct djprobe_instance *djpi);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#137: FILE: include/linux/djprobe.h:74:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#139: FILE: include/linux/djprobe.h:76:
+}
+static inline void unregister_djprobe(struct djprobe *p)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#151: FILE: include/linux/kprobes.h:166:
+extern kprobe_opcode_t *__get_insn_slot(struct kprobe_insn_page_list *pages);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#152: FILE: include/linux/kprobes.h:167:
+extern void __free_insn_slot(struct kprobe_insn_page_list *pages,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#153: FILE: include/linux/kprobes.h:168:
+			     kprobe_opcode_t * slot);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#166: FILE: kernel/djprobe.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#181: FILE: kernel/djprobe.c:16:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#182: FILE: kernel/djprobe.c:17:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#187: FILE: kernel/djprobe.c:22:
+ * ^I^IInitial implementation of Direct jump probe (djprobe)$

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#196: FILE: kernel/djprobe.c:31:
+#include <asm/cacheflush.h>

CHECK:BIT_MACRO: Prefer using the BIT macro
#208: FILE: kernel/djprobe.c:43:
+#define DJPROBE_BLOCK_SIZE (1 << DJPROBE_BLOCK_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#210: FILE: kernel/djprobe.c:45:
+#define DJPROBE_TABLE_SIZE (1 << DJPROBE_HASH_BITS)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#232: FILE: kernel/djprobe.c:67:
+	if (djpi->kp.addr) {
+		unregister_kprobe(&(djpi->kp));
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around djpi->kp
#233: FILE: kernel/djprobe.c:68:
+		unregister_kprobe(&(djpi->kp));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: kernel/djprobe.c:76:
+    struct djprobe_instance *__create_djprobe_instance(struct djprobe *djp,$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#247: FILE: kernel/djprobe.c:82:
+	if (djpi == NULL) {
+		goto out;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!djpi"
#247: FILE: kernel/djprobe.c:82:
+	if (djpi == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!djpi->stub.insn"
#252: FILE: kernel/djprobe.c:87:
+	if (djpi->stub.insn == NULL) {

WARNING:INDENTED_LABEL: labels should not be indented
#269: FILE: kernel/djprobe.c:104:
+      out:

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#287: FILE: kernel/djprobe.c:122:
+			     (long)djpi->kp.addr + DJPI_ARCH_SIZE(djpi))
+			    && ((long)djpi->kp.addr < (long)addr + size)) {

ERROR:SPACING: space required after that close brace '}'
#292: FILE: kernel/djprobe.c:127:
+	}while (idx != eidx);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#300: FILE: kernel/djprobe.c:135:
+	struct djprobe_instance *djpi;
+	down(&djprobe_mutex);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#309: FILE: kernel/djprobe.c:144:
+	if (atomic_dec_and_test(&djprobe_count)) {
+		wake_up_all(&djprobe_wqh);
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#318: FILE: kernel/djprobe.c:153:
+	struct work_struct *wk;
+	lock_cpu_hotplug();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#337: FILE: kernel/djprobe.c:172:
+	BUG_ON(in_interrupt());

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#342: FILE: kernel/djprobe.c:177:
+	if ((ret = in_kprobes_functions((unsigned long)addr)) != 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!djpi"
#359: FILE: kernel/djprobe.c:194:
+	if (djpi == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "kp"
#367: FILE: kernel/djprobe.c:202:
+		if (kp != NULL) {

WARNING:INDENTED_LABEL: labels should not be indented
#374: FILE: kernel/djprobe.c:209:
+       fail:

WARNING:INDENTED_LABEL: labels should not be indented
#383: FILE: kernel/djprobe.c:218:
+       out:

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#392: FILE: kernel/djprobe.c:227:
+	BUG_ON(in_interrupt());

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#415: FILE: kernel/djprobe.c:250:
+__initcall(init_djprobe);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#417: FILE: kernel/djprobe.c:252:
+EXPORT_SYMBOL_GPL(register_djprobe);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#418: FILE: kernel/djprobe.c:253:
+EXPORT_SYMBOL_GPL(unregister_djprobe);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "get_djprobe_instance"
#445: FILE: kernel/kprobes.c:489:
+	    get_djprobe_instance(p->addr, 1) != NULL)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000139881.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 27 warnings, 19 checks, 380 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000139881.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
