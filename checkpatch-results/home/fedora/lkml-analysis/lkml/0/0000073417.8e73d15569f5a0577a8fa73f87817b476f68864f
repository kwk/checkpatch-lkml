WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#91: FILE: arch/x86_64/kernel/vsyscall.c:40:
+__section_xtime_lock DEFINE_SEQLOCK(__xtime_lock);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument '__xtime_lock' should also have an identifier name
#91: FILE: arch/x86_64/kernel/vsyscall.c:40:
+__section_xtime_lock DEFINE_SEQLOCK(__xtime_lock);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#280: FILE: include/linux/seqlock.h:47:
+#define seqlock_init(x) \
+		do { *(x) = (seqlock_t) __SEQLOCK_UNLOCKED(x); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#280: FILE: include/linux/seqlock.h:47:
+#define seqlock_init(x) \
+		do { *(x) = (seqlock_t) __SEQLOCK_UNLOCKED(x); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:SPACING: No space is necessary after a cast
#281: FILE: include/linux/seqlock.h:48:
+		do { *(x) = (seqlock_t) __SEQLOCK_UNLOCKED(x); } while (0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#283: FILE: include/linux/seqlock.h:50:
+#define DEFINE_SEQLOCK(x) \
+		seqlock_t x = __SEQLOCK_UNLOCKED(x)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#297: FILE: include/linux/spinlock_types.h:47:
+# define __SPIN_LOCK_UNLOCKED(lockname)					\
 	(spinlock_t)	{	.raw_lock = __RAW_SPIN_LOCK_UNLOCKED,	\
 				.magic = SPINLOCK_MAGIC,		\
 				.owner = SPINLOCK_OWNER_INIT,		\
 				.owner_cpu = -1 }

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#303: FILE: include/linux/spinlock_types.h:52:
+#define __RW_LOCK_UNLOCKED(lockname)					\
 	(rwlock_t)	{	.raw_lock = __RAW_RW_LOCK_UNLOCKED,	\
 				.magic = RWLOCK_MAGIC,			\
 				.owner = SPINLOCK_OWNER_INIT,		\
 				.owner_cpu = -1 }

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#310: FILE: include/linux/spinlock_types.h:58:
+# define __SPIN_LOCK_UNLOCKED(lockname) \
 	(spinlock_t)	{	.raw_lock = __RAW_SPIN_LOCK_UNLOCKED }

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#313: FILE: include/linux/spinlock_types.h:60:
+#define __RW_LOCK_UNLOCKED(lockname) \
 	(rwlock_t)	{	.raw_lock = __RAW_RW_LOCK_UNLOCKED }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#322: FILE: include/linux/spinlock_types.h:67:
+#define DEFINE_SPINLOCK(x)	spinlock_t x = __SPIN_LOCK_UNLOCKED(x)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#323: FILE: include/linux/spinlock_types.h:68:
+#define DEFINE_RWLOCK(x)	rwlock_t x = __RW_LOCK_UNLOCKED(x)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#442: FILE: net/ipv4/xfrm4_policy.c:302:
+^I.lock = ^I^I__RW_LOCK_UNLOCKED(xfrm4_policy_afinfo.lock),$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000073417.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 4 warnings, 5 checks, 268 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000073417.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
