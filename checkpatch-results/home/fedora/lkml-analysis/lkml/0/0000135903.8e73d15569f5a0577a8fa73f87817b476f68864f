WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#23: 
This adds a backend, written by Deepak Saxena <dsaxena@plexity.net> and George

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#57: FILE: arch/arm/kernel/kgdb.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#58: FILE: arch/arm/kernel/kgdb.c:2:
+ * arch/arm/kernel/kgdb.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/atomic.h> instead of <asm/atomic.h>
#81: FILE: arch/arm/kernel/kgdb.c:25:
+#include <asm/atomic.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#82: FILE: arch/arm/kernel/kgdb.c:26:
+#include <asm/io.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#83: FILE: arch/arm/kernel/kgdb.c:27:
+#include <asm/pgtable.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#85: FILE: arch/arm/kernel/kgdb.c:29:
+#include <asm/uaccess.h>

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!task"
#154: FILE: arch/arm/kernel/kgdb.c:98:
+	if (task == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#197: FILE: arch/arm/kernel/kgdb.c:141:
+		 * Try to read optional parameter, pc unchanged if no parm.
 		                                                      ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#203: FILE: arch/arm/kernel/kgdb.c:147:
+		if (kgdb_hex2long(&ptr, &addr)) {
[...]
+		} else if (compiled_break == 1) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'regsiter' may be misspelled - perhaps 'register'?
#246: FILE: arch/arm/kernel/kgdb.c:190:
+ * We regsiter a hook specifically looking for the KGB break inst
       ^^^^^^^^

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#258: FILE: arch/arm/kernel/kgdb.c:202:
+struct kgdb_arch arch_kgdb_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#270: FILE: arch/arm/kernel/kgdb-jmp.S:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#271: FILE: arch/arm/kernel/kgdb-jmp.S:2:
+ * arch/arm/kernel/kgdb-jmp.S

WARNING:RETURN_VOID: void function return statements are not generally useful
#362: FILE: arch/arm/kernel/traps.c:679:
+	return;
+}

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/kgdb.h> instead of <asm/kgdb.h>
#378: FILE: arch/arm/mach-ixp2000/core.c:37:
+#include <asm/kgdb.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/kgdb.h> instead of <asm/kgdb.h>
#401: FILE: arch/arm/mach-ixp2000/ixdp2x01.c:41:
+#include <asm/kgdb.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/kgdb.h> instead of <asm/kgdb.h>
#443: FILE: arch/arm/mach-ixp4xx/ixdp425-setup.c:26:
+#include <asm/kgdb.h>

WARNING:MISPLACED_INIT: __initdata should be placed after osk_serial_ports[OMAP_MAX_NR_PORTS]
#488: FILE: arch/arm/mach-omap1/board-osk.c:49:
+static int __initdata osk_serial_ports[OMAP_MAX_NR_PORTS] = {1, 1, 1};

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#519: FILE: arch/arm/mach-pxa/kgdb-serial.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#520: FILE: arch/arm/mach-pxa/kgdb-serial.c:2:
+ * linux/arch/arm/mach-pxa/kgdb-serial.c

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#535: FILE: arch/arm/mach-pxa/kgdb-serial.c:17:
+#include <asm/processor.h>

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#564: FILE: arch/arm/mach-pxa/kgdb-serial.c:46:
+static volatile unsigned long *port = (unsigned long *)&UART;

WARNING:LINE_SPACING: Missing a blank line after declarations
#603: FILE: arch/arm/mach-pxa/kgdb-serial.c:85:
+	unsigned char c;
+	if (!(CKEN & CKEN_UART) || port[UART_IER] != IER_UUE)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#611: FILE: arch/arm/mach-pxa/kgdb-serial.c:93:
+struct kgdb_io kgdb_io_ops = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#634: FILE: arch/arm/mach-versatile/kgdb_serial.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#635: FILE: arch/arm/mach-versatile/kgdb_serial.c:2:
+ * arch/arm/mach-versatile/kgdb_serial.c

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#649: FILE: arch/arm/mach-versatile/kgdb_serial.c:16:
+#include <asm/io.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#650: FILE: arch/arm/mach-versatile/kgdb_serial.c:17:
+#include <asm/processor.h>

ERROR:SPACING: space required after that ',' (ctx:VxV)
#667: FILE: arch/arm/mach-versatile/kgdb_serial.c:34:
+#define UART_PUT_CR(p,c)        writel((c), (p) + UART010_CR)
                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#669: FILE: arch/arm/mach-versatile/kgdb_serial.c:36:
+#define UART_PUT_LCRL(p,c)	writel((c), (p) + UART010_LCRL)
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#671: FILE: arch/arm/mach-versatile/kgdb_serial.c:38:
+#define UART_PUT_LCRM(p,c)	writel((c), (p) + UART010_LCRM)
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#673: FILE: arch/arm/mach-versatile/kgdb_serial.c:40:
+#define UART_PUT_LCRH(p,c)	writel((c), (p) + UART010_LCRH)
                        ^

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#682: FILE: arch/arm/mach-versatile/kgdb_serial.c:49:
+static volatile unsigned char *port = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#682: FILE: arch/arm/mach-versatile/kgdb_serial.c:49:
+static volatile unsigned char *port = NULL;

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#749: FILE: arch/arm/mach-versatile/kgdb_serial.c:116:
+struct kgdb_io kgdb_io_ops = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#798: FILE: include/asm-arm/kgdb.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#799: FILE: include/asm-arm/kgdb.h:2:
+ * include/asm-arm/kgdb.h

CHECK:LINE_SPACING: Please don't use multiple blank lines
#815: FILE: include/asm-arm/kgdb.h:18:
+
+

WARNING:REPEATED_WORD: Possible repeated word: 'much'
#833: FILE: include/asm-arm/kgdb.h:36:
+ * make our lives much much simpler. :)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#843: FILE: include/asm-arm/kgdb.h:46:
+#define^IBREAKPOINT()^I^I^Iasm(".word ^I0xe7ffdeff")$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#845: FILE: include/asm-arm/kgdb.h:48:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#846: FILE: include/asm-arm/kgdb.h:49:
+extern void kgdb_handle_bus_error(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#897: FILE: include/asm-arm/system.h:412:
+static inline unsigned long __cmpxchg_u32(volatile int *m, unsigned long old,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#898: FILE: include/asm-arm/system.h:413:
+static inline unsigned long __cmpxchg_u32(volatile int *m, unsigned long old,
+					unsigned long new)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#913: FILE: include/asm-arm/system.h:428:
+/* This function doesn't exist, so you'll get a linker error
+   if something tries to do an invalid cmpxchg().  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#913: FILE: include/asm-arm/system.h:428:
+   if something tries to do an invalid cmpxchg().  */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#914: FILE: include/asm-arm/system.h:429:
+extern void __cmpxchg_called_with_bad_pointer(void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#916: FILE: include/asm-arm/system.h:431:
+static inline unsigned long __cmpxchg(volatile void * ptr, unsigned long old,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#916: FILE: include/asm-arm/system.h:431:
+static inline unsigned long __cmpxchg(volatile void * ptr, unsigned long old,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#917: FILE: include/asm-arm/system.h:432:
+static inline unsigned long __cmpxchg(volatile void * ptr, unsigned long old,
+	unsigned long new, int size)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#927: FILE: include/asm-arm/system.h:442:
+#define cmpxchg(ptr,o,n)						 \
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#927: FILE: include/asm-arm/system.h:442:
+#define cmpxchg(ptr,o,n)						 \
                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#927: FILE: include/asm-arm/system.h:442:
+#define cmpxchg(ptr,o,n)						 \
+  ({									 \
+     __typeof__(*(ptr)) _o_ = (o);					 \
+     __typeof__(*(ptr)) _n_ = (n);					 \
+     (__typeof__(*(ptr))) __cmpxchg((ptr), (unsigned long)_o_,		 \
+				    (unsigned long)_n_, sizeof(*(ptr))); \
+  })

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#928: FILE: include/asm-arm/system.h:443:
+  ({^I^I^I^I^I^I^I^I^I \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#929: FILE: include/asm-arm/system.h:444:
+     __typeof__(*(ptr)) _o_ = (o);^I^I^I^I^I \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#930: FILE: include/asm-arm/system.h:445:
+     __typeof__(*(ptr)) _n_ = (n);^I^I^I^I^I \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#931: FILE: include/asm-arm/system.h:446:
+     (__typeof__(*(ptr))) __cmpxchg((ptr), (unsigned long)_o_,^I^I \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#933: FILE: include/asm-arm/system.h:448:
+  })$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000135903.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 33 warnings, 18 checks, 794 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000135903.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
