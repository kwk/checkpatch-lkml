WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#69: FILE: include/linux/sched.h:342:
+#define get_group_info(group_info) do { \
+	atomic_inc(&(group_info)->usage); \
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'group_info' - possible side-effects?
#73: FILE: include/linux/sched.h:346:
+#define put_group_info(group_info) do { \
+	if (atomic_dec_and_test(&(group_info)->usage)) \
+		groups_free(group_info); \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#82: FILE: include/linux/sched.h:355:
+#define GROUP_AT(gi, i) \
+    ((gi)->blocks[(i)/NGROUPS_PER_BLOCK][(i)%NGROUPS_PER_BLOCK])

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#83: FILE: include/linux/sched.h:356:
+    ((gi)->blocks[(i)/NGROUPS_PER_BLOCK][(i)%NGROUPS_PER_BLOCK])$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#83: FILE: include/linux/sched.h:356:
+    ((gi)->blocks[(i)/NGROUPS_PER_BLOCK][(i)%NGROUPS_PER_BLOCK])
                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#83: FILE: include/linux/sched.h:356:
+    ((gi)->blocks[(i)/NGROUPS_PER_BLOCK][(i)%NGROUPS_PER_BLOCK])
                                             ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#85: FILE: include/linux/sched.h:358:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#149: FILE: kernel/sys.c:1104:
+	nblocks = (gidsetsize/NGROUPS_PER_BLOCK) +
 	                     ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#150: FILE: kernel/sys.c:1105:
+	    (gidsetsize%NGROUPS_PER_BLOCK?1:0);
 	               ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#150: FILE: kernel/sys.c:1105:
+	    (gidsetsize%NGROUPS_PER_BLOCK?1:0);
 	                                 ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#150: FILE: kernel/sys.c:1105:
+	    (gidsetsize%NGROUPS_PER_BLOCK?1:0);
 	                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#151: FILE: kernel/sys.c:1106:
+	group_info = kmalloc(sizeof(*group_info) + nblocks*sizeof(gid_t *),
 	                                                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#152: FILE: kernel/sys.c:1107:
+	group_info = kmalloc(sizeof(*group_info) + nblocks*sizeof(gid_t *),
+	    GFP_USER);

WARNING:LINE_SPACING: Missing a blank line after declarations
#164: FILE: kernel/sys.c:1119:
+			gid_t *b;
+			b = (void *)__get_free_page(GFP_USER);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#173: FILE: kernel/sys.c:1128:
+	while (--i >= 0) {
+		free_page((unsigned long)group_info->blocks[i]);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#184: FILE: kernel/sys.c:1139:
+		int i;
+		for (i = 0; i < group_info->nblocks; i++)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#192: FILE: kernel/sys.c:1147:
+static int groups_to_user(gid_t __user *grouplist,
+    struct group_info *group_info)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: kernel/sys.c:1147:
+    struct group_info *group_info)$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#202: FILE: kernel/sys.c:1157:
+		if (copy_to_user(grouplist+off, group_info->blocks[i], len))
 		                          ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#211: FILE: kernel/sys.c:1166:
+static int groups_from_user(struct group_info *group_info,
+    gid_t __user *grouplist)
+ {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#212: FILE: kernel/sys.c:1167:
+static int groups_from_user(struct group_info *group_info,
+    gid_t __user *grouplist)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: kernel/sys.c:1167:
+    gid_t __user *grouplist)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: kernel/sys.c:1168:
+ {$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#223: FILE: kernel/sys.c:1177:
+		if (copy_from_user(group_info->blocks[i], grouplist+off, len))
 		                                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#271: FILE: kernel/sys.c:1225:
+		int mid = (left+right)/2;
 		               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#271: FILE: kernel/sys.c:1225:
+		int mid = (left+right)/2;
 		                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#273: FILE: kernel/sys.c:1227:
+		int cmp = grp - GROUP_AT(group_info, mid);
+		if (cmp > 0)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#350: FILE: kernel/sys.c:1296:
+	if ((unsigned)gidsetsize > NGROUPS_MAX)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#454: FILE: kernel/uid16.c:111:
+static int groups16_to_user(old_gid_t __user *grouplist,
+    struct group_info *group_info)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#454: FILE: kernel/uid16.c:111:
+    struct group_info *group_info)$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#459: FILE: kernel/uid16.c:116:
+	if (group_info->ngroups > TASK_SIZE/sizeof(group))
 	                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#462: FILE: kernel/uid16.c:119:
+	if (!access_ok(VERIFY_WRITE, grouplist,
+	    group_info->ngroups * sizeof(group)))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#467: FILE: kernel/uid16.c:124:
+		if (__put_user(group, grouplist+i))
 		                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#475: FILE: kernel/uid16.c:132:
+static int groups16_from_user(struct group_info *group_info,
+    old_gid_t __user *grouplist)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#475: FILE: kernel/uid16.c:132:
+    old_gid_t __user *grouplist)$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#480: FILE: kernel/uid16.c:137:
+	if (group_info->ngroups > TASK_SIZE/sizeof(group))
 	                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#483: FILE: kernel/uid16.c:140:
+	if (!access_ok(VERIFY_READ, grouplist,
+	    group_info->ngroups * sizeof(group)))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#487: FILE: kernel/uid16.c:144:
+		if (__get_user(group, grouplist+i))
 		                               ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#539: FILE: kernel/uid16.c:183:
+	if ((unsigned)gidsetsize > NGROUPS_MAX)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#579: FILE: fs/proc/array.c:180:
+	for (g = 0; g < min(p->group_info->ngroups,NGROUPS_SMALL); g++)
 	                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#580: FILE: fs/proc/array.c:181:
+		buffer += sprintf(buffer, "%d ", GROUP_AT(p->group_info,g));
 		                                                       ^

ERROR:SPACING: space required before the open parenthesis '('
#778: FILE: fs/nfsd/nfs4state.c:247:
+	for(i = 0; i < SVC_CRED_NGROUPS; i++)

WARNING:SPACING: Unnecessary space before function pointer arguments
#802: FILE: include/linux/security.h:1118:
+	int (*task_setgroups) (struct group_info *group_info);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#811: FILE: include/linux/security.h:1672:
+static inline int security_task_setgroups (struct group_info *group_info)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#814: FILE: include/linux/security.h:1674:
+	return security_ops->task_setgroups (group_info);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#823: FILE: include/linux/security.h:2301:
+static inline int security_task_setgroups (struct group_info *group_info)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#835: FILE: security/dummy.c:542:
+static int dummy_task_setgroups (struct group_info *group_info)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#865: FILE: arch/ia64/ia32/sys_ia32.c:2422:
+	if (group_info->ngroups > TASK_SIZE/sizeof(group))
 	                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#868: FILE: arch/ia64/ia32/sys_ia32.c:2425:
+	if (!access_ok(VERIFY_WRITE, grouplist,
+	    group_info->ngroups * sizeof(group)))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#873: FILE: arch/ia64/ia32/sys_ia32.c:2430:
+		if (__put_user(group, grouplist+i))
 		                               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#886: FILE: arch/ia64/ia32/sys_ia32.c:2443:
+	if (group_info->ngroups > TASK_SIZE/sizeof(group))
 	                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#889: FILE: arch/ia64/ia32/sys_ia32.c:2446:
+	if (!access_ok(VERIFY_READ, grouplist,
+	    group_info->ngroups * sizeof(group)))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#893: FILE: arch/ia64/ia32/sys_ia32.c:2450:
+		if (__get_user(group, grouplist+i))
 		                               ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#953: FILE: arch/ia64/ia32/sys_ia32.c:2491:
+	if ((unsigned)gidsetsize > NGROUPS_MAX)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1004: FILE: arch/s390/kernel/compat_linux.c:198:
+	if (group_info->ngroups > TASK_SIZE/sizeof(group))
 	                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1007: FILE: arch/s390/kernel/compat_linux.c:201:
+	if (!access_ok(VERIFY_WRITE, grouplist,
+	    group_info->ngroups * sizeof(group)))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1012: FILE: arch/s390/kernel/compat_linux.c:206:
+		if (__put_user(group, grouplist+i))
 		                               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1024: FILE: arch/s390/kernel/compat_linux.c:218:
+	if (group_info->ngroups > TASK_SIZE/sizeof(group))
 	                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1027: FILE: arch/s390/kernel/compat_linux.c:221:
+	if (!access_ok(VERIFY_READ, grouplist,
+	    group_info->ngroups * sizeof(group)))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1031: FILE: arch/s390/kernel/compat_linux.c:225:
+		if (__get_user(group, grouplist+i))
 		                               ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1082: FILE: arch/s390/kernel/compat_linux.c:264:
+	if ((unsigned)gidsetsize > NGROUPS_MAX)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1120: FILE: arch/sparc64/kernel/sys_sparc32.c:187:
+	if (group_info->ngroups > TASK_SIZE/sizeof(group))
 	                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1123: FILE: arch/sparc64/kernel/sys_sparc32.c:190:
+	if (!access_ok(VERIFY_WRITE, grouplist,
+	    group_info->ngroups * sizeof(group)))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1128: FILE: arch/sparc64/kernel/sys_sparc32.c:195:
+		if (__put_user(group, grouplist+i))
 		                               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1140: FILE: arch/sparc64/kernel/sys_sparc32.c:207:
+	if (group_info->ngroups > TASK_SIZE/sizeof(group))
 	                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1143: FILE: arch/sparc64/kernel/sys_sparc32.c:210:
+	if (!access_ok(VERIFY_READ, grouplist,
+	    group_info->ngroups * sizeof(group)))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1147: FILE: arch/sparc64/kernel/sys_sparc32.c:214:
+		if (__get_user(group, grouplist+i))
 		                               ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1198: FILE: arch/sparc64/kernel/sys_sparc32.c:253:
+	if ((unsigned)gidsetsize > NGROUPS_MAX)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000307884.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 21 warnings, 43 checks, 1274 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000307884.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
