WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#26: 
Signed-Off-By: dhowells@redhat.com

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#49: FILE: arch/frv/mm/cache-page.c:1:
+/* cache-page.c: whole-page cache wrangling functions for MMU linux

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: No space is necessary after a cast
#78: FILE: arch/frv/mm/cache-page.c:30:
+	frv_dcache_writeback((unsigned long) vaddr, (unsigned long) vaddr + PAGE_SIZE);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#104: FILE: arch/frv/mm/cache-page.c:56:
+	start = (start & ~PAGE_MASK) | (unsigned long) vaddr;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#119: FILE: arch/frv/mm/dma-alloc.c:1:
+/* dma-alloc.c: consistent DMA memory allocation

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#160: FILE: arch/frv/mm/dma-alloc.c:42:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#162: FILE: arch/frv/mm/dma-alloc.c:44:
+#include <asm/mmu_context.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#163: FILE: arch/frv/mm/dma-alloc.c:45:
+#include <asm/pgtable.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#165: FILE: arch/frv/mm/dma-alloc.c:47:
+#include <asm/uaccess.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/smp.h> instead of <asm/smp.h>
#166: FILE: arch/frv/mm/dma-alloc.c:48:
+#include <asm/smp.h>

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#208: FILE: arch/frv/mm/dma-alloc.c:90:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#216: FILE: arch/frv/mm/dma-alloc.c:98:
+		BUG();

CHECK:SPACING: No space is necessary after a cast
#227: FILE: arch/frv/mm/dma-alloc.c:109:
+	ret = (void *) va;

CHECK:SPACING: No space is necessary after a cast
#230: FILE: arch/frv/mm/dma-alloc.c:112:
+	*dma_handle = pa = virt_to_bus((void *) page);

CHECK:SPACING: No space is necessary after a cast
#247: FILE: arch/frv/mm/dma-alloc.c:129:
+		vfree((void *) va);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#265: FILE: arch/frv/mm/dma-alloc.c:147:
+		BUG();

CHECK:SPACING: No space is necessary after a cast
#274: FILE: arch/frv/mm/dma-alloc.c:156:
+	unsigned long start = (unsigned long) vaddr;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#279: FILE: arch/frv/mm/dma-alloc.c:161:
+		BUG();

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#309: FILE: arch/frv/mm/elf-fdpic.c:1:
+/* elf-fdpic.c: ELF FDPIC memory layout management

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#347: FILE: arch/frv/mm/elf-fdpic.c:39:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#347: FILE: arch/frv/mm/elf-fdpic.c:39:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#366: FILE: arch/frv/mm/elf-fdpic.c:58:
+unsigned long arch_get_unmapped_area(struct file *filp, unsigned long addr, unsigned long len,
                                                   ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#419: FILE: arch/frv/mm/elf-fdpic.c:111:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#420: FILE: arch/frv/mm/elf-fdpic.c:112:
+	printk("[area] l=%lx (ENOMEM) f='%s'\n",

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#421: FILE: arch/frv/mm/elf-fdpic.c:113:
+	       len, filp ? filp->f_dentry->d_name.name : "");
 	            ^^^^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#426: FILE: arch/frv/mm/elf-fdpic.c:118:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#427: FILE: arch/frv/mm/elf-fdpic.c:119:
+	printk("[area] l=%lx ad=%lx f='%s'\n",

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#428: FILE: arch/frv/mm/elf-fdpic.c:120:
+	       len, addr, filp ? filp->f_dentry->d_name.name : "");
 	                  ^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#436: FILE: arch/frv/mm/extable.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#437: FILE: arch/frv/mm/extable.c:2:
+ * linux/arch/frv/mm/extable.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#443: FILE: arch/frv/mm/extable.c:8:
+#include <asm/uaccess.h>

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#445: FILE: arch/frv/mm/extable.c:10:
+extern const struct exception_table_entry __attribute__((aligned(8))) __start___ex_table[];

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#446: FILE: arch/frv/mm/extable.c:11:
+extern const struct exception_table_entry __attribute__((aligned(8))) __stop___ex_table[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#447: FILE: arch/frv/mm/extable.c:12:
+extern const void __memset_end, __memset_user_error_lr, __memset_user_error_handler;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#448: FILE: arch/frv/mm/extable.c:13:
+extern const void __memcpy_end, __memcpy_user_error_lr, __memcpy_user_error_handler;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#449: FILE: arch/frv/mm/extable.c:14:
+extern spinlock_t modlist_lock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#459: FILE: arch/frv/mm/extable.c:24:
+        while (first <= last) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#459: FILE: arch/frv/mm/extable.c:24:
+        while (first <= last) {$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#460: FILE: arch/frv/mm/extable.c:25:
+		const struct exception_table_entry __attribute__((aligned(8))) *mid;

ERROR:CODE_INDENT: code indent should use tabs where possible
#465: FILE: arch/frv/mm/extable.c:30:
+                if (diff == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#465: FILE: arch/frv/mm/extable.c:30:
+                if (diff == 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#466: FILE: arch/frv/mm/extable.c:31:
+                        return mid->fixup;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#466: FILE: arch/frv/mm/extable.c:31:
+                        return mid->fixup;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#467: FILE: arch/frv/mm/extable.c:32:
+                else if (diff < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#467: FILE: arch/frv/mm/extable.c:32:
+                else if (diff < 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#468: FILE: arch/frv/mm/extable.c:33:
+                        first = mid + 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#468: FILE: arch/frv/mm/extable.c:33:
+                        first = mid + 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#469: FILE: arch/frv/mm/extable.c:34:
+                else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#469: FILE: arch/frv/mm/extable.c:34:
+                else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#470: FILE: arch/frv/mm/extable.c:35:
+                        last = mid - 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#470: FILE: arch/frv/mm/extable.c:35:
+                        last = mid - 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#471: FILE: arch/frv/mm/extable.c:36:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#471: FILE: arch/frv/mm/extable.c:36:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#472: FILE: arch/frv/mm/extable.c:37:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#472: FILE: arch/frv/mm/extable.c:37:
+        return 0;$

CHECK:SPACING: No space is necessary after a cast
#484: FILE: arch/frv/mm/extable.c:49:
+	if (__frame->lr == (unsigned long) &__memset_user_error_lr &&

CHECK:SPACING: No space is necessary after a cast
#485: FILE: arch/frv/mm/extable.c:50:
+	    (unsigned long) &memset <= pc && pc < (unsigned long) &__memset_end

CHECK:SPACING: No space is necessary after a cast
#491: FILE: arch/frv/mm/extable.c:56:
+		return (unsigned long) &__memset_user_error_handler;

CHECK:SPACING: No space is necessary after a cast
#493: FILE: arch/frv/mm/extable.c:58:
+	else if (__frame->lr == (unsigned long) &__memcpy_user_error_lr &&

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#493: FILE: arch/frv/mm/extable.c:58:
+	}
+	else if (__frame->lr == (unsigned long) &__memcpy_user_error_lr &&

CHECK:SPACING: No space is necessary after a cast
#494: FILE: arch/frv/mm/extable.c:59:
+		 (unsigned long) &memcpy <= pc && pc < (unsigned long) &__memcpy_end

CHECK:SPACING: No space is necessary after a cast
#500: FILE: arch/frv/mm/extable.c:65:
+		return (unsigned long) &__memcpy_user_error_handler;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mp"
#515: FILE: arch/frv/mm/extable.c:80:
+	for (mp = module_list; mp != NULL; mp = mp->next) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mp->ex_table_start"
#516: FILE: arch/frv/mm/extable.c:81:
+		if (mp->ex_table_start == NULL || !(mp->flags & (MOD_RUNNING | MOD_INITIALIZING)))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#531: FILE: arch/frv/mm/fault.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#532: FILE: arch/frv/mm/fault.c:2:
+ *  linux/arch/frv/mm/fault.c

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#554: FILE: arch/frv/mm/fault.c:24:
+#include <asm/pgtable.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#555: FILE: arch/frv/mm/fault.c:25:
+#include <asm/uaccess.h>

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#574: FILE: arch/frv/mm/fault.c:44:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#580: FILE: arch/frv/mm/fault.c:50:
+	printk("do_page_fault(%d,%lx [%s],%lx)\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_page_fault', this function's name, in a string
#580: FILE: arch/frv/mm/fault.c:50:
+	printk("do_page_fault(%d,%lx [%s],%lx)\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#632: FILE: arch/frv/mm/fault.c:102:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#633: FILE: arch/frv/mm/fault.c:103:
+			printk("[%d] ### Access below stack @%lx (sp=%lx)\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#636: FILE: arch/frv/mm/fault.c:106:
+			printk("[%d] ### Code: [%08lx] %02x %02x %02x %02x %02x %02x %02x %02x\n",

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#639: FILE: arch/frv/mm/fault.c:109:
+			       ((u8*)__frame->pc)[0],

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#640: FILE: arch/frv/mm/fault.c:110:
+			       ((u8*)__frame->pc)[1],

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#641: FILE: arch/frv/mm/fault.c:111:
+			       ((u8*)__frame->pc)[2],

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#642: FILE: arch/frv/mm/fault.c:112:
+			       ((u8*)__frame->pc)[3],

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#643: FILE: arch/frv/mm/fault.c:113:
+			       ((u8*)__frame->pc)[4],

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#644: FILE: arch/frv/mm/fault.c:114:
+			       ((u8*)__frame->pc)[5],

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#645: FILE: arch/frv/mm/fault.c:115:
+			       ((u8*)__frame->pc)[6],

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#646: FILE: arch/frv/mm/fault.c:116:
+			       ((u8*)__frame->pc)[7]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#674: FILE: arch/frv/mm/fault.c:144:
+			printk("WP fault at %08lx\n", __frame->pc);

CHECK:SPACING: No space is necessary after a cast
#728: FILE: arch/frv/mm/fault.c:198:
+		info.si_addr = (void *) ear0;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#735: FILE: arch/frv/mm/fault.c:205:
+	if ((fixup = search_exception_table(__frame->pc)) != 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#748: FILE: arch/frv/mm/fault.c:218:
+		printk(KERN_ALERT "Unable to handle kernel NULL pointer dereference");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#750: FILE: arch/frv/mm/fault.c:220:
+		printk(KERN_ALERT "Unable to handle kernel paging request");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#751: FILE: arch/frv/mm/fault.c:221:
+	printk(" at virtual addr %08lx\n", ear0);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#752: FILE: arch/frv/mm/fault.c:222:
+	printk("  PC  : %08lx\n", __frame->pc);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#753: FILE: arch/frv/mm/fault.c:223:
+	printk("  EXC : esr0=%08lx ear0=%08lx\n", esr0, ear0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#758: FILE: arch/frv/mm/fault.c:228:
+	printk(KERN_ALERT "  LRAI: %08lx\n", lrai);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#759: FILE: arch/frv/mm/fault.c:229:
+	printk(KERN_ALERT "  LRAD: %08lx\n", lrad);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#767: FILE: arch/frv/mm/fault.c:237:
+	printk(KERN_ALERT "  PGE : %8p { PME %08lx }\n", pge, _pme);

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_V>
#769: FILE: arch/frv/mm/fault.c:239:
+	if (_pme & xAMPRx_V) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#774: FILE: arch/frv/mm/fault.c:244:
+			     : "r" (_pme | xAMPRx_L|xAMPRx_SS_16Kb|xAMPRx_S|xAMPRx_C|xAMPRx_V)
 			                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#774: FILE: arch/frv/mm/fault.c:244:
+			     : "r" (_pme | xAMPRx_L|xAMPRx_SS_16Kb|xAMPRx_S|xAMPRx_C|xAMPRx_V)
 			                                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#774: FILE: arch/frv/mm/fault.c:244:
+			     : "r" (_pme | xAMPRx_L|xAMPRx_SS_16Kb|xAMPRx_S|xAMPRx_C|xAMPRx_V)
 			                                                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#774: FILE: arch/frv/mm/fault.c:244:
+			     : "r" (_pme | xAMPRx_L|xAMPRx_SS_16Kb|xAMPRx_S|xAMPRx_C|xAMPRx_V)
 			                                                            ^

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_L>
#774: FILE: arch/frv/mm/fault.c:244:
+			     : "r" (_pme | xAMPRx_L|xAMPRx_SS_16Kb|xAMPRx_S|xAMPRx_C|xAMPRx_V)

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_SS_16Kb>
#774: FILE: arch/frv/mm/fault.c:244:
+			     : "r" (_pme | xAMPRx_L|xAMPRx_SS_16Kb|xAMPRx_S|xAMPRx_C|xAMPRx_V)

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_S>
#774: FILE: arch/frv/mm/fault.c:244:
+			     : "r" (_pme | xAMPRx_L|xAMPRx_SS_16Kb|xAMPRx_S|xAMPRx_C|xAMPRx_V)

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_C>
#774: FILE: arch/frv/mm/fault.c:244:
+			     : "r" (_pme | xAMPRx_L|xAMPRx_SS_16Kb|xAMPRx_S|xAMPRx_C|xAMPRx_V)

CHECK:SPACING: No space is necessary after a cast
#777: FILE: arch/frv/mm/fault.c:247:
+		pte = (pte_t *) damlr + __pte_index(ear0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#782: FILE: arch/frv/mm/fault.c:252:
+		printk(KERN_ALERT "  PTE : %8p { %08lx }\n", pte, val);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#794: FILE: arch/frv/mm/fault.c:264:
+	printk("VM: killing process %s\n", current->comm);

CHECK:SPACING: No space is necessary after a cast
#809: FILE: arch/frv/mm/fault.c:279:
+	info.si_addr = (void *) ear0;

CHECK:SPACING: No space is necessary after a cast
#834: FILE: arch/frv/mm/fault.c:304:
+		pgd = (pgd_t *) __get_TTBR();

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#858: FILE: arch/frv/mm/highmem.c:1:
+/* highmem.c: arch-specific highmem stuff

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#881: FILE: arch/frv/mm/highmem.c:24:
+		BUG();

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#895: FILE: arch/frv/mm/init.c:1:
+/* init.c: memory initialisation for FRV

ERROR:TRAILING_WHITESPACE: trailing whitespace
#908: FILE: arch/frv/mm/init.c:14:
+ *    - Copyright (C) 2000  Lineo, Inc.  (www.lineo.com) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#928: FILE: arch/frv/mm/init.c:34:
+#include <asm/pgtable.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#930: FILE: arch/frv/mm/init.c:36:
+#include <asm/mmu_context.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#958: FILE: arch/frv/mm/init.c:64:
+ * $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#965: FILE: arch/frv/mm/init.c:71:
+	printk("\nMem-info:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#980: FILE: arch/frv/mm/init.c:86:
+	printk("%d pages of RAM\n",total);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#980: FILE: arch/frv/mm/init.c:86:
+	printk("%d pages of RAM\n",total);
 	                          ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#981: FILE: arch/frv/mm/init.c:87:
+	printk("%d free pages\n",free);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#981: FILE: arch/frv/mm/init.c:87:
+	printk("%d free pages\n",free);
 	                        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#982: FILE: arch/frv/mm/init.c:88:
+	printk("%d reserved pages\n",reserved);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#982: FILE: arch/frv/mm/init.c:88:
+	printk("%d reserved pages\n",reserved);
 	                            ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#983: FILE: arch/frv/mm/init.c:89:
+	printk("%d pages shared\n",shared);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#983: FILE: arch/frv/mm/init.c:89:
+	printk("%d pages shared\n",shared);
 	                          ^

CHECK:SPACING: No space is necessary after a cast
#999: FILE: arch/frv/mm/init.c:105:
+	empty_bad_page_table	= (unsigned long) alloc_bootmem_pages(PAGE_SIZE);

CHECK:SPACING: No space is necessary after a cast
#1000: FILE: arch/frv/mm/init.c:106:
+	empty_bad_page		= (unsigned long) alloc_bootmem_pages(PAGE_SIZE);

CHECK:SPACING: No space is necessary after a cast
#1001: FILE: arch/frv/mm/init.c:107:
+	empty_zero_page		= (unsigned long) alloc_bootmem_pages(PAGE_SIZE);

CHECK:SPACING: No space is necessary after a cast
#1003: FILE: arch/frv/mm/init.c:109:
+	memset((void *) empty_zero_page, 0, PAGE_SIZE);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1044: FILE: arch/frv/mm/init.c:150:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1075: FILE: arch/frv/mm/init.c:181:
+^I$

CHECK:SPACING: No space is necessary after a cast
#1076: FILE: arch/frv/mm/init.c:182:
+	codek = ((unsigned long) &_etext - (unsigned long) &_stext) >> 10;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1085: FILE: arch/frv/mm/init.c:191:
+	printk("Memory available: %luKiB/%luKiB RAM, %luKiB/%luKiB ROM (%dKiB kernel code, %dKiB data)\n",

CHECK:SPACING: No space is necessary after a cast
#1105: FILE: arch/frv/mm/init.c:211:
+	start = PAGE_ALIGN((unsigned long) &__init_begin);	/* round up */

CHECK:SPACING: No space is necessary after a cast
#1106: FILE: arch/frv/mm/init.c:212:
+	end   = ((unsigned long) &__init_end) & PAGE_MASK;	/* round down */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1116: FILE: arch/frv/mm/init.c:222:
+	printk("Freeing unused kernel memory: %ldKiB freed (0x%lx - 0x%lx)\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1129: FILE: arch/frv/mm/init.c:235:
+	int pages = 0;
+	for (; start < end; start += PAGE_SIZE) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1136: FILE: arch/frv/mm/init.c:242:
+	printk("Freeing initrd memory: %dKiB freed\n", (pages * PAGE_SIZE) >> 10);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1143: FILE: arch/frv/mm/kmap.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#1160: FILE: arch/frv/mm/kmap.c:18:
+#include <asm/io.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1216: FILE: arch/frv/mm/mmu-context.c:1:
+/* mmu-context.c: MMU context allocation and management

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1239: FILE: arch/frv/mm/mmu-context.c:24:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1259: FILE: arch/frv/mm/mmu-context.c:44:
+static unsigned get_cxn(mm_context_t *ctx)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1263: FILE: arch/frv/mm/mmu-context.c:48:
+	unsigned cxn;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1268: FILE: arch/frv/mm/mmu-context.c:53:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1268: FILE: arch/frv/mm/mmu-context.c:53:
+	else {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1276: FILE: arch/frv/mm/mmu-context.c:61:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#1276: FILE: arch/frv/mm/mmu-context.c:61:
+		else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1285: FILE: arch/frv/mm/mmu-context.c:70:
+			BUG_ON(_p == &cxn_owners_lru);

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_M>
#1338: FILE: arch/frv/mm/mmu-context.c:123:
+		     :: "r"(_pgd | xAMPRx_L | xAMPRx_M | xAMPRx_SS_16Kb |

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1430: FILE: arch/frv/mm/pgalloc.c:1:
+/* pgalloc.c: page directory & page table allocation

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#1447: FILE: arch/frv/mm/pgalloc.c:18:
+#include <asm/cacheflush.h>

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(PAGE_SIZE) over __attribute__((aligned(PAGE_SIZE)))
#1449: FILE: arch/frv/mm/pgalloc.c:20:
+pgd_t swapper_pg_dir[PTRS_PER_PGD] __attribute__((aligned(PAGE_SIZE)));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1454: FILE: arch/frv/mm/pgalloc.c:25:
+	pte_t *pte = (pte_t *)__get_free_page(GFP_KERNEL|__GFP_REPEAT);
 	                                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1455: FILE: arch/frv/mm/pgalloc.c:26:
+	pte_t *pte = (pte_t *)__get_free_page(GFP_KERNEL|__GFP_REPEAT);
+	if (pte)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1465: FILE: arch/frv/mm/pgalloc.c:36:
+	page = alloc_pages(GFP_KERNEL|__GFP_HIGHMEM|__GFP_REPEAT, 0);
 	                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1465: FILE: arch/frv/mm/pgalloc.c:36:
+	page = alloc_pages(GFP_KERNEL|__GFP_HIGHMEM|__GFP_REPEAT, 0);
 	                                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1467: FILE: arch/frv/mm/pgalloc.c:38:
+	page = alloc_pages(GFP_KERNEL|__GFP_REPEAT, 0);
 	                             ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1483: FILE: arch/frv/mm/pgalloc.c:54:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1483: FILE: arch/frv/mm/pgalloc.c:54:
+	else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1484: FILE: arch/frv/mm/pgalloc.c:55:
+		BUG_ON(pmd & xAMPRx_SS);

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_SS>
#1484: FILE: arch/frv/mm/pgalloc.c:55:
+		BUG_ON(pmd & xAMPRx_SS);

CHECK:SPACING: No space is necessary after a cast
#1492: FILE: arch/frv/mm/pgalloc.c:63:
+	frv_dcache_writeback((unsigned long) pmdptr, (unsigned long) (pmdptr + 1));

CHECK:SPACING: No space is necessary after a cast
#1515: FILE: arch/frv/mm/pgalloc.c:86:
+	page->index = (unsigned long) pgd_list;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1515: FILE: arch/frv/mm/pgalloc.c:86:
+	struct page *page = virt_to_page(pgd);
+	page->index = (unsigned long) pgd_list;

CHECK:SPACING: No space is necessary after a cast
#1517: FILE: arch/frv/mm/pgalloc.c:88:
+		pgd_list->private = (unsigned long) &page->index;

CHECK:SPACING: No space is necessary after a cast
#1519: FILE: arch/frv/mm/pgalloc.c:90:
+	page->private = (unsigned long) &pgd_list;

CHECK:SPACING: No space is necessary after a cast
#1525: FILE: arch/frv/mm/pgalloc.c:96:
+	next = (struct page *) page->index;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1525: FILE: arch/frv/mm/pgalloc.c:96:
+	struct page *next, **pprev, *page = virt_to_page(pgd);
+	next = (struct page *) page->index;

CHECK:SPACING: No space is necessary after a cast
#1526: FILE: arch/frv/mm/pgalloc.c:97:
+	pprev = (struct page **) page->private;

CHECK:SPACING: No space is necessary after a cast
#1529: FILE: arch/frv/mm/pgalloc.c:100:
+		next->private = (unsigned long) pprev;

CHECK:SPACING: No space is necessary after a cast
#1539: FILE: arch/frv/mm/pgalloc.c:110:
+	memcpy((pgd_t *) pgd + USER_PGDS_IN_LAST_PML4,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pgtable_cache_init', this function's name, in a string
#1587: FILE: arch/frv/mm/pgalloc.c:158:
+		panic("pgtable_cache_init(): Cannot create pgd cache");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1593: FILE: arch/frv/mm/tlb-flush.S:1:
+/* tlb-flush.S: TLB flushing routines

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1782: FILE: arch/frv/mm/tlb-miss.S:1:
+/* tlb-miss.S: TLB miss handlers

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1866: FILE: arch/frv/mm/tlb-miss.S:85:
+^I$

WARNING:TYPO_SPELLING: 'PTD' may be misspelled - perhaps 'PDF'?
#1939: FILE: arch/frv/mm/tlb-miss.S:158:
+	# access the PTD with EAR0[25:14]
 	             ^^^

WARNING:TYPO_SPELLING: 'PTD' may be misspelled - perhaps 'PDF'?
#1941: FILE: arch/frv/mm/tlb-miss.S:160:
+	# - the PTD holds 4096 PTEs
 	        ^^^

WARNING:TYPO_SPELLING: 'PTD' may be misspelled - perhaps 'PDF'?
#1942: FILE: arch/frv/mm/tlb-miss.S:161:
+	# - the PTD must be accessed uncached
 	        ^^^

WARNING:TYPO_SPELLING: 'PTD' may be misspelled - perhaps 'PDF'?
#1999: FILE: arch/frv/mm/tlb-miss.S:218:
+	# the PTE we want wasn't in the PTD we have mapped, so we need to go looking for a more
 	                                ^^^

WARNING:TYPO_SPELLING: 'PTD' may be misspelled - perhaps 'PDF'?
#2014: FILE: arch/frv/mm/tlb-miss.S:233:
+	# map this PTD instead and record coverage address
 	           ^^^

WARNING:TYPO_SPELLING: 'PTD' may be misspelled - perhaps 'PDF'?
#2069: FILE: arch/frv/mm/tlb-miss.S:288:
+	# access the PTD with EAR0[25:14]
 	             ^^^

WARNING:TYPO_SPELLING: 'PTD' may be misspelled - perhaps 'PDF'?
#2071: FILE: arch/frv/mm/tlb-miss.S:290:
+	# - the PTD holds 4096 PTEs
 	        ^^^

WARNING:TYPO_SPELLING: 'PTD' may be misspelled - perhaps 'PDF'?
#2072: FILE: arch/frv/mm/tlb-miss.S:291:
+	# - the PTD must be accessed uncached
 	        ^^^

WARNING:TYPO_SPELLING: 'PTD' may be misspelled - perhaps 'PDF'?
#2128: FILE: arch/frv/mm/tlb-miss.S:347:
+	# the PTE we want wasn't in the PTD we have mapped, so we need to go looking for a more
 	                                ^^^

WARNING:TYPO_SPELLING: 'PTD' may be misspelled - perhaps 'PDF'?
#2143: FILE: arch/frv/mm/tlb-miss.S:362:
+	# map this PTD instead and record coverage address
 	           ^^^

WARNING:TYPO_SPELLING: 'PTD' may be misspelled - perhaps 'PDF'?
#2196: FILE: arch/frv/mm/tlb-miss.S:415:
+	# access the PTD with EAR0[25:14]
 	             ^^^

WARNING:TYPO_SPELLING: 'PTD' may be misspelled - perhaps 'PDF'?
#2198: FILE: arch/frv/mm/tlb-miss.S:417:
+	# - the PTD holds 4096 PTEs
 	        ^^^

WARNING:TYPO_SPELLING: 'PTD' may be misspelled - perhaps 'PDF'?
#2199: FILE: arch/frv/mm/tlb-miss.S:418:
+	# - the PTD must be accessed uncached
 	        ^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2239: FILE: arch/frv/mm/tlb-miss.S:458:
+^I$

WARNING:TYPO_SPELLING: 'PTD' may be misspelled - perhaps 'PDF'?
#2246: FILE: arch/frv/mm/tlb-miss.S:465:
+	# the PTE we want wasn't in the PTD we have mapped, so we need to go looking for a more
 	                                ^^^

WARNING:TYPO_SPELLING: 'PTD' may be misspelled - perhaps 'PDF'?
#2261: FILE: arch/frv/mm/tlb-miss.S:480:
+	# map this PTD instead and record coverage address
 	           ^^^

WARNING:TYPO_SPELLING: 'PTD' may be misspelled - perhaps 'PDF'?
#2314: FILE: arch/frv/mm/tlb-miss.S:533:
+	# access the PTD with EAR0[25:14]
 	             ^^^

WARNING:TYPO_SPELLING: 'PTD' may be misspelled - perhaps 'PDF'?
#2316: FILE: arch/frv/mm/tlb-miss.S:535:
+	# - the PTD holds 4096 PTEs
 	        ^^^

WARNING:TYPO_SPELLING: 'PTD' may be misspelled - perhaps 'PDF'?
#2317: FILE: arch/frv/mm/tlb-miss.S:536:
+	# - the PTD must be accessed uncached
 	        ^^^

WARNING:TYPO_SPELLING: 'PTD' may be misspelled - perhaps 'PDF'?
#2366: FILE: arch/frv/mm/tlb-miss.S:585:
+	# the PTE we want wasn't in the PTD we have mapped, so we need to go looking for a more
 	                                ^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2385: FILE: arch/frv/mm/tlb-miss.S:604:
+__dtlb_u_iPGE_miss:^I$

WARNING:TYPO_SPELLING: 'PTD' may be misspelled - perhaps 'PDF'?
#2395: FILE: arch/frv/mm/tlb-miss.S:614:
+	# map this PTD instead and record coverage address
 	           ^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2417: FILE: arch/frv/mm/unaligned.c:1:
+/* unaligned.c: unalignment fixup handler for CPUs on which it is supported (FR451 only)

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#2441: FILE: arch/frv/mm/unaligned.c:25:
+#include <asm/uaccess.h>

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#2443: FILE: arch/frv/mm/unaligned.c:27:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2444: FILE: arch/frv/mm/unaligned.c:28:
+#define kdebug(fmt, ...) printk("FDPIC "fmt"\n" ,##__VA_ARGS__ )

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#2444: FILE: arch/frv/mm/unaligned.c:28:
+#define kdebug(fmt, ...) printk("FDPIC "fmt"\n" ,##__VA_ARGS__ )
                                                 ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#2444: FILE: arch/frv/mm/unaligned.c:28:
+#define kdebug(fmt, ...) printk("FDPIC "fmt"\n" ,##__VA_ARGS__ )
                                                 ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2444: FILE: arch/frv/mm/unaligned.c:28:
+#define kdebug(fmt, ...) printk("FDPIC "fmt"\n" ,##__VA_ARGS__ )

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#2444: FILE: arch/frv/mm/unaligned.c:28:
+#define kdebug(fmt, ...) printk("FDPIC "fmt"\n" ,##__VA_ARGS__ )

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:SPACING: space required before the open parenthesis '('
#2446: FILE: arch/frv/mm/unaligned.c:30:
+#define kdebug(fmt, ...) do {} while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2459: FILE: arch/frv/mm/unaligned.c:43:
+#define _MA_LDxU	_MA_LOAD | _MA_UPDATE

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2460: FILE: arch/frv/mm/unaligned.c:44:
+#define _MA_LDxI	_MA_LOAD | _MA_IMM

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2461: FILE: arch/frv/mm/unaligned.c:45:
+#define _MA_STxU	_MA_STORE | _MA_UPDATE

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2462: FILE: arch/frv/mm/unaligned.c:46:
+#define _MA_STxI	_MA_STORE | _MA_IMM

CHECK:CAMELCASE: Avoid CamelCase: <tbl_LDGRk_reg>
#2464: FILE: arch/frv/mm/unaligned.c:48:
+static const uint8_t tbl_LDGRk_reg[0x40] = {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2464: FILE: arch/frv/mm/unaligned.c:48:
+static const uint8_t tbl_LDGRk_reg[0x40] = {

CHECK:CAMELCASE: Avoid CamelCase: <tbl_STGRk_reg>
#2475: FILE: arch/frv/mm/unaligned.c:59:
+static const uint8_t tbl_STGRk_reg[0x40] = {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2475: FILE: arch/frv/mm/unaligned.c:59:
+static const uint8_t tbl_STGRk_reg[0x40] = {

CHECK:CAMELCASE: Avoid CamelCase: <tbl_LDSTGRk_imm>
#2484: FILE: arch/frv/mm/unaligned.c:68:
+static const uint8_t tbl_LDSTGRk_imm[0x80] = {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2484: FILE: arch/frv/mm/unaligned.c:68:
+static const uint8_t tbl_LDSTGRk_imm[0x80] = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2494: FILE: arch/frv/mm/unaligned.c:78:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <GRi>
#2502: FILE: arch/frv/mm/unaligned.c:86:
+	int GRi, GRj, GRk, D12, op;

CHECK:CAMELCASE: Avoid CamelCase: <GRj>
#2502: FILE: arch/frv/mm/unaligned.c:86:
+	int GRi, GRj, GRk, D12, op;

CHECK:CAMELCASE: Avoid CamelCase: <GRk>
#2502: FILE: arch/frv/mm/unaligned.c:86:
+	int GRi, GRj, GRk, D12, op;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2505: FILE: arch/frv/mm/unaligned.c:89:
+		uint64_t _64;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2506: FILE: arch/frv/mm/unaligned.c:90:
+		uint32_t _32[2];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#2507: FILE: arch/frv/mm/unaligned.c:91:
+		uint16_t _16;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#2508: FILE: arch/frv/mm/unaligned.c:92:
+		uint8_t _8[8];

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2518: FILE: arch/frv/mm/unaligned.c:102:
+		BUG();

CHECK:SPACING: No space is necessary after a cast
#2521: FILE: arch/frv/mm/unaligned.c:105:
+	if (__get_user(insn, (unsigned long *) epcr0) < 0)

CHECK:SPACING: No space is necessary after a cast
#2549: FILE: arch/frv/mm/unaligned.c:133:
+	greg = (unsigned long *) &__frame->tbr;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2565: FILE: arch/frv/mm/unaligned.c:149:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#2565: FILE: arch/frv/mm/unaligned.c:149:
+	else {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2587: FILE: arch/frv/mm/unaligned.c:171:
+			if (op & _MA_HALF) {
[...]
+			else {
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2590: FILE: arch/frv/mm/unaligned.c:174:
+			}
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#2590: FILE: arch/frv/mm/unaligned.c:174:
+			else {

CHECK:SPACING: No space is necessary after a cast
#2600: FILE: arch/frv/mm/unaligned.c:184:
+		if (__memcpy_user((void *) addr, &x, op & _MA_SZ_MASK) != 0)

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2603: FILE: arch/frv/mm/unaligned.c:187:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#2603: FILE: arch/frv/mm/unaligned.c:187:
+	else {

CHECK:SPACING: No space is necessary after a cast
#2605: FILE: arch/frv/mm/unaligned.c:189:
+		if (__memcpy_user(&x, (void *) addr, op & _MA_SZ_MASK) != 0)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000232863.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 45 errors, 102 warnings, 88 checks, 2534 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000232863.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
