WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#22: 
Thanks to everyone who participated in the 'Common hash table implementation' 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#64: FILE: Documentation/hash.txt:11:
+Other data structures for holding collections of similar objects $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#65: FILE: Documentation/hash.txt:12:
+include arrays and linked lists. Arrays have the advantage of quick $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#69: FILE: Documentation/hash.txt:16:
+side, large arrays offer horrible performance for addition to and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#76: FILE: Documentation/hash.txt:23:
+so it is impossible to go past the end. Lists offer fast addition to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#77: FILE: Documentation/hash.txt:24:
+and deletion from arbitrary positions. On the other hand, finding an $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#78: FILE: Documentation/hash.txt:25:
+object in a large list is generally an expensive proposition.  On $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#79: FILE: Documentation/hash.txt:26:
+average, half of the objects in the list have to be looked at before $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#89: FILE: Documentation/hash.txt:36:
+When adding an object to a hash table, a hashing function is used to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#90: FILE: Documentation/hash.txt:37:
+select the particular list to add the object to. The hashing function $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#91: FILE: Documentation/hash.txt:38:
+takes some data from the object, munges it, and returns a bucket number. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#96: FILE: Documentation/hash.txt:43:
+the object of interest needs to be searched. Without this data, the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#134: FILE: Documentation/hash.txt:81:
+First the datatype to be hashed must be defined. At a minimum, it must $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: Documentation/hash.txt:82:
+include a struct list_head not being used simultaneously for membership $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#136: FILE: Documentation/hash.txt:83:
+in another linked list or hash table, and it must include the data $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#139: FILE: Documentation/hash.txt:86:
+It is then necessary to define two versions of the hashing function. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#140: FILE: Documentation/hash.txt:87:
+The first must take a pointer to a hash entry, and return a number $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#141: FILE: Documentation/hash.txt:88:
+that can be used to index an array. The bit width of the number and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#142: FILE: Documentation/hash.txt:89:
+whether it is signed or unsigned is not too important. Don't return $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#151: FILE: Documentation/hash.txt:98:
+functions for the table. All of the functions are declared 'static' $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#152: FILE: Documentation/hash.txt:99:
+or 'static inline', so DECLARE_HASH_FUNCS() can be safely used in a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#164: FILE: Documentation/hash.txt:111:
+To declare the hash table itself, use either DECLARE_HASH_STATIC() or $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#165: FILE: Documentation/hash.txt:112:
+DECLARE_HASH_DYNAMIC(). The former statically allocates the hash table. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#166: FILE: Documentation/hash.txt:113:
+Note that this has nothing to do with static scope. If the 'static' $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#167: FILE: Documentation/hash.txt:114:
+keyword was not used in the example above, the hash table could be $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#168: FILE: Documentation/hash.txt:115:
+accessed from other source files. Remember that if the 'static' keyword $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#170: FILE: Documentation/hash.txt:117:
+only be used once in the kernel for a given name. This is basic $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#174: FILE: Documentation/hash.txt:121:
+up to the user to allocate the table with KMALLOC_HASH() before it's $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#177: FILE: Documentation/hash.txt:124:
+because the real name of the hash table is not the same as the name $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#178: FILE: Documentation/hash.txt:125:
+used with these macros. Don't forget to check the return value of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#179: FILE: Documentation/hash.txt:126:
+KMALLOC_HASH(). If it's NULL, the system was too low on memory to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#182: FILE: Documentation/hash.txt:129:
+If a hash table will be needed for as long as the system is up or as $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#183: FILE: Documentation/hash.txt:130:
+long as a particular module is loaded, then DECLARE_HASH_STATIC() $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: Documentation/hash.txt:131:
+should be used. If the table is only needed to deal with an unusual $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#211: FILE: Documentation/hash.txt:158:
+After using the DECLARE_HASH_FUNCS() macro, the following accessor $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#227: FILE: Documentation/hash.txt:174:
+     * also takes a pointer to a comparison function and a pointer to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#229: FILE: Documentation/hash.txt:176:
+     * bar_hash_find() calculates the appropriate hash bucket and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#232: FILE: Documentation/hash.txt:179:
+     * the comparison function should take a pointer to an entry and a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#234: FILE: Documentation/hash.txt:181:
+     * the comparison function should return non-zero if the entry matches $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#247: FILE: Documentation/hash.txt:194:
+     * takes a pointer to a comparison function and a pointer $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#258: FILE: Documentation/hash.txt:205:
+     * also takes a pointer to a comparison function and a pointer $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#260: FILE: Documentation/hash.txt:207:
+     * searches the remainder of the table for the next entry that $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#274: FILE: include/linux/hash.h:1:
+#ifndef _HASH_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#298: FILE: include/linux/hash.h:25:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#299: FILE: include/linux/hash.h:26:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#309: FILE: include/linux/hash.h:36:
+typedef void * __hash_entry_f(struct list_head *ptr);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#311: FILE: include/linux/hash.h:38:
+static inline void __hash_add(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#312: FILE: include/linux/hash.h:39:
+^I^Istruct list_head *ptr, $

CHECK:BRACES: braces {} should be used on all arms of this statement
#315: FILE: include/linux/hash.h:42:
+	if (!*bucket) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#318: FILE: include/linux/hash.h:45:
+	} else

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#322: FILE: include/linux/hash.h:49:
+static inline void __hash_del(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#323: FILE: include/linux/hash.h:50:
+^I^Istruct list_head *ptr, $

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#334: FILE: include/linux/hash.h:61:
+static inline void * __hash_find(

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#334: FILE: include/linux/hash.h:61:
+static inline void * __hash_find(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#335: FILE: include/linux/hash.h:62:
+^I^Istruct list_head *bucket, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#336: FILE: include/linux/hash.h:63:
+^I^Istruct list_head *last, $

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#350: FILE: include/linux/hash.h:77:
+		return NULL;
+	else

WARNING:LINE_SPACING: Missing a blank line after declarations
#358: FILE: include/linux/hash.h:85:
+		void *entry = entry_f(cur);
+		if (cmp_f(entry, data))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#365: FILE: include/linux/hash.h:92:
+static inline void * __hash_gfind(

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#365: FILE: include/linux/hash.h:92:
+static inline void * __hash_gfind(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#366: FILE: include/linux/hash.h:93:
+^I^Istruct list_head **bucket, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#367: FILE: include/linux/hash.h:94:
+^I^Istruct list_head **end, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#368: FILE: include/linux/hash.h:95:
+^I^Istruct list_head *last, $

WARNING:LINE_SPACING: Missing a blank line after declarations
#374: FILE: include/linux/hash.h:101:
+	struct list_head **cur;
+	for (cur = bucket; cur < end; ++cur) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#376: FILE: include/linux/hash.h:103:
+		void *entry = __hash_find(*cur, last, cmp_f, data, entry_f);
+		if (entry)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'MEMBER' - possible side-effects?
#388: FILE: include/linux/hash.h:115:
+#define DECLARE_HASH_FUNCS(NAME, TYPE, MEMBER,				\
+		CALCENT, CALCDATA, DATATYPE)				\
+									\
+extern unsigned long __##NAME##_hash_size;				\
+extern struct list_head **__##NAME##_hash_tbl;				\
+									\
+static inline void NAME##_hash_add(TYPE *entry)				\
+{									\
+	__hash_add(							\
+		&entry->MEMBER,						\
+		&__##NAME##_hash_tbl[CALCENT(entry)]);			\
+}									\
+									\
+static inline void NAME##_hash_del(TYPE *entry)				\
+{									\
+	__hash_del(							\
+		&entry->MEMBER,						\
+		&__##NAME##_hash_tbl[CALCENT(entry)]);			\
+}									\
+									\
+static void * __##NAME##_hash_entry(struct list_head *ptr)		\
+{									\
+	return list_entry(ptr, TYPE, MEMBER);				\
+}									\
+									\
+static inline TYPE * NAME##_hash_find(					\
+		DATATYPE *hashdata, __hash_cmp_f *cmp_f, void *cmpdata)	\
+{									\
+	return __hash_find(						\
+			__##NAME##_hash_tbl[CALCDATA(hashdata)],	\
+			NULL,						\
+			cmp_f,						\
+			cmpdata,					\
+			__##NAME##_hash_entry);				\
+}									\
+									\
+static inline TYPE * NAME##_is_hashed(TYPE *entry)			\
+{									\
+	return __hash_find(						\
+			__##NAME##_hash_tbl[CALCENT(entry)],		\
+			NULL,						\
+			__hash_cmp_is_self,				\
+			entry,						\
+			__##NAME##_hash_entry);				\
+}									\
+									\
+static inline TYPE * NAME##_hash_gfind(					\
+		__hash_cmp_f *cmp_f, void *cmpdata)			\
+{									\
+	return __hash_gfind(						\
+			__##NAME##_hash_tbl,				\
+			&__##NAME##_hash_tbl[__##NAME##_hash_size],	\
+			NULL,						\
+			cmp_f,						\
+			cmpdata,					\
+			__##NAME##_hash_entry);				\
+}									\
+									\
+static inline TYPE * NAME##_hash_gfind_next(				\
+		TYPE *last, __hash_cmp_f *cmp_f, void *cmpdata)		\
+{									\
+	return __hash_gfind(						\
+			&__##NAME##_hash_tbl[CALCENT(last)],		\
+			&__##NAME##_hash_tbl[__##NAME##_hash_size],	\
+			&last->MEMBER,					\
+			cmp_f,						\
+			cmpdata,					\
+			__##NAME##_hash_entry);				\
+}									\
+									\
+extern struct list_head **__##NAME##_hash_tbl

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'MEMBER' may be better as '(MEMBER)' to avoid precedence issues
#388: FILE: include/linux/hash.h:115:
+#define DECLARE_HASH_FUNCS(NAME, TYPE, MEMBER,				\
+		CALCENT, CALCDATA, DATATYPE)				\
+									\
+extern unsigned long __##NAME##_hash_size;				\
+extern struct list_head **__##NAME##_hash_tbl;				\
+									\
+static inline void NAME##_hash_add(TYPE *entry)				\
+{									\
+	__hash_add(							\
+		&entry->MEMBER,						\
+		&__##NAME##_hash_tbl[CALCENT(entry)]);			\
+}									\
+									\
+static inline void NAME##_hash_del(TYPE *entry)				\
+{									\
+	__hash_del(							\
+		&entry->MEMBER,						\
+		&__##NAME##_hash_tbl[CALCENT(entry)]);			\
+}									\
+									\
+static void * __##NAME##_hash_entry(struct list_head *ptr)		\
+{									\
+	return list_entry(ptr, TYPE, MEMBER);				\
+}									\
+									\
+static inline TYPE * NAME##_hash_find(					\
+		DATATYPE *hashdata, __hash_cmp_f *cmp_f, void *cmpdata)	\
+{									\
+	return __hash_find(						\
+			__##NAME##_hash_tbl[CALCDATA(hashdata)],	\
+			NULL,						\
+			cmp_f,						\
+			cmpdata,					\
+			__##NAME##_hash_entry);				\
+}									\
+									\
+static inline TYPE * NAME##_is_hashed(TYPE *entry)			\
+{									\
+	return __hash_find(						\
+			__##NAME##_hash_tbl[CALCENT(entry)],		\
+			NULL,						\
+			__hash_cmp_is_self,				\
+			entry,						\
+			__##NAME##_hash_entry);				\
+}									\
+									\
+static inline TYPE * NAME##_hash_gfind(					\
+		__hash_cmp_f *cmp_f, void *cmpdata)			\
+{									\
+	return __hash_gfind(						\
+			__##NAME##_hash_tbl,				\
+			&__##NAME##_hash_tbl[__##NAME##_hash_size],	\
+			NULL,						\
+			cmp_f,						\
+			cmpdata,					\
+			__##NAME##_hash_entry);				\
+}									\
+									\
+static inline TYPE * NAME##_hash_gfind_next(				\
+		TYPE *last, __hash_cmp_f *cmp_f, void *cmpdata)		\
+{									\
+	return __hash_gfind(						\
+			&__##NAME##_hash_tbl[CALCENT(last)],		\
+			&__##NAME##_hash_tbl[__##NAME##_hash_size],	\
+			&last->MEMBER,					\
+			cmp_f,						\
+			cmpdata,					\
+			__##NAME##_hash_entry);				\
+}									\
+									\
+extern struct list_head **__##NAME##_hash_tbl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'CALCENT' - possible side-effects?
#388: FILE: include/linux/hash.h:115:
+#define DECLARE_HASH_FUNCS(NAME, TYPE, MEMBER,				\
+		CALCENT, CALCDATA, DATATYPE)				\
+									\
+extern unsigned long __##NAME##_hash_size;				\
+extern struct list_head **__##NAME##_hash_tbl;				\
+									\
+static inline void NAME##_hash_add(TYPE *entry)				\
+{									\
+	__hash_add(							\
+		&entry->MEMBER,						\
+		&__##NAME##_hash_tbl[CALCENT(entry)]);			\
+}									\
+									\
+static inline void NAME##_hash_del(TYPE *entry)				\
+{									\
+	__hash_del(							\
+		&entry->MEMBER,						\
+		&__##NAME##_hash_tbl[CALCENT(entry)]);			\
+}									\
+									\
+static void * __##NAME##_hash_entry(struct list_head *ptr)		\
+{									\
+	return list_entry(ptr, TYPE, MEMBER);				\
+}									\
+									\
+static inline TYPE * NAME##_hash_find(					\
+		DATATYPE *hashdata, __hash_cmp_f *cmp_f, void *cmpdata)	\
+{									\
+	return __hash_find(						\
+			__##NAME##_hash_tbl[CALCDATA(hashdata)],	\
+			NULL,						\
+			cmp_f,						\
+			cmpdata,					\
+			__##NAME##_hash_entry);				\
+}									\
+									\
+static inline TYPE * NAME##_is_hashed(TYPE *entry)			\
+{									\
+	return __hash_find(						\
+			__##NAME##_hash_tbl[CALCENT(entry)],		\
+			NULL,						\
+			__hash_cmp_is_self,				\
+			entry,						\
+			__##NAME##_hash_entry);				\
+}									\
+									\
+static inline TYPE * NAME##_hash_gfind(					\
+		__hash_cmp_f *cmp_f, void *cmpdata)			\
+{									\
+	return __hash_gfind(						\
+			__##NAME##_hash_tbl,				\
+			&__##NAME##_hash_tbl[__##NAME##_hash_size],	\
+			NULL,						\
+			cmp_f,						\
+			cmpdata,					\
+			__##NAME##_hash_entry);				\
+}									\
+									\
+static inline TYPE * NAME##_hash_gfind_next(				\
+		TYPE *last, __hash_cmp_f *cmp_f, void *cmpdata)		\
+{									\
+	return __hash_gfind(						\
+			&__##NAME##_hash_tbl[CALCENT(last)],		\
+			&__##NAME##_hash_tbl[__##NAME##_hash_size],	\
+			&last->MEMBER,					\
+			cmp_f,						\
+			cmpdata,					\
+			__##NAME##_hash_entry);				\
+}									\
+									\
+extern struct list_head **__##NAME##_hash_tbl

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'DATATYPE' may be better as '(DATATYPE)' to avoid precedence issues
#388: FILE: include/linux/hash.h:115:
+#define DECLARE_HASH_FUNCS(NAME, TYPE, MEMBER,				\
+		CALCENT, CALCDATA, DATATYPE)				\
+									\
+extern unsigned long __##NAME##_hash_size;				\
+extern struct list_head **__##NAME##_hash_tbl;				\
+									\
+static inline void NAME##_hash_add(TYPE *entry)				\
+{									\
+	__hash_add(							\
+		&entry->MEMBER,						\
+		&__##NAME##_hash_tbl[CALCENT(entry)]);			\
+}									\
+									\
+static inline void NAME##_hash_del(TYPE *entry)				\
+{									\
+	__hash_del(							\
+		&entry->MEMBER,						\
+		&__##NAME##_hash_tbl[CALCENT(entry)]);			\
+}									\
+									\
+static void * __##NAME##_hash_entry(struct list_head *ptr)		\
+{									\
+	return list_entry(ptr, TYPE, MEMBER);				\
+}									\
+									\
+static inline TYPE * NAME##_hash_find(					\
+		DATATYPE *hashdata, __hash_cmp_f *cmp_f, void *cmpdata)	\
+{									\
+	return __hash_find(						\
+			__##NAME##_hash_tbl[CALCDATA(hashdata)],	\
+			NULL,						\
+			cmp_f,						\
+			cmpdata,					\
+			__##NAME##_hash_entry);				\
+}									\
+									\
+static inline TYPE * NAME##_is_hashed(TYPE *entry)			\
+{									\
+	return __hash_find(						\
+			__##NAME##_hash_tbl[CALCENT(entry)],		\
+			NULL,						\
+			__hash_cmp_is_self,				\
+			entry,						\
+			__##NAME##_hash_entry);				\
+}									\
+									\
+static inline TYPE * NAME##_hash_gfind(					\
+		__hash_cmp_f *cmp_f, void *cmpdata)			\
+{									\
+	return __hash_gfind(						\
+			__##NAME##_hash_tbl,				\
+			&__##NAME##_hash_tbl[__##NAME##_hash_size],	\
+			NULL,						\
+			cmp_f,						\
+			cmpdata,					\
+			__##NAME##_hash_entry);				\
+}									\
+									\
+static inline TYPE * NAME##_hash_gfind_next(				\
+		TYPE *last, __hash_cmp_f *cmp_f, void *cmpdata)		\
+{									\
+	return __hash_gfind(						\
+			&__##NAME##_hash_tbl[CALCENT(last)],		\
+			&__##NAME##_hash_tbl[__##NAME##_hash_size],	\
+			&last->MEMBER,					\
+			cmp_f,						\
+			cmpdata,					\
+			__##NAME##_hash_entry);				\
+}									\
+									\
+extern struct list_head **__##NAME##_hash_tbl

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#408: FILE: include/linux/hash.h:135:
+static void * __##NAME##_hash_entry(struct list_head *ptr)		\

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#413: FILE: include/linux/hash.h:140:
+static inline TYPE * NAME##_hash_find(					\

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#414: FILE: include/linux/hash.h:141:
+		DATATYPE *hashdata, __hash_cmp_f *cmp_f, void *cmpdata)	\
 		         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#424: FILE: include/linux/hash.h:151:
+static inline TYPE * NAME##_is_hashed(TYPE *entry)			\

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#434: FILE: include/linux/hash.h:161:
+static inline TYPE * NAME##_hash_gfind(					\

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#446: FILE: include/linux/hash.h:173:
+static inline TYPE * NAME##_hash_gfind_next(				\

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#460: FILE: include/linux/hash.h:187:
+static inline struct list_head ** __kmalloc_hash(

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#460: FILE: include/linux/hash.h:187:
+static inline struct list_head ** __kmalloc_hash(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#461: FILE: include/linux/hash.h:188:
+^I^Istruct list_head ***tbl, unsigned long *sizep, $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'SIZE' - possible side-effects?
#473: FILE: include/linux/hash.h:200:
+#define DECLARE_HASH_STATIC(NAME, SIZE)					\
+	unsigned long __##NAME##_hash_size = SIZE;			\
+	struct list_head *__##NAME##_hash_array[SIZE];			\
+	struct list_head **__##NAME##_hash_tbl = __##NAME##_hash_array

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#499: FILE: include/hash_test.h:1:
+/* XXX: temporary file for testing purposes only */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#535: FILE: include/hash_test.h:37:
+		printk("%s is hashed\n", entry->foo_name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#537: FILE: include/hash_test.h:39:
+		printk("%s is _not_ hashed\n", entry->foo_name);

WARNING:LINE_SPACING: Missing a blank line after declarations
#548: FILE: include/hash_test.h:50:
+	struct foo *entry = bar_hash_find(&id, test_id, &id);
+	if (!entry)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#549: FILE: include/hash_test.h:51:
+		printk("nobody has an id of %d\n", id);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#551: FILE: include/hash_test.h:53:
+		printk("%s has an id of %d\n", entry->foo_name, id);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#555: FILE: include/hash_test.h:57:
+		printk("%s has an id of %d\n", entry->foo_name, id);

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#560: FILE: include/hash_test.h:62:
+static struct foo a = { foo_id: 0, foo_name: "alpha" };
                                            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#561: FILE: include/hash_test.h:63:
+static struct foo b = { foo_id: 1, foo_name: "bravo" };
                                            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#562: FILE: include/hash_test.h:64:
+static struct foo c = { foo_id: 2, foo_name: "charlie" };
                                            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#563: FILE: include/hash_test.h:65:
+static struct foo d = { foo_id: 2, foo_name: "delta" };
                                            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#564: FILE: include/hash_test.h:66:
+static struct foo e = { foo_id: 1, foo_name: "echo" };
                                            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#565: FILE: include/hash_test.h:67:
+static struct foo f = { foo_id: 0, foo_name: "foxtrot" };
                                            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#566: FILE: include/hash_test.h:68:
+static struct foo g = { foo_id: 4, foo_name: "golf" };
                                            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#567: FILE: include/hash_test.h:69:
+static struct foo h = { foo_id: 3, foo_name: "hotel" };
                                            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#568: FILE: include/hash_test.h:70:
+static struct foo i = { foo_id: 2, foo_name: "india" };
                                            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#569: FILE: include/hash_test.h:71:
+static struct foo j = { foo_id: 1, foo_name: "juliet" };
                                            ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#583: FILE: include/hash_test.h:85:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#591: FILE: include/hash_test.h:93:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#598: FILE: include/hash_test.h:100:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#599: FILE: include/hash_test.h:101:
+	printk("Move over init -- we're testing hashes now\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#600: FILE: include/hash_test.h:102:
+	printk("------------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#601: FILE: include/hash_test.h:103:
+	printk("\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000522656.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 70 errors, 19 warnings, 13 checks, 620 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000522656.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
