WARNING:TYPO_SPELLING: 'atleast' may be misspelled - perhaps 'at least'?
#32: 
   in ppc64, so atleast one non-x86 arch work.
                ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'symantics' may be misspelled - perhaps 'semantics'?
#34: 
   symantics, I use a per-CPU tasklet which can be rescheduled
   ^^^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#71: 
diff -urN linux-2.5.30-base/arch/alpha/kernel/smp.c linux-2.5.30-smptimers_X1/arch/alpha/kernel/smp.c

ERROR:TRAILING_WHITESPACE: trailing whitespace
#122: FILE: arch/i386/mm/fault.c:104:
+ * message out $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#167: FILE: arch/ia64/kernel/traps.c:58:
+ * Unlock any spinlocks which will prevent us from getting the message out $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#190: FILE: arch/mips64/mm/fault.c:64:
+ * message out $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#287: FILE: arch/s390/mm/fault.c:43:
+ * message out $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#327: FILE: arch/s390x/mm/fault.c:42:
+ * message out $

ERROR:SPACING: space required after that ',' (ctx:OxV)
#343: FILE: arch/sparc/kernel/irq.c:76:
+void (*sparc_init_timers)(void (*)(int, void *,struct pt_regs *)) =
                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#469: FILE: arch/sparc64/kernel/irq.c:1036:
+void sparc_init_timers(void (*cfunc)(int, void *, struct pt_regs *),
 		 unsigned long *clock)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#492: FILE: arch/sparc64/kernel/time.c:617:
+extern void sparc_init_timers(void (*func)(int, void *, struct pt_regs *),
 			unsigned long *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#531: FILE: arch/x86_64/mm/fault.c:35:
+extern spinlock_t console_lock;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#572: FILE: include/asm-sparc64/irq.h:117:
+extern void sparc_init_timers(void (*lvl10_irq)(int, void *, struct pt_regs *),

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#572: FILE: include/asm-sparc64/irq.h:117:
+extern void sparc_init_timers(void (*lvl10_irq)(int, void *, struct pt_regs *),

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#573: FILE: include/asm-sparc64/irq.h:118:
+extern void sparc_init_timers(void (*lvl10_irq)(int, void *, struct pt_regs *),
 			unsigned long *);

CHECK:BIT_MACRO: Prefer using the BIT macro
#613: FILE: include/linux/timer.h:16:
+#define TVN_SIZE (1 << TVN_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#614: FILE: include/linux/timer.h:17:
+#define TVR_SIZE (1 << TVR_BITS)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#618: FILE: include/linux/timer.h:21:
+typedef struct tvec_s {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#623: FILE: include/linux/timer.h:26:
+typedef struct tvec_root_s {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#630: FILE: include/linux/timer.h:33:
+typedef struct timer_list timer_t;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#633: FILE: include/linux/timer.h:36:
+	spinlock_t lock;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#635: FILE: include/linux/timer.h:38:
+	volatile timer_t * volatile running_timer;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#643: FILE: include/linux/timer.h:46:
+typedef struct tvec_t_base_s tvec_base_t;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#657: FILE: include/linux/timer.h:65:
+extern void add_timer(timer_t * timer);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#657: FILE: include/linux/timer.h:65:
+extern void add_timer(timer_t * timer);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#658: FILE: include/linux/timer.h:66:
+extern int del_timer(timer_t * timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#658: FILE: include/linux/timer.h:66:
+extern int del_timer(timer_t * timer);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#659: FILE: include/linux/timer.h:67:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#659: FILE: include/linux/timer.h:67:
+  $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#662: FILE: include/linux/timer.h:69:
+extern int del_timer_sync(timer_t * timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#662: FILE: include/linux/timer.h:69:
+extern int del_timer_sync(timer_t * timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#663: FILE: include/linux/timer.h:70:
+extern void sync_timers(void);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#664: FILE: include/linux/timer.h:71:
+#define timer_enter(base, t) do { base->running_timer = t; mb(); } while (0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#664: FILE: include/linux/timer.h:71:
+#define timer_enter(base, t) do { base->running_timer = t; mb(); } while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#665: FILE: include/linux/timer.h:72:
+#define timer_exit(base) do { base->running_timer = NULL; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#665: FILE: include/linux/timer.h:72:
+#define timer_exit(base) do { base->running_timer = NULL; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#666: FILE: include/linux/timer.h:73:
+#define timer_is_running(base,t) (base->running_timer == t)
                              ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#666: FILE: include/linux/timer.h:73:
+#define timer_is_running(base,t) (base->running_timer == t)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 't' may be better as '(t)' to avoid precedence issues
#666: FILE: include/linux/timer.h:73:
+#define timer_is_running(base,t) (base->running_timer == t)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#667: FILE: include/linux/timer.h:74:
+#define timer_synchronize(base,t) while (timer_is_running(base,t)) barrier()
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#667: FILE: include/linux/timer.h:74:
+#define timer_synchronize(base,t) while (timer_is_running(base,t)) barrier()
                                                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#667: FILE: include/linux/timer.h:74:
+#define timer_synchronize(base,t) while (timer_is_running(base,t)) barrier()

ERROR:SPACING: space required after that ',' (ctx:VxV)
#671: FILE: include/linux/timer.h:78:
+#define timer_enter(base,t)          do { } while (0)
                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#675: FILE: include/linux/timer.h:81:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#675: FILE: include/linux/timer.h:81:
+  $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#689: FILE: include/linux/timer.h:93:
+extern void init_timers(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#692: FILE: include/linux/timer.h:96:
+extern void run_local_timers(void);

ERROR:SPACING: space required before the open parenthesis '('
#694: FILE: include/linux/timer.h:98:
+#define run_local_timers() do {} while(0)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#699: FILE: include/linux/timer.h:103:
+static inline void init_timer(timer_t * timer)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#708: FILE: include/linux/timer.h:111:
+# define CHECK_BASE(base) \
+	if (base && ((base < tvec_bases) || (base >= tvec_bases + NR_CPUS))) \
+		BUG()

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'base' - possible side-effects?
#708: FILE: include/linux/timer.h:111:
+# define CHECK_BASE(base) \
+	if (base && ((base < tvec_bases) || (base >= tvec_bases + NR_CPUS))) \
+		BUG()

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#708: FILE: include/linux/timer.h:111:
+# define CHECK_BASE(base) \
+	if (base && ((base < tvec_bases) || (base >= tvec_bases + NR_CPUS))) \
+		BUG()

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'base < tvec_bases'
#709: FILE: include/linux/timer.h:112:
+	if (base && ((base < tvec_bases) || (base >= tvec_bases + NR_CPUS))) \

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#709: FILE: include/linux/timer.h:112:
+	if (base && ((base < tvec_bases) || (base >= tvec_bases + NR_CPUS))) \

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#710: FILE: include/linux/timer.h:113:
+		BUG()

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#715: FILE: include/linux/timer.h:118:
+static inline int timer_pending(const timer_t * timer)

WARNING:TYPO_SPELLING: 'couldnt' may be misspelled - perhaps 'couldn't'?
#853: FILE: kernel/timer.c:95:
+ * the local timer interrupts couldnt run timers.
                               ^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#923: FILE: kernel/timer.c:139:
+	tvec_base_t * base = tvec_bases + smp_processor_id();

ERROR:CODE_INDENT: code indent should use tabs where possible
#924: FILE: kernel/timer.c:140:
+  ^Iunsigned long flags;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#924: FILE: kernel/timer.c:140:
+  ^Iunsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#924: FILE: kernel/timer.c:140:
+  ^Iunsigned long flags;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#925: FILE: kernel/timer.c:141:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#925: FILE: kernel/timer.c:141:
+  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#929: FILE: kernel/timer.c:145:
+  ^Iif (unlikely(timer_pending(timer)))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#929: FILE: kernel/timer.c:145:
+  ^Iif (unlikely(timer_pending(timer)))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#929: FILE: kernel/timer.c:145:
+  ^Iif (unlikely(timer_pending(timer)))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#930: FILE: kernel/timer.c:146:
+  ^I^Igoto bug;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#930: FILE: kernel/timer.c:146:
+  ^I^Igoto bug;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#930: FILE: kernel/timer.c:146:
+  ^I^Igoto bug;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#934: FILE: kernel/timer.c:150:
+  ^Ireturn;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#934: FILE: kernel/timer.c:150:
+  ^Ireturn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#934: FILE: kernel/timer.c:150:
+  ^Ireturn;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#940: FILE: kernel/timer.c:153:
+  ^Iprintk("bug: kernel timer added twice at %p.\n",$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#940: FILE: kernel/timer.c:153:
+  ^Iprintk("bug: kernel timer added twice at %p.\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#940: FILE: kernel/timer.c:153:
+  ^Iprintk("bug: kernel timer added twice at %p.\n",$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#940: FILE: kernel/timer.c:153:
+  	printk("bug: kernel timer added twice at %p.\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#941: FILE: kernel/timer.c:154:
+  ^I^I^I__builtin_return_address(0));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#941: FILE: kernel/timer.c:154:
+  ^I^I^I__builtin_return_address(0));$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#941: FILE: kernel/timer.c:154:
+  	printk("bug: kernel timer added twice at %p.\n",
+  			__builtin_return_address(0));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#941: FILE: kernel/timer.c:154:
+  ^I^I^I__builtin_return_address(0));$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#944: FILE: kernel/timer.c:156:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#944: FILE: kernel/timer.c:156:
+  $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_base != old_base'
#975: FILE: kernel/timer.c:186:
+	if (old_base && (new_base != old_base)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#975: FILE: kernel/timer.c:186:
+	if (old_base && (new_base != old_base)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#992: FILE: kernel/timer.c:203:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1003: FILE: kernel/timer.c:211:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_base != old_base'
#1004: FILE: kernel/timer.c:212:
+	if (old_base && (new_base != old_base))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1012: FILE: kernel/timer.c:219:
+int del_timer(timer_t * timer)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1016: FILE: kernel/timer.c:222:
+	tvec_base_t * base;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1024: FILE: kernel/timer.c:229:
+ ^Ibase = timer->base;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1024: FILE: kernel/timer.c:229:
+ ^Ibase = timer->base;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1024: FILE: kernel/timer.c:229:
+ ^Ibase = timer->base;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1043: FILE: kernel/timer.c:251:
+int del_timer_sync(timer_t * timer)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1045: FILE: kernel/timer.c:253:
+	tvec_base_t * base;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1057: FILE: kernel/timer.c:264:
+^I ^Ibase = timer->base;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1057: FILE: kernel/timer.c:264:
+^I ^Ibase = timer->base;$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1098: FILE: kernel/timer.c:303:
+			BUG();

ERROR:CODE_INDENT: code indent should use tabs where possible
#1153: FILE: kernel/timer.c:345:
+ ^I^I^Idata = timer->data;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1153: FILE: kernel/timer.c:345:
+ ^I^I^Idata = timer->data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1153: FILE: kernel/timer.c:345:
+ ^I^I^Idata = timer->data;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1170: FILE: kernel/timer.c:356:
+^I^I++base->timer_jiffies; $

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#1186: FILE: kernel/timer.c:675:
+ * BH-disablers work. If locking doesnt succeed
                                  ^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1211: FILE: kernel/timer.c:700:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1211: FILE: kernel/timer.c:700:
+  $

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1214: FILE: kernel/timer.c:703:
+ * Called by the local, per-CPU timer interrupt on SMP.
+  *

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#1224: FILE: kernel/timer.c:713:
+	tvec_base_t *base = tvec_bases + smp_processor_id();
+	if ((long)(jiffies - base->timer_jiffies) >= 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1260: FILE: kernel/timer.c:734:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1260: FILE: kernel/timer.c:734:
+  $

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1284: FILE: kernel/timer.c:1064:
+	for (i = 0; i < NR_CPUS; i++) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000440819.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 39 errors, 44 warnings, 26 checks, 1092 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000440819.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
