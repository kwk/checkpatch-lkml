WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
> > > At least part of them is caused by CONFIG_MTRR. I had to disable it on

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#96: FILE: arch/x86_64/Kconfig:454:
+config HOTPLUG_CPU
+	bool "Support for hot-pluggable CPUs (EXPERIMENTAL)"
+	depends on SMP && HOTPLUG && EXPERIMENTAL
+	---help---
+	  Say Y here to experiment with turning CPUs off and on
+	  or if you want to use software suspend (swsusp) with SMP.  CPUs
+	  can be controlled through /sys/devices/system/cpu.
+
+	  Say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#148: FILE: arch/x86_64/kernel/irq.c:122:
+		if (any_online_cpu(mask) == NR_CPUS) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#149: FILE: arch/x86_64/kernel/irq.c:123:
+			printk("Breaking affinity for irq %i\n", irq);

CHECK:BRACES: braces {} should be used on all arms of this statement
#152: FILE: arch/x86_64/kernel/irq.c:126:
+		if (irq_desc[irq].handler->set_affinity) {
[...]
+		else if (irq_desc[irq].action && !(warned++))
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#153: FILE: arch/x86_64/kernel/irq.c:127:
+			printk("Setting affinity for irq %d to 0x%x\n", irq, mask);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#156: FILE: arch/x86_64/kernel/irq.c:130:
+		}
+		else if (irq_desc[irq].action && !(warned++))

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#157: FILE: arch/x86_64/kernel/irq.c:131:
+			printk("Cannot set affinity for irq %i\n", irq);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#160: FILE: arch/x86_64/kernel/irq.c:134:
+#if 0

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#163: FILE: arch/x86_64/kernel/irq.c:137:
+	/* Ingo Molnar says: "after the IO-APIC masks have been redirected
+	   [note the nop - the interrupt-enable boundary on x86 is two

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#165: FILE: arch/x86_64/kernel/irq.c:139:
+	   IPIs. After this point nothing is supposed to reach this CPU." */

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/nmi.h> instead of <asm/nmi.h>
#192: FILE: arch/x86_64/kernel/process.c:159:
+#include <asm/nmi.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#200: FILE: arch/x86_64/kernel/process.c:167:
+	/* We shouldn't have to disable interrupts while dead, but
+	* some interrupts just don't seem to go away, and this makes

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#201: FILE: arch/x86_64/kernel/process.c:168:
+	* it "work" for testing purposes. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#215: FILE: arch/x86_64/kernel/process.c:182:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#253: FILE: arch/x86_64/kernel/smpboot.c:928:
+static int __devinit cpu_enable(unsigned int cpu)

WARNING:MEMORY_BARRIER: memory barrier without comment
#257: FILE: arch/x86_64/kernel/smpboot.c:932:
+	wmb();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#274: FILE: arch/x86_64/kernel/smpboot.c:949:
+	printk(KERN_WARNING "__cpu_disable(): cpu = %d\n", cpu);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__cpu_disable', this function's name, in a string
#274: FILE: arch/x86_64/kernel/smpboot.c:949:
+	printk(KERN_WARNING "__cpu_disable(): cpu = %d\n", cpu);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:CODE_INDENT: code indent should use tabs where possible
#278: FILE: arch/x86_64/kernel/smpboot.c:953:
+ ^I *$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#278: FILE: arch/x86_64/kernel/smpboot.c:953:
+ ^I *$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#309: FILE: arch/x86_64/kernel/smpboot.c:984:
+		schedule_timeout(HZ/10);
 		                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#311: FILE: arch/x86_64/kernel/smpboot.c:986:
+ ^Iprintk(KERN_ERR "CPU %u didn't die...\n", cpu);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#311: FILE: arch/x86_64/kernel/smpboot.c:986:
+ ^Iprintk(KERN_ERR "CPU %u didn't die...\n", cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#311: FILE: arch/x86_64/kernel/smpboot.c:986:
+ ^Iprintk(KERN_ERR "CPU %u didn't die...\n", cpu);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#311: FILE: arch/x86_64/kernel/smpboot.c:986:
+ 	printk(KERN_ERR "CPU %u didn't die...\n", cpu);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#316: FILE: arch/x86_64/kernel/smpboot.c:991:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#322: FILE: arch/x86_64/kernel/smpboot.c:997:
+	BUG();

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#326: FILE: arch/x86_64/kernel/smpboot.c:1001:
 int __devinit __cpu_up(unsigned int cpu)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#401: FILE: include/asm-x86_64/irq.h:59:
+extern void fixup_irqs(cpumask_t map);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#413: FILE: include/asm-x86_64/smp.h:149:
+extern int __cpu_disable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#414: FILE: include/asm-x86_64/smp.h:150:
+extern void __cpu_die(unsigned int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#426: FILE: include/linux/suspend.h:64:
+extern int disable_nonboot_cpus(void);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#484: FILE: kernel/power/disk.c:185:
+	if ((error = disable_nonboot_cpus())) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#586: FILE: kernel/power/smp.c:26:
+	printk("Freezing cpus ...\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#593: FILE: kernel/power/smp.c:33:
+			printk("CPU%d is down\n", cpu);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#596: FILE: kernel/power/smp.c:36:
+		printk("Error taking cpu %d down: %d\n", cpu, error);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#599: FILE: kernel/power/smp.c:38:
+	BUG_ON(smp_processor_id() != 0);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#617: FILE: kernel/power/smp.c:46:
+	printk("Thawing cpus ...\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#623: FILE: kernel/power/smp.c:52:
+			printk("CPU%d is up\n", cpu);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#626: FILE: kernel/power/smp.c:55:
+		printk("Error taking cpu %d up: %d\n", cpu, error);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#639: FILE: kernel/stop_machine.c:178:
+	printk("__stop_machine_run(): cpu = %d\n", cpu);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__stop_machine_run', this function's name, in a string
#639: FILE: kernel/stop_machine.c:178:
+	printk("__stop_machine_run(): cpu = %d\n", cpu);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#644: FILE: kernel/stop_machine.c:183:
+	printk("__stop_machine_run(): Running on CPU %d\n", _smp_processor_id()); /*RJW*/

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__stop_machine_run', this function's name, in a string
#644: FILE: kernel/stop_machine.c:183:
+	printk("__stop_machine_run(): Running on CPU %d\n", _smp_processor_id()); /*RJW*/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#645: FILE: kernel/stop_machine.c:184:
+	printk("__stop_machine_run(): Destination CPU %d\n", cpu); /*RJW*/

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__stop_machine_run', this function's name, in a string
#645: FILE: kernel/stop_machine.c:184:
+	printk("__stop_machine_run(): Destination CPU %d\n", cpu); /*RJW*/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000196728.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 36 warnings, 7 checks, 492 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000196728.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
