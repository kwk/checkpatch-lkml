CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#49: FILE: include/linux/sched.h:166:
+extern void sched_map_runqueue(int cpu1, int cpu2);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#109: FILE: arch/i386/kernel/cpu/proc.c:107:
+	extern long __rq_idx[NR_CPUS];

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#139: FILE: arch/i386/kernel/smpboot.c:951:
+__setup("test_ht", ht_setup);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#192: FILE: arch/i386/kernel/smpboot.c:1139:
+		for (cpu = 0; cpu < NR_CPUS; cpu++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#194: FILE: arch/i386/kernel/smpboot.c:1141:
+			int i;
+			if (!test_bit(cpu, &cpu_callout_map))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#196: FILE: arch/i386/kernel/smpboot.c:1143:
+			for (i = 0; i < NR_CPUS; i++) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#221: FILE: arch/i386/kernel/smpboot.c:1163:
+		printk("Simulating shared runqueues - mapping CPU#1's runqueue to CPU#0's runqueue.\n");

WARNING:TYPO_SPELLING: 'assymetric' may be misspelled - perhaps 'asymmetric'?
#290: FILE: kernel/sched.c:155:
+ *  runqueue or even assymetric mappings.)
                      ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#294: FILE: kernel/sched.c:159:
+  long __rq_idx[NR_CPUS] __cacheline_aligned;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: kernel/sched.c:160:
+  static long __cpu_idx[NR_CPUS] __cacheline_aligned;$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'idx' - possible side-effects?
#298: FILE: kernel/sched.c:163:
+# define for_each_sibling(idx, rq) \
+		for ((idx) = 0; (idx) < (rq)->nr_cpus; (idx)++)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#306: FILE: kernel/sched.c:171:
+# define for_each_sibling(idx, rq) while (0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#310: FILE: kernel/sched.c:175:
+  static inline void active_load_balance(runqueue_t *rq, int this_cpu) { }$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#313: FILE: kernel/sched.c:178:
+typedef struct cpu_s {

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#349: FILE: kernel/sched.c:214:
+#define cpu_int(c)		((cpu_rq(c))->cpu + cpu_idx(c))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#374: FILE: kernel/sched.c:237:
+# define task_running(p)		(cpu_curr_ptr(task_cpu(p)) == (p))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#511: FILE: kernel/sched.c:577:
+			if (unlikely(sync && !task_running(p) &&
 				(task_cpu(p) != smp_processor_id()) &&

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 33)
#522: FILE: kernel/sched.c:586:
+			if (sync)
+				 __activate_task(p, rq);

CHECK:BRACES: braces {} should be used on all arms of this statement
#522: FILE: kernel/sched.c:586:
+			if (sync)
[...]
+			else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#524: FILE: kernel/sched.c:588:
+			else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#536: FILE: kernel/sched.c:714:
+  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#536: FILE: kernel/sched.c:714:
+  $

WARNING:TYPO_SPELLING: 'agressivity' may be misspelled - perhaps 'aggressivity'?
#571: FILE: kernel/sched.c:946:
+ * frequency and balancing agressivity depends on whether the CPU is
                            ^^^^^^^^^^^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#577: FILE: kernel/sched.c:952:
+#define BUSY_REBALANCE_TICK (HZ/4 ?: 1)
                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#578: FILE: kernel/sched.c:953:
+#define IDLE_REBALANCE_TICK (HZ/1000 ?: 1)
                                ^

WARNING:TYPO_SPELLING: 'agressive' may be misspelled - perhaps 'aggressive'?
#619: FILE: kernel/sched.c:1137:
+	 * (except if we are in idle mode which is a more agressive
 	                                                  ^^^^^^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#627: FILE: kernel/sched.c:1141:
+#define CAN_MIGRATE_TASK(p,rq,cpu)		\
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#627: FILE: kernel/sched.c:1141:
+#define CAN_MIGRATE_TASK(p,rq,cpu)		\
                              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#627: FILE: kernel/sched.c:1141:
+#define CAN_MIGRATE_TASK(p,rq,cpu)		\
+	(((idle && AGRESSIVE_IDLE_STEAL) ||	\
+		(jiffies - (p)->last_run > cache_decay_ticks)) && \
+			!task_running(p) && task_allowed(p, cpu))

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#644: FILE: kernel/sched.c:1173:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#663: FILE: kernel/sched.c:1192:
+		 * doesnt matter which one) and let it fix things up:
 		   ^^^^^^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#690: FILE: kernel/sched.c:1219:
+	for (i = 0; i < NR_CPUS; i++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#704: FILE: kernel/sched.c:1233:
+^I ^I * balance a thread over to the target queue.$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#704: FILE: kernel/sched.c:1233:
+^I ^I * balance a thread over to the target queue.$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#736: FILE: kernel/sched.c:1256:
+	BUG_ON(rq1 == rq2 || rq2->nr_running || rq_idx(cpu1) != cpu1);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'next != prev'
#913: FILE: kernel/sched.c:1473:
+	if ((next != prev) && (rq_nr_cpus(rq) > 1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BRACES: braces {} are not necessary for single statement blocks
#924: FILE: kernel/sched.c:1484:
+				if (retry || !rq->expired->nr_active) {
+					goto pick_idle;
+				}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1042: FILE: kernel/sched.c:2511:
+static int migration_task(void * data)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#1091: FILE: kernel/sched.c:2592:
+	long cpu = (long) hcpu;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1099: FILE: kernel/sched.c:2596:
+		printk("Starting migration thread for cpu %li\n", cpu);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1146: FILE: init/main.c:357:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1147: FILE: init/main.c:358:
+^I *^IWe count on the initial thread going ok $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000390225.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 21 warnings, 13 checks, 1069 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000390225.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
