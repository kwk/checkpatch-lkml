CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#31: 
Adapted from patch Bar³omiej ¯o³nierkiewicz:
                      ^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#51: 
- Let ide_start_dma() take the request directly as an arguemnt. Rename it to

WARNING:TYPO_SPELLING: 'arguemnt' may be misspelled - perhaps 'argument'?
#51: 
- Let ide_start_dma() take the request directly as an arguemnt. Rename it to
                                                      ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#96: FILE: arch/cris/drivers/ide.c:567:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#116: FILE: arch/cris/drivers/ide.c:606:
+			printk("%s: too few DMA descriptors\n", ch->name);

ERROR:CODE_INDENT: code indent should use tabs where possible
#125: FILE: arch/cris/drivers/ide.c:627:
+^I^I        /* ok we want to do IO at addr, size bytes. set up a new descriptor entry */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#134: FILE: arch/cris/drivers/ide.c:660:
+	printk("%s: empty DMA table?\n", ch->name);

ERROR:SPACING: space required before the open parenthesis '('
#161: FILE: arch/cris/drivers/ide.c:790:
+		if(e100_udma_new_table(drive->channel, rq))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#198: FILE: arch/cris/drivers/ide.c:830:
+		if(e100_udma_new_table(drive->channel, rq))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#244: FILE: drivers/ide/ata-timing.h:77:
+extern short ata_timing_mode(struct ata_device *drive, int map);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#251: FILE: drivers/ide/ata-timing.h:83:
+extern int ata_timing_compute(struct ata_device *drive,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#252: FILE: drivers/ide/ata-timing.h:84:
+extern int ata_timing_compute(struct ata_device *drive,
 		short speed, struct ata_timing *t, int T, int UT);

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#262: FILE: drivers/ide/cmd64x.c:211:
+static void program_drive_counts(struct ata_device *drive, int setup_count, int active_count, int recovery_count)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#433: FILE: drivers/ide/cmd64x.c:918:
+static int cmd680_busproc(struct ata_device * drive, int state)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#443: FILE: drivers/ide/cmd64x.c:925:
+        pci_read_config_dword(ch->pci_dev, addr_mask, &stat_config);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#443: FILE: drivers/ide/cmd64x.c:925:
+        pci_read_config_dword(ch->pci_dev, addr_mask, &stat_config);$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#491: FILE: drivers/ide/cmd64x.c:959:
+	pci_write_config_byte(ch->pci_dev, addr_mask, reset|0x03);
 	                                                   ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#517: FILE: drivers/ide/hpt34x.c:328:
+			if (!(count = udma_new_table(ch, rq)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#629: FILE: drivers/ide/ide.c:271:
+	char *flashcards[] = {

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#728: FILE: drivers/ide/ide.c:897:
+int ide_wait_stat(ide_startstop_t *startstop, struct ata_device *drive, byte good, byte bad, unsigned long timeout) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#728: FILE: drivers/ide/ide.c:897:
+int ide_wait_stat(ide_startstop_t *startstop, struct ata_device *drive, byte good, byte bad, unsigned long timeout) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 202 exceeds 100 columns
#850: FILE: drivers/ide/ide.c:2250:
+void ide_add_setting(struct ata_device *drive, const char *name, int rw, int read_ioctl, int write_ioctl, int data_type, int min, int max, int mul_factor, int div_factor, void *data, ide_procset_t *set)

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#963: FILE: drivers/ide/ide.c:3133:
+struct ata_device *ide_scan_devices(byte type, const char *name, struct ata_operations *driver, int n)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1023: FILE: drivers/ide/ide-disk.c:348:
+static int idedisk_open (struct inode *inode, struct file *filp, struct ata_device *drive)
                                                            ^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1023: FILE: drivers/ide/ide-disk.c:348:
+static int idedisk_open (struct inode *inode, struct file *filp, struct ata_device *drive)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1041: FILE: drivers/ide/ide-disk.c:389:
+static void idedisk_release (struct inode *inode, struct file *filp, struct ata_device *drive)
                                                                ^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1041: FILE: drivers/ide/ide-disk.c:389:
+static void idedisk_release (struct inode *inode, struct file *filp, struct ata_device *drive)

CHECK:SPACING: No space is necessary after a cast
#1095: FILE: drivers/ide/ide-disk.c:544:
+	struct ata_device *drive = (struct ata_device *) data;

CHECK:SPACING: No space is necessary after a cast
#1124: FILE: drivers/ide/ide-disk.c:597:
+	struct ata_device *drive = (struct ata_device *) data;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1300: FILE: drivers/ide/ide-dma.c:1:
+/**** vi:set ts=8 sts=8 sw=8:************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1339: FILE: drivers/ide/ide-dma.c:208:
+		printk(KERN_ERR "%s: dma_intr: bad DMA status (dma_stat=%x)\n",

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1701: FILE: drivers/ide/ide-dma.c:535:
+	if (ch->sg_table) {
+		kfree(ch->sg_table);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ch->dma_extra'
#1704: FILE: drivers/ide/ide-dma.c:538:
+	if ((ch->dma_extra) && (ch->unit == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ch->unit == 0'
#1704: FILE: drivers/ide/ide-dma.c:538:
+	if ((ch->dma_extra) && (ch->unit == 0))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1717: FILE: drivers/ide/ide-dma.c:549:
+	printk("    %s: BM-DMA at 0x%04lx-0x%04lx", ch->name, dma_base, dma_base + num_ports - 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1728: FILE: drivers/ide/ide-dma.c:557:
+	ch->dmatable_cpu = pci_alloc_consistent(ch->pci_dev,
 						  PRD_ENTRIES * PRD_BYTES,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ch->dmatable_cpu"
#1732: FILE: drivers/ide/ide-dma.c:559:
+	if (ch->dmatable_cpu == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ch->sg_table)...) over kmalloc(sizeof(struct scatterlist)...)
#1736: FILE: drivers/ide/ide-dma.c:562:
+	ch->sg_table = kmalloc(sizeof(struct scatterlist) * PRD_ENTRIES,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1737: FILE: drivers/ide/ide-dma.c:563:
+	ch->sg_table = kmalloc(sizeof(struct scatterlist) * PRD_ENTRIES,
 				 GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ch->sg_table"
#1741: FILE: drivers/ide/ide-dma.c:564:
+	if (ch->sg_table == NULL) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1753: FILE: drivers/ide/ide-dma.c:573:
+		u8 dma_stat = inb(dma_base+2);
 		                          ^

WARNING:TYPO_SPELLING: 'neccessary' may be misspelled - perhaps 'necessary'?
#1769: FILE: drivers/ide/ide-dma.c:587:
+ * neccessary.
    ^^^^^^^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1788: FILE: drivers/ide/ide-dma.c:606:
+	ch->sg_nents = i = build_sglist(ch, rq);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1810: FILE: drivers/ide/ide-dma.c:628:
+				printk("ide-dma: count %d, sg_nents %d, cur_len %d, cur_addr %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1811: FILE: drivers/ide/ide-dma.c:629:
+				printk("ide-dma: count %d, sg_nents %d, cur_len %d, cur_addr %u\n",
+						count, ch->sg_nents, cur_len, cur_addr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1812: FILE: drivers/ide/ide-dma.c:630:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:CODE_INDENT: code indent should use tabs where possible
#1822: FILE: drivers/ide/ide-dma.c:640:
+^I^I        /*$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1849: FILE: drivers/ide/ide-dma.c:667:
+		printk(KERN_ERR "%s: empty DMA table?\n", ch->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1865: FILE: drivers/ide/ide-dma.c:683:
+	printk(", DMA");

CHECK:BRACES: braces {} should be used on all arms of this statement
#1870: FILE: drivers/ide/ide-dma.c:688:
+	if ((id->field_valid & 4) && (eighty_ninty_three(drive)) &&
[...]
+	} else if ((id->field_valid & 4) && (eighty_ninty_three(drive)) &&
[...]
+	} else if ((id->field_valid & 4) &&
[...]
+	} else if (id->field_valid & 4)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1878: FILE: drivers/ide/ide-dma.c:696:
+		if ((id->dma_ultra >> 13) & 1) {
[...]
+		} else if ((id->dma_ultra >> 12) & 1) {
[...]
+		} else {
[...]

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1887: FILE: drivers/ide/ide-dma.c:705:
+		if ((id->dma_ultra >> 10) & 1) {
[...]
+		} else if ((id->dma_ultra >> 9) & 1) {
[...]
+		} else {
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1899: FILE: drivers/ide/ide-dma.c:717:
+	printk(str);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1903: FILE: drivers/ide/ide-dma.c:721:
+EXPORT_SYMBOL(udma_print);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2077: FILE: drivers/ide/ide-probe.c:807:
+	gd->de_arr = kmalloc (sizeof(*gd->de_arr) * MAX_DRIVES, GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2082: FILE: drivers/ide/ide-probe.c:812:
+	gd->flags = kmalloc (sizeof(*gd->flags) * MAX_DRIVES, GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2168: FILE: drivers/ide/ide-taskfile.c:403:
+ide_startstop_t ata_taskfile(struct ata_device *drive,
 		struct ata_taskfile *args, struct request *rq)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2189: FILE: drivers/ide/ide-taskfile.c:471:
+		if (args->taskfile.command == WIN_WRITEDMA
+		 || args->taskfile.command == WIN_WRITEDMA_EXT)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2193: FILE: drivers/ide/ide-taskfile.c:474:
+		else if (args->taskfile.command == WIN_READDMA
+		      || args->taskfile.command == WIN_READDMA_EXT)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2204: FILE: drivers/ide/ide-taskfile.c:478:
+		else if (args->taskfile.command == WIN_WRITEDMA_QUEUED
+		      || args->taskfile.command == WIN_WRITEDMA_QUEUED_EXT

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2205: FILE: drivers/ide/ide-taskfile.c:479:
+		      || args->taskfile.command == WIN_WRITEDMA_QUEUED_EXT
+		      || args->taskfile.command == WIN_READDMA_QUEUED

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2206: FILE: drivers/ide/ide-taskfile.c:480:
+		      || args->taskfile.command == WIN_READDMA_QUEUED
+		      || args->taskfile.command == WIN_READDMA_QUEUED_EXT)

CHECK:BRACES: Unbalanced braces around else statement
#2209: FILE: drivers/ide/ide-taskfile.c:483:
+		else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2225: FILE: drivers/ide/ide-taskfile.c:488:
 
+

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#2269: FILE: drivers/ide/ns87415.c:96:
+			udma_destroy_table(hwif);			/* and free any DMA resources */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#2304: FILE: drivers/ide/tcq.c:494:
+		udelay(10);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#2315: FILE: drivers/ide/tcq.c:505:
+		udelay(10);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2333: FILE: drivers/ide/tcq.c:523:
+	TCQ_PRINTK("%s: setting up queued %d\n", __FUNCTION__, rq->tag);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2335: FILE: drivers/ide/tcq.c:525:
+		printk("queued_rw: IDE_BUSY not set\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2390: FILE: drivers/ide/tcq.c:577:
+	if ((feat = GET_FEAT()) & NSEC_REL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2397: FILE: drivers/ide/tcq.c:584:
+		if ((stat = GET_STAT()) & SERVICE_STAT)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2555: FILE: drivers/ide/trm290.c:189:
+			if (!(count = udma_new_table(ch, rq)))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2559: FILE: drivers/ide/trm290.c:192:
+			outl(ch->dmatable_dma|reading|writing, ch->dma_base);
 			                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2559: FILE: drivers/ide/trm290.c:192:
+			outl(ch->dmatable_dma|reading|writing, ch->dma_base);
 			                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2562: FILE: drivers/ide/trm290.c:194:
+			outw((count * 2) - 1, ch->dma_base+2); /* start DMA */
 			                                  ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2614: FILE: include/linux/ide.h:377:
+typedef enum {

WARNING:LONG_LINE: line length of 128 exceeds 100 columns
#2676: FILE: include/linux/ide.h:572:
+extern void ide_add_setting(struct ata_device *, const char *, int, int, int, int, int, int, int, int, void *, ide_procset_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2676: FILE: include/linux/ide.h:572:
+extern void ide_add_setting(struct ata_device *, const char *, int, int, int, int, int, int, int, int, void *, ide_procset_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2676: FILE: include/linux/ide.h:572:
+extern void ide_add_setting(struct ata_device *, const char *, int, int, int, int, int, int, int, int, void *, ide_procset_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2676: FILE: include/linux/ide.h:572:
+extern void ide_add_setting(struct ata_device *, const char *, int, int, int, int, int, int, int, int, void *, ide_procset_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2676: FILE: include/linux/ide.h:572:
+extern void ide_add_setting(struct ata_device *, const char *, int, int, int, int, int, int, int, int, void *, ide_procset_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2676: FILE: include/linux/ide.h:572:
+extern void ide_add_setting(struct ata_device *, const char *, int, int, int, int, int, int, int, int, void *, ide_procset_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2676: FILE: include/linux/ide.h:572:
+extern void ide_add_setting(struct ata_device *, const char *, int, int, int, int, int, int, int, int, void *, ide_procset_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2676: FILE: include/linux/ide.h:572:
+extern void ide_add_setting(struct ata_device *, const char *, int, int, int, int, int, int, int, int, void *, ide_procset_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2676: FILE: include/linux/ide.h:572:
+extern void ide_add_setting(struct ata_device *, const char *, int, int, int, int, int, int, int, int, void *, ide_procset_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2676: FILE: include/linux/ide.h:572:
+extern void ide_add_setting(struct ata_device *, const char *, int, int, int, int, int, int, int, int, void *, ide_procset_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2676: FILE: include/linux/ide.h:572:
+extern void ide_add_setting(struct ata_device *, const char *, int, int, int, int, int, int, int, int, void *, ide_procset_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2676: FILE: include/linux/ide.h:572:
+extern void ide_add_setting(struct ata_device *, const char *, int, int, int, int, int, int, int, int, void *, ide_procset_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#2676: FILE: include/linux/ide.h:572:
+extern void ide_add_setting(struct ata_device *, const char *, int, int, int, int, int, int, int, int, void *, ide_procset_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_procset_t *' should also have an identifier name
#2676: FILE: include/linux/ide.h:572:
+extern void ide_add_setting(struct ata_device *, const char *, int, int, int, int, int, int, int, int, void *, ide_procset_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2677: FILE: include/linux/ide.h:573:
+extern void ide_remove_setting(struct ata_device *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2677: FILE: include/linux/ide.h:573:
+extern void ide_remove_setting(struct ata_device *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#2677: FILE: include/linux/ide.h:573:
+extern void ide_remove_setting(struct ata_device *, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2678: FILE: include/linux/ide.h:574:
+extern int ide_read_setting(struct ata_device *, ide_settings_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2678: FILE: include/linux/ide.h:574:
+extern int ide_read_setting(struct ata_device *, ide_settings_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_settings_t *' should also have an identifier name
#2678: FILE: include/linux/ide.h:574:
+extern int ide_read_setting(struct ata_device *, ide_settings_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2679: FILE: include/linux/ide.h:575:
+extern int ide_write_setting(struct ata_device *, ide_settings_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2679: FILE: include/linux/ide.h:575:
+extern int ide_write_setting(struct ata_device *, ide_settings_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_settings_t *' should also have an identifier name
#2679: FILE: include/linux/ide.h:575:
+extern int ide_write_setting(struct ata_device *, ide_settings_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2679: FILE: include/linux/ide.h:575:
+extern int ide_write_setting(struct ata_device *, ide_settings_t *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2680: FILE: include/linux/ide.h:576:
+extern void ide_add_generic_settings(struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2680: FILE: include/linux/ide.h:576:
+extern void ide_add_generic_settings(struct ata_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2689: FILE: include/linux/ide.h:689:
+extern byte ide_dump_status(struct ata_device *, const char *, byte);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2689: FILE: include/linux/ide.h:689:
+extern byte ide_dump_status(struct ata_device *, const char *, byte);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2689: FILE: include/linux/ide.h:689:
+extern byte ide_dump_status(struct ata_device *, const char *, byte);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'byte' should also have an identifier name
#2689: FILE: include/linux/ide.h:689:
+extern byte ide_dump_status(struct ata_device *, const char *, byte);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2696: FILE: include/linux/ide.h:695:
+extern ide_startstop_t ide_error(struct ata_device *, const char *, byte);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2696: FILE: include/linux/ide.h:695:
+extern ide_startstop_t ide_error(struct ata_device *, const char *, byte);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2696: FILE: include/linux/ide.h:695:
+extern ide_startstop_t ide_error(struct ata_device *, const char *, byte);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'byte' should also have an identifier name
#2696: FILE: include/linux/ide.h:695:
+extern ide_startstop_t ide_error(struct ata_device *, const char *, byte);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2703: FILE: include/linux/ide.h:701:
+void ide_cmd(struct ata_device *, byte, byte, ata_handler_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'byte' should also have an identifier name
#2703: FILE: include/linux/ide.h:701:
+void ide_cmd(struct ata_device *, byte, byte, ata_handler_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'byte' should also have an identifier name
#2703: FILE: include/linux/ide.h:701:
+void ide_cmd(struct ata_device *, byte, byte, ata_handler_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ata_handler_t' should also have an identifier name
#2703: FILE: include/linux/ide.h:701:
+void ide_cmd(struct ata_device *, byte, byte, ata_handler_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2712: FILE: include/linux/ide.h:719:
+extern int ide_wait_stat(ide_startstop_t *, struct ata_device *, byte, byte, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_startstop_t *' should also have an identifier name
#2712: FILE: include/linux/ide.h:719:
+extern int ide_wait_stat(ide_startstop_t *, struct ata_device *, byte, byte, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2712: FILE: include/linux/ide.h:719:
+extern int ide_wait_stat(ide_startstop_t *, struct ata_device *, byte, byte, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'byte' should also have an identifier name
#2712: FILE: include/linux/ide.h:719:
+extern int ide_wait_stat(ide_startstop_t *, struct ata_device *, byte, byte, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'byte' should also have an identifier name
#2712: FILE: include/linux/ide.h:719:
+extern int ide_wait_stat(ide_startstop_t *, struct ata_device *, byte, byte, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#2712: FILE: include/linux/ide.h:719:
+extern int ide_wait_stat(ide_startstop_t *, struct ata_device *, byte, byte, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2715: FILE: include/linux/ide.h:721:
+extern int ide_wait_noerr(struct ata_device *, byte, byte, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2715: FILE: include/linux/ide.h:721:
+extern int ide_wait_noerr(struct ata_device *, byte, byte, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'byte' should also have an identifier name
#2715: FILE: include/linux/ide.h:721:
+extern int ide_wait_noerr(struct ata_device *, byte, byte, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'byte' should also have an identifier name
#2715: FILE: include/linux/ide.h:721:
+extern int ide_wait_noerr(struct ata_device *, byte, byte, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#2715: FILE: include/linux/ide.h:721:
+extern int ide_wait_noerr(struct ata_device *, byte, byte, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2734: FILE: include/linux/ide.h:738:
+ide_startstop_t restart_request(struct ata_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2743: FILE: include/linux/ide.h:760:
+extern int ide_do_drive_cmd(struct ata_device *, struct request *, ide_action_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2743: FILE: include/linux/ide.h:760:
+extern int ide_do_drive_cmd(struct ata_device *, struct request *, ide_action_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#2743: FILE: include/linux/ide.h:760:
+extern int ide_do_drive_cmd(struct ata_device *, struct request *, ide_action_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_action_t' should also have an identifier name
#2743: FILE: include/linux/ide.h:760:
+extern int ide_do_drive_cmd(struct ata_device *, struct request *, ide_action_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2749: FILE: include/linux/ide.h:765:
+extern void ide_end_drive_cmd(struct ata_device *, byte, byte);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2749: FILE: include/linux/ide.h:765:
+extern void ide_end_drive_cmd(struct ata_device *, byte, byte);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'byte' should also have an identifier name
#2749: FILE: include/linux/ide.h:765:
+extern void ide_end_drive_cmd(struct ata_device *, byte, byte);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'byte' should also have an identifier name
#2749: FILE: include/linux/ide.h:765:
+extern void ide_end_drive_cmd(struct ata_device *, byte, byte);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2763: FILE: include/linux/ide.h:802:
+extern byte ide_auto_reduce_xfer(struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2763: FILE: include/linux/ide.h:802:
+extern byte ide_auto_reduce_xfer(struct ata_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2764: FILE: include/linux/ide.h:803:
+extern int ide_driveid_update(struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2764: FILE: include/linux/ide.h:803:
+extern int ide_driveid_update(struct ata_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2765: FILE: include/linux/ide.h:804:
+extern int ide_ata66_check(struct ata_device *, struct ata_taskfile *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2765: FILE: include/linux/ide.h:804:
+extern int ide_ata66_check(struct ata_device *, struct ata_taskfile *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_taskfile *' should also have an identifier name
#2765: FILE: include/linux/ide.h:804:
+extern int ide_ata66_check(struct ata_device *, struct ata_taskfile *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2766: FILE: include/linux/ide.h:805:
+extern int ide_config_drive_speed(struct ata_device *, byte);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2766: FILE: include/linux/ide.h:805:
+extern int ide_config_drive_speed(struct ata_device *, byte);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'byte' should also have an identifier name
#2766: FILE: include/linux/ide.h:805:
+extern int ide_config_drive_speed(struct ata_device *, byte);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2767: FILE: include/linux/ide.h:806:
+extern byte eighty_ninty_three(struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2767: FILE: include/linux/ide.h:806:
+extern byte eighty_ninty_three(struct ata_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2768: FILE: include/linux/ide.h:807:
+extern int set_transfer(struct ata_device *, struct ata_taskfile *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2768: FILE: include/linux/ide.h:807:
+extern int set_transfer(struct ata_device *, struct ata_taskfile *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_taskfile *' should also have an identifier name
#2768: FILE: include/linux/ide.h:807:
+extern int set_transfer(struct ata_device *, struct ata_taskfile *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2788: FILE: include/linux/ide.h:815:
+void ide_stall_queue(struct ata_device *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#2788: FILE: include/linux/ide.h:815:
+void ide_stall_queue(struct ata_device *, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2797: FILE: include/linux/ide.h:824:
+extern int drive_is_flashcard(struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2797: FILE: include/linux/ide.h:824:
+extern int drive_is_flashcard(struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2800: FILE: include/linux/ide.h:826:
+int ide_spin_wait_hwgroup(struct ata_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2811: FILE: include/linux/ide.h:873:
+extern int udma_new_table(struct ata_channel *, struct request *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2812: FILE: include/linux/ide.h:874:
+extern void udma_destroy_table(struct ata_channel *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_channel *' should also have an identifier name
#2812: FILE: include/linux/ide.h:874:
+extern void udma_destroy_table(struct ata_channel *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2813: FILE: include/linux/ide.h:875:
+extern void udma_print(struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2813: FILE: include/linux/ide.h:875:
+extern void udma_print(struct ata_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2815: FILE: include/linux/ide.h:877:
+extern ide_startstop_t udma_tcq_taskfile(struct ata_device *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2815: FILE: include/linux/ide.h:877:
+extern ide_startstop_t udma_tcq_taskfile(struct ata_device *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#2815: FILE: include/linux/ide.h:877:
+extern ide_startstop_t udma_tcq_taskfile(struct ata_device *, struct request *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2816: FILE: include/linux/ide.h:878:
+extern int udma_tcq_enable(struct ata_device *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2816: FILE: include/linux/ide.h:878:
+extern int udma_tcq_enable(struct ata_device *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2816: FILE: include/linux/ide.h:878:
+extern int udma_tcq_enable(struct ata_device *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2825: FILE: include/linux/ide.h:886:
+extern int ata_start_dma(struct ata_device *, struct request *rq);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2825: FILE: include/linux/ide.h:886:
+extern int ata_start_dma(struct ata_device *, struct request *rq);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000460477.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 100 warnings, 56 checks, 2425 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000460477.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
