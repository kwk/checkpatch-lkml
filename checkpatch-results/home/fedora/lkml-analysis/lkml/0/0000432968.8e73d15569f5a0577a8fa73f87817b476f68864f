CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#64: FILE: mm/filemap.c:1945:
+filemap_copy_from_user_iovec(struct page *page, unsigned long offset,
+			const struct iovec *iov, size_t base, unsigned bytes)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#64: FILE: mm/filemap.c:1945:
+			const struct iovec *iov, size_t base, unsigned bytes)

WARNING:LINE_SPACING: Missing a blank line after declarations
#73: FILE: mm/filemap.c:1954:
+		int copy = min(bytes, iov->iov_len - base);
+		base = 0;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#74: FILE: mm/filemap.c:1955:
+		if ((left = __copy_from_user(kaddr + offset, buf, copy)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#85: FILE: mm/filemap.c:1966:
+filemap_set_next_iovec(const struct iovec **iovp, size_t *basep, unsigned bytes)

WARNING:LINE_SPACING: Missing a blank line after declarations
#92: FILE: mm/filemap.c:1973:
+		int copy = min(bytes, iov->iov_len - base);
+		bytes -= copy;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#103: FILE: mm/filemap.c:1984:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#115: FILE: mm/filemap.c:2014:
+	unsigned	iov_base = 0;	   /* offset in the current iovec */

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#145: FILE: mm/filemap.c:2185:
+		if (nr_segs == 1) {
[...]
+		} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#148: FILE: mm/filemap.c:2188:
+			page_fault = filemap_copy_from_user_iovec(page, offset, cur_iov, iov_base, bytes);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000432968.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 7 warnings, 2 checks, 103 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000432968.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
