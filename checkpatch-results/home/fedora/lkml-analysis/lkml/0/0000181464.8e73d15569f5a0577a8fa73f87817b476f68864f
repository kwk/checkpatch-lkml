WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
Makes the 802.11 layer independent of ethernet. (The previous implementation

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#43: FILE: include/linux/netdevice.h:87:
+#if !defined(CONFIG_AX25) && !defined(CONFIG_AX25_MODULE) && !defined(CONFIG_TR) \
+	&& !defined(CONFIG_IEEE80211)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'snap' - possible side-effects?
#120: FILE: include/net/ieee80211.h:255:
+#define IEEE80211_SNAP_IS_RFC1042(snap) \
+		((snap)->oui[0] == 0 && (snap)->oui[1] == 0 && (snap)->oui[2] == 0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'snap' - possible side-effects?
#122: FILE: include/net/ieee80211.h:257:
+#define IEEE80211_SNAP_IS_BRIDGE_TUNNEL(snap) \
+		((snap)->oui[0] == 0 && (snap)->oui[1] == 0 && (snap)->oui[2] == 0xf8)

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_le16 should be cpu_to_le16
#126: FILE: include/net/ieee80211.h:261:
+		((hdr)->frame_ctl & __constant_cpu_to_le16(IEEE80211_FCTL_TODS))

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_le16 should be cpu_to_le16
#128: FILE: include/net/ieee80211.h:263:
+		((hdr)->frame_ctl & __constant_cpu_to_le16(IEEE80211_FCTL_FROMDS))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'hdr' - possible side-effects?
#129: FILE: include/net/ieee80211.h:264:
+#define IEEE80211_GET_DADDR(hdr) \
+		(IEEE80211_FC_GET_TODS(hdr) ? (hdr)->addr3 : (hdr)->addr1)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'hdr' - possible side-effects?
#131: FILE: include/net/ieee80211.h:266:
+#define IEEE80211_GET_SADDR(hdr) \
+		(IEEE80211_FC_GET_FROMDS(hdr) ? \
+			(IEEE80211_FC_GET_TODS(hdr) ? (hdr)->addr4 : (hdr)->addr3) \
+			: (hdr)->addr2)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#215: FILE: include/net/ieee80211.h:819:
 }
+#define ieee80211_get_hdrlen(hdr) __ieee80211_get_hdrlen(le16_to_cpu((hdr)->frame_ctl))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_le16 should be cpu_to_le16
#219: FILE: include/net/ieee80211.h:823:
+			__constant_cpu_to_le16(IEEE80211_FCTL_TODS | IEEE80211_FCTL_FROMDS)) \

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_le16 should be cpu_to_le16
#220: FILE: include/net/ieee80211.h:824:
+		 == __constant_cpu_to_le16(IEEE80211_FCTL_TODS | IEEE80211_FCTL_FROMDS)) \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'hdr' - possible side-effects?
#222: FILE: include/net/ieee80211.h:826:
+#define IEEE80211_GET_SNAP(hdr) \
+		((struct ieee80211_snap_hdr *) \
+		((u8 *)(hdr) + IEEE80211_GET_DATA_HDR_LEN(hdr)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#229: FILE: include/net/ieee80211.h:833:
+	struct ieee80211_snap_hdr *snap = IEEE80211_GET_SNAP(header);
+	return (snap->dsap == 0xaa && snap->ssap == 0xaa ?

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#237: FILE: include/net/ieee80211.h:841:
+extern void ieee80211_setup(struct net_device *dev);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#360: FILE: net/ieee80211/ieee80211_rx.c:335:
+unsigned short ieee80211_type_trans(struct sk_buff *skb,
+		struct ieee80211_device *ieee)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#373: FILE: net/ieee80211/ieee80211_rx.c:348:
+	if (snap->dsap == 0xaa && snap->ssap == 0xaa &&
+			((IEEE80211_SNAP_IS_RFC1042(snap) &&

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#374: FILE: net/ieee80211/ieee80211_rx.c:349:
+			  snap->type != __constant_htons(ETH_P_AARP) &&

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#375: FILE: net/ieee80211/ieee80211_rx.c:350:
+			  snap->type != __constant_htons(ETH_P_IPX)) ||

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#380: FILE: net/ieee80211/ieee80211_rx.c:355:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#380: FILE: net/ieee80211/ieee80211_rx.c:355:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#381: FILE: net/ieee80211/ieee80211_rx.c:356:
+		type = __constant_htons(ETH_P_802_2);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#396: FILE: net/ieee80211/ieee80211_rx.c:371:
+
+

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#551: FILE: net/ieee80211/ieee80211_rx.c:842:
+					     info_element->len + (int)sizeof(struct ieee80211_info_element),

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_mtu < 68'
#580: FILE: net/ieee80211/ieee80211_module.c:103:
+	if ((new_mtu < 68) || (new_mtu > IEEE80211_DATA_LEN - 8 - SNAP_SIZE))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LINE_SPACING: Please don't use multiple blank lines
#586: FILE: net/ieee80211/ieee80211_module.c:109:
+
+

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#600: FILE: net/ieee80211/ieee80211_module.c:123:
+	if (h_proto == __constant_htons(ETH_P_IPX) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#601: FILE: net/ieee80211/ieee80211_module.c:124:
+	if (h_proto == __constant_htons(ETH_P_IPX) ||
+			h_proto == __constant_htons(ETH_P_AARP))

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#601: FILE: net/ieee80211/ieee80211_module.c:124:
+			h_proto == __constant_htons(ETH_P_AARP))

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#620: FILE: net/ieee80211/ieee80211_module.c:143:
+/*
+ *       Create the IEEE 802.11 MAC header for an arbitrary protocol layer

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#626: FILE: net/ieee80211/ieee80211_module.c:149:
+static int ieee80211_header(struct sk_buff *skb, struct net_device *dev,
+		unsigned short type, void *daddr, void *saddr, unsigned len)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#626: FILE: net/ieee80211/ieee80211_module.c:149:
+		unsigned short type, void *daddr, void *saddr, unsigned len)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#632: FILE: net/ieee80211/ieee80211_module.c:155:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#638: FILE: net/ieee80211/ieee80211_module.c:161:
+	if (!saddr) saddr = dev->dev_addr;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#640: FILE: net/ieee80211/ieee80211_module.c:163:
+	header->duration_id = header->seq_ctl = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#644: FILE: net/ieee80211/ieee80211_module.c:167:
+		/* To DS: Addr1 = BSSID, Addr2 = SA,
+		   Addr3 = DA */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#644: FILE: net/ieee80211/ieee80211_module.c:167:
+		   Addr3 = DA */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#653: FILE: net/ieee80211/ieee80211_module.c:176:
+		/* not From/To DS: Addr1 = DA, Addr2 = SA,
+		   Addr3 = BSSID */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#653: FILE: net/ieee80211/ieee80211_module.c:176:
+		   Addr3 = BSSID */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#682: FILE: net/ieee80211/ieee80211_module.c:205:
+		printk(KERN_DEBUG

ERROR:TRAILING_WHITESPACE: trailing whitespace
#687: FILE: net/ieee80211/ieee80211_module.c:210:
+^I$

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#709: FILE: net/ieee80211/ieee80211_module.c:232:
+	if (type == __constant_htons(ETH_P_802_3) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#710: FILE: net/ieee80211/ieee80211_module.c:233:
+	if (type == __constant_htons(ETH_P_802_3) ||
+			type == __constant_htons(ETH_P_802_2))

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#710: FILE: net/ieee80211/ieee80211_module.c:233:
+			type == __constant_htons(ETH_P_802_2))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#717: FILE: net/ieee80211/ieee80211_module.c:240:
+^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#718: FILE: net/ieee80211/ieee80211_module.c:241:
+	header->duration_id = header->seq_ctl = 0;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#722: FILE: net/ieee80211/ieee80211_module.c:245:
+		/* To DS: Addr1 = BSSID, Addr2 = SA,
+		   Addr3 = DA */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#722: FILE: net/ieee80211/ieee80211_module.c:245:
+		   Addr3 = DA */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#728: FILE: net/ieee80211/ieee80211_module.c:251:
+		/* not From/To DS: Addr1 = DA, Addr2 = SA,
+		   Addr3 = BSSID */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#728: FILE: net/ieee80211/ieee80211_module.c:251:
+		   Addr3 = BSSID */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#740: FILE: net/ieee80211/ieee80211_module.c:263:
+static void ieee80211_header_cache_update(struct hh_cache *hh,
+		struct net_device *dev, unsigned char *haddr)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#758: FILE: net/ieee80211/ieee80211_module.c:281:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#777: FILE: net/ieee80211/ieee80211_module.c:300:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#781: FILE: net/ieee80211/ieee80211_module.c:304:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#787: FILE: net/ieee80211/ieee80211_module.c:309:
+ ^Iint alloc_size;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#787: FILE: net/ieee80211/ieee80211_module.c:309:
+ ^Iint alloc_size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#787: FILE: net/ieee80211/ieee80211_module.c:309:
+ ^Iint alloc_size;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#796: FILE: net/ieee80211/ieee80211_module.c:314:
+ ^Ialloc_size = ((sizeof(struct ieee80211_device) + NETDEV_ALIGN_CONST) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#796: FILE: net/ieee80211/ieee80211_module.c:314:
+ ^Ialloc_size = ((sizeof(struct ieee80211_device) + NETDEV_ALIGN_CONST) $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#796: FILE: net/ieee80211/ieee80211_module.c:314:
+ ^Ialloc_size = ((sizeof(struct ieee80211_device) + NETDEV_ALIGN_CONST) $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#796: FILE: net/ieee80211/ieee80211_module.c:314:
+ ^Ialloc_size = ((sizeof(struct ieee80211_device) + NETDEV_ALIGN_CONST) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#797: FILE: net/ieee80211/ieee80211_module.c:315:
+ ^I^I^I& ~NETDEV_ALIGN_CONST) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#797: FILE: net/ieee80211/ieee80211_module.c:315:
+ ^I^I^I& ~NETDEV_ALIGN_CONST) $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#797: FILE: net/ieee80211/ieee80211_module.c:315:
+ ^I^I^I& ~NETDEV_ALIGN_CONST) $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#797: FILE: net/ieee80211/ieee80211_module.c:315:
+ ^I^I^I& ~NETDEV_ALIGN_CONST) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#798: FILE: net/ieee80211/ieee80211_module.c:316:
+ ^I^I^I+ sizeof_priv;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#798: FILE: net/ieee80211/ieee80211_module.c:316:
+ ^I^I^I+ sizeof_priv;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#798: FILE: net/ieee80211/ieee80211_module.c:316:
+ ^I^I^I+ sizeof_priv;$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#825: FILE: net/ieee80211/ieee80211_module.c:471:
+EXPORT_SYMBOL(ieee80211_setup);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#933: FILE: net/ieee80211/ieee80211_tx.c:211:
+		if (printk_ratelimit())

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#934: FILE: net/ieee80211/ieee80211_tx.c:212:
+			printk(KERN_WARNING "%s: No xmit handler.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#935: FILE: net/ieee80211/ieee80211_tx.c:213:
+			printk(KERN_WARNING "%s: No xmit handler.\n",
+				dev->name);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000181464.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 36 warnings, 23 checks, 1050 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000181464.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
