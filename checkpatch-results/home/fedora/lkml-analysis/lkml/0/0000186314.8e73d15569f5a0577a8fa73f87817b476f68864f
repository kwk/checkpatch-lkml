CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#87: FILE: arch/um/include/kern_util.h:35:
+extern unsigned long segv(struct faultinfo fi, unsigned long ip,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#97: FILE: arch/um/include/kern_util.h:86:
+extern void bad_segv(struct faultinfo fi, unsigned long ip);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#106: FILE: arch/um/include/sysdep-i386/faultinfo.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:CODE_INDENT: code indent should use tabs where possible
#124: FILE: arch/um/include/sysdep-i386/faultinfo.h:19:
+        int error_code; /* in ptrace_faultinfo misleadingly called is_write */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: arch/um/include/sysdep-i386/faultinfo.h:19:
+        int error_code; /* in ptrace_faultinfo misleadingly called is_write */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#125: FILE: arch/um/include/sysdep-i386/faultinfo.h:20:
+        unsigned long cr2; /* in ptrace_faultinfo called addr */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: arch/um/include/sysdep-i386/faultinfo.h:20:
+        unsigned long cr2; /* in ptrace_faultinfo called addr */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#126: FILE: arch/um/include/sysdep-i386/faultinfo.h:21:
+        int trap_no; /* missing in ptrace_faultinfo */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: arch/um/include/sysdep-i386/faultinfo.h:21:
+        int trap_no; /* missing in ptrace_faultinfo */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#164: FILE: arch/um/include/sysdep-i386/ptrace.h:69:
+                struct faultinfo faultinfo;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: arch/um/include/sysdep-i386/ptrace.h:69:
+                struct faultinfo faultinfo;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#175: FILE: arch/um/include/sysdep-i386/ptrace.h:77:
+                struct faultinfo faultinfo;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: arch/um/include/sysdep-i386/ptrace.h:77:
+                struct faultinfo faultinfo;$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#192: FILE: arch/um/include/sysdep-i386/ptrace.h:214:
+#define UPT_FAULTINFO(r) \
+        CHOOSE_MODE((&(r)->tt.faultinfo), (&(r)->skas.faultinfo))

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: arch/um/include/sysdep-i386/ptrace.h:215:
+        CHOOSE_MODE((&(r)->tt.faultinfo), (&(r)->skas.faultinfo))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: arch/um/include/sysdep-i386/ptrace.h:215:
+        CHOOSE_MODE((&(r)->tt.faultinfo), (&(r)->skas.faultinfo))$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#214: FILE: arch/um/include/sysdep-i386/sigcontext.h:16:
+#define GET_FAULTINFO_FROM_SC(fi,sc) \
                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fi' - possible side-effects?
#214: FILE: arch/um/include/sysdep-i386/sigcontext.h:16:
+#define GET_FAULTINFO_FROM_SC(fi,sc) \
+	{ \
+		(fi).cr2 = SC_CR2(sc); \
+		(fi).error_code = SC_ERR(sc); \
+		(fi).trap_no = SC_TRAPNO(sc); \
+	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sc' - possible side-effects?
#214: FILE: arch/um/include/sysdep-i386/sigcontext.h:16:
+#define GET_FAULTINFO_FROM_SC(fi,sc) \
+	{ \
+		(fi).cr2 = SC_CR2(sc); \
+		(fi).error_code = SC_ERR(sc); \
+		(fi).trap_no = SC_TRAPNO(sc); \
+	}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#239: FILE: arch/um/include/sysdep-i386/skas_ptrace.h:1:
+/*

ERROR:CODE_INDENT: code indent should use tabs where possible
#248: FILE: arch/um/include/sysdep-i386/skas_ptrace.h:10:
+        int is_write;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: arch/um/include/sysdep-i386/skas_ptrace.h:10:
+        int is_write;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#249: FILE: arch/um/include/sysdep-i386/skas_ptrace.h:11:
+        unsigned long addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: arch/um/include/sysdep-i386/skas_ptrace.h:11:
+        unsigned long addr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#253: FILE: arch/um/include/sysdep-i386/skas_ptrace.h:15:
+        int func;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#253: FILE: arch/um/include/sysdep-i386/skas_ptrace.h:15:
+        int func;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#254: FILE: arch/um/include/sysdep-i386/skas_ptrace.h:16:
+        void *ptr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: arch/um/include/sysdep-i386/skas_ptrace.h:16:
+        void *ptr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#255: FILE: arch/um/include/sysdep-i386/skas_ptrace.h:17:
+        unsigned long bytecount;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: arch/um/include/sysdep-i386/skas_ptrace.h:17:
+        unsigned long bytecount;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#266: FILE: arch/um/include/sysdep-ia64/skas_ptrace.h:1:
+/*

ERROR:CODE_INDENT: code indent should use tabs where possible
#275: FILE: arch/um/include/sysdep-ia64/skas_ptrace.h:10:
+        int is_write;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: arch/um/include/sysdep-ia64/skas_ptrace.h:10:
+        int is_write;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#276: FILE: arch/um/include/sysdep-ia64/skas_ptrace.h:11:
+        unsigned long addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#276: FILE: arch/um/include/sysdep-ia64/skas_ptrace.h:11:
+        unsigned long addr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#280: FILE: arch/um/include/sysdep-ia64/skas_ptrace.h:15:
+        int func;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: arch/um/include/sysdep-ia64/skas_ptrace.h:15:
+        int func;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#281: FILE: arch/um/include/sysdep-ia64/skas_ptrace.h:16:
+        void *ptr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#281: FILE: arch/um/include/sysdep-ia64/skas_ptrace.h:16:
+        void *ptr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#282: FILE: arch/um/include/sysdep-ia64/skas_ptrace.h:17:
+        unsigned long bytecount;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#282: FILE: arch/um/include/sysdep-ia64/skas_ptrace.h:17:
+        unsigned long bytecount;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#293: FILE: arch/um/include/sysdep-ppc/skas_ptrace.h:1:
+/*

ERROR:CODE_INDENT: code indent should use tabs where possible
#302: FILE: arch/um/include/sysdep-ppc/skas_ptrace.h:10:
+        int is_write;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#302: FILE: arch/um/include/sysdep-ppc/skas_ptrace.h:10:
+        int is_write;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#303: FILE: arch/um/include/sysdep-ppc/skas_ptrace.h:11:
+        unsigned long addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: arch/um/include/sysdep-ppc/skas_ptrace.h:11:
+        unsigned long addr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#307: FILE: arch/um/include/sysdep-ppc/skas_ptrace.h:15:
+        int func;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#307: FILE: arch/um/include/sysdep-ppc/skas_ptrace.h:15:
+        int func;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#308: FILE: arch/um/include/sysdep-ppc/skas_ptrace.h:16:
+        void *ptr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#308: FILE: arch/um/include/sysdep-ppc/skas_ptrace.h:16:
+        void *ptr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#309: FILE: arch/um/include/sysdep-ppc/skas_ptrace.h:17:
+        unsigned long bytecount;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#309: FILE: arch/um/include/sysdep-ppc/skas_ptrace.h:17:
+        unsigned long bytecount;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#320: FILE: arch/um/include/sysdep-x86_64/faultinfo.h:1:
+/*

ERROR:CODE_INDENT: code indent should use tabs where possible
#338: FILE: arch/um/include/sysdep-x86_64/faultinfo.h:19:
+        int error_code; /* in ptrace_faultinfo misleadingly called is_write */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#338: FILE: arch/um/include/sysdep-x86_64/faultinfo.h:19:
+        int error_code; /* in ptrace_faultinfo misleadingly called is_write */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#339: FILE: arch/um/include/sysdep-x86_64/faultinfo.h:20:
+        unsigned long cr2; /* in ptrace_faultinfo called addr */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#339: FILE: arch/um/include/sysdep-x86_64/faultinfo.h:20:
+        unsigned long cr2; /* in ptrace_faultinfo called addr */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#340: FILE: arch/um/include/sysdep-x86_64/faultinfo.h:21:
+        int trap_no; /* missing in ptrace_faultinfo */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#340: FILE: arch/um/include/sysdep-x86_64/faultinfo.h:21:
+        int trap_no; /* missing in ptrace_faultinfo */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#365: FILE: arch/um/include/sysdep-x86_64/ptrace.h:87:
+                struct faultinfo faultinfo;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#365: FILE: arch/um/include/sysdep-x86_64/ptrace.h:87:
+                struct faultinfo faultinfo;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#376: FILE: arch/um/include/sysdep-x86_64/ptrace.h:95:
+                struct faultinfo faultinfo;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#376: FILE: arch/um/include/sysdep-x86_64/ptrace.h:95:
+                struct faultinfo faultinfo;$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#392: FILE: arch/um/include/sysdep-x86_64/ptrace.h:244:
+#define UPT_FAULTINFO(r) \
+        CHOOSE_MODE((&(r)->tt.faultinfo), (&(r)->skas.faultinfo))

ERROR:CODE_INDENT: code indent should use tabs where possible
#393: FILE: arch/um/include/sysdep-x86_64/ptrace.h:245:
+        CHOOSE_MODE((&(r)->tt.faultinfo), (&(r)->skas.faultinfo))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#393: FILE: arch/um/include/sysdep-x86_64/ptrace.h:245:
+        CHOOSE_MODE((&(r)->tt.faultinfo), (&(r)->skas.faultinfo))$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#410: FILE: arch/um/include/sysdep-x86_64/sigcontext.h:20:
+#define GET_FAULTINFO_FROM_SC(fi,sc) \
                                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fi' - possible side-effects?
#410: FILE: arch/um/include/sysdep-x86_64/sigcontext.h:20:
+#define GET_FAULTINFO_FROM_SC(fi,sc) \
+	{ \
+		(fi).cr2 = SC_CR2(sc); \
+		(fi).error_code = SC_ERR(sc); \
+		(fi).trap_no = SC_TRAPNO(sc); \
+	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sc' - possible side-effects?
#410: FILE: arch/um/include/sysdep-x86_64/sigcontext.h:20:
+#define GET_FAULTINFO_FROM_SC(fi,sc) \
+	{ \
+		(fi).cr2 = SC_CR2(sc); \
+		(fi).error_code = SC_ERR(sc); \
+		(fi).trap_no = SC_TRAPNO(sc); \
+	}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#435: FILE: arch/um/include/sysdep-x86_64/skas_ptrace.h:1:
+/*

ERROR:CODE_INDENT: code indent should use tabs where possible
#444: FILE: arch/um/include/sysdep-x86_64/skas_ptrace.h:10:
+        int is_write;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#444: FILE: arch/um/include/sysdep-x86_64/skas_ptrace.h:10:
+        int is_write;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#445: FILE: arch/um/include/sysdep-x86_64/skas_ptrace.h:11:
+        unsigned long addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#445: FILE: arch/um/include/sysdep-x86_64/skas_ptrace.h:11:
+        unsigned long addr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#449: FILE: arch/um/include/sysdep-x86_64/skas_ptrace.h:15:
+        int func;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: arch/um/include/sysdep-x86_64/skas_ptrace.h:15:
+        int func;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#450: FILE: arch/um/include/sysdep-x86_64/skas_ptrace.h:16:
+        void *ptr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#450: FILE: arch/um/include/sysdep-x86_64/skas_ptrace.h:16:
+        void *ptr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#451: FILE: arch/um/include/sysdep-x86_64/skas_ptrace.h:17:
+        unsigned long bytecount;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#451: FILE: arch/um/include/sysdep-x86_64/skas_ptrace.h:17:
+        unsigned long bytecount;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#472: FILE: arch/um/kernel/ptrace.c:253:
+                /* Take the info from thread->arch->faultinfo,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#473: FILE: arch/um/kernel/ptrace.c:254:
+                 * but transfer max. sizeof(struct ptrace_faultinfo).$

ERROR:CODE_INDENT: code indent should use tabs where possible
#474: FILE: arch/um/kernel/ptrace.c:255:
+                 * On i386, ptrace_faultinfo is smaller!$

ERROR:CODE_INDENT: code indent should use tabs where possible
#475: FILE: arch/um/kernel/ptrace.c:256:
+                 */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#476: FILE: arch/um/kernel/ptrace.c:257:
+                ret = copy_to_user((unsigned long __user *) data, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#476: FILE: arch/um/kernel/ptrace.c:257:
+                ret = copy_to_user((unsigned long __user *) data, $

CHECK:SPACING: No space is necessary after a cast
#476: FILE: arch/um/kernel/ptrace.c:257:
+                ret = copy_to_user((unsigned long __user *) data, 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#476: FILE: arch/um/kernel/ptrace.c:257:
+                ret = copy_to_user((unsigned long __user *) data, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#477: FILE: arch/um/kernel/ptrace.c:258:
+                                   &child->thread.arch.faultinfo,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#477: FILE: arch/um/kernel/ptrace.c:258:
+                                   &child->thread.arch.faultinfo,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#478: FILE: arch/um/kernel/ptrace.c:259:
+                                   sizeof(struct ptrace_faultinfo));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#478: FILE: arch/um/kernel/ptrace.c:259:
+                                   sizeof(struct ptrace_faultinfo));$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#507: FILE: arch/um/kernel/skas/include/skas.h:30:
+extern void user_signal(int sig, union uml_pt_regs *regs, int pid);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#510: FILE: arch/um/kernel/skas/include/skas.h:33:
+extern void get_skas_faultinfo(int pid, struct faultinfo * fi);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#510: FILE: arch/um/kernel/skas/include/skas.h:33:
+extern void get_skas_faultinfo(int pid, struct faultinfo * fi);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#531: FILE: arch/um/kernel/skas/process.c:41:
+void get_skas_faultinfo(int pid, struct faultinfo * fi)

ERROR:CODE_INDENT: code indent should use tabs where possible
#537: FILE: arch/um/kernel/skas/process.c:45:
+        err = ptrace(PTRACE_FAULTINFO, pid, 0, fi);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#537: FILE: arch/um/kernel/skas/process.c:45:
+        err = ptrace(PTRACE_FAULTINFO, pid, 0, fi);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#541: FILE: arch/um/kernel/skas/process.c:47:
+                panic("get_skas_faultinfo - PTRACE_FAULTINFO failed, "$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#541: FILE: arch/um/kernel/skas/process.c:47:
+                panic("get_skas_faultinfo - PTRACE_FAULTINFO failed, "$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'get_skas_faultinfo', this function's name, in a string
#541: FILE: arch/um/kernel/skas/process.c:47:
+                panic("get_skas_faultinfo - PTRACE_FAULTINFO failed, "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:CODE_INDENT: code indent should use tabs where possible
#542: FILE: arch/um/kernel/skas/process.c:48:
+                      "errno = %d\n", errno);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#542: FILE: arch/um/kernel/skas/process.c:48:
+                      "errno = %d\n", errno);$

WARNING:SPLIT_STRING: quoted string split across lines
#542: FILE: arch/um/kernel/skas/process.c:48:
+                panic("get_skas_faultinfo - PTRACE_FAULTINFO failed, "
+                      "errno = %d\n", errno);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:CODE_INDENT: code indent should use tabs where possible
#544: FILE: arch/um/kernel/skas/process.c:50:
+        /* Special handling for i386, which has different structs */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#545: FILE: arch/um/kernel/skas/process.c:51:
+        if (sizeof(struct ptrace_faultinfo) < sizeof(struct faultinfo))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#545: FILE: arch/um/kernel/skas/process.c:51:
+        if (sizeof(struct ptrace_faultinfo) < sizeof(struct faultinfo))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#546: FILE: arch/um/kernel/skas/process.c:52:
+                memset((char *)fi + sizeof(struct ptrace_faultinfo), 0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#546: FILE: arch/um/kernel/skas/process.c:52:
+                memset((char *)fi + sizeof(struct ptrace_faultinfo), 0,$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#547: FILE: arch/um/kernel/skas/process.c:53:
+                       sizeof(struct faultinfo) - $

ERROR:CODE_INDENT: code indent should use tabs where possible
#547: FILE: arch/um/kernel/skas/process.c:53:
+                       sizeof(struct faultinfo) - $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#547: FILE: arch/um/kernel/skas/process.c:53:
+                       sizeof(struct faultinfo) - $

ERROR:CODE_INDENT: code indent should use tabs where possible
#548: FILE: arch/um/kernel/skas/process.c:54:
+                       sizeof(struct ptrace_faultinfo));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#548: FILE: arch/um/kernel/skas/process.c:54:
+                       sizeof(struct ptrace_faultinfo));$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#552: FILE: arch/um/kernel/skas/process.c:57:
+static void handle_segv(int pid, union uml_pt_regs * regs)

ERROR:CODE_INDENT: code indent should use tabs where possible
#554: FILE: arch/um/kernel/skas/process.c:59:
+        get_skas_faultinfo(pid, &regs->skas.faultinfo);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#554: FILE: arch/um/kernel/skas/process.c:59:
+        get_skas_faultinfo(pid, &regs->skas.faultinfo);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#555: FILE: arch/um/kernel/skas/process.c:60:
+        segv(regs->skas.faultinfo, 0, 1, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#555: FILE: arch/um/kernel/skas/process.c:60:
+        segv(regs->skas.faultinfo, 0, 1, NULL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#564: FILE: arch/um/kernel/skas/process.c:176:
+                                handle_segv(pid, regs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#564: FILE: arch/um/kernel/skas/process.c:176:
+                                handle_segv(pid, regs);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#573: FILE: arch/um/kernel/skas/process.c:190:
+                                user_signal(WSTOPSIG(status), regs, pid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#573: FILE: arch/um/kernel/skas/process.c:190:
+                                user_signal(WSTOPSIG(status), regs, pid);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#605: FILE: arch/um/kernel/skas/trap_user.c:37:
+        if ( sig == SIGFPE || sig == SIGSEGV ||$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#605: FILE: arch/um/kernel/skas/trap_user.c:37:
+        if ( sig == SIGFPE || sig == SIGSEGV ||$

ERROR:SPACING: space prohibited after that open parenthesis '('
#605: FILE: arch/um/kernel/skas/trap_user.c:37:
+        if ( sig == SIGFPE || sig == SIGSEGV ||

ERROR:CODE_INDENT: code indent should use tabs where possible
#606: FILE: arch/um/kernel/skas/trap_user.c:38:
+             sig == SIGBUS || sig == SIGILL ||$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#606: FILE: arch/um/kernel/skas/trap_user.c:38:
+        if ( sig == SIGFPE || sig == SIGSEGV ||
+             sig == SIGBUS || sig == SIGILL ||

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#606: FILE: arch/um/kernel/skas/trap_user.c:38:
+             sig == SIGBUS || sig == SIGILL ||$

ERROR:CODE_INDENT: code indent should use tabs where possible
#607: FILE: arch/um/kernel/skas/trap_user.c:39:
+             sig == SIGTRAP ) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#607: FILE: arch/um/kernel/skas/trap_user.c:39:
+             sig == SIGTRAP ) {$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#607: FILE: arch/um/kernel/skas/trap_user.c:39:
+             sig == SIGTRAP ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#608: FILE: arch/um/kernel/skas/trap_user.c:40:
+                GET_FAULTINFO_FROM_SC(r->faultinfo, sc);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#608: FILE: arch/um/kernel/skas/trap_user.c:40:
+                GET_FAULTINFO_FROM_SC(r->faultinfo, sc);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#609: FILE: arch/um/kernel/skas/trap_user.c:41:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#609: FILE: arch/um/kernel/skas/trap_user.c:41:
+        }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#623: FILE: arch/um/kernel/skas/trap_user.c:58:
+        int segv = ((sig == SIGFPE) || (sig == SIGSEGV) || (sig == SIGBUS) || $

ERROR:CODE_INDENT: code indent should use tabs where possible
#623: FILE: arch/um/kernel/skas/trap_user.c:58:
+        int segv = ((sig == SIGFPE) || (sig == SIGSEGV) || (sig == SIGBUS) || $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#623: FILE: arch/um/kernel/skas/trap_user.c:58:
+        int segv = ((sig == SIGFPE) || (sig == SIGSEGV) || (sig == SIGBUS) || $

ERROR:CODE_INDENT: code indent should use tabs where possible
#624: FILE: arch/um/kernel/skas/trap_user.c:59:
+                    (sig == SIGILL) || (sig == SIGTRAP));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#624: FILE: arch/um/kernel/skas/trap_user.c:59:
+                    (sig == SIGILL) || (sig == SIGTRAP));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#656: FILE: arch/um/kernel/trap_kern.c:147:
+        int is_write = FAULT_WRITE(fi);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#656: FILE: arch/um/kernel/trap_kern.c:147:
+        int is_write = FAULT_WRITE(fi);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#657: FILE: arch/um/kernel/trap_kern.c:148:
+        unsigned long address = FAULT_ADDRESS(fi);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#657: FILE: arch/um/kernel/trap_kern.c:148:
+        unsigned long address = FAULT_ADDRESS(fi);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#666: FILE: arch/um/kernel/trap_kern.c:169:
+        else if(!is_user && arch_fixup(ip, sc))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#666: FILE: arch/um/kernel/trap_kern.c:169:
+        else if(!is_user && arch_fixup(ip, sc))$

ERROR:SPACING: space required before the open parenthesis '('
#666: FILE: arch/um/kernel/trap_kern.c:169:
+        else if(!is_user && arch_fixup(ip, sc))

ERROR:CODE_INDENT: code indent should use tabs where possible
#674: FILE: arch/um/kernel/trap_kern.c:181:
+                current->thread.arch.faultinfo = fi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#674: FILE: arch/um/kernel/trap_kern.c:181:
+                current->thread.arch.faultinfo = fi;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#684: FILE: arch/um/kernel/trap_kern.c:191:
+                current->thread.arch.faultinfo = fi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#684: FILE: arch/um/kernel/trap_kern.c:191:
+                current->thread.arch.faultinfo = fi;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#700: FILE: arch/um/kernel/trap_kern.c:203:
+        si.si_addr = (void *) FAULT_ADDRESS(fi);$

CHECK:SPACING: No space is necessary after a cast
#700: FILE: arch/um/kernel/trap_kern.c:203:
+        si.si_addr = (void *) FAULT_ADDRESS(fi);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#700: FILE: arch/um/kernel/trap_kern.c:203:
+        si.si_addr = (void *) FAULT_ADDRESS(fi);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#701: FILE: arch/um/kernel/trap_kern.c:204:
+        current->thread.arch.faultinfo = fi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#701: FILE: arch/um/kernel/trap_kern.c:204:
+        current->thread.arch.faultinfo = fi;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#709: FILE: arch/um/kernel/trap_kern.c:213:
+        current->thread.arch.faultinfo = *UPT_FAULTINFO(regs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#709: FILE: arch/um/kernel/trap_kern.c:213:
+        current->thread.arch.faultinfo = *UPT_FAULTINFO(regs);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#721: FILE: arch/um/kernel/trap_user.c:57:
+        struct faultinfo * fi = UPT_FAULTINFO(regs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#721: FILE: arch/um/kernel/trap_user.c:57:
+        struct faultinfo * fi = UPT_FAULTINFO(regs);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#721: FILE: arch/um/kernel/trap_user.c:57:
+        struct faultinfo * fi = UPT_FAULTINFO(regs);

ERROR:CODE_INDENT: code indent should use tabs where possible
#726: FILE: arch/um/kernel/trap_user.c:59:
+        if(UPT_IS_USER(regs) && !SEGV_IS_FIXABLE(fi)){$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#726: FILE: arch/um/kernel/trap_user.c:59:
+        if(UPT_IS_USER(regs) && !SEGV_IS_FIXABLE(fi)){$

ERROR:SPACING: space required before the open brace '{'
#726: FILE: arch/um/kernel/trap_user.c:59:
+        if(UPT_IS_USER(regs) && !SEGV_IS_FIXABLE(fi)){

ERROR:SPACING: space required before the open parenthesis '('
#726: FILE: arch/um/kernel/trap_user.c:59:
+        if(UPT_IS_USER(regs) && !SEGV_IS_FIXABLE(fi)){

ERROR:CODE_INDENT: code indent should use tabs where possible
#727: FILE: arch/um/kernel/trap_user.c:60:
+                bad_segv(*fi, UPT_IP(regs));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#727: FILE: arch/um/kernel/trap_user.c:60:
+                bad_segv(*fi, UPT_IP(regs));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#735: FILE: arch/um/kernel/trap_user.c:67:
+        segfault_record[index].address = FAULT_ADDRESS(*fi);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#735: FILE: arch/um/kernel/trap_user.c:67:
+        segfault_record[index].address = FAULT_ADDRESS(*fi);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#738: FILE: arch/um/kernel/trap_user.c:69:
+        segfault_record[index].is_write = FAULT_WRITE(*fi);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#738: FILE: arch/um/kernel/trap_user.c:69:
+        segfault_record[index].is_write = FAULT_WRITE(*fi);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#743: FILE: arch/um/kernel/trap_user.c:72:
+        segv(*fi, UPT_IP(regs), UPT_IS_USER(regs), regs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#743: FILE: arch/um/kernel/trap_user.c:72:
+        segv(*fi, UPT_IP(regs), UPT_IS_USER(regs), regs);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#755: FILE: arch/um/kernel/tt/tracer.c:92:
+        struct faultinfo fi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#755: FILE: arch/um/kernel/tt/tracer.c:92:
+        struct faultinfo fi;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#756: FILE: arch/um/kernel/tt/tracer.c:93:
+        GET_FAULTINFO_FROM_SC(fi, &sc);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#756: FILE: arch/um/kernel/tt/tracer.c:93:
+        struct faultinfo fi;
+        GET_FAULTINFO_FROM_SC(fi, &sc);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#756: FILE: arch/um/kernel/tt/tracer.c:93:
+        GET_FAULTINFO_FROM_SC(fi, &sc);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#759: FILE: arch/um/kernel/tt/tracer.c:95:
+               FAULT_ADDRESS(fi), SC_IP(&sc));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#759: FILE: arch/um/kernel/tt/tracer.c:95:
+               FAULT_ADDRESS(fi), SC_IP(&sc));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#779: FILE: arch/um/kernel/tt/trap_user.c:32:
+        if ( sig == SIGFPE || sig == SIGSEGV ||$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#779: FILE: arch/um/kernel/tt/trap_user.c:32:
+        if ( sig == SIGFPE || sig == SIGSEGV ||$

ERROR:SPACING: space prohibited after that open parenthesis '('
#779: FILE: arch/um/kernel/tt/trap_user.c:32:
+        if ( sig == SIGFPE || sig == SIGSEGV ||

ERROR:CODE_INDENT: code indent should use tabs where possible
#780: FILE: arch/um/kernel/tt/trap_user.c:33:
+             sig == SIGBUS || sig == SIGILL ||$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#780: FILE: arch/um/kernel/tt/trap_user.c:33:
+        if ( sig == SIGFPE || sig == SIGSEGV ||
+             sig == SIGBUS || sig == SIGILL ||

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#780: FILE: arch/um/kernel/tt/trap_user.c:33:
+             sig == SIGBUS || sig == SIGILL ||$

ERROR:CODE_INDENT: code indent should use tabs where possible
#781: FILE: arch/um/kernel/tt/trap_user.c:34:
+             sig == SIGTRAP ) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#781: FILE: arch/um/kernel/tt/trap_user.c:34:
+             sig == SIGTRAP ) {$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#781: FILE: arch/um/kernel/tt/trap_user.c:34:
+             sig == SIGTRAP ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#782: FILE: arch/um/kernel/tt/trap_user.c:35:
+                GET_FAULTINFO_FROM_SC(r->faultinfo, sc);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#782: FILE: arch/um/kernel/tt/trap_user.c:35:
+                GET_FAULTINFO_FROM_SC(r->faultinfo, sc);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#783: FILE: arch/um/kernel/tt/trap_user.c:36:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#783: FILE: arch/um/kernel/tt/trap_user.c:36:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#807: FILE: arch/um/sys-i386/signal.c:62:
+                         struct pt_regs *regs)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#807: FILE: arch/um/sys-i386/signal.c:62:
+                         struct pt_regs *regs)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#811: FILE: arch/um/sys-i386/signal.c:66:
+	struct faultinfo * fi = &current->thread.arch.faultinfo;

ERROR:CODE_INDENT: code indent should use tabs where possible
#822: FILE: arch/um/sys-i386/signal.c:86:
+        sc.cr2 = fi->cr2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#822: FILE: arch/um/sys-i386/signal.c:86:
+        sc.cr2 = fi->cr2;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#823: FILE: arch/um/sys-i386/signal.c:87:
+        sc.err = fi->error_code;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#823: FILE: arch/um/sys-i386/signal.c:87:
+        sc.err = fi->error_code;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#824: FILE: arch/um/sys-i386/signal.c:88:
+        sc.trapno = fi->trap_no;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#824: FILE: arch/um/sys-i386/signal.c:88:
+        sc.trapno = fi->trap_no;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#835: FILE: arch/um/sys-i386/signal.c:167:
+                           copy_sc_to_user_skas(to, fp, from)));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#835: FILE: arch/um/sys-i386/signal.c:167:
+                           copy_sc_to_user_skas(to, fp, from)));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#848: FILE: arch/um/sys-x86_64/signal.c:60:
+        struct faultinfo * fi = &current->thread.arch.faultinfo;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#848: FILE: arch/um/sys-x86_64/signal.c:60:
+        struct faultinfo * fi = &current->thread.arch.faultinfo;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#848: FILE: arch/um/sys-x86_64/signal.c:60:
+        struct faultinfo * fi = &current->thread.arch.faultinfo;

ERROR:CODE_INDENT: code indent should use tabs where possible
#859: FILE: arch/um/sys-x86_64/signal.c:88:
+        err |= __put_user(fi->cr2, &to->cr2);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#859: FILE: arch/um/sys-x86_64/signal.c:88:
+        err |= __put_user(fi->cr2, &to->cr2);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#860: FILE: arch/um/sys-x86_64/signal.c:89:
+        err |= __put_user(fi->error_code, &to->err);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#860: FILE: arch/um/sys-x86_64/signal.c:89:
+        err |= __put_user(fi->error_code, &to->err);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#861: FILE: arch/um/sys-x86_64/signal.c:90:
+        err |= __put_user(fi->trap_no, &to->trapno);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#861: FILE: arch/um/sys-x86_64/signal.c:90:
+        err |= __put_user(fi->trap_no, &to->trapno);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#914: FILE: include/asm-um/processor-i386.h:22:
+                           .debugregs_seq^I= 0, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#914: FILE: include/asm-um/processor-i386.h:22:
+                           .debugregs_seq^I= 0, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#915: FILE: include/asm-um/processor-i386.h:23:
+                           .faultinfo^I^I= { 0, 0, 0 } }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#915: FILE: include/asm-um/processor-i386.h:23:
+                           .faultinfo^I^I= { 0, 0, 0 } }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#932: FILE: include/asm-um/processor-x86_64.h:14:
+        unsigned long debugregs[8];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#932: FILE: include/asm-um/processor-x86_64.h:14:
+        unsigned long debugregs[8];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#933: FILE: include/asm-um/processor-x86_64.h:15:
+        int debugregs_seq;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#933: FILE: include/asm-um/processor-x86_64.h:15:
+        int debugregs_seq;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#934: FILE: include/asm-um/processor-x86_64.h:16:
+        struct faultinfo faultinfo;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#934: FILE: include/asm-um/processor-x86_64.h:16:
+        struct faultinfo faultinfo;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#943: FILE: include/asm-um/processor-x86_64.h:27:
+#define INIT_ARCH_THREAD { .debugregs  ^I^I= { [ 0 ... 7 ] = 0 }, \$

ERROR:SPACING: space prohibited after that open square bracket '['
#943: FILE: include/asm-um/processor-x86_64.h:27:
+#define INIT_ARCH_THREAD { .debugregs  		= { [ 0 ... 7 ] = 0 }, \

ERROR:SPACING: space prohibited before that close square bracket ']'
#943: FILE: include/asm-um/processor-x86_64.h:27:
+#define INIT_ARCH_THREAD { .debugregs  		= { [ 0 ... 7 ] = 0 }, \

ERROR:CODE_INDENT: code indent should use tabs where possible
#944: FILE: include/asm-um/processor-x86_64.h:28:
+                           .debugregs_seq^I= 0, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#944: FILE: include/asm-um/processor-x86_64.h:28:
+                           .debugregs_seq^I= 0, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#945: FILE: include/asm-um/processor-x86_64.h:29:
+                           .faultinfo^I^I= { 0, 0, 0 } }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#945: FILE: include/asm-um/processor-x86_64.h:29:
+                           .faultinfo^I^I= { 0, 0, 0 } }$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000186314.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 116 errors, 101 warnings, 14 checks, 733 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000186314.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
