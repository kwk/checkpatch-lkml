WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
diff -pur -X /home/devel/roman/nodiff linux-2.5.66-cdev1/fs/char_dev.c linux-2.5.66-cdev2/fs/char_dev.c

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ma' - possible side-effects?
#37: FILE: fs/char_dev.c:26:
+#define isa_tty_dev(ma)	(ma == TTY_MAJOR || ma == TTYAUX_MAJOR)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ma' may be better as '(ma)' to avoid precedence issues
#37: FILE: fs/char_dev.c:26:
+#define isa_tty_dev(ma)	(ma == TTY_MAJOR || ma == TTYAUX_MAJOR)

CHECK:BIT_MACRO: Prefer using the BIT macro
#42: FILE: fs/char_dev.c:31:
+#define HASH_SIZE	(1UL << HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#43: FILE: fs/char_dev.c:32:
+#define HASH_MASK	(HASH_SIZE-1)
                  	          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#49: FILE: fs/char_dev.c:38:
+	 ((struct char_device *) kmem_cache_alloc(cdev_cachep, SLAB_KERNEL))

CHECK:SPACING: No space is necessary after a cast
#54: FILE: fs/char_dev.c:43:
+	struct char_device *cdev = (struct char_device *) foo;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#56: FILE: fs/char_dev.c:45:
+	if ((flags & (SLAB_CTOR_VERIFY|SLAB_CTOR_CONSTRUCTOR)) ==
 	                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#74: FILE: fs/char_dev.c:63:
+	cdev_cachep = kmem_cache_create("cdev_cache",
+					 sizeof(struct char_device),

WARNING:LINE_SPACING: Missing a blank line after declarations
#88: FILE: fs/char_dev.c:77:
+	unsigned long tmp = dev;
+	tmp = tmp + (tmp >> HASH_BITS) + (tmp >> HASH_BITS*2);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#88: FILE: fs/char_dev.c:77:
+	tmp = tmp + (tmp >> HASH_BITS) + (tmp >> HASH_BITS*2);
 	                                                  ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#109: FILE: fs/char_dev.c:98:
+	struct list_head * head = cdev_hashtable + hash(dev);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#154: FILE: fs/char_dev.c:151:
+			len += sprintf(page+len, "%3d %s\n", i, chrdevs[i].name);
 			                   ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#172: FILE: fs/char_dev.c:163:
+static struct file_operations * get_chrfops(unsigned int major, unsigned int minor)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#172: FILE: fs/char_dev.c:163:
+static struct file_operations * get_chrfops(unsigned int major, unsigned int minor)

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#175: FILE: fs/char_dev.c:165:
+	struct file_operations *ret = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#199: FILE: fs/char_dev.c:196:
+int register_chrdev(unsigned int major, const char * name, struct file_operations *fops)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#210: FILE: fs/dcache.c:1567:
+extern void cdev_cache_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#267: FILE: fs/inode.c:1327:
+		printk(KERN_DEBUG "init_special_inode: bogus i_mode (%o)\n", mode);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'init_special_inode', this function's name, in a string
#267: FILE: fs/inode.c:1327:
+		printk(KERN_DEBUG "init_special_inode: bogus i_mode (%o)\n", mode);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#297: FILE: include/linux/fs.h:1068:
+extern struct char_device *cdget(dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dev_t' should also have an identifier name
#297: FILE: include/linux/fs.h:1068:
+extern struct char_device *cdget(dev_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#298: FILE: include/linux/fs.h:1069:
+extern void cdput(struct char_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct char_device *' should also have an identifier name
#298: FILE: include/linux/fs.h:1069:
+extern void cdput(struct char_device *);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#310: FILE: kernel/ksyms.c:207:
+EXPORT_SYMBOL(cdput);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000382788.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 10 warnings, 12 checks, 251 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000382788.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
