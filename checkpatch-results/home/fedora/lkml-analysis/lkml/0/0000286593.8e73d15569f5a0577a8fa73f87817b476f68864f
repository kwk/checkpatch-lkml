WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
On Thu, Apr 22, 2004 at 10:37:37PM +0100, viro@parcelfarce.linux.theplanet.co.uk wrote:

WARNING:TYPO_SPELLING: 'doesnot' may be misspelled - perhaps 'doesn't'?
#72: 
o The symlinks code in sysfs doesnot point to the correct target kobject
                             ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'everytime' may be misspelled - perhaps 'every time'?
#79: 
  The target path is generated everytime we do ->readlink and ->follow_link. 
                               ^^^^^^^^^

WARNING:TYPO_SPELLING: 'inspite' may be misspelled - perhaps 'in spite'?
#81: 
  follow_link operations inspite of renamed target kobject. 
                         ^^^^^^^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#109: FILE: fs/sysfs/sysfs.h:15:
+extern int sysfs_readlink(struct dentry *, char __user *, int );

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#109: FILE: fs/sysfs/sysfs.h:15:
+extern int sysfs_readlink(struct dentry *, char __user *, int );

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#109: FILE: fs/sysfs/sysfs.h:15:
+extern int sysfs_readlink(struct dentry *, char __user *, int );

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char __user *' should also have an identifier name
#109: FILE: fs/sysfs/sysfs.h:15:
+extern int sysfs_readlink(struct dentry *, char __user *, int );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#109: FILE: fs/sysfs/sysfs.h:15:
+extern int sysfs_readlink(struct dentry *, char __user *, int );

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#110: FILE: fs/sysfs/sysfs.h:16:
+extern int sysfs_follow_link(struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#110: FILE: fs/sysfs/sysfs.h:16:
+extern int sysfs_follow_link(struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#110: FILE: fs/sysfs/sysfs.h:16:
+extern int sysfs_follow_link(struct dentry *, struct nameidata *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#131: FILE: fs/sysfs/dir.c:141:
+^I^I^I/* release the target kobject in case of $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#136: FILE: fs/sysfs/dir.c:146:
+^I^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#151: FILE: fs/sysfs/dir.c:182:
+		kobject_set_name(kobj,new_name);
 		                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#164: FILE: fs/sysfs/inode.c:100:
+^I^I^I/* release the target kobject in case of $

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#179: FILE: fs/sysfs/symlink.c:11:
+static struct inode_operations sysfs_symlink_inode_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:BRACES: braces {} should be used on all arms of this statement
#239: FILE: fs/sysfs/symlink.c:70:
+	if (!IS_ERR(d)) {
[...]
+	} else 
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#240: FILE: fs/sysfs/symlink.c:71:
+		error = sysfs_create(d, S_IFLNK|S_IRWXUGO, init_symlink);
 		                               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#240: FILE: fs/sysfs/symlink.c:71:
+		error = sysfs_create(d, S_IFLNK|S_IRWXUGO, init_symlink);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#242: FILE: fs/sysfs/symlink.c:73:
+^I^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#243: FILE: fs/sysfs/symlink.c:74:
+^I^I^I * associate the link dentry with the target kobject $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#247: FILE: fs/sysfs/symlink.c:78:
+^I} else $

CHECK:BRACES: Unbalanced braces around else statement
#247: FILE: fs/sysfs/symlink.c:78:
+	} else 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#259: FILE: fs/sysfs/symlink.c:96:
+static int sysfs_get_target_path(struct kobject * kobj, struct kobject * target,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#259: FILE: fs/sysfs/symlink.c:96:
+static int sysfs_get_target_path(struct kobject * kobj, struct kobject * target,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: fs/sysfs/symlink.c:97:
+static int sysfs_get_target_path(struct kobject * kobj, struct kobject * target,
+				   char *path)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#262: FILE: fs/sysfs/symlink.c:99:
+	char * s;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#270: FILE: fs/sysfs/symlink.c:107:
+	pr_debug("%s: depth = %d, size = %d\n", __FUNCTION__, depth, size);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#273: FILE: fs/sysfs/symlink.c:110:
+		strcpy(s,"../");
 		        ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#276: FILE: fs/sysfs/symlink.c:113:
+	pr_debug("%s: path = '%s'\n", __FUNCTION__, path);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#281: FILE: fs/sysfs/symlink.c:118:
+static int sysfs_getlink(struct dentry *dentry, char * path)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#284: FILE: fs/sysfs/symlink.c:121:
+	struct dentry * target_parent;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#300: FILE: fs/sysfs/symlink.c:137:
+^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#305: FILE: fs/sysfs/symlink.c:142:
+
+}

CHECK:SPACING: No space is necessary after a cast
#315: FILE: fs/sysfs/symlink.c:152:
+	error = sysfs_getlink(dentry, (char *) page);

ERROR:CODE_INDENT: code indent should use tabs where possible
#317: FILE: fs/sysfs/symlink.c:154:
+^I        error = vfs_readlink(dentry, buffer, buflen, (char *) page);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: No space is necessary after a cast
#317: FILE: fs/sysfs/symlink.c:154:
+	        error = vfs_readlink(dentry, buffer, buflen, (char *) page);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#324: FILE: fs/sysfs/symlink.c:161:
+int sysfs_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#332: FILE: fs/sysfs/symlink.c:169:
+^Ierror = sysfs_getlink(dentry, (char *) page); $

CHECK:SPACING: No space is necessary after a cast
#332: FILE: fs/sysfs/symlink.c:169:
+	error = sysfs_getlink(dentry, (char *) page); 

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#334: FILE: fs/sysfs/symlink.c:171:
+	        error = vfs_follow_link(nd, (char *) page);
 	                                ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#334: FILE: fs/sysfs/symlink.c:171:
+^I        error = vfs_follow_link(nd, (char *) page);$

CHECK:SPACING: No space is necessary after a cast
#334: FILE: fs/sysfs/symlink.c:171:
+	        error = vfs_follow_link(nd, (char *) page);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#356: FILE: fs/sysfs/group.c:74:
+		remove_files(dir,grp);
 		                ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000286593.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 15 warnings, 11 checks, 239 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000286593.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
