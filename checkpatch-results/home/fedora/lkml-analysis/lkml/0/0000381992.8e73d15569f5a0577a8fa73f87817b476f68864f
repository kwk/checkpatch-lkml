WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#24: 
# Bio traversal (separate submittion/completion bio pointers).

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#25: 
# Patch 1/2 - Core changes.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#26: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#27: 
# Originally by Suparna Bhattacharya.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#28: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#29: 
# Bartlomiej Zolnierkiewicz <bzolnier@elka.pw.edu.pl>

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
diff -uNr linux-2.5.66/drivers/block/elevator.c linux/drivers/block/elevator.c

ERROR:CODE_INDENT: code indent should use tabs where possible
#40: FILE: drivers/block/elevator.c:329:
+ ^I^I */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#40: FILE: drivers/block/elevator.c:329:
+ ^I^I */$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#41: FILE: drivers/block/elevator.c:330:
+		if ((rq->bio = rq->hard_bio)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#72: FILE: drivers/block/ll_rw_blk.c:1740:
+			req->hard_bio = req->bio = bio;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#84: FILE: drivers/block/ll_rw_blk.c:1813:
+	req->hard_bio = req->bio = req->biotail = bio;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rq->nr_sectors >= rq->hard_nr_sectors'
#116: FILE: drivers/block/ll_rw_blk.c:2017:
+		if ((rq->nr_sectors >= rq->hard_nr_sectors) &&
+		    (rq->sector <= rq->hard_sector)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rq->sector <= rq->hard_sector'
#116: FILE: drivers/block/ll_rw_blk.c:2017:
+		if ((rq->nr_sectors >= rq->hard_nr_sectors) &&
+		    (rq->sector <= rq->hard_sector)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#150: FILE: drivers/block/ll_rw_blk.c:2107:
+		if ((bio = req->hard_bio)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#202: FILE: drivers/block/ll_rw_blk.c:2227:
+		if ((rq->bio = rq->bio->bi_next)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#205: FILE: drivers/block/ll_rw_blk.c:2230:
+ ^I^I^Irq->current_nr_sectors = bio_cur_sectors(rq->bio);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#205: FILE: drivers/block/ll_rw_blk.c:2230:
+ ^I^I^Irq->current_nr_sectors = bio_cur_sectors(rq->bio);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: drivers/block/ll_rw_blk.c:2230:
+ ^I^I^Irq->current_nr_sectors = bio_cur_sectors(rq->bio);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#207: FILE: drivers/block/ll_rw_blk.c:2232:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#207: FILE: drivers/block/ll_rw_blk.c:2232:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: drivers/block/ll_rw_blk.c:2232:
+ ^I}$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bio' - possible side-effects?
#268: FILE: include/linux/bio.h:134:
+#define bio_segments(bio)	((bio)->bi_vcnt - (bio)->bi_idx)

CHECK:SPACING: No space is necessary after a cast
#295: FILE: include/linux/bio.h:246:
+	addr = (unsigned long) kmap_atomic(bvec->bv_page, KM_BIO_SRC_IRQ);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#301: FILE: include/linux/bio.h:251:
+	return (char *) addr + bvec->bv_offset;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bvec' - possible side-effects?
#315: FILE: include/linux/bio.h:263:
+#define bvec_kmap_irq(bvec, flags)	(page_address((bvec)->bv_page) + (bvec)->bv_offset)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#316: FILE: include/linux/bio.h:264:
+#define bvec_kunmap_irq(buf, flags)	do { *(flags) = 0; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#324: FILE: include/linux/bio.h:272:
+}
+#define __bio_kunmap_irq		bvec_kunmap_irq

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bio' - possible side-effects?
#327: FILE: include/linux/bio.h:275:
+#define bio_kmap_irq(bio, flags) \
+	__bio_kmap_irq((bio), (bio)->bi_idx, (flags))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#339: FILE: include/linux/blk.h:46:
+extern int process_that_request_first(struct request *, unsigned int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#339: FILE: include/linux/blk.h:46:
+extern int process_that_request_first(struct request *, unsigned int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#339: FILE: include/linux/blk.h:46:
+extern int process_that_request_first(struct request *, unsigned int);

ERROR:CODE_INDENT: code indent should use tabs where possible
#377: FILE: include/linux/blkdev.h:54:
+ ^Iunsigned int hard_cur_sectors;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#377: FILE: include/linux/blkdev.h:54:
+ ^Iunsigned int hard_cur_sectors;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#377: FILE: include/linux/blkdev.h:54:
+ ^Iunsigned int hard_cur_sectors;$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#406: FILE: include/linux/blkdev.h:297:
+#define blk_rq_idx(rq)	((rq)->bio->bi_vcnt - (rq)->nr_bio_segments)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#409: FILE: include/linux/blkdev.h:300:
+#define blk_rq_vec(rq)	(bio_iovec_idx((rq)->bio, blk_rq_idx(rq)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#416: FILE: include/linux/blkdev.h:307:
+#define blk_rq_offset(rq) \
+	(((rq)->hard_cur_sectors - (rq)->current_nr_sectors) << 9)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#420: FILE: include/linux/blkdev.h:311:
+static inline char * rq_map_buffer(struct request *rq, unsigned long *flags)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#438: FILE: include/linux/blkdev.h:359:
+#define rq_for_each_hard_bio(bio, rq)	\
+	if ((rq->hard_bio))		\
+		for (bio = (rq)->hard_bio; bio; bio = bio->bi_next)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bio' - possible side-effects?
#438: FILE: include/linux/blkdev.h:359:
+#define rq_for_each_hard_bio(bio, rq)	\
+	if ((rq->hard_bio))		\
+		for (bio = (rq)->hard_bio; bio; bio = bio->bi_next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#438: FILE: include/linux/blkdev.h:359:
+#define rq_for_each_hard_bio(bio, rq)	\
+	if ((rq->hard_bio))		\
+		for (bio = (rq)->hard_bio; bio; bio = bio->bi_next)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'rq' may be better as '(rq)' to avoid precedence issues
#438: FILE: include/linux/blkdev.h:359:
+#define rq_for_each_hard_bio(bio, rq)	\
+	if ((rq->hard_bio))		\
+		for (bio = (rq)->hard_bio; bio; bio = bio->bi_next)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rq->hard_bio'
#439: FILE: include/linux/blkdev.h:360:
+	if ((rq->hard_bio))		\

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000381992.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 17 warnings, 18 checks, 385 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000381992.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
