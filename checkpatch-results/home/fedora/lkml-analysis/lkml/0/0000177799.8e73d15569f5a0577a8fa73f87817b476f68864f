WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#257: FILE: drivers/scsi/ahci.c:605:
+		printk(KERN_WARNING "ata%u: stat=%x, issuing COMRESET\n", ap->id, tmp);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#286: FILE: drivers/scsi/ahci.c:635:
+			printk(KERN_ERR "ahci: missing tag %d\n", tag);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#294: FILE: drivers/scsi/ahci.c:643:
+	printk("LOG 0x10: nq=%d, tag=%d\n", p[0] >> 7, p[0] & 0x1f);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#297: FILE: drivers/scsi/ahci.c:646:
+		printk("%d:%d ", i, p[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#299: FILE: drivers/scsi/ahci.c:648:
+	printk("\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#317: FILE: drivers/scsi/ahci.c:666:
+	printk(KERN_WARNING "ata%u: ncq interrupt error (Q=%d)\n", ap->id, ap->queue_depth);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#323: FILE: drivers/scsi/ahci.c:672:
+	printk(KERN_WARNING "ata%u: SActive 0x%x (0x%x)\n", ap->id, sactive, pp->sactive);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#336: FILE: drivers/scsi/ahci.c:685:
+		printk(KERN_ERR "ata%u: unable to allocate memory for error\n", ap->id);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#336: FILE: drivers/scsi/ahci.c:685:
+	if (!buffer) {
+		printk(KERN_ERR "ata%u: unable to allocate memory for error\n", ap->id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#341: FILE: drivers/scsi/ahci.c:690:
+		printk(KERN_ERR "ata%u: unable to read log page\n", ap->id);

CHECK:BRACES: braces {} should be used on all arms of this statement
#367: FILE: drivers/scsi/ahci.c:716:
+		if (qc) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#372: FILE: drivers/scsi/ahci.c:721:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#373: FILE: drivers/scsi/ahci.c:722:
+			printk(KERN_ERR "ata%u: missing tag %d\n", ap->id, tag);

CHECK:BRACES: braces {} should be used on all arms of this statement
#412: FILE: drivers/scsi/ahci.c:776:
+	if (status & PORT_IRQ_SDB_FIS) {
[...]
+	} else if (status & PORT_IRQ_D2H_REG_FIS) {
[...]
+	} else
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#417: FILE: drivers/scsi/ahci.c:781:
+			printk("SDB fis, stat %x, err %x\n", sdb[2], sdb[3]);

CHECK:BRACES: braces {} should be used on all arms of this statement
#426: FILE: drivers/scsi/ahci.c:790:
+		if (mask) {
[...]
+		} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#430: FILE: drivers/scsi/ahci.c:794:
+			return 1;
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#430: FILE: drivers/scsi/ahci.c:794:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#431: FILE: drivers/scsi/ahci.c:795:
+			printk(KERN_INFO "ata%u: SDB with no bits cleared\n", ap->id);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#444: FILE: drivers/scsi/ahci.c:808:
+		printk("D2H fis\n");

CHECK:BRACES: Unbalanced braces around else statement
#445: FILE: drivers/scsi/ahci.c:809:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#446: FILE: drivers/scsi/ahci.c:810:
+		printk(KERN_WARNING "ata%u: unhandled FIS, stat %x\n", ap->id, status);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#458: FILE: drivers/scsi/ahci.c:822:
+	printk(KERN_ERR "ata%u: NCQ err status 0x%x\n", ap->id, status);

CHECK:BRACES: braces {} should be used on all arms of this statement
#465: FILE: drivers/scsi/ahci.c:829:
+		if (qc) {
[...]
+		} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#466: FILE: drivers/scsi/ahci.c:830:
+			printk(KERN_ERR "ata%u: ending bad tag %d\n", ap->id, tag);

CHECK:BRACES: Unbalanced braces around else statement
#469: FILE: drivers/scsi/ahci.c:833:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#470: FILE: drivers/scsi/ahci.c:834:
+			printk(KERN_ERR "ata%u: error on tag %d, but not present\n", ap->id, tag);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#499: FILE: drivers/scsi/ahci.c:858:
+		printk("ata%u: irq error %x %x, tag %d\n", ap->id, serr, status, ap->active_tag);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#554: FILE: drivers/scsi/ahci.c:932:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#650: FILE: drivers/scsi/libata-core.c:1269:
+		printk(KERN_INFO "ata%u: dev %u ATA, max %s, %Lu sectors:%s%s\n",

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#650: FILE: drivers/scsi/libata-core.c:1269:
+		printk(KERN_INFO "ata%u: dev %u ATA, max %s, %Lu sectors:%s%s\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#693: FILE: drivers/scsi/libata-core.c:1337:
+	BUG_ON(qc == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qc"
#693: FILE: drivers/scsi/libata-core.c:1337:
+	BUG_ON(qc == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#754: FILE: drivers/scsi/libata-core.c:3062:
+	WARN_ON(!spin_is_locked(&ap->host_set->lock));

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#932: FILE: drivers/scsi/libata-core.c:4579:
+EXPORT_SYMBOL_GPL(ata_scsi_block_requests);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#933: FILE: drivers/scsi/libata-core.c:4580:
+EXPORT_SYMBOL_GPL(ata_scsi_unblock_requests);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#934: FILE: drivers/scsi/libata-core.c:4581:
+EXPORT_SYMBOL_GPL(ata_scsi_requeue);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#935: FILE: drivers/scsi/libata-core.c:4582:
+EXPORT_SYMBOL_GPL(ata_read_log_page);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#955: FILE: drivers/scsi/libata-scsi.c:117:
+	switch (cmd->cmnd[0]) {
+		case READ_6:
+		case READ_10:
+		case READ_12:
+		case READ_16:
+		case WRITE_6:
+		case WRITE_10:
+		case WRITE_12:
+		case WRITE_16:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: No space is necessary after a cast
#1035: FILE: drivers/scsi/libata-scsi.c:411:
+	ap = (struct ata_port *) &sdev->host->hostdata[0];

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#1050: FILE: drivers/scsi/libata-scsi.c:426:
+	if (scmd) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1058: FILE: drivers/scsi/libata-scsi.c:434:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host>
#1064: FILE: drivers/scsi/libata-scsi.c:440:
+	struct Scsi_Host *host = ap->host;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1076: FILE: drivers/scsi/libata-scsi.c:452:
+
+

CHECK:SPACING: No space is necessary after a cast
#1086: FILE: drivers/scsi/libata-scsi.c:469:
+	struct ata_port *ap = (struct ata_port *) &host->hostdata[0];

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1091: FILE: drivers/scsi/libata-scsi.c:473:
+	printk("ata_scsi_err: host_failed=%d\n", host->host_failed);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1147: FILE: drivers/scsi/libata-scsi.c:690:
+		if (ncq) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1152: FILE: drivers/scsi/libata-scsi.c:695:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1228: FILE: drivers/scsi/libata-scsi.c:837:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1228: FILE: drivers/scsi/libata-scsi.c:837:
+ $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1344: FILE: include/linux/libata.h:450:
+extern int ata_scsi_change_queue_depth(struct scsi_device *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_device *' should also have an identifier name
#1344: FILE: include/linux/libata.h:450:
+extern int ata_scsi_change_queue_depth(struct scsi_device *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1344: FILE: include/linux/libata.h:450:
+extern int ata_scsi_change_queue_depth(struct scsi_device *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1345: FILE: include/linux/libata.h:451:
+extern void ata_scsi_block_requests(struct ata_port *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_port *' should also have an identifier name
#1345: FILE: include/linux/libata.h:451:
+extern void ata_scsi_block_requests(struct ata_port *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1346: FILE: include/linux/libata.h:452:
+extern void ata_scsi_unblock_requests(struct ata_port *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_port *' should also have an identifier name
#1346: FILE: include/linux/libata.h:452:
+extern void ata_scsi_unblock_requests(struct ata_port *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1347: FILE: include/linux/libata.h:453:
+extern void ata_scsi_requeue(struct ata_queued_cmd *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_queued_cmd *' should also have an identifier name
#1347: FILE: include/linux/libata.h:453:
+extern void ata_scsi_requeue(struct ata_queued_cmd *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1348: FILE: include/linux/libata.h:454:
+extern int ata_read_log_page(struct ata_port *, unsigned int, char, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_port *' should also have an identifier name
#1348: FILE: include/linux/libata.h:454:
+extern int ata_read_log_page(struct ata_port *, unsigned int, char, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1348: FILE: include/linux/libata.h:454:
+extern int ata_read_log_page(struct ata_port *, unsigned int, char, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char' should also have an identifier name
#1348: FILE: include/linux/libata.h:454:
+extern int ata_read_log_page(struct ata_port *, unsigned int, char, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1348: FILE: include/linux/libata.h:454:
+extern int ata_read_log_page(struct ata_port *, unsigned int, char, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1348: FILE: include/linux/libata.h:454:
+extern int ata_read_log_page(struct ata_port *, unsigned int, char, char *,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000177799.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 40 warnings, 23 checks, 1263 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000177799.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
