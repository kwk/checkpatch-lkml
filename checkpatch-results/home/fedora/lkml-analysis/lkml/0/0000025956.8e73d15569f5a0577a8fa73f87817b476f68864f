WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#51: FILE: include/linux/cpu_acct.h:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#59: FILE: include/linux/cpu_acct.h:9:
+extern void cpuacct_charge(struct task_struct *, cputime_t cputime);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#61: FILE: include/linux/cpu_acct.h:11:
+static void inline cpuacct_charge(struct task_struct *p, cputime_t cputime) {}

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#73: FILE: init/Kconfig:264:
+config CONTAINER_CPUACCT
+	bool "Simple CPU accounting container subsystem"
+	select CONTAINERS
+	help
+	  Provides a simple Resource Controller for monitoring the
+	  total CPU consumed by the tasks in a container
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#88: FILE: kernel/cpu_acct.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#89: FILE: kernel/cpu_acct.c:2:
+ * kernel/cpu_acct.c - CPU accounting container subsystem

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:LINE_SPACING: Missing a blank line after declarations
#119: FILE: kernel/cpu_acct.c:32:
+	struct cpuacct *ca = kzalloc(sizeof(*ca), GFP_KERNEL);
+	if (!ca) return -ENOMEM;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#119: FILE: kernel/cpu_acct.c:32:
+	if (!ca) return -ENOMEM;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#126: FILE: kernel/cpu_acct.c:39:
+                            struct container *cont)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: kernel/cpu_acct.c:39:
+                            struct container *cont)$

CHECK:SPACING: No space is necessary after a cast
#148: FILE: kernel/cpu_acct.c:61:
+	s += sprintf(s, "%llu", (unsigned long long) time);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#159: FILE: kernel/cpu_acct.c:72:
+                            struct container *cont)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: kernel/cpu_acct.c:72:
+                            struct container *cont)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#164: FILE: kernel/cpu_acct.c:77:
+
+

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#165: FILE: kernel/cpu_acct.c:78:
+void cpuacct_charge(struct task_struct *task, cputime_t cputime) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#166: FILE: kernel/cpu_acct.c:79:
+void cpuacct_charge(struct task_struct *task, cputime_t cputime) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#171: FILE: kernel/cpu_acct.c:84:
+	if (cpuacct_subsys.subsys_id < 0) return;

WARNING:LINE_SPACING: Missing a blank line after declarations
#194: FILE: kernel/cpu_acct.c:107:
+	int id = container_register_subsys(&cpuacct_subsys);
+	return id < 0 ? id : 0;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000025956.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 8 warnings, 4 checks, 168 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000025956.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
