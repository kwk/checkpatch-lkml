WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
> > > to the functions rather than thorough code comparisons but I don't have

WARNING:LONG_LINE: line length of 130 exceeds 100 columns
#98: FILE: fs/inode.c:787:
+static struct inode * find_inode(struct super_block * sb, struct list_head *head, int (*test)(struct inode *, void *), void *data)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#98: FILE: fs/inode.c:787:
+static struct inode * find_inode(struct super_block * sb, struct list_head *head, int (*test)(struct inode *, void *), void *data)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#98: FILE: fs/inode.c:787:
+static struct inode * find_inode(struct super_block * sb, struct list_head *head, int (*test)(struct inode *, void *), void *data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#101: FILE: fs/inode.c:790:
+	struct inode * inode;

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#123: FILE: fs/inode.c:812:
+static struct inode * find_inode_fast(struct super_block * sb, struct list_head *head, unsigned long ino)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#123: FILE: fs/inode.c:812:
+static struct inode * find_inode_fast(struct super_block * sb, struct list_head *head, unsigned long ino)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#123: FILE: fs/inode.c:812:
+static struct inode * find_inode_fast(struct super_block * sb, struct list_head *head, unsigned long ino)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#150: FILE: fs/inode.c:869:
+	inode->i_state &= ~(I_LOCK|I_NEW);
 	                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#154: FILE: fs/inode.c:873:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 168 exceeds 100 columns
#162: FILE: fs/inode.c:880:
+static struct inode * get_new_inode(struct super_block *sb, struct list_head *head, int (*test)(struct inode *, void *), int (*set)(struct inode *, void *), void *data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#162: FILE: fs/inode.c:880:
+static struct inode * get_new_inode(struct super_block *sb, struct list_head *head, int (*test)(struct inode *, void *), int (*set)(struct inode *, void *), void *data)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#181: FILE: fs/inode.c:898:
+			inode->i_state = I_LOCK|I_NEW;
 			                       ^

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#233: FILE: fs/inode.c:930:
+static struct inode * get_new_inode_fast(struct super_block *sb, struct list_head *head, unsigned long ino)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#233: FILE: fs/inode.c:930:
+static struct inode * get_new_inode_fast(struct super_block *sb, struct list_head *head, unsigned long ino)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#235: FILE: fs/inode.c:932:
+	struct inode * inode;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#239: FILE: fs/inode.c:936:
+		struct inode * old;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#249: FILE: fs/inode.c:946:
+			inode->i_state = I_LOCK|I_NEW;
 			                       ^

CHECK:SPACING: No space is necessary after a cast
#266: FILE: fs/inode.c:971:
+	unsigned long tmp = hashval + ((unsigned long) sb / L1_CACHE_BYTES);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#303: FILE: fs/inode.c:1051:
+static inline struct inode *ifind(struct super_block *sb,
+		struct list_head *head, int (*test)(struct inode *, void *),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#336: FILE: fs/inode.c:1083:
+static inline struct inode *ifind_fast(struct super_block *sb,
+		struct list_head *head, unsigned long ino)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#375: FILE: fs/inode.c:1119:
+struct inode *ilookup5(struct super_block *sb, unsigned long hashval,
+		int (*test)(struct inode *, void *), void *data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#428: FILE: fs/inode.c:1172:
+struct inode *iget5_locked(struct super_block *sb, unsigned long hashval,
+		int (*test)(struct inode *, void *),

CHECK:CAMELCASE: Avoid CamelCase: <ViceFid>
#521: FILE: fs/coda/cnode.c:62:
+	ViceFid *fid = (ViceFid *)data;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LINE_SPACING: Missing a blank line after declarations
#522: FILE: fs/coda/cnode.c:63:
+	ViceFid *fid = (ViceFid *)data;
+	return coda_fideq(&(ITOC(inode)->c_fid), fid);

WARNING:LINE_SPACING: Missing a blank line after declarations
#528: FILE: fs/coda/cnode.c:69:
+	ViceFid *fid = (ViceFid *)data;
+	ITOC(inode)->c_fid = *fid;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#595: FILE: fs/coda/cnode.c:162:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#595: FILE: fs/coda/cnode.c:162:
 {
+	

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#619: FILE: fs/coda/cnode.c:174:
+	if ( !inode )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#619: FILE: fs/coda/cnode.c:174:
+	if ( !inode )

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#629: FILE: fs/coda/cnode.c:178:
+	 * fail in the initialization callback */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#630: FILE: fs/coda/cnode.c:179:
+	BUG_ON(inode->i_state & I_NEW);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#816: FILE: fs/nfs/inode.c:710:
+	if (!(inode = iget5_locked(sb, hash, nfs_find_actor, nfs_init_locked, &desc)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#820: FILE: fs/nfs/inode.c:713:
+        if (inode->i_state & I_NEW) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#820: FILE: fs/nfs/inode.c:713:
+        if (inode->i_state & I_NEW) {$

CHECK:BRACES: braces {} should be used on all arms of this statement
#820: FILE: fs/nfs/inode.c:713:
+        if (inode->i_state & I_NEW) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#836: FILE: fs/nfs/inode.c:729:
+	} else

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#849: FILE: fs/reiserfs/inode.c:33:
+    if (!(inode->i_state & I_NEW) && INODE_PKEY(inode)->k_objectid != 0) { /* also handles bad_inode case */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#849: FILE: fs/reiserfs/inode.c:33:
+    if (!(inode->i_state & I_NEW) && INODE_PKEY(inode)->k_objectid != 0) { /* also handles bad_inode case */$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#868: FILE: fs/reiserfs/inode.c:1130:
+int reiserfs_init_locked_inode (struct inode * inode, void *p)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#868: FILE: fs/reiserfs/inode.c:1130:
+int reiserfs_init_locked_inode (struct inode * inode, void *p)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#870: FILE: fs/reiserfs/inode.c:1132:
+    struct reiserfs_iget_args *args = (struct reiserfs_iget_args *)p ;$

WARNING:SPACING: space prohibited before semicolon
#870: FILE: fs/reiserfs/inode.c:1132:
+    struct reiserfs_iget_args *args = (struct reiserfs_iget_args *)p ;

WARNING:LINE_SPACING: Missing a blank line after declarations
#871: FILE: fs/reiserfs/inode.c:1133:
+    struct reiserfs_iget_args *args = (struct reiserfs_iget_args *)p ;
+    inode->i_ino = args->objectid;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#871: FILE: fs/reiserfs/inode.c:1133:
+    inode->i_ino = args->objectid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#872: FILE: fs/reiserfs/inode.c:1134:
+    INODE_PKEY(inode)->k_dir_id = cpu_to_le32(args->dirid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#873: FILE: fs/reiserfs/inode.c:1135:
+    return 0;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#880: FILE: fs/reiserfs/inode.c:1140:
+void reiserfs_read_locked_inode (struct inode * inode, struct reiserfs_iget_args *args)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#880: FILE: fs/reiserfs/inode.c:1140:
+void reiserfs_read_locked_inode (struct inode * inode, struct reiserfs_iget_args *args)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#894: FILE: fs/reiserfs/inode.c:1147:
+    dirino = args->dirid ;$

WARNING:SPACING: space prohibited before semicolon
#894: FILE: fs/reiserfs/inode.c:1147:
+    dirino = args->dirid ;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#903: FILE: fs/reiserfs/inode.c:1160:
+	reiserfs_warning ("vs-13070: reiserfs_read_locked_inode: "

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#909: FILE: fs/reiserfs/inode.c:1190:
     if( ( inode -> i_nlink == 0 ) && 
[...]
+	    reiserfs_warning( "vs-13075: reiserfs_read_locked_inode: "

ERROR:SPACING: space prohibited after that open parenthesis '('
#912: FILE: fs/reiserfs/inode.c:1192:
+	    reiserfs_warning( "vs-13075: reiserfs_read_locked_inode: "

ERROR:SPACING: space prohibited after that open parenthesis '('
#937: FILE: fs/reiserfs/inode.c:1215:
+int reiserfs_find_actor( struct inode *inode, void *opaque )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#937: FILE: fs/reiserfs/inode.c:1215:
+int reiserfs_find_actor( struct inode *inode, void *opaque )

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#940: FILE: fs/reiserfs/inode.c:1217:
+    struct reiserfs_iget_args *args;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#945: FILE: fs/reiserfs/inode.c:1221:
+    return (inode->i_ino == args->objectid) &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#953: FILE: fs/reiserfs/inode.c:1228:
+    struct reiserfs_iget_args args ;$

WARNING:SPACING: space prohibited before semicolon
#953: FILE: fs/reiserfs/inode.c:1228:
+    struct reiserfs_iget_args args ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#958: FILE: fs/reiserfs/inode.c:1230:
+    args.objectid = key->on_disk_key.k_objectid ;$

WARNING:SPACING: space prohibited before semicolon
#958: FILE: fs/reiserfs/inode.c:1230:
+    args.objectid = key->on_disk_key.k_objectid ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#959: FILE: fs/reiserfs/inode.c:1231:
+    args.dirid = key->on_disk_key.k_dir_id ;$

WARNING:SPACING: space prohibited before semicolon
#959: FILE: fs/reiserfs/inode.c:1231:
+    args.dirid = key->on_disk_key.k_dir_id ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#960: FILE: fs/reiserfs/inode.c:1232:
+    inode = iget5_locked (s, key->on_disk_key.k_objectid, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#960: FILE: fs/reiserfs/inode.c:1232:
+    inode = iget5_locked (s, key->on_disk_key.k_objectid, $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#960: FILE: fs/reiserfs/inode.c:1232:
+    inode = iget5_locked (s, key->on_disk_key.k_objectid, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#961: FILE: fs/reiserfs/inode.c:1233:
+    inode = iget5_locked (s, key->on_disk_key.k_objectid, 
+		   reiserfs_find_actor, reiserfs_init_locked_inode, (void *)(&args));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#965: FILE: fs/reiserfs/inode.c:1237:
+    if (inode->i_state & I_NEW) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#968: FILE: fs/reiserfs/inode.c:1240:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#989: FILE: fs/reiserfs/super.c:1118:
+    struct reiserfs_iget_args args ;$

WARNING:SPACING: space prohibited before semicolon
#989: FILE: fs/reiserfs/super.c:1118:
+    struct reiserfs_iget_args args ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#999: FILE: fs/reiserfs/super.c:1195:
+    args.objectid = REISERFS_ROOT_OBJECTID ;$

WARNING:SPACING: space prohibited before semicolon
#999: FILE: fs/reiserfs/super.c:1195:
+    args.objectid = REISERFS_ROOT_OBJECTID ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1000: FILE: fs/reiserfs/super.c:1196:
+    args.dirid = REISERFS_ROOT_PARENT_OBJECTID ;$

WARNING:SPACING: space prohibited before semicolon
#1000: FILE: fs/reiserfs/super.c:1196:
+    args.dirid = REISERFS_ROOT_PARENT_OBJECTID ;

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#1001: FILE: fs/reiserfs/super.c:1197:
+    root_inode = iget5_locked (s, REISERFS_ROOT_OBJECTID, reiserfs_find_actor, reiserfs_init_locked_inode, (void *)(&args));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1001: FILE: fs/reiserfs/super.c:1197:
+    root_inode = iget5_locked (s, REISERFS_ROOT_OBJECTID, reiserfs_find_actor, reiserfs_init_locked_inode, (void *)(&args));$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1001: FILE: fs/reiserfs/super.c:1197:
+    root_inode = iget5_locked (s, REISERFS_ROOT_OBJECTID, reiserfs_find_actor, reiserfs_init_locked_inode, (void *)(&args));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1005: FILE: fs/reiserfs/super.c:1201:
+    }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1006: FILE: fs/reiserfs/super.c:1202:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1006: FILE: fs/reiserfs/super.c:1202:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1007: FILE: fs/reiserfs/super.c:1203:
+    if (root_inode->i_state & I_NEW) {$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1044: FILE: include/linux/fs.h:1375:
+extern struct inode *ilookup5(struct super_block *sb, unsigned long hashval,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1045: FILE: include/linux/fs.h:1376:
+extern struct inode *ilookup5(struct super_block *sb, unsigned long hashval,
+		int (*test)(struct inode *, void *), void *data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1046: FILE: include/linux/fs.h:1377:
+extern struct inode *ilookup(struct super_block *sb, unsigned long ino);

WARNING:LONG_LINE: line length of 153 exceeds 100 columns
#1048: FILE: include/linux/fs.h:1379:
+extern struct inode * iget5_locked(struct super_block *, unsigned long, int (*test)(struct inode *, void *), int (*set)(struct inode *, void *), void *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1048: FILE: include/linux/fs.h:1379:
+extern struct inode * iget5_locked(struct super_block *, unsigned long, int (*test)(struct inode *, void *), int (*set)(struct inode *, void *), void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1048: FILE: include/linux/fs.h:1379:
+extern struct inode * iget5_locked(struct super_block *, unsigned long, int (*test)(struct inode *, void *), int (*set)(struct inode *, void *), void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1048: FILE: include/linux/fs.h:1379:
+extern struct inode * iget5_locked(struct super_block *, unsigned long, int (*test)(struct inode *, void *), int (*set)(struct inode *, void *), void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1048: FILE: include/linux/fs.h:1379:
+extern struct inode * iget5_locked(struct super_block *, unsigned long, int (*test)(struct inode *, void *), int (*set)(struct inode *, void *), void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1048: FILE: include/linux/fs.h:1379:
+extern struct inode * iget5_locked(struct super_block *, unsigned long, int (*test)(struct inode *, void *), int (*set)(struct inode *, void *), void *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1049: FILE: include/linux/fs.h:1380:
+extern struct inode * iget_locked(struct super_block *, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1049: FILE: include/linux/fs.h:1380:
+extern struct inode * iget_locked(struct super_block *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1049: FILE: include/linux/fs.h:1380:
+extern struct inode * iget_locked(struct super_block *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1049: FILE: include/linux/fs.h:1380:
+extern struct inode * iget_locked(struct super_block *, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1050: FILE: include/linux/fs.h:1381:
+extern void unlock_new_inode(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1050: FILE: include/linux/fs.h:1381:
+extern void unlock_new_inode(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1070: FILE: include/linux/fs.h:1399:
+extern void __insert_inode_hash(struct inode *, unsigned long hashval);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1070: FILE: include/linux/fs.h:1399:
+extern void __insert_inode_hash(struct inode *, unsigned long hashval);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1072: FILE: include/linux/fs.h:1401:
+static inline void insert_inode_hash(struct inode *inode) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1089: FILE: include/linux/reiserfs_fs.h:1483:
+    __u32 dirid ;$

WARNING:SPACING: space prohibited before semicolon
#1089: FILE: include/linux/reiserfs_fs.h:1483:
+    __u32 dirid ;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1099: FILE: include/linux/reiserfs_fs.h:1734:
+void reiserfs_read_locked_inode(struct inode * inode, struct reiserfs_iget_args *args) ;

WARNING:SPACING: space prohibited before semicolon
#1099: FILE: include/linux/reiserfs_fs.h:1734:
+void reiserfs_read_locked_inode(struct inode * inode, struct reiserfs_iget_args *args) ;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1100: FILE: include/linux/reiserfs_fs.h:1735:
+int reiserfs_find_actor(struct inode * inode, void *p) ;

WARNING:SPACING: space prohibited before semicolon
#1100: FILE: include/linux/reiserfs_fs.h:1735:
+int reiserfs_find_actor(struct inode * inode, void *p) ;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1101: FILE: include/linux/reiserfs_fs.h:1736:
+int reiserfs_init_locked_inode(struct inode * inode, void *p) ;

WARNING:SPACING: space prohibited before semicolon
#1101: FILE: include/linux/reiserfs_fs.h:1736:
+int reiserfs_init_locked_inode(struct inode * inode, void *p) ;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000389025.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 27 errors, 61 warnings, 21 checks, 998 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000389025.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
