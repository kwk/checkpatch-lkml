WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#71: FILE: arch/i386/kernel/cpu/proc.c:107:
+	extern long __rq_idx[NR_CPUS];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#101: FILE: arch/i386/kernel/smpboot.c:957:
+__setup("test_ht", ht_setup);

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#127: FILE: arch/i386/kernel/smpboot.c:1117:
+printk("cpu_has_ht: %d, smp_num_siblings: %d, num_online_cpus(): %d.\n", cpu_has_ht, smp_num_siblings, num_online_cpus());

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#127: FILE: arch/i386/kernel/smpboot.c:1117:
+printk("cpu_has_ht: %d, smp_num_siblings: %d, num_online_cpus(): %d.\n", cpu_has_ht, smp_num_siblings, num_online_cpus());

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#156: FILE: arch/i386/kernel/smpboot.c:1148:
+		for (cpu = 0; cpu < NR_CPUS; cpu++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#158: FILE: arch/i386/kernel/smpboot.c:1150:
+			int i;
+			if (!test_bit(cpu, &cpu_callout_map))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#160: FILE: arch/i386/kernel/smpboot.c:1152:
+			for (i = 0; i < NR_CPUS; i++) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#185: FILE: arch/i386/kernel/smpboot.c:1172:
+		printk("Simulating a 2-sibling 1-phys-CPU HT setup!\n");

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#270: FILE: include/linux/sched.h:166:
+extern void sched_map_runqueue(int cpu1, int cpu2);

WARNING:IF_1: Consider removing the #if 1 and its #endif
#288: FILE: include/linux/sched.h:626:
+#if 1

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#299: FILE: include/linux/sched.h:658:
+#define REMOVE_LINKS(p) do {					\
+	list_del_init(&(p)->tasks);				\
+	remove_parent(p);					\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#304: FILE: include/linux/sched.h:663:
+#define SET_LINKS(p) do {					\
+	list_add_tail(&(p)->tasks,&init_task.tasks);		\
+	add_parent(p, (p)->parent);				\
+	} while (0)

ERROR:SPACING: space required after that ',' (ctx:VxO)
#305: FILE: include/linux/sched.h:664:
+	list_add_tail(&(p)->tasks,&init_task.tasks);		\
 	                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '&' (ctx:OxV)
#305: FILE: include/linux/sched.h:664:
+	list_add_tail(&(p)->tasks,&init_task.tasks);		\
 	                          ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#312: FILE: include/linux/sched.h:671:
+#define for_each_process(p) \
+	for (p = &init_task ; (p = next_task(p)) != &init_task ; )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 't' - possible side-effects?
#315: FILE: include/linux/sched.h:674:
+#define do_each_thread(g, t) \
+	for (t = &init_task ; (t = next_task(t)) != &init_task ; )

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#370: FILE: kernel/sched.c:68:
+#define MAX_SLEEP_AVG		(10*HZ)
                      		   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#371: FILE: kernel/sched.c:69:
+#define STARVATION_LIMIT	(30*HZ)
                         	   ^

WARNING:TYPO_SPELLING: 'assymetric' may be misspelled - perhaps 'asymmetric'?
#391: FILE: kernel/sched.c:156:
+ *  runqueue or even assymetric mappings.)
                      ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#395: FILE: kernel/sched.c:160:
+  long __rq_idx[NR_CPUS] __cacheline_aligned;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#396: FILE: kernel/sched.c:161:
+  static long __cpu_idx[NR_CPUS] __cacheline_aligned;$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'idx' - possible side-effects?
#399: FILE: kernel/sched.c:164:
+# define for_each_sibling(idx, rq) \
+		for ((idx) = 0; (idx) < (rq)->nr_cpus; (idx)++)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#407: FILE: kernel/sched.c:172:
+# define for_each_sibling(idx, rq) while (0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#411: FILE: kernel/sched.c:176:
+  static inline void active_load_balance(runqueue_t *rq, int this_cpu) { }$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#414: FILE: kernel/sched.c:179:
+typedef struct cpu_s {

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#451: FILE: kernel/sched.c:215:
+#define cpu_int(c)		((cpu_rq(c))->cpu + cpu_idx(c))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#476: FILE: kernel/sched.c:238:
+# define task_running(p)		(cpu_curr_ptr(task_cpu(p)) == (p))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#600: FILE: kernel/sched.c:562:
+		if (unlikely(sync && !task_running(p) &&
 			(task_cpu(p) != smp_processor_id()) &&

CHECK:BRACES: braces {} should be used on all arms of this statement
#611: FILE: kernel/sched.c:571:
+		if (sync)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#613: FILE: kernel/sched.c:573:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#626: FILE: kernel/sched.c:613:
+	if (SMART_WAKE_CHILD) {
[...]
+	} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#627: FILE: kernel/sched.c:614:
+		if (unlikely(!current->array))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#629: FILE: kernel/sched.c:616:
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#636: FILE: kernel/sched.c:623:
+	} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#646: FILE: kernel/sched.c:672:
+static inline task_t * context_switch(runqueue_t *rq, task_t *prev, task_t *next)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'agressivity' may be misspelled - perhaps 'aggressivity'?
#690: FILE: kernel/sched.c:907:
+ * frequency and balancing agressivity depends on whether the CPU is
                            ^^^^^^^^^^^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#696: FILE: kernel/sched.c:913:
+#define BUSY_REBALANCE_TICK (HZ/4 ?: 1)
                                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#697: FILE: kernel/sched.c:914:
+#define IDLE_REBALANCE_TICK (HZ/1000 ?: 1)
                                ^

WARNING:TYPO_SPELLING: 'agressive' may be misspelled - perhaps 'aggressive'?
#738: FILE: kernel/sched.c:1098:
+	 * (except if we are in idle mode which is a more agressive
 	                                                  ^^^^^^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#746: FILE: kernel/sched.c:1102:
+#define CAN_MIGRATE_TASK(p,rq,cpu)					\
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#746: FILE: kernel/sched.c:1102:
+#define CAN_MIGRATE_TASK(p,rq,cpu)					\
                              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#746: FILE: kernel/sched.c:1102:
+#define CAN_MIGRATE_TASK(p,rq,cpu)					\
+	((idle || (jiffies - (p)->last_run > cache_decay_ticks)) && \
+		!task_running(p) && task_allowed(p, cpu))

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#762: FILE: kernel/sched.c:1133:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#781: FILE: kernel/sched.c:1152:
+		 * doesnt matter which one) and let it fix things up:
 		   ^^^^^^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#809: FILE: kernel/sched.c:1180:
+	for (i = 0; i < NR_CPUS; i++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#823: FILE: kernel/sched.c:1194:
+^I ^I * balance a thread over to the target queue.$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#823: FILE: kernel/sched.c:1194:
+^I ^I * balance a thread over to the target queue.$

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#854: FILE: kernel/sched.c:1217:
+	printk("sched_merge_runqueues: CPU#%d <=> CPU#%d, on CPU#%d.\n", cpu1, cpu2, smp_processor_id());

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#854: FILE: kernel/sched.c:1217:
+	printk("sched_merge_runqueues: CPU#%d <=> CPU#%d, on CPU#%d.\n", cpu1, cpu2, smp_processor_id());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#856: FILE: kernel/sched.c:1219:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#858: FILE: kernel/sched.c:1221:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#869: FILE: kernel/sched.c:1231:
+		BUG();

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'next != prev'
#1038: FILE: kernel/sched.c:1440:
+	if ((next != prev) && (rq_nr_cpus(rq) > 1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1049: FILE: kernel/sched.c:1451:
+				if (retry || !rq->expired->nr_active) {
+					goto pick_idle;
+				}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1179: FILE: kernel/sched.c:2498:
+static int migration_task(void * data)

CHECK:SPACING: No space is necessary after a cast
#1226: FILE: kernel/sched.c:2582:
+	long cpu = (long) hcpu;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1234: FILE: kernel/sched.c:2586:
+		printk("Starting migration thread for cpu %li\n", cpu);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1271: FILE: kernel/sched.c:2696:
+	printk("sched_init().\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1272: FILE: kernel/sched.c:2697:
+	printk("smp_processor_id(): %d.\n", smp_processor_id());

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1273: FILE: kernel/sched.c:2698:
+	printk("rq_idx(smp_processor_id()): %ld.\n", rq_idx(smp_processor_id()));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1274: FILE: kernel/sched.c:2699:
+	printk("this_rq(): %p.\n", this_rq());

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1285: FILE: init/main.c:357:
+^I/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1286: FILE: init/main.c:358:
+^I *^IWe count on the initial thread going ok $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000396030.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 30 warnings, 23 checks, 1169 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000396030.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
