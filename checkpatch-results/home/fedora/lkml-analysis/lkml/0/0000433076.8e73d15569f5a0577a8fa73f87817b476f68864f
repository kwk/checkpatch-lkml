WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#58: 
Content-Disposition: attachment; filename="summit_patch.2002-09-09_2.4.20-pre6"

ERROR:SPACING: space required before the open parenthesis '('
#147: FILE: arch/i386/kernel/apic.c:313:
+		if(clustered_apic_mode)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#189: FILE: arch/i386/kernel/io_apic.c:620:
+	static unsigned	next_cpu = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#189: FILE: arch/i386/kernel/io_apic.c:620:
+	static unsigned	next_cpu = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#198: FILE: arch/i386/kernel/io_apic.c:629:
+		return (val);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'apic != 0'
#230: FILE: arch/i386/kernel/io_apic.c:682:
+		if (clustered_apic_logical && (apic != 0) && (irq == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'irq == 0'
#230: FILE: arch/i386/kernel/io_apic.c:682:
+		if (clustered_apic_logical && (apic != 0) && (irq == 0))

CHECK:CAMELCASE: Avoid CamelCase: <dest_LowestPrio>
#330: FILE: arch/i386/kernel/mpparse.c:74:
+unsigned char int_delivery_mode = dest_LowestPrio;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#331: FILE: arch/i386/kernel/mpparse.c:75:
+unsigned char target_cpus = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#332: FILE: arch/i386/kernel/mpparse.c:76:
+unsigned char clustered_apic_mode = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#333: FILE: arch/i386/kernel/mpparse.c:77:
+unsigned char clustered_apic_logical = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#334: FILE: arch/i386/kernel/mpparse.c:78:
+unsigned char clustered_apic_physical = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#335: FILE: arch/i386/kernel/mpparse.c:79:
+unsigned char esr_disable = 0;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#367: FILE: arch/i386/kernel/mpparse.c:247:
+	logical_cpu_present_map |= 1 << (num_processors-1);
 	                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#426: FILE: arch/i386/kernel/mpparse.c:443:
+	memcpy(oem,mpc->mpc_oem,8);
 	          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#426: FILE: arch/i386/kernel/mpparse.c:443:
+	memcpy(oem,mpc->mpc_oem,8);
 	                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#427: FILE: arch/i386/kernel/mpparse.c:444:
+	oem[8]=0;
 	      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#428: FILE: arch/i386/kernel/mpparse.c:445:
+	printk("OEM ID: %s ",oem);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#428: FILE: arch/i386/kernel/mpparse.c:445:
+	printk("OEM ID: %s ",oem);
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#430: FILE: arch/i386/kernel/mpparse.c:447:
+	memcpy(prod,mpc->mpc_productid,12);
 	           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#430: FILE: arch/i386/kernel/mpparse.c:447:
+	memcpy(prod,mpc->mpc_productid,12);
 	                              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#431: FILE: arch/i386/kernel/mpparse.c:448:
+	prod[12]=0;
 	        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#432: FILE: arch/i386/kernel/mpparse.c:449:
+	printk("Product ID: %s ",prod);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#432: FILE: arch/i386/kernel/mpparse.c:449:
+	printk("Product ID: %s ",prod);
 	                        ^

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#437: FILE: arch/i386/kernel/mpparse.c:454:
+	if (!strncmp(oem, "IBM ENSW", 8) && (!strncmp(prod, "NF 6000R", 8) || !strncmp(prod, "VIGIL SMP", 9)))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#456: FILE: arch/i386/kernel/mpparse.c:474:
+^I/* Pre-scan to determine the number of bus and $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#460: FILE: arch/i386/kernel/mpparse.c:478:
+		switch (*mpt) {
+			case MP_PROCESSOR:
[...]
+			case MP_BUS:
[...]
+			case MP_INTSRC:
[...]
+			case MP_IOAPIC:
[...]
+			case MP_LINTSRC:
[...]
+			default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_WHITESPACE: trailing whitespace
#488: FILE: arch/i386/kernel/mpparse.c:506:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#500: FILE: arch/i386/kernel/mpparse.c:518:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#505: FILE: arch/i386/kernel/mpparse.c:523:
+		printk(KERN_ERR "SMP mptable: out of memory!\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#519: FILE: arch/i386/kernel/mpparse.c:537:
+	mpt = ((unsigned char *)mpc)+count;
 	                            ^

CHECK:SPACING: No space is necessary after a cast
#533: FILE: arch/i386/kernel/mpparse.c:603:
+		clustered_apic_logical = (unsigned char) numaq;

CHECK:SPACING: No space is necessary after a cast
#534: FILE: arch/i386/kernel/mpparse.c:604:
+		clustered_apic_physical = (unsigned char) xapic;

CHECK:CAMELCASE: Avoid CamelCase: <dest_Fixed>
#539: FILE: arch/i386/kernel/mpparse.c:609:
+		int_delivery_mode = (xapic ? dest_Fixed : dest_LowestPrio);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#542: FILE: arch/i386/kernel/mpparse.c:612:
+	printk("Enabling APIC mode:  %s.  Using %d I/O APICs\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#543: FILE: arch/i386/kernel/mpparse.c:613:
+	printk("Enabling APIC mode:  %s.  Using %d I/O APICs\n",
+		(clustered_apic_logical ? "Clustered Logical" :

ERROR:SPACING: spaces required around that '?' (ctx:WxV)
#544: FILE: arch/i386/kernel/mpparse.c:614:
+				(clustered_apic_physical ?"Physical" : "Flat")),
 				                         ^

ERROR:SPACING: space required before the open parenthesis '('
#557: FILE: arch/i386/kernel/pci-pc.c:480:
+			if(clustered_apic_logical)

ERROR:CODE_INDENT: code indent should use tabs where possible
#569: FILE: arch/i386/kernel/process.c:190:
+ ^I^I^I^Ihave set up boot_cpu_physical_apicid or smp_num_cpu */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#569: FILE: arch/i386/kernel/process.c:190:
+ ^I^I^I^Ihave set up boot_cpu_physical_apicid or smp_num_cpu */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#569: FILE: arch/i386/kernel/process.c:190:
+ 				have set up boot_cpu_physical_apicid or smp_num_cpu */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#607: FILE: arch/i386/kernel/smpboot.c:513:
+volatile u8 cpu_2_physical_apicid[NR_CPUS] = { [0 ... NR_CPUS-1] = BAD_APICID };
                                                              ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#607: FILE: arch/i386/kernel/smpboot.c:513:
+volatile u8 cpu_2_physical_apicid[NR_CPUS] = { [0 ... NR_CPUS-1] = BAD_APICID };

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#613: FILE: arch/i386/kernel/smpboot.c:516:
+volatile u8 cpu_2_logical_apicid[NR_CPUS] = { [0 ... NR_CPUS-1] = BAD_APICID };
                                                             ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#613: FILE: arch/i386/kernel/smpboot.c:516:
+volatile u8 cpu_2_logical_apicid[NR_CPUS] = { [0 ... NR_CPUS-1] = BAD_APICID };

CHECK:SPACING: No space is necessary after a cast
#645: FILE: arch/i386/kernel/smpboot.c:523:
+	cpu_2_logical_apicid[cpu] = (u8) log_apicid;

CHECK:SPACING: No space is necessary after a cast
#646: FILE: arch/i386/kernel/smpboot.c:524:
+	cpu_2_physical_apicid[cpu] = (u8) phys_apicid;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#678: FILE: arch/i386/kernel/smpboot.c:747:
+static void __init do_boot_cpu (int phys_apicid, int log_apicid)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#703: FILE: arch/i386/kernel/smpboot.c:786:
+	printk("Booting processor %d/%d eip %lx\n", cpu, log_apicid, start_eip);

ERROR:CODE_INDENT: code indent should use tabs where possible
#783: FILE: arch/i386/kernel/smpboot.c:951:
+        if (clustered_apic_logical && (numnodes > 1)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#783: FILE: arch/i386/kernel/smpboot.c:951:
+        if (clustered_apic_logical && (numnodes > 1)) {$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'numnodes > 1'
#783: FILE: arch/i386/kernel/smpboot.c:951:
+        if (clustered_apic_logical && (numnodes > 1)) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#829: FILE: arch/i386/kernel/smpboot.c:1081:
+		if ((max_cpus >= 0) && (max_cpus <= cpucount+1))
 		                                            ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'max_cpus >= 0'
#829: FILE: arch/i386/kernel/smpboot.c:1081:
+		if ((max_cpus >= 0) && (max_cpus <= cpucount+1))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#859: FILE: arch/i386/kernel/smpboot.c:1102:
+		if ((cpu_to_physical_apicid(bit) == BAD_APICID) &&
+				(phys_cpu_present_map & (1ul << bit)))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#877: FILE: include/asm-i386/apicdef.h:14:
+#define			APIC_ID_MASK		(0xFF<<24)
        			            		     ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#878: FILE: include/asm-i386/apicdef.h:15:
+#define			GET_APIC_ID(x)		(((x)>>24)&0xFF)
        			              		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#878: FILE: include/asm-i386/apicdef.h:15:
+#define			GET_APIC_ID(x)		(((x)>>24)&0xFF)
        			              		          ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#913: FILE: include/asm-i386/apicdef.h:122:
+#define ^IAPIC_BROADCAST_ID_APIC^I^I0x0F$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#961: FILE: include/asm-i386/mpspec.h:197:
 };
+extern int *mp_bus_id_to_type;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#998: FILE: include/asm-i386/smp.h:28:
+						(clustered_apic_physical ? round_robin_cpu_apic_id() : cpu_online_map))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1019: FILE: include/asm-i386/smp.h:45:
+#define ^IINT_DELIVERY_MODE^I^I(1)^I/* dest_LowestPrio */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1037: FILE: include/asm-i386/smp.h:54:
+extern unsigned char clustered_apic_logical;  $

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#1098: FILE: include/asm-i386/smpboot.h:8:
+#define TRAMPOLINE_LOW phys_to_virt(clustered_apic_logical?0x8:0x467)
                                                           ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1098: FILE: include/asm-i386/smpboot.h:8:
+#define TRAMPOLINE_LOW phys_to_virt(clustered_apic_logical?0x8:0x467)
                                                               ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#1099: FILE: include/asm-i386/smpboot.h:9:
+#define TRAMPOLINE_HIGH phys_to_virt(clustered_apic_logical?0xa:0x469)
                                                            ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1099: FILE: include/asm-i386/smpboot.h:9:
+#define TRAMPOLINE_HIGH phys_to_virt(clustered_apic_logical?0xa:0x469)
                                                                ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#1101: FILE: include/asm-i386/smpboot.h:11:
+#define boot_cpu_apicid (clustered_apic_logical?boot_cpu_logical_apicid:boot_cpu_physical_apicid)
                                                ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1101: FILE: include/asm-i386/smpboot.h:11:
+#define boot_cpu_apicid (clustered_apic_logical?boot_cpu_logical_apicid:boot_cpu_physical_apicid)
                                                                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1113: FILE: include/asm-i386/smpboot.h:22:
+ ***^Imps_cpu (index number):   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, ... $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1114: FILE: include/asm-i386/smpboot.h:23:
+ ***  CPUs have xAPIC phys IDs:  00, 01, 02, 03, 10, 11, 12, 13, 20, 21, ... $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1115: FILE: include/asm-i386/smpboot.h:24:
+ ***^I^Iits logical ID:  01, 02, 04, 08, 11, 12, 14, 18, 21, 22, ... $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1122: FILE: include/asm-i386/smpboot.h:26:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1122: FILE: include/asm-i386/smpboot.h:26:
+ $

ERROR:SPACING: space prohibited after that open parenthesis '('
#1123: FILE: include/asm-i386/smpboot.h:27:
+#define physical_to_logical_apicid(phys_apic) ( (1ul << (phys_apic & 0x3)) | (phys_apic & 0xF0u) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1123: FILE: include/asm-i386/smpboot.h:27:
+#define physical_to_logical_apicid(phys_apic) ( (1ul << (phys_apic & 0x3)) | (phys_apic & 0xF0u) )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'phys_apic' - possible side-effects?
#1123: FILE: include/asm-i386/smpboot.h:27:
+#define physical_to_logical_apicid(phys_apic) ( (1ul << (phys_apic & 0x3)) | (phys_apic & 0xF0u) )

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'phys_apic' may be better as '(phys_apic)' to avoid precedence issues
#1123: FILE: include/asm-i386/smpboot.h:27:
+#define physical_to_logical_apicid(phys_apic) ( (1ul << (phys_apic & 0x3)) | (phys_apic & 0xF0u) )

ERROR:SPACING: space required before the open parenthesis '('
#1127: FILE: include/asm-i386/smpboot.h:31:
+	if(clustered_apic_logical)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1128: FILE: include/asm-i386/smpboot.h:32:
+		return (mps_cpu/4)*16 + (1<<(mps_cpu%4));
 		               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1128: FILE: include/asm-i386/smpboot.h:32:
+		return (mps_cpu/4)*16 + (1<<(mps_cpu%4));
 		                  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1128: FILE: include/asm-i386/smpboot.h:32:
+		return (mps_cpu/4)*16 + (1<<(mps_cpu%4));
 		                          ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#1128: FILE: include/asm-i386/smpboot.h:32:
+		return (mps_cpu/4)*16 + (1<<(mps_cpu%4));
 		                                    ^

ERROR:SPACING: space required before the open parenthesis '('
#1129: FILE: include/asm-i386/smpboot.h:33:
+	if(clustered_apic_physical)

ERROR:SPACING: space required before the open parenthesis '('
#1136: FILE: include/asm-i386/smpboot.h:40:
+	if(clustered_apic_mode)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1167: FILE: include/asm-i386/smpboot.h:50:
+extern volatile u8 cpu_2_logical_apicid[];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1168: FILE: include/asm-i386/smpboot.h:51:
+extern volatile u8 cpu_2_physical_apicid[];

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1170: FILE: include/asm-i386/smpboot.h:53:
+#define logical_apicid_to_cpu(apicid) (int)logical_apicid_2_cpu[apicid]

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1171: FILE: include/asm-i386/smpboot.h:54:
+#define cpu_to_logical_apicid(cpu) (int)cpu_2_logical_apicid[cpu]

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1172: FILE: include/asm-i386/smpboot.h:55:
+#define physical_apicid_to_cpu(apicid) (int)physical_apicid_2_cpu[apicid]

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1173: FILE: include/asm-i386/smpboot.h:56:
+#define cpu_to_physical_apicid(cpu) (int)cpu_2_physical_apicid[cpu]

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#1174: FILE: include/asm-i386/smpboot.h:57:
+#define boot_apicid_to_cpu(apicid) (int)(clustered_apic_logical ? logical_apicid_2_cpu[apicid] : physical_apicid_2_cpu[apicid])

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1174: FILE: include/asm-i386/smpboot.h:57:
+#define boot_apicid_to_cpu(apicid) (int)(clustered_apic_logical ? logical_apicid_2_cpu[apicid] : physical_apicid_2_cpu[apicid])

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'apicid' - possible side-effects?
#1174: FILE: include/asm-i386/smpboot.h:57:
+#define boot_apicid_to_cpu(apicid) (int)(clustered_apic_logical ? logical_apicid_2_cpu[apicid] : physical_apicid_2_cpu[apicid])

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#1175: FILE: include/asm-i386/smpboot.h:58:
+#define cpu_to_boot_apicid(cpu) (int)(clustered_apic_logical ? cpu_2_logical_apicid[cpu] : cpu_2_physical_apicid[cpu])

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1175: FILE: include/asm-i386/smpboot.h:58:
+#define cpu_to_boot_apicid(cpu) (int)(clustered_apic_logical ? cpu_2_logical_apicid[cpu] : cpu_2_physical_apicid[cpu])

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#1175: FILE: include/asm-i386/smpboot.h:58:
+#define cpu_to_boot_apicid(cpu) (int)(clustered_apic_logical ? cpu_2_logical_apicid[cpu] : cpu_2_physical_apicid[cpu])

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1258: FILE: arch/i386/kernel/apic.c:282:
+			SET_APIC_LOGICAL_ID(xapic_physical_to_logical_apicid(hard_smp_processor_id())));

WARNING:LONG_LINE_COMMENT: line length of 109 exceeds 100 columns
#1275: FILE: arch/i386/kernel/apic.c:320:
+		 * For NUMA-Q, the firmware does this for us.  Otherwise, put the APIC into clustered or flat

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1381: FILE: arch/i386/kernel/io_apic.c:641:
+	static unsigned	next_cpu = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1381: FILE: arch/i386/kernel/io_apic.c:641:
+	static unsigned	next_cpu = 0;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1383: FILE: arch/i386/kernel/io_apic.c:643:
+	if (next_cpu >= NR_CPUS || cpu_2_logical_apicid[next_cpu] == BAD_APICID)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1387: FILE: arch/i386/kernel/io_apic.c:647:
+	return (val);

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1532: FILE: arch/i386/kernel/mpparse.c:75:
+u8 clustered_apic_mode = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1533: FILE: arch/i386/kernel/mpparse.c:76:
+u8 esr_disable = 0;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1534: FILE: arch/i386/kernel/mpparse.c:77:
+u8 raw_phys_apicid[NR_CPUS] = { [0 ... NR_CPUS-1] = BAD_APICID };
                                               ^

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1535: FILE: arch/i386/kernel/mpparse.c:78:
+static u8 clustered_hint = 0;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1559: FILE: arch/i386/kernel/mpparse.c:197:
+	logical_cpu_present_map |= 1 << (num_processors-1);
 	                                               ^

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#1629: FILE: arch/i386/kernel/mpparse.c:383:
+	static const char *mode_names[] = {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1644: FILE: arch/i386/kernel/mpparse.c:398:
+	printk("Enabling APIC mode:  %s.  Using %d I/O APICs\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1645: FILE: arch/i386/kernel/mpparse.c:399:
+	printk("Enabling APIC mode:  %s.  Using %d I/O APICs\n",
+		mode_names[clustered_apic_mode], nr_ioapics);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1675: FILE: arch/i386/kernel/mpparse.c:438:
+	printk("OEM ID: %s ", oem);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1676: FILE: arch/i386/kernel/mpparse.c:439:
+	printk("Product ID: %s ",prod);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1676: FILE: arch/i386/kernel/mpparse.c:439:
+	printk("Product ID: %s ",prod);
 	                        ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1682: FILE: arch/i386/kernel/mpparse.c:445:
+	    (!strncmp(prod, "NF 6000R", 8) || !strncmp(prod, "VIGIL SMP", 9)) )

ERROR:CODE_INDENT: code indent should use tabs where possible
#1777: FILE: arch/i386/kernel/process.c:202:
+ ^I^I^I^Ihave set up boot_cpu_physical_apicid or smp_num_cpu */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1777: FILE: arch/i386/kernel/process.c:202:
+ ^I^I^I^Ihave set up boot_cpu_physical_apicid or smp_num_cpu */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1777: FILE: arch/i386/kernel/process.c:202:
+ 				have set up boot_cpu_physical_apicid or smp_num_cpu */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1792: FILE: arch/i386/kernel/smpboot.c:502:
+volatile u8 cpu_2_physical_apicid[NR_CPUS] = { [0 ... NR_CPUS-1] = BAD_APICID };
                                                              ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1792: FILE: arch/i386/kernel/smpboot.c:502:
+volatile u8 cpu_2_physical_apicid[NR_CPUS] = { [0 ... NR_CPUS-1] = BAD_APICID };

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1798: FILE: arch/i386/kernel/smpboot.c:505:
+volatile u8 cpu_2_logical_apicid[NR_CPUS] = { [0 ... NR_CPUS-1] = BAD_APICID };
                                                             ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1798: FILE: arch/i386/kernel/smpboot.c:505:
+volatile u8 cpu_2_logical_apicid[NR_CPUS] = { [0 ... NR_CPUS-1] = BAD_APICID };

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1884: FILE: arch/i386/kernel/smpboot.c:768:
+	printk("Booting processor %d/0x%02X/0x%02X eip 0x%lX\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1885: FILE: arch/i386/kernel/smpboot.c:769:
+	printk("Booting processor %d/0x%02X/0x%02X eip 0x%lX\n",
+		cpu, phys_apicid, log_apicid, start_eip);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1967: FILE: arch/i386/kernel/smpboot.c:938:
+        if (clustered_apic_numaq && (numnodes > 1)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1967: FILE: arch/i386/kernel/smpboot.c:938:
+        if (clustered_apic_numaq && (numnodes > 1)) {$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'numnodes > 1'
#1967: FILE: arch/i386/kernel/smpboot.c:938:
+        if (clustered_apic_numaq && (numnodes > 1)) {

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1995: FILE: arch/i386/kernel/smpboot.c:977:
+		boot_cpu_logical_apicid = xapic_physical_to_logical_apicid(boot_cpu_physical_apicid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2001: FILE: arch/i386/kernel/smpboot.c:983:
+	printk("Boot CPU #0/0x%02X/0x%02X\n", boot_cpu_physical_apicid, boot_cpu_logical_apicid);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2011: FILE: arch/i386/kernel/smpboot.c:1060:
+	for (cpu = 1, bit = 0; bit < NR_CPUS; bit++) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'max_cpus >= 0'
#2014: FILE: arch/i386/kernel/smpboot.c:1063:
+		if ((max_cpus >= 0) && (max_cpus <= cpucount + 1))

CHECK:BRACES: braces {} should be used on all arms of this statement
#2029: FILE: arch/i386/kernel/smpboot.c:1073:
+		if (clustered_apic_xapic)
[...]
+		else if (clustered_apic_numaq)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#2033: FILE: arch/i386/kernel/smpboot.c:1077:
+		else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2036: FILE: arch/i386/kernel/smpboot.c:1080:
+			 * For more than 8 CPUs, must use clustered mode. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2039: FILE: arch/i386/kernel/smpboot.c:1083:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu_2_physical_apicid[cpu] == BAD_APICID'
#2052: FILE: arch/i386/kernel/smpboot.c:1091:
+		if ((cpu_2_physical_apicid[cpu] == BAD_APICID) &&
+				(logical_cpu_present_map & (1ul << bit))) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#2052: FILE: arch/i386/kernel/smpboot.c:1091:
+		if ((cpu_2_physical_apicid[cpu] == BAD_APICID) &&
[...]
+		} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2053: FILE: arch/i386/kernel/smpboot.c:1092:
+		if ((cpu_2_physical_apicid[cpu] == BAD_APICID) &&
+				(logical_cpu_present_map & (1ul << bit))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2054: FILE: arch/i386/kernel/smpboot.c:1093:
+			printk("CPU #%d/0x%02X/0x%02X not responding - cannot use it.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2055: FILE: arch/i386/kernel/smpboot.c:1094:
+			printk("CPU #%d/0x%02X/0x%02X not responding - cannot use it.\n",
+					bit, phys_apicid, log_apicid);

CHECK:BRACES: Unbalanced braces around else statement
#2057: FILE: arch/i386/kernel/smpboot.c:1096:
+		} else

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2083: FILE: include/asm-i386/acpi.h:142:
+extern void acpi_madt_oem_check(char *oem_id, char *oem_table_id);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2139: FILE: include/asm-i386/apicdef.h:14:
+#define			APIC_ID_MASK		(0xFF<<24)
        			            		     ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2140: FILE: include/asm-i386/apicdef.h:15:
+#define			GET_APIC_ID(x)		(((x)>>24)&0xFF)
        			              		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2140: FILE: include/asm-i386/apicdef.h:15:
+#define			GET_APIC_ID(x)		(((x)>>24)&0xFF)
        			              		          ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2242: FILE: include/asm-i386/smp.h:38:
+extern volatile u8 cpu_2_physical_apicid[NR_CPUS];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2243: FILE: include/asm-i386/smp.h:39:
+extern volatile u8 physical_apicid_2_cpu[MAX_APICID];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2244: FILE: include/asm-i386/smp.h:40:
+extern volatile u8 cpu_2_logical_apicid[NR_CPUS];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2245: FILE: include/asm-i386/smp.h:41:
+extern volatile u8 logical_apicid_2_cpu[MAX_APICID];

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2310: FILE: include/asm-i386/smp.h:92:
+extern void smp_cluster_apic_check(void);	/* cluster mode test */

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#2357: FILE: include/asm-i386/smpboot.h:8:
+#define TRAMPOLINE_LOW phys_to_virt(clustered_apic_numaq?0x8:0x467)
                                                         ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#2357: FILE: include/asm-i386/smpboot.h:8:
+#define TRAMPOLINE_LOW phys_to_virt(clustered_apic_numaq?0x8:0x467)
                                                             ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#2358: FILE: include/asm-i386/smpboot.h:9:
+#define TRAMPOLINE_HIGH phys_to_virt(clustered_apic_numaq?0xa:0x469)
                                                          ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#2358: FILE: include/asm-i386/smpboot.h:9:
+#define TRAMPOLINE_HIGH phys_to_virt(clustered_apic_numaq?0xa:0x469)
                                                              ^

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#2370: FILE: include/asm-i386/smpboot.h:21:
+#define xapic_physical_to_logical_apicid(phys_apic) ((1ul << ((phys_apic) & 0x3)) | ((phys_apic) & APIC_DEST_CLUSTER_MASK))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'phys_apic' - possible side-effects?
#2370: FILE: include/asm-i386/smpboot.h:21:
+#define xapic_physical_to_logical_apicid(phys_apic) ((1ul << ((phys_apic) & 0x3)) | ((phys_apic) & APIC_DEST_CLUSTER_MASK))

WARNING:LONG_LINE: line length of 144 exceeds 100 columns
#2385: FILE: include/asm-i386/smpboot.h:30:
+#define apicid_to_phys_cpu_present(apicid)	(clustered_apic_mode ? (1ul << ((((apicid) >> 4) << 2) | ((apicid) & 0x3))) : (1ul << (apicid)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'apicid' - possible side-effects?
#2385: FILE: include/asm-i386/smpboot.h:30:
+#define apicid_to_phys_cpu_present(apicid)	(clustered_apic_mode ? (1ul << ((((apicid) >> 4) << 2) | ((apicid) & 0x3))) : (1ul << (apicid)))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2412: FILE: include/asm-i386/smpboot.h:35:
+extern volatile u8 cpu_2_logical_apicid[];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2413: FILE: include/asm-i386/smpboot.h:36:
+extern volatile u8 cpu_2_physical_apicid[];

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2415: FILE: include/asm-i386/smpboot.h:38:
+#define cpu_to_logical_apicid(cpu)	(int)cpu_2_logical_apicid[cpu]

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2416: FILE: include/asm-i386/smpboot.h:39:
+#define cpu_to_physical_apicid(cpu)	(int)cpu_2_physical_apicid[cpu]

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000433076.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 51 errors, 50 warnings, 61 checks, 2141 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000433076.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
