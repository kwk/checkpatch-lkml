WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#40: FILE: arch/um/include/kern_util.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#68: FILE: arch/um/include/kern_util.h:125:
+extern void segv_handler(int sig, union uml_pt_regs *regs);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#69: FILE: arch/um/include/kern_util.h:126:
+extern void sigio_handler(int sig, union uml_pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#91: FILE: arch/um/include/os.h:235:
+extern void os_fill_handlinfo(struct kern_handlers h);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#92: FILE: arch/um/include/os.h:236:
+extern void do_longjmp(void *p, int val);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#101: FILE: arch/um/include/user_util.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#216: FILE: arch/um/kernel/trap_kern.c:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#249: FILE: arch/um/kernel/trap_user.c:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#336: FILE: arch/um/kernel/tt/trap_user.c:1:
+/*

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#346: FILE: arch/um/kernel/tt/trap_user.c:22:
+	void (*handler)(int, union uml_pt_regs *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'union uml_pt_regs *' should also have an identifier name
#346: FILE: arch/um/kernel/tt/trap_user.c:22:
+	void (*handler)(int, union uml_pt_regs *);

CHECK:SPACING: No space is necessary after a cast
#364: FILE: arch/um/kernel/tt/trap_user.c:50:
+	handler(sig, (union uml_pt_regs *) r);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#374: FILE: arch/um/kernel/um_arch.c:1:
+/*

ERROR:CODE_INDENT: code indent should use tabs where possible
#383: FILE: arch/um/kernel/um_arch.c:367:
+ ^I * Setting up handlers to 'sig_info' struct$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#383: FILE: arch/um/kernel/um_arch.c:367:
+ ^I * Setting up handlers to 'sig_info' struct$

ERROR:CODE_INDENT: code indent should use tabs where possible
#384: FILE: arch/um/kernel/um_arch.c:368:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#384: FILE: arch/um/kernel/um_arch.c:368:
+ ^I */$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#416: FILE: arch/um/os-Linux/trap.c:1:
+/*

WARNING:LINE_SPACING: Missing a blank line after declarations
#447: FILE: arch/um/os-Linux/tt.c:58:
+		int n;
+		CATCH_EINTR(n = waitpid(pid, NULL, 0));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#452: FILE: arch/um/os-Linux/tt.c:63:
+	} while(1);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#478: FILE: arch/um/os-Linux/skas/trap.c:1:
+/*

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#499: FILE: arch/um/os-Linux/skas/trap.c:22:
+	void (*handler)(int, union uml_pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'union uml_pt_regs *' should also have an identifier name
#499: FILE: arch/um/os-Linux/skas/trap.c:22:
+	void (*handler)(int, union uml_pt_regs *);

ERROR:SPACING: space required before the open parenthesis '('
#508: FILE: arch/um/os-Linux/skas/trap.c:31:
+	if(sig == SIGSEGV)

ERROR:CODE_INDENT: code indent should use tabs where possible
#514: FILE: arch/um/os-Linux/skas/trap.c:37:
+        if ( sig == SIGFPE || sig == SIGSEGV ||$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#514: FILE: arch/um/os-Linux/skas/trap.c:37:
+        if ( sig == SIGFPE || sig == SIGSEGV ||$

ERROR:SPACING: space prohibited after that open parenthesis '('
#514: FILE: arch/um/os-Linux/skas/trap.c:37:
+        if ( sig == SIGFPE || sig == SIGSEGV ||

ERROR:CODE_INDENT: code indent should use tabs where possible
#515: FILE: arch/um/os-Linux/skas/trap.c:38:
+             sig == SIGBUS || sig == SIGILL ||$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#515: FILE: arch/um/os-Linux/skas/trap.c:38:
+        if ( sig == SIGFPE || sig == SIGSEGV ||
+             sig == SIGBUS || sig == SIGILL ||

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#515: FILE: arch/um/os-Linux/skas/trap.c:38:
+             sig == SIGBUS || sig == SIGILL ||$

ERROR:CODE_INDENT: code indent should use tabs where possible
#516: FILE: arch/um/os-Linux/skas/trap.c:39:
+             sig == SIGTRAP ) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#516: FILE: arch/um/os-Linux/skas/trap.c:39:
+             sig == SIGTRAP ) {$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#516: FILE: arch/um/os-Linux/skas/trap.c:39:
+             sig == SIGTRAP ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#517: FILE: arch/um/os-Linux/skas/trap.c:40:
+                GET_FAULTINFO_FROM_SC(r->faultinfo, sc);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#517: FILE: arch/um/os-Linux/skas/trap.c:40:
+                GET_FAULTINFO_FROM_SC(r->faultinfo, sc);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#518: FILE: arch/um/os-Linux/skas/trap.c:41:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#518: FILE: arch/um/os-Linux/skas/trap.c:41:
+        }$

CHECK:SPACING: No space is necessary after a cast
#529: FILE: arch/um/os-Linux/skas/trap.c:52:
+	handler(sig, (union uml_pt_regs *) r);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#539: FILE: arch/um/os-Linux/skas/trap.c:62:
+	void (*handler)(int, union uml_pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'union uml_pt_regs *' should also have an identifier name
#539: FILE: arch/um/os-Linux/skas/trap.c:62:
+	void (*handler)(int, union uml_pt_regs *);

ERROR:CODE_INDENT: code indent should use tabs where possible
#540: FILE: arch/um/os-Linux/skas/trap.c:63:
+        int segv = ((sig == SIGFPE) || (sig == SIGSEGV) || (sig == SIGBUS) ||$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#540: FILE: arch/um/os-Linux/skas/trap.c:63:
+        int segv = ((sig == SIGFPE) || (sig == SIGSEGV) || (sig == SIGBUS) ||$

ERROR:CODE_INDENT: code indent should use tabs where possible
#541: FILE: arch/um/os-Linux/skas/trap.c:64:
+                    (sig == SIGILL) || (sig == SIGTRAP));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#541: FILE: arch/um/os-Linux/skas/trap.c:64:
+                    (sig == SIGILL) || (sig == SIGTRAP));$

CHECK:SPACING: No space is necessary after a cast
#547: FILE: arch/um/os-Linux/skas/trap.c:70:
+	handler(sig, (union uml_pt_regs *) regs);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000119387.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 24 warnings, 8 checks, 359 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000119387.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
