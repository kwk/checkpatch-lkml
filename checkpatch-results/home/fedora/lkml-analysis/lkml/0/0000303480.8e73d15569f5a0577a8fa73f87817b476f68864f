WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
1) I've actually been running the code for several days with no ill effects.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#65: FILE: include/linux/sysctl.h:64:
+	CTL_CPU=10,		/* CPU stuff (speed scaling, etc) */
 	       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#67: FILE: include/linux/sysctl.h:66:
+	CTL_SECURITY=11		/* Security toggles */
 	            ^

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#79: FILE: include/linux/sysctl.h:738:
+enum
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#80: FILE: include/linux/sysctl.h:739:
+	SECURITY_RANDPID=1,	/* Randomize process IDs */
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#81: FILE: include/linux/sysctl.h:740:
+	SECURITY_RANDID=2,	/* Randomize IP packet IDs */
 	               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#82: FILE: include/linux/sysctl.h:741:
+	SECURITY_RANDISN=3,	/* Randomize TCP ISN values */
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#83: FILE: include/linux/sysctl.h:742:
+	SECURITY_RANDSRC=4,	/* Randomize TCP source ports */
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#84: FILE: include/linux/sysctl.h:743:
+	SECURITY_RANDRPC=5,	/* Randomize RPC XIDs */
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#85: FILE: include/linux/sysctl.h:744:
+	SECURITY_SYSCTL=6,	/* Lockdown value for the others */
 	               ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#97: FILE: include/linux/sysctl.h:769:
+extern int proc_dointvec_security(ctl_table *, int, struct file *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ctl_table *' should also have an identifier name
#97: FILE: include/linux/sysctl.h:769:
+extern int proc_dointvec_security(ctl_table *, int, struct file *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#97: FILE: include/linux/sysctl.h:769:
+extern int proc_dointvec_security(ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#97: FILE: include/linux/sysctl.h:769:
+extern int proc_dointvec_security(ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#97: FILE: include/linux/sysctl.h:769:
+extern int proc_dointvec_security(ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t *' should also have an identifier name
#97: FILE: include/linux/sysctl.h:769:
+extern int proc_dointvec_security(ctl_table *, int, struct file *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#98: FILE: include/linux/sysctl.h:770:
+extern int proc_dointvec_security(ctl_table *, int, struct file *,
+			      void __user *, size_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#111: FILE: include/net/inetpeer.h:39:
+extern __u16 ip_randomid(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#112: FILE: include/net/inetpeer.h:40:
+extern __u32 ip_randomisn(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#140: FILE: include/net/ip.h:71:
+extern __u16 ip_randomid(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#141: FILE: include/net/ip.h:72:
+extern __u32 ip_randomisn(void);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#154: FILE: include/net/ip.h:206:
+		else
[...]
 		iph->id = (sk && inet_sk(sk)->daddr) ?

WARNING:LINE_SPACING: Missing a blank line after declarations
#179: FILE: kernel/pid.c:112:
+	unsigned int randpid;
+	if (security_enable_randpid && (last_pid >= RESERVED_PIDS)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last_pid >= RESERVED_PIDS'
#179: FILE: kernel/pid.c:112:
+	if (security_enable_randpid && (last_pid >= RESERVED_PIDS)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required after that ',' (ctx:VxV)
#180: FILE: kernel/pid.c:113:
+		get_random_bytes(&randpid,sizeof(randpid));
 		                         ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#182: FILE: kernel/pid.c:115:
+	} else
[...]
 	pid = last_pid + 1;

CHECK:BRACES: Unbalanced braces around else statement
#182: FILE: kernel/pid.c:115:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#196: FILE: kernel/sysctl.c:143:
+extern int security_enable_sysctl;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#299: FILE: kernel/sysctl.c:961:
+};  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#311: FILE: kernel/sysctl.c:1686:
+int proc_dointvec_security(ctl_table *table, int write, struct file *filp,
                                                                      ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#312: FILE: kernel/sysctl.c:1687:
+int proc_dointvec_security(ctl_table *table, int write, struct file *filp,
+			void __user *buffer, size_t *lenp)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#314: FILE: kernel/sysctl.c:1689:
+	if (write && !security_enable_sysctl) {
+		return -EPERM;
+	}

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#318: FILE: kernel/sysctl.c:1693:
+	return do_proc_dointvec(table,write,filp,buffer,lenp,
 	                                    ^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#318: FILE: kernel/sysctl.c:1693:
+	return do_proc_dointvec(table,write,filp,buffer,lenp,
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#318: FILE: kernel/sysctl.c:1693:
+	return do_proc_dointvec(table,write,filp,buffer,lenp,
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#318: FILE: kernel/sysctl.c:1693:
+	return do_proc_dointvec(table,write,filp,buffer,lenp,
 	                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#318: FILE: kernel/sysctl.c:1693:
+	return do_proc_dointvec(table,write,filp,buffer,lenp,
 	                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#319: FILE: kernel/sysctl.c:1694:
+				do_proc_dointvec_conv,NULL);
 				                     ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#345: FILE: net/ipv4/af_inet.c:393:
+	else
[...]
 	inet->id = 0;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#360: FILE: net/ipv4/ip_output.c:1159:
+		} else
[...]
 		iph->id = htons(inet->id++);

CHECK:BRACES: Unbalanced braces around else statement
#360: FILE: net/ipv4/ip_output.c:1159:
+		} else

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#368: FILE: net/ipv4/obsd_rand.c:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#371: FILE: net/ipv4/obsd_rand.c:4:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#373: FILE: net/ipv4/obsd_rand.c:6:
+ *    $

WARNING:TYPO_SPELLING: 'acknowledgement' may be misspelled - perhaps 'acknowledgment'?
#393: FILE: net/ipv4/obsd_rand.c:26:
+ *    must display the following acknowledgement:
                                  ^^^^^^^^^^^^^^^

WARNING:STATIC_CONST: Move const after static - use 'static const __u16 '
#423: FILE: net/ipv4/obsd_rand.c:56:
+const static __u16 pfacts[PFAC_N] = { 2, 3, 2729 };

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#429: FILE: net/ipv4/obsd_rand.c:62:
+static __u16 ru_counter = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#430: FILE: net/ipv4/obsd_rand.c:63:
+static __u16 ru_msb = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#431: FILE: net/ipv4/obsd_rand.c:64:
+static unsigned long ru_reseed = 0;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#444: FILE: net/ipv4/obsd_rand.c:77:
+__u16 ip_randomid(void);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#471: FILE: net/ipv4/obsd_rand.c:104:
+	get_random_bytes(&tmp,4);
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#474: FILE: net/ipv4/obsd_rand.c:107:
+	get_random_bytes(&tmp,4);
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#478: FILE: net/ipv4/obsd_rand.c:111:
+	get_random_bytes(&tmp,4);
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#484: FILE: net/ipv4/obsd_rand.c:117:
+	get_random_bytes(&tmp,4);
 	                     ^

CHECK:SPACING: No space is necessary after a cast
#512: FILE: net/ipv4/obsd_rand.c:145:
+	if (ru_counter >= RU_MAX || time_after((unsigned long) xtime.tv_sec, ru_reseed))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#516: FILE: net/ipv4/obsd_rand.c:149:
+		get_random_bytes(&tmp,4);
 		                     ^

CHECK:SPACING: No space is necessary after a cast
#537: FILE: net/ipv4/obsd_rand.c:170:
+		val ^= ((__u16) tcp_rndiss_sbox[cpu][(val ^ sum) ^ 0x7f]) << 7;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#549: FILE: net/ipv4/obsd_rand.c:182:
+	get_random_bytes(tcp_rndiss_sbox[cpu], sizeof (tcp_rndiss_sbox));

CHECK:SPACING: No space is necessary after a cast
#562: FILE: net/ipv4/obsd_rand.c:195:
+	    time_after((unsigned long) xtime.tv_sec, tcp_rndiss_reseed[cpu]))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#565: FILE: net/ipv4/obsd_rand.c:198:
+	get_random_bytes(&tmp,4);
 	                     ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'high > low'
#594: FILE: net/ipv4/tcp_ipv4.c:239:
+			if (security_enable_randsrc && (high > low)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#596: FILE: net/ipv4/tcp_ipv4.c:241:
+				int randport;
+				get_random_bytes(&randport,sizeof(randport));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#596: FILE: net/ipv4/tcp_ipv4.c:241:
+				get_random_bytes(&randport,sizeof(randport));
 				                          ^

CHECK:BRACES: Unbalanced braces around else statement
#598: FILE: net/ipv4/tcp_ipv4.c:243:
+			} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#613: FILE: net/ipv4/tcp_ipv4.c:561:
+^Iif (likely(security_enable_randisn)) $

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#615: FILE: net/ipv4/tcp_ipv4.c:563:
+		return ip_randomisn();
+	else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#615: FILE: net/ipv4/tcp_ipv4.c:563:
+	else
[...]
 	return secure_tcp_sequence_number(skb->nh.iph->daddr,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'high > low'
#625: FILE: net/ipv4/tcp_ipv4.c:700:
+			if (security_enable_randsrc && (high > low)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#627: FILE: net/ipv4/tcp_ipv4.c:702:
+				int randport;
+				get_random_bytes(&randport,sizeof(randport));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#627: FILE: net/ipv4/tcp_ipv4.c:702:
+				get_random_bytes(&randport,sizeof(randport));
 				                          ^

CHECK:BRACES: Unbalanced braces around else statement
#629: FILE: net/ipv4/tcp_ipv4.c:704:
+			} else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#648: FILE: net/ipv4/tcp_ipv4.c:884:
+		else
[...]
 		tp->write_seq = secure_tcp_sequence_number(inet->saddr,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#659: FILE: net/ipv4/tcp_ipv4.c:895:
+	else
[...]
 	inet->id = tp->write_seq ^ jiffies;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#669: FILE: net/ipv4/tcp_ipv4.c:1642:
+^Iif (security_enable_randid) $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#671: FILE: net/ipv4/tcp_ipv4.c:1644:
+	else
[...]
 	newinet->id = newtp->write_seq ^ jiffies;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#685: FILE: net/ipv4/udp.c:904:
+	else
[...]
 	inet->id = jiffies;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#711: FILE: net/sunrpc/xprt.c:1357:
+		get_random_bytes(&ret,sizeof(ret));
 		                     ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#712: FILE: net/sunrpc/xprt.c:1358:
+	else
[...]
 	ret = xid++;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#816: FILE: security/misc_init.c:1:
+/*

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000303480.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 32 errors, 30 warnings, 17 checks, 742 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000303480.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
