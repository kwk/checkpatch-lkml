ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#64: 
--- a/drivers/char/keyboard.c	Sun Aug 25 15:21:40 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#112: FILE: drivers/char/keyboard.c:136:
+^Ifor (handle = kbd_handler.handle; handle; handle = handle->hnext) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#113: FILE: drivers/char/keyboard.c:137:
+		if (handle->dev->keycodesize) break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#118: FILE: drivers/char/keyboard.c:142:
+	switch (handle->dev->keycodesize) {
+		case 1: keycode = *(u8*)(handle->dev->keycode + scancode); break;
+		case 2: keycode = *(u16*)(handle->dev->keycode + scancode * 2); break;
+		case 4: keycode = *(u32*)(handle->dev->keycode + scancode * 4); break;
+		default: return -EINVAL;

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#119: FILE: drivers/char/keyboard.c:143:
+		case 1: keycode = *(u8*)(handle->dev->keycode + scancode); break;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#119: FILE: drivers/char/keyboard.c:143:
+		case 1: keycode = *(u8*)(handle->dev->keycode + scancode); break;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#120: FILE: drivers/char/keyboard.c:144:
+		case 2: keycode = *(u16*)(handle->dev->keycode + scancode * 2); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#120: FILE: drivers/char/keyboard.c:144:
+		case 2: keycode = *(u16*)(handle->dev->keycode + scancode * 2); break;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#121: FILE: drivers/char/keyboard.c:145:
+		case 4: keycode = *(u32*)(handle->dev->keycode + scancode * 4); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#121: FILE: drivers/char/keyboard.c:145:
+		case 4: keycode = *(u32*)(handle->dev->keycode + scancode * 4); break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#132: FILE: drivers/char/keyboard.c:156:
+^Ifor (handle = kbd_handler.handle; handle; handle = handle->hnext) $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#133: FILE: drivers/char/keyboard.c:157:
+		if (handle->dev->keycodesize) break;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#138: FILE: drivers/char/keyboard.c:162:
+	switch (handle->dev->keycodesize) {
+		case 1: *(u8*)(handle->dev->keycode + scancode) = keycode; break;
+		case 2: *(u16*)(handle->dev->keycode + scancode * 2) = keycode; break;
+		case 4: *(u32*)(handle->dev->keycode + scancode * 4) = keycode; break;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#139: FILE: drivers/char/keyboard.c:163:
+		case 1: *(u8*)(handle->dev->keycode + scancode) = keycode; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#139: FILE: drivers/char/keyboard.c:163:
+		case 1: *(u8*)(handle->dev->keycode + scancode) = keycode; break;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#140: FILE: drivers/char/keyboard.c:164:
+		case 2: *(u16*)(handle->dev->keycode + scancode * 2) = keycode; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#140: FILE: drivers/char/keyboard.c:164:
+		case 2: *(u16*)(handle->dev->keycode + scancode * 2) = keycode; break;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#141: FILE: drivers/char/keyboard.c:165:
+		case 4: *(u32*)(handle->dev->keycode + scancode * 4) = keycode; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#141: FILE: drivers/char/keyboard.c:165:
+		case 4: *(u32*)(handle->dev->keycode + scancode * 4) = keycode; break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#143: FILE: drivers/char/keyboard.c:167:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#148: FILE: drivers/char/keyboard.c:172:
+ * Making beeps and bells. $

CHECK:BRACES: braces {} should be used on all arms of this statement
#171: FILE: drivers/char/keyboard.c:195:
+	if (hz) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#185: FILE: drivers/char/keyboard.c:209:
+	} else

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#201: FILE: drivers/char/keyboard.c:225:
+			if (rep->rate > HZ) rep->rate = HZ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#207: FILE: drivers/char/keyboard.c:231:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#463: FILE: drivers/input/misc/Config.help:28:
+  module, say M here and read <file:Documentation/modules.txt>.^I    $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#496: FILE: drivers/input/misc/pcspkr.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#514: FILE: drivers/input/misc/pcspkr.c:19:
+#include <asm/io.h>

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#534: FILE: drivers/input/misc/pcspkr.c:39:
+	switch (code) {
+		case SND_BELL: if (value) value = 1000;
+		case SND_TONE: break;
+		default: return -1;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#535: FILE: drivers/input/misc/pcspkr.c:40:
+		case SND_BELL: if (value) value = 1000;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#535: FILE: drivers/input/misc/pcspkr.c:40:
+		case SND_BELL: if (value) value = 1000;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#536: FILE: drivers/input/misc/pcspkr.c:41:
+		case SND_TONE: break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#538: FILE: drivers/input/misc/pcspkr.c:43:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#542: FILE: drivers/input/misc/pcspkr.c:47:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#578: FILE: drivers/input/misc/pcspkr.c:83:
+        printk(KERN_INFO "input: %s\n", pcspkr_name);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#578: FILE: drivers/input/misc/pcspkr.c:83:
+        printk(KERN_INFO "input: %s\n", pcspkr_name);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#578: FILE: drivers/input/misc/pcspkr.c:83:
+        printk(KERN_INFO "input: %s\n", pcspkr_name);

ERROR:CODE_INDENT: code indent should use tabs where possible
#585: FILE: drivers/input/misc/pcspkr.c:90:
+        input_unregister_device(&pcspkr_dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#585: FILE: drivers/input/misc/pcspkr.c:90:
+        input_unregister_device(&pcspkr_dev);$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#594: FILE: drivers/input/misc/uinput.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#610: FILE: drivers/input/misc/uinput.c:17:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#611: FILE: drivers/input/misc/uinput.c:18:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#614: FILE: drivers/input/misc/uinput.c:21:
+ * $

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#636: FILE: drivers/input/misc/uinput.c:43:
+{
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#637: FILE: drivers/input/misc/uinput.c:44:
+
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#664: FILE: drivers/input/misc/uinput.c:71:
+}^I^I^I^I^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#669: FILE: drivers/input/misc/uinput.c:76:
+		printk(KERN_DEBUG "%s: write device info first\n", UINPUT_NAME);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around udev->waitq
#679: FILE: drivers/input/misc/uinput.c:86:
+	init_waitqueue_head(&(udev->waitq));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#691: FILE: drivers/input/misc/uinput.c:98:
+		printk(KERN_WARNING "%s: create the device first\n", UINPUT_NAME);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around udev->state
#697: FILE: drivers/input/misc/uinput.c:104:
+	clear_bit(UIST_CREATED, &(udev->state));

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*newdev)...) over kmalloc(sizeof(struct uinput_device)...)
#709: FILE: drivers/input/misc/uinput.c:116:
+	newdev = kmalloc(sizeof(struct uinput_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*newinput)...) over kmalloc(sizeof(struct input_dev)...)
#714: FILE: drivers/input/misc/uinput.c:121:
+	newinput = kmalloc(sizeof(struct input_dev), GFP_KERNEL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#720: FILE: drivers/input/misc/uinput.c:127:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#771: FILE: drivers/input/misc/uinput.c:178:
+	 * told in Documentation/input/input-programming.txt */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#774: FILE: drivers/input/misc/uinput.c:181:
+		unsigned int cnt;
+		for (cnt = 1; cnt < ABS_MAX; cnt++)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#776: FILE: drivers/input/misc/uinput.c:183:
+			if (test_bit(cnt, dev->absbit) &&
+					(!dev->absmin[cnt] ||

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#780: FILE: drivers/input/misc/uinput.c:187:
+				printk(KERN_DEBUG "%s: set abs fields "

WARNING:SPLIT_STRING: quoted string split across lines
#781: FILE: drivers/input/misc/uinput.c:188:
+				printk(KERN_DEBUG "%s: set abs fields "
+					"first\n", UINPUT_NAME);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#797: FILE: drivers/input/misc/uinput.c:204:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#798: FILE: drivers/input/misc/uinput.c:205:
+	
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#799: FILE: drivers/input/misc/uinput.c:206:
+	if (udev->state & UIST_CREATED) {
[...]
+	else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#806: FILE: drivers/input/misc/uinput.c:213:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around udev->buff[udev->tail]
#847: FILE: drivers/input/misc/uinput.c:254:
+		if (copy_to_user(buffer + retval, &(udev->buff[udev->tail]),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#848: FILE: drivers/input/misc/uinput.c:255:
+		if (copy_to_user(buffer + retval, &(udev->buff[udev->tail]),
+		    sizeof(struct input_event)))

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#850: FILE: drivers/input/misc/uinput.c:257:
+		udev->tail = (udev->tail + 1)%(UINPUT_BUFFER_SIZE - 1);
 		                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#859: FILE: drivers/input/misc/uinput.c:266:
+        struct uinput_device *udev = file->private_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#859: FILE: drivers/input/misc/uinput.c:266:
+        struct uinput_device *udev = file->private_data;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#866: FILE: drivers/input/misc/uinput.c:273:
+^Ireturn 0;^I^I^I$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#899: FILE: drivers/input/misc/uinput.c:306:
+	switch (cmd) {
+		case UI_DEV_CREATE:
[...]
+		case UI_DEV_DESTROY:
[...]
+		case UI_SET_EVBIT:
[...]
+		case UI_SET_KEYBIT:
[...]
+		case UI_SET_RELBIT:
[...]
+		case UI_SET_ABSBIT:
[...]
+		case UI_SET_MSCBIT:
[...]
+		case UI_SET_LEDBIT:
[...]
+		case UI_SET_SNDBIT:
[...]
+		case UI_SET_FFBIT:
[...]
+		default:

WARNING:CONST_STRUCT: struct file_operations should normally be const
#946: FILE: drivers/input/misc/uinput.c:353:
+struct file_operations uinput_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1388: FILE: include/linux/vt_kern.h:35:
+extern void kd_mksound(unsigned int hz, unsigned int ticks);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1389: FILE: include/linux/vt_kern.h:36:
+extern int kbd_rate(struct kbd_repeat *rep);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000437408.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 42 errors, 14 warnings, 16 checks, 856 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000437408.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
