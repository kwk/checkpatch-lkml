WARNING:LINE_SPACING: Missing a blank line after declarations
#62: FILE: fs/fuse/dev.c:649:
+	struct fuse_getdir_out_i *arg = req->out.args[0].value;
+	arg->file = fget(arg->fd);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#81: FILE: fs/fuse/dir.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#82: FILE: fs/fuse/dir.c:2:
+/*
+  FUSE: Filesystem in Userspace

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#121: FILE: fs/fuse/dir.c:41:
+static int fuse_dentry_revalidate(struct dentry *entry, struct nameidata *nd)
                                                                           ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: braces {} should be used on all arms of this statement
#123: FILE: fs/fuse/dir.c:43:
+	if (!entry->d_inode || is_bad_inode(entry->d_inode))
[...]
+	else if (entry->d_time && time_after(jiffies, entry->d_time)) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#133: FILE: fs/fuse/dir.c:53:
+		struct fuse_req *req = fuse_get_request_nonint(fc);
+		if (!req)

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#155: FILE: fs/fuse/dir.c:75:
+static struct dentry_operations fuse_dentry_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#194: FILE: fs/fuse/dir.c:114:
+		struct fuse_inode *fi = get_fuse_inode(inode);
+		entry->d_time =	time_to_jiffies(outarg.entry_valid,

WARNING:LINE_SPACING: Missing a blank line after declarations
#211: FILE: fs/fuse/dir.c:131:
+	struct fuse_req *req = fuse_get_request(fc);
+	if (!req)

WARNING:LINE_SPACING: Missing a blank line after declarations
#229: FILE: fs/fuse/dir.c:149:
+			struct fuse_inode *fi = get_fuse_inode(inode);
+			fuse_change_attributes(inode, &arg.attr);

CHECK:BRACES: braces {} should be used on all arms of this statement
#243: FILE: fs/fuse/dir.c:163:
+	if (get_node_id(inode) == FUSE_ROOT_ID) {
[...]
+	} else if (!fi->i_time || time_before_eq(jiffies, fi->i_time))
[...]

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#252: FILE: fs/fuse/dir.c:172:
+static int fuse_permission(struct inode *inode, int mask, struct nameidata *nd)
                                                                             ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#256: FILE: fs/fuse/dir.c:176:
+	if (current->fsuid != fc->user_id)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#258: FILE: fs/fuse/dir.c:178:
+		return -EACCES;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#258: FILE: fs/fuse/dir.c:178:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#260: FILE: fs/fuse/dir.c:180:
+		int mode = inode->i_mode;
+		if ((mask & MAY_WRITE) && IS_RDONLY(inode) &&

ERROR:CODE_INDENT: code indent should use tabs where possible
#261: FILE: fs/fuse/dir.c:181:
+                    (S_ISREG(mode) || S_ISDIR(mode) || S_ISLNK(mode)))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#261: FILE: fs/fuse/dir.c:181:
+		if ((mask & MAY_WRITE) && IS_RDONLY(inode) &&
+                    (S_ISREG(mode) || S_ISDIR(mode) || S_ISLNK(mode)))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: fs/fuse/dir.c:181:
+                    (S_ISREG(mode) || S_ISDIR(mode) || S_ISLNK(mode)))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#262: FILE: fs/fuse/dir.c:182:
+                        return -EROFS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#262: FILE: fs/fuse/dir.c:182:
+                        return -EROFS;$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXUGO' are not preferred. Consider using octal permissions '0111'.
#263: FILE: fs/fuse/dir.c:183:
+		if ((mask & MAY_EXEC) && !S_ISDIR(mode) && !(mode & S_IXUGO))

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: No space is necessary after a cast
#273: FILE: fs/fuse/dir.c:193:
+		struct fuse_dirent *dirent = (struct fuse_dirent *) buf;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#276: FILE: fs/fuse/dir.c:196:
+		int over;
+		if (dirent->namelen > FUSE_NAME_MAX)

WARNING:LINE_SPACING: Missing a blank line after declarations
#297: FILE: fs/fuse/dir.c:217:
+	struct inode *inode;
+	if (!cfile)

CHECK:SPACING: No space is necessary after a cast
#348: FILE: fs/fuse/dir.c:268:
+	buf = (char *) __get_free_page(GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#356: FILE: fs/fuse/dir.c:276:
+	free_page((unsigned long) buf);

CHECK:SPACING: No space is necessary after a cast
#370: FILE: fs/fuse/dir.c:290:
+	link = (char *) __get_free_page(GFP_KERNEL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#383: FILE: fs/fuse/dir.c:303:
+	if (req->out.h.error) {
[...]
+	} else
[...]

CHECK:SPACING: No space is necessary after a cast
#384: FILE: fs/fuse/dir.c:304:
+		free_page((unsigned long) link);

CHECK:BRACES: Unbalanced braces around else statement
#386: FILE: fs/fuse/dir.c:306:
+	} else

CHECK:SPACING: No space is necessary after a cast
#396: FILE: fs/fuse/dir.c:316:
+		free_page((unsigned long) link);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#411: FILE: fs/fuse/dir.c:331:
+static int fuse_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#417: FILE: fs/fuse/dir.c:337:
+	ret = vfs_follow_link(nd, link);
 	                      ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#443: FILE: fs/fuse/dir.c:363:
+	int err = fuse_revalidate(entry);
+	if (!err)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#450: FILE: fs/fuse/dir.c:370:
+				  struct nameidata *nd)
 				                    ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#454: FILE: fs/fuse/dir.c:374:
+	int err = fuse_lookup_iget(dir, entry, &inode);
+	if (err)

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#459: FILE: fs/fuse/dir.c:379:
+static struct inode_operations fuse_dir_inode_operations = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#465: FILE: fs/fuse/dir.c:385:
+static struct file_operations fuse_dir_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#472: FILE: fs/fuse/dir.c:392:
+static struct inode_operations fuse_common_inode_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#477: FILE: fs/fuse/dir.c:397:
+static struct inode_operations fuse_symlink_inode_operations = {

WARNING:LINE_SPACING: Missing a blank line after declarations
#606: FILE: fs/fuse/inode.c:65:
+	struct fuse_inode *fi = get_fuse_inode(inode);
+	if (fi->forget_req)

WARNING:LINE_SPACING: Missing a blank line after declarations
#619: FILE: fs/fuse/inode.c:79:
+	struct fuse_forget_in *inarg = &req->misc.forget_in;
+	inarg->version = version;

WARNING:LINE_SPACING: Missing a blank line after declarations
#631: FILE: fs/fuse/inode.c:91:
+	struct fuse_conn *fc = get_fuse_conn(inode);
+	if (fc) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#633: FILE: fs/fuse/inode.c:93:
+		struct fuse_inode *fi = get_fuse_inode(inode);
+		fuse_send_forget(fc, fi->forget_req, fi->nodeid, inode->i_version);

CHECK:BRACES: braces {} should be used on all arms of this statement
#643: FILE: fs/fuse/inode.c:123:
+	if (S_ISREG(inode->i_mode)) {
[...]
+	} else if (S_ISDIR(inode->i_mode))
[...]
+	else if (S_ISLNK(inode->i_mode))
[...]
+	else if (S_ISCHR(inode->i_mode) || S_ISBLK(inode->i_mode) ||
[...]
+	} else {
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#686: FILE: fs/fuse/inode.c:223:
+        req = fuse_get_request(fc);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#686: FILE: fs/fuse/inode.c:223:
+        req = fuse_get_request(fc);$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#749: FILE: include/linux/fuse.h:73:
+	__u64	generation;	/* Inode generation: nodeid:gen must
+				   be unique for the fs's lifetime */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#749: FILE: include/linux/fuse.h:73:
+				   be unique for the fs's lifetime */

CHECK:SPACING: No space is necessary after a cast
#790: FILE: include/linux/fuse.h:128:
+#define FUSE_NAME_OFFSET ((unsigned) ((struct fuse_dirent *) 0)->name)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#790: FILE: include/linux/fuse.h:128:
+#define FUSE_NAME_OFFSET ((unsigned) ((struct fuse_dirent *) 0)->name)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000217068.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 34 warnings, 15 checks, 718 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000217068.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
