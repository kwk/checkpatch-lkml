WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
diff -Nur linux-2.6.7.org/drivers/scsi/Kconfig linux-2.6.7/drivers/scsi/Kconfig

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#36: FILE: drivers/scsi/Kconfig:58:
+config SCSI_DUMP
+	tristate "SCSI dump support"
+	depends on DISKDUMP && SCSI
+	help
+	   SCSI dump support
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#74: FILE: drivers/scsi/scsi_dump.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#75: FILE: drivers/scsi/scsi_dump.c:2:
+ *  linux/drivers/scsi/scsi_dump.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#94: FILE: drivers/scsi/scsi_dump.c:21:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#95: FILE: drivers/scsi/scsi_dump.c:22:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:CAMELCASE: Avoid CamelCase: <Dbg>
#133: FILE: drivers/scsi/scsi_dump.c:60:
+#define Dbg(x, ...)	pr_debug("scsi_dump: " x "\n", ## __VA_ARGS__)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#134: FILE: drivers/scsi/scsi_dump.c:61:
+#define Err(x, ...)	pr_err  ("scsi_dump: " x "\n", ## __VA_ARGS__)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Err>
#134: FILE: drivers/scsi/scsi_dump.c:61:
+#define Err(x, ...)	pr_err  ("scsi_dump: " x "\n", ## __VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#134: FILE: drivers/scsi/scsi_dump.c:61:
+#define Err(x, ...)	pr_err  ("scsi_dump: " x "\n", ## __VA_ARGS__)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#135: FILE: drivers/scsi/scsi_dump.c:62:
+#define Warn(x, ...)	pr_warn ("scsi_dump: " x "\n", ## __VA_ARGS__)

CHECK:CAMELCASE: Avoid CamelCase: <Warn>
#135: FILE: drivers/scsi/scsi_dump.c:62:
+#define Warn(x, ...)	pr_warn ("scsi_dump: " x "\n", ## __VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#135: FILE: drivers/scsi/scsi_dump.c:62:
+#define Warn(x, ...)	pr_warn ("scsi_dump: " x "\n", ## __VA_ARGS__)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#136: FILE: drivers/scsi/scsi_dump.c:63:
+#define Info(x, ...)	pr_info ("scsi_dump: " x "\n", ## __VA_ARGS__)

CHECK:CAMELCASE: Avoid CamelCase: <Info>
#136: FILE: drivers/scsi/scsi_dump.c:63:
+#define Info(x, ...)	pr_info ("scsi_dump: " x "\n", ## __VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#136: FILE: drivers/scsi/scsi_dump.c:63:
+#define Info(x, ...)	pr_info ("scsi_dump: " x "\n", ## __VA_ARGS__)

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#141: FILE: drivers/scsi/scsi_dump.c:68:
+static int quiesce_ok = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#144: FILE: drivers/scsi/scsi_dump.c:71:
+static uint32_t module_crc;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#146: FILE: drivers/scsi/scsi_dump.c:73:
+static void rw_intr(struct scsi_cmnd * scmd)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#160: FILE: drivers/scsi/scsi_dump.c:87:
+^I^I ^I      void *buf, int len, unsigned char direction,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#160: FILE: drivers/scsi/scsi_dump.c:87:
+^I^I ^I      void *buf, int len, unsigned char direction,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#160: FILE: drivers/scsi/scsi_dump.c:87:
+static void init_scsi_command(struct scsi_device *sdev, struct scsi_cmnd *scmd,
+		 	      void *buf, int len, unsigned char direction,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#167: FILE: drivers/scsi/scsi_dump.c:94:
+	scmd->buffer	= scmd->request_buffer = buf;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#168: FILE: drivers/scsi/scsi_dump.c:95:
+	scmd->bufflen	= scmd->request_bufflen = len;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#170: FILE: drivers/scsi/scsi_dump.c:97:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#177: FILE: drivers/scsi/scsi_dump.c:104:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#229: FILE: drivers/scsi/scsi_dump.c:156:
+static void init_sync_command(struct scsi_device *sdev, struct scsi_cmnd * scmd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#250: FILE: drivers/scsi/scsi_dump.c:177:
+			   struct scsi_device *sdev, struct scsi_cmnd * scmd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#259: FILE: drivers/scsi/scsi_dump.c:186:
+		Err("block number %d is larger than %lu",
+				block + this_count, dump_part->nr_sects);

CHECK:SPACING: No space is necessary after a cast
#307: FILE: drivers/scsi/scsi_dump.c:234:
+	scmd->cmnd[2] = (unsigned char) (block >> 24) & 0xff;

CHECK:SPACING: No space is necessary after a cast
#308: FILE: drivers/scsi/scsi_dump.c:235:
+	scmd->cmnd[3] = (unsigned char) (block >> 16) & 0xff;

CHECK:SPACING: No space is necessary after a cast
#309: FILE: drivers/scsi/scsi_dump.c:236:
+	scmd->cmnd[4] = (unsigned char) (block >> 8) & 0xff;

CHECK:SPACING: No space is necessary after a cast
#310: FILE: drivers/scsi/scsi_dump.c:237:
+	scmd->cmnd[5] = (unsigned char) block & 0xff;

CHECK:SPACING: No space is necessary after a cast
#311: FILE: drivers/scsi/scsi_dump.c:238:
+	scmd->cmnd[7] = (unsigned char) (this_count >> 8) & 0xff;

CHECK:SPACING: No space is necessary after a cast
#312: FILE: drivers/scsi/scsi_dump.c:239:
+	scmd->cmnd[8] = (unsigned char) this_count & 0xff;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#315: FILE: drivers/scsi/scsi_dump.c:242:
+	init_scsi_command(sdev, scmd, buf, len,
+			(rw == WRITE ? SCSI_DATA_WRITE : SCSI_DATA_READ), 1);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#324: FILE: drivers/scsi/scsi_dump.c:251:
+ * ^I> 0: should retry$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#325: FILE: drivers/scsi/scsi_dump.c:252:
+ * ^I= 0: success$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#326: FILE: drivers/scsi/scsi_dump.c:253:
+ * ^I< 0: fail$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#345: FILE: drivers/scsi/scsi_dump.c:272:
+		if (status == GOOD || status == INTERMEDIATE_GOOD
+				   || status == INTERMEDIATE_C_GOOD)

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host>
#362: FILE: drivers/scsi/scsi_dump.c:289:
+	struct Scsi_Host *host = scmd->device->host;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "scmd->done"
#380: FILE: drivers/scsi/scsi_dump.c:307:
+		while (scmd->done != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#382: FILE: drivers/scsi/scsi_dump.c:309:
+			udelay(100);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#408: FILE: drivers/scsi/scsi_dump.c:335:
+	if ((ret = send_command(&scsi_dump_cmnd)) < 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#424: FILE: drivers/scsi/scsi_dump.c:351:
+	if ((ret = send_command(&scsi_dump_cmnd)) < 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#428: FILE: drivers/scsi/scsi_dump.c:355:
+		if ((ret = send_command(&scsi_dump_cmnd)) < 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#428: FILE: drivers/scsi/scsi_dump.c:355:
+		if ((ret = send_command(&scsi_dump_cmnd)) < 0) {
+			Err("sense failed");
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#438: FILE: drivers/scsi/scsi_dump.c:365:
+ * ^I0:^Ithe device is ok$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#439: FILE: drivers/scsi/scsi_dump.c:366:
+ * ^I< 0:^Ithe device is not ok$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#440: FILE: drivers/scsi/scsi_dump.c:367:
+ * ^I> 0:^ICannot determine$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#460: FILE: drivers/scsi/scsi_dump.c:387:
+		Warn("device not online: host %d channel %d id %d lun %d",
+			host->host_no, sdev->channel, sdev->id, sdev->lun);

WARNING:LONG_LINE_STRING: line length of 107 exceeds 100 columns
#464: FILE: drivers/scsi/scsi_dump.c:391:
+		Err("SCSI disk has been changed. Prohibiting further I/O: host %d channel %d id %d lun %d",

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#465: FILE: drivers/scsi/scsi_dump.c:392:
+		Err("SCSI disk has been changed. Prohibiting further I/O: host %d channel %d id %d lun %d",
+			host->host_no, sdev->channel, sdev->id, sdev->lun);

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#477: FILE: drivers/scsi/scsi_dump.c:404:
+	if (!spin_is_locked(host->host_lock)) {

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#481: FILE: drivers/scsi/scsi_dump.c:408:
+		Warn("host_lock is held: host %d channel %d id %d lun %d",
+			host->host_no, sdev->channel, sdev->id, sdev->lun);

CHECK:BRACES: braces {} should be used on all arms of this statement
#500: FILE: drivers/scsi/scsi_dump.c:427:
+	if (hostt->eh_host_reset_handler) {
[...]
+	} else if (hostt->eh_bus_reset_handler) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#506: FILE: drivers/scsi/scsi_dump.c:433:
+	} else

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#522: FILE: drivers/scsi/scsi_dump.c:449:
+	if ((ret = send_command(&scsi_dump_cmnd)) < 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#543: FILE: drivers/scsi/scsi_dump.c:470:
+	if ((ret = scsi_dump_reset(sdev)) < 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#567: FILE: drivers/scsi/scsi_dump.c:494:
+	ret = init_rw_command(dump_part, sdev, &scsi_dump_cmnd, rw,
+					block_nr, buf, DUMP_BLOCK_SIZE * len);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->bus == NULL'
#603: FILE: drivers/scsi/scsi_dump.c:530:
+	if ((dev->bus == NULL) || (dev->bus->name == NULL) ||
+	    strncmp(dev->bus->name, "scsi", 4))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->bus->name == NULL'
#603: FILE: drivers/scsi/scsi_dump.c:530:
+	if ((dev->bus == NULL) || (dev->bus->name == NULL) ||
+	    strncmp(dev->bus->name, "scsi", 4))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev->bus"
#603: FILE: drivers/scsi/scsi_dump.c:530:
+	if ((dev->bus == NULL) || (dev->bus->name == NULL) ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev->bus->name"
#603: FILE: drivers/scsi/scsi_dump.c:530:
+	if ((dev->bus == NULL) || (dev->bus->name == NULL) ||

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#621: FILE: drivers/scsi/scsi_dump.c:548:
+		return -ENOTSUPP;

ENOTSUPP is not a standard error code and should be avoided in new patches.
EOPNOTSUPP should be used instead.

See: https://lore.kernel.org/netdev/20200510182252.GA411829@lunn.ch/

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#623: FILE: drivers/scsi/scsi_dump.c:550:
+	if ((error = scsi_device_get(sdev)) != 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#627: FILE: drivers/scsi/scsi_dump.c:554:
+	memcpy(&dump_device->ops, &scsi_dump_device_ops,
+		sizeof(scsi_dump_device_ops));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#654: FILE: drivers/scsi/scsi_dump.c:581:
+	if ((ret = register_disk_dump_type(&scsi_dump_type)) < 0) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#701: FILE: drivers/scsi/scsi_syms.c:112:
+EXPORT_SYMBOL(scsi_decide_disposition);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'diskdump_sysfs_show' to 'dump_show' 'diskdump_sysfs_store' to 'dump_store'
#717: FILE: drivers/scsi/scsi_sysfs.c:379:
+DEVICE_ATTR(dump, S_IRUGO | S_IWUSR, diskdump_sysfs_show, diskdump_sysfs_store);

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#717: FILE: drivers/scsi/scsi_sysfs.c:379:
+DEVICE_ATTR(dump, S_IRUGO | S_IWUSR, diskdump_sysfs_show, diskdump_sysfs_store);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#737: FILE: include/scsi/scsi_host.h:349:
+#if defined(CONFIG_SCSI_DUMP) || defined(CONFIG_SCSI_DUMP_MODULE)

WARNING:SPACING: Unnecessary space before function pointer name
#747: FILE: include/scsi/scsi_host.h:359:
+	int (* dump_sanity_check)(struct scsi_device *);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#747: FILE: include/scsi/scsi_host.h:359:
+	int (* dump_sanity_check)(struct scsi_device *);
 	     ^

WARNING:SPACING: Unnecessary space before function pointer name
#757: FILE: include/scsi/scsi_host.h:369:
+	int (* dump_quiesce)(struct scsi_device *);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#757: FILE: include/scsi/scsi_host.h:369:
+	int (* dump_quiesce)(struct scsi_device *);
 	     ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_device *' should also have an identifier name
#757: FILE: include/scsi/scsi_host.h:369:
+	int (* dump_quiesce)(struct scsi_device *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: Unnecessary space before function pointer name
#765: FILE: include/scsi/scsi_host.h:377:
+	int (* dump_shutdown)(struct scsi_device *);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#765: FILE: include/scsi/scsi_host.h:377:
+	int (* dump_shutdown)(struct scsi_device *);
 	     ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_device *' should also have an identifier name
#765: FILE: include/scsi/scsi_host.h:377:
+	int (* dump_shutdown)(struct scsi_device *);

WARNING:SPACING: Unnecessary space before function pointer name
#775: FILE: include/scsi/scsi_host.h:387:
+	void (* dump_poll)(struct scsi_device *);

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#775: FILE: include/scsi/scsi_host.h:387:
+	void (* dump_poll)(struct scsi_device *);
 	      ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_device *' should also have an identifier name
#775: FILE: include/scsi/scsi_host.h:387:
+	void (* dump_poll)(struct scsi_device *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000266450.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 29 warnings, 33 checks, 716 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000266450.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
