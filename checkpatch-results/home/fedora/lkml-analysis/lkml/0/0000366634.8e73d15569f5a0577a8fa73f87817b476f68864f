WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#27: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#28: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#29: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#30: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#31: 
#	           ChangeSet	1.1158  -> 1.1159 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#32: 
#	    drivers/atm/he.c	1.7     -> 1.8    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#33: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#34: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#35: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#36: 
# 03/05/23	chas@relax.cmf.nrl.navy.mil	1.1159

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#37: 
# he coding style conformance

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#38: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#39: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#41: 
--- a/drivers/atm/he.c	Thu May 29 11:48:40 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#48: FILE: drivers/atm/he.c:135:
+#define HPRINTK(fmt,args...)	printk(KERN_DEBUG DEV_LABEL "%d: " fmt, he_dev->number , ##args)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#48: FILE: drivers/atm/he.c:135:
+#define HPRINTK(fmt,args...)	printk(KERN_DEBUG DEV_LABEL "%d: " fmt, he_dev->number , ##args)
                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#48: FILE: drivers/atm/he.c:135:
+#define HPRINTK(fmt,args...)	printk(KERN_DEBUG DEV_LABEL "%d: " fmt, he_dev->number , ##args)
                             	                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#51: FILE: drivers/atm/he.c:137:
+#define HPRINTK(fmt,args...)	do { } while (0)
                    ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#70: FILE: drivers/atm/he.c:190:
+#define he_writel(dev, val, reg)	do { writel(val, (dev)->membase + (reg)); wmb(); } while (0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#79: FILE: drivers/atm/he.c:204:
+	while (he_readl(he_dev, CON_CTL) & CON_CTL_BUSY);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#88: FILE: drivers/atm/he.c:220:
+	while (he_readl(he_dev, CON_CTL) & CON_CTL_BUSY);

ERROR:CODE_INDENT: code indent should use tabs where possible
#117: FILE: drivers/atm/he.c:450:
+        if (rate == 0)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: drivers/atm/he.c:450:
+        if (rate == 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#123: FILE: drivers/atm/he.c:454:
+        while (rate > 0x3ff) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: drivers/atm/he.c:454:
+        while (rate > 0x3ff) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#133: FILE: drivers/atm/he.c:475:
+        for (i = 0, lbuf_count = 0; i < he_dev->r0_numbuffs; ++i) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: drivers/atm/he.c:475:
+        for (i = 0, lbuf_count = 0; i < he_dev->r0_numbuffs; ++i) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#142: FILE: drivers/atm/he.c:482:
+                if (++lbuf_count == lbufs_per_row) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: drivers/atm/he.c:482:
+                if (++lbuf_count == lbufs_per_row) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: drivers/atm/he.c:506:
+        for (i = 0, lbuf_count = 0; i < he_dev->r1_numbuffs; ++i) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: drivers/atm/he.c:506:
+        for (i = 0, lbuf_count = 0; i < he_dev->r1_numbuffs; ++i) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#161: FILE: drivers/atm/he.c:513:
+                if (++lbuf_count == lbufs_per_row) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: drivers/atm/he.c:513:
+                if (++lbuf_count == lbufs_per_row) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#171: FILE: drivers/atm/he.c:537:
+        for (i = 0, lbuf_count = 0; i < he_dev->tx_numbuffs; ++i) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: drivers/atm/he.c:537:
+        for (i = 0, lbuf_count = 0; i < he_dev->tx_numbuffs; ++i) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#180: FILE: drivers/atm/he.c:544:
+                if (++lbuf_count == lbufs_per_row) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: drivers/atm/he.c:544:
+                if (++lbuf_count == lbufs_per_row) {$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!he_dev->tpdrq_base"
#190: FILE: drivers/atm/he.c:559:
+	if (he_dev->tpdrq_base == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#280: FILE: drivers/atm/he.c:746:
+			if (rategrid[i/16][i%16] >= rate_cps)
 			              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#280: FILE: drivers/atm/he.c:746:
+			if (rategrid[i/16][i%16] >= rate_cps)
 			                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#293: FILE: drivers/atm/he.c:762:
+                if (rate_cps > (68 * mult))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#293: FILE: drivers/atm/he.c:762:
+                if (rate_cps > (68 * mult))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#295: FILE: drivers/atm/he.c:764:
+                if (rate_cps > (136 * mult))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: drivers/atm/he.c:764:
+                if (rate_cps > (136 * mult))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#297: FILE: drivers/atm/he.c:766:
+                if (rate_cps > (204 * mult))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#297: FILE: drivers/atm/he.c:766:
+                if (rate_cps > (204 * mult))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#299: FILE: drivers/atm/he.c:768:
+                if (rate_cps > (272 * mult))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: drivers/atm/he.c:768:
+                if (rate_cps > (272 * mult))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#303: FILE: drivers/atm/he.c:771:
+                if (buf > buf_limit)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: drivers/atm/he.c:771:
+                if (buf > buf_limit)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!he_dev->rbps_pool"
#314: FILE: drivers/atm/he.c:795:
+	if (he_dev->rbps_pool == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!he_dev->rbps_base"
#324: FILE: drivers/atm/he.c:810:
+	if (he_dev->rbps_base == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!he_dev->rbpl_pool"
#343: FILE: drivers/atm/he.c:859:
+	if (he_dev->rbpl_pool == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!he_dev->rbpl_pages"
#352: FILE: drivers/atm/he.c:866:
+	if (he_dev->rbpl_pages == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!he_dev->rbpl_base"
#362: FILE: drivers/atm/he.c:874:
+	if (he_dev->rbpl_base == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!he_dev->rbrq_base"
#389: FILE: drivers/atm/he.c:915:
+	if (he_dev->rbrq_base == NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#405: FILE: drivers/atm/he.c:931:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!he_dev->tbrq_base"
#415: FILE: drivers/atm/he.c:939:
+	if (he_dev->tbrq_base == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!he_dev->irq_base"
#425: FILE: drivers/atm/he.c:965:
+	if (he_dev->irq_base == NULL) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#434: FILE: drivers/atm/he.c:975:
+	for (i=0; i < CONFIG_IRQ_SIZE; ++i)
 	      ^

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#444: FILE: drivers/atm/he.c:1007:
+	if (request_irq(he_dev->pci_dev->irq, he_irq_handler, SA_INTERRUPT|SA_SHIRQ, DEV_LABEL, he_dev)) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#444: FILE: drivers/atm/he.c:1007:
+	if (request_irq(he_dev->pci_dev->irq, he_irq_handler, SA_INTERRUPT|SA_SHIRQ, DEV_LABEL, he_dev)) {
 	                                                                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#541: FILE: drivers/atm/he.c:1134:
+	for (i=0; i<PROD_ID_LEN; ++i)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#541: FILE: drivers/atm/he.c:1134:
+	for (i=0; i<PROD_ID_LEN; ++i)
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#547: FILE: drivers/atm/he.c:1139:
+	for (i=0; i<6; ++i)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#547: FILE: drivers/atm/he.c:1139:
+	for (i=0; i<6; ++i)
 	           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#556: FILE: drivers/atm/he.c:1176:
+	if ((err = he_init_irq(he_dev)) != 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#567: FILE: drivers/atm/he.c:1230:
+	if (nvpibits != -1 && nvcibits != -1 && nvpibits+nvcibits != HE_MAXCIDBITS) {
 	                                                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#631: FILE: drivers/atm/he.c:1324:
+	for (i=0; i < TCM_MEM_SIZE; ++i)
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#635: FILE: drivers/atm/he.c:1327:
+	for (i=0; i < RCM_MEM_SIZE; ++i)
 	      ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!he_dev->tpd_pool"
#666: FILE: drivers/atm/he.c:1489:
+	if (he_dev->tpd_pool == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!he_dev->hsp"
#696: FILE: drivers/atm/he.c:1543:
+	if (he_dev->hsp == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!he_dev->he_vcc_table"
#716: FILE: drivers/atm/he.c:1581:
+	if (he_dev->he_vcc_table == NULL) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#760: FILE: drivers/atm/he.c:1664:
+		for (i=0; i<CONFIG_RBPL_SIZE; ++i) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#760: FILE: drivers/atm/he.c:1664:
+		for (i=0; i<CONFIG_RBPL_SIZE; ++i) {
 		           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#774: FILE: drivers/atm/he.c:1686:
+		for (i=0; i<CONFIG_RBPS_SIZE; ++i) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#774: FILE: drivers/atm/he.c:1686:
+		for (i=0; i<CONFIG_RBPS_SIZE; ++i) {
 		           ^

CHECK:SPACING: No space is necessary after a cast
#792: FILE: drivers/atm/he.c:1740:
+		iounmap((void *) he_dev->membase);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vcc"
#822: FILE: drivers/atm/he.c:1846:
+		if (vcc == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!he_vcc"
#832: FILE: drivers/atm/he.c:1855:
+		if (he_vcc == NULL) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#873: FILE: drivers/atm/he.c:1890:
 		if (RBRQ_LEN_ERR(he_dev->rbrq_head)
+				|| RBRQ_CRC_ERR(he_dev->rbrq_head)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tpd"
#976: FILE: drivers/atm/he.c:2031:
+		if (tpd == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1173: FILE: drivers/atm/he.c:2380:
+	if ((err = atm_find_ci(vcc, &vpi, &vci))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!he_vcc"
#1189: FILE: drivers/atm/he.c:2396:
+	if (he_vcc == NULL) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (40, 56)
#1237: FILE: drivers/atm/he.c:2468:
 					if (he_dev->cs_stper[reg].inuse == 0 || 
[...]
+							break;

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1296: FILE: drivers/atm/he.c:2593:
+		if (he_vcc)
+			kfree(he_vcc);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tpd"
#1374: FILE: drivers/atm/he.c:2709:
+		if (tpd == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tpd"
#1439: FILE: drivers/atm/he.c:2818:
+	if (tpd == NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#1449: FILE: drivers/atm/he.c:2830:
+	else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tpd"
#1483: FILE: drivers/atm/he.c:2860:
+			if (tpd == NULL) {

CHECK:SPACING: No space is necessary after a cast
#1514: FILE: drivers/atm/he.c:2939:
+				copy_to_user((struct he_ioctl_reg *) arg, &reg,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1515: FILE: drivers/atm/he.c:2940:
+				copy_to_user((struct he_ioctl_reg *) arg, &reg,
 							sizeof(struct he_ioctl_reg));

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1560: FILE: drivers/atm/he.c:2236:
+				/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1570: FILE: drivers/atm/he.c:2247:
+				/* fall through */

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1590: FILE: drivers/atm/he.c:2269:
+				switch (type|group) {
 				            ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1654: FILE: drivers/atm/he.c:678:
+	unsigned (*rategrid)[16][16];

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1662: FILE: drivers/atm/he.c:686:
+	rategrid = kmalloc( sizeof(unsigned) * 16 * 16, GFP_KERNEL);

ERROR:SPACING: space prohibited after that open parenthesis '('
#1662: FILE: drivers/atm/he.c:686:
+	rategrid = kmalloc( sizeof(unsigned) * 16 * 16, GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1694: FILE: drivers/atm/he.c:753:
+			if ((*rategrid)[i/16][i%16] >= rate_cps)
 			                 ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#1694: FILE: drivers/atm/he.c:753:
+			if ((*rategrid)[i/16][i%16] >= rate_cps)
 			                       ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000366634.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 33 errors, 36 warnings, 32 checks, 1521 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000366634.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
