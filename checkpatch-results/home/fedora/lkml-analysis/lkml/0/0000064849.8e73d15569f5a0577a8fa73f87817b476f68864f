WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#38: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: include/linux/dyn_pageflags.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#44: FILE: include/linux/dyn_pageflags.h:2:
+ * include/linux/dyn_pageflags.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:NEW_TYPEDEFS: do not add new typedefs
#60: FILE: include/linux/dyn_pageflags.h:18:
+typedef unsigned long *** dyn_pageflags_t;

ERROR:POINTER_LOCATION: "foo *** bar" should be "foo ***bar"
#60: FILE: include/linux/dyn_pageflags.h:18:
+typedef unsigned long *** dyn_pageflags_t;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#66: FILE: include/linux/dyn_pageflags.h:24:
+#else $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone_offset' may be better as '(zone_offset)' to avoid precedence issues
#79: FILE: include/linux/dyn_pageflags.h:37:
+#define PAGENUMBER(zone_offset) (zone_offset >> (PAGE_SHIFT + 3))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone_offset' may be better as '(zone_offset)' to avoid precedence issues
#80: FILE: include/linux/dyn_pageflags.h:38:
+#define PAGEINDEX(zone_offset) ((zone_offset & UL_NUM_MASK) >> UL_SHIFT)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone_offset' may be better as '(zone_offset)' to avoid precedence issues
#81: FILE: include/linux/dyn_pageflags.h:39:
+#define PAGEBIT(zone_offset) (zone_offset & BIT_NUM_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'zone_pfn' - possible side-effects?
#83: FILE: include/linux/dyn_pageflags.h:41:
+#define PAGE_UL_PTR(bitmap, zone_num, zone_pfn) \
+       ((bitmap[zone_num][PAGENUMBER(zone_pfn)])+PAGEINDEX(zone_pfn))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: include/linux/dyn_pageflags.h:42:
+       ((bitmap[zone_num][PAGENUMBER(zone_pfn)])+PAGEINDEX(zone_pfn))$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#84: FILE: include/linux/dyn_pageflags.h:42:
+       ((bitmap[zone_num][PAGENUMBER(zone_pfn)])+PAGEINDEX(zone_pfn))
                                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#87: FILE: include/linux/dyn_pageflags.h:45:
+/* With the above macros defined, you can do...
+

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bitmap' - possible side-effects?
#93: FILE: include/linux/dyn_pageflags.h:51:
+#define BITMAP_FOR_EACH_SET(bitmap, counter) \
+	for (counter = get_next_bit_on(bitmap, -1); counter > -1; \
+		counter = get_next_bit_on(bitmap, counter))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'counter' - possible side-effects?
#93: FILE: include/linux/dyn_pageflags.h:51:
+#define BITMAP_FOR_EACH_SET(bitmap, counter) \
+	for (counter = get_next_bit_on(bitmap, -1); counter > -1; \
+		counter = get_next_bit_on(bitmap, counter))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#97: FILE: include/linux/dyn_pageflags.h:55:
+extern void clear_dyn_pageflags(dyn_pageflags_t pagemap);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#98: FILE: include/linux/dyn_pageflags.h:56:
+extern int allocate_dyn_pageflags(dyn_pageflags_t *pagemap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#99: FILE: include/linux/dyn_pageflags.h:57:
+extern void free_dyn_pageflags(dyn_pageflags_t *pagemap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#100: FILE: include/linux/dyn_pageflags.h:58:
+extern int dyn_pageflags_pages_per_bitmap(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#101: FILE: include/linux/dyn_pageflags.h:59:
+extern int get_next_bit_on(dyn_pageflags_t bitmap, int counter);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#102: FILE: include/linux/dyn_pageflags.h:60:
+extern unsigned long *dyn_pageflags_ul_ptr(dyn_pageflags_t *bitmap,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#103: FILE: include/linux/dyn_pageflags.h:61:
+extern unsigned long *dyn_pageflags_ul_ptr(dyn_pageflags_t *bitmap,
+		struct page *pg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#105: FILE: include/linux/dyn_pageflags.h:63:
+extern int test_dynpageflag(dyn_pageflags_t *bitmap, struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#106: FILE: include/linux/dyn_pageflags.h:64:
+extern void set_dynpageflag(dyn_pageflags_t *bitmap, struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#107: FILE: include/linux/dyn_pageflags.h:65:
+extern void clear_dynpageflag(dyn_pageflags_t *bitmap, struct page *page);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#142: FILE: lib/dyn_pageflags.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#143: FILE: lib/dyn_pageflags.c:2:
+ * lib/dyn_pageflags.c

ERROR:TRAILING_WHITESPACE: trailing whitespace
#146: FILE: lib/dyn_pageflags.c:5:
+ * $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pg' - possible side-effects?
#165: FILE: lib/dyn_pageflags.c:24:
+#define page_to_zone_offset(pg) (page_to_pfn(pg) - page_zone(pg)->zone_start_pfn)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#167: FILE: lib/dyn_pageflags.c:26:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#169: FILE: lib/dyn_pageflags.c:28:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#185: FILE: lib/dyn_pageflags.c:44:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#187: FILE: lib/dyn_pageflags.c:46:
+ * $

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#213: FILE: lib/dyn_pageflags.c:72:
+			return zone_num;
+		else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#216: FILE: lib/dyn_pageflags.c:75:
+	printk("Was looking for a zone for page %p.\n", page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#217: FILE: lib/dyn_pageflags.c:76:
+	BUG_ON(1);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#239: FILE: lib/dyn_pageflags.c:98:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#250: FILE: lib/dyn_pageflags.c:109:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#251: FILE: lib/dyn_pageflags.c:110:
+	BUG_ON(!pagemap);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#260: FILE: lib/dyn_pageflags.c:119:
+/* $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#271: FILE: lib/dyn_pageflags.c:130:
+	BUG_ON(*pagemap);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#284: FILE: lib/dyn_pageflags.c:143:
+			kfree (*pagemap);

CHECK:SPACING: No space is necessary after a cast
#290: FILE: lib/dyn_pageflags.c:149:
+			(*pagemap)[zone_num][i] = (unsigned long *) address;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#292: FILE: lib/dyn_pageflags.c:151:
+				printk("Error. Unable to allocate memory for "

WARNING:SPLIT_STRING: quoted string split across lines
#293: FILE: lib/dyn_pageflags.c:152:
+				printk("Error. Unable to allocate memory for "
+					"dynamic pageflags.");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#304: FILE: lib/dyn_pageflags.c:163:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#320: FILE: lib/dyn_pageflags.c:179:
+^I$

CHECK:SPACING: No space is necessary after a cast
#328: FILE: lib/dyn_pageflags.c:187:
+				free_page((unsigned long) (*pagemap)[zone_num][i]);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#329: FILE: lib/dyn_pageflags.c:188:
+^I$

CHECK:SPACING: No space is necessary after a cast
#333: FILE: lib/dyn_pageflags.c:192:
+			free_page((unsigned long) (*pagemap)[zone_num]);

CHECK:SPACING: No space is necessary after a cast
#341: FILE: lib/dyn_pageflags.c:200:
+		free_page((unsigned long) (*pagemap));

WARNING:RETURN_VOID: void function return statements are not generally useful
#345: FILE: lib/dyn_pageflags.c:204:
+	return;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#361: FILE: lib/dyn_pageflags.c:220:
+	int page_offset = PAGEINDEX(zone_pfn);
+	return ((*bitmap)[zone_num][pagenum]) + page_offset;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#376: FILE: lib/dyn_pageflags.c:235:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#392: FILE: lib/dyn_pageflags.c:251:
+	int bit = PAGEBIT(zone_offset);
+	set_bit(bit, ul);

WARNING:LINE_SPACING: Missing a blank line after declarations
#407: FILE: lib/dyn_pageflags.c:266:
+	int bit = PAGEBIT(zone_offset);
+	clear_bit(bit, ul);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#426: FILE: lib/dyn_pageflags.c:285:
+^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#435: FILE: lib/dyn_pageflags.c:294:
+	if (first) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#438: FILE: lib/dyn_pageflags.c:297:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#444: FILE: lib/dyn_pageflags.c:303:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#451: FILE: lib/dyn_pageflags.c:310:
+			} while(!zone->spanned_pages);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#456: FILE: lib/dyn_pageflags.c:315:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#460: FILE: lib/dyn_pageflags.c:319:
+^I^I * the moment $

ERROR:SPACING: space required before the open parenthesis '('
#467: FILE: lib/dyn_pageflags.c:326:
+	} while(!test_bit(pagebit, ul));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000064849.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 20 warnings, 24 checks, 413 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000064849.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
