ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Christoph Lameter <clameter@sgi.com'
#49: 
Signed-off-by: Christoph Lameter <clameter@sgi.com

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#59: FILE: mm/memory.c:39:
+ * Jan 2005 ^IScalability improvement by reducing the use and the length of time$

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: mm/memory.c:1842:
+        pmd_t *pmd, pte_t orig_entry)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: mm/memory.c:1842:
+        pmd_t *pmd, pte_t orig_entry)$

CHECK:BRACES: braces {} should be used on all arms of this statement
#374: FILE: mm/memory.c:2088:
+		if (!pmd_test_and_populate(mm, pmd, new))
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#376: FILE: mm/memory.c:2090:
+		else {

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#397: FILE: include/asm-generic/pgtable.h:33:
+#define get_pte_atomic(__x)	*(__x)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__vma' - possible side-effects?
#416: FILE: include/asm-generic/pgtable.h:151:
+#define ptep_cmpxchg(__vma, __addr, __ptep, __oldval, __newval)		\
+({									\
+	int __rc;							\
+	spin_lock(&__vma->vm_mm->page_table_lock);			\
+	__rc = pte_same(*(__ptep), __oldval);				\
+	if (__rc) { set_pte(__ptep, __newval);				\
+		update_mmu_cache(__vma, __addr, __newval); }		\
+	spin_unlock(&__vma->vm_mm->page_table_lock);			\
+	__rc;								\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '__vma' may be better as '(__vma)' to avoid precedence issues
#416: FILE: include/asm-generic/pgtable.h:151:
+#define ptep_cmpxchg(__vma, __addr, __ptep, __oldval, __newval)		\
+({									\
+	int __rc;							\
+	spin_lock(&__vma->vm_mm->page_table_lock);			\
+	__rc = pte_same(*(__ptep), __oldval);				\
+	if (__rc) { set_pte(__ptep, __newval);				\
+		update_mmu_cache(__vma, __addr, __newval); }		\
+	spin_unlock(&__vma->vm_mm->page_table_lock);			\
+	__rc;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__ptep' - possible side-effects?
#416: FILE: include/asm-generic/pgtable.h:151:
+#define ptep_cmpxchg(__vma, __addr, __ptep, __oldval, __newval)		\
+({									\
+	int __rc;							\
+	spin_lock(&__vma->vm_mm->page_table_lock);			\
+	__rc = pte_same(*(__ptep), __oldval);				\
+	if (__rc) { set_pte(__ptep, __newval);				\
+		update_mmu_cache(__vma, __addr, __newval); }		\
+	spin_unlock(&__vma->vm_mm->page_table_lock);			\
+	__rc;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__newval' - possible side-effects?
#416: FILE: include/asm-generic/pgtable.h:151:
+#define ptep_cmpxchg(__vma, __addr, __ptep, __oldval, __newval)		\
+({									\
+	int __rc;							\
+	spin_lock(&__vma->vm_mm->page_table_lock);			\
+	__rc = pte_same(*(__ptep), __oldval);				\
+	if (__rc) { set_pte(__ptep, __newval);				\
+		update_mmu_cache(__vma, __addr, __newval); }		\
+	spin_unlock(&__vma->vm_mm->page_table_lock);			\
+	__rc;								\
+})

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#421: FILE: include/asm-generic/pgtable.h:156:
+	if (__rc) { set_pte(__ptep, __newval);				\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__mm' - possible side-effects?
#429: FILE: include/asm-generic/pgtable.h:164:
+#define pgd_test_and_populate(__mm, __pgd, __pud)			\
+({									\
+	int __rc;							\
+	spin_lock(&__mm->page_table_lock);				\
+	__rc = !pgd_present(*(__pgd));					\
+	if (__rc) pgd_populate(__mm, __pgd, __pud);			\
+	spin_unlock(&__mm->page_table_lock);				\
+	__rc;								\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '__mm' may be better as '(__mm)' to avoid precedence issues
#429: FILE: include/asm-generic/pgtable.h:164:
+#define pgd_test_and_populate(__mm, __pgd, __pud)			\
+({									\
+	int __rc;							\
+	spin_lock(&__mm->page_table_lock);				\
+	__rc = !pgd_present(*(__pgd));					\
+	if (__rc) pgd_populate(__mm, __pgd, __pud);			\
+	spin_unlock(&__mm->page_table_lock);				\
+	__rc;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__pgd' - possible side-effects?
#429: FILE: include/asm-generic/pgtable.h:164:
+#define pgd_test_and_populate(__mm, __pgd, __pud)			\
+({									\
+	int __rc;							\
+	spin_lock(&__mm->page_table_lock);				\
+	__rc = !pgd_present(*(__pgd));					\
+	if (__rc) pgd_populate(__mm, __pgd, __pud);			\
+	spin_unlock(&__mm->page_table_lock);				\
+	__rc;								\
+})

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#434: FILE: include/asm-generic/pgtable.h:169:
+	if (__rc) pgd_populate(__mm, __pgd, __pud);			\

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__mm' - possible side-effects?
#441: FILE: include/asm-generic/pgtable.h:176:
+#define pud_test_and_populate(__mm, __pud, __pmd)			\
+({									\
+	int __rc;							\
+	spin_lock(&__mm->page_table_lock);				\
+	__rc = !pud_present(*(__pud));					\
+	if (__rc) pud_populate(__mm, __pud, __pmd);			\
+	spin_unlock(&__mm->page_table_lock);				\
+	__rc;								\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '__mm' may be better as '(__mm)' to avoid precedence issues
#441: FILE: include/asm-generic/pgtable.h:176:
+#define pud_test_and_populate(__mm, __pud, __pmd)			\
+({									\
+	int __rc;							\
+	spin_lock(&__mm->page_table_lock);				\
+	__rc = !pud_present(*(__pud));					\
+	if (__rc) pud_populate(__mm, __pud, __pmd);			\
+	spin_unlock(&__mm->page_table_lock);				\
+	__rc;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__pud' - possible side-effects?
#441: FILE: include/asm-generic/pgtable.h:176:
+#define pud_test_and_populate(__mm, __pud, __pmd)			\
+({									\
+	int __rc;							\
+	spin_lock(&__mm->page_table_lock);				\
+	__rc = !pud_present(*(__pud));					\
+	if (__rc) pud_populate(__mm, __pud, __pmd);			\
+	spin_unlock(&__mm->page_table_lock);				\
+	__rc;								\
+})

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#446: FILE: include/asm-generic/pgtable.h:181:
+	if (__rc) pud_populate(__mm, __pud, __pmd);			\

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__mm' - possible side-effects?
#453: FILE: include/asm-generic/pgtable.h:188:
+#define pmd_test_and_populate(__mm, __pmd, __page)			\
+({									\
+	int __rc;							\
+	spin_lock(&__mm->page_table_lock);				\
+	__rc = !pmd_present(*(__pmd));					\
+	if (__rc) pmd_populate(__mm, __pmd, __page);			\
+	spin_unlock(&__mm->page_table_lock);				\
+	__rc;								\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '__mm' may be better as '(__mm)' to avoid precedence issues
#453: FILE: include/asm-generic/pgtable.h:188:
+#define pmd_test_and_populate(__mm, __pmd, __page)			\
+({									\
+	int __rc;							\
+	spin_lock(&__mm->page_table_lock);				\
+	__rc = !pmd_present(*(__pmd));					\
+	if (__rc) pmd_populate(__mm, __pmd, __page);			\
+	spin_unlock(&__mm->page_table_lock);				\
+	__rc;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__pmd' - possible side-effects?
#453: FILE: include/asm-generic/pgtable.h:188:
+#define pmd_test_and_populate(__mm, __pmd, __page)			\
+({									\
+	int __rc;							\
+	spin_lock(&__mm->page_table_lock);				\
+	__rc = !pmd_present(*(__pmd));					\
+	if (__rc) pmd_populate(__mm, __pmd, __page);			\
+	spin_unlock(&__mm->page_table_lock);				\
+	__rc;								\
+})

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#458: FILE: include/asm-generic/pgtable.h:193:
+	if (__rc) pmd_populate(__mm, __pmd, __page);			\

CHECK:BRACES: Unbalanced braces around else statement
#514: FILE: mm/rmap.c:598:
+	} else

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#576: FILE: include/asm-generic/pgtable-nopmd.h:32:
+static inline int pud_test_and_populate(struct mm_struct *mm, pud_t *pud, pmd_t *pmd)	{ return 1; }

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000216669.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 3 warnings, 16 checks, 497 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000216669.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
