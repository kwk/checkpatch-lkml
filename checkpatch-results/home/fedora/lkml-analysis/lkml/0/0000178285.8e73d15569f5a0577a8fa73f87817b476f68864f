CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#110: FILE: fs/proc/base.c:148:
+	E(PROC_TGID_FDINFO,    "fdinfo",  S_IFDIR|S_IRUSR|S_IXUSR),
 	                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#110: FILE: fs/proc/base.c:148:
+	E(PROC_TGID_FDINFO,    "fdinfo",  S_IFDIR|S_IRUSR|S_IXUSR),
 	                                                 ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IXUSR' are not preferred. Consider using octal permissions '0500'.
#110: FILE: fs/proc/base.c:148:
+	E(PROC_TGID_FDINFO,    "fdinfo",  S_IFDIR|S_IRUSR|S_IXUSR),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#118: FILE: fs/proc/base.c:185:
+	E(PROC_TID_FDINFO,     "fdinfo",  S_IFDIR|S_IRUSR|S_IXUSR),
 	                                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#118: FILE: fs/proc/base.c:185:
+	E(PROC_TID_FDINFO,     "fdinfo",  S_IFDIR|S_IRUSR|S_IXUSR),
 	                                                 ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IXUSR' are not preferred. Consider using octal permissions '0500'.
#118: FILE: fs/proc/base.c:185:
+	E(PROC_TID_FDINFO,     "fdinfo",  S_IFDIR|S_IRUSR|S_IXUSR),

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#127: FILE: fs/proc/base.c:239:
+	E(PROC_FDINFO_POS,     "pos",     S_IFREG|S_IRUGO),
 	                                         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#127: FILE: fs/proc/base.c:239:
+	E(PROC_FDINFO_POS,     "pos",     S_IFREG|S_IRUGO),

ERROR:SPACING: space required after that ',' (ctx:VxV)
#128: FILE: fs/proc/base.c:240:
+	{0,0,NULL,0}
 	  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#128: FILE: fs/proc/base.c:240:
+	{0,0,NULL,0}
 	    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#128: FILE: fs/proc/base.c:240:
+	{0,0,NULL,0}
 	         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#187: FILE: fs/proc/base.c:298:
+	int fd = proc_type(inode) - PROC_TID_FD_DIR;
+	return proc_fd_info(inode, fd, dentry, mnt, NULL);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#214: FILE: fs/proc/base.c:1036:
+static int proc_readfd_common(struct file * filp, void * dirent,
                                             ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#214: FILE: fs/proc/base.c:1036:
+static int proc_readfd_common(struct file * filp, void * dirent,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#214: FILE: fs/proc/base.c:1036:
+static int proc_readfd_common(struct file * filp, void * dirent,

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#226: FILE: fs/proc/base.c:1086:
+				if (filldir(dirent, buf+j, NUMBUF-j, fd+2, ino, isfdinfo ? DT_DIR : DT_LNK) < 0) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#226: FILE: fs/proc/base.c:1086:
+				if (filldir(dirent, buf+j, NUMBUF-j, fd+2, ino, isfdinfo ? DT_DIR : DT_LNK) < 0) {
 				                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#226: FILE: fs/proc/base.c:1086:
+				if (filldir(dirent, buf+j, NUMBUF-j, fd+2, ino, isfdinfo ? DT_DIR : DT_LNK) < 0) {
 				                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#226: FILE: fs/proc/base.c:1086:
+				if (filldir(dirent, buf+j, NUMBUF-j, fd+2, ino, isfdinfo ? DT_DIR : DT_LNK) < 0) {
 				                                       ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#234: FILE: fs/proc/base.c:1099:
+static int proc_readfd(struct file * filp, void * dirent, filldir_t filldir)
                                      ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#234: FILE: fs/proc/base.c:1099:
+static int proc_readfd(struct file * filp, void * dirent, filldir_t filldir)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#234: FILE: fs/proc/base.c:1099:
+static int proc_readfd(struct file * filp, void * dirent, filldir_t filldir)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#236: FILE: fs/proc/base.c:1101:
+	return proc_readfd_common(filp, dirent, filldir, 0);
 	                          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#239: FILE: fs/proc/base.c:1104:
+static int proc_readfdinfo(struct file * filp, void * dirent, filldir_t filldir)
                                          ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#239: FILE: fs/proc/base.c:1104:
+static int proc_readfdinfo(struct file * filp, void * dirent, filldir_t filldir)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#239: FILE: fs/proc/base.c:1104:
+static int proc_readfdinfo(struct file * filp, void * dirent, filldir_t filldir)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#241: FILE: fs/proc/base.c:1106:
+	return proc_readfd_common(filp, dirent, filldir, 1);
 	                          ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#248: FILE: fs/proc/base.c:1113:
+	struct files_struct *files = get_files_struct(task);
+	if (files) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#250: FILE: fs/proc/base.c:1115:
+		int fd;
+		spin_lock(&files->file_lock);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#283: FILE: fs/proc/base.c:1184:
+	return proc_pident_readdir(filp, dirent, filldir, tgid_base_stuff,
 	                           ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#292: FILE: fs/proc/base.c:1191:
+	return proc_pident_readdir(filp, dirent, filldir, tid_base_stuff,
 	                           ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ei->op.proc_get_link"
#303: FILE: fs/proc/base.c:1288:
+	int fd = get_ino_fd(proc_type(inode), ei->op.proc_get_link == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#311: FILE: fs/proc/base.c:1376:
+static ssize_t proc_fdinfo_pos_read(struct file * file, char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#311: FILE: fs/proc/base.c:1376:
+static ssize_t proc_fdinfo_pos_read(struct file * file, char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#314: FILE: fs/proc/base.c:1379:
+	struct inode * inode = file->f_dentry->d_inode;

WARNING:LINE_SPACING: Missing a blank line after declarations
#318: FILE: fs/proc/base.c:1383:
+	int res = proc_fd_info(inode, fd, NULL, NULL, &pos);
+	if (!res) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#321: FILE: fs/proc/base.c:1386:
+		unsigned int len = sprintf(tmpbuf, "%lli\n", pos);
+		res = simple_read_from_buffer(buf, count, ppos, tmpbuf, len);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#326: FILE: fs/proc/base.c:1391:
+static struct file_operations proc_fdinfo_pos_file_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#332: FILE: fs/proc/base.c:1397:
+					      struct nameidata *nd)
 					                        ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#354: FILE: fs/proc/base.c:1419:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#360: FILE: fs/proc/base.c:1425:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#370: FILE: fs/proc/base.c:1435:
+static struct inode_operations proc_fdinfo_base_inode_operations = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#374: FILE: fs/proc/base.c:1439:
+static int proc_fdinfo_base_readdir(struct file * filp,
                                                   ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#374: FILE: fs/proc/base.c:1439:
+static int proc_fdinfo_base_readdir(struct file * filp,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#375: FILE: fs/proc/base.c:1440:
+				    void * dirent, filldir_t filldir)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#378: FILE: fs/proc/base.c:1443:
+	return proc_pident_readdir(filp, dirent, filldir, fdinfo_base_stuff,
 	                           ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#378: FILE: fs/proc/base.c:1443:
+	int base_ino = filp->f_dentry->d_inode->i_ino;
+	return proc_pident_readdir(filp, dirent, filldir, fdinfo_base_stuff,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#382: FILE: fs/proc/base.c:1447:
+static struct file_operations proc_fdinfo_base_operations = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#389: FILE: fs/proc/base.c:1453:
+static struct dentry *proc_lookupfd_common(struct inode * dir, struct dentry * dentry, int isfdinfo)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#389: FILE: fs/proc/base.c:1453:
+static struct dentry *proc_lookupfd_common(struct inode * dir, struct dentry * dentry, int isfdinfo)

CHECK:BRACES: braces {} should be used on all arms of this statement
#414: FILE: fs/proc/base.c:1478:
+	if (isfdinfo)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0555'.
#415: FILE: fs/proc/base.c:1479:
+		inode->i_mode = S_IFDIR | S_IRUGO | S_IXUGO;

CHECK:BRACES: Unbalanced braces around else statement
#416: FILE: fs/proc/base.c:1480:
+	else {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IXUSR' are not preferred. Consider using octal permissions '0500'.
#419: FILE: fs/proc/base.c:1483:
+			inode->i_mode |= S_IRUSR | S_IXUSR;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IXUSR' are not preferred. Consider using octal permissions '0300'.
#421: FILE: fs/proc/base.c:1485:
+			inode->i_mode |= S_IWUSR | S_IXUSR;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#445: FILE: fs/proc/base.c:1512:
+static struct dentry *proc_lookupfd(struct inode * dir, struct dentry * dentry,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#445: FILE: fs/proc/base.c:1512:
+static struct dentry *proc_lookupfd(struct inode * dir, struct dentry * dentry,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#446: FILE: fs/proc/base.c:1513:
+				    struct nameidata *nd)
 				                      ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#451: FILE: fs/proc/base.c:1518:
+static struct dentry *proc_lookupfdinfo(struct inode * dir,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#452: FILE: fs/proc/base.c:1519:
+					struct dentry * dentry,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#453: FILE: fs/proc/base.c:1520:
+					struct nameidata *nd)
 					                  ^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#465: FILE: fs/proc/base.c:1533:
+static struct file_operations proc_fdinfo_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#477: FILE: fs/proc/base.c:1551:
+static struct inode_operations proc_fdinfo_inode_operations = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#534: FILE: fs/proc/base.c:1838:
+	return proc_pident_readdir(filp, dirent, filldir, tgid_attr_stuff,
 	                           ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#543: FILE: fs/proc/base.c:1845:
+	return proc_pident_readdir(filp, dirent, filldir, tid_attr_stuff,
 	                           ^^^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000178285.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 33 warnings, 11 checks, 453 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000178285.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
