WARNING:TYPO_SPELLING: 'primatives' may be misspelled - perhaps 'primitives'?
#30: 
bio_vecs into a unified set of primatives.  Comments?
                               ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
diff -urN v2.5.1-pre9/include/linux/kiovec.h work-v2.5.1-pre9.diff/include/linux/kiovec.h

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#41: FILE: include/linux/kiovec.h:1:
+#ifndef __LINUX__KIOVEC_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#49: FILE: include/linux/kiovec.h:9:
+	unsigned	offset;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#50: FILE: include/linux/kiovec.h:10:
+	unsigned	length;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#54: FILE: include/linux/kiovec.h:14:
+	unsigned	max_nr;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#55: FILE: include/linux/kiovec.h:15:
+	unsigned	nr;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#80: FILE: include/linux/kiovec.h:40:
+extern struct kvec *map_user_kvec(int rw, unsigned long va, size_t len);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#81: FILE: include/linux/kiovec.h:41:
+extern void unmap_kvec(struct kvec *, int dirtied);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kvec *' should also have an identifier name
#81: FILE: include/linux/kiovec.h:41:
+extern void unmap_kvec(struct kvec *, int dirtied);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#82: FILE: include/linux/kiovec.h:42:
+extern void free_kvec(struct kvec *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kvec *' should also have an identifier name
#82: FILE: include/linux/kiovec.h:42:
+extern void free_kvec(struct kvec *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#91: FILE: include/linux/kiovec.h:51:
+extern int brw_kvec_async(int rw, kvec_cb_t cb, kdev_t dev, unsigned count,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#91: FILE: include/linux/kiovec.h:51:
+extern int brw_kvec_async(int rw, kvec_cb_t cb, kdev_t dev, unsigned count,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#118: FILE: include/linux/kiovec.h:78:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Xdst>
#119: FILE: include/linux/kiovec.h:79:
+#define kvec_dst_map(Xdst, Xlet)					\

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Xlet>
#119: FILE: include/linux/kiovec.h:79:
+#define kvec_dst_map(Xdst, Xlet)					\

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#123: FILE: include/linux/kiovec.h:83:
+		_dst->dst = _dst->addr = kmap_atomic(_let->page, _dst->type);\

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space required before the open parenthesis '('
#127: FILE: include/linux/kiovec.h:87:
+	} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Xtype>
#129: FILE: include/linux/kiovec.h:89:
+#define kvec_dst_init(Xdst, Xtype)					\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'Xdst' - possible side-effects?
#129: FILE: include/linux/kiovec.h:89:
+#define kvec_dst_init(Xdst, Xtype)					\
+	do {								\
+		(Xdst)->offset = 0;					\
+		(Xdst)->type = Xtype;					\
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#133: FILE: include/linux/kiovec.h:93:
+	} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'Xdst' - possible side-effects?
#135: FILE: include/linux/kiovec.h:95:
+#define	kvec_dst_unmap(Xdst)						\
+	do {								\
+		kunmap_atomic((Xdst)->addr, (Xdst)->type);		\
+		(Xdst)->offset = (Xdst)->dst - (Xdst)->addr;		\
+		(Xdst)->offset -= (Xdst)->let->offset;			\
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#140: FILE: include/linux/kiovec.h:100:
+	} while(0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#142: FILE: include/linux/kiovec.h:102:
+extern void FASTCALL(memcpy_to_kvec_dst(struct kvec_dst *dst,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#144: FILE: include/linux/kiovec.h:104:
+extern void FASTCALL(memcpy_from_kvec_dst(char *to,

WARNING:NEW_TYPEDEFS: do not add new typedefs
#157: FILE: include/linux/types.h:143:
+typedef struct kvec_cb kvec_cb_t;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#181: FILE: mm/memory.c:1441:
+ * and pin them in physical memory.  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#182: FILE: mm/memory.c:1442:
+ * FIXME: some architectures need to flush the cache based on user addresses $

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#193: FILE: mm/memory.c:1453:
+	struct mm_struct *	mm;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#194: FILE: mm/memory.c:1454:
+	struct vm_area_struct *	vma = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#197: FILE: mm/memory.c:1457:
+	unsigned		nr_pages;

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#205: FILE: mm/memory.c:1465:
+	nr_pages ++;
 	         ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*vec)...) over kmalloc(sizeof(struct kvec)...)
#206: FILE: mm/memory.c:1466:
+	vec = kmalloc(sizeof(struct kvec) + nr_pages * sizeof(struct kveclet),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: mm/memory.c:1467:
+	vec = kmalloc(sizeof(struct kvec) + nr_pages * sizeof(struct kveclet),
+			GFP_KERNEL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#213: FILE: mm/memory.c:1473:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#216: FILE: mm/memory.c:1476:
+	dprintk ("map_user_kiobuf: begin\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: mm/memory.c:1477:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#221: FILE: mm/memory.c:1481:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#224: FILE: mm/memory.c:1484:
+^I/* $

WARNING:LINE_SPACING: Missing a blank line after declarations
#229: FILE: mm/memory.c:1489:
+		struct page *map;
+		veclet->offset = ptr & ~PAGE_MASK;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#238: FILE: mm/memory.c:1498:
+^I^I^Iif (!vma) $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#247: FILE: mm/memory.c:1507:
+			if (((datain) && (!(vma->vm_flags & VM_WRITE))) ||
+					(!(vma->vm_flags & VM_READ))) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#259: FILE: mm/memory.c:1519:
+				if (!ret)
[...]
+				else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#261: FILE: mm/memory.c:1521:
+				else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#267: FILE: mm/memory.c:1527:
+^I^I}^I^I^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#269: FILE: mm/memory.c:1529:
+		if (map) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#272: FILE: mm/memory.c:1532:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#273: FILE: mm/memory.c:1533:
+			printk (KERN_INFO "Mapped page missing [%d]\n", i);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#273: FILE: mm/memory.c:1533:
+			printk (KERN_INFO "Mapped page missing [%d]\n", i);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#286: FILE: mm/memory.c:1546:
+	dprintk ("map_user_kiobuf: end OK\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#292: FILE: mm/memory.c:1552:
+	printk(KERN_DEBUG "map_user_kvec: err(%d)\n", err);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'map_user_kvec', this function's name, in a string
#292: FILE: mm/memory.c:1552:
+	printk(KERN_DEBUG "map_user_kvec: err(%d)\n", err);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#299: FILE: mm/memory.c:1559:
+ * and unlock them if they were locked. $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#302: FILE: mm/memory.c:1562:
+void unmap_kvec (struct kvec *vec, int dirtied)

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#309: FILE: mm/memory.c:1569:
+	for (; veclet<end; map = (++veclet)->page) {
 	             ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "map"
#311: FILE: mm/memory.c:1571:
+		if (likely(map != NULL) && !PageReserved(map)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#333: FILE: mm/memory.c:1593:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#336: FILE: mm/memory.c:1596:
+		int cnt = len;
+		if (dst->space < cnt)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#348: FILE: mm/memory.c:1608:
+				BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#358: FILE: mm/memory.c:1618:
+		BUG();

WARNING:LINE_SPACING: Missing a blank line after declarations
#361: FILE: mm/memory.c:1621:
+		int cnt = len;
+		if (from->space < cnt)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#373: FILE: mm/memory.c:1633:
+				BUG();

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000492682.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 26 warnings, 21 checks, 328 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000492682.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
