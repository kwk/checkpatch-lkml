WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#27: 
Signed-Off-By: Dirk Gerdes <mail@dirk-gerdes.de>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#34: FILE: block/pagecache.c:1:
+#include <linux/module.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#38: FILE: block/pagecache.c:5:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#41: FILE: block/pagecache.c:8:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#44: FILE: block/pagecache.c:11:
+extern int pagecache;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#46: FILE: block/pagecache.c:13:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#47: FILE: block/pagecache.c:14:
+static struct proc_dir_entry ^I*benchmark_dir, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#47: FILE: block/pagecache.c:14:
+static struct proc_dir_entry ^I*benchmark_dir, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#49: FILE: block/pagecache.c:16:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#50: FILE: block/pagecache.c:17:
+^I^I^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#50: FILE: block/pagecache.c:17:
+		
+				

ERROR:TRAILING_WHITESPACE: trailing whitespace
#51: FILE: block/pagecache.c:18:
+^I^I^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#52: FILE: block/pagecache.c:19:
+				
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#53: FILE: block/pagecache.c:20:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#54: FILE: block/pagecache.c:21:
+^I^I^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#54: FILE: block/pagecache.c:21:
+			
+				

ERROR:SPACING: space required after that ',' (ctx:VxV)
#55: FILE: block/pagecache.c:22:
+static int pagecache_entry_read(char *buf, char **start,off_t offset,int size, int *eof, void *data)
                                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#55: FILE: block/pagecache.c:22:
+static int pagecache_entry_read(char *buf, char **start,off_t offset,int size, int *eof, void *data)
                                                                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#58: FILE: block/pagecache.c:25:
+^Iif (pagecache) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#58: FILE: block/pagecache.c:25:
+	int bytes_written = 0;
+	if (pagecache) 

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#65: FILE: block/pagecache.c:32:
+static int pagecache_entry_write(struct file * instanz, const char __user *userbuffer, unsigned long count, void *data)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#65: FILE: block/pagecache.c:32:
+static int pagecache_entry_write(struct file * instanz, const char __user *userbuffer, unsigned long count, void *data)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#66: FILE: block/pagecache.c:33:
+{^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#69: FILE: block/pagecache.c:36:
+^I^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#74: FILE: block/pagecache.c:41:
+	if (strncmp (kernel_buffer,"on",2)==0){

ERROR:SPACING: space required after that ',' (ctx:VxV)
#74: FILE: block/pagecache.c:41:
+	if (strncmp (kernel_buffer,"on",2)==0){
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#74: FILE: block/pagecache.c:41:
+	if (strncmp (kernel_buffer,"on",2)==0){
 	                               ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#74: FILE: block/pagecache.c:41:
+	if (strncmp (kernel_buffer,"on",2)==0){
 	                                  ^

ERROR:SPACING: space required before the open brace '{'
#74: FILE: block/pagecache.c:41:
+	if (strncmp (kernel_buffer,"on",2)==0){

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#74: FILE: block/pagecache.c:41:
+	if (strncmp (kernel_buffer,"on",2)==0){
[...]
+	else if (strncmp (kernel_buffer,"off",3)==0){
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#75: FILE: block/pagecache.c:42:
+^I ^Ipagecache=1;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#75: FILE: block/pagecache.c:42:
+^I ^Ipagecache=1;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#75: FILE: block/pagecache.c:42:
+	 	pagecache=1;
 	 	         ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#77: FILE: block/pagecache.c:44:
+	else if (strncmp (kernel_buffer,"off",3)==0){

ERROR:SPACING: space required after that ',' (ctx:VxV)
#77: FILE: block/pagecache.c:44:
+	else if (strncmp (kernel_buffer,"off",3)==0){
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#77: FILE: block/pagecache.c:44:
+	else if (strncmp (kernel_buffer,"off",3)==0){
 	                                     ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#77: FILE: block/pagecache.c:44:
+	else if (strncmp (kernel_buffer,"off",3)==0){
 	                                        ^

ERROR:SPACING: space required before the open brace '{'
#77: FILE: block/pagecache.c:44:
+	else if (strncmp (kernel_buffer,"off",3)==0){

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#77: FILE: block/pagecache.c:44:
+	}
+	else if (strncmp (kernel_buffer,"off",3)==0){

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#78: FILE: block/pagecache.c:45:
+		pagecache=0;
 		         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#82: FILE: block/pagecache.c:49:
+	return count-not_copied;
 	            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#87: FILE: block/pagecache.c:54:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#87: FILE: block/pagecache.c:54:
+{
+	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#88: FILE: block/pagecache.c:55:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#88: FILE: block/pagecache.c:55:
+	
+	

ERROR:SPACING: space required after that ',' (ctx:VxV)
#89: FILE: block/pagecache.c:56:
+	benchmark_dir = proc_mkdir("benchmark",NULL);
 	                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#90: FILE: block/pagecache.c:57:
+	pagecache_entry = create_proc_entry("pagecache",S_IRUGO, benchmark_dir);
 	                                               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#90: FILE: block/pagecache.c:57:
+	pagecache_entry = create_proc_entry("pagecache",S_IRUGO, benchmark_dir);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:SPACING: space required before the open brace '{'
#91: FILE: block/pagecache.c:58:
+	if (pagecache_entry){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#94: FILE: block/pagecache.c:61:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#95: FILE: block/pagecache.c:62:
+^I^Ipagecache_entry->data      = NULL;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#97: FILE: block/pagecache.c:64:
+^I$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#100: FILE: block/pagecache.c:67:
+}
+static void __exit my_exit(void){

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#100: FILE: block/pagecache.c:67:
+static void __exit my_exit(void){

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#101: FILE: block/pagecache.c:68:
+^Iif (pagecache_entry) ^Iremove_proc_entry("pagecache",benchmark_dir);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#101: FILE: block/pagecache.c:68:
+	if (pagecache_entry) 	remove_proc_entry("pagecache",benchmark_dir);
 	                     	                             ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#101: FILE: block/pagecache.c:68:
+	if (pagecache_entry) 	remove_proc_entry("pagecache",benchmark_dir);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#102: FILE: block/pagecache.c:69:
+	if (benchmark_dir)	remove_proc_entry("benchmark",NULL);
 	                  	                             ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#102: FILE: block/pagecache.c:69:
+	if (benchmark_dir)	remove_proc_entry("benchmark",NULL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#105: FILE: block/pagecache.c:72:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000129645.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 37 errors, 13 warnings, 10 checks, 75 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000129645.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
