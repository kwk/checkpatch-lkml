WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
> > Sorry, folks, but idea of private extendable syscall table (per-filesystem,

WARNING:TYPO_SPELLING: 'thats' may be misspelled - perhaps 'that's'?
#55: 
sure if thats better/worse.  The patch ignores the problem of using
        ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#99: FILE: fs/extattr.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#100: FILE: fs/extattr.c:2:
+  File: fs/extattr.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#100: FILE: fs/extattr.c:2:
+/*
+  File: fs/extattr.c

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#103: FILE: fs/extattr.c:5:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#114: FILE: fs/extattr.c:16:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#127: FILE: fs/extattr.c:29:
+		if (flags & EA_CREATE) {
[...]
+		else if (flags & EA_REPLACE) {
[...]
+		else if (flags & EA_REMOVE) {
[...]
+		else if (ops->set)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#131: FILE: fs/extattr.c:33:
+		}
+		else if (flags & EA_REPLACE) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#135: FILE: fs/extattr.c:37:
+		}
+		else if (flags & EA_REMOVE) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#139: FILE: fs/extattr.c:41:
+		}
+		else if (ops->set)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#149: FILE: fs/extattr.c:51:
+	struct nameidata nd;
 	                 ^^

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#152: FILE: fs/extattr.c:54:
+	error = (flags & EA_NOFOLLOW)?
 	                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#153: FILE: fs/extattr.c:55:
+		user_path_walk_link(path, &nd):
 		                           ^^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#153: FILE: fs/extattr.c:55:
+		user_path_walk_link(path, &nd):
 		                              ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#154: FILE: fs/extattr.c:56:
+		user_path_walk(path, &nd);
 		                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#157: FILE: fs/extattr.c:59:
+	error = setxattr(nd.dentry->d_inode, name, value, size, flags);
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#158: FILE: fs/extattr.c:60:
+	path_release(&nd);
 	              ^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#176: FILE: fs/extattr.c:78:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#189: FILE: fs/extattr.c:91:
+		if (flags & EA_SIZEONLY) {
[...]
+		else if (ops->get)
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#193: FILE: fs/extattr.c:95:
+		}
+		else if (ops->get)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#203: FILE: fs/extattr.c:105:
+	struct nameidata nd;
 	                 ^^

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#206: FILE: fs/extattr.c:108:
+	error = (flags & EA_NOFOLLOW)?
 	                             ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#207: FILE: fs/extattr.c:109:
+		user_path_walk_link(path, &nd):
 		                           ^^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#207: FILE: fs/extattr.c:109:
+		user_path_walk_link(path, &nd):
 		                              ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#208: FILE: fs/extattr.c:110:
+		user_path_walk(path, &nd);
 		                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#211: FILE: fs/extattr.c:113:
+	error = getxattr(nd.dentry->d_inode, name, value, size, flags);
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#212: FILE: fs/extattr.c:114:
+	path_release(&nd);
 	              ^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#230: FILE: fs/extattr.c:132:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#243: FILE: fs/extattr.c:145:
+		if (flags & EA_SIZEONLY) {
[...]
+		else if (ops->list)
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#247: FILE: fs/extattr.c:149:
+		}
+		else if (ops->list)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#257: FILE: fs/extattr.c:159:
+	struct nameidata nd;
 	                 ^^

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#260: FILE: fs/extattr.c:162:
+	error = (flags & EA_NOFOLLOW)?
 	                             ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#261: FILE: fs/extattr.c:163:
+		user_path_walk_link(path, &nd):
 		                           ^^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#261: FILE: fs/extattr.c:163:
+		user_path_walk_link(path, &nd):
 		                              ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#262: FILE: fs/extattr.c:164:
+		user_path_walk(path, &nd);
 		                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#265: FILE: fs/extattr.c:167:
+	error = listxattr(nd.dentry->d_inode, name, value, size, flags);
 	                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#266: FILE: fs/extattr.c:168:
+	path_release(&nd);
 	              ^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#319: FILE: include/linux/extattr.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#320: FILE: include/linux/extattr.h:2:
+/*
+  File: linux/extattr.h

WARNING:SPACING: Unnecessary space before function pointer arguments
#355: FILE: include/linux/fs.h:847:
+	int (*create) (struct inode *, char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#355: FILE: include/linux/fs.h:847:
+	int (*create) (struct inode *, char *, void *, size_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#355: FILE: include/linux/fs.h:847:
+	int (*create) (struct inode *, char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#355: FILE: include/linux/fs.h:847:
+	int (*create) (struct inode *, char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#355: FILE: include/linux/fs.h:847:
+	int (*create) (struct inode *, char *, void *, size_t);

WARNING:SPACING: Unnecessary space before function pointer arguments
#356: FILE: include/linux/fs.h:848:
+	int (*replace) (struct inode *, char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#356: FILE: include/linux/fs.h:848:
+	int (*replace) (struct inode *, char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#356: FILE: include/linux/fs.h:848:
+	int (*replace) (struct inode *, char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#356: FILE: include/linux/fs.h:848:
+	int (*replace) (struct inode *, char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#356: FILE: include/linux/fs.h:848:
+	int (*replace) (struct inode *, char *, void *, size_t);

WARNING:SPACING: Unnecessary space before function pointer arguments
#357: FILE: include/linux/fs.h:849:
+	int (*remove) (struct inode *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#357: FILE: include/linux/fs.h:849:
+	int (*remove) (struct inode *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#357: FILE: include/linux/fs.h:849:
+	int (*remove) (struct inode *, char *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#358: FILE: include/linux/fs.h:850:
+	int (*set) (struct inode *, char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#358: FILE: include/linux/fs.h:850:
+	int (*set) (struct inode *, char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#358: FILE: include/linux/fs.h:850:
+	int (*set) (struct inode *, char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#358: FILE: include/linux/fs.h:850:
+	int (*set) (struct inode *, char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#358: FILE: include/linux/fs.h:850:
+	int (*set) (struct inode *, char *, void *, size_t);

WARNING:SPACING: Unnecessary space before function pointer arguments
#359: FILE: include/linux/fs.h:851:
+	int (*get) (struct inode *, char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#359: FILE: include/linux/fs.h:851:
+	int (*get) (struct inode *, char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#359: FILE: include/linux/fs.h:851:
+	int (*get) (struct inode *, char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#359: FILE: include/linux/fs.h:851:
+	int (*get) (struct inode *, char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#359: FILE: include/linux/fs.h:851:
+	int (*get) (struct inode *, char *, void *, size_t);

WARNING:SPACING: Unnecessary space before function pointer arguments
#360: FILE: include/linux/fs.h:852:
+	int (*getsize) (struct inode *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#360: FILE: include/linux/fs.h:852:
+	int (*getsize) (struct inode *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#360: FILE: include/linux/fs.h:852:
+	int (*getsize) (struct inode *, char *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#361: FILE: include/linux/fs.h:853:
+	int (*list) (struct inode *, char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#361: FILE: include/linux/fs.h:853:
+	int (*list) (struct inode *, char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#361: FILE: include/linux/fs.h:853:
+	int (*list) (struct inode *, char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#361: FILE: include/linux/fs.h:853:
+	int (*list) (struct inode *, char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#361: FILE: include/linux/fs.h:853:
+	int (*list) (struct inode *, char *, void *, size_t);

WARNING:SPACING: Unnecessary space before function pointer arguments
#362: FILE: include/linux/fs.h:854:
+	int (*listsize) (struct inode *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#362: FILE: include/linux/fs.h:854:
+	int (*listsize) (struct inode *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#362: FILE: include/linux/fs.h:854:
+	int (*listsize) (struct inode *, char *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000499683.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 56 warnings, 6 checks, 270 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000499683.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
