WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#44: FILE: fs/spufs/switch.c:55:
+#if 0

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#46: FILE: fs/spufs/switch.c:57:
+    do {^I^I^I^I^I^I\$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 4)
#46: FILE: fs/spufs/switch.c:57:
+    do {						\
+    } while (_c);					\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#47: FILE: fs/spufs/switch.c:58:
+    } while (_c);^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#48: FILE: fs/spufs/switch.c:59:
+  }$

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_c' - possible side-effects?
#51: FILE: fs/spufs/switch.c:62:
+#define POLL_WHILE_TRUE(_c) {				\
+    do {						\
+	int _i;						\
+	for (_i=0; _i<RELAX_SPIN_COUNT && (_c); _i++) { \
+	    cpu_relax();				\
+	}						\
+	if (unlikely(_c)) yield();			\
+	else break;					\
+    } while (_c);					\
+  }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#52: FILE: fs/spufs/switch.c:63:
+    do {^I^I^I^I^I^I\$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#54: FILE: fs/spufs/switch.c:65:
+	for (_i=0; _i<RELAX_SPIN_COUNT && (_c); _i++) { \
+	    cpu_relax();				\

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#54: FILE: fs/spufs/switch.c:65:
+	for (_i=0; _i<RELAX_SPIN_COUNT && (_c); _i++) { \
 	       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#54: FILE: fs/spufs/switch.c:65:
+	for (_i=0; _i<RELAX_SPIN_COUNT && (_c); _i++) { \
 	             ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#57: FILE: fs/spufs/switch.c:68:
+	if (unlikely(_c)) yield();			\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#57: FILE: fs/spufs/switch.c:68:
+	if (unlikely(_c)) yield();			\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#58: FILE: fs/spufs/switch.c:69:
+	else break;					\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#59: FILE: fs/spufs/switch.c:70:
+    } while (_c);^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#60: FILE: fs/spufs/switch.c:71:
+  }$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#63: FILE: fs/spufs/switch.c:74:
+#define POLL_WHILE_FALSE(_c) ^IPOLL_WHILE_TRUE(!(_c))$

WARNING:MEMORY_BARRIER: memory barrier without comment
#159: FILE: fs/spufs/switch.c:170:
+	mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#294: FILE: fs/spufs/switch.c:305:
+	mb();

WARNING:TYPO_SPELLING: 'reigster' may be misspelled - perhaps 'register'?
#571: FILE: fs/spufs/switch.c:582:
+	 *     RA_ENABLE reigster in the CSA.
 	                 ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <resource_allocation_groupID_RW>
#573: FILE: fs/spufs/switch.c:584:
+	csa->priv1.resource_allocation_groupID_RW =

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:BRACES: braces {} are not necessary for single statement blocks
#641: FILE: fs/spufs/switch.c:652:
+	for (i = 0; i < 4; i++) {
+		csa->pu_mailbox_data[i] = in_be64(&priv2->spu_chnldata_RW);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#714: FILE: fs/spufs/switch.c:725:
+	if (cpu_has_feature(CPU_FTR_16M_PAGE)
+	    && REGION_ID(ea) == KERNEL_REGION_ID)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lscsa_slb[0] != code_slb[0]'
#752: FILE: fs/spufs/switch.c:763:
+	if ((lscsa_slb[0] != code_slb[0]) || (lscsa_slb[1] != code_slb[1]))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lscsa_slb[1] != code_slb[1]'
#752: FILE: fs/spufs/switch.c:763:
+	if ((lscsa_slb[0] != code_slb[0]) || (lscsa_slb[1] != code_slb[1]))

WARNING:MEMORY_BARRIER: memory barrier without comment
#765: FILE: fs/spufs/switch.c:776:
+	mb();

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#800: FILE: fs/spufs/switch.c:811:
+	volatile unsigned int status = 0x0;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#815: FILE: fs/spufs/switch.c:826:
+			if (unlikely(status & 0x2)) {
+				cpu_relax();
+			}

CHECK:SPACING: No space is necessary after a cast
#872: FILE: fs/spufs/switch.c:883:
+	addr64.ull = (u64) csa->lscsa;

CHECK:SPACING: No space is necessary after a cast
#890: FILE: fs/spufs/switch.c:901:
+	addr64.ull = (u64) csa->lscsa;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1037: FILE: fs/spufs/switch.c:1048:
+		     SPU_STATUS_ISOLATED_LOAD_STAUTUS)
+		    || (in_be32(&prob->spu_status_R) &

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1082: FILE: fs/spufs/switch.c:1093:
+		     SPU_STATUS_ISOLATED_LOAD_STAUTUS)
+		    || (in_be32(&prob->spu_status_R) &

CHECK:SPACING: spaces preferred around that '|' (ctx:WxV)
#1144: FILE: fs/spufs/switch.c:1155:
+	u32 status_P_H = SPU_STATUS_STOPPED_BY_HALT |SPU_STATUS_STOPPED_BY_STOP;
 	                                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:WxV)
#1145: FILE: fs/spufs/switch.c:1156:
+	u32 status_P_I = SPU_STATUS_STOPPED_BY_STOP |SPU_STATUS_INVALID_INSTR;
 	                                            ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1163: FILE: fs/spufs/switch.c:1174:
+	if (csa->prob.spu_status_R & status_P_I) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1172: FILE: fs/spufs/switch.c:1183:
+	} else if (csa->prob.spu_status_R & status_P_H) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1181: FILE: fs/spufs/switch.c:1192:
+	} else if (csa->prob.spu_status_R & status_S_P) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1189: FILE: fs/spufs/switch.c:1200:
+	} else if (csa->prob.spu_status_R & status_S_I) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1197: FILE: fs/spufs/switch.c:1208:
+	} else if (csa->prob.spu_status_R & status_P) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1205: FILE: fs/spufs/switch.c:1216:
+	} else if (csa->prob.spu_status_R & status_H) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1212: FILE: fs/spufs/switch.c:1223:
+	} else if (csa->prob.spu_status_R & status_S) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1218: FILE: fs/spufs/switch.c:1229:
+	} else if (csa->prob.spu_status_R & status_I) {
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1224: FILE: fs/spufs/switch.c:1235:
+
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1246: FILE: fs/spufs/switch.c:1257:
+	if (!(csa->prob.spu_status_R & mask)) {
+		csa->lscsa->stopped_status.slot[0] = SPU_STOPPED_STATUS_R;
+	}

WARNING:TYPO_SPELLING: 'reigster' may be misspelled - perhaps 'register'?
#1257: FILE: fs/spufs/switch.c:1268:
+	 *     RA_ENABLE reigster from the CSA.
 	                 ^^^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ch0_cnt == 0'
#1545: FILE: fs/spufs/switch.c:1556:
+	if ((ch0_cnt == 0) && !(ch0_data & MFC_LLR_LOST_EVENT) &&
+	    (ch1_data & MFC_LLR_LOST_EVENT)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1558: FILE: fs/spufs/switch.c:1569:
+	if (csa->lscsa->decr_status.slot[0] == 1) {
+		csa->spu_chnldata_RW[0] |= 0x20;
+	}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'csa->lscsa->decr_status.slot[0] == 1'
#1561: FILE: fs/spufs/switch.c:1572:
+	if ((csa->lscsa->decr_status.slot[0] == 1) &&
+	    (csa->spu_chnlcnt_RW[0] == 0 &&
+	     ((csa->spu_chnldata_RW[2] & 0x20) == 0x0) &&
+	     ((csa->spu_chnldata_RW[0] & 0x20) != 0x1))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1667: FILE: fs/spufs/switch.c:1678:
+	for (i = 0; i < 4; i++) {
+		out_be64(&priv2->spu_chnldata_RW, csa->pu_mailbox_data[i]);
+	}

WARNING:MEMORY_BARRIER: memory barrier without comment
#1788: FILE: fs/spufs/switch.c:1799:
+	mb();

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#2027: FILE: fs/spufs/switch.c:2038:
+		return rc;
+		break;

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#2057: FILE: fs/spufs/switch.c:2068:
+		return rc;
+		break;

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2059: FILE: fs/spufs/switch.c:2070:
+		/* Fall through to next step. */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2113: FILE: fs/spufs/switch.c:2132:
+	if (rc != 0) {
+		harvest(prev, spu);
+	}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000150651.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 27 warnings, 22 checks, 2079 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000150651.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
