WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#46: 
blkdev_get_blocks(struct inode *inode, sector_t iblock, sector_t max_blocks,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#117: FILE: fs/direct-io.c:44:
+	unsigned blocks_available;	/* At block_in_file.  changes */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dio->rw == WRITE'
#142: FILE: fs/direct-io.c:101:
+	if (ret < 0 && dio->blocks_available && (dio->rw == WRITE)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#260: FILE: fs/direct-io.c:332:
+	unsigned blkbits;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#276: FILE: fs/direct-io.c:348:
+	BUG_ON(dio->block_in_file >= dio->final_block_in_request);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#285: FILE: fs/direct-io.c:357:
+		BUG_ON(map_bh->b_size == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#286: FILE: fs/direct-io.c:358:
+		BUG_ON((map_bh->b_size & ((1 << blkbits) - 1)) != 0);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#293: FILE: fs/direct-io.c:365:
+			unsigned i;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: fs/direct-io.c:369:
+				unmap_underlying_metadata(map_bh->b_bdev,
+							block++);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#300: FILE: fs/direct-io.c:372:
+		BUG_ON(dio->rw != READ);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#318: FILE: fs/direct-io.c:390:
+			printk("1");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#322: FILE: fs/direct-io.c:394:
+			printk("2");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#326: FILE: fs/direct-io.c:398:
+			printk("3");

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#344: FILE: fs/direct-io.c:416:
+		goto out;;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#347: FILE: fs/direct-io.c:419:
+	ret = dio_bio_alloc(dio, dio->map_bh.b_bdev, sector,
+				DIO_BIO_MAX_SIZE / PAGE_SIZE);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#377: FILE: fs/direct-io.c:464:
+			unsigned this_chunk_bytes;	/* # of bytes mapped */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#378: FILE: fs/direct-io.c:465:
+			unsigned this_chunk_blocks;	/* # of blocks */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#379: FILE: fs/direct-io.c:466:
+			unsigned u;

WARNING:LINE_SPACING: Missing a blank line after declarations
#402: FILE: fs/direct-io.c:475:
+				char *kaddr = kmap_atomic(page, KM_USER0);
+				memset(kaddr + (block_in_page << blkbits),

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#403: FILE: fs/direct-io.c:476:
+				memset(kaddr + (block_in_page << blkbits),
+						0, blocksize);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#463: FILE: fs/direct-io.c:513:
+			BUG_ON(this_chunk_bytes == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#475: FILE: fs/direct-io.c:525:
+				BUG();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#484: FILE: fs/direct-io.c:535:
+	printk("%s: returning error %d\n", __FUNCTION__, ret);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#484: FILE: fs/direct-io.c:535:
+	printk("%s: returning error %d\n", __FUNCTION__, ret);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#540: FILE: fs/direct-io.c:613:
+		printk("%s: blocks_available is %u, rw=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#541: FILE: fs/direct-io.c:614:
+		printk("%s: blocks_available is %u, rw=%d\n",
+				__FUNCTION__, dio.blocks_available, rw);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#541: FILE: fs/direct-io.c:614:
+				__FUNCTION__, dio.blocks_available, rw);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#542: FILE: fs/direct-io.c:615:
+		printk("offset=%Ld(%Ld), count=%u(%u)\n",

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#542: FILE: fs/direct-io.c:615:
+		printk("offset=%Ld(%Ld), count=%u(%u)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#543: FILE: fs/direct-io.c:616:
+		printk("offset=%Ld(%Ld), count=%u(%u)\n",
+			offset, offset >> inode->i_blkbits,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#547: FILE: fs/direct-io.c:620:
+		printk("%s: returning %d, not %d\n", __FUNCTION__, ret, count);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#547: FILE: fs/direct-io.c:620:
+		printk("%s: returning %d, not %d\n", __FUNCTION__, ret, count);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#568: FILE: fs/block_dev.c:34:
+		unsigned sizebits = blksize_bits(size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#579: FILE: fs/block_dev.c:93:
+blkdev_get_block(struct inode *inode, sector_t iblock,
+		struct buffer_head *bh, int create)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#588: FILE: fs/block_dev.c:106:
+blkdev_get_blocks(struct inode *inode, sector_t iblock, sector_t max_blocks,
+		struct buffer_head *bh, int create)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#679: FILE: drivers/char/raw.c:127:
+		  struct file *filp,
 		               ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#685: FILE: drivers/char/raw.c:132:
+^Iint err; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!b"
#699: FILE: drivers/char/raw.c:141:
+	if (b == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#705: FILE: drivers/char/raw.c:147:
+^I^I^Ierr = b->bd_op->ioctl(b->bd_inode, NULL, command, arg); $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#719: FILE: drivers/char/raw.c:159:
+		  struct file *filp,
 		               ^^^^

CHECK:SPACING: No space is necessary after a cast
#738: FILE: drivers/char/raw.c:174:
+		if (copy_from_user(&rq, (void *) arg, sizeof(rq)))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#778: FILE: drivers/char/raw.c:200:
+			if ((rq.block_major == 0 && rq.block_minor != 0) ||
+					rq.block_major > MAX_BLKDEV ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#795: FILE: drivers/char/raw.c:214:
+				bdget(kdev_t_to_nr(mk_kdev(rq.block_major,
+							rq.block_minor)));

CHECK:SPACING: No space is necessary after a cast
#807: FILE: drivers/char/raw.c:229:
+			if (copy_to_user((void *) arg, &rq, sizeof(rq)))

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#827: FILE: drivers/char/raw.c:250:
+	return rw_raw_dev(WRITE, filp, (char *)buf, size, offp);
 	                         ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#862: FILE: fs/ext2/inode.c:611:
+ext2_get_blocks(struct inode *inode, sector_t iblock, sector_t max_blocks,
+			struct buffer_head *bh_result, int create)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#890: FILE: fs/jfs/inode.c:298:
+jfs_get_blocks(struct inode *inode, sector_t iblock, sector_t max_blocks,
+			struct buffer_head *bh_result, int create)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000444150.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 30 warnings, 15 checks, 757 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000444150.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
