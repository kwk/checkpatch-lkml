WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#64: 
diff -urpN -I \$.*\$ --exclude TAGS -X /home/rusty/devel/kernel/kernel-patches/current-dontdiff --minimal linux-2.5.28.31516/drivers/zorro/zorro.c linux-2.5.28.31516.updated/drivers/zorro/zorro.c

ERROR:SPACING: space required after that ',' (ctx:VxV)
#83: FILE: include/linux/bitops.h:5:
+#define DECLARE_BITMAP(name,bits) \
                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#84: FILE: include/linux/bitops.h:6:
+	unsigned long name[((bits)+BITS_PER_LONG-1)/BITS_PER_LONG]
 	                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#84: FILE: include/linux/bitops.h:6:
+	unsigned long name[((bits)+BITS_PER_LONG-1)/BITS_PER_LONG]
 	                                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#84: FILE: include/linux/bitops.h:6:
+	unsigned long name[((bits)+BITS_PER_LONG-1)/BITS_PER_LONG]
 	                                           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#179: FILE: sound/core/seq/seq_queue.h:55:
+ ^IDECLARE_BITMAP(clients_bitmap, SNDRV_SEQ_MAX_CLIENTS);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#179: FILE: sound/core/seq/seq_queue.h:55:
+ ^IDECLARE_BITMAP(clients_bitmap, SNDRV_SEQ_MAX_CLIENTS);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: sound/core/seq/seq_queue.h:55:
+ ^IDECLARE_BITMAP(clients_bitmap, SNDRV_SEQ_MAX_CLIENTS);$

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#236: FILE: include/asm-i386/smp.h:112:
+	return NR_CPUS;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#273: FILE: include/asm-ia64/smp.h:69:
+	return NR_CPUS;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#311: FILE: include/asm-ppc/smp.h:73:
+	return NR_CPUS;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#347: FILE: include/asm-ppc64/smp.h:70:
+	return NR_CPUS;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#374: FILE: include/asm-sparc64/smp.h:83:
+	return NR_CPUS;

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#386: FILE: include/linux/init_task.h:51:
+    cpus_allowed:	CPU_MASK_ALL,					\
                 ^

WARNING:INDENTED_LABEL: labels should not be indented
#386: FILE: include/linux/init_task.h:51:
+    cpus_allowed:	CPU_MASK_ALL,					\

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#413: FILE: include/linux/sched.h:267:
+	DECLARE_BITMAP(cpus_allowed, NR_CPUS);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#422: FILE: include/linux/sched.h:415:
+extern void set_cpus_allowed(task_t *p, const unsigned long new_mask[]);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#428: FILE: include/linux/sched.h:421:
+	{ [0 ... ((NR_CPUS+BITS_PER_LONG-1)/BITS_PER_LONG)-1] = ~0UL }
 	                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#428: FILE: include/linux/sched.h:421:
+	{ [0 ... ((NR_CPUS+BITS_PER_LONG-1)/BITS_PER_LONG)-1] = ~0UL }
 	                                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#428: FILE: include/linux/sched.h:421:
+	{ [0 ... ((NR_CPUS+BITS_PER_LONG-1)/BITS_PER_LONG)-1] = ~0UL }
 	                                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#428: FILE: include/linux/sched.h:421:
+	{ [0 ... ((NR_CPUS+BITS_PER_LONG-1)/BITS_PER_LONG)-1] = ~0UL }
 	                                                  ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#432: FILE: include/linux/sched.h:425:
+	DECLARE_BITMAP(mask, NR_CPUS) = CPU_MASK_NONE;

WARNING:LINE_SPACING: Missing a blank line after declarations
#433: FILE: include/linux/sched.h:426:
+	DECLARE_BITMAP(mask, NR_CPUS) = CPU_MASK_NONE;
+	BUG_ON(!cpu_online(cpu));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#433: FILE: include/linux/sched.h:426:
+	BUG_ON(!cpu_online(cpu));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required after that ',' (ctx:VxV)
#462: FILE: include/linux/smp.h:101:
+#define cpu_online_mask(res,mask) do { *(res) = (*(mask) & 1); } while(0)
                            ^

ERROR:SPACING: space required before the open parenthesis '('
#462: FILE: include/linux/smp.h:101:
+#define cpu_online_mask(res,mask) do { *(res) = (*(mask) & 1); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#462: FILE: include/linux/smp.h:101:
+#define cpu_online_mask(res,mask) do { *(res) = (*(mask) & 1); } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#501: FILE: kernel/sched.c:1546:
+	DECLARE_BITMAP(new_mask, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#511: FILE: kernel/sched.c:1556:
+	if (any_online_cpu(new_mask) == NR_CPUS)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#520: FILE: kernel/sched.c:1598:
+	DECLARE_BITMAP(mask, NR_CPUS);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000440727.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 17 warnings, 8 checks, 435 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000440727.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
