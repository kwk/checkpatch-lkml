ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Linus Torvalds'
#28: 
To: Linus Torvalds

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Andrew Morton; linux-mm@kvack.org; linux-kernel@vger.kernel.org'
#29: 
Cc: Andrew Morton; linux-mm@kvack.org; linux-kernel@vger.kernel.org

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#63: FILE: include/linux/mm.h:138:
address, int unused);

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#66: FILE: include/linux/mm.h:139:
+	int (*populate)(struct vm_area_struct * area, unsigned long address,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#68: FILE: include/linux/mm.h:140:
+	int (*populate)(struct vm_area_struct * area, unsigned long address,
 };

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#80: FILE: include/linux/mm.h:422:
+extern int install_page(struct mm_struct *mm, struct vm_area_struct *vma,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#82: FILE: include/linux/mm.h:423:
+extern int install_page(struct mm_struct *mm, struct vm_area_struct *vma,
 extern int handle_mm_fault(struct mm_struct *mm,struct vm_area_struct *vma,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#83: FILE: include/linux/mm.h:423:
+extern int install_page(struct mm_struct *mm, struct vm_area_struct *vma,
unsigned long address, int write_access);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#93: FILE: include/linux/swapops.h:54:
+	BUG_ON(pte_file(pte));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#101: FILE: include/linux/swapops.h:68:
+	BUG_ON(pte_file(__swp_entry_to_pte(arch_entry)));

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#123: FILE: include/asm-i386/pgtable.h:193:
+static inline int pte_file(pte_t pte)		{ return (pte).pte_low &

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pte' - possible side-effects?
#153: FILE: include/asm-i386/pgtable-2level.h:70:
+#define pte_to_pgoff(pte) \
+	((((pte).pte_low >> 1) & 0x1f ) + (((pte).pte_low >> 8) << 5 ))

ERROR:SPACING: space prohibited before that close parenthesis ')'
#154: FILE: include/asm-i386/pgtable-2level.h:71:
+	((((pte).pte_low >> 1) & 0x1f ) + (((pte).pte_low >> 8) << 5 ))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'off' - possible side-effects?
#156: FILE: include/asm-i386/pgtable-2level.h:73:
+#define pgoff_to_pte(off) \
+	((pte_t) { (((off) & 0x1f) << 1) + (((off) >> 5) << 8) + _PAGE_FILE

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#280: FILE: mm/fremap.c:140:
 	if (vma && (vma->vm_flags & VM_SHARED) &&
 		vma->vm_ops && vma->vm_ops->populate &&
 			end > start && start >= vma->vm_start &&
MAP_NONBLOCK);
+				end <= vma->vm_end)

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#348: FILE: mm/rmap.c:376:
+		BUG_ON(pte_file(*ptep));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#354: FILE: mm/rmap.c:382:
+		BUG_ON(!pte_file(*ptep));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#391: FILE: mm/memory.c:1390:
+static int do_file_page(struct mm_struct * mm, struct vm_area_struct * vma,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#391: FILE: mm/memory.c:1390:
+static int do_file_page(struct mm_struct * mm, struct vm_area_struct * vma,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#392: FILE: mm/memory.c:1391:
+static int do_file_page(struct mm_struct * mm, struct vm_area_struct * vma,
+	unsigned long address, int write_access, pte_t *pte, pmd_t *pmd)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#397: FILE: mm/memory.c:1396:
+	BUG_ON(!vma->vm_ops || !vma->vm_ops->nopage);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#402: FILE: mm/memory.c:1401:
+^Iif (!vma->vm_ops || !vma->vm_ops->populate || $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#403: FILE: mm/memory.c:1402:
+	if (!vma->vm_ops || !vma->vm_ops->populate || 
+			(write_access && !(vma->vm_flags & VM_SHARED))) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000389115.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 6 warnings, 8 checks, 339 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000389115.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
