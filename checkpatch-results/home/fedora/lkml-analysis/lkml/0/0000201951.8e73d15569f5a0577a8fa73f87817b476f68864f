WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#32: 
Signed-Off-By: H. Peter Anvin <hpa@zytor.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#51: FILE: fs/fat/dir.c:642:
+		return fat_generic_ioctl(inode, filp, cmd, arg);
 		                                ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#62: FILE: fs/fat/file.c:45:
+int fat_generic_ioctl(struct inode *inode, struct file *filp,
                                                         ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#113: FILE: fs/fat/file.c:96:
+			ia.ia_mode = MSDOS_MKMODE(attr,
+				S_IRWXUGO & ~sbi->options.fs_dmask)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#113: FILE: fs/fat/file.c:96:
+				S_IRWXUGO & ~sbi->options.fs_dmask)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#117: FILE: fs/fat/file.c:100:
+			ia.ia_mode = MSDOS_MKMODE(attr,
+				(S_IRUGO | S_IWUGO | (inode->i_mode & S_IXUGO))

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUGO' are not preferred. Consider using octal permissions '0666'.
#117: FILE: fs/fat/file.c:100:
+				(S_IRUGO | S_IWUGO | (inode->i_mode & S_IXUGO))

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXUGO' are not preferred. Consider using octal permissions '0111'.
#117: FILE: fs/fat/file.c:100:
+				(S_IRUGO | S_IWUGO | (inode->i_mode & S_IXUGO))

WARNING:INDENTED_LABEL: labels should not be indented
#151: FILE: fs/fat/file.c:134:
+	up:

CHECK:BRACES: braces {} should be used on all arms of this statement
#206: FILE: fs/fat/inode.c:280:
+	if (sbi->options.isvfat) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#209: FILE: fs/fat/inode.c:283:
+		int csecs = de->ctime_cs % 100;
+		inode->i_ctime.tv_sec  =

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#213: FILE: fs/fat/inode.c:287:
+	} else

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#320: FILE: include/linux/msdos_fs.h:279:
+	return ((inode->i_mode & S_IWUGO) ? ATTR_NONE : ATTR_RO) |

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#332: FILE: include/linux/msdos_fs.h:339:
+extern int fat_generic_ioctl(struct inode *inode, struct file *filp,
                                                                ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#332: FILE: include/linux/msdos_fs.h:339:
+extern int fat_generic_ioctl(struct inode *inode, struct file *filp,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000201951.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 10 warnings, 5 checks, 264 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000201951.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
