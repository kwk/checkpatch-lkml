WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#69: FILE: net/compat.c:316:
+struct compat_ipt_counters
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'u_int32_t'
#70: FILE: net/compat.c:317:
+	u_int32_t cnt[4];

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#74: FILE: net/compat.c:321:
+struct compat_ipt_entry
+{

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#77: FILE: net/compat.c:324:
+	u_int16_t target_offset;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#78: FILE: net/compat.c:325:
+	u_int16_t next_offset;

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#85: FILE: net/compat.c:332:
+struct compat_ipt_entry_target
+{

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#88: FILE: net/compat.c:335:
+			u_int16_t target_size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#91: FILE: net/compat.c:338:
+		u_int16_t target_size;

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#97: FILE: net/compat.c:344:
+struct compat_ipt_standard_target
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#106: FILE: net/compat.c:353:
+struct ipt_standard
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#112: FILE: net/compat.c:359:
+struct compat_ipt_standard
+{

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#132: FILE: net/compat.c:380:
+	u_int16_t target_offset;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#134: FILE: net/compat.c:382:
+	u_int16_t next;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#155: FILE: net/compat.c:403:
+static int copy_entry(struct ipt_entry __user *e,
+		u_int16_t next, void __user **dstptr, compat_uint_t *size)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#155: FILE: net/compat.c:403:
+		u_int16_t next, void __user **dstptr, compat_uint_t *size)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#158: FILE: net/compat.c:406:
+	u_int16_t target_offset;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#178: FILE: net/compat.c:426:
+		if (__copy_from_user(&etmp, (void __user *)e,
+				sizeof(struct compat_ipt_entry)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#180: FILE: net/compat.c:428:
+^I^Ietmp.next_offset = next;^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#184: FILE: net/compat.c:432:
+		if (__copy_from_user(&compat_st, (void __user *)t,
+				sizeof(struct compat_ipt_standard_target)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#187: FILE: net/compat.c:435:
+		memcpy(&st.target,  &compat_st.target,
+				sizeof(struct ipt_target));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#192: FILE: net/compat.c:440:
+		if (__copy_to_user(*dstptr + target_offset, &st,
+				sizeof(struct ipt_standard_target)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#203: FILE: net/compat.c:451:
+static int compat_copy_entries(void __user *srcptr,
+		void __user *dstptr, compat_uint_t *size,

WARNING:SPACING: Unnecessary space before function pointer arguments
#204: FILE: net/compat.c:452:
+		int (*copy_entry) (struct ipt_entry __user *,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: net/compat.c:453:
+		int (*copy_entry) (struct ipt_entry __user *,
+		u_int16_t, void __user **, compat_uint_t *))

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#209: FILE: net/compat.c:457:
+	u_int16_t next;

WARNING:LINE_SPACING: Missing a blank line after declarations
#234: FILE: net/compat.c:482:
+		int k;
+		k = tmp / sizeof(struct compat_ipt_standard);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#236: FILE: net/compat.c:484:
+^I}^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#239: FILE: net/compat.c:487:
+^Ireturn 0;^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#272: FILE: net/compat.c:540:
+	if (compat_copy_entries(&urepl->entries[0],
+			&repl_nat->entries[0], &origsize, copy_entry))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#289: FILE: net/compat.c:553:
+		printk("WARNING: %s: wrong size calculation!\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#289: FILE: net/compat.c:553:
+		printk("WARNING: %s: wrong size calculation!\n", __FUNCTION__);

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#298: FILE: net/compat.c:573:
+struct compat_ipt_counters_info
+{

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#305: FILE: net/compat.c:580:
+static int do_set_add_counters(int fd, int level, int optname,
+				char __user *optval, int optlen)

CHECK:SPACING: No space is necessary after a cast
#313: FILE: net/compat.c:588:
+	tmp = (struct ipt_counters_info*) vmalloc(optlen + 4);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#313: FILE: net/compat.c:588:
+	tmp = (struct ipt_counters_info*) vmalloc(optlen + 4);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#313: FILE: net/compat.c:588:
+	tmp = (struct ipt_counters_info*) vmalloc(optlen + 4);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp"
#314: FILE: net/compat.c:589:
+	if (tmp == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#316: FILE: net/compat.c:591:
+^I$

ERROR:SPACING: spaces required around that '!=' (ctx:VxW)
#318: FILE: net/compat.c:593:
+	if (copy_from_user(tmp, user, sizeof(*user))!= 0)
 	                                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#321: FILE: net/compat.c:596:
+	if (copy_from_user(tmp->counters, user + sizeof(*user),
+			optlen - sizeof(*user)) != 0)

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#354: FILE: net/compat.c:708:
+struct compat_ipt_get_entries
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#361: FILE: net/compat.c:715:
+struct compat_ipt_getinfo
+{

WARNING:LINE_SPACING: Missing a blank line after declarations
#374: FILE: net/compat.c:728:
+		int k;
+		k = src / sizeof(struct ipt_standard);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#376: FILE: net/compat.c:730:
+^I}^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#379: FILE: net/compat.c:733:
+^Ireturn 0;^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#383: FILE: net/compat.c:737:
+^I^Ichar __user *optval, int __user *optlen) $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#383: FILE: net/compat.c:737:
+static long do_ipt_get_info(int fd, int level, int optname,
+		char __user *optval, int __user *optlen) 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#413: FILE: net/compat.c:767:
+			ret = compat_convert_hook(info.hook_entry[i],
+					&user->hook_entry[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#417: FILE: net/compat.c:771:
+			ret = compat_convert_hook(info.underflow[i],
+					&user->underflow[i]);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#420: FILE: net/compat.c:774:
+^I^I}^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#421: FILE: net/compat.c:775:
+^I^Iret = 0;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#423: FILE: net/compat.c:777:
+out:^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#428: FILE: net/compat.c:782:
+static int compat_copy_entry(struct ipt_entry __user *e,
+		u_int16_t next, void __user **dstptr, compat_uint_t *size)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#428: FILE: net/compat.c:782:
+		u_int16_t next, void __user **dstptr, compat_uint_t *size)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#431: FILE: net/compat.c:785:
+	u_int16_t target_offset;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#451: FILE: net/compat.c:805:
+		if (__copy_from_user(&etmp, (void __user *)e,
+				sizeof(struct ipt_entry)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#453: FILE: net/compat.c:807:
+^I^Ietmp.next_offset = next;^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#457: FILE: net/compat.c:811:
+		if (__copy_from_user(&st, (void __user *)t,
+				sizeof(struct ipt_standard_target)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#460: FILE: net/compat.c:814:
+		memcpy(&compat_st.target,  &st.target,
+				sizeof(struct ipt_target));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#465: FILE: net/compat.c:819:
+		if (__copy_to_user(*dstptr + target_offset, &compat_st,
+				sizeof(struct compat_ipt_standard_target)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#476: FILE: net/compat.c:830:
+^I^Ichar __user *optval, int __user *optlen) $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#476: FILE: net/compat.c:830:
+static long do_ipt_get_entries(int fd, int level, int optname,
+		char __user *optval, int __user *optlen) 

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!get"
#495: FILE: net/compat.c:849:
+	if (get == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#497: FILE: net/compat.c:851:
+^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#500: FILE: net/compat.c:854:
+	    !access_ok(VERIFY_READ, get, len+off) ||
 	                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#501: FILE: net/compat.c:855:
+	    !access_ok(VERIFY_WRITE, get, len+off))
 	                                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#507: FILE: net/compat.c:861:
+	if (__copy_in_user(get->entrytable,
+			user + sizeof(struct compat_ipt_get_entries),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#519: FILE: net/compat.c:873:
+		if (__copy_in_user(user, get,
+				sizeof(struct compat_ipt_get_entries)))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000114191.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 24 errors, 7 warnings, 38 checks, 482 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000114191.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
