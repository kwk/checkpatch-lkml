WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#143: FILE: arch/s390/kernel/setup.c:658:
+extern void do_call_softirq(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'asynchromous' may be misspelled - perhaps 'asynchronous'?
#155: FILE: arch/s390/kernel/setup.c:670:
+		/* Call __do_softirq on asynchromous interrupt stack. */
 		                        ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#161: FILE: arch/s390/kernel/setup.c:676:
+EXPORT_SYMBOL(do_softirq);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:DEFINE_ARCH_HAS: #define of '__ARCH_HAS_DO_SOFTIRQ' is wrong - use Kconfig variables or standard guards instead
#173: FILE: include/asm-s390/hardirq.h:66:
+#define __ARCH_HAS_DO_SOFTIRQ

The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong.

For big conceptual features use Kconfig symbols instead.  And for
smaller things where we have compatibility fallback functions but
want architectures able to override them with optimized ones, we
should either use weak functions (appropriate for some cases), or
the symbol that protects them should be the same symbol we use.

See: https://lore.kernel.org/lkml/CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000250488.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 3 warnings, 0 checks, 85 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000250488.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
