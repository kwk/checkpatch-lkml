WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#65: FILE: drivers/md/dm-io.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#81: FILE: drivers/md/dm-io.c:17:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#84: FILE: drivers/md/dm-io.c:20:
+ *---------------------------------------------------------------*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#104: FILE: drivers/md/dm-io.c:40:
+	unsigned i;

WARNING:NEEDLESS_IF: mempool_destroy(NULL) is safe and this check is probably not required
#108: FILE: drivers/md/dm-io.c:44:
+	if (bs->bio_pool)
+		mempool_destroy(bs->bio_pool);

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#111: FILE: drivers/md/dm-io.c:47:
+	if (bs->bio_slab)
+		kmem_cache_destroy(bs->bio_slab);

WARNING:NEEDLESS_IF: mempool_destroy(NULL) is safe and this check is probably not required
#116: FILE: drivers/md/dm-io.c:52:
+		if (bp->pool)
+			mempool_destroy(bp->pool);

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#119: FILE: drivers/md/dm-io.c:55:
+		if (bp->slab)
+			kmem_cache_destroy(bp->slab);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#123: FILE: drivers/md/dm-io.c:59:
+static void mk_name(char *str, size_t len, const char *prefix, unsigned count)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#129: FILE: drivers/md/dm-io.c:65:
+static int bio_set_init(struct bio_set *bs, const char *slab_prefix,
+			 unsigned pool_entries, unsigned scale)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#129: FILE: drivers/md/dm-io.c:65:
+			 unsigned pool_entries, unsigned scale)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#129: FILE: drivers/md/dm-io.c:65:
+			 unsigned pool_entries, unsigned scale)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#132: FILE: drivers/md/dm-io.c:68:
+	 * whole hog and have a pool per power of 2 ? */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#133: FILE: drivers/md/dm-io.c:69:
+	static unsigned _vec_lengths[BIOVEC_NR_POOLS] = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#137: FILE: drivers/md/dm-io.c:73:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#138: FILE: drivers/md/dm-io.c:74:
+	unsigned i, size;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#171: FILE: drivers/md/dm-io.c:107:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#201: FILE: drivers/md/dm-io.c:137:
+static inline unsigned bvec_index(unsigned nr)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#201: FILE: drivers/md/dm-io.c:137:
+static inline unsigned bvec_index(unsigned nr)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#205: FILE: drivers/md/dm-io.c:141:
+^Icase 2 ... 4: ^Ireturn 1;$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#212: FILE: drivers/md/dm-io.c:148:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#232: FILE: drivers/md/dm-io.c:168:
+static unsigned _bio_count = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#232: FILE: drivers/md/dm-io.c:168:
+static unsigned _bio_count = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#270: FILE: drivers/md/dm-io.c:206:
+		BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#278: FILE: drivers/md/dm-io.c:214:
+ *---------------------------------------------------------------*/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#296: FILE: drivers/md/dm-io.c:232:
+static unsigned _num_ios;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#363: FILE: drivers/md/dm-io.c:299:
+ *---------------------------------------------------------------*/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#364: FILE: drivers/md/dm-io.c:300:
+static inline void bio_set_region(struct bio *bio, unsigned region)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#369: FILE: drivers/md/dm-io.c:305:
+static inline unsigned bio_get_region(struct bio *bio)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#377: FILE: drivers/md/dm-io.c:313:
+ *---------------------------------------------------------------*/

CHECK:BRACES: braces {} should be used on all arms of this statement
#384: FILE: drivers/md/dm-io.c:320:
+		if (io->sleeper)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#387: FILE: drivers/md/dm-io.c:323:
+		else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#407: FILE: drivers/md/dm-io.c:343:
+		char *data = bvec_kmap_irq(bv, &flags);
+		memset(data, 0, bv->bv_len);

CHECK:SPACING: No space is necessary after a cast
#414: FILE: drivers/md/dm-io.c:350:
+	struct io *io = (struct io *) bio->bi_private;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#438: FILE: drivers/md/dm-io.c:374:
+ *---------------------------------------------------------------*/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#441: FILE: drivers/md/dm-io.c:377:
+			 struct page **p, unsigned long *len, unsigned *offset);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#444: FILE: drivers/md/dm-io.c:380:
+	unsigned context_u;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#452: FILE: drivers/md/dm-io.c:388:
+static void list_get_page(struct dpages *dp,
+		  struct page **p, unsigned long *len, unsigned *offset)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#452: FILE: drivers/md/dm-io.c:388:
+		  struct page **p, unsigned long *len, unsigned *offset)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#454: FILE: drivers/md/dm-io.c:390:
+	unsigned o = dp->context_u;

CHECK:SPACING: No space is necessary after a cast
#455: FILE: drivers/md/dm-io.c:391:
+	struct page_list *pl = (struct page_list *) dp->context_ptr;

CHECK:SPACING: No space is necessary after a cast
#464: FILE: drivers/md/dm-io.c:400:
+	struct page_list *pl = (struct page_list *) dp->context_ptr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#465: FILE: drivers/md/dm-io.c:401:
+	struct page_list *pl = (struct page_list *) dp->context_ptr;
+	dp->context_ptr = pl->next;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#469: FILE: drivers/md/dm-io.c:405:
+static void list_dp_init(struct dpages *dp, struct page_list *pl, unsigned offset)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#481: FILE: drivers/md/dm-io.c:417:
+static void bvec_get_page(struct dpages *dp,
+		  struct page **p, unsigned long *len, unsigned *offset)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#481: FILE: drivers/md/dm-io.c:417:
+		  struct page **p, unsigned long *len, unsigned *offset)

CHECK:SPACING: No space is necessary after a cast
#483: FILE: drivers/md/dm-io.c:419:
+	struct bio_vec *bvec = (struct bio_vec *) dp->context_ptr;

CHECK:SPACING: No space is necessary after a cast
#491: FILE: drivers/md/dm-io.c:427:
+	struct bio_vec *bvec = (struct bio_vec *) dp->context_ptr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#492: FILE: drivers/md/dm-io.c:428:
+	struct bio_vec *bvec = (struct bio_vec *) dp->context_ptr;
+	dp->context_ptr = bvec + 1;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#503: FILE: drivers/md/dm-io.c:439:
+static void vm_get_page(struct dpages *dp,
+		 struct page **p, unsigned long *len, unsigned *offset)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#503: FILE: drivers/md/dm-io.c:439:
+		 struct page **p, unsigned long *len, unsigned *offset)

CHECK:SPACING: No space is necessary after a cast
#520: FILE: drivers/md/dm-io.c:456:
+	dp->context_u = ((unsigned long) data) & (PAGE_SIZE - 1);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#526: FILE: drivers/md/dm-io.c:462:
+ *---------------------------------------------------------------*/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#533: FILE: drivers/md/dm-io.c:469:
+	unsigned offset;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#534: FILE: drivers/md/dm-io.c:470:
+	unsigned num_bvecs;

WARNING:TYPO_SPELLING: 'refence' may be misspelled - perhaps 'reference'?
#592: FILE: drivers/md/dm-io.c:528:
+	 * Drop the extra refence that we were holding to avoid
 	                  ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#599: FILE: drivers/md/dm-io.c:535:
+static int sync_io(unsigned int num_regions, struct io_region *where,
+	    int rw, struct dpages *dp, unsigned long *error_bits)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#603: FILE: drivers/md/dm-io.c:539:
+	BUG_ON(num_regions > 1 && rw != WRITE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#629: FILE: drivers/md/dm-io.c:565:
+static int async_io(unsigned int num_regions, struct io_region *where, int rw,
+	     struct dpages *dp, io_notify_fn fn, void *context)

WARNING:LINE_SPACING: Missing a blank line after declarations
#648: FILE: drivers/md/dm-io.c:584:
+	struct dpages dp;
+	list_dp_init(&dp, pl, offset);

WARNING:LINE_SPACING: Missing a blank line after declarations
#656: FILE: drivers/md/dm-io.c:592:
+	struct dpages dp;
+	bvec_dp_init(&dp, bvec);

WARNING:LINE_SPACING: Missing a blank line after declarations
#664: FILE: drivers/md/dm-io.c:600:
+	struct dpages dp;
+	vm_dp_init(&dp, data);

WARNING:LINE_SPACING: Missing a blank line after declarations
#673: FILE: drivers/md/dm-io.c:609:
+	struct dpages dp;
+	list_dp_init(&dp, pl, offset);

WARNING:LINE_SPACING: Missing a blank line after declarations
#681: FILE: drivers/md/dm-io.c:617:
+	struct dpages dp;
+	bvec_dp_init(&dp, bvec);

WARNING:LINE_SPACING: Missing a blank line after declarations
#689: FILE: drivers/md/dm-io.c:625:
+	struct dpages dp;
+	vm_dp_init(&dp, data);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#693: FILE: drivers/md/dm-io.c:629:
+EXPORT_SYMBOL(dm_io_get);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#694: FILE: drivers/md/dm-io.c:630:
+EXPORT_SYMBOL(dm_io_put);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#695: FILE: drivers/md/dm-io.c:631:
+EXPORT_SYMBOL(dm_io_sync);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#696: FILE: drivers/md/dm-io.c:632:
+EXPORT_SYMBOL(dm_io_async);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#697: FILE: drivers/md/dm-io.c:633:
+EXPORT_SYMBOL(dm_io_sync_bvec);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#698: FILE: drivers/md/dm-io.c:634:
+EXPORT_SYMBOL(dm_io_async_bvec);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#699: FILE: drivers/md/dm-io.c:635:
+EXPORT_SYMBOL(dm_io_sync_vm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#700: FILE: drivers/md/dm-io.c:636:
+EXPORT_SYMBOL(dm_io_async_vm);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#704: FILE: drivers/md/dm-io.h:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#729: FILE: drivers/md/dm-io.h:26:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#736: FILE: drivers/md/dm-io.h:33:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000277829.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 56 warnings, 19 checks, 739 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000277829.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
