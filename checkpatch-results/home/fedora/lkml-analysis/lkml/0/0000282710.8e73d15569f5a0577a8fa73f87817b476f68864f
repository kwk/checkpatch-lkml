WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
diff -X exclude.txt -rupN linux-2.6.5.patched/crypto/Kconfig linux-2.6.5/crypto/Kconfig

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#68: FILE: crypto/devices/Kconfig:16:
+config CRYPTO_DEV_PADLOCK_AES
+	bool "Support for AES in VIA PadLock"
+	depends on CRYPTO_DEV_PADLOCK
+	default y
+	help
+	  Use VIA PadLock for AES algorithm.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#91: FILE: crypto/devices/padlock-aes.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#151: FILE: crypto/devices/padlock-aes.c:61:
+static inline int aes_hw_extkey_available (u8 key_len);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#154: FILE: crypto/devices/padlock-aes.c:64:
+u32 generic_rotr32 (const u32 x, const unsigned bits)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#154: FILE: crypto/devices/padlock-aes.c:64:
+u32 generic_rotr32 (const u32 x, const unsigned bits)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#156: FILE: crypto/devices/padlock-aes.c:66:
+	const unsigned n = bits % 32;

WARNING:LINE_SPACING: Missing a blank line after declarations
#157: FILE: crypto/devices/padlock-aes.c:67:
+	const unsigned n = bits % 32;
+	return (x >> n) | (x << (32 - n));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#161: FILE: crypto/devices/padlock-aes.c:71:
+u32 generic_rotl32 (const u32 x, const unsigned bits)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#161: FILE: crypto/devices/padlock-aes.c:71:
+u32 generic_rotl32 (const u32 x, const unsigned bits)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#163: FILE: crypto/devices/padlock-aes.c:73:
+	const unsigned n = bits % 32;

WARNING:LINE_SPACING: Missing a blank line after declarations
#164: FILE: crypto/devices/padlock-aes.c:74:
+	const unsigned n = bits % 32;
+	return (x << n) | (x >> (32 - n));

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#173: FILE: crypto/devices/padlock-aes.c:83:
+inline static u8

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#174: FILE: crypto/devices/padlock-aes.c:84:
+byte(const u32 x, const unsigned n)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#183: FILE: crypto/devices/padlock-aes.c:93:
+	u32 e_data[AES_EXTENDED_KEY_SIZE+4];
 	                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#184: FILE: crypto/devices/padlock-aes.c:94:
+	u32 d_data[AES_EXTENDED_KEY_SIZE+4];
 	                                ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#205: FILE: crypto/devices/padlock-aes.c:115:
+f_mult (u8 a, u8 b)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#212: FILE: crypto/devices/padlock-aes.c:122:
+#define ff_mult(a,b)    (a && b ? f_mult(a, b) : 0)
                  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#212: FILE: crypto/devices/padlock-aes.c:122:
+#define ff_mult(a,b)    (a && b ? f_mult(a, b) : 0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#212: FILE: crypto/devices/padlock-aes.c:122:
+#define ff_mult(a,b)    (a && b ? f_mult(a, b) : 0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#212: FILE: crypto/devices/padlock-aes.c:122:
+#define ff_mult(a,b)    (a && b ? f_mult(a, b) : 0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'b' may be better as '(b)' to avoid precedence issues
#212: FILE: crypto/devices/padlock-aes.c:122:
+#define ff_mult(a,b)    (a && b ? f_mult(a, b) : 0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#214: FILE: crypto/devices/padlock-aes.c:124:
+#define f_rn(bo, bi, n, k)					\
+    bo[n] =  ft_tab[0][byte(bi[n],0)] ^				\
+             ft_tab[1][byte(bi[(n + 1) & 3],1)] ^		\
+             ft_tab[2][byte(bi[(n + 2) & 3],2)] ^		\
+             ft_tab[3][byte(bi[(n + 3) & 3],3)] ^ *(k + n)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bi' - possible side-effects?
#214: FILE: crypto/devices/padlock-aes.c:124:
+#define f_rn(bo, bi, n, k)					\
+    bo[n] =  ft_tab[0][byte(bi[n],0)] ^				\
+             ft_tab[1][byte(bi[(n + 1) & 3],1)] ^		\
+             ft_tab[2][byte(bi[(n + 2) & 3],2)] ^		\
+             ft_tab[3][byte(bi[(n + 3) & 3],3)] ^ *(k + n)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#214: FILE: crypto/devices/padlock-aes.c:124:
+#define f_rn(bo, bi, n, k)					\
+    bo[n] =  ft_tab[0][byte(bi[n],0)] ^				\
+             ft_tab[1][byte(bi[(n + 1) & 3],1)] ^		\
+             ft_tab[2][byte(bi[(n + 2) & 3],2)] ^		\
+             ft_tab[3][byte(bi[(n + 3) & 3],3)] ^ *(k + n)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'k' may be better as '(k)' to avoid precedence issues
#214: FILE: crypto/devices/padlock-aes.c:124:
+#define f_rn(bo, bi, n, k)					\
+    bo[n] =  ft_tab[0][byte(bi[n],0)] ^				\
+             ft_tab[1][byte(bi[(n + 1) & 3],1)] ^		\
+             ft_tab[2][byte(bi[(n + 2) & 3],2)] ^		\
+             ft_tab[3][byte(bi[(n + 3) & 3],3)] ^ *(k + n)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: crypto/devices/padlock-aes.c:125:
+    bo[n] =  ft_tab[0][byte(bi[n],0)] ^^I^I^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#215: FILE: crypto/devices/padlock-aes.c:125:
+    bo[n] =  ft_tab[0][byte(bi[n],0)] ^				\
                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#216: FILE: crypto/devices/padlock-aes.c:126:
+             ft_tab[1][byte(bi[(n + 1) & 3],1)] ^^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: crypto/devices/padlock-aes.c:126:
+             ft_tab[1][byte(bi[(n + 1) & 3],1)] ^^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#216: FILE: crypto/devices/padlock-aes.c:126:
+             ft_tab[1][byte(bi[(n + 1) & 3],1)] ^		\
                                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#217: FILE: crypto/devices/padlock-aes.c:127:
+             ft_tab[2][byte(bi[(n + 2) & 3],2)] ^^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: crypto/devices/padlock-aes.c:127:
+             ft_tab[2][byte(bi[(n + 2) & 3],2)] ^^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#217: FILE: crypto/devices/padlock-aes.c:127:
+             ft_tab[2][byte(bi[(n + 2) & 3],2)] ^		\
                                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#218: FILE: crypto/devices/padlock-aes.c:128:
+             ft_tab[3][byte(bi[(n + 3) & 3],3)] ^ *(k + n)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: crypto/devices/padlock-aes.c:128:
+             ft_tab[3][byte(bi[(n + 3) & 3],3)] ^ *(k + n)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#218: FILE: crypto/devices/padlock-aes.c:128:
+             ft_tab[3][byte(bi[(n + 3) & 3],3)] ^ *(k + n)
                                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#220: FILE: crypto/devices/padlock-aes.c:130:
+#define i_rn(bo, bi, n, k)					\
+    bo[n] =  it_tab[0][byte(bi[n],0)] ^				\
+             it_tab[1][byte(bi[(n + 3) & 3],1)] ^		\
+             it_tab[2][byte(bi[(n + 2) & 3],2)] ^		\
+             it_tab[3][byte(bi[(n + 1) & 3],3)] ^ *(k + n)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bi' - possible side-effects?
#220: FILE: crypto/devices/padlock-aes.c:130:
+#define i_rn(bo, bi, n, k)					\
+    bo[n] =  it_tab[0][byte(bi[n],0)] ^				\
+             it_tab[1][byte(bi[(n + 3) & 3],1)] ^		\
+             it_tab[2][byte(bi[(n + 2) & 3],2)] ^		\
+             it_tab[3][byte(bi[(n + 1) & 3],3)] ^ *(k + n)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#220: FILE: crypto/devices/padlock-aes.c:130:
+#define i_rn(bo, bi, n, k)					\
+    bo[n] =  it_tab[0][byte(bi[n],0)] ^				\
+             it_tab[1][byte(bi[(n + 3) & 3],1)] ^		\
+             it_tab[2][byte(bi[(n + 2) & 3],2)] ^		\
+             it_tab[3][byte(bi[(n + 1) & 3],3)] ^ *(k + n)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'k' may be better as '(k)' to avoid precedence issues
#220: FILE: crypto/devices/padlock-aes.c:130:
+#define i_rn(bo, bi, n, k)					\
+    bo[n] =  it_tab[0][byte(bi[n],0)] ^				\
+             it_tab[1][byte(bi[(n + 3) & 3],1)] ^		\
+             it_tab[2][byte(bi[(n + 2) & 3],2)] ^		\
+             it_tab[3][byte(bi[(n + 1) & 3],3)] ^ *(k + n)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: crypto/devices/padlock-aes.c:131:
+    bo[n] =  it_tab[0][byte(bi[n],0)] ^^I^I^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#221: FILE: crypto/devices/padlock-aes.c:131:
+    bo[n] =  it_tab[0][byte(bi[n],0)] ^				\
                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#222: FILE: crypto/devices/padlock-aes.c:132:
+             it_tab[1][byte(bi[(n + 3) & 3],1)] ^^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: crypto/devices/padlock-aes.c:132:
+             it_tab[1][byte(bi[(n + 3) & 3],1)] ^^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#222: FILE: crypto/devices/padlock-aes.c:132:
+             it_tab[1][byte(bi[(n + 3) & 3],1)] ^		\
                                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#223: FILE: crypto/devices/padlock-aes.c:133:
+             it_tab[2][byte(bi[(n + 2) & 3],2)] ^^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: crypto/devices/padlock-aes.c:133:
+             it_tab[2][byte(bi[(n + 2) & 3],2)] ^^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#223: FILE: crypto/devices/padlock-aes.c:133:
+             it_tab[2][byte(bi[(n + 2) & 3],2)] ^		\
                                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: crypto/devices/padlock-aes.c:134:
+             it_tab[3][byte(bi[(n + 1) & 3],3)] ^ *(k + n)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: crypto/devices/padlock-aes.c:134:
+             it_tab[3][byte(bi[(n + 1) & 3],3)] ^ *(k + n)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#224: FILE: crypto/devices/padlock-aes.c:134:
+             it_tab[3][byte(bi[(n + 1) & 3],3)] ^ *(k + n)
                                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#226: FILE: crypto/devices/padlock-aes.c:136:
+#define ls_box(x)				\
+    ( fl_tab[0][byte(x, 0)] ^			\
+      fl_tab[1][byte(x, 1)] ^			\
+      fl_tab[2][byte(x, 2)] ^			\
+      fl_tab[3][byte(x, 3)] )

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: crypto/devices/padlock-aes.c:137:
+    ( fl_tab[0][byte(x, 0)] ^^I^I^I\$

ERROR:SPACING: space prohibited after that open parenthesis '('
#227: FILE: crypto/devices/padlock-aes.c:137:
+    ( fl_tab[0][byte(x, 0)] ^			\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: crypto/devices/padlock-aes.c:138:
+      fl_tab[1][byte(x, 1)] ^^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: crypto/devices/padlock-aes.c:139:
+      fl_tab[2][byte(x, 2)] ^^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: crypto/devices/padlock-aes.c:140:
+      fl_tab[3][byte(x, 3)] )$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#230: FILE: crypto/devices/padlock-aes.c:140:
+      fl_tab[3][byte(x, 3)] )

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#232: FILE: crypto/devices/padlock-aes.c:142:
+#define f_rl(bo, bi, n, k)					\
+    bo[n] =  fl_tab[0][byte(bi[n],0)] ^				\
+             fl_tab[1][byte(bi[(n + 1) & 3],1)] ^		\
+             fl_tab[2][byte(bi[(n + 2) & 3],2)] ^		\
+             fl_tab[3][byte(bi[(n + 3) & 3],3)] ^ *(k + n)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bi' - possible side-effects?
#232: FILE: crypto/devices/padlock-aes.c:142:
+#define f_rl(bo, bi, n, k)					\
+    bo[n] =  fl_tab[0][byte(bi[n],0)] ^				\
+             fl_tab[1][byte(bi[(n + 1) & 3],1)] ^		\
+             fl_tab[2][byte(bi[(n + 2) & 3],2)] ^		\
+             fl_tab[3][byte(bi[(n + 3) & 3],3)] ^ *(k + n)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#232: FILE: crypto/devices/padlock-aes.c:142:
+#define f_rl(bo, bi, n, k)					\
+    bo[n] =  fl_tab[0][byte(bi[n],0)] ^				\
+             fl_tab[1][byte(bi[(n + 1) & 3],1)] ^		\
+             fl_tab[2][byte(bi[(n + 2) & 3],2)] ^		\
+             fl_tab[3][byte(bi[(n + 3) & 3],3)] ^ *(k + n)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'k' may be better as '(k)' to avoid precedence issues
#232: FILE: crypto/devices/padlock-aes.c:142:
+#define f_rl(bo, bi, n, k)					\
+    bo[n] =  fl_tab[0][byte(bi[n],0)] ^				\
+             fl_tab[1][byte(bi[(n + 1) & 3],1)] ^		\
+             fl_tab[2][byte(bi[(n + 2) & 3],2)] ^		\
+             fl_tab[3][byte(bi[(n + 3) & 3],3)] ^ *(k + n)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: crypto/devices/padlock-aes.c:143:
+    bo[n] =  fl_tab[0][byte(bi[n],0)] ^^I^I^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#233: FILE: crypto/devices/padlock-aes.c:143:
+    bo[n] =  fl_tab[0][byte(bi[n],0)] ^				\
                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#234: FILE: crypto/devices/padlock-aes.c:144:
+             fl_tab[1][byte(bi[(n + 1) & 3],1)] ^^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#234: FILE: crypto/devices/padlock-aes.c:144:
+             fl_tab[1][byte(bi[(n + 1) & 3],1)] ^^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#234: FILE: crypto/devices/padlock-aes.c:144:
+             fl_tab[1][byte(bi[(n + 1) & 3],1)] ^		\
                                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#235: FILE: crypto/devices/padlock-aes.c:145:
+             fl_tab[2][byte(bi[(n + 2) & 3],2)] ^^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#235: FILE: crypto/devices/padlock-aes.c:145:
+             fl_tab[2][byte(bi[(n + 2) & 3],2)] ^^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#235: FILE: crypto/devices/padlock-aes.c:145:
+             fl_tab[2][byte(bi[(n + 2) & 3],2)] ^		\
                                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#236: FILE: crypto/devices/padlock-aes.c:146:
+             fl_tab[3][byte(bi[(n + 3) & 3],3)] ^ *(k + n)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: crypto/devices/padlock-aes.c:146:
+             fl_tab[3][byte(bi[(n + 3) & 3],3)] ^ *(k + n)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#236: FILE: crypto/devices/padlock-aes.c:146:
+             fl_tab[3][byte(bi[(n + 3) & 3],3)] ^ *(k + n)
                                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#238: FILE: crypto/devices/padlock-aes.c:148:
+#define i_rl(bo, bi, n, k)					\
+    bo[n] =  il_tab[0][byte(bi[n],0)] ^				\
+             il_tab[1][byte(bi[(n + 3) & 3],1)] ^		\
+             il_tab[2][byte(bi[(n + 2) & 3],2)] ^		\
+             il_tab[3][byte(bi[(n + 1) & 3],3)] ^ *(k + n)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bi' - possible side-effects?
#238: FILE: crypto/devices/padlock-aes.c:148:
+#define i_rl(bo, bi, n, k)					\
+    bo[n] =  il_tab[0][byte(bi[n],0)] ^				\
+             il_tab[1][byte(bi[(n + 3) & 3],1)] ^		\
+             il_tab[2][byte(bi[(n + 2) & 3],2)] ^		\
+             il_tab[3][byte(bi[(n + 1) & 3],3)] ^ *(k + n)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#238: FILE: crypto/devices/padlock-aes.c:148:
+#define i_rl(bo, bi, n, k)					\
+    bo[n] =  il_tab[0][byte(bi[n],0)] ^				\
+             il_tab[1][byte(bi[(n + 3) & 3],1)] ^		\
+             il_tab[2][byte(bi[(n + 2) & 3],2)] ^		\
+             il_tab[3][byte(bi[(n + 1) & 3],3)] ^ *(k + n)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'k' may be better as '(k)' to avoid precedence issues
#238: FILE: crypto/devices/padlock-aes.c:148:
+#define i_rl(bo, bi, n, k)					\
+    bo[n] =  il_tab[0][byte(bi[n],0)] ^				\
+             il_tab[1][byte(bi[(n + 3) & 3],1)] ^		\
+             il_tab[2][byte(bi[(n + 2) & 3],2)] ^		\
+             il_tab[3][byte(bi[(n + 1) & 3],3)] ^ *(k + n)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: crypto/devices/padlock-aes.c:149:
+    bo[n] =  il_tab[0][byte(bi[n],0)] ^^I^I^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#239: FILE: crypto/devices/padlock-aes.c:149:
+    bo[n] =  il_tab[0][byte(bi[n],0)] ^				\
                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#240: FILE: crypto/devices/padlock-aes.c:150:
+             il_tab[1][byte(bi[(n + 3) & 3],1)] ^^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: crypto/devices/padlock-aes.c:150:
+             il_tab[1][byte(bi[(n + 3) & 3],1)] ^^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#240: FILE: crypto/devices/padlock-aes.c:150:
+             il_tab[1][byte(bi[(n + 3) & 3],1)] ^		\
                                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#241: FILE: crypto/devices/padlock-aes.c:151:
+             il_tab[2][byte(bi[(n + 2) & 3],2)] ^^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: crypto/devices/padlock-aes.c:151:
+             il_tab[2][byte(bi[(n + 2) & 3],2)] ^^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#241: FILE: crypto/devices/padlock-aes.c:151:
+             il_tab[2][byte(bi[(n + 2) & 3],2)] ^		\
                                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#242: FILE: crypto/devices/padlock-aes.c:152:
+             il_tab[3][byte(bi[(n + 1) & 3],3)] ^ *(k + n)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: crypto/devices/padlock-aes.c:152:
+             il_tab[3][byte(bi[(n + 1) & 3],3)] ^ *(k + n)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#242: FILE: crypto/devices/padlock-aes.c:152:
+             il_tab[3][byte(bi[(n + 1) & 3],3)] ^ *(k + n)
                                            ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#245: FILE: crypto/devices/padlock-aes.c:155:
+gen_tabs (void)

WARNING:TYPO_SPELLING: 'prmitive' may be misspelled - perhaps 'primitive'?
#251: FILE: crypto/devices/padlock-aes.c:161:
+	   0x011b as modular polynomial - the simplest prmitive
 	                                               ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#251: FILE: crypto/devices/padlock-aes.c:161:
+	/* log and power tables for GF(2**8) finite field with
+	   0x011b as modular polynomial - the simplest prmitive

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#252: FILE: crypto/devices/padlock-aes.c:162:
+	   root is 0x03, used here to generate the tables */

CHECK:SPACING: No space is necessary after a cast
#255: FILE: crypto/devices/padlock-aes.c:165:
+		pow_tab[i] = (u8) p;

CHECK:SPACING: No space is necessary after a cast
#256: FILE: crypto/devices/padlock-aes.c:166:
+		log_tab[p] = (u8) i;

CHECK:SPACING: No space is necessary after a cast
#274: FILE: crypto/devices/padlock-aes.c:184:
+		isb_tab[p] = (u8) i;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#282: FILE: crypto/devices/padlock-aes.c:192:
+		fl_tab[1][i] = rotl (t, 8);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#283: FILE: crypto/devices/padlock-aes.c:193:
+		fl_tab[2][i] = rotl (t, 16);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#284: FILE: crypto/devices/padlock-aes.c:194:
+		fl_tab[3][i] = rotl (t, 24);

CHECK:SPACING: No space is necessary after a cast
#286: FILE: crypto/devices/padlock-aes.c:196:
+		t = ((u32) ff_mult (2, p)) |

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#286: FILE: crypto/devices/padlock-aes.c:196:
+		t = ((u32) ff_mult (2, p)) |

CHECK:SPACING: No space is necessary after a cast
#287: FILE: crypto/devices/padlock-aes.c:197:
+		    ((u32) p << 8) |

CHECK:SPACING: No space is necessary after a cast
#288: FILE: crypto/devices/padlock-aes.c:198:
+		    ((u32) p << 16) | ((u32) ff_mult (3, p) << 24);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#288: FILE: crypto/devices/padlock-aes.c:198:
+		    ((u32) p << 16) | ((u32) ff_mult (3, p) << 24);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#291: FILE: crypto/devices/padlock-aes.c:201:
+		ft_tab[1][i] = rotl (t, 8);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#292: FILE: crypto/devices/padlock-aes.c:202:
+		ft_tab[2][i] = rotl (t, 16);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#293: FILE: crypto/devices/padlock-aes.c:203:
+		ft_tab[3][i] = rotl (t, 24);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#299: FILE: crypto/devices/padlock-aes.c:209:
+		il_tab[1][i] = rotl (t, 8);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#300: FILE: crypto/devices/padlock-aes.c:210:
+		il_tab[2][i] = rotl (t, 16);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#301: FILE: crypto/devices/padlock-aes.c:211:
+		il_tab[3][i] = rotl (t, 24);

CHECK:SPACING: No space is necessary after a cast
#303: FILE: crypto/devices/padlock-aes.c:213:
+		t = ((u32) ff_mult (14, p)) |

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#303: FILE: crypto/devices/padlock-aes.c:213:
+		t = ((u32) ff_mult (14, p)) |

CHECK:SPACING: No space is necessary after a cast
#304: FILE: crypto/devices/padlock-aes.c:214:
+		    ((u32) ff_mult (9, p) << 8) |

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#304: FILE: crypto/devices/padlock-aes.c:214:
+		    ((u32) ff_mult (9, p) << 8) |

CHECK:SPACING: No space is necessary after a cast
#305: FILE: crypto/devices/padlock-aes.c:215:
+		    ((u32) ff_mult (13, p) << 16) |

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#305: FILE: crypto/devices/padlock-aes.c:215:
+		    ((u32) ff_mult (13, p) << 16) |

CHECK:SPACING: No space is necessary after a cast
#306: FILE: crypto/devices/padlock-aes.c:216:
+		    ((u32) ff_mult (11, p) << 24);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#306: FILE: crypto/devices/padlock-aes.c:216:
+		    ((u32) ff_mult (11, p) << 24);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#309: FILE: crypto/devices/padlock-aes.c:219:
+		it_tab[1][i] = rotl (t, 8);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#310: FILE: crypto/devices/padlock-aes.c:220:
+		it_tab[2][i] = rotl (t, 16);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#311: FILE: crypto/devices/padlock-aes.c:221:
+		it_tab[3][i] = rotl (t, 24);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#315: FILE: crypto/devices/padlock-aes.c:225:
+#define star_x(x) (((x) & 0x7f7f7f7f) << 1) ^ ((((x) & 0x80808080) >> 7) * 0x1b)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#315: FILE: crypto/devices/padlock-aes.c:225:
+#define star_x(x) (((x) & 0x7f7f7f7f) << 1) ^ ((((x) & 0x80808080) >> 7) * 0x1b)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#317: FILE: crypto/devices/padlock-aes.c:227:
+#define imix_col(y,x)       \
                   ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#317: FILE: crypto/devices/padlock-aes.c:227:
+#define imix_col(y,x)       \
+    u   = star_x(x);        \
+    v   = star_x(u);        \
+    w   = star_x(v);        \
+    t   = w ^ (x);          \
+   (y)  = u ^ v ^ w;        \
+   (y) ^= rotr(u ^ t,  8) ^ \
+          rotr(v ^ t, 16) ^ \
+          rotr(t,24)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#317: FILE: crypto/devices/padlock-aes.c:227:
+#define imix_col(y,x)       \
+    u   = star_x(x);        \
+    v   = star_x(u);        \
+    w   = star_x(v);        \
+    t   = w ^ (x);          \
+   (y)  = u ^ v ^ w;        \
+   (y) ^= rotr(u ^ t,  8) ^ \
+          rotr(v ^ t, 16) ^ \
+          rotr(t,24)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#317: FILE: crypto/devices/padlock-aes.c:227:
+#define imix_col(y,x)       \
+    u   = star_x(x);        \
+    v   = star_x(u);        \
+    w   = star_x(v);        \
+    t   = w ^ (x);          \
+   (y)  = u ^ v ^ w;        \
+   (y) ^= rotr(u ^ t,  8) ^ \
+          rotr(v ^ t, 16) ^ \
+          rotr(t,24)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#318: FILE: crypto/devices/padlock-aes.c:228:
+    u   = star_x(x);        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: crypto/devices/padlock-aes.c:229:
+    v   = star_x(u);        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: crypto/devices/padlock-aes.c:230:
+    w   = star_x(v);        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#321: FILE: crypto/devices/padlock-aes.c:231:
+    t   = w ^ (x);          \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: crypto/devices/padlock-aes.c:232:
+   (y)  = u ^ v ^ w;        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#323: FILE: crypto/devices/padlock-aes.c:233:
+   (y) ^= rotr(u ^ t,  8) ^ \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#324: FILE: crypto/devices/padlock-aes.c:234:
+          rotr(v ^ t, 16) ^ \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: crypto/devices/padlock-aes.c:234:
+          rotr(v ^ t, 16) ^ \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#325: FILE: crypto/devices/padlock-aes.c:235:
+          rotr(t,24)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: crypto/devices/padlock-aes.c:235:
+          rotr(t,24)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#325: FILE: crypto/devices/padlock-aes.c:235:
+          rotr(t,24)
                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#329: FILE: crypto/devices/padlock-aes.c:239:
+#define loop4(i)                                    \
+{   t = rotr(t,  8); t = ls_box(t) ^ rco_tab[i];    \
+    t ^= E_KEY[4 * i];     E_KEY[4 * i + 4] = t;    \
+    t ^= E_KEY[4 * i + 1]; E_KEY[4 * i + 5] = t;    \
+    t ^= E_KEY[4 * i + 2]; E_KEY[4 * i + 6] = t;    \
+    t ^= E_KEY[4 * i + 3]; E_KEY[4 * i + 7] = t;    \
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: crypto/devices/padlock-aes.c:241:
+    t ^= E_KEY[4 * i];     E_KEY[4 * i + 4] = t;    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: crypto/devices/padlock-aes.c:242:
+    t ^= E_KEY[4 * i + 1]; E_KEY[4 * i + 5] = t;    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#333: FILE: crypto/devices/padlock-aes.c:243:
+    t ^= E_KEY[4 * i + 2]; E_KEY[4 * i + 6] = t;    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#334: FILE: crypto/devices/padlock-aes.c:244:
+    t ^= E_KEY[4 * i + 3]; E_KEY[4 * i + 7] = t;    \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#337: FILE: crypto/devices/padlock-aes.c:247:
+#define loop6(i)                                    \
+{   t = rotr(t,  8); t = ls_box(t) ^ rco_tab[i];    \
+    t ^= E_KEY[6 * i];     E_KEY[6 * i + 6] = t;    \
+    t ^= E_KEY[6 * i + 1]; E_KEY[6 * i + 7] = t;    \
+    t ^= E_KEY[6 * i + 2]; E_KEY[6 * i + 8] = t;    \
+    t ^= E_KEY[6 * i + 3]; E_KEY[6 * i + 9] = t;    \
+    t ^= E_KEY[6 * i + 4]; E_KEY[6 * i + 10] = t;   \
+    t ^= E_KEY[6 * i + 5]; E_KEY[6 * i + 11] = t;   \
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#339: FILE: crypto/devices/padlock-aes.c:249:
+    t ^= E_KEY[6 * i];     E_KEY[6 * i + 6] = t;    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#340: FILE: crypto/devices/padlock-aes.c:250:
+    t ^= E_KEY[6 * i + 1]; E_KEY[6 * i + 7] = t;    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: crypto/devices/padlock-aes.c:251:
+    t ^= E_KEY[6 * i + 2]; E_KEY[6 * i + 8] = t;    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#342: FILE: crypto/devices/padlock-aes.c:252:
+    t ^= E_KEY[6 * i + 3]; E_KEY[6 * i + 9] = t;    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: crypto/devices/padlock-aes.c:253:
+    t ^= E_KEY[6 * i + 4]; E_KEY[6 * i + 10] = t;   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#344: FILE: crypto/devices/padlock-aes.c:254:
+    t ^= E_KEY[6 * i + 5]; E_KEY[6 * i + 11] = t;   \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#347: FILE: crypto/devices/padlock-aes.c:257:
+#define loop8(i)                                    \
+{   t = rotr(t,  8); ; t = ls_box(t) ^ rco_tab[i];  \
+    t ^= E_KEY[8 * i];     E_KEY[8 * i + 8] = t;    \
+    t ^= E_KEY[8 * i + 1]; E_KEY[8 * i + 9] = t;    \
+    t ^= E_KEY[8 * i + 2]; E_KEY[8 * i + 10] = t;   \
+    t ^= E_KEY[8 * i + 3]; E_KEY[8 * i + 11] = t;   \
+    t  = E_KEY[8 * i + 4] ^ ls_box(t);    \
+    E_KEY[8 * i + 12] = t;                \
+    t ^= E_KEY[8 * i + 5]; E_KEY[8 * i + 13] = t;   \
+    t ^= E_KEY[8 * i + 6]; E_KEY[8 * i + 14] = t;   \
+    t ^= E_KEY[8 * i + 7]; E_KEY[8 * i + 15] = t;   \
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#349: FILE: crypto/devices/padlock-aes.c:259:
+    t ^= E_KEY[8 * i];     E_KEY[8 * i + 8] = t;    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#350: FILE: crypto/devices/padlock-aes.c:260:
+    t ^= E_KEY[8 * i + 1]; E_KEY[8 * i + 9] = t;    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#351: FILE: crypto/devices/padlock-aes.c:261:
+    t ^= E_KEY[8 * i + 2]; E_KEY[8 * i + 10] = t;   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#352: FILE: crypto/devices/padlock-aes.c:262:
+    t ^= E_KEY[8 * i + 3]; E_KEY[8 * i + 11] = t;   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#353: FILE: crypto/devices/padlock-aes.c:263:
+    t  = E_KEY[8 * i + 4] ^ ls_box(t);    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: crypto/devices/padlock-aes.c:264:
+    E_KEY[8 * i + 12] = t;                \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#355: FILE: crypto/devices/padlock-aes.c:265:
+    t ^= E_KEY[8 * i + 5]; E_KEY[8 * i + 13] = t;   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: crypto/devices/padlock-aes.c:266:
+    t ^= E_KEY[8 * i + 6]; E_KEY[8 * i + 14] = t;   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#357: FILE: crypto/devices/padlock-aes.c:267:
+    t ^= E_KEY[8 * i + 7]; E_KEY[8 * i + 15] = t;   \$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#368: FILE: crypto/devices/padlock-aes.c:278:
+	printk("%s() PadLock\n", __func__);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#381: FILE: crypto/devices/padlock-aes.c:291:
+		ctx->E += 4 - (((int)(ctx->e_data) & 0x0F) / sizeof (ctx->e_data[0]));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#384: FILE: crypto/devices/padlock-aes.c:294:
+		ctx->D += 4 - (((int)(ctx->d_data) & 0x0F) / sizeof (ctx->d_data[0]));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#386: FILE: crypto/devices/padlock-aes.c:296:
+	E_KEY[0] = u32_in (in_key);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#387: FILE: crypto/devices/padlock-aes.c:297:
+	E_KEY[1] = u32_in (in_key + 4);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#388: FILE: crypto/devices/padlock-aes.c:298:
+	E_KEY[2] = u32_in (in_key + 8);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#389: FILE: crypto/devices/padlock-aes.c:299:
+	E_KEY[3] = u32_in (in_key + 12);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#399: FILE: crypto/devices/padlock-aes.c:309:
+			loop4 (i);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#403: FILE: crypto/devices/padlock-aes.c:313:
+		E_KEY[4] = u32_in (in_key + 16);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#404: FILE: crypto/devices/padlock-aes.c:314:
+		t = E_KEY[5] = u32_in (in_key + 20);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#404: FILE: crypto/devices/padlock-aes.c:314:
+		t = E_KEY[5] = u32_in (in_key + 20);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#406: FILE: crypto/devices/padlock-aes.c:316:
+			loop6 (i);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#410: FILE: crypto/devices/padlock-aes.c:320:
+		E_KEY[4] = u32_in (in_key + 16);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#411: FILE: crypto/devices/padlock-aes.c:321:
+		E_KEY[5] = u32_in (in_key + 20);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#412: FILE: crypto/devices/padlock-aes.c:322:
+		E_KEY[6] = u32_in (in_key + 24);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#413: FILE: crypto/devices/padlock-aes.c:323:
+		t = E_KEY[7] = u32_in (in_key + 28);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#413: FILE: crypto/devices/padlock-aes.c:323:
+		t = E_KEY[7] = u32_in (in_key + 28);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#415: FILE: crypto/devices/padlock-aes.c:325:
+			loop8 (i);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#424: FILE: crypto/devices/padlock-aes.c:334:
+	for (i = 4; i < key_len + 24; ++i) {
+		imix_col (D_KEY[i], E_KEY[i]);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#425: FILE: crypto/devices/padlock-aes.c:335:
+		imix_col (D_KEY[i], E_KEY[i]);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#449: FILE: crypto/devices/padlock-aes.c:359:
+/* Tells whether the ACE is capable to generate
+   the extended key for a given key_len. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#449: FILE: crypto/devices/padlock-aes.c:359:
+   the extended key for a given key_len. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#453: FILE: crypto/devices/padlock-aes.c:363:
+^I         as it's likely that the capability will be$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#453: FILE: crypto/devices/padlock-aes.c:363:
+	/* TODO: We should check the actual CPU model/stepping
+	         as it's likely that the capability will be

ERROR:CODE_INDENT: code indent should use tabs where possible
#454: FILE: crypto/devices/padlock-aes.c:364:
+^I         added in the next CPU revisions. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#454: FILE: crypto/devices/padlock-aes.c:364:
+	         added in the next CPU revisions. */

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#471: FILE: crypto/devices/padlock-aes.c:381:
+		cword = (void*)(bigbuf + 16 - ((long)bigbuf & 0x0F));

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#473: FILE: crypto/devices/padlock-aes.c:383:
+		cword = (void*)bigbuf;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#476: FILE: crypto/devices/padlock-aes.c:386:
+	memset (cword, 0, sizeof(union cword));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#486: FILE: crypto/devices/padlock-aes.c:396:
+	/* ctx->E starts with a plain key - if the hardware is capable
+	   to generate the extended key itself we must supply

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#487: FILE: crypto/devices/padlock-aes.c:397:
+	   the plain key for both Encryption and Decryption. */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#533: FILE: crypto/devices/padlock-aes.c:443:
+	aes_padlock (ctx_arg, out, in, NULL, AES_BLOCK_SIZE,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#549: FILE: crypto/devices/padlock-aes.c:459:
+^I^I^I.cia_setkey^I   ^I= ^Iaes_set_key,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#550: FILE: crypto/devices/padlock-aes.c:460:
+^I^I^I.cia_encrypt^I ^I=^Iaes_encrypt,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#551: FILE: crypto/devices/padlock-aes.c:461:
+^I^I^I.cia_decrypt^I  ^I=^Iaes_decrypt$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#556: FILE: crypto/devices/padlock-aes.c:466:
+static int disable_multiblock = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#572: FILE: crypto/devices/padlock-aes.c:482:
+	printk(KERN_NOTICE PFX

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#588: FILE: crypto/devices/padlock-generic.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#657: FILE: crypto/devices/padlock-generic.c:70:
+	/* Don't blindly modify this structure - the items must
+	   fit on 16-Bytes boundaries! */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#657: FILE: crypto/devices/padlock-generic.c:70:
+	   fit on 16-Bytes boundaries! */

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#669: FILE: crypto/devices/padlock-generic.c:82:
+		data = (void*)(bigbuf + 16 - ((long)bigbuf & 0x0F));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#671: FILE: crypto/devices/padlock-generic.c:84:
+		data = (void*)bigbuf;

CHECK:BRACES: braces {} should be used on all arms of this statement
#673: FILE: crypto/devices/padlock-generic.c:86:
+	if (((long)in_arg) & 0x0F) {
[...]
+	else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#677: FILE: crypto/devices/padlock-generic.c:90:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#678: FILE: crypto/devices/padlock-generic.c:91:
+		in = (u8*)in_arg;

CHECK:BRACES: braces {} should be used on all arms of this statement
#680: FILE: crypto/devices/padlock-generic.c:93:
+	if (((long)out_arg) & 0x0F) {
[...]
+	else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#686: FILE: crypto/devices/padlock-generic.c:99:
+	}
+	else

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#694: FILE: crypto/devices/padlock-generic.c:107:
+	switch (mode) {
+		case CRYPTO_TFM_MODE_ECB:
[...]
+		case CRYPTO_TFM_MODE_CBC:
[...]
+		case CRYPTO_TFM_MODE_CFB:
[...]
+		case CRYPTO_TFM_MODE_OFB:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#696: FILE: crypto/devices/padlock-generic.c:109:
+			padlock_xcrypt_ecb(in, out, key, iv, cword, nbytes/blocksize);
 			                                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#700: FILE: crypto/devices/padlock-generic.c:113:
+			padlock_xcrypt_cbc(in, out, key, iv, cword, nbytes/blocksize);
 			                                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#704: FILE: crypto/devices/padlock-generic.c:117:
+			padlock_xcrypt_cfb(in, out, key, iv, cword, nbytes/blocksize);
 			                                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#708: FILE: crypto/devices/padlock-generic.c:121:
+			padlock_xcrypt_ofb(in, out, key, iv, cword, nbytes/blocksize);
 			                                                  ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#712: FILE: crypto/devices/padlock-generic.c:125:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#720: FILE: crypto/devices/padlock-generic.c:133:
+	if (index)
+		kfree(index);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#725: FILE: crypto/devices/padlock-generic.c:138:
+	int ret = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#728: FILE: crypto/devices/padlock-generic.c:141:
+		printk(KERN_ERR PFX "VIA PadLock not detected.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#733: FILE: crypto/devices/padlock-generic.c:146:
+		printk(KERN_ERR PFX "VIA PadLock detected, but not enabled. Hmm, strange...\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#738: FILE: crypto/devices/padlock-generic.c:151:
+	if ((ret = padlock_init_aes())) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#739: FILE: crypto/devices/padlock-generic.c:152:
+		printk(KERN_ERR PFX "VIA PadLock AES initialization failed.\n");

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#744: FILE: crypto/devices/padlock-generic.c:157:
+	if (ret == -ENOSYS)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#745: FILE: crypto/devices/padlock-generic.c:158:
+		printk(KERN_ERR PFX "Hmm, VIA PadLock was compiled without any algorithm.\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#767: FILE: crypto/devices/padlock.h:1:
+/*

WARNING:TYPO_SPELLING: 'interm' may be misspelled - perhaps 'interim'?
#789: FILE: crypto/devices/padlock.h:23:
+		int interm:1;
 		    ^^^^^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000282710.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 54 errors, 126 warnings, 43 checks, 750 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000282710.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
