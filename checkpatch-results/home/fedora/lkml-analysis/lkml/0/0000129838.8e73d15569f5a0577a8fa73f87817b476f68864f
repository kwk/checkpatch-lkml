ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#80: FILE: include/linux/ktimeout.h:34:
+void fastcall init_ktimeout(struct ktimeout * ktimeout);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#83: FILE: include/linux/ktimeout.h:36:
+static inline void setup_ktimeout(struct ktimeout * ktimeout,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#84: FILE: include/linux/ktimeout.h:37:
+static inline void setup_ktimeout(struct ktimeout * ktimeout,
 				void (*function)(unsigned long),

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#111: FILE: include/linux/ktimeout.h:55:
+static inline int ktimeout_pending(const struct ktimeout * ktimeout)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ktimeout->entry.next"
#114: FILE: include/linux/ktimeout.h:57:
+	return ktimeout->entry.next != NULL;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#121: FILE: include/linux/ktimeout.h:60:
+extern void add_ktimeout_on(struct ktimeout *ktimeout, int cpu);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#122: FILE: include/linux/ktimeout.h:61:
+extern int del_ktimeout(struct ktimeout * ktimeout);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#122: FILE: include/linux/ktimeout.h:61:
+extern int del_ktimeout(struct ktimeout * ktimeout);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#123: FILE: include/linux/ktimeout.h:62:
+extern int __mod_ktimeout(struct ktimeout *ktimeout, unsigned long expires);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#124: FILE: include/linux/ktimeout.h:63:
+extern int mod_ktimeout(struct ktimeout *ktimeout, unsigned long expires);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#127: FILE: include/linux/ktimeout.h:65:
+extern unsigned long next_ktimeout_interrupt(void);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#153: FILE: include/linux/ktimeout.h:83:
+	BUG_ON(ktimeout_pending(ktimeout));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: include/linux/ktimeout.h:88:
+  extern int try_to_del_ktimeout_sync(struct ktimeout *ktimeout);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#160: FILE: include/linux/ktimeout.h:88:
+  extern int try_to_del_ktimeout_sync(struct ktimeout *ktimeout);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: include/linux/ktimeout.h:89:
+  extern int del_ktimeout_sync(struct ktimeout *ktimeout);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#161: FILE: include/linux/ktimeout.h:89:
+  extern int del_ktimeout_sync(struct ktimeout *ktimeout);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#174: FILE: include/linux/ktimeout.h:97:
+extern void init_ktimeouts(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#175: FILE: include/linux/ktimeout.h:98:
+extern void run_local_ktimeouts(void);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#194: FILE: include/linux/timer.h:17:
+#define TIMER_INITIALIZER^I^IKTIMEOUT_INITIALIZER $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000129838.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 3 warnings, 11 checks, 167 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000129838.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
