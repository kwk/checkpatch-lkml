WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#82: FILE: char/drm/drmP.h:38:
+ * before static inline funcs in wait.h. 4/21/2000 S + B */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#92: FILE: char/drm/drmP.h:56:
+#include <asm/pgtable.h> /* For pte_wrprotect */

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#105: FILE: char/drm/drmP.h:145:
+#define module_init(x)  int init_module(void) { return x(); }

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#112: FILE: char/drm/drmP.h:152:
+#if LINUX_VERSION_CODE < 0x020400

WARNING:INLINE: plain inline is preferred over __inline__
#121: FILE: char/drm/drmP.h:161:
+static __inline__ unsigned long

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#122: FILE: char/drm/drmP.h:162:
+__cmpxchg_u32(volatile int *m, int old, int new)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#126: FILE: char/drm/drmP.h:166:
+	__asm__ __volatile__(

CHECK:SPACING: No space is necessary after a cast
#138: FILE: char/drm/drmP.h:178:
+	: "r"((long) old), "r"(new), "m"(*m));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INLINE: plain inline is preferred over __inline__
#143: FILE: char/drm/drmP.h:183:
+static __inline__ unsigned long

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#144: FILE: char/drm/drmP.h:184:
+__cmpxchg_u64(volatile long *m, unsigned long old, unsigned long new)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#148: FILE: char/drm/drmP.h:188:
+	__asm__ __volatile__(

CHECK:SPACING: No space is necessary after a cast
#160: FILE: char/drm/drmP.h:200:
+	: "r"((long) old), "r"(new), "m"(*m));

WARNING:INLINE: plain inline is preferred over __inline__
#165: FILE: char/drm/drmP.h:205:
+static __inline__ unsigned long

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#166: FILE: char/drm/drmP.h:206:
+__cmpxchg(volatile void *ptr, unsigned long old, unsigned long new, int size)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#168: FILE: char/drm/drmP.h:208:
+	switch (size) {
+		case 4:
[...]
+		case 8:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#176: FILE: char/drm/drmP.h:216:
+}
+#define cmpxchg(ptr,o,n)						 \

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#176: FILE: char/drm/drmP.h:216:
+#define cmpxchg(ptr,o,n)						 \
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#176: FILE: char/drm/drmP.h:216:
+#define cmpxchg(ptr,o,n)						 \
                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#176: FILE: char/drm/drmP.h:216:
+#define cmpxchg(ptr,o,n)						 \
+  ({									 \
+     __typeof__(*(ptr)) _o_ = (o);					 \
+     __typeof__(*(ptr)) _n_ = (n);					 \
+     (__typeof__(*(ptr))) __cmpxchg((ptr), (unsigned long)_o_,		 \
+				    (unsigned long)_n_, sizeof(*(ptr))); \
+  })

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: char/drm/drmP.h:217:
+  ({^I^I^I^I^I^I^I^I^I \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: char/drm/drmP.h:218:
+     __typeof__(*(ptr)) _o_ = (o);^I^I^I^I^I \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: char/drm/drmP.h:219:
+     __typeof__(*(ptr)) _n_ = (n);^I^I^I^I^I \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: char/drm/drmP.h:220:
+     (__typeof__(*(ptr))) __cmpxchg((ptr), (unsigned long)_o_,^I^I \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: char/drm/drmP.h:222:
+  })$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#202: FILE: char/drm/drmP.h:434:
+^Iint ^I^I  remove_auth_on_close;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#208: FILE: char/drm/drmP.h:643:
+extern unsigned long drm_vm_shm_nopage_lock(struct vm_area_struct *vma,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#216: FILE: char/drm/drmP.h:657:
+extern struct page *drm_vm_shm_nopage_lock(struct vm_area_struct *vma,

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: char/drm/mga_drm.h:77:
+#define MGA_CTXREG_MACCESS    1^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#250: FILE: char/drm/mga_drm.h:78:
+#define MGA_CTXREG_PLNWT      2 ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#250: FILE: char/drm/mga_drm.h:78:
+#define MGA_CTXREG_PLNWT      2 ^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#251: FILE: char/drm/mga_drm.h:79:
+#define MGA_CTXREG_DWGCTL     3^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#266: FILE: char/drm/mga_drm.h:238:
+   ^Iint vertexsize;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#266: FILE: char/drm/mga_drm.h:238:
+   ^Iint vertexsize;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#266: FILE: char/drm/mga_drm.h:238:
+   ^Iint vertexsize;$

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

ERROR:CODE_INDENT: code indent should use tabs where possible
#285: FILE: char/drm/mga_drv.h:42:
+   ^Iint num_dwords;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#285: FILE: char/drm/mga_drv.h:42:
+   ^Iint num_dwords;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: char/drm/mga_drv.h:42:
+   ^Iint num_dwords;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#286: FILE: char/drm/mga_drv.h:43:
+   ^Iint max_dwords;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#286: FILE: char/drm/mga_drv.h:43:
+   ^Iint max_dwords;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: char/drm/mga_drv.h:43:
+   ^Iint max_dwords;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#293: FILE: char/drm/mga_drv.h:53:
+   ^I__volatile__ unsigned int age;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#293: FILE: char/drm/mga_drv.h:53:
+   ^I__volatile__ unsigned int age;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#293: FILE: char/drm/mga_drv.h:53:
+   ^I__volatile__ unsigned int age;$

WARNING:MEMORY_BARRIER: memory barrier without comment
#311: FILE: char/drm/mga_drv.h:182:
+#define mga_flush_write_combine()	mb()

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#330: FILE: char/drm/mga_drv.h:213:
+#define PRIM_OVERFLOW(dev, dev_priv, length) do {			   \
+	drm_mga_prim_buf_t *tmp_buf =					   \
+ 		dev_priv->prim_bufs[dev_priv->current_prim_idx];	   \
+	if( test_bit(MGA_BUF_NEEDS_OVERFLOW, &tmp_buf->buffer_status)) {   \
+ 		mga_advance_primary(dev);				   \
+ 		mga_dma_schedule(dev, 1);				   \
+		tmp_buf = dev_priv->prim_bufs[dev_priv->current_prim_idx]; \
+ 	} else if( tmp_buf->max_dwords - tmp_buf->num_dwords < length ||   \
+ 	           tmp_buf->sec_used > MGA_DMA_BUF_NR/2) {		   \
+		set_bit(MGA_BUF_FORCE_FIRE, &tmp_buf->buffer_status);	   \
+ 		mga_advance_primary(dev);				   \
+ 		mga_dma_schedule(dev, 1);				   \
+		tmp_buf = dev_priv->prim_bufs[dev_priv->current_prim_idx]; \
+	}								   \
+	if(MGA_VERBOSE)							   \
+		DRM_DEBUG("PRIMGETPTR in %s\n", __FUNCTION__);		   \
+	dma_ptr = tmp_buf->current_dma_ptr;				   \
+	num_dwords = tmp_buf->num_dwords;				   \
+	phys_head = tmp_buf->phys_head;					   \
+	outcount = 0;							   \
 } while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev_priv' - possible side-effects?
#330: FILE: char/drm/mga_drv.h:213:
+#define PRIM_OVERFLOW(dev, dev_priv, length) do {			   \
+	drm_mga_prim_buf_t *tmp_buf =					   \
+ 		dev_priv->prim_bufs[dev_priv->current_prim_idx];	   \
+	if( test_bit(MGA_BUF_NEEDS_OVERFLOW, &tmp_buf->buffer_status)) {   \
+ 		mga_advance_primary(dev);				   \
+ 		mga_dma_schedule(dev, 1);				   \
+		tmp_buf = dev_priv->prim_bufs[dev_priv->current_prim_idx]; \
+ 	} else if( tmp_buf->max_dwords - tmp_buf->num_dwords < length ||   \
+ 	           tmp_buf->sec_used > MGA_DMA_BUF_NR/2) {		   \
+		set_bit(MGA_BUF_FORCE_FIRE, &tmp_buf->buffer_status);	   \
+ 		mga_advance_primary(dev);				   \
+ 		mga_dma_schedule(dev, 1);				   \
+		tmp_buf = dev_priv->prim_bufs[dev_priv->current_prim_idx]; \
+	}								   \
+	if(MGA_VERBOSE)							   \
+		DRM_DEBUG("PRIMGETPTR in %s\n", __FUNCTION__);		   \
+	dma_ptr = tmp_buf->current_dma_ptr;				   \
+	num_dwords = tmp_buf->num_dwords;				   \
+	phys_head = tmp_buf->phys_head;					   \
+	outcount = 0;							   \
 } while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dev_priv' may be better as '(dev_priv)' to avoid precedence issues
#330: FILE: char/drm/mga_drv.h:213:
+#define PRIM_OVERFLOW(dev, dev_priv, length) do {			   \
+	drm_mga_prim_buf_t *tmp_buf =					   \
+ 		dev_priv->prim_bufs[dev_priv->current_prim_idx];	   \
+	if( test_bit(MGA_BUF_NEEDS_OVERFLOW, &tmp_buf->buffer_status)) {   \
+ 		mga_advance_primary(dev);				   \
+ 		mga_dma_schedule(dev, 1);				   \
+		tmp_buf = dev_priv->prim_bufs[dev_priv->current_prim_idx]; \
+ 	} else if( tmp_buf->max_dwords - tmp_buf->num_dwords < length ||   \
+ 	           tmp_buf->sec_used > MGA_DMA_BUF_NR/2) {		   \
+		set_bit(MGA_BUF_FORCE_FIRE, &tmp_buf->buffer_status);	   \
+ 		mga_advance_primary(dev);				   \
+ 		mga_dma_schedule(dev, 1);				   \
+		tmp_buf = dev_priv->prim_bufs[dev_priv->current_prim_idx]; \
+	}								   \
+	if(MGA_VERBOSE)							   \
+		DRM_DEBUG("PRIMGETPTR in %s\n", __FUNCTION__);		   \
+	dma_ptr = tmp_buf->current_dma_ptr;				   \
+	num_dwords = tmp_buf->num_dwords;				   \
+	phys_head = tmp_buf->phys_head;					   \
+	outcount = 0;							   \
 } while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'length' may be better as '(length)' to avoid precedence issues
#330: FILE: char/drm/mga_drv.h:213:
+#define PRIM_OVERFLOW(dev, dev_priv, length) do {			   \
+	drm_mga_prim_buf_t *tmp_buf =					   \
+ 		dev_priv->prim_bufs[dev_priv->current_prim_idx];	   \
+	if( test_bit(MGA_BUF_NEEDS_OVERFLOW, &tmp_buf->buffer_status)) {   \
+ 		mga_advance_primary(dev);				   \
+ 		mga_dma_schedule(dev, 1);				   \
+		tmp_buf = dev_priv->prim_bufs[dev_priv->current_prim_idx]; \
+ 	} else if( tmp_buf->max_dwords - tmp_buf->num_dwords < length ||   \
+ 	           tmp_buf->sec_used > MGA_DMA_BUF_NR/2) {		   \
+		set_bit(MGA_BUF_FORCE_FIRE, &tmp_buf->buffer_status);	   \
+ 		mga_advance_primary(dev);				   \
+ 		mga_dma_schedule(dev, 1);				   \
+		tmp_buf = dev_priv->prim_bufs[dev_priv->current_prim_idx]; \
+	}								   \
+	if(MGA_VERBOSE)							   \
+		DRM_DEBUG("PRIMGETPTR in %s\n", __FUNCTION__);		   \
+	dma_ptr = tmp_buf->current_dma_ptr;				   \
+	num_dwords = tmp_buf->num_dwords;				   \
+	phys_head = tmp_buf->phys_head;					   \
+	outcount = 0;							   \
 } while(0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#332: FILE: char/drm/mga_drv.h:215:
+ ^I^Idev_priv->prim_bufs[dev_priv->current_prim_idx];^I   \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#332: FILE: char/drm/mga_drv.h:215:
+ ^I^Idev_priv->prim_bufs[dev_priv->current_prim_idx];^I   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: char/drm/mga_drv.h:215:
+ ^I^Idev_priv->prim_bufs[dev_priv->current_prim_idx];^I   \$

ERROR:SPACING: space prohibited after that open parenthesis '('
#333: FILE: char/drm/mga_drv.h:216:
+	if( test_bit(MGA_BUF_NEEDS_OVERFLOW, &tmp_buf->buffer_status)) {   \

ERROR:SPACING: space required before the open parenthesis '('
#333: FILE: char/drm/mga_drv.h:216:
+	if( test_bit(MGA_BUF_NEEDS_OVERFLOW, &tmp_buf->buffer_status)) {   \

ERROR:CODE_INDENT: code indent should use tabs where possible
#334: FILE: char/drm/mga_drv.h:217:
+ ^I^Imga_advance_primary(dev);^I^I^I^I   \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#334: FILE: char/drm/mga_drv.h:217:
+ ^I^Imga_advance_primary(dev);^I^I^I^I   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#334: FILE: char/drm/mga_drv.h:217:
+ ^I^Imga_advance_primary(dev);^I^I^I^I   \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#335: FILE: char/drm/mga_drv.h:218:
+ ^I^Imga_dma_schedule(dev, 1);^I^I^I^I   \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#335: FILE: char/drm/mga_drv.h:218:
+ ^I^Imga_dma_schedule(dev, 1);^I^I^I^I   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#335: FILE: char/drm/mga_drv.h:218:
+ ^I^Imga_dma_schedule(dev, 1);^I^I^I^I   \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#337: FILE: char/drm/mga_drv.h:220:
+ ^I} else if( tmp_buf->max_dwords - tmp_buf->num_dwords < length ||   \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#337: FILE: char/drm/mga_drv.h:220:
+ ^I} else if( tmp_buf->max_dwords - tmp_buf->num_dwords < length ||   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#337: FILE: char/drm/mga_drv.h:220:
+ ^I} else if( tmp_buf->max_dwords - tmp_buf->num_dwords < length ||   \$

ERROR:SPACING: space prohibited after that open parenthesis '('
#337: FILE: char/drm/mga_drv.h:220:
+ 	} else if( tmp_buf->max_dwords - tmp_buf->num_dwords < length ||   \

ERROR:SPACING: space required before the open parenthesis '('
#337: FILE: char/drm/mga_drv.h:220:
+ 	} else if( tmp_buf->max_dwords - tmp_buf->num_dwords < length ||   \

ERROR:CODE_INDENT: code indent should use tabs where possible
#338: FILE: char/drm/mga_drv.h:221:
+ ^I           tmp_buf->sec_used > MGA_DMA_BUF_NR/2) {^I^I   \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#338: FILE: char/drm/mga_drv.h:221:
+ ^I           tmp_buf->sec_used > MGA_DMA_BUF_NR/2) {^I^I   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#338: FILE: char/drm/mga_drv.h:221:
+ ^I           tmp_buf->sec_used > MGA_DMA_BUF_NR/2) {^I^I   \$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#338: FILE: char/drm/mga_drv.h:221:
+ 	           tmp_buf->sec_used > MGA_DMA_BUF_NR/2) {		   \
  	                                             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#340: FILE: char/drm/mga_drv.h:223:
+ ^I^Imga_advance_primary(dev);^I^I^I^I   \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#340: FILE: char/drm/mga_drv.h:223:
+ ^I^Imga_advance_primary(dev);^I^I^I^I   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#340: FILE: char/drm/mga_drv.h:223:
+ ^I^Imga_advance_primary(dev);^I^I^I^I   \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#341: FILE: char/drm/mga_drv.h:224:
+ ^I^Imga_dma_schedule(dev, 1);^I^I^I^I   \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#341: FILE: char/drm/mga_drv.h:224:
+ ^I^Imga_dma_schedule(dev, 1);^I^I^I^I   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: char/drm/mga_drv.h:224:
+ ^I^Imga_dma_schedule(dev, 1);^I^I^I^I   \$

ERROR:SPACING: space required before the open parenthesis '('
#344: FILE: char/drm/mga_drv.h:227:
+	if(MGA_VERBOSE)							   \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#345: FILE: char/drm/mga_drv.h:228:
+		DRM_DEBUG("PRIMGETPTR in %s\n", __FUNCTION__);		   \

CHECK:CAMELCASE: Avoid CamelCase: <tempIndex>
#356: FILE: char/drm/mga_drv.h:298:
+		dma_ptr[0] = *(unsigned long *)tempIndex;		\

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#446: FILE: char/drm/agpsupport.c:301:
+#if LINUX_VERSION_CODE >= 0x020400

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#447: FILE: char/drm/agpsupport.c:302:
+		case INTEL_I840:       head->chipset = "Intel i840";       break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#453: FILE: char/drm/agpsupport.c:308:
+#if LINUX_VERSION_CODE >= 0x020400

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#454: FILE: char/drm/agpsupport.c:309:
+		case VIA_MVP4:         head->chipset = "VIA MVP4";         break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#469: FILE: char/drm/agpsupport.c:323:
+		default:               head->chipset = "Unknown";          break;

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#571: FILE: char/drm/gamma_drv.c:60:
+#if LINUX_VERSION_CODE >= 0x020400

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

ERROR:TRAILING_WHITESPACE: trailing whitespace
#677: FILE: char/drm/lists.c:154:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#682: FILE: char/drm/lists.c:159:
+^I$

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#764: FILE: char/drm/memory.c:250:
+#if LINUX_VERSION_CODE >= 0x020400

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#775: FILE: char/drm/memory.c:276:
+#if LINUX_VERSION_CODE >= 0x020400

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#790: FILE: char/drm/mga_context.c:198:
+	if(ctx.handle == DRM_KERNEL_CONTEXT+1) {
 	                                   ^

ERROR:SPACING: space required before the open parenthesis '('
#790: FILE: char/drm/mga_context.c:198:
+	if(ctx.handle == DRM_KERNEL_CONTEXT+1) {

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

ERROR:SPACING: space required before the open parenthesis '('
#825: FILE: char/drm/mga_dma.c:67:
+	if(!page) return;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#825: FILE: char/drm/mga_dma.c:67:
+	if(!page) return;

WARNING:SPLIT_STRING: quoted string split across lines
#860: FILE: char/drm/mga_dma.c:162:
+			DRM_ERROR("lockup: dispatch_status = 0x%02x,"
+				  " jiffies = %lu, end = %lu\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#878: FILE: char/drm/mga_dma.c:217:
+		DRM_DEBUG("Waiting on freelist,"
+			  " tail->age = %d, last_prim_age= %d\n",

ERROR:SPACING: space required before the open parenthesis '('
#888: FILE: char/drm/mga_dma.c:225:
+			if(dev_priv->tail->age < dev_priv->last_prim_age)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#904: FILE: char/drm/mga_dma.c:237:
+		if (return_null) return NULL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#930: FILE: char/drm/mga_dma.c:325:
+^I   ^Iprim_buffer = drm_alloc(sizeof(drm_mga_prim_buf_t),$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#930: FILE: char/drm/mga_dma.c:325:
+^I   ^Iprim_buffer = drm_alloc(sizeof(drm_mga_prim_buf_t),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#997: FILE: char/drm/mga_dma.c:548:
+   ^Iif (!dev_priv) return -EBUSY;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#997: FILE: char/drm/mga_dma.c:548:
+   ^Iif (!dev_priv) return -EBUSY;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#997: FILE: char/drm/mga_dma.c:548:
+   ^Iif (!dev_priv) return -EBUSY;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#997: FILE: char/drm/mga_dma.c:548:
+   	if (!dev_priv) return -EBUSY;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#998: FILE: char/drm/mga_dma.c:549:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1065: FILE: char/drm/mga_dma.c:630:
+   ^Iwake_up_interruptible(&dev_priv->wait_queue);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1065: FILE: char/drm/mga_dma.c:630:
+   ^Iwake_up_interruptible(&dev_priv->wait_queue);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1065: FILE: char/drm/mga_dma.c:630:
+   ^Iwake_up_interruptible(&dev_priv->wait_queue);$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1082: FILE: char/drm/mga_dma.c:644:
+		if (dev->irq) mga_flush_queue(dev);

CHECK:CAMELCASE: Avoid CamelCase: <WarpPipe>
#1099: FILE: char/drm/mga_dma.c:724:
+	dev_priv->WarpPipe = 0xff000000;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1104: FILE: char/drm/mga_dma.c:727:
+   ^IDRM_DEBUG("chipset=%d ucode_size=%d backOffset=%x depthOffset=%x\n",$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1104: FILE: char/drm/mga_dma.c:727:
+   ^IDRM_DEBUG("chipset=%d ucode_size=%d backOffset=%x depthOffset=%x\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1104: FILE: char/drm/mga_dma.c:727:
+   ^IDRM_DEBUG("chipset=%d ucode_size=%d backOffset=%x depthOffset=%x\n",$

CHECK:CAMELCASE: Avoid CamelCase: <WarpIndex>
#1120: FILE: char/drm/mga_dma.c:734:
+	memcpy(&dev_priv->WarpIndex, &init->WarpIndex,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1128: FILE: char/drm/mga_dma.c:905:
+   ^Iif(!dev_priv) return 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1128: FILE: char/drm/mga_dma.c:905:
+   ^Iif(!dev_priv) return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1128: FILE: char/drm/mga_dma.c:905:
+   ^Iif(!dev_priv) return 0;$

ERROR:SPACING: space required before the open parenthesis '('
#1128: FILE: char/drm/mga_dma.c:905:
+   	if(!dev_priv) return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1128: FILE: char/drm/mga_dma.c:905:
+   	if(!dev_priv) return 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1137: FILE: char/drm/mga_dma.c:909:
+^I^Iif (test_bit(MGA_IN_FLUSH, &dev_priv->dispatch_status)) $

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mga_flush_queue', this function's name, in a string
#1138: FILE: char/drm/mga_dma.c:910:
+			DRM_ERROR("Incorrect mga_flush_queue logic\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1150: FILE: char/drm/mga_dma.c:944:
+^I$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1169: FILE: char/drm/mga_dma.c:1027:
+	if (ret) DRM_DEBUG("%d %s\n", lock.context,

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#1193: FILE: char/drm/mga_drv.c:55:
+#if LINUX_VERSION_CODE >= 0x020400

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1200: FILE: char/drm/mga_drv.c:226:
+	if (dev->dev_private) mga_dma_cleanup(dev);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1226: FILE: char/drm/mga_drv.c:528:
+^I^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1262: FILE: char/drm/mga_drv.c:574:
+		drm_file_t *temp = dev->file_first;
+		while(temp) {

ERROR:SPACING: space required before the open parenthesis '('
#1262: FILE: char/drm/mga_drv.c:574:
+		while(temp) {

WARNING:SPLIT_STRING: quoted string split across lines
#1274: FILE: char/drm/mga_drv.c:637:
+			DRM_DEBUG("no function: pid = %d, cmd = 0x%02x,"
+				  " nr = 0x%02x, dev 0x%x, auth = %d\n",

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1292: FILE: char/drm/mga_state.c:43:
+#define MGAG200EMITTEX_SIZE ^I20$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1376: FILE: char/drm/mga_state.c:158:
+#define TMC_dualtex_enable ^I^I0x80$

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1571: FILE: char/drm/mga_state.c:557:
+#if 0

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:MEMORY_BARRIER: memory barrier without comment
#1736: FILE: char/drm/r128_dma.c:71:
+#define r128_flush_write_combine()	mb()

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#1763: FILE: char/drm/r128_drv.c:54:
+#if LINUX_VERSION_CODE >= 0x020400

ERROR:CODE_INDENT: code indent should use tabs where possible
#1770: FILE: char/drm/r128_drv.c:610:
+                        current->state = TASK_INTERRUPTIBLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1770: FILE: char/drm/r128_drv.c:610:
+                        current->state = TASK_INTERRUPTIBLE;$

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

ERROR:CODE_INDENT: code indent should use tabs where possible
#1789: FILE: char/drm/tdfx_drv.c:569:
+                        current->state = TASK_INTERRUPTIBLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1789: FILE: char/drm/tdfx_drv.c:569:
+                        current->state = TASK_INTERRUPTIBLE;$

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#1808: FILE: char/drm/vm.c:47:
+struct vm_operations_struct   drm_vm_shm_lock_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#1809: FILE: char/drm/vm.c:48:
+	nopage:	 drm_vm_shm_nopage_lock,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1810: FILE: char/drm/vm.c:49:
+	open:	 drm_vm_open,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#1810: FILE: char/drm/vm.c:49:
+	open:	 drm_vm_open,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1811: FILE: char/drm/vm.c:50:
+	close:	 drm_vm_close,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#1811: FILE: char/drm/vm.c:50:
+	close:	 drm_vm_close,

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#1819: FILE: char/drm/vm.c:86:
+#if LINUX_VERSION_CODE >= 0x020300

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1827: FILE: char/drm/vm.c:94:
+	if (address > vma->vm_end) return NOPAGE_SIGBUS; /* Disallow mremap */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1828: FILE: char/drm/vm.c:95:
+^Iif (!map)    ^I^I   return NOPAGE_OOM;  /* Nothing allocated */$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1828: FILE: char/drm/vm.c:95:
+	if (!map)    		   return NOPAGE_OOM;  /* Nothing allocated */

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#1835: FILE: char/drm/vm.c:102:
+#if LINUX_VERSION_CODE < 0x020317

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#1842: FILE: char/drm/vm.c:109:
+#if LINUX_VERSION_CODE < 0x020317

CHECK:BRACES: braces {} should be used on all arms of this statement
#1902: FILE: char/drm/vm.c:344:
+		if (map->flags & _DRM_CONTAINS_LOCK)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1904: FILE: char/drm/vm.c:346:
+		else {

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#1906: FILE: char/drm/vm.c:348:
+#if LINUX_VERSION_CODE >= 0x020300

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000565690.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 54 errors, 101 warnings, 19 checks, 1654 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000565690.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
