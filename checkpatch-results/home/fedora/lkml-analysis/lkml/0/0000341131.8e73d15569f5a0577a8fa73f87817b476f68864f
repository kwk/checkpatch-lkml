WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#56: 
Sure it not the same info it is only part of it. I do not know if libsensor=

WARNING:TYPO_SPELLING: 'tha' may be misspelled - perhaps 'than'?
#108: 
/sys/class/i2-adapter/isa/... would be better, apparently it is assumed tha=
                                                                        ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'easer' may be misspelled - perhaps 'easier'?
#116: 
> devices and attributes in the sysfs tree a whole lot easer.
                                                       ^^^^^

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#223: FILE: drivers/i2c/chips/adm1021.c:314:
+	strlcpy(new_client->name, type_name, DEVICE_NAME_SIZE);

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#289: FILE: drivers/i2c/chips/lm85.c:869:
+	strlcpy(new_client->name, type_name, DEVICE_NAME_SIZE);

WARNING:STATIC_CONST_CHAR_ARRAY: const array should probably be static const
#300: FILE: drivers/i2c/chips/via686a.c:674:
+	const char client_name[] = "via686a";

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#379: FILE: lib/proc.c:65:
+static char sysfs_i2c_bus[] = "/sys/bus/i2c/devices";

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#380: FILE: lib/proc.c:66:
+static char sysfs_i2c_class[] = "/sys/class/i2c-adapter";

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#385: FILE: lib/proc.c:71:
+  DIR *dir;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#386: FILE: lib/proc.c:72:
+  struct dirent *dentry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#387: FILE: lib/proc.c:73:
+  char path[256], buf[256];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#388: FILE: lib/proc.c:74:
+  FILE *f;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#389: FILE: lib/proc.c:75:
+  int len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#390: FILE: lib/proc.c:76:
+  sensors_proc_chips_entry entry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#392: FILE: lib/proc.c:78:
+  if ((dir = opendir(sysfs_i2c_bus)) == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#392: FILE: lib/proc.c:78:
+  if ((dir = opendir(sysfs_i2c_bus)) == NULL)
+    return -SENSORS_ERR_PROC;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#392: FILE: lib/proc.c:78:
+  if ((dir = opendir(sysfs_i2c_bus)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#393: FILE: lib/proc.c:79:
+    return -SENSORS_ERR_PROC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#395: FILE: lib/proc.c:81:
+  using_sysfs = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#397: FILE: lib/proc.c:83:
+  while ((dentry = readdir(dir)) != NULL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#397: FILE: lib/proc.c:83:
+  while ((dentry = readdir(dir)) != NULL) {
+    if (dentry->d_name[0] == '.' || dentry->d_ino <= 0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#398: FILE: lib/proc.c:84:
+    if (dentry->d_name[0] == '.' || dentry->d_ino <= 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#398: FILE: lib/proc.c:84:
+    if (dentry->d_name[0] == '.' || dentry->d_ino <= 0)
+      continue;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#399: FILE: lib/proc.c:85:
+      continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#400: FILE: lib/proc.c:86:
+    snprintf(path, sizeof(path), "%s/%s/name", sysfs_i2c_bus, dentry->d_name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#401: FILE: lib/proc.c:87:
+    if ((f = fopen(path, "r")) == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#401: FILE: lib/proc.c:87:
+    if ((f = fopen(path, "r")) == NULL)
+      continue;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#401: FILE: lib/proc.c:87:
+    if ((f = fopen(path, "r")) == NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#402: FILE: lib/proc.c:88:
+      continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#403: FILE: lib/proc.c:89:
+    buf[0] = '\0';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#404: FILE: lib/proc.c:90:
+    fgets(buf, sizeof(buf), f);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#405: FILE: lib/proc.c:91:
+    fclose(f);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#406: FILE: lib/proc.c:92:
+    len = strlen(buf) - 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#407: FILE: lib/proc.c:93:
+    if (buf[len] == '\n')$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#407: FILE: lib/proc.c:93:
+    if (buf[len] == '\n')
+      buf[len] = '\0';

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#408: FILE: lib/proc.c:94:
+      buf[len] = '\0';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#409: FILE: lib/proc.c:95:
+    if (strchr(buf, ' '))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#409: FILE: lib/proc.c:95:
+    if (strchr(buf, ' '))
+      continue; /* e.g. "as99127f subclient" */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#410: FILE: lib/proc.c:96:
+      continue; /* e.g. "as99127f subclient" */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#411: FILE: lib/proc.c:97:
+    sscanf(dentry->d_name, "%d-%x", &entry.name.bus, &entry.name.addr);$

WARNING:NAKED_SSCANF: unchecked sscanf return value
#411: FILE: lib/proc.c:97:
+    sscanf(dentry->d_name, "%d-%x", &entry.name.bus, &entry.name.addr);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#412: FILE: lib/proc.c:98:
+    entry.name.prefix = strdup(buf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#414: FILE: lib/proc.c:100:
+    add_proc_chips(&entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: lib/proc.c:101:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#416: FILE: lib/proc.c:102:
+  closedir(dir);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#417: FILE: lib/proc.c:103:
+  return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#422: FILE: lib/proc.c:108:
+  DIR *dir;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#423: FILE: lib/proc.c:109:
+  struct dirent *dentry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#424: FILE: lib/proc.c:110:
+  char path[256], buf[256];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#425: FILE: lib/proc.c:111:
+  FILE *f;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#426: FILE: lib/proc.c:112:
+  int len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#427: FILE: lib/proc.c:113:
+  sensors_bus entry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#429: FILE: lib/proc.c:115:
+  if ((dir = opendir(sysfs_i2c_class)) == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#429: FILE: lib/proc.c:115:
+  if ((dir = opendir(sysfs_i2c_class)) == NULL)
+    return -SENSORS_ERR_PROC;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#429: FILE: lib/proc.c:115:
+  if ((dir = opendir(sysfs_i2c_class)) == NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#430: FILE: lib/proc.c:116:
+    return -SENSORS_ERR_PROC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#432: FILE: lib/proc.c:118:
+  while ((dentry = readdir(dir)) != NULL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#432: FILE: lib/proc.c:118:
+  while ((dentry = readdir(dir)) != NULL) {
+    if (dentry->d_name[0] == '.' || dentry->d_ino <= 0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#433: FILE: lib/proc.c:119:
+    if (dentry->d_name[0] == '.' || dentry->d_ino <= 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#433: FILE: lib/proc.c:119:
+    if (dentry->d_name[0] == '.' || dentry->d_ino <= 0)
+      continue;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#434: FILE: lib/proc.c:120:
+      continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#436: FILE: lib/proc.c:122:
+    sscanf(dentry->d_name, "i2c-%d", &entry.number);$

WARNING:NAKED_SSCANF: unchecked sscanf return value
#436: FILE: lib/proc.c:122:
+    sscanf(dentry->d_name, "i2c-%d", &entry.number);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#437: FILE: lib/proc.c:123:
+    entry.algorithm = strdup("Not available via sysfs");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#438: FILE: lib/proc.c:124:
+    sprintf(path, "%s/%s/device/name", sysfs_i2c_class, dentry->d_name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#439: FILE: lib/proc.c:125:
+    if ((f = fopen(path, "r")) == NULL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#439: FILE: lib/proc.c:125:
+    if ((f = fopen(path, "r")) == NULL) {
+      entry.adapter = strdup("UNKNOWN");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#439: FILE: lib/proc.c:125:
+    if ((f = fopen(path, "r")) == NULL) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#440: FILE: lib/proc.c:126:
+      entry.adapter = strdup("UNKNOWN");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#441: FILE: lib/proc.c:127:
+      continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#442: FILE: lib/proc.c:128:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#443: FILE: lib/proc.c:129:
+    fgets(buf, sizeof(buf), f);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#444: FILE: lib/proc.c:130:
+    fclose(f);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#445: FILE: lib/proc.c:131:
+    len = strlen(buf) - 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#446: FILE: lib/proc.c:132:
+    if (buf[len] == '\n')$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#446: FILE: lib/proc.c:132:
+    if (buf[len] == '\n')
+      buf[len] = '\0';

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: lib/proc.c:133:
+      buf[len] = '\0';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#448: FILE: lib/proc.c:134:
+    entry.adapter = strdup(buf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: lib/proc.c:135:
+    add_bus(&entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#450: FILE: lib/proc.c:136:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#452: FILE: lib/proc.c:138:
+  return 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#454: FILE: lib/proc.c:140:
+  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#454: FILE: lib/proc.c:140:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#457: FILE: lib/proc.c:143:
+  int len = strlen(str);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#458: FILE: lib/proc.c:144:
+  int slen = strlen(suffix);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#460: FILE: lib/proc.c:146:
+  if (len <= slen)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#460: FILE: lib/proc.c:146:
+  if (len <= slen)
+    return 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#461: FILE: lib/proc.c:147:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#463: FILE: lib/proc.c:149:
+  return strcmp(str + len - slen, suffix) == 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#469: FILE: lib/proc.c:155:
+  char part1[256], part2[256];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#470: FILE: lib/proc.c:156:
+  int n;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#472: FILE: lib/proc.c:158:
+  if (sscanf(name, "temp%d", &n) == 1) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#472: FILE: lib/proc.c:158:
+  if (sscanf(name, "temp%d", &n) == 1) {
+    if (ends_with(name, "_hyst"))

CHECK:BRACES: braces {} should be used on all arms of this statement
#472: FILE: lib/proc.c:158:
+  if (sscanf(name, "temp%d", &n) == 1) {
[...]
+  } else if (sscanf(name, "%[^0-9]%d_%s", part1, &n, part2) == 3)
[...]
+  else if (sscanf(name, "%[^0-9]%d", part1, &n) == 2)
[...]
+  else if (strcmp(name, "beeps") == 0)
[...]
+  else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#473: FILE: lib/proc.c:159:
+    if (ends_with(name, "_hyst"))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#473: FILE: lib/proc.c:159:
+    if (ends_with(name, "_hyst"))
+      sprintf(buf, "temp_min%d", n);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#474: FILE: lib/proc.c:160:
+      sprintf(buf, "temp_min%d", n);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#475: FILE: lib/proc.c:161:
+    else if (ends_with(name, "_over"))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#475: FILE: lib/proc.c:161:
+    else if (ends_with(name, "_over"))
+      sprintf(buf, "temp_max%d", n);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#476: FILE: lib/proc.c:162:
+      sprintf(buf, "temp_max%d", n);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#477: FILE: lib/proc.c:163:
+    else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#477: FILE: lib/proc.c:163:
+    else
+      sprintf(buf, "temp_input%d", n);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#478: FILE: lib/proc.c:164:
+      sprintf(buf, "temp_input%d", n);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#479: FILE: lib/proc.c:165:
+  } else if (sscanf(name, "%[^0-9]%d_%s", part1, &n, part2) == 3)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#479: FILE: lib/proc.c:165:
+  } else if (sscanf(name, "%[^0-9]%d_%s", part1, &n, part2) == 3)
+    sprintf(buf, "%s_%s%d", part1, part2, n);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#480: FILE: lib/proc.c:166:
+    sprintf(buf, "%s_%s%d", part1, part2, n);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#481: FILE: lib/proc.c:167:
+  else if (sscanf(name, "%[^0-9]%d", part1, &n) == 2)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#481: FILE: lib/proc.c:167:
+  else if (sscanf(name, "%[^0-9]%d", part1, &n) == 2)
+    sprintf(buf, "%s_input%d", part1, n);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#482: FILE: lib/proc.c:168:
+    sprintf(buf, "%s_input%d", part1, n);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#483: FILE: lib/proc.c:169:
+  else if (strcmp(name, "beeps") == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#483: FILE: lib/proc.c:169:
+  else if (strcmp(name, "beeps") == 0)
+    strcpy(buf, "beep_mask");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#484: FILE: lib/proc.c:170:
+    strcpy(buf, "beep_mask");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#485: FILE: lib/proc.c:171:
+  else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#485: FILE: lib/proc.c:171:
+  else
+    strcpy(buf, name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#486: FILE: lib/proc.c:172:
+    strcpy(buf, name);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#491: FILE: lib/proc.c:177:
+static int sensors_read_sysfs(sensors_chip_name name,
+  const sensors_chip_feature *the_feature, double *value)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#491: FILE: lib/proc.c:177:
+  const sensors_chip_feature *the_feature, double *value)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#493: FILE: lib/proc.c:179:
+  char path[256], buf[256];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#494: FILE: lib/proc.c:180:
+  FILE *f;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#495: FILE: lib/proc.c:181:
+  long l;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#496: FILE: lib/proc.c:182:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#496: FILE: lib/proc.c:182:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#497: FILE: lib/proc.c:183:
+  sensors_sysfs_convert_feature_name(the_feature->name, buf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#498: FILE: lib/proc.c:184:
+  snprintf(path, sizeof(path), "%s/%d-%04x/%s", sysfs_i2c_bus, name.bus, name.addr, buf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#499: FILE: lib/proc.c:185:
+  if ((f = fopen(path, "r")) == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#499: FILE: lib/proc.c:185:
+  if ((f = fopen(path, "r")) == NULL)
+    return -SENSORS_ERR_PROC;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#499: FILE: lib/proc.c:185:
+  if ((f = fopen(path, "r")) == NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#500: FILE: lib/proc.c:186:
+    return -SENSORS_ERR_PROC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#501: FILE: lib/proc.c:187:
+  fscanf(f, "%ld", &l);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#502: FILE: lib/proc.c:188:
+  fclose(f);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#503: FILE: lib/proc.c:189:
+  *value = l;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#504: FILE: lib/proc.c:190:
+  if (strncmp(buf, "in_", strlen("in_")) == 0$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#504: FILE: lib/proc.c:190:
+  if (strncmp(buf, "in_", strlen("in_")) == 0
[...]
+    *value /= 10.0;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#505: FILE: lib/proc.c:191:
+  if (strncmp(buf, "in_", strlen("in_")) == 0
+      || strncmp(buf, "temp_", strlen("temp_")) == 0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#505: FILE: lib/proc.c:191:
+      || strncmp(buf, "temp_", strlen("temp_")) == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#506: FILE: lib/proc.c:192:
+    *value /= 10.0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#507: FILE: lib/proc.c:193:
+  return 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#509: FILE: lib/proc.c:195:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#509: FILE: lib/proc.c:195:
+  $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#511: FILE: lib/proc.c:197:
+static int sensors_write_sysfs(sensors_chip_name name,
+  const sensors_chip_feature *the_feature, double value)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#511: FILE: lib/proc.c:197:
+  const sensors_chip_feature *the_feature, double value)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#513: FILE: lib/proc.c:199:
+  char path[256], buf[256];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#514: FILE: lib/proc.c:200:
+  FILE *f;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#515: FILE: lib/proc.c:201:
+  long l;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#516: FILE: lib/proc.c:202:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#516: FILE: lib/proc.c:202:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#517: FILE: lib/proc.c:203:
+  sensors_sysfs_convert_feature_name(the_feature->name, buf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#518: FILE: lib/proc.c:204:
+  snprintf(path, sizeof(path), "%s/%d-%04x/%s", sysfs_i2c_bus, name.bus, name.addr, buf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#519: FILE: lib/proc.c:205:
+  if (strncmp(buf, "in_", strlen("in_")) == 0$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#519: FILE: lib/proc.c:205:
+  if (strncmp(buf, "in_", strlen("in_")) == 0
[...]
+    value *= 10.0;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#520: FILE: lib/proc.c:206:
+  if (strncmp(buf, "in_", strlen("in_")) == 0
+      || strncmp(buf, "temp_", strlen("temp_")) == 0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#520: FILE: lib/proc.c:206:
+      || strncmp(buf, "temp_", strlen("temp_")) == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#521: FILE: lib/proc.c:207:
+    value *= 10.0;$

CHECK:SPACING: No space is necessary after a cast
#522: FILE: lib/proc.c:208:
+  l = (long) value;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#522: FILE: lib/proc.c:208:
+  l = (long) value;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#523: FILE: lib/proc.c:209:
+  if ((f = fopen(path, "w")) == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#523: FILE: lib/proc.c:209:
+  if ((f = fopen(path, "w")) == NULL)
+    return -SENSORS_ERR_PROC;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#523: FILE: lib/proc.c:209:
+  if ((f = fopen(path, "w")) == NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#524: FILE: lib/proc.c:210:
+    return -SENSORS_ERR_PROC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#525: FILE: lib/proc.c:211:
+  fprintf(f, "%ld", l);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#526: FILE: lib/proc.c:212:
+  fclose(f);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#528: FILE: lib/proc.c:214:
+  return 0;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#536: FILE: lib/proc.c:225:
   if (sysctl(name, 3, bufptr, &buflen, NULL, 0))
+    return sensors_parse_sysfs_chips();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#538: FILE: lib/proc.c:226:
+    return sensors_parse_sysfs_chips();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#546: FILE: lib/proc.c:253:
+  if (using_sysfs)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#546: FILE: lib/proc.c:253:
+  if (using_sysfs)
+    return sensors_parse_sysfs_class();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#547: FILE: lib/proc.c:254:
+    return sensors_parse_sysfs_class();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#561: FILE: lib/proc.c:319:
+  if (using_sysfs) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#561: FILE: lib/proc.c:319:
+  if (using_sysfs) {
+    int ret = sensors_read_sysfs(name, the_feature, value);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#562: FILE: lib/proc.c:320:
+    int ret = sensors_read_sysfs(name, the_feature, value);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#563: FILE: lib/proc.c:321:
+    int ret = sensors_read_sysfs(name, the_feature, value);
+    if (ret)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#563: FILE: lib/proc.c:321:
+    if (ret)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#563: FILE: lib/proc.c:321:
+    if (ret)
+      return ret;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#564: FILE: lib/proc.c:322:
+      return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#565: FILE: lib/proc.c:323:
+  } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#565: FILE: lib/proc.c:323:
+  } else {
+    sysctl_name[3] = the_feature->sysctl;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#566: FILE: lib/proc.c:324:
+    sysctl_name[3] = the_feature->sysctl;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#567: FILE: lib/proc.c:325:
+    if (sysctl(sysctl_name, 4, buf, &buflen, NULL, 0))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#567: FILE: lib/proc.c:325:
+    if (sysctl(sysctl_name, 4, buf, &buflen, NULL, 0))
+      return -SENSORS_ERR_PROC;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#568: FILE: lib/proc.c:326:
+      return -SENSORS_ERR_PROC;$

CHECK:SPACING: No space is necessary after a cast
#569: FILE: lib/proc.c:327:
+    *value = *((long *) (buf + the_feature->offset));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#569: FILE: lib/proc.c:327:
+    *value = *((long *) (buf + the_feature->offset));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#570: FILE: lib/proc.c:328:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#592: FILE: lib/proc.c:352:
+  if (using_sysfs) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#592: FILE: lib/proc.c:352:
+  if (using_sysfs) {
+    return sensors_write_sysfs(name, the_feature, value);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#593: FILE: lib/proc.c:353:
+    return sensors_write_sysfs(name, the_feature, value);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#594: FILE: lib/proc.c:354:
+  } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#594: FILE: lib/proc.c:354:
+  } else {
+    sysctl_name[3] = the_feature->sysctl;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#595: FILE: lib/proc.c:355:
+    sysctl_name[3] = the_feature->sysctl;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#596: FILE: lib/proc.c:356:
+    if (sysctl(sysctl_name, 4, buf, &buflen, NULL, 0))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#596: FILE: lib/proc.c:356:
+    if (sysctl(sysctl_name, 4, buf, &buflen, NULL, 0))
+      return -SENSORS_ERR_PROC;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#597: FILE: lib/proc.c:357:
+      return -SENSORS_ERR_PROC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#598: FILE: lib/proc.c:358:
+    if (sysctl_name[0] != CTL_DEV) { sysctl_name[0] = CTL_DEV ; }$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#598: FILE: lib/proc.c:358:
+    if (sysctl_name[0] != CTL_DEV) { sysctl_name[0] = CTL_DEV ; }

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#598: FILE: lib/proc.c:358:
+    if (sysctl_name[0] != CTL_DEV) { sysctl_name[0] = CTL_DEV ; }

CHECK:SPACING: No space is necessary after a cast
#599: FILE: lib/proc.c:359:
+    * ((long *) (buf + the_feature->offset)) = (long) value;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#599: FILE: lib/proc.c:359:
+    * ((long *) (buf + the_feature->offset)) = (long) value;$

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#599: FILE: lib/proc.c:359:
+    * ((long *) (buf + the_feature->offset)) = (long) value;
     ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#600: FILE: lib/proc.c:360:
+    buflen = the_feature->offset + sizeof(long);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#601: FILE: lib/proc.c:361:
+    if (sysctl(sysctl_name, 4, NULL, 0, buf, buflen))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#601: FILE: lib/proc.c:361:
+    if (sysctl(sysctl_name, 4, NULL, 0, buf, buflen))
+      return -SENSORS_ERR_PROC;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#602: FILE: lib/proc.c:362:
+      return -SENSORS_ERR_PROC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#603: FILE: lib/proc.c:363:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#604: FILE: lib/proc.c:364:
+  }$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000341131.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 184 warnings, 8 checks, 389 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000341131.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
