WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#45: FILE: fs/gfs2/bmap.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#79: FILE: fs/gfs2/bmap.c:35:
+			     uint64_t *bottom, unsigned int height,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#100: FILE: fs/gfs2/bmap.c:56:
+			uint64_t block, void *private)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#133: FILE: fs/gfs2/bmap.c:89:
+	uint64_t block = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#142: FILE: fs/gfs2/bmap.c:98:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#145: FILE: fs/gfs2/bmap.c:101:
+		/* Get a free block, fill it with the stuffed data,
+		   and write it out to disk */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#145: FILE: fs/gfs2/bmap.c:101:
+		   and write it out to disk */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#206: FILE: fs/gfs2/bmap.c:162:
+	uint64_t *arr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#242: FILE: fs/gfs2/bmap.c:198:
+	uint64_t block = 0, *bp;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#262: FILE: fs/gfs2/bmap.c:218:
+			/* Get a new block, fill it with the old direct
+			   pointers, and write it out */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#262: FILE: fs/gfs2/bmap.c:218:
+			   pointers, and write it out */

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#285: FILE: fs/gfs2/bmap.c:241:
+			*(uint64_t *)(dibh->b_data + sizeof(struct gfs2_dinode)) = cpu_to_gfs2_64(block);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#361: FILE: fs/gfs2/bmap.c:317:
+	uint64_t b = block;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*mp)...) over kzalloc(sizeof(struct metapath)...)
#364: FILE: fs/gfs2/bmap.c:320:
+	mp = kzalloc(sizeof(struct metapath), GFP_KERNEL | __GFP_NOFAIL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#412: FILE: fs/gfs2/bmap.c:368:
+	uint64_t *ptr = metapointer(bh, height, mp);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#453: FILE: fs/gfs2/bmap.c:409:
+		   uint64_t *dblock, uint32_t *extlen)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#503: FILE: fs/gfs2/bmap.c:459:
+		error = gfs2_meta_indirect_buffer(ip, x+1, *dblock, *new, &bh);
 		                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#514: FILE: fs/gfs2/bmap.c:470:
+			uint64_t tmp_dblock;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#575: FILE: fs/gfs2/bmap.c:531:
+			  uint64_t block, int first, block_call_t bc,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#580: FILE: fs/gfs2/bmap.c:536:
+	uint64_t *top, *bottom;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#581: FILE: fs/gfs2/bmap.c:537:
+	uint64_t bn;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#650: FILE: fs/gfs2/bmap.c:606:
+	uint64_t bn, bstart;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#651: FILE: fs/gfs2/bmap.c:607:
+	uint32_t blen;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#652: FILE: fs/gfs2/bmap.c:608:
+	uint64_t *p;

CHECK:BRACES: braces {} should be used on all arms of this statement
#688: FILE: fs/gfs2/bmap.c:644:
+		if (bstart + blen == bn)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#690: FILE: fs/gfs2/bmap.c:646:
+		else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#708: FILE: fs/gfs2/bmap.c:664:
+		struct gfs2_rgrpd *rgd;
+		rgd = get_gl2rgd(rlist.rl_ghs[x].gh_gl);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#736: FILE: fs/gfs2/bmap.c:692:
+		if (bstart + blen == bn)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#738: FILE: fs/gfs2/bmap.c:694:
+		else {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#762: FILE: fs/gfs2/bmap.c:718:
+	ip->i_di.di_mtime = ip->i_di.di_ctime = get_seconds();

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#817: FILE: fs/gfs2/bmap.c:773:
+	error = gfs2_trans_begin(sdp,
+			sdp->sd_max_height + al->al_rgd->rd_ri.ri_length +

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#841: FILE: fs/gfs2/bmap.c:797:
+	ip->i_di.di_mtime = ip->i_di.di_ctime = get_seconds();

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#868: FILE: fs/gfs2/bmap.c:824:
+	uint64_t lbn, dbn;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#869: FILE: fs/gfs2/bmap.c:825:
+	uint32_t off;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#912: FILE: fs/gfs2/bmap.c:868:
+		ip->i_di.di_mtime = ip->i_di.di_ctime = get_seconds();

CHECK:BRACES: braces {} should be used on all arms of this statement
#919: FILE: fs/gfs2/bmap.c:875:
+		if (journaled) {
[...]
+		} else if (size & (uint64_t)(sdp->sd_sb.sb_bsize - 1))
[...]

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#920: FILE: fs/gfs2/bmap.c:876:
+			uint64_t junk = size;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#929: FILE: fs/gfs2/bmap.c:885:
+			ip->i_di.di_mtime = ip->i_di.di_ctime = get_seconds();

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#947: FILE: fs/gfs2/bmap.c:903:
+	uint64_t lblock;

CHECK:BRACES: braces {} should be used on all arms of this statement
#951: FILE: fs/gfs2/bmap.c:907:
+	if (!size)
[...]
+	else if (gfs2_is_jdata(ip)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#956: FILE: fs/gfs2/bmap.c:912:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#968: FILE: fs/gfs2/bmap.c:924:
+		struct strip_mine sm;
+		sm.sm_first = !!size;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1008: FILE: fs/gfs2/bmap.c:964:
+	ip->i_di.di_mtime = ip->i_di.di_ctime = get_seconds();

WARNING:LINE_SPACING: Missing a blank line after declarations
#1082: FILE: fs/gfs2/bmap.c:1038:
+	int error;
+	error = trunc_dealloc(ip, ip->i_di.di_size);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1136: FILE: fs/gfs2/bmap.c:1092:
+	uint64_t lblock, lblock_stop, dblock;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1137: FILE: fs/gfs2/bmap.c:1093:
+	uint32_t extlen;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1155: FILE: fs/gfs2/bmap.c:1111:
+		unsigned int bsize = sdp->sd_jbsize;
+		lblock = offset;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1161: FILE: fs/gfs2/bmap.c:1117:
+		unsigned int shift = sdp->sd_sb.sb_bsize_shift;
+		lblock = offset >> shift;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1244: FILE: fs/gfs2/bmap.c:1200:
+		struct buffer_head *dibh;
+		error = gfs2_meta_inode_buffer(ip, &dibh);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1251: FILE: fs/gfs2/bmap.c:1207:
+		struct metapath *mp = find_metapath(ip, 0);
+		error = recursive_scan(ip, NULL, mp, 0, 0, TRUE, do_gfm, ub);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1261: FILE: fs/gfs2/bmap.h:1:
+/*

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1273: FILE: fs/gfs2/bmap.h:13:
+typedef int (*gfs2_unstuffer_t) (struct gfs2_inode * ip,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1274: FILE: fs/gfs2/bmap.h:14:
+				 struct buffer_head * dibh, uint64_t block,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1277: FILE: fs/gfs2/bmap.h:17:
+			uint64_t block, void *private);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1282: FILE: fs/gfs2/bmap.h:22:
+		   uint64_t lblock, int *new,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1283: FILE: fs/gfs2/bmap.h:23:
+		   uint64_t *dblock, uint32_t *extlen);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1285: FILE: fs/gfs2/bmap.h:25:
+typedef int (*gfs2_truncator_t) (struct gfs2_inode * ip, uint64_t size);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1303: FILE: fs/gfs2/daemon.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1332: FILE: fs/gfs2/daemon.c:30:
+/* This uses schedule_timeout() instead of msleep() because it's good for
+   the daemons to wake up more often than the timeout when unmounting so

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1334: FILE: fs/gfs2/daemon.c:32:
+   $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1335: FILE: fs/gfs2/daemon.c:33:
+   The kthread functions used to start these daemons block and flush signals. */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1532: FILE: fs/gfs2/daemon.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1555: FILE: fs/gfs2/format.h:1:
+/*

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1567: FILE: fs/gfs2/format.h:13:
+static const uint32_t gfs2_old_fs_formats[] = {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1571: FILE: fs/gfs2/format.h:17:
+static const uint32_t gfs2_old_multihost_formats[] = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1579: FILE: fs/gfs2/glops.c:1:
+/*

WARNING:REPEATED_WORD: Possible repeated word: 'not'
#1614: FILE: fs/gfs2/glops.c:36:
+ * to disk all dirty buffers/pages relating to this glock, and must not
+ * not return to caller to demote/unlock the glock until I/O is complete.

CHECK:BRACES: braces {} should be used on all arms of this statement
#1725: FILE: fs/gfs2/glops.c:147:
+		if (meta && data) {
[...]
+		} else if (meta) {
[...]
+		} else if (data)
[...]

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gl->gl_state == LM_ST_EXCLUSIVE'
#1809: FILE: fs/gfs2/glops.c:231:
+	if ((ip->i_di.di_flags & GFS2_DIF_TRUNC_IN_PROG) &&
+	    (gl->gl_state == LM_ST_EXCLUSIVE) &&
+	    (gh->gh_flags & GL_LOCAL_EXCL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2070: FILE: fs/gfs2/glops.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2096: FILE: fs/gfs2/inode.c:1:
+/*

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#2193: FILE: fs/gfs2/inode.c:98:
+		iput(inode);
 		^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2210: FILE: fs/gfs2/inode.c:115:
+	gfs2_assert_withdraw(ip->i_sbd,
+		(ip->i_di.di_mode & S_IFMT) == (inode->i_mode & S_IFMT));

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#2285: FILE: fs/gfs2/inode.c:190:
+			iput(tmp);
 			^^^^

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#2288: FILE: fs/gfs2/inode.c:193:
+		yield();

ERROR:SPACING: space required after that ',' (ctx:VxB)
#2486: FILE: fs/gfs2/inode.c:391:
+	gfs2_assert(ip->i_sbd, atomic_read(&ip->i_count) > 0,);
 	                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#2492: FILE: fs/gfs2/inode.c:397:
+	gfs2_assert(ip->i_sbd, atomic_read(&ip->i_count) > 0,);
 	                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#2503: FILE: fs/gfs2/inode.c:408:
+	gfs2_assert(sdp, get_gl2gl(io_gl) == i_gl,);
 	                                         ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2608: FILE: fs/gfs2/inode.c:513:
+	/* We reacquire the iopen lock here to avoid a race with the NFS server
+	   calling gfs2_read_inode() with the inode number of a inode we're in

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2610: FILE: fs/gfs2/inode.c:515:
+	   from inode_dealloc_init() for deadlock reasons. */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2770: FILE: fs/gfs2/inode.c:675:
+	uint32_t nlink;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2776: FILE: fs/gfs2/inode.c:681:
+	/* If we are reducing the nlink count, but the new value ends up being
+	   bigger than the old one, we must have underflowed. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2776: FILE: fs/gfs2/inode.c:681:
+	   bigger than the old one, we must have underflowed. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2923: FILE: fs/gfs2/inode.c:828:
+^I$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2928: FILE: fs/gfs2/inode.c:833:
+		uint64_t x, y;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2935: FILE: fs/gfs2/inode.c:840:
+		x = y = gfs2_64_to_cpu(x);

CHECK:BRACES: braces {} should be used on all arms of this statement
#3024: FILE: fs/gfs2/inode.c:929:
+	if (dip->i_sbd->sd_args.ar_suiddir &&
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3032: FILE: fs/gfs2/inode.c:937:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#3035: FILE: fs/gfs2/inode.c:940:
+	if (dip->i_di.di_mode & S_ISGID) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3039: FILE: fs/gfs2/inode.c:944:
+	} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3107: FILE: fs/gfs2/inode.c:1012:
+	di.di_atime = di.di_mtime = di.di_ctime = get_seconds();

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3108: FILE: fs/gfs2/inode.c:1013:
+	di.di_goal_meta = di.di_goal_data = inum->no_addr;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3154: FILE: fs/gfs2/inode.c:1059:
+	init_dinode(dip, gl, &ul->ul_ut.ut_inum,
+		     mode, uid, gid);

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#3156: FILE: fs/gfs2/inode.c:1061:
+	gfs2_quota_change(dip, +1, uid, gid);
 	                       ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3394: FILE: fs/gfs2/inode.c:1299:
+	/* If this inode is being unlinked from the directory structure,
+	   we need to mark that in the log so that it isn't lost during

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3395: FILE: fs/gfs2/inode.c:1300:
+	   a crash. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3456: FILE: fs/gfs2/inode.c:1361:
+	/* This inode is being unlinked from the directory structure and
+	   we need to mark that in the log so that it isn't lost during

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3457: FILE: fs/gfs2/inode.c:1362:
+	   a crash. */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#3637: FILE: fs/gfs2/inode.c:1542:
+	int64_t curtime, quantum = gfs2_tune_get(sdp, gt_atime_quantum);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3662: FILE: fs/gfs2/inode.c:1567:
+		gfs2_holder_reinit(LM_ST_EXCLUSIVE,
+				  gh->gh_flags & ~LM_FLAG_ANY,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3669: FILE: fs/gfs2/inode.c:1574:
+		/* Verify that atime hasn't been updated while we were
+		   trying to get exclusive lock. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3669: FILE: fs/gfs2/inode.c:1574:
+		   trying to get exclusive lock. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3695: FILE: fs/gfs2/inode.c:1600:
+		/* If someone else has asked for the glock,
+		   unlock and let them have it. Then reacquire

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3696: FILE: fs/gfs2/inode.c:1601:
+		   in the original state. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#3733: FILE: fs/gfs2/inode.c:1638:
+	if (a->ln_number > b->ln_number)
[...]
+	else if (a->ln_number < b->ln_number)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3737: FILE: fs/gfs2/inode.c:1642:
+	else {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3784: FILE: fs/gfs2/inode.c:1689:
+	sort(p, num_gh, sizeof(struct gfs2_holder *), glock_compare_atime,NULL);
 	                                                                 ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#3828: FILE: fs/gfs2/inode.c:1733:
+		if (list_empty(head))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3830: FILE: fs/gfs2/inode.c:1735:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#3835: FILE: fs/gfs2/inode.c:1740:
+			if (have_submounts(d))
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3837: FILE: fs/gfs2/inode.c:1742:
+			else {

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#3846: FILE: fs/gfs2/inode.c:1751:
+	iput(inode);
 	^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3884: FILE: fs/gfs2/inode.c:1789:
+int gfs2_repermission(struct inode *inode, int mask, struct nameidata *nd)
                                                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3886: FILE: fs/gfs2/inode.c:1791:
+	return permission(inode, mask, nd);
 	                               ^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3892: FILE: fs/gfs2/inode.h:1:
+/*

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3952: FILE: fs/gfs2/inode.h:61:
+int gfs2_repermission(struct inode *inode, int mask, struct nameidata *nd);
                                                                        ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#3958: FILE: fs/gfs2/inode.h:67:
+	struct qstr qstr;
+	memset(&qstr, 0, sizeof(struct qstr));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000155442.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 44 warnings, 63 checks, 3897 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000155442.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
