WARNING:TYPO_SPELLING: 'unneccessary' may be misspelled - perhaps 'unnecessary'?
#22: 
  The following patch removes some unneccessary (it seems) typedefs, and 
                                   ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

CHECK:CAMELCASE: Avoid CamelCase: <BusLogic_DriverInfo>
#66: FILE: scsi/BusLogic.h:35:
+extern const char *BusLogic_DriverInfo(struct Scsi_Host *);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host>
#66: FILE: scsi/BusLogic.h:35:
+extern const char *BusLogic_DriverInfo(struct Scsi_Host *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#66: FILE: scsi/BusLogic.h:35:
+extern const char *BusLogic_DriverInfo(struct Scsi_Host *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:CAMELCASE: Avoid CamelCase: <BusLogic_DetectHostAdapter>
#67: FILE: scsi/BusLogic.h:36:
+extern int BusLogic_DetectHostAdapter(Scsi_Host_Template *);

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host_Template>
#67: FILE: scsi/BusLogic.h:36:
+extern int BusLogic_DetectHostAdapter(Scsi_Host_Template *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#67: FILE: scsi/BusLogic.h:36:
+extern int BusLogic_DetectHostAdapter(Scsi_Host_Template *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'Scsi_Host_Template *' should also have an identifier name
#67: FILE: scsi/BusLogic.h:36:
+extern int BusLogic_DetectHostAdapter(Scsi_Host_Template *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:CAMELCASE: Avoid CamelCase: <BusLogic_ReleaseHostAdapter>
#68: FILE: scsi/BusLogic.h:37:
+extern int BusLogic_ReleaseHostAdapter(struct Scsi_Host *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#68: FILE: scsi/BusLogic.h:37:
+extern int BusLogic_ReleaseHostAdapter(struct Scsi_Host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Scsi_Host *' should also have an identifier name
#68: FILE: scsi/BusLogic.h:37:
+extern int BusLogic_ReleaseHostAdapter(struct Scsi_Host *);

CHECK:CAMELCASE: Avoid CamelCase: <BusLogic_QueueCommand>
#69: FILE: scsi/BusLogic.h:38:
+extern int BusLogic_QueueCommand(struct scsi_cmnd *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#69: FILE: scsi/BusLogic.h:38:
+extern int BusLogic_QueueCommand(struct scsi_cmnd *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_cmnd *' should also have an identifier name
#69: FILE: scsi/BusLogic.h:38:
+extern int BusLogic_QueueCommand(struct scsi_cmnd *,

CHECK:CAMELCASE: Avoid CamelCase: <CompletionRoutine>
#70: FILE: scsi/BusLogic.h:39:
+				 void (*CompletionRoutine)(struct scsi_cmnd *));

CHECK:CAMELCASE: Avoid CamelCase: <BusLogic_AbortCommand>
#71: FILE: scsi/BusLogic.h:40:
+extern int BusLogic_AbortCommand(struct scsi_cmnd *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#71: FILE: scsi/BusLogic.h:40:
+extern int BusLogic_AbortCommand(struct scsi_cmnd *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_cmnd *' should also have an identifier name
#71: FILE: scsi/BusLogic.h:40:
+extern int BusLogic_AbortCommand(struct scsi_cmnd *);

CHECK:CAMELCASE: Avoid CamelCase: <BusLogic_ResetCommand>
#72: FILE: scsi/BusLogic.h:41:
+extern int BusLogic_ResetCommand(struct scsi_cmnd *, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#72: FILE: scsi/BusLogic.h:41:
+extern int BusLogic_ResetCommand(struct scsi_cmnd *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_cmnd *' should also have an identifier name
#72: FILE: scsi/BusLogic.h:41:
+extern int BusLogic_ResetCommand(struct scsi_cmnd *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#72: FILE: scsi/BusLogic.h:41:
+extern int BusLogic_ResetCommand(struct scsi_cmnd *, unsigned int);

CHECK:CAMELCASE: Avoid CamelCase: <BusLogic_BIOSDiskParameters>
#73: FILE: scsi/BusLogic.h:42:
+extern int BusLogic_BIOSDiskParameters(struct scsi_disk *, kdev_t, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#73: FILE: scsi/BusLogic.h:42:
+extern int BusLogic_BIOSDiskParameters(struct scsi_disk *, kdev_t, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_disk *' should also have an identifier name
#73: FILE: scsi/BusLogic.h:42:
+extern int BusLogic_BIOSDiskParameters(struct scsi_disk *, kdev_t, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdev_t' should also have an identifier name
#73: FILE: scsi/BusLogic.h:42:
+extern int BusLogic_BIOSDiskParameters(struct scsi_disk *, kdev_t, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#73: FILE: scsi/BusLogic.h:42:
+extern int BusLogic_BIOSDiskParameters(struct scsi_disk *, kdev_t, int *);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: scsi/BusLogic.h:1179:
+  struct scsi_cmnd *Command;$

CHECK:CAMELCASE: Avoid CamelCase: <Command>
#82: FILE: scsi/BusLogic.h:1179:
+  struct scsi_cmnd *Command;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: scsi/BusLogic.h:1339:
+  struct Scsi_Host *SCSI_Host;$

CHECK:CAMELCASE: Avoid CamelCase: <ProcessorFlags>
#100: FILE: scsi/BusLogic.h:1490:
+				     unsigned long *ProcessorFlags)

CHECK:CAMELCASE: Avoid CamelCase: <BusLogic_InterruptHandler>
#136: FILE: scsi/BusLogic.h:1747:
+static void BusLogic_InterruptHandler(int, void *, struct pt_regs *);

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

CHECK:CAMELCASE: Avoid CamelCase: <Host>
#164: FILE: scsi/BusLogic.c:164:
+const char *BusLogic_DriverInfo(struct Scsi_Host *Host)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#173: FILE: scsi/BusLogic.c:418:
+  unsigned long ProcessorFlags = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#181: FILE: scsi/BusLogic.c:769:
+      if(pci_set_dma_mask(PCI_Device, 0xffffffff))$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#181: FILE: scsi/BusLogic.c:769:
+      if(pci_set_dma_mask(PCI_Device, 0xffffffff))
+      {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 16)
#181: FILE: scsi/BusLogic.c:769:
+      if(pci_set_dma_mask(PCI_Device, 0xffffffff))
+      {

ERROR:SPACING: space required before the open parenthesis '('
#181: FILE: scsi/BusLogic.c:769:
+      if(pci_set_dma_mask(PCI_Device, 0xffffffff))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: scsi/BusLogic.c:770:
+      {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#183: FILE: scsi/BusLogic.c:771:
+		printk(KERN_WARNING "BusLogic : No suitable DMA available\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: scsi/BusLogic.c:772:
+      }$

CHECK:CAMELCASE: Avoid CamelCase: <BusLogic_SelectQueueDepths>
#203: FILE: scsi/BusLogic.c:2642:
+static void BusLogic_SelectQueueDepths(struct Scsi_Host *Host,

CHECK:CAMELCASE: Avoid CamelCase: <DeviceList>
#204: FILE: scsi/BusLogic.c:2643:
+				       struct scsi_device *DeviceList)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: scsi/BusLogic.c:2650:
+  struct scsi_device *Device;$

CHECK:CAMELCASE: Avoid CamelCase: <Device>
#212: FILE: scsi/BusLogic.c:2650:
+  struct scsi_device *Device;

CHECK:CAMELCASE: Avoid CamelCase: <HostTemplate>
#221: FILE: scsi/BusLogic.c:2721:
+int BusLogic_DetectHostAdapter(Scsi_Host_Template *HostTemplate)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: scsi/BusLogic.c:2755:
+      struct Scsi_Host *Host;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: scsi/BusLogic.c:3068:
+      struct scsi_cmnd *Command = CCB->Command;$

WARNING:TABSTOP: Statements should start on a tabstop
#257: FILE: scsi/BusLogic.c:3099:
+	      struct scsi_cmnd *NextCommand = Command->reset_chain;

CHECK:CAMELCASE: Avoid CamelCase: <NextCommand>
#257: FILE: scsi/BusLogic.c:3099:
+	      struct scsi_cmnd *NextCommand = Command->reset_chain;

CHECK:CAMELCASE: Avoid CamelCase: <InterruptRegisters>
#266: FILE: scsi/BusLogic.c:3218:
+				      struct pt_regs *InterruptRegisters)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#271: FILE: scsi/BusLogic.c:3222:
+  unsigned long ProcessorFlags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: scsi/BusLogic.c:3361:
+  unsigned long ProcessorFlags;$

CHECK:SPACING: No space is necessary after a cast
#300: FILE: scsi/BusLogic.c:3407:
+      struct scatterlist *ScatterList = (struct scatterlist *) BufferPointer;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#300: FILE: scsi/BusLogic.c:3407:
+      struct scatterlist *ScatterList = (struct scatterlist *) BufferPointer;$

CHECK:CAMELCASE: Avoid CamelCase: <ScatterList>
#300: FILE: scsi/BusLogic.c:3407:
+      struct scatterlist *ScatterList = (struct scatterlist *) BufferPointer;

CHECK:CAMELCASE: Avoid CamelCase: <BufferPointer>
#300: FILE: scsi/BusLogic.c:3407:
+      struct scatterlist *ScatterList = (struct scatterlist *) BufferPointer;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#315: FILE: scsi/BusLogic.c:3578:
+  unsigned long ProcessorFlags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#328: FILE: scsi/BusLogic.c:3701:
+  unsigned long ProcessorFlags;$

WARNING:TABSTOP: Statements should start on a tabstop
#337: FILE: scsi/BusLogic.c:3831:
+	    struct scsi_cmnd *NextCommand = Command->reset_chain;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#352: FILE: scsi/BusLogic.c:3864:
+  unsigned long ProcessorFlags;$

CHECK:CAMELCASE: Avoid CamelCase: <ResetFlags>
#361: FILE: scsi/BusLogic.c:4045:
+int BusLogic_ResetCommand(struct scsi_cmnd *Command, unsigned int ResetFlags)

CHECK:CAMELCASE: Avoid CamelCase: <Disk>
#370: FILE: scsi/BusLogic.c:4117:
+int BusLogic_BIOSDiskParameters(struct scsi_disk *Disk, kdev_t Device,

CHECK:SPACING: No space is necessary after a cast
#380: FILE: scsi/BusLogic.c:4154:
+      struct partition *FirstPartitionEntry = (struct partition *) buf;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#380: FILE: scsi/BusLogic.c:4154:
+      struct partition *FirstPartitionEntry = (struct partition *) buf;$

CHECK:CAMELCASE: Avoid CamelCase: <FirstPartitionEntry>
#380: FILE: scsi/BusLogic.c:4154:
+      struct partition *FirstPartitionEntry = (struct partition *) buf;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#381: FILE: scsi/BusLogic.c:4155:
+      struct partition *PartitionEntry = FirstPartitionEntry;$

CHECK:CAMELCASE: Avoid CamelCase: <PartitionEntry>
#381: FILE: scsi/BusLogic.c:4155:
+      struct partition *PartitionEntry = FirstPartitionEntry;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000453619.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 33 warnings, 35 checks, 328 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000453619.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
