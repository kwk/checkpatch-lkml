WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#54: 
--- linux-2.6.13-rc5-mm1-abi.orig/include/asm-i386/ptrace-abi.h	2005-08-16 05:22:15.349927640 -0400

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#57: FILE: include/asm-i386/ptrace-abi.h:1:
+#ifndef __PTRACE_ABI__

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#148: FILE: include/asm-i386/system-abi.h:1:
+#ifndef __SYSTEM_ABI__

WARNING:INCLUDE_LINUX: Use #include <linux/cpufeature.h> instead of <asm/cpufeature.h>
#151: FILE: include/asm-i386/system-abi.h:4:
+#include <asm/cpufeature.h>

WARNING:MEMORY_BARRIER: memory barrier without comment
#154: FILE: include/asm-i386/system-abi.h:7:
+#define smp_mb()	mb()

WARNING:MEMORY_BARRIER: memory barrier without comment
#155: FILE: include/asm-i386/system-abi.h:8:
+#define smp_rmb()	rmb()

WARNING:MEMORY_BARRIER: memory barrier without comment
#156: FILE: include/asm-i386/system-abi.h:9:
+#define smp_wmb()	wmb()

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'var' may be better as '(var)' to avoid precedence issues
#158: FILE: include/asm-i386/system-abi.h:11:
+#define set_mb(var, value) do { xchg(&var, value); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#158: FILE: include/asm-i386/system-abi.h:11:
+#define set_mb(var, value) do { xchg(&var, value); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:MEMORY_BARRIER: memory barrier without comment
#160: FILE: include/asm-i386/system-abi.h:13:
+#define smp_mb()	barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#161: FILE: include/asm-i386/system-abi.h:14:
+#define smp_rmb()	barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#162: FILE: include/asm-i386/system-abi.h:15:
+#define smp_wmb()	barrier()

ERROR:SPACING: space required before the open parenthesis '('
#163: FILE: include/asm-i386/system-abi.h:16:
+#define smp_read_barrier_depends()	do { } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#167: FILE: include/asm-i386/system-abi.h:20:
+#define xchg(ptr,v) ((__typeof__(*(ptr)))__xchg((unsigned long)(v),(ptr),sizeof(*(ptr))))
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#167: FILE: include/asm-i386/system-abi.h:20:
+#define xchg(ptr,v) ((__typeof__(*(ptr)))__xchg((unsigned long)(v),(ptr),sizeof(*(ptr))))
                                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#167: FILE: include/asm-i386/system-abi.h:20:
+#define xchg(ptr,v) ((__typeof__(*(ptr)))__xchg((unsigned long)(v),(ptr),sizeof(*(ptr))))
                                                                         ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#167: FILE: include/asm-i386/system-abi.h:20:
+#define xchg(ptr,v) ((__typeof__(*(ptr)))__xchg((unsigned long)(v),(ptr),sizeof(*(ptr))))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#169: FILE: include/asm-i386/system-abi.h:22:
+#define tas(ptr) (xchg((ptr),1))
                             ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#179: FILE: include/asm-i386/system-abi.h:32:
+static inline unsigned long __xchg(unsigned long x, volatile void * ptr, int size)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#179: FILE: include/asm-i386/system-abi.h:32:
+static inline unsigned long __xchg(unsigned long x, volatile void * ptr, int size)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#181: FILE: include/asm-i386/system-abi.h:34:
+	switch (size) {
+		case 1:
[...]
+		case 2:
[...]
+		case 4:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#184: FILE: include/asm-i386/system-abi.h:37:
+				:"=q" (x)
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#185: FILE: include/asm-i386/system-abi.h:38:
+				:"m" (*__xg(ptr)), "0" (x)
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#186: FILE: include/asm-i386/system-abi.h:39:
+				:"memory");
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#190: FILE: include/asm-i386/system-abi.h:43:
+				:"=r" (x)
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#191: FILE: include/asm-i386/system-abi.h:44:
+				:"m" (*__xg(ptr)), "0" (x)
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#192: FILE: include/asm-i386/system-abi.h:45:
+				:"memory");
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#196: FILE: include/asm-i386/system-abi.h:49:
+				:"=r" (x)
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#197: FILE: include/asm-i386/system-abi.h:50:
+				:"m" (*__xg(ptr)), "0" (x)
 				^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#198: FILE: include/asm-i386/system-abi.h:51:
+				:"memory");
 				^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: include/asm-i386/system-abi.h:57:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: include/asm-i386/system-abi.h:59:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#209: FILE: include/asm-i386/system-abi.h:62:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#212: FILE: include/asm-i386/system-abi.h:65:
+ * $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#216: FILE: include/asm-i386/system-abi.h:69:
+#define alternative(oldinstr, newinstr, feature) ^I\$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#216: FILE: include/asm-i386/system-abi.h:69:
+#define alternative(oldinstr, newinstr, feature) 	\
+	asm volatile ("661:\n\t" oldinstr "\n662:\n" 		     \
+		      ".section .altinstructions,\"a\"\n"     	     \
+		      "  .align 4\n"				       \
+		      "  .long 661b\n"            /* label */          \
+		      "  .long 663f\n"		  /* new instruction */ 	\
+		      "  .byte %c0\n"             /* feature bit */    \
+		      "  .byte 662b-661b\n"       /* sourcelen */      \
+		      "  .byte 664f-663f\n"       /* replacementlen */ \
+		      ".previous\n"						\
+		      ".section .altinstr_replacement,\"ax\"\n"			\
+		      "663:\n\t" newinstr "\n664:\n"   /* replacement */    \
+		      ".previous" :: "i" (feature) : "memory")  

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#217: FILE: include/asm-i386/system-abi.h:70:
+^Iasm volatile ("661:\n\t" oldinstr "\n662:\n" ^I^I     \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#218: FILE: include/asm-i386/system-abi.h:71:
+^I^I      ".section .altinstructions,\"a\"\n"     ^I     \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#221: FILE: include/asm-i386/system-abi.h:74:
+^I^I      "  .long 663f\n"^I^I  /* new instruction */ ^I\$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#228: FILE: include/asm-i386/system-abi.h:81:
+^I^I      ".previous" :: "i" (feature) : "memory")  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#232: FILE: include/asm-i386/system-abi.h:85:
+ * $

WARNING:TYPO_SPELLING: 'Pecularities' may be misspelled - perhaps 'Peculiarities'?
#233: FILE: include/asm-i386/system-abi.h:86:
+ * Pecularities:
    ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#234: FILE: include/asm-i386/system-abi.h:87:
+ * No memory clobber here. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: include/asm-i386/system-abi.h:90:
+ * If you use variable sized constraints like "m" or "g" in the $

WARNING:TYPO_SPELLING: 'maake' may be misspelled - perhaps 'make'?
#238: FILE: include/asm-i386/system-abi.h:91:
+ * replacement maake sure to pad to the worst case length.
                ^^^^^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#240: FILE: include/asm-i386/system-abi.h:93:
+#define alternative_input(oldinstr, newinstr, feature, input...)		\
+	asm volatile ("661:\n\t" oldinstr "\n662:\n"				\
+		      ".section .altinstructions,\"a\"\n"			\
+		      "  .align 4\n"						\
+		      "  .long 661b\n"            /* label */			\
+		      "  .long 663f\n"		  /* new instruction */ 	\
+		      "  .byte %c0\n"             /* feature bit */		\
+		      "  .byte 662b-661b\n"       /* sourcelen */		\
+		      "  .byte 664f-663f\n"       /* replacementlen */ 		\
+		      ".previous\n"						\
+		      ".section .altinstr_replacement,\"ax\"\n"			\
+		      "663:\n\t" newinstr "\n664:\n"   /* replacement */ 	\
+		      ".previous" :: "i" (feature), ##input)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#245: FILE: include/asm-i386/system-abi.h:98:
+^I^I      "  .long 663f\n"^I^I  /* new instruction */ ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#248: FILE: include/asm-i386/system-abi.h:101:
+^I^I      "  .byte 664f-663f\n"       /* replacementlen */ ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#251: FILE: include/asm-i386/system-abi.h:104:
+^I^I      "663:\n\t" newinstr "\n664:\n"   /* replacement */ ^I\$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#271: FILE: include/asm-i386/system-abi.h:124:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#271: FILE: include/asm-i386/system-abi.h:124:
+ $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#272: FILE: include/asm-i386/system-abi.h:125:
+ 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#273: FILE: include/asm-i386/system-abi.h:126:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#274: FILE: include/asm-i386/system-abi.h:127:
+ * Actually only lfence would be needed for mb() because all stores done $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#275: FILE: include/asm-i386/system-abi.h:128:
+ * by the kernel should be already ordered. But keep a full barrier for now. $

WARNING:MEMORY_BARRIER: memory barrier without comment
#278: FILE: include/asm-i386/system-abi.h:131:
+#define mb() alternative("lock; addl $0,0(%%esp)", "mfence", X86_FEATURE_XMM2)

WARNING:MEMORY_BARRIER: memory barrier without comment
#279: FILE: include/asm-i386/system-abi.h:132:
+#define rmb() alternative("lock; addl $0,0(%%esp)", "lfence", X86_FEATURE_XMM2)

ERROR:SPACING: space required before the open parenthesis '('
#333: FILE: include/asm-i386/system-abi.h:186:
+#define read_barrier_depends()	do { } while(0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#335: FILE: include/asm-i386/system-abi.h:188:
+extern unsigned long arch_align_stack(unsigned long sp);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000159295.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 31 errors, 24 warnings, 4 checks, 531 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000159295.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
