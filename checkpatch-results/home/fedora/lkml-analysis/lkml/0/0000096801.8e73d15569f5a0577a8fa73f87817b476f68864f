WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#23: 
The attached patch extends the get_sb() filesystem operation to take an extra

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#102: 
Signed-Off-By: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#315: FILE: drivers/isdn/capi/capifs.c:125:
+static int capifs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#333: FILE: drivers/misc/ibmasm/ibmasmfs.c:94:
+static int ibmasmfs_get_super(struct file_system_type *fst,
+			int flags, const char *name, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#352: FILE: drivers/oprofile/oprofilefs.c:276:
+static int oprofilefs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#370: FILE: drivers/usb/core/inode.c:547:
+static int usb_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#392: FILE: drivers/usb/gadget/inode.c:2072:
+	return get_sb_single (t, flags, opts, gadgetfs_fill_super, mnt);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#464: FILE: fs/adfs/super.c:473:
+static int adfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#483: FILE: fs/affs/super.c:527:
+static int affs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#567: FILE: fs/autofs/init.c:18:
+static int autofs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#585: FILE: fs/autofs4/init.c:18:
+static int autofs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#623: FILE: fs/bfs/inode.c:413:
+static int bfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#641: FILE: fs/binfmt_misc.c:744:
+static int bm_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#659: FILE: fs/block_dev.c:304:
+static int bd_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#715: FILE: fs/coda/inode.c:309:
+static int coda_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#733: FILE: fs/configfs/mount.c:107:
+static int configfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#751: FILE: fs/cramfs/inode.c:533:
+static int cramfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#810: FILE: fs/devpts/inode.c:112:
+static int devpts_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#828: FILE: fs/efs/super.c:22:
+static int efs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#879: FILE: fs/ext2/super.c:1093:
+static int ext2_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#897: FILE: fs/ext3/super.c:2654:
+static int ext3_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#915: FILE: fs/freevxfs/vxfs_super.c:245:
+static int vxfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1013: FILE: fs/hpfs/super.c:665:
+static int hpfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1052: FILE: fs/hugetlbfs/inode.c:761:
+static int hugetlbfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1089: FILE: fs/isofs/inode.c:1402:
+static int isofs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1108: FILE: fs/jffs/inode-v23.c:1789:
+static int jffs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#1222: FILE: fs/jffs2/super.c:225:
+						return jffs2_get_sb_mtd(fs_type, flags, dev_name, data, mtd, mnt);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1231: FILE: fs/jffs2/super.c:238:
+				return jffs2_get_sb_mtdnr(fs_type, flags, dev_name, data, mtdnr, mnt);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1268: FILE: fs/jfs/super.c:544:
+static int jfs_get_sb(struct file_system_type *fs_type, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1269: FILE: fs/jfs/super.c:545:
+static int jfs_get_sb(struct file_system_type *fs_type, 
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1289: FILE: fs/libfs.c:198:
+int get_sb_pseudo(struct file_system_type *fs_type, char *name,
+	struct super_operations *ops, unsigned long magic,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1329: FILE: fs/minix/inode.c:562:
+static int minix_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1373: FILE: fs/namespace.c:96:
+EXPORT_SYMBOL(simple_set_mnt);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1389: FILE: fs/ncpfs/inode.c:960:
+static int ncp_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1407: FILE: fs/nfs/inode.c:1698:
+static int nfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *raw_data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1457: FILE: fs/nfs/inode.c:1780:
+		dprintk("%s: couldn't start rpciod! Error = %d\n",
+				__FUNCTION__, error);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1457: FILE: fs/nfs/inode.c:1780:
+				__FUNCTION__, error);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1504: FILE: fs/nfs/inode.c:2047:
+static int nfs4_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *raw_data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1558: FILE: fs/nfs/inode.c:2107:
+		dprintk("%s: couldn't start rpciod! Error = %d\n",
+				__FUNCTION__, error);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1558: FILE: fs/nfs/inode.c:2107:
+				__FUNCTION__, error);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1612: FILE: fs/nfsd/nfsctl.c:498:
+static int nfsd_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1630: FILE: fs/ntfs/super.c:3085:
+static int ntfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1649: FILE: fs/ocfs2/dlm/dlmfs.c:578:
+static int dlmfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1691: FILE: fs/openpromfs/inode.c:1058:
+static int openprom_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1709: FILE: fs/pipe.c:809:
+static int pipefs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1727: FILE: fs/proc/root.c:30:
+static int proc_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1745: FILE: fs/qnx4/inode.c:564:
+static int qnx4_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1764: FILE: fs/ramfs/inode.c:188:
+int ramfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1773: FILE: fs/ramfs/inode.c:194:
+static int rootfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1776: FILE: fs/ramfs/inode.c:196:
+	return get_sb_nodev(fs_type, flags|MS_NOUSER, data, ramfs_fill_super,
 	                                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1833: FILE: fs/romfs/inode.c:610:
+static int romfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1852: FILE: fs/smbfs/inode.c:785:
+static int smb_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1878: FILE: fs/super.c:680:
+int get_sb_bdev(struct file_system_type *fs_type,
 	int flags, const char *dev_name, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1950: FILE: fs/super.c:754:
+int get_sb_nodev(struct file_system_type *fs_type,
 	int flags, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1983: FILE: fs/super.c:784:
+int get_sb_single(struct file_system_type *fs_type,
 	int flags, void *data,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2052: FILE: fs/super.c:840:
+	BUG_ON(!mnt->mnt_sb);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2053: FILE: fs/super.c:841:
+	BUG_ON(!mnt->mnt_sb->s_root);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2054: FILE: fs/super.c:842:
+	BUG_ON(!mnt->mnt_root);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2056: FILE: fs/super.c:844:
+ ^Ierror = security_sb_kern_mount(mnt->mnt_sb, secdata);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2056: FILE: fs/super.c:844:
+ ^Ierror = security_sb_kern_mount(mnt->mnt_sb, secdata);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2056: FILE: fs/super.c:844:
+ ^Ierror = security_sb_kern_mount(mnt->mnt_sb, secdata);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2099: FILE: fs/sysfs/mount.c:70:
+static int sysfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2117: FILE: fs/sysv/super.c:510:
+static int sysv_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2127: FILE: fs/sysv/super.c:517:
+static int v7_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2145: FILE: fs/udf/super.c:98:
+static int udf_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2163: FILE: fs/ufs/super.c:1314:
+static int ufs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

WARNING:SPACING: Unnecessary space before function pointer arguments
#2225: FILE: include/linux/fs.h:1239:
+	int (*get_sb) (struct file_system_type *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_system_type *' should also have an identifier name
#2225: FILE: include/linux/fs.h:1239:
+	int (*get_sb) (struct file_system_type *, int,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2225: FILE: include/linux/fs.h:1239:
+	int (*get_sb) (struct file_system_type *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2225: FILE: include/linux/fs.h:1239:
+	int (*get_sb) (struct file_system_type *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#2225: FILE: include/linux/fs.h:1239:
+	int (*get_sb) (struct file_system_type *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#2225: FILE: include/linux/fs.h:1239:
+	int (*get_sb) (struct file_system_type *, int,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2234: FILE: include/linux/fs.h:1247:
+extern int get_sb_bdev(struct file_system_type *fs_type,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2235: FILE: include/linux/fs.h:1248:
+extern int get_sb_bdev(struct file_system_type *fs_type,
 	int flags, const char *dev_name, void *data,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2240: FILE: include/linux/fs.h:1251:
+extern int get_sb_single(struct file_system_type *fs_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2241: FILE: include/linux/fs.h:1252:
+extern int get_sb_single(struct file_system_type *fs_type,
 	int flags, void *data,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2246: FILE: include/linux/fs.h:1255:
+extern int get_sb_nodev(struct file_system_type *fs_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2247: FILE: include/linux/fs.h:1256:
+extern int get_sb_nodev(struct file_system_type *fs_type,
 	int flags, void *data,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2260: FILE: include/linux/fs.h:1269:
+extern int get_sb_pseudo(struct file_system_type *, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_system_type *' should also have an identifier name
#2260: FILE: include/linux/fs.h:1269:
+extern int get_sb_pseudo(struct file_system_type *, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#2260: FILE: include/linux/fs.h:1269:
+extern int get_sb_pseudo(struct file_system_type *, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#2260: FILE: include/linux/fs.h:1269:
+extern int get_sb_pseudo(struct file_system_type *, char *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2261: FILE: include/linux/fs.h:1270:
+extern int get_sb_pseudo(struct file_system_type *, char *,
+	struct super_operations *ops, unsigned long,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2263: FILE: include/linux/fs.h:1272:
+extern int simple_set_mnt(struct vfsmount *mnt, struct super_block *sb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2277: FILE: include/linux/ramfs.h:5:
+extern int ramfs_get_sb(struct file_system_type *fs_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2278: FILE: include/linux/ramfs.h:6:
+extern int ramfs_get_sb(struct file_system_type *fs_type,
+	 int flags, const char *dev_name, void *data, struct vfsmount *mnt);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2353: FILE: mm/shmem.c:2231:
+static int shmem_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2371: FILE: net/socket.c:331:
+static int sockfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000096801.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 22 warnings, 64 checks, 1809 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000096801.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
