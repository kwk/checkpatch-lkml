WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
diff -uNr linux-2.6.8.1-mm2-machine_shutdown.x86_64/arch/x86_64/Kconfig linux-2.6.8.1-mm2-kexec.x86_64/arch/x86_64/Kconfig

WARNING:TYPO_SPELLING: 'indepedent' may be misspelled - perhaps 'independent'?
#40: FILE: arch/x86_64/Kconfig:410:
+	  but it is indepedent of the system firmware.   And like a reboot
 	            ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'similiarity' may be misspelled - perhaps 'similarity'?
#43: FILE: arch/x86_64/Kconfig:413:
+	  The name comes from the similiarity to the exec system call.
 	                          ^^^^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#69: FILE: arch/x86_64/kernel/machine_kexec.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#83: FILE: arch/x86_64/kernel/machine_kexec.c:15:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#86: FILE: arch/x86_64/kernel/machine_kexec.c:18:
+#include <asm/mmu_context.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#87: FILE: arch/x86_64/kernel/machine_kexec.c:19:
+#include <asm/io.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cpufeature.h> instead of <asm/cpufeature.h>
#89: FILE: arch/x86_64/kernel/machine_kexec.c:21:
+#include <asm/cpufeature.h>

CHECK:BIT_MACRO: Prefer using the BIT macro
#92: FILE: arch/x86_64/kernel/machine_kexec.c:24:
+#define LEVEL0_SIZE (1UL << 12UL)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#93: FILE: arch/x86_64/kernel/machine_kexec.c:25:
+#define LEVEL1_SIZE (1UL << 21UL)

CHECK:BIT_MACRO: Prefer using the BIT macro
#94: FILE: arch/x86_64/kernel/machine_kexec.c:26:
+#define LEVEL2_SIZE (1UL << 30UL)

CHECK:BIT_MACRO: Prefer using the BIT macro
#95: FILE: arch/x86_64/kernel/machine_kexec.c:27:
+#define LEVEL3_SIZE (1UL << 39UL)

CHECK:BIT_MACRO: Prefer using the BIT macro
#96: FILE: arch/x86_64/kernel/machine_kexec.c:28:
+#define LEVEL4_SIZE (1UL << 48UL)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#103: FILE: arch/x86_64/kernel/machine_kexec.c:35:
+static void init_level2_page(

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#104: FILE: arch/x86_64/kernel/machine_kexec.c:36:
+	uint64_t *level2p, unsigned long addr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#107: FILE: arch/x86_64/kernel/machine_kexec.c:39:
+	unsigned long end_addr;
+	addr &= PAGE_MASK;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#109: FILE: arch/x86_64/kernel/machine_kexec.c:41:
+	while(addr < end_addr) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#116: FILE: arch/x86_64/kernel/machine_kexec.c:48:
+static int init_level3_page(struct kimage *image,
+	uint64_t *level3p, unsigned long addr, unsigned long last_addr)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#116: FILE: arch/x86_64/kernel/machine_kexec.c:48:
+	uint64_t *level3p, unsigned long addr, unsigned long last_addr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#120: FILE: arch/x86_64/kernel/machine_kexec.c:52:
+	int result;
+	result = 0;

ERROR:SPACING: space required before the open parenthesis '('
#123: FILE: arch/x86_64/kernel/machine_kexec.c:55:
+	while((addr < last_addr) && (addr < end_addr)) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#125: FILE: arch/x86_64/kernel/machine_kexec.c:57:
+		uint64_t *level2p;

WARNING:LINE_SPACING: Missing a blank line after declarations
#126: FILE: arch/x86_64/kernel/machine_kexec.c:58:
+		uint64_t *level2p;
+		page = kimage_alloc_control_pages(image, 0);

ERROR:SPACING: space required before the open parenthesis '('
#137: FILE: arch/x86_64/kernel/machine_kexec.c:69:
+	while(addr < end_addr) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#145: FILE: arch/x86_64/kernel/machine_kexec.c:77:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#146: FILE: arch/x86_64/kernel/machine_kexec.c:78:
+static int init_level4_page(struct kimage *image, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#147: FILE: arch/x86_64/kernel/machine_kexec.c:79:
+static int init_level4_page(struct kimage *image, 
+	uint64_t *level4p, unsigned long addr, unsigned long last_addr)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#147: FILE: arch/x86_64/kernel/machine_kexec.c:79:
+	uint64_t *level4p, unsigned long addr, unsigned long last_addr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#151: FILE: arch/x86_64/kernel/machine_kexec.c:83:
+	int result;
+	result = 0;

ERROR:SPACING: space required before the open parenthesis '('
#154: FILE: arch/x86_64/kernel/machine_kexec.c:86:
+	while((addr < last_addr) && (addr < end_addr)) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#156: FILE: arch/x86_64/kernel/machine_kexec.c:88:
+		uint64_t *level3p;

WARNING:LINE_SPACING: Missing a blank line after declarations
#157: FILE: arch/x86_64/kernel/machine_kexec.c:89:
+		uint64_t *level3p;
+		page = kimage_alloc_control_pages(image, 0);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#164: FILE: arch/x86_64/kernel/machine_kexec.c:96:
+		if (result) {
+			goto out;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#171: FILE: arch/x86_64/kernel/machine_kexec.c:103:
+	while(addr < end_addr) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#179: FILE: arch/x86_64/kernel/machine_kexec.c:111:
+
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#182: FILE: arch/x86_64/kernel/machine_kexec.c:114:
+	uint64_t *level4p;

WARNING:LINE_SPACING: Missing a blank line after declarations
#183: FILE: arch/x86_64/kernel/machine_kexec.c:115:
+	uint64_t *level4p;
+	level4p = (uint64_t *)__va(start_pgtable);

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#193: FILE: arch/x86_64/kernel/machine_kexec.c:125:
+	(*(__u64 *)(curidt +2)) = (unsigned long)(newidt);
 	                   ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#195: FILE: arch/x86_64/kernel/machine_kexec.c:127:
+	__asm__ __volatile__ (

CHECK:LINE_SPACING: Please don't use multiple blank lines
#201: FILE: arch/x86_64/kernel/machine_kexec.c:133:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#208: FILE: arch/x86_64/kernel/machine_kexec.c:140:
+	(*(__u64 *)(curgdt +2)) = (unsigned long)(newgdt);
 	                   ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#210: FILE: arch/x86_64/kernel/machine_kexec.c:142:
+	__asm__ __volatile__ (

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#218: FILE: arch/x86_64/kernel/machine_kexec.c:150:
+	__asm__ __volatile__ (

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#219: FILE: arch/x86_64/kernel/machine_kexec.c:151:
+		"\tmovl $"STR(__KERNEL_DS)",%eax\n"

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#230: FILE: arch/x86_64/kernel/machine_kexec.c:162:
+typedef void (*relocate_new_kernel_t)(

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#235: FILE: arch/x86_64/kernel/machine_kexec.c:167:
+extern void relocate_new_kernel_end(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#249: FILE: arch/x86_64/kernel/machine_kexec.c:181:
+	if (result) {
+		return result;
+	}

WARNING:RETURN_VOID: void function return statements are not generally useful
#262: FILE: arch/x86_64/kernel/machine_kexec.c:194:
+	return;
+}

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#289: FILE: arch/x86_64/kernel/machine_kexec.c:221:
+	memcpy((void *)read_pda(level4_pgt), __va(start_pgtable), PAGE_SIZE/2);
 	                                                                   ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#292: FILE: arch/x86_64/kernel/machine_kexec.c:224:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#309: FILE: arch/x86_64/kernel/machine_kexec.c:241:
+	set_gdt(phys_to_virt(0),0);
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#310: FILE: arch/x86_64/kernel/machine_kexec.c:242:
+	set_idt(phys_to_virt(0),0);
 	                       ^

CHECK:SPACING: No space is necessary after a cast
#312: FILE: arch/x86_64/kernel/machine_kexec.c:244:
+	rnk = (relocate_new_kernel_t) control_code_buffer;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#319: FILE: arch/x86_64/kernel/relocate_kernel.S:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#342: FILE: arch/x86_64/kernel/relocate_kernel.S:24:
+^I */^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#352: FILE: arch/x86_64/kernel/relocate_kernel.S:34:
+^Ipushq^I%rdx /* store the start address */^I$

WARNING:TYPO_SPELLING: 'Proctected' may be misspelled - perhaps 'Protected'?
#360: FILE: arch/x86_64/kernel/relocate_kernel.S:42:
+	 * 0  1 == Proctected mode enabled
 	           ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#372: FILE: arch/x86_64/kernel/relocate_kernel.S:54:
+^I * 6  0 == machine check exceptions disabled^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#373: FILE: arch/x86_64/kernel/relocate_kernel.S:55:
+^I * 5  1 == physical address extension enabled^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#375: FILE: arch/x86_64/kernel/relocate_kernel.S:57:
+^I * 3  0 == Debug extensions disabled ^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#376: FILE: arch/x86_64/kernel/relocate_kernel.S:58:
+^I * 2  0 == Time stamp disable (disabled) ^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#388: FILE: arch/x86_64/kernel/relocate_kernel.S:70:
+^I * and flush the TLB.^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#396: FILE: arch/x86_64/kernel/relocate_kernel.S:78:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#398: FILE: arch/x86_64/kernel/relocate_kernel.S:80:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#429: FILE: arch/x86_64/kernel/relocate_kernel.S:111:
+^I * So I flush the TLB by reloading %cr3 here, it's handy, $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#464: FILE: include/asm-x86_64/kexec.h:1:
+#ifndef _X86_64_KEXEC_H

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000258410.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 17 warnings, 31 checks, 450 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000258410.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
