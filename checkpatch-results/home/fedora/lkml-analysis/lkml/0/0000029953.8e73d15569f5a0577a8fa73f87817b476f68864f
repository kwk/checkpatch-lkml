WARNING:REPEATED_WORD: Possible repeated word: 'the'
#76: FILE: include/linux/mm.h:202:
+ * fault_data is filled in the the pagefault handler and passed to the

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#96: FILE: include/linux/mm.h:224:
+	struct page * (*fault)(struct fault_data * data);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#132: FILE: include/linux/mm.h:1049:
+extern struct page *filemap_fault(struct fault_data *data);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#160: FILE: mm/memory.c:2139:
+static int __do_fault(struct mm_struct *mm, struct vm_area_struct *vma,
 		unsigned long address, pte_t *page_table, pmd_t *pmd,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#216: FILE: mm/memory.c:2181:
+		BUG_ON(!PageLocked(faulted_page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#312: FILE: mm/memory.c:2273:
+static int do_linear_fault(struct mm_struct *mm, struct vm_area_struct *vma,
+		unsigned long address, pte_t *page_table, pmd_t *pmd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#326: FILE: mm/memory.c:2284:
+static int do_nonlinear_fault(struct mm_struct *mm, struct vm_area_struct *vma,
+		unsigned long address, pte_t *page_table, pmd_t *pmd,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#409: FILE: mm/filemap.c:1365:
+	BUG_ON(!(fdata->vma->vm_flags & VM_CAN_INVALIDATE));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#745: FILE: mm/fremap.c:133:
+static int populate_range(struct mm_struct *mm, struct vm_area_struct *vma,
+			unsigned long addr, unsigned long size, pgoff_t pgoff)

ERROR:CODE_INDENT: code indent should use tabs where possible
#759: FILE: mm/fremap.c:147:
+        return 0;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#759: FILE: mm/fremap.c:147:
+        return 0;$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#761: FILE: mm/fremap.c:149:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#800: FILE: mm/fremap.c:215:
+	if ((!vma->vm_ops || !vma->vm_ops->populate) &&
+					!(vma->vm_flags & VM_CAN_NONLINEAR))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#846: FILE: mm/fremap.c:252:
+			make_pages_present(start, start+size);
 			                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#848: FILE: mm/fremap.c:254:
+	} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#850: FILE: mm/fremap.c:256:
+^I^I^I^I^I    ^Ipgoff, flags & MAP_NONBLOCK);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#850: FILE: mm/fremap.c:256:
+^I^I^I^I^I    ^Ipgoff, flags & MAP_NONBLOCK);$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#871: FILE: fs/gfs2/ops_file.c:399:
+	vma->vm_flags |= VM_CAN_INVALIDATE|VM_CAN_NONLINEAR;
 	                                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#928: FILE: fs/gfs2/ops_vm.c:146:
+	error = gfs2_write_alloc_required(ip,
+					(u64)fdata->pgoff << PAGE_CACHE_SHIFT,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1031: FILE: fs/xfs/linux-2.6/xfs_file.c:249:
+xfs_vm_fault(

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1152: FILE: mm/filemap_xip.c:226:
+					fdata->pgoff*(PAGE_SIZE/512), 0);
 					            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1152: FILE: mm/filemap_xip.c:226:
+					fdata->pgoff*(PAGE_SIZE/512), 0);
 					                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1171: FILE: mm/filemap_xip.c:240:
+					fdata->pgoff*(PAGE_SIZE/512), 1);
 					            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1171: FILE: mm/filemap_xip.c:240:
+					fdata->pgoff*(PAGE_SIZE/512), 1);
 					                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1270: FILE: mm/shmem.c:1243:
+	error = shmem_getpage(inode, fdata->pgoff, &page,
+						SGP_FAULT, &fdata->type);

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#1272: FILE: mm/shmem.c:1245:
+		fdata->type = ((error == -ENOMEM)?VM_FAULT_OOM:VM_FAULT_SIGBUS);
 		                                 ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1272: FILE: mm/shmem.c:1245:
+		fdata->type = ((error == -ENOMEM)?VM_FAULT_OOM:VM_FAULT_SIGBUS);
 		                                              ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000029953.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 5 warnings, 19 checks, 1206 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000029953.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
