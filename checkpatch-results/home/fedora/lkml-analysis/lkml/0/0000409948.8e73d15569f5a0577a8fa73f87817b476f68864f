ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#45: 
--- a/mm/shmem.c	Mon Nov 18 10:28:28 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#49: FILE: mm/shmem.c:557:
=20

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#52: FILE: mm/shmem.c:559:
+		page =3D find_pagecache_page(&swapper_space, entry->val);
 		     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#66: FILE: mm/shmem.c:595:
+		page =3D find_pagecache_page(&swapper_space, entry->val);
 		     ^

WARNING:TYPO_SPELLING: 'agressive' may be misspelled - perhaps 'aggressive'?
#152: FILE: Changelog.rmap:16:
+  - more agressive freeing for higher order allocations   (me)
          ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'agressive' may be misspelled - perhaps 'aggressive'?
#170: FILE: Changelog.rmap:31:
+  - make OOM detection a bit more agressive               (me)
                                   ^^^^^^^^^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#393: FILE: fs/buffer.c:2938:
+	bh =3D lru_list[BUF_LOCKED];
 	   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#395: FILE: fs/buffer.c:2940:
+		for (i =3D nr_buffers_type[BUF_LOCKED]; i-- > 0; bh =3D next) {
 		       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#395: FILE: fs/buffer.c:2940:
+		for (i =3D nr_buffers_type[BUF_LOCKED]; i-- > 0; bh =3D next) {
 		                                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#396: FILE: fs/buffer.c:2941:
+			next =3D bh->b_next_free;
 			     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#398: FILE: fs/buffer.c:2943:
+			if (!buffer_locked(bh))=20
 			                       ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#398: FILE: fs/buffer.c:2943:
+			if (!buffer_locked(bh))=20

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#400: FILE: fs/buffer.c:2945:
+			else=20
 			    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#400: FILE: fs/buffer.c:2945:
+			else=20

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#479: FILE: include/linux/mm.h:10:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#480: FILE: include/linux/mm.h:11:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#498: FILE: include/linux/mm.h:189:
+					   protected by the lru lock !! */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: spaces required around that '=' (ctx:BxE)
#558: FILE: include/linux/mm.h:454:
+#define TestandSetPageActiveAnon(page)	test_and_set_bit(PG_active_anon, &(=
                                       	                                   ^

CHECK:CAMELCASE: Avoid CamelCase: <TestandSetPageActiveAnon>
#558: FILE: include/linux/mm.h:454:
+#define TestandSetPageActiveAnon(page)	test_and_set_bit(PG_active_anon, &(=

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#558: FILE: include/linux/mm.h:454:
+#define TestandSetPageActiveAnon(page)	test_and_set_bit(PG_active_anon, &(=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#560: FILE: include/linux/mm.h:455:
+#define TestandClearPageActiveAnon(page)	test_and_clear_bit(PG_active_anon=
                                         	                                 ^

CHECK:CAMELCASE: Avoid CamelCase: <TestandClearPageActiveAnon>
#560: FILE: include/linux/mm.h:455:
+#define TestandClearPageActiveAnon(page)	test_and_clear_bit(PG_active_anon=

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#560: FILE: include/linux/mm.h:455:
+#define TestandClearPageActiveAnon(page)	test_and_clear_bit(PG_active_anon=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#565: FILE: include/linux/mm.h:459:
+#define ClearPageActiveCache(page)	clear_bit(PG_active_cache, &(page)->fla=
                                   	                                       ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#565: FILE: include/linux/mm.h:459:
+#define ClearPageActiveCache(page)	clear_bit(PG_active_cache, &(page)->fla=

CHECK:CAMELCASE: Avoid CamelCase: <TestandSetPageActiveCache>
#567: FILE: include/linux/mm.h:460:
+#define TestandSetPageActiveCache(page)	test_and_set_bit(PG_active_cache, =

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#567: FILE: include/linux/mm.h:460:
+#define TestandSetPageActiveCache(page)	test_and_set_bit(PG_active_cache, =

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#569: FILE: include/linux/mm.h:461:
+#define TestandClearPageActiveCache(page)	test_and_clear_bit(PG_active_cac=
                                          	                                ^

CHECK:CAMELCASE: Avoid CamelCase: <TestandClearPageActiveCache>
#569: FILE: include/linux/mm.h:461:
+#define TestandClearPageActiveCache(page)	test_and_clear_bit(PG_active_cac=

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#569: FILE: include/linux/mm.h:461:
+#define TestandClearPageActiveCache(page)	test_and_clear_bit(PG_active_cac=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#572: FILE: include/linux/mm.h:463:
+#define PageInactiveLaundry(page)	test_bit(PG_inactive_laundry, &(page)->f=
                                  	                                        ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#572: FILE: include/linux/mm.h:463:
+#define PageInactiveLaundry(page)	test_bit(PG_inactive_laundry, &(page)->f=

ERROR:SPACING: spaces required around that '-=' (ctx:VxE)
#574: FILE: include/linux/mm.h:464:
+#define SetPageInactiveLaundry(page)	set_bit(PG_inactive_laundry, &(page)-=
                                     	                                    ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#574: FILE: include/linux/mm.h:464:
+#define SetPageInactiveLaundry(page)	set_bit(PG_inactive_laundry, &(page)-=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#576: FILE: include/linux/mm.h:465:
+#define ClearPageInactiveLaundry(page)	clear_bit(PG_inactive_laundry, &(pa=
                                       	                                   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#576: FILE: include/linux/mm.h:465:
+#define ClearPageInactiveLaundry(page)	clear_bit(PG_inactive_laundry, &(pa=

CHECK:LINE_SPACING: Please don't use multiple blank lines
#595: FILE: include/linux/mm_inline.h:7:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#603: FILE: include/linux/mm_inline.h:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#604: FILE: include/linux/mm_inline.h:16:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#625: FILE: include/linux/mm_inline.h:36:
+=20
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#643: FILE: include/linux/mm_inline.h:54:
+	tmp =3D bh =3D page->buffers;
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#643: FILE: include/linux/mm_inline.h:54:
+	tmp =3D bh =3D page->buffers;
 	           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#646: FILE: include/linux/mm_inline.h:57:
+		if (tmp->b_state & ((1<<BH_Dirty) | (1<<BH_Lock)))
 		                      ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#646: FILE: include/linux/mm_inline.h:57:
+		if (tmp->b_state & ((1<<BH_Dirty) | (1<<BH_Lock)))
 		                                      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#648: FILE: include/linux/mm_inline.h:59:
+		tmp =3D tmp->b_this_page;
 		    ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#649: FILE: include/linux/mm_inline.h:60:
+	} while (tmp !=3D bh);
 	             ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#662: FILE: include/linux/mm_inline.h:72:
+static inline int page_anon(struct page * page)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#666: FILE: include/linux/mm_inline.h:76:
+	 * set of the process... */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#685: FILE: include/linux/mm_inline.h:93:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#687: FILE: include/linux/mm_inline.h:95:
+static inline void add_page_to_active_anon_list(struct page * page, int ag=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#687: FILE: include/linux/mm_inline.h:95:
+static inline void add_page_to_active_anon_list(struct page * page, int ag=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#698: FILE: include/linux/mm_inline.h:101:
+	page->age =3D age + active_age_bias;
 	          ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#702: FILE: include/linux/mm_inline.h:105:
+static inline void add_page_to_active_cache_list(struct page * page, int a=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#702: FILE: include/linux/mm_inline.h:105:
+static inline void add_page_to_active_cache_list(struct page * page, int a=
                                                                           ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#704: FILE: include/linux/mm_inline.h:106:
+static inline void add_page_to_active_cache_list(struct page * page, int a=
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#705: FILE: include/linux/mm_inline.h:107:
+	struct zone_struct * zone =3D page_zone(page);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#705: FILE: include/linux/mm_inline.h:107:
+	struct zone_struct * zone =3D page_zone(page);
 	                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#706: FILE: include/linux/mm_inline.h:108:
+	struct zone_struct * zone =3D page_zone(page);
+	DEBUG_LRU_PAGE(page);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#709: FILE: include/linux/mm_inline.h:111:
+	page->age =3D age + active_age_bias;
 	          ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#713: FILE: include/linux/mm_inline.h:115:
+static inline void add_page_to_active_list(struct page * page, int age)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#729: FILE: include/linux/mm_inline.h:135:
+static inline void add_page_to_inactive_laundry_list(struct page * page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#731: FILE: include/linux/mm_inline.h:137:
+	struct zone_struct * zone =3D page_zone(page);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#731: FILE: include/linux/mm_inline.h:137:
+	struct zone_struct * zone =3D page_zone(page);
 	                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#732: FILE: include/linux/mm_inline.h:138:
+	struct zone_struct * zone =3D page_zone(page);
+	DEBUG_LRU_PAGE(page);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#747: FILE: include/linux/mm_inline.h:152:
 }
+static inline void del_page_from_active_anon_list(struct page * page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#747: FILE: include/linux/mm_inline.h:152:
+static inline void del_page_from_active_anon_list(struct page * page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#749: FILE: include/linux/mm_inline.h:154:
+	struct zone_struct * zone =3D page_zone(page);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#749: FILE: include/linux/mm_inline.h:154:
+	struct zone_struct * zone =3D page_zone(page);
 	                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#751: FILE: include/linux/mm_inline.h:156:
+	unsigned char age;
+	list_del(&page->lru);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#754: FILE: include/linux/mm_inline.h:159:
+	age =3D page->age - active_age_bias;
 	    ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#755: FILE: include/linux/mm_inline.h:160:
+	if (age<=3DMAX_AGE)
 	       ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#760: FILE: include/linux/mm_inline.h:165:
+static inline void del_page_from_active_cache_list(struct page * page)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#770: FILE: include/linux/mm_inline.h:172:
+	age =3D page->age - active_age_bias;
 	    ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#771: FILE: include/linux/mm_inline.h:173:
+	if (age<=3DMAX_AGE)
 	       ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#785: FILE: include/linux/mm_inline.h:187:
 }
+static inline void del_page_from_inactive_laundry_list(struct page * page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#785: FILE: include/linux/mm_inline.h:187:
+static inline void del_page_from_inactive_laundry_list(struct page * page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#787: FILE: include/linux/mm_inline.h:189:
+	struct zone_struct * zone =3D page_zone(page);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#787: FILE: include/linux/mm_inline.h:189:
+	struct zone_struct * zone =3D page_zone(page);
 	                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#788: FILE: include/linux/mm_inline.h:190:
+	struct zone_struct * zone =3D page_zone(page);
+	list_del(&page->lru);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#809: FILE: include/linux/mm_inline.h:318:
+	inactive_base =3D zone->active_anon_pages + zone->active_cache_pages
 	              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#820: FILE: include/linux/mm_inline.h:390:
+	unsigned long active, inactive;
+	active =3D zone->active_anon_pages + zone->active_cache_pages

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#820: FILE: include/linux/mm_inline.h:390:
+	active =3D zone->active_anon_pages + zone->active_cache_pages
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#822: FILE: include/linux/mm_inline.h:392:
+	inactive =3D zone->inactive_dirty_pages + zone->inactive_clean_pages + zo=
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#822: FILE: include/linux/mm_inline.h:392:
+	inactive =3D zone->inactive_dirty_pages + zone->inactive_clean_pages + zo=
 	                                                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#824: FILE: include/linux/mm_inline.h:393:
+	if (inactive * 5 >   (active+inactive))
 	                            ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#836: FILE: include/linux/mm_inline.h:404:
+	target =3D nr_active_anon_pages() + nr_active_cache_pages()
 	       ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#845: FILE: include/linux/mm_inline.h:410:
 }
+static inline void lru_lock(struct zone_struct *zone)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#907: FILE: include/linux/mmzone.h:60:
+	int			active_anon_count[MAX_AGE+1];
 	   			                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#908: FILE: include/linux/mmzone.h:61:
+	int			active_cache_count[MAX_AGE+1];
 	   			                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#914: FILE: include/linux/mmzone.h:65:
+	struct list_head	active_anon_list[MAX_AGE+1];
 	                	                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#915: FILE: include/linux/mmzone.h:66:
+	struct list_head	active_cache_list[MAX_AGE+1];
 	                	                         ^

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#920: FILE: include/linux/mmzone.h:71:
+	spinlock_t		lru_lock;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#936: FILE: include/linux/mmzone.h:290:
+static const char cpyright=3D"This software may be freely redistributed un=
                           ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#984: FILE: include/linux/pagemap.h:88:
+extern int wait_on_page_timeout(struct page *page, int timeout);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#986: FILE: include/linux/pagemap.h:90:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#987: FILE: include/linux/pagemap.h:91:
+extern struct page * __find_pagecache_page(struct address_space *mapping,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#987: FILE: include/linux/pagemap.h:91:
+extern struct page * __find_pagecache_page(struct address_space *mapping,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#988: FILE: include/linux/pagemap.h:92:
+extern struct page * __find_pagecache_page(struct address_space *mapping,
+				unsigned long index, struct page **hash);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mapping' - possible side-effects?
#989: FILE: include/linux/pagemap.h:93:
+#define find_pagecache_page(mapping, index) \
+	__find_pagecache_page(mapping, index, page_hash(mapping, index))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'index' - possible side-effects?
#989: FILE: include/linux/pagemap.h:93:
+#define find_pagecache_page(mapping, index) \
+	__find_pagecache_page(mapping, index, page_hash(mapping, index))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mapping' - possible side-effects?
#991: FILE: include/linux/pagemap.h:95:
+#define find_get_page(mapping, index) \
+	__find_pagecache_page(mapping, index, page_hash(mapping, index))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'index' - possible side-effects?
#991: FILE: include/linux/pagemap.h:95:
+#define find_get_page(mapping, index) \
+	__find_pagecache_page(mapping, index, page_hash(mapping, index))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1009: FILE: include/linux/swap.h:87:
+extern unsigned int nr_active_anon_pages(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1010: FILE: include/linux/swap.h:88:
+extern unsigned int nr_active_cache_pages(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1011: FILE: include/linux/swap.h:89:
+extern unsigned int nr_inactive_dirty_pages(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1012: FILE: include/linux/swap.h:90:
+extern unsigned int nr_inactive_laundry_pages(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1013: FILE: include/linux/swap.h:91:
+extern unsigned int nr_inactive_clean_pages(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1021: FILE: include/linux/swap.h:119:
+extern void FASTCALL(lru_cache_add_dirty(struct page *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#1021: FILE: include/linux/swap.h:119:
+extern void FASTCALL(lru_cache_add_dirty(struct page *));

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1029: FILE: include/linux/swap.h:136:
+extern int rebalance_laundry_zone(struct zone_struct *, int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zone_struct *' should also have an identifier name
#1029: FILE: include/linux/swap.h:136:
+extern int rebalance_laundry_zone(struct zone_struct *, int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1029: FILE: include/linux/swap.h:136:
+extern int rebalance_laundry_zone(struct zone_struct *, int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1029: FILE: include/linux/swap.h:136:
+extern int rebalance_laundry_zone(struct zone_struct *, int, unsigned int);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1053: FILE: include/linux/swap.h:200:
+		BUG();				\

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1059: FILE: include/linux/swap.h:206:
+		BUG();				\

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#1084: FILE: Makefile:4:
+EXTRAVERSION =3D -ac1-rmap15a
 ^^^^^^^^^^^^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1140: FILE: mm/filemap.c:887:
+	wait_queue_head_t *waitqueue =3D page_waitqueue(page);
 	                             ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1141: FILE: mm/filemap.c:888:
+	struct task_struct *tsk =3D current;
 	                        ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1143: FILE: mm/filemap.c:890:
+=09
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1153: FILE: mm/filemap.c:900:
+		timeout =3D schedule_timeout(timeout);
 		        ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1214: FILE: mm/filemap.c:1094:
+struct page * __find_pagecache_page(struct address_space *mapping,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1215: FILE: mm/filemap.c:1095:
+struct page * __find_pagecache_page(struct address_space *mapping,
+			      unsigned long offset, struct page **hash)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1224: FILE: mm/filemap.c:1104:
+	page =3D __find_page_nolock(mapping, offset, *hash);
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1241: FILE: mm/filemap.c:1122:
+	page =3D __find_pagecache_page(mapping, index, hash);
 	     ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1259: FILE: mm/filemap.c:1929:
+	max =3D (nr_inactive_clean_pages() + nr_inactive_laundry_pages()) / 2;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1259: FILE: mm/filemap.c:1929:
+	max =3D (nr_inactive_clean_pages() + nr_inactive_laundry_pages()) / 2;
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1268: FILE: mm/filemap.c:2053:
+	page =3D __find_pagecache_page(mapping, pgoff, hash);
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1277: FILE: mm/filemap.c:2916:
+	page =3D __find_pagecache_page(mapping, index, hash);
 	     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1302: FILE: mm/page_alloc.c:110:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1308: FILE: mm/page_alloc.c:116:
+		BUG();

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1323: FILE: mm/page_alloc.c:565:
+		int try_harder =3D 0;
 		               ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1324: FILE: mm/page_alloc.c:566:
+		unsigned int mask =3D 0;
 		                  ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1339: FILE: mm/page_alloc.c:582:
+			numpages =3D z->inactive_laundry_pages;
 			         ^

ERROR:SPACING: spaces required around that '/=' (ctx:WxV)
#1341: FILE: mm/page_alloc.c:584:
+				numpages /=3D 2;
 				         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1342: FILE: mm/page_alloc.c:585:
+				mask =3D gfp_mask;
 				     ^

ERROR:SPACING: spaces required around that '|=' (ctx:WxV)
#1345: FILE: mm/page_alloc.c:588:
+			current->flags |=3D PF_MEMALLOC;
 			               ^

ERROR:SPACING: spaces required around that '&=' (ctx:WxV)
#1347: FILE: mm/page_alloc.c:590:
+			current->flags &=3D ~PF_MEMALLOC;
 			               ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1364: FILE: mm/page_alloc.c:607:
+			try_harder =3D 1;
 			           ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '__stat' may be better as '(__stat)' to avoid precedence issues
#1383: FILE: mm/page_alloc.c:664:
+#define NR_FOO_PAGES(__function_name, __stat)	\
+	unsigned int __function_name (void)	\
+	{					\
+		unsigned int sum =3D 0;		\
+		zone_t *zone;			\
+						\
+		for_each_zone(zone)		\
+			sum +=3D zone->__stat;	\
+		return sum;			\
+	}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#1383: FILE: mm/page_alloc.c:664:
+#define NR_FOO_PAGES(__function_name, __stat)	\
+	unsigned int __function_name (void)	\
+	{					\
+		unsigned int sum =3D 0;		\
+		zone_t *zone;			\
+						\
+		for_each_zone(zone)		\
+			sum +=3D zone->__stat;	\
+		return sum;			\
+	}

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1386: FILE: mm/page_alloc.c:667:
+		unsigned int sum =3D 0;		\
 		                 ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#1390: FILE: mm/page_alloc.c:671:
+			sum +=3D zone->__stat;	\
 			    ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#1413: FILE: mm/page_alloc.c:699:
+			sum +=3D zone->inactive_laundry_pages;
 			    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1436: FILE: mm/page_alloc.c:971:
+		zone->active_anon_pages =3D 0;
 		                        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1437: FILE: mm/page_alloc.c:972:
+		zone->active_cache_pages =3D 0;
 		                         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1439: FILE: mm/page_alloc.c:974:
+		zone->inactive_laundry_pages =3D 0;
 		                             ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1443: FILE: mm/page_alloc.c:977:
+		zone->need_scan =3D 0;
 		                ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1444: FILE: mm/page_alloc.c:978:
+		for (k =3D 0; k <=3D MAX_AGE ; k++) {
 		       ^

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#1444: FILE: mm/page_alloc.c:978:
+		for (k =3D 0; k <=3D MAX_AGE ; k++) {
 		                ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1446: FILE: mm/page_alloc.c:980:
+			zone->active_anon_count[k] =3D 0;
 			                           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1448: FILE: mm/page_alloc.c:982:
+		for (k =3D 0; k <=3D MAX_AGE ; k++) {
 		       ^

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#1448: FILE: mm/page_alloc.c:982:
+		for (k =3D 0; k <=3D MAX_AGE ; k++) {
 		                ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1450: FILE: mm/page_alloc.c:984:
+			zone->active_cache_count[k] =3D 0;
 			                            ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1497: FILE: mm/shmem.c:583:
+	page =3D find_pagecache_page(mapping, idx);
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1506: FILE: mm/shmem.c:595:
+		page =3D find_pagecache_page(&swapper_space, entry->val);
 		     ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1554: FILE: mm/swap.c:80:
+void drop_page_zone(struct zone_struct *zone, struct page * page)

CHECK:CAMELCASE: Avoid CamelCase: <TryLockPage>
#1556: FILE: mm/swap.c:82:
+	if (!TryLockPage(page)) {

CHECK:CAMELCASE: Avoid CamelCase: <UnlockPage>
#1564: FILE: mm/swap.c:90:
+		UnlockPage(page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1570: FILE: mm/swap.c:96:
+	if (!page->mapping || PageDirty(page) || page->pte_chain ||
+			page->buffers || page_count(page) > 1)

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1573: FILE: mm/swap.c:99:
+	else if (page_count(page) =3D=3D 1) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1573: FILE: mm/swap.c:99:
+	else if (page_count(page) =3D=3D 1) {
 	                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1573: FILE: mm/swap.c:99:
+	else if (page_count(page) =3D=3D 1) {
 	                             ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1573: FILE: mm/swap.c:99:
+	else if (page_count(page) =3D=3D 1) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1681: FILE: mm/swap.c:203:
+	if (PageActiveAnon(page)) {
[...]
+	} else if (PageActiveCache(page)) {
[...]
 	} else if (PageInactiveDirty(page)) {
[...]
+	} else if (PageInactiveLaundry(page)) {
[...]
 	} else if (PageInactiveClean(page)) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1714: FILE: mm/swap.c:198:
+	found =3D find_pagecache_page(&swapper_space, entry.val);
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1727: FILE: mm/swap.c:230:
+		found_page =3D find_pagecache_page(&swapper_space, entry.val);
 		           ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1752: FILE: mm/vmscan.c:43:
+=09
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1753: FILE: mm/vmscan.c:44:
+	new_age =3D old_age+4;
 	        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1753: FILE: mm/vmscan.c:44:
+	new_age =3D old_age+4;
 	                   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1755: FILE: mm/vmscan.c:46:
+		new_age =3D 0;
 		        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1757: FILE: mm/vmscan.c:48:
+		new_age =3D MAX_AGE;=09
 		        ^

ERROR:SPACING: space required after that ';' (ctx:VxO)
#1757: FILE: mm/vmscan.c:48:
+		new_age =3D MAX_AGE;=09
 		                   ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#1757: FILE: mm/vmscan.c:48:
+		new_age =3D MAX_AGE;=09
 		                    ^

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1758: FILE: mm/vmscan.c:49:
+		new_age =3D MAX_AGE;=09
+	=09

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#1758: FILE: mm/vmscan.c:49:
+	=09
 	^

ERROR:SPACING: space required after that ';' (ctx:VxO)
#1761: FILE: mm/vmscan.c:52:
+		add_page_to_active_anon_list(page, new_age);=09
 		                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#1761: FILE: mm/vmscan.c:52:
+		add_page_to_active_anon_list(page, new_age);=09
 		                                            ^

ERROR:SPACING: space required after that ';' (ctx:VxO)
#1764: FILE: mm/vmscan.c:55:
+		add_page_to_active_cache_list(page, new_age);=09
 		                                            ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#1764: FILE: mm/vmscan.c:55:
+		add_page_to_active_cache_list(page, new_age);=09
 		                                             ^

ERROR:SPACING: space required after that ';' (ctx:VxO)
#1767: FILE: mm/vmscan.c:58:
+		add_page_to_active_list(page, new_age);=09
 		                                      ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#1767: FILE: mm/vmscan.c:58:
+		add_page_to_active_list(page, new_age);=09
 		                                       ^

ERROR:SPACING: space required after that ';' (ctx:VxO)
#1770: FILE: mm/vmscan.c:61:
+		add_page_to_active_list(page, new_age);=09
 		                                      ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#1770: FILE: mm/vmscan.c:61:
+		add_page_to_active_list(page, new_age);=09
 		                                       ^

ERROR:SPACING: space required after that ';' (ctx:VxO)
#1773: FILE: mm/vmscan.c:64:
+		add_page_to_active_list(page, new_age);=09
 		                                      ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#1773: FILE: mm/vmscan.c:64:
+		add_page_to_active_list(page, new_age);=09
 		                                       ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1774: FILE: mm/vmscan.c:65:
+	} else return;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1807: FILE: mm/vmscan.c:117:
+		BUG_ON(unlikely(!PageInactiveClean(page)));

WARNING:TYPO_SPELLING: 'inbalance' may be misspelled - perhaps 'imbalance'?
#1844: FILE: mm/vmscan.c:184:
+ * Returns true if the zone in question has an inbalance between inactive
                                                ^^^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1849: FILE: mm/vmscan.c:188:
+static inline int need_rebalance_dirty(zone_t * zone)

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1854: FILE: mm/vmscan.c:190:
+	if (zone->inactive_dirty_pages > zone->inactive_laundry_pages + zone->ina=
 	                                                                         ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1854: FILE: mm/vmscan.c:190:
+	if (zone->inactive_dirty_pages > zone->inactive_laundry_pages + zone->ina=

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1871: FILE: mm/vmscan.c:194:
+}
+/**

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1879: FILE: mm/vmscan.c:201:
+static inline int need_rebalance_laundry(zone_t * zone)

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#1881: FILE: mm/vmscan.c:203:
+	if (free_low(zone) >=3D 0)
 	                   ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1954: FILE: mm/vmscan.c:218:
+int launder_page(zone_t * zone, int gfp_mask, struct page *page)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1963: FILE: mm/vmscan.c:224:
+	if (unlikely(page_count(page)) =3D=3D 0)
 	                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1963: FILE: mm/vmscan.c:224:
+	if (unlikely(page_count(page)) =3D=3D 0)
 	                                  ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1963: FILE: mm/vmscan.c:224:
+	if (unlikely(page_count(page)) =3D=3D 0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1969: FILE: mm/vmscan.c:226:
+	BUG_ON(!PageInactiveDirty(page));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1973: FILE: mm/vmscan.c:230:
+	page->age =3D (jiffies/HZ)&255;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1973: FILE: mm/vmscan.c:230:
+	page->age =3D (jiffies/HZ)&255;
 	          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1973: FILE: mm/vmscan.c:230:
+	page->age =3D (jiffies/HZ)&255;
 	                      ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1973: FILE: mm/vmscan.c:230:
+	page->age =3D (jiffies/HZ)&255;
 	                          ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1980: FILE: mm/vmscan.c:237:
+	if (unlikely(TryLockPage(page))) {
+		return 1;
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1995: FILE: mm/vmscan.c:246:
+	if (page_referenced(page, &over_rsslimit) && !over_rsslimit &&
+			page_mapping_inuse(page)) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2048: FILE: mm/vmscan.c:277:
+		if (unlikely(page_count(page)) =3D=3D 0) {
 		                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2048: FILE: mm/vmscan.c:277:
+		if (unlikely(page_count(page)) =3D=3D 0) {
 		                                  ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2048: FILE: mm/vmscan.c:277:
+		if (unlikely(page_count(page)) =3D=3D 0) {

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#2069: FILE: mm/vmscan.c:288:
+		switch (try_to_unmap(page)) {
+			case SWAP_ERROR:
+			case SWAP_FAIL:
[...]
+			case SWAP_AGAIN:
[...]
+			case SWAP_SUCCESS:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2095: FILE: mm/vmscan.c:297:
+				; /* fall through, try freeing the page below */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#2121: FILE: mm/vmscan.c:308:
+		int (*writepage)(struct page *);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2123: FILE: mm/vmscan.c:310:
+		writepage =3D page->mapping->a_ops->writepage;
 		          ^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2135: FILE: mm/vmscan.c:322:
+			return 1;
+		} else {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2208: FILE: mm/vmscan.c:360:
+	if (page->mapping && !PageDirty(page) && !page->pte_chain &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2209: FILE: mm/vmscan.c:361:
+	if (page->mapping && !PageDirty(page) && !page->pte_chain &&
+			page_count(page) =3D=3D 1) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2209: FILE: mm/vmscan.c:361:
+			page_count(page) =3D=3D 1) {
 			                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2209: FILE: mm/vmscan.c:361:
+			page_count(page) =3D=3D 1) {
 			                    ^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2213: FILE: mm/vmscan.c:365:
+		return 1;
+	} else {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2246: FILE: mm/vmscan.c:378:
+}
+unsigned char active_age_bias =3D 0;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2246: FILE: mm/vmscan.c:378:
+unsigned char active_age_bias =3D 0;
                               ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2252: FILE: mm/vmscan.c:381:
+static inline void kachunk_anon(struct zone_struct * zone)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2255: FILE: mm/vmscan.c:384:
+	int k;
+	if (!list_empty(&zone->active_anon_list[0]))

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2288: FILE: mm/vmscan.c:388:
+	for (k =3D 0; k < MAX_AGE; k++)  {
 	       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2289: FILE: mm/vmscan.c:389:
+		list_splice_init(&zone->active_anon_list[k+1], &zone->active_anon_list[k=
 		                                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#2289: FILE: mm/vmscan.c:389:
+		list_splice_init(&zone->active_anon_list[k+1], &zone->active_anon_list[k=
 		                                                                        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2291: FILE: mm/vmscan.c:390:
+		zone->active_anon_count[k] =3D zone->active_anon_count[k+1];
 		                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2291: FILE: mm/vmscan.c:390:
+		zone->active_anon_count[k] =3D zone->active_anon_count[k+1];
 		                                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2292: FILE: mm/vmscan.c:391:
+		zone->active_anon_count[k+1] =3D 0;
 		                         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2292: FILE: mm/vmscan.c:391:
+		zone->active_anon_count[k+1] =3D 0;
 		                             ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2300: FILE: mm/vmscan.c:399:
+static inline void kachunk_cache(struct zone_struct * zone)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2303: FILE: mm/vmscan.c:402:
+	int k;
+	if (!list_empty(&zone->active_cache_list[0]))

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2308: FILE: mm/vmscan.c:407:
+	for (k =3D 0; k < MAX_AGE; k++)  {
 	       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2309: FILE: mm/vmscan.c:408:
+		list_splice_init(&zone->active_cache_list[k+1], &zone->active_cache_list=
 		                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#2309: FILE: mm/vmscan.c:408:
+		list_splice_init(&zone->active_cache_list[k+1], &zone->active_cache_list=
 		                                                                        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2311: FILE: mm/vmscan.c:409:
+		zone->active_cache_count[k] =3D zone->active_cache_count[k+1];
 		                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2311: FILE: mm/vmscan.c:409:
+		zone->active_cache_count[k] =3D zone->active_cache_count[k+1];
 		                                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2312: FILE: mm/vmscan.c:410:
+		zone->active_cache_count[k+1] =3D 0;
 		                          ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2312: FILE: mm/vmscan.c:410:
+		zone->active_cache_count[k+1] =3D 0;
 		                              ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2327: FILE: mm/vmscan.c:423:
+static inline int cache_ratio(struct zone_struct * zone)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2341: FILE: mm/vmscan.c:437:
+static int  active_anon_work[11] =3D {32, 32, 12,  4,  2,  1,  1,  1,  1, =
                                  ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2343: FILE: mm/vmscan.c:439:
+static int active_cache_work[11] =3D {32, 32, 52, 60, 62, 63, 63, 63, 63, =
                                  ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2353: FILE: mm/vmscan.c:448:
+int refill_inactive_zone(struct zone_struct * zone, int priority, int targ=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#2353: FILE: mm/vmscan.c:448:
+int refill_inactive_zone(struct zone_struct * zone, int priority, int targ=
                                                                           ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2355: FILE: mm/vmscan.c:449:
+int refill_inactive_zone(struct zone_struct * zone, int priority, int targ=
+{

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2356: FILE: mm/vmscan.c:450:
+	int maxscan =3D (zone->active_anon_pages + zone->active_cache_pages) >> p=

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2356: FILE: mm/vmscan.c:450:
+	int maxscan =3D (zone->active_anon_pages + zone->active_cache_pages) >> p=
 	            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#2356: FILE: mm/vmscan.c:450:
+	int maxscan =3D (zone->active_anon_pages + zone->active_cache_pages) >> p=
 	                                                                         ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2358: FILE: mm/vmscan.c:451:
+	struct list_head * page_lru;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2359: FILE: mm/vmscan.c:452:
+	struct page * page;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2361: FILE: mm/vmscan.c:454:
+	int progress =3D 0;
 	             ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2367: FILE: mm/vmscan.c:460:
+		target =3D BATCH_WORK_AMOUNT;
 		       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2369: FILE: mm/vmscan.c:462:
+	ratio =3D cache_ratio(zone);
 	      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2374: FILE: mm/vmscan.c:466:
+		int anon_work, cache_work;
+		anon_work =3D active_anon_work[ratio];

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2374: FILE: mm/vmscan.c:466:
+		anon_work =3D active_anon_work[ratio];
 		          ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2375: FILE: mm/vmscan.c:467:
+		cache_work =3D active_cache_work[ratio];
 		           ^

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#2377: FILE: mm/vmscan.c:469:
+		while (anon_work-- >=3D 0 && zone->active_anon_pages) {
 		                   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2384: FILE: mm/vmscan.c:474:
+			page_lru =3D zone->active_anon_list[0].prev;
 			         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2385: FILE: mm/vmscan.c:475:
+			page =3D list_entry(page_lru, struct page, lru);
 			     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2402: FILE: mm/vmscan.c:477:
+			BUG_ON(unlikely(!PageActiveAnon(page)));

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#2403: FILE: mm/vmscan.c:478:
+			BUG_ON(unlikely(!PageActiveAnon(page)));
+	=09

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2403: FILE: mm/vmscan.c:478:
+	=09
 	^

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#2435: FILE: mm/vmscan.c:508:
+		while (cache_work-- >=3D 0 && zone->active_cache_pages) {
 		                    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2441: FILE: mm/vmscan.c:514:
+			page_lru =3D zone->active_cache_list[0].prev;
 			         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2442: FILE: mm/vmscan.c:515:
+			page =3D list_entry(page_lru, struct page, lru);
 			     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2445: FILE: mm/vmscan.c:518:
+			BUG_ON(unlikely(!PageActiveCache(page)));

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#2446: FILE: mm/vmscan.c:519:
+			BUG_ON(unlikely(!PageActiveCache(page)));
+	=09

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2446: FILE: mm/vmscan.c:519:
+	=09
 	^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2498: FILE: mm/vmscan.c:552:
 }
+static int need_active_anon_scan(struct zone_struct * zone)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2498: FILE: mm/vmscan.c:552:
+static int need_active_anon_scan(struct zone_struct * zone)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2502: FILE: mm/vmscan.c:554:
+	int low =3D 0, high =3D 0;
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2502: FILE: mm/vmscan.c:554:
+	int low =3D 0, high =3D 0;
 	                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2504: FILE: mm/vmscan.c:556:
+	int k;
+	for (k=3D0; k < MAX_AGE/2; k++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2504: FILE: mm/vmscan.c:556:
+	for (k=3D0; k < MAX_AGE/2; k++)
 	      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2504: FILE: mm/vmscan.c:556:
+	for (k=3D0; k < MAX_AGE/2; k++)
 	                       ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#2505: FILE: mm/vmscan.c:557:
+		low +=3D zone->active_anon_count[k];
 		    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2519: FILE: mm/vmscan.c:558:
+	for (k=3DMAX_AGE/2; k <=3D MAX_AGE; k++)
 	      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2519: FILE: mm/vmscan.c:558:
+	for (k=3DMAX_AGE/2; k <=3D MAX_AGE; k++)
 	                ^

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#2519: FILE: mm/vmscan.c:558:
+	for (k=3DMAX_AGE/2; k <=3D MAX_AGE; k++)
 	                      ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#2520: FILE: mm/vmscan.c:559:
+		high +=3D zone->active_anon_count[k];
 		     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2522: FILE: mm/vmscan.c:561:
+	if (high<low)
 	        ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2527: FILE: mm/vmscan.c:566:
+static int need_active_cache_scan(struct zone_struct * zone)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2529: FILE: mm/vmscan.c:568:
+	int low =3D 0, high =3D 0;
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2529: FILE: mm/vmscan.c:568:
+	int low =3D 0, high =3D 0;
 	                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2531: FILE: mm/vmscan.c:570:
+	int k;
+	for (k=3D0; k < MAX_AGE/2; k++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2531: FILE: mm/vmscan.c:570:
+	for (k=3D0; k < MAX_AGE/2; k++)
 	      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2531: FILE: mm/vmscan.c:570:
+	for (k=3D0; k < MAX_AGE/2; k++)
 	                       ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#2532: FILE: mm/vmscan.c:571:
+		low +=3D zone->active_cache_count[k];
 		    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2534: FILE: mm/vmscan.c:573:
+	for (k=3DMAX_AGE/2; k <=3D MAX_AGE; k++)
 	      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2534: FILE: mm/vmscan.c:573:
+	for (k=3DMAX_AGE/2; k <=3D MAX_AGE; k++)
 	                ^

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#2534: FILE: mm/vmscan.c:573:
+	for (k=3DMAX_AGE/2; k <=3D MAX_AGE; k++)
 	                      ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#2535: FILE: mm/vmscan.c:574:
+		high +=3D zone->active_cache_count[k];
 		     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2538: FILE: mm/vmscan.c:575:
+	if (high<low)
 	        ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2549: FILE: mm/vmscan.c:579:
 }
+static int scan_active_list(struct zone_struct * zone, int age, int anon)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2549: FILE: mm/vmscan.c:579:
+static int scan_active_list(struct zone_struct * zone, int age, int anon)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2551: FILE: mm/vmscan.c:581:
+	struct list_head * list, *page_lru , *next;

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#2551: FILE: mm/vmscan.c:581:
+	struct list_head * list, *page_lru , *next;
 	                                   ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2552: FILE: mm/vmscan.c:582:
+	struct page * page;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2556: FILE: mm/vmscan.c:586:
+		list =3D &zone->active_anon_list[age];
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#2556: FILE: mm/vmscan.c:586:
+		list =3D &zone->active_anon_list[age];
 		         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2558: FILE: mm/vmscan.c:588:
+		list =3D &zone->active_cache_list[age];
 		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#2558: FILE: mm/vmscan.c:588:
+		list =3D &zone->active_cache_list[age];
 		         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2563: FILE: mm/vmscan.c:593:
+		page =3D list_entry(page_lru, struct page, lru);
 		     ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2579: FILE: mm/vmscan.c:607:
+int rebalance_laundry_zone(struct zone_struct * zone, int max_work, unsign=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#2579: FILE: mm/vmscan.c:607:
+int rebalance_laundry_zone(struct zone_struct * zone, int max_work, unsign=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2587: FILE: mm/vmscan.c:611:
+	int work_done =3D 0;
 	              ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2590: FILE: mm/vmscan.c:613:
+	max_loop =3D max_work;
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2592: FILE: mm/vmscan.c:615:
+		max_loop =3D BATCH_WORK_AMOUNT;
 		         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2599: FILE: mm/vmscan.c:619:
+		page_lru =3D zone->inactive_laundry_list.prev;
 		         ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2611: FILE: mm/vmscan.c:622:
+		BUG_ON(unlikely(!PageInactiveLaundry(page)));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'work_done < max_work'
#2623: FILE: mm/vmscan.c:631:
+			if ((gfp_mask & __GFP_WAIT) && (work_done < max_work)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#2625: FILE: mm/vmscan.c:633:
+				int timed_out;
+			=09

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2625: FILE: mm/vmscan.c:633:
+			=09
 			^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2629: FILE: mm/vmscan.c:637:
+				timed_out =3D wait_on_page_timeout(page, 5 * HZ);
 				          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2640: FILE: mm/vmscan.c:648:
+					unsigned char now;
+					now =3D (jiffies/HZ)&255;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2640: FILE: mm/vmscan.c:648:
+					now =3D (jiffies/HZ)&255;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2640: FILE: mm/vmscan.c:648:
+					now =3D (jiffies/HZ)&255;
 					    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2640: FILE: mm/vmscan.c:648:
+					now =3D (jiffies/HZ)&255;
 					                ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2640: FILE: mm/vmscan.c:648:
+					now =3D (jiffies/HZ)&255;
 					                    ^

CHECK:BRACES: Unbalanced braces around else statement
#2654: FILE: mm/vmscan.c:662:
+			} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'work_done > BATCH_WORK_AMOUNT'
#2694: FILE: mm/vmscan.c:682:
+		if ((work_done > BATCH_WORK_AMOUNT) && (!need_rebalance_laundry(zone)))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2710: FILE: mm/vmscan.c:693:
+int rebalance_dirty_zone(struct zone_struct * zone, int max_work, unsigned=

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2710: FILE: mm/vmscan.c:693:
+int rebalance_dirty_zone(struct zone_struct * zone, int max_work, unsigned=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#2710: FILE: mm/vmscan.c:693:
+int rebalance_dirty_zone(struct zone_struct * zone, int max_work, unsigned=
                                                                           ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2713: FILE: mm/vmscan.c:696:
+	struct list_head * page_lru;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2715: FILE: mm/vmscan.c:698:
+	int work_done =3D 0;
 	              ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2716: FILE: mm/vmscan.c:699:
+	struct page * page;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2718: FILE: mm/vmscan.c:701:
+	max_loop =3D max_work;
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2720: FILE: mm/vmscan.c:703:
+		max_loop =3D BATCH_WORK_AMOUNT;
 		         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2724: FILE: mm/vmscan.c:707:
+		page_lru =3D zone->inactive_dirty_list.prev;
 		         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2725: FILE: mm/vmscan.c:708:
+		page =3D list_entry(page_lru, struct page, lru);
 		     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2728: FILE: mm/vmscan.c:711:
+		BUG_ON(unlikely(!PageInactiveDirty(page)));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'work_done > BATCH_WORK_AMOUNT'
#2766: FILE: mm/vmscan.c:729:
+		if ((work_done > BATCH_WORK_AMOUNT) && (!need_rebalance_dirty(zone)))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2776: FILE: mm/vmscan.c:738:
+/* goal percentage sets the goal of the laundry+clean+free of the total zo=
+int rebalance_inactive_zone(struct zone_struct * zone, int max_work, unsig=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#2781: FILE: mm/vmscan.c:742:
+	if (((zone->inactive_laundry_pages + zone->inactive_clean_pages + zone->f=
 	                                                                         ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2781: FILE: mm/vmscan.c:742:
+	if (((zone->inactive_laundry_pages + zone->inactive_clean_pages + zone->f=

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#2787: FILE: mm/vmscan.c:747:
+		ret +=3D rebalance_dirty_zone(zone, max_work, gfp_mask);
 		    ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#2789: FILE: mm/vmscan.c:749:
+		ret +=3D rebalance_laundry_zone(zone, max_work, gfp_mask);
 		    ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#2794: FILE: mm/vmscan.c:751:
+	ret +=3D zone->inactive_laundry_pages;
 	    ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2810: FILE: mm/vmscan.c:754:
 }
+int rebalance_inactive(unsigned int gfp_mask, int percentage)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2814: FILE: mm/vmscan.c:756:
+	struct zone_struct * zone;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2825: FILE: mm/vmscan.c:759:
+	max_work =3D 4 * BATCH_WORK_AMOUNT;
 	         ^

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#2827: FILE: mm/vmscan.c:761:
+	if (percentage >=3D 50)
 	               ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2828: FILE: mm/vmscan.c:762:
+		max_work =3D 8 * BATCH_WORK_AMOUNT;
 		         ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#2836: FILE: mm/vmscan.c:764:
+		ret +=3D rebalance_inactive_zone(zone, max_work, gfp_mask, percentage);
 		    ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#2847: FILE: mm/vmscan.c:822:
+	for_each_zone(zone)
+			rebalance_dirty_zone(zone, BATCH_WORK_AMOUNT, GFP_KSWAPD);

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#2857: FILE: mm/vmscan.c:843:
+	ret +=3D rebalance_inactive(gfp_mask, 100);
 	    ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2877: FILE: mm/vmscan.c:865:
+	if (ret < free_low(ANY_ZONE) && (gfp_mask&__GFP_WAIT))
 	                                         ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2883: FILE: mm/vmscan.c:869:
 }
+/*

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2893: FILE: mm/vmscan.c:879:
+	int ret =3D 0;
 	        ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2894: FILE: mm/vmscan.c:880:
+	struct zone_struct * zone;

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#2896: FILE: mm/vmscan.c:882:
+	ret +=3D shrink_dcache_memory(DEF_PRIORITY, gfp_mask);
 	    ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#2897: FILE: mm/vmscan.c:883:
+	ret +=3D shrink_icache_memory(DEF_PRIORITY, gfp_mask);
 	    ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#2899: FILE: mm/vmscan.c:885:
+	ret +=3D shrink_dqcache_memory(DEF_PRIORITY, gfp_mask);
 	    ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#2913: FILE: mm/vmscan.c:899:
+		if (free_high(zone)>0)
 		                   ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2950: FILE: mm/vmscan.c:1113:
+	struct zone_struct * zone;

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#2961: FILE: mm/vmscan.c:1122:
+			if (free_plenty(zone) >=3D 0)
 			                      ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2970: FILE: mm/vmscan.c:1135:
 }
+/*

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2982: FILE: mm/vmscan.c:1146:
+#define MAX_AGING_INTERVAL 5*HZ
                             ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2982: FILE: mm/vmscan.c:1146:
+#define MAX_AGING_INTERVAL 5*HZ

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2983: FILE: mm/vmscan.c:1147:
+#define MIN_AGING_INTERVAL HZ/2
                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2983: FILE: mm/vmscan.c:1147:
+#define MIN_AGING_INTERVAL HZ/2

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2986: FILE: mm/vmscan.c:1150:
+	struct task_struct *tsk =3D current;
 	                        ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2987: FILE: mm/vmscan.c:1151:
+	struct zone_struct * zone;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2988: FILE: mm/vmscan.c:1152:
+	unsigned long pause =3D MAX_AGING_INTERVAL;
 	                    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2989: FILE: mm/vmscan.c:1153:
+	int total_needscan =3D 0;
 	                   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2990: FILE: mm/vmscan.c:1154:
+	int age_faster =3D 0;
 	               ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2991: FILE: mm/vmscan.c:1155:
+	int num_zones =3D 0;
 	              ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#2997: FILE: mm/vmscan.c:1161:
+=09
 ^

ERROR:SPACING: space required after that ';' (ctx:VxO)
#3000: FILE: mm/vmscan.c:1164:
+		schedule_timeout(pause);=09
 		                       ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#3000: FILE: mm/vmscan.c:1164:
+		schedule_timeout(pause);=09
 		                        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#3003: FILE: mm/vmscan.c:1167:
+				for (age =3D 0; age < MAX_AGE; age++)  {
 				         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#3011: FILE: mm/vmscan.c:1175:
+				for (age =3D 0; age < MAX_AGE; age++)  {
 				         ^

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#3019: FILE: mm/vmscan.c:1183:
+			if (zone->need_scan >=3D 2)
 			                    ^

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#3021: FILE: mm/vmscan.c:1185:
+			total_needscan +=3D zone->need_scan;
 			               ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#3022: FILE: mm/vmscan.c:1186:
+			zone->need_scan =3D 0;
 			                ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#3026: FILE: mm/vmscan.c:1190:
+			pause =3D max(pause / 2, MIN_AGING_INTERVAL);
 			      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#3028: FILE: mm/vmscan.c:1192:
+			pause =3D min(pause + pause / 2, MAX_AGING_INTERVAL);
 			      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#3030: FILE: mm/vmscan.c:1194:
+		total_needscan =3D 0;
 		               ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#3031: FILE: mm/vmscan.c:1195:
+		age_faster =3D 0;
 		           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#3032: FILE: mm/vmscan.c:1196:
+		num_zones =3D 0;
 		          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3036: FILE: mm/vmscan.c:1200:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000409948.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 261 errors, 45 warnings, 75 checks, 2828 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000409948.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
