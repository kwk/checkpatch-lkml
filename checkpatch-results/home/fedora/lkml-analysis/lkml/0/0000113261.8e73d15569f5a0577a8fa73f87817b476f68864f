WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
grouping related allocation types together. The idea is that large groups of

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#44: FILE: include/linux/mmzone.h:29:
+#define for_each_rclmtype_order(type, order) \
+	for (order = 0; order < MAX_ORDER; order++) \
+		for (type = 0; type < RCLM_TYPES; type++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'order' - possible side-effects?
#44: FILE: include/linux/mmzone.h:29:
+#define for_each_rclmtype_order(type, order) \
+	for (order = 0; order < MAX_ORDER; order++) \
+		for (type = 0; type < RCLM_TYPES; type++)

CHECK:CAMELCASE: Avoid CamelCase: <__SetPageEasyRclm>
#72: FILE: include/linux/page-flags.h:352:
+#define __SetPageEasyRclm(page)	__set_bit(PG_easyrclm, &(page)->flags)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageEasyRclm>
#73: FILE: include/linux/page-flags.h:353:
+#define __ClearPageEasyRclm(page) __clear_bit(PG_easyrclm, &(page)->flags)

ERROR:CODE_INDENT: code indent should use tabs where possible
#144: FILE: mm/page_alloc.c:513:
+ ^Iint low, int high, struct free_area *area,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#144: FILE: mm/page_alloc.c:513:
+ ^Iint low, int high, struct free_area *area,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: mm/page_alloc.c:513:
+ ^Iint low, int high, struct free_area *area,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: mm/page_alloc.c:567:
+ static struct page *__rmqueue_fallback(struct zone *zone, int order,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#164: FILE: mm/page_alloc.c:568:
+ static struct page *__rmqueue_fallback(struct zone *zone, int order,
+							int alloctype)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#166: FILE: mm/page_alloc.c:570:
+	struct free_area * area;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#172: FILE: mm/page_alloc.c:576:
+	for (current_order = MAX_ORDER-1; current_order >= order;
 	                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area[current_order]
#174: FILE: mm/page_alloc.c:578:
+		area = &(zone->free_area[current_order]);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:CODE_INDENT: code indent should use tabs where possible
#175: FILE: mm/page_alloc.c:579:
+ ^I^Iif (list_empty(&area->free_list[alloctype]))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#175: FILE: mm/page_alloc.c:579:
+ ^I^Iif (list_empty(&area->free_list[alloctype]))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: mm/page_alloc.c:579:
+ ^I^Iif (list_empty(&area->free_list[alloctype]))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#176: FILE: mm/page_alloc.c:580:
+ ^I^I^Icontinue;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#176: FILE: mm/page_alloc.c:580:
+ ^I^I^Icontinue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: mm/page_alloc.c:580:
+ ^I^I^Icontinue;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#179: FILE: mm/page_alloc.c:583:
+		page = list_entry(area->free_list[alloctype].next,
+					struct page, lru);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: mm/page_alloc.c:608:
+static struct page *__rmqueue(struct zone *zone, unsigned int order,
+		int alloctype)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area[current_order]
#215: FILE: mm/page_alloc.c:616:
+		area = &(zone->free_area[current_order]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#221: FILE: mm/page_alloc.c:621:
+		page = list_entry(area->free_list[alloctype].next,
+					struct page, lru);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#272: FILE: mm/page_alloc.c:729:
 	for (order = MAX_ORDER - 1; order >= 0; --order)
+	for_each_rclmtype_order(t, order) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000113261.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 9 warnings, 10 checks, 263 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000113261.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
