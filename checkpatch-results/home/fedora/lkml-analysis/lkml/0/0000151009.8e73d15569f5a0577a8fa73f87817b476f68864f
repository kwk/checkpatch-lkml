WARNING:LINE_SPACING: Missing a blank line after declarations
#268: FILE: drivers/input/input.c:543:
+	int state = input_devices_state;
+	poll_wait(file, &input_devices_poll_wait, wait);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#299: FILE: drivers/input/input.c:574:
+	list_for_each(node, &input_dev_class.children) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#304: FILE: drivers/input/input.c:579:
+		len = sprintf(buf, "I: Bus=%04x Vendor=%04x Product=%04x Version=%04x\n",
+			dev->id.bustype, dev->id.vendor, dev->id.product, dev->id.version);

CHECK:BRACES: braces {} should be used on all arms of this statement
#331: FILE: drivers/input/input.c:606:
+			if (!*start) {
[...]
+			} else  cnt += len;
[...]

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#334: FILE: drivers/input/input.c:609:
+			} else  cnt += len;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#359: FILE: drivers/input/input.c:634:
+	list_for_each(node, &input_dev_class.interfaces) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#364: FILE: drivers/input/input.c:639:
+			len = sprintf(buf, "N: Number=%d Name=%s Minor=%d\n",
+				i++, handler->name, handler->minor);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#367: FILE: drivers/input/input.c:642:
+			len = sprintf(buf, "N: Number=%d Name=%s\n",
+				i++, handler->name);

CHECK:BRACES: braces {} should be used on all arms of this statement
#372: FILE: drivers/input/input.c:647:
+			if (!*start) {
[...]
+			} else  cnt += len;
[...]

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#375: FILE: drivers/input/input.c:650:
+			} else  cnt += len;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#388: FILE: drivers/input/input.c:663:
+static struct file_operations input_fileops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#409: FILE: drivers/input/input.c:684:
+	entry = create_proc_read_entry("handlers", 0, proc_bus_input_dir, input_handlers_read, NULL);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#603: FILE: include/linux/input.h:965:
 };
+#define to_input_handler(h) container_of(h, struct input_handler, intf)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct input_handler *' should also have an identifier name
#620: FILE: include/linux/input.h:1012:
+int input_register_handler(struct input_handler *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000151009.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 4 warnings, 8 checks, 564 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000151009.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
