WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#126: 
 1  3 1101252   9860    740   5280    0 33224     0 33228 2231  2193  3  8  8 80

WARNING:TYPO_SPELLING: 'infact' may be misspelled - perhaps 'in fact'?
#155: 
(I believe this is more useful than the anon-vma merging infact, I know
                                                         ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#178: FILE: include/linux/mm.h:765:
+extern void __remove_shared_vm_struct(struct vm_area_struct *, struct inode *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#191: FILE: include/linux/mm.h:778:
+				   anon_vma_t ** anon_vma_cache)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'adiacent' may be misspelled - perhaps 'adjacent'?
#208: FILE: include/linux/mm.h:790:
+		 * If the only difference between two adiacent
 		                                      ^^^^^^^^

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#272: FILE: mm/mmap.c:357:
+		     anon_vma_t ** anon_vma_cache)

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#316: FILE: mm/mmap.c:385:
+		    anon_vma_t ** anon_vma_cache)

WARNING:LINE_SPACING: Missing a blank line after declarations
#327: FILE: mm/mmap.c:388:
+	unsigned long vma_size = (vma->vm_end - vma->vm_start) >> PAGE_SHIFT;
+	return is_mergeable_vma(vma, file, vm_flags, vm_pgoff - vma_size, anon_vma_cache);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#338: FILE: mm/mmap.c:397:
+^I^I     struct rb_node *rb_parent, unsigned long addr, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#341: FILE: mm/mmap.c:400:
+		     anon_vma_t ** anon_vma_cache)

CHECK:BRACES: Unbalanced braces around else statement
#378: FILE: mm/mmap.c:431:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#422: FILE: mm/mmap.c:540:
+	anon_vma_t * anon_vma_cache;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#461: FILE: mm/mmap.c:1401:
+	anon_vma_t * anon_vma_cache;

CHECK:BRACES: braces {} should be used on all arms of this statement
#571: FILE: mm/mprotect.c:155:
+		if (vma->vm_flags & VM_SHARED) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#574: FILE: mm/mprotect.c:158:
+		} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#585: FILE: mm/mprotect.c:167:
+		struct mm_struct * mm = vma->vm_mm;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#640: FILE: mm/mprotect.c:215:
+	struct file * file;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#645: FILE: mm/mprotect.c:220:
+	struct mm_struct * mm;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#663: FILE: mm/mprotect.c:238:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#678: FILE: mm/mprotect.c:253:
+		if (next->vm_flags & VM_SHARED) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#681: FILE: mm/mprotect.c:256:
+		} else

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000290958.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 4 warnings, 7 checks, 574 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000290958.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
