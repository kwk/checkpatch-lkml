WARNING:TYPO_SPELLING: 'reenabled' may be misspelled - perhaps 're-enabled'?
#35: 
* Measurements were not reenabled after a disconnected device became
                        ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACING: Unnecessary space before function pointer arguments
#90: FILE: drivers/s390/cio/cmf.c:120:
+	void * (*align) (void *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#90: FILE: drivers/s390/cio/cmf.c:120:
+	void * (*align) (void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*set_data)...) over kzalloc(sizeof(struct set_schib_struct)...)
#143: FILE: drivers/s390/cio/cmf.c:263:
+	set_data = kzalloc(sizeof(struct set_schib_struct), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*copy_block)...) over kzalloc(sizeof(struct copy_block_struct)...)
#286: FILE: drivers/s390/cio/cmf.c:388:
+	copy_block = kzalloc(sizeof(struct copy_block_struct), GFP_ATOMIC);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#369: FILE: drivers/s390/cio/cmf.c:522:
+static inline int alloc_cmb_single (struct ccw_device *cdev,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#379: FILE: drivers/s390/cio/cmf.c:537:
+	 * remains sorted by ->cmb->hw_data pointers */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#384: FILE: drivers/s390/cio/cmf.c:541:
+		struct cmb_data *data;
+		data = node->cmb;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#385: FILE: drivers/s390/cio/cmf.c:542:
+		if ((struct cmb*)data->hw_block > cmb)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*cmb_data)...) over kzalloc(sizeof(struct cmb_data)...)
#406: FILE: drivers/s390/cio/cmf.c:570:
+	cmb_data = kzalloc(sizeof(struct cmb_data), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*cmb_data->last_block)...) over kzalloc(sizeof(struct cmb)...)
#410: FILE: drivers/s390/cio/cmf.c:574:
+	cmb_data->last_block = kzalloc(sizeof(struct cmb), GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#491: FILE: drivers/s390/cio/cmf.c:670:
+static u64 read_cmb (struct ccw_device *cdev, int index)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#562: FILE: drivers/s390/cio/cmf.c:720:
+static int readall_cmb (struct ccw_device *cdev, struct cmbdata *data)

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#619: FILE: drivers/s390/cio/cmf.c:762:
 	data->control_unit_queuing_time
+		= time_to_nsec(cmb->control_unit_queuing_time);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#622: FILE: drivers/s390/cio/cmf.c:764:
 	data->device_active_only_time
+		= time_to_nsec(cmb->device_active_only_time);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#637: FILE: drivers/s390/cio/cmf.c:776:
+static void * align_cmb(void *area)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#664: FILE: drivers/s390/cio/cmf.c:827:
+static int alloc_cmbe (struct ccw_device *cdev)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#671: FILE: drivers/s390/cio/cmf.c:833:
+	cmbe = kzalloc (sizeof (*cmbe) * 2, GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#671: FILE: drivers/s390/cio/cmf.c:833:
+	cmbe = kzalloc (sizeof (*cmbe) * 2, GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*cmb_data)...) over kzalloc(sizeof(struct cmb_data)...)
#675: FILE: drivers/s390/cio/cmf.c:836:
+	cmb_data = kzalloc(sizeof(struct cmb_data), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*cmb_data->last_block)...) over kzalloc(sizeof(struct cmbe)...)
#680: FILE: drivers/s390/cio/cmf.c:841:
+	cmb_data->last_block = kzalloc(sizeof(struct cmbe), GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#715: FILE: drivers/s390/cio/cmf.c:873:
+static void free_cmbe (struct ccw_device *cdev)

CHECK:SPACING: No space is necessary after a cast
#749: FILE: drivers/s390/cio/cmf.c:905:
+	mba = mme ? (unsigned long) cmbe_align(cmb_data->hw_block) : 0;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#758: FILE: drivers/s390/cio/cmf.c:912:
+static u64 read_cmbe (struct ccw_device *cdev, int index)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#840: FILE: drivers/s390/cio/cmf.c:970:
+static int readall_cmbe (struct ccw_device *cdev, struct cmbdata *data)

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#898: FILE: drivers/s390/cio/cmf.c:1012:
 	data->control_unit_queuing_time
+		= time_to_nsec(cmb->control_unit_queuing_time);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#902: FILE: drivers/s390/cio/cmf.c:1014:
 	data->device_active_only_time
+		= time_to_nsec(cmb->device_active_only_time);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#906: FILE: drivers/s390/cio/cmf.c:1017:
 	data->initial_command_response_time
+		= time_to_nsec(cmb->initial_command_response_time);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#929: FILE: drivers/s390/cio/cmf.c:1030:
+static void * align_cmbe(void *area)

CHECK:BRACES: braces {} should be used on all arms of this statement
#955: FILE: drivers/s390/cio/cmf.c:1068:
+	if (count) {
[...]
-	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#960: FILE: drivers/s390/cio/cmf.c:1072:
+	} else

WARNING:TYPO_SPELLING: 'Reenable' may be misspelled - perhaps 'Re-enable'?
#982: FILE: drivers/s390/cio/cmf.c:1249:
+/* Reenable cmf when a disconnected device becomes available again. */
    ^^^^^^^^

CHECK:BRACES: Unbalanced braces around else statement
#1000: FILE: drivers/s390/cio/device_fsm.c:339:
+	else {

WARNING:TYPO_SPELLING: 'Reenable' may be misspelled - perhaps 'Re-enable'?
#1001: FILE: drivers/s390/cio/device_fsm.c:340:
+		/* Reenable channel measurements, if needed. */
 		   ^^^^^^^^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ccw_device *' should also have an identifier name
#1052: FILE: drivers/s390/cio/device.h:124:
+void cmf_retry_copy_block(struct ccw_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ccw_device *' should also have an identifier name
#1053: FILE: drivers/s390/cio/device.h:125:
+int cmf_reenable(struct ccw_device *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000069031.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 18 warnings, 15 checks, 981 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000069031.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
