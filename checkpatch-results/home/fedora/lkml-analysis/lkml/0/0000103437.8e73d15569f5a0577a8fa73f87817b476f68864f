CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#132: FILE: include/linux/swap.h:168:
+extern void FASTCALL(lru_cache_add_tail(struct page *));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#132: FILE: include/linux/swap.h:168:
+extern void FASTCALL(lru_cache_add_tail(struct page *));

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#149: FILE: include/linux/swap.h:228:
+} __attribute__((packed));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#152: FILE: include/linux/swap.h:231:
+static inline void store_swap_entry_node(struct swapped_entry *entry,
+	struct page *page)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#168: FILE: include/linux/swap.h:247:
+extern void add_to_swapped_list(struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#169: FILE: include/linux/swap.h:248:
+extern void remove_from_swapped_list(const unsigned long index);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#170: FILE: include/linux/swap.h:249:
+extern void delay_swap_prefetch(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#171: FILE: include/linux/swap.h:250:
+extern void prepare_swap_prefetch(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#199: FILE: include/linux/swap.h:292:
+extern int add_to_swap_cache(struct page *page, swp_entry_t entry);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#211: FILE: include/linux/sysctl.h:187:
+	VM_SWAP_PREFETCH=33,	/* swap prefetch */
 	                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#223: FILE: init/Kconfig:95:
+config SWAP_PREFETCH
+	bool "Support for prefetching swapped memory"
+	depends on SWAP
+	default y
+	---help---
+	  This option will allow the kernel to prefetch swapped memory pages
+	  when idle. The pages will be kept on both swap and in swap_cache
+	  thus avoiding the need for further I/O if either ram or swap space
+	  is required.
+
+	  What this will do on workstations is slowly bring back applications
+	  that have swapped out after memory intensive workloads back into
+	  physical ram if you have free ram at a later stage and the machine
+	  is relatively idle. This means that when you come back to your
+	  computer after leaving it idle for a while, applications will come
+	  to life faster. Note that your swap usage will appear to increase
+	  but these are cached pages, can be dropped freely by the vm, and it
+	  should stabilise around 50% swap usage maximum.
+
+	  Workstations and multiuser workstation servers will most likely want
+	  to say Y.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#305: FILE: mm/swap.c:401:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#346: FILE: mm/swap_prefetch.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#347: FILE: mm/swap_prefetch.c:2:
+ * linux/mm/swap_prefetch.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#388: FILE: mm/swap_prefetch.c:43:
+^I.list  ^I^I= LIST_HEAD_INIT(swapped.list),$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#427: FILE: mm/swap_prefetch.c:82:
+		entry = list_entry(swapped.list.next,
+			struct swapped_entry, swapped_list);

WARNING:RETURN_VOID: void function return statements are not generally useful
#465: FILE: mm/swap_prefetch.c:120:
+	return;
+}

WARNING:SPACING: missing space after struct definition
#500: FILE: mm/swap_prefetch.c:155:
+struct prefetch_stats{

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#520: FILE: mm/swap_prefetch.c:175:
+static enum trickle_return trickle_swap_cache_async(const swp_entry_t entry,
+	const int node)

CHECK:BRACES: braces {} should be used on all arms of this statement
#633: FILE: mm/swap_prefetch.c:288:
+		if (sp_stat.last_free[node]) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 40)
#634: FILE: mm/swap_prefetch.c:289:
+			if (sp_stat.current_free[node] + SWAP_CLUSTER_MAX <
[...]
+					sp_stat.last_free[node] =

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#639: FILE: mm/swap_prefetch.c:294:
+					node_clear(node,
+						sp_stat.prefetch_nodes);

CHECK:BRACES: Unbalanced braces around else statement
#642: FILE: mm/swap_prefetch.c:297:
+		} else

WARNING:TYPO_SPELLING: 'innacurate' may be misspelled - perhaps 'inaccurate'?
#663: FILE: mm/swap_prefetch.c:318:
+		 * Note that currently nr_slab is innacurate on numa because
 		                                  ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#739: FILE: mm/swap_prefetch.c:394:
+			entry = list_entry(swapped.list.prev,
+				struct swapped_entry, swapped_list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#809: FILE: mm/swap_prefetch.c:464:
+	swapped.cache = kmem_cache_create("swapped_entry",
+		sizeof(struct swapped_entry), 0, SLAB_PANIC, NULL, NULL);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000103437.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 11 warnings, 14 checks, 781 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000103437.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
