WARNING:TYPO_SPELLING: 'ower' may be misspelled - perhaps 'lower'?
#32: 
ower management list and have its suspend/resume methods called
^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#181: FILE: drivers/base/power/resume.c:35:
+		pm_err(dpm, "resume from %d, parent %s still %d\n",
+			dpm->power_state.event,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#216: FILE: drivers/base/power/resume.c:67:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#303: FILE: drivers/base/power/suspend.c:59:
+		pm_dbg(dpm, "suspend %d-->%d\n",
+			dpm->power_state.event, state.event);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#307: FILE: drivers/base/power/suspend.c:63:
+		pm_err(dpm,
+			"suspend %d->%d, parent %s already %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#318: FILE: drivers/base/power/suspend.c:72:
+		pm_dbg(dpm, "class %s%s\n",
 			suspend_verb(state.event),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#329: FILE: drivers/base/power/suspend.c:84:
+		pm_dbg(dpm, "%s%s\n",
 			suspend_verb(state.event),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#356: FILE: drivers/base/power/suspend.c:110:
+		pm_dbg(dpm, "LATE %s%s\n",
 			suspend_verb(state.event),

CHECK:CAMELCASE: Avoid CamelCase: <Error>
#428: FILE: drivers/base/power/suspend.c:209:
+				goto Error;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPLIT_STRING: quoted string split across lines
#440: FILE: drivers/base/power/suspend.c:220:
 	printk(KERN_ERR "Could not power down device %s: "
+		"error %d\n", kobject_name(dpm->pm_object), error);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#478: FILE: include/linux/pm.h:241:
+extern int dpm_runtime_suspend(struct dev_pm_info *, pm_message_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dev_pm_info *' should also have an identifier name
#478: FILE: include/linux/pm.h:241:
+extern int dpm_runtime_suspend(struct dev_pm_info *, pm_message_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pm_message_t' should also have an identifier name
#478: FILE: include/linux/pm.h:241:
+extern int dpm_runtime_suspend(struct dev_pm_info *, pm_message_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#479: FILE: include/linux/pm.h:242:
+extern void dpm_runtime_resume(struct dev_pm_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dev_pm_info *' should also have an identifier name
#479: FILE: include/linux/pm.h:242:
+extern void dpm_runtime_resume(struct dev_pm_info *);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dpm' may be better as '(dpm)' to avoid precedence issues
#507: FILE: drivers/base/power/power.h:11:
+#define pm_dbg(dpm, format, arg...)			\
+	printk(KERN_DEBUG "%s PM: " format,		\
+		kobject_name(dpm->pm_object), ## arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#508: FILE: drivers/base/power/power.h:12:
+	printk(KERN_DEBUG "%s PM: " format,		\

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#511: FILE: drivers/base/power/power.h:15:
+#define pm_dbg(dpm, format, arg...) do { (void)(dpm); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dpm' may be better as '(dpm)' to avoid precedence issues
#514: FILE: drivers/base/power/power.h:18:
+#define pm_err(dpm, format, arg...)			\
+	printk(KERN_ERR "%s PM: " format,		\
+		kobject_name(dpm->pm_object), ## arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#515: FILE: drivers/base/power/power.h:19:
+	printk(KERN_ERR "%s PM: " format,		\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dpm' may be better as '(dpm)' to avoid precedence issues
#518: FILE: drivers/base/power/power.h:22:
+#define pm_info(dpm, format, arg...)			\
+	printk(KERN_INFO, "%s PM: " format,		\
+		kobject_name(dpm->pm_object), ## arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#519: FILE: drivers/base/power/power.h:23:
+	printk(KERN_INFO, "%s PM: " format,		\

CHECK:LINE_SPACING: Please don't use multiple blank lines
#522: FILE: drivers/base/power/power.h:26:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#531: FILE: drivers/base/power/power.h:75:
+extern int resume_device(struct dev_pm_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dev_pm_info *' should also have an identifier name
#531: FILE: drivers/base/power/power.h:75:
+extern int resume_device(struct dev_pm_info *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#532: FILE: drivers/base/power/power.h:76:
+extern int resume_device_early(struct dev_pm_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dev_pm_info *' should also have an identifier name
#532: FILE: drivers/base/power/power.h:76:
+extern int resume_device_early(struct dev_pm_info *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#538: FILE: drivers/base/power/power.h:81:
+extern int suspend_device(struct dev_pm_info *, pm_message_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dev_pm_info *' should also have an identifier name
#538: FILE: drivers/base/power/power.h:81:
+extern int suspend_device(struct dev_pm_info *, pm_message_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pm_message_t' should also have an identifier name
#538: FILE: drivers/base/power/power.h:81:
+extern int suspend_device(struct dev_pm_info *, pm_message_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#539: FILE: drivers/base/power/power.h:82:
+extern int suspend_device_late(struct dev_pm_info *, pm_message_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dev_pm_info *' should also have an identifier name
#539: FILE: drivers/base/power/power.h:82:
+extern int suspend_device_late(struct dev_pm_info *, pm_message_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pm_message_t' should also have an identifier name
#539: FILE: drivers/base/power/power.h:82:
+extern int suspend_device_late(struct dev_pm_info *, pm_message_t);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#677: FILE: drivers/base/power/trace.c:198:
+			printk("  hash matches device %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#678: FILE: drivers/base/power/trace.c:199:
+			printk("  hash matches device %s\n",
+				kobject_name(dpm->pm_object));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#693: FILE: include/linux/resume-trace.h:9:
+extern void set_trace_device(struct dev_pm_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dev_pm_info *' should also have an identifier name
#693: FILE: include/linux/resume-trace.h:9:
+extern void set_trace_device(struct dev_pm_info *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000029273.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 17 warnings, 20 checks, 598 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000029273.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
