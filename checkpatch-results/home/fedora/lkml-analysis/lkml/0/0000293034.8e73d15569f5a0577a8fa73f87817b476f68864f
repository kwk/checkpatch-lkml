WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
 include/asm-s390/uaccess.h     |  603 +++++++++++++----------------------------

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#47: FILE: include/asm-s390/elf.h:160:
+	memcpy(&regs->psw, &ptregs->psw, sizeof(regs->psw)+sizeof(regs->gprs));
 	                                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pr_reg' may be better as '(pr_reg)' to avoid precedence issues
#52: FILE: include/asm-s390/elf.h:165:
+#define ELF_CORE_COPY_REGS(pr_reg, regs) dump_regs(regs, &pr_reg);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#52: FILE: include/asm-s390/elf.h:165:
+#define ELF_CORE_COPY_REGS(pr_reg, regs) dump_regs(regs, &pr_reg);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#124: FILE: include/asm-s390/lowcore.h:179:
+	__u8         pad10[0xc60-0xc54];       /* 0xc54 */
 	                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#139: FILE: include/asm-s390/lowcore.h:260:
+	__u8         pad10[0xd80-0xd68];       /* 0xd68 */
 	                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#157: FILE: include/asm-s390/mmu_context.h:29:
+^I        S390_lowcore.user_asce = (__pa(next->pgd)&PAGE_MASK) | $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#157: FILE: include/asm-s390/mmu_context.h:29:
+^I        S390_lowcore.user_asce = (__pa(next->pgd)&PAGE_MASK) | $

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#157: FILE: include/asm-s390/mmu_context.h:29:
+	        S390_lowcore.user_asce = (__pa(next->pgd)&PAGE_MASK) | 
 	                                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#163: FILE: include/asm-s390/mmu_context.h:31:
+                /* Load home space page table origin. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#164: FILE: include/asm-s390/mmu_context.h:32:
+                asm volatile("lctl  13,13,%0"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: include/asm-s390/mmu_context.h:32:
+                asm volatile("lctl  13,13,%0"$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#165: FILE: include/asm-s390/mmu_context.h:33:
+			     : : "m" (S390_lowcore.user_asce) );

ERROR:CODE_INDENT: code indent should use tabs where possible
#172: FILE: include/asm-s390/mmu_context.h:35:
+                S390_lowcore.user_asce = (__pa(next->pgd) & PAGE_MASK) |$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: include/asm-s390/mmu_context.h:35:
+                S390_lowcore.user_asce = (__pa(next->pgd) & PAGE_MASK) |$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#173: FILE: include/asm-s390/mmu_context.h:36:
+			(_REGION_TABLE|USER_STD_MASK);
 			              ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#176: FILE: include/asm-s390/mmu_context.h:39:
+			     : : "m" (S390_lowcore.user_asce) );

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: include/asm-s390/processor.h:171:
+        ((unsigned long) tsk->thread_info + THREAD_SIZE - sizeof(struct pt_regs)))$

CHECK:SPACING: No space is necessary after a cast
#221: FILE: include/asm-s390/processor.h:171:
+        ((unsigned long) tsk->thread_info + THREAD_SIZE - sizeof(struct pt_regs)))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: include/asm-s390/processor.h:171:
+        ((unsigned long) tsk->thread_info + THREAD_SIZE - sizeof(struct pt_regs)))$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#271: FILE: include/asm-s390/system.h:88:
+	asm volatile ("stam 0,15,0(%0)" : : "a" (acrs) : "memory" );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#276: FILE: include/asm-s390/system.h:93:
+	asm volatile ("lam 0,15,0(%0)" : : "a" (acrs) );

ERROR:SPACING: space required before the open parenthesis '('
#289: FILE: include/asm-s390/system.h:106:
+#define prepare_arch_switch(rq, next)	do { } while(0)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#319: FILE: include/asm-s390/uaccess.h:48:
+	asm volatile ("lctlg 7,7,%0" : : "m" (__pto) );			\

ERROR:SPACING: space prohibited before that close parenthesis ')'
#328: FILE: include/asm-s390/uaccess.h:57:
+	asm volatile ("lctl  7,7,%0" : : "m" (__pto) );			\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#442: FILE: include/asm-s390/uaccess.h:123:
+#define __put_user_asm(x, ptr, err) \
 ({								\
+	err = 0;						\
+	asm volatile(						\
+		"0: mvcs  0(%1,%2),%3,%0\n"			\
 		"1:\n"						\
 		__uaccess_fixup					\
+		: "+&d" (err)					\
+		: "d" (sizeof(*(ptr))), "a" (ptr), "Q" (x),	\
+		  "K" (-EFAULT)					\
+		: __uaccess_clobber );				\
 })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'err' - possible side-effects?
#442: FILE: include/asm-s390/uaccess.h:123:
+#define __put_user_asm(x, ptr, err) \
 ({								\
+	err = 0;						\
+	asm volatile(						\
+		"0: mvcs  0(%1,%2),%3,%0\n"			\
 		"1:\n"						\
 		__uaccess_fixup					\
+		: "+&d" (err)					\
+		: "d" (sizeof(*(ptr))), "a" (ptr), "Q" (x),	\
+		  "K" (-EFAULT)					\
+		: __uaccess_clobber );				\
 })

ERROR:SPACING: space prohibited before that close parenthesis ')'
#461: FILE: include/asm-s390/uaccess.h:133:
+		: __uaccess_clobber );				\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#466: FILE: include/asm-s390/uaccess.h:136:
+#define __put_user_asm(x, ptr, err) \
 ({								\
+	err = 0;						\
+	asm volatile(						\
+		"0: mvcs  0(%1,%2),0(%3),%0\n"			\
 		"1:\n"						\
 		__uaccess_fixup					\
+		: "+&d" (err)					\
+		: "d" (sizeof(*(ptr))), "a" (ptr), "a" (&(x)),	\
+		  "K" (-EFAULT), "m" (x)			\
+		: __uaccess_clobber );				\
 })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#466: FILE: include/asm-s390/uaccess.h:136:
+#define __put_user_asm(x, ptr, err) \
 ({								\
+	err = 0;						\
+	asm volatile(						\
+		"0: mvcs  0(%1,%2),0(%3),%0\n"			\
 		"1:\n"						\
 		__uaccess_fixup					\
+		: "+&d" (err)					\
+		: "d" (sizeof(*(ptr))), "a" (ptr), "a" (&(x)),	\
+		  "K" (-EFAULT), "m" (x)			\
+		: __uaccess_clobber );				\
 })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'err' - possible side-effects?
#466: FILE: include/asm-s390/uaccess.h:136:
+#define __put_user_asm(x, ptr, err) \
 ({								\
+	err = 0;						\
+	asm volatile(						\
+		"0: mvcs  0(%1,%2),0(%3),%0\n"			\
 		"1:\n"						\
 		__uaccess_fixup					\
+		: "+&d" (err)					\
+		: "d" (sizeof(*(ptr))), "a" (ptr), "a" (&(x)),	\
+		  "K" (-EFAULT), "m" (x)			\
+		: __uaccess_clobber );				\
 })

ERROR:SPACING: space prohibited before that close parenthesis ')'
#485: FILE: include/asm-s390/uaccess.h:146:
+		: __uaccess_clobber );				\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#517: FILE: include/asm-s390/uaccess.h:178:
+#define __get_user_asm(x, ptr, err) \
 ({								\
+	err = 0;						\
+	asm volatile (						\
+		"0: mvcp  %O1(%2,%R1),0(%3),%0\n"		\
 		"1:\n"						\
 		__uaccess_fixup					\
+		: "+&d" (err), "=Q" (x)				\
+		: "d" (sizeof(*(ptr))), "a" (ptr),		\
+		  "K" (-EFAULT)					\
+		: __uaccess_clobber );				\
 })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'err' - possible side-effects?
#517: FILE: include/asm-s390/uaccess.h:178:
+#define __get_user_asm(x, ptr, err) \
 ({								\
+	err = 0;						\
+	asm volatile (						\
+		"0: mvcp  %O1(%2,%R1),0(%3),%0\n"		\
 		"1:\n"						\
 		__uaccess_fixup					\
+		: "+&d" (err), "=Q" (x)				\
+		: "d" (sizeof(*(ptr))), "a" (ptr),		\
+		  "K" (-EFAULT)					\
+		: __uaccess_clobber );				\
 })

ERROR:SPACING: space prohibited before that close parenthesis ')'
#538: FILE: include/asm-s390/uaccess.h:188:
+		: __uaccess_clobber );				\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#593: FILE: include/asm-s390/uaccess.h:191:
+#define __get_user_asm(x, ptr, err) \
 ({								\
+	err = 0;						\
+	asm volatile (						\
+		"0: mvcp  0(%2,%5),0(%3),%0\n"			\
 		"1:\n"						\
 		__uaccess_fixup					\
+		: "+&d" (err), "=m" (x)				\
+		: "d" (sizeof(*(ptr))), "a" (ptr),		\
+		  "K" (-EFAULT), "a" (&(x))			\
+		: __uaccess_clobber );				\
 })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#593: FILE: include/asm-s390/uaccess.h:191:
+#define __get_user_asm(x, ptr, err) \
 ({								\
+	err = 0;						\
+	asm volatile (						\
+		"0: mvcp  0(%2,%5),0(%3),%0\n"			\
 		"1:\n"						\
 		__uaccess_fixup					\
+		: "+&d" (err), "=m" (x)				\
+		: "d" (sizeof(*(ptr))), "a" (ptr),		\
+		  "K" (-EFAULT), "a" (&(x))			\
+		: __uaccess_clobber );				\
 })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'err' - possible side-effects?
#593: FILE: include/asm-s390/uaccess.h:191:
+#define __get_user_asm(x, ptr, err) \
 ({								\
+	err = 0;						\
+	asm volatile (						\
+		"0: mvcp  0(%2,%5),0(%3),%0\n"			\
 		"1:\n"						\
 		__uaccess_fixup					\
+		: "+&d" (err), "=m" (x)				\
+		: "d" (sizeof(*(ptr))), "a" (ptr),		\
+		  "K" (-EFAULT), "a" (&(x))			\
+		: __uaccess_clobber );				\
 })

ERROR:SPACING: space prohibited before that close parenthesis ')'
#613: FILE: include/asm-s390/uaccess.h:201:
+		: __uaccess_clobber );				\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#647: FILE: include/asm-s390/uaccess.h:233:
+extern long __copy_to_user_asm(const void *from, long n, void *to);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#799: FILE: include/asm-s390/uaccess.h:329:
+extern long __copy_in_user_asm(const void *from, long n, void *to);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#876: FILE: include/asm-s390/uaccess.h:341:
+	if (__access_ok(from,n) && __access_ok(to,n))
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#876: FILE: include/asm-s390/uaccess.h:341:
+	if (__access_ok(from,n) && __access_ok(to,n))
 	                                         ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#885: FILE: include/asm-s390/uaccess.h:349:
+extern long __strncpy_from_user_asm(char *dst, const char *src, long count);

ERROR:CODE_INDENT: code indent should use tabs where possible
#894: FILE: include/asm-s390/uaccess.h:357:
+                res = __strncpy_from_user_asm(dst, src, count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#894: FILE: include/asm-s390/uaccess.h:357:
+                res = __strncpy_from_user_asm(dst, src, count);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#905: FILE: include/asm-s390/uaccess.h:362:
+extern long __strnlen_user_asm(const char *src, long count);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000293034.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 6 warnings, 21 checks, 955 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000293034.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
