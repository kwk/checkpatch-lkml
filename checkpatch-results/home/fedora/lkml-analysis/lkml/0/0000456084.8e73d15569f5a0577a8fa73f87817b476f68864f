CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#60: FILE: mm/filemap.c:2085:
+generic_file_write(struct file *file, const char *buf,
+		size_t count, loff_t *ppos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#64: FILE: mm/filemap.c:2087:
+	struct address_space * mapping = file->f_dentry->d_inode->i_mapping;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#65: FILE: mm/filemap.c:2088:
+	struct address_space_operations *a_ops = mapping->a_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#66: FILE: mm/filemap.c:2089:
+^Istruct inode ^I*inode = mapping->host;$

CHECK:SPACING: No space is necessary after a cast
#79: FILE: mm/filemap.c:2099:
+	if (unlikely((ssize_t) count < 0))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: mm/filemap.c:2143:
+	if (unlikely(pos + count > MAX_NON_LFS &&
+				!(file->f_flags & O_LARGEFILE))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#182: FILE: mm/filemap.c:2201:
+		written = generic_file_direct_IO(WRITE, file,
+						(char *) buf, count, pos);

CHECK:SPACING: No space is necessary after a cast
#182: FILE: mm/filemap.c:2201:
+						(char *) buf, count, pos);

WARNING:LINE_SPACING: Missing a blank line after declarations
#185: FILE: mm/filemap.c:2204:
+			loff_t end = pos + written;
+			if (end > inode->i_size && !S_ISBLK(inode->i_mode)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#236: FILE: mm/filemap.c:2250:
+		status = a_ops->prepare_write(file, page, offset, offset+bytes);
 		                                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#262: FILE: mm/filemap.c:2265:
+		status = a_ops->commit_write(file, page, offset, offset+bytes);
 		                                                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#302: FILE: mm/filemap.c:2298:
+			status = generic_osync_inode(inode,
+					OSYNC_METADATA|OSYNC_DATA);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#302: FILE: mm/filemap.c:2298:
+					OSYNC_METADATA|OSYNC_DATA);
 					              ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000456084.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 3 warnings, 9 checks, 302 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000456084.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
