CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#86: FILE: include/linux/fsnotify.h:50:
+			   FSEVENT_MOVE | (isdir?FSEVENT_ISDIR:0));
 			                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#86: FILE: include/linux/fsnotify.h:50:
+			   FSEVENT_MOVE | (isdir?FSEVENT_ISDIR:0));
 			                                      ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#95: FILE: include/linux/fsnotify.h:63:
+		      FSEVENT_DELETE | (isdir?FSEVENT_ISDIR:0));
 		                             ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#95: FILE: include/linux/fsnotify.h:63:
+		      FSEVENT_DELETE | (isdir?FSEVENT_ISDIR:0));
 		                                           ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#121: FILE: include/linux/fsnotify.h:111:
+				((S_ISDIR(inode->i_mode))?FSEVENT_ISDIR:0));
 				                         ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#121: FILE: include/linux/fsnotify.h:111:
+				((S_ISDIR(inode->i_mode))?FSEVENT_ISDIR:0));
 				                                       ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#130: FILE: include/linux/fsnotify.h:129:
+				((S_ISDIR(inode->i_mode))?FSEVENT_ISDIR:0));
 				                         ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#130: FILE: include/linux/fsnotify.h:129:
+				((S_ISDIR(inode->i_mode))?FSEVENT_ISDIR:0));
 				                                       ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#139: FILE: include/linux/fsnotify.h:146:
+				((S_ISDIR(inode->i_mode))?FSEVENT_ISDIR:0));
 				                         ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#139: FILE: include/linux/fsnotify.h:146:
+				((S_ISDIR(inode->i_mode))?FSEVENT_ISDIR:0));
 				                                       ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#149: FILE: include/linux/fsnotify.h:167:
+				((S_ISDIR(inode->i_mode))?FSEVENT_ISDIR:0));
 				                         ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#149: FILE: include/linux/fsnotify.h:167:
+				((S_ISDIR(inode->i_mode))?FSEVENT_ISDIR:0));
 				                                       ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#158: FILE: include/linux/fsnotify.h:184:
+				((S_ISDIR(inode->i_mode))?FSEVENT_ISDIR:0));
 				                         ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#158: FILE: include/linux/fsnotify.h:184:
+				((S_ISDIR(inode->i_mode))?FSEVENT_ISDIR:0));
 				                                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#170: FILE: include/linux/fsnotify.h:239:
+	u32 fsevent_mask = 0;
+	if (ia_valid & (ATTR_UID | ATTR_GID | ATTR_MODE))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#213: FILE: include/linux/fsevent.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#230: FILE: include/linux/fsevent.h:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#231: FILE: include/linux/fsevent.h:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#242: FILE: include/linux/fsevent.h:30:
+^IFSEVENT_ACCESS = ^I0x00000001,^I/* File was accessed */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#243: FILE: include/linux/fsevent.h:31:
+^IFSEVENT_MODIFY = ^I0x00000002,^I/* File was modified */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#245: FILE: include/linux/fsevent.h:33:
+^IFSEVENT_CLOSE = ^I0x00000008,^I/* File was closed */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#246: FILE: include/linux/fsevent.h:34:
+^IFSEVENT_OPEN = ^I^I0x00000010,^I/* File was opened */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#247: FILE: include/linux/fsevent.h:35:
+^IFSEVENT_MOVE = ^I^I0x00000020,^I/* File was moved */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#248: FILE: include/linux/fsevent.h:36:
+^IFSEVENT_CREATE = ^I0x00000040,^I/* File was created */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#250: FILE: include/linux/fsevent.h:38:
+^IFSEVENT_CMDACK = ^I0x40000000,^I/* For used internally */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#251: FILE: include/linux/fsevent.h:39:
+^IFSEVENT_ISDIR = ^I0x80000000^I/* It is set for a dir */$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#280: FILE: include/linux/fsevent.h:68:
+extern void raise_fsevent(struct dentry * dentryp, u32 mask);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#280: FILE: include/linux/fsevent.h:68:
+extern void raise_fsevent(struct dentry * dentryp, u32 mask);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#281: FILE: include/linux/fsevent.h:69:
+extern void raise_fsevent_move(struct inode * olddir, const char * oldname, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#281: FILE: include/linux/fsevent.h:69:
+extern void raise_fsevent_move(struct inode * olddir, const char * oldname, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#281: FILE: include/linux/fsevent.h:69:
+extern void raise_fsevent_move(struct inode * olddir, const char * oldname, 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#281: FILE: include/linux/fsevent.h:69:
+extern void raise_fsevent_move(struct inode * olddir, const char * oldname, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: include/linux/fsevent.h:70:
+extern void raise_fsevent_move(struct inode * olddir, const char * oldname, 
+		struct inode * newdir, const char * newname, u32 mask);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#282: FILE: include/linux/fsevent.h:70:
+		struct inode * newdir, const char * newname, u32 mask);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#282: FILE: include/linux/fsevent.h:70:
+		struct inode * newdir, const char * newname, u32 mask);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#283: FILE: include/linux/fsevent.h:71:
+extern void raise_fsevent_create(struct inode * inode, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#283: FILE: include/linux/fsevent.h:71:
+extern void raise_fsevent_create(struct inode * inode, 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#283: FILE: include/linux/fsevent.h:71:
+extern void raise_fsevent_create(struct inode * inode, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#284: FILE: include/linux/fsevent.h:72:
+extern void raise_fsevent_create(struct inode * inode, 
+		const char * name, u32 mask);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#284: FILE: include/linux/fsevent.h:72:
+		const char * name, u32 mask);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#286: FILE: include/linux/fsevent.h:74:
+static void raise_fsevent(struct dentry * dentryp,  u32 mask)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#289: FILE: include/linux/fsevent.h:77:
+static void raise_fsevent_move(struct inode * olddir, const char * oldname, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#289: FILE: include/linux/fsevent.h:77:
+static void raise_fsevent_move(struct inode * olddir, const char * oldname, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#289: FILE: include/linux/fsevent.h:77:
+static void raise_fsevent_move(struct inode * olddir, const char * oldname, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#290: FILE: include/linux/fsevent.h:78:
+static void raise_fsevent_move(struct inode * olddir, const char * oldname, 
+		struct inode * newdir, const char * newname, u32 mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#290: FILE: include/linux/fsevent.h:78:
+		struct inode * newdir, const char * newname, u32 mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#290: FILE: include/linux/fsevent.h:78:
+		struct inode * newdir, const char * newname, u32 mask)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#293: FILE: include/linux/fsevent.h:81:
+static void raise_fsevent_create(struct inode * inode, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#293: FILE: include/linux/fsevent.h:81:
+static void raise_fsevent_create(struct inode * inode, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#294: FILE: include/linux/fsevent.h:82:
+static void raise_fsevent_create(struct inode * inode, 
+		const char * name, u32 mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#294: FILE: include/linux/fsevent.h:82:
+		const char * name, u32 mask)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#302: FILE: drivers/connector/cn_fs.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#319: FILE: drivers/connector/cn_fs.c:18:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#320: FILE: drivers/connector/cn_fs.c:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#329: FILE: drivers/connector/cn_fs.c:28:
+#include <asm/atomic.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#347: FILE: drivers/connector/cn_fs.c:46:
+int __raise_fsevent(const char * oldname, const char * newname, u32 mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#347: FILE: drivers/connector/cn_fs.c:46:
+int __raise_fsevent(const char * oldname, const char * newname, u32 mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#351: FILE: drivers/connector/cn_fs.c:50:
+	__u8 * buffer;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#353: FILE: drivers/connector/cn_fs.c:52:
+	static unsigned long last = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#354: FILE: drivers/connector/cn_fs.c:53:
+	static int fsevent_sum = 0;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#360: FILE: drivers/connector/cn_fs.c:59:
+		if (fsevent_sum > fsevent_burst_limit) {
+			return -1;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#365: FILE: drivers/connector/cn_fs.c:64:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#365: FILE: drivers/connector/cn_fs.c:64:
+	else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#371: FILE: drivers/connector/cn_fs.c:70:
+	if (newname) {
+		namelen += strlen(newname) + 1;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#374: FILE: drivers/connector/cn_fs.c:73:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#375: FILE: drivers/connector/cn_fs.c:74:
+	if ((buffer = (__u8 *)kmalloc(CN_FS_MSG_SIZE + namelen, GFP_KERNEL))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#375: FILE: drivers/connector/cn_fs.c:74:
+	if ((buffer = (__u8 *)kmalloc(CN_FS_MSG_SIZE + namelen, GFP_KERNEL))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#377: FILE: drivers/connector/cn_fs.c:76:
+		printk("cn_fs: out of memory\n");

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#381: FILE: drivers/connector/cn_fs.c:80:
+	msg = (struct cn_msg*)buffer;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#382: FILE: drivers/connector/cn_fs.c:81:
+	event = (struct fsevent*)msg->data;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#395: FILE: drivers/connector/cn_fs.c:94:
+	event->name[event->len-1] = '\0';
 	                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#401: FILE: drivers/connector/cn_fs.c:100:
+		event->name[event->len-1] = '\0';
 		                      ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#412: FILE: drivers/connector/cn_fs.c:111:
+void raise_fsevent(struct dentry * dentryp, u32 mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#418: FILE: drivers/connector/cn_fs.c:117:
+void raise_fsevent_create(struct inode * inode, const char * name, u32 mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#418: FILE: drivers/connector/cn_fs.c:117:
+void raise_fsevent_create(struct inode * inode, const char * name, u32 mask)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#424: FILE: drivers/connector/cn_fs.c:123:
+void raise_fsevent_move(struct inode * olddir, const char * oldname, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#424: FILE: drivers/connector/cn_fs.c:123:
+void raise_fsevent_move(struct inode * olddir, const char * oldname, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#424: FILE: drivers/connector/cn_fs.c:123:
+void raise_fsevent_move(struct inode * olddir, const char * oldname, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#425: FILE: drivers/connector/cn_fs.c:124:
+void raise_fsevent_move(struct inode * olddir, const char * oldname, 
+		struct inode * newdir, const char * newname, u32 mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#425: FILE: drivers/connector/cn_fs.c:124:
+		struct inode * newdir, const char * newname, u32 mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#425: FILE: drivers/connector/cn_fs.c:124:
+		struct inode * newdir, const char * newname, u32 mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#435: FILE: drivers/connector/cn_fs.c:134:
+	__u8 * buffer = NULL;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#440: FILE: drivers/connector/cn_fs.c:139:
+	if ((buffer = (__u8 *)kmalloc(CN_FS_MSG_SIZE, GFP_KERNEL)) == NULL) {

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#440: FILE: drivers/connector/cn_fs.c:139:
+	if ((buffer = (__u8 *)kmalloc(CN_FS_MSG_SIZE, GFP_KERNEL)) == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#441: FILE: drivers/connector/cn_fs.c:140:
+		printk("cn_fs: out of memory\n");

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#445: FILE: drivers/connector/cn_fs.c:144:
+	msg = (struct cn_msg*)buffer;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#446: FILE: drivers/connector/cn_fs.c:145:
+	event = (struct fsevent*)msg->data;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#474: FILE: drivers/connector/cn_fs.c:173:
+	mode = (enum fsevent_mode*)msg->data;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#493: FILE: drivers/connector/cn_fs.c:192:
+	if ((err = cn_add_callback(&cn_fs_event_id, "cn_fs",

ERROR:CODE_INDENT: code indent should use tabs where possible
#494: FILE: drivers/connector/cn_fs.c:193:
+^I ^I^I^I   &cn_fsevent_mode_ctl))) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#494: FILE: drivers/connector/cn_fs.c:193:
+^I ^I^I^I   &cn_fsevent_mode_ctl))) {$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#494: FILE: drivers/connector/cn_fs.c:193:
+	if ((err = cn_add_callback(&cn_fs_event_id, "cn_fs",
+	 			   &cn_fsevent_mode_ctl))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#495: FILE: drivers/connector/cn_fs.c:194:
+		printk(KERN_WARNING "cn_fs failed to register\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000091163.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 47 errors, 20 warnings, 26 checks, 414 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000091163.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
