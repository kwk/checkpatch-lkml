CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#66: FILE: fs/buffer.c:2513:
+int nobh_writepage(struct page *page, get_blocks_t *get_blocks,
+		struct writeback_control *wbc, writepage_t bh_writepage_fn)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#137: FILE: fs/ext2/inode.c:671:
+static int ext2_nobh_writepage(struct page *page,
+			struct writeback_control *wbc)

ERROR:CODE_INDENT: code indent should use tabs where possible
#150: FILE: fs/ext2/inode.c:690:
+        return __mpage_writepages(mapping, wbc, ext2_get_blocks,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: fs/ext2/inode.c:690:
+        return __mpage_writepages(mapping, wbc, ext2_get_blocks,$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#178: FILE: fs/ext3/super.c:1621:
+		printk("NOBH option set\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#190: FILE: fs/ext3/inode.c:1199:
+static int ext3_writepages_get_blocks(struct inode *inode, sector_t iblock,
+		unsigned long max_blocks, struct buffer_head *bh, int create)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#217: FILE: fs/ext3/inode.c:1708:
+		ret = nobh_writepage(page, ext3_writepages_get_blocks, wbc,
+			ext3_writeback_writepage_helper);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#271: FILE: fs/jfs/inode.c:271:
+static int jfs_bh_writepage(struct page *page,
+				struct writeback_control *wbc)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#276: FILE: fs/jfs/inode.c:276:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#287: FILE: fs/jfs/inode.c:285:
+        return __mpage_writepages(mapping, wbc, jfs_mpage_get_blocks,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: fs/jfs/inode.c:285:
+        return __mpage_writepages(mapping, wbc, jfs_mpage_get_blocks,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#316: FILE: fs/mpage.c:393:
+static unsigned long mpage_get_more_blocks(struct mpageio *mio,
+	struct inode *inode, get_blocks_t get_blocks)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#324: FILE: fs/mpage.c:401:
+	while ((first_unmapped < mio->final_block_in_request) &&
+		(mio->map_bh.b_size < PAGE_SIZE)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#325: FILE: fs/mpage.c:402:
+		(mio->map_bh.b_size < PAGE_SIZE)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#327: FILE: fs/mpage.c:404:
+		if (get_blocks(inode, first_unmapped,
+			mio->final_block_in_request - first_unmapped,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'map_bh.b_blocknr != next_contig_block'
#330: FILE: fs/mpage.c:407:
+		if (mio_nblocks && ((map_bh.b_blocknr != next_contig_block) ||
+			map_bh.b_bdev != mio->map_bh.b_bdev))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: fs/mpage.c:408:
+		if (mio_nblocks && ((map_bh.b_blocknr != next_contig_block) ||
+			map_bh.b_bdev != mio->map_bh.b_bdev))

WARNING:LINE_SPACING: Missing a blank line after declarations
#336: FILE: fs/mpage.c:413:
+			int i = 0;
+			for (; i < map_bh.b_size >> inode->i_blkbits; i++)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#338: FILE: fs/mpage.c:415:
+				unmap_underlying_metadata(map_bh.b_bdev,
+					map_bh.b_blocknr + i);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#372: FILE: fs/mpage.c:455:
+__mpage_writepage(struct mpageio *mio, struct page *page,
+	get_blocks_t get_blocks, struct writeback_control *wbc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#487: FILE: fs/mpage.c:596:
+		bio = mpage_alloc(bdev, map_bh->b_blocknr << (blkbits - 9),
 				bio_get_nr_vecs(bdev), GFP_NOFS|__GFP_HIGH);

ERROR:CODE_INDENT: code indent should use tabs where possible
#547: FILE: fs/mpage.c:705:
+                mapping->a_ops->writepage);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#547: FILE: fs/mpage.c:705:
+                mapping->a_ops->writepage);$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#549: FILE: fs/mpage.c:707:
+
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#550: FILE: fs/mpage.c:708:
+}
+int

ERROR:CODE_INDENT: code indent should use tabs where possible
#552: FILE: fs/mpage.c:710:
+                struct writeback_control *wbc, get_blocks_t get_blocks,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#552: FILE: fs/mpage.c:710:
+__mpage_writepages(struct address_space *mapping,
+                struct writeback_control *wbc, get_blocks_t get_blocks,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#552: FILE: fs/mpage.c:710:
+                struct writeback_control *wbc, get_blocks_t get_blocks,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#553: FILE: fs/mpage.c:711:
+                writepage_t writepage_fn)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#553: FILE: fs/mpage.c:711:
+                writepage_t writepage_fn)$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#559: FILE: fs/mpage.c:716:
+	const unsigned blkbits = inode->i_blkbits;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!get_blocks"
#578: FILE: fs/mpage.c:736:
+	if (get_blocks == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#617: FILE: fs/mpage.c:808:
+				ret = __mpage_writepage(&mio, page, get_blocks,
+						wbc, writepage_fn);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#641: FILE: fs/mpage.c:845:
+int mpage_writepage(struct page *page, get_blocks_t get_blocks,
+		struct writeback_control *wbc, writepage_t writepage_fn)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#653: FILE: fs/mpage.c:850:
+	const unsigned blkbits = inode->i_blkbits;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#660: FILE: fs/mpage.c:857:
+	ret = __mpage_writepage(&mio, page, get_blocks,
+			wbc, writepage_fn);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#676: FILE: include/linux/buffer_head.h:210:
+int nobh_writepage(struct page *page, get_blocks_t *get_blocks,
+	struct writeback_control *wbc, writepage_t bh_writepage);

ERROR:CODE_INDENT: code indent should use tabs where possible
#709: FILE: include/linux/mpage.h:20:
+                struct writeback_control *wbc, get_blocks_t get_blocks);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#709: FILE: include/linux/mpage.h:20:
+                struct writeback_control *wbc, get_blocks_t get_blocks);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#711: FILE: include/linux/mpage.h:22:
+                struct writeback_control *wbc, writepage_t writepage);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#711: FILE: include/linux/mpage.h:22:
+int mpage_writepage(struct page *page, get_blocks_t *get_blocks,
+                struct writeback_control *wbc, writepage_t writepage);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#711: FILE: include/linux/mpage.h:22:
+                struct writeback_control *wbc, writepage_t writepage);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#713: FILE: include/linux/mpage.h:24:
+                struct writeback_control *wbc, get_blocks_t get_blocks,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#713: FILE: include/linux/mpage.h:24:
+int __mpage_writepages(struct address_space *mapping,
+                struct writeback_control *wbc, get_blocks_t get_blocks,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#713: FILE: include/linux/mpage.h:24:
+                struct writeback_control *wbc, get_blocks_t get_blocks,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#714: FILE: include/linux/mpage.h:25:
+                writepage_t writepage);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#714: FILE: include/linux/mpage.h:25:
+                writepage_t writepage);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#738: FILE: include/linux/pagevec.h:31:
+unsigned pagevec_contig_lookup_tag(struct pagevec *pvec,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#739: FILE: include/linux/pagevec.h:32:
+unsigned pagevec_contig_lookup_tag(struct pagevec *pvec,
+		struct address_space *mapping, pgoff_t *index, int tag,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#740: FILE: include/linux/pagevec.h:33:
+		unsigned nr_pages);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#754: FILE: include/linux/radix-tree.h:63:
+__radix_tree_gang_lookup_tag(struct radix_tree_root *root, void **results,
+		unsigned long first_index, unsigned int max_items, int tag,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#816: FILE: lib/radix-tree.c:632:
+__radix_tree_gang_lookup_tag(struct radix_tree_root *root, void **results,
+		unsigned long first_index, unsigned int max_items, int tag,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#869: FILE: mm/filemap.c:664:
+	ret = __radix_tree_gang_lookup_tag(&mapping->page_tree,
+			(void **)pages, *index, nr_pages, tag, contig);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#887: FILE: mm/swap.c:393:
+pagevec_contig_lookup_tag(struct pagevec *pvec, struct address_space *mapping,
+		pgoff_t *index, int tag, unsigned nr_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#887: FILE: mm/swap.c:393:
+		pgoff_t *index, int tag, unsigned nr_pages)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#890: FILE: mm/swap.c:396:
+	pvec->nr = find_get_pages_tag(mapping, index, tag,
+					nr_pages, pvec->pages, 1);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000166988.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 16 warnings, 31 checks, 744 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000166988.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
