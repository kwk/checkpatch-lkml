ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#55: FILE: drivers/i2c/i2c-core.c:585:
+static void i2c_transfer_entry(struct i2c_adapter * adap,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#56: FILE: drivers/i2c/i2c-core.c:586:
+			       struct i2c_op_q_entry * entry)

ERROR:CODE_INDENT: code indent should use tabs where possible
#64: FILE: drivers/i2c/i2c-core.c:591:
+ ^I ^Idev_dbg(&adap->dev, "master_xfer: with %d msgs.\n",$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#64: FILE: drivers/i2c/i2c-core.c:591:
+ ^I ^Idev_dbg(&adap->dev, "master_xfer: with %d msgs.\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#64: FILE: drivers/i2c/i2c-core.c:591:
+ ^I ^Idev_dbg(&adap->dev, "master_xfer: with %d msgs.\n",$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#74: FILE: drivers/i2c/i2c-core.c:598:
+		if (entry->complete)
+		    entry->complete(adap, entry);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#79: FILE: drivers/i2c/i2c-core.c:602:
+		entry->result = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#83: FILE: drivers/i2c/i2c-core.c:606:
+int i2c_transfer(struct i2c_adapter * adap, struct i2c_msg *msgs, int num)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#89: FILE: drivers/i2c/i2c-core.c:612:
+	if (!entry)
+	    return -ENOMEM;

WARNING:TABSTOP: Statements should start on a tabstop
#90: FILE: drivers/i2c/i2c-core.c:613:
+	    return -ENOMEM;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#131: FILE: drivers/i2c/i2c-core.c:1062:
+static void i2c_smbus_complete_entry(struct i2c_adapter * adapter,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#132: FILE: drivers/i2c/i2c-core.c:1063:
+				     struct i2c_op_q_entry * entry)

ERROR:SPACING: space required before the open parenthesis '('
#138: FILE: drivers/i2c/i2c-core.c:1068:
+	if(entry->swpec &&

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#144: FILE: drivers/i2c/i2c-core.c:1074:
+		if(i2c_smbus_check_pec(entry->smbus.addr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#163: FILE: drivers/i2c/i2c-core.c:1083:
+static void i2c_smbus_format_entry(struct i2c_adapter * adapter,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#164: FILE: drivers/i2c/i2c-core.c:1084:
+				   struct i2c_op_q_entry * entry)

ERROR:SPACING: space required before the open parenthesis '('
#169: FILE: drivers/i2c/i2c-core.c:1089:
+	if((entry->smbus.flags & I2C_CLIENT_PEC) &&

ERROR:SPACING: space required before the open parenthesis '('
#188: FILE: drivers/i2c/i2c-core.c:1092:
+		if(entry->smbus.read_write == I2C_SMBUS_READ &&

CHECK:BRACES: braces {} should be used on all arms of this statement
#188: FILE: drivers/i2c/i2c-core.c:1092:
+		if(entry->smbus.read_write == I2C_SMBUS_READ &&
[...]
+		else if(entry->smbus.size == I2C_SMBUS_PROC_CALL)
[...]
+		else if(entry->smbus.size == I2C_SMBUS_BLOCK_PROC_CALL) {
[...]
+		} else if(entry->smbus.read_write == I2C_SMBUS_WRITE &&
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#191: FILE: drivers/i2c/i2c-core.c:1095:
+		else if(entry->smbus.size == I2C_SMBUS_PROC_CALL)

ERROR:SPACING: space required before the open parenthesis '('
#193: FILE: drivers/i2c/i2c-core.c:1097:
+		else if(entry->smbus.size == I2C_SMBUS_BLOCK_PROC_CALL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#195: FILE: drivers/i2c/i2c-core.c:1099:
+			unsigned char *data = entry->smbus.data->block;
+			i2c_smbus_add_pec(entry->smbus.addr,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: drivers/i2c/i2c-core.c:1101:
+^I^I                          I2C_SMBUS_BLOCK_DATA,$

ERROR:SPACING: space required before the open parenthesis '('
#201: FILE: drivers/i2c/i2c-core.c:1105:
+		} else if(entry->smbus.read_write == I2C_SMBUS_WRITE &&

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: drivers/i2c/i2c-core.c:1106:
+^I^I          entry->smbus.size != I2C_SMBUS_QUICK &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#203: FILE: drivers/i2c/i2c-core.c:1107:
+^I^I          entry->smbus.size != I2C_SMBUS_I2C_BLOCK_DATA)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#221: FILE: drivers/i2c/i2c-core.c:1118:
+static void i2c_smbus_emu_complete(struct i2c_adapter * adapter,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#222: FILE: drivers/i2c/i2c-core.c:1119:
+				   struct i2c_op_q_entry * entry)

ERROR:SPACING: space required before the open parenthesis '('
#242: FILE: drivers/i2c/i2c-core.c:1131:
+	switch(entry->smbus.size) {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#254: FILE: drivers/i2c/i2c-core.c:1140:
+		entry->smbus.data->word = msgbuf1[0]|(msgbuf1[1] << 8);
 		                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#262: FILE: drivers/i2c/i2c-core.c:1146:
+			entry->smbus.data->block[i+1] = msgbuf1[i];
 			                          ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#279: FILE: drivers/i2c/i2c-core.c:1155:
+				struct i2c_op_q_entry * entry)

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#288: FILE: drivers/i2c/i2c-core.c:1162:
+	int num = entry->smbus.read_write == I2C_SMBUS_READ?2:1;
 	                                                   ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#288: FILE: drivers/i2c/i2c-core.c:1162:
+	int num = entry->smbus.read_write == I2C_SMBUS_READ?2:1;
 	                                                     ^

ERROR:SPACING: space required before the open parenthesis '('
#310: FILE: drivers/i2c/i2c-core.c:1178:
+	switch(entry->smbus.size) {

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#316: FILE: drivers/i2c/i2c-core.c:1183:
+				((entry->smbus.read_write==I2C_SMBUS_READ)
 				                         ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#331: FILE: drivers/i2c/i2c-core.c:1195:
+		if (entry->smbus.read_write == I2C_SMBUS_READ)
[...]
 		else {
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#341: FILE: drivers/i2c/i2c-core.c:1203:
+		if (entry->smbus.read_write == I2C_SMBUS_READ)
[...]
 		else {
[...]

ERROR:SPACING: space required before the open parenthesis '('
#380: FILE: drivers/i2c/i2c-core.c:1233:
+			if(entry->smbus.size == I2C_SMBUS_BLOCK_DATA_PEC)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#384: FILE: drivers/i2c/i2c-core.c:1236:
+				msgbuf0[i] = entry->smbus.data->block[i-1];
 				                                       ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#440: FILE: drivers/i2c/i2c-core.c:1283:
+	if (!entry)
+	    return -ENOMEM;

WARNING:TABSTOP: Statements should start on a tabstop
#441: FILE: drivers/i2c/i2c-core.c:1284:
+	    return -ENOMEM;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#467: FILE: drivers/i2c/i2c-core.c:1303:
+		if (entry->complete)
+		    entry->complete(adapter, entry);

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#509: FILE: include/linux/i2c.h:38:
+#include <asm/atomic.h>

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#535: FILE: include/linux/i2c.h:409:
+	/* The result will be set to the result of the operation when
+	   it completes. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#535: FILE: include/linux/i2c.h:409:
+	   it completes. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#540: FILE: include/linux/i2c.h:414:
+	/* Public interface.  The user should set these up (and the
+	   proper structure below). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#540: FILE: include/linux/i2c.h:414:
+	   proper structure below). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#544: FILE: include/linux/i2c.h:418:
+	/* Handler may be called from interrupt context, so be
+	   careful. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#544: FILE: include/linux/i2c.h:418:
+	   careful. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#549: FILE: include/linux/i2c.h:423:
+	/* Note that this is not a union because an smbus operation
+	   may be converted into an i2c operation (thus both

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#551: FILE: include/linux/i2c.h:425:
+	   by the driver. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#558: FILE: include/linux/i2c.h:432:
+		/* Addr and flags are filled in by the non-blocking
+		   send routine that takes a client. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#558: FILE: include/linux/i2c.h:432:
+		   send routine that takes a client. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#566: FILE: include/linux/i2c.h:440:
+		/* Note that the size is *not* the length of the data.
+		   It is the transaction type, like I2C_SMBUS_QUICK

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#570: FILE: include/linux/i2c.h:444:
+		   and receive. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#577: FILE: include/linux/i2c.h:451:
+	/* For use by the bus interface.  The bus interface sets the
+	   timeout in microseconds until the next poll operation.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#582: FILE: include/linux/i2c.h:456:
+	   yet. */

WARNING:TYPO_SPELLING: 'wierd' may be misspelled - perhaps 'weird'?
#599: FILE: include/linux/i2c.h:473:
+	/* It's wierd, but we use a usecount to track if an q entry is
 	        ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#600: FILE: include/linux/i2c.h:474:
+	/* It's wierd, but we use a usecount to track if an q entry is
+	   in use and when it should be reported back to the user. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#600: FILE: include/linux/i2c.h:474:
+	   in use and when it should be reported back to the user. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#604: FILE: include/linux/i2c.h:478:
+	/* These are here for SMBus emulation over I2C.  I don't like
+	   them taking this much room in the data structure, but they

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#605: FILE: include/linux/i2c.h:479:
+	   need to be available in this case. */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000196493.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 30 warnings, 8 checks, 553 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000196493.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
