ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#92: FILE: fs/ext2/file.c:102:
+	setattr:	ext2_notify_change,
 	       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#92: FILE: fs/ext2/file.c:102:
+	setattr:	ext2_notify_change,

CHECK:CAMELCASE: Avoid CamelCase: <Indirect>
#140: FILE: fs/ext2/inode.c:235:
+static Indirect *ext2_get_branch(struct inode *inode,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#171: FILE: fs/ext2/inode.c:1191:
+		if (raw_inode->i_size_high || (inode->i_size & (1<<31))) {
 		                                                 ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#179: FILE: fs/ext2/inode.c:1238:
+static struct {unsigned attr, flag, ext2;} ext2_attr[] = {

ERROR:SPACING: space required after that ';' (ctx:VxV)
#179: FILE: fs/ext2/inode.c:1238:
+static struct {unsigned attr, flag, ext2;} ext2_attr[] = {
                                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#185: FILE: fs/ext2/inode.c:1244:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#236: FILE: fs/ext2/inode.c:1275:
+		unsigned flags = iattr->ia_attr_flags;

WARNING:LINE_SPACING: Missing a blank line after declarations
#238: FILE: fs/ext2/inode.c:1277:
+		int i;
+		for (i=0; i<sizeof(ext2_attr)/sizeof(ext2_attr[0]); i++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(ext2_attr)
#238: FILE: fs/ext2/inode.c:1277:
+		for (i=0; i<sizeof(ext2_attr)/sizeof(ext2_attr[0]); i++) {

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#238: FILE: fs/ext2/inode.c:1277:
+		for (i=0; i<sizeof(ext2_attr)/sizeof(ext2_attr[0]); i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#238: FILE: fs/ext2/inode.c:1277:
+		for (i=0; i<sizeof(ext2_attr)/sizeof(ext2_attr[0]); i++) {
 		           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#238: FILE: fs/ext2/inode.c:1277:
+		for (i=0; i<sizeof(ext2_attr)/sizeof(ext2_attr[0]); i++) {
 		                             ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#263: FILE: fs/ext2/super.c:365:
+	loff_t res = EXT2_NDIR_BLOCKS;
+	res += 1LL << (bits-2);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#263: FILE: fs/ext2/super.c:365:
+	res += 1LL << (bits-2);
 	                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#264: FILE: fs/ext2/super.c:366:
+	res += 1LL << (2*(bits-2));
 	                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#264: FILE: fs/ext2/super.c:366:
+	res += 1LL << (2*(bits-2));
 	                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#265: FILE: fs/ext2/super.c:367:
+	res += 1LL << (3*(bits-2));
 	                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#265: FILE: fs/ext2/super.c:367:
+	res += 1LL << (3*(bits-2));
 	                      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#269: FILE: fs/ext2/super.c:371:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#325: FILE: include/linux/ext2_fs.h:571:
+extern int ext2_notify_change (struct dentry *, struct iattr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#325: FILE: include/linux/ext2_fs.h:571:
+extern int ext2_notify_change (struct dentry *, struct iattr *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#325: FILE: include/linux/ext2_fs.h:571:
+extern int ext2_notify_change (struct dentry *, struct iattr *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iattr *' should also have an identifier name
#325: FILE: include/linux/ext2_fs.h:571:
+extern int ext2_notify_change (struct dentry *, struct iattr *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#360: FILE: mm/filemap.c:2425:
+	unsigned	bytes;

CHECK:CAMELCASE: Avoid CamelCase: <UnlockPage>
#395: FILE: mm/filemap.c:2536:
+	UnlockPage(page);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000564757.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 10 warnings, 11 checks, 309 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000564757.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
