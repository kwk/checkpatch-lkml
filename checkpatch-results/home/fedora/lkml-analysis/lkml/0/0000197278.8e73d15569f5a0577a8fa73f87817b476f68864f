WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#85: 
  Signed-off-by: Patrick Mochel <mochel@digitalimplant.org>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#91: FILE: include/linux/klist.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#107: FILE: include/linux/klist.h:17:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#109: FILE: include/linux/klist.h:19:
+	spinlock_t		k_lock;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#113: FILE: include/linux/klist.h:23:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#114: FILE: include/linux/klist.h:24:
+extern void klist_init(struct klist * k);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#114: FILE: include/linux/klist.h:24:
+extern void klist_init(struct klist * k);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#116: FILE: include/linux/klist.h:26:
+
+

ERROR:POINTER_LOCATION: "foo		* bar" should be "foo		*bar"
#118: FILE: include/linux/klist.h:28:
+	struct klist		* n_klist;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#124: FILE: include/linux/klist.h:34:
+extern void klist_add_tail(struct klist * k, struct klist_node * n);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#124: FILE: include/linux/klist.h:34:
+extern void klist_add_tail(struct klist * k, struct klist_node * n);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#124: FILE: include/linux/klist.h:34:
+extern void klist_add_tail(struct klist * k, struct klist_node * n);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#125: FILE: include/linux/klist.h:35:
+extern void klist_add_head(struct klist * k, struct klist_node * n);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#125: FILE: include/linux/klist.h:35:
+extern void klist_add_head(struct klist * k, struct klist_node * n);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#125: FILE: include/linux/klist.h:35:
+extern void klist_add_head(struct klist * k, struct klist_node * n);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#127: FILE: include/linux/klist.h:37:
+extern void klist_del(struct klist_node * n);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#127: FILE: include/linux/klist.h:37:
+extern void klist_del(struct klist_node * n);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#128: FILE: include/linux/klist.h:38:
+extern void klist_remove(struct klist_node * n);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#128: FILE: include/linux/klist.h:38:
+extern void klist_remove(struct klist_node * n);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#130: FILE: include/linux/klist.h:40:
+
+

ERROR:POINTER_LOCATION: "foo		* bar" should be "foo		*bar"
#132: FILE: include/linux/klist.h:42:
+	struct klist		* i_klist;

ERROR:POINTER_LOCATION: "foo	* bar" should be "foo	*bar"
#133: FILE: include/linux/klist.h:43:
+	struct list_head	* i_head;

ERROR:POINTER_LOCATION: "foo	* bar" should be "foo	*bar"
#134: FILE: include/linux/klist.h:44:
+	struct klist_node	* i_cur;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#137: FILE: include/linux/klist.h:47:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#138: FILE: include/linux/klist.h:48:
+extern void klist_iter_init(struct klist * k, struct klist_iter * i);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#138: FILE: include/linux/klist.h:48:
+extern void klist_iter_init(struct klist * k, struct klist_iter * i);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#138: FILE: include/linux/klist.h:48:
+extern void klist_iter_init(struct klist * k, struct klist_iter * i);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#139: FILE: include/linux/klist.h:49:
+extern void klist_iter_init_node(struct klist * k, struct klist_iter * i,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#139: FILE: include/linux/klist.h:49:
+extern void klist_iter_init_node(struct klist * k, struct klist_iter * i,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#139: FILE: include/linux/klist.h:49:
+extern void klist_iter_init_node(struct klist * k, struct klist_iter * i,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#140: FILE: include/linux/klist.h:50:
+				 struct klist_node * n);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#141: FILE: include/linux/klist.h:51:
+extern void klist_iter_exit(struct klist_iter * i);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#141: FILE: include/linux/klist.h:51:
+extern void klist_iter_exit(struct klist_iter * i);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#142: FILE: include/linux/klist.h:52:
+extern struct klist_node * klist_next(struct klist_iter * i);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#142: FILE: include/linux/klist.h:52:
+extern struct klist_node * klist_next(struct klist_iter * i);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#142: FILE: include/linux/klist.h:52:
+extern struct klist_node * klist_next(struct klist_iter * i);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#165: FILE: lib/klist.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#205: FILE: lib/klist.c:41:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#211: FILE: lib/klist.c:47:
+void klist_init(struct klist * k)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#217: FILE: lib/klist.c:53:
+EXPORT_SYMBOL_GPL(klist_init);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#219: FILE: lib/klist.c:55:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#220: FILE: lib/klist.c:56:
+static void add_head(struct klist * k, struct klist_node * n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#220: FILE: lib/klist.c:56:
+static void add_head(struct klist * k, struct klist_node * n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#227: FILE: lib/klist.c:63:
+static void add_tail(struct klist * k, struct klist_node * n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#227: FILE: lib/klist.c:63:
+static void add_tail(struct klist * k, struct klist_node * n)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#234: FILE: lib/klist.c:70:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#235: FILE: lib/klist.c:71:
+static void klist_node_init(struct klist * k, struct klist_node * n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#235: FILE: lib/klist.c:71:
+static void klist_node_init(struct klist * k, struct klist_node * n)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#243: FILE: lib/klist.c:79:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#250: FILE: lib/klist.c:86:
+void klist_add_head(struct klist * k, struct klist_node * n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#250: FILE: lib/klist.c:86:
+void klist_add_head(struct klist * k, struct klist_node * n)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#256: FILE: lib/klist.c:92:
+EXPORT_SYMBOL_GPL(klist_add_head);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#258: FILE: lib/klist.c:94:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#265: FILE: lib/klist.c:101:
+void klist_add_tail(struct klist * k, struct klist_node * n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#265: FILE: lib/klist.c:101:
+void klist_add_tail(struct klist * k, struct klist_node * n)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#271: FILE: lib/klist.c:107:
+EXPORT_SYMBOL_GPL(klist_add_tail);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#273: FILE: lib/klist.c:109:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#274: FILE: lib/klist.c:110:
+static void klist_release(struct kref * kref)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#276: FILE: lib/klist.c:112:
+	struct klist_node * n = container_of(kref, struct klist_node, n_ref);

WARNING:LINE_SPACING: Missing a blank line after declarations
#277: FILE: lib/klist.c:113:
+	struct klist_node * n = container_of(kref, struct klist_node, n_ref);
+	list_del(&n->n_node);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#281: FILE: lib/klist.c:117:
+static int klist_dec_and_del(struct klist_node * n)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#286: FILE: lib/klist.c:122:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#292: FILE: lib/klist.c:128:
+void klist_del(struct klist_node * n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#294: FILE: lib/klist.c:130:
+	struct klist * k = n->n_klist;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#301: FILE: lib/klist.c:137:
+EXPORT_SYMBOL_GPL(klist_del);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#303: FILE: lib/klist.c:139:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#309: FILE: lib/klist.c:145:
+void klist_remove(struct klist_node * n)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#317: FILE: lib/klist.c:153:
+EXPORT_SYMBOL_GPL(klist_remove);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#319: FILE: lib/klist.c:155:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#330: FILE: lib/klist.c:166:
+void klist_iter_init_node(struct klist * k, struct klist_iter * i, struct klist_node * n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#330: FILE: lib/klist.c:166:
+void klist_iter_init_node(struct klist * k, struct klist_iter * i, struct klist_node * n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#330: FILE: lib/klist.c:166:
+void klist_iter_init_node(struct klist * k, struct klist_iter * i, struct klist_node * n)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#337: FILE: lib/klist.c:173:
+EXPORT_SYMBOL_GPL(klist_iter_init_node);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#339: FILE: lib/klist.c:175:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#348: FILE: lib/klist.c:184:
+void klist_iter_init(struct klist * k, struct klist_iter * i)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#348: FILE: lib/klist.c:184:
+void klist_iter_init(struct klist * k, struct klist_iter * i)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#353: FILE: lib/klist.c:189:
+EXPORT_SYMBOL_GPL(klist_iter_init);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#355: FILE: lib/klist.c:191:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#365: FILE: lib/klist.c:201:
+void klist_iter_exit(struct klist_iter * i)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#373: FILE: lib/klist.c:209:
+EXPORT_SYMBOL_GPL(klist_iter_exit);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#375: FILE: lib/klist.c:211:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#376: FILE: lib/klist.c:212:
+static struct klist_node * to_klist_node(struct list_head * n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#376: FILE: lib/klist.c:212:
+static struct klist_node * to_klist_node(struct list_head * n)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#381: FILE: lib/klist.c:217:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#391: FILE: lib/klist.c:227:
+struct klist_node * klist_next(struct klist_iter * i)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#391: FILE: lib/klist.c:227:
+struct klist_node * klist_next(struct klist_iter * i)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#393: FILE: lib/klist.c:229:
+	struct list_head * next;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#394: FILE: lib/klist.c:230:
+	struct klist_node * knode = NULL;

CHECK:BRACES: braces {} should be used on all arms of this statement
#397: FILE: lib/klist.c:233:
+	if (i->i_cur) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#400: FILE: lib/klist.c:236:
+	} else

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#412: FILE: lib/klist.c:248:
+EXPORT_SYMBOL_GPL(klist_next);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000197278.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 48 errors, 13 warnings, 30 checks, 314 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000197278.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
