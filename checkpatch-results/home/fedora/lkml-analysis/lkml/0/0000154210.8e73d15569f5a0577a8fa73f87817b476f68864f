WARNING:REPEATED_WORD: Possible repeated word: 'to'
#31: 
for those arches that want to be able to to save caller traces

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
#ifdef CONFIG_FRAME_POINTER

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#72: 
#else

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#79: 
#endif

WARNING:PATCH_PREFIX: patch prefix 'mm' exists, appears to be a -p0 patch

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#118: FILE: arch/i386/kernel/traps.c:160:
+	 * function found on the stack */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: No space is necessary after a cast
#125: FILE: arch/i386/kernel/traps.c:167:
+		ebp = *(unsigned long *) ebp;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#131: FILE: arch/i386/kernel/traps.c:173:
+		unsigned long ebp = (unsigned long) prev_addr;

CHECK:SPACING: No space is necessary after a cast
#135: FILE: arch/i386/kernel/traps.c:177:
+		ebp = *(unsigned long *) ebp;

CHECK:SPACING: No space is necessary after a cast
#136: FILE: arch/i386/kernel/traps.c:178:
+		func_ptr = (unsigned long *) ((unsigned long)ebp + 4);

WARNING:PATCH_PREFIX: patch prefix 'mm' exists, appears to be a -p0 patch

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#162: FILE: include/linux/sched.h:174:
+extern unsigned long *next_stack_func(unsigned long *prev_addr, int count);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PATCH_PREFIX: patch prefix 'mm' exists, appears to be a -p0 patch

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#189: FILE: arch/x86_64/kernel/traps.c:172:
+	 * function found on the stack */

CHECK:SPACING: No space is necessary after a cast
#196: FILE: arch/x86_64/kernel/traps.c:179:
+		rbp = *(unsigned long *) rbp;

CHECK:SPACING: No space is necessary after a cast
#202: FILE: arch/x86_64/kernel/traps.c:185:
+		unsigned long rbp = (unsigned long) prev_addr;

CHECK:SPACING: No space is necessary after a cast
#206: FILE: arch/x86_64/kernel/traps.c:189:
+		rbp = *(unsigned long *) rbp;

CHECK:SPACING: No space is necessary after a cast
#207: FILE: arch/x86_64/kernel/traps.c:190:
+		func_ptr = (unsigned long *) ((unsigned long)rbp + 8);

WARNING:PATCH_PREFIX: patch prefix 'mm' exists, appears to be a -p0 patch

CHECK:SPACING: No space is necessary after a cast
#249: FILE: mm/slab.c:528:
+		return (unsigned long*) (objp+cachep->objsize-(1+DBG_USERWORDS)*BYTES_PER_WORD);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#249: FILE: mm/slab.c:528:
+		return (unsigned long*) (objp+cachep->objsize-(1+DBG_USERWORDS)*BYTES_PER_WORD);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#249: FILE: mm/slab.c:528:
+		return (unsigned long*) (objp+cachep->objsize-(1+DBG_USERWORDS)*BYTES_PER_WORD);
 		                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#249: FILE: mm/slab.c:528:
+		return (unsigned long*) (objp+cachep->objsize-(1+DBG_USERWORDS)*BYTES_PER_WORD);
 		                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#249: FILE: mm/slab.c:528:
+		return (unsigned long*) (objp+cachep->objsize-(1+DBG_USERWORDS)*BYTES_PER_WORD);
 		                                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#249: FILE: mm/slab.c:528:
+		return (unsigned long*) (objp+cachep->objsize-(1+DBG_USERWORDS)*BYTES_PER_WORD);
 		                                                               ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#259: FILE: mm/slab.c:536:
+	return (unsigned long*)(objp+cachep->objsize - DBG_USERWORDS*BYTES_PER_WORD);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#259: FILE: mm/slab.c:536:
+	return (unsigned long*)(objp+cachep->objsize - DBG_USERWORDS*BYTES_PER_WORD);
 	                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#259: FILE: mm/slab.c:536:
+	return (unsigned long*)(objp+cachep->objsize - DBG_USERWORDS*BYTES_PER_WORD);
 	                                                            ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#273: FILE: mm/slab.c:1322:
+		printk(KERN_ERR "Last user:\n");

CHECK:SPACING: No space is necessary after a cast
#275: FILE: mm/slab.c:1324:
+			printk(KERN_ERR "[<%p>]", (void *) dbg_userword(cachep, objp)[i]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#275: FILE: mm/slab.c:1324:
+			printk(KERN_ERR "[<%p>]", (void *) dbg_userword(cachep, objp)[i]);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#289: FILE: mm/slab.c:1544:
+	if ((size < 4096 || fls(size-1) == fls(size-1+(2 + DBG_USERWORDS)*BYTES_PER_WORD)))
 	                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#289: FILE: mm/slab.c:1544:
+	if ((size < 4096 || fls(size-1) == fls(size-1+(2 + DBG_USERWORDS)*BYTES_PER_WORD)))
 	                                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#289: FILE: mm/slab.c:1544:
+	if ((size < 4096 || fls(size-1) == fls(size-1+(2 + DBG_USERWORDS)*BYTES_PER_WORD)))
 	                                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#289: FILE: mm/slab.c:1544:
+	if ((size < 4096 || fls(size-1) == fls(size-1+(2 + DBG_USERWORDS)*BYTES_PER_WORD)))
 	                                                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#300: FILE: mm/slab.c:1619:
+^I^I/* user store requires word alignment and DBG_USERWORDS*word $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#329: FILE: mm/slab.c:2271:
+static void inline *cache_free_debugcheck(kmem_cache_t *cachep, void *objp,
                    ^

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#329: FILE: mm/slab.c:2271:
+static void inline *cache_free_debugcheck(kmem_cache_t *cachep, void *objp,

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

CHECK:SPACING: No space is necessary after a cast
#340: FILE: mm/slab.c:2302:
+		unsigned long *call_ptr = (unsigned long *) &call_ptr;

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#358: FILE: mm/slab.c:2486:
+static void inline *

CHECK:SPACING: No space is necessary after a cast
#369: FILE: mm/slab.c:2504:
+		unsigned long *call_ptr = (unsigned long *) &call_ptr;

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#399: FILE: mm/slab.c:3563:
+				printk("obj:%p [%p] ", objp, (void *) dbg_userword(cachep, objp)[x]);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#399: FILE: mm/slab.c:3563:
+				printk("obj:%p [%p] ", objp, (void *) dbg_userword(cachep, objp)[x]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#399: FILE: mm/slab.c:3563:
+				printk("obj:%p [%p] ", objp, (void *) dbg_userword(cachep, objp)[x]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#401: FILE: mm/slab.c:3565:
+				printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#406: FILE: mm/slab.c:3570:
+			printk("obj %p/%d: %p", slabp, i, (void *)sym);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#408: FILE: mm/slab.c:3572:
+			printk("\n");

WARNING:PATCH_PREFIX: patch prefix 'mm' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#458: FILE: mm/page_alloc.c:773:
+static inline void set_page_owner(struct page *page,
+			unsigned int order, unsigned int gfp_mask)

CHECK:SPACING: No space is necessary after a cast
#465: FILE: mm/page_alloc.c:776:
+	unsigned long *ptr = (unsigned long *) &ptr;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000154210.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 18 warnings, 27 checks, 363 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000154210.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
