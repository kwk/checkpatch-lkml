WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
To avoid too much memory wastage it adds a new interface alloc_exact/free_exact

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#59: FILE: include/linux/gfp.h:88:
+extern void *alloc_exact(unsigned int size);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#60: FILE: include/linux/gfp.h:89:
+extern void free_exact(void * addr, unsigned int size);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#60: FILE: include/linux/gfp.h:89:
+extern void free_exact(void * addr, unsigned int size);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#73: FILE: include/asm-i386/module.h:10:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#75: FILE: include/asm-i386/module.h:12:
+ * TLB entries. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#77: FILE: include/asm-i386/module.h:14:
+static inline void *module_map(unsigned long size) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#78: FILE: include/asm-i386/module.h:15:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#79: FILE: include/asm-i386/module.h:16:
+^Ivoid *p = alloc_exact(size); $

WARNING:LINE_SPACING: Missing a blank line after declarations
#80: FILE: include/asm-i386/module.h:17:
+	void *p = alloc_exact(size); 
+	if (!p)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#81: FILE: include/asm-i386/module.h:18:
+^I^Ip = vmalloc(size); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#83: FILE: include/asm-i386/module.h:20:
+} $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#85: FILE: include/asm-i386/module.h:22:
+static inline void module_unmap (struct module *mod)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#88: FILE: include/asm-i386/module.h:25:
+	unsigned long mptr = (unsigned long)mod;
+	if (mptr >= VMALLOC_START && mptr+mod->size <= VMALLOC_END)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#88: FILE: include/asm-i386/module.h:25:
+	if (mptr >= VMALLOC_START && mptr+mod->size <= VMALLOC_END)
 	                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#89: FILE: include/asm-i386/module.h:26:
+^I^Ivfree(mod); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#105: FILE: mm/page_alloc.c:467:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: mm/page_alloc.c:467:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#107: FILE: mm/page_alloc.c:469:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#108: FILE: mm/page_alloc.c:470:
+^Istruct page *p, *w; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#109: FILE: mm/page_alloc.c:471:
+^Iint order = get_order(size); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#113: FILE: mm/page_alloc.c:475:
+^I^Istruct page *end = p + (1UL << order); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#114: FILE: mm/page_alloc.c:476:
+^I^Ifor (w = p+1; w < end; ++w) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#114: FILE: mm/page_alloc.c:476:
+		struct page *end = p + (1UL << order); 
+		for (w = p+1; w < end; ++w) 

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#114: FILE: mm/page_alloc.c:476:
+		for (w = p+1; w < end; ++w) 
 		          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#115: FILE: mm/page_alloc.c:477:
+^I^I^Iset_page_count(w, 1); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#116: FILE: mm/page_alloc.c:478:
+^I^Ifor (w = p + (size>>PAGE_SHIFT)+1; w < end; ++w) ^I      $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#116: FILE: mm/page_alloc.c:478:
+^I^Ifor (w = p + (size>>PAGE_SHIFT)+1; w < end; ++w) ^I      $

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#116: FILE: mm/page_alloc.c:478:
+		for (w = p + (size>>PAGE_SHIFT)+1; w < end; ++w) 	      
 		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#116: FILE: mm/page_alloc.c:478:
+		for (w = p + (size>>PAGE_SHIFT)+1; w < end; ++w) 	      
 		                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#117: FILE: mm/page_alloc.c:479:
+^I^I^I__free_pages(w, 0); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#118: FILE: mm/page_alloc.c:480:
+^I^Ireturn (void *) page_address(p); $

CHECK:SPACING: No space is necessary after a cast
#118: FILE: mm/page_alloc.c:480:
+		return (void *) page_address(p); 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#119: FILE: mm/page_alloc.c:481:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#122: FILE: mm/page_alloc.c:484:
+} $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#124: FILE: mm/page_alloc.c:486:
+void free_exact(void * addr, unsigned int size)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#125: FILE: mm/page_alloc.c:487:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#126: FILE: mm/page_alloc.c:488:
+^Istruct page * w; $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#126: FILE: mm/page_alloc.c:488:
+	struct page * w; 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#127: FILE: mm/page_alloc.c:489:
+^Iunsigned long mptr = (unsigned long) addr; $

CHECK:SPACING: No space is necessary after a cast
#127: FILE: mm/page_alloc.c:489:
+	unsigned long mptr = (unsigned long) addr; 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#130: FILE: mm/page_alloc.c:492:
+^Iw = virt_to_page(addr); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#131: FILE: mm/page_alloc.c:493:
+^Ifor (sz = size; sz > 0; sz -= PAGE_SIZE, ++w) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#132: FILE: mm/page_alloc.c:494:
+^I^Iif (atomic_read(&w->count) != 1) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#133: FILE: mm/page_alloc.c:495:
+^I^I^IBUG(); $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#133: FILE: mm/page_alloc.c:495:
+			BUG(); 

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#134: FILE: mm/page_alloc.c:496:
+^I^I__free_pages(w, 0); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: mm/page_alloc.c:497:
+^I} ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#135: FILE: mm/page_alloc.c:497:
+^I} ^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#136: FILE: mm/page_alloc.c:498:
+} $

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#147: FILE: kernel/ksyms.c:101:
+EXPORT_SYMBOL(free_exact);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000429344.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 33 errors, 10 warnings, 8 checks, 86 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000429344.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
