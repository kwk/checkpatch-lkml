WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#55: 
I don't adopt the alternative(), because the macro doesn't fit for the situation

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#79: FILE: include/asm-i386/atomic.h:6:
+#include <asm/processor.h>=0A=

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#95: FILE: include/asm-i386/atomic.h:187:
+ * Atomically adds @i to @v and returns @i + @v=0A=
+ */=0A=

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

ERROR:SPACING: spaces required around that '=' (ctx:CxV)
#95: FILE: include/asm-i386/atomic.h:187:
+ */=0A=
    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#95: FILE: include/asm-i386/atomic.h:187:
+ */=0A=
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#96: FILE: include/asm-i386/atomic.h:188:
+static __inline__ int atomic_add_return(int i, atomic_t *v)=0A=
                                                            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#96: FILE: include/asm-i386/atomic.h:188:
+static __inline__ int atomic_add_return(int i, atomic_t *v)=0A=
                                                               ^

WARNING:INLINE: plain inline is preferred over __inline__
#96: FILE: include/asm-i386/atomic.h:188:
+static __inline__ int atomic_add_return(int i, atomic_t *v)=0A=

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#97: FILE: include/asm-i386/atomic.h:189:
+static __inline__ int atomic_add_return(int i, atomic_t *v)=0A=
+{=0A=

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#97: FILE: include/asm-i386/atomic.h:189:
+{=0A=
  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#97: FILE: include/asm-i386/atomic.h:189:
+{=0A=
     ^

ERROR:SPACING: space required after that ';' (ctx:VxO)
#98: FILE: include/asm-i386/atomic.h:190:
+	int __i;=0A=
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#98: FILE: include/asm-i386/atomic.h:190:
+	int __i;=0A=
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#98: FILE: include/asm-i386/atomic.h:190:
+	int __i;=0A=
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#99: FILE: include/asm-i386/atomic.h:191:
+#ifdef CONFIG_M386=0A=
                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#99: FILE: include/asm-i386/atomic.h:191:
+#ifdef CONFIG_M386=0A=
                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#100: FILE: include/asm-i386/atomic.h:192:
+	if(unlikely(boot_cpu_data.x86=3D=3D3))=0A=
 	                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#100: FILE: include/asm-i386/atomic.h:192:
+	if(unlikely(boot_cpu_data.x86=3D=3D3))=0A=
 	                                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#100: FILE: include/asm-i386/atomic.h:192:
+	if(unlikely(boot_cpu_data.x86=3D=3D3))=0A=
 	                                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#100: FILE: include/asm-i386/atomic.h:192:
+	if(unlikely(boot_cpu_data.x86=3D=3D3))=0A=
 	                                         ^

ERROR:SPACING: space required before the open parenthesis '('
#100: FILE: include/asm-i386/atomic.h:192:
+	if(unlikely(boot_cpu_data.x86=3D=3D3))=0A=

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#100: FILE: include/asm-i386/atomic.h:192:
+	if(unlikely(boot_cpu_data.x86=3D=3D3))=0A=

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#100: FILE: include/asm-i386/atomic.h:192:
+	if(unlikely(boot_cpu_data.x86=3D=3D3))=0A=

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required after that ';' (ctx:VxO)
#101: FILE: include/asm-i386/atomic.h:193:
+		goto no_xadd;=0A=
 		            ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#101: FILE: include/asm-i386/atomic.h:193:
+		goto no_xadd;=0A=
 		             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#101: FILE: include/asm-i386/atomic.h:193:
+		goto no_xadd;=0A=
 		                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#102: FILE: include/asm-i386/atomic.h:194:
+#endif=0A=
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#102: FILE: include/asm-i386/atomic.h:194:
+#endif=0A=
          ^

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#103: FILE: include/asm-i386/atomic.h:195:
+#endif=0A=
+	/* Modern 486+ processor */=0A=

ERROR:SPACING: spaces required around that '=' (ctx:CxV)
#103: FILE: include/asm-i386/atomic.h:195:
+	/* Modern 486+ processor */=0A=
 	                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#103: FILE: include/asm-i386/atomic.h:195:
+	/* Modern 486+ processor */=0A=
 	                              ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#104: FILE: include/asm-i386/atomic.h:196:
+	__i =3D i;=0A=
 	    ^

ERROR:SPACING: space required after that ';' (ctx:VxO)
#104: FILE: include/asm-i386/atomic.h:196:
+	__i =3D i;=0A=
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#104: FILE: include/asm-i386/atomic.h:196:
+	__i =3D i;=0A=
 	          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#104: FILE: include/asm-i386/atomic.h:196:
+	__i =3D i;=0A=
 	             ^

ERROR:SPACING: spaces required around that '=' (ctx:BxV)
#105: FILE: include/asm-i386/atomic.h:197:
+	__asm__ __volatile__(=0A=
 	                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#105: FILE: include/asm-i386/atomic.h:197:
+	__asm__ __volatile__(=0A=
 	                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#106: FILE: include/asm-i386/atomic.h:198:
+		LOCK "xaddl %0, %1;"=0A=
 		                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#106: FILE: include/asm-i386/atomic.h:198:
+		LOCK "xaddl %0, %1;"=0A=
 		                       ^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#107: FILE: include/asm-i386/atomic.h:199:
+		:"=3Dr"(i)=0A=
 		^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#107: FILE: include/asm-i386/atomic.h:199:
+		:"=3Dr"(i)=0A=
 		          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#107: FILE: include/asm-i386/atomic.h:199:
+		:"=3Dr"(i)=0A=
 		             ^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#108: FILE: include/asm-i386/atomic.h:200:
+		:"m"(v->counter), "0"(i));=0A=
 		^

ERROR:SPACING: space required after that ';' (ctx:VxO)
#108: FILE: include/asm-i386/atomic.h:200:
+		:"m"(v->counter), "0"(i));=0A=
 		                         ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#108: FILE: include/asm-i386/atomic.h:200:
+		:"m"(v->counter), "0"(i));=0A=
 		                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#108: FILE: include/asm-i386/atomic.h:200:
+		:"m"(v->counter), "0"(i));=0A=
 		                             ^

ERROR:SPACING: space required after that ';' (ctx:VxO)
#109: FILE: include/asm-i386/atomic.h:201:
+	return i + __i;=0A=
 	              ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#109: FILE: include/asm-i386/atomic.h:201:
+	return i + __i;=0A=
 	               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#109: FILE: include/asm-i386/atomic.h:201:
+	return i + __i;=0A=
 	                  ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#110: FILE: include/asm-i386/atomic.h:202:
+=0A=
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#110: FILE: include/asm-i386/atomic.h:202:
+=0A=
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#111: FILE: include/asm-i386/atomic.h:203:
+#ifdef CONFIG_M386=0A=
                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#111: FILE: include/asm-i386/atomic.h:203:
+#ifdef CONFIG_M386=0A=
                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#112: FILE: include/asm-i386/atomic.h:204:
+no_xadd: /* Legacy 386 processor */=0A=
        ^

ERROR:SPACING: spaces required around that '=' (ctx:CxV)
#112: FILE: include/asm-i386/atomic.h:204:
+no_xadd: /* Legacy 386 processor */=0A=
                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#112: FILE: include/asm-i386/atomic.h:204:
+no_xadd: /* Legacy 386 processor */=0A=
                                       ^

ERROR:SPACING: space required after that ';' (ctx:VxO)
#113: FILE: include/asm-i386/atomic.h:205:
+	local_irq_disable();=0A=
 	                   ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#113: FILE: include/asm-i386/atomic.h:205:
+	local_irq_disable();=0A=
 	                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#113: FILE: include/asm-i386/atomic.h:205:
+	local_irq_disable();=0A=
 	                       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#114: FILE: include/asm-i386/atomic.h:206:
+	__i =3D atomic_read(v);=0A=
 	    ^

ERROR:SPACING: space required after that ';' (ctx:VxO)
#114: FILE: include/asm-i386/atomic.h:206:
+	__i =3D atomic_read(v);=0A=
 	                      ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#114: FILE: include/asm-i386/atomic.h:206:
+	__i =3D atomic_read(v);=0A=
 	                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#114: FILE: include/asm-i386/atomic.h:206:
+	__i =3D atomic_read(v);=0A=
 	                          ^

ERROR:SPACING: space required after that ';' (ctx:VxO)
#115: FILE: include/asm-i386/atomic.h:207:
+	atomic_set(v, i + __i);=0A=
 	                      ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#115: FILE: include/asm-i386/atomic.h:207:
+	atomic_set(v, i + __i);=0A=
 	                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#115: FILE: include/asm-i386/atomic.h:207:
+	atomic_set(v, i + __i);=0A=
 	                          ^

ERROR:SPACING: space required after that ';' (ctx:VxO)
#116: FILE: include/asm-i386/atomic.h:208:
+	local_irq_enable();=0A=
 	                  ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#116: FILE: include/asm-i386/atomic.h:208:
+	local_irq_enable();=0A=
 	                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#116: FILE: include/asm-i386/atomic.h:208:
+	local_irq_enable();=0A=
 	                      ^

ERROR:SPACING: space required after that ';' (ctx:VxO)
#117: FILE: include/asm-i386/atomic.h:209:
+	return i + __i;=0A=
 	              ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#117: FILE: include/asm-i386/atomic.h:209:
+	return i + __i;=0A=
 	               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#117: FILE: include/asm-i386/atomic.h:209:
+	return i + __i;=0A=
 	                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#118: FILE: include/asm-i386/atomic.h:210:
+#endif=0A=
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#118: FILE: include/asm-i386/atomic.h:210:
+#endif=0A=
          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#119: FILE: include/asm-i386/atomic.h:211:
+}=0A=
  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#119: FILE: include/asm-i386/atomic.h:211:
+}=0A=
     ^

ERROR:SPACING: space required after that close brace '}'
#119: FILE: include/asm-i386/atomic.h:211:
+}=0A=

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#120: FILE: include/asm-i386/atomic.h:212:
+=0A=
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#120: FILE: include/asm-i386/atomic.h:212:
+=0A=
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#121: FILE: include/asm-i386/atomic.h:213:
+static __inline__ int atomic_sub_return(int i, atomic_t *v)=0A=
                                                            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#121: FILE: include/asm-i386/atomic.h:213:
+static __inline__ int atomic_sub_return(int i, atomic_t *v)=0A=
                                                               ^

WARNING:INLINE: plain inline is preferred over __inline__
#121: FILE: include/asm-i386/atomic.h:213:
+static __inline__ int atomic_sub_return(int i, atomic_t *v)=0A=

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#122: FILE: include/asm-i386/atomic.h:214:
+static __inline__ int atomic_sub_return(int i, atomic_t *v)=0A=
+{=0A=

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#122: FILE: include/asm-i386/atomic.h:214:
+{=0A=
  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#122: FILE: include/asm-i386/atomic.h:214:
+{=0A=
     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#123: FILE: include/asm-i386/atomic.h:215:
+	return atomic_add_return(-i,v);=0A=
 	                           ^

ERROR:SPACING: space required after that ';' (ctx:VxO)
#123: FILE: include/asm-i386/atomic.h:215:
+	return atomic_add_return(-i,v);=0A=
 	                              ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#123: FILE: include/asm-i386/atomic.h:215:
+	return atomic_add_return(-i,v);=0A=
 	                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#123: FILE: include/asm-i386/atomic.h:215:
+	return atomic_add_return(-i,v);=0A=
 	                                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#124: FILE: include/asm-i386/atomic.h:216:
+}=0A=
  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#124: FILE: include/asm-i386/atomic.h:216:
+}=0A=
     ^

ERROR:SPACING: space required after that close brace '}'
#124: FILE: include/asm-i386/atomic.h:216:
+}=0A=

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#125: FILE: include/asm-i386/atomic.h:217:
+=0A=
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#125: FILE: include/asm-i386/atomic.h:217:
+=0A=
    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#126: FILE: include/asm-i386/atomic.h:218:
+#define atomic_inc_return(v)  (atomic_add_return(1,v))=0A=
                                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#126: FILE: include/asm-i386/atomic.h:218:
+#define atomic_inc_return(v)  (atomic_add_return(1,v))=0A=
                                                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#126: FILE: include/asm-i386/atomic.h:218:
+#define atomic_inc_return(v)  (atomic_add_return(1,v))=0A=
                                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#126: FILE: include/asm-i386/atomic.h:218:
+#define atomic_inc_return(v)  (atomic_add_return(1,v))=0A=

ERROR:SPACING: space required after that ',' (ctx:VxV)
#127: FILE: include/asm-i386/atomic.h:219:
+#define atomic_dec_return(v)  (atomic_sub_return(1,v))=0A=
                                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#127: FILE: include/asm-i386/atomic.h:219:
+#define atomic_dec_return(v)  (atomic_sub_return(1,v))=0A=
                                                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#127: FILE: include/asm-i386/atomic.h:219:
+#define atomic_dec_return(v)  (atomic_sub_return(1,v))=0A=
                                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#127: FILE: include/asm-i386/atomic.h:219:
+#define atomic_dec_return(v)  (atomic_sub_return(1,v))=0A=

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#128: FILE: include/asm-i386/atomic.h:220:
+=0A=
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#128: FILE: include/asm-i386/atomic.h:220:
+=0A=
    ^

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#148: FILE: include/asm-x86_64/atomic.h:187:
+ * Atomically adds @i to @v and returns @i + @v=0A=
+ */=0A=

ERROR:SPACING: spaces required around that '=' (ctx:CxV)
#148: FILE: include/asm-x86_64/atomic.h:187:
+ */=0A=
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#148: FILE: include/asm-x86_64/atomic.h:187:
+ */=0A=
       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#149: FILE: include/asm-x86_64/atomic.h:188:
+static __inline__ int atomic_add_return(int i, atomic_t *v)=0A=
                                                            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#149: FILE: include/asm-x86_64/atomic.h:188:
+static __inline__ int atomic_add_return(int i, atomic_t *v)=0A=
                                                               ^

WARNING:INLINE: plain inline is preferred over __inline__
#149: FILE: include/asm-x86_64/atomic.h:188:
+static __inline__ int atomic_add_return(int i, atomic_t *v)=0A=

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#150: FILE: include/asm-x86_64/atomic.h:189:
+static __inline__ int atomic_add_return(int i, atomic_t *v)=0A=
+{=0A=

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#150: FILE: include/asm-x86_64/atomic.h:189:
+{=0A=
  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#150: FILE: include/asm-x86_64/atomic.h:189:
+{=0A=
     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#151: FILE: include/asm-x86_64/atomic.h:190:
+	int __i =3D i;=0A=
 	        ^

ERROR:SPACING: space required after that ';' (ctx:VxO)
#151: FILE: include/asm-x86_64/atomic.h:190:
+	int __i =3D i;=0A=
 	             ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#151: FILE: include/asm-x86_64/atomic.h:190:
+	int __i =3D i;=0A=
 	              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#151: FILE: include/asm-x86_64/atomic.h:190:
+	int __i =3D i;=0A=
 	                 ^

ERROR:SPACING: spaces required around that '=' (ctx:BxV)
#152: FILE: include/asm-x86_64/atomic.h:191:
+	__asm__ __volatile__(=0A=
 	                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#152: FILE: include/asm-x86_64/atomic.h:191:
+	__asm__ __volatile__(=0A=
 	                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#153: FILE: include/asm-x86_64/atomic.h:192:
+		LOCK "xaddl %0, %1;"=0A=
 		                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#153: FILE: include/asm-x86_64/atomic.h:192:
+		LOCK "xaddl %0, %1;"=0A=
 		                       ^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#154: FILE: include/asm-x86_64/atomic.h:193:
+		:"=3Dr"(i)=0A=
 		^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#154: FILE: include/asm-x86_64/atomic.h:193:
+		:"=3Dr"(i)=0A=
 		          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#154: FILE: include/asm-x86_64/atomic.h:193:
+		:"=3Dr"(i)=0A=
 		             ^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#155: FILE: include/asm-x86_64/atomic.h:194:
+		:"m"(v->counter), "0"(i));=0A=
 		^

ERROR:SPACING: space required after that ';' (ctx:VxO)
#155: FILE: include/asm-x86_64/atomic.h:194:
+		:"m"(v->counter), "0"(i));=0A=
 		                         ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#155: FILE: include/asm-x86_64/atomic.h:194:
+		:"m"(v->counter), "0"(i));=0A=
 		                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#155: FILE: include/asm-x86_64/atomic.h:194:
+		:"m"(v->counter), "0"(i));=0A=
 		                             ^

ERROR:SPACING: space required after that ';' (ctx:VxO)
#156: FILE: include/asm-x86_64/atomic.h:195:
+	return i + __i;=0A=
 	              ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#156: FILE: include/asm-x86_64/atomic.h:195:
+	return i + __i;=0A=
 	               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#156: FILE: include/asm-x86_64/atomic.h:195:
+	return i + __i;=0A=
 	                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#157: FILE: include/asm-x86_64/atomic.h:196:
+}=0A=
  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#157: FILE: include/asm-x86_64/atomic.h:196:
+}=0A=
     ^

ERROR:SPACING: space required after that close brace '}'
#157: FILE: include/asm-x86_64/atomic.h:196:
+}=0A=

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#158: FILE: include/asm-x86_64/atomic.h:197:
+=0A=
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#158: FILE: include/asm-x86_64/atomic.h:197:
+=0A=
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#159: FILE: include/asm-x86_64/atomic.h:198:
+static __inline__ int atomic_sub_return(int i, atomic_t *v)=0A=
                                                            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#159: FILE: include/asm-x86_64/atomic.h:198:
+static __inline__ int atomic_sub_return(int i, atomic_t *v)=0A=
                                                               ^

WARNING:INLINE: plain inline is preferred over __inline__
#159: FILE: include/asm-x86_64/atomic.h:198:
+static __inline__ int atomic_sub_return(int i, atomic_t *v)=0A=

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#160: FILE: include/asm-x86_64/atomic.h:199:
+static __inline__ int atomic_sub_return(int i, atomic_t *v)=0A=
+{=0A=

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#160: FILE: include/asm-x86_64/atomic.h:199:
+{=0A=
  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#160: FILE: include/asm-x86_64/atomic.h:199:
+{=0A=
     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#161: FILE: include/asm-x86_64/atomic.h:200:
+	return atomic_add_return(-i,v);=0A=
 	                           ^

ERROR:SPACING: space required after that ';' (ctx:VxO)
#161: FILE: include/asm-x86_64/atomic.h:200:
+	return atomic_add_return(-i,v);=0A=
 	                              ^

ERROR:SPACING: spaces required around that '=' (ctx:OxV)
#161: FILE: include/asm-x86_64/atomic.h:200:
+	return atomic_add_return(-i,v);=0A=
 	                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#161: FILE: include/asm-x86_64/atomic.h:200:
+	return atomic_add_return(-i,v);=0A=
 	                                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#162: FILE: include/asm-x86_64/atomic.h:201:
+}=0A=
  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#162: FILE: include/asm-x86_64/atomic.h:201:
+}=0A=
     ^

ERROR:SPACING: space required after that close brace '}'
#162: FILE: include/asm-x86_64/atomic.h:201:
+}=0A=

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#163: FILE: include/asm-x86_64/atomic.h:202:
+=0A=
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#163: FILE: include/asm-x86_64/atomic.h:202:
+=0A=
    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#164: FILE: include/asm-x86_64/atomic.h:203:
+#define atomic_inc_return(v)  (atomic_add_return(1,v))=0A=
                                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#164: FILE: include/asm-x86_64/atomic.h:203:
+#define atomic_inc_return(v)  (atomic_add_return(1,v))=0A=
                                                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#164: FILE: include/asm-x86_64/atomic.h:203:
+#define atomic_inc_return(v)  (atomic_add_return(1,v))=0A=
                                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#164: FILE: include/asm-x86_64/atomic.h:203:
+#define atomic_inc_return(v)  (atomic_add_return(1,v))=0A=

ERROR:SPACING: space required after that ',' (ctx:VxV)
#165: FILE: include/asm-x86_64/atomic.h:204:
+#define atomic_dec_return(v)  (atomic_sub_return(1,v))=0A=
                                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#165: FILE: include/asm-x86_64/atomic.h:204:
+#define atomic_dec_return(v)  (atomic_sub_return(1,v))=0A=
                                                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#165: FILE: include/asm-x86_64/atomic.h:204:
+#define atomic_dec_return(v)  (atomic_sub_return(1,v))=0A=
                                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#165: FILE: include/asm-x86_64/atomic.h:204:
+#define atomic_dec_return(v)  (atomic_sub_return(1,v))=0A=

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#166: FILE: include/asm-x86_64/atomic.h:205:
+=0A=
 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#166: FILE: include/asm-x86_64/atomic.h:205:
+=0A=
    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#180: FILE: include/asm-arm/atomic.h:198:
+#define atomic_inc_return(v)    (atomic_add_return(1, v))=0A=
                                                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#180: FILE: include/asm-arm/atomic.h:198:
+#define atomic_inc_return(v)    (atomic_add_return(1, v))=0A=
                                                             ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#180: FILE: include/asm-arm/atomic.h:198:
+#define atomic_inc_return(v)    (atomic_add_return(1, v))=0A=

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#181: FILE: include/asm-arm/atomic.h:199:
+#define atomic_dec_return(v)    (atomic_sub_return(1, v))=0A=
                                                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#181: FILE: include/asm-arm/atomic.h:199:
+#define atomic_dec_return(v)    (atomic_sub_return(1, v))=0A=
                                                             ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#181: FILE: include/asm-arm/atomic.h:199:
+#define atomic_dec_return(v)    (atomic_sub_return(1, v))=0A=

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000254507.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 158 errors, 6 warnings, 3 checks, 101 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000254507.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
