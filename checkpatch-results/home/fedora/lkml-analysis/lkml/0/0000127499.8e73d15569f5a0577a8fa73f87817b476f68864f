ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#102: FILE: tmp/drivers/scsi/libata-core.c:94:
+void ata_acpi_notify(acpi_handle device, u32 type, void *data) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host>
#104: FILE: tmp/drivers/scsi/libata-core.c:96:
+	struct Scsi_Host *shost =  dev_to_shost(dev);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: No space is necessary after a cast
#105: FILE: tmp/drivers/scsi/libata-core.c:97:
+	struct ata_port *ap = (struct ata_port *) &shost->hostdata[0];

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#106: FILE: tmp/drivers/scsi/libata-core.c:98:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#143: FILE: tmp/drivers/scsi/scsi.c:1321:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#144: FILE: tmp/drivers/scsi/scsi.c:1322:
+	if (sscanf(dev->bus_id, "host%u", &i) != 1) {
+		return -ENODEV;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#148: FILE: tmp/drivers/scsi/scsi.c:1326:
+^I*handle = acpi_get_child(DEVICE_ACPI_HANDLE(dev->parent), (acpi_integer) i);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#153: FILE: tmp/drivers/scsi/scsi.c:1331:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#154: FILE: tmp/drivers/scsi/scsi.c:1332:
+^Iif (shost->hostt->acpi_notify) { $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#154: FILE: tmp/drivers/scsi/scsi.c:1332:
+	if (shost->hostt->acpi_notify) { 
+		acpi_install_notify_handler(*handle, ACPI_ALL_NOTIFY, &ata_acpi_notify, (void *)i);
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#157: FILE: tmp/drivers/scsi/scsi.c:1335:
+^I$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#205: FILE: tmp/include/linux/libata.h:472:
+extern void ata_acpi_notify(acpi_handle device, u32 type, void *data);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#217: FILE: tmp/include/linux/libata.h:466:
+extern void ata_hotplug_unplug(struct ata_port *ap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#218: FILE: tmp/include/linux/libata.h:467:
+extern void ata_hotplug_plug(struct ata_port *ap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#226: FILE: tmp/include/linux/libata.h:474:
+extern void ata_acpi_notify(acpi_handle device, u32 type, void *data);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#246: FILE: tmp/include/scsi/scsi_host.h:304:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#251: FILE: tmp/include/scsi/scsi_host.h:309:
+^Ivoid (*acpi_notify)(acpi_handle device, u32 type, void *data); $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000127499.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 2 warnings, 6 checks, 163 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000127499.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
