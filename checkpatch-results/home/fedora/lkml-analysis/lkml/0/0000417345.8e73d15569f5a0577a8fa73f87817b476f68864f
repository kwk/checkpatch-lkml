WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#75: 
diff -Nru linux-2.5.45.vanilla/drivers/char/eventpoll.c linux-2.5.45.epoll/drivers/char/eventpoll.c

WARNING:TYPO_SPELLING: 'usefull' may be misspelled - perhaps 'useful'?
#127: FILE: drivers/char/eventpoll.c:88:
+ * This is usefull for us because we can test if the item is linked
            ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#131: FILE: drivers/char/eventpoll.c:91:
+#define EP_LIST_DEL(p) do { list_del(p); INIT_LIST_HEAD(p); } while (0)

CHECK:SPACING: No space is necessary after a cast
#137: FILE: drivers/char/eventpoll.c:97:
+#define EP_ITEM_FROM_WAIT(p) ((struct epitem *) container_of(p, struct eppoll_entry, wait)->base)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#139: FILE: drivers/char/eventpoll.c:99:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#141: FILE: drivers/char/eventpoll.c:101:
+
+

WARNING:TYPO_SPELLING: 'trasfer' may be misspelled - perhaps 'transfer'?
#218: FILE: drivers/char/eventpoll.c:143:
+	/* Page used to trasfer events to user space */
 	                ^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#297: FILE: drivers/char/eventpoll.c:205:
+static int ep_poll_callback(wait_queue_t *wait, unsigned mode, int sync);

WARNING:TYPO_SPELLING: 'togheter' may be misspelled - perhaps 'together'?
#318: FILE: drivers/char/eventpoll.c:217:
+/* Use to link togheter all the "struct eventpoll" */
                ^^^^^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#370: FILE: drivers/char/eventpoll.c:263:
+		if ((dpi = ep_find(ep, file))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#378: FILE: drivers/char/eventpoll.c:271:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#506: FILE: drivers/char/eventpoll.c:378:
+		if (!dpi) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#512: FILE: drivers/char/eventpoll.c:384:
+		} else

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sys_epoll_wait', this function's name, in a string
#554: FILE: drivers/char/eventpoll.c:434:
+	DNPRINTK(3, (KERN_INFO "[%p] eventpoll: sys_epoll_wait(%d, %p, %d, %d)\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#558: FILE: drivers/char/eventpoll.c:438:
+	if ((error = verify_area(VERIFY_WRITE, events, maxevents * sizeof(struct pollfd))))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#632: FILE: drivers/char/eventpoll.c:591:
+	if (!(ep = kmalloc(sizeof(struct eventpoll), GFP_KERNEL)))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ep)...) over kmalloc(sizeof(struct eventpoll)...)
#632: FILE: drivers/char/eventpoll.c:591:
+	if (!(ep = kmalloc(sizeof(struct eventpoll), GFP_KERNEL)))

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ep_file_init', this function's name, in a string
#650: FILE: drivers/char/eventpoll.c:609:
+	DNPRINTK(3, (KERN_INFO "[%p] eventpoll: ep_file_init() ep=%p\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#655: FILE: drivers/char/eventpoll.c:614:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#658: FILE: drivers/char/eventpoll.c:617:
+{
+

CHECK:SPACING: No space is necessary after a cast
#659: FILE: drivers/char/eventpoll.c:618:
+	return (int) ((((unsigned long) file) / sizeof(struct file)) % ep->hsize);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#662: FILE: drivers/char/eventpoll.c:621:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#665: FILE: drivers/char/eventpoll.c:624:
+{
+

CHECK:SPACING: No space is necessary after a cast
#666: FILE: drivers/char/eventpoll.c:625:
+	return (struct list_head *) (ep->hpages[index / EP_HENTRY_X_PAGE] +

CHECK:LINE_SPACING: Please don't use multiple blank lines
#670: FILE: drivers/char/eventpoll.c:629:
+
+

CHECK:SPACING: No space is necessary after a cast
#694: FILE: drivers/char/eventpoll.c:641:
+	ep->eventpage = (char *) __get_free_pages(GFP_KERNEL, 0);

CHECK:SPACING: No space is necessary after a cast
#713: FILE: drivers/char/eventpoll.c:658:
+	free_pages((unsigned long) ep->eventpage, 0);

CHECK:SPACING: No space is necessary after a cast
#764: FILE: drivers/char/eventpoll.c:692:
+	free_pages((unsigned long) ep->eventpage, 0);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ep_find', this function's name, in a string
#799: FILE: drivers/char/eventpoll.c:717:
+	DNPRINTK(3, (KERN_INFO "[%p] eventpoll: ep_find(%p) -> %p\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ep_unlink', this function's name, in a string
#1039: FILE: drivers/char/eventpoll.c:848:
+	DNPRINTK(3, (KERN_INFO "[%p] eventpoll: ep_unlink(%p, %d)\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ep_remove', this function's name, in a string
#1076: FILE: drivers/char/eventpoll.c:868:
+	DNPRINTK(3, (KERN_INFO "[%p] eventpoll: ep_remove(%p, %d)\n",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1121: FILE: drivers/char/eventpoll.c:880:
+static int ep_poll_callback(wait_queue_t *wait, unsigned mode, int sync)

CHECK:SPACING: No space is necessary after a cast
#1201: FILE: drivers/char/eventpoll.c:945:
+	struct pollfd *pgevents = (struct pollfd *) ep->eventpage;

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1325: FILE: drivers/char/eventpoll.c:1020:
+			MAX_SCHEDULE_TIMEOUT: (timeout * HZ) / 1000;
 			                    ^

WARNING:INDENTED_LABEL: labels should not be indented
#1325: FILE: drivers/char/eventpoll.c:1020:
+			MAX_SCHEDULE_TIMEOUT: (timeout * HZ) / 1000;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#2176: FILE: include/linux/poll.h:18:
+	void (*qproc)(void *, wait_queue_head_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'wait_queue_head_t *' should also have an identifier name
#2176: FILE: include/linux/poll.h:18:
+	void (*qproc)(void *, wait_queue_head_t *);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2191: FILE: include/linux/poll.h:40:
+static inline void poll_initwait_ex(poll_table* pt, int queue,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000417345.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 14 warnings, 19 checks, 1859 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000417345.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
