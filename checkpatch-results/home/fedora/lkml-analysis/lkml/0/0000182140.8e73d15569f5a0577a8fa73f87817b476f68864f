WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#38: FILE: security/ima/ima.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#46: FILE: security/ima/ima.h:9:
+ * LSM IBM Integrity Measurement Architecture.^I  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#64: FILE: security/ima/ima.h:27:
+	printk(level "ima (%s): " format ,__func__, ## arg)

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#64: FILE: security/ima/ima.h:27:
+	printk(level "ima (%s): " format ,__func__, ## arg)
 	                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:WxV)
#64: FILE: security/ima/ima.h:27:
+	printk(level "ima (%s): " format ,__func__, ## arg)
 	                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#65: FILE: security/ima/ima.h:28:
+       $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#65: FILE: security/ima/ima.h:28:
+       $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#79: FILE: security/ima/ima.h:42:
+ * our inode_permission hook being called (nfs, remote fs) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#83: FILE: security/ima/ima.h:46:
+/* file systems we won't measure
+   (invalidate TPM PCR when executing one of these) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#83: FILE: security/ima/ima.h:46:
+   (invalidate TPM PCR when executing one of these) */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#88: FILE: security/ima/ima.h:51:
+/* $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#94: FILE: security/ima/ima.h:57:
+#define MMAP_MEASURE_FLAG ^I0x01$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#95: FILE: security/ima/ima.h:58:
+#define MODULE_MEASURE_FLAG ^I0x02$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#96: FILE: security/ima/ima.h:59:
+#define USER_MEASURE_FLAG ^I0x04$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sha_value' - possible side-effects?
#106: FILE: security/ima/ima.h:69:
+#define SHA_KEY(sha_value) (((sha_value)[18] << 8 | (sha_value)[19]) % MEASURE_HTABLE_SIZE)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#107: FILE: security/ima/ima.h:70:
+typedef enum { CLEAN, DIRTY, CHANGED } ima_entry_flags;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#125: FILE: security/ima/ima.h:88:
+ * if stacking were to be implemented, this would be the place */

CHECK:SPACING: No space is necessary after a cast
#127: FILE: security/ima/ima.h:90:
+	((struct ima_inode *) ((inode)->i_security))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#129: FILE: security/ima/ima.h:92:
+#define ima_store_inode_security(inode,sec_struct) \
                                       ^

CHECK:SPACING: No space is necessary after a cast
#133: FILE: security/ima/ima.h:96:
+	((struct ima_file *) ((file)->f_security))

CHECK:CAMELCASE: Avoid CamelCase: <inodeNr>
#141: FILE: security/ima/ima.h:104:
+	unsigned long inodeNr;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <devId>
#142: FILE: security/ima/ima.h:105:
+	dev_t devId;

CHECK:CAMELCASE: Avoid CamelCase: <fileName>
#145: FILE: security/ima/ima.h:108:
+	char fileName[51];	/* max first 50 characters of name + \0 */

CHECK:CAMELCASE: Avoid CamelCase: <fsMagic>
#146: FILE: security/ima/ima.h:109:
+	unsigned long fsMagic;	/* file system magic (distinuish local/remote files) */

CHECK:CAMELCASE: Avoid CamelCase: <superBlock>
#147: FILE: security/ima/ima.h:110:
+	struct super_block *superBlock;	/* super block link (for umount-dirty flagging) */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#165: FILE: security/ima/ima.h:128:
+/* hash table to keep fast access to past measurements $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#166: FILE: security/ima/ima.h:129:
+ * uses one global lock for now (read/write) */

CHECK:CAMELCASE: Avoid CamelCase: <cleanInodeHits>
#172: FILE: security/ima/ima.h:135:
+	atomic_t cleanInodeHits; /* times we find an inode clean when measuring */

CHECK:CAMELCASE: Avoid CamelCase: <cleanTableHits>
#173: FILE: security/ima/ima.h:136:
+	atomic_t cleanTableHits; /* times we find a clean htable hit */

CHECK:CAMELCASE: Avoid CamelCase: <dirtyTableHits>
#174: FILE: security/ima/ima.h:137:
+	atomic_t dirtyTableHits; /* times we find a dirty htable hit */

CHECK:CAMELCASE: Avoid CamelCase: <changedFiles>
#175: FILE: security/ima/ima.h:138:
+	atomic_t changedFiles;	 /* times we realize a dirty marked entry really changed */

CHECK:CAMELCASE: Avoid CamelCase: <queueLen>
#179: FILE: security/ima/ima.h:142:
+	atomic_t queueLen[MEASURE_HTABLE_SIZE];

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#180: FILE: security/ima/ima.h:143:
+	spinlock_t lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#189: FILE: security/ima/ima.h:152:
+	spinlock_t lock;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#242: FILE: security/ima/ima.h:205:
+extern ssize_t tpm_transmit(struct tpm_chip *chip, const char *buf, size_t bufsiz);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#244: FILE: security/ima/ima.h:207:
+extern struct tpm_chip *tpm_chip_lookup(int chip_num);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#269: FILE: security/ima/ima_init.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#280: FILE: security/ima/ima_init.c:12:
+ * LSM IBM Integrity Measurement Architecture.^I  $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#297: FILE: security/ima/ima_init.c:29:
+#include <asm/uaccess.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#318: FILE: security/ima/ima_init.c:50:
+void create_htable(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#319: FILE: security/ima/ima_init.c:51:
+void destroy_htable(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#320: FILE: security/ima/ima_init.c:52:
+void create_sha_htable(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#321: FILE: security/ima/ima_init.c:53:
+void ima_proc_init(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#322: FILE: security/ima/ima_init.c:54:
+void ima_sysfs_init(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#323: FILE: security/ima/ima_init.c:55:
+void ima_sysfs_remove(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#324: FILE: security/ima/ima_init.c:56:
+void ima_add_boot_aggregate(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#325: FILE: security/ima/ima_init.c:57:
+void ima_lsm_init(void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#326: FILE: security/ima/ima_init.c:58:
+void tpm_extend(int index, const u8 * digest);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#326: FILE: security/ima/ima_init.c:58:
+void tpm_extend(int index, const u8 * digest);

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#328: FILE: security/ima/ima_init.c:60:
+int ima_enabled = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#333: FILE: security/ima/ima_init.c:65:
+	ima_enabled = simple_strtol(str, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#337: FILE: security/ima/ima_init.c:69:
+__setup("ima=", ima_enabled_setup);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#339: FILE: security/ima/ima_init.c:71:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#357: FILE: security/ima/ima_init.c:89:
+^Iprintk(KERN_INFO "IBM Integrity Measurement Architecture (IBM IMA %s).\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#357: FILE: security/ima/ima_init.c:89:
+	printk(KERN_INFO "IBM Integrity Measurement Architecture (IBM IMA %s).\n", 

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#366: FILE: security/ima/ima_init.c:98:
+			printk(KERN_INFO "    IMA (not enabled in kernel command line) aborting!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#369: FILE: security/ima/ima_init.c:101:
+		printk(KERN_INFO "    IMA (test mode)\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ima_used_chip"
#372: FILE: security/ima/ima_init.c:104:
+	if (ima_used_chip == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#374: FILE: security/ima/ima_init.c:106:
+			printk(KERN_INFO "    IMA (TPM/BYPASS - no TPM chip found)\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#380: FILE: security/ima/ima_init.c:112:
+	if ((tfm = crypto_alloc_tfm("sha1", 0)) == NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#382: FILE: security/ima/ima_init.c:114:
+			printk(KERN_INFO "    IMA (SHA-1/no support) aborting!\n");

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#385: FILE: security/ima/ima_init.c:117:
+			return -EFAULT;
+		} else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#398: FILE: security/ima/ima_init.c:130:
+			printk(KERN_INFO "    IMA (LSM/not free) aborting!\n");

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#400: FILE: security/ima/ima_init.c:132:
+			return -EFAULT;
+		} else {

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#422: FILE: security/ima/ima_init.c:154:
+__initcall(measure_init);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#425: FILE: security/ima/ima_init.c:157:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#429: FILE: security/ima/ima_init.c:161:
+    ("Run-time LSM-based IBM Integrity Measurement Architecture");$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#434: FILE: security/ima/ima_lsmhooks.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#442: FILE: security/ima/ima_lsmhooks.c:9:
+ * LSM IBM Integrity Measurement Architecture.^I^I  $

WARNING:REPEATED_WORD: Possible repeated word: 'into'
#451: FILE: security/ima/ima_lsmhooks.c:18:
+ *             implements Linux Security Modules hooks that call into
+ *             into the measurement functions

ERROR:TRAILING_WHITESPACE: trailing whitespace
#470: FILE: security/ima/ima_lsmhooks.c:37:
+/* if set, then hooks do nothing $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#471: FILE: security/ima/ima_lsmhooks.c:38:
+ * (controls non-lsm module hook as well) */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#477: FILE: security/ima/ima_lsmhooks.c:44:
+int measure_file_exec(struct file *, const struct measure_request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#477: FILE: security/ima/ima_lsmhooks.c:44:
+int measure_file_exec(struct file *, const struct measure_request *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct measure_request *' should also have an identifier name
#477: FILE: security/ima/ima_lsmhooks.c:44:
+int measure_file_exec(struct file *, const struct measure_request *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#478: FILE: security/ima/ima_lsmhooks.c:45:
+int measure_dirty_flag_inode(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#478: FILE: security/ima/ima_lsmhooks.c:45:
+int measure_dirty_flag_inode(struct inode *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#479: FILE: security/ima/ima_lsmhooks.c:46:
+int measure_dirty_flag_super(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#479: FILE: security/ima/ima_lsmhooks.c:46:
+int measure_dirty_flag_super(struct super_block *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#485: FILE: security/ima/ima_lsmhooks.c:52:
+^I^I.fd = 0, .label = 0, $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#508: FILE: security/ima/ima_lsmhooks.c:75:
+int ima_inode_permission(struct inode *inode, int mask, struct nameidata *nd)
                                                                           ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'major == MEMORY_MAJOR'
#523: FILE: security/ima/ima_lsmhooks.c:90:
+	if ((major == MEMORY_MAJOR) && S_ISCHR(inode->i_mode)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'minor == KMEM_MINOR'
#524: FILE: security/ima/ima_lsmhooks.c:91:
+		if (kmem_bypass_protection && (minor == KMEM_MINOR)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'minor == MEM_MINOR'
#529: FILE: security/ima/ima_lsmhooks.c:96:
+		if (mem_bypass_protection && (minor == MEM_MINOR)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#529: FILE: security/ima/ima_lsmhooks.c:96:
+		if (mem_bypass_protection && (minor == MEM_MINOR)) {
+			invalidate_pcr("/dev/mmem write violation");
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#533: FILE: security/ima/ima_lsmhooks.c:100:
+	} else if (ram_bypass_protection && (major == RAMDISK_MAJOR)
+		   && S_ISBLK(inode->i_mode)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#536: FILE: security/ima/ima_lsmhooks.c:103:
+	} else if (hd_sd_bypass_protection && (major == HD_MAJOR)
+		   && S_ISBLK(inode->i_mode)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#539: FILE: security/ima/ima_lsmhooks.c:106:
+	} else if (hd_sd_bypass_protection && (major == SD_MAJOR)
+		   && S_ISBLK(inode->i_mode)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#545: FILE: security/ima/ima_lsmhooks.c:112:
+^Iif (i_security == NULL) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!i_security"
#545: FILE: security/ima/ima_lsmhooks.c:112:
+	if (i_security == NULL) 

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around i_security->measure_count
#555: FILE: security/ima/ima_lsmhooks.c:122:
+	if (atomic_read(&(i_security->measure_count))) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#556: FILE: security/ima/ima_lsmhooks.c:123:
+^I^I/* write permission on measured file was granted! $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#557: FILE: security/ima/ima_lsmhooks.c:124:
+^I^I * should never occur to file_mmap-ed files but $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#558: FILE: security/ima/ima_lsmhooks.c:125:
+		 * only to instrumented measures from user space */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#560: FILE: security/ima/ima_lsmhooks.c:127:
+^I^I^I  i_security->file_name ? $

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ima_inode_free_security', this function's name, in a string
#591: FILE: security/ima/ima_lsmhooks.c:158:
+			ima_error("ILLEGAL IMA INODE magic=%x in ima_inode_free_security.\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#592: FILE: security/ima/ima_lsmhooks.c:159:
+			ima_error("ILLEGAL IMA INODE magic=%x in ima_inode_free_security.\n",
+			     i_security->magic);

WARNING:RETURN_VOID: void function return statements are not generally useful
#599: FILE: security/ima/ima_lsmhooks.c:166:
+	return;
+}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!f_security"
#611: FILE: security/ima/ima_lsmhooks.c:178:
+	if (f_security == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#614: FILE: security/ima/ima_lsmhooks.c:181:
+^I^Iima_error("ILLEGAL IMA FILE magic=%x in ima_file_free_security.\n", $

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ima_file_free_security', this function's name, in a string
#614: FILE: security/ima/ima_lsmhooks.c:181:
+		ima_error("ILLEGAL IMA FILE magic=%x in ima_file_free_security.\n", 

WARNING:BRACES: braces {} are not necessary for single statement blocks
#620: FILE: security/ima/ima_lsmhooks.c:187:
+		if (f_security->is_measuring) {
+			atomic_dec(&(i_security->measure_count));
+		}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around i_security->measure_count
#621: FILE: security/ima/ima_lsmhooks.c:188:
+			atomic_dec(&(i_security->measure_count));

WARNING:RETURN_VOID: void function return statements are not generally useful
#627: FILE: security/ima/ima_lsmhooks.c:194:
+	return;
+}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#645: FILE: security/ima/ima_lsmhooks.c:212:
+/* IMA requires early initialization in order measure
+   all executables etc from the very beginning. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#645: FILE: security/ima/ima_lsmhooks.c:212:
+   all executables etc from the very beginning. */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#680: FILE: security/ima/ima_main.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#688: FILE: security/ima/ima_main.c:9:
+ * LSM IBM Integrity Measurement Architecture.^I^I  $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#706: FILE: security/ima/ima_main.c:27:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#707: FILE: security/ima/ima_main.c:28:
+#include <asm/atomic.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#717: FILE: security/ima/ima_main.c:38:
+extern struct h_table htable;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#718: FILE: security/ima/ima_main.c:39:
+extern struct sha_table sha_htable;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#720: FILE: security/ima/ima_main.c:41:
+struct sha_entry *ima_lookup_sha_entry(u8 * sha_value);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#721: FILE: security/ima/ima_main.c:42:
+struct measure_entry *ima_lookup_measure_entry(unsigned long, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dev_t' should also have an identifier name
#721: FILE: security/ima/ima_main.c:42:
+struct measure_entry *ima_lookup_measure_entry(unsigned long, dev_t);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#722: FILE: security/ima/ima_main.c:43:
+int ima_add_measure_entry(struct measure_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct measure_entry *' should also have an identifier name
#722: FILE: security/ima/ima_main.c:43:
+int ima_add_measure_entry(struct measure_entry *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#723: FILE: security/ima/ima_main.c:44:
+int measure_dirty_flag_inode(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#723: FILE: security/ima/ima_main.c:44:
+int measure_dirty_flag_inode(struct inode *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#724: FILE: security/ima/ima_main.c:45:
+extern struct tpm_chip *ima_used_chip;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#725: FILE: security/ima/ima_main.c:46:
+void tpm_extend(int index, const u8 * digest);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#725: FILE: security/ima/ima_main.c:46:
+void tpm_extend(int index, const u8 * digest);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#726: FILE: security/ima/ima_main.c:47:
+void tpm_pcrread(int index, u8 * hash);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#726: FILE: security/ima/ima_main.c:47:
+void tpm_pcrread(int index, u8 * hash);

CHECK:SPACING: No space is necessary after a cast
#730: FILE: security/ima/ima_main.c:51:
+	return (void *) &tfm[1];

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#742: FILE: security/ima/ima_main.c:63:
+	if (entry == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#752: FILE: security/ima/ima_main.c:73:
+	if ((count = strlen(boot_aggregate_name)) > ENTRY_MAXFILENAME)

CHECK:BRACES: braces {} should be used on all arms of this statement
#756: FILE: security/ima/ima_main.c:77:
+	if (ima_used_chip != NULL) {
[...]
+	} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ima_used_chip"
#756: FILE: security/ima/ima_main.c:77:
+	if (ima_used_chip != NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#760: FILE: security/ima/ima_main.c:81:
+^I^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tfm"
#762: FILE: security/ima/ima_main.c:83:
+		if (tfm == NULL) {

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'tfm->__crt_alg->cra_digest.dia_update'
#772: FILE: security/ima/ima_main.c:93:
+			tfm->__crt_alg->cra_digest.
+			    dia_update(crypto_tfm_ctx(tfm), pcr_i, 20);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:BRACES: Unbalanced braces around else statement
#776: FILE: security/ima/ima_main.c:97:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#788: FILE: security/ima/ima_main.c:109:
+/* $

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#797: FILE: security/ima/ima_main.c:118:
+		return DIRTY;	/* dirty */
+		break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#804: FILE: security/ima/ima_main.c:125:
+ * returns =0 if measurement must be done $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#808: FILE: security/ima/ima_main.c:129:
+^I/* what could we exclude $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_sb->s_magic == DEVFS_SUPER_MAGIC'
#816: FILE: security/ima/ima_main.c:137:
+	if ((inode->i_sb->s_magic == DEVFS_SUPER_MAGIC) ||
+	    (inode->i_sb->s_magic == PROC_SUPER_MAGIC) ||
+	    (inode->i_sb->s_magic == SYSFS_MAGIC)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_sb->s_magic == PROC_SUPER_MAGIC'
#816: FILE: security/ima/ima_main.c:137:
+	if ((inode->i_sb->s_magic == DEVFS_SUPER_MAGIC) ||
+	    (inode->i_sb->s_magic == PROC_SUPER_MAGIC) ||
+	    (inode->i_sb->s_magic == SYSFS_MAGIC)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_sb->s_magic == SYSFS_MAGIC'
#816: FILE: security/ima/ima_main.c:137:
+	if ((inode->i_sb->s_magic == DEVFS_SUPER_MAGIC) ||
+	    (inode->i_sb->s_magic == PROC_SUPER_MAGIC) ||
+	    (inode->i_sb->s_magic == SYSFS_MAGIC)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#819: FILE: security/ima/ima_main.c:140:
+^I^Iinvalidate_pcr("CANNOT measure fs type.\n");^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#820: FILE: security/ima/ima_main.c:141:
+^I^Ireturn 1; ^I/*can't measure */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#827: FILE: security/ima/ima_main.c:148:
+^Ireturn 0;^I       ^I/* measure */$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#830: FILE: security/ima/ima_main.c:151:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#831: FILE: security/ima/ima_main.c:152:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#832: FILE: security/ima/ima_main.c:153:
+ * measures new file and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#833: FILE: security/ima/ima_main.c:154:
+ * adds it to measurement list $

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#835: FILE: security/ima/ima_main.c:156:
+static struct measure_entry *measure_file(struct file *file, struct dentry *dentry, struct inode *inode)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#847: FILE: security/ima/ima_main.c:168:
+	if ((bufp =

CHECK:SPACING: No space is necessary after a cast
#848: FILE: security/ima/ima_main.c:169:
+	     (char *) kmalloc(PAGE_SIZE, GFP_KERNEL)) == 0) {

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#848: FILE: security/ima/ima_main.c:169:
+	     (char *) kmalloc(PAGE_SIZE, GFP_KERNEL)) == 0) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#856: FILE: security/ima/ima_main.c:177:
+	if (entry == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#867: FILE: security/ima/ima_main.c:188:
+	if ((count = dentry->d_name.len) > ENTRY_MAXFILENAME)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tfm"
#875: FILE: security/ima/ima_main.c:196:
+	if (tfm == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_op->read'
#885: FILE: security/ima/ima_main.c:206:
+		if ((count =
+		     (file->f_op->read) (file,
+					 (char __user *) bufp,
+					 PAGE_SIZE,
+					 &offset)) < 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#885: FILE: security/ima/ima_main.c:206:
+		if ((count =

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (file->f_op->read)
#886: FILE: security/ima/ima_main.c:207:
+		     (file->f_op->read) (file,

CHECK:SPACING: No space is necessary after a cast
#887: FILE: security/ima/ima_main.c:208:
+					 (char __user *) bufp,

CHECK:BRACES: braces {} should be used on all arms of this statement
#905: FILE: security/ima/ima_main.c:226:
+	if (i_security != NULL) {
[...]
+	} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "i_security"
#905: FILE: security/ima/ima_main.c:226:
+	if (i_security != NULL) {

CHECK:SPACING: No space is necessary after a cast
#913: FILE: security/ima/ima_main.c:234:
+			i_security->file_name = (char *) (entry->fileName);

CHECK:BRACES: Unbalanced braces around else statement
#916: FILE: security/ima/ima_main.c:237:
+	} else

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#920: FILE: security/ima/ima_main.c:241:
+	return (entry);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:INDENTED_LABEL: labels should not be indented
#923: FILE: security/ima/ima_main.c:244:
+      outf:

WARNING:INDENTED_LABEL: labels should not be indented
#925: FILE: security/ima/ima_main.c:246:
+      outm:

WARNING:INDENTED_LABEL: labels should not be indented
#928: FILE: security/ima/ima_main.c:249:
+      out:

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#931: FILE: security/ima/ima_main.c:252:
+	return (NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tfm"
#944: FILE: security/ima/ima_main.c:265:
+	if (tfm == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#960: FILE: security/ima/ima_main.c:281:
+		if (entry == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mr"
#972: FILE: security/ima/ima_main.c:293:
+		if (mr != NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around entry->mr
#973: FILE: security/ima/ima_main.c:294:
+			memcpy(&(entry->mr), mr,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around entry->mr
#976: FILE: security/ima/ima_main.c:297:
+			memset(&(entry->mr), 0,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#980: FILE: security/ima/ima_main.c:301:
+		if ((error = ima_add_measure_entry(entry)) < 0) {

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#983: FILE: security/ima/ima_main.c:304:
+			    ("error adding new measurement entry");;

WARNING:LONG_LINE_COMMENT: line length of 117 exceeds 100 columns
#988: FILE: security/ima/ima_main.c:309:
+	}			/* else we already have this hash value from an exec/file that was running earlier */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:INDENTED_LABEL: labels should not be indented
#991: FILE: security/ima/ima_main.c:312:
+      out:

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#996: FILE: security/ima/ima_main.c:317:
+static unsigned int find_mod_sec(Elf_Ehdr * hdr, Elf_Shdr * sechdrs, const char *secstrings, const char *name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#996: FILE: security/ima/ima_main.c:317:
+static unsigned int find_mod_sec(Elf_Ehdr * hdr, Elf_Shdr * sechdrs, const char *secstrings, const char *name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#996: FILE: security/ima/ima_main.c:317:
+static unsigned int find_mod_sec(Elf_Ehdr * hdr, Elf_Shdr * sechdrs, const char *secstrings, const char *name)

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Ehdr>
#996: FILE: security/ima/ima_main.c:317:
+static unsigned int find_mod_sec(Elf_Ehdr * hdr, Elf_Shdr * sechdrs, const char *secstrings, const char *name)

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#996: FILE: security/ima/ima_main.c:317:
+static unsigned int find_mod_sec(Elf_Ehdr * hdr, Elf_Shdr * sechdrs, const char *secstrings, const char *name)

WARNING:LINE_SPACING: Missing a blank line after declarations
#999: FILE: security/ima/ima_main.c:320:
+	unsigned int i;
+	for (i = 1; i < hdr->e_shnum; i++)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1002: FILE: security/ima/ima_main.c:323:
+		if ((sechdrs[i].sh_flags & SHF_ALLOC)
+		    && strcmp(secstrings + sechdrs[i].sh_name, name) == 0)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1008: FILE: security/ima/ima_main.c:329:
+void measure_kernel_module(void *start, unsigned long len, const char __user * uargs)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1017: FILE: security/ima/ima_main.c:338:
+^I^I^I^I     .flags = MODULE_MEASURE_FLAG^I  $

CHECK:SPACING: No space is necessary after a cast
#1034: FILE: security/ima/ima_main.c:355:
+	hdr = (Elf_Ehdr *) start;

CHECK:SPACING: No space is necessary after a cast
#1035: FILE: security/ima/ima_main.c:356:
+	sechdrs = (void *) hdr + hdr->e_shoff;

CHECK:SPACING: No space is necessary after a cast
#1036: FILE: security/ima/ima_main.c:357:
+	secstrings = (void *) hdr + sechdrs[hdr->e_shstrndx].sh_offset;

CHECK:SPACING: No space is necessary after a cast
#1045: FILE: security/ima/ima_main.c:366:
+	mod = (void *) ((size_t) hdr + sechdrs[modindex].sh_offset);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1048: FILE: security/ima/ima_main.c:369:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1050: FILE: security/ima/ima_main.c:371:
+
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1070: FILE: security/ima/ima_main.c:391:
+	if (skip_measurement(file)) {
+		return 0;
+	}

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1076: FILE: security/ima/ima_main.c:397:
+	 * file is closed ... */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "f_security"
#1078: FILE: security/ima/ima_main.c:399:
+	if (f_security != NULL) {

WARNING:LONG_LINE_STRING: line length of 106 exceeds 100 columns
#1080: FILE: security/ima/ima_main.c:401:
+			invalidate_pcr("Internal inconsistency error (f_security with illegal magic).\n");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1082: FILE: security/ima/ima_main.c:403:
+			return -EFAULT;
+		} else {

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'file->f_dentry->d_inode'
#1086: FILE: security/ima/ima_main.c:407:
+			    ima_get_inode_security(file->f_dentry->
+						   d_inode);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i_security == NULL'
#1087: FILE: security/ima/ima_main.c:408:
+			if ((i_security == NULL)
+			    || (i_security->magic != IMA_MAGIC)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i_security->magic != IMA_MAGIC'
#1087: FILE: security/ima/ima_main.c:408:
+			if ((i_security == NULL)
+			    || (i_security->magic != IMA_MAGIC)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!i_security"
#1087: FILE: security/ima/ima_main.c:408:
+			if ((i_security == NULL)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1088: FILE: security/ima/ima_main.c:409:
+			if ((i_security == NULL)
+			    || (i_security->magic != IMA_MAGIC)) {

WARNING:LONG_LINE_STRING: line length of 122 exceeds 100 columns
#1089: FILE: security/ima/ima_main.c:410:
+				invalidate_pcr("Internal inconsistency error (f_security not free but no i_security).\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*f_security)...) over kmalloc(sizeof(struct ima_file)...)
#1095: FILE: security/ima/ima_main.c:416:
+		f_security = kmalloc(sizeof(struct ima_file), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!f_security"
#1096: FILE: security/ima/ima_main.c:417:
+		if (f_security == NULL) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1099: FILE: security/ima/ima_main.c:420:
+			return -EFAULT;
+		} else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "i_security"
#1106: FILE: security/ima/ima_main.c:427:
+		if (i_security != NULL) {

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#1112: FILE: security/ima/ima_main.c:433:
+			/* only increment it once for any open file, thus here in the "f_security==null" case */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around i_security->measure_count
#1113: FILE: security/ima/ima_main.c:434:
+			atomic_inc(&(i_security->measure_count));

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1118: FILE: security/ima/ima_main.c:439:
+			if (i_security == NULL) {;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!i_security"
#1118: FILE: security/ima/ima_main.c:439:
+			if (i_security == NULL) {;

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1121: FILE: security/ima/ima_main.c:442:
+				return -EFAULT;
+			} else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around i_security->measure_count
#1125: FILE: security/ima/ima_main.c:446:
+				atomic_set(&(i_security->measure_count),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i_security->dirty == CLEAN'
#1135: FILE: security/ima/ima_main.c:456:
+	if ((i_security) && (i_security->dirty == CLEAN)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1139: FILE: security/ima/ima_main.c:460:
+^I/* b) if there is already a writer on this file --> error! $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around inode->i_writecount
#1143: FILE: security/ima/ima_main.c:464:
+	if (atomic_read(&(inode->i_writecount)) > 0) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entry != NULL'
#1150: FILE: security/ima/ima_main.c:471:
+	if ((entry != NULL) && (entry->dirty == CLEAN)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entry->dirty == CLEAN'
#1150: FILE: security/ima/ima_main.c:471:
+	if ((entry != NULL) && (entry->dirty == CLEAN)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1150: FILE: security/ima/ima_main.c:471:
+	if ((entry != NULL) && (entry->dirty == CLEAN)) {
+		goto out;	/* release lock; nothing to measure */
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entry"
#1150: FILE: security/ima/ima_main.c:471:
+	if ((entry != NULL) && (entry->dirty == CLEAN)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mr"
#1165: FILE: security/ima/ima_main.c:486:
+	if (mr != NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around new_entry->mr
#1166: FILE: security/ima/ima_main.c:487:
+		memcpy(&(new_entry->mr), mr,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around new_entry->mr
#1169: FILE: security/ima/ima_main.c:490:
+		memset(&(new_entry->mr), 0,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#1172: FILE: security/ima/ima_main.c:493:
+	if (entry == NULL) {	/* no old entry for this inode found */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1175: FILE: security/ima/ima_main.c:496:
+			if ((error = ima_add_measure_entry(new_entry)) < 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1195: FILE: security/ima/ima_main.c:516:
+				if ((error =

WARNING:INDENTED_LABEL: labels should not be indented
#1209: FILE: security/ima/ima_main.c:530:
+      out:

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1211: FILE: security/ima/ima_main.c:532:
+	return (error);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1214: FILE: security/ima/ima_main.c:535:
+/* called permission for dirty-flagging $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1228: FILE: security/ima/ima_main.c:549:
+	if ((entry =

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1234: FILE: security/ima/ima_main.c:555:
+		if ((i_security = ima_get_inode_security(inode)) != NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1235: FILE: security/ima/ima_main.c:556:
+			if (i_security->dirty == CLEAN) {
+				i_security->dirty = DIRTY;
+			}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1247: FILE: security/ima/ima_main.c:568:
+^I/* here we go through the whole hash table and look $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "qe"
#1260: FILE: security/ima/ima_main.c:581:
+		while (qe != NULL) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1272: FILE: security/ima/ima_main.c:593:
+EXPORT_SYMBOL(measure_file_exec);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1273: FILE: security/ima/ima_main.c:594:
+EXPORT_SYMBOL(measure_kernel_module);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1274: FILE: security/ima/ima_main.c:595:
+EXPORT_SYMBOL(measure_dirty_flag_super);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1275: FILE: security/ima/ima_main.c:596:
+EXPORT_SYMBOL(measure_dirty_flag_inode);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1280: FILE: security/ima/ima_proc.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1288: FILE: security/ima/ima_proc.c:9:
+ * LSM IBM Integrity Measurement Architecture.^I^I  $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1306: FILE: security/ima/ima_proc.c:27:
+#include <asm/uaccess.h>

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1315: FILE: security/ima/ima_proc.c:36:
+#define MAXPROCMEM 128*1024
                       ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1315: FILE: security/ima/ima_proc.c:36:
+#define MAXPROCMEM 128*1024

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#1317: FILE: security/ima/ima_proc.c:38:
+static char *xmlmem = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1318: FILE: security/ima/ima_proc.c:39:
+extern atomic_t global_count_sysfs;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1319: FILE: security/ima/ima_proc.c:40:
+extern atomic_t global_count_sysfs_measure;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1320: FILE: security/ima/ima_proc.c:41:
+extern atomic_t global_count_mmap_measure;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1321: FILE: security/ima/ima_proc.c:42:
+extern struct h_table htable;

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1326: FILE: security/ima/ima_proc.c:47:
+static int ima_proc_read_htable(char *page, char **start, off_t off, int count, int *eof, void *data)

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1334: FILE: security/ima/ima_proc.c:55:
+			     "\nTCG MEASUREMENT HASH TABLE: \n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1372: FILE: security/ima/ima_proc.c:93:
+
+

WARNING:SPLIT_STRING: quoted string split across lines
#1377: FILE: security/ima/ima_proc.c:98:
+			"#%03d: %02X%02X%02X%02X%02X%02X%02X%02X%02X%02X"
+			"%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X [%s] %s\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1391: FILE: security/ima/ima_proc.c:112:
+
+

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#1392: FILE: security/ima/ima_proc.c:113:
+static int ima_proc_read_measurements(char *page, char **start, off_t off, int count, int *eof, void *data)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1410: FILE: security/ima/ima_proc.c:131:
+	for (qe = first_measurement, i = 0;
+	     qe && qe->entry && (i < nextpos); qe = qe->later, i++);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1425: FILE: security/ima/ima_proc.c:146:
+	if (!qe) {
+		*eof = 1;
+	}

CHECK:SPACING: No space is necessary after a cast
#1437: FILE: security/ima/ima_proc.c:158:
+	void *ptr = (void *) buf;

CHECK:SPACING: No space is necessary after a cast
#1441: FILE: security/ima/ima_proc.c:162:
+	*((u32 *) ptr) = (u32) CONFIG_IMA_MEASURE_PCR_IDX;

CHECK:SPACING: No space is necessary after a cast
#1456: FILE: security/ima/ima_proc.c:177:
+	*((char *) ptr) = '\0';

CHECK:SPACING: No space is necessary after a cast
#1459: FILE: security/ima/ima_proc.c:180:
+	return ((u32) ptr - (u32) buf);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1462: FILE: security/ima/ima_proc.c:183:
+
+

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#1463: FILE: security/ima/ima_proc.c:184:
+static int ima_proc_read_measurement_events(char *page, char **start, off_t off, int count, int *eof, void *data)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1480: FILE: security/ima/ima_proc.c:201:
+	for (qe = first_measurement, i = 0;
+	     qe && qe->entry && (i < nextpos); qe = qe->later, i++);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1495: FILE: security/ima/ima_proc.c:216:
+	if (!qe) {
+		*eof = 1;
+	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'e' - possible side-effects?
#1502: FILE: security/ima/ima_proc.c:223:
+#define mr_hook(e) \
+	(((e)->mr.flags & MMAP_MEASURE_FLAG) ?		\
+	 "mmap" :					\
+	 ((e)->mr.flags & MODULE_MEASURE_FLAG) ?	\
+	 "module" :				\
+	 ((e)->mr.flags & USER_MEASURE_FLAG) ?		\
+	 "user" : "UNKNOWN")

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1509: FILE: security/ima/ima_proc.c:230:
+^I$

WARNING:SPLIT_STRING: quoted string split across lines
#1514: FILE: security/ima/ima_proc.c:235:
+			"#%03d: %02X%02X%02X%02X%02X%02X%02X%02X%02X%02X"
+			"%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X [%s] %s L[%u,%lu,%s]\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1529: FILE: security/ima/ima_proc.c:250:
+
+

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#1530: FILE: security/ima/ima_proc.c:251:
+static int ima_proc_read_extmeasurements(char *page, char **start, off_t off, int count, int *eof, void *data)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1548: FILE: security/ima/ima_proc.c:269:
+	for (qe = first_measurement, i = 0;
+	     qe && qe->entry && (i < nextpos); qe = qe->later, i++);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1563: FILE: security/ima/ima_proc.c:284:
+	if (!qe) {
+		*eof = 1;
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1570: FILE: security/ima/ima_proc.c:291:
+
+

WARNING:SPLIT_STRING: quoted string split across lines
#1575: FILE: security/ima/ima_proc.c:296:
+			"<NUM>%03d</NUM><SHA1>%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X"
+			"%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X</SHA1><STATUS>%s</STATUS><NAME>%s</NAME>\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1589: FILE: security/ima/ima_proc.c:310:
+
+

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#1590: FILE: security/ima/ima_proc.c:311:
+static int ima_proc_read_xmlmeasurements(char *page, char **start, off_t off, int count, int *eof, void *data)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1607: FILE: security/ima/ima_proc.c:328:
+	for (qe = first_measurement, i = 0;
+	     qe && qe->entry && (i < nextpos); qe = qe->later, i++);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1622: FILE: security/ima/ima_proc.c:343:
+	if (!qe) {
+		*eof = 1;
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1629: FILE: security/ima/ima_proc.c:350:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tpm_dir"
#1635: FILE: security/ima/ima_proc.c:356:
+	if (tpm_dir == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1638: FILE: security/ima/ima_proc.c:359:
+	if ((xmlmem = kmalloc(MAXPROCMEM, GFP_KERNEL)) == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#1647: FILE: security/ima/ima_proc.c:368:
+	if (entry == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "xmlmem"
#1649: FILE: security/ima/ima_proc.c:370:
+		if (xmlmem != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#1659: FILE: security/ima/ima_proc.c:380:
+	if (entry == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "xmlmem"
#1662: FILE: security/ima/ima_proc.c:383:
+		if (xmlmem != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#1672: FILE: security/ima/ima_proc.c:393:
+	if (entry == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "xmlmem"
#1676: FILE: security/ima/ima_proc.c:397:
+		if (xmlmem != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#1686: FILE: security/ima/ima_proc.c:407:
+	if (entry == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "xmlmem"
#1691: FILE: security/ima/ima_proc.c:412:
+		if (xmlmem != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#1700: FILE: security/ima/ima_proc.c:421:
+	if (entry == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "xmlmem"
#1706: FILE: security/ima/ima_proc.c:427:
+		if (xmlmem != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "xmlmem"
#1721: FILE: security/ima/ima_proc.c:442:
+	if (xmlmem != NULL)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1728: FILE: security/ima/ima_queue.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1736: FILE: security/ima/ima_queue.c:9:
+ * LSM IBM Integrity Measurement Architecture.^I^I  $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1754: FILE: security/ima/ima_queue.c:27:
+#include <asm/uaccess.h>

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#1762: FILE: security/ima/ima_queue.c:35:
+struct queue_entry *first_measurement = NULL;	/* for printing */

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#1763: FILE: security/ima/ima_queue.c:36:
+struct queue_entry *latest_measurement = NULL;	/* for adding */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1767: FILE: security/ima/ima_queue.c:40:
+int ima_add_sha_entry(struct measure_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct measure_entry *' should also have an identifier name
#1767: FILE: security/ima/ima_queue.c:40:
+int ima_add_sha_entry(struct measure_entry *);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1821: FILE: security/ima/ima_queue.c:94:
+	return;
+}

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1837: FILE: security/ima/ima_queue.c:110:
+			if (qe->entry)
+				kfree(qe->entry);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1845: FILE: security/ima/ima_queue.c:118:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1847: FILE: security/ima/ima_queue.c:120:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1848: FILE: security/ima/ima_queue.c:121:
+ * also sets clean and dirty table hit marks $

CHECK:CAMELCASE: Avoid CamelCase: <inodeNumber>
#1850: FILE: security/ima/ima_queue.c:123:
+struct measure_entry *ima_lookup_measure_entry(unsigned long inodeNumber, dev_t devNumber)

CHECK:CAMELCASE: Avoid CamelCase: <devNumber>
#1850: FILE: security/ima/ima_queue.c:123:
+struct measure_entry *ima_lookup_measure_entry(unsigned long inodeNumber, dev_t devNumber)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "qe"
#1860: FILE: security/ima/ima_queue.c:133:
+	while ((qe != NULL) && ((qe->entry->inodeNr != inodeNumber)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1861: FILE: security/ima/ima_queue.c:134:
+	while ((qe != NULL) && ((qe->entry->inodeNr != inodeNumber)
+				|| (qe->entry->devId != devNumber)))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "qe"
#1864: FILE: security/ima/ima_queue.c:137:
+	if (qe != NULL) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1865: FILE: security/ima/ima_queue.c:138:
+		if (qe->entry->dirty != CLEAN) {
[...]
+		} else {
[...]

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1877: FILE: security/ima/ima_queue.c:150:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1879: FILE: security/ima/ima_queue.c:152:
+struct sha_entry *ima_lookup_sha_entry(u8 * sha_value)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "se"
#1889: FILE: security/ima/ima_queue.c:162:
+	while ((se != NULL) && (memcmp(se->digest, sha_value, 20))) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1896: FILE: security/ima/ima_queue.c:169:
+
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1911: FILE: security/ima/ima_queue.c:184:
+	if ((qe = kmalloc(sizeof(struct queue_entry), GFP_KERNEL)) == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*qe)...) over kmalloc(sizeof(struct queue_entry)...)
#1911: FILE: security/ima/ima_queue.c:184:
+	if ((qe = kmalloc(sizeof(struct queue_entry), GFP_KERNEL)) == NULL) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1924: FILE: security/ima/ima_queue.c:197:
+	if (first_measurement == NULL) {
[...]
+	} else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!first_measurement"
#1924: FILE: security/ima/ima_queue.c:197:
+	if (first_measurement == NULL) {

WARNING:INDENTED_LABEL: labels should not be indented
#1934: FILE: security/ima/ima_queue.c:207:
+      out:

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1938: FILE: security/ima/ima_queue.c:211:
+
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1951: FILE: security/ima/ima_queue.c:224:
+	if ((se = kmalloc(sizeof(struct sha_entry), GFP_KERNEL)) == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*se)...) over kmalloc(sizeof(struct sha_entry)...)
#1951: FILE: security/ima/ima_queue.c:224:
+	if ((se = kmalloc(sizeof(struct sha_entry), GFP_KERNEL)) == NULL)

WARNING:INDENTED_LABEL: labels should not be indented
#1965: FILE: security/ima/ima_queue.c:238:
+      out:

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1973: FILE: security/ima/ima_sysfs.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1981: FILE: security/ima/ima_sysfs.c:9:
+ * LSM IBM Integrity Measurement Architecture.^I^I  $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2008: FILE: security/ima/ima_sysfs.c:36:
+int measure_file_exec(struct file *, const struct measure_request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#2008: FILE: security/ima/ima_sysfs.c:36:
+int measure_file_exec(struct file *, const struct measure_request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct measure_request *' should also have an identifier name
#2008: FILE: security/ima/ima_sysfs.c:36:
+int measure_file_exec(struct file *, const struct measure_request *);

CHECK:SPACING: No space is necessary after a cast
#2022: FILE: security/ima/ima_sysfs.c:50:
+	return (ssize_t) 0;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2025: FILE: security/ima/ima_sysfs.c:53:
+static ssize_t security_attr_store(struct kobject *kobj,struct attribute *attr,
                                                        ^

CHECK:SPACING: No space is necessary after a cast
#2036: FILE: security/ima/ima_sysfs.c:64:
+	return (ssize_t) count;

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#2039: FILE: security/ima/ima_sysfs.c:67:
+static struct sysfs_ops security_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#2047: FILE: security/ima/ima_sysfs.c:75:
+	char *msg = "Hi There! Read is not supported :-)\n";
+	strncpy(page, msg, PAGE_SIZE);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2048: FILE: security/ima/ima_sysfs.c:76:
+	return (strlen(msg));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2061: FILE: security/ima/ima_sysfs.c:89:
+		ima_error("illegal request size (%d, expected %d).\n",
+		       count, sizeof(struct measure_request));

CHECK:SPACING: No space is necessary after a cast
#2064: FILE: security/ima/ima_sysfs.c:92:
+	mr = (struct measure_request *) page;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2072: FILE: security/ima/ima_sysfs.c:100:
+^I/* future: check inode->security to see if measure necessary */ $

CHECK:SPACING: No space is necessary after a cast
#2079: FILE: security/ima/ima_sysfs.c:107:
+		return (ssize_t) count;	/* length of written data */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2083: FILE: security/ima/ima_sysfs.c:111:
+	.attr = {.name = "measure",.mode = S_IRUGO | S_IWUGO},
 	                          ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUGO' are not preferred. Consider using octal permissions '0666'.
#2083: FILE: security/ima/ima_sysfs.c:111:
+	.attr = {.name = "measure",.mode = S_IRUGO | S_IWUGO},

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:RETURN_VOID: void function return statements are not generally useful
#2096: FILE: security/ima/ima_sysfs.c:124:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2107: FILE: security/ima/ima_sysfs.c:135:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2127: FILE: security/ima/ima_tpm_glue.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2135: FILE: security/ima/ima_tpm_glue.c:9:
+ * LSM IBM Integrity Measurement Architecture.^I^I  $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#2155: FILE: security/ima/ima_tpm_glue.c:29:
+#include <asm/uaccess.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2163: FILE: security/ima/ima_tpm_glue.c:37:
+extern struct tpm_chip *ima_used_chip;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2164: FILE: security/ima/ima_tpm_glue.c:38:
+void tpm_extend(int index, const u8 * digest);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2164: FILE: security/ima/ima_tpm_glue.c:38:
+void tpm_extend(int index, const u8 * digest);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2165: FILE: security/ima/ima_tpm_glue.c:39:
+void tpm_pcrread(int index, u8 * hash);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2165: FILE: security/ima/ima_tpm_glue.c:39:
+void tpm_pcrread(int index, u8 * hash);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2167: FILE: security/ima/ima_tpm_glue.c:41:
+static u32 decode_u32(u8 * buf)

CHECK:SPACING: No space is necessary after a cast
#2170: FILE: security/ima/ima_tpm_glue.c:44:
+	val = (val << 8) | (u8) buf[1];

WARNING:LINE_SPACING: Missing a blank line after declarations
#2170: FILE: security/ima/ima_tpm_glue.c:44:
+	u32 val = buf[0];
+	val = (val << 8) | (u8) buf[1];

CHECK:SPACING: No space is necessary after a cast
#2171: FILE: security/ima/ima_tpm_glue.c:45:
+	val = (val << 8) | (u8) buf[2];

CHECK:SPACING: No space is necessary after a cast
#2172: FILE: security/ima/ima_tpm_glue.c:46:
+	val = (val << 8) | (u8) buf[3];

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2176: FILE: security/ima/ima_tpm_glue.c:50:
+static void encode_u32(u8 * buf, u32 val)

CHECK:SPACING: No space is necessary after a cast
#2178: FILE: security/ima/ima_tpm_glue.c:52:
+	buf[0] = (u8) val >> 24;

CHECK:SPACING: No space is necessary after a cast
#2179: FILE: security/ima/ima_tpm_glue.c:53:
+	buf[1] = (u8) val >> 16;

CHECK:SPACING: No space is necessary after a cast
#2180: FILE: security/ima/ima_tpm_glue.c:54:
+	buf[2] = (u8) val >> 8;

CHECK:SPACING: No space is necessary after a cast
#2181: FILE: security/ima/ima_tpm_glue.c:55:
+	buf[3] = (u8) val >> 0;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2191: FILE: security/ima/ima_tpm_glue.c:65:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2192: FILE: security/ima/ima_tpm_glue.c:66:
+void tpm_pcrread(int index, u8 * hash)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ima_used_chip"
#2197: FILE: security/ima/ima_tpm_glue.c:71:
+	if (ima_used_chip == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2202: FILE: security/ima/ima_tpm_glue.c:76:
+	if (((len = tpm_transmit(ima_used_chip, data, sizeof(data))) >= 30) &&

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2207: FILE: security/ima/ima_tpm_glue.c:81:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2215: FILE: security/ima/ima_tpm_glue.c:89:
+void tpm_extend(int index, const u8 * digest)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ima_used_chip"
#2220: FILE: security/ima/ima_tpm_glue.c:94:
+	if (ima_used_chip == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2226: FILE: security/ima/ima_tpm_glue.c:100:
+	if (((len = tpm_transmit(ima_used_chip, data, sizeof(data))) < 30) ||

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2253: FILE: security/ima/INSTALL:18:
+ a)  crypto->SHA1 is (y)           $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2256: FILE: security/ima/INSTALL:21:
+ b)  security->Default Linux Capabilities (n) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2265: FILE: security/ima/INSTALL:30:
+          Choose (y) if you don't have a TPM on your machine or if you $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2268: FILE: security/ima/INSTALL:33:
+          driver with the internal kernel interface patch posted to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2270: FILE: security/ima/INSTALL:35:
+          reason, it will panic the kernel to protect attestation. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2272: FILE: security/ima/INSTALL:37:
+   $

WARNING:TYPO_SPELLING: 'paramter' may be misspelled - perhaps 'parameter'?
#2275: FILE: security/ima/INSTALL:40:
+     NSA SELinux boot paramter
                       ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2287: FILE: security/ima/INSTALL:52:
+to activate the Integrity Measurement Architecture at boot-time, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2304: FILE: security/ima/INSTALL:69:
+   a) you are fine if you see $

WARNING:TYPO_SPELLING: 'paramter' may be misspelled - perhaps 'parameter'?
#2317: FILE: security/ima/INSTALL:82:
+   b) you need to add the "ima=1" kernel boot paramter if you see:
                                               ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2322: FILE: security/ima/INSTALL:87:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2323: FILE: security/ima/INSTALL:88:
+   c) you need to compile SHA1 support statically into the kernel $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2359: FILE: security/ima/INSTALL:124:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2372: FILE: security/ima/Kconfig:9:
+^Idepends on SECURITY && CRYPTO_SHA1 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2374: FILE: security/ima/Kconfig:11:
+    ^I^ITo measure executable code running on this $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2376: FILE: security/ima/Kconfig:13:
+^I^Iany other security modules because LSM are $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2385: FILE: security/ima/Kconfig:22:
+^I^IIf you would like to test the measurement $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2386: FILE: security/ima/Kconfig:23:
+^I^Iarchitecture but you do not have a TPM hardware $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2407: FILE: security/ima/Kconfig:44:
+^I^Imain measure pcr IMA_MEASURE_PCR_IDX aggregate has been $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2408: FILE: security/ima/Kconfig:45:
+^I^Iinvalidated due to suspicious activity. This is just for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2410: FILE: security/ima/Kconfig:47:
+^I^IThe main pcr was invalidated if $

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#2414: FILE: security/ima/Kconfig:51:
+config IMA_SKIP_BOOT_AGGREGATE
+	bool "Skip Boot Aggregate Creation"
+	depends on IMA_MEASURE
+	help
+		If y, the usual aggregate over the boot PCRs 
+		of the TPM is not calculated and not added to 
+		the measurement list. If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2418: FILE: security/ima/Kconfig:55:
+^I^IIf y, the usual aggregate over the boot PCRs $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2419: FILE: security/ima/Kconfig:56:
+^I^Iof the TPM is not calculated and not added to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2428: FILE: security/ima/Kconfig:65:
+                this does not restrict normal systems. $

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#2444: FILE: security/ima/Kconfig:81:
+		This setting enforces TPM PCR invalidation if /dev/hda,
 		                                                   ^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2446: FILE: security/ima/Kconfig:83:
+^I^Idirectly (bypass of measurement dirty flagging possible). $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2462: FILE: security/ima/Kconfig:99:
+^I^Iit is safe to say yes. $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000182140.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 107 errors, 147 warnings, 140 checks, 2426 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000182140.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
