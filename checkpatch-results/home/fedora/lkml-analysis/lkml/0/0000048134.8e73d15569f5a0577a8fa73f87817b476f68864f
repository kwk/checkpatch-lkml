WARNING:LEADING_SPACE: please, no spaces at the start of a line
#52: FILE: include/linux/interrupt.h:272:
+    char *name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#53: FILE: include/linux/interrupt.h:273:
+    unsigned int reschedule_count;$

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#62: FILE: include/linux/interrupt.h:355:
int cpu);

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#65: FILE: include/linux/interrupt.h:356:
+extern void _tasklet_init(struct tasklet_struct *t,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:CODE_INDENT: code indent should use tabs where possible
#66: FILE: include/linux/interrupt.h:357:
+              void (*func)(unsigned long), unsigned long data);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#66: FILE: include/linux/interrupt.h:357:
+extern void _tasklet_init(struct tasklet_struct *t,
+              void (*func)(unsigned long), unsigned long data);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#66: FILE: include/linux/interrupt.h:357:
+              void (*func)(unsigned long), unsigned long data);$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#70: FILE: include/linux/interrupt.h:361:
+ * compiler can discard the string... */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: include/linux/interrupt.h:363:
+    _tasklet_init(t, func, data)$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 't' - possible side-effects?
#74: FILE: include/linux/interrupt.h:365:
+#define tasklet_init(t, func, data)    do {        \
+    _tasklet_init(t, func, data);            \
+    (t)->name = __FILE__ ":" __stringify(__LINE__);    \
+    } while (0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#75: FILE: include/linux/interrupt.h:366:
+    _tasklet_init(t, func, data);            \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: include/linux/interrupt.h:367:
+    (t)->name = __FILE__ ":" __stringify(__LINE__);    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: include/linux/interrupt.h:368:
+    } while (0)$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 't' - possible side-effects?
#78: FILE: include/linux/interrupt.h:369:
+#define tasklet_init_named(t, func, data, name)    \
+    do {                    \
+    _tasklet_init(t, func, data);        \
+    (t)->name = (name);            \
+    } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#78: FILE: include/linux/interrupt.h:369:
+#define tasklet_init_named(t, func, data, name)    \
+    do {                    \
+    _tasklet_init(t, func, data);        \
+    (t)->name = (name);            \
+    } while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#78: FILE: include/linux/interrupt.h:369:
+#define tasklet_init_named(t, func, data, name)    \
+    do {                    \
+    _tasklet_init(t, func, data);        \
+    (t)->name = (name);            \
+    } while (0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: include/linux/interrupt.h:370:
+    do {                    \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 4)
#79: FILE: include/linux/interrupt.h:370:
+    do {                    \
+    _tasklet_init(t, func, data);        \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: include/linux/interrupt.h:371:
+    _tasklet_init(t, func, data);        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: include/linux/interrupt.h:372:
+    (t)->name = (name);            \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: include/linux/interrupt.h:373:
+    } while (0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#95: FILE: kernel/softirq.c:389:
+                t->reschedule_count = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: kernel/softirq.c:389:
+                t->reschedule_count = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#101: FILE: kernel/softirq.c:395:
+            /* 10000 is arbitrary... how much should it be?$

ERROR:CODE_INDENT: code indent should use tabs where possible
#102: FILE: kernel/softirq.c:396:
+             * on my system, 10000 is quite a long time... */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#102: FILE: kernel/softirq.c:396:
+             * on my system, 10000 is quite a long time... */

ERROR:CODE_INDENT: code indent should use tabs where possible
#103: FILE: kernel/softirq.c:397:
+            if (t->reschedule_count++ > 10000) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: kernel/softirq.c:397:
+            if (t->reschedule_count++ > 10000) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#104: FILE: kernel/softirq.c:398:
+                printk(KERN_ERR "tasklet %s is scheduled but hasn't been"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: kernel/softirq.c:398:
+                printk(KERN_ERR "tasklet %s is scheduled but hasn't been"$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#104: FILE: kernel/softirq.c:398:
+                printk(KERN_ERR "tasklet %s is scheduled but hasn't been"

ERROR:CODE_INDENT: code indent should use tabs where possible
#105: FILE: kernel/softirq.c:399:
+                    " enabled for too long!\n", t->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: kernel/softirq.c:399:
+                    " enabled for too long!\n", t->name);$

WARNING:SPLIT_STRING: quoted string split across lines
#105: FILE: kernel/softirq.c:399:
+                printk(KERN_ERR "tasklet %s is scheduled but hasn't been"
+                    " enabled for too long!\n", t->name);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:CODE_INDENT: code indent should use tabs where possible
#106: FILE: kernel/softirq.c:400:
+                tasklet_unlock(t);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: kernel/softirq.c:400:
+                tasklet_unlock(t);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#107: FILE: kernel/softirq.c:401:
+                continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: kernel/softirq.c:401:
+                continue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#108: FILE: kernel/softirq.c:402:
+            }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: kernel/softirq.c:402:
+            }$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#119: FILE: kernel/softirq.c:450:
+void _tasklet_init(struct tasklet_struct *t,
           void (*func)(unsigned long), unsigned long data)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#127: FILE: kernel/softirq.c:459:
+EXPORT_SYMBOL(_tasklet_init);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000048134.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 24 warnings, 7 checks, 99 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000048134.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
