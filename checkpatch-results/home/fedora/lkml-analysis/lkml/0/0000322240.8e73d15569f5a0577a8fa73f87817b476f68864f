WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#164: 
# --------------------------------------------

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#165: 
# 03/11/28	pj@sgi.com	1.1498

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#166: 
# cpumask input/output code consolidation, 32 bit comma separated format

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#167: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#168: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#170: 
--- a/arch/alpha/kernel/irq.c	Fri Nov 28 09:00:39 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:LINE_SPACING: Missing a blank line after declarations
#178: FILE: arch/alpha/kernel/irq.c:256:
+	int len = cpumask_snprintf(page, count, irq_affinity[(long)data]);
+	if (count - len < 2)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#193: FILE: arch/alpha/kernel/irq.c:337:
+	int len = cpumask_snprintf(page, count, *(cpumask_t *)data);
+	if (count - len < 2)

WARNING:LINE_SPACING: Missing a blank line after declarations
#262: FILE: arch/i386/kernel/irq.c:911:
+	int len = cpumask_snprintf(page, count, irq_affinity[(long)data]);
+	if (count - len < 2)

WARNING:LINE_SPACING: Missing a blank line after declarations
#293: FILE: arch/i386/kernel/irq.c:952:
+	int len = cpumask_snprintf(page, count, *(cpumask_t *)data);
+	if (count - len < 2)

WARNING:LINE_SPACING: Missing a blank line after declarations
#370: FILE: arch/ia64/kernel/irq.c:937:
+	int len = cpumask_snprintf(page, count, irq_affinity[(long)data]);
+	if (count - len < 2)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#390: FILE: arch/ia64/kernel/irq.c:963:
+	err = cpumask_parse(buf, count - (buf-buffer), new_value);
 	                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#403: FILE: arch/ia64/kernel/irq.c:986:
+	int len = cpumask_snprintf(page, count, *(cpumask_t *)data);
+	if (count - len < 2)

WARNING:LINE_SPACING: Missing a blank line after declarations
#484: FILE: arch/mips/kernel/irq.c:837:
+	int len = cpumask_snprintf(page, count, irq_affinity[(long)data]);
+	if (count - len < 2)

WARNING:LINE_SPACING: Missing a blank line after declarations
#515: FILE: arch/mips/kernel/irq.c:875:
+	int len = cpumask_snprintf(page, count, *(cpumask_t *)data);
+	if (count - len < 2)

WARNING:LINE_SPACING: Missing a blank line after declarations
#556: FILE: arch/ppc/kernel/irq.c:576:
+	int len = cpumask_snprintf(page, count, irq_affinity[(long)data]);
+	if (count - len < 2)

WARNING:LINE_SPACING: Missing a blank line after declarations
#631: FILE: arch/ppc/kernel/irq.c:617:
+	int len = cpumask_snprintf(page, count, *(cpumask_t *)data);
+	if (count - len < 2)

WARNING:LINE_SPACING: Missing a blank line after declarations
#671: FILE: arch/ppc64/kernel/irq.c:659:
+	int len = cpumask_snprintf(page, count, irq_affinity[(long)data]);
+	if (count - len < 2)

WARNING:LINE_SPACING: Missing a blank line after declarations
#744: FILE: arch/ppc64/kernel/irq.c:697:
+	int len = cpumask_snprintf(page, count, *(cpumask_t *)data);
+	if (count - len < 2)

WARNING:LINE_SPACING: Missing a blank line after declarations
#799: FILE: arch/um/kernel/irq.c:579:
+	int len = cpumask_snprintf(page, count, irq_affinity[(long)data]);
+	if (count - len < 2)

WARNING:LINE_SPACING: Missing a blank line after declarations
#864: FILE: arch/um/kernel/irq.c:617:
+	int len = cpumask_snprintf(page, count, *(cpumask_t *)data);
+	if (count - len < 2)

WARNING:LINE_SPACING: Missing a blank line after declarations
#947: FILE: arch/x86_64/kernel/irq.c:813:
+	int len = cpumask_snprintf(page, count, irq_affinity[(long)data]);
+	if (count - len < 2)

WARNING:LINE_SPACING: Missing a blank line after declarations
#979: FILE: arch/x86_64/kernel/irq.c:851:
+	int len = cpumask_snprintf(page, count, *(cpumask_t *)data);
+	if (count - len < 2)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1023: FILE: drivers/base/node.c:25:
+	 * use seq_file or something to avoid buffer overrun risk. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1072: FILE: include/linux/cpumask.h:71:
+extern int __mask_snprintf_len(char *buf, unsigned int buflen,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1073: FILE: include/linux/cpumask.h:72:
+extern int __mask_snprintf_len(char *buf, unsigned int buflen,
+		const unsigned long *maskp, unsigned int maskbytes);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1078: FILE: include/linux/cpumask.h:77:
+extern int __mask_parse_len(const char __user *ubuf, unsigned int ubuflen,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1079: FILE: include/linux/cpumask.h:78:
+extern int __mask_parse_len(const char __user *ubuf, unsigned int ubuflen,
+	unsigned long *maskp, unsigned int maskbytes);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1101: FILE: lib/mask.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1102: FILE: lib/mask.c:2:
+ * lib/mask.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1169: FILE: lib/mask.c:69:
+#include <asm/uaccess.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1189: FILE: lib/mask.c:89:
+int __mask_snprintf_len(char *buf, unsigned int buflen,
+	const unsigned long *maskp, unsigned int maskbytes)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1192: FILE: lib/mask.c:92:
+	int i = maskbytes/sizeof(u32) - 1;
 	                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1199: FILE: lib/mask.c:99:
+		len += snprintf(buf+len, buflen-len, "%s%x", sep, wordp[i]);
 		                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1199: FILE: lib/mask.c:99:
+		len += snprintf(buf+len, buflen-len, "%s%x", sep, wordp[i]);
 		                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1241: FILE: lib/mask.c:141:
+int __mask_parse_len(const char __user *ubuf, unsigned int ubuflen,
+	unsigned long *maskp, unsigned int maskbytes)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1260: FILE: lib/mask.c:160:
+	i = j = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LINE_SPACING: Missing a blank line after declarations
#1263: FILE: lib/mask.c:163:
+		unsigned long long t;
+		if (j == maskbytes/sizeof(u32))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1263: FILE: lib/mask.c:163:
+		if (j == maskbytes/sizeof(u32))
 		                  ^

WARNING:CONSIDER_KSTRTO: simple_strtoull is obsolete, use kstrtoull instead
#1265: FILE: lib/mask.c:165:
+		t = simple_strtoull(p, 0, BASE);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LINE_SPACING: Missing a blank line after declarations
#1273: FILE: lib/mask.c:173:
+		u32 t = wordp[i];
+		wordp[i] = wordp[j];

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000322240.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 28 warnings, 12 checks, 1020 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000322240.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
