WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
The attached patch extends the get_sb() filesystem operation to take an extra

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#104: 
Signed-Off-By: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#316: FILE: drivers/isdn/capi/capifs.c:125:
+static int capifs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#334: FILE: drivers/misc/ibmasm/ibmasmfs.c:94:
+static int ibmasmfs_get_super(struct file_system_type *fst,
+			int flags, const char *name, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#353: FILE: drivers/oprofile/oprofilefs.c:276:
+static int oprofilefs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#371: FILE: drivers/usb/core/inode.c:547:
+static int usb_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#393: FILE: drivers/usb/gadget/inode.c:2071:
+	return get_sb_single (t, flags, opts, gadgetfs_fill_super, mnt);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#475: FILE: fs/adfs/super.c:474:
+static int adfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#494: FILE: fs/affs/super.c:528:
+static int affs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#578: FILE: fs/autofs/init.c:18:
+static int autofs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#596: FILE: fs/autofs4/init.c:18:
+static int autofs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#634: FILE: fs/bfs/inode.c:414:
+static int bfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#652: FILE: fs/binfmt_misc.c:745:
+static int bm_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#670: FILE: fs/block_dev.c:304:
+static int bd_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#726: FILE: fs/coda/inode.c:311:
+static int coda_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#744: FILE: fs/configfs/mount.c:107:
+static int configfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#762: FILE: fs/cramfs/inode.c:532:
+static int cramfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#821: FILE: fs/devpts/inode.c:134:
+static int devpts_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#839: FILE: fs/efs/super.c:22:
+static int efs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#890: FILE: fs/ext2/super.c:1091:
+static int ext2_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#908: FILE: fs/ext3/super.c:2650:
+static int ext3_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#926: FILE: fs/freevxfs/vxfs_super.c:245:
+static int vxfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1024: FILE: fs/hpfs/super.c:666:
+static int hpfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1063: FILE: fs/hugetlbfs/inode.c:727:
+static int hugetlbfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1100: FILE: fs/isofs/inode.c:1403:
+static int isofs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1119: FILE: fs/jffs/inode-v23.c:1789:
+static int jffs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#1233: FILE: fs/jffs2/super.c:225:
+						return jffs2_get_sb_mtd(fs_type, flags, dev_name, data, mtd, mnt);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1242: FILE: fs/jffs2/super.c:238:
+				return jffs2_get_sb_mtdnr(fs_type, flags, dev_name, data, mtdnr, mnt);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1279: FILE: fs/jfs/super.c:568:
+static int jfs_get_sb(struct file_system_type *fs_type, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1280: FILE: fs/jfs/super.c:569:
+static int jfs_get_sb(struct file_system_type *fs_type, 
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1300: FILE: fs/libfs.c:200:
+int get_sb_pseudo(struct file_system_type *fs_type, char *name,
+	struct super_operations *ops, unsigned long magic,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1340: FILE: fs/minix/inode.c:563:
+static int minix_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1384: FILE: fs/namespace.c:96:
+EXPORT_SYMBOL(simple_set_mnt);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1400: FILE: fs/ncpfs/inode.c:961:
+static int ncp_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1419: FILE: fs/nfs/inode.c:1747:
+static int nfs_clone_generic_sb(struct nfs_clone_mount *data,
+	struct super_block *(*fill_sb)(struct nfs_server *, struct nfs_clone_mount *),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1481: FILE: fs/nfs/inode.c:1823:
+static int nfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *raw_data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1562: FILE: fs/nfs/inode.c:1905:
+		dprintk("%s: couldn't start rpciod! Error = %d\n",
+				__FUNCTION__, error);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1562: FILE: fs/nfs/inode.c:1905:
+				__FUNCTION__, error);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1610: FILE: fs/nfs/inode.c:2037:
+static int nfs_clone_nfs_sb(struct file_system_type *fs_type,
+		int flags, const char *dev_name, void *raw_data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1625: FILE: fs/nfs/inode.c:2272:
+static int nfs4_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *raw_data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1679: FILE: fs/nfs/inode.c:2332:
+		dprintk("%s: couldn't start rpciod! Error = %d\n",
+				__FUNCTION__, error);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1679: FILE: fs/nfs/inode.c:2332:
+				__FUNCTION__, error);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1729: FILE: fs/nfs/inode.c:2484:
+static int nfs_clone_nfs4_sb(struct file_system_type *fs_type,
+		int flags, const char *dev_name, void *raw_data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1744: FILE: fs/nfs/inode.c:2688:
+static int nfs_referral_nfs4_sb(struct file_system_type *fs_type,
+		int flags, const char *dev_name, void *raw_data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1763: FILE: fs/nfsd/nfsctl.c:498:
+static int nfsd_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1781: FILE: fs/ntfs/super.c:3097:
+static int ntfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1800: FILE: fs/ocfs2/dlm/dlmfs.c:578:
+static int dlmfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1842: FILE: fs/openpromfs/inode.c:1058:
+static int openprom_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1881: FILE: fs/proc/root.c:30:
+static int proc_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1899: FILE: fs/qnx4/inode.c:565:
+static int qnx4_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1918: FILE: fs/ramfs/inode.c:189:
+int ramfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1927: FILE: fs/ramfs/inode.c:195:
+static int rootfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1930: FILE: fs/ramfs/inode.c:197:
+	return get_sb_nodev(fs_type, flags|MS_NOUSER, data, ramfs_fill_super,
 	                                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1967: FILE: fs/romfs/inode.c:611:
+static int romfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1986: FILE: fs/smbfs/inode.c:786:
+static int smb_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2012: FILE: fs/super.c:680:
+int get_sb_bdev(struct file_system_type *fs_type,
 	int flags, const char *dev_name, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2084: FILE: fs/super.c:754:
+int get_sb_nodev(struct file_system_type *fs_type,
 	int flags, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2117: FILE: fs/super.c:784:
+int get_sb_single(struct file_system_type *fs_type,
 	int flags, void *data,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2187: FILE: fs/super.c:839:
+	BUG_ON(!mnt->mnt_sb);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2188: FILE: fs/super.c:840:
+	BUG_ON(!mnt->mnt_sb->s_root);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2189: FILE: fs/super.c:841:
+	BUG_ON(!mnt->mnt_root);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2191: FILE: fs/super.c:843:
+ ^Ierror = security_sb_kern_mount(mnt->mnt_sb, secdata);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2191: FILE: fs/super.c:843:
+ ^Ierror = security_sb_kern_mount(mnt->mnt_sb, secdata);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2191: FILE: fs/super.c:843:
+ ^Ierror = security_sb_kern_mount(mnt->mnt_sb, secdata);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2232: FILE: fs/sysfs/mount.c:70:
+static int sysfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2250: FILE: fs/sysv/super.c:510:
+static int sysv_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2260: FILE: fs/sysv/super.c:517:
+static int v7_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2278: FILE: fs/udf/super.c:98:
+static int udf_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2296: FILE: fs/ufs/super.c:1315:
+static int ufs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

WARNING:SPACING: Unnecessary space before function pointer arguments
#2358: FILE: include/linux/fs.h:1273:
+	int (*get_sb) (struct file_system_type *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_system_type *' should also have an identifier name
#2358: FILE: include/linux/fs.h:1273:
+	int (*get_sb) (struct file_system_type *, int,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2358: FILE: include/linux/fs.h:1273:
+	int (*get_sb) (struct file_system_type *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2358: FILE: include/linux/fs.h:1273:
+	int (*get_sb) (struct file_system_type *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#2358: FILE: include/linux/fs.h:1273:
+	int (*get_sb) (struct file_system_type *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#2358: FILE: include/linux/fs.h:1273:
+	int (*get_sb) (struct file_system_type *, int,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2367: FILE: include/linux/fs.h:1281:
+extern int get_sb_bdev(struct file_system_type *fs_type,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2368: FILE: include/linux/fs.h:1282:
+extern int get_sb_bdev(struct file_system_type *fs_type,
 	int flags, const char *dev_name, void *data,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2373: FILE: include/linux/fs.h:1285:
+extern int get_sb_single(struct file_system_type *fs_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2374: FILE: include/linux/fs.h:1286:
+extern int get_sb_single(struct file_system_type *fs_type,
 	int flags, void *data,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2379: FILE: include/linux/fs.h:1289:
+extern int get_sb_nodev(struct file_system_type *fs_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2380: FILE: include/linux/fs.h:1290:
+extern int get_sb_nodev(struct file_system_type *fs_type,
 	int flags, void *data,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2393: FILE: include/linux/fs.h:1303:
+extern int get_sb_pseudo(struct file_system_type *, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_system_type *' should also have an identifier name
#2393: FILE: include/linux/fs.h:1303:
+extern int get_sb_pseudo(struct file_system_type *, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#2393: FILE: include/linux/fs.h:1303:
+extern int get_sb_pseudo(struct file_system_type *, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#2393: FILE: include/linux/fs.h:1303:
+extern int get_sb_pseudo(struct file_system_type *, char *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2394: FILE: include/linux/fs.h:1304:
+extern int get_sb_pseudo(struct file_system_type *, char *,
+	struct super_operations *ops, unsigned long,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2396: FILE: include/linux/fs.h:1306:
+extern int simple_set_mnt(struct vfsmount *mnt, struct super_block *sb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2410: FILE: include/linux/ramfs.h:5:
+extern int ramfs_get_sb(struct file_system_type *fs_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2411: FILE: include/linux/ramfs.h:6:
+extern int ramfs_get_sb(struct file_system_type *fs_type,
+	 int flags, const char *dev_name, void *data, struct vfsmount *mnt);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2486: FILE: mm/shmem.c:2235:
+static int shmem_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2504: FILE: net/socket.c:339:
+static int sockfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data, struct vfsmount *mnt)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000075996.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 22 warnings, 67 checks, 1940 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000075996.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
