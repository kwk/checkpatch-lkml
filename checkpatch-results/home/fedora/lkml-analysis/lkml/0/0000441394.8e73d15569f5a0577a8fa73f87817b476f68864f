WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#22: 
diff -ur linux-2.5/arch/alpha/mm/extable.c linux-mod/arch/alpha/mm/extable.c

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mp->ex_table_start"
#103: FILE: arch/arm/mm/extable.c:46:
+		if (mp->ex_table_start == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mp->ex_table_start"
#213: FILE: arch/i386/mm/extable.c:47:
+		if (mp->ex_table_start == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ap->dbe_table_start"
#329: FILE: arch/mips/kernel/traps.c:268:
+		if (ap->dbe_table_start == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mp->ex_table_start"
#366: FILE: arch/mips/mm/extable.c:46:
+		if (mp->ex_table_start == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ap->dbe_table_start"
#449: FILE: arch/mips64/sgi-ip22/ip22-berr.c:66:
+		if (ap->dbe_table_start == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ap->dbe_table_start"
#494: FILE: arch/mips64/sgi-ip27/ip27-berr.c:69:
+		if (ap->dbe_table_start == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mp->ex_table_start"
#652: FILE: arch/s390/mm/extable.c:56:
+		if (mp->ex_table_start == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mp->ex_table_start"
#742: FILE: arch/s390x/mm/extable.c:53:
+		if (mp->ex_table_start == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mp->ex_table_start"
#767: FILE: arch/sh/mm/extable.c:49:
+		if (mp->ex_table_start == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mp->ex_table_start"
#805: FILE: arch/sparc/mm/extable.c:74:
+		if (mp->ex_table_start == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mp->ex_table_start"
#845: FILE: arch/sparc64/mm/extable.c:74:
+		if (mp->ex_table_start == NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#882: FILE: arch/x86_64/kernel/traps.c:128:
+   mod_for_each_locked(mod) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#891: FILE: arch/x86_64/kernel/traps.c:136:
+   } mod_for_done_locked$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mp->ex_table_start"
#935: FILE: arch/x86_64/mm/extable.c:64:
+		if (mp->ex_table_start == NULL)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mod' - possible side-effects?
#956: FILE: include/linux/module.h:311:
+#define mod_for_each_locked(mod)					\
+{									\
+	unsigned long __flags;						\
+	spin_lock_irqsave(&modlist_lock, __flags);			\
+	for (mod = module_list; mod != NULL; mod = mod->next) {		\
+		if (!(mod->flags & (MOD_RUNNING|MOD_INITIALIZING)))	\
+			continue;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#956: FILE: include/linux/module.h:311:
+#define mod_for_each_locked(mod)					\
+{									\
+	unsigned long __flags;						\
+	spin_lock_irqsave(&modlist_lock, __flags);			\
+	for (mod = module_list; mod != NULL; mod = mod->next) {		\
+		if (!(mod->flags & (MOD_RUNNING|MOD_INITIALIZING)))	\
+			continue;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mod"
#960: FILE: include/linux/module.h:315:
+	for (mod = module_list; mod != NULL; mod = mod->next) {		\

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#961: FILE: include/linux/module.h:316:
+		if (!(mod->flags & (MOD_RUNNING|MOD_INITIALIZING)))	\
 		                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#963: FILE: include/linux/module.h:318:
+#define mod_for_done_locked						\
+	}								\
+	spin_unlock_irqrestore(&modlist_lock, __flags);			\
+}

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000441394.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 4 warnings, 15 checks, 833 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000441394.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
