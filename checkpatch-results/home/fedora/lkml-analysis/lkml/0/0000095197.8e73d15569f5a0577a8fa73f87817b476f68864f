CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#79: FILE: include/linux/fs.h:1385:
+extern int bd_claim_by_kobject(struct block_device *, void *, struct kobject *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#79: FILE: include/linux/fs.h:1385:
+extern int bd_claim_by_kobject(struct block_device *, void *, struct kobject *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#79: FILE: include/linux/fs.h:1385:
+extern int bd_claim_by_kobject(struct block_device *, void *, struct kobject *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#79: FILE: include/linux/fs.h:1385:
+extern int bd_claim_by_kobject(struct block_device *, void *, struct kobject *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#80: FILE: include/linux/fs.h:1386:
+extern void bd_release_from_kobject(struct block_device *, struct kobject *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#80: FILE: include/linux/fs.h:1386:
+extern void bd_release_from_kobject(struct block_device *, struct kobject *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#80: FILE: include/linux/fs.h:1386:
+extern void bd_release_from_kobject(struct block_device *, struct kobject *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#100: FILE: fs/block_dev.c:499:
+ *     If a kobject is passed to bd_claim_by_kobject() $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#114: FILE: fs/block_dev.c:513:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#115: FILE: fs/block_dev.c:514:
+static inline struct kobject * bdev_get_kobj(struct block_device *bdev)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#123: FILE: fs/block_dev.c:522:
+static inline struct kobject * bdev_get_holder(struct block_device *bdev)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#156: FILE: fs/block_dev.c:555:
+static inline int bd_holder_grab_dirs(struct block_device *bdev,
+			struct bd_holder *bo)

ERROR:CODE_INDENT: code indent should use tabs where possible
#218: FILE: fs/block_dev.c:617:
+        struct bd_holder *tmp;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: fs/block_dev.c:617:
+        struct bd_holder *tmp;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#240: FILE: fs/block_dev.c:639:
+static struct bd_holder *del_bd_holder(struct block_device *bdev,
+					struct kobject *kobj)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#247: FILE: fs/block_dev.c:646:
+			BUG_ON(bo->count < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#284: FILE: fs/block_dev.c:683:
+EXPORT_SYMBOL(bd_claim_by_kobject);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#295: FILE: fs/block_dev.c:694:
+	if ((bo = del_bd_holder(bdev, kobj)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#300: FILE: fs/block_dev.c:699:
+EXPORT_SYMBOL(bd_release_from_kobject);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000095197.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 9 warnings, 5 checks, 233 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000095197.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
