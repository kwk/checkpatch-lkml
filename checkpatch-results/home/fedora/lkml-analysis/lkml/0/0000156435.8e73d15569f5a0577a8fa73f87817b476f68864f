WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
This adds support for the x86_64 architecture.  In addition to what was noted

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#61: FILE: arch/x86_64/kernel/kgdb.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'Origianl' may be misspelled - perhaps 'Original'?
#86: FILE: arch/x86_64/kernel/kgdb.c:26:
+ *  Origianl kgdb, compatibility with 2.1.xx kernel by
     ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/kdebug.h> instead of <asm/kdebug.h>
#104: FILE: arch/x86_64/kernel/kgdb.c:44:
+#include <asm/kdebug.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#110: FILE: arch/x86_64/kernel/kgdb.c:50:
+/* Likewise, the vector number here (since GDB only gets the signal
+   number through the usual means, and that's not very specific).  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#110: FILE: arch/x86_64/kernel/kgdb.c:50:
+   number through the usual means, and that's not very specific).  */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#113: FILE: arch/x86_64/kernel/kgdb.c:53:
+extern atomic_t cpu_doing_single_step;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#179: FILE: arch/x86_64/kernel/kgdb.c:119:
+#if 0				/* can't change these */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#189: FILE: arch/x86_64/kernel/kgdb.c:129:
+	unsigned enabled;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#190: FILE: arch/x86_64/kernel/kgdb.c:130:
+	unsigned type;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#191: FILE: arch/x86_64/kernel/kgdb.c:131:
+	unsigned len;

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#206: FILE: arch/x86_64/kernel/kgdb.c:146:
+	asm volatile ("movq %%db7, %0\n":"=r" (dr7):);
 	                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxB)
#206: FILE: arch/x86_64/kernel/kgdb.c:146:
+	asm volatile ("movq %%db7, %0\n":"=r" (dr7):);
 	                                           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#209: FILE: arch/x86_64/kernel/kgdb.c:149:
+		unsigned long addr0, addr1, addr2, addr3;
+		asm volatile ("movq %%db0, %0\n"

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#212: FILE: arch/x86_64/kernel/kgdb.c:152:
+			      "movq %%db3, %3\n":"=r" (addr0), "=r"(addr1),
 			                        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxB)
#213: FILE: arch/x86_64/kernel/kgdb.c:153:
+			      "=r"(addr2), "=r"(addr3):);
 			                              ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#252: FILE: arch/x86_64/kernel/kgdb.c:192:
+	if (correctit) {
+		asm volatile ("movq %0, %%db7\n"::"r" (dr7));
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#260: FILE: arch/x86_64/kernel/kgdb.c:200:
+	int i, idx = -1;
+	for (i = 0; i < 4; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#276: FILE: arch/x86_64/kernel/kgdb.c:216:
+	int i, idx = -1;
+	for (i = 0; i < 4; i++) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#292: FILE: arch/x86_64/kernel/kgdb.c:232:
+int remove_hw_break(unsigned breakno)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#294: FILE: arch/x86_64/kernel/kgdb.c:234:
+	if (!breakinfo[breakno].enabled) {
+		return -1;
+	}

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#301: FILE: arch/x86_64/kernel/kgdb.c:241:
+int set_hw_break(unsigned breakno, unsigned type, unsigned len, unsigned addr)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#301: FILE: arch/x86_64/kernel/kgdb.c:241:
+int set_hw_break(unsigned breakno, unsigned type, unsigned len, unsigned addr)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#301: FILE: arch/x86_64/kernel/kgdb.c:241:
+int set_hw_break(unsigned breakno, unsigned type, unsigned len, unsigned addr)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#301: FILE: arch/x86_64/kernel/kgdb.c:241:
+int set_hw_break(unsigned breakno, unsigned type, unsigned len, unsigned addr)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#303: FILE: arch/x86_64/kernel/kgdb.c:243:
+	if (breakinfo[breakno].enabled) {
+		return -1;
+	}

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#316: FILE: arch/x86_64/kernel/kgdb.c:256:
+	asm volatile ("movq %0,%%db7": /* no output */ :"r" (0UL));
 	                             ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#316: FILE: arch/x86_64/kernel/kgdb.c:256:
+	asm volatile ("movq %0,%%db7": /* no output */ :"r" (0UL));
 	                                               ^

CHECK:CAMELCASE: Avoid CamelCase: <remcomInBuffer>
#332: FILE: arch/x86_64/kernel/kgdb.c:272:
+			       char *remcomInBuffer, char *remcomOutBuffer,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <remcomOutBuffer>
#332: FILE: arch/x86_64/kernel/kgdb.c:272:
+			       char *remcomInBuffer, char *remcomOutBuffer,

CHECK:CAMELCASE: Avoid CamelCase: <newPC>
#338: FILE: arch/x86_64/kernel/kgdb.c:278:
+	int newPC;

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#344: FILE: arch/x86_64/kernel/kgdb.c:284:
+		/* try to read optional parameter, pc unchanged if no parm */
 		                                                      ^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#362: FILE: arch/x86_64/kernel/kgdb.c:302:
+
+		}

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#364: FILE: arch/x86_64/kernel/kgdb.c:304:
+		asm volatile ("movq %%db6, %0\n":"=r" (dr6));
 		                                ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#380: FILE: arch/x86_64/kernel/kgdb.c:320:
+		return (0);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:LINE_SPACING: Missing a blank line after declarations
#416: FILE: arch/x86_64/kernel/kgdb.c:356:
+	unsigned long end = (unsigned long)cpu_pda[cpu].irqstackptr;
+	if (rsp <= end && rsp >= end - IRQSTACKSIZE + 8) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#427: FILE: arch/x86_64/kernel/kgdb.c:367:
+	struct tss_struct *init_tss = &__get_cpu_var(init_tss);
+	for (i = 0; i < N_EXCEPTION_STACKS; i++)

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#428: FILE: arch/x86_64/kernel/kgdb.c:368:
+		if (rsp >= init_tss[cpu].ist[i] &&
 		                         ^^^

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#429: FILE: arch/x86_64/kernel/kgdb.c:369:
+		    rsp <= init_tss[cpu].ist[i] + EXCEPTION_STKSZ) {
 		                         ^^^

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#431: FILE: arch/x86_64/kernel/kgdb.c:371:
+			    (void *)init_tss[cpu].ist[i] + EXCEPTION_STKSZ;
 			                          ^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#437: FILE: arch/x86_64/kernel/kgdb.c:377:
+void kgdb_shadowinfo(struct pt_regs *regs, char *buffer, unsigned threadid)

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#439: FILE: arch/x86_64/kernel/kgdb.c:379:
+	static char intr_desc[] = "Stack at interrupt entrypoint";

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#440: FILE: arch/x86_64/kernel/kgdb.c:380:
+	static char exc_desc[] = "Stack at exception entrypoint";

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#444: FILE: arch/x86_64/kernel/kgdb.c:384:
+	if ((stregs = in_interrupt_stack(regs->rsp, cpu)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#446: FILE: arch/x86_64/kernel/kgdb.c:386:
+	else if ((stregs = in_exception_stack(regs->rsp, cpu)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#455: FILE: arch/x86_64/kernel/kgdb.c:395:
+	if ((stregs = in_interrupt_stack(regs->rsp, cpu)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#457: FILE: arch/x86_64/kernel/kgdb.c:397:
+	else if ((stregs = in_exception_stack(regs->rsp, cpu)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#468: FILE: arch/x86_64/kernel/kgdb.c:408:
+	if ((stregs = in_interrupt_stack(regs->rsp, cpu)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#470: FILE: arch/x86_64/kernel/kgdb.c:410:
+	else if ((stregs = in_exception_stack(regs->rsp, cpu)))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#477: FILE: arch/x86_64/kernel/kgdb.c:417:
+ * spots. */

WARNING:TYPO_SPELLING: 'Userpace' may be misspelled - perhaps 'Userspace'?
#496: FILE: arch/x86_64/kernel/kgdb.c:436:
+		/* Userpace events, normal watchdog event, or spurious
 		   ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#497: FILE: arch/x86_64/kernel/kgdb.c:437:
+		 * debug exception.  Ignore. */

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#516: FILE: arch/x86_64/kernel/kgdb.c:456:
+struct kgdb_arch arch_kgdb_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#525: FILE: arch/x86_64/kernel/kgdb-jmp.S:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#526: FILE: arch/x86_64/kernel/kgdb-jmp.S:2:
+ * arch/x86_64/kernel/kgdb-jmp.S

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:SPACING: space required after that ',' (ctx:VxO)
#631: FILE: arch/x86_64/kernel/traps.c:911:
+	set_intr_gate(13,&general_protection);
 	                ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#631: FILE: arch/x86_64/kernel/traps.c:911:
+	set_intr_gate(13,&general_protection);
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#632: FILE: arch/x86_64/kernel/traps.c:912:
+	set_intr_gate(14,&page_fault);
 	                ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#632: FILE: arch/x86_64/kernel/traps.c:912:
+	set_intr_gate(14,&page_fault);
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#633: FILE: arch/x86_64/kernel/traps.c:913:
+	set_intr_gate(11,&segment_not_present);
 	                ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#633: FILE: arch/x86_64/kernel/traps.c:913:
+	set_intr_gate(11,&segment_not_present);
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#640: FILE: arch/x86_64/kernel/traps.c:920:
+	set_intr_gate(0,&divide_error);
 	               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#640: FILE: arch/x86_64/kernel/traps.c:920:
+	set_intr_gate(0,&divide_error);
 	                ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#675: FILE: include/asm-x86_64/kgdb.h:1:
+#ifdef __KERNEL__

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#710: FILE: include/asm-x86_64/kgdb.h:36:
+#define NUMREGBYTES		((_PS+1)*8)
                    		     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#710: FILE: include/asm-x86_64/kgdb.h:36:
+#define NUMREGBYTES		((_PS+1)*8)
                    		        ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#716: FILE: include/asm-x86_64/kgdb.h:42:
+ * a longer buffer is needed to list all threads. */

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#718: FILE: include/asm-x86_64/kgdb.h:44:
+#define BREAKPOINT()		asm("   int $3");

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#733: FILE: include/asm-x86_64/system.h:30:
+       asm volatile(".globl __switch_to_begin\n\t"^I^I^I^I    \$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#783: FILE: arch/x86_64/kernel/setup64.c:83:
+		__attribute__ ((aligned (SMP_CACHE_BYTES)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(SMP_CACHE_BYTES) over __attribute__((aligned(SMP_CACHE_BYTES)))
#783: FILE: arch/x86_64/kernel/setup64.c:83:
+		__attribute__ ((aligned (SMP_CACHE_BYTES)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#811: FILE: include/asm-x86_64/proto.h:13:
+extern void early_trap_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#812: FILE: include/asm-x86_64/proto.h:14:
+extern void early_setup_per_cpu_area(void);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#824: FILE: arch/x86_64/mm/fault.c:520:
+	if (notify_die(DIE_PAGE_FAULT, "no context", regs, error_code, 14,
+				SIGSEGV) == NOTIFY_STOP)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000156435.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 42 warnings, 13 checks, 728 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000156435.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
