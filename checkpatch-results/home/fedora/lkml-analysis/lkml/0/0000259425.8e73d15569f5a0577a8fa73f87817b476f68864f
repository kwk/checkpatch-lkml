WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#52: FILE: net/appletalk/ddp.c:110:
+extern void atalk_unregister_sysctl(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#63: FILE: net/atm/lec.c:74:
+static struct lec_arp_table* lec_arp_find(struct lec_priv *priv,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#64: FILE: net/atm/lec.c:75:
+static struct lec_arp_table* lec_arp_find(struct lec_priv *priv,
                                                      unsigned char *mac_addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#67: FILE: net/atm/lec.c:77:
+static int lec_arp_remove(struct lec_priv *priv,
 				     struct lec_arp_table *to_remove);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#75: FILE: net/atm/lec.c:1140:
+static int $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#106: FILE: net/bluetooth/l2cap.c:426:
+	struct l2cap_chan_list *l = &conn->chan_list;
+	write_lock(&l->lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#146: FILE: net/bluetooth/sco.c:152:
+static inline struct sock * sco_chan_get(struct sco_conn *conn)

WARNING:LINE_SPACING: Missing a blank line after declarations
#149: FILE: net/bluetooth/sco.c:155:
+	struct sock *sk = NULL;
+	sco_conn_lock(conn);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#167: FILE: net/bluetooth/sco.c:192:
+	if (conn->sk) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#215: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:865:
+/* $

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#216: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:866:
+/* 
+ * Fast checksum update for possibly oddly-aligned UDP byte, from the

ERROR:CODE_INDENT: code indent should use tabs where possible
#220: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:870:
+                      const unsigned char *optr,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:870:
+                      const unsigned char *optr,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:871:
+                      const unsigned char *nptr,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:871:
+                      const unsigned char *nptr,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#222: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:872:
+                      int odd)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:872:
+                      int odd)$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#225: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:875:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#227: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:877:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:WxO)
#228: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:878:
+	x =~ x & 0xFFFF;
 	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '~' (ctx:OxW)
#228: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:878:
+	x =~ x & 0xFFFF;
 	   ^

ERROR:SPACING: space prohibited after that '~' (ctx:OxW)
#228: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:878:
+	x =~ x & 0xFFFF;
 	   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#229: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:879:
+^I$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#230: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:880:
+	if (odd) old = optr[0] * 256;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#231: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:881:
+	else old = optr[0];

ERROR:TRAILING_WHITESPACE: trailing whitespace
#232: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:882:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#238: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:888:
+^I$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#239: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:889:
+	if (odd) new = nptr[0] * 256;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#240: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:890:
+	else new = nptr[0];

ERROR:TRAILING_WHITESPACE: trailing whitespace
#241: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:891:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#247: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:897:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:WxO)
#248: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:898:
+	x =~ x & 0xFFFF;
 	  ^

ERROR:SPACING: space required before that '~' (ctx:OxW)
#248: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:898:
+	x =~ x & 0xFFFF;
 	   ^

ERROR:SPACING: space prohibited after that '~' (ctx:OxW)
#248: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:898:
+	x =~ x & 0xFFFF;
 	   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:903:
+/* $

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#254: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:904:
+/* 
+ * Mangle IP address.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#255: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:905:
+ * ^I- begin points to the start of the snmp messgae$

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#258: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:908:
+static void inline mangle_address(unsigned char *begin,

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:CODE_INDENT: code indent should use tabs where possible
#259: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:909:
+                                  unsigned char *addr,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:909:
+                                  unsigned char *addr,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#260: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:910:
+                                  const struct oct1_map *map,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#260: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:910:
+                                  const struct oct1_map *map,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#261: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:911:
+                                  u_int16_t *check)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:911:
+                                  u_int16_t *check)$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'u_int32_t'
#264: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:914:
+		u_int32_t old;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#265: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:915:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#268: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:918:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#270: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:920:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#274: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:924:
+^I^I^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#276: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:926:
+^I^I^I          &map->from, &map->to, odd);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#277: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:927:
+^I^I^I          $

ERROR:CODE_INDENT: code indent should use tabs where possible
#277: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:927:
+^I^I^I          $

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#278: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:928:
+			          
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#279: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:929:
+^I^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#281: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:931:
+			printk(KERN_DEBUG "bsalg: mapped %u.%u.%u.%u to "

WARNING:SPLIT_STRING: quoted string split across lines
#282: FILE: net/ipv4/netfilter/ip_nat_snmp_basic.c:932:
+			printk(KERN_DEBUG "bsalg: mapped %u.%u.%u.%u to "
+			       "%u.%u.%u.%u\n", NIPQUAD(old), NIPQUAD(*addr));

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct lsap_cb *' should also have an identifier name
#393: FILE: include/net/irda/timer.h:86:
+void irlmp_start_watchdog_timer(struct lsap_cb *, int timeout);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct irlmp_cb *' should also have an identifier name
#394: FILE: include/net/irda/timer.h:87:
+void irlmp_start_discovery_timer(struct irlmp_cb *, int timeout);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct lap_cb *' should also have an identifier name
#395: FILE: include/net/irda/timer.h:88:
+void irlmp_start_idle_timer(struct lap_cb *, int timeout);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#396: FILE: include/net/irda/timer.h:89:
+void irlmp_stop_idle_timer(struct lap_cb *self); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#407: FILE: include/net/irda/irlmp_frame.h:43:
+void irlmp_send_data_pdu(struct lap_cb *self, __u8 dlsap, __u8 slsap, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#408: FILE: include/net/irda/irlmp_frame.h:44:
+void irlmp_send_data_pdu(struct lap_cb *self, __u8 dlsap, __u8 slsap, 
 				int expedited, struct sk_buff *skb);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#430: FILE: net/irda/wrapper.c:67:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#432: FILE: net/irda/wrapper.c:69:
+static inline int stuff_byte(__u8 byte, __u8 *buf) $

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#435: FILE: net/irda/wrapper.c:72:
+	case BOF: /* FALLTHROUGH */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#436: FILE: net/irda/wrapper.c:73:
+	case EOF: /* FALLTHROUGH */

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#440: FILE: net/irda/wrapper.c:77:
+		buf[1] = byte^IRDA_TRANS;    /* Complement bit 5 */
 		             ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000259425.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 41 errors, 20 warnings, 6 checks, 411 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000259425.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
