WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#65: FILE: kernel/lockdep_proc.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#66: FILE: kernel/lockdep_proc.c:2:
+ * kernel/lockdep_proc.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#107: FILE: kernel/lockdep_proc.c:43:
+		seq_printf(m, "all lock types:\n");

ERROR:SPACING: space required before the open brace '{'
#168: FILE: kernel/lockdep_proc.c:104:
+	} else{

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#180: FILE: kernel/lockdep_proc.c:116:
+static struct seq_operations lockdep_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#190: FILE: kernel/lockdep_proc.c:126:
+	int res = seq_open(file, &lockdep_ops);
+	if (!res) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: kernel/lockdep_proc.c:131:
+			m->private = list_entry(all_lock_types.next,
+					struct lock_type, lock_entry);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#202: FILE: kernel/lockdep_proc.c:138:
+static struct file_operations proc_lockdep_operations = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#222: FILE: kernel/lockdep_proc.c:158:
+	seq_printf(m, " chain lookup misses:           %11u\n",
+		debug_atomic_read(&chain_lookup_misses));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: kernel/lockdep_proc.c:160:
+	seq_printf(m, " chain lookup hits:             %11u\n",
+		debug_atomic_read(&chain_lookup_hits));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#226: FILE: kernel/lockdep_proc.c:162:
+	seq_printf(m, " cyclic checks:                 %11u\n",
+		debug_atomic_read(&nr_cyclic_checks));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#228: FILE: kernel/lockdep_proc.c:164:
+	seq_printf(m, " cyclic-check recursions:       %11u\n",
+		debug_atomic_read(&nr_cyclic_check_recursions));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#230: FILE: kernel/lockdep_proc.c:166:
+	seq_printf(m, " find-mask forwards checks:     %11u\n",
+		debug_atomic_read(&nr_find_usage_forwards_checks));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#232: FILE: kernel/lockdep_proc.c:168:
+	seq_printf(m, " find-mask forwards recursions: %11u\n",
+		debug_atomic_read(&nr_find_usage_forwards_recursions));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#234: FILE: kernel/lockdep_proc.c:170:
+	seq_printf(m, " find-mask backwards checks:    %11u\n",
+		debug_atomic_read(&nr_find_usage_backwards_checks));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#236: FILE: kernel/lockdep_proc.c:172:
+	seq_printf(m, " find-mask backwards recursions:%11u\n",
+		debug_atomic_read(&nr_find_usage_backwards_recursions));

WARNING:TYPO_SPELLING: 'ons' may be misspelled - perhaps 'owns'?
#240: FILE: kernel/lockdep_proc.c:176:
+	seq_printf(m, " redundant hardirq ons:         %11u\n", hr1);
 	                                  ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'ons' may be misspelled - perhaps 'owns'?
#244: FILE: kernel/lockdep_proc.c:180:
+	seq_printf(m, " redundant softirq ons:         %11u\n", sr1);
 	                                  ^^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#262: FILE: kernel/lockdep_proc.c:198:
+	list_for_each_entry(type, &all_lock_types, lock_entry) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#298: FILE: kernel/lockdep_proc.c:234:
+	seq_printf(m, " lock-types:                    %11lu [max: %lu]\n",
+			nr_lock_types, MAX_LOCKDEP_KEYS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#300: FILE: kernel/lockdep_proc.c:236:
+	seq_printf(m, " direct dependencies:           %11lu [max: %lu]\n",
+			nr_list_entries, MAX_LOCKDEP_ENTRIES);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#302: FILE: kernel/lockdep_proc.c:238:
+	seq_printf(m, " indirect dependencies:         %11lu\n",
+			sum_forward_deps);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#311: FILE: kernel/lockdep_proc.c:247:
+	seq_printf(m, " all direct dependencies:       %11lu\n",
+			nr_irq_unsafe * nr_irq_safe +

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#323: FILE: kernel/lockdep_proc.c:259:
+	seq_printf(m, " dependency chains:             %11lu [max: %lu]\n",
+			nr_lock_chains, MAX_LOCKDEP_CHAINS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#327: FILE: kernel/lockdep_proc.c:263:
+	seq_printf(m, " in-hardirq chains:             %11u\n",
+			nr_hardirq_chains);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#329: FILE: kernel/lockdep_proc.c:265:
+	seq_printf(m, " in-softirq chains:             %11u\n",
+			nr_softirq_chains);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#332: FILE: kernel/lockdep_proc.c:268:
+	seq_printf(m, " in-process chains:             %11u\n",
+			nr_process_chains);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#334: FILE: kernel/lockdep_proc.c:270:
+	seq_printf(m, " stack-trace entries:           %11lu [max: %lu]\n",
+			nr_stack_trace_entries, MAX_STACK_TRACE_ENTRIES);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#336: FILE: kernel/lockdep_proc.c:272:
+	seq_printf(m, " combined max dependencies:     %11u\n",
+			(nr_hardirq_chains + 1) *

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: kernel/lockdep_proc.c:277:
+	seq_printf(m, " hardirq-safe locks:            %11lu\n",
+			nr_hardirq_safe);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#343: FILE: kernel/lockdep_proc.c:279:
+	seq_printf(m, " hardirq-unsafe locks:          %11lu\n",
+			nr_hardirq_unsafe);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#345: FILE: kernel/lockdep_proc.c:281:
+	seq_printf(m, " softirq-safe locks:            %11lu\n",
+			nr_softirq_safe);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#347: FILE: kernel/lockdep_proc.c:283:
+	seq_printf(m, " softirq-unsafe locks:          %11lu\n",
+			nr_softirq_unsafe);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#349: FILE: kernel/lockdep_proc.c:285:
+	seq_printf(m, " irq-safe locks:                %11lu\n",
+			nr_irq_safe);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#351: FILE: kernel/lockdep_proc.c:287:
+	seq_printf(m, " irq-unsafe locks:              %11lu\n",
+			nr_irq_unsafe);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#354: FILE: kernel/lockdep_proc.c:290:
+	seq_printf(m, " hardirq-read-safe locks:       %11lu\n",
+			nr_hardirq_read_safe);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#356: FILE: kernel/lockdep_proc.c:292:
+	seq_printf(m, " hardirq-read-unsafe locks:     %11lu\n",
+			nr_hardirq_read_unsafe);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#358: FILE: kernel/lockdep_proc.c:294:
+	seq_printf(m, " softirq-read-safe locks:       %11lu\n",
+			nr_softirq_read_safe);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#360: FILE: kernel/lockdep_proc.c:296:
+	seq_printf(m, " softirq-read-unsafe locks:     %11lu\n",
+			nr_softirq_read_unsafe);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#362: FILE: kernel/lockdep_proc.c:298:
+	seq_printf(m, " irq-read-safe locks:           %11lu\n",
+			nr_irq_read_safe);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#364: FILE: kernel/lockdep_proc.c:300:
+	seq_printf(m, " irq-read-unsafe locks:         %11lu\n",
+			nr_irq_read_unsafe);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#367: FILE: kernel/lockdep_proc.c:303:
+	seq_printf(m, " uncategorized locks:           %11lu\n",
+			nr_uncategorized);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: kernel/lockdep_proc.c:305:
+	seq_printf(m, " unused locks:                  %11lu\n",
+			nr_unused);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#371: FILE: kernel/lockdep_proc.c:307:
+	seq_printf(m, " max locking depth:             %11u\n",
+			max_lockdep_depth);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#373: FILE: kernel/lockdep_proc.c:309:
+	seq_printf(m, " max recursion depth:           %11u\n",
+			max_recursion_depth);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#376: FILE: kernel/lockdep_proc.c:312:
+	seq_printf(m, " debug_locks:                   %11u\n",
+			debug_locks);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#386: FILE: kernel/lockdep_proc.c:322:
+static struct file_operations proc_lockdep_stats_operations = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#397: FILE: kernel/lockdep_proc.c:333:
+	entry = create_proc_entry("lockdep", S_IRUSR, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#401: FILE: kernel/lockdep_proc.c:337:
+	entry = create_proc_entry("lockdep_stats", S_IRUSR, NULL);

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#408: FILE: kernel/lockdep_proc.c:344:
+__initcall(lockdep_proc_init);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000073423.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 12 warnings, 37 checks, 354 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000073423.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
