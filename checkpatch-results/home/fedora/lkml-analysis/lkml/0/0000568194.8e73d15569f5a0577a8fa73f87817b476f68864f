CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dev' may be better as '(dev)' to avoid precedence issues
#45: FILE: include/linux/netdevice.h:151:
+#define SET_NETDEVICE_OWNER(dev)	\
+	do { dev->owner = THIS_MODULE; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#45: FILE: include/linux/netdevice.h:151:
+#define SET_NETDEVICE_OWNER(dev)	\
+	do { dev->owner = THIS_MODULE; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#77: FILE: include/linux/module.h:158:
+#endif $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#101: FILE: net/core/dev.c:673:
+^I  ^I^Iret = dev->open(dev);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#101: FILE: net/core/dev.c:673:
+^I  ^I^Iret = dev->open(dev);$

CHECK:BRACES: braces {} should be used on all arms of this statement
#103: FILE: net/core/dev.c:675:
+		if (try_inc_mod_count(dev->owner)) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#105: FILE: net/core/dev.c:677:
+^I^I  ^I^Iif ((ret = dev->open(dev)) != 0)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#105: FILE: net/core/dev.c:677:
+^I^I  ^I^Iif ((ret = dev->open(dev)) != 0)$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#105: FILE: net/core/dev.c:677:
+		  		if ((ret = dev->open(dev)) != 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: Unbalanced braces around else statement
#108: FILE: net/core/dev.c:680:
+		} else

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#121: FILE: net/core/dev.c:800:
+	/*
+	 * Drop the module refcount

WARNING:BRACES: braces {} are not necessary for single statement blocks
#123: FILE: net/core/dev.c:802:
+	if (dev->owner) {
+		__MOD_DEC_USE_COUNT(dev->owner);
+	}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000568194.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 5 warnings, 3 checks, 101 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000568194.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
