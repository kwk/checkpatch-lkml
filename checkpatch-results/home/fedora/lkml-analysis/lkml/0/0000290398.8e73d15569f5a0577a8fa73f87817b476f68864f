WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
diff -ruN ppc64-linux-2.4/include/linux/compiler.h ppc64-linux-2.4.used/include/linux/compiler.h

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __used over __attribute__((__used__))
#54: FILE: include/linux/compiler.h:20:
+# define __attribute_used__	__attribute__((__used__))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#56: FILE: include/linux/compiler.h:22:
+# define __attribute_used__	__attribute__((__unused__))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#59: FILE: include/linux/compiler.h:25:
+#define __attribute_used__	__attribute__((__unused__))

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#90: FILE: include/linux/init.h:71:
+	static struct kernel_param __setup_##fn __attribute_used__ __initsetup = { __setup_str_##fn, fn }

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space prohibited after that open parenthesis '('
#99: FILE: include/linux/init.h:80:
+#define __exit		__attribute_used__ __attribute__ (( __section__(".text.exit")))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#99: FILE: include/linux/init.h:80:
+#define __exit		__attribute_used__ __attribute__ (( __section__(".text.exit")))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".text.exit") over __attribute__((__section__(".text.exit")))
#99: FILE: include/linux/init.h:80:
+#define __exit		__attribute_used__ __attribute__ (( __section__(".text.exit")))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#105: FILE: include/linux/init.h:82:
+#define __exitdata	__attribute_used__ __attribute__ ((__section__ (".data.exit")))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#105: FILE: include/linux/init.h:82:
+#define __exitdata	__attribute_used__ __attribute__ ((__section__ (".data.exit")))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.exit") over __attribute__((__section__(".data.exit")))
#105: FILE: include/linux/init.h:82:
+#define __exitdata	__attribute_used__ __attribute__ ((__section__ (".data.exit")))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#106: FILE: include/linux/init.h:83:
+#define __initsetup	__attribute_used__ __attribute__ ((__section__ (".setup.init")))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#106: FILE: include/linux/init.h:83:
+#define __initsetup	__attribute_used__ __attribute__ ((__section__ (".setup.init")))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".setup.init") over __attribute__((__section__(".setup.init")))
#106: FILE: include/linux/init.h:83:
+#define __initsetup	__attribute_used__ __attribute__ ((__section__ (".setup.init")))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#107: FILE: include/linux/init.h:84:
+#define __init_call	__attribute_used__ __attribute__ ((__section__ (".initcall.init")))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#107: FILE: include/linux/init.h:84:
+#define __init_call	__attribute_used__ __attribute__ ((__section__ (".initcall.init")))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".initcall.init") over __attribute__((__section__(".initcall.init")))
#107: FILE: include/linux/init.h:84:
+#define __init_call	__attribute_used__ __attribute__ ((__section__ (".initcall.init")))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#108: FILE: include/linux/init.h:85:
+#define __exit_call	__attribute_used__ __attribute__ ((__section__ (".exitcall.exit")))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#108: FILE: include/linux/init.h:85:
+#define __exit_call	__attribute_used__ __attribute__ ((__section__ (".exitcall.exit")))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".exitcall.exit") over __attribute__((__section__(".exitcall.exit")))
#108: FILE: include/linux/init.h:85:
+#define __exit_call	__attribute_used__ __attribute__ ((__section__ (".exitcall.exit")))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: include/linux/module.h:257:
+  __attribute_used__ = sizeof(struct gtype##_id); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: include/linux/module.h:259:
+  __attribute_used__ = name$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: include/linux/module.h:322:
+  __attribute_used__ __attribute__ ((__section__(".data.exit"))) = name$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.exit") over __attribute__((__section__(".data.exit")))
#132: FILE: include/linux/module.h:322:
+  __attribute_used__ __attribute__ ((__section__(".data.exit"))) = name

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000290398.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 18 warnings, 0 checks, 76 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000290398.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
