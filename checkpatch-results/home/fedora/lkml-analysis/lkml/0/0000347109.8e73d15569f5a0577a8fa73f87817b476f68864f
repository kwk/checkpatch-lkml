WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#58: 
--- linux-2.6.0-test2-bk8/net/atm/proc.c~atm-proc-seq-lec-conversion	Fri Aug  8 20:29:31 2003

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#66: FILE: net/atm/proc.c:338:
+static char* lec_arp_get_status_string(unsigned char status)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#91: FILE: net/atm/proc.c:340:
+	static char *lec_arp_status_string[] = {

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#111: FILE: net/atm/proc.c:360:
+	seq_printf(seq, " ");

ERROR:CODE_INDENT: code indent should use tabs where possible
#119: FILE: net/atm/proc.c:368:
+^I        seq_printf(seq, "        ");$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#119: FILE: net/atm/proc.c:368:
+	        seq_printf(seq, "        ");

ERROR:CODE_INDENT: code indent should use tabs where possible
#142: FILE: net/atm/proc.c:373:
+        seq_putc(seq, '\n');$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: net/atm/proc.c:373:
+        seq_putc(seq, '\n');$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#317: FILE: net/atm/proc.c:801:
+^Ireturn v; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#331: FILE: net/atm/proc.c:815:
+	return *pos ? atm_lec_get_idx(state, *pos) : (void*)1;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#356: FILE: net/atm/proc.c:840:
+^Istatic char atm_lec_banner[] = "Itf  MAC          ATM destination" $

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#356: FILE: net/atm/proc.c:840:
+	static char atm_lec_banner[] = "Itf  MAC          ATM destination" 

WARNING:SPLIT_STRING: quoted string split across lines
#357: FILE: net/atm/proc.c:841:
+	static char atm_lec_banner[] = "Itf  MAC          ATM destination" 
+		"                          Status            Flags "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#358: FILE: net/atm/proc.c:842:
+		"                          Status            Flags "
+		"VPI/VCI Recv VPI/VCI\n";

CHECK:BRACES: braces {} should be used on all arms of this statement
#360: FILE: net/atm/proc.c:844:
+	if (v == (void *)1)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#362: FILE: net/atm/proc.c:846:
+	else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#364: FILE: net/atm/proc.c:848:
+^I^Istruct net_device *dev = state->dev; $

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#374: FILE: net/atm/proc.c:856:
+static struct seq_operations atm_lec_seq_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#414: FILE: net/atm/proc.c:896:
+static struct file_operations atm_seq_lec_fops = {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000347109.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 10 warnings, 2 checks, 371 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000347109.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
