WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#30: 
The following patch makes the kernel preemptable.
                                     ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#57: 
diff -u --recursive linux-2.4-prerelease.org/arch/i386/kernel/apic.c linux-2.4-prerelease/arch/i386/kernel/apic.c

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#94: FILE: arch/i386/kernel/entry.S:82:
+preemptable = 56
 ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#105: FILE: arch/i386/kernel/entry.S:210:
+	xaddl %edx, preemptable(%ebx)
 	            ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#114: FILE: arch/i386/kernel/entry.S:221:
+	cmpl $0, %edx			# task is preemptable ?
 	             			          ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#120: FILE: arch/i386/kernel/entry.S:227:
+#if 0^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#125: FILE: arch/i386/kernel/entry.S:232:
+#endif^I$

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#129: FILE: arch/i386/kernel/entry.S:236:
+	decl preemptable(%ebx)	
 	     ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#129: FILE: arch/i386/kernel/entry.S:236:
+^Idecl preemptable(%ebx)^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#140: FILE: arch/i386/kernel/entry.S:290:
+ * At that point the preemption is disabled $

WARNING:TYPO_SPELLING: 'Reenable' may be misspelled - perhaps 'Re-enable'?
#142: FILE: arch/i386/kernel/entry.S:292:
+ * Reenable the preemption, verify that the current thread 
    ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#142: FILE: arch/i386/kernel/entry.S:292:
+ * Reenable the preemption, verify that the current thread $

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#143: FILE: arch/i386/kernel/entry.S:293:
+ * is preemptable and check for a pending scheduling request.
       ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#144: FILE: arch/i386/kernel/entry.S:294:
+ */ ^I^I$

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#153: FILE: arch/i386/kernel/entry.S:297:
+	cmpl $1, preemptable(%ebx)
 	         ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#158: FILE: arch/i386/kernel/entry.S:302:
+^I$

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#166: FILE: arch/i386/kernel/entry.S:311:
+	decl preemptable(%ebx)
 	     ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#176: FILE: arch/i386/kernel/entry.S:344:
+ * In addition, some of them (page_fault) are not reentrant $

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#179: FILE: arch/i386/kernel/entry.S:347:
+	incl preemptable(%ebx)
 	     ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#180: FILE: arch/i386/kernel/entry.S:348:
+^Isti^I$

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#188: FILE: arch/i386/kernel/entry.S:367:
+	incl preemptable(%ebx)
 	     ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#201: FILE: arch/i386/kernel/irq.c:569:
+	 * ret_from_intr will reenable the preemption and
 	                      ^^^^^^^^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#244: FILE: arch/i386/kernel/traps.c:961:
+	set_intr_gate(14,&page_fault);
 	                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '&' (ctx:OxV)
#244: FILE: arch/i386/kernel/traps.c:961:
+	set_intr_gate(14,&page_fault);
 	                 ^

WARNING:IF_1: Consider removing the #if 1 and its #endif
#298: FILE: drivers/pcmcia/ds.c:883:
+#if 1

WARNING:TYPO_SPELLING: 'beeing' may be misspelled - perhaps 'being'?
#302: FILE: drivers/pcmcia/ds.c:887:
+     * init_pcmcia_ds() beeing called before the completion
                         ^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#306: FILE: drivers/pcmcia/ds.c:891:
+    flush_scheduled_tasks();$

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#416: FILE: include/asm-i386/spinlock.h:164:
+#define _read_unlock(rw)	asm volatile("lock ; incl %0" :"=m" ((rw)->lock) : : "memory")
                         	                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#416: FILE: include/asm-i386/spinlock.h:164:
+#define _read_unlock(rw)	asm volatile("lock ; incl %0" :"=m" ((rw)->lock) : : "memory")

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#417: FILE: include/asm-i386/spinlock.h:165:
+#define _write_unlock(rw)	asm volatile("lock ; addl $" RW_LOCK_BIAS_STR ",%0":"=m" ((rw)->lock) : : "memory")

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#417: FILE: include/asm-i386/spinlock.h:165:
+#define _write_unlock(rw)	asm volatile("lock ; addl $" RW_LOCK_BIAS_STR ",%0":"=m" ((rw)->lock) : : "memory")
                          	                                                   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#417: FILE: include/asm-i386/spinlock.h:165:
+#define _write_unlock(rw)	asm volatile("lock ; addl $" RW_LOCK_BIAS_STR ",%0":"=m" ((rw)->lock) : : "memory")

WARNING:LINE_SPACING: Missing a blank line after declarations
#431: FILE: include/asm-i386/system.h:312:
+	unsigned long flags;
+	__save_flags(flags);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#445: FILE: include/linux/sched.h:299:
+	atomic_t preemptable;
 	         ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#453: FILE: include/linux/sched.h:447:
+    preemptable:	ATOMIC_INIT(0),					\
     ^^^^^^^^^^^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#453: FILE: include/linux/sched.h:447:
+    preemptable:	ATOMIC_INIT(0),					\
                ^

WARNING:INDENTED_LABEL: labels should not be indented
#453: FILE: include/linux/sched.h:447:
+    preemptable:	ATOMIC_INIT(0),					\

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#473: FILE: include/linux/sched.h:644:
+	atomic_inc(&current->preemptable);
 	                     ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#478: FILE: include/linux/sched.h:649:
+	if (atomic_read(&current->preemptable) <= 0) {
 	                          ^^^^^^^^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#478: FILE: include/linux/sched.h:649:
+	if (atomic_read(&current->preemptable) <= 0) {
+		BUG();
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#479: FILE: include/linux/sched.h:650:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#481: FILE: include/linux/sched.h:652:
+	if (atomic_read(&current->preemptable) == 1) {
 	                          ^^^^^^^^^^^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#489: FILE: include/linux/sched.h:660:
+		if (current->need_resched == 1     &&
+		    current->state == TASK_RUNNING &&
+		    !in_interrupt()                &&
+		    local_irq_are_enabled())
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#497: FILE: include/linux/sched.h:668:
+	atomic_dec(&current->preemptable);
 	                     ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#498: FILE: include/linux/sched.h:669:
+}^I$

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#500: FILE: include/linux/sched.h:671:
+static inline int preemptable(void)
                   ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#502: FILE: include/linux/sched.h:673:
+^Ireturn (!in_interrupt() && $

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#503: FILE: include/linux/sched.h:674:
+		!atomic_read(&current->preemptable));
 		                       ^^^^^^^^^^^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#523: FILE: include/linux/smp_lock.h:12:
+#define release_kernel_lock(task, cpu) \
+do { \
+	disable_preempt();  \
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#532: FILE: include/linux/smp_lock.h:21:
+ * that point (otherwise schedule() becomes reentrant). $

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#534: FILE: include/linux/smp_lock.h:23:
+#define reacquire_kernel_lock(task) \
+do { \
+	atomic_dec(&current->preemptable); \
+} while (0)

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#536: FILE: include/linux/smp_lock.h:25:
+	atomic_dec(&current->preemptable); \
 	                     ^^^^^^^^^^^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#539: FILE: include/linux/smp_lock.h:28:
+#define lock_kernel() \
+do { \
+	disable_preempt(); \
+} while(0); 

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#539: FILE: include/linux/smp_lock.h:28:
+#define lock_kernel() \
+do { \
+	disable_preempt(); \
+} while(0); 

do {} while(0) macros should not have a trailing semicolon.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#542: FILE: include/linux/smp_lock.h:31:
+} while(0); $

ERROR:SPACING: space required before the open parenthesis '('
#542: FILE: include/linux/smp_lock.h:31:
+} while(0); 

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#544: FILE: include/linux/smp_lock.h:33:
+#define unlock_kernel() \
+do { \
+	enable_preempt(); \
+} while (0)

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#549: FILE: include/linux/smp_lock.h:38:
+#define kernel_locked()	(!preemptable())
                        	  ^^^^^^^^^^^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#637: FILE: include/linux/spinlock.h:60:
+	({disable_preempt(); _spin_trylock(lock)? 1: (enable_preempt(), 0);})
 	                                        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#637: FILE: include/linux/spinlock.h:60:
+	({disable_preempt(); _spin_trylock(lock)? 1: (enable_preempt(), 0);})
 	                                           ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#637: FILE: include/linux/spinlock.h:60:
+	({disable_preempt(); _spin_trylock(lock)? 1: (enable_preempt(), 0);})
 	                                                                  ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#666: FILE: include/linux/spinlock.h:96:
+#define _spin_lock(lock)	(void)(lock) /* Not "unused variable". */

ERROR:SPACING: space required before the open parenthesis '('
#672: FILE: include/linux/spinlock.h:100:
+#define _spin_unlock(lock)	do { } while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#681: FILE: include/linux/spinlock.h:111:
+#define _spin_trylock(lock)	(!test_and_set_bit(0,(lock)))
                            	                    ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#684: FILE: include/linux/spinlock.h:113:
+#define _spin_lock(x)		do { (x)->lock = 1; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#687: FILE: include/linux/spinlock.h:115:
+#define _spin_unlock(x)		do { (x)->lock = 0; } while (0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#696: FILE: include/linux/spinlock.h:130:
+#define _spin_trylock(lock)	(!test_and_set_bit(0,(lock)))
                            	                    ^

WARNING:LONG_LINE: line length of 286 exceeds 100 columns
#699: FILE: include/linux/spinlock.h:132:
+#define _spin_lock(x)		do {unsigned long __spinflags; save_flags(__spinflags); cli(); if ((x)->lock&&(x)->babble) {printk("%s:%d: spin_lock(%s:%p) already locked\n", __BASE_FILE__,__LINE__, (x)->module, (x));(x)->babble--;} (x)->lock = 1; restore_flags(__spinflags);} while (0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#699: FILE: include/linux/spinlock.h:132:
+#define _spin_lock(x)		do {unsigned long __spinflags; save_flags(__spinflags); cli(); if ((x)->lock&&(x)->babble) {printk("%s:%d: spin_lock(%s:%p) already locked\n", __BASE_FILE__,__LINE__, (x)->module, (x));(x)->babble--;} (x)->lock = 1; restore_flags(__spinflags);} while (0)

ERROR:SPACING: spaces required around that '&&' (ctx:VxV)
#699: FILE: include/linux/spinlock.h:132:
+#define _spin_lock(x)		do {unsigned long __spinflags; save_flags(__spinflags); cli(); if ((x)->lock&&(x)->babble) {printk("%s:%d: spin_lock(%s:%p) already locked\n", __BASE_FILE__,__LINE__, (x)->module, (x));(x)->babble--;} (x)->lock = 1; restore_flags(__spinflags);} while (0)
                      		                                                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#699: FILE: include/linux/spinlock.h:132:
+#define _spin_lock(x)		do {unsigned long __spinflags; save_flags(__spinflags); cli(); if ((x)->lock&&(x)->babble) {printk("%s:%d: spin_lock(%s:%p) already locked\n", __BASE_FILE__,__LINE__, (x)->module, (x));(x)->babble--;} (x)->lock = 1; restore_flags(__spinflags);} while (0)
                      		                                                                                                                                                            ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#699: FILE: include/linux/spinlock.h:132:
+#define _spin_lock(x)		do {unsigned long __spinflags; save_flags(__spinflags); cli(); if ((x)->lock&&(x)->babble) {printk("%s:%d: spin_lock(%s:%p) already locked\n", __BASE_FILE__,__LINE__, (x)->module, (x));(x)->babble--;} (x)->lock = 1; restore_flags(__spinflags);} while (0)
                      		                                                                                                                                                                                        ^

ERROR:SPACING: space required after that ';' (ctx:OxV)
#699: FILE: include/linux/spinlock.h:132:
+#define _spin_lock(x)		do {unsigned long __spinflags; save_flags(__spinflags); cli(); if ((x)->lock&&(x)->babble) {printk("%s:%d: spin_lock(%s:%p) already locked\n", __BASE_FILE__,__LINE__, (x)->module, (x));(x)->babble--;} (x)->lock = 1; restore_flags(__spinflags);} while (0)
                      		                                                                                                                                                                                                      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#699: FILE: include/linux/spinlock.h:132:
+#define _spin_lock(x)		do {unsigned long __spinflags; save_flags(__spinflags); cli(); if ((x)->lock&&(x)->babble) {printk("%s:%d: spin_lock(%s:%p) already locked\n", __BASE_FILE__,__LINE__, (x)->module, (x));(x)->babble--;} (x)->lock = 1; restore_flags(__spinflags);} while (0)
                      		                                                                                                                                                                                                                                                  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#699: FILE: include/linux/spinlock.h:132:
+#define _spin_lock(x)		do {unsigned long __spinflags; save_flags(__spinflags); cli(); if ((x)->lock&&(x)->babble) {printk("%s:%d: spin_lock(%s:%p) already locked\n", __BASE_FILE__,__LINE__, (x)->module, (x));(x)->babble--;} (x)->lock = 1; restore_flags(__spinflags);} while (0)

WARNING:LONG_LINE: line length of 285 exceeds 100 columns
#702: FILE: include/linux/spinlock.h:134:
+#define _spin_unlock(x)		do {unsigned long __spinflags; save_flags(__spinflags); cli(); if (!(x)->lock&&(x)->babble) {printk("%s:%d: spin_unlock(%s:%p) not locked\n", __BASE_FILE__,__LINE__, (x)->module, (x));(x)->babble--;} (x)->lock = 0; restore_flags(__spinflags);} while (0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#702: FILE: include/linux/spinlock.h:134:
+#define _spin_unlock(x)		do {unsigned long __spinflags; save_flags(__spinflags); cli(); if (!(x)->lock&&(x)->babble) {printk("%s:%d: spin_unlock(%s:%p) not locked\n", __BASE_FILE__,__LINE__, (x)->module, (x));(x)->babble--;} (x)->lock = 0; restore_flags(__spinflags);} while (0)

ERROR:SPACING: spaces required around that '&&' (ctx:VxV)
#702: FILE: include/linux/spinlock.h:134:
+#define _spin_unlock(x)		do {unsigned long __spinflags; save_flags(__spinflags); cli(); if (!(x)->lock&&(x)->babble) {printk("%s:%d: spin_unlock(%s:%p) not locked\n", __BASE_FILE__,__LINE__, (x)->module, (x));(x)->babble--;} (x)->lock = 0; restore_flags(__spinflags);} while (0)
                        		                                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#702: FILE: include/linux/spinlock.h:134:
+#define _spin_unlock(x)		do {unsigned long __spinflags; save_flags(__spinflags); cli(); if (!(x)->lock&&(x)->babble) {printk("%s:%d: spin_unlock(%s:%p) not locked\n", __BASE_FILE__,__LINE__, (x)->module, (x));(x)->babble--;} (x)->lock = 0; restore_flags(__spinflags);} while (0)
                        		                                                                                                                                                           ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#702: FILE: include/linux/spinlock.h:134:
+#define _spin_unlock(x)		do {unsigned long __spinflags; save_flags(__spinflags); cli(); if (!(x)->lock&&(x)->babble) {printk("%s:%d: spin_unlock(%s:%p) not locked\n", __BASE_FILE__,__LINE__, (x)->module, (x));(x)->babble--;} (x)->lock = 0; restore_flags(__spinflags);} while (0)
                        		                                                                                                                                                                                       ^

ERROR:SPACING: space required after that ';' (ctx:OxV)
#702: FILE: include/linux/spinlock.h:134:
+#define _spin_unlock(x)		do {unsigned long __spinflags; save_flags(__spinflags); cli(); if (!(x)->lock&&(x)->babble) {printk("%s:%d: spin_unlock(%s:%p) not locked\n", __BASE_FILE__,__LINE__, (x)->module, (x));(x)->babble--;} (x)->lock = 0; restore_flags(__spinflags);} while (0)
                        		                                                                                                                                                                                                     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#702: FILE: include/linux/spinlock.h:134:
+#define _spin_unlock(x)		do {unsigned long __spinflags; save_flags(__spinflags); cli(); if (!(x)->lock&&(x)->babble) {printk("%s:%d: spin_unlock(%s:%p) not locked\n", __BASE_FILE__,__LINE__, (x)->module, (x));(x)->babble--;} (x)->lock = 0; restore_flags(__spinflags);} while (0)
                        		                                                                                                                                                                                                                                                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#702: FILE: include/linux/spinlock.h:134:
+#define _spin_unlock(x)		do {unsigned long __spinflags; save_flags(__spinflags); cli(); if (!(x)->lock&&(x)->babble) {printk("%s:%d: spin_unlock(%s:%p) not locked\n", __BASE_FILE__,__LINE__, (x)->module, (x));(x)->babble--;} (x)->lock = 0; restore_flags(__spinflags);} while (0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#714: FILE: include/linux/spinlock.h:159:
+#define _read_lock(lock)		(void)(lock) /* Not "unused variable". */

ERROR:SPACING: space required before the open parenthesis '('
#715: FILE: include/linux/spinlock.h:160:
+#define _read_unlock(lock)	do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#716: FILE: include/linux/spinlock.h:161:
+#define _write_lock(lock)	(void)(lock) /* Not "unused variable". */

ERROR:SPACING: space required before the open parenthesis '('
#717: FILE: include/linux/spinlock.h:162:
+#define _write_unlock(lock)	do { } while(0)

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#728: FILE: kernel/fork.c:625:
+	atomic_set(&p->preemptable, 0);
 	               ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#757: FILE: kernel/sched.c:1163:
+	printk("    preemptable : %d\n", atomic_read(&p->preemptable));
 	            ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#757: FILE: kernel/sched.c:1163:
+	printk("    preemptable : %d\n", atomic_read(&p->preemptable));
 	                                                 ^^^^^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#757: FILE: kernel/sched.c:1163:
+	printk("    preemptable : %d\n", atomic_read(&p->preemptable));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000558771.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 42 errors, 46 warnings, 3 checks, 614 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000558771.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
