WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
their own files instead of being buried (almost hidden) in readme/txt files.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#271: FILE: Documentation/javaclassname.c:1:
+/* javaclassname.c

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#289: FILE: Documentation/javaclassname.c:19:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#290: FILE: Documentation/javaclassname.c:20:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#317: FILE: Documentation/javaclassname.c:47:
+#define utf8_error() error("%s: Only ASCII 1-255 supported\n", program);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#323: FILE: Documentation/javaclassname.c:53:
+u_int8_t read_8(FILE *classfile);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#324: FILE: Documentation/javaclassname.c:54:
+u_int16_t read_16(FILE *classfile);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#325: FILE: Documentation/javaclassname.c:55:
+void skip_constant(FILE *classfile, u_int16_t *cur);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#326: FILE: Documentation/javaclassname.c:56:
+void error(const char *format, ...);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#327: FILE: Documentation/javaclassname.c:57:
+int main(int argc, char **argv);

WARNING:LINE_SPACING: Missing a blank line after declarations
#333: FILE: Documentation/javaclassname.c:63:
+	int b = fgetc(classfile);
+	if(b == EOF)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#333: FILE: Documentation/javaclassname.c:63:
+	if(b == EOF)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#342: FILE: Documentation/javaclassname.c:72:
+	int b1, b2;
+	b1 = fgetc(classfile);

ERROR:SPACING: space required before the open parenthesis '('
#343: FILE: Documentation/javaclassname.c:73:
+	if(b1 == EOF)

ERROR:SPACING: space required before the open parenthesis '('
#346: FILE: Documentation/javaclassname.c:76:
+	if(b2 == EOF)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#354: FILE: Documentation/javaclassname.c:84:
+	u_int16_t len;

WARNING:LINE_SPACING: Missing a blank line after declarations
#356: FILE: Documentation/javaclassname.c:86:
+	int seekerr = 1;
+	pool[*cur] = ftell(classfile);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#357: FILE: Documentation/javaclassname.c:87:
+	switch(read_8(classfile))
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#357: FILE: Documentation/javaclassname.c:87:
+	switch(read_8(classfile))

ERROR:SPACING: space required before the open parenthesis '('
#383: FILE: Documentation/javaclassname.c:113:
+	if(seekerr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#390: FILE: Documentation/javaclassname.c:120:
+	va_list ap;
+	va_start(ap, format);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#399: FILE: Documentation/javaclassname.c:129:
+	u_int16_t cp_count, i, this_class, classinfo_ptr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'u_int8_t'
#400: FILE: Documentation/javaclassname.c:130:
+	u_int8_t length;

ERROR:SPACING: space required before the open parenthesis '('
#404: FILE: Documentation/javaclassname.c:134:
+	if(!argv[1])

ERROR:SPACING: space required before the open parenthesis '('
#407: FILE: Documentation/javaclassname.c:137:
+	if(!classfile)

ERROR:SPACING: space required before the open parenthesis '('
#410: FILE: Documentation/javaclassname.c:140:
+	if(fseek(classfile, 8, SEEK_SET))  /* skip magic and version numbers */

ERROR:SPACING: space required before the open parenthesis '('
#414: FILE: Documentation/javaclassname.c:144:
+	if(!pool)

ERROR:SPACING: space required before the open parenthesis '('
#417: FILE: Documentation/javaclassname.c:147:
+	for(i = 1; i < cp_count; ++i)

ERROR:SPACING: space required before the open parenthesis '('
#419: FILE: Documentation/javaclassname.c:149:
+	if(fseek(classfile, 2, SEEK_CUR))	/* skip access flags */

ERROR:SPACING: space required before the open parenthesis '('
#423: FILE: Documentation/javaclassname.c:153:
+	if(this_class < 1 || this_class >= cp_count)

ERROR:SPACING: space required before the open parenthesis '('
#425: FILE: Documentation/javaclassname.c:155:
+	if(!pool[this_class] || pool[this_class] == -1)

ERROR:SPACING: space required before the open parenthesis '('
#427: FILE: Documentation/javaclassname.c:157:
+	if(fseek(classfile, pool[this_class] + 1, SEEK_SET))

ERROR:SPACING: space required before the open parenthesis '('
#431: FILE: Documentation/javaclassname.c:161:
+	if(classinfo_ptr < 1 || classinfo_ptr >= cp_count)

ERROR:SPACING: space required before the open parenthesis '('
#433: FILE: Documentation/javaclassname.c:163:
+	if(!pool[classinfo_ptr] || pool[classinfo_ptr] == -1)

ERROR:SPACING: space required before the open parenthesis '('
#435: FILE: Documentation/javaclassname.c:165:
+	if(fseek(classfile, pool[classinfo_ptr] + 1, SEEK_SET))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#439: FILE: Documentation/javaclassname.c:169:
+	for(i = 0; i < length; ++i)
+	{

ERROR:SPACING: space required before the open parenthesis '('
#439: FILE: Documentation/javaclassname.c:169:
+	for(i = 0; i < length; ++i)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'u_int8_t'
#441: FILE: Documentation/javaclassname.c:171:
+		u_int8_t x = read_8(classfile);

WARNING:LINE_SPACING: Missing a blank line after declarations
#442: FILE: Documentation/javaclassname.c:172:
+		u_int8_t x = read_8(classfile);
+		if((x & 0x80) || !x)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#442: FILE: Documentation/javaclassname.c:172:
+		if((x & 0x80) || !x)
+		{

ERROR:SPACING: space required before the open parenthesis '('
#442: FILE: Documentation/javaclassname.c:172:
+		if((x & 0x80) || !x)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#444: FILE: Documentation/javaclassname.c:174:
+			if((x & 0xE0) == 0xC0)
+			{

ERROR:SPACING: space required before the open parenthesis '('
#444: FILE: Documentation/javaclassname.c:174:
+			if((x & 0xE0) == 0xC0)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'u_int8_t'
#446: FILE: Documentation/javaclassname.c:176:
+				u_int8_t y = read_8(classfile);

WARNING:LINE_SPACING: Missing a blank line after declarations
#447: FILE: Documentation/javaclassname.c:177:
+				u_int8_t y = read_8(classfile);
+				if((y & 0xC0) == 0x80)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#447: FILE: Documentation/javaclassname.c:177:
+				if((y & 0xC0) == 0x80)
+				{

ERROR:SPACING: space required before the open parenthesis '('
#447: FILE: Documentation/javaclassname.c:177:
+				if((y & 0xC0) == 0x80)

WARNING:LINE_SPACING: Missing a blank line after declarations
#450: FILE: Documentation/javaclassname.c:180:
+					int c = ((x & 0x1f) << 6) + (y & 0x3f);
+					if(c) putchar(c);

ERROR:SPACING: space required before the open parenthesis '('
#450: FILE: Documentation/javaclassname.c:180:
+					if(c) putchar(c);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#450: FILE: Documentation/javaclassname.c:180:
+					if(c) putchar(c);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#451: FILE: Documentation/javaclassname.c:181:
+					else utf8_error();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#453: FILE: Documentation/javaclassname.c:183:
+				else utf8_error();

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#453: FILE: Documentation/javaclassname.c:183:
+				}
+				else utf8_error();

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#455: FILE: Documentation/javaclassname.c:185:
+			else utf8_error();

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#455: FILE: Documentation/javaclassname.c:185:
+			}
+			else utf8_error();

ERROR:SPACING: space required before the open parenthesis '('
#457: FILE: Documentation/javaclassname.c:187:
+		else if(x == '/') putchar('.');

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#457: FILE: Documentation/javaclassname.c:187:
+		else if(x == '/') putchar('.');

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#457: FILE: Documentation/javaclassname.c:187:
+		}
+		else if(x == '/') putchar('.');

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#458: FILE: Documentation/javaclassname.c:188:
+		else putchar(x);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000075540.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 39 errors, 15 warnings, 5 checks, 410 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000075540.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
