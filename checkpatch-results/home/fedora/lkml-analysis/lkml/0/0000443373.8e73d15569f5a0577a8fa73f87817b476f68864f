WARNING:TYPO_SPELLING: 'contigous' may be misspelled - perhaps 'contiguous'?
#39: 
contigous to request X, then it is accounted at cost '1'. If not, it's
^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#80: 
diff -urN -X /home/axboe/cdrom/exclude /opt/kernel/linux-2.5.29/drivers/block/Makefile linux/drivers/block/Makefile

WARNING:USE_RELATIVE_PATH: use relative pathname instead of absolute in changelog text
#80: 
diff -urN -X /home/axboe/cdrom/exclude /opt/kernel/linux-2.5.29/drivers/block/Makefile linux/drivers/block/Makefile

WARNING:USE_RELATIVE_PATH: use relative pathname instead of absolute in changelog text
#81: 
--- /opt/kernel/linux-2.5.29/drivers/block/Makefile	Wed Jul 24 23:03:31 2002

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#96: FILE: drivers/block/deadline-iosched.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#97: FILE: drivers/block/deadline-iosched.c:2:
+ *  linux/drivers/block/deadline-iosched.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:BIT_MACRO: Prefer using the BIT macro
#130: FILE: drivers/block/deadline-iosched.c:35:
+#define DL_HASH_ENTRIES		(1 << deadline_hash_shift)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dd' - possible side-effects?
#132: FILE: drivers/block/deadline-iosched.c:37:
+#define DL_INVALIDATE_HASH(dd)				\
+	do {						\
+		if (!++(dd)->hash_valid_count)		\
+			(dd)->hash_valid_count = 1;	\
+	} while (0)

CHECK:SPACING: No space is necessary after a cast
#163: FILE: drivers/block/deadline-iosched.c:68:
+#define RQ_DATA(rq)		((struct deadline_rq *) (rq)->elevator_private)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#174: FILE: drivers/block/deadline-iosched.c:79:
+#define ON_HASH(drq)	(drq)->hash_valid_count

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#188: FILE: drivers/block/deadline-iosched.c:93:
+	BUG_ON(ON_HASH(drq));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#191: FILE: drivers/block/deadline-iosched.c:96:
+	list_add(&drq->hash, &dd->hash[DL_HASH_FN(rq->sector +rq->nr_sectors)]);
 	                                                     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#207: FILE: drivers/block/deadline-iosched.c:112:
+		BUG_ON(!drq->hash_valid_count);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#210: FILE: drivers/block/deadline-iosched.c:115:
+		if (!rq_mergeable(drq->request)
+		    || drq->hash_valid_count != dd->hash_valid_count) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#235: FILE: drivers/block/deadline-iosched.c:140:
+	if ((ret = elv_try_last_merge(q, req, bio)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#241: FILE: drivers/block/deadline-iosched.c:146:
+	if ((__rq = deadline_find_hash(dd, bio->bi_sector))) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#255: FILE: drivers/block/deadline-iosched.c:160:
+		BUG_ON(__rq->flags & REQ_STARTED);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#256: FILE: drivers/block/deadline-iosched.c:161:
+		BUG_ON(__rq->flags & REQ_BARRIER);

CHECK:BRACES: braces {} should be used on all arms of this statement
#265: FILE: drivers/block/deadline-iosched.c:170:
+			if (__rq->sector - bio_sectors(bio) == bio->bi_sector) {
[...]
+			} else if (__rq->sector + __rq->nr_sectors == bio->bi_sector)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#271: FILE: drivers/block/deadline-iosched.c:176:
+				printk("deadline_merge: back merge hit on list\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'deadline_merge', this function's name, in a string
#271: FILE: drivers/block/deadline-iosched.c:176:
+				printk("deadline_merge: back merge hit on list\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#296: FILE: drivers/block/deadline-iosched.c:201:
+	BUG_ON(!drq);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#297: FILE: drivers/block/deadline-iosched.c:202:
+	BUG_ON(!dnext);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#393: FILE: drivers/block/deadline-iosched.c:298:
+static void deadline_add_request(request_queue_t *q, struct request *rq, struct list_head *insert_here)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#451: FILE: drivers/block/deadline-iosched.c:356:
+	BUG_ON(!list_empty(&dd->fifo_list[READ]));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#452: FILE: drivers/block/deadline-iosched.c:357:
+	BUG_ON(!list_empty(&dd->fifo_list[WRITE]));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#471: FILE: drivers/block/deadline-iosched.c:376:
+	BUG_ON(!list_empty(&dd->fifo_list[READ]));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#472: FILE: drivers/block/deadline-iosched.c:377:
+	BUG_ON(!list_empty(&dd->fifo_list[WRITE]));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#473: FILE: drivers/block/deadline-iosched.c:378:
+	BUG_ON(!list_empty(&dd->sort_list));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#481: FILE: drivers/block/deadline-iosched.c:386:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#485: FILE: drivers/block/deadline-iosched.c:390:
+			if ((drq = RQ_DATA(rq)) == NULL)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#512: FILE: drivers/block/deadline-iosched.c:417:
+	dd->hash = kmalloc(sizeof(struct list_head)*DL_HASH_ENTRIES,GFP_KERNEL);
 	                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#512: FILE: drivers/block/deadline-iosched.c:417:
+	dd->hash = kmalloc(sizeof(struct list_head)*DL_HASH_ENTRIES,GFP_KERNEL);
 	                                                           ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dd->hash)...) over kmalloc(sizeof(struct list_head)...)
#512: FILE: drivers/block/deadline-iosched.c:417:
+	dd->hash = kmalloc(sizeof(struct list_head)*DL_HASH_ENTRIES,GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#537: FILE: drivers/block/deadline-iosched.c:442:
+^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#575: FILE: drivers/block/deadline-iosched.c:480:
+^I.elevator_merge_fn = ^I^Ideadline_merge,$

WARNING:IF_1: Consider removing the #if 1 and its #endif
#593: FILE: drivers/block/ll_rw_blk.c:1117:
+#if 1

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#594: FILE: drivers/block/ll_rw_blk.c:1118:
+	if ((ret = elevator_init(q, &q->elevator, iosched_deadline))) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#834: FILE: include/linux/elevator.h:50:
+extern int elv_queue_empty(request_queue_t *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#834: FILE: include/linux/elevator.h:50:
+extern int elv_queue_empty(request_queue_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000443373.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 23 warnings, 9 checks, 732 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000443373.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
