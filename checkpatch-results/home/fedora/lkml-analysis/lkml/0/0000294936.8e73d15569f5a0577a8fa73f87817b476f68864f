CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#220: FILE: include/linux/rmap.h:17:
+void fastcall page_add_anon_rmap(struct page *,
+		struct mm_struct *, unsigned long addr);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#221: FILE: include/linux/rmap.h:18:
+void fastcall page_update_anon_rmap(struct page *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#221: FILE: include/linux/rmap.h:18:
+void fastcall page_update_anon_rmap(struct page *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#222: FILE: include/linux/rmap.h:19:
+void fastcall page_update_anon_rmap(struct page *,
+		struct mm_struct *, unsigned long addr);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#223: FILE: include/linux/rmap.h:20:
+void fastcall page_add_obj_rmap(struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#224: FILE: include/linux/rmap.h:21:
+void fastcall page_remove_rmap(struct page *);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#300: FILE: mm/fremap.c:68:
+	BUG_ON(!page_mapping(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: Unbalanced braces around else statement
#592: FILE: mm/memory.c:1433:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#642: FILE: mm/mremap.c:99:
+		unsigned long pfn = pte_pfn(pte);
+		if (pfn_valid(pfn)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#644: FILE: mm/mremap.c:101:
+			struct page *page = pfn_to_page(pfn);
+			if (PageAnon(page))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#950: FILE: mm/rmap.c:200:
+void fastcall page_add_anon_rmap(struct page *page,
+	struct mm_struct *mm, unsigned long address)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#974: FILE: mm/rmap.c:202:
+	BUG_ON(PageReserved(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#975: FILE: mm/rmap.c:203:
+	BUG_ON(page_mapping(page));

CHECK:SPACING: No space is necessary after a cast
#984: FILE: mm/rmap.c:209:
+		page->mapping = (void *) mm;	/* until next patch */

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1015: FILE: mm/rmap.c:228:
+void fastcall page_update_anon_rmap(struct page *page,
+	struct mm_struct *mm, unsigned long address)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1017: FILE: mm/rmap.c:230:
+	BUG_ON(!PageAnon(page));

CHECK:SPACING: No space is necessary after a cast
#1037: FILE: mm/rmap.c:236:
+	page->mapping = (void *) mm;	/* until next patch */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1060: FILE: mm/rmap.c:248:
+	BUG_ON(PageAnon(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1082: FILE: mm/rmap.c:267:
+	BUG_ON(PageReserved(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1083: FILE: mm/rmap.c:268:
+	BUG_ON(!page->mapcount);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1158: FILE: mm/rmap.c:318:
+	BUG_ON(!page->mapcount);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1342: FILE: mm/rmap.c:390:
+	BUG_ON(PageReserved(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1343: FILE: mm/rmap.c:391:
+	BUG_ON(!PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1344: FILE: mm/rmap.c:392:
+	BUG_ON(!page->mapcount);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1552: FILE: mm/swapfile.c:492:
+static void unuse_process(struct mm_struct * mm,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1553: FILE: mm/swapfile.c:493:
+static void unuse_process(struct mm_struct * mm,
 			swp_entry_t entry, struct page* page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1593: FILE: mm/swapfile.c:667:
+			while (*swap_map > 1 &&
 					(p = p->next) != &start_mm->mmlist) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000294936.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 17 warnings, 9 checks, 1467 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000294936.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
