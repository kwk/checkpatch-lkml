WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
In-kernel and on-disk super block changes to support >32 bit blocks numbers.

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#31: 
Signed-Off-By: Laurent Vivier <Laurent.Vivier@bull.net>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#54: FILE: fs/ext4/balloc.c:92:
+		      EXT4_BLOCK_BITMAP(desc,
+			      ext4_group_first_block_no(sb, block_group)));

WARNING:SPLIT_STRING: quoted string split across lines
#60: FILE: fs/ext4/balloc.c:96:
 			    "Cannot read block bitmap - "
+			    "block_group = %d, block_bitmap = "E3FSBLK,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#60: FILE: fs/ext4/balloc.c:96:
+			    "block_group = %d, block_bitmap = "E3FSBLK,

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#63: FILE: fs/ext4/balloc.c:99:
+			    EXT4_BLOCK_BITMAP(desc,
+			      ext4_group_first_block_no(sb, block_group)));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#83: FILE: fs/ext4/balloc.c:362:
+	if (in_range (EXT4_BLOCK_BITMAP(desc,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#84: FILE: fs/ext4/balloc.c:363:
+	if (in_range (EXT4_BLOCK_BITMAP(desc,
+				ext4_group_first_block_no(sb, block_group)),

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#86: FILE: fs/ext4/balloc.c:365:
+	    in_range (EXT4_INODE_BITMAP(desc,

ERROR:CODE_INDENT: code indent should use tabs where possible
#87: FILE: fs/ext4/balloc.c:366:
+^I^I^I    ^Iext4_group_first_block_no(sb, block_group)),$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#87: FILE: fs/ext4/balloc.c:366:
+^I^I^I    ^Iext4_group_first_block_no(sb, block_group)),$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#87: FILE: fs/ext4/balloc.c:366:
+	    in_range (EXT4_INODE_BITMAP(desc,
+			    	ext4_group_first_block_no(sb, block_group)),

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#89: FILE: fs/ext4/balloc.c:368:
+	    in_range (block,

ERROR:CODE_INDENT: code indent should use tabs where possible
#91: FILE: fs/ext4/balloc.c:370:
+^I^I^I      ^Iext4_group_first_block_no(sb, block_group)),$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#91: FILE: fs/ext4/balloc.c:370:
+^I^I^I      ^Iext4_group_first_block_no(sb, block_group)),$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#91: FILE: fs/ext4/balloc.c:370:
+		      EXT4_INODE_TABLE(desc,
+			      	ext4_group_first_block_no(sb, block_group)),

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#94: FILE: fs/ext4/balloc.c:372:
+	    in_range (block + count - 1,

ERROR:CODE_INDENT: code indent should use tabs where possible
#96: FILE: fs/ext4/balloc.c:374:
+^I^I^I      ^Iext4_group_first_block_no(sb, block_group)),$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#96: FILE: fs/ext4/balloc.c:374:
+^I^I^I      ^Iext4_group_first_block_no(sb, block_group)),$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#96: FILE: fs/ext4/balloc.c:374:
+		      EXT4_INODE_TABLE(desc,
+			      	ext4_group_first_block_no(sb, block_group)),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#126: FILE: fs/ext4/balloc.c:1376:
+	if (in_range(EXT4_BLOCK_BITMAP(gdp, ext4_group_first_block_no(sb, group_no)),
+				ret_block, num) ||

ERROR:CODE_INDENT: code indent should use tabs where possible
#128: FILE: fs/ext4/balloc.c:1378:
+^I^I    ^I^Iret_block, num) ||$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#128: FILE: fs/ext4/balloc.c:1378:
+^I^I    ^I^Iret_block, num) ||$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: fs/ext4/balloc.c:1378:
+	    in_range(EXT4_BLOCK_BITMAP(gdp, ext4_group_first_block_no(sb, group_no)),
+		    		ret_block, num) ||

ERROR:CODE_INDENT: code indent should use tabs where possible
#130: FILE: fs/ext4/balloc.c:1380:
+^I^I^I    ^Iext4_group_first_block_no(sb, group_no)),$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#130: FILE: fs/ext4/balloc.c:1380:
+^I^I^I    ^Iext4_group_first_block_no(sb, group_no)),$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#130: FILE: fs/ext4/balloc.c:1380:
+	    in_range(ret_block, EXT4_INODE_TABLE(gdp,
+			    	ext4_group_first_block_no(sb, group_no)),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#134: FILE: fs/ext4/balloc.c:1383:
+	    in_range(ret_block + num - 1, EXT4_INODE_TABLE(gdp,
+			    ext4_group_first_block_no(sb, group_no)),

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#146: FILE: fs/ext4/balloc.c:1424:
+			    "block("E3FSBLK") >= blocks count("E3FSBLK") - "

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#171: FILE: fs/ext4/ialloc.c:64:
+	bh = sb_bread(sb, EXT4_INODE_BITMAP(desc,
+			      ext4_group_first_block_no(sb, block_group)));

WARNING:SPLIT_STRING: quoted string split across lines
#177: FILE: fs/ext4/ialloc.c:68:
 			    "Cannot read inode bitmap - "
+			    "block_group = %lu, inode_bitmap = %llu",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#201: FILE: fs/ext4/inode.c:2436:
+	block = EXT4_INODE_TABLE((gdp+desc),
 	                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#202: FILE: fs/ext4/inode.c:2437:
+	block = EXT4_INODE_TABLE((gdp+desc),
+			ext4_group_first_block_no(sb, block_group)) +

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#213: FILE: fs/ext4/inode.c:2506:
+				EXT4_INODE_BITMAP(desc,
+				     ext4_group_first_block_no(inode->i_sb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#214: FILE: fs/ext4/inode.c:2507:
+				     ext4_group_first_block_no(inode->i_sb,
+						     block_group)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#238: FILE: fs/ext4/resize.c:821:
+	EXT4_BLOCK_BITMAP_SET(gdp, ext4_group_first_block_no(sb, gdb_num),
+				   input->block_bitmap); /* LV FIXME */

ERROR:CODE_INDENT: code indent should use tabs where possible
#240: FILE: fs/ext4/resize.c:823:
+^I^I^I           input->inode_bitmap); /* LV FIXME */$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#240: FILE: fs/ext4/resize.c:823:
+	EXT4_INODE_BITMAP_SET(gdp, ext4_group_first_block_no(sb, gdb_num),
+			           input->inode_bitmap); /* LV FIXME */

ERROR:CODE_INDENT: code indent should use tabs where possible
#242: FILE: fs/ext4/resize.c:825:
+^I^I^I          input->inode_table); /* LV FIXME */$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: fs/ext4/resize.c:825:
+	EXT4_INODE_TABLE_SET(gdp, ext4_group_first_block_no(sb, gdb_num),
+			          input->inode_table); /* LV FIXME */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#297: FILE: fs/ext4/resize.c:1020:
+		printk(KERN_DEBUG "EXT4-fs: extended group to %llu blocks\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#313: FILE: fs/ext4/super.c:1155:
+^I^I    ^IEXT4_BLOCK_BITMAP(gdp, ext4_group_first_block_no(sb, i)) >=$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#313: FILE: fs/ext4/super.c:1155:
+^I^I    ^IEXT4_BLOCK_BITMAP(gdp, ext4_group_first_block_no(sb, i)) >=$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#454: FILE: include/linux/ext4_fs.h:147:
+	if (fs_block < (1ULL<<32) && group_base < (1ULL<<32))
 	                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#454: FILE: include/linux/ext4_fs.h:147:
+	if (fs_block < (1ULL<<32) && group_base < (1ULL<<32))
 	                                               ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#458: FILE: include/linux/ext4_fs.h:151:
+	BUG_ON ((group_base + gdp_block) != fs_block);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#458: FILE: include/linux/ext4_fs.h:151:
+	BUG_ON ((group_base + gdp_block) != fs_block);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#466: FILE: include/linux/ext4_fs.h:159:
+	if (group_base >= (1ULL<<32))
 	                       ^

CHECK:SPACING: No space is necessary after a cast
#467: FILE: include/linux/ext4_fs.h:160:
+		return group_base + (s32) gdp_block;

CHECK:SPACING: No space is necessary after a cast
#469: FILE: include/linux/ext4_fs.h:162:
+	if ((s32) gdp_block >= 0 && gdp_block < group_base &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#470: FILE: include/linux/ext4_fs.h:163:
+	if ((s32) gdp_block >= 0 && gdp_block < group_base &&
+		  group_base + gdp_block >= (1ULL<<32))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#470: FILE: include/linux/ext4_fs.h:163:
+		  group_base + gdp_block >= (1ULL<<32))
 		                                 ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#483: FILE: include/linux/ext4_fs.h:176:
+#define EXT4_BLOCK_BITMAP_SET(bg, group_base, value)	\
+	do {(bg)->bg_block_bitmap = EXT4_RELATIVE_ENCODE(group_base, value);} while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required after that ';' (ctx:VxV)
#484: FILE: include/linux/ext4_fs.h:177:
+	do {(bg)->bg_block_bitmap = EXT4_RELATIVE_ENCODE(group_base, value);} while(0)
 	                                                                   ^

ERROR:SPACING: space required before the open parenthesis '('
#484: FILE: include/linux/ext4_fs.h:177:
+	do {(bg)->bg_block_bitmap = EXT4_RELATIVE_ENCODE(group_base, value);} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#485: FILE: include/linux/ext4_fs.h:178:
+#define EXT4_INODE_BITMAP_SET(bg, group_base, value)	\
+	do {(bg)->bg_inode_bitmap = EXT4_RELATIVE_ENCODE(group_base, value);} while(0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#486: FILE: include/linux/ext4_fs.h:179:
+	do {(bg)->bg_inode_bitmap = EXT4_RELATIVE_ENCODE(group_base, value);} while(0)
 	                                                                   ^

ERROR:SPACING: space required before the open parenthesis '('
#486: FILE: include/linux/ext4_fs.h:179:
+	do {(bg)->bg_inode_bitmap = EXT4_RELATIVE_ENCODE(group_base, value);} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#487: FILE: include/linux/ext4_fs.h:180:
+#define EXT4_INODE_TABLE_SET(bg, group_base, value)	\
+	do {(bg)->bg_inode_table = EXT4_RELATIVE_ENCODE(group_base, value);} while(0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#488: FILE: include/linux/ext4_fs.h:181:
+	do {(bg)->bg_inode_table = EXT4_RELATIVE_ENCODE(group_base, value);} while(0)
 	                                                                  ^

ERROR:SPACING: space required before the open parenthesis '('
#488: FILE: include/linux/ext4_fs.h:181:
+	do {(bg)->bg_inode_table = EXT4_RELATIVE_ENCODE(group_base, value);} while(0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#509: FILE: include/linux/ext4_fs.h:538:
+^I__le32^Is_jnl_blocks[17]; ^I/* Backup of the journal inode */$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#517: FILE: include/linux/ext4_fs.h:546:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#518: FILE: include/linux/ext4_fs.h:547:
+#define EXT4_BLOCKS_COUNT(s)	\
+	(ext4_fsblk_t)(((__u64)le32_to_cpu((s)->s_blocks_count_hi) << 32) |	\
+	 	(__u64)le32_to_cpu((s)->s_blocks_count))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#518: FILE: include/linux/ext4_fs.h:547:
+#define EXT4_BLOCKS_COUNT(s)	\
+	(ext4_fsblk_t)(((__u64)le32_to_cpu((s)->s_blocks_count_hi) << 32) |	\
+	 	(__u64)le32_to_cpu((s)->s_blocks_count))

ERROR:CODE_INDENT: code indent should use tabs where possible
#520: FILE: include/linux/ext4_fs.h:549:
+^I ^I(__u64)le32_to_cpu((s)->s_blocks_count))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#520: FILE: include/linux/ext4_fs.h:549:
+^I ^I(__u64)le32_to_cpu((s)->s_blocks_count))$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#521: FILE: include/linux/ext4_fs.h:550:
+#define EXT4_BLOCKS_COUNT_SET(s,v)	do {				\
                                ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#521: FILE: include/linux/ext4_fs.h:550:
+#define EXT4_BLOCKS_COUNT_SET(s,v)	do {				\
+	(s)->s_blocks_count = cpu_to_le32((v));				\
+	(s)->s_blocks_count_hi = cpu_to_le32(((__u64)(v)) >> 32);	\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#521: FILE: include/linux/ext4_fs.h:550:
+#define EXT4_BLOCKS_COUNT_SET(s,v)	do {				\
+	(s)->s_blocks_count = cpu_to_le32((v));				\
+	(s)->s_blocks_count_hi = cpu_to_le32(((__u64)(v)) >> 32);	\
+} while (0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#526: FILE: include/linux/ext4_fs.h:555:
+#define EXT4_R_BLOCKS_COUNT(s)	\
+	(ext4_fsblk_t)(((__u64)le32_to_cpu((s)->s_r_blocks_count_hi) << 32) |	\
+		 (__u64)le32_to_cpu((s)->s_r_blocks_count))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#526: FILE: include/linux/ext4_fs.h:555:
+#define EXT4_R_BLOCKS_COUNT(s)	\
+	(ext4_fsblk_t)(((__u64)le32_to_cpu((s)->s_r_blocks_count_hi) << 32) |	\
+		 (__u64)le32_to_cpu((s)->s_r_blocks_count))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#529: FILE: include/linux/ext4_fs.h:558:
+#define EXT4_R_BLOCKS_COUNT_SET(s,v)	do {				\
                                  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#529: FILE: include/linux/ext4_fs.h:558:
+#define EXT4_R_BLOCKS_COUNT_SET(s,v)	do {				\
+	(s)->s_r_blocks_count = cpu_to_le32((v));			\
+	(s)->s_r_blocks_count_hi = cpu_to_le32(((__u64)(v)) >> 32);	\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#529: FILE: include/linux/ext4_fs.h:558:
+#define EXT4_R_BLOCKS_COUNT_SET(s,v)	do {				\
+	(s)->s_r_blocks_count = cpu_to_le32((v));			\
+	(s)->s_r_blocks_count_hi = cpu_to_le32(((__u64)(v)) >> 32);	\
+} while (0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#534: FILE: include/linux/ext4_fs.h:563:
+#define EXT4_FREE_BLOCKS_COUNT(s)					\
+	(ext4_fsblk_t)(((__u64)le32_to_cpu((s)->s_free_blocks_count_hi) << 32) | \
+		 (__u64)le32_to_cpu((s)->s_free_blocks_count))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#534: FILE: include/linux/ext4_fs.h:563:
+#define EXT4_FREE_BLOCKS_COUNT(s)					\
+	(ext4_fsblk_t)(((__u64)le32_to_cpu((s)->s_free_blocks_count_hi) << 32) | \
+		 (__u64)le32_to_cpu((s)->s_free_blocks_count))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#537: FILE: include/linux/ext4_fs.h:566:
+#define EXT4_FREE_BLOCKS_COUNT_SET(s,v)	do {				\
                                     ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#537: FILE: include/linux/ext4_fs.h:566:
+#define EXT4_FREE_BLOCKS_COUNT_SET(s,v)	do {				\
+	(s)->s_free_blocks_count = cpu_to_le32((v));			\
+	(s)->s_free_blocks_count_hi = cpu_to_le32(((__u64)(v)) >> 32);	\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#537: FILE: include/linux/ext4_fs.h:566:
+#define EXT4_FREE_BLOCKS_COUNT_SET(s,v)	do {				\
+	(s)->s_free_blocks_count = cpu_to_le32((v));			\
+	(s)->s_free_blocks_count_hi = cpu_to_le32(((__u64)(v)) >> 32);	\
+} while (0)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#559: FILE: include/linux/ext4_fs.h:655:
+					 EXT4_FEATURE_INCOMPAT_EXTENTS| \
 					                              ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000049459.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 22 warnings, 38 checks, 471 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000049459.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
