WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#111: FILE: arch/i386/Kconfig.debug:70:
+config LOCKMETER
+	bool "Kernel lock metering"
+	depends on SMP
+	help
+	  Say Y to enable kernel lock metering, which adds overhead to SMP locks,
+	  but allows you to see various statistics using the lockstat command.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#147: FILE: arch/ia64/Kconfig.debug:64:
+config LOCKMETER
+       bool "Kernel lock metering"
+       depends on SMP
+       help
+         Say Y to enable kernel lock metering, which adds overhead to SMP locks,
+         but allows you to see various statistics using the lockstat command.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#205: FILE: arch/x86_64/Kconfig.debug:68:
+config LOCKMETER
+	bool "Kernel lock metering"
+	depends on SMP
+	help
+	  Say Y to enable kernel lock metering, which adds overhead to SMP locks,
+	  but allows you to see various statistics using the lockstat command.
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#240: FILE: fs/proc/proc_misc.c:578:
+extern ssize_t put_lockmeter_info(const char *, size_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#240: FILE: fs/proc/proc_misc.c:578:
+extern ssize_t put_lockmeter_info(const char *, size_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#240: FILE: fs/proc/proc_misc.c:578:
+extern ssize_t put_lockmeter_info(const char *, size_t);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#241: FILE: fs/proc/proc_misc.c:579:
+extern int get_lockmeter_info_size(void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#255: FILE: fs/proc/proc_misc.c:593:
+static ssize_t write_lockmeter(struct file * file, const char * buf,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#255: FILE: fs/proc/proc_misc.c:593:
+static ssize_t write_lockmeter(struct file * file, const char * buf,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#261: FILE: fs/proc/proc_misc.c:599:
+static struct file_operations proc_lockmeter_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#263: FILE: fs/proc/proc_misc.c:601:
+	read:		read_lockmeter,
 	    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#263: FILE: fs/proc/proc_misc.c:601:
+	read:		read_lockmeter,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#264: FILE: fs/proc/proc_misc.c:602:
+	write:		write_lockmeter,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#264: FILE: fs/proc/proc_misc.c:602:
+	write:		write_lockmeter,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#276: FILE: fs/proc/proc_misc.c:667:
+	entry = create_proc_entry("lockmeter", S_IWUSR | S_IRUGO, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#290: FILE: include/asm-alpha/lockmeter.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#325: FILE: include/asm-alpha/lockmeter.h:36:
+typedef struct inst_spinlock_s {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#330: FILE: include/asm-alpha/lockmeter.h:41:
+#define PUT_INDEX(lock_ptr,indexv)	((inst_spinlock_t *)(lock_ptr))->index = indexv
                           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#330: FILE: include/asm-alpha/lockmeter.h:41:
+#define PUT_INDEX(lock_ptr,indexv)	((inst_spinlock_t *)(lock_ptr))->index = indexv

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#331: FILE: include/asm-alpha/lockmeter.h:42:
+#define GET_INDEX(lock_ptr)		((inst_spinlock_t *)(lock_ptr))->index

WARNING:NEW_TYPEDEFS: do not add new typedefs
#343: FILE: include/asm-alpha/lockmeter.h:54:
+typedef struct inst_rwlock_s {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#344: FILE: include/asm-alpha/lockmeter.h:55:
+	volatile int lock;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#348: FILE: include/asm-alpha/lockmeter.h:59:
+#define PUT_RWINDEX(rwlock_ptr,indexv)	((inst_rwlock_t *)(rwlock_ptr))->index = indexv
                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#348: FILE: include/asm-alpha/lockmeter.h:59:
+#define PUT_RWINDEX(rwlock_ptr,indexv)	((inst_rwlock_t *)(rwlock_ptr))->index = indexv

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#349: FILE: include/asm-alpha/lockmeter.h:60:
+#define GET_RWINDEX(rwlock_ptr)		((inst_rwlock_t *)(rwlock_ptr))->index

ERROR:SPACING: space required after that ',' (ctx:VxV)
#350: FILE: include/asm-alpha/lockmeter.h:61:
+#define PUT_RW_CPU(rwlock_ptr,cpuv)	((inst_rwlock_t *)(rwlock_ptr))->cpu = cpuv
                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#350: FILE: include/asm-alpha/lockmeter.h:61:
+#define PUT_RW_CPU(rwlock_ptr,cpuv)	((inst_rwlock_t *)(rwlock_ptr))->cpu = cpuv

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#351: FILE: include/asm-alpha/lockmeter.h:62:
+#define GET_RW_CPU(rwlock_ptr)		((inst_rwlock_t *)(rwlock_ptr))->cpu

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#358: FILE: include/asm-alpha/lockmeter.h:69:
+#define IABS(x) ((x) > 0 ? (x) : -(x))

CHECK:SPACING: No space is necessary after a cast
#363: FILE: include/asm-alpha/lockmeter.h:74:
+	int tmp = (int) ((inst_rwlock_t *)rwlock_ptr)->lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#365: FILE: include/asm-alpha/lockmeter.h:76:
+^I/* ^I- andnot off a possible writer (bit 0)^I*/$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#369: FILE: include/asm-alpha/lockmeter.h:80:
+	if (tmp == 0) return(0);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#370: FILE: include/asm-alpha/lockmeter.h:81:
+	else return(IABS(tmp & ~1)>>1);
 	                          ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#370: FILE: include/asm-alpha/lockmeter.h:81:
+	else return(IABS(tmp & ~1)>>1);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#396: FILE: include/asm-alpha/spinlock.h:106:
+	unsigned magic;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#401: FILE: include/asm-alpha/spinlock.h:111:
+#define RW_LOCK_UNLOCKED (rwlock_t) { 0, 0, 0 }

ERROR:SPACING: space required after that ',' (ctx:VxV)
#415: FILE: include/asm-alpha/spinlock.h:189:
+	long temp,result;
 	         ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#417: FILE: include/asm-alpha/spinlock.h:191:
+	__asm__ __volatile__(

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#424: FILE: include/asm-alpha/spinlock.h:198:
+	: "=m" (*(volatile int *)lock), "=&r" (temp), "=&r" (result)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#425: FILE: include/asm-alpha/spinlock.h:199:
+	: "m" (*(volatile int *)lock)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#428: FILE: include/asm-alpha/spinlock.h:202:
+	return (result);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#433: FILE: include/asm-alpha/spinlock.h:207:
+	unsigned long temp,result;
 	                  ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#435: FILE: include/asm-alpha/spinlock.h:209:
+	__asm__ __volatile__(

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#442: FILE: include/asm-alpha/spinlock.h:216:
+	: "=m" (*(volatile int *)lock), "=&r" (temp), "=&r" (result)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#443: FILE: include/asm-alpha/spinlock.h:217:
+	: "m" (*(volatile int *)lock)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#445: FILE: include/asm-alpha/spinlock.h:219:
+	return (result);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#455: FILE: include/asm-i386/lockmeter.h:1:
+/*

WARNING:NEW_TYPEDEFS: do not add new typedefs
#498: FILE: include/asm-i386/lockmeter.h:44:
+typedef struct inst_spinlock_s {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#503: FILE: include/asm-i386/lockmeter.h:49:
+#define PUT_INDEX(lock_ptr,indexv) ((inst_spinlock_t *)(lock_ptr))->index = indexv
                           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#503: FILE: include/asm-i386/lockmeter.h:49:
+#define PUT_INDEX(lock_ptr,indexv) ((inst_spinlock_t *)(lock_ptr))->index = indexv

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#504: FILE: include/asm-i386/lockmeter.h:50:
+#define GET_INDEX(lock_ptr)        ((inst_spinlock_t *)(lock_ptr))->index

WARNING:NEW_TYPEDEFS: do not add new typedefs
#516: FILE: include/asm-i386/lockmeter.h:62:
+typedef struct inst_rwlock_s {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#517: FILE: include/asm-i386/lockmeter.h:63:
+	volatile int lock;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#521: FILE: include/asm-i386/lockmeter.h:67:
+#define PUT_RWINDEX(rwlock_ptr,indexv) ((inst_rwlock_t *)(rwlock_ptr))->index = indexv
                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#521: FILE: include/asm-i386/lockmeter.h:67:
+#define PUT_RWINDEX(rwlock_ptr,indexv) ((inst_rwlock_t *)(rwlock_ptr))->index = indexv

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#522: FILE: include/asm-i386/lockmeter.h:68:
+#define GET_RWINDEX(rwlock_ptr)        ((inst_rwlock_t *)(rwlock_ptr))->index

ERROR:SPACING: space required after that ',' (ctx:VxV)
#523: FILE: include/asm-i386/lockmeter.h:69:
+#define PUT_RW_CPU(rwlock_ptr,cpuv)    ((inst_rwlock_t *)(rwlock_ptr))->cpu = cpuv
                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#523: FILE: include/asm-i386/lockmeter.h:69:
+#define PUT_RW_CPU(rwlock_ptr,cpuv)    ((inst_rwlock_t *)(rwlock_ptr))->cpu = cpuv

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#524: FILE: include/asm-i386/lockmeter.h:70:
+#define GET_RW_CPU(rwlock_ptr)         ((inst_rwlock_t *)(rwlock_ptr))->cpu

CHECK:SPACING: No space is necessary after a cast
#533: FILE: include/asm-i386/lockmeter.h:79:
+	int tmp = (int) rwlock_ptr->lock;

CHECK:SPACING: No space is necessary after a cast
#540: FILE: include/asm-i386/lockmeter.h:86:
+		tmp = (int) rwlock_ptr->lock;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#542: FILE: include/asm-i386/lockmeter.h:88:
+	if (tmp == 0) return(0);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#543: FILE: include/asm-i386/lockmeter.h:89:
+	else return(RW_LOCK_BIAS-tmp);
 	                        ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#543: FILE: include/asm-i386/lockmeter.h:89:
+	else return(RW_LOCK_BIAS-tmp);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#551: FILE: include/asm-i386/lockmeter.h:97:
+#define IABS(x) ((x) > 0 ? (x) : -(x))

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#560: FILE: include/asm-i386/lockmeter.h:106:
+			uint32_t eax;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#561: FILE: include/asm-i386/lockmeter.h:107:
+			uint32_t edx;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#565: FILE: include/asm-i386/lockmeter.h:111:
+	rdtsc(longlong.intint.eax,longlong.intint.edx);
 	                         ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#581: FILE: include/asm-i386/spinlock.h:173:
+	unsigned lockmeter_magic;

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#592: FILE: include/asm-i386/spinlock.h:184:
+#define RWLOCK_MAGIC_INIT	, 0, RWLOCK_MAGIC
                          	^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#592: FILE: include/asm-i386/spinlock.h:184:
+#define RWLOCK_MAGIC_INIT	, 0, RWLOCK_MAGIC

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#594: FILE: include/asm-i386/spinlock.h:186:
+#define RWLOCK_MAGIC_INIT	, 0
                          	^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#594: FILE: include/asm-i386/spinlock.h:186:
+#define RWLOCK_MAGIC_INIT	, 0

WARNING:LINE_SPACING: Missing a blank line after declarations
#615: FILE: include/asm-i386/spinlock.h:246:
+	atomic_t *count = (atomic_t *)lock;
+	atomic_dec(count);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#624: FILE: include/asm-i386/spinlock.h:255:
+extern void _metered_spin_lock  (spinlock_t *lock, void *caller_pc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#624: FILE: include/asm-i386/spinlock.h:255:
+extern void _metered_spin_lock  (spinlock_t *lock, void *caller_pc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#625: FILE: include/asm-i386/spinlock.h:256:
+extern void _metered_spin_unlock(spinlock_t *lock);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#639: FILE: include/asm-i386/spinlock.h:270:
+	newcount = counter-1;
 	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#645: FILE: include/asm-i386/spinlock.h:276:
+		:"=a" (newcount)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#646: FILE: include/asm-i386/spinlock.h:277:
+		:"r" (newcount), "m" (atomic->counter), "0" (counter));
 		^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#672: FILE: include/asm-ia64/lockmeter.h:1:
+/*

WARNING:NEW_TYPEDEFS: do not add new typedefs
#701: FILE: include/asm-ia64/lockmeter.h:30:
+typedef struct inst_spinlock_s {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#703: FILE: include/asm-ia64/lockmeter.h:32:
+	volatile unsigned short lock;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#704: FILE: include/asm-ia64/lockmeter.h:33:
+	volatile unsigned short index;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#706: FILE: include/asm-ia64/lockmeter.h:35:
+#define PUT_INDEX(lock_ptr,indexv) ((inst_spinlock_t *)(lock_ptr))->index = indexv
                           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#706: FILE: include/asm-ia64/lockmeter.h:35:
+#define PUT_INDEX(lock_ptr,indexv) ((inst_spinlock_t *)(lock_ptr))->index = indexv

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#707: FILE: include/asm-ia64/lockmeter.h:36:
+#define GET_INDEX(lock_ptr)        ((inst_spinlock_t *)(lock_ptr))->index

WARNING:NEW_TYPEDEFS: do not add new typedefs
#719: FILE: include/asm-ia64/lockmeter.h:48:
+typedef struct inst_rwlock_s {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#720: FILE: include/asm-ia64/lockmeter.h:49:
+	volatile int read_counter:31;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#721: FILE: include/asm-ia64/lockmeter.h:50:
+	volatile int write_lock:1;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#722: FILE: include/asm-ia64/lockmeter.h:51:
+	volatile unsigned short index;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#723: FILE: include/asm-ia64/lockmeter.h:52:
+	volatile unsigned short cpu;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#725: FILE: include/asm-ia64/lockmeter.h:54:
+#define PUT_RWINDEX(rwlock_ptr,indexv) ((inst_rwlock_t *)(rwlock_ptr))->index = indexv
                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#725: FILE: include/asm-ia64/lockmeter.h:54:
+#define PUT_RWINDEX(rwlock_ptr,indexv) ((inst_rwlock_t *)(rwlock_ptr))->index = indexv

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#726: FILE: include/asm-ia64/lockmeter.h:55:
+#define GET_RWINDEX(rwlock_ptr)        ((inst_rwlock_t *)(rwlock_ptr))->index

ERROR:SPACING: space required after that ',' (ctx:VxV)
#727: FILE: include/asm-ia64/lockmeter.h:56:
+#define PUT_RW_CPU(rwlock_ptr,cpuv)    ((inst_rwlock_t *)(rwlock_ptr))->cpu = cpuv
                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#727: FILE: include/asm-ia64/lockmeter.h:56:
+#define PUT_RW_CPU(rwlock_ptr,cpuv)    ((inst_rwlock_t *)(rwlock_ptr))->cpu = cpuv

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#728: FILE: include/asm-ia64/lockmeter.h:57:
+#define GET_RW_CPU(rwlock_ptr)         ((inst_rwlock_t *)(rwlock_ptr))->cpu

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#755: FILE: include/asm-ia64/spinlock.h:122:
+	unsigned lockmeter_magic;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#760: FILE: include/asm-ia64/spinlock.h:127:
+#define RW_LOCK_UNLOCKED (rwlock_t) { 0, 0, 0 }

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#783: FILE: include/asm-ia64/spinlock.h:158:
+		return 0;
+	} else {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#791: FILE: include/asm-ia64/spinlock.h:166:
+	if (!(rw->write_lock)) {
[...]
+	    if (test_and_set_bit(31, rw) == 0) {

WARNING:TABSTOP: Statements should start on a tabstop
#793: FILE: include/asm-ia64/spinlock.h:168:
+	    if (test_and_set_bit(31, rw) == 0) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#795: FILE: include/asm-ia64/spinlock.h:170:
+		if (rw->read_counter) {
[...]
+		    clear_bit(31, rw);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#798: FILE: include/asm-ia64/spinlock.h:173:
+		} else {
[...]
+		    barrier();

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#799: FILE: include/asm-ia64/spinlock.h:174:
+		    /* we've the the write-lock, no read-lockers... success! */

WARNING:TABSTOP: Statements should start on a tabstop
#801: FILE: include/asm-ia64/spinlock.h:176:
+		    return 1;

WARNING:TABSTOP: Statements should start on a tabstop
#804: FILE: include/asm-ia64/spinlock.h:179:
+	    }

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#804: FILE: include/asm-ia64/spinlock.h:179:
+
+	    }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#807: FILE: include/asm-ia64/spinlock.h:182:
+	/* falls through ... fails to write-lock */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#821: FILE: include/asm-ia64/spinlock.h:252:
+extern void _metered_spin_lock  (spinlock_t *lock, void *caller_pc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#821: FILE: include/asm-ia64/spinlock.h:252:
+extern void _metered_spin_lock  (spinlock_t *lock, void *caller_pc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#822: FILE: include/asm-ia64/spinlock.h:253:
+extern void _metered_spin_unlock(spinlock_t *lock);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#838: FILE: include/asm-ia64/spinlock.h:269:
+}
+#define ATOMIC_DEC_AND_LOCK

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#847: FILE: include/asm-mips/lockmeter.h:1:
+/*

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#870: FILE: include/asm-mips/lockmeter.h:24:
+static uint32_t cpu_cycle_frequency = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#870: FILE: include/asm-mips/lockmeter.h:24:
+static uint32_t cpu_cycle_frequency = 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#875: FILE: include/asm-mips/lockmeter.h:29:
+    int sec;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#876: FILE: include/asm-mips/lockmeter.h:30:
+    uint32_t start_cycles;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#876: FILE: include/asm-mips/lockmeter.h:30:
+    uint32_t start_cycles;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#877: FILE: include/asm-mips/lockmeter.h:31:
+    struct timeval tv;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#879: FILE: include/asm-mips/lockmeter.h:33:
+    if (cpu_cycle_frequency == 0) {^I/* uninitialized */$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#882: FILE: include/asm-mips/lockmeter.h:36:
+	while (sec == tv.tv_sec) { do_gettimeofday(&tv); }

WARNING:BRACES: braces {} are not necessary for single statement blocks
#882: FILE: include/asm-mips/lockmeter.h:36:
+	while (sec == tv.tv_sec) { do_gettimeofday(&tv); }

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#885: FILE: include/asm-mips/lockmeter.h:39:
+	while (sec == tv.tv_sec) { do_gettimeofday(&tv); }

WARNING:BRACES: braces {} are not necessary for single statement blocks
#885: FILE: include/asm-mips/lockmeter.h:39:
+	while (sec == tv.tv_sec) { do_gettimeofday(&tv); }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#887: FILE: include/asm-mips/lockmeter.h:41:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#889: FILE: include/asm-mips/lockmeter.h:43:
+    return cpu_cycle_frequency;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#896: FILE: include/asm-mips/lockmeter.h:50:
+    static uint64_t last_get_cycles64 = 0;$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#896: FILE: include/asm-mips/lockmeter.h:50:
+    static uint64_t last_get_cycles64 = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#896: FILE: include/asm-mips/lockmeter.h:50:
+    static uint64_t last_get_cycles64 = 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#897: FILE: include/asm-mips/lockmeter.h:51:
+    uint64_t ret;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#897: FILE: include/asm-mips/lockmeter.h:51:
+    uint64_t ret;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#898: FILE: include/asm-mips/lockmeter.h:52:
+    unsigned long sec;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#899: FILE: include/asm-mips/lockmeter.h:53:
+    unsigned long usec, usec_offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#902: FILE: include/asm-mips/lockmeter.h:56:
+    sec  = xtime.tv_sec;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#903: FILE: include/asm-mips/lockmeter.h:57:
+    usec = xtime.tv_usec;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#904: FILE: include/asm-mips/lockmeter.h:58:
+    usec_offset = do_gettimeoffset();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#905: FILE: include/asm-mips/lockmeter.h:59:
+    if ((xtime.tv_sec != sec)  ||$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'xtime.tv_sec != sec'
#905: FILE: include/asm-mips/lockmeter.h:59:
+    if ((xtime.tv_sec != sec)  ||
+	(xtime.tv_usec != usec)||
+	(usec_offset >= 20000))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'xtime.tv_usec != usec'
#905: FILE: include/asm-mips/lockmeter.h:59:
+    if ((xtime.tv_sec != sec)  ||
+	(xtime.tv_usec != usec)||
+	(usec_offset >= 20000))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'usec_offset >= 20000'
#905: FILE: include/asm-mips/lockmeter.h:59:
+    if ((xtime.tv_sec != sec)  ||
+	(xtime.tv_usec != usec)||
+	(usec_offset >= 20000))

ERROR:SPACING: spaces required around that '||' (ctx:VxE)
#906: FILE: include/asm-mips/lockmeter.h:60:
+	(xtime.tv_usec != usec)||
 	                       ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#910: FILE: include/asm-mips/lockmeter.h:64:
+    ret = ((uint64_t)(usec + usec_offset) * cpu_cycle_frequency);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#912: FILE: include/asm-mips/lockmeter.h:66:
+    do_div(ret,1000000);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#912: FILE: include/asm-mips/lockmeter.h:66:
+    do_div(ret,1000000);
               ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#913: FILE: include/asm-mips/lockmeter.h:67:
+    ret +=  ((uint64_t)sec * cpu_cycle_frequency);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#916: FILE: include/asm-mips/lockmeter.h:70:
+    if (ret <= last_get_cycles64)$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#917: FILE: include/asm-mips/lockmeter.h:71:
+	ret  = last_get_cycles64+1;
 	                        ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#918: FILE: include/asm-mips/lockmeter.h:72:
+    last_get_cycles64 = ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#920: FILE: include/asm-mips/lockmeter.h:74:
+    return ret;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#933: FILE: include/asm-mips/lockmeter.h:87:
+#define PUT_INDEX(lockp,index)   \
                        ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#933: FILE: include/asm-mips/lockmeter.h:87:
+#define PUT_INDEX(lockp,index)   \
+        lockp->lock = (((lockp->lock) & ~INDEX_MASK) | (index) << INDEX_SHIFT)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lockp' - possible side-effects?
#933: FILE: include/asm-mips/lockmeter.h:87:
+#define PUT_INDEX(lockp,index)   \
+        lockp->lock = (((lockp->lock) & ~INDEX_MASK) | (index) << INDEX_SHIFT)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'lockp' may be better as '(lockp)' to avoid precedence issues
#933: FILE: include/asm-mips/lockmeter.h:87:
+#define PUT_INDEX(lockp,index)   \
+        lockp->lock = (((lockp->lock) & ~INDEX_MASK) | (index) << INDEX_SHIFT)

ERROR:CODE_INDENT: code indent should use tabs where possible
#934: FILE: include/asm-mips/lockmeter.h:88:
+        lockp->lock = (((lockp->lock) & ~INDEX_MASK) | (index) << INDEX_SHIFT)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#934: FILE: include/asm-mips/lockmeter.h:88:
+        lockp->lock = (((lockp->lock) & ~INDEX_MASK) | (index) << INDEX_SHIFT)$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'lockp' may be better as '(lockp)' to avoid precedence issues
#935: FILE: include/asm-mips/lockmeter.h:89:
+#define GET_INDEX(lockp) \
+        (((lockp->lock) & INDEX_MASK) >> INDEX_SHIFT)

ERROR:CODE_INDENT: code indent should use tabs where possible
#936: FILE: include/asm-mips/lockmeter.h:90:
+        (((lockp->lock) & INDEX_MASK) >> INDEX_SHIFT)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#936: FILE: include/asm-mips/lockmeter.h:90:
+        (((lockp->lock) & INDEX_MASK) >> INDEX_SHIFT)$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#948: FILE: include/asm-mips/lockmeter.h:102:
+typedef struct inst_rwlock_s {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#949: FILE: include/asm-mips/lockmeter.h:103:
+	volatile int lock;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#953: FILE: include/asm-mips/lockmeter.h:107:
+#define PUT_RWINDEX(rwlock_ptr,indexv) ((inst_rwlock_t *)(rwlock_ptr))->index = indexv
                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#953: FILE: include/asm-mips/lockmeter.h:107:
+#define PUT_RWINDEX(rwlock_ptr,indexv) ((inst_rwlock_t *)(rwlock_ptr))->index = indexv

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#954: FILE: include/asm-mips/lockmeter.h:108:
+#define GET_RWINDEX(rwlock_ptr)        ((inst_rwlock_t *)(rwlock_ptr))->index

ERROR:SPACING: space required after that ',' (ctx:VxV)
#955: FILE: include/asm-mips/lockmeter.h:109:
+#define PUT_RW_CPU(rwlock_ptr,cpuv)    ((inst_rwlock_t *)(rwlock_ptr))->cpu = cpuv
                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#955: FILE: include/asm-mips/lockmeter.h:109:
+#define PUT_RW_CPU(rwlock_ptr,cpuv)    ((inst_rwlock_t *)(rwlock_ptr))->cpu = cpuv

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#956: FILE: include/asm-mips/lockmeter.h:110:
+#define GET_RW_CPU(rwlock_ptr)         ((inst_rwlock_t *)(rwlock_ptr))->cpu

CHECK:SPACING: No space is necessary after a cast
#965: FILE: include/asm-mips/lockmeter.h:119:
+	int tmp = (int) rwlock_ptr->lock;

WARNING:LINE_SPACING: Missing a blank line after declarations
#966: FILE: include/asm-mips/lockmeter.h:120:
+	int tmp = (int) rwlock_ptr->lock;
+	return (tmp >= 0) ? tmp : 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#984: FILE: include/asm-mips/spinlock.h:98:
+	unsigned lockmeter_magic;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#989: FILE: include/asm-mips/spinlock.h:103:
+#define RW_LOCK_UNLOCKED (rwlock_t) { 0, 0 }

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1001: FILE: include/asm-sparc64/lockmeter.h:1:
+/*

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1020: FILE: include/asm-sparc64/lockmeter.h:20:
+#define PUT_INDEX(lock_ptr,indexv)	(lock_ptr)->index = (indexv)
                           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1020: FILE: include/asm-sparc64/lockmeter.h:20:
+#define PUT_INDEX(lock_ptr,indexv)	(lock_ptr)->index = (indexv)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1021: FILE: include/asm-sparc64/lockmeter.h:21:
+#define GET_INDEX(lock_ptr)		(lock_ptr)->index

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1023: FILE: include/asm-sparc64/lockmeter.h:23:
+#define PUT_RWINDEX(rwlock_ptr,indexv) (rwlock_ptr)->index = (indexv)
                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1023: FILE: include/asm-sparc64/lockmeter.h:23:
+#define PUT_RWINDEX(rwlock_ptr,indexv) (rwlock_ptr)->index = (indexv)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1024: FILE: include/asm-sparc64/lockmeter.h:24:
+#define GET_RWINDEX(rwlock_ptr)        (rwlock_ptr)->index

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1025: FILE: include/asm-sparc64/lockmeter.h:25:
+#define PUT_RW_CPU(rwlock_ptr,cpuv)    (rwlock_ptr)->cpu = (cpuv)
                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1025: FILE: include/asm-sparc64/lockmeter.h:25:
+#define PUT_RW_CPU(rwlock_ptr,cpuv)    (rwlock_ptr)->cpu = (cpuv)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1026: FILE: include/asm-sparc64/lockmeter.h:26:
+#define GET_RW_CPU(rwlock_ptr)         (rwlock_ptr)->cpu

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1051: FILE: include/asm-x86_64/lockmeter.h:1:
+/*

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1094: FILE: include/asm-x86_64/lockmeter.h:44:
+typedef struct inst_spinlock_s {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1099: FILE: include/asm-x86_64/lockmeter.h:49:
+#define PUT_INDEX(lock_ptr,indexv) ((inst_spinlock_t *)(lock_ptr))->index = indexv
                           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1099: FILE: include/asm-x86_64/lockmeter.h:49:
+#define PUT_INDEX(lock_ptr,indexv) ((inst_spinlock_t *)(lock_ptr))->index = indexv

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1100: FILE: include/asm-x86_64/lockmeter.h:50:
+#define GET_INDEX(lock_ptr)        ((inst_spinlock_t *)(lock_ptr))->index

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1112: FILE: include/asm-x86_64/lockmeter.h:62:
+typedef struct inst_rwlock_s {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1113: FILE: include/asm-x86_64/lockmeter.h:63:
+	volatile int lock;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1117: FILE: include/asm-x86_64/lockmeter.h:67:
+#define PUT_RWINDEX(rwlock_ptr,indexv) ((inst_rwlock_t *)(rwlock_ptr))->index = indexv
                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1117: FILE: include/asm-x86_64/lockmeter.h:67:
+#define PUT_RWINDEX(rwlock_ptr,indexv) ((inst_rwlock_t *)(rwlock_ptr))->index = indexv

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1118: FILE: include/asm-x86_64/lockmeter.h:68:
+#define GET_RWINDEX(rwlock_ptr)        ((inst_rwlock_t *)(rwlock_ptr))->index

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1119: FILE: include/asm-x86_64/lockmeter.h:69:
+#define PUT_RW_CPU(rwlock_ptr,cpuv)    ((inst_rwlock_t *)(rwlock_ptr))->cpu = cpuv
                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1119: FILE: include/asm-x86_64/lockmeter.h:69:
+#define PUT_RW_CPU(rwlock_ptr,cpuv)    ((inst_rwlock_t *)(rwlock_ptr))->cpu = cpuv

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1120: FILE: include/asm-x86_64/lockmeter.h:70:
+#define GET_RW_CPU(rwlock_ptr)         ((inst_rwlock_t *)(rwlock_ptr))->cpu

CHECK:SPACING: No space is necessary after a cast
#1129: FILE: include/asm-x86_64/lockmeter.h:79:
+	int tmp = (int) rwlock_ptr->lock;

CHECK:SPACING: No space is necessary after a cast
#1136: FILE: include/asm-x86_64/lockmeter.h:86:
+		tmp = (int) rwlock_ptr->lock;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1138: FILE: include/asm-x86_64/lockmeter.h:88:
+	if (tmp == 0) return(0);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1139: FILE: include/asm-x86_64/lockmeter.h:89:
+	else return(RW_LOCK_BIAS-tmp);
 	                        ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1139: FILE: include/asm-x86_64/lockmeter.h:89:
+	else return(RW_LOCK_BIAS-tmp);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1147: FILE: include/asm-x86_64/lockmeter.h:97:
+#define IABS(x) ((x) > 0 ? (x) : -(x))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1164: FILE: include/asm-x86_64/spinlock.h:144:
+	unsigned lockmeter_magic;

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1175: FILE: include/asm-x86_64/spinlock.h:155:
+#define RWLOCK_MAGIC_INIT	, 0, RWLOCK_MAGIC
                          	^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1175: FILE: include/asm-x86_64/spinlock.h:155:
+#define RWLOCK_MAGIC_INIT	, 0, RWLOCK_MAGIC

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1177: FILE: include/asm-x86_64/spinlock.h:157:
+#define RWLOCK_MAGIC_INIT	, 0
                          	^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1177: FILE: include/asm-x86_64/spinlock.h:157:
+#define RWLOCK_MAGIC_INIT	, 0

WARNING:LINE_SPACING: Missing a blank line after declarations
#1198: FILE: include/asm-x86_64/spinlock.h:217:
+	atomic_t *count = (atomic_t *)lock;
+	atomic_dec(count);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1207: FILE: include/asm-x86_64/spinlock.h:226:
+extern void _metered_spin_lock  (spinlock_t *lock, void *caller_pc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1207: FILE: include/asm-x86_64/spinlock.h:226:
+extern void _metered_spin_lock  (spinlock_t *lock, void *caller_pc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1208: FILE: include/asm-x86_64/spinlock.h:227:
+extern void _metered_spin_unlock(spinlock_t *lock);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1222: FILE: include/asm-x86_64/spinlock.h:241:
+	newcount = counter-1;
 	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1228: FILE: include/asm-x86_64/spinlock.h:247:
+		:"=a" (newcount)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1229: FILE: include/asm-x86_64/spinlock.h:248:
+		:"r" (newcount), "m" (atomic->counter), "0" (counter));
 		^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1255: FILE: include/linux/lockmeter.h:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1274: FILE: include/linux/lockmeter.h:20:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1277: FILE: include/linux/lockmeter.h:23:
+ *-------------------------------------------------*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void*' should also have an identifier name
#1287: FILE: include/linux/lockmeter.h:33:
+int	lstat_update(void*, void*, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void*' should also have an identifier name
#1287: FILE: include/linux/lockmeter.h:33:
+int	lstat_update(void*, void*, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1287: FILE: include/linux/lockmeter.h:33:
+int	lstat_update(void*, void*, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void*' should also have an identifier name
#1288: FILE: include/linux/lockmeter.h:34:
+int	lstat_update_time(void*, void*, int, uint32_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void*' should also have an identifier name
#1288: FILE: include/linux/lockmeter.h:34:
+int	lstat_update_time(void*, void*, int, uint32_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1288: FILE: include/linux/lockmeter.h:34:
+int	lstat_update_time(void*, void*, int, uint32_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uint32_t' should also have an identifier name
#1288: FILE: include/linux/lockmeter.h:34:
+int	lstat_update_time(void*, void*, int, uint32_t);

WARNING:LONG_LINE: line length of 135 exceeds 100 columns
#1303: FILE: include/linux/lockmeter.h:49:
+#if defined(__KERNEL__) || (!defined(CONFIG_MIPS32_COMPAT) && !defined(CONFIG_SPARC) && !defined(CONFIG_SPARC64)) || (_MIPS_SZLONG==32)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#1303: FILE: include/linux/lockmeter.h:49:
+#if defined(__KERNEL__) || (!defined(CONFIG_MIPS32_COMPAT) && !defined(CONFIG_SPARC) && !defined(CONFIG_SPARC64)) || (_MIPS_SZLONG==32)
                                                                                                                                   ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#1332: FILE: include/linux/lockmeter.h:78:
+#define LSTAT_RA(n)	\
+	((void*)( ((unsigned long) caller_pc & ~3) | n) )

CHECK:SPACING: No space is necessary after a cast
#1333: FILE: include/linux/lockmeter.h:79:
+	((void*)( ((unsigned long) caller_pc & ~3) | n) )

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1333: FILE: include/linux/lockmeter.h:79:
+	((void*)( ((unsigned long) caller_pc & ~3) | n) )

ERROR:SPACING: space prohibited after that open parenthesis '('
#1333: FILE: include/linux/lockmeter.h:79:
+	((void*)( ((unsigned long) caller_pc & ~3) | n) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1333: FILE: include/linux/lockmeter.h:79:
+	((void*)( ((unsigned long) caller_pc & ~3) | n) )

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1358: FILE: include/linux/lockmeter.h:104:
+#define LSTAT_HASH_TABLE_MASK		(LSTAT_HASH_TABLE_SIZE-1)
                              		                      ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1360: FILE: include/linux/lockmeter.h:106:
+#define DIRHASH(ra)      ((unsigned long)(ra)>>2 & LSTAT_HASH_TABLE_MASK)
                                              ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1369: FILE: include/linux/lockmeter.h:115:
+typedef struct {

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#1372: FILE: include/linux/lockmeter.h:118:
+	ushort	next_stat_index;  /* Used to link multiple locks that have the same hash table value */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1394: FILE: include/linux/lockmeter.h:140:
+typedef struct {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1395: FILE: include/linux/lockmeter.h:141:
+	uint64_t    cum_wait_ticks;	/* sum of wait times               */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1396: FILE: include/linux/lockmeter.h:142:
+^I                                /* for write locks, sum of time a  */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#1398: FILE: include/linux/lockmeter.h:144:
+	int64_t	    cum_hold_ticks;	/* cumulative sum of holds         */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1399: FILE: include/linux/lockmeter.h:145:
+^I                                /* not used for read mode locks    */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1401: FILE: include/linux/lockmeter.h:147:
+	uint32_t    max_wait_ticks;	/* max waiting time                */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1402: FILE: include/linux/lockmeter.h:148:
+	uint32_t    max_hold_ticks;	/* max holding time                */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1403: FILE: include/linux/lockmeter.h:149:
+	uint64_t    cum_wait_ww_ticks;  /* sum times writer waits on writer*/

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1404: FILE: include/linux/lockmeter.h:150:
+	uint32_t    max_wait_ww_ticks;  /* max wait time writer vs writer  */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1405: FILE: include/linux/lockmeter.h:151:
+^I                                /* prev 2 only used for write locks*/$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1406: FILE: include/linux/lockmeter.h:152:
+	uint32_t    acquire_time;       /* time lock acquired this CPU     */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1407: FILE: include/linux/lockmeter.h:153:
+	uint32_t    count[LSTAT_ACT_MAX_VALUES];

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1410: FILE: include/linux/lockmeter.h:156:
+typedef lstat_lock_counts_t	lstat_cpu_counts_t[LSTAT_MAX_STAT_INDEX];

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1422: FILE: include/linux/lockmeter.h:168:
+typedef struct {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1424: FILE: include/linux/lockmeter.h:170:
+	uint32_t    read_lock_count;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#1425: FILE: include/linux/lockmeter.h:171:
+	int64_t     cum_hold_ticks;       /* sum of read lock hold times over */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1426: FILE: include/linux/lockmeter.h:172:
+^I                                  /* all callers. ....................*/$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1427: FILE: include/linux/lockmeter.h:173:
+	uint32_t    write_index;          /* last write lock hash table index */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1428: FILE: include/linux/lockmeter.h:174:
+	uint32_t    busy_periods;         /* count of busy periods ended this */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1429: FILE: include/linux/lockmeter.h:175:
+	uint64_t    start_busy;           /* time this busy period started. ..*/

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1430: FILE: include/linux/lockmeter.h:176:
+	uint64_t    busy_ticks;           /* sum of busy periods this lock. ..*/

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1431: FILE: include/linux/lockmeter.h:177:
+	uint64_t    max_busy;             /* longest busy period for this lock*/

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1432: FILE: include/linux/lockmeter.h:178:
+	uint32_t    max_readers;          /* maximum number of readers ...... */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1435: FILE: include/linux/lockmeter.h:181:
+^I                                  /* avoid having more than one rdr at*/$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1436: FILE: include/linux/lockmeter.h:182:
+^I                                  /* needed for user space testing... */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1437: FILE: include/linux/lockmeter.h:183:
+^I                                  /* not needed for kernel 'cause it  */$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1441: FILE: include/linux/lockmeter.h:187:
+typedef lstat_read_lock_counts_t	lstat_read_lock_cpu_counts_t[LSTAT_MAX_READ_LOCK_INDEX];

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1455: FILE: include/linux/lockmeter.h:201:
+#define LSTAT_HASH_TABLE_MASK		(LSTAT_HASH_TABLE_SIZE-1)
                              		                      ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1457: FILE: include/linux/lockmeter.h:203:
+#define DIRHASH(ra)      ((unsigned long)(ra)>>2 & LSTAT_HASH_TABLE_MASK)
                                              ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1521: FILE: include/linux/lockmeter.h:267:
+typedef struct {

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#1523: FILE: include/linux/lockmeter.h:269:
+	spinlock_t		control_lock;		/* used to serialize turning statistics on/off   */

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#1524: FILE: include/linux/lockmeter.h:270:
+	spinlock_t		directory_lock;		/* for serialize adding entries to directory     */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1525: FILE: include/linux/lockmeter.h:271:
+	volatile int	next_free_dir_index;/* next free entry in the directory */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1527: FILE: include/linux/lockmeter.h:273:
+                /* the following fields represent data since     */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1532: FILE: include/linux/lockmeter.h:278:
+	uint64_t    started_cycles64;       /* cycles when measurement last started          */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1533: FILE: include/linux/lockmeter.h:279:
+	uint64_t    ending_cycles64;        /* cycles when measurement last disabled         */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1534: FILE: include/linux/lockmeter.h:280:
+	uint64_t    enabled_cycles64;       /* total cycles with measurement enabled         */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1536: FILE: include/linux/lockmeter.h:282:
+^I                                    /* i. e. number of times did lstat on;lstat off  */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1540: FILE: include/linux/lockmeter.h:286:
+^Iushort^I^I*hashtab;^I^I ^I    /* hash table for quick dir scans */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1542: FILE: include/linux/lockmeter.h:288:
+    int         next_free_read_lock_index;   /* next rwlock reader (global) stats block  */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1543: FILE: include/linux/lockmeter.h:289:
+    lstat_read_lock_cpu_counts_t *read_lock_counts[NR_CPUS]; /* per cpu read lock stats  */$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1548: FILE: include/linux/lockmeter.h:294:
+typedef struct {

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#1554: FILE: include/linux/lockmeter.h:300:
+	TIME_T          started_time;		/* time in secs since 1969 when stats last turned on  */

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#1555: FILE: include/linux/lockmeter.h:301:
+	TIME_T		ending_time;		/* time in secs since 1969 when stats last turned off */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1556: FILE: include/linux/lockmeter.h:302:
+	uint32_t	cycleval;		/* cycles per second */

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#1561: FILE: include/linux/lockmeter.h:307:
+	int              next_free_read_lock_index; /* index of next (global) read lock stats struct */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1562: FILE: include/linux/lockmeter.h:308:
+	uint64_t         started_cycles64;	/* cycles when measurement last started        */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1563: FILE: include/linux/lockmeter.h:309:
+	uint64_t         ending_cycles64;	/* cycles when stats last turned off           */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1564: FILE: include/linux/lockmeter.h:310:
+	uint64_t         enabled_cycles64;	/* total cycles with measurement enabled       */

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#1567: FILE: include/linux/lockmeter.h:313:
+	int              dir_overflow;		/* number of times we wanted more space in directory */

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#1568: FILE: include/linux/lockmeter.h:314:
+	int              rwlock_overflow;	/* # of times we wanted more space in read_locks_count */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1619: FILE: kernel/lockmeter.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1654: FILE: kernel/lockmeter.c:36:
+#include <asm/uaccess.h>

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1659: FILE: kernel/lockmeter.c:41:
+#define bzero(loc,size)		memset(loc,0,size)
                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1659: FILE: kernel/lockmeter.c:41:
+#define bzero(loc,size)		memset(loc,0,size)
                        		          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1659: FILE: kernel/lockmeter.c:41:
+#define bzero(loc,size)		memset(loc,0,size)
                        		            ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1666: FILE: kernel/lockmeter.c:48:
+static lstat_control_t lstat_control __cacheline_aligned =
+	{ LSTAT_OFF, SPIN_LOCK_UNLOCKED, SPIN_LOCK_UNLOCKED,

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1667: FILE: kernel/lockmeter.c:49:
+	  19 * 0, NR_CPUS * 0, 0, NR_CPUS * 0 };

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1686: FILE: kernel/lockmeter.c:68:
+		if (index == 0) {
+			return lstat_make_dir_entry(lock_ptr, caller_ra);
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1692: FILE: kernel/lockmeter.c:74:
+	if (dirp[index].lock_ptr != NULL && dirp[index].lock_ptr != lock_ptr) {
+		dirp[index].lock_ptr = NULL;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dirp[index].lock_ptr"
#1692: FILE: kernel/lockmeter.c:74:
+	if (dirp[index].lock_ptr != NULL && dirp[index].lock_ptr != lock_ptr) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#1770: FILE: kernel/lockmeter.c:152:
+	(*lstat_control.counts[cpu])[index].cum_wait_ticks += (uint64_t) ticks;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1780: FILE: kernel/lockmeter.c:162:
+_metered_spin_lock(spinlock_t * lock_ptr, void *caller_pc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1792: FILE: kernel/lockmeter.c:174:
+			index = lstat_update(lock_ptr, this_pc,
+						LSTAT_ACT_NO_WAIT);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1794: FILE: kernel/lockmeter.c:176:
+			uint32_t start_cycles = get_cycles();

WARNING:LINE_SPACING: Missing a blank line after declarations
#1795: FILE: kernel/lockmeter.c:177:
+			uint32_t start_cycles = get_cycles();
+			_raw_spin_lock(lock_ptr);	/* do the real lock */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1797: FILE: kernel/lockmeter.c:179:
+			index = lstat_update_time(lock_ptr, this_pc,
+				LSTAT_ACT_SPIN, get_cycles() - start_cycles);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1803: FILE: kernel/lockmeter.c:185:
+}
+/* some archs require this for atomic_dec_and_lock in modules */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1807: FILE: kernel/lockmeter.c:189:
+_metered_spin_lock_flags(spinlock_t * lock_ptr, unsigned long flags, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1807: FILE: kernel/lockmeter.c:189:
+_metered_spin_lock_flags(spinlock_t * lock_ptr, unsigned long flags, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1820: FILE: kernel/lockmeter.c:202:
+			index = lstat_update(lock_ptr, this_pc,
+						LSTAT_ACT_NO_WAIT);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1822: FILE: kernel/lockmeter.c:204:
+			uint32_t start_cycles = get_cycles();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1824: FILE: kernel/lockmeter.c:206:
+^I^I^I_raw_spin_lock_flags(lock_ptr, flags);^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1826: FILE: kernel/lockmeter.c:208:
+			index = lstat_update_time(lock_ptr, this_pc,
+				LSTAT_ACT_SPIN, get_cycles() - start_cycles);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1834: FILE: kernel/lockmeter.c:216:
+_metered_spin_trylock(spinlock_t * lock_ptr, void *caller_pc)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1838: FILE: kernel/lockmeter.c:220:
+		return _raw_spin_trylock(lock_ptr);
+	} else {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1842: FILE: kernel/lockmeter.c:224:
+		if ((retval = _raw_spin_trylock(lock_ptr))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1859: FILE: kernel/lockmeter.c:241:
+_metered_spin_unlock(spinlock_t * lock_ptr)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1871: FILE: kernel/lockmeter.c:253:
+			uint32_t hold_time;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1873: FILE: kernel/lockmeter.c:255:
+			int cpu = THIS_CPU_NUMBER;
+			hold_time = get_cycles() -

CHECK:SPACING: No space is necessary after a cast
#1876: FILE: kernel/lockmeter.c:258:
+				(uint64_t) hold_time;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1888: FILE: kernel/lockmeter.c:270:
+}
+/* some archs require this for atomic_dec_and_lock in modules*/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1896: FILE: kernel/lockmeter.c:278:
+alloc_rwlock_struct(rwlock_t * rwlock_ptr)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1919: FILE: kernel/lockmeter.c:301:
+	if ((index = GET_RWINDEX(rwlock_ptr)) == 0) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1970: FILE: kernel/lockmeter.c:352:
+_metered_read_lock(rwlock_t * rwlock_ptr, void *caller_pc)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1973: FILE: kernel/lockmeter.c:355:
+	uint32_t start_cycles;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1978: FILE: kernel/lockmeter.c:360:
+	uint64_t cycles64;

CHECK:SPACING: No space is necessary after a cast
#2004: FILE: kernel/lockmeter.c:386:
+			lstat_update((void *) rwlock_ptr, this_pc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2005: FILE: kernel/lockmeter.c:387:
+			lstat_update((void *) rwlock_ptr, this_pc,
+					LSTAT_ACT_NO_WAIT);

CHECK:SPACING: No space is necessary after a cast
#2036: FILE: kernel/lockmeter.c:418:
+	lstat_update_time((void *) rwlock_ptr, this_pc, LSTAT_ACT_SPIN,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2062: FILE: kernel/lockmeter.c:444:
+_metered_read_unlock(rwlock_t * rwlock_ptr)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2067: FILE: kernel/lockmeter.c:449:
+	uint64_t busy_length;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2068: FILE: kernel/lockmeter.c:450:
+	uint64_t cycles64;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2095: FILE: kernel/lockmeter.c:477:
+			uint64_t last_start_busy =

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'lstat_control.read_lock_counts[cpu]'
#2106: FILE: kernel/lockmeter.c:488:
+					(*lstat_control.
+						read_lock_counts[cpu])[index].

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'lstat_control.read_lock_counts[cpu]'
#2109: FILE: kernel/lockmeter.c:491:
+					(*lstat_control.
+					 read_lock_counts[cpu])[index].

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2119: FILE: kernel/lockmeter.c:501:
+_metered_write_lock(rwlock_t * rwlock_ptr, void *caller_pc)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2121: FILE: kernel/lockmeter.c:503:
+	uint32_t start_cycles;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2123: FILE: kernel/lockmeter.c:505:
+	uint32_t spin_ticks = 0; /* in anticipation of a potential wait */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2144: FILE: kernel/lockmeter.c:526:
+	if (index == 0) {
+		index = alloc_rwlock_struct(rwlock_ptr);
+	}

CHECK:SPACING: No space is necessary after a cast
#2150: FILE: kernel/lockmeter.c:532:
+		write_index = lstat_update((void *) rwlock_ptr, this_pc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2151: FILE: kernel/lockmeter.c:533:
+		write_index = lstat_update((void *) rwlock_ptr, this_pc,
+					LSTAT_ACT_NO_WAIT);

WARNING:SELF_ASSIGNMENT: Do not use self-assignments to avoid compiler warnings
#2155: FILE: kernel/lockmeter.c:537:
+				write_index = write_index;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2175: FILE: kernel/lockmeter.c:557:
+			write_index = lstat_update_time((void *)rwlock_ptr,
+					this_pc, LSTAT_ACT_SPIN, spin_ticks);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2181: FILE: kernel/lockmeter.c:563:
+			write_index = lstat_update_time((void *)rwlock_ptr,
+				this_pc, LSTAT_ACT_WW_SPIN, spin_ticks);

WARNING:SELF_ASSIGNMENT: Do not use self-assignments to avoid compiler warnings
#2194: FILE: kernel/lockmeter.c:576:
+			write_index = write_index;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2199: FILE: kernel/lockmeter.c:581:
+_metered_write_unlock(rwlock_t * rwlock_ptr)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2204: FILE: kernel/lockmeter.c:586:
+	uint32_t hold_time;

CHECK:SPACING: No space is necessary after a cast
#2222: FILE: kernel/lockmeter.c:604:
+			(uint64_t) hold_time;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2232: FILE: kernel/lockmeter.c:614:
+_metered_write_trylock(rwlock_t * rwlock_ptr, void *caller_pc)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2237: FILE: kernel/lockmeter.c:619:
+	if ((retval = _raw_write_trylock(rwlock_ptr))) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2237: FILE: kernel/lockmeter.c:619:
+	if ((retval = _raw_write_trylock(rwlock_ptr))) {
[...]
+	} else {
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2258: FILE: kernel/lockmeter.c:640:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2262: FILE: kernel/lockmeter.c:644:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2293: FILE: kernel/lockmeter.c:675:
+		bzero(lstat_control.hashtab,
+			LSTAT_HASH_TABLE_SIZE * sizeof (short));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2293: FILE: kernel/lockmeter.c:675:
+			LSTAT_HASH_TABLE_SIZE * sizeof (short));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2295: FILE: kernel/lockmeter.c:677:
+				sizeof (lstat_directory_entry_t));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2299: FILE: kernel/lockmeter.c:681:
+			bzero(lstat_control.counts[cpu],
+				sizeof (lstat_cpu_counts_t));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2299: FILE: kernel/lockmeter.c:681:
+				sizeof (lstat_cpu_counts_t));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2301: FILE: kernel/lockmeter.c:683:
+			bzero(lstat_control.read_lock_counts[cpu],
+				sizeof (lstat_read_lock_cpu_counts_t));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2301: FILE: kernel/lockmeter.c:683:
+				sizeof (lstat_read_lock_cpu_counts_t));

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#2323: FILE: kernel/lockmeter.c:705:
+	if (lstat_control.hashtab) {
+		kfree(lstat_control.hashtab);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2332: FILE: kernel/lockmeter.c:714:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#2338: FILE: kernel/lockmeter.c:720:
+		if (lstat_control.read_lock_counts[cpu]) {
+			kfree(lstat_control.read_lock_counts[cpu]);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2347: FILE: kernel/lockmeter.c:729:
+	return sizeof (lstat_user_request_t)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2348: FILE: kernel/lockmeter.c:730:
+		+ num_online_cpus() * sizeof (lstat_cpu_counts_t)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2349: FILE: kernel/lockmeter.c:731:
+		+ num_online_cpus() * sizeof (lstat_read_lock_cpu_counts_t)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2350: FILE: kernel/lockmeter.c:732:
+		+ (LSTAT_MAX_STAT_INDEX * sizeof (lstat_directory_entry_t));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2354: FILE: kernel/lockmeter.c:736:
+get_lockmeter_info(char *buffer, size_t max_len, loff_t * last_index)

CHECK:SPACING: No space is necessary after a cast
#2369: FILE: kernel/lockmeter.c:751:
+	req.kernel_magic_addr = (void *) &_etext;

CHECK:SPACING: No space is necessary after a cast
#2370: FILE: kernel/lockmeter.c:752:
+	req.kernel_end_addr = (void *) &_etext;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2387: FILE: kernel/lockmeter.c:769:
+			next_ret_bcount = sizeof (lstat_user_request_t);

CHECK:SPACING: No space is necessary after a cast
#2393: FILE: kernel/lockmeter.c:775:
+			copy_to_user(buffer, (void *) &req, next_ret_bcount);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2396: FILE: kernel/lockmeter.c:778:
+			return actual_ret_bcount;
+		} else {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2417: FILE: kernel/lockmeter.c:799:
+	next_ret_bcount = sizeof (lstat_user_request_t);

CHECK:SPACING: No space is necessary after a cast
#2421: FILE: kernel/lockmeter.c:803:
+	copy_to_user(buffer, (void *) &req, next_ret_bcount);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2427: FILE: kernel/lockmeter.c:809:
+	next_ret_bcount = sizeof (lstat_cpu_counts_t);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2432: FILE: kernel/lockmeter.c:814:
+		copy_to_user(buffer + actual_ret_bcount,
+				lstat_control.counts[cpu], next_ret_bcount);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2437: FILE: kernel/lockmeter.c:819:
+			sizeof (lstat_directory_entry_t);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2439: FILE: kernel/lockmeter.c:821:
+	if (((actual_ret_bcount + next_ret_bcount) > max_len)
+			|| !lstat_control.dir)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2443: FILE: kernel/lockmeter.c:825:
+	copy_to_user(buffer + actual_ret_bcount, lstat_control.dir,
+			next_ret_bcount);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2446: FILE: kernel/lockmeter.c:828:
+	next_ret_bcount = sizeof (lstat_read_lock_cpu_counts_t);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2451: FILE: kernel/lockmeter.c:833:
+		copy_to_user(buffer + actual_ret_bcount,
+				lstat_control.read_lock_counts[cpu],

WARNING:TYPO_SPELLING: 'intializes' may be misspelled - perhaps 'initializes'?
#2463: FILE: kernel/lockmeter.c:845:
+ *  LSTAT_ON: 1st call: allocates storage, intializes and turns on measurement
                                            ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2500: FILE: kernel/lockmeter.c:882:
+	switch (put_char) {
+

WARNING:TYPO_SPELLING: 'inconsisent' may be misspelled - perhaps 'inconsistent'?
#2505: FILE: kernel/lockmeter.c:887:
+			 * inconsisent state, we have to follow this protocol
 			   ^^^^^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2585: FILE: kernel/lockmeter.c:967:
+			printk("put_lockmeter_info(cpu=%d): LSTAT_ON\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'put_lockmeter_info', this function's name, in a string
#2585: FILE: kernel/lockmeter.c:967:
+			printk("put_lockmeter_info(cpu=%d): LSTAT_ON\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2586: FILE: kernel/lockmeter.c:968:
+			printk("put_lockmeter_info(cpu=%d): LSTAT_ON\n",
+				THIS_CPU_NUMBER);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2591: FILE: kernel/lockmeter.c:973:
+					sizeof (lstat_directory_entry_t);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2593: FILE: kernel/lockmeter.c:975:
+				(1 + LSTAT_HASH_TABLE_SIZE) * sizeof (ushort);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2594: FILE: kernel/lockmeter.c:976:
+			countsize = sizeof (lstat_cpu_counts_t);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2596: FILE: kernel/lockmeter.c:978:
+				sizeof (lstat_read_lock_cpu_counts_t);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2598: FILE: kernel/lockmeter.c:980:
+			printk(" dirsize:%d", dirsize);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2599: FILE: kernel/lockmeter.c:981:
+			printk(" hashsize:%d", hashsize);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2600: FILE: kernel/lockmeter.c:982:
+			printk(" countsize:%d", countsize);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2601: FILE: kernel/lockmeter.c:983:
+			printk(" read_lock_countsize:%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2602: FILE: kernel/lockmeter.c:984:
+			printk(" read_lock_countsize:%d\n",
+				read_lock_countsize);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2608: FILE: kernel/lockmeter.c:990:
+				uint64_t cycles64;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2623: FILE: kernel/lockmeter.c:1005:
+				printk("lockmeter: cycleFrequency:%d "

WARNING:SPLIT_STRING: quoted string split across lines
#2624: FILE: kernel/lockmeter.c:1006:
+				printk("lockmeter: cycleFrequency:%d "
+					"cycles:%d cycles64:%d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2634: FILE: kernel/lockmeter.c:1016:
+			if (!lstat_control.hashtab) {
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2645: FILE: kernel/lockmeter.c:1027:
+					printk("!!error kmalloc of hashtab\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2652: FILE: kernel/lockmeter.c:1034:
+					printk("!!error kmalloc of dir\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2662: FILE: kernel/lockmeter.c:1044:
+						printk("!!error vmalloc of "

WARNING:SPLIT_STRING: quoted string split across lines
#2663: FILE: kernel/lockmeter.c:1045:
+						printk("!!error vmalloc of "
+							"counts[%d]\n", cpu);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'lstat_control.read_lock_counts[cpu]'
#2671: FILE: kernel/lockmeter.c:1053:
+					if (!lstat_control.
+							read_lock_counts[cpu]) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2674: FILE: kernel/lockmeter.c:1056:
+						printk("!!error kmalloc of "

WARNING:SPLIT_STRING: quoted string split across lines
#2675: FILE: kernel/lockmeter.c:1057:
+						printk("!!error kmalloc of "
+						  "read_lock_counts[%d]\n",

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2689: FILE: kernel/lockmeter.c:1071:
+			} else {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2750: FILE: kernel/lockmeter.c:1132:
+	printf("lstat_control is at %x size=%d\n", &lstat_control,
+		sizeof (lstat_control));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2750: FILE: kernel/lockmeter.c:1132:
+		sizeof (lstat_control));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2751: FILE: kernel/lockmeter.c:1133:
+	printf("sizeof(spinlock_t)=%d\n", sizeof (spinlock_t));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2758: FILE: kernel/lockmeter.c:1140:
+	dirsize = LSTAT_MAX_STAT_INDEX * sizeof (lstat_directory_entry_t);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2759: FILE: kernel/lockmeter.c:1141:
+	hashsize = (1 + LSTAT_HASH_TABLE_SIZE) * sizeof (ushort);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2760: FILE: kernel/lockmeter.c:1142:
+	countsize = sizeof (lstat_cpu_counts_t);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2761: FILE: kernel/lockmeter.c:1143:
+	read_lock_countsize = sizeof (lstat_read_lock_cpu_counts_t);

CHECK:SPACING: No space is necessary after a cast
#2763: FILE: kernel/lockmeter.c:1145:
+	lstat_control.hashtab = (ushort *) malloc(hashsize);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2767: FILE: kernel/lockmeter.c:1149:
+		printf("malloc failure for at line %d in lockmeter.c\n",
+			__LINE__);

CHECK:SPACING: No space is necessary after a cast
#2771: FILE: kernel/lockmeter.c:1153:
+	lstat_control.dir = (lstat_directory_entry_t *) malloc(dirsize);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2775: FILE: kernel/lockmeter.c:1157:
+		printf("malloc failure for at line %d in lockmeter.c\n", cpu,
+			__LINE__);

CHECK:SPACING: No space is necessary after a cast
#2781: FILE: kernel/lockmeter.c:1163:
+		j = (int) (lstat_control.counts[cpu] =

WARNING:LINE_SPACING: Missing a blank line after declarations
#2781: FILE: kernel/lockmeter.c:1163:
+		int j, k;
+		j = (int) (lstat_control.counts[cpu] =

CHECK:SPACING: No space is necessary after a cast
#2782: FILE: kernel/lockmeter.c:1164:
+			   (lstat_cpu_counts_t *) malloc(countsize));

CHECK:SPACING: No space is necessary after a cast
#2783: FILE: kernel/lockmeter.c:1165:
+		k = (int) (lstat_control.read_lock_counts[cpu] =

WARNING:SPLIT_STRING: quoted string split across lines
#2788: FILE: kernel/lockmeter.c:1170:
+			printf("malloc failure for cpu=%d at line %d in "
+				"lockmeter.c\n", cpu, __LINE__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2799: FILE: kernel/lockmeter.c:1181:
+		memset(lstat_control.read_lock_counts[cpu], 0,
+			read_lock_countsize);

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#2803: FILE: kernel/lockmeter.c:1185:
+asm(" \

WARNING:TYPO_SPELLING: 'tht' may be misspelled - perhaps 'the'?
#2831: FILE: kernel/lockmeter.c:1213:
+ * except for the fact tht calls to _raw_ routines are replaced by 
                        ^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2831: FILE: kernel/lockmeter.c:1213:
+ * except for the fact tht calls to _raw_ routines are replaced by $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2839: FILE: kernel/lockmeter.c:1221:
+^I$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2884: FILE: kernel/lockmeter.c:1266:
+EXPORT_SYMBOL(_write_lock);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000250018.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 126 errors, 179 warnings, 121 checks, 2849 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000250018.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
