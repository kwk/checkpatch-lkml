WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#80: 
my code that only cleared the uptodate bitflag and we allow
                              ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LONG_LINE_COMMENT: line length of 119 exceeds 100 columns
#114: FILE: include/linux/fs.h:353:
+	seqschedlock_t		invalidate_lock;/* Cover race condition between ->nopage and invalidate_inode_pages2 */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:INDENTED_LABEL: labels should not be indented
#146: FILE: mm/memory.c:2018:
+	retry:

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#156: FILE: mm/memory.c:2025:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#158: FILE: mm/memory.c:2027:
+			yield();

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#159: FILE: mm/memory.c:2028:
+			/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:INDENTED_LABEL: labels should not be indented
#183: FILE: mm/memory.c:2076:
+		race_failure:

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#192: FILE: mm/memory.c:2085:
+			BUG();

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#194: FILE: mm/memory.c:2087:
+			yield();

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#195: FILE: mm/memory.c:2088:
+			/* fall through */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#243: FILE: include/linux/seqschedlock.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#274: FILE: include/linux/seqschedlock.h:32:
+typedef struct seqschedlock_s {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#281: FILE: include/linux/seqschedlock.h:39:
+static inline void write_seqschedlock(seqschedlock_t * sl)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MEMORY_BARRIER: memory barrier without comment
#284: FILE: include/linux/seqschedlock.h:42:
+	smp_wmb();

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#287: FILE: include/linux/seqschedlock.h:45:
+static inline void write_seqschedunlock(seqschedlock_t * sl)

WARNING:MEMORY_BARRIER: memory barrier without comment
#289: FILE: include/linux/seqschedlock.h:47:
+	smp_wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#291: FILE: include/linux/seqschedlock.h:49:
+	smp_wmb();

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#300: FILE: include/linux/seqschedlock.h:58:
+static inline int read_seqschedlock(const seqschedlock_t * sl,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#301: FILE: include/linux/seqschedlock.h:59:
+				    unsigned int * sequence)

WARNING:MEMORY_BARRIER: memory barrier without comment
#306: FILE: include/linux/seqschedlock.h:64:
+	smp_rmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#308: FILE: include/linux/seqschedlock.h:66:
+	smp_rmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#310: FILE: include/linux/seqschedlock.h:68:
+	smp_rmb();

CHECK:BRACES: braces {} should be used on all arms of this statement
#312: FILE: include/linux/seqschedlock.h:70:
+	if (unlikely(writers))
[...]
+	else if (unlikely(sequence1 != sequence2))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#316: FILE: include/linux/seqschedlock.h:74:
+		return SEQSCHEDLOCK_WRITER_RACE;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#316: FILE: include/linux/seqschedlock.h:74:
+	else {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#322: FILE: include/linux/seqschedlock.h:80:
+static inline int read_seqschedunlock(const seqschedlock_t * sl,

WARNING:MEMORY_BARRIER: memory barrier without comment
#327: FILE: include/linux/seqschedlock.h:85:
+	smp_rmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#329: FILE: include/linux/seqschedlock.h:87:
+	smp_rmb();

WARNING:NEW_TYPEDEFS: do not add new typedefs
#342: FILE: include/linux/seqschedlock.h:100:
+typedef struct seqschedlock_s {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#347: FILE: include/linux/seqschedlock.h:105:
+static inline void write_seqschedlock(seqschedlock_t * sl)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#351: FILE: include/linux/seqschedlock.h:109:
+static inline void write_seqschedunlock(seqschedlock_t * sl)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#355: FILE: include/linux/seqschedlock.h:113:
+static inline int read_seqschedlock(const seqschedlock_t * sl,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#356: FILE: include/linux/seqschedlock.h:114:
+				    unsigned int * sequence)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#361: FILE: include/linux/seqschedlock.h:119:
+static inline int read_seqschedunlock(const seqschedlock_t * sl,

CHECK:SPACING: No space is necessary after a cast
#369: FILE: include/linux/seqschedlock.h:127:
+#define seqschedlock_init(x)	do { *(x) = (seqschedlock_t) SEQSCHEDLOCK_UNLOCKED; } while (0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#369: FILE: include/linux/seqschedlock.h:127:
+#define seqschedlock_init(x)	do { *(x) = (seqschedlock_t) SEQSCHEDLOCK_UNLOCKED; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000125932.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 23 warnings, 3 checks, 255 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000125932.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
