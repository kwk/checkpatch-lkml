WARNING:REPEATED_WORD: Possible repeated word: 'that'
#38: 
only hides a shortcoming in the MTRR code itself, in that that code is not

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#72: FILE: arch/i386/kernel/cpu/mtrr/amd.c:6:
=20

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#105: FILE: arch/i386/kernel/cpu/mtrr/centaur.c:31:
+	if (replace_reg >=3D 0 && replace_reg < max)
 	                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#115: FILE: arch/i386/kernel/cpu/mtrr/centaur.c:52:
+		unsigned long *size, mtrr_type * type)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#130: FILE: arch/i386/kernel/cpu/mtrr/cyrix.c:11:
+	      unsigned long *size, mtrr_type * type)

WARNING:LINE_SPACING: Missing a blank line after declarations
#152: FILE: arch/i386/kernel/cpu/mtrr/cyrix.c:90:
+	unsigned long lbase, lsize;
+	switch (replace_reg) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#192: FILE: arch/i386/kernel/cpu/mtrr/generic.c:105:
 }
+int generic_get_free_region(unsigned long base, unsigned long size, int =

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#206: FILE: arch/i386/kernel/cpu/mtrr/generic.c:117:
+	if (replace_reg >=3D 0 && replace_reg < max)
 	                ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#225: FILE: arch/i386/kernel/cpu/mtrr/generic.c:213:
 }
+static u32 deftype_lo, deftype_hi;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#237: FILE: arch/i386/kernel/cpu/mtrr/generic.c:238:
+		deftype_lo =3D (deftype_lo & ~0xcff) | mtrr_state.def_type =

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#237: FILE: arch/i386/kernel/cpu/mtrr/generic.c:238:
+		deftype_lo =3D (deftype_lo & ~0xcff) | mtrr_state.def_type =
 		           ^

CHECK:CAMELCASE: Avoid CamelCase: <MTRRdefType_MSR>
#255: FILE: arch/i386/kernel/cpu/mtrr/generic.c:283:
+	mtrr_wrmsr(MTRRdefType_MSR, deftype_lo & ~0xcff, deftype_hi);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#264: FILE: arch/i386/kernel/cpu/mtrr/generic.c:312:
+	mask =3D set_mtrr_state();
 	     ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#303: FILE: arch/i386/kernel/cpu/mtrr/generic.c:211:
+		if (gentry.base + size - 1 >=3D (1UL << (8 * sizeof(gentry.=

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#303: FILE: arch/i386/kernel/cpu/mtrr/generic.c:211:
+		if (gentry.base + size - 1 >=3D (1UL << (8 * sizeof(gentry.=
 		                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#303: FILE: arch/i386/kernel/cpu/mtrr/generic.c:211:
+		if (gentry.base + size - 1 >=3D (1UL << (8 * sizeof(gentry.=
 		                                                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#303: FILE: arch/i386/kernel/cpu/mtrr/generic.c:211:
+		if (gentry.base + size - 1 >=3D (1UL << (8 * sizeof(gentry.=

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#305: FILE: arch/i386/kernel/cpu/mtrr/generic.c:212:
+		if (gentry.base + size - 1 >=3D (1UL << (8 * sizeof(gentry.=
+		    || size >=3D (1UL << (8 * sizeof(gentry.size) - =

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#305: FILE: arch/i386/kernel/cpu/mtrr/generic.c:212:
+		    || size >=3D (1UL << (8 * sizeof(gentry.size) - =

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#305: FILE: arch/i386/kernel/cpu/mtrr/generic.c:212:
+		    || size >=3D (1UL << (8 * sizeof(gentry.size) - =
 		            ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#311: FILE: arch/i386/kernel/cpu/mtrr/generic.c:216:
+			gentry.size =3D size << PAGE_SHIFT;
 			            ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#324: FILE: arch/i386/kernel/cpu/mtrr/generic.c:269:
+		if (size !=3D (__typeof__(gentry.size))size)

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#324: FILE: arch/i386/kernel/cpu/mtrr/generic.c:269:
+		if (size !=3D (__typeof__(gentry.size))size)
 		         ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#324: FILE: arch/i386/kernel/cpu/mtrr/generic.c:269:
+		if (size !=3D (__typeof__(gentry.size))size)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#325: FILE: arch/i386/kernel/cpu/mtrr/generic.c:270:
+			gentry.base =3D gentry.size =3D gentry.type =3D 0;
 			            ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#325: FILE: arch/i386/kernel/cpu/mtrr/generic.c:270:
+			gentry.base =3D gentry.size =3D gentry.type =3D 0;
 			                            ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#325: FILE: arch/i386/kernel/cpu/mtrr/generic.c:270:
+			gentry.base =3D gentry.size =3D gentry.type =3D 0;
 			                                            ^

CHECK:BRACES: Unbalanced braces around else statement
#326: FILE: arch/i386/kernel/cpu/mtrr/generic.c:271:
+		else {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#327: FILE: arch/i386/kernel/cpu/mtrr/generic.c:272:
+			gentry.size =3D size;
 			            ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#328: FILE: arch/i386/kernel/cpu/mtrr/generic.c:273:
+			gentry.type =3D type;
 			            ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#365: FILE: arch/i386/kernel/cpu/mtrr/main.c:170:
+static inline int types_compatible(mtrr_type type1, mtrr_type type2) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#366: FILE: arch/i386/kernel/cpu/mtrr/main.c:171:
+	return type1 =3D=3D MTRR_TYPE_UNCACHABLE ||
 	             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#366: FILE: arch/i386/kernel/cpu/mtrr/main.c:171:
+	return type1 =3D=3D MTRR_TYPE_UNCACHABLE ||
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#367: FILE: arch/i386/kernel/cpu/mtrr/main.c:172:
+	       type2 =3D=3D MTRR_TYPE_UNCACHABLE ||
 	             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#367: FILE: arch/i386/kernel/cpu/mtrr/main.c:172:
+	       type2 =3D=3D MTRR_TYPE_UNCACHABLE ||
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#368: FILE: arch/i386/kernel/cpu/mtrr/main.c:173:
+	       (type1 =3D=3D MTRR_TYPE_WRTHROUGH && type2 =3D=3D MTRR_TYPE_=
 	              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#368: FILE: arch/i386/kernel/cpu/mtrr/main.c:173:
+	       (type1 =3D=3D MTRR_TYPE_WRTHROUGH && type2 =3D=3D MTRR_TYPE_=
 	                 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#368: FILE: arch/i386/kernel/cpu/mtrr/main.c:173:
+	       (type1 =3D=3D MTRR_TYPE_WRTHROUGH && type2 =3D=3D MTRR_TYPE_=
 	                                                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#368: FILE: arch/i386/kernel/cpu/mtrr/main.c:173:
+	       (type1 =3D=3D MTRR_TYPE_WRTHROUGH && type2 =3D=3D MTRR_TYPE_=
 	                                                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#368: FILE: arch/i386/kernel/cpu/mtrr/main.c:173:
+	       (type1 =3D=3D MTRR_TYPE_WRTHROUGH && type2 =3D=3D MTRR_TYPE_=
 	                                                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#370: FILE: arch/i386/kernel/cpu/mtrr/main.c:174:
+	       (type1 =3D=3D MTRR_TYPE_WRBACK && type2 =3D=3D MTRR_TYPE_WRT=
 	              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#370: FILE: arch/i386/kernel/cpu/mtrr/main.c:174:
+	       (type1 =3D=3D MTRR_TYPE_WRBACK && type2 =3D=3D MTRR_TYPE_WRT=
 	                 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#370: FILE: arch/i386/kernel/cpu/mtrr/main.c:174:
+	       (type1 =3D=3D MTRR_TYPE_WRBACK && type2 =3D=3D MTRR_TYPE_WRT=
 	                                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#370: FILE: arch/i386/kernel/cpu/mtrr/main.c:174:
+	       (type1 =3D=3D MTRR_TYPE_WRBACK && type2 =3D=3D MTRR_TYPE_WRT=
 	                                                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#370: FILE: arch/i386/kernel/cpu/mtrr/main.c:174:
+	       (type1 =3D=3D MTRR_TYPE_WRBACK && type2 =3D=3D MTRR_TYPE_WRT=
 	                                                                   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#396: FILE: arch/i386/kernel/cpu/mtrr/main.c:333:
+		printk(KERN_WARNING "mtrr: zero sized request\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#424: FILE: arch/i386/kernel/cpu/mtrr/main.c:352:
+ lsize - 1) {$

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#438: FILE: arch/i386/kernel/cpu/mtrr/main.c:364:
+			       " 0x%lx000,0x%lx000\n", base, size, lbase,
 			           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#438: FILE: arch/i386/kernel/cpu/mtrr/main.c:364:
+			       " 0x%lx000,0x%lx000\n", base, size, lbase,
 			                 ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#438: FILE: arch/i386/kernel/cpu/mtrr/main.c:364:
+			       " 0x%lx000,0x%lx000\n", base, size, lbase,
 			                    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#455: FILE: arch/i386/kernel/cpu/mtrr/main.c:384:
+	i =3D mtrr_if->get_free_region(base, size, replace);
 	  ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#459: FILE: arch/i386/kernel/cpu/mtrr/main.c:387:
+		if (likely(replace < 0))
[...]
+		else {
[...]

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#460: FILE: arch/i386/kernel/cpu/mtrr/main.c:388:
+			usage_table[i] =3D 1;
 			               ^

CHECK:BRACES: Unbalanced braces around else statement
#461: FILE: arch/i386/kernel/cpu/mtrr/main.c:389:
+		else {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#462: FILE: arch/i386/kernel/cpu/mtrr/main.c:390:
+			usage_table[i] =3D usage_table[replace] + =
 			               ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#464: FILE: arch/i386/kernel/cpu/mtrr/main.c:391:
+			if (unlikely(replace !=3D i)) {
 			                     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#466: FILE: arch/i386/kernel/cpu/mtrr/main.c:393:
+				usage_table[replace] =3D 0;
 				                     ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#505: FILE: arch/i386/kernel/cpu/mtrr/mtrr.h:45:
+		       unsigned long *size, mtrr_type * type);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#516: FILE: arch/i386/kernel/cpu/mtrr/mtrr.h:52:
 };
+extern int generic_get_free_region(unsigned long base, unsigned long =

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#516: FILE: arch/i386/kernel/cpu/mtrr/mtrr.h:52:
+extern int generic_get_free_region(unsigned long base, unsigned long =

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#516: FILE: arch/i386/kernel/cpu/mtrr/mtrr.h:52:
+extern int generic_get_free_region(unsigned long base, unsigned long =

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:BAD_SIGN_OFF: Duplicate signature
#561: 
Signed-off-by: Jan Beulich <jbeulich@novell.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#571: FILE: arch/i386/kernel/cpu/mtrr/amd.c:10:
+	     unsigned long *size, mtrr_type * type)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#606: FILE: arch/i386/kernel/cpu/mtrr/centaur.c:53:
+		unsigned long *size, mtrr_type * type)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#618: FILE: arch/i386/kernel/cpu/mtrr/cyrix.c:12:
+	      unsigned long *size, mtrr_type * type)

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#718: FILE: arch/i386/kernel/cpu/mtrr/generic.c:238:
+		deftype_lo = (deftype_lo & ~0xcff) | mtrr_state.def_type | (mtrr_state.enabled << 10);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#779: FILE: arch/i386/kernel/cpu/mtrr/if.c:213:
+		if (gentry.base + size - 1 >= (1UL << (8 * sizeof(gentry.size) - PAGE_SHIFT))
+		    || size >= (1UL << (8 * sizeof(gentry.size) - PAGE_SHIFT)))

CHECK:BRACES: braces {} should be used on all arms of this statement
#796: FILE: arch/i386/kernel/cpu/mtrr/if.c:269:
+		if (size != (__typeof__(gentry.size))size)
[...]
+		else {
[...]

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#797: FILE: arch/i386/kernel/cpu/mtrr/if.c:270:
+			gentry.base = gentry.size = gentry.type = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: Unbalanced braces around else statement
#798: FILE: arch/i386/kernel/cpu/mtrr/if.c:271:
+		else {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#831: FILE: arch/i386/kernel/cpu/mtrr/main.c:172:
+static inline int types_compatible(mtrr_type type1, mtrr_type type2) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#860: FILE: arch/i386/kernel/cpu/mtrr/main.c:334:
+		printk(KERN_WARNING "mtrr: zero sized request\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#886: FILE: arch/i386/kernel/cpu/mtrr/main.c:356:
+				if (type == ltype) {
[...]
+				else if (types_compatible(type, ltype))
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#890: FILE: arch/i386/kernel/cpu/mtrr/main.c:360:
+				}
+				else if (types_compatible(type, ltype))

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPLIT_STRING: quoted string split across lines
#896: FILE: arch/i386/kernel/cpu/mtrr/main.c:365:
 			       "mtrr: 0x%lx000,0x%lx000 overlaps existing"
+			       " 0x%lx000,0x%lx000\n", base, size, lbase,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: braces {} should be used on all arms of this statement
#916: FILE: arch/i386/kernel/cpu/mtrr/main.c:387:
+		if (likely(replace < 0))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#918: FILE: arch/i386/kernel/cpu/mtrr/main.c:389:
+		else {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#957: FILE: arch/i386/kernel/cpu/mtrr/mtrr.h:46:
+		       unsigned long *size, mtrr_type * type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#966: FILE: arch/i386/kernel/cpu/mtrr/mtrr.h:54:
+extern int generic_get_free_region(unsigned long base, unsigned long size,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000184185.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 46 errors, 13 warnings, 20 checks, 775 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000184185.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
