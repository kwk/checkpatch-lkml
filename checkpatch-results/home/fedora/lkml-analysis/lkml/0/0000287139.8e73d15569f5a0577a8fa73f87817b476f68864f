WARNING:TYPO_SPELLING: 'neccesary' may be misspelled - perhaps 'necessary'?
#31: 
- Add neccesary fields to the task_struct.
      ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#103: FILE: linux/futex.h:51:
+u32 futex_hash_key (const union futex_key *key)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: linux/futex.h:53:
+  u32 hash = jhash2((u32*)&key->both.word,$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#105: FILE: linux/futex.h:53:
+  u32 hash = jhash2((u32*)&key->both.word,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#106: FILE: linux/futex.h:54:
+                    (sizeof(key->both.word)+sizeof(key->both.ptr))/4,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: linux/futex.h:54:
+                    (sizeof(key->both.word)+sizeof(key->both.ptr))/4,$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#106: FILE: linux/futex.h:54:
+                    (sizeof(key->both.word)+sizeof(key->both.ptr))/4,
                                            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#106: FILE: linux/futex.h:54:
+                    (sizeof(key->both.word)+sizeof(key->both.ptr))/4,
                                                                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#107: FILE: linux/futex.h:55:
+                    key->both.offset);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: linux/futex.h:55:
+                    key->both.offset);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: linux/futex.h:56:
+  return hash;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#112: FILE: linux/futex.h:60:
+int match_futex_key (const union futex_key *key1, const union futex_key *key2)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#115: FILE: linux/futex.h:63:
+	return (key1->both.word == key2->both.word
+		&& key1->both.ptr == key2->both.ptr

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#116: FILE: linux/futex.h:64:
+		&& key1->both.ptr == key2->both.ptr
+		&& key1->both.offset == key2->both.offset);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#119: FILE: linux/futex.h:67:
+extern int get_futex_key (unsigned long uaddr, union futex_key *key);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#119: FILE: linux/futex.h:67:
+extern int get_futex_key (unsigned long uaddr, union futex_key *key);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#120: FILE: linux/futex.h:68:
+extern void get_key_refs(union futex_key *key);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#121: FILE: linux/futex.h:69:
+extern void drop_key_refs(union futex_key *key);

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'qeueue' may be misspelled - perhaps 'queue'?
#187: FILE: linux/sched.h:500:
+	struct fuqueue *fuqueue_wait; /* waiting for this qeueue */
 	                                                  ^^^^^^

WARNING:TYPO_SPELLING: 'qeueue' may be misspelled - perhaps 'queue'?
#188: FILE: linux/sched.h:501:
+	struct fuqueue_waiter *fuqueue_waiter; /* waiting for this qeueue */
 	                                                           ^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#200: FILE: linux/sched.h:570:
+extern unsigned __prio_boost (task_t *, int);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#200: FILE: linux/sched.h:570:
+extern unsigned __prio_boost (task_t *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#200: FILE: linux/sched.h:570:
+extern unsigned __prio_boost (task_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'task_t *' should also have an identifier name
#200: FILE: linux/sched.h:570:
+extern unsigned __prio_boost (task_t *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#200: FILE: linux/sched.h:570:
+extern unsigned __prio_boost (task_t *, int);

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#242: FILE: fork.c:44:
+extern void init_fulock (struct task_struct *task);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#242: FILE: fork.c:44:
+extern void init_fulock (struct task_struct *task);

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#295: FILE: futex.c:87:
+	u32 hash = futex_hash_key (key);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#306: FILE: futex.c:96:
+	return match_futex_key (key1, key2);

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#366: FILE: sched.c:373:
 }
+static int effective_prio(task_t *p)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#369: FILE: sched.c:376:
+	int new_prio;
+	new_prio = rt_task(p)? p->prio : __effective_prio(p);

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#369: FILE: sched.c:376:
+	new_prio = rt_task(p)? p->prio : __effective_prio(p);
 	                     ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#370: FILE: sched.c:377:
+	return min (new_prio, p->boost_prio);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#381: FILE: sched.c:661:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#382: FILE: sched.c:662:
+^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#382: FILE: sched.c:662:
+	
+		

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "curr->task->fuqueue_wait"
#409: FILE: sched.c:1797:
+		if (unlikely(curr->task->fuqueue_wait != NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#421: FILE: sched.c:1984:
+ * fuqueue_waiter_chprio(). $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#443: FILE: sched.c:2019:
+	p->prio = min (p->prio, p->boost_prio);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p->fuqueue_wait"
#451: FILE: sched.c:2032:
+	if (old_prio != p->prio && p->fuqueue_wait != NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#460: FILE: sched.c:2126:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#462: FILE: sched.c:2128:
+ * Boost the priority of a task from a new dynamic priority. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#466: FILE: sched.c:2132:
+ * $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#475: FILE: sched.c:2141:
+unsigned __prio_boost(task_t *p, int prio)

ERROR:CODE_INDENT: code indent should use tabs where possible
#480: FILE: sched.c:2146:
+        int old_prio, new_dynamic_prio, newprio;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#480: FILE: sched.c:2146:
+        int old_prio, new_dynamic_prio, newprio;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#484: FILE: sched.c:2150:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#486: FILE: sched.c:2152:
+        old_prio = p->prio;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#486: FILE: sched.c:2152:
+        old_prio = p->prio;$

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#491: FILE: sched.c:2157:
+	new_dynamic_prio = p->policy != SCHED_NORMAL?
 	                                            ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#494: FILE: sched.c:2160:
+	newprio = min (new_dynamic_prio, p->boost_prio);

CHECK:BRACES: braces {} should be used on all arms of this statement
#498: FILE: sched.c:2164:
+		if (rq->curr == p) {
[...]
+		else if (TASK_PREEMPTS_CURR (p, rq))
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#502: FILE: sched.c:2168:
+		else if (TASK_PREEMPTS_CURR (p, rq))

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#502: FILE: sched.c:2168:
+		}
+		else if (TASK_PREEMPTS_CURR (p, rq))

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#505: FILE: sched.c:2171:
+	task_rq_unlock (rq, &flags);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#509: FILE: sched.c:2175:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#520: FILE: sched.c:2185:
+		newprio = MAX_USER_RT_PRIO-1 - p->rt_priority;
 		                          ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#525: FILE: sched.c:2189:
+	p->prio = min (newprio, p->boost_prio);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#530: FILE: sched.c:2194:
+ * $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p->fuqueue_wait"
#559: FILE: sched.c:2286:
+	if (oldprio != p->prio && p->fuqueue_wait != NULL)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#571: FILE: sched.c:2951:
+	unsigned old_prio;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p->fuqueue_wait"
#582: FILE: sched.c:2964:
+		if (old_prio != p->prio && p->fuqueue_wait != NULL)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#583: FILE: sched.c:2965:
+			fuqueue_waiter_chprio (p);

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#593: FILE: signal.c:524:
+extern void fuqueue_waiter_cancel (struct task_struct *, int);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#602: FILE: signal.c:549:
+^I * $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#613: FILE: signal.c:559:
+	if (unlikely (t->fuqueue_wait != NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 't->fuqueue_wait != NULL'
#613: FILE: signal.c:559:
+	if (unlikely (t->fuqueue_wait != NULL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "t->fuqueue_wait"
#613: FILE: signal.c:559:
+	if (unlikely (t->fuqueue_wait != NULL))

WARNING:BRACES: braces {} are not necessary for single statement blocks
#615: FILE: signal.c:561:
+	if (!wake_up_state(t, mask)) {
 		kick_process(t);
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "t->fuqueue_wait"
#626: FILE: signal.c:687:
+			if (unlikely(t->fuqueue_wait != NULL))

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

CHECK:SPACING: No space is necessary after a cast
#646: FILE: timer.c:971:
+	struct task_struct *task = (task_t *) __data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#647: FILE: timer.c:972:
+	struct task_struct *task = (task_t *) __data;
+	if (unlikely(task->fuqueue_wait != NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "task->fuqueue_wait"
#647: FILE: timer.c:972:
+	if (unlikely(task->fuqueue_wait != NULL))

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000287139.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 45 warnings, 23 checks, 542 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000287139.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
