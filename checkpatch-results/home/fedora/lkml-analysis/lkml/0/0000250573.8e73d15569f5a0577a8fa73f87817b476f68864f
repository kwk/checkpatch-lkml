WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#74: 
--- working-2.6.orig/include/asm-ppc64/mmu_context.h	2004-08-25 10:37:27.000000000 +1000

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#119: FILE: include/asm-ppc64/mmu_context.h:213:
+ * ^I- We have VSIDs allocated for every kernel address$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#123: FILE: include/asm-ppc64/mmu_context.h:217:
+ * ^I- We allow for 15 significant bits of ESID and 20 bits of$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#128: FILE: include/asm-ppc64/mmu_context.h:222:
+ * ^I- The scramble function gives robust scattering in the hash$

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#164: FILE: include/asm-ppc64/mmu_context.h:239:
+#if 0

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#168: FILE: include/asm-ppc64/mmu_context.h:243:
+	 * modulus (2^n-1) without a second multiply. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#175: FILE: include/asm-ppc64/mmu_context.h:250:
+	return (x + ((x+1) >> VSID_BITS)) & VSID_MODULUS;
 	               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#197: FILE: include/asm-ppc64/mmu_context.h:258:
+} $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#232: FILE: include/asm-ppc64/mmu.h:221:
+#define VSID_MODULUS	((1UL<<VSID_BITS)-1)
                     	     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#232: FILE: include/asm-ppc64/mmu.h:221:
+#define VSID_MODULUS	((1UL<<VSID_BITS)-1)
                     	                 ^

WARNING:TYPO_SPELLING: 'continaing' may be misspelled - perhaps 'containing'?
#242: FILE: include/asm-ppc64/mmu.h:231:
+ *	rt = register continaing the proto-VSID and into which the
   	              ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#246: FILE: include/asm-ppc64/mmu.h:235:
+ * ^I- rt and rx must be different registers$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#247: FILE: include/asm-ppc64/mmu.h:236:
+ * ^I- The answer will end up in the low 36 bits of rt.  The higher$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#248: FILE: include/asm-ppc64/mmu.h:237:
+ * ^I  bits may contain other garbage, so you may need to mask the$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: include/asm-ppc64/mmu.h:238:
+ * ^I  result. $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#249: FILE: include/asm-ppc64/mmu.h:238:
+ * ^I  result. $

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#251: FILE: include/asm-ppc64/mmu.h:240:
+#define ASM_VSID_SCRAMBLE(rt, rx)	\
+	lis	rx,VSID_MULTIPLIER@h;					\
+	ori	rx,rx,VSID_MULTIPLIER@l;				\
+	mulld	rt,rt,rx;		/* rt = rt * MULTIPLIER */	\
+									\
+	srdi	rx,rt,VSID_BITS;					\
+	clrldi	rt,rt,(64-VSID_BITS);					\
+	add	rt,rt,rx;		/* add high and low bits */	\
+	/* Now, r3 == VSID (mod 2^36-1), and lies between 0 and		\

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rt' - possible side-effects?
#251: FILE: include/asm-ppc64/mmu.h:240:
+#define ASM_VSID_SCRAMBLE(rt, rx)	\
+	lis	rx,VSID_MULTIPLIER@h;					\
+	ori	rx,rx,VSID_MULTIPLIER@l;				\
+	mulld	rt,rt,rx;		/* rt = rt * MULTIPLIER */	\
+									\
+	srdi	rx,rt,VSID_BITS;					\
+	clrldi	rt,rt,(64-VSID_BITS);					\
+	add	rt,rt,rx;		/* add high and low bits */	\
+	/* Now, r3 == VSID (mod 2^36-1), and lies between 0 and		\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rx' - possible side-effects?
#251: FILE: include/asm-ppc64/mmu.h:240:
+#define ASM_VSID_SCRAMBLE(rt, rx)	\
+	lis	rx,VSID_MULTIPLIER@h;					\
+	ori	rx,rx,VSID_MULTIPLIER@l;				\
+	mulld	rt,rt,rx;		/* rt = rt * MULTIPLIER */	\
+									\
+	srdi	rx,rt,VSID_BITS;					\
+	clrldi	rt,rt,(64-VSID_BITS);					\
+	add	rt,rt,rx;		/* add high and low bits */	\
+	/* Now, r3 == VSID (mod 2^36-1), and lies between 0 and		\

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#251: FILE: include/asm-ppc64/mmu.h:240:
+#define ASM_VSID_SCRAMBLE(rt, rx)	\
+	lis	rx,VSID_MULTIPLIER@h;					\
+	ori	rx,rx,VSID_MULTIPLIER@l;				\
+	mulld	rt,rt,rx;		/* rt = rt * MULTIPLIER */	\
+									\
+	srdi	rx,rt,VSID_BITS;					\
+	clrldi	rt,rt,(64-VSID_BITS);					\
+	add	rt,rt,rx;		/* add high and low bits */	\
+	/* Now, r3 == VSID (mod 2^36-1), and lies between 0 and		\

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#252: FILE: include/asm-ppc64/mmu.h:241:
+	lis	rx,VSID_MULTIPLIER@h;					\
 	   	  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#253: FILE: include/asm-ppc64/mmu.h:242:
+	ori	rx,rx,VSID_MULTIPLIER@l;				\
 	   	  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#253: FILE: include/asm-ppc64/mmu.h:242:
+	ori	rx,rx,VSID_MULTIPLIER@l;				\
 	   	     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#254: FILE: include/asm-ppc64/mmu.h:243:
+	mulld	rt,rt,rx;		/* rt = rt * MULTIPLIER */	\
 	     	  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#254: FILE: include/asm-ppc64/mmu.h:243:
+	mulld	rt,rt,rx;		/* rt = rt * MULTIPLIER */	\
 	     	     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#256: FILE: include/asm-ppc64/mmu.h:245:
+	srdi	rx,rt,VSID_BITS;					\
 	    	  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#256: FILE: include/asm-ppc64/mmu.h:245:
+	srdi	rx,rt,VSID_BITS;					\
 	    	     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#257: FILE: include/asm-ppc64/mmu.h:246:
+	clrldi	rt,rt,(64-VSID_BITS);					\
 	      	  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#257: FILE: include/asm-ppc64/mmu.h:246:
+	clrldi	rt,rt,(64-VSID_BITS);					\
 	      	     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#257: FILE: include/asm-ppc64/mmu.h:246:
+	clrldi	rt,rt,(64-VSID_BITS);					\
 	      	         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#258: FILE: include/asm-ppc64/mmu.h:247:
+	add	rt,rt,rx;		/* add high and low bits */	\
 	   	  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#258: FILE: include/asm-ppc64/mmu.h:247:
+	add	rt,rt,rx;		/* add high and low bits */	\
 	   	     ^

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#264: FILE: include/asm-ppc64/mmu.h:253:
+	 * cases the answer is the low 36 bits of (r3 + ((r3+1) >> 36))*/\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#265: FILE: include/asm-ppc64/mmu.h:254:
+	addi	rx,rt,1;						\
 	    	  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#265: FILE: include/asm-ppc64/mmu.h:254:
+	addi	rx,rt,1;						\
 	    	     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#266: FILE: include/asm-ppc64/mmu.h:255:
+	srdi	rx,rx,VSID_BITS;	/* extract 2^36 bit */		\
 	    	  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#266: FILE: include/asm-ppc64/mmu.h:255:
+	srdi	rx,rx,VSID_BITS;	/* extract 2^36 bit */		\
 	    	     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#267: FILE: include/asm-ppc64/mmu.h:256:
+	add	rt,rt,rx
 	   	  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#267: FILE: include/asm-ppc64/mmu.h:256:
+	add	rt,rt,rx
 	   	     ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#430: FILE: arch/ppc64/mm/stab.c:122:
+		if ((ea >= TASK_SIZE_USER64) || (! mm))
 		                                 ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ea >= TASK_SIZE_USER64'
#430: FILE: arch/ppc64/mm/stab.c:122:
+		if ((ea >= TASK_SIZE_USER64) || (! mm))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '! mm'
#430: FILE: arch/ppc64/mm/stab.c:122:
+		if ((ea >= TASK_SIZE_USER64) || (! mm))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#445: FILE: include/asm-ppc64/pgtable.h:51:
+#define PGTABLE_EA_MASK	((1UL<<PGTABLE_EA_BITS)-1)
                        	     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#445: FILE: include/asm-ppc64/pgtable.h:51:
+#define PGTABLE_EA_MASK	((1UL<<PGTABLE_EA_BITS)-1)
                        	                       ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#496: FILE: arch/ppc64/mm/hash_utils.c:260:
+		if ((ea > USER_END) || (! mm))
 		                        ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ea > USER_END'
#496: FILE: arch/ppc64/mm/hash_utils.c:260:
+		if ((ea > USER_END) || (! mm))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '! mm'
#496: FILE: arch/ppc64/mm/hash_utils.c:260:
+		if ((ea > USER_END) || (! mm))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000250573.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 13 warnings, 12 checks, 416 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000250573.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
