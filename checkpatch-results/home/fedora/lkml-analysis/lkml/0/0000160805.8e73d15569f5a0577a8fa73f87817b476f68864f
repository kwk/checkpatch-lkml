CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#60: FILE: include/linux/swap.h:157:
+extern int do_remember_page(struct address_space *, unsigned long);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#60: FILE: include/linux/swap.h:157:
+extern int do_remember_page(struct address_space *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#60: FILE: include/linux/swap.h:157:
+extern int do_remember_page(struct address_space *, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#65: FILE: include/linux/swap.h:162:
+extern void remember_page(struct page *, struct address_space *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#65: FILE: include/linux/swap.h:162:
+extern void remember_page(struct page *, struct address_space *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#65: FILE: include/linux/swap.h:162:
+extern void remember_page(struct page *, struct address_space *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#65: FILE: include/linux/swap.h:162:
+extern void remember_page(struct page *, struct address_space *, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#66: FILE: include/linux/swap.h:163:
+extern int page_is_hot(struct page *, struct address_space *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#66: FILE: include/linux/swap.h:163:
+extern int page_is_hot(struct page *, struct address_space *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#66: FILE: include/linux/swap.h:163:
+extern int page_is_hot(struct page *, struct address_space *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#66: FILE: include/linux/swap.h:163:
+extern int page_is_hot(struct page *, struct address_space *, unsigned long);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#77: FILE: include/linux/swap.h:307:
+#define page_is_hot(x,y,z)	0
                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#77: FILE: include/linux/swap.h:307:
+#define page_is_hot(x,y,z)	0
                        ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#100: FILE: mm/clockpro.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#101: FILE: mm/clockpro.c:2:
+ * mm/clockpro.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#119: FILE: mm/clockpro.c:20:
+	for (cpu = first_cpu(cpu_online_map); cpu < NR_CPUS; cpu++)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#134: FILE: mm/clockpro.c:35:
+		next_check = jiffies + HZ/10;
 		                         ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#142: FILE: mm/clockpro.c:43:
+	struct zone * zone;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#145: FILE: mm/clockpro.c:46:
+	for (cpu = first_cpu(cpu_online_map); cpu < NR_CPUS; cpu++)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#152: FILE: mm/clockpro.c:53:
+int page_is_hot(struct page * page, struct address_space * mapping,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#152: FILE: mm/clockpro.c:53:
+int page_is_hot(struct page * page, struct address_space * mapping,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#194: FILE: mm/clockpro.c:95:
+void remember_page(struct page * page, struct address_space * mapping,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#194: FILE: mm/clockpro.c:95:
+void remember_page(struct page * page, struct address_space * mapping,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: mm/clockpro.c:96:
+void remember_page(struct page * page, struct address_space * mapping,
+		unsigned long index)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#197: FILE: mm/clockpro.c:98:
+	struct zone * zone = page_zone(page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#198: FILE: mm/clockpro.c:99:
+	struct zone * zone = page_zone(page);
+	if (do_remember_page(mapping, index) && (index & 1) &&

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#199: FILE: mm/clockpro.c:100:
+	if (do_remember_page(mapping, index) && (index & 1) &&
+			zone->active_limit < zone->present_pages * 7 / 8)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#239: FILE: mm/nonresident.c:105:
+int do_remember_page(struct address_space * mapping, unsigned long index)

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#289: FILE: mm/swap_state.c:365:
+			if (active) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#291: FILE: mm/swap_state.c:367:
+			} else

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000160805.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 14 warnings, 7 checks, 268 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000160805.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
