WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#23: 
In message <Pine.LNX.4.44.0401041501510.12666-100000@bigblue.dev.mdolabs.com> you write:

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#52: FILE: include/linux/kthread.h:1:
+#ifndef _LINUX_KTHREAD_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#68: FILE: include/linux/kthread.h:17:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#95: FILE: include/linux/kthread.h:44:
+ * terminate immediately. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#106: FILE: include/linux/kthread.h:55:
+ * kthread_start().  Returns the kthread, or ERR_PTR(). */

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#110: FILE: include/linux/kthread.h:59:
+	struct task_struct *__k						      \
+		= kthread_create(initfn,corefn,data,namefmt, ## __VA_ARGS__); \

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#110: FILE: include/linux/kthread.h:59:
+		= kthread_create(initfn,corefn,data,namefmt, ## __VA_ARGS__); \
 		                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#110: FILE: include/linux/kthread.h:59:
+		= kthread_create(initfn,corefn,data,namefmt, ## __VA_ARGS__); \
 		                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#110: FILE: include/linux/kthread.h:59:
+		= kthread_create(initfn,corefn,data,namefmt, ## __VA_ARGS__); \
 		                                   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#113: FILE: include/linux/kthread.h:62:
+		if (__err) __k = ERR_PTR(__err);			      \

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#129: FILE: include/linux/kthread.h:78:
+ * never called. */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#140: FILE: include/linux/workqueue.h:63:
+extern int keventd_up(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#161: FILE: kernel/kthread.c:1:
+/* Kernel thread helper functions.

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#178: FILE: kernel/kthread.c:18:
+struct kthread_create_info
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:USE_NEGATIVE_ERRNO: return of an errno should typically be negative (ie: return -EINTR)
#207: FILE: kernel/kthread.c:47:
+		return EINTR;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#223: FILE: kernel/kthread.c:63:
+		if (k.corefn && (ret = k.corefn(k.data)) < 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#235: FILE: kernel/kthread.c:75:
+enum kthread_op_type
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#242: FILE: kernel/kthread.c:82:
+struct kthread_op
+{

ERROR:SPACING: space required after that ',' (ctx:VxV)
#262: FILE: kernel/kthread.c:102:
+	pid = kernel_thread(kthread,op->u.create,CLONE_FS|CLONE_FILES|SIGCHLD);
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#262: FILE: kernel/kthread.c:102:
+	pid = kernel_thread(kthread,op->u.create,CLONE_FS|CLONE_FILES|SIGCHLD);
 	                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#262: FILE: kernel/kthread.c:102:
+	pid = kernel_thread(kthread,op->u.create,CLONE_FS|CLONE_FILES|SIGCHLD);
 	                                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#262: FILE: kernel/kthread.c:102:
+	pid = kernel_thread(kthread,op->u.create,CLONE_FS|CLONE_FILES|SIGCHLD);
 	                                                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#289: FILE: kernel/kthread.c:129:
+	ret = waitpid(op->u.target->tgid, &status, __WALL|WUNTRACED);
 	                                                 ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#290: FILE: kernel/kthread.c:130:
+	BUG_ON(ret < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#320: FILE: kernel/kthread.c:160:
+	case KTHREAD_CREATE: op->u.result = create_kthread(op); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#321: FILE: kernel/kthread.c:161:
+	case KTHREAD_START: op->u.result = start_kthread(op); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#322: FILE: kernel/kthread.c:162:
+	case KTHREAD_STOP: op->u.result = stop_kthread(op); break;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#324: FILE: kernel/kthread.c:164:
+		BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#339: FILE: kernel/kthread.c:179:
+	 * can't use keventd. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#340: FILE: kernel/kthread.c:180:
+	if (!keventd_up())
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#342: FILE: kernel/kthread.c:182:
+	else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#387: FILE: kernel/kthread.c:227:
+		printk("init returning %i\n", -EINVAL);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'init', this function's name, in a string
#387: FILE: kernel/kthread.c:227:
+		printk("init returning %i\n", -EINVAL);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#408: FILE: kernel/kthread.c:248:
+	printk("kthread: Initialization which fails.\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#410: FILE: kernel/kthread.c:250:
+	BUG_ON(IS_ERR(k));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#412: FILE: kernel/kthread.c:252:
+	BUG_ON(ret != -EINVAL);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#414: FILE: kernel/kthread.c:254:
+	printk("kthread: stopped before initialization\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#416: FILE: kernel/kthread.c:256:
+	BUG_ON(IS_ERR(k));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#418: FILE: kernel/kthread.c:258:
+	BUG_ON(ret != 0);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#420: FILE: kernel/kthread.c:260:
+	printk("kthread: Corefn which fails.\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#422: FILE: kernel/kthread.c:262:
+	BUG_ON(IS_ERR(k));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#424: FILE: kernel/kthread.c:264:
+	BUG_ON(ret != 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#426: FILE: kernel/kthread.c:266:
+	BUG_ON(ret != -ENOENT);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#428: FILE: kernel/kthread.c:268:
+	printk("kthread: Corefn which succeeds.\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#430: FILE: kernel/kthread.c:270:
+	BUG_ON(IS_ERR(k));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#432: FILE: kernel/kthread.c:272:
+	BUG_ON(ret != 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#434: FILE: kernel/kthread.c:274:
+	BUG_ON(ret != 0);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#436: FILE: kernel/kthread.c:276:
+	printk("kthread: Corefn which exits.\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#438: FILE: kernel/kthread.c:278:
+	BUG_ON(IS_ERR(k));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#441: FILE: kernel/kthread.c:281:
+	BUG_ON(ret != 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#442: FILE: kernel/kthread.c:282:
+	BUG_ON(!(k->state & (TASK_ZOMBIE|TASK_DEAD)));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#442: FILE: kernel/kthread.c:282:
+	BUG_ON(!(k->state & (TASK_ZOMBIE|TASK_DEAD)));
 	                                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#445: FILE: kernel/kthread.c:285:
+	printk("All kthread tests passed...\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "keventd_wq"
#468: FILE: kernel/workqueue.c:364:
+	return keventd_wq != NULL;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000314465.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 31 warnings, 9 checks, 405 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000314465.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
