WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#50: 
diff -urzN -X /home/axboe/cdrom/exclude /opt/kernel/linux-2.4.19-pre8/drivers/block/ll_rw_blk.c linux/drivers/block/ll_rw_blk.c

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#83: FILE: drivers/block/ll_rw_blk.c:260:
+	BUG_ON(bqt->busy);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#84: FILE: drivers/block/ll_rw_blk.c:261:
+	BUG_ON(!list_empty(&bqt->busy_list));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#109: FILE: drivers/block/ll_rw_blk.c:286:
+		printk("blk_queue_init_tags: adjusted depth to %d\n", depth);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'blk_queue_init_tags', this function's name, in a string
#109: FILE: drivers/block/ll_rw_blk.c:286:
+		printk("blk_queue_init_tags: adjusted depth to %d\n", depth);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*tags)...) over kmalloc(sizeof(struct blk_queue_tag)...)
#112: FILE: drivers/block/ll_rw_blk.c:289:
+	tags = kmalloc(sizeof(struct blk_queue_tag), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#116: FILE: drivers/block/ll_rw_blk.c:293:
+	tags->tag_index = kmalloc(depth * sizeof(struct request *), GFP_ATOMIC);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#121: FILE: drivers/block/ll_rw_blk.c:298:
+	tags->tag_map = kmalloc(bits * sizeof(unsigned long), GFP_ATOMIC);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#171: FILE: drivers/block/ll_rw_blk.c:348:
+	BUG_ON(tag == -1);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#177: FILE: drivers/block/ll_rw_blk.c:354:
+		printk("attempt to clear non-busy tag (%d)\n", tag);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bqt->tag_index[tag]"
#185: FILE: drivers/block/ll_rw_blk.c:362:
+	if (unlikely(bqt->tag_index[tag] == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#186: FILE: drivers/block/ll_rw_blk.c:363:
+		printk("tag %d is missing\n", tag);

CHECK:BRACES: braces {} should be used on all arms of this statement
#255: FILE: drivers/block/ll_rw_blk.c:432:
+		if (rq->tag == -1) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#256: FILE: drivers/block/ll_rw_blk.c:433:
+			printk("bad tag found on list\n");

CHECK:BRACES: Unbalanced braces around else statement
#259: FILE: drivers/block/ll_rw_blk.c:436:
+		} else

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#290: FILE: drivers/block/ll_rw_blk.c:1649:
+EXPORT_SYMBOL(blk_queue_init_tags);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#291: FILE: drivers/block/ll_rw_blk.c:1650:
+EXPORT_SYMBOL(blk_queue_free_tags);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#292: FILE: drivers/block/ll_rw_blk.c:1651:
+EXPORT_SYMBOL(blk_queue_start_tag);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#293: FILE: drivers/block/ll_rw_blk.c:1652:
+EXPORT_SYMBOL(blk_queue_end_tag);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#294: FILE: drivers/block/ll_rw_blk.c:1653:
+EXPORT_SYMBOL(blk_queue_invalidate_tags);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#328: FILE: include/linux/blkdev.h:88:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#349: FILE: include/linux/blkdev.h:156:
+#define blk_queue_tagged(q)	(q)->tagged_queueing

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'q' - possible side-effects?
#363: FILE: include/linux/blkdev.h:203:
+#define blk_queue_tag_queue(q)		((q)->queue_tags->busy < (q)->queue_tags->max_depth)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#365: FILE: include/linux/blkdev.h:205:
+extern int blk_queue_start_tag(request_queue_t *, struct request *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#365: FILE: include/linux/blkdev.h:205:
+extern int blk_queue_start_tag(request_queue_t *, struct request *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#365: FILE: include/linux/blkdev.h:205:
+extern int blk_queue_start_tag(request_queue_t *, struct request *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#366: FILE: include/linux/blkdev.h:206:
+extern void blk_queue_end_tag(request_queue_t *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#366: FILE: include/linux/blkdev.h:206:
+extern void blk_queue_end_tag(request_queue_t *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#366: FILE: include/linux/blkdev.h:206:
+extern void blk_queue_end_tag(request_queue_t *, struct request *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#367: FILE: include/linux/blkdev.h:207:
+extern int blk_queue_init_tags(request_queue_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#367: FILE: include/linux/blkdev.h:207:
+extern int blk_queue_init_tags(request_queue_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#367: FILE: include/linux/blkdev.h:207:
+extern int blk_queue_init_tags(request_queue_t *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#368: FILE: include/linux/blkdev.h:208:
+extern void blk_queue_free_tags(request_queue_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#368: FILE: include/linux/blkdev.h:208:
+extern void blk_queue_free_tags(request_queue_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#369: FILE: include/linux/blkdev.h:209:
+extern void blk_queue_invalidate_tags(request_queue_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#369: FILE: include/linux/blkdev.h:209:
+extern void blk_queue_invalidate_tags(request_queue_t *);

WARNING:TYPO_SPELLING: 'maxium' may be misspelled - perhaps 'maximum'?
#399: FILE: Documentation/Configure.help:809:
+  and 32 is valid, with 32 being the maxium that the hardware supports.
                                      ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#542: FILE: drivers/ide/ide-disk.c:385:
+			BUG();

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd == READ'
#554: FILE: drivers/ide/ide-disk.c:414:
+	if ((cmd == READ) && drive->using_tcq)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#580: FILE: drivers/ide/ide-disk.c:450:
+	if (blk_rq_tagged(rq)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#583: FILE: drivers/ide/ide-disk.c:453:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#601: FILE: drivers/ide/ide-disk.c:497:
+	if (blk_rq_tagged(rq)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#604: FILE: drivers/ide/ide-disk.c:500:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#648: FILE: drivers/ide/ide-disk.c:608:
+			BUG();

CHECK:BRACES: braces {} should be used on all arms of this statement
#735: FILE: drivers/ide/ide-disk.c:721:
+		if (drive->using_tcq) {
[...]
+		} else if (drive->using_dma && !(HWIF(drive)->dmaproc(ide_dma_read, drive)))
[...]

CHECK:SPACING: No space is necessary after a cast
#764: FILE: drivers/ide/ide-disk.c:1250:
+	ide_drive_t	*drive = (ide_drive_t *) data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#777: FILE: drivers/ide/ide-disk.c:1263:
+	len += sprintf(out+len, "Max queue depth:\t%d\n",drive->queue_depth);
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#777: FILE: drivers/ide/ide-disk.c:1263:
+	len += sprintf(out+len, "Max queue depth:\t%d\n",drive->queue_depth);
 	                                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#778: FILE: drivers/ide/ide-disk.c:1264:
+	len += sprintf(out+len, "Max achieved depth:\t%d\n",drive->max_depth);
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#778: FILE: drivers/ide/ide-disk.c:1264:
+	len += sprintf(out+len, "Max achieved depth:\t%d\n",drive->max_depth);
 	                                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#779: FILE: drivers/ide/ide-disk.c:1265:
+	len += sprintf(out+len, "Max depth since last:\t%d\n",drive->max_last_depth);
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#779: FILE: drivers/ide/ide-disk.c:1265:
+	len += sprintf(out+len, "Max depth since last:\t%d\n",drive->max_last_depth);
 	                                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#780: FILE: drivers/ide/ide-disk.c:1266:
+	len += sprintf(out+len, "Current depth:\t\t%d\n", ata_pending_commands(drive));
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#781: FILE: drivers/ide/ide-disk.c:1267:
+	len += sprintf(out+len, "Active tags:\t\t[ ");
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#788: FILE: drivers/ide/ide-disk.c:1274:
+		len += sprintf(out+len, "%d, ", i);
 		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#791: FILE: drivers/ide/ide-disk.c:1277:
+	len += sprintf(out+len, "]\n");
 	                  ^

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#793: FILE: drivers/ide/ide-disk.c:1279:
+	len += sprintf(out+len, "Queue:\t\t\treleased [ %lu ] - started [ %lu ]\n", drive->immed_rel, drive->immed_comp);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#793: FILE: drivers/ide/ide-disk.c:1279:
+	len += sprintf(out+len, "Queue:\t\t\treleased [ %lu ] - started [ %lu ]\n", drive->immed_rel, drive->immed_comp);
 	                  ^

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#796: FILE: drivers/ide/ide-disk.c:1282:
+		len += sprintf(out+len, "pending request and queue count mismatch (counted: %d)\n", cmds);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#796: FILE: drivers/ide/ide-disk.c:1282:
+		len += sprintf(out+len, "pending request and queue count mismatch (counted: %d)\n", cmds);
 		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#798: FILE: drivers/ide/ide-disk.c:1284:
+	len += sprintf(out+len, "DMA status:\t\t%srunning\n", HWGROUP(drive)->dma ? "" : "not ");
 	                  ^

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#813: FILE: drivers/ide/ide-disk.c:1299:
+	{ "tcq",		S_IFREG|S_IRUSR,	proc_idedisk_read_tcq,			NULL },

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#813: FILE: drivers/ide/ide-disk.c:1299:
+	{ "tcq",		S_IFREG|S_IRUSR,	proc_idedisk_read_tcq,			NULL },
 	        		       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#813: FILE: drivers/ide/ide-disk.c:1299:
+	{ "tcq",		S_IFREG|S_IRUSR,	proc_idedisk_read_tcq,			NULL },

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LONG_LINE: line length of 287 exceeds 100 columns
#856: FILE: drivers/ide/ide-disk.c:1471:
+	ide_add_setting(drive,	"using_tcq",		SETTING_RW,					HDIO_GET_QDMA,		HDIO_SET_QDMA,		TYPE_BYTE,	0,	IDE_MAX_TAG,			1,		1,		&drive->using_tcq,		set_using_tcq);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#878: FILE: drivers/ide/ide-dma.c:597:
+	outb(inb(dma_base+2)|6, dma_base+2);	/* clear INTR & ERROR flags */
 	                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#878: FILE: drivers/ide/ide-dma.c:597:
+	outb(inb(dma_base+2)|6, dma_base+2);	/* clear INTR & ERROR flags */
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#878: FILE: drivers/ide/ide-dma.c:597:
+	outb(inb(dma_base+2)|6, dma_base+2);	/* clear INTR & ERROR flags */
 	                                ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#997: FILE: drivers/ide/ide-taskfile.c:253:
+		if (taskfile->command == WIN_WRITEDMA || taskfile->command == WIN_WRITEDMA_EXT)
[...]
+		else if (taskfile->command == WIN_READDMA || taskfile->command == WIN_READDMA_EXT)
[...]
+		else if (taskfile->command == WIN_WRITEDMA_QUEUED || taskfile->command == WIN_WRITEDMA_QUEUED_EXT) {
[...]
+		} else if (taskfile->command == WIN_READDMA_QUEUED || taskfile->command == WIN_READDMA_QUEUED_EXT) {
[...]
+		} else {
[...]

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1001: FILE: drivers/ide/ide-taskfile.c:257:
+		else if (taskfile->command == WIN_WRITEDMA_QUEUED || taskfile->command == WIN_WRITEDMA_QUEUED_EXT) {

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1004: FILE: drivers/ide/ide-taskfile.c:260:
+		} else if (taskfile->command == WIN_READDMA_QUEUED || taskfile->command == WIN_READDMA_QUEUED_EXT) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1008: FILE: drivers/ide/ide-taskfile.c:264:
+			printk("ata_taskfile: unknown command %x\n", taskfile->command);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1029: FILE: drivers/ide/ide-tcq.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1042: FILE: drivers/ide/ide-tcq.c:14:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1043: FILE: drivers/ide/ide-tcq.c:15:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#1057: FILE: drivers/ide/ide-tcq.c:29:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/delay.h> instead of <asm/delay.h>
#1058: FILE: drivers/ide/ide-tcq.c:30:
+#include <asm/delay.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1084: FILE: drivers/ide/ide-tcq.c:56:
+ide_startstop_t ide_service(ide_drive_t *drive);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1116: FILE: drivers/ide/ide-tcq.c:88:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1122: FILE: drivers/ide/ide-tcq.c:94:
+	printk("%s: invalidating pending queue (%d)\n", drive->name, ata_pending_commands(drive));

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1138: FILE: drivers/ide/ide-tcq.c:110:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1146: FILE: drivers/ide/ide-tcq.c:118:
+		printk("%s: failed to issue NOP\n", drive->name);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1146: FILE: drivers/ide/ide-tcq.c:118:
+	if (!args) {
+		printk("%s: failed to issue NOP\n", drive->name);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1149: FILE: drivers/ide/ide-tcq.c:121:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1158: FILE: drivers/ide/ide-tcq.c:130:
+	BUG_ON(!rq);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1165: FILE: drivers/ide/ide-tcq.c:137:
+	rq->rq_dev = mk_kdev(drive->channel->major, (drive->select.b.unit)<<PARTN_BITS);
 	                                                                  ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1180: FILE: drivers/ide/ide-tcq.c:152:
+	printk("ide_tcq_invalidate_queue: done\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_tcq_invalidate_queue', this function's name, in a string
#1180: FILE: drivers/ide/ide-tcq.c:152:
+	printk("ide_tcq_invalidate_queue: done\n");

CHECK:SPACING: No space is necessary after a cast
#1185: FILE: drivers/ide/ide-tcq.c:157:
+	ide_drive_t *drive = (ide_drive_t *) data;

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#1189: FILE: drivers/ide/ide-tcq.c:161:
+	printk("ide_tcq_intr_timeout: timeout waiting for %s interrupt...\n", hwgroup->rq ? "completion" : "service");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1189: FILE: drivers/ide/ide-tcq.c:161:
+	printk("ide_tcq_intr_timeout: timeout waiting for %s interrupt...\n", hwgroup->rq ? "completion" : "service");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_tcq_intr_timeout', this function's name, in a string
#1189: FILE: drivers/ide/ide-tcq.c:161:
+	printk("ide_tcq_intr_timeout: timeout waiting for %s interrupt...\n", hwgroup->rq ? "completion" : "service");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1194: FILE: drivers/ide/ide-tcq.c:166:
+		printk("ide_tcq_intr_timeout: hwgroup not busy\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_tcq_intr_timeout', this function's name, in a string
#1194: FILE: drivers/ide/ide-tcq.c:166:
+		printk("ide_tcq_intr_timeout: hwgroup not busy\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hwgroup->handler"
#1195: FILE: drivers/ide/ide-tcq.c:167:
+	if (hwgroup->handler == NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1196: FILE: drivers/ide/ide-tcq.c:168:
+		printk("ide_tcq_intr_timeout: missing isr!\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_tcq_intr_timeout', this function's name, in a string
#1196: FILE: drivers/ide/ide-tcq.c:168:
+		printk("ide_tcq_intr_timeout: missing isr!\n");

CHECK:SPACING: No space is necessary after a cast
#1223: FILE: drivers/ide/ide-tcq.c:195:
+	hwgroup->timer.data = (unsigned long) hwgroup->drive;

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1244: FILE: drivers/ide/ide-tcq.c:216:
+		udelay(10);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1276: FILE: drivers/ide/ide-tcq.c:248:
+		udelay(10);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1287: FILE: drivers/ide/ide-tcq.c:259:
+		printk("ide_service: BUSY clear took too long\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_service', this function's name, in a string
#1287: FILE: drivers/ide/ide-tcq.c:259:
+		printk("ide_service: BUSY clear took too long\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1307: FILE: drivers/ide/ide-tcq.c:279:
+	if ((feat = GET_FEAT()) & NSEC_REL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1309: FILE: drivers/ide/ide-tcq.c:281:
+		printk("%s: release in service\n", drive->name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_service', this function's name, in a string
#1315: FILE: drivers/ide/ide-tcq.c:287:
+	TCQ_PRINTK("ide_service: stat %x, feat %x\n", stat, feat);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1319: FILE: drivers/ide/ide-tcq.c:291:
+		printk("ide_service: missing request for tag %d\n", tag);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_service', this function's name, in a string
#1319: FILE: drivers/ide/ide-tcq.c:291:
+		printk("ide_service: missing request for tag %d\n", tag);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_service', this function's name, in a string
#1329: FILE: drivers/ide/ide-tcq.c:301:
+	TCQ_PRINTK("ide_service: starting command, stat=%x\n", stat);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_check_service', this function's name, in a string
#1337: FILE: drivers/ide/ide-tcq.c:309:
+	TCQ_PRINTK("%s: ide_check_service\n", drive->name);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1342: FILE: drivers/ide/ide-tcq.c:314:
+	if ((stat = GET_STAT()) & SERVICE_STAT)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1367: FILE: drivers/ide/ide-tcq.c:339:
+		printk("ide_dmaq_intr: %s: error status %x\n",drive->name,stat);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1367: FILE: drivers/ide/ide-tcq.c:339:
+		printk("ide_dmaq_intr: %s: error status %x\n",drive->name,stat);
 		                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1367: FILE: drivers/ide/ide-tcq.c:339:
+		printk("ide_dmaq_intr: %s: error status %x\n",drive->name,stat);
 		                                                         ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1374: FILE: drivers/ide/ide-tcq.c:346:
+		printk("%s: bad DMA status (dma_stat=%x)\n", drive->name, dma_stat);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_dmaq_intr', this function's name, in a string
#1403: FILE: drivers/ide/ide-tcq.c:375:
+	TCQ_PRINTK("ide_dmaq_intr: stat=%x\n", stat);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_dmaq_intr', this function's name, in a string
#1416: FILE: drivers/ide/ide-tcq.c:388:
+		TCQ_PRINTK("ide_dmaq_intr: SERV (stat=%x)\n", stat);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1420: FILE: drivers/ide/ide-tcq.c:392:
+	printk("ide_dmaq_intr: stat=%x, not expected\n", stat);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ide_dmaq_intr', this function's name, in a string
#1420: FILE: drivers/ide/ide-tcq.c:392:
+	printk("ide_dmaq_intr: stat=%x, not expected\n", stat);

CHECK:CAMELCASE: Avoid CamelCase: <tfRegister>
#1449: FILE: drivers/ide/ide-tcq.c:421:
+	args.tfRegister[IDE_FEATURE_OFFSET] = 0x01;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: No space is necessary after a cast
#1456: FILE: drivers/ide/ide-tcq.c:428:
+	(void) ide_do_drive_cmd(drive, &rq, ide_wait);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1468: FILE: drivers/ide/ide-tcq.c:440:
+	printk("%s: NOP Auto-poll enabled\n", HWIF(drive)->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1495: FILE: drivers/ide/ide-tcq.c:467:
+		printk("%s: failed to enable write cache\n", drive->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1509: FILE: drivers/ide/ide-tcq.c:481:
+		printk("%s: disabling release interrupt fail\n", drive->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1523: FILE: drivers/ide/ide-tcq.c:495:
+		printk("%s: enabling service interrupt fail\n", drive->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1544: FILE: drivers/ide/ide-tcq.c:516:
+			printk("%s: TCQ disabled\n", drive->name);

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#1566: FILE: drivers/ide/ide-tcq.c:538:
+		printk("%s: tagged command queueing enabled, command queue depth %d\n", drive->name, drive->queue_depth);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1566: FILE: drivers/ide/ide-tcq.c:538:
+		printk("%s: tagged command queueing enabled, command queue depth %d\n", drive->name, drive->queue_depth);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1578: FILE: drivers/ide/ide-tcq.c:550:
+		udelay(10);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1589: FILE: drivers/ide/ide-tcq.c:561:
+		udelay(10);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1604: FILE: drivers/ide/ide-tcq.c:576:
+	switch (func) {
[...]
+		case ide_dma_queued_start:
[...]
+		case ide_dma_read_queued:
[...]
+		case ide_dma_queued_off:
[...]
+		case ide_dma_queued_on:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1613: FILE: drivers/ide/ide-tcq.c:585:
+				printk("queued_rw: hwgroup not busy\n");

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1648: FILE: drivers/ide/ide-tcq.c:620:
+				command = drive->addressing ? WIN_READDMA_QUEUED_EXT : WIN_READDMA_QUEUED;

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#1650: FILE: drivers/ide/ide-tcq.c:622:
+				command = drive->addressing ? WIN_WRITEDMA_QUEUED_EXT : WIN_WRITEDMA_QUEUED;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1651: FILE: drivers/ide/ide-tcq.c:623:
+^I^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1671: FILE: drivers/ide/ide-tcq.c:643:
+			if ((feat = GET_FEAT()) & NSEC_REL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1678: FILE: drivers/ide/ide-tcq.c:650:
+				if ((stat = GET_STAT()) & SERVICE_STAT)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1837: FILE: include/linux/ide.h:631:
+	volatile int		dma;	/* dma in progress */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1845: FILE: include/linux/ide.h:1131:
+extern ide_startstop_t ide_tcq_dmaproc(ide_dma_action_t func, ide_drive_t *drive);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1849: FILE: include/linux/ide.h:1135:
+extern int ide_start_dma(ide_dma_action_t func, ide_drive_t *drive, unsigned int reading);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000460325.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 79 warnings, 45 checks, 1706 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000460325.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
