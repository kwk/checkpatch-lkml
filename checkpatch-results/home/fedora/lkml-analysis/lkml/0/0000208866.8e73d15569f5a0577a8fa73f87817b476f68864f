WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#49: 
#if (__GNUC__ > 3) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 3)

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#50: 
# define __attribute_someattr__ __attribute__((__someattr__))

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#51: 
#else

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#52: 
# define __attribute_someattr__ /* unimplemented */

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#53: 
#endif

ERROR:SPACING: space prohibited before that close parenthesis ')'
#239: FILE: include/linux/compiler.h:13:
+# define __cond_lock(x)	((x) ? ({ __context__(1); 1; }) : 0 )

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#266: FILE: include/linux/compiler.h:33:
+# define __cond_lock(x) ((x)?1:0)
                             ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#266: FILE: include/linux/compiler.h:33:
+# define __cond_lock(x) ((x)?1:0)
                               ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#280: FILE: include/linux/compiler.h:47:
+static inline void __chk_kern_ptr (void __kernel *) {}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#283: FILE: include/linux/compiler.h:50:
+static inline void __chk_user_ptr (void __user   *) {}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#286: FILE: include/linux/compiler.h:53:
+static inline void __chk_io_ptr   (void __iomem  *) {}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#305: FILE: include/linux/compiler.h:65:
+# define __ptr_obfusc(dst,src)	(void)( (dst) = (unsigned long)(src) )
                          ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#305: FILE: include/linux/compiler.h:65:
+# define __ptr_obfusc(dst,src)	(void)( (dst) = (unsigned long)(src) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#305: FILE: include/linux/compiler.h:65:
+# define __ptr_obfusc(dst,src)	(void)( (dst) = (unsigned long)(src) )

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#305: FILE: include/linux/compiler.h:65:
+# define __ptr_obfusc(dst,src)	(void)( (dst) = (unsigned long)(src) )

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#307: FILE: include/linux/compiler.h:67:
+# define __memory_barrier()	__asm__ __volatile__("": : :"memory")
                            	                       ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#307: FILE: include/linux/compiler.h:67:
+# define __memory_barrier()	__asm__ __volatile__("": : :"memory")
                            	                           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#307: FILE: include/linux/compiler.h:67:
+# define __memory_barrier()	__asm__ __volatile__("": : :"memory")

ERROR:SPACING: space required after that ',' (ctx:VxV)
#308: FILE: include/linux/compiler.h:68:
+# define __ptr_obfusc(dst,src)	__asm__("" : "=g"(__ptr) : "0"(ptr))
                          ^

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#318: FILE: include/linux/compiler.h:75:
implementations

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#321: FILE: include/linux/compiler.h:77:
+^I^I^I^I^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#321: FILE: include/linux/compiler.h:77:
+
+							

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#328: FILE: include/linux/compiler.h:84:
+ *   This tells the compiler to optimize branching to favor one case $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#330: FILE: include/linux/compiler.h:85:
+ *   another.  This may reorder the branches or insert branch $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#337: FILE: include/linux/compiler.h:89:
+# define __expect(value,expected) __builtin_expect(value,expected)
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#337: FILE: include/linux/compiler.h:89:
+# define __expect(value,expected) __builtin_expect(value,expected)
                                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#339: FILE: include/linux/compiler.h:91:
+# define __expect(value,expected) (value)
                        ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#346: FILE: include/linux/compiler.h:95:
+ * __attribute__((__unused__))			[All supported compilers]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#347: FILE: include/linux/compiler.h:96:
+ *   This indicates that the corresponding variable or function is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#349: FILE: include/linux/compiler.h:97:
+ *   to be unused, therefore no warning should be emitted and the $

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#353: FILE: include/linux/compiler.h:100:
+#define __attribute_unused__ __attribute__((__unused__))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __used over __attribute__((__used__))
#362: FILE: include/linux/compiler.h:103:
+ * __attribute__((__used__))			[GCC 3.3 or later]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#363: FILE: include/linux/compiler.h:104:
+ *   This indicates that the corresponding variable or function is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#369: FILE: include/linux/compiler.h:109:
+ *   NOTE: GCC prior to 3.3 did not omit data, so the only need for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#371: FILE: include/linux/compiler.h:110:
+ *   there is to quiet the warning, in which case it behaves exactly $

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#373: FILE: include/linux/compiler.h:111:
+ *   same as __attribute__((__unused__)).

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __used over __attribute__((__used__))
#376: FILE: include/linux/compiler.h:114:
+# define __attribute_used__ __attribute__((__used__))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __pure over __attribute__((__pure__))
#387: FILE: include/linux/compiler.h:120:
+ * __attribute__((__pure__))			[GCC 2.96 or later]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#391: FILE: include/linux/compiler.h:124:
+ *     variables.  Such a function can be subject to common $

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __pure over __attribute__((__pure__))
#397: FILE: include/linux/compiler.h:129:
+# define __attribute_pure__ __attribute__((__pure__))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __attribute_const__ over __attribute__((__const__))
#411: FILE: include/linux/compiler.h:135:
+ * __attribute__((__const__))			[GCC 2.96 or later]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#421: FILE: include/linux/compiler.h:145:
+ *     `const'.  It does not make sense for a `const' function to $

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __pure over __attribute__((__pure__))
#428: FILE: include/linux/compiler.h:149:
+# define __attribute_pure__ __attribute__((__pure__))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __always_inline over __attribute__((__always_inline__))
#436: FILE: include/linux/compiler.h:155:
+ * __attribute__((__always_inline__))		[GCC 3.1 or later]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#440: FILE: include/linux/compiler.h:159:
+ *   everything marked "inline" to be forced to inline, because $

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __always_inline over __attribute__((__always_inline__))
#445: FILE: include/linux/compiler.h:163:
+# define __attribute_always_inline__ __attribute__((__always_inline__))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer noinline over __attribute__((__noinline__))
#465: FILE: include/linux/compiler.h:169:
+ * __attribute__((__noinline__))		[GCC 3.1 or later]

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer noinline over __attribute__((__noinline__))
#473: FILE: include/linux/compiler.h:175:
+# define __attribute_noinline__ __attribute__((__noinline__))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#488: FILE: include/linux/compiler.h:182:
+ *   This will cause the compiler to emit warnings whenever the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#491: FILE: include/linux/compiler.h:184:
+ *   whenever code is to be removed soon and we want to convert away $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#517: FILE: include/linux/compiler.h:195:
+ *   This will cause the compiler to emit warnings whenever the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#525: FILE: include/linux/compiler.h:200:
+# define __attribute_warn_unused_result__ $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#538: FILE: include/linux/compiler.h:210:
+# define __offsetof(type,member) __builtin_offsetof(type,member)
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#538: FILE: include/linux/compiler.h:210:
+# define __offsetof(type,member) __builtin_offsetof(type,member)
                                                         ^

CHECK:SPACING: No space is necessary after a cast
#540: FILE: include/linux/compiler.h:212:
+# define __offsetof(type,member) ((unsigned long) &((type *)0)->member)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#540: FILE: include/linux/compiler.h:212:
+# define __offsetof(type,member) ((unsigned long) &((type *)0)->member)
                         ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#540: FILE: include/linux/compiler.h:212:
+# define __offsetof(type,member) ((unsigned long) &((type *)0)->member)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#552: FILE: include/linux/compiler.h:221:
+/* This macro obfuscates arithmetic on a variable address so the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#554: FILE: include/linux/compiler.h:222:
+   shouldn't recognize the original var and make assumptions about it $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#554: FILE: include/linux/compiler.h:222:
+/* This macro obfuscates arithmetic on a variable address so the 
+   shouldn't recognize the original var and make assumptions about it 

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#570: FILE: include/linux/compiler.h:237:
+#define inline		inline		__attribute_always_inline__

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#571: FILE: include/linux/compiler.h:238:
+#define __inline	__inline	__attribute_always_inline__

WARNING:INLINE: plain inline is preferred over __inline
#571: FILE: include/linux/compiler.h:238:
+#define __inline	__inline	__attribute_always_inline__

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#572: FILE: include/linux/compiler.h:239:
+#define __inline__	__inline__	__attribute_always_inline__

WARNING:INLINE: plain inline is preferred over __inline__
#572: FILE: include/linux/compiler.h:239:
+#define __inline__	__inline__	__attribute_always_inline__

ERROR:SPACING: space required after that ',' (ctx:VxV)
#573: FILE: include/linux/compiler.h:240:
+#define offsetof(a,b)	__offsetof(a,b)
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#573: FILE: include/linux/compiler.h:240:
+#define offsetof(a,b)	__offsetof(a,b)
                      	            ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000208866.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 38 errors, 24 warnings, 5 checks, 372 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000208866.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
