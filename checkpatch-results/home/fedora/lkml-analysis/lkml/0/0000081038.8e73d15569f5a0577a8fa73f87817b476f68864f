WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#57: FILE: security/Kconfig:102:
+config SECURITY_MULTIADM
+    tristate "MultiAdmin secuirty module"
+    depends on SECURITY
+    ---help---
+        The MultiAdmin security kernel module provides means to have multiple
+        "root" users with unique UIDs. This fixes collation order problems
+        which for example appear with NSCD, allows to have files with
+        determinable owner and allows to track the quota usage for every
+        user, since they now have a unique uid.
+        
+        It also implements a "sub-admin", a partially restricted root user
+        (or enhanced normal user, depending on the way you see it), who has
+        full read-only access to most subsystems, and additional write rights
+        only to a limited subset, e.g. writing to files or killing processes
+        only of certain users.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#66: FILE: security/Kconfig:111:
+        $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#88: FILE: security/multiadm.c:1:
+/*=============================================================================

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#89: FILE: security/multiadm.c:2:
+/*=============================================================================
+| MultiAdmin Security Module                                                  |

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#106: FILE: security/multiadm.c:19:
+    Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#108: FILE: security/multiadm.c:21:
+=============================================================================*/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#187: FILE: security/multiadm.c:100:
+};
+static gid_t Supergid = -1, Subgid = -1;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Supergid>
#187: FILE: security/multiadm.c:100:
+static gid_t Supergid = -1, Subgid = -1;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Subgid>
#187: FILE: security/multiadm.c:100:
+static gid_t Supergid = -1, Subgid = -1;

CHECK:CAMELCASE: Avoid CamelCase: <Superuid_start>
#188: FILE: security/multiadm.c:101:
+static uid_t Superuid_start = 0, Superuid_end = 0,

CHECK:CAMELCASE: Avoid CamelCase: <Superuid_end>
#188: FILE: security/multiadm.c:101:
+static uid_t Superuid_start = 0, Superuid_end = 0,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: security/multiadm.c:102:
+    Subuid_start = -1, Subuid_end = -1,$

CHECK:CAMELCASE: Avoid CamelCase: <Subuid_start>
#189: FILE: security/multiadm.c:102:
+    Subuid_start = -1, Subuid_end = -1,

CHECK:CAMELCASE: Avoid CamelCase: <Subuid_end>
#189: FILE: security/multiadm.c:102:
+    Subuid_start = -1, Subuid_end = -1,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: security/multiadm.c:103:
+    Netuid = -1, Wrtuid_start = -1, Wrtuid_end = -1;$

CHECK:CAMELCASE: Avoid CamelCase: <Netuid>
#190: FILE: security/multiadm.c:103:
+    Netuid = -1, Wrtuid_start = -1, Wrtuid_end = -1;

CHECK:CAMELCASE: Avoid CamelCase: <Wrtuid_start>
#190: FILE: security/multiadm.c:103:
+    Netuid = -1, Wrtuid_start = -1, Wrtuid_end = -1;

CHECK:CAMELCASE: Avoid CamelCase: <Wrtuid_end>
#190: FILE: security/multiadm.c:103:
+    Netuid = -1, Wrtuid_start = -1, Wrtuid_end = -1;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#191: FILE: security/multiadm.c:104:
+static int Secondary = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:CAMELCASE: Avoid CamelCase: <Secondary>
#191: FILE: security/multiadm.c:104:
+static int Secondary = 0;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#196: FILE: security/multiadm.c:109:
+module_param(Supergid, int, S_IRUSR | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#197: FILE: security/multiadm.c:110:
+module_param(Superuid_start, int, S_IRUSR | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#198: FILE: security/multiadm.c:111:
+module_param(Superuid_end, int, S_IRUSR | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#199: FILE: security/multiadm.c:112:
+module_param(Subuid_start, int, S_IRUSR | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#200: FILE: security/multiadm.c:113:
+module_param(Subuid_end, int, S_IRUSR | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#201: FILE: security/multiadm.c:114:
+module_param(Subgid, int, S_IRUSR | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#202: FILE: security/multiadm.c:115:
+module_param(Netuid, int, S_IRUSR | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#203: FILE: security/multiadm.c:116:
+module_param(Wrtuid_start, int, S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#204: FILE: security/multiadm.c:117:
+module_param(Wrtuid_end, int, S_IRUGO | S_IWUSR);

WARNING:LINE_SPACING: Missing a blank line after declarations
#219: FILE: security/multiadm.c:132:
+	int eax = 0, ebx = 0;
+	if ((eax = register_security(&mt_secops)) != 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#219: FILE: security/multiadm.c:132:
+	if ((eax = register_security(&mt_secops)) != 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#220: FILE: security/multiadm.c:133:
+		if ((ebx = mod_reg_security(BASENAME, &mt_secops)) != 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#221: FILE: security/multiadm.c:134:
+			printk(KERN_WARNING PREFIX

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#231: FILE: security/multiadm.c:144:
+		printk(KERN_WARNING PREFIX

WARNING:SPLIT_STRING: quoted string split across lines
#233: FILE: security/multiadm.c:146:
+		       "Superadmin and Subadmin ranges intersect! Unpredictable behavior"
+		       " may result: some operations may classify you as a superadmin,"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#234: FILE: security/multiadm.c:147:
+		       " may result: some operations may classify you as a superadmin,"
+		       " others as a subadmin. Security leak: subadmin could possibly"

WARNING:SPLIT_STRING: quoted string split across lines
#235: FILE: security/multiadm.c:148:
+		       " others as a subadmin. Security leak: subadmin could possibly"
+		       " change into superadmin!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#237: FILE: security/multiadm.c:150:
+		printk(KERN_WARNING PREFIX

WARNING:SPLIT_STRING: quoted string split across lines
#239: FILE: security/multiadm.c:152:
+		       "Netuid within superadmin range! -Has more "
+		       "powers than intended!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#242: FILE: security/multiadm.c:155:
+		printk(KERN_WARNING PREFIX

WARNING:SPLIT_STRING: quoted string split across lines
#244: FILE: security/multiadm.c:157:
+		       "Superadmin and write-enabled user range "
+		       "intersect! A subadmin could setuid() into a superadmin!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#246: FILE: security/multiadm.c:159:
+		printk(KERN_WARNING PREFIX

WARNING:SPLIT_STRING: quoted string split across lines
#248: FILE: security/multiadm.c:161:
+		       "Netuid within subadmin range! -Has more "
+		       "powers than intended!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#251: FILE: security/multiadm.c:164:
+		printk(KERN_WARNING PREFIX

WARNING:SPLIT_STRING: quoted string split across lines
#253: FILE: security/multiadm.c:166:
+		       "Subadmin and write-enabled user range "
+		       "intersect! Subadmins are able to poke on other subadmins!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#255: FILE: security/multiadm.c:168:
+		printk(KERN_WARNING PREFIX

WARNING:SPLIT_STRING: quoted string split across lines
#257: FILE: security/multiadm.c:170:
+		       "Netuid within write-enabled user range! "
+		       "Subadmin may gain CAP_NET_ADMIN!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#258: FILE: security/multiadm.c:171:
+	printk(KERN_INFO "MultiAdmin loaded\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#272: FILE: security/multiadm.c:185:
+		printk(KERN_WARNING PREFIX

WARNING:RETURN_VOID: void function return statements are not generally useful
#276: FILE: security/multiadm.c:189:
+	return;
+}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#285: FILE: security/multiadm.c:198:
+	/* In the function chain of exec(), we eventually get here, which is the
+	   place to set up new privileges. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#285: FILE: security/multiadm.c:198:
+	   place to set up new privileges. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#289: FILE: security/multiadm.c:202:
+	/* All of the following is nicely inlined. The capability raising is
+	   resolved to only one instruction for each set. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#289: FILE: security/multiadm.c:202:
+	   resolved to only one instruction for each set. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#313: FILE: security/multiadm.c:226:
+		/* Subadmin also has CAP_SYS_ADMIN, but if we get here, we did so
+		   by capable() -- not capable_light(). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#313: FILE: security/multiadm.c:226:
+		   by capable() -- not capable_light(). */

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#315: FILE: security/multiadm.c:228:
+		return is_any_superadm(current->euid, current->egid);
+	else

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#317: FILE: security/multiadm.c:230:
+		/* Subadmin/Netadmin also has other capabilities, but they
+		   are -- I hope -- ok. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#317: FILE: security/multiadm.c:230:
+		   are -- I hope -- ok. */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#322: FILE: security/multiadm.c:235:
+			       struct nameidata *nd)
 			                         ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#325: FILE: security/multiadm.c:238:
+	/* Check for superadmin is not done, since the only users that can get
+	   here is either superadmin or subadmin. By omitting the check for

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#327: FILE: security/multiadm.c:240:
+	   This method is done almost throughout the entire module. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#331: FILE: security/multiadm.c:244:
+		int ret;
+		if (inode->i_uid == current->fsuid || is_uid_user(inode->i_uid))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#335: FILE: security/multiadm.c:248:
+		/* Since we practically jumped over the checks to get here (because of
+		   CAP_DAC_OVERRIDE), we need to do it again. Without CAP_DAC_OVERRIDE

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#336: FILE: security/multiadm.c:249:
+		   this time. Temporarily drop it. */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "inode->i_op"
#340: FILE: security/multiadm.c:253:
+		if (inode->i_op != NULL && inode->i_op->permission != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "inode->i_op->permission"
#340: FILE: security/multiadm.c:253:
+		if (inode->i_op != NULL && inode->i_op->permission != NULL)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#343: FILE: security/multiadm.c:256:
+						    nd);
 						    ^^

WARNING:TYPO_SPELLING: 'belond' may be misspelled - perhaps 'belong'?
#358: FILE: security/multiadm.c:271:
+		   belond, _and_ will belong in case of ATTR_UID, to a WRT user. */
 		   ^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#358: FILE: security/multiadm.c:271:
+		/* Change is only allowed if either the inode belongs to us, or does
+		   belond, _and_ will belong in case of ATTR_UID, to a WRT user. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#358: FILE: security/multiadm.c:271:
+		   belond, _and_ will belong in case of ATTR_UID, to a WRT user. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#360: FILE: security/multiadm.c:273:
+		const struct inode *inode = dentry->d_inode;
+		if (inode->i_uid != current->fsuid

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#361: FILE: security/multiadm.c:274:
+		if (inode->i_uid != current->fsuid
+		    && !is_uid_user(inode->i_uid))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#365: FILE: security/multiadm.c:278:
+		if ((attr->ia_valid & ATTR_UID)
+		    && attr->ia_uid != current->fsuid

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#366: FILE: security/multiadm.c:279:
+		    && attr->ia_uid != current->fsuid
+		    && !is_uid_user(attr->ia_uid))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#382: FILE: security/multiadm.c:295:
+		/* Copied and modified from ipc/util.c. Subadmin always has read
+		   permission so add S_IRUGO to granted. Checking the owner permission

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#383: FILE: security/multiadm.c:296:
+		   part is not done anymore, because it is done above. */

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#385: FILE: security/multiadm.c:298:
+		grant = (perm->mode | S_IRUGO) >> 3;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "msq"
#402: FILE: security/multiadm.c:315:
+		if (msq != NULL && msq->q_perm.uid != current->euid &&

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#404: FILE: security/multiadm.c:317:
+		    msq->q_perm.cuid != current->euid
+		    && !is_uid_user(msq->q_perm.uid)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#405: FILE: security/multiadm.c:318:
+		    && !is_uid_user(msq->q_perm.uid)
+		    && !is_uid_user(msq->q_perm.cuid))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#411: FILE: security/multiadm.c:324:
+static int mt_ptrace(task_t * tracer, task_t * task)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#411: FILE: security/multiadm.c:324:
+static int mt_ptrace(task_t * tracer, task_t * task)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#415: FILE: security/multiadm.c:328:
+		/* Ownership check according to kernel/ptrace.c:
+		   all of [RES][UG]ID must match the tracer's R[UG]ID. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#415: FILE: security/multiadm.c:328:
+		   all of [RES][UG]ID must match the tracer's R[UG]ID. */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sem"
#451: FILE: security/multiadm.c:364:
+		if (sem != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#453: FILE: security/multiadm.c:366:
+			const struct kern_ipc_perm *perm = &sem->sem_perm;
+			if (perm->uid != current->euid

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#454: FILE: security/multiadm.c:367:
+			if (perm->uid != current->euid
+			    && perm->cuid != current->euid

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#455: FILE: security/multiadm.c:368:
+			    && perm->cuid != current->euid
+			    && !is_uid_user(perm->uid)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#456: FILE: security/multiadm.c:369:
+			    && !is_uid_user(perm->uid)
+			    && !is_uid_user(perm->cuid))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "shp"
#469: FILE: security/multiadm.c:382:
+		if (shp != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#471: FILE: security/multiadm.c:384:
+			const struct kern_ipc_perm *perm = &shp->shm_perm;
+			if (perm->uid != current->euid

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#472: FILE: security/multiadm.c:385:
+			if (perm->uid != current->euid
+			    && perm->cuid != current->euid

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#473: FILE: security/multiadm.c:386:
+			    && perm->cuid != current->euid
+			    && !is_uid_user(perm->uid)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#474: FILE: security/multiadm.c:387:
+			    && !is_uid_user(perm->uid)
+			    && !is_uid_user(perm->cuid))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#481: FILE: security/multiadm.c:394:
+static int mt_task_kill(task_t * task, struct siginfo *si, int sig)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "si"
#494: FILE: security/multiadm.c:407:
+		if (si != NULL

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#495: FILE: security/multiadm.c:408:
+		if (si != NULL
+		    && ((long)si == 1 || (long)si == 2 || !SI_FROMUSER(si)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#500: FILE: security/multiadm.c:413:
+		if (sig == SIGCONT
+		    && task->signal->session == current->signal->session)

WARNING:LINE_SPACING: Missing a blank line after declarations
#512: FILE: security/multiadm.c:425:
+	int ret = cap_task_post_setuid(old_ruid, old_euid, old_suid, flags);
+	if (ret != 0)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#567: FILE: security/multiadm.c:480:
+							  is_uid_user(euid))
+		    && (suid == -1 || is_uid_user(suid)))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#594: FILE: security/multiadm.c:507:
+		printk(KERN_WARNING PREFIX "Unsupported case %d in %s\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#595: FILE: security/multiadm.c:508:
+		       flags, __FUNCTION__);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#601: FILE: security/multiadm.c:514:
+static int mt_task_setnice(task_t * task, int nice)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#613: FILE: security/multiadm.c:526:
+static int mt_task_setscheduler(task_t * task, int policy,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#617: FILE: security/multiadm.c:530:
+	/* Return 0 for superuser and normal users. The latters' checks are
+	   performed in sched.c. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#617: FILE: security/multiadm.c:530:
+	   performed in sched.c. */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#624: FILE: security/multiadm.c:537:
+		if (policy != SCHED_NORMAL
+		    && param->sched_priority > task->rt_priority

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#625: FILE: security/multiadm.c:538:
+		    && param->sched_priority > task->rt_priority
+		    && param->sched_priority >

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#637: FILE: security/multiadm.c:550:
+static inline void chg2_superadm(kernel_cap_t * c)

WARNING:RETURN_VOID: void function return statements are not generally useful
#643: FILE: security/multiadm.c:556:
+	return;
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#645: FILE: security/multiadm.c:558:
+static inline void chg2_subadm(kernel_cap_t * c)

WARNING:RETURN_VOID: void function return statements are not generally useful
#659: FILE: security/multiadm.c:572:
+	return;
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#661: FILE: security/multiadm.c:574:
+static inline void chg2_netadm(kernel_cap_t * c)

WARNING:RETURN_VOID: void function return statements are not generally useful
#666: FILE: security/multiadm.c:579:
+	return;
+}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#710: FILE: security/multiadm.c:623:
+	/* Special case Wrtuid_end == (unsigned) -1 means what it means: everything
+	   until the end. This is why there is no Wrtuid_end != -1 check. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#710: FILE: security/multiadm.c:623:
+	   until the end. This is why there is no Wrtuid_end != -1 check. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#714: FILE: security/multiadm.c:627:
+static inline int is_task1_user(const task_t * task)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#719: FILE: security/multiadm.c:632:
+static inline int is_task_user(const task_t * task)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000081038.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 71 warnings, 33 checks, 678 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000081038.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
