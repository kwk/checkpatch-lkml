WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#36: 
//  EXTRAVERSION =
    ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#295: FILE: fs/super.c:988:
+	if (!(page = __get_free_page(GFP_KERNEL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#295: FILE: fs/super.c:988:
+	if (!(page = __get_free_page(GFP_KERNEL))) {
+		return -ENOMEM;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#310: FILE: fs/super.c:1001:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#354: FILE: kernel/ptrace.c:83:
+	struct vm_area_struct * vma;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#387: FILE: mm/mmap.c:23:
+#ifdef __i386__

Architecture specific defines should be avoided wherever
possible.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#389: FILE: mm/mmap.c:25:
+#define VMALLOC_OFFSET (8*1024*1024)
                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#389: FILE: mm/mmap.c:25:
+#define VMALLOC_OFFSET (8*1024*1024)
                               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#390: FILE: mm/mmap.c:26:
+#define MODULE_RANGE (8*1024*1024)
                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#390: FILE: mm/mmap.c:26:
+#define MODULE_RANGE (8*1024*1024)
                             ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#392: FILE: mm/mmap.c:28:
+extern unsigned long _stext;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#393: FILE: mm/mmap.c:29:
+extern unsigned long _etext;

WARNING:LINE_SPACING: Missing a blank line after declarations
#400: FILE: mm/mmap.c:36:
+	unsigned long esp;
+	__asm__("mov %%esp,%0; ":"=r" (esp));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#400: FILE: mm/mmap.c:36:
+	__asm__("mov %%esp,%0; ":"=r" (esp));
 	                        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#402: FILE: mm/mmap.c:38:
+	printk("\nStack: ");

CHECK:SPACING: No space is necessary after a cast
#403: FILE: mm/mmap.c:39:
+	stack = (unsigned long *) esp;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#404: FILE: mm/mmap.c:40:
+	for(i=0; i < 2*kstack_depth_to_print; i++) {
 	     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#404: FILE: mm/mmap.c:40:
+	for(i=0; i < 2*kstack_depth_to_print; i++) {
 	              ^

ERROR:SPACING: space required before the open parenthesis '('
#404: FILE: mm/mmap.c:40:
+	for(i=0; i < 2*kstack_depth_to_print; i++) {

CHECK:SPACING: No space is necessary after a cast
#405: FILE: mm/mmap.c:41:
+		if (((long) stack & 4095) == 0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#408: FILE: mm/mmap.c:44:
+			printk("\n       ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#409: FILE: mm/mmap.c:45:
+		printk("%08lx ", *stack++);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#411: FILE: mm/mmap.c:47:
+	printk("\nCall Trace: ");

CHECK:SPACING: No space is necessary after a cast
#412: FILE: mm/mmap.c:48:
+	stack = (unsigned long *) esp;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#415: FILE: mm/mmap.c:51:
+	module_start = ((module_start + VMALLOC_OFFSET) & ~(VMALLOC_OFFSET-1));
 	                                                                  ^

CHECK:SPACING: No space is necessary after a cast
#417: FILE: mm/mmap.c:53:
+	while (((long) stack & 4095) != 0) {

CHECK:SPACING: No space is necessary after a cast
#427: FILE: mm/mmap.c:63:
+		if (((addr >= (unsigned long) &_stext) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr >= (unsigned long) &_stext'
#427: FILE: mm/mmap.c:63:
+		if (((addr >= (unsigned long) &_stext) &&
+		     (addr <= (unsigned long) &_etext)) ||
+		    ((addr >= module_start) && (addr <= module_end))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr <= (unsigned long) &_etext'
#427: FILE: mm/mmap.c:63:
+		if (((addr >= (unsigned long) &_stext) &&
+		     (addr <= (unsigned long) &_etext)) ||
+		    ((addr >= module_start) && (addr <= module_end))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr >= module_start'
#427: FILE: mm/mmap.c:63:
+		if (((addr >= (unsigned long) &_stext) &&
+		     (addr <= (unsigned long) &_etext)) ||
+		    ((addr >= module_start) && (addr <= module_end))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr <= module_end'
#427: FILE: mm/mmap.c:63:
+		if (((addr >= (unsigned long) &_stext) &&
+		     (addr <= (unsigned long) &_etext)) ||
+		    ((addr >= module_start) && (addr <= module_end))) {

CHECK:SPACING: No space is necessary after a cast
#428: FILE: mm/mmap.c:64:
+		     (addr <= (unsigned long) &_etext)) ||

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#431: FILE: mm/mmap.c:67:
+				printk("\n       ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#432: FILE: mm/mmap.c:68:
+			printk("[<%08lx>] ", addr);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#438: FILE: mm/mmap.c:74:
+#define show_stack()	(void)0

CHECK:LINE_SPACING: Please don't use multiple blank lines
#441: FILE: mm/mmap.c:77:
+
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#442: FILE: mm/mmap.c:78:
+static inline int test_down(struct semaphore* sem)

ERROR:SPACING: space required before the open parenthesis '('
#444: FILE: mm/mmap.c:80:
+	if(!down_trylock(sem)) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#450: FILE: mm/mmap.c:86:
+}
+static inline void assert_down(struct semaphore* sem)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#450: FILE: mm/mmap.c:86:
+static inline void assert_down(struct semaphore* sem)

ERROR:SPACING: space required before the open parenthesis '('
#452: FILE: mm/mmap.c:88:
+	if(!test_down(sem)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#453: FILE: mm/mmap.c:89:
+		printk("semaphore not acquired by %lxh.\n",__builtin_return_address(0));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#453: FILE: mm/mmap.c:89:
+		printk("semaphore not acquired by %lxh.\n",__builtin_return_address(0));
 		                                          ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#458: FILE: mm/mmap.c:94:
+void assert_up(struct semaphore* sem)

ERROR:SPACING: space required before the open parenthesis '('
#460: FILE: mm/mmap.c:96:
+	if(test_down(sem)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#461: FILE: mm/mmap.c:97:
+		printk("semaphore acquired by %lxh.\n",__builtin_return_address(0));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#461: FILE: mm/mmap.c:97:
+		printk("semaphore acquired by %lxh.\n",__builtin_return_address(0));
 		                                      ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#466: FILE: mm/mmap.c:102:
+static inline void test_vmareadlock(struct mm_struct * mm)

ERROR:SPACING: space required before the open parenthesis '('
#468: FILE: mm/mmap.c:104:
+	if(test_down(&mm->mmap_sem))

ERROR:SPACING: space required before the open parenthesis '('
#470: FILE: mm/mmap.c:106:
+	if(test_down(&mm->vma_list_sem))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#472: FILE: mm/mmap.c:108:
+	printk("test_vamreadlock() failed %lxh.\n",__builtin_return_address(0));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#472: FILE: mm/mmap.c:108:
+	printk("test_vamreadlock() failed %lxh.\n",__builtin_return_address(0));
 	                                          ^

ERROR:SPACING: space required before the open parenthesis '('
#478: FILE: mm/mmap.c:114:
+	if(test_down(&mm->mmap_sem) && test_down(&mm->vma_list_sem))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#480: FILE: mm/mmap.c:116:
+	printk("test_vmawritelock(): failed %lxh.\n",__builtin_return_address(0));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#480: FILE: mm/mmap.c:116:
+	printk("test_vmawritelock(): failed %lxh.\n",__builtin_return_address(0));
 	                                            ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'test_vmawritelock', this function's name, in a string
#480: FILE: mm/mmap.c:116:
+	printk("test_vmawritelock(): failed %lxh.\n",__builtin_return_address(0));

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#486: FILE: mm/mmap.c:122:
+static inline void assert_down(struct semaphore* sem)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#490: FILE: mm/mmap.c:126:
+}
+void assert_up(struct semaphore* sem)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#490: FILE: mm/mmap.c:126:
+void assert_up(struct semaphore* sem)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#494: FILE: mm/mmap.c:130:
+}
+static inline void test_vmareadlock(struct mm_struct * mm)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#494: FILE: mm/mmap.c:130:
+static inline void test_vmareadlock(struct mm_struct * mm)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#514: FILE: mm/mmap.c:309:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#579: FILE: mm/mmap.c:812:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000570099.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 16 warnings, 22 checks, 537 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000570099.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
