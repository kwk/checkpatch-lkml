WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
page faults and carry out the needed global locking.  The locking itself does

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#121: FILE: include/linux/mm.h:441:
+extern void invalidate_filemap_range(struct address_space *mapping, loff_t const start, loff_t const length);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#121: FILE: include/linux/mm.h:441:
+extern void invalidate_filemap_range(struct address_space *mapping, loff_t const start, loff_t const length);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#123: FILE: include/linux/mm.h:443:
+void invalidate_page_range(struct vm_area_struct *vma, unsigned long address, unsigned long size, int all);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#147: FILE: mm/memory.c:392:
+static void zap_pte_range(struct mmu_gather *tlb, pmd_t * pmd,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#148: FILE: mm/memory.c:393:
+static void zap_pte_range(struct mmu_gather *tlb, pmd_t * pmd,
+		unsigned long address, unsigned long size, int all)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#183: FILE: mm/memory.c:445:
+static void zap_pmd_range(struct mmu_gather *tlb, pgd_t * dir,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#184: FILE: mm/memory.c:446:
+static void zap_pmd_range(struct mmu_gather *tlb, pgd_t * dir,
+		unsigned long address, unsigned long size, int all)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#203: FILE: mm/memory.c:470:
+static void unmap_page_range(struct mmu_gather *tlb, struct vm_area_struct *vma,
+		unsigned long address, unsigned long end, int all)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#241: FILE: mm/memory.c:605:
+void invalidate_page_range(struct vm_area_struct *vma,
+		unsigned long address, unsigned long size, int all)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#263: FILE: mm/memory.c:1082:
+static void invalidate_mmap_range_list(struct list_head *head,
+		 unsigned long const hba,  unsigned long const hlen, int all)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#273: FILE: mm/memory.c:1104:
+		invalidate_page_range(vp,
 			       ((zba - vba) << PAGE_SHIFT) + vp->vm_start,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#286: FILE: mm/memory.c:1124:
+static void invalidate_mmap_range(struct address_space *mapping,
+		loff_t const holebegin, loff_t const holelen, int all)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: mm/memory.c:1147:
+ void unmap_mapping_range(struct address_space *mapping,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#304: FILE: mm/memory.c:1148:
+ void unmap_mapping_range(struct address_space *mapping,
+		loff_t const start, loff_t const length)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#309: FILE: mm/memory.c:1153:
+EXPORT_SYMBOL(unmap_mapping_range);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000300733.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 5 warnings, 9 checks, 221 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000300733.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
