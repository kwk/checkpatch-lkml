WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#43: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#48: FILE: fs/unionfs/union.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CONST_STRUCT: struct file_operations should normally be const
#112: FILE: fs/unionfs/union.h:65:
+extern struct file_operations unionfs_main_fops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#113: FILE: fs/unionfs/union.h:66:
+extern struct file_operations unionfs_dir_fops;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#114: FILE: fs/unionfs/union.h:67:
+extern struct inode_operations unionfs_main_iops;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#115: FILE: fs/unionfs/union.h:68:
+extern struct inode_operations unionfs_dir_iops;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#116: FILE: fs/unionfs/union.h:69:
+extern struct inode_operations unionfs_symlink_iops;

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#118: FILE: fs/unionfs/union.h:71:
+extern struct dentry_operations unionfs_dops;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#121: FILE: fs/unionfs/union.h:74:
+#define RDCACHE_JIFFIES	(5*HZ)
                        	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#145: FILE: fs/unionfs/union.h:98:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#200: FILE: fs/unionfs/union.h:153:
+^I */ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#201: FILE: fs/unionfs/union.h:154:
+^Iint bindex;^I^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#258: FILE: fs/unionfs/union.h:211:
+	off_t tmp;
+	tmp = ((buf->cookie & MAXRDCOOKIE) << RDOFFBITS)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#272: FILE: fs/unionfs/union.h:225:
+		struct dentry *tmp = d1;
+		d1 = d2;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#279: FILE: fs/unionfs/union.h:232:
+extern int new_dentry_private_data(struct dentry *dentry);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#287: FILE: fs/unionfs/union.h:240:
+/* replicates the directory structure upto given dentry in given branch */
                                       ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#288: FILE: fs/unionfs/union.h:241:
+extern struct dentry *create_parents(struct inode *dir, struct dentry *dentry,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#294: FILE: fs/unionfs/union.h:247:
+extern int is_branch_overlap(struct dentry *dent1, struct dentry *dent2);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#297: FILE: fs/unionfs/union.h:250:
+extern int unionfs_partial_lookup(struct dentry *dentry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#304: FILE: fs/unionfs/union.h:257:
+extern int create_whiteout(struct dentry *dentry, int start);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#306: FILE: fs/unionfs/union.h:259:
+extern int copyup_file(struct inode *dir, struct file *file, int bstart,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#308: FILE: fs/unionfs/union.h:261:
+extern int copyup_named_file(struct inode *dir, struct file *file,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#312: FILE: fs/unionfs/union.h:265:
+extern int copyup_dentry(struct inode *dir, struct dentry *dentry, int bstart,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#314: FILE: fs/unionfs/union.h:267:
+extern int copyup_named_dentry(struct inode *dir, struct dentry *dentry,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#319: FILE: fs/unionfs/union.h:272:
+extern int remove_whiteouts(struct dentry *dentry, struct dentry *hidden_dentry,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#322: FILE: fs/unionfs/union.h:275:
+extern int do_delete_whiteouts(struct dentry *dentry, int bindex,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#323: FILE: fs/unionfs/union.h:276:
+extern int do_delete_whiteouts(struct dentry *dentry, int bindex,
+		     struct unionfs_dir_state *namelist);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#326: FILE: fs/unionfs/union.h:279:
+extern int check_empty(struct dentry *dentry,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#329: FILE: fs/unionfs/union.h:282:
+extern int delete_whiteouts(struct dentry *dentry, int bindex,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#333: FILE: fs/unionfs/union.h:286:
+extern int unionfs_refresh_hidden_dentry(struct dentry *dentry, int bindex);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#335: FILE: fs/unionfs/union.h:288:
+extern void unionfs_reinterpose(struct dentry *this_dentry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#336: FILE: fs/unionfs/union.h:289:
+extern struct super_block *unionfs_duplicate_super(struct super_block *sb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#339: FILE: fs/unionfs/union.h:292:
+extern int unionfs_setlk(struct file *file, int cmd, struct file_lock *fl);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#340: FILE: fs/unionfs/union.h:293:
+extern int unionfs_getlk(struct file *file, struct file_lock *fl);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#343: FILE: fs/unionfs/union.h:296:
+extern int unionfs_file_revalidate(struct file *file, int willwrite);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#344: FILE: fs/unionfs/union.h:297:
+extern int unionfs_open(struct inode *inode, struct file *file);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#345: FILE: fs/unionfs/union.h:298:
+extern int unionfs_file_release(struct inode *inode, struct file *file);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#346: FILE: fs/unionfs/union.h:299:
+extern int unionfs_flush(struct file *file, fl_owner_t id);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#347: FILE: fs/unionfs/union.h:300:
+extern long unionfs_ioctl(struct file *file, unsigned int cmd,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#351: FILE: fs/unionfs/union.h:304:
+extern int unionfs_rename(struct inode *old_dir, struct dentry *old_dentry,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#356: FILE: fs/unionfs/union.h:309:
+int unionfs_d_revalidate(struct dentry *dentry, struct nameidata *nd);
                                                                   ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#365: FILE: fs/unionfs/union.h:318:
+extern int unionfs_interpose(struct dentry *this_dentry, struct super_block *sb,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#375: FILE: fs/unionfs/union.h:328:
+int check_branch(struct nameidata *nd);
                                    ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#407: FILE: fs/unionfs/union.h:360:
+		BUG_ON(hidden_inode->i_nlink < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#429: FILE: fs/unionfs/union.h:382:
+struct dentry *unionfs_lookup_backend(struct dentry *dentry, struct nameidata *nd, int lookupmode);
                                                                                ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#444: FILE: fs/unionfs/union.h:397:
+	BUG_ON(index < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#451: FILE: fs/unionfs/union.h:404:
+	BUG_ON(index < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#469: FILE: fs/unionfs/union.h:422:
+	BUG_ON(index < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#483: FILE: fs/unionfs/union.h:436:
+	BUG_ON(index < 0);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#495: FILE: fs/unionfs/union.h:448:
+#define UNIONFS_DIR_OPAQUE UNIONFS_WHPFX UNIONFS_DIR_OPAQUE_NAME

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#539: FILE: fs/unionfs/union.h:492:
+extern int make_dir_opaque(struct dentry *dir, int bindex);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000003537.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 19 warnings, 28 checks, 495 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000003537.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
