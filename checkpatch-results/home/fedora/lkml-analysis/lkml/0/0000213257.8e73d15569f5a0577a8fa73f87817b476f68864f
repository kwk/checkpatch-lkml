ERROR:SPACING: space required after that ',' (ctx:VxV)
#96: FILE: crypto/cast5.c:570:
+#define F1(D,m,r)  (  (I = ((m) + (D))), (I=rol32(I,(r))),   \
             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#96: FILE: crypto/cast5.c:570:
+#define F1(D,m,r)  (  (I = ((m) + (D))), (I=rol32(I,(r))),   \
               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#96: FILE: crypto/cast5.c:570:
+#define F1(D,m,r)  (  (I = ((m) + (D))), (I=rol32(I,(r))),   \
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#96: FILE: crypto/cast5.c:570:
+#define F1(D,m,r)  (  (I = ((m) + (D))), (I=rol32(I,(r))),   \
                                                    ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#96: FILE: crypto/cast5.c:570:
+#define F1(D,m,r)  (  (I = ((m) + (D))), (I=rol32(I,(r))),   \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#99: FILE: crypto/cast5.c:572:
+#define F2(D,m,r)  (  (I = ((m) ^ (D))), (I=rol32(I,(r))),   \
             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#99: FILE: crypto/cast5.c:572:
+#define F2(D,m,r)  (  (I = ((m) ^ (D))), (I=rol32(I,(r))),   \
               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#99: FILE: crypto/cast5.c:572:
+#define F2(D,m,r)  (  (I = ((m) ^ (D))), (I=rol32(I,(r))),   \
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#99: FILE: crypto/cast5.c:572:
+#define F2(D,m,r)  (  (I = ((m) ^ (D))), (I=rol32(I,(r))),   \
                                                    ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#99: FILE: crypto/cast5.c:572:
+#define F2(D,m,r)  (  (I = ((m) ^ (D))), (I=rol32(I,(r))),   \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#102: FILE: crypto/cast5.c:574:
+#define F3(D,m,r)  (  (I = ((m) - (D))), (I=rol32(I,(r))),   \
             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#102: FILE: crypto/cast5.c:574:
+#define F3(D,m,r)  (  (I = ((m) - (D))), (I=rol32(I,(r))),   \
               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#102: FILE: crypto/cast5.c:574:
+#define F3(D,m,r)  (  (I = ((m) - (D))), (I=rol32(I,(r))),   \
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#102: FILE: crypto/cast5.c:574:
+#define F3(D,m,r)  (  (I = ((m) - (D))), (I=rol32(I,(r))),   \
                                                    ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#102: FILE: crypto/cast5.c:574:
+#define F3(D,m,r)  (  (I = ((m) - (D))), (I=rol32(I,(r))),   \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: crypto/aes.c:218:
+   (y) ^= ror32(u ^ t,  8) ^ \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#191: FILE: crypto/aes.c:219:
+          ror32(v ^ t, 16) ^ \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: crypto/aes.c:219:
+          ror32(v ^ t, 16) ^ \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#192: FILE: crypto/aes.c:220:
+          ror32(t,24)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: crypto/aes.c:220:
+          ror32(t,24)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#192: FILE: crypto/aes.c:220:
+          ror32(t,24)
                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#231: FILE: crypto/cast6.c:36:
+#define F1(D,r,m)  (  (I = ((m) + (D))), (I=rol32(I,(r))),   \
             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#231: FILE: crypto/cast6.c:36:
+#define F1(D,r,m)  (  (I = ((m) + (D))), (I=rol32(I,(r))),   \
               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#231: FILE: crypto/cast6.c:36:
+#define F1(D,r,m)  (  (I = ((m) + (D))), (I=rol32(I,(r))),   \
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#231: FILE: crypto/cast6.c:36:
+#define F1(D,r,m)  (  (I = ((m) + (D))), (I=rol32(I,(r))),   \
                                                    ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#231: FILE: crypto/cast6.c:36:
+#define F1(D,r,m)  (  (I = ((m) + (D))), (I=rol32(I,(r))),   \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#234: FILE: crypto/cast6.c:38:
+#define F2(D,r,m)  (  (I = ((m) ^ (D))), (I=rol32(I,(r))),   \
             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#234: FILE: crypto/cast6.c:38:
+#define F2(D,r,m)  (  (I = ((m) ^ (D))), (I=rol32(I,(r))),   \
               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#234: FILE: crypto/cast6.c:38:
+#define F2(D,r,m)  (  (I = ((m) ^ (D))), (I=rol32(I,(r))),   \
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#234: FILE: crypto/cast6.c:38:
+#define F2(D,r,m)  (  (I = ((m) ^ (D))), (I=rol32(I,(r))),   \
                                                    ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#234: FILE: crypto/cast6.c:38:
+#define F2(D,r,m)  (  (I = ((m) ^ (D))), (I=rol32(I,(r))),   \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#237: FILE: crypto/cast6.c:40:
+#define F3(D,r,m)  (  (I = ((m) - (D))), (I=rol32(I,(r))),   \
             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#237: FILE: crypto/cast6.c:40:
+#define F3(D,r,m)  (  (I = ((m) - (D))), (I=rol32(I,(r))),   \
               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#237: FILE: crypto/cast6.c:40:
+#define F3(D,r,m)  (  (I = ((m) - (D))), (I=rol32(I,(r))),   \
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#237: FILE: crypto/cast6.c:40:
+#define F3(D,r,m)  (  (I = ((m) - (D))), (I=rol32(I,(r))),   \
                                                    ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#237: FILE: crypto/cast6.c:40:
+#define F3(D,r,m)  (  (I = ((m) - (D))), (I=rol32(I,(r))),   \

ERROR:CODE_INDENT: code indent should use tabs where possible
#308: FILE: crypto/serpent.c:36:
+        b ^= d; b ^= c; b ^= a; b ^= PHI ^ i; b = rol32(b,11); k[j] = b;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#308: FILE: crypto/serpent.c:36:
+        b ^= d; b ^= c; b ^= a; b ^= PHI ^ i; b = rol32(b,11); k[j] = b;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#308: FILE: crypto/serpent.c:36:
+        b ^= d; b ^= c; b ^= a; b ^= PHI ^ i; b = rol32(b,11); k[j] = b;
                                                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#318: FILE: crypto/serpent.c:49:
+					x0=rol32(x0,13);\
 					  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#318: FILE: crypto/serpent.c:49:
+					x0=rol32(x0,13);\
 					           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#319: FILE: crypto/serpent.c:50:
+	x2=rol32(x2,3);	x1 ^= x0;	x4  = x0 << 3;	\
 	  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#319: FILE: crypto/serpent.c:50:
+	x2=rol32(x2,3);	x1 ^= x0;	x4  = x0 << 3;	\
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#323: FILE: crypto/serpent.c:52:
+	x1=rol32(x1,1);	x3 ^= x4;			\
 	  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#323: FILE: crypto/serpent.c:52:
+	x1=rol32(x1,1);	x3 ^= x4;			\
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#324: FILE: crypto/serpent.c:53:
+	x3=rol32(x3,7);	x4  = x1;			\
 	  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#324: FILE: crypto/serpent.c:53:
+	x3=rol32(x3,7);	x4  = x1;			\
 	           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#328: FILE: crypto/serpent.c:56:
+	x1 ^= k[4*i+1];	x0=rol32(x0,5);	x2=rol32(x2,22);\
 	         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#328: FILE: crypto/serpent.c:56:
+	x1 ^= k[4*i+1];	x0=rol32(x0,5);	x2=rol32(x2,22);\
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#328: FILE: crypto/serpent.c:56:
+	x1 ^= k[4*i+1];	x0=rol32(x0,5);	x2=rol32(x2,22);\
 	               	  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#328: FILE: crypto/serpent.c:56:
+	x1 ^= k[4*i+1];	x0=rol32(x0,5);	x2=rol32(x2,22);\
 	               	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#328: FILE: crypto/serpent.c:56:
+	x1 ^= k[4*i+1];	x0=rol32(x0,5);	x2=rol32(x2,22);\
 	               	               	  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#328: FILE: crypto/serpent.c:56:
+	x1 ^= k[4*i+1];	x0=rol32(x0,5);	x2=rol32(x2,22);\
 	               	               	           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#334: FILE: crypto/serpent.c:61:
+	x3 ^= k[4*i+3];	x0=ror32(x0,5);	x2=ror32(x2,22);\
 	         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#334: FILE: crypto/serpent.c:61:
+	x3 ^= k[4*i+3];	x0=ror32(x0,5);	x2=ror32(x2,22);\
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#334: FILE: crypto/serpent.c:61:
+	x3 ^= k[4*i+3];	x0=ror32(x0,5);	x2=ror32(x2,22);\
 	               	  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#334: FILE: crypto/serpent.c:61:
+	x3 ^= k[4*i+3];	x0=ror32(x0,5);	x2=ror32(x2,22);\
 	               	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#334: FILE: crypto/serpent.c:61:
+	x3 ^= k[4*i+3];	x0=ror32(x0,5);	x2=ror32(x2,22);\
 	               	               	  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#334: FILE: crypto/serpent.c:61:
+	x3 ^= k[4*i+3];	x0=ror32(x0,5);	x2=ror32(x2,22);\
 	               	               	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#340: FILE: crypto/serpent.c:63:
+	x4 <<= 7;	x0 ^= x1;	x1=ror32(x1,1);	\
 	         	         	  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#340: FILE: crypto/serpent.c:63:
+	x4 <<= 7;	x0 ^= x1;	x1=ror32(x1,1);	\
 	         	         	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#341: FILE: crypto/serpent.c:64:
+	x2 ^= x4;	x3=ror32(x3,7);	x4 = x0 << 3;	\
 	         	  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#341: FILE: crypto/serpent.c:64:
+	x2 ^= x4;	x3=ror32(x3,7);	x4 = x0 << 3;	\
 	         	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#342: FILE: crypto/serpent.c:65:
+	x1 ^= x0;	x3 ^= x4;	x0=ror32(x0,13);\
 	         	         	  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#342: FILE: crypto/serpent.c:65:
+	x1 ^= x0;	x3 ^= x4;	x0=ror32(x0,13);\
 	         	         	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#343: FILE: crypto/serpent.c:66:
+	x1 ^= x2;	x3 ^= x2;	x2=ror32(x2,3);
 	         	         	  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#343: FILE: crypto/serpent.c:66:
+	x1 ^= x2;	x3 ^= x2;	x2=ror32(x2,3);
 	         	         	           ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#365: FILE: crypto/sha1.c:34:
+#define blk(i) (block32[i&15] = rol32(block32[(i+13)&15]^block32[(i+8)&15] \
                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#365: FILE: crypto/sha1.c:34:
+#define blk(i) (block32[i&15] = rol32(block32[(i+13)&15]^block32[(i+8)&15] \
                                                 ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#365: FILE: crypto/sha1.c:34:
+#define blk(i) (block32[i&15] = rol32(block32[(i+13)&15]^block32[(i+8)&15] \
                                                     ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#365: FILE: crypto/sha1.c:34:
+#define blk(i) (block32[i&15] = rol32(block32[(i+13)&15]^block32[(i+8)&15] \
                                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#365: FILE: crypto/sha1.c:34:
+#define blk(i) (block32[i&15] = rol32(block32[(i+13)&15]^block32[(i+8)&15] \
                                                                    ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#365: FILE: crypto/sha1.c:34:
+#define blk(i) (block32[i&15] = rol32(block32[(i+13)&15]^block32[(i+8)&15] \
                                                                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#365: FILE: crypto/sha1.c:34:
+#define blk(i) (block32[i&15] = rol32(block32[(i+13)&15]^block32[(i+8)&15] \
     ^block32[(i+2)&15]^block32[i&15],1))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'i' may be better as '(i)' to avoid precedence issues
#365: FILE: crypto/sha1.c:34:
+#define blk(i) (block32[i&15] = rol32(block32[(i+13)&15]^block32[(i+8)&15] \
     ^block32[(i+2)&15]^block32[i&15],1))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#377: FILE: crypto/sha1.c:38:
+#define R0(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk0(i)+0x5A827999+rol32(v,5); \
             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#377: FILE: crypto/sha1.c:38:
+#define R0(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk0(i)+0x5A827999+rol32(v,5); \
               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#377: FILE: crypto/sha1.c:38:
+#define R0(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk0(i)+0x5A827999+rol32(v,5); \
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#377: FILE: crypto/sha1.c:38:
+#define R0(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk0(i)+0x5A827999+rol32(v,5); \
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#377: FILE: crypto/sha1.c:38:
+#define R0(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk0(i)+0x5A827999+rol32(v,5); \
                     ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#377: FILE: crypto/sha1.c:38:
+#define R0(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk0(i)+0x5A827999+rol32(v,5); \
                          ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#377: FILE: crypto/sha1.c:38:
+#define R0(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk0(i)+0x5A827999+rol32(v,5); \
                               ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#377: FILE: crypto/sha1.c:38:
+#define R0(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk0(i)+0x5A827999+rol32(v,5); \
                                  ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#377: FILE: crypto/sha1.c:38:
+#define R0(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk0(i)+0x5A827999+rol32(v,5); \
                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#377: FILE: crypto/sha1.c:38:
+#define R0(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk0(i)+0x5A827999+rol32(v,5); \
                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#377: FILE: crypto/sha1.c:38:
+#define R0(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk0(i)+0x5A827999+rol32(v,5); \
                                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#377: FILE: crypto/sha1.c:38:
+#define R0(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk0(i)+0x5A827999+rol32(v,5); \
                                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#377: FILE: crypto/sha1.c:38:
+#define R0(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk0(i)+0x5A827999+rol32(v,5); \
                                                                    ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#377: FILE: crypto/sha1.c:38:
+#define R0(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk0(i)+0x5A827999+rol32(v,5); \
+                        w=rol32(w,30);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'w' - possible side-effects?
#377: FILE: crypto/sha1.c:38:
+#define R0(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk0(i)+0x5A827999+rol32(v,5); \
+                        w=rol32(w,30);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'w' may be better as '(w)' to avoid precedence issues
#377: FILE: crypto/sha1.c:38:
+#define R0(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk0(i)+0x5A827999+rol32(v,5); \
+                        w=rol32(w,30);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#377: FILE: crypto/sha1.c:38:
+#define R0(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk0(i)+0x5A827999+rol32(v,5); \
+                        w=rol32(w,30);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#377: FILE: crypto/sha1.c:38:
+#define R0(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk0(i)+0x5A827999+rol32(v,5); \
+                        w=rol32(w,30);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'y' may be better as '(y)' to avoid precedence issues
#377: FILE: crypto/sha1.c:38:
+#define R0(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk0(i)+0x5A827999+rol32(v,5); \
+                        w=rol32(w,30);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'z' may be better as '(z)' to avoid precedence issues
#377: FILE: crypto/sha1.c:38:
+#define R0(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk0(i)+0x5A827999+rol32(v,5); \
+                        w=rol32(w,30);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#377: FILE: crypto/sha1.c:38:
+#define R0(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk0(i)+0x5A827999+rol32(v,5); \
+                        w=rol32(w,30);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:CODE_INDENT: code indent should use tabs where possible
#378: FILE: crypto/sha1.c:39:
+                        w=rol32(w,30);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#378: FILE: crypto/sha1.c:39:
+                        w=rol32(w,30);$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#378: FILE: crypto/sha1.c:39:
+                        w=rol32(w,30);
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#378: FILE: crypto/sha1.c:39:
+                        w=rol32(w,30);
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#379: FILE: crypto/sha1.c:40:
+#define R1(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk(i)+0x5A827999+rol32(v,5); \
             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#379: FILE: crypto/sha1.c:40:
+#define R1(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk(i)+0x5A827999+rol32(v,5); \
               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#379: FILE: crypto/sha1.c:40:
+#define R1(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk(i)+0x5A827999+rol32(v,5); \
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#379: FILE: crypto/sha1.c:40:
+#define R1(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk(i)+0x5A827999+rol32(v,5); \
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#379: FILE: crypto/sha1.c:40:
+#define R1(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk(i)+0x5A827999+rol32(v,5); \
                     ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#379: FILE: crypto/sha1.c:40:
+#define R1(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk(i)+0x5A827999+rol32(v,5); \
                          ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#379: FILE: crypto/sha1.c:40:
+#define R1(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk(i)+0x5A827999+rol32(v,5); \
                               ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#379: FILE: crypto/sha1.c:40:
+#define R1(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk(i)+0x5A827999+rol32(v,5); \
                                  ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#379: FILE: crypto/sha1.c:40:
+#define R1(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk(i)+0x5A827999+rol32(v,5); \
                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#379: FILE: crypto/sha1.c:40:
+#define R1(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk(i)+0x5A827999+rol32(v,5); \
                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#379: FILE: crypto/sha1.c:40:
+#define R1(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk(i)+0x5A827999+rol32(v,5); \
                                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#379: FILE: crypto/sha1.c:40:
+#define R1(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk(i)+0x5A827999+rol32(v,5); \
                                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#379: FILE: crypto/sha1.c:40:
+#define R1(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk(i)+0x5A827999+rol32(v,5); \
                                                                   ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#379: FILE: crypto/sha1.c:40:
+#define R1(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk(i)+0x5A827999+rol32(v,5); \
+                        w=rol32(w,30);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'w' - possible side-effects?
#379: FILE: crypto/sha1.c:40:
+#define R1(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk(i)+0x5A827999+rol32(v,5); \
+                        w=rol32(w,30);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'w' may be better as '(w)' to avoid precedence issues
#379: FILE: crypto/sha1.c:40:
+#define R1(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk(i)+0x5A827999+rol32(v,5); \
+                        w=rol32(w,30);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#379: FILE: crypto/sha1.c:40:
+#define R1(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk(i)+0x5A827999+rol32(v,5); \
+                        w=rol32(w,30);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#379: FILE: crypto/sha1.c:40:
+#define R1(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk(i)+0x5A827999+rol32(v,5); \
+                        w=rol32(w,30);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'y' may be better as '(y)' to avoid precedence issues
#379: FILE: crypto/sha1.c:40:
+#define R1(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk(i)+0x5A827999+rol32(v,5); \
+                        w=rol32(w,30);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'z' may be better as '(z)' to avoid precedence issues
#379: FILE: crypto/sha1.c:40:
+#define R1(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk(i)+0x5A827999+rol32(v,5); \
+                        w=rol32(w,30);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#379: FILE: crypto/sha1.c:40:
+#define R1(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk(i)+0x5A827999+rol32(v,5); \
+                        w=rol32(w,30);

ERROR:CODE_INDENT: code indent should use tabs where possible
#380: FILE: crypto/sha1.c:41:
+                        w=rol32(w,30);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#380: FILE: crypto/sha1.c:41:
+                        w=rol32(w,30);$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#380: FILE: crypto/sha1.c:41:
+                        w=rol32(w,30);
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#380: FILE: crypto/sha1.c:41:
+                        w=rol32(w,30);
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#381: FILE: crypto/sha1.c:42:
+#define R2(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0x6ED9EBA1+rol32(v,5);w=rol32(w,30);
             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#381: FILE: crypto/sha1.c:42:
+#define R2(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0x6ED9EBA1+rol32(v,5);w=rol32(w,30);
               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#381: FILE: crypto/sha1.c:42:
+#define R2(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0x6ED9EBA1+rol32(v,5);w=rol32(w,30);
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#381: FILE: crypto/sha1.c:42:
+#define R2(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0x6ED9EBA1+rol32(v,5);w=rol32(w,30);
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#381: FILE: crypto/sha1.c:42:
+#define R2(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0x6ED9EBA1+rol32(v,5);w=rol32(w,30);
                     ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#381: FILE: crypto/sha1.c:42:
+#define R2(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0x6ED9EBA1+rol32(v,5);w=rol32(w,30);
                          ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#381: FILE: crypto/sha1.c:42:
+#define R2(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0x6ED9EBA1+rol32(v,5);w=rol32(w,30);
                              ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#381: FILE: crypto/sha1.c:42:
+#define R2(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0x6ED9EBA1+rol32(v,5);w=rol32(w,30);
                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#381: FILE: crypto/sha1.c:42:
+#define R2(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0x6ED9EBA1+rol32(v,5);w=rol32(w,30);
                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#381: FILE: crypto/sha1.c:42:
+#define R2(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0x6ED9EBA1+rol32(v,5);w=rol32(w,30);
                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#381: FILE: crypto/sha1.c:42:
+#define R2(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0x6ED9EBA1+rol32(v,5);w=rol32(w,30);
                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#381: FILE: crypto/sha1.c:42:
+#define R2(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0x6ED9EBA1+rol32(v,5);w=rol32(w,30);
                                                             ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#381: FILE: crypto/sha1.c:42:
+#define R2(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0x6ED9EBA1+rol32(v,5);w=rol32(w,30);
                                                                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#381: FILE: crypto/sha1.c:42:
+#define R2(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0x6ED9EBA1+rol32(v,5);w=rol32(w,30);
                                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#381: FILE: crypto/sha1.c:42:
+#define R2(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0x6ED9EBA1+rol32(v,5);w=rol32(w,30);
                                                                          ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#381: FILE: crypto/sha1.c:42:
+#define R2(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0x6ED9EBA1+rol32(v,5);w=rol32(w,30);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'w' - possible side-effects?
#381: FILE: crypto/sha1.c:42:
+#define R2(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0x6ED9EBA1+rol32(v,5);w=rol32(w,30);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'w' may be better as '(w)' to avoid precedence issues
#381: FILE: crypto/sha1.c:42:
+#define R2(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0x6ED9EBA1+rol32(v,5);w=rol32(w,30);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#381: FILE: crypto/sha1.c:42:
+#define R2(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0x6ED9EBA1+rol32(v,5);w=rol32(w,30);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'y' may be better as '(y)' to avoid precedence issues
#381: FILE: crypto/sha1.c:42:
+#define R2(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0x6ED9EBA1+rol32(v,5);w=rol32(w,30);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'z' may be better as '(z)' to avoid precedence issues
#381: FILE: crypto/sha1.c:42:
+#define R2(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0x6ED9EBA1+rol32(v,5);w=rol32(w,30);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#381: FILE: crypto/sha1.c:42:
+#define R2(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0x6ED9EBA1+rol32(v,5);w=rol32(w,30);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#382: FILE: crypto/sha1.c:43:
+#define R3(v,w,x,y,z,i) z+=(((w|x)&y)|(w&x))+blk(i)+0x8F1BBCDC+rol32(v,5); \
             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#382: FILE: crypto/sha1.c:43:
+#define R3(v,w,x,y,z,i) z+=(((w|x)&y)|(w&x))+blk(i)+0x8F1BBCDC+rol32(v,5); \
               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#382: FILE: crypto/sha1.c:43:
+#define R3(v,w,x,y,z,i) z+=(((w|x)&y)|(w&x))+blk(i)+0x8F1BBCDC+rol32(v,5); \
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#382: FILE: crypto/sha1.c:43:
+#define R3(v,w,x,y,z,i) z+=(((w|x)&y)|(w&x))+blk(i)+0x8F1BBCDC+rol32(v,5); \
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#382: FILE: crypto/sha1.c:43:
+#define R3(v,w,x,y,z,i) z+=(((w|x)&y)|(w&x))+blk(i)+0x8F1BBCDC+rol32(v,5); \
                     ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#382: FILE: crypto/sha1.c:43:
+#define R3(v,w,x,y,z,i) z+=(((w|x)&y)|(w&x))+blk(i)+0x8F1BBCDC+rol32(v,5); \
                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#382: FILE: crypto/sha1.c:43:
+#define R3(v,w,x,y,z,i) z+=(((w|x)&y)|(w&x))+blk(i)+0x8F1BBCDC+rol32(v,5); \
                                ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#382: FILE: crypto/sha1.c:43:
+#define R3(v,w,x,y,z,i) z+=(((w|x)&y)|(w&x))+blk(i)+0x8F1BBCDC+rol32(v,5); \
                                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#382: FILE: crypto/sha1.c:43:
+#define R3(v,w,x,y,z,i) z+=(((w|x)&y)|(w&x))+blk(i)+0x8F1BBCDC+rol32(v,5); \
                                      ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#382: FILE: crypto/sha1.c:43:
+#define R3(v,w,x,y,z,i) z+=(((w|x)&y)|(w&x))+blk(i)+0x8F1BBCDC+rol32(v,5); \
                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#382: FILE: crypto/sha1.c:43:
+#define R3(v,w,x,y,z,i) z+=(((w|x)&y)|(w&x))+blk(i)+0x8F1BBCDC+rol32(v,5); \
                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#382: FILE: crypto/sha1.c:43:
+#define R3(v,w,x,y,z,i) z+=(((w|x)&y)|(w&x))+blk(i)+0x8F1BBCDC+rol32(v,5); \
                                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#382: FILE: crypto/sha1.c:43:
+#define R3(v,w,x,y,z,i) z+=(((w|x)&y)|(w&x))+blk(i)+0x8F1BBCDC+rol32(v,5); \
                                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#382: FILE: crypto/sha1.c:43:
+#define R3(v,w,x,y,z,i) z+=(((w|x)&y)|(w&x))+blk(i)+0x8F1BBCDC+rol32(v,5); \
                                                                       ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#382: FILE: crypto/sha1.c:43:
+#define R3(v,w,x,y,z,i) z+=(((w|x)&y)|(w&x))+blk(i)+0x8F1BBCDC+rol32(v,5); \
+                        w=rol32(w,30);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'w' - possible side-effects?
#382: FILE: crypto/sha1.c:43:
+#define R3(v,w,x,y,z,i) z+=(((w|x)&y)|(w&x))+blk(i)+0x8F1BBCDC+rol32(v,5); \
+                        w=rol32(w,30);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'w' may be better as '(w)' to avoid precedence issues
#382: FILE: crypto/sha1.c:43:
+#define R3(v,w,x,y,z,i) z+=(((w|x)&y)|(w&x))+blk(i)+0x8F1BBCDC+rol32(v,5); \
+                        w=rol32(w,30);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#382: FILE: crypto/sha1.c:43:
+#define R3(v,w,x,y,z,i) z+=(((w|x)&y)|(w&x))+blk(i)+0x8F1BBCDC+rol32(v,5); \
+                        w=rol32(w,30);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#382: FILE: crypto/sha1.c:43:
+#define R3(v,w,x,y,z,i) z+=(((w|x)&y)|(w&x))+blk(i)+0x8F1BBCDC+rol32(v,5); \
+                        w=rol32(w,30);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'y' may be better as '(y)' to avoid precedence issues
#382: FILE: crypto/sha1.c:43:
+#define R3(v,w,x,y,z,i) z+=(((w|x)&y)|(w&x))+blk(i)+0x8F1BBCDC+rol32(v,5); \
+                        w=rol32(w,30);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'z' may be better as '(z)' to avoid precedence issues
#382: FILE: crypto/sha1.c:43:
+#define R3(v,w,x,y,z,i) z+=(((w|x)&y)|(w&x))+blk(i)+0x8F1BBCDC+rol32(v,5); \
+                        w=rol32(w,30);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#382: FILE: crypto/sha1.c:43:
+#define R3(v,w,x,y,z,i) z+=(((w|x)&y)|(w&x))+blk(i)+0x8F1BBCDC+rol32(v,5); \
+                        w=rol32(w,30);

ERROR:CODE_INDENT: code indent should use tabs where possible
#383: FILE: crypto/sha1.c:44:
+                        w=rol32(w,30);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#383: FILE: crypto/sha1.c:44:
+                        w=rol32(w,30);$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#383: FILE: crypto/sha1.c:44:
+                        w=rol32(w,30);
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#383: FILE: crypto/sha1.c:44:
+                        w=rol32(w,30);
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#384: FILE: crypto/sha1.c:45:
+#define R4(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0xCA62C1D6+rol32(v,5);w=rol32(w,30);
             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#384: FILE: crypto/sha1.c:45:
+#define R4(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0xCA62C1D6+rol32(v,5);w=rol32(w,30);
               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#384: FILE: crypto/sha1.c:45:
+#define R4(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0xCA62C1D6+rol32(v,5);w=rol32(w,30);
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#384: FILE: crypto/sha1.c:45:
+#define R4(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0xCA62C1D6+rol32(v,5);w=rol32(w,30);
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#384: FILE: crypto/sha1.c:45:
+#define R4(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0xCA62C1D6+rol32(v,5);w=rol32(w,30);
                     ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#384: FILE: crypto/sha1.c:45:
+#define R4(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0xCA62C1D6+rol32(v,5);w=rol32(w,30);
                          ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#384: FILE: crypto/sha1.c:45:
+#define R4(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0xCA62C1D6+rol32(v,5);w=rol32(w,30);
                              ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#384: FILE: crypto/sha1.c:45:
+#define R4(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0xCA62C1D6+rol32(v,5);w=rol32(w,30);
                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#384: FILE: crypto/sha1.c:45:
+#define R4(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0xCA62C1D6+rol32(v,5);w=rol32(w,30);
                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#384: FILE: crypto/sha1.c:45:
+#define R4(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0xCA62C1D6+rol32(v,5);w=rol32(w,30);
                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#384: FILE: crypto/sha1.c:45:
+#define R4(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0xCA62C1D6+rol32(v,5);w=rol32(w,30);
                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#384: FILE: crypto/sha1.c:45:
+#define R4(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0xCA62C1D6+rol32(v,5);w=rol32(w,30);
                                                             ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#384: FILE: crypto/sha1.c:45:
+#define R4(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0xCA62C1D6+rol32(v,5);w=rol32(w,30);
                                                                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#384: FILE: crypto/sha1.c:45:
+#define R4(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0xCA62C1D6+rol32(v,5);w=rol32(w,30);
                                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#384: FILE: crypto/sha1.c:45:
+#define R4(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0xCA62C1D6+rol32(v,5);w=rol32(w,30);
                                                                          ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#384: FILE: crypto/sha1.c:45:
+#define R4(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0xCA62C1D6+rol32(v,5);w=rol32(w,30);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'w' - possible side-effects?
#384: FILE: crypto/sha1.c:45:
+#define R4(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0xCA62C1D6+rol32(v,5);w=rol32(w,30);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'w' may be better as '(w)' to avoid precedence issues
#384: FILE: crypto/sha1.c:45:
+#define R4(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0xCA62C1D6+rol32(v,5);w=rol32(w,30);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#384: FILE: crypto/sha1.c:45:
+#define R4(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0xCA62C1D6+rol32(v,5);w=rol32(w,30);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'y' may be better as '(y)' to avoid precedence issues
#384: FILE: crypto/sha1.c:45:
+#define R4(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0xCA62C1D6+rol32(v,5);w=rol32(w,30);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'z' may be better as '(z)' to avoid precedence issues
#384: FILE: crypto/sha1.c:45:
+#define R4(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0xCA62C1D6+rol32(v,5);w=rol32(w,30);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#384: FILE: crypto/sha1.c:45:
+#define R4(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0xCA62C1D6+rol32(v,5);w=rol32(w,30);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#405: FILE: crypto/sha256.c:45:
+#define e0(x)       (ror32(x, 2) ^ ror32(x,13) ^ ror32(x,22))
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#405: FILE: crypto/sha256.c:45:
+#define e0(x)       (ror32(x, 2) ^ ror32(x,13) ^ ror32(x,22))
                                                         ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#405: FILE: crypto/sha256.c:45:
+#define e0(x)       (ror32(x, 2) ^ ror32(x,13) ^ ror32(x,22))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#406: FILE: crypto/sha256.c:46:
+#define e1(x)       (ror32(x, 6) ^ ror32(x,11) ^ ror32(x,25))
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#406: FILE: crypto/sha256.c:46:
+#define e1(x)       (ror32(x, 6) ^ ror32(x,11) ^ ror32(x,25))
                                                         ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#406: FILE: crypto/sha256.c:46:
+#define e1(x)       (ror32(x, 6) ^ ror32(x,11) ^ ror32(x,25))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#407: FILE: crypto/sha256.c:47:
+#define s0(x)       (ror32(x, 7) ^ ror32(x,18) ^ (x >> 3))
                                           ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#407: FILE: crypto/sha256.c:47:
+#define s0(x)       (ror32(x, 7) ^ ror32(x,18) ^ (x >> 3))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#408: FILE: crypto/sha256.c:48:
+#define s1(x)       (ror32(x,17) ^ ror32(x,19) ^ (x >> 10))
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#408: FILE: crypto/sha256.c:48:
+#define s1(x)       (ror32(x,17) ^ ror32(x,19) ^ (x >> 10))
                                           ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#408: FILE: crypto/sha256.c:48:
+#define s1(x)       (ror32(x,17) ^ ror32(x,19) ^ (x >> 10))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000213257.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 121 errors, 12 warnings, 73 checks, 332 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000213257.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
