CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#36: FILE: arch/i386/kernel/acpi.c:558:
+	acpi_wakeup_address = (unsigned long)alloc_bootmem_low(10*PAGE_SIZE);
 	                                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#53: FILE: arch/i386/kernel/acpi_wakeup.S:8:
+# Therefore it must only use relative jumps/calls. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#66: FILE: arch/i386/kernel/acpi_wakeup.S:22:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#83: FILE: arch/i386/kernel/acpi_wakeup.S:32:
+^I$

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#89: FILE: arch/i386/kernel/acpi_wakeup.S:38:
+	mov	$(wakeup_stack-wakeup_code), %sp		# Private stack is needed for ASUS board

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#97: FILE: arch/i386/kernel/acpi_wakeup.S:45:
+^I$

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#115: FILE: arch/i386/kernel/acpi_wakeup.S:60:
+	movl $swapper_pg_dir-__PAGE_OFFSET,%eax			# This should work but does not :-( Crashes with "Li"

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#116: FILE: arch/i386/kernel/acpi_wakeup.S:61:
+								# Normally it crashes with "Lin". Ouch,.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#127: FILE: arch/i386/kernel/acpi_wakeup.S:70:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#134: FILE: arch/i386/kernel/acpi_wakeup.S:75:
+#^Iandl^I $0x7fffffff,%eax^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: arch/i386/kernel/acpi_wakeup.S:178:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#193: FILE: arch/i386/kernel/acpi_wakeup.S:240:
+eat_some_memory:^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#302: FILE: drivers/ide/ide-disk.c:1543:
+	printk("Suspending device %p\n", dev->driver_data);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#310: FILE: drivers/ide/ide-disk.c:1551:
+	BUG_ON(in_interrupt());

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#312: FILE: drivers/ide/ide-disk.c:1553:
+	printk("Waiting for commands to finish\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#317: FILE: drivers/ide/ide-disk.c:1558:
+		printk("No hwgroup?\n");

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#319: FILE: drivers/ide/ide-disk.c:1560:
+		yield();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#322: FILE: drivers/ide/ide-disk.c:1563:
+	printk(KERN_INFO "suspending: %s ", drive->name);

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#327: FILE: drivers/ide/ide-disk.c:1568:
+		yield();

CHECK:SPACING: No space is necessary after a cast
#526: FILE: kernel/suspend.c:83:
+#define __ADDRESS(x)  ((unsigned long) phys_to_virt(x))

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#528: FILE: kernel/suspend.c:85:
+#define ADDRESS2(x) __ADDRESS(__pa(x))		/* Needed for x86-64 where some pages are in memory twice */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#549: FILE: kernel/suspend.c:238:
+	BUG_ON(in_atomic());

ERROR:CODE_INDENT: code indent should use tabs where possible
#558: FILE: kernel/suspend.c:326:
+^I  ^Iif (!memcmp("S1",cur->swh.magic.magic,2))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#558: FILE: kernel/suspend.c:326:
+^I  ^Iif (!memcmp("S1",cur->swh.magic.magic,2))$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#558: FILE: kernel/suspend.c:326:
+	  	if (!memcmp("S1",cur->swh.magic.magic,2))
 	  	                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#558: FILE: kernel/suspend.c:326:
+	  	if (!memcmp("S1",cur->swh.magic.magic,2))
 	  	                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#561: FILE: kernel/suspend.c:328:
+		else if (!memcmp("S2",cur->swh.magic.magic,2))
 		                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#561: FILE: kernel/suspend.c:328:
+		else if (!memcmp("S2",cur->swh.magic.magic,2))
 		                                          ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#568: FILE: kernel/suspend.c:334:
+^I^I  ^Imemcpy(cur->swh.magic.magic,"S1SUSP....",10);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#568: FILE: kernel/suspend.c:334:
+^I^I  ^Imemcpy(cur->swh.magic.magic,"S1SUSP....",10);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#568: FILE: kernel/suspend.c:334:
+		  	memcpy(cur->swh.magic.magic,"S1SUSP....",10);
 		  	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#568: FILE: kernel/suspend.c:334:
+		  	memcpy(cur->swh.magic.magic,"S1SUSP....",10);
 		  	                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#571: FILE: kernel/suspend.c:336:
+			memcpy(cur->swh.magic.magic,"S2SUSP....",10);
 			                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#571: FILE: kernel/suspend.c:336:
+			memcpy(cur->swh.magic.magic,"S2SUSP....",10);
 			                                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#595: FILE: kernel/suspend.c:503:
+^I^I^Iif ((ADDRESS(pfn) >= (unsigned long) ADDRESS2(&__nosave_begin)) && $

CHECK:SPACING: No space is necessary after a cast
#595: FILE: kernel/suspend.c:503:
+			if ((ADDRESS(pfn) >= (unsigned long) ADDRESS2(&__nosave_begin)) && 

CHECK:SPACING: No space is necessary after a cast
#596: FILE: kernel/suspend.c:504:
+			    (ADDRESS(pfn) <  (unsigned long) ADDRESS2(&__nosave_end))) {

CHECK:SPACING: No space is necessary after a cast
#606: FILE: kernel/suspend.c:515:
+			copy_page((void *) pagedir_p->address, (void *) pagedir_p->orig_address);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#615: FILE: kernel/suspend.c:551:
+	p = pagedir = (suspend_pagedir_t *)__get_free_pages(GFP_ATOMIC | __GFP_COLD, pagedir_order);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#629: FILE: kernel/suspend.c:565:
+		printk(".");

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#679: FILE: kernel/suspend.c:751:
+	extern int C_A_D;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#697: FILE: kernel/suspend.c:813:
+	BUG_ON(in_atomic());

ERROR:SPACING: space required after that ',' (ctx:VxV)
#726: FILE: kernel/suspend.c:1081:
+	if (!memcmp("S1",cur->swh.magic.magic,2))
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#726: FILE: kernel/suspend.c:1081:
+	if (!memcmp("S1",cur->swh.magic.magic,2))
 	                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#729: FILE: kernel/suspend.c:1083:
+	else if (!memcmp("S2",cur->swh.magic.magic,2))
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#729: FILE: kernel/suspend.c:1083:
+	else if (!memcmp("S2",cur->swh.magic.magic,2))
 	                                          ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'order == 0'
#740: FILE: mm/page_alloc.c:371:
+	if ((order == 0) && !cold) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000412395.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 23 errors, 17 warnings, 7 checks, 646 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000412395.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
