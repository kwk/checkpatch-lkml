WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#59: FILE: arch/x86_64/Kconfig:291:
+config HOTPLUG_CPU
+	bool "Support for hot-pluggable CPUs (EXPERIMENTAL)"
+	depends on SMP && HOTPLUG && EXPERIMENTAL
+	help
+		Say Y here to experiment with turning CPUs off and on.  CPUs
+		can be controlled through /sys/devices/system/cpu/cpu#.
+		Say N if you want to disable CPU hotplug.
+
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPACING: space prohibited before semicolon
#95: FILE: arch/x86_64/kernel/smpboot.c:110:
+struct task_struct *idle_thread_array[NR_CPUS] __cpuinitdata ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#98: FILE: arch/x86_64/kernel/smpboot.c:113:
+#define set_idle_for_cpu(x,p)   (idle_thread_array[(x)] = (p))
                           ^

CHECK:SPACING: No space is necessary after a cast
#174: FILE: arch/x86_64/kernel/smpboot.c:691:
+		c_idle.idle->thread.rsp = (unsigned long) (((struct pt_regs *)

CHECK:SPACING: No space is necessary after a cast
#175: FILE: arch/x86_64/kernel/smpboot.c:692:
+			(THREAD_SIZE + (unsigned long) c_idle.idle->thread_info)) - 1);

CHECK:BRACES: braces {} should be used on all arms of this statement
#180: FILE: arch/x86_64/kernel/smpboot.c:697:
+	if (!keventd_up() || current_is_keventd())
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#182: FILE: arch/x86_64/kernel/smpboot.c:699:
+	else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#240: FILE: arch/x86_64/kernel/smpboot.c:1066:
+ ^Iif (cpu_isset(cpu, cpu_callin_map)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#240: FILE: arch/x86_64/kernel/smpboot.c:1066:
+ ^Iif (cpu_isset(cpu, cpu_callin_map)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: arch/x86_64/kernel/smpboot.c:1066:
+ ^Iif (cpu_isset(cpu, cpu_callin_map)) {$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#241: FILE: arch/x86_64/kernel/smpboot.c:1067:
+		Dprintk ("do_boot_cpu %d Already started\n", cpu);

CHECK:CAMELCASE: Avoid CamelCase: <Dprintk>
#241: FILE: arch/x86_64/kernel/smpboot.c:1067:
+		Dprintk ("do_boot_cpu %d Already started\n", cpu);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:CODE_INDENT: code indent should use tabs where possible
#242: FILE: arch/x86_64/kernel/smpboot.c:1068:
+ ^I^Ireturn -ENOSYS;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#242: FILE: arch/x86_64/kernel/smpboot.c:1068:
+ ^I^Ireturn -ENOSYS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: arch/x86_64/kernel/smpboot.c:1068:
+ ^I^Ireturn -ENOSYS;$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#242: FILE: arch/x86_64/kernel/smpboot.c:1068:
+ 		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:CODE_INDENT: code indent should use tabs where possible
#307: FILE: arch/x86_64/kernel/smpboot.c:1141:
+ ^I *$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#307: FILE: arch/x86_64/kernel/smpboot.c:1141:
+ ^I *$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#346: FILE: arch/x86_64/kernel/smpboot.c:1180:
+		schedule_timeout(HZ/10);
 		                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#348: FILE: arch/x86_64/kernel/smpboot.c:1182:
+ ^Iprintk(KERN_ERR "CPU %u didn't die...\n", cpu);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#348: FILE: arch/x86_64/kernel/smpboot.c:1182:
+ ^Iprintk(KERN_ERR "CPU %u didn't die...\n", cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#348: FILE: arch/x86_64/kernel/smpboot.c:1182:
+ ^Iprintk(KERN_ERR "CPU %u didn't die...\n", cpu);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#348: FILE: arch/x86_64/kernel/smpboot.c:1182:
+ 	printk(KERN_ERR "CPU %u didn't die...\n", cpu);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#355: FILE: arch/x86_64/kernel/smpboot.c:1189:
+	return -ENOSYS;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#361: FILE: arch/x86_64/kernel/smpboot.c:1195:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#389: FILE: arch/x86_64/kernel/irq.c:119:
+		cpumask_t mask;
+		if (irq == 2)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#393: FILE: arch/x86_64/kernel/irq.c:123:
+		if (any_online_cpu(mask) == NR_CPUS) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#394: FILE: arch/x86_64/kernel/irq.c:124:
+			printk("Breaking affinity for irq %i\n", irq);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#400: FILE: arch/x86_64/kernel/irq.c:130:
+			printk("Cannot set affinity for irq %i\n", irq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#419: FILE: include/asm-x86_64/irq.h:57:
+extern void fixup_irqs(cpumask_t map);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/nmi.h> instead of <asm/nmi.h>
#452: FILE: arch/x86_64/kernel/process.c:162:
+#include <asm/nmi.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:MEMORY_BARRIER: memory barrier without comment
#457: FILE: arch/x86_64/kernel/process.c:167:
+	mb();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#468: FILE: arch/x86_64/kernel/process.c:178:
+	BUG();

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#492: FILE: include/asm-x86_64/smp.h:47:
+extern void lock_ipi_call_lock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#493: FILE: include/asm-x86_64/smp.h:48:
+extern void unlock_ipi_call_lock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#501: FILE: include/asm-x86_64/smp.h:82:
+extern int __cpu_disable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#502: FILE: include/asm-x86_64/smp.h:83:
+extern void __cpu_die(unsigned int cpu);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000179053.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 20 warnings, 12 checks, 474 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000179053.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
