WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#49: 
diff -urNp -I \$.*\$ --exclude TAGS -X /home/rusty/current-dontdiff --minimal linux-2.5.30/arch/i386/Config.help working-2.5.30-kprobes/arch/i386/Config.help

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#66: FILE: include/linux/kprobes.h:1:
+#ifndef _LINUX_KPROBES_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#94: FILE: include/linux/kprobes.h:29:
+	  * Return 1 if it handled fault, otherwise kernel will see it. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#116: FILE: include/linux/kprobes.h:51:
+static inline int register_kprobe(struct probe_struct *p) { return -ENOSYS; }

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#144: FILE: kernel/kprobes.c:1:
+/* Support for kernel probes.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#145: FILE: kernel/kprobes.c:2:
+/* Support for kernel probes.
+   (C) 2002 Vamsi Krishna S <vamsi_krishna@in.ibm.com>.

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#152: FILE: kernel/kprobes.c:9:
+#include <asm/cacheflush.h>

CHECK:BIT_MACRO: Prefer using the BIT macro
#156: FILE: kernel/kprobes.c:13:
+#define KPROBE_TABLE_SIZE (1 << KPROBE_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#160: FILE: kernel/kprobes.c:17:
+static unsigned int kprobe_cpu = NR_CPUS;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#177: FILE: kernel/kprobes.c:34:
+	kprobe_cpu = NR_CPUS;

WARNING:LINE_SPACING: Missing a blank line after declarations
#189: FILE: kernel/kprobes.c:46:
+		struct kprobe *p = list_entry(tmp, struct kprobe, list);
+		if (p->addr == addr)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#234: FILE: kernel/kprobes.c:91:
+__initcall(init_kprobes);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#236: FILE: kernel/kprobes.c:93:
+EXPORT_SYMBOL_GPL(register_kprobe);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#237: FILE: kernel/kprobes.c:94:
+EXPORT_SYMBOL_GPL(unregister_kprobe);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#264: FILE: arch/i386/kernel/entry.S:441:
+^Icmpl $0,%eax $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#287: FILE: arch/i386/kernel/entry.S:471:
+^Icmpl $0,%eax $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#307: FILE: arch/i386/kernel/traps.c:10:
+ *  ^IVamsi Krishna S <vamsi_krishna@in.ibm.com>, July, 2002$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#357: FILE: arch/i386/kernel/traps.c:331:
+	switch(opcode) {
+		case 0xfa: 	/* cli */
+		case 0xfb:	/* sti */
+		case 0xcf:	/* iret/iretd */
+		case 0x9d:	/* popf/popfd */

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#357: FILE: arch/i386/kernel/traps.c:331:
+	switch(opcode) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#358: FILE: arch/i386/kernel/traps.c:332:
+^I^Icase 0xfa: ^I/* cli */$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#377: FILE: arch/i386/kernel/traps.c:351:
+static int kprobe_handler(struct pt_regs * regs)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#380: FILE: arch/i386/kernel/traps.c:354:
+	u8 *addr = (u8 *)(regs->eip-1);
 	                           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#385: FILE: arch/i386/kernel/traps.c:359:
+                   Disarm the probe we just hit, and ignore it. */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#385: FILE: arch/i386/kernel/traps.c:359:
+		/* We *are* holding lock here, so this is safe.
+                   Disarm the probe we just hit, and ignore it. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#385: FILE: arch/i386/kernel/traps.c:359:
+                   Disarm the probe we just hit, and ignore it. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#395: FILE: arch/i386/kernel/traps.c:369:
+^Ip = get_kprobe(addr); $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#408: FILE: arch/i386/kernel/traps.c:382:
+	kprobe_saved_eflags = kprobe_old_eflags = regs->eflags & (EF_TF|EF_IE);
 	                                                               ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#408: FILE: arch/i386/kernel/traps.c:382:
+	kprobe_saved_eflags = kprobe_old_eflags = regs->eflags & (EF_TF|EF_IE);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#428: FILE: arch/i386/kernel/traps.c:402:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#452: FILE: arch/i386/kernel/traps.c:426:
+        /*$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#468: FILE: arch/i386/kernel/traps.c:442:
+	if (current_kprobe->fault_handler
+	    && current_kprobe->fault_handler(current_kprobe, regs, trapnr))

ERROR:SPACING: space prohibited after that '&&' (ctx:ExW)
#468: FILE: arch/i386/kernel/traps.c:442:
+	    && current_kprobe->fault_handler(current_kprobe, regs, trapnr))
 	    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#473: FILE: arch/i386/kernel/traps.c:447:
+        ^Iregs->eflags |= kprobe_old_eflags;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#473: FILE: arch/i386/kernel/traps.c:447:
+        ^Iregs->eflags |= kprobe_old_eflags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#473: FILE: arch/i386/kernel/traps.c:447:
+        ^Iregs->eflags |= kprobe_old_eflags;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#509: FILE: arch/i386/kernel/traps.c:572:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#520: FILE: arch/i386/kernel/traps.c:676:
+asmlinkage int do_int3(struct pt_regs * regs, long error_code)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#537: FILE: arch/i386/kernel/traps.c:707:
+asmlinkage int do_debug(struct pt_regs * regs, long error_code)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#585: FILE: arch/i386/kernel/traps.c:1127:
+	_set_gate(idt_table+1,14,3,&debug);
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#585: FILE: arch/i386/kernel/traps.c:1127:
+	_set_gate(idt_table+1,14,3,&debug);
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#585: FILE: arch/i386/kernel/traps.c:1127:
+	_set_gate(idt_table+1,14,3,&debug);
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#585: FILE: arch/i386/kernel/traps.c:1127:
+	_set_gate(idt_table+1,14,3,&debug);
 	                          ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#585: FILE: arch/i386/kernel/traps.c:1127:
+	_set_gate(idt_table+1,14,3,&debug);
 	                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#591: FILE: arch/i386/kernel/traps.c:1133:
+	_set_gate(idt_table+3,14,3,&int3);
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#591: FILE: arch/i386/kernel/traps.c:1133:
+	_set_gate(idt_table+3,14,3,&int3);
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#591: FILE: arch/i386/kernel/traps.c:1133:
+	_set_gate(idt_table+3,14,3,&int3);
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#591: FILE: arch/i386/kernel/traps.c:1133:
+	_set_gate(idt_table+3,14,3,&int3);
 	                          ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#591: FILE: arch/i386/kernel/traps.c:1133:
+	_set_gate(idt_table+3,14,3,&int3);
 	                           ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#633: FILE: include/asm-i386/kprobes.h:1:
+#ifndef _ASM_KPROBES_H

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#637: FILE: include/asm-i386/kprobes.h:5:
+ *  ^IVamsi Krishna S <vamsi_krishna@in.ibm.com>, July, 2002$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#650: FILE: include/asm-i386/kprobes.h:18:
+extern int kprobe_fault_handler(struct pt_regs *regs, int trapnr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000441952.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 21 warnings, 8 checks, 557 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000441952.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
