WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#41: FILE: include/linux/vector.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'shrinked' may be misspelled - perhaps 'shrunk'?
#64: FILE: include/linux/vector.h:24:
+ * when successful, guarantee that unless expanded or shrinked in the
                                                       ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <Elemsize>
#113: FILE: include/linux/vector.h:73:
+#define VECTOR_INIT(Elemsize, Flags, Ctor, Dtor, Arg) {	\

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Flags>
#113: FILE: include/linux/vector.h:73:
+#define VECTOR_INIT(Elemsize, Flags, Ctor, Dtor, Arg) {	\

CHECK:CAMELCASE: Avoid CamelCase: <Ctor>
#113: FILE: include/linux/vector.h:73:
+#define VECTOR_INIT(Elemsize, Flags, Ctor, Dtor, Arg) {	\

CHECK:CAMELCASE: Avoid CamelCase: <Dtor>
#113: FILE: include/linux/vector.h:73:
+#define VECTOR_INIT(Elemsize, Flags, Ctor, Dtor, Arg) {	\

CHECK:CAMELCASE: Avoid CamelCase: <Arg>
#113: FILE: include/linux/vector.h:73:
+#define VECTOR_INIT(Elemsize, Flags, Ctor, Dtor, Arg) {	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'Elemsize' - possible side-effects?
#113: FILE: include/linux/vector.h:73:
+#define VECTOR_INIT(Elemsize, Flags, Ctor, Dtor, Arg) {	\
+	.elem_size	= (Flags) & VECTOR_ALLOCATE	\
+			  ? sizeof(void *) : (Elemsize),\
+	.flags		= (Flags),			\
+	.real_size	= (Elemsize),			\
+	.nr_per_chunk	= (Flags) & VECTOR_ALLOCATE	\
+			  ? PAGE_SIZE / sizeof(void *)	\
+			  : PAGE_SIZE / (Elemsize),	\
+	.ctor		= Ctor,				\
+	.dtor		= Dtor,				\
+	.arg		= Arg				\
+ }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'Flags' - possible side-effects?
#113: FILE: include/linux/vector.h:73:
+#define VECTOR_INIT(Elemsize, Flags, Ctor, Dtor, Arg) {	\
+	.elem_size	= (Flags) & VECTOR_ALLOCATE	\
+			  ? sizeof(void *) : (Elemsize),\
+	.flags		= (Flags),			\
+	.real_size	= (Elemsize),			\
+	.nr_per_chunk	= (Flags) & VECTOR_ALLOCATE	\
+			  ? PAGE_SIZE / sizeof(void *)	\
+			  : PAGE_SIZE / (Elemsize),	\
+	.ctor		= Ctor,				\
+	.dtor		= Dtor,				\
+	.arg		= Arg				\
+ }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: include/linux/vector.h:84:
+ }$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#137: FILE: include/linux/vector.h:97:
+void vector_init(struct vector *vec, size_t elem_size, unsigned flags,

CHECK:BRACES: braces {} should be used on all arms of this statement
#153: FILE: include/linux/vector.h:113:
+	if (index < vec->first) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#155: FILE: include/linux/vector.h:115:
+		void *p = vec->chunk + index * vec->elem_size;
+		return !(vec->flags & VECTOR_ALLOCATE) ? p : *(void **)p;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#156: FILE: include/linux/vector.h:116:
+	} else

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#233: FILE: lib/vector.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#234: FILE: lib/vector.c:2:
+ * lib/vector.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vec' - possible side-effects?
#256: FILE: lib/vector.c:24:
+#define VCHUNK(vec, idx) \
+	(*((vec)->ext == NULL ? \
+	  &(vec)->chunk : &(vec)->ext->chunks[(idx) / (vec)->nr_per_chunk]))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ext"
#257: FILE: lib/vector.c:25:
+	(*((vec)->ext == NULL ? \

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#268: FILE: lib/vector.c:36:
+	void *p = velem(vec, idx);
+	return !(vec->flags & VECTOR_ALLOCATE) ? p : *(void **)p;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#279: FILE: lib/vector.c:47:
+	unsigned flags = vec->flags;

WARNING:LINE_SPACING: Missing a blank line after declarations
#288: FILE: lib/vector.c:56:
+			void *p = *(void **)velem(vec, i);
+			if (vec->dtor)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#295: FILE: lib/vector.c:63:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#296: FILE: lib/vector.c:64:
+	
+}

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#300: FILE: lib/vector.c:68:
+	unsigned flags = vec->flags;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#304: FILE: lib/vector.c:72:
+	if (!(flags & (VECTOR_ALLOCATE|VECTOR_CLEAR)) && !vec->ctor)
 	                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#308: FILE: lib/vector.c:76:
+		BUG_ON(gfp_flags == 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#312: FILE: lib/vector.c:80:
+			if ((p = kmalloc(vec->real_size, gfp_flags)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#331: FILE: lib/vector.c:99:
+			int t;
+			for (i = at; i < at + nr; i += t) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#334: FILE: lib/vector.c:102:
+					vec->nr_per_chunk-i%vec->nr_per_chunk);
 					                 ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#334: FILE: lib/vector.c:102:
+					vec->nr_per_chunk-i%vec->nr_per_chunk);
 					                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#346: FILE: lib/vector.c:114:
+^I$

WARNING:TYPO_SPELLING: 'sav' may be misspelled - perhaps 'save'?
#364: FILE: lib/vector.c:132:
+		int sav, dav, nr;
 		    ^^^

WARNING:TYPO_SPELLING: 'sav' may be misspelled - perhaps 'save'?
#365: FILE: lib/vector.c:133:
+		sav = vec->nr_per_chunk - si % vec->nr_per_chunk;
 		^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#365: FILE: lib/vector.c:133:
+		int sav, dav, nr;
+		sav = vec->nr_per_chunk - si % vec->nr_per_chunk;

WARNING:TYPO_SPELLING: 'sav' may be misspelled - perhaps 'save'?
#367: FILE: lib/vector.c:135:
+		nr = min(nr_left, min(sav, dav));
 		                      ^^^

WARNING:TYPO_SPELLING: 'sav' may be misspelled - perhaps 'save'?
#368: FILE: lib/vector.c:136:
+		if (sav == dav && sav == vec->nr_per_chunk) {
 		    ^^^

WARNING:TYPO_SPELLING: 'sav' may be misspelled - perhaps 'save'?
#368: FILE: lib/vector.c:136:
+		if (sav == dav && sav == vec->nr_per_chunk) {
 		                  ^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#370: FILE: lib/vector.c:138:
+			void *p;
+			p = VCHUNK(vec, si);

CHECK:BRACES: Unbalanced braces around else statement
#373: FILE: lib/vector.c:141:
+		} else

WARNING:TYPO_SPELLING: 'sav' may be misspelled - perhaps 'save'?
#393: FILE: lib/vector.c:161:
+		int sav, dav, nr;
 		    ^^^

WARNING:TYPO_SPELLING: 'sav' may be misspelled - perhaps 'save'?
#394: FILE: lib/vector.c:162:
+		sav = si % vec->nr_per_chunk + 1;
 		^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#394: FILE: lib/vector.c:162:
+		int sav, dav, nr;
+		sav = si % vec->nr_per_chunk + 1;

WARNING:TYPO_SPELLING: 'sav' may be misspelled - perhaps 'save'?
#396: FILE: lib/vector.c:164:
+		nr = min(nr_left, min(sav, dav));
 		                      ^^^

WARNING:TYPO_SPELLING: 'sav' may be misspelled - perhaps 'save'?
#397: FILE: lib/vector.c:165:
+		if (sav == dav && sav == nr) {
 		    ^^^

WARNING:TYPO_SPELLING: 'sav' may be misspelled - perhaps 'save'?
#397: FILE: lib/vector.c:165:
+		if (sav == dav && sav == nr) {
 		                  ^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#399: FILE: lib/vector.c:167:
+			void *p;
+			p = VCHUNK(vec, si);

CHECK:BRACES: Unbalanced braces around else statement
#402: FILE: lib/vector.c:170:
+		} else

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#403: FILE: lib/vector.c:171:
+			memmove(velem(vec, di-nr+1), velem(vec, si-nr+1),
 			                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#403: FILE: lib/vector.c:171:
+			memmove(velem(vec, di-nr+1), velem(vec, si-nr+1),
 			                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#403: FILE: lib/vector.c:171:
+			memmove(velem(vec, di-nr+1), velem(vec, si-nr+1),
 			                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#403: FILE: lib/vector.c:171:
+			memmove(velem(vec, di-nr+1), velem(vec, si-nr+1),
 			                                             ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#412: FILE: lib/vector.c:180:
+void vector_init(struct vector *vec, size_t elem_size, unsigned flags,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#423: FILE: lib/vector.c:191:
+	BUG_ON(vec->elem_size > VECTOR_MAX_INLINE_SIZE);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#426: FILE: lib/vector.c:194:
+void * vector_elem_slow(struct vector *vec, int index, int gfp_flags)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#448: FILE: lib/vector.c:216:
+	BUG_ON(at < 0 || nr < 0 || end < -1 || cdlen > vec->real_size);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vector_elem"
#452: FILE: lib/vector.c:220:
+	if (vector_elem(vec, end, gfp_flags) == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#465: FILE: lib/vector.c:233:
+	BUG_ON(at < 0 || at > vec->len || nr < 0 || targ_alloc < 0 ||

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#473: FILE: lib/vector.c:241:
+	BUG_ON(gfp_flags == 0);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#476: FILE: lib/vector.c:244:
+	/* If targ_alloc, after rounding up to the nearest power of
+	   two, is less than or equal to the half of nr_per_chunk,

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#477: FILE: lib/vector.c:245:
+	   expand in place. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#480: FILE: lib/vector.c:248:
+		int cnt;
+		cnt = nr_alloc ?: min(VECTOR_MIN_ALLOC, vec->nr_per_chunk / 2);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#483: FILE: lib/vector.c:251:
+			BUG_ON(cnt < 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#490: FILE: lib/vector.c:258:
+			void *chunk;
+			if (!(chunk = kmalloc(targ_alloc * vec->elem_size,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#490: FILE: lib/vector.c:258:
+			if (!(chunk = kmalloc(targ_alloc * vec->elem_size,

WARNING:LINE_SPACING: Missing a blank line after declarations
#507: FILE: lib/vector.c:275:
+		void *chunk;
+		if (!(chunk = (void *)__get_free_page(gfp_flags)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#507: FILE: lib/vector.c:275:
+		if (!(chunk = (void *)__get_free_page(gfp_flags)))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#528: FILE: lib/vector.c:296:
+		for (cnt = vec->ext ? vec->ext->nr_slots : VECTOR_MIN_SLOTS-1;
 		                                                           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#530: FILE: lib/vector.c:298:
+			BUG_ON(cnt < 0);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#532: FILE: lib/vector.c:300:
+		if (!(ext = kmalloc(sizeof(*ext) + cnt * sizeof(void *),

CHECK:BRACES: braces {} should be used on all arms of this statement
#536: FILE: lib/vector.c:304:
+		if (vec->ext) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#540: FILE: lib/vector.c:308:
+		} else

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#548: FILE: lib/vector.c:316:
+		if (!(vec->ext->chunks[i] = (void *)__get_free_page(gfp_flags)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#555: FILE: lib/vector.c:323:
+	if ((ret = init_elems(vec, at, nr, gfp_flags)) < 0) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#573: FILE: lib/vector.c:341:
+	BUG_ON(at < 0 || at > vec->len || nr < 0 ||

ERROR:TRAILING_WHITESPACE: trailing whitespace
#575: FILE: lib/vector.c:343:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#582: FILE: lib/vector.c:350:
+^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#595: FILE: lib/vector.c:363:
+	if (vec->ext) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#599: FILE: lib/vector.c:367:
+	} else

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#604: FILE: lib/vector.c:372:
+EXPORT_SYMBOL(vector_init);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#605: FILE: lib/vector.c:373:
+EXPORT_SYMBOL(vector_elem_slow);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#606: FILE: lib/vector.c:374:
+EXPORT_SYMBOL(vector_clear);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#607: FILE: lib/vector.c:375:
+EXPORT_SYMBOL(vector_expand);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#608: FILE: lib/vector.c:376:
+EXPORT_SYMBOL(vector_shrink);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#609: FILE: lib/vector.c:377:
+EXPORT_SYMBOL(vector_destroy);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000238460.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 46 warnings, 27 checks, 559 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000238460.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
