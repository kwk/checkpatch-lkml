ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#391: FILE: init/do_mounts.c:41:
+extern asmlinkage long sys_access(const char * filename, int mode);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#391: FILE: init/do_mounts.c:41:
+extern asmlinkage long sys_access(const char * filename, int mode);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#392: FILE: init/do_mounts.c:42:
+extern asmlinkage long sys_newstat(char * filename, struct stat * statbuf);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#392: FILE: init/do_mounts.c:42:
+extern asmlinkage long sys_newstat(char * filename, struct stat * statbuf);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#392: FILE: init/do_mounts.c:42:
+extern asmlinkage long sys_newstat(char * filename, struct stat * statbuf);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#393: FILE: init/do_mounts.c:43:
+extern asmlinkage long sys_getdents64(unsigned int fd, void * dirent,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#393: FILE: init/do_mounts.c:43:
+extern asmlinkage long sys_getdents64(unsigned int fd, void * dirent,

WARNING:LINE_SPACING: Missing a blank line after declarations
#407: FILE: init/do_mounts.c:329:
+	char *p = buf;
+	lseek(fd, 0, 0);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#409: FILE: init/do_mounts.c:331:
+	for (bytes = 0, p = buf; bytes < len; bytes += n, p+=n) {
 	                                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#428: FILE: init/do_mounts.c:350:
+	for (size = 1<<9; size < (1<<18); size <<= 1) {
 	             ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#428: FILE: init/do_mounts.c:350:
+	for (size = 1<<9; size < (1<<18); size <<= 1) {
 	                           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#431: FILE: init/do_mounts.c:353:
+		int n;
+		if (!p)

WARNING:LINE_SPACING: Missing a blank line after declarations
#469: FILE: init/do_mounts.c:391:
+		struct linux_dirent64 *d = (struct linux_dirent64 *)s;
+		if (strlen(d->d_name) + 2 > rest)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#471: FILE: init/do_mounts.c:393:
+		switch (d->d_type) {
+			case DT_BLK:
[...]
+			case DT_DIR:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#587: FILE: init/do_mounts.c:1053:
+	char device_set [MAX_MD_DEVS];

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#620: FILE: init/do_mounts.c:1086:
+		printk(KERN_WARNING "md: Too few arguments supplied to md=.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#624: FILE: init/do_mounts.c:1090:
+		printk(KERN_WARNING "md: md=%d, Minor device number too high.\n", minor);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#627: FILE: init/do_mounts.c:1093:
+		printk(KERN_WARNING "md: md=%d, Specified more than once. "

WARNING:SPLIT_STRING: quoted string split across lines
#628: FILE: init/do_mounts.c:1094:
+		printk(KERN_WARNING "md: md=%d, Specified more than once. "
+		       "Replacing previous definition.\n", minor);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#635: FILE: init/do_mounts.c:1101:
+				printk(KERN_WARNING "md: Too few arguments supplied to md=.\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#639: FILE: init/do_mounts.c:1105:
+			md_setup_args.chunk[minor] = 1 << (factor+12);
 			                                         ^

ERROR:SPACING: space required before the open parenthesis '('
#640: FILE: init/do_mounts.c:1106:
+			switch(level) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#650: FILE: init/do_mounts.c:1116:
+				printk(KERN_WARNING

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#658: FILE: init/do_mounts.c:1124:
+		/* FALL THROUGH */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#661: FILE: init/do_mounts.c:1127:
+		/* FALL THROUGH */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#664: FILE: init/do_mounts.c:1130:
+		pername="super-block";
 		       ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#667: FILE: init/do_mounts.c:1133:
+	printk(KERN_INFO "md: Will configure md%d (%s) from %s, below.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#668: FILE: init/do_mounts.c:1134:
+	printk(KERN_INFO "md: Will configure md%d (%s) from %s, below.\n",
+		minor, pername, str);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#673: FILE: init/do_mounts.c:1139:
+}
+static void __init md_setup_drive(void)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#677: FILE: init/do_mounts.c:1143:
+	dev_t devices[MD_SB_DISKS+1];
 	                         ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#686: FILE: init/do_mounts.c:1152:
+		if (!(devname = md_setup_args.device_names[minor]))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#688: FILE: init/do_mounts.c:1154:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#706: FILE: init/do_mounts.c:1172:
+			if (sys_newstat(comp_name, &buf) == 0 &&
+							S_ISBLK(buf.st_mode))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#709: FILE: init/do_mounts.c:1175:
+				printk(KERN_WARNING "md: Unknown device name: %s\n", devname);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#723: FILE: init/do_mounts.c:1189:
+		printk(KERN_INFO "md: Loading md%d: %s\n", minor, md_setup_args.device_names[minor]);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#723: FILE: init/do_mounts.c:1189:
+		printk(KERN_INFO "md: Loading md%d: %s\n", minor, md_setup_args.device_names[minor]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#727: FILE: init/do_mounts.c:1193:
+			printk(KERN_ERR "md: open failed - cannot start array %d\n", minor);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#731: FILE: init/do_mounts.c:1197:
+			printk(KERN_WARNING

WARNING:LINE_SPACING: Missing a blank line after declarations
#741: FILE: init/do_mounts.c:1207:
+			mdu_array_info_t ainfo;
+			ainfo.level = pers_to_level(md_setup_args.pers[minor]);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#743: FILE: init/do_mounts.c:1209:
+			ainfo.nr_disks =0;
 			               ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#744: FILE: init/do_mounts.c:1210:
+			ainfo.raid_disks =0;
 			                 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#747: FILE: init/do_mounts.c:1213:
+			ainfo.md_minor =minor;
 			               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#760: FILE: init/do_mounts.c:1226:
+				dinfo.state = (1<<MD_DISK_ACTIVE)|(1<<MD_DISK_SYNC);
 				                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#760: FILE: init/do_mounts.c:1226:
+				dinfo.state = (1<<MD_DISK_ACTIVE)|(1<<MD_DISK_SYNC);
 				                                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#760: FILE: init/do_mounts.c:1226:
+				dinfo.state = (1<<MD_DISK_ACTIVE)|(1<<MD_DISK_SYNC);
 				                                    ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#779: FILE: init/do_mounts.c:1245:
+			printk(KERN_WARNING "md: starting md%d failed\n", minor);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#792: FILE: init/do_mounts.c:1258:
+		char *comma = strchr(str+pos, ',');
 		                        ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#794: FILE: init/do_mounts.c:1260:
+		int wlen;
+		if (comma)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#795: FILE: init/do_mounts.c:1261:
+			wlen = (comma-str)-pos;
 			             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#795: FILE: init/do_mounts.c:1261:
+			wlen = (comma-str)-pos;
 			                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#796: FILE: init/do_mounts.c:1262:
+		else	wlen = (len-1)-pos;
 		    	           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#796: FILE: init/do_mounts.c:1262:
+		else	wlen = (len-1)-pos;
 		    	              ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#796: FILE: init/do_mounts.c:1262:
+		else	wlen = (len-1)-pos;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#800: FILE: init/do_mounts.c:1266:
+		pos += wlen+1;
 		           ^

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#806: FILE: init/do_mounts.c:1272:
+__setup("raid=", raid_setup);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#807: FILE: init/do_mounts.c:1273:
+__setup("md=", md_setup);

CHECK:BRACES: braces {} should be used on all arms of this statement
#814: FILE: init/do_mounts.c:1280:
+	if (raid_setup_args.noautodetect)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#815: FILE: init/do_mounts.c:1281:
+		printk(KERN_INFO "md: Skipping autodetection of RAID arrays. (raid=noautodetect)\n");

CHECK:BRACES: Unbalanced braces around else statement
#816: FILE: init/do_mounts.c:1282:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#818: FILE: init/do_mounts.c:1284:
+		int fd = open("/dev/md0", 0, 0);
+		if (fd >= 0) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000415010.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 25 warnings, 20 checks, 763 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000415010.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
