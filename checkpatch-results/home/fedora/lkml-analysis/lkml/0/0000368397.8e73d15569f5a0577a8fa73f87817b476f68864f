WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
diff -urNp --exclude TAGS -X /home/rusty/current-dontdiff --minimal linux-2.5.69-bk14/include/asm-generic/percpu.h working-2.5.69-bk14-module-percpu/include/asm-generic/percpu.h

WARNING:LINE_SPACING: Missing a blank line after declarations
#68: FILE: include/asm-generic/percpu.h:21:
+	unsigned int i;
+	for (i = 0; i < NR_CPUS; i++)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#68: FILE: include/asm-generic/percpu.h:21:
+	for (i = 0; i < NR_CPUS; i++)

WARNING:LINE_SPACING: Missing a blank line after declarations
#103: FILE: include/asm-ia64/percpu.h:34:
+	unsigned int i;
+	for (i = 0; i < NR_CPUS; i++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#103: FILE: include/asm-ia64/percpu.h:34:
+	for (i = 0; i < NR_CPUS; i++)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#184: FILE: kernel/module.c:434:
+		int *new = kmalloc(sizeof(new[0]) * pcpu_num_allocated*2,
 		                                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#189: FILE: kernel/module.c:439:
+		memcpy(new, pcpu_size, sizeof(new[0])*pcpu_num_allocated);
 		                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#196: FILE: kernel/module.c:446:
+	memmove(&pcpu_size[i+1], &pcpu_size[i],
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#200: FILE: kernel/module.c:450:
+	pcpu_size[i+1] -= size;
 	           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#221: FILE: kernel/module.c:471:
+	BUG_ON(align > SMP_CACHE_BYTES);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#227: FILE: kernel/module.c:477:
+		BUG_ON(i == 0 && extra != 0);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#233: FILE: kernel/module.c:483:
+		if (pcpu_size[i-1] < 0)
 		               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#234: FILE: kernel/module.c:484:
+			pcpu_size[i-1] -= extra;
 			           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#236: FILE: kernel/module.c:486:
+			pcpu_size[i-1] += extra;
 			           ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#250: FILE: kernel/module.c:500:
+	printk(KERN_WARNING "Could not allocate %lu bytes percpu data\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#267: FILE: kernel/module.c:517:
+	BUG();

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#271: FILE: kernel/module.c:521:
+	if (pcpu_size[i-1] >= 0) {
 	               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#272: FILE: kernel/module.c:522:
+		pcpu_size[i-1] += pcpu_size[i];
 		           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#274: FILE: kernel/module.c:524:
+		memmove(&pcpu_size[i], &pcpu_size[i+1],
 		                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#279: FILE: kernel/module.c:529:
+	if (i+1 < pcpu_num_used && pcpu_size[i+1] >= 0) {
 	     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#279: FILE: kernel/module.c:529:
+	if (i+1 < pcpu_num_used && pcpu_size[i+1] >= 0) {
 	                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#280: FILE: kernel/module.c:530:
+		pcpu_size[i] += pcpu_size[i+1];
 		                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#282: FILE: kernel/module.c:532:
+		memmove(&pcpu_size[i+1], &pcpu_size[i+2],
 		                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#282: FILE: kernel/module.c:532:
+		memmove(&pcpu_size[i+1], &pcpu_size[i+2],
 		                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#283: FILE: kernel/module.c:533:
+			(pcpu_num_used - (i+1)) * sizeof(pcpu_size[0]));
 			                   ^

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Ehdr>
#287: FILE: kernel/module.c:537:
+static unsigned int find_pcpusec(Elf_Ehdr *hdr,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#288: FILE: kernel/module.c:538:
+				 Elf_Shdr *sechdrs,

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#298: FILE: kernel/module.c:548:
+	pcpu_size = kmalloc(sizeof(pcpu_size[0]) * pcpu_num_allocated,
+			    GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#301: FILE: kernel/module.c:551:
+	pcpu_size[0] = -ALIGN(__per_cpu_end-__per_cpu_start, SMP_CACHE_BYTES);
 	                                   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#305: FILE: kernel/module.c:555:
+		printk(KERN_ERR "No per-cpu room for modules.\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#310: FILE: kernel/module.c:560:
+}^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#311: FILE: kernel/module.c:561:
+__initcall(percpu_modinit);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#320: FILE: kernel/module.c:573:
 }
+static inline void *percpu_modalloc(unsigned long size, unsigned long align)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#324: FILE: kernel/module.c:577:
+}
+static inline unsigned int find_pcpusec(Elf_Ehdr *hdr,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#330: FILE: kernel/module.c:583:
+}
+static inline void percpu_modcopy(void *pcpudst, const void *src,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#334: FILE: kernel/module.c:587:
+	BUG_ON(size != 0);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000368397.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 13 warnings, 22 checks, 374 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000368397.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
