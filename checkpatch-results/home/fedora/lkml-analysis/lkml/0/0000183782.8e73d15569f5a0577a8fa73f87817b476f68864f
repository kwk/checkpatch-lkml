CHECK:CAMELCASE: Avoid CamelCase: <pSeries_mpic>
#64: FILE: arch/ppc64/kernel/mpic.h:270:
+extern struct mpic *pSeries_mpic;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#70: FILE: arch/ppc64/kernel/pSeries_pci.c:2:
+ * arch/ppc64/kernel/pSeries_pci.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#83: FILE: arch/ppc64/kernel/pSeries_pci.c:21:
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:MISPLACED_INIT: __initdata should be placed after s7a_workaround
#513: FILE: arch/ppc64/kernel/pSeries_pci.c:35:
+static int __initdata s7a_workaround;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#586: FILE: arch/ppc64/kernel/rtas_pci.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#587: FILE: arch/ppc64/kernel/rtas_pci.c:2:
+ * arch/ppc64/kernel/rtas_pci.c

ERROR:TRAILING_WHITESPACE: trailing whitespace
#593: FILE: arch/ppc64/kernel/rtas_pci.c:8:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#600: FILE: arch/ppc64/kernel/rtas_pci.c:15:
+ *    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#605: FILE: arch/ppc64/kernel/rtas_pci.c:20:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#607: FILE: arch/ppc64/kernel/rtas_pci.c:22:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#608: FILE: arch/ppc64/kernel/rtas_pci.c:23:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#618: FILE: arch/ppc64/kernel/rtas_pci.c:33:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#619: FILE: arch/ppc64/kernel/rtas_pci.c:34:
+#include <asm/pgtable.h>

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#649: FILE: arch/ppc64/kernel/rtas_pci.c:64:
+	unsigned long buid, addr;
 	              ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#659: FILE: arch/ppc64/kernel/rtas_pci.c:74:
+	buid = dn->phb->buid;
 	^^^^

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#659: FILE: arch/ppc64/kernel/rtas_pci.c:74:
+	buid = dn->phb->buid;
 	                ^^^^

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#660: FILE: arch/ppc64/kernel/rtas_pci.c:75:
+	if (buid) {
 	    ^^^^

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#662: FILE: arch/ppc64/kernel/rtas_pci.c:77:
+				addr, buid >> 32, buid & 0xffffffff, size);
 				      ^^^^

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#662: FILE: arch/ppc64/kernel/rtas_pci.c:77:
+				addr, buid >> 32, buid & 0xffffffff, size);
 				                  ^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#672: FILE: arch/ppc64/kernel/rtas_pci.c:87:
+	if (returnval == EEH_IO_ERROR_VALUE(size)
+	    && eeh_dn_check_failure (dn, NULL))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#672: FILE: arch/ppc64/kernel/rtas_pci.c:87:
+	    && eeh_dn_check_failure (dn, NULL))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#698: FILE: arch/ppc64/kernel/rtas_pci.c:113:
+	unsigned long buid, addr;
 	              ^^^^

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#708: FILE: arch/ppc64/kernel/rtas_pci.c:123:
+	buid = dn->phb->buid;
 	^^^^

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#708: FILE: arch/ppc64/kernel/rtas_pci.c:123:
+	buid = dn->phb->buid;
 	                ^^^^

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#709: FILE: arch/ppc64/kernel/rtas_pci.c:124:
+	if (buid) {
 	    ^^^^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#709: FILE: arch/ppc64/kernel/rtas_pci.c:124:
+	if (buid) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#710: FILE: arch/ppc64/kernel/rtas_pci.c:125:
+		ret = rtas_call(ibm_write_pci_config, 5, 1, NULL, addr, buid >> 32, buid & 0xffffffff, size, (ulong) val);
 		                                                        ^^^^

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#710: FILE: arch/ppc64/kernel/rtas_pci.c:125:
+		ret = rtas_call(ibm_write_pci_config, 5, 1, NULL, addr, buid >> 32, buid & 0xffffffff, size, (ulong) val);
 		                                                                    ^^^^

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#710: FILE: arch/ppc64/kernel/rtas_pci.c:125:
+		ret = rtas_call(ibm_write_pci_config, 5, 1, NULL, addr, buid >> 32, buid & 0xffffffff, size, (ulong) val);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#710: FILE: arch/ppc64/kernel/rtas_pci.c:125:
+		ret = rtas_call(ibm_write_pci_config, 5, 1, NULL, addr, buid >> 32, buid & 0xffffffff, size, (ulong) val);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ui_ptr"
#762: FILE: arch/ppc64/kernel/rtas_pci.c:177:
+	if (ui_ptr == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#780: FILE: arch/ppc64/kernel/rtas_pci.c:195:
+	volatile u32 val;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#788: FILE: arch/ppc64/kernel/rtas_pci.c:203:
+^I/* $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#797: FILE: arch/ppc64/kernel/rtas_pci.c:212:
+		printk(KERN_INFO "Python workaround: ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#805: FILE: arch/ppc64/kernel/rtas_pci.c:220:
+		printk("reg0: %x\n", val);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#811: FILE: arch/ppc64/kernel/rtas_pci.c:226:
+void __init init_pci_config_tokens (void)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#819: FILE: arch/ppc64/kernel/rtas_pci.c:234:
+unsigned long __devinit get_phb_buid (struct device_node *phb)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#819: FILE: arch/ppc64/kernel/rtas_pci.c:234:
+unsigned long __devinit get_phb_buid (struct device_node *phb)

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#824: FILE: arch/ppc64/kernel/rtas_pci.c:239:
+	unsigned long buid;
 	              ^^^^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#826: FILE: arch/ppc64/kernel/rtas_pci.c:241:
+	if (ibm_read_pci_config == -1) return 0;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#829: FILE: arch/ppc64/kernel/rtas_pci.c:244:
+	 * or so it is promised by the current firmware. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!phb->parent"
#830: FILE: arch/ppc64/kernel/rtas_pci.c:245:
+	if (phb->parent == NULL)

CHECK:SPACING: No space is necessary after a cast
#835: FILE: arch/ppc64/kernel/rtas_pci.c:250:
+	buid_vals = (unsigned int *) get_property(phb, "reg", &len);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buid_vals"
#836: FILE: arch/ppc64/kernel/rtas_pci.c:251:
+	if (buid_vals == NULL)

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#841: FILE: arch/ppc64/kernel/rtas_pci.c:256:
+		buid = (unsigned long) buid_vals[0];
 		^^^^

CHECK:SPACING: No space is necessary after a cast
#841: FILE: arch/ppc64/kernel/rtas_pci.c:256:
+		buid = (unsigned long) buid_vals[0];

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#843: FILE: arch/ppc64/kernel/rtas_pci.c:258:
+		buid = (((unsigned long)buid_vals[0]) << 32UL) |
 		^^^^

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#846: FILE: arch/ppc64/kernel/rtas_pci.c:261:
+	return buid;
 	       ^^^^

CHECK:SPACING: No space is necessary after a cast
#855: FILE: arch/ppc64/kernel/rtas_pci.c:270:
+	bus_range = (int *) get_property(dev, "bus-range", &len);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#856: FILE: arch/ppc64/kernel/rtas_pci.c:271:
+	if (bus_range == NULL || len < 2 * sizeof(int)) {
+		return 1;
+ 	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bus_range"
#856: FILE: arch/ppc64/kernel/rtas_pci.c:271:
+	if (bus_range == NULL || len < 2 * sizeof(int)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#858: FILE: arch/ppc64/kernel/rtas_pci.c:273:
+ ^I}$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#858: FILE: arch/ppc64/kernel/rtas_pci.c:273:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#858: FILE: arch/ppc64/kernel/rtas_pci.c:273:
+ ^I}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#859: FILE: arch/ppc64/kernel/rtas_pci.c:274:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#859: FILE: arch/ppc64/kernel/rtas_pci.c:274:
+ $

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#866: FILE: arch/ppc64/kernel/rtas_pci.c:281:
+static int __devinit setup_phb(struct device_node *dev,

WARNING:TYPO_SPELLING: 'buid' may be misspelled - perhaps 'build'?
#880: FILE: arch/ppc64/kernel/rtas_pci.c:295:
+	phb->buid = get_phb_buid(dev);
 	     ^^^^

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#885: FILE: arch/ppc64/kernel/rtas_pci.c:300:
+static void __devinit add_linux_pci_domain(struct device_node *dev,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!phb"
#904: FILE: arch/ppc64/kernel/rtas_pci.c:319:
+	if (phb == NULL)

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#920: FILE: arch/ppc64/kernel/rtas_pci.c:335:
+static struct pci_controller * __devinit alloc_phb_dynamic(struct device_node *dev, unsigned int addr_size_words)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#920: FILE: arch/ppc64/kernel/rtas_pci.c:335:
+static struct pci_controller * __devinit alloc_phb_dynamic(struct device_node *dev, unsigned int addr_size_words)

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#924: FILE: arch/ppc64/kernel/rtas_pci.c:339:
+	phb = (struct pci_controller *)kmalloc(sizeof(struct pci_controller),

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*phb)...) over kmalloc(sizeof(struct pci_controller)...)
#924: FILE: arch/ppc64/kernel/rtas_pci.c:339:
+	phb = (struct pci_controller *)kmalloc(sizeof(struct pci_controller),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!phb"
#926: FILE: arch/ppc64/kernel/rtas_pci.c:341:
+	if (phb == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#936: FILE: arch/ppc64/kernel/rtas_pci.c:351:
+ ^Ireturn phb;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#936: FILE: arch/ppc64/kernel/rtas_pci.c:351:
+ ^Ireturn phb;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#936: FILE: arch/ppc64/kernel/rtas_pci.c:351:
+ ^Ireturn phb;$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node"
#958: FILE: arch/ppc64/kernel/rtas_pci.c:373:
+	     node != NULL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node->type"
#960: FILE: arch/ppc64/kernel/rtas_pci.c:375:
+		if (node->type == NULL || strcmp(node->type, "pci") != 0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#972: FILE: arch/ppc64/kernel/rtas_pci.c:387:
+			int addr = root_size_cells * (index + 2) - 1;
+			mpic_assign_isu(pSeries_mpic, index, opprop[addr]);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1002: FILE: arch/ppc64/kernel/rtas_pci.c:417:
+struct pci_controller * __devinit init_phb_dynamic(struct device_node *dn)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1041: FILE: arch/ppc64/kernel/rtas_pci.c:456:
+		printk(KERN_ERR "%s: no IO resource for PHB %s\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1041: FILE: arch/ppc64/kernel/rtas_pci.c:456:
+		printk(KERN_ERR "%s: no IO resource for PHB %s\n", __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1042: FILE: arch/ppc64/kernel/rtas_pci.c:457:
+		printk(KERN_ERR "%s: no IO resource for PHB %s\n", __FUNCTION__,
+				b->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1048: FILE: arch/ppc64/kernel/rtas_pci.c:463:
+		printk(KERN_ERR "%s: failed to unmap IO on bus %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1049: FILE: arch/ppc64/kernel/rtas_pci.c:464:
+		printk(KERN_ERR "%s: failed to unmap IO on bus %s\n",
+			__FUNCTION__, b->name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1049: FILE: arch/ppc64/kernel/rtas_pci.c:464:
+			__FUNCTION__, b->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1054: FILE: arch/ppc64/kernel/rtas_pci.c:469:
+		printk(KERN_ERR "%s: failed to release IO on bus %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1055: FILE: arch/ppc64/kernel/rtas_pci.c:470:
+		printk(KERN_ERR "%s: failed to release IO on bus %s\n",
+				__FUNCTION__, b->name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1055: FILE: arch/ppc64/kernel/rtas_pci.c:470:
+				__FUNCTION__, b->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1062: FILE: arch/ppc64/kernel/rtas_pci.c:477:
+			printk(KERN_ERR "%s: no MEM resource for PHB %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1063: FILE: arch/ppc64/kernel/rtas_pci.c:478:
+			printk(KERN_ERR "%s: no MEM resource for PHB %s\n",
+				__FUNCTION__, b->name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1063: FILE: arch/ppc64/kernel/rtas_pci.c:478:
+				__FUNCTION__, b->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1067: FILE: arch/ppc64/kernel/rtas_pci.c:482:
+			printk(KERN_ERR

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1069: FILE: arch/ppc64/kernel/rtas_pci.c:484:
+				__FUNCTION__, i, b->name);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000183782.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 54 warnings, 21 checks, 1028 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000183782.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
