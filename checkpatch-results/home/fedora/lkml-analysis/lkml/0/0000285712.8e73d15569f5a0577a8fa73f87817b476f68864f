CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#81: FILE: fs/hugetlbfs/inode.c:276:
+	while ((vma = vma_prio_tree_next(vma, root, &iter,
+					h_pgoff, ULONG_MAX)) != NULL) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#241: FILE: include/linux/mm.h:577:
+struct vm_area_struct *vma_prio_tree_next(

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#251: FILE: include/linux/prio_tree.h:1:
+#ifndef _LINUX_PRIO_TREE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#254: FILE: include/linux/prio_tree.h:4:
+ * Dummy version of include/linux/prio_tree.h, just for this patch:

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#267: FILE: include/linux/prio_tree.h:17:
+#define INIT_PRIO_TREE_ROOT(ptr)	\
+do {					\
+	INIT_LIST_HEAD(&(ptr)->list);	\
+} while (0)				\
+

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#320: FILE: mm/memory.c:1129:
+	while ((vma = vma_prio_tree_next(vma, root, &iter,
+			details->first_index, details->last_index)) != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#343: FILE: mm/memory.c:1154:
+	while ((vma = vma_prio_tree_next(vma, root, &iter,
+						0, ULONG_MAX)) != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: mm/memory.c:1159:
+		zap_page_range(vma, vma->vm_start,
+				vma->vm_end - vma->vm_start, details);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#385: FILE: mm/mmap.c:68:
+static inline void __remove_shared_vm_struct(struct vm_area_struct *vma,
+		struct file *file, struct address_space *mapping)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#435: FILE: mm/mmap.c:328:
+struct vm_area_struct *vma_prio_tree_next(

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#442: FILE: mm/mmap.c:335:
+	next = vma? vma->shared.next: root->list.next;
 	          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#442: FILE: mm/mmap.c:335:
+	next = vma? vma->shared.next: root->list.next;
 	                            ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#541: FILE: mm/rmap.c:162:
+	BUG_ON(address < vma->vm_start || address >= vma->vm_end);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#565: FILE: mm/rmap.c:319:
+	while ((vma = vma_prio_tree_next(vma, &mapping->i_mmap,
+					&iter, pgoff, pgoff)) != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#582: FILE: mm/rmap.c:335:
+	while ((vma = vma_prio_tree_next(vma, &mapping->i_mmap_shared,
+					&iter, pgoff, pgoff)) != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#623: FILE: mm/rmap.c:731:
+	while ((vma = vma_prio_tree_next(vma, &mapping->i_mmap,
+					&iter, pgoff, pgoff)) != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#651: FILE: mm/rmap.c:742:
+	while ((vma = vma_prio_tree_next(vma, &mapping->i_mmap_shared,
+					&iter, pgoff, pgoff)) != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#668: FILE: mm/rmap.c:755:
+	while ((vma = vma_prio_tree_next(vma, &mapping->i_mmap_shared,
+					&iter, 0, ULONG_MAX)) != NULL) {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#670: FILE: mm/rmap.c:757:
+		     (VM_NONLINEAR|VM_LOCKED|VM_RESERVED)))
 		                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#670: FILE: mm/rmap.c:757:
+		     (VM_NONLINEAR|VM_LOCKED|VM_RESERVED)))
 		                            ^

CHECK:SPACING: No space is necessary after a cast
#672: FILE: mm/rmap.c:759:
+		cursor = (unsigned long) vma->vm_private_data;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#690: FILE: mm/rmap.c:786:
+		while ((vma = vma_prio_tree_next(vma, &mapping->i_mmap_shared,
+					&iter, 0, ULONG_MAX)) != NULL) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#693: FILE: mm/rmap.c:788:
+^I^I    ^I     (VM_NONLINEAR|VM_LOCKED|VM_RESERVED)))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#693: FILE: mm/rmap.c:788:
+^I^I    ^I     (VM_NONLINEAR|VM_LOCKED|VM_RESERVED)))$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#693: FILE: mm/rmap.c:788:
+		    	     (VM_NONLINEAR|VM_LOCKED|VM_RESERVED)))
 		    	                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#693: FILE: mm/rmap.c:788:
+		    	     (VM_NONLINEAR|VM_LOCKED|VM_RESERVED)))
 		    	                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#704: FILE: mm/rmap.c:819:
+	while ((vma = vma_prio_tree_next(vma, &mapping->i_mmap_shared,
+					&iter, 0, ULONG_MAX)) != NULL) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000285712.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 5 warnings, 19 checks, 590 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000285712.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
