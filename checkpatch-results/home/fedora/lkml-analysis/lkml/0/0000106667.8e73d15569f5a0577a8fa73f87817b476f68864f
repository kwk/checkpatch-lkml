CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*save_state)...) over kzalloc(sizeof(struct pci_cap_saved_state)...)
#63: FILE: drivers/pci/msi.c:522:
+	save_state = kzalloc(sizeof(struct pci_cap_saved_state) + sizeof(u32) * 5,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#64: FILE: drivers/pci/msi.c:523:
+	save_state = kzalloc(sizeof(struct pci_cap_saved_state) + sizeof(u32) * 5,
+		GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#66: FILE: drivers/pci/msi.c:525:
+		printk(KERN_ERR "Out of memory in pci_save_msi_state\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pci_save_msi_state', this function's name, in a string
#66: FILE: drivers/pci/msi.c:525:
+		printk(KERN_ERR "Out of memory in pci_save_msi_state\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#66: FILE: drivers/pci/msi.c:525:
+	if (!save_state) {
+		printk(KERN_ERR "Out of memory in pci_save_msi_state\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#74: FILE: drivers/pci/msi.c:533:
+	if (control & PCI_MSI_FLAGS_64BIT) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#77: FILE: drivers/pci/msi.c:536:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#102: FILE: drivers/pci/msi.c:561:
+	if (control & PCI_MSI_FLAGS_64BIT) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#105: FILE: drivers/pci/msi.c:564:
+	} else

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*save_state)...) over kzalloc(sizeof(struct pci_cap_saved_state)...)
#128: FILE: drivers/pci/msi.c:587:
+	save_state = kzalloc(sizeof(struct pci_cap_saved_state) + sizeof(u16),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#129: FILE: drivers/pci/msi.c:588:
+	save_state = kzalloc(sizeof(struct pci_cap_saved_state) + sizeof(u16),
+		GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#131: FILE: drivers/pci/msi.c:590:
+		printk(KERN_ERR "Out of memory in pci_save_msix_state\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pci_save_msix_state', this function's name, in a string
#131: FILE: drivers/pci/msi.c:590:
+		printk(KERN_ERR "Out of memory in pci_save_msix_state\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#131: FILE: drivers/pci/msi.c:590:
+	if (!save_state) {
+		printk(KERN_ERR "Out of memory in pci_save_msix_state\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#170: FILE: drivers/pci/msi.c:629:
+	vector = head = dev->irq;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#184: FILE: drivers/pci/msi.c:643:
+		writel(address.lo_address.value,
+			base + j * PCI_MSIX_ENTRY_SIZE +

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#187: FILE: drivers/pci/msi.c:646:
+		writel(address.hi_address,
+			base + j * PCI_MSIX_ENTRY_SIZE +

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#189: FILE: drivers/pci/msi.c:648:
+		writel(*(u32*)&data,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#190: FILE: drivers/pci/msi.c:649:
+		writel(*(u32*)&data,
+			base + j * PCI_MSIX_ENTRY_SIZE +

ERROR:CODE_INDENT: code indent should use tabs where possible
#210: FILE: drivers/pci/msi.c:669:
+   ^Ipos = pci_find_capability(dev, PCI_CAP_ID_MSI);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#210: FILE: drivers/pci/msi.c:669:
+   ^Ipos = pci_find_capability(dev, PCI_CAP_ID_MSI);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: drivers/pci/msi.c:669:
+   ^Ipos = pci_find_capability(dev, PCI_CAP_ID_MSI);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#218: FILE: drivers/pci/msi.c:677:
+	pci_write_config_dword(dev, msi_lower_address_reg(pos),
+			address.lo_address.value);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#221: FILE: drivers/pci/msi.c:680:
+		pci_write_config_dword(dev,
+			msi_upper_address_reg(pos), address.hi_address);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#223: FILE: drivers/pci/msi.c:682:
+		pci_write_config_word(dev,
+			msi_data_reg(pos, 1), *((u32*)&data));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#223: FILE: drivers/pci/msi.c:682:
+			msi_data_reg(pos, 1), *((u32*)&data));

CHECK:BRACES: Unbalanced braces around else statement
#224: FILE: drivers/pci/msi.c:683:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#226: FILE: drivers/pci/msi.c:685:
+		pci_write_config_word(dev,
+			msi_data_reg(pos, 0), *((u32*)&data));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#226: FILE: drivers/pci/msi.c:685:
+			msi_data_reg(pos, 0), *((u32*)&data));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#231: FILE: drivers/pci/msi.c:690:
+		pci_read_config_dword(dev,
+			msi_mask_bits_reg(pos, is_64bit_address(control)),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#237: FILE: drivers/pci/msi.c:696:
+		pci_write_config_dword(dev,
+			msi_mask_bits_reg(pos, is_64bit_address(control)),

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#305: FILE: drivers/pci/pci.c:446:
+	if ((i = pci_save_msi_state(dev)) != 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#307: FILE: drivers/pci/pci.c:448:
+	if ((i = pci_save_msix_state(dev)) != 0)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#370: FILE: include/linux/pci.h:174:
+static inline struct pci_cap_saved_state *pci_find_saved_cap(

ERROR:SPACING: space required after that ',' (ctx:VxV)
#371: FILE: include/linux/pci.h:175:
+	struct pci_dev *pci_dev,char cap)
 	                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#384: FILE: include/linux/pci.h:188:
+static inline void pci_add_saved_cap(struct pci_dev *pci_dev,
+	struct pci_cap_saved_state *new_cap)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000106667.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 8 warnings, 21 checks, 335 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000106667.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
