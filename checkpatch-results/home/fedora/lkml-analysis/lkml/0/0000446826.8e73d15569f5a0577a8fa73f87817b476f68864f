WARNING:TYPO_SPELLING: 'writen' may be misspelled - perhaps 'written'?
#24: 
This is the "minimal rmap" patch, writen by Rik, ported to 2.5 by Craig
                                  ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#178: FILE: include/asm-alpha/rmap.h:1:
+#ifndef _ALPHA_RMAP_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#188: FILE: include/asm-arm/proc-armv/rmap.h:1:
+#ifndef _ARMV_RMAP_H

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#191: FILE: include/asm-arm/proc-armv/rmap.h:4:
+ * linux/include/asm-arm/proc-armv/rmap.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#193: FILE: include/asm-arm/proc-armv/rmap.h:6:
+ * Architecture dependant parts of the reverse mapping code,
                 ^^^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#201: FILE: include/asm-arm/proc-armv/rmap.h:14:
+static inline void pgtable_add_rmap(pte_t * ptep, struct mm_struct * mm, unsigned long address)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#201: FILE: include/asm-arm/proc-armv/rmap.h:14:
+static inline void pgtable_add_rmap(pte_t * ptep, struct mm_struct * mm, unsigned long address)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#203: FILE: include/asm-arm/proc-armv/rmap.h:16:
+	struct page * page = virt_to_page(ptep);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#209: FILE: include/asm-arm/proc-armv/rmap.h:22:
+static inline void pgtable_remove_rmap(pte_t * ptep)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#211: FILE: include/asm-arm/proc-armv/rmap.h:24:
+	struct page * page = virt_to_page(ptep);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#217: FILE: include/asm-arm/proc-armv/rmap.h:30:
+static inline struct mm_struct * ptep_to_mm(pte_t * ptep)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#217: FILE: include/asm-arm/proc-armv/rmap.h:30:
+static inline struct mm_struct * ptep_to_mm(pte_t * ptep)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#219: FILE: include/asm-arm/proc-armv/rmap.h:32:
+	struct page * page = virt_to_page(ptep);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#227: FILE: include/asm-arm/proc-armv/rmap.h:40:
+static inline unsigned long ptep_to_address(pte_t * ptep)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#229: FILE: include/asm-arm/proc-armv/rmap.h:42:
+	struct page * page = virt_to_page(ptep);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#240: FILE: include/asm-arm/rmap.h:1:
+#ifndef _ARM_RMAP_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#249: FILE: include/asm-cris/rmap.h:1:
+#ifndef _CRIS_RMAP_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#259: FILE: include/asm-generic/rmap.h:1:
+#ifndef _GENERIC_RMAP_H

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#262: FILE: include/asm-generic/rmap.h:4:
+ * linux/include/asm-generic/rmap.h

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#264: FILE: include/asm-generic/rmap.h:6:
+ * Architecture dependant parts of the reverse mapping code,
                 ^^^^^^^^^

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#277: FILE: include/asm-generic/rmap.h:19:
+static inline void pgtable_add_rmap(struct page * page, struct mm_struct * mm, unsigned long address)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#277: FILE: include/asm-generic/rmap.h:19:
+static inline void pgtable_add_rmap(struct page * page, struct mm_struct * mm, unsigned long address)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#277: FILE: include/asm-generic/rmap.h:19:
+static inline void pgtable_add_rmap(struct page * page, struct mm_struct * mm, unsigned long address)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#290: FILE: include/asm-generic/rmap.h:32:
+static inline void pgtable_remove_rmap(struct page * page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#296: FILE: include/asm-generic/rmap.h:38:
+static inline struct mm_struct * ptep_to_mm(pte_t * ptep)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#296: FILE: include/asm-generic/rmap.h:38:
+static inline struct mm_struct * ptep_to_mm(pte_t * ptep)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#298: FILE: include/asm-generic/rmap.h:40:
+	struct page * page = virt_to_page(ptep);

CHECK:SPACING: No space is necessary after a cast
#299: FILE: include/asm-generic/rmap.h:41:
+	return (struct mm_struct *) page->mapping;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#299: FILE: include/asm-generic/rmap.h:41:
+	struct page * page = virt_to_page(ptep);
+	return (struct mm_struct *) page->mapping;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#302: FILE: include/asm-generic/rmap.h:44:
+static inline unsigned long ptep_to_address(pte_t * ptep)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#304: FILE: include/asm-generic/rmap.h:46:
+	struct page * page = virt_to_page(ptep);

WARNING:LINE_SPACING: Missing a blank line after declarations
#306: FILE: include/asm-generic/rmap.h:48:
+	unsigned long low_bits;
+	low_bits = ((unsigned long)ptep & ~PAGE_MASK) * PTRS_PER_PTE;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#314: FILE: include/asm-i386/rmap.h:1:
+#ifndef _I386_RMAP_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#324: FILE: include/asm-ia64/rmap.h:1:
+#ifndef _IA64_RMAP_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#334: FILE: include/asm-m68k/rmap.h:1:
+#ifndef _M68K_RMAP_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#344: FILE: include/asm-mips64/rmap.h:1:
+#ifndef _MIPS64_RMAP_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#354: FILE: include/asm-mips/rmap.h:1:
+#ifndef _MIPS_RMAP_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#364: FILE: include/asm-parisc/rmap.h:1:
+#ifndef _PARISC_RMAP_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#374: FILE: include/asm-ppc/rmap.h:1:
+#ifndef _PPC_RMAP_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#386: FILE: include/asm-s390/rmap.h:1:
+#ifndef _S390_RMAP_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#396: FILE: include/asm-s390x/rmap.h:1:
+#ifndef _S390X_RMAP_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#406: FILE: include/asm-sh/rmap.h:1:
+#ifndef _SH_RMAP_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#416: FILE: include/asm-sparc64/rmap.h:1:
+#ifndef _SPARC64_RMAP_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#426: FILE: include/asm-sparc/rmap.h:1:
+#ifndef _SPARC_RMAP_H

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#449: FILE: include/linux/mm.h:160:
+	struct pte_chain * pte_chain;	/* Reverse pte mapping pointer.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#450: FILE: include/linux/mm.h:161:
+					 * protected by PG_chainlock */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#461: FILE: include/linux/page-flags.h:50:
+#define PG_locked^I ^I 0^I/* Page is locked. Don't touch. */$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#512: FILE: include/linux/swap.h:146:
+extern int FASTCALL(page_referenced(struct page *));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#512: FILE: include/linux/swap.h:146:
+extern int FASTCALL(page_referenced(struct page *));

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#513: FILE: include/linux/swap.h:147:
+extern void FASTCALL(page_add_rmap(struct page *, pte_t *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#513: FILE: include/linux/swap.h:147:
+extern void FASTCALL(page_add_rmap(struct page *, pte_t *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pte_t *' should also have an identifier name
#513: FILE: include/linux/swap.h:147:
+extern void FASTCALL(page_add_rmap(struct page *, pte_t *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#514: FILE: include/linux/swap.h:148:
+extern void FASTCALL(page_remove_rmap(struct page *, pte_t *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#514: FILE: include/linux/swap.h:148:
+extern void FASTCALL(page_remove_rmap(struct page *, pte_t *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pte_t *' should also have an identifier name
#514: FILE: include/linux/swap.h:148:
+extern void FASTCALL(page_remove_rmap(struct page *, pte_t *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#515: FILE: include/linux/swap.h:149:
+extern int FASTCALL(try_to_unmap(struct page *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#515: FILE: include/linux/swap.h:149:
+extern int FASTCALL(try_to_unmap(struct page *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#516: FILE: include/linux/swap.h:150:
+extern int FASTCALL(page_over_rsslimit(struct page *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#516: FILE: include/linux/swap.h:150:
+extern int FASTCALL(page_over_rsslimit(struct page *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#531: FILE: include/linux/swap.h:184:
+extern int add_to_swap(struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#531: FILE: include/linux/swap.h:184:
+extern int add_to_swap(struct page *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#704: FILE: mm/memory.c:1230:
+	struct page * page = ZERO_PAGE(addr);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#738: FILE: mm/mremap.c:71:
+	struct page * page = NULL;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#764: FILE: mm/page_alloc.c:95:
+	BUG_ON(page->pte_chain != NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page->pte_chain"
#764: FILE: mm/page_alloc.c:95:
+	BUG_ON(page->pte_chain != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#771: FILE: mm/rmap.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#772: FILE: mm/rmap.c:2:
+ * mm/rmap.c - physical to virtual reverse mappings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#819: FILE: mm/rmap.c:49:
+	struct pte_chain * next;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#820: FILE: mm/rmap.c:50:
+	pte_t * ptep;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#823: FILE: mm/rmap.c:53:
+static inline struct pte_chain * pte_chain_alloc(void);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#825: FILE: mm/rmap.c:55:
+static inline void pte_chain_free(struct pte_chain *, struct pte_chain *,
+		struct page *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#836: FILE: mm/rmap.c:66:
+int page_referenced(struct page * page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#838: FILE: mm/rmap.c:68:
+	struct pte_chain * pc;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#860: FILE: mm/rmap.c:90:
+void page_add_rmap(struct page * page, pte_t * ptep)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#860: FILE: mm/rmap.c:90:
+void page_add_rmap(struct page * page, pte_t * ptep)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#862: FILE: mm/rmap.c:92:
+	struct pte_chain * pte_chain;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#867: FILE: mm/rmap.c:97:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#869: FILE: mm/rmap.c:99:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#871: FILE: mm/rmap.c:101:
+		BUG();

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#880: FILE: mm/rmap.c:110:
+		struct pte_chain * pc;

WARNING:LINE_SPACING: Missing a blank line after declarations
#881: FILE: mm/rmap.c:111:
+		struct pte_chain * pc;
+		for (pc = page->pte_chain; pc; pc = pc->next) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#883: FILE: mm/rmap.c:113:
+				BUG();

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#911: FILE: mm/rmap.c:141:
+void page_remove_rmap(struct page * page, pte_t * ptep)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#911: FILE: mm/rmap.c:141:
+void page_remove_rmap(struct page * page, pte_t * ptep)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#913: FILE: mm/rmap.c:143:
+	struct pte_chain * pc, * prev_pc = NULL;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#913: FILE: mm/rmap.c:143:
+	struct pte_chain * pc, * prev_pc = NULL;
 	                       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#917: FILE: mm/rmap.c:147:
+		BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#930: FILE: mm/rmap.c:160:
+	printk(KERN_ERR "page_remove_rmap: pte_chain %p not present.\n", ptep);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'page_remove_rmap', this function's name, in a string
#930: FILE: mm/rmap.c:160:
+	printk(KERN_ERR "page_remove_rmap: pte_chain %p not present.\n", ptep);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#931: FILE: mm/rmap.c:161:
+	printk(KERN_ERR "page_remove_rmap: only found: ");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'page_remove_rmap', this function's name, in a string
#931: FILE: mm/rmap.c:161:
+	printk(KERN_ERR "page_remove_rmap: only found: ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#933: FILE: mm/rmap.c:163:
+		printk("%p ", pc->ptep);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#934: FILE: mm/rmap.c:164:
+	printk("\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#935: FILE: mm/rmap.c:165:
+	printk(KERN_ERR "page_remove_rmap: driver cleared PG_reserved ?\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'page_remove_rmap', this function's name, in a string
#935: FILE: mm/rmap.c:165:
+	printk(KERN_ERR "page_remove_rmap: driver cleared PG_reserved ?\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#941: FILE: mm/rmap.c:171:
+^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#942: FILE: mm/rmap.c:172:
+			
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#959: FILE: mm/rmap.c:189:
+static int try_to_unmap_one(struct page * page, pte_t * ptep)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#959: FILE: mm/rmap.c:189:
+static int try_to_unmap_one(struct page * page, pte_t * ptep)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#962: FILE: mm/rmap.c:192:
+	struct mm_struct * mm = ptep_to_mm(ptep);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#963: FILE: mm/rmap.c:193:
+	struct vm_area_struct * vma;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#968: FILE: mm/rmap.c:198:
+		BUG();

WARNING:LINE_SPACING: Missing a blank line after declarations
#998: FILE: mm/rmap.c:228:
+		swp_entry_t entry;
+		entry.val = page->index;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1029: FILE: mm/rmap.c:259:
+int try_to_unmap(struct page * page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1031: FILE: mm/rmap.c:261:
+	struct pte_chain * pc, * next_pc, * prev_pc = NULL;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#1031: FILE: mm/rmap.c:261:
+	struct pte_chain * pc, * next_pc, * prev_pc = NULL;
 	                       ^

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#1031: FILE: mm/rmap.c:261:
+	struct pte_chain * pc, * next_pc, * prev_pc = NULL;
 	                                  ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1036: FILE: mm/rmap.c:266:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1038: FILE: mm/rmap.c:268:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1041: FILE: mm/rmap.c:271:
+		BUG();

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1045: FILE: mm/rmap.c:275:
+		switch (try_to_unmap_one(page, pc->ptep)) {
+			case SWAP_SUCCESS:
[...]
+			case SWAP_AGAIN:
[...]
+			case SWAP_FAIL:
[...]
+			case SWAP_ERROR:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1070: FILE: mm/rmap.c:300:
+struct pte_chain * pte_chain_freelist;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1074: FILE: mm/rmap.c:304:
+static inline void pte_chain_push(struct pte_chain * pte_chain)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1081: FILE: mm/rmap.c:311:
+static inline struct pte_chain * pte_chain_pop(void)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1103: FILE: mm/rmap.c:333:
+static inline void pte_chain_free(struct pte_chain * pte_chain,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1104: FILE: mm/rmap.c:334:
+static inline void pte_chain_free(struct pte_chain * pte_chain,
+		struct pte_chain * prev_pte_chain, struct page * page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1104: FILE: mm/rmap.c:334:
+		struct pte_chain * prev_pte_chain, struct page * page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1104: FILE: mm/rmap.c:334:
+		struct pte_chain * prev_pte_chain, struct page * page)

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - struct pte_chain * pte_chain_alloc() should probably be struct pte_chain * pte_chain_alloc(void)
#1123: FILE: mm/rmap.c:353:
+static inline struct pte_chain * pte_chain_alloc()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1123: FILE: mm/rmap.c:353:
+static inline struct pte_chain * pte_chain_alloc()

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1125: FILE: mm/rmap.c:355:
+	struct pte_chain * pte_chain;

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void alloc_new_pte_chains() should probably be void alloc_new_pte_chains(void)
#1152: FILE: mm/rmap.c:382:
+static void alloc_new_pte_chains()

CHECK:SPACING: No space is necessary after a cast
#1154: FILE: mm/rmap.c:384:
+	struct pte_chain * pte_chain = (void *) get_zeroed_page(GFP_ATOMIC);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1154: FILE: mm/rmap.c:384:
+	struct pte_chain * pte_chain = (void *) get_zeroed_page(GFP_ATOMIC);

WARNING:REPEATED_WORD: Possible repeated word: 'Yeah'
#1161: FILE: mm/rmap.c:391:
+		/* Yeah yeah, I'll fix the pte_chain allocation ... */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1186: FILE: mm/swap_state.c:113:
+ * swap cache.  Caller needs to hold the page lock. $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1188: FILE: mm/swap_state.c:115:
+int add_to_swap(struct page * page)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1194: FILE: mm/swap_state.c:121:
+		BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1202: FILE: mm/swap_state.c:129:
+^I^I * GFP_ATOMIC allocations under PF_MEMALLOC.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1203: FILE: mm/swap_state.c:130:
+^I^I * They can completely exhaust the page allocator.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1205: FILE: mm/swap_state.c:132:
+^I^I * So PF_MEMALLOC is dropped here.  This causes the slab $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1206: FILE: mm/swap_state.c:133:
+^I^I * allocations to fail earlier, so radix-tree nodes will $

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1222: FILE: mm/swap_state.c:149:
+		 * and uptodate bits, so we need to do it again)
 		       ^^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1294: FILE: mm/vmscan.c:46:
+static inline int page_mapping_inuse(struct page * page)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1672: FILE: mm/vmscan.c:175:
+			switch (try_to_unmap(page)) {
+				case SWAP_ERROR:
+				case SWAP_FAIL:
[...]
+				case SWAP_AGAIN:
[...]
+				case SWAP_SUCCESS:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1749: FILE: mm/vmscan.c:335:
+ * We move them the other way if the page is $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000446826.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 64 errors, 60 warnings, 12 checks, 1496 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000446826.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
