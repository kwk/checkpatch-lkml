WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
> seemingly random memory contents. it's printing past the end of the buffer.

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#201: FILE: fs/proc/proc_misc.c:292:
+extern struct seq_operations slabinfo_op;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#202: FILE: fs/proc/proc_misc.c:293:
+extern ssize_t slabinfo_write(struct file *, const char *, size_t, loff_t *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#202: FILE: fs/proc/proc_misc.c:293:
+extern ssize_t slabinfo_write(struct file *, const char *, size_t, loff_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#202: FILE: fs/proc/proc_misc.c:293:
+extern ssize_t slabinfo_write(struct file *, const char *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#202: FILE: fs/proc/proc_misc.c:293:
+extern ssize_t slabinfo_write(struct file *, const char *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#202: FILE: fs/proc/proc_misc.c:293:
+extern ssize_t slabinfo_write(struct file *, const char *, size_t, loff_t *);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#207: FILE: fs/proc/proc_misc.c:298:
+}
+static struct file_operations proc_slabinfo_operations = {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#207: FILE: fs/proc/proc_misc.c:298:
+static struct file_operations proc_slabinfo_operations = {

WARNING:INDENTED_LABEL: labels should not be indented
#208: FILE: fs/proc/proc_misc.c:299:
+	open:		slabinfo_open,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#209: FILE: fs/proc/proc_misc.c:300:
+	read:		seq_read,
 	    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#209: FILE: fs/proc/proc_misc.c:300:
+	read:		seq_read,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#210: FILE: fs/proc/proc_misc.c:301:
+	write:		slabinfo_write,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#210: FILE: fs/proc/proc_misc.c:301:
+	write:		slabinfo_write,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#211: FILE: fs/proc/proc_misc.c:302:
+	llseek:		seq_lseek,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#211: FILE: fs/proc/proc_misc.c:302:
+	llseek:		seq_lseek,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#212: FILE: fs/proc/proc_misc.c:303:
+	release:	seq_release,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#212: FILE: fs/proc/proc_misc.c:303:
+	release:	seq_release,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#222: FILE: fs/proc/proc_misc.c:606:
+	create_seq_entry("slabinfo",S_IWUSR|S_IRUGO,&proc_slabinfo_operations);
 	                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#222: FILE: fs/proc/proc_misc.c:606:
+	create_seq_entry("slabinfo",S_IWUSR|S_IRUGO,&proc_slabinfo_operations);
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#222: FILE: fs/proc/proc_misc.c:606:
+	create_seq_entry("slabinfo",S_IWUSR|S_IRUGO,&proc_slabinfo_operations);
 	                                           ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#222: FILE: fs/proc/proc_misc.c:606:
+	create_seq_entry("slabinfo",S_IWUSR|S_IRUGO,&proc_slabinfo_operations);
 	                                            ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#222: FILE: fs/proc/proc_misc.c:606:
+	create_seq_entry("slabinfo",S_IWUSR|S_IRUGO,&proc_slabinfo_operations);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#328: FILE: mm/slab.c:1896:
+^Iconst char *name; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#330: FILE: mm/slab.c:1898:
+	if (p == (void*)1) {

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#387: FILE: mm/slab.c:1917:
+	list_for_each(q,&cachep->slabs_full) {
 	               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#387: FILE: mm/slab.c:1917:
+	list_for_each(q,&cachep->slabs_full) {
 	                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#390: FILE: mm/slab.c:1920:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required after that ',' (ctx:VxO)
#394: FILE: mm/slab.c:1924:
+	list_for_each(q,&cachep->slabs_partial) {
 	               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#394: FILE: mm/slab.c:1924:
+	list_for_each(q,&cachep->slabs_partial) {
 	                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#397: FILE: mm/slab.c:1927:
+			BUG();

ERROR:SPACING: space required after that ',' (ctx:VxO)
#401: FILE: mm/slab.c:1931:
+	list_for_each(q,&cachep->slabs_free) {
 	               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#401: FILE: mm/slab.c:1931:
+	list_for_each(q,&cachep->slabs_free) {
 	                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#404: FILE: mm/slab.c:1934:
+			BUG();

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#407: FILE: mm/slab.c:1937:
+	num_slabs+=active_slabs;
 	         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#408: FILE: mm/slab.c:1938:
+	num_objs = num_slabs*cachep->num;
 	                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#414: FILE: mm/slab.c:1940:
+^Iname = cachep->name; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#416: FILE: mm/slab.c:1942:
+^Ichar tmp; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#417: FILE: mm/slab.c:1943:
+^Iif (__get_user(tmp, name)) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#417: FILE: mm/slab.c:1943:
+	char tmp; 
+	if (__get_user(tmp, name)) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#418: FILE: mm/slab.c:1944:
+^I^Iname = "broken"; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#419: FILE: mm/slab.c:1945:
+^I}       $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#422: FILE: mm/slab.c:1948:
+	seq_printf(m, "%-17s %6lu %6lu %6u %4lu %4lu %4u",
+		name, active_objs, num_objs, cachep->objsize,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#423: FILE: mm/slab.c:1949:
+		active_slabs, num_slabs, (1<<cachep->gfporder));
 		                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#445: FILE: mm/slab.c:1960:
+		seq_printf(m, " : %6lu %7lu %5lu %4lu %4lu",
+				high, allocs, grown, reaped, errors);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#471: FILE: mm/slab.c:1974:
+		seq_printf(m, " : %4u %4u",
+				limit, batchcount);

WARNING:LINE_SPACING: Missing a blank line after declarations
#504: FILE: mm/slab.c:1983:
+		unsigned long freemiss = atomic_read(&cachep->freemiss);
+		seq_printf(m, " : %6lu %6lu %6lu %6lu",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#505: FILE: mm/slab.c:1984:
+		seq_printf(m, " : %6lu %6lu %6lu %6lu",
+				allochit, allocmiss, freehit, freemiss);

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#544: FILE: mm/slab.c:2006:
+struct seq_operations slabinfo_op = {

WARNING:INDENTED_LABEL: labels should not be indented
#545: FILE: mm/slab.c:2007:
+	start:	s_start,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#546: FILE: mm/slab.c:2008:
+	next:	s_next,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#546: FILE: mm/slab.c:2008:
+	next:	s_next,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#547: FILE: mm/slab.c:2009:
+	stop:	s_stop,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#547: FILE: mm/slab.c:2009:
+	stop:	s_stop,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#548: FILE: mm/slab.c:2010:
+	show:	s_show
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#548: FILE: mm/slab.c:2010:
+	show:	s_show

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#563: FILE: mm/slab.c:2022:
+ssize_t slabinfo_write(struct file *file, const char *buffer,
+				size_t count, loff_t *ppos)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000452881.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 24 errors, 24 warnings, 9 checks, 500 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000452881.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
