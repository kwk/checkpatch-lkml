WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#53: 
//  EXTRAVERSION =
    ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#95: FILE: fs/pipe.c:60:
+	ssize_t ret;
+	pio = list_entry(PIPE_PIO(*inode).next, struct pipe_pio, list);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#102: FILE: fs/pipe.c:67:
+		if(copy_to_user(ubuf, (void*)pio->addr, chars))

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#102: FILE: fs/pipe.c:67:
+		if(copy_to_user(ubuf, (void*)pio->addr, chars))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#109: FILE: fs/pipe.c:74:
+		switch(copy_user_to_user(ubuf, mm, pio->addr, chars, 0))
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#109: FILE: fs/pipe.c:74:
+		switch(copy_user_to_user(ubuf, mm, pio->addr, chars, 0))

WARNING:LINE_SPACING: Missing a blank line after declarations
#194: FILE: fs/pipe.c:132:
+		int chars = PIPE_LEN(*inode);
+		if (chars) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#197: FILE: fs/pipe.c:135:
+			int offset = PIPE_START(*inode);
+			if (chars > count)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#199: FILE: fs/pipe.c:137:
+			if (chars > PIPE_SIZE-offset)
 			                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#200: FILE: fs/pipe.c:138:
+				chars = PIPE_SIZE-offset;
 				                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#201: FILE: fs/pipe.c:139:
+			if (copy_to_user(buf, pipebuf+offset, chars)) {
 			                             ^

ERROR:SPACING: space required before the open parenthesis '('
#220: FILE: fs/pipe.c:154:
+			if(chars < 0) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#255: FILE: fs/pipe.c:166:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#365: FILE: fs/pipe.c:241:
+		int offset;
+		ret = 0;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#370: FILE: fs/pipe.c:246:
+		if (free > PIPE_SIZE-offset)
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#371: FILE: fs/pipe.c:247:
+			free = PIPE_SIZE-offset;
 			                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#373: FILE: fs/pipe.c:249:
+		if (copy_from_user(PIPE_BASE(*inode)+offset, buf, free)) {
 		                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#417: FILE: fs/pipe.c:259:
+^I^I^I^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#418: FILE: fs/pipe.c:260:
+		inode->i_ctime = inode->i_mtime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space required before the open parenthesis '('
#459: FILE: fs/pipe.c:278:
+		if(!access_ok(VERIFY_READ, buf, count))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#465: FILE: fs/pipe.c:282:
+		if (segment_eq(get_fs(),KERNEL_DS))
 		                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#472: FILE: fs/pipe.c:289:
+^I^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#473: FILE: fs/pipe.c:290:
+		inode->i_ctime = inode->i_mtime = CURRENT_TIME;

ERROR:SPACING: space required before the open parenthesis '('
#482: FILE: fs/pipe.c:299:
+		for(;;) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#550: FILE: fs/pipe.c:370:
+		struct pipe_pio *pio;
+		pio = list_entry(PIPE_PIO(*inode).next, struct pipe_pio, list);

WARNING:LONG_LINE: line length of 132 exceeds 100 columns
#683: FILE: kernel/ptrace.c:22:
+static int access_one_page(struct mm_struct * mm, struct vm_area_struct * vma, unsigned long addr, void *buf, size_t len, int write)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#683: FILE: kernel/ptrace.c:22:
+static int access_one_page(struct mm_struct * mm, struct vm_area_struct * vma, unsigned long addr, void *buf, size_t len, int write)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#683: FILE: kernel/ptrace.c:22:
+static int access_one_page(struct mm_struct * mm, struct vm_area_struct * vma, unsigned long addr, void *buf, size_t len, int write)

WARNING:LONG_LINE: line length of 139 exceeds 100 columns
#749: FILE: kernel/ptrace.c:96:
+static int access_mm(struct mm_struct *mm, struct vm_area_struct * vma, unsigned long addr, void *buf, size_t len, int write, int *pcopied)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#749: FILE: kernel/ptrace.c:96:
+static int access_mm(struct mm_struct *mm, struct vm_area_struct * vma, unsigned long addr, void *buf, size_t len, int write, int *pcopied)

WARNING:LINE_SPACING: Missing a blank line after declarations
#807: FILE: kernel/ptrace.c:157:
+		mm_segment_t old;
+		old = get_fs();

WARNING:TYPO_SPELLING: 'failues' may be misspelled - perhaps 'failures'?
#809: FILE: kernel/ptrace.c:159:
+		/* silently ignore failues, perhaps the caller
 		                   ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#821: FILE: kernel/ptrace.c:171:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#825: FILE: kernel/ptrace.c:175:
+ * if do_write is true, then the data is written into 'mm:oaddr' $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#829: FILE: kernel/ptrace.c:179:
+
+

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#830: FILE: kernel/ptrace.c:180:
+int copy_user_to_user(char *cbuf, struct mm_struct *mm, unsigned long oaddr, size_t len, int do_write)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#832: FILE: kernel/ptrace.c:182:
+	struct vm_area_struct * vma;

WARNING:LINE_SPACING: Missing a blank line after declarations
#834: FILE: kernel/ptrace.c:184:
+	int retval;
+	down_read(&mm->mmap_sem);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#853: FILE: include/linux/mm.h:402:
+extern int access_process_vm(struct task_struct *tsk, unsigned long addr, void *buf, size_t len, int write);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#853: FILE: include/linux/mm.h:402:
+extern int access_process_vm(struct task_struct *tsk, unsigned long addr, void *buf, size_t len, int write);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#860: FILE: include/linux/mm.h:409:
+extern int copy_user_to_user(char *cbuf, struct mm_struct *mm, unsigned long oaddr, size_t len, int do_write);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#860: FILE: include/linux/mm.h:409:
+extern int copy_user_to_user(char *cbuf, struct mm_struct *mm, unsigned long oaddr, size_t len, int do_write);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000535356.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 14 warnings, 11 checks, 767 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000535356.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
