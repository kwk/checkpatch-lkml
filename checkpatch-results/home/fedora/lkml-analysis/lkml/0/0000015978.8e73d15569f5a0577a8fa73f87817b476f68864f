WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
For the cases where the container of the work_struct may go away the moment the

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#52: 
Signed-Off-By: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dpc)...) over kmalloc(sizeof(struct acpi_os_dpc)...)
#367: FILE: drivers/acpi/osl.c:622:
+	dpc = kmalloc(sizeof(struct acpi_os_dpc), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#486: FILE: drivers/ata/libata-scsi.c:3206:
+^Istruct ata_port *ap = $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#500: FILE: drivers/ata/libata.h:84:
+extern void ata_scsi_hotplug(struct work_struct *work);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#509: FILE: drivers/ata/libata.h:114:
+extern void ata_scsi_dev_rescan(struct work_struct *work);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#872: FILE: drivers/pci/pcie/aer/aerdrv.h:121:
+extern void aer_isr(struct work_struct *work);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1111: FILE: fs/nfs/nfs4_fs.h:188:
+extern void nfs4_renew_state(struct work_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct work_struct *' should also have an identifier name
#1111: FILE: fs/nfs/nfs4_fs.h:188:
+extern void nfs4_renew_state(struct work_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1149: FILE: include/linux/libata.h:751:
+extern void ata_port_queue_task(struct ata_port *ap, work_func_t fn,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1169: FILE: include/linux/workqueue.h:19:
+	 * one */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#1186: FILE: include/linux/workqueue.h:38:
+#define __WORK_INITIALIZER(n, f) {				\
+	.management = 0,					\
         .entry	= { &(n).entry, &(n).entry },			\
 	.func = (f),						\
 	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#1195: FILE: include/linux/workqueue.h:44:
+#define __WORK_INITIALIZER_NAR(n, f) {				\
+	.management = (1 << WORK_STRUCT_NOAUTOREL),		\
+        .entry	= { &(n).entry, &(n).entry },			\
+	.func = (f),						\
+	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#1197: FILE: include/linux/workqueue.h:46:
+        .entry^I= { &(n).entry, &(n).entry },^I^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1197: FILE: include/linux/workqueue.h:46:
+        .entry^I= { &(n).entry, &(n).entry },^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#1213: FILE: include/linux/workqueue.h:60:
+#define DECLARE_WORK(n, f)					\
+	struct work_struct n = __WORK_INITIALIZER(n, f)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#1216: FILE: include/linux/workqueue.h:63:
+#define DECLARE_WORK_NAR(n, f)					\
+	struct work_struct n = __WORK_INITIALIZER_NAR(n, f)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#1221: FILE: include/linux/workqueue.h:66:
+#define DECLARE_DELAYED_WORK(n, f)				\
+	struct delayed_work n = __DELAYED_WORK_INITIALIZER(n, f)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#1224: FILE: include/linux/workqueue.h:69:
+#define DECLARE_DELAYED_WORK_NAR(n, f)			\
+	struct dwork_struct n = __DELAYED_WORK_INITIALIZER_NAR(n, f)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1232: FILE: include/linux/workqueue.h:75:
+#define PREPARE_WORK(_work, _func)				\
 	do {							\
 		(_work)->func = (_func);			\
 	} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_work' - possible side-effects?
#1247: FILE: include/linux/workqueue.h:86:
+#define INIT_WORK(_work, _func)					\
 	do {							\
 		(_work)->management = 0;			\
+		INIT_LIST_HEAD(&(_work)->entry);		\
+		PREPARE_WORK((_work), (_func));			\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_work' - possible side-effects?
#1256: FILE: include/linux/workqueue.h:93:
+#define INIT_WORK_NAR(_work, _func)					\
+	do {								\
+		(_work)->management = (1 << WORK_STRUCT_NOAUTOREL);	\
+		INIT_LIST_HEAD(&(_work)->entry);			\
+		PREPARE_WORK((_work), (_func));				\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_work' - possible side-effects?
#1263: FILE: include/linux/workqueue.h:100:
+#define INIT_DELAYED_WORK(_work, _func)				\
+	do {							\
+		INIT_WORK(&(_work)->work, (_func));		\
+		init_timer(&(_work)->timer);			\
 	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_work' - possible side-effects?
#1270: FILE: include/linux/workqueue.h:106:
+#define INIT_DELAYED_WORK_NAR(_work, _func)			\
 	do {							\
+		INIT_WORK_NAR(&(_work)->work, (_func));		\
 		init_timer(&(_work)->timer);			\
 	} while (0)

WARNING:TYPO_SPELLING: 'containter' may be misspelled - perhaps 'container'?
#1292: FILE: include/linux/workqueue.h:138:
+ * fetched any data it may require from the containter of the work_struct.
                                             ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1310: FILE: include/linux/workqueue.h:166:
+extern int schedule_on_each_cpu(work_func_t func);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct execute_work *' should also have an identifier name
#1319: FILE: include/linux/workqueue.h:175:
+int execute_in_process_context(work_func_t fn, struct execute_work *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1332: FILE: include/net/inet_timewait_sock.h:87:
+extern void inet_twdr_twkill_work(struct work_struct *work);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000015978.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 8 warnings, 18 checks, 1442 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000015978.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
