WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
> > It gives absolutely no warranties - ->write_super() can easily block, so

WARNING:TYPO_SPELLING: 'sempaphores' may be misspelled - perhaps 'semaphores'?
#55: 
We got _two_ sempaphores - one for get_super()/umount() synchronization
             ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <Device>
#154: FILE: drivers/block/DAC960.c:4998:
+	  invalidate_dev(Device, 1);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#427: FILE: drivers/mtd/ftl.c:925:
+    invalidate_dev(inode->i_rdev, 2);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#572: FILE: fs/block_dev.c:581:
+			printk("VFS: busy inodes on changed media.\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#602: FILE: fs/buffer.c:686:
+	struct super_block *sb = get_super(dev);
+	if (sync_flag == 1)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#654: FILE: fs/devfs/base.c:2169:
+    if (sb) {$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#655: FILE: fs/devfs/base.c:2170:
+	if (invalidate_inodes (sb))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#656: FILE: fs/devfs/base.c:2171:
+		printk("VFS: busy inodes on changed media..\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#658: FILE: fs/devfs/base.c:2173:
+    }$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*s)...) over kmalloc(sizeof(struct super_block)...)
#911: FILE: fs/super.c:680:
+	struct super_block *s = kmalloc(sizeof(struct super_block),  GFP_USER);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:CONSIDER_COMPLETION: consider using a completion
#920: FILE: fs/super.c:687:
+		sema_init(&s->s_umount, 0);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#923: FILE: fs/super.c:690:
+		list_add (&s->s_list, super_blocks.prev);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#933: FILE: fs/super.c:700:
+static unsigned int unnamed_dev_in_use[256/(8*sizeof(unsigned int))];
                                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#933: FILE: fs/super.c:700:
+static unsigned int unnamed_dev_in_use[256/(8*sizeof(unsigned int))];
                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#940: FILE: fs/super.c:707:
+		if (!test_and_set_bit(i,unnamed_dev_in_use))
 		                       ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#952: FILE: fs/super.c:719:
+	printk("VFS: put_unnamed_dev: freeing unused device %s\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'put_unnamed_dev', this function's name, in a string
#952: FILE: fs/super.c:719:
+	printk("VFS: put_unnamed_dev: freeing unused device %s\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#953: FILE: fs/super.c:720:
+	printk("VFS: put_unnamed_dev: freeing unused device %s\n",
+			kdevname(dev));

WARNING:LINE_SPACING: Missing a blank line after declarations
#962: FILE: fs/super.c:729:
+	kdev_t rdev = dev ? dev : get_unnamed_dev();
+	if (!rdev)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1062: FILE: fs/super.c:829:
+	path_release(&nd);
 	              ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1082: FILE: fs/super.c:836:
+	struct super_block * sb;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1084: FILE: fs/super.c:838:
+	int error = -EINVAL;
+	sb = read_super(0, NULL, fs_type, flags, data, 0);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1401: FILE: include/linux/fs.h:1074:
+extern void invalidate_dev(kdev_t, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdev_t' should also have an identifier name
#1401: FILE: include/linux/fs.h:1074:
+extern void invalidate_dev(kdev_t, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1401: FILE: include/linux/fs.h:1074:
+extern void invalidate_dev(kdev_t, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1410: FILE: include/linux/fs.h:1270:
+extern void put_super(struct super_block *sb);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1414: FILE: include/linux/fs.h:1274:
+	struct super_block *sb = get_super(dev);
+	if (sb) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1478: FILE: kernel/ksyms.c:131:
+EXPORT_SYMBOL(invalidate_dev);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000559467.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 20 warnings, 7 checks, 1207 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000559467.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
