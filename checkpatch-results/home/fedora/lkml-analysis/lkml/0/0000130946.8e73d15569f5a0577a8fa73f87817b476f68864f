WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#23: 
The accuracy of stateful thrashing-threshold estimation depends largely on the

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#85: FILE: mm/readahead.c:112:
+extern struct file_operations aginginfo_fops;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:CONST_STRUCT: struct file_operations should normally be const
#85: FILE: mm/readahead.c:112:
+extern struct file_operations aginginfo_fops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#95: FILE: mm/readahead.c:127:
+	page_aging_dentry = debugfs_create_file("page_aging",
+					0644, root, NULL, &aginginfo_fops);

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#103: FILE: mm/readahead.c:289:
+extern struct seq_operations aginginfo_ops;

CHECK:BIT_MACRO: Prefer using the BIT macro
#124: FILE: mm/readahead.c:330:
+#define AGING_INFO_SIZE	(1 << 8)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxE)
#127: FILE: mm/readahead.c:333:
+#define AGING_INFO_SHIFTS	(sizeof(aging_info_shift)/\
                          	                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#130: FILE: mm/readahead.c:336:
+static unsigned long aging_info[AGING_INFO_SIZE][AGING_INFO_SHIFTS*3];
                                                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#165: FILE: mm/readahead.c:371:
+		if (smooth_aging - aging_info[aging_info_index[i]][i*3+2] +
 		                                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#165: FILE: mm/readahead.c:371:
+		if (smooth_aging - aging_info[aging_info_index[i]][i*3+2] +
 		                                                      ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#165: FILE: mm/readahead.c:371:
+		if (smooth_aging - aging_info[aging_info_index[i]][i*3+2] +
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#166: FILE: mm/readahead.c:372:
+		      page_aging - aging_info[aging_info_index[i]][i*3+1] >
 		                                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#166: FILE: mm/readahead.c:372:
+		      page_aging - aging_info[aging_info_index[i]][i*3+1] >
 		                                                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#170: FILE: mm/readahead.c:376:
+			aging_info[aging_info_index[i]][i*3] = jiffies;
 			                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#171: FILE: mm/readahead.c:377:
+			aging_info[aging_info_index[i]][i*3+1] = page_aging;
 			                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#171: FILE: mm/readahead.c:377:
+			aging_info[aging_info_index[i]][i*3+1] = page_aging;
 			                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#172: FILE: mm/readahead.c:378:
+			aging_info[aging_info_index[i]][i*3+2] = smooth_aging;
 			                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#172: FILE: mm/readahead.c:378:
+			aging_info[aging_info_index[i]][i*3+2] = smooth_aging;
 			                                   ^

CHECK:BRACES: Unbalanced braces around else statement
#173: FILE: mm/readahead.c:379:
+		} else

ERROR:SPACING: space required after that ',' (ctx:VxV)
#189: FILE: mm/readahead.c:395:
+			seq_printf(s, "%12s %10s %18s%d %18s%d\t", "time","dt",
 			                                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#190: FILE: mm/readahead.c:396:
+                                        "page_aging", aging_info_shift[i],$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#190: FILE: mm/readahead.c:396:
+			seq_printf(s, "%12s %10s %18s%d %18s%d\t", "time","dt",
+                                        "page_aging", aging_info_shift[i],

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: mm/readahead.c:396:
+                                        "page_aging", aging_info_shift[i],$

ERROR:CODE_INDENT: code indent should use tabs where possible
#191: FILE: mm/readahead.c:397:
+                                        "smooth_aging", aging_info_shift[i]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: mm/readahead.c:397:
+                                        "smooth_aging", aging_info_shift[i]);$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#230: FILE: mm/readahead.c:436:
+		time = aging_info[index0][i*3];
 		                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#231: FILE: mm/readahead.c:437:
+		nr1 = aging_info[index1][i*3+1] - aging_info[index0][i*3+1];
 		                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#231: FILE: mm/readahead.c:437:
+		nr1 = aging_info[index1][i*3+1] - aging_info[index0][i*3+1];
 		                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#231: FILE: mm/readahead.c:437:
+		nr1 = aging_info[index1][i*3+1] - aging_info[index0][i*3+1];
 		                                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#231: FILE: mm/readahead.c:437:
+		nr1 = aging_info[index1][i*3+1] - aging_info[index0][i*3+1];
 		                                                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#232: FILE: mm/readahead.c:438:
+		nr2 = aging_info[index1][i*3+2] - aging_info[index0][i*3+2];
 		                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#232: FILE: mm/readahead.c:438:
+		nr2 = aging_info[index1][i*3+2] - aging_info[index0][i*3+2];
 		                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#232: FILE: mm/readahead.c:438:
+		nr2 = aging_info[index1][i*3+2] - aging_info[index0][i*3+2];
 		                                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#232: FILE: mm/readahead.c:438:
+		nr2 = aging_info[index1][i*3+2] - aging_info[index0][i*3+2];
 		                                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#234: FILE: mm/readahead.c:440:
+		seq_printf(s, "%12ld %10lu %10lu %8lu %10lu %8lu\t",
+				time,  aging_info[index1][i*3] - time,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#234: FILE: mm/readahead.c:440:
+				time,  aging_info[index1][i*3] - time,
 				                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#235: FILE: mm/readahead.c:441:
+				aging_info[index0][i*3+1], nr1,
 				                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#235: FILE: mm/readahead.c:441:
+				aging_info[index0][i*3+1], nr1,
 				                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#236: FILE: mm/readahead.c:442:
+				aging_info[index0][i*3+2], nr2);
 				                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#236: FILE: mm/readahead.c:442:
+				aging_info[index0][i*3+2], nr2);
 				                      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#243: FILE: mm/readahead.c:449:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#244: FILE: mm/readahead.c:450:
+static struct seq_operations aginginfo_ops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#251: FILE: mm/readahead.c:457:
+static struct file_operations aginginfo_fops = {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000130946.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 8 warnings, 32 checks, 187 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000130946.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
