WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#72: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#73: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#74: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#74: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#75: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#76: 
#	           ChangeSet	1.607   -> 1.608  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#77: 
#	include/linux/elevator.h	1.11    -> 1.12   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#78: 
#	drivers/block/ll_rw_blk.c	1.109   -> 1.110  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#79: 
#	drivers/block/Makefile	1.9     -> 1.10   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#80: 
#	               (new)	        -> 1.1     drivers/block/deadline-iosched.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#81: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#82: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#83: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#84: 
# 02/09/25	axboe@burns.home.kernel.dk	1.608

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#85: 
# deadline io scheduler

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#86: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#87: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#89: 
--- a/drivers/block/Makefile	Wed Sep 25 19:16:26 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#107: FILE: drivers/block/deadline-iosched.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#108: FILE: drivers/block/deadline-iosched.c:2:
+ *  linux/drivers/block/deadline-iosched.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:BIT_MACRO: Prefer using the BIT macro
#145: FILE: drivers/block/deadline-iosched.c:39:
+#define DL_HASH_ENTRIES		(1 << deadline_hash_shift)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dd' - possible side-effects?
#147: FILE: drivers/block/deadline-iosched.c:41:
+#define DL_INVALIDATE_HASH(dd)				\
+	do {						\
+		if (!++(dd)->hash_valid_count)		\
+			(dd)->hash_valid_count = 1;	\
+	} while (0)

CHECK:SPACING: No space is necessary after a cast
#187: FILE: drivers/block/deadline-iosched.c:81:
+#define RQ_DATA(rq)	((struct deadline_rq *) (rq)->elevator_private)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#198: FILE: drivers/block/deadline-iosched.c:92:
+#define ON_HASH(drq)	(drq)->hash_valid_count

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#210: FILE: drivers/block/deadline-iosched.c:104:
+	BUG_ON(ON_HASH(drq));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#213: FILE: drivers/block/deadline-iosched.c:107:
+	list_add(&drq->hash, &dd->hash[DL_HASH_FN(rq->sector +rq->nr_sectors)]);
 	                                                     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#229: FILE: drivers/block/deadline-iosched.c:123:
+		BUG_ON(!drq->hash_valid_count);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#232: FILE: drivers/block/deadline-iosched.c:126:
+		if (!rq_mergeable(drq->request)
+		    || drq->hash_valid_count != dd->hash_valid_count) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#266: FILE: drivers/block/deadline-iosched.c:160:
+	if ((__rq = deadline_find_hash(dd, bio->bi_sector))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#267: FILE: drivers/block/deadline-iosched.c:161:
+		BUG_ON(__rq->sector + __rq->nr_sectors != bio->bi_sector);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#277: FILE: drivers/block/deadline-iosched.c:171:
+	entry = sort_list = &dd->sort_list[data_dir];

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#282: FILE: drivers/block/deadline-iosched.c:176:
+		BUG_ON(__rq->flags & REQ_STARTED);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#324: FILE: drivers/block/deadline-iosched.c:218:
+	BUG_ON(!drq);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#325: FILE: drivers/block/deadline-iosched.c:219:
+	BUG_ON(!dnext);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#458: FILE: drivers/block/deadline-iosched.c:352:
+	BUG_ON(!list_empty(&dd->sort_list[READ]));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#459: FILE: drivers/block/deadline-iosched.c:353:
+	BUG_ON(writes);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#521: FILE: drivers/block/deadline-iosched.c:415:
+	if (!list_empty(&q->queue_head) || !list_empty(&dd->sort_list[READ])
+	    || !list_empty(&dd->sort_list[WRITE]))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#524: FILE: drivers/block/deadline-iosched.c:418:
+	BUG_ON(!list_empty(&dd->read_fifo));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#543: FILE: drivers/block/deadline-iosched.c:437:
+	BUG_ON(!list_empty(&dd->read_fifo));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#544: FILE: drivers/block/deadline-iosched.c:438:
+	BUG_ON(!list_empty(&dd->sort_list[READ]));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#545: FILE: drivers/block/deadline-iosched.c:439:
+	BUG_ON(!list_empty(&dd->sort_list[WRITE]));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#553: FILE: drivers/block/deadline-iosched.c:447:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#557: FILE: drivers/block/deadline-iosched.c:451:
+			if ((drq = RQ_DATA(rq)) == NULL)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#588: FILE: drivers/block/deadline-iosched.c:482:
+	dd->hash = kmalloc(sizeof(struct list_head)*DL_HASH_ENTRIES,GFP_KERNEL);
 	                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#588: FILE: drivers/block/deadline-iosched.c:482:
+	dd->hash = kmalloc(sizeof(struct list_head)*DL_HASH_ENTRIES,GFP_KERNEL);
 	                                                           ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dd->hash)...) over kmalloc(sizeof(struct list_head)...)
#588: FILE: drivers/block/deadline-iosched.c:482:
+	dd->hash = kmalloc(sizeof(struct list_head)*DL_HASH_ENTRIES,GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#614: FILE: drivers/block/deadline-iosched.c:508:
+^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#652: FILE: drivers/block/deadline-iosched.c:546:
+^I.elevator_merge_fn = ^I^Ideadline_merge,$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#663: FILE: drivers/block/deadline-iosched.c:557:
+EXPORT_SYMBOL(iosched_deadline);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#672: FILE: drivers/block/ll_rw_blk.c:1178:
+	if ((ret = elevator_init(q, &q->elevator, iosched_deadline))) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000429932.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 33 warnings, 9 checks, 588 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000429932.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
