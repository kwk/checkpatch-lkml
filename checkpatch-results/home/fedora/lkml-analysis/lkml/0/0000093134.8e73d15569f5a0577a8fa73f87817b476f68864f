WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#46: FILE: drivers/serial/Kconfig:928:
+config SERIAL_BLACKFIN
+	bool 'Blackfin Serial Driver'
+	depends on BFIN
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#50: FILE: drivers/serial/Kconfig:932:
+choice
+	prompt	"Mode"
+	depends on SERIAL_BLACKFIN
+	default SERIAL_BLACKFIN_DMA
+	---help---
+	  This driver supports the built-in serial ports of the Blackfin

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#56: FILE: drivers/serial/Kconfig:937:
family of CPUs

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#58: FILE: drivers/serial/Kconfig:939:
+config SERIAL_BLACKFIN_DMA
+	bool 'DMA on RX and TX'
+	help
+	  This driver works under DMA mode. If this option is selected, the

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#64: FILE: drivers/serial/Kconfig:944:
+config SERIAL_BLACKFIN_PIO
+	bool 'PIO on RX and TX'
+	help
+	  This driver works under PIO mode.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#85: FILE: drivers/serial/bfin_serial_5xx.c:1:
+/* bf533_serial.c: Serial driver for BlackFin DSP internal UART.

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#87: FILE: drivers/serial/bfin_serial_5xx.c:3:
+ * ^I^I^IBuyWays B.V. (www.buyways.nl)$

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#111: FILE: drivers/serial/bfin_serial_5xx.c:27:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#116: FILE: drivers/serial/bfin_serial_5xx.c:32:
+#include <asm/cacheflush.h>

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#129: FILE: drivers/serial/bfin_serial_5xx.c:45:
+#define SIC_UART_MASK ((1<<(IRQ_UART_RX - IVG7)) | (1<<(IRQ_UART_TX -
                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#129: FILE: drivers/serial/bfin_serial_5xx.c:45:
+#define SIC_UART_MASK ((1<<(IRQ_UART_RX - IVG7)) | (1<<(IRQ_UART_TX -
                                                      ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#129: FILE: drivers/serial/bfin_serial_5xx.c:45:
+#define SIC_UART_MASK ((1<<(IRQ_UART_RX - IVG7)) | (1<<(IRQ_UART_TX -

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#132: FILE: drivers/serial/bfin_serial_5xx.c:47:
+#define SIC_UART_MASK ((1<<(IRQ_UART_RX - IVG7)) | (1<<(IRQ_UART_TX -
                          ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#132: FILE: drivers/serial/bfin_serial_5xx.c:47:
+#define SIC_UART_MASK ((1<<(IRQ_UART_RX - IVG7)) | (1<<(IRQ_UART_TX -
                                                      ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#132: FILE: drivers/serial/bfin_serial_5xx.c:47:
+#define SIC_UART_MASK ((1<<(IRQ_UART_RX - IVG7)) | (1<<(IRQ_UART_TX -

ERROR:SPACING: space required after that ';' (ctx:VxV)
#139: FILE: drivers/serial/bfin_serial_5xx.c:53:
+#define ACCESS_LATCH(regs)	{ *(regs->rpUART_LCR) |= DLAB; SSYNC;}
                           	                                    ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_LCR
#139: FILE: drivers/serial/bfin_serial_5xx.c:53:
+#define ACCESS_LATCH(regs)	{ *(regs->rpUART_LCR) |= DLAB; SSYNC;}

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:CAMELCASE: Avoid CamelCase: <rpUART_LCR>
#139: FILE: drivers/serial/bfin_serial_5xx.c:53:
+#define ACCESS_LATCH(regs)	{ *(regs->rpUART_LCR) |= DLAB; SSYNC;}

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'regs' may be better as '(regs)' to avoid precedence issues
#139: FILE: drivers/serial/bfin_serial_5xx.c:53:
+#define ACCESS_LATCH(regs)	{ *(regs->rpUART_LCR) |= DLAB; SSYNC;}

ERROR:SPACING: space required after that ';' (ctx:VxV)
#140: FILE: drivers/serial/bfin_serial_5xx.c:54:
+#define ACCESS_PORT_IER(regs)	{ *(regs->rpUART_LCR) &= (~DLAB); SSYNC;}
                              	                                       ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_LCR
#140: FILE: drivers/serial/bfin_serial_5xx.c:54:
+#define ACCESS_PORT_IER(regs)	{ *(regs->rpUART_LCR) &= (~DLAB); SSYNC;}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'regs' may be better as '(regs)' to avoid precedence issues
#140: FILE: drivers/serial/bfin_serial_5xx.c:54:
+#define ACCESS_PORT_IER(regs)	{ *(regs->rpUART_LCR) &= (~DLAB); SSYNC;}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#142: FILE: drivers/serial/bfin_serial_5xx.c:56:
+#if defined (SERIAL_DEBUG_CALLTRACE)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#143: FILE: drivers/serial/bfin_serial_5xx.c:57:
+#define FUNC_ENTER()  printk("<0> %s: entered\n", __FUNCTION__)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#143: FILE: drivers/serial/bfin_serial_5xx.c:57:
+#define FUNC_ENTER()  printk("<0> %s: entered\n", __FUNCTION__)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#148: FILE: drivers/serial/bfin_serial_5xx.c:62:
+#if defined (SERIAL_DEBUG_TERMIOS)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#149: FILE: drivers/serial/bfin_serial_5xx.c:63:
+#define DUMP_TERMIOS(termios) printk("<0> %s: termios %p c_iflag %08x " \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'termios' - possible side-effects?
#149: FILE: drivers/serial/bfin_serial_5xx.c:63:
+#define DUMP_TERMIOS(termios) printk("<0> %s: termios %p c_iflag %08x " \
+                      "c_oflag %08x c_cflag %08x c_lflag %08x c_line %02x " \
+                      "VINTR %02x VQUIT %02x VERASE %02x VKILL %02x " \
+                      "VEOF %02x VTIME %02x VMIN %02x VSWTC %02x "    \
+                      "VSTART %02x VSTOP %02x VSUSP %02x VEOL %02x "  \
+                      "VREPRINT %02x VDISCARD %02x VWERASE %02x "     \
+                      "VLNEXT %02x VEOL2 %02x.\n",                    \
+                      __FUNCTION__, termios, termios->c_iflag,        \
+                      termios->c_oflag, termios->c_cflag, termios->c_lflag, \
+                      termios->c_line, termios->c_cc[VINTR],          \
+                      termios->c_cc[VQUIT], termios->c_cc[VERASE],    \
+                      termios->c_cc[VKILL], termios->c_cc[VEOF],      \
+                      termios->c_cc[VTIME], termios->c_cc[VMIN],      \
+                      termios->c_cc[VSWTC], termios->c_cc[VSTART],    \
+                      termios->c_cc[VSTOP], termios->c_cc[VSUSP],     \
+                      termios->c_cc[VEOL], termios->c_cc[VREPRINT],   \
+                      termios->c_cc[VDISCARD], termios->c_cc[VWERASE], \
+                      termios->c_cc[VLNEXT], termios->c_cc[VEOL2])

ERROR:CODE_INDENT: code indent should use tabs where possible
#150: FILE: drivers/serial/bfin_serial_5xx.c:64:
+                      "c_oflag %08x c_cflag %08x c_lflag %08x c_line %02x " \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: drivers/serial/bfin_serial_5xx.c:64:
+                      "c_oflag %08x c_cflag %08x c_lflag %08x c_line %02x " \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: drivers/serial/bfin_serial_5xx.c:65:
+                      "VINTR %02x VQUIT %02x VERASE %02x VKILL %02x " \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: drivers/serial/bfin_serial_5xx.c:65:
+                      "VINTR %02x VQUIT %02x VERASE %02x VKILL %02x " \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: drivers/serial/bfin_serial_5xx.c:66:
+                      "VEOF %02x VTIME %02x VMIN %02x VSWTC %02x "    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: drivers/serial/bfin_serial_5xx.c:66:
+                      "VEOF %02x VTIME %02x VMIN %02x VSWTC %02x "    \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: drivers/serial/bfin_serial_5xx.c:67:
+                      "VSTART %02x VSTOP %02x VSUSP %02x VEOL %02x "  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: drivers/serial/bfin_serial_5xx.c:67:
+                      "VSTART %02x VSTOP %02x VSUSP %02x VEOL %02x "  \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: drivers/serial/bfin_serial_5xx.c:68:
+                      "VREPRINT %02x VDISCARD %02x VWERASE %02x "     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: drivers/serial/bfin_serial_5xx.c:68:
+                      "VREPRINT %02x VDISCARD %02x VWERASE %02x "     \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: drivers/serial/bfin_serial_5xx.c:69:
+                      "VLNEXT %02x VEOL2 %02x.\n",                    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: drivers/serial/bfin_serial_5xx.c:69:
+                      "VLNEXT %02x VEOL2 %02x.\n",                    \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: drivers/serial/bfin_serial_5xx.c:70:
+                      __FUNCTION__, termios, termios->c_iflag,        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: drivers/serial/bfin_serial_5xx.c:70:
+                      __FUNCTION__, termios, termios->c_iflag,        \$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#156: FILE: drivers/serial/bfin_serial_5xx.c:70:
+                      __FUNCTION__, termios, termios->c_iflag,        \

ERROR:CODE_INDENT: code indent should use tabs where possible
#157: FILE: drivers/serial/bfin_serial_5xx.c:71:
+                      termios->c_oflag, termios->c_cflag, termios->c_lflag, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: drivers/serial/bfin_serial_5xx.c:71:
+                      termios->c_oflag, termios->c_cflag, termios->c_lflag, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: drivers/serial/bfin_serial_5xx.c:72:
+                      termios->c_line, termios->c_cc[VINTR],          \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: drivers/serial/bfin_serial_5xx.c:72:
+                      termios->c_line, termios->c_cc[VINTR],          \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#159: FILE: drivers/serial/bfin_serial_5xx.c:73:
+                      termios->c_cc[VQUIT], termios->c_cc[VERASE],    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: drivers/serial/bfin_serial_5xx.c:73:
+                      termios->c_cc[VQUIT], termios->c_cc[VERASE],    \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#160: FILE: drivers/serial/bfin_serial_5xx.c:74:
+                      termios->c_cc[VKILL], termios->c_cc[VEOF],      \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: drivers/serial/bfin_serial_5xx.c:74:
+                      termios->c_cc[VKILL], termios->c_cc[VEOF],      \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#161: FILE: drivers/serial/bfin_serial_5xx.c:75:
+                      termios->c_cc[VTIME], termios->c_cc[VMIN],      \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: drivers/serial/bfin_serial_5xx.c:75:
+                      termios->c_cc[VTIME], termios->c_cc[VMIN],      \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#162: FILE: drivers/serial/bfin_serial_5xx.c:76:
+                      termios->c_cc[VSWTC], termios->c_cc[VSTART],    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: drivers/serial/bfin_serial_5xx.c:76:
+                      termios->c_cc[VSWTC], termios->c_cc[VSTART],    \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#163: FILE: drivers/serial/bfin_serial_5xx.c:77:
+                      termios->c_cc[VSTOP], termios->c_cc[VSUSP],     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: drivers/serial/bfin_serial_5xx.c:77:
+                      termios->c_cc[VSTOP], termios->c_cc[VSUSP],     \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#164: FILE: drivers/serial/bfin_serial_5xx.c:78:
+                      termios->c_cc[VEOL], termios->c_cc[VREPRINT],   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: drivers/serial/bfin_serial_5xx.c:78:
+                      termios->c_cc[VEOL], termios->c_cc[VREPRINT],   \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: drivers/serial/bfin_serial_5xx.c:79:
+                      termios->c_cc[VDISCARD], termios->c_cc[VWERASE], \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: drivers/serial/bfin_serial_5xx.c:79:
+                      termios->c_cc[VDISCARD], termios->c_cc[VWERASE], \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#166: FILE: drivers/serial/bfin_serial_5xx.c:80:
+                      termios->c_cc[VLNEXT], termios->c_cc[VEOL2])$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: drivers/serial/bfin_serial_5xx.c:80:
+                      termios->c_cc[VLNEXT], termios->c_cc[VEOL2])$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#176: FILE: drivers/serial/bfin_serial_5xx.c:90:
+#define CONSOLE_BAUD_RATE ^I9600$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#179: FILE: drivers/serial/bfin_serial_5xx.c:93:
+#define CONSOLE_BAUD_RATE ^I19200$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#182: FILE: drivers/serial/bfin_serial_5xx.c:96:
+#define CONSOLE_BAUD_RATE ^I38400$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#185: FILE: drivers/serial/bfin_serial_5xx.c:99:
+#define CONSOLE_BAUD_RATE ^I57600$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#188: FILE: drivers/serial/bfin_serial_5xx.c:102:
+#define CONSOLE_BAUD_RATE ^I115200$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#192: FILE: drivers/serial/bfin_serial_5xx.c:106:
+static int bfin_console_initted = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#219: FILE: drivers/serial/bfin_serial_5xx.c:133:
+#define MIN(a,b)	((a) < (b) ? (a) : (b))
              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#219: FILE: drivers/serial/bfin_serial_5xx.c:133:
+#define MIN(a,b)	((a) < (b) ? (a) : (b))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#219: FILE: drivers/serial/bfin_serial_5xx.c:133:
+#define MIN(a,b)	((a) < (b) ? (a) : (b))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: drivers/serial/bfin_serial_5xx.c:150:
+    { 0, 50, 75, 110, 134, 150, 200, 300, 600, 1200, 1800, 2400, 4800,$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#236: FILE: drivers/serial/bfin_serial_5xx.c:150:
+static int baud_table[] =
+    { 0, 50, 75, 110, 134, 150, 200, 300, 600, 1200, 1800, 2400, 4800,

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: drivers/serial/bfin_serial_5xx.c:155:
+    { B0, B50, B75, B110, B134, B150, B200, B300, B600, B1200, B1800, B2400,$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#241: FILE: drivers/serial/bfin_serial_5xx.c:155:
+static int unix_baud_table[] =
+    { B0, B50, B75, B110, B134, B150, B200, B300, B600, B1200, B1800, B2400,

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(baud_table)
#246: FILE: drivers/serial/bfin_serial_5xx.c:160:
+#define BAUD_TABLE_SIZE (sizeof(baud_table)/sizeof(baud_table[0]))

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#246: FILE: drivers/serial/bfin_serial_5xx.c:160:
+#define BAUD_TABLE_SIZE (sizeof(baud_table)/sizeof(baud_table[0]))
                                            ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#276: FILE: drivers/serial/bfin_serial_5xx.c:190:
+		printk(badinfo, name, routine);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#280: FILE: drivers/serial/bfin_serial_5xx.c:194:
+		printk(badmagic, name, routine);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#291: FILE: drivers/serial/bfin_serial_5xx.c:205:
+	printk("%s(%d): bfin_rtsdtr(info=%x,set=%d)\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'bfin_rtsdtr', this function's name, in a string
#291: FILE: drivers/serial/bfin_serial_5xx.c:205:
+	printk("%s(%d): bfin_rtsdtr(info=%x,set=%d)\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:CAMELCASE: Avoid CamelCase: <pFIO_FLAG_C>
#298: FILE: drivers/serial/bfin_serial_5xx.c:212:
+		*pFIO_FLAG_C = (1 << 13);

CHECK:CAMELCASE: Avoid CamelCase: <pFIO_FLAG_S>
#302: FILE: drivers/serial/bfin_serial_5xx.c:216:
+		*pFIO_FLAG_S = (1 << 13);

WARNING:RETURN_VOID: void function return statements are not generally useful
#308: FILE: drivers/serial/bfin_serial_5xx.c:222:
+	return;
+}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->regs
#321: FILE: drivers/serial/bfin_serial_5xx.c:235:
+	struct uart_registers *regs = &(info->regs);

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#329: FILE: drivers/serial/bfin_serial_5xx.c:243:
+	*(regs->rpUART_IER) &= ~ETBEI;
 	^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_IER
#329: FILE: drivers/serial/bfin_serial_5xx.c:243:
+	*(regs->rpUART_IER) &= ~ETBEI;

CHECK:CAMELCASE: Avoid CamelCase: <rpUART_IER>
#329: FILE: drivers/serial/bfin_serial_5xx.c:243:
+	*(regs->rpUART_IER) &= ~ETBEI;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->regs
#336: FILE: drivers/serial/bfin_serial_5xx.c:250:
+	struct uart_registers *regs = &(info->regs);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_LSR
#344: FILE: drivers/serial/bfin_serial_5xx.c:258:
+		status = *(regs->rpUART_LSR);

CHECK:CAMELCASE: Avoid CamelCase: <rpUART_LSR>
#344: FILE: drivers/serial/bfin_serial_5xx.c:258:
+		status = *(regs->rpUART_LSR);

WARNING:TYPO_SPELLING: 'THRE' may be misspelled - perhaps 'THREE'?
#346: FILE: drivers/serial/bfin_serial_5xx.c:260:
+	} while (!(status & THRE));
 	                    ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <rpUART_THR>
#349: FILE: drivers/serial/bfin_serial_5xx.c:263:
+	    * (regs->rpUART_THR) = ch;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->regs
#358: FILE: drivers/serial/bfin_serial_5xx.c:272:
+	struct uart_registers *regs = &(info->regs);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_IER
#374: FILE: drivers/serial/bfin_serial_5xx.c:288:
+		*(regs->rpUART_IER) |= ETBEI;

WARNING:TABSTOP: Statements should start on a tabstop
#378: FILE: drivers/serial/bfin_serial_5xx.c:292:
+	    if (info->xmit_cnt && info->xmit_buf

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'regs->rpUART_IER'
#378: FILE: drivers/serial/bfin_serial_5xx.c:292:
+	    if (info->xmit_cnt && info->xmit_buf
+		&& !(*(regs->rpUART_IER) & ETBEI)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#379: FILE: drivers/serial/bfin_serial_5xx.c:293:
+	    if (info->xmit_cnt && info->xmit_buf
+		&& !(*(regs->rpUART_IER) & ETBEI)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_IER
#379: FILE: drivers/serial/bfin_serial_5xx.c:293:
+		&& !(*(regs->rpUART_IER) & ETBEI)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_IER
#380: FILE: drivers/serial/bfin_serial_5xx.c:294:
+		*(regs->rpUART_IER) |= ETBEI;

WARNING:RETURN_VOID: void function return statements are not generally useful
#408: FILE: drivers/serial/bfin_serial_5xx.c:322:
+	return;
+}

WARNING:TYPO_SPELLING: 'devied' may be misspelled - perhaps 'device'?
#420: FILE: drivers/serial/bfin_serial_5xx.c:334:
+	 * Current DMA receiving buffer is one PAGE, which is devied into 8
 	                                                      ^^^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#426: FILE: drivers/serial/bfin_serial_5xx.c:338:
+	if ((curpos = get_dma_curr_xcount(info->rx_DMA_channel)) == 0

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#427: FILE: drivers/serial/bfin_serial_5xx.c:339:
+	if ((curpos = get_dma_curr_xcount(info->rx_DMA_channel)) == 0
+	    && in_timer)

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'info->rx_DMA_channel'
#432: FILE: drivers/serial/bfin_serial_5xx.c:344:
+					 get_dma_curr_ycount(info->
+							     rx_DMA_channel)) *

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info->recv_head < 0'
#445: FILE: drivers/serial/bfin_serial_5xx.c:357:
+	if ((info->recv_head < 0) || (info->recv_head > PAGE_SIZE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info->recv_head > PAGE_SIZE'
#445: FILE: drivers/serial/bfin_serial_5xx.c:357:
+	if ((info->recv_head < 0) || (info->recv_head > PAGE_SIZE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info->recv_tail != info->recv_head'
#450: FILE: drivers/serial/bfin_serial_5xx.c:362:
+	if (info->is_cons && (info->recv_tail != info->recv_head))

WARNING:BRACES: braces {} are not necessary for single statement blocks
#453: FILE: drivers/serial/bfin_serial_5xx.c:365:
+	if (!tty) {
+		goto unlock_and_exit;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#462: FILE: drivers/serial/bfin_serial_5xx.c:374:
+		tty_insert_flip_string(tty,
+		       info->recv_buf + info->recv_tail, len);

WARNING:INDENTED_LABEL: labels should not be indented
#472: FILE: drivers/serial/bfin_serial_5xx.c:384:
+      unlock_and_exit:

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->regs
#478: FILE: drivers/serial/bfin_serial_5xx.c:390:
+	struct uart_registers *regs = &(info->regs);

WARNING:LINE_SPACING: Missing a blank line after declarations
#479: FILE: drivers/serial/bfin_serial_5xx.c:391:
+	struct uart_registers *regs = &(info->regs);
+	if (info->tx_xcount) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#479: FILE: drivers/serial/bfin_serial_5xx.c:391:
+	if (info->tx_xcount) {
+		return;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#489: FILE: drivers/serial/bfin_serial_5xx.c:400:
+	if (info->tx_xcount) {
+		goto clear_and_return;
+	}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info->xmit_cnt <= 0'
#498: FILE: drivers/serial/bfin_serial_5xx.c:409:
+	if ((info->xmit_cnt <= 0) || info->tty->stopped) {	/* TX ints off */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_IER
#525: FILE: drivers/serial/bfin_serial_5xx.c:435:
+		*(regs->rpUART_IER) |= ETBEI;

WARNING:INDENTED_LABEL: labels should not be indented
#541: FILE: drivers/serial/bfin_serial_5xx.c:451:
+      clear_and_return:

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->regs
#548: FILE: drivers/serial/bfin_serial_5xx.c:458:
+	struct uart_registers *uart_regs = &(info->regs);

WARNING:LINE_SPACING: Missing a blank line after declarations
#552: FILE: drivers/serial/bfin_serial_5xx.c:462:
+	unsigned short status = 0;
+	FUNC_ENTER();

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around uart_regs->rpUART_RBR
#560: FILE: drivers/serial/bfin_serial_5xx.c:470:
+		ch = (unsigned char)*(uart_regs->rpUART_RBR);

CHECK:CAMELCASE: Avoid CamelCase: <rpUART_RBR>
#560: FILE: drivers/serial/bfin_serial_5xx.c:470:
+		ch = (unsigned char)*(uart_regs->rpUART_RBR);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around uart_regs->rpUART_LSR
#564: FILE: drivers/serial/bfin_serial_5xx.c:474:
+			status = *(uart_regs->rpUART_LSR);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#582: FILE: drivers/serial/bfin_serial_5xx.c:492:
+		if (!tty) {
+			goto clear_and_exit;
+		}

WARNING:INDENTED_LABEL: labels should not be indented
#599: FILE: drivers/serial/bfin_serial_5xx.c:509:
+      clear_and_exit:

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->regs
#605: FILE: drivers/serial/bfin_serial_5xx.c:515:
+	struct uart_registers *regs = &(info->regs);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info->xmit_cnt <= 0'
#613: FILE: drivers/serial/bfin_serial_5xx.c:523:
+	if ((info->xmit_cnt <= 0) || info->tty->stopped) {	/* TX ints off */

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#615: FILE: drivers/serial/bfin_serial_5xx.c:525:
+		    *(regs->rpUART_IER) &= ~ETBEI;
 		    ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_IER
#615: FILE: drivers/serial/bfin_serial_5xx.c:525:
+		    *(regs->rpUART_IER) &= ~ETBEI;

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#631: FILE: drivers/serial/bfin_serial_5xx.c:541:
+		    *(regs->rpUART_IER) &= ~ETBEI;
 		    ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_IER
#631: FILE: drivers/serial/bfin_serial_5xx.c:541:
+		    *(regs->rpUART_IER) &= ~ETBEI;

WARNING:INDENTED_LABEL: labels should not be indented
#636: FILE: drivers/serial/bfin_serial_5xx.c:546:
+      clear_and_return:

WARNING:RETURN_VOID: void function return statements are not generally useful
#639: FILE: drivers/serial/bfin_serial_5xx.c:549:
+	return;
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#649: FILE: drivers/serial/bfin_serial_5xx.c:558:
+irqreturn_t rs_interrupt(int irq, void *dev_id, struct pt_regs * regs)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->regs
#652: FILE: drivers/serial/bfin_serial_5xx.c:561:
+	struct uart_registers *uart_regs = &(info->regs);

WARNING:LINE_SPACING: Missing a blank line after declarations
#657: FILE: drivers/serial/bfin_serial_5xx.c:566:
+	unsigned int sic_status = 0;
+	CSYNC;

CHECK:CAMELCASE: Avoid CamelCase: <pSICA_ISR1>
#659: FILE: drivers/serial/bfin_serial_5xx.c:568:
+	sic_status = *pSICA_ISR1;

CHECK:CAMELCASE: Avoid CamelCase: <pSIC_ISR>
#661: FILE: drivers/serial/bfin_serial_5xx.c:570:
+	sic_status = *pSIC_ISR;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around uart_regs->rpUART_IIR
#665: FILE: drivers/serial/bfin_serial_5xx.c:574:
+		iir = *(uart_regs->rpUART_IIR);

CHECK:CAMELCASE: Avoid CamelCase: <rpUART_IIR>
#665: FILE: drivers/serial/bfin_serial_5xx.c:574:
+		iir = *(uart_regs->rpUART_IIR);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around uart_regs->rpUART_LSR
#673: FILE: drivers/serial/bfin_serial_5xx.c:582:
+				lsr = *(uart_regs->rpUART_LSR);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around uart_regs->rpUART_LSR
#679: FILE: drivers/serial/bfin_serial_5xx.c:588:
+				if (*(uart_regs->rpUART_LSR) & DR) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'uart_regs->rpUART_LSR'
#679: FILE: drivers/serial/bfin_serial_5xx.c:588:
+				if (*(uart_regs->rpUART_LSR) & DR) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around uart_regs->rpUART_RBR
#681: FILE: drivers/serial/bfin_serial_5xx.c:590:
+					rx = *(uart_regs->rpUART_RBR);

WARNING:TYPO_SPELLING: 'THRE' may be misspelled - perhaps 'THREE'?
#689: FILE: drivers/serial/bfin_serial_5xx.c:598:
+				if (*(uart_regs->rpUART_LSR) & THRE) {
 				                               ^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around uart_regs->rpUART_LSR
#689: FILE: drivers/serial/bfin_serial_5xx.c:598:
+				if (*(uart_regs->rpUART_LSR) & THRE) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'uart_regs->rpUART_LSR'
#689: FILE: drivers/serial/bfin_serial_5xx.c:598:
+				if (*(uart_regs->rpUART_LSR) & THRE) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#689: FILE: drivers/serial/bfin_serial_5xx.c:598:
+				if (*(uart_regs->rpUART_LSR) & THRE) {
+					transmit_chars(info);
+				}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (tty->ldisc.write_wakeup)
#715: FILE: drivers/serial/bfin_serial_5xx.c:624:
+			(tty->ldisc.write_wakeup) (tty);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#719: FILE: drivers/serial/bfin_serial_5xx.c:628:
+	if (test_and_clear_bit(RS_EVENT_READ, &info->event)) {
+		dma_receive_chars(info, 0);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#722: FILE: drivers/serial/bfin_serial_5xx.c:631:
+	if (test_and_clear_bit(RS_EVENT_WRITE, &info->event)) {
+		dma_transmit_chars(info);
+	}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#733: FILE: drivers/serial/bfin_serial_5xx.c:642:
+ * ^Iserial interrupt routine -> (scheduler tqueue) ->$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#734: FILE: drivers/serial/bfin_serial_5xx.c:643:
+ * ^Ido_serial_hangup() -> tty->hangup() -> rs_hangup()$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#760: FILE: drivers/serial/bfin_serial_5xx.c:669:
+	if (((get_dma_curr_irqstat(info->rx_DMA_channel) & DMA_RUN) == 0)
+	    || get_dma_curr_irqstat(info->rx_DMA_channel) & DMA_DONE) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#774: FILE: drivers/serial/bfin_serial_5xx.c:683:
+		printk("bfin_serial: DMA started while already running!\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->regs
#790: FILE: drivers/serial/bfin_serial_5xx.c:699:
+	struct uart_registers *regs = &(info->regs);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_GCTL
#796: FILE: drivers/serial/bfin_serial_5xx.c:705:
+	*(regs->rpUART_GCTL) |= UCEN;

CHECK:CAMELCASE: Avoid CamelCase: <rpUART_GCTL>
#796: FILE: drivers/serial/bfin_serial_5xx.c:705:
+	*(regs->rpUART_GCTL) |= UCEN;

WARNING:LINE_SPACING: Missing a blank line after declarations
#805: FILE: drivers/serial/bfin_serial_5xx.c:714:
+		dma_addr_t dma_handle;
+		info->xmit_buf =

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#806: FILE: drivers/serial/bfin_serial_5xx.c:715:
+		    (unsigned char *)dma_alloc_coherent(NULL, PAGE_SIZE,

WARNING:LINE_SPACING: Missing a blank line after declarations
#818: FILE: drivers/serial/bfin_serial_5xx.c:727:
+		dma_addr_t dma_handle;
+		info->recv_buf =

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#819: FILE: drivers/serial/bfin_serial_5xx.c:728:
+		    (unsigned char *)dma_alloc_coherent(NULL, PAGE_SIZE,

WARNING:LINE_SPACING: Missing a blank line after declarations
#827: FILE: drivers/serial/bfin_serial_5xx.c:736:
+			dma_addr_t dma_handle = 0;
+			dma_free_coherent(NULL, PAGE_SIZE, info->xmit_buf,

WARNING:TYPO_SPELLING: 'reenabled' may be misspelled - perhaps 're-enabled'?
#840: FILE: drivers/serial/bfin_serial_5xx.c:749:
+	 * (they will be reenabled in bfin_change_speed())
 	                 ^^^^^^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#850: FILE: drivers/serial/bfin_serial_5xx.c:759:
+	info->xmit_cnt = info->xmit_head = info->xmit_tail = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#859: FILE: drivers/serial/bfin_serial_5xx.c:768:
+	info->recv_cnt = info->recv_head = info->recv_tail = 0;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->regs
#888: FILE: drivers/serial/bfin_serial_5xx.c:797:
+	struct uart_registers *regs = &(info->regs);

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#902: FILE: drivers/serial/bfin_serial_5xx.c:811:
+	while(!(*(regs->rpUART_LSR)&TEMT) || info->xmit_cnt>0)
 	                           ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#902: FILE: drivers/serial/bfin_serial_5xx.c:811:
+	while(!(*(regs->rpUART_LSR)&TEMT) || info->xmit_cnt>0)
 	                                                   ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_LSR
#902: FILE: drivers/serial/bfin_serial_5xx.c:811:
+	while(!(*(regs->rpUART_LSR)&TEMT) || info->xmit_cnt>0)

ERROR:SPACING: space required before the open parenthesis '('
#902: FILE: drivers/serial/bfin_serial_5xx.c:811:
+	while(!(*(regs->rpUART_LSR)&TEMT) || info->xmit_cnt>0)

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#906: FILE: drivers/serial/bfin_serial_5xx.c:815:
+	*(regs->rpUART_IER) = 0;
 	^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_IER
#906: FILE: drivers/serial/bfin_serial_5xx.c:815:
+	*(regs->rpUART_IER) = 0;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_GCTL
#908: FILE: drivers/serial/bfin_serial_5xx.c:817:
+	*(regs->rpUART_GCTL) &= ~UCEN;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_LCR
#910: FILE: drivers/serial/bfin_serial_5xx.c:819:
+	*(regs->rpUART_LCR) = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#924: FILE: drivers/serial/bfin_serial_5xx.c:833:
+		dma_addr_t dma_handle = 0;
+		dma_free_coherent(NULL, PAGE_SIZE, info->xmit_buf, dma_handle);

WARNING:LINE_SPACING: Missing a blank line after declarations
#934: FILE: drivers/serial/bfin_serial_5xx.c:843:
+		dma_addr_t dma_handle = 0;
+		dma_free_coherent(NULL, PAGE_SIZE, info->recv_buf, dma_handle);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#955: FILE: drivers/serial/bfin_serial_5xx.c:864:
+	unsigned cflag, flags, cval;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->regs
#956: FILE: drivers/serial/bfin_serial_5xx.c:865:
+	struct uart_registers *regs = &(info->regs);

WARNING:LINE_SPACING: Missing a blank line after declarations
#959: FILE: drivers/serial/bfin_serial_5xx.c:868:
+	int i;
+	FUNC_ENTER();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#990: FILE: drivers/serial/bfin_serial_5xx.c:899:
+		printk(KERN_DEBUG "%s: CRTSCTS not supported. Ignoring.\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#991: FILE: drivers/serial/bfin_serial_5xx.c:900:
+		       __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#999: FILE: drivers/serial/bfin_serial_5xx.c:908:
+		printk(KERN_DEBUG "%s: baud rate not supported: 0%o\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1000: FILE: drivers/serial/bfin_serial_5xx.c:909:
+		       __FUNCTION__, cflag & CBAUD);

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#1015: FILE: drivers/serial/bfin_serial_5xx.c:924:
+	*(regs->rpUART_DLL) = uart_dl;
 	^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_DLL
#1015: FILE: drivers/serial/bfin_serial_5xx.c:924:
+	*(regs->rpUART_DLL) = uart_dl;

CHECK:CAMELCASE: Avoid CamelCase: <rpUART_DLL>
#1015: FILE: drivers/serial/bfin_serial_5xx.c:924:
+	*(regs->rpUART_DLL) = uart_dl;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_DLH
#1017: FILE: drivers/serial/bfin_serial_5xx.c:926:
+	*(regs->rpUART_DLH) = uart_dl >> 8;

CHECK:CAMELCASE: Avoid CamelCase: <rpUART_DLH>
#1017: FILE: drivers/serial/bfin_serial_5xx.c:926:
+	*(regs->rpUART_DLH) = uart_dl >> 8;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_LCR
#1020: FILE: drivers/serial/bfin_serial_5xx.c:929:
+	*(regs->rpUART_LCR) = cval;

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#1026: FILE: drivers/serial/bfin_serial_5xx.c:935:
+	*(regs->rpUART_IER) = ERBFI | ELSI;
 	^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_IER
#1026: FILE: drivers/serial/bfin_serial_5xx.c:935:
+	*(regs->rpUART_IER) = ERBFI | ELSI;

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#1028: FILE: drivers/serial/bfin_serial_5xx.c:937:
+	*(regs->rpUART_IER) = ERBFI | ETBEI | ELSI;
 	^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_IER
#1028: FILE: drivers/serial/bfin_serial_5xx.c:937:
+	*(regs->rpUART_IER) = ERBFI | ETBEI | ELSI;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1034: FILE: drivers/serial/bfin_serial_5xx.c:943:
+        if(cflag & TIOCM_RI){$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1034: FILE: drivers/serial/bfin_serial_5xx.c:943:
+        if(cflag & TIOCM_RI){$

ERROR:SPACING: space required before the open brace '{'
#1034: FILE: drivers/serial/bfin_serial_5xx.c:943:
+        if(cflag & TIOCM_RI){

ERROR:SPACING: space required before the open parenthesis '('
#1034: FILE: drivers/serial/bfin_serial_5xx.c:943:
+        if(cflag & TIOCM_RI){

ERROR:CODE_INDENT: code indent should use tabs where possible
#1035: FILE: drivers/serial/bfin_serial_5xx.c:944:
+                *(regs->rpUART_GCTL) |= IREN;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1035: FILE: drivers/serial/bfin_serial_5xx.c:944:
+                *(regs->rpUART_GCTL) |= IREN;$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_GCTL
#1035: FILE: drivers/serial/bfin_serial_5xx.c:944:
+                *(regs->rpUART_GCTL) |= IREN;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1036: FILE: drivers/serial/bfin_serial_5xx.c:945:
+                SSYNC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1036: FILE: drivers/serial/bfin_serial_5xx.c:945:
+                SSYNC;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1037: FILE: drivers/serial/bfin_serial_5xx.c:946:
+                *(regs->rpUART_GCTL) |= RPOLC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1037: FILE: drivers/serial/bfin_serial_5xx.c:946:
+                *(regs->rpUART_GCTL) |= RPOLC;$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_GCTL
#1037: FILE: drivers/serial/bfin_serial_5xx.c:946:
+                *(regs->rpUART_GCTL) |= RPOLC;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1038: FILE: drivers/serial/bfin_serial_5xx.c:947:
+                SSYNC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1038: FILE: drivers/serial/bfin_serial_5xx.c:947:
+                SSYNC;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1039: FILE: drivers/serial/bfin_serial_5xx.c:948:
+                printk("KSDBG:irda enabled,rpolc changed\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1039: FILE: drivers/serial/bfin_serial_5xx.c:948:
+                printk("KSDBG:irda enabled,rpolc changed\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1039: FILE: drivers/serial/bfin_serial_5xx.c:948:
+                printk("KSDBG:irda enabled,rpolc changed\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1040: FILE: drivers/serial/bfin_serial_5xx.c:949:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1040: FILE: drivers/serial/bfin_serial_5xx.c:949:
+        }$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_GCTL
#1043: FILE: drivers/serial/bfin_serial_5xx.c:952:
+	*(regs->rpUART_GCTL) |= UCEN;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1047: FILE: drivers/serial/bfin_serial_5xx.c:956:
+	printk("bfin_change_speed: baud = %d, cval = 0x%x\n", baud_table[i],

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'bfin_change_speed', this function's name, in a string
#1047: FILE: drivers/serial/bfin_serial_5xx.c:956:
+	printk("bfin_change_speed: baud = %d, cval = 0x%x\n", baud_table[i],

WARNING:RETURN_VOID: void function return statements are not generally useful
#1050: FILE: drivers/serial/bfin_serial_5xx.c:959:
+	return;
+}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1063: FILE: drivers/serial/bfin_serial_5xx.c:972:
+	printk("ttyS%d console mode %s\n", info->line,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->regs
#1071: FILE: drivers/serial/bfin_serial_5xx.c:980:
+	struct uart_registers *regs = &(info->regs);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1083: FILE: drivers/serial/bfin_serial_5xx.c:992:
+	if (info->xmit_cnt > 0) {
+		dma_transmit_chars(info);
+	}

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#1090: FILE: drivers/serial/bfin_serial_5xx.c:999:
+	    *(regs->rpUART_IER) |= ETBEI;
 	    ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_IER
#1090: FILE: drivers/serial/bfin_serial_5xx.c:999:
+	    *(regs->rpUART_IER) |= ETBEI;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_LSR
#1092: FILE: drivers/serial/bfin_serial_5xx.c:1001:
+	if (*(regs->rpUART_LSR) & TEMT) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'regs->rpUART_LSR'
#1092: FILE: drivers/serial/bfin_serial_5xx.c:1001:
+	if (*(regs->rpUART_LSR) & TEMT) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1105: FILE: drivers/serial/bfin_serial_5xx.c:1013:
+static int rs_write(struct tty_struct *tty, const unsigned char *buf,
+{

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->regs
#1109: FILE: drivers/serial/bfin_serial_5xx.c:1017:
+	struct uart_registers *regs = &(info->regs);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1138: FILE: drivers/serial/bfin_serial_5xx.c:1046:
+		if (info->xmit_cnt > 0 && info->xmit_head == 0) {
+			dma_transmit_chars(info);
+		}

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#1145: FILE: drivers/serial/bfin_serial_5xx.c:1053:
+		    *(regs->rpUART_IER) |= ETBEI;
 		    ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_IER
#1145: FILE: drivers/serial/bfin_serial_5xx.c:1053:
+		    *(regs->rpUART_IER) |= ETBEI;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_LSR
#1147: FILE: drivers/serial/bfin_serial_5xx.c:1055:
+		while (!(*(regs->rpUART_LSR) & TEMT))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_LSR
#1150: FILE: drivers/serial/bfin_serial_5xx.c:1058:
+		if (*(regs->rpUART_LSR) & TEMT) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'regs->rpUART_LSR'
#1150: FILE: drivers/serial/bfin_serial_5xx.c:1058:
+		if (*(regs->rpUART_LSR) & TEMT) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (tty->ldisc.write_wakeup)
#1212: FILE: drivers/serial/bfin_serial_5xx.c:1120:
+		(tty->ldisc.write_wakeup) (tty);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_serial.baud_base != info->baud_base'
#1290: FILE: drivers/serial/bfin_serial_5xx.c:1198:
+		if ((new_serial.baud_base != info->baud_base) ||
+		    (new_serial.type != info->type) ||
+		    (new_serial.close_delay != info->close_delay) ||
+		    ((new_serial.flags & ~S_USR_MASK) !=
+		     (info->flags & ~S_USR_MASK)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_serial.type != info->type'
#1290: FILE: drivers/serial/bfin_serial_5xx.c:1198:
+		if ((new_serial.baud_base != info->baud_base) ||
+		    (new_serial.type != info->type) ||
+		    (new_serial.close_delay != info->close_delay) ||
+		    ((new_serial.flags & ~S_USR_MASK) !=
+		     (info->flags & ~S_USR_MASK)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_serial.close_delay != info->close_delay'
#1290: FILE: drivers/serial/bfin_serial_5xx.c:1198:
+		if ((new_serial.baud_base != info->baud_base) ||
+		    (new_serial.type != info->type) ||
+		    (new_serial.close_delay != info->close_delay) ||
+		    ((new_serial.flags & ~S_USR_MASK) !=
+		     (info->flags & ~S_USR_MASK)))

WARNING:INDENTED_LABEL: labels should not be indented
#1316: FILE: drivers/serial/bfin_serial_5xx.c:1224:
+      check_and_exit:

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1325: FILE: drivers/serial/bfin_serial_5xx.c:1233:
+ * ^I    is emptied.  On bus types like RS485, the transmitter must$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1326: FILE: drivers/serial/bfin_serial_5xx.c:1234:
+ * ^I    release the bus after transmitting. This must be done when$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1327: FILE: drivers/serial/bfin_serial_5xx.c:1235:
+ * ^I    the transmit shift register is empty, not be done when the$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1328: FILE: drivers/serial/bfin_serial_5xx.c:1236:
+ * ^I    transmit holding register is empty.  This functionality$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1329: FILE: drivers/serial/bfin_serial_5xx.c:1237:
+ * ^I    allows an RS485 driver to be written in user space.$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd != TIOCGSERIAL'
#1375: FILE: drivers/serial/bfin_serial_5xx.c:1283:
+	if ((cmd != TIOCGSERIAL) && (cmd != TIOCSSERIAL) &&
+	    (cmd != TIOCSERCONFIG) && (cmd != TIOCSERGWILD) &&
+	    (cmd != TIOCSERSWILD) && (cmd != TIOCSERGSTRUCT)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd != TIOCSSERIAL'
#1375: FILE: drivers/serial/bfin_serial_5xx.c:1283:
+	if ((cmd != TIOCGSERIAL) && (cmd != TIOCSSERIAL) &&
+	    (cmd != TIOCSERCONFIG) && (cmd != TIOCSERGWILD) &&
+	    (cmd != TIOCSERSWILD) && (cmd != TIOCSERGSTRUCT)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd != TIOCSERCONFIG'
#1375: FILE: drivers/serial/bfin_serial_5xx.c:1283:
+	if ((cmd != TIOCGSERIAL) && (cmd != TIOCSSERIAL) &&
+	    (cmd != TIOCSERCONFIG) && (cmd != TIOCSERGWILD) &&
+	    (cmd != TIOCSERSWILD) && (cmd != TIOCSERGSTRUCT)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd != TIOCSERGWILD'
#1375: FILE: drivers/serial/bfin_serial_5xx.c:1283:
+	if ((cmd != TIOCGSERIAL) && (cmd != TIOCSSERIAL) &&
+	    (cmd != TIOCSERCONFIG) && (cmd != TIOCSERGWILD) &&
+	    (cmd != TIOCSERSWILD) && (cmd != TIOCSERGSTRUCT)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd != TIOCSERSWILD'
#1375: FILE: drivers/serial/bfin_serial_5xx.c:1283:
+	if ((cmd != TIOCGSERIAL) && (cmd != TIOCSSERIAL) &&
+	    (cmd != TIOCSERCONFIG) && (cmd != TIOCSERGWILD) &&
+	    (cmd != TIOCSERSWILD) && (cmd != TIOCSERGSTRUCT)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd != TIOCSERGSTRUCT'
#1375: FILE: drivers/serial/bfin_serial_5xx.c:1283:
+	if ((cmd != TIOCGSERIAL) && (cmd != TIOCSSERIAL) &&
+	    (cmd != TIOCSERCONFIG) && (cmd != TIOCSERGWILD) &&
+	    (cmd != TIOCSERSWILD) && (cmd != TIOCSERGSTRUCT)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1402: FILE: drivers/serial/bfin_serial_5xx.c:1310:
+		printk("TIOCSER?WILD ioctl obsolete, ignored.\n");

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1435: FILE: drivers/serial/bfin_serial_5xx.c:1343:
+static void rs_close(struct tty_struct *tty, struct file *filp)
                                                           ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1447: FILE: drivers/serial/bfin_serial_5xx.c:1355:
+	if (tty_hung_up_p(filp)) {
 	                  ^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tty->count == 1'
#1452: FILE: drivers/serial/bfin_serial_5xx.c:1360:
+	if ((tty->count == 1) && (info->count != 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info->count != 1'
#1452: FILE: drivers/serial/bfin_serial_5xx.c:1360:
+	if ((tty->count == 1) && (info->count != 1)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1460: FILE: drivers/serial/bfin_serial_5xx.c:1368:
+		printk("rs_close: bad serial port count; tty->count is 1, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rs_close', this function's name, in a string
#1460: FILE: drivers/serial/bfin_serial_5xx.c:1368:
+		printk("rs_close: bad serial port count; tty->count is 1, "

WARNING:SPLIT_STRING: quoted string split across lines
#1461: FILE: drivers/serial/bfin_serial_5xx.c:1369:
+		printk("rs_close: bad serial port count; tty->count is 1, "
+		       "info->count is %d\n", info->count);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1465: FILE: drivers/serial/bfin_serial_5xx.c:1373:
+		printk("rs_close: bad serial port count for ttyS%d: %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rs_close', this function's name, in a string
#1465: FILE: drivers/serial/bfin_serial_5xx.c:1373:
+		printk("rs_close: bad serial port count for ttyS%d: %d\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (tty->ldisc.close)
#1503: FILE: drivers/serial/bfin_serial_5xx.c:1411:
+			(tty->ldisc.close) (tty);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (tty->ldisc.open)
#1507: FILE: drivers/serial/bfin_serial_5xx.c:1415:
+			(tty->ldisc.open) (tty);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1553: FILE: drivers/serial/bfin_serial_5xx.c:1461:
+static int block_til_ready(struct tty_struct *tty, struct file *filp,
                                                                 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1615: FILE: drivers/serial/bfin_serial_5xx.c:1523:
+		if (tty_hung_up_p(filp) || !(info->flags & S_INITIALIZED)) {
 		                  ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1637: FILE: drivers/serial/bfin_serial_5xx.c:1545:
+	if (!tty_hung_up_p(filp))
 	                   ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1648: FILE: drivers/serial/bfin_serial_5xx.c:1556:
+irqreturn_t uart_rxdma_done(int irq, void *dev_id, struct pt_regs * pt_regs)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1658: FILE: drivers/serial/bfin_serial_5xx.c:1566:
+irqreturn_t uart_txdma_done(int irq, void *dev_id, struct pt_regs * pt_regs)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->regs
#1661: FILE: drivers/serial/bfin_serial_5xx.c:1569:
+	struct uart_registers *regs = &(info->regs);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1695: FILE: drivers/serial/bfin_serial_5xx.c:1603:
+	if (request_dma(info->rx_DMA_channel, "BFIN_UART_RX") < 0) {
[...]
+	} else
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1696: FILE: drivers/serial/bfin_serial_5xx.c:1604:
+		printk("Unable to attach BlackFin UART RX DMA channel\n");

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1698: FILE: drivers/serial/bfin_serial_5xx.c:1606:
+		return -EBUSY;
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#1698: FILE: drivers/serial/bfin_serial_5xx.c:1606:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1701: FILE: drivers/serial/bfin_serial_5xx.c:1609:
+	if (request_dma(info->tx_DMA_channel, "BFIN_UART_TX") < 0) {
[...]
+	} else
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1702: FILE: drivers/serial/bfin_serial_5xx.c:1610:
+		printk("Unable to attach BlackFin UART TX DMA channel\n");

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1704: FILE: drivers/serial/bfin_serial_5xx.c:1612:
+		return -EBUSY;
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#1704: FILE: drivers/serial/bfin_serial_5xx.c:1612:
+	} else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1711: FILE: drivers/serial/bfin_serial_5xx.c:1619:
+		printk("Unable to attach BlackFin UART RX interrupt\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1718: FILE: drivers/serial/bfin_serial_5xx.c:1626:
+		printk("Unable to attach BlackFin UART TX interrupt\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#1729: FILE: drivers/serial/bfin_serial_5xx.c:1637:
+	int flags = 0;
+	local_irq_save(flags);

CHECK:CAMELCASE: Avoid CamelCase: <pUART_THR>
#1755: FILE: drivers/serial/bfin_serial_5xx.c:1663:
+	info->regs.rpUART_THR = pUART_THR;

CHECK:CAMELCASE: Avoid CamelCase: <pUART_RBR>
#1756: FILE: drivers/serial/bfin_serial_5xx.c:1664:
+	info->regs.rpUART_RBR = pUART_RBR;

CHECK:CAMELCASE: Avoid CamelCase: <pUART_DLL>
#1757: FILE: drivers/serial/bfin_serial_5xx.c:1665:
+	info->regs.rpUART_DLL = pUART_DLL;

CHECK:CAMELCASE: Avoid CamelCase: <pUART_IER>
#1758: FILE: drivers/serial/bfin_serial_5xx.c:1666:
+	info->regs.rpUART_IER = pUART_IER;

CHECK:CAMELCASE: Avoid CamelCase: <pUART_DLH>
#1759: FILE: drivers/serial/bfin_serial_5xx.c:1667:
+	info->regs.rpUART_DLH = pUART_DLH;

CHECK:CAMELCASE: Avoid CamelCase: <pUART_IIR>
#1760: FILE: drivers/serial/bfin_serial_5xx.c:1668:
+	info->regs.rpUART_IIR = pUART_IIR;

CHECK:CAMELCASE: Avoid CamelCase: <pUART_LCR>
#1761: FILE: drivers/serial/bfin_serial_5xx.c:1669:
+	info->regs.rpUART_LCR = pUART_LCR;

CHECK:CAMELCASE: Avoid CamelCase: <rpUART_MCR>
#1762: FILE: drivers/serial/bfin_serial_5xx.c:1670:
+	info->regs.rpUART_MCR = pUART_MCR;

CHECK:CAMELCASE: Avoid CamelCase: <pUART_MCR>
#1762: FILE: drivers/serial/bfin_serial_5xx.c:1670:
+	info->regs.rpUART_MCR = pUART_MCR;

CHECK:CAMELCASE: Avoid CamelCase: <pUART_LSR>
#1763: FILE: drivers/serial/bfin_serial_5xx.c:1671:
+	info->regs.rpUART_LSR = pUART_LSR;

CHECK:CAMELCASE: Avoid CamelCase: <rpUART_SCR>
#1764: FILE: drivers/serial/bfin_serial_5xx.c:1672:
+	info->regs.rpUART_SCR = pUART_SCR;

CHECK:CAMELCASE: Avoid CamelCase: <pUART_SCR>
#1764: FILE: drivers/serial/bfin_serial_5xx.c:1672:
+	info->regs.rpUART_SCR = pUART_SCR;

CHECK:CAMELCASE: Avoid CamelCase: <pUART_GCTL>
#1765: FILE: drivers/serial/bfin_serial_5xx.c:1673:
+	info->regs.rpUART_GCTL = pUART_GCTL;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1769: FILE: drivers/serial/bfin_serial_5xx.c:1677:
+
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#1776: FILE: drivers/serial/bfin_serial_5xx.c:1684:
+	int flags = 0;
+	local_irq_save(flags);

CHECK:CAMELCASE: Avoid CamelCase: <pUART1_THR>
#1802: FILE: drivers/serial/bfin_serial_5xx.c:1710:
+	info->regs.rpUART_THR = pUART1_THR;

CHECK:CAMELCASE: Avoid CamelCase: <pUART1_RBR>
#1803: FILE: drivers/serial/bfin_serial_5xx.c:1711:
+	info->regs.rpUART_RBR = pUART1_RBR;

CHECK:CAMELCASE: Avoid CamelCase: <pUART1_DLL>
#1804: FILE: drivers/serial/bfin_serial_5xx.c:1712:
+	info->regs.rpUART_DLL = pUART1_DLL;

CHECK:CAMELCASE: Avoid CamelCase: <pUART1_IER>
#1805: FILE: drivers/serial/bfin_serial_5xx.c:1713:
+	info->regs.rpUART_IER = pUART1_IER;

CHECK:CAMELCASE: Avoid CamelCase: <pUART1_DLH>
#1806: FILE: drivers/serial/bfin_serial_5xx.c:1714:
+	info->regs.rpUART_DLH = pUART1_DLH;

CHECK:CAMELCASE: Avoid CamelCase: <pUART1_IIR>
#1807: FILE: drivers/serial/bfin_serial_5xx.c:1715:
+	info->regs.rpUART_IIR = pUART1_IIR;

CHECK:CAMELCASE: Avoid CamelCase: <pUART1_LCR>
#1808: FILE: drivers/serial/bfin_serial_5xx.c:1716:
+	info->regs.rpUART_LCR = pUART1_LCR;

CHECK:CAMELCASE: Avoid CamelCase: <pUART1_MCR>
#1809: FILE: drivers/serial/bfin_serial_5xx.c:1717:
+	info->regs.rpUART_MCR = pUART1_MCR;

CHECK:CAMELCASE: Avoid CamelCase: <pUART1_LSR>
#1810: FILE: drivers/serial/bfin_serial_5xx.c:1718:
+	info->regs.rpUART_LSR = pUART1_LSR;

CHECK:CAMELCASE: Avoid CamelCase: <pUART1_SCR>
#1811: FILE: drivers/serial/bfin_serial_5xx.c:1719:
+	info->regs.rpUART_SCR = pUART1_SCR;

CHECK:CAMELCASE: Avoid CamelCase: <pUART1_GCTL>
#1812: FILE: drivers/serial/bfin_serial_5xx.c:1720:
+	info->regs.rpUART_GCTL = pUART1_GCTL;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1816: FILE: drivers/serial/bfin_serial_5xx.c:1724:
+
+}

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1825: FILE: drivers/serial/bfin_serial_5xx.c:1733:
+int rs_open(struct tty_struct *tty, struct file *filp)
                                                  ^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'line < 0'
#1833: FILE: drivers/serial/bfin_serial_5xx.c:1741:
+	if ((line < 0) || (line >= NR_PORTS))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'line >= NR_PORTS'
#1833: FILE: drivers/serial/bfin_serial_5xx.c:1741:
+	if ((line < 0) || (line >= NR_PORTS))

CHECK:BRACES: braces {} should be used on all arms of this statement
#1839: FILE: drivers/serial/bfin_serial_5xx.c:1747:
+			if (info->tty != tty)
[...]
+			else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1841: FILE: drivers/serial/bfin_serial_5xx.c:1749:
+				return -EBUSY;
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#1841: FILE: drivers/serial/bfin_serial_5xx.c:1749:
+			else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1851: FILE: drivers/serial/bfin_serial_5xx.c:1759:
+			if (info->tty != tty)
[...]
+			else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1853: FILE: drivers/serial/bfin_serial_5xx.c:1761:
+				return -EBUSY;
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#1853: FILE: drivers/serial/bfin_serial_5xx.c:1761:
+			else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1863: FILE: drivers/serial/bfin_serial_5xx.c:1771:
+	printk("%s at irq = %d", tty->name, info->rx_irq);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1864: FILE: drivers/serial/bfin_serial_5xx.c:1772:
+	printk(" is a builtin BlackFin UART\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1872: FILE: drivers/serial/bfin_serial_5xx.c:1780:
+	printk("bfin_open %s%d, count = %d\n", tty->driver.name, info->line,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1886: FILE: drivers/serial/bfin_serial_5xx.c:1794:
+	retval = block_til_ready(tty, filp, info);
 	                              ^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1895: FILE: drivers/serial/bfin_serial_5xx.c:1803:
+	printk("BlackFin BF533 serial driver version 2.00 With DMA Support \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1895: FILE: drivers/serial/bfin_serial_5xx.c:1803:
+	printk("BlackFin BF533 serial driver version 2.00 With DMA Support \n");

WARNING:CONST_STRUCT: struct tty_operations should normally be const
#1898: FILE: drivers/serial/bfin_serial_5xx.c:1806:
+static struct tty_operations rs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1946: FILE: drivers/serial/bfin_serial_5xx.c:1854:
+		printk("Blackfin: Couldn't register serial driver\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1951: FILE: drivers/serial/bfin_serial_5xx.c:1859:
+	for (i = 0; i < NR_PORTS; i++) {
+		tty_register_device(bfin_serial_driver, i, NULL);
+	}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around info->regs
#1963: FILE: drivers/serial/bfin_serial_5xx.c:1871:
+	struct uart_registers *regs = &(info->regs);

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#1970: FILE: drivers/serial/bfin_serial_5xx.c:1878:
+	*(regs->rpUART_IER) &= ~(ETBEI | ERBFI);
 	^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_IER
#1970: FILE: drivers/serial/bfin_serial_5xx.c:1878:
+	*(regs->rpUART_IER) &= ~(ETBEI | ERBFI);

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#1976: FILE: drivers/serial/bfin_serial_5xx.c:1884:
+	    *(regs->rpUART_DLL) = uart_dl;
 	    ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_DLL
#1976: FILE: drivers/serial/bfin_serial_5xx.c:1884:
+	    *(regs->rpUART_DLL) = uart_dl;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_DLH
#1978: FILE: drivers/serial/bfin_serial_5xx.c:1886:
+	*(regs->rpUART_DLH) = uart_dl >> 8;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_LCR
#1981: FILE: drivers/serial/bfin_serial_5xx.c:1889:
+	*(regs->rpUART_LCR) |= WLS(8);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_LCR
#1983: FILE: drivers/serial/bfin_serial_5xx.c:1891:
+	*(regs->rpUART_LCR) &= ~PEN;

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#1989: FILE: drivers/serial/bfin_serial_5xx.c:1897:
+	*(regs->rpUART_IER) |= ELSI;
 	^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_IER
#1989: FILE: drivers/serial/bfin_serial_5xx.c:1897:
+	*(regs->rpUART_IER) |= ELSI;

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#1991: FILE: drivers/serial/bfin_serial_5xx.c:1899:
+	*(regs->rpUART_IER) |= (ETBEI | ELSI);
 	^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_IER
#1991: FILE: drivers/serial/bfin_serial_5xx.c:1899:
+	*(regs->rpUART_IER) |= (ETBEI | ELSI);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->rpUART_GCTL
#1995: FILE: drivers/serial/bfin_serial_5xx.c:1903:
+	*(regs->rpUART_GCTL) |= UCEN;

WARNING:RETURN_VOID: void function return statements are not generally useful
#2000: FILE: drivers/serial/bfin_serial_5xx.c:1908:
+	return;
+}

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#2014: FILE: drivers/serial/bfin_serial_5xx.c:1922:
+		n = simple_strtoul(arg, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:SPACING: space prohibited after that '-' (ctx:WxW)
#2060: FILE: drivers/serial/bfin_serial_5xx.c:1967:
+	.index = - 1,
 	         ^

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#2065: FILE: drivers/serial/bfin_serial_5xx.c:1972:
+	static int initialized = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2066: FILE: drivers/serial/bfin_serial_5xx.c:1973:
+	static int initialized = 0;
+	if (initialized)	/* this allow us to call bf533_console_init() more

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#2066: FILE: drivers/serial/bfin_serial_5xx.c:1973:
+	if (initialized)	/* this allow us to call bf533_console_init() more
than once */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2068: FILE: drivers/serial/bfin_serial_5xx.c:1974:
+	if (initialized)	/* this allow us to call bf533_console_init() more
+		return 0;

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2092: FILE: drivers/serial/bfin_serial_5xx.h:1:
+/* bf533_serial.h: Definitions for the BlackFin DSP serial driver.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2094: FILE: drivers/serial/bfin_serial_5xx.h:3:
+ * ^I^I^IBuyWays B.V. (www.buyways.nl)$

CHECK:CAMELCASE: Avoid CamelCase: <_Bf533_SERIAL_H>
#2108: FILE: drivers/serial/bfin_serial_5xx.h:17:
+#ifndef _Bf533_SERIAL_H

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#2121: FILE: drivers/serial/bfin_serial_5xx.h:30:
+} __attribute__ ((packed));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2134: FILE: drivers/serial/bfin_serial_5xx.h:42:
+#define S_HUP_NOTIFY		0x0001	/* Notify getty on hangups and closes on
+#define S_FLAGS			0x0FFF	/* Possible legal S flags */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2137: FILE: drivers/serial/bfin_serial_5xx.h:44:
+#define S_USR_MASK		0x0430	/* Legal flags that non-privileged users
+

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2152: FILE: drivers/serial/bfin_serial_5xx.h:59:
+	volatile unsigned short *rpUART_THR;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2153: FILE: drivers/serial/bfin_serial_5xx.h:60:
+	volatile unsigned short *rpUART_RBR;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2154: FILE: drivers/serial/bfin_serial_5xx.h:61:
+	volatile unsigned short *rpUART_DLL;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2155: FILE: drivers/serial/bfin_serial_5xx.h:62:
+	volatile unsigned short *rpUART_IER;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2156: FILE: drivers/serial/bfin_serial_5xx.h:63:
+	volatile unsigned short *rpUART_DLH;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2157: FILE: drivers/serial/bfin_serial_5xx.h:64:
+	volatile unsigned short *rpUART_IIR;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2158: FILE: drivers/serial/bfin_serial_5xx.h:65:
+	volatile unsigned short *rpUART_LCR;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2159: FILE: drivers/serial/bfin_serial_5xx.h:66:
+	volatile unsigned short *rpUART_MCR;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2160: FILE: drivers/serial/bfin_serial_5xx.h:67:
+	volatile unsigned short *rpUART_LSR;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2161: FILE: drivers/serial/bfin_serial_5xx.h:68:
+	volatile unsigned short *rpUART_SCR;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2162: FILE: drivers/serial/bfin_serial_5xx.h:69:
+	volatile unsigned short *rpUART_GCTL;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#2208: FILE: drivers/serial/bfin_serial_5xx.h:115:
+	spinlock_t xmit_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#2213: FILE: drivers/serial/bfin_serial_5xx.h:120:
+	spinlock_t recv_lock;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000093134.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 43 errors, 154 warnings, 165 checks, 2178 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000093134.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
