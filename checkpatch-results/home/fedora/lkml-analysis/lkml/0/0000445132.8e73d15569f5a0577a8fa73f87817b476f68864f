WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
> Strangely enough I'm getting processes exiting with preemption count of 1 

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#61: FILE: CREDITS:980:
=20

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:TYPO_SPELLING: 'reenabled' may be misspelled - perhaps 're-enabled'?
#185: FILE: Documentation/preempt-locking.txt:74:
+n-times in a code path, and preemption will not be reenabled until the n-t=
                                                    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#228: FILE: MAINTAINERS:1252:
+P:	Robert M. Love
+M:	rml@tech9.net

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'S:' before 'W:'
#232: FILE: MAINTAINERS:1256:
+W:	http://tech9.net/rml/linux
+S:	Supported

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#349: FILE: arch/arm/tools/getconstants.c:44:
+DEFN("IRQSTAT_BH_COUNT",	(unsigned long)&(((irq_cpustat_t *)0)->__local_bh=
                         	                                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'boundry' may be misspelled - perhaps 'boundary'?
#404: FILE: arch/i386/kernel/entry.S:83:
+ * byte boundry (we put that here as a shift count)
         ^^^^^^^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#514: FILE: arch/i386/kernel/i387.c:69:
+=09
 ^

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#528: FILE: arch/i386/kernel/smp.c:356:
+	unsigned long cpu;;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#532: FILE: arch/i386/kernel/smp.c:360:
+	cpu =3D smp_processor_id();
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#556: FILE: arch/i386/kernel/smp.c:437:
+=09
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#558: FILE: arch/i386/kernel/smp.c:439:
+	cpu_mask =3D mm->cpu_vm_mask & ~(1 << smp_processor_id());
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#569: FILE: arch/i386/kernel/smp.c:448:
+=09
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#571: FILE: arch/i386/kernel/smp.c:450:
+	cpu_mask =3D mm->cpu_vm_mask & ~(1 << smp_processor_id());
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:ExV)
#588: FILE: arch/i386/kernel/smp.c:468:
+=09
 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#590: FILE: arch/i386/kernel/smp.c:470:
+	cpu_mask =3D mm->cpu_vm_mask & ~(1 << smp_processor_id());
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#687: FILE: arch/mips/kernel/irq.c:314:
+	while (--current->preempt_count =3D=3D 0) {
 	                                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#687: FILE: arch/mips/kernel/irq.c:314:
+	while (--current->preempt_count =3D=3D 0) {
 	                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#691: FILE: arch/mips/kernel/irq.c:318:
+		if (current->need_resched =3D=3D 0) {
 		                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#691: FILE: arch/mips/kernel/irq.c:318:
+		if (current->need_resched =3D=3D 0) {
 		                             ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#691: FILE: arch/mips/kernel/irq.c:318:
+		if (current->need_resched =3D=3D 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#691: FILE: arch/mips/kernel/irq.c:318:
+		if (current->need_resched =3D=3D 0) {
+			break;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#695: FILE: arch/mips/kernel/irq.c:322:
+		current->preempt_count ++;
 		                       ^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#697: FILE: arch/mips/kernel/irq.c:324:
+		if (user_mode(regs)) {
[...]
+		} else {
[...]

WARNING:TYPO_SPELLING: 'reenabled' may be misspelled - perhaps 're-enabled'?
#906: FILE: arch/sh/kernel/irq.c:233:
+	 * and interrupts might get reenabled during them... bump
 	                            ^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#908: FILE: arch/sh/kernel/irq.c:235:
+ ^I * called here is pending...$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#908: FILE: arch/sh/kernel/irq.c:235:
+ ^I * called here is pending...$

ERROR:CODE_INDENT: code indent should use tabs where possible
#909: FILE: arch/sh/kernel/irq.c:236:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#909: FILE: arch/sh/kernel/irq.c:236:
+ ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#910: FILE: arch/sh/kernel/irq.c:237:
+ ^Ipreempt_disable();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#910: FILE: arch/sh/kernel/irq.c:237:
+ ^Ipreempt_disable();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#910: FILE: arch/sh/kernel/irq.c:237:
+ ^Ipreempt_disable();$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1114: FILE: include/asm-arm/smplock.h:49:
+	if (current->lock_depth =3D=3D -1)
 	                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1114: FILE: include/asm-arm/smplock.h:49:
+	if (current->lock_depth =3D=3D -1)
 	                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#1114: FILE: include/asm-arm/smplock.h:49:
+	if (current->lock_depth =3D=3D -1)
 	                               ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1114: FILE: include/asm-arm/smplock.h:49:
+	if (current->lock_depth =3D=3D -1)

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1152: FILE: include/asm-arm/softirq.h:19:
+#define local_bh_enable() do { _local_bh_enable(); preempt_enable(); } whi=
                                                                           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1152: FILE: include/asm-arm/softirq.h:19:
+#define local_bh_enable() do { _local_bh_enable(); preempt_enable(); } whi=

ERROR:SPACING: space required before the open parenthesis '('
#1264: FILE: include/asm-i386/i387.h:27:
+#define kernel_fpu_end() do { stts(); preempt_enable(); } while(0)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1351: FILE: include/asm-i386/smplock.h:54:
+	if (current->lock_depth =3D=3D -1)
 	                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1351: FILE: include/asm-i386/smplock.h:54:
+	if (current->lock_depth =3D=3D -1)
 	                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#1351: FILE: include/asm-i386/smplock.h:54:
+	if (current->lock_depth =3D=3D -1)
 	                               ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1351: FILE: include/asm-i386/smplock.h:54:
+	if (current->lock_depth =3D=3D -1)

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1396: FILE: include/asm-i386/softirq.h:51:
+#define local_bh_enable() do { _local_bh_enable(); preempt_enable(); } whi=
                                                                           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1396: FILE: include/asm-i386/softirq.h:51:
+#define local_bh_enable() do { _local_bh_enable(); preempt_enable(); } whi=

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1437: FILE: include/asm-i386/spinlock.h:129:
 }
+static inline void _raw_spin_lock(spinlock_t *lock)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1455: FILE: include/asm-i386/spinlock.h:194:
 }
+static inline void _raw_write_lock(rwlock_t *rw)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1467: FILE: include/asm-i386/spinlock.h:203:
 }
+#define _raw_read_unlock(rw)		asm volatile("lock ; incl %0" :"=3Dm" ((rw)-=

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1467: FILE: include/asm-i386/spinlock.h:203:
+#define _raw_read_unlock(rw)		asm volatile("lock ; incl %0" :"=3Dm" ((rw)-=
                             		                              ^

ERROR:SPACING: spaces required around that '-=' (ctx:VxE)
#1467: FILE: include/asm-i386/spinlock.h:203:
+#define _raw_read_unlock(rw)		asm volatile("lock ; incl %0" :"=3Dm" ((rw)-=
                             		                                           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1467: FILE: include/asm-i386/spinlock.h:203:
+#define _raw_read_unlock(rw)		asm volatile("lock ; incl %0" :"=3Dm" ((rw)-=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1469: FILE: include/asm-i386/spinlock.h:204:
+#define _raw_write_unlock(rw)	asm volatile("lock ; addl $" RW_LOCK_BIAS_ST=
                              	                                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1469: FILE: include/asm-i386/spinlock.h:204:
+#define _raw_write_unlock(rw)	asm volatile("lock ; addl $" RW_LOCK_BIAS_ST=

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1509: FILE: include/asm-mips/smplock.h:56:
+	if (current->lock_depth =3D=3D -1)
 	                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1509: FILE: include/asm-mips/smplock.h:56:
+	if (current->lock_depth =3D=3D -1)
 	                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#1509: FILE: include/asm-mips/smplock.h:56:
+	if (current->lock_depth =3D=3D -1)
 	                               ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1509: FILE: include/asm-mips/smplock.h:56:
+	if (current->lock_depth =3D=3D -1)

WARNING:INLINE: plain inline is preferred over __inline__
#1557: FILE: include/asm-mips/system.h:263:
+extern __inline__ int intr_on(void)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1560: FILE: include/asm-mips/system.h:266:
+	unsigned long flags;
+	save_flags(flags);

WARNING:INLINE: plain inline is preferred over __inline__
#1564: FILE: include/asm-mips/system.h:270:
+extern __inline__ int intr_off(void)

ERROR:SPACING: space prohibited after that '!' (ctx:WxW)
#1566: FILE: include/asm-mips/system.h:272:
+	return ! intr_on();
 	       ^

ERROR:SPACING: space required before the open parenthesis '('
#1605: FILE: include/asm-sh/smplock.h:18:
+#define release_kernel_lock(task, cpu)		do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1606: FILE: include/asm-sh/smplock.h:19:
+#define reacquire_kernel_lock(task)		do { } while(0)

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#1626: FILE: include/asm-sh/smplock.h:38:
+#define kernel_locked()		spin_is_locked(&kernel_flag)

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

ERROR:SPACING: exactly one space required after that #elif
#1627: FILE: include/asm-sh/smplock.h:39:
+#elif  CONFIG_PREEMPT

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'task' may be better as '(task)' to avoid precedence issues
#1636: FILE: include/asm-sh/smplock.h:48:
+#define release_kernel_lock(task, cpu) \
+do { \
+	if (task->lock_depth >=3D 0) \
+		spin_unlock(&kernel_flag); \
+	release_irqlock(cpu); \
+	__sti(); \
+} while (0)

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#1638: FILE: include/asm-sh/smplock.h:50:
+	if (task->lock_depth >=3D 0) \
 	                     ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'task' may be better as '(task)' to avoid precedence issues
#1647: FILE: include/asm-sh/smplock.h:59:
+#define reacquire_kernel_lock(task) \
+do { \
+	if (task->lock_depth >=3D 0) \
+		spin_lock(&kernel_flag); \
+} while (0)

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#1649: FILE: include/asm-sh/smplock.h:61:
+	if (task->lock_depth >=3D 0) \
 	                     ^

WARNING:INLINE: plain inline is preferred over __inline__
#1660: FILE: include/asm-sh/smplock.h:72:
+static __inline__ void lock_kernel(void)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1663: FILE: include/asm-sh/smplock.h:75:
+	if (current->lock_depth =3D=3D -1)
 	                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1663: FILE: include/asm-sh/smplock.h:75:
+	if (current->lock_depth =3D=3D -1)
 	                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#1663: FILE: include/asm-sh/smplock.h:75:
+	if (current->lock_depth =3D=3D -1)
 	                               ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1663: FILE: include/asm-sh/smplock.h:75:
+	if (current->lock_depth =3D=3D -1)

WARNING:INLINE: plain inline is preferred over __inline__
#1674: FILE: include/asm-sh/smplock.h:84:
+static __inline__ void unlock_kernel(void)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1677: FILE: include/asm-sh/smplock.h:87:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1798: FILE: include/linux/brlock.h:274:
+static __inline__ void d_drop(struct dentry * dentry)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INLINE: plain inline is preferred over __inline__
#1798: FILE: include/linux/brlock.h:274:
+static __inline__ void d_drop(struct dentry * dentry)

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#1865: FILE: include/linux/sched.h:339:
+	int preempt_count;	/* 0 =3D> preemptable, <0 =3D> BUG */
 	                  	          ^^^^^^^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1881: FILE: include/linux/sched.h:983:
 }
+#define _TASK_STRUCT_DEFINED

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1946: FILE: include/linux/spinlock.h:67:
+#define _raw_spin_lock(lock)	(void)(lock) /* Not "unused variable". */

ERROR:SPACING: space required before the open parenthesis '('
#1952: FILE: include/linux/spinlock.h:71:
+#define _raw_spin_unlock(lock)	do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1964: FILE: include/linux/spinlock.h:130:
+#define _raw_read_lock(lock)	(void)(lock) /* Not "unused variable". */

ERROR:SPACING: space required before the open parenthesis '('
#1965: FILE: include/linux/spinlock.h:131:
+#define _raw_read_unlock(lock)	do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1966: FILE: include/linux/spinlock.h:132:
+#define _raw_write_lock(lock)	(void)(lock) /* Not "unused variable". */

ERROR:SPACING: space required before the open parenthesis '('
#1967: FILE: include/linux/spinlock.h:133:
+#define _raw_write_unlock(lock)	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1999: FILE: include/linux/spinlock.h:163:
+} while(0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2003: FILE: include/linux/spinlock.h:166:
+				1 : ({preempt_enable(); 0;});})
 				                         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2003: FILE: include/linux/spinlock.h:166:
+				1 : ({preempt_enable(); 0;});})
 				                            ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2010: FILE: include/linux/spinlock.h:173:
+#define read_lock(lock)		({preempt_disable(); _raw_read_lock(lock);})
                        		                                         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2011: FILE: include/linux/spinlock.h:174:
+#define read_unlock(lock)	({_raw_read_unlock(lock); preempt_enable();})
                          	                                          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2012: FILE: include/linux/spinlock.h:175:
+#define write_lock(lock)	({preempt_disable(); _raw_write_lock(lock);})
                         	                                          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2013: FILE: include/linux/spinlock.h:176:
+#define write_unlock(lock)	({_raw_write_unlock(lock); preempt_enable();})
                           	                                           ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2014: FILE: include/linux/spinlock.h:177:
+#define write_trylock(lock)	({preempt_disable();_raw_write_trylock(lock) ?=
                            	                   ^

ERROR:SPACING: spaces required around that '?' (ctx:WxO)
#2014: FILE: include/linux/spinlock.h:177:
+#define write_trylock(lock)	({preempt_disable();_raw_write_trylock(lock) ?=
                            	                                             ^

ERROR:SPACING: spaces required around that '=' (ctx:OxE)
#2014: FILE: include/linux/spinlock.h:177:
+#define write_trylock(lock)	({preempt_disable();_raw_write_trylock(lock) ?=
                            	                                              ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2016: FILE: include/linux/spinlock.h:179:
+				1 : ({preempt_enable(); 0;});})
 				                         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2016: FILE: include/linux/spinlock.h:179:
+				1 : ({preempt_enable(); 0;});})
 				                            ^

ERROR:SPACING: space required before the open parenthesis '('
#2022: FILE: include/linux/spinlock.h:185:
+#define preempt_enable_no_resched()	do {} while(0)

WARNING:TYPO_SPELLING: 'halfs' may be misspelled - perhaps 'halves'?
#2056: FILE: include/linux/tqueue.h:96:
+ * Call all "bottom halfs" on a given list.
                     ^^^^^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#2059: FILE: include/linux/tqueue.h:99:
+extern void __run_task_queue(task_queue *list);
                                         ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2059: FILE: include/linux/tqueue.h:99:
+extern void __run_task_queue(task_queue *list);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2112: FILE: kernel/exit.c:491:
+		printk(KERN_WARNING "%s[%d] exited with preempt_count %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2113: FILE: kernel/exit.c:492:
+		printk(KERN_WARNING "%s[%d] exited with preempt_count %d\n",
+				current->comm, current->pid,

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2131: FILE: kernel/fork.c:623:
+	p->preempt_count =3D 1;
 	                 ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2228: FILE: kernel/sched.c:386:
 }
+#if CONFIG_SMP || CONFIG_PREEMPT

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2275: FILE: kernel/sched.c:826:
 }
+#ifdef CONFIG_PREEMPT

WARNING:REPEATED_WORD: Possible repeated word: 'is'
#2277: FILE: kernel/sched.c:828:
+ * this is is the entry point to schedule() from in-kernel preemption.

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#2282: FILE: kernel/sched.c:833:
+	current->preempt_count +=3D PREEMPT_ACTIVE;
 	                       ^

ERROR:SPACING: spaces required around that '-=' (ctx:WxV)
#2284: FILE: kernel/sched.c:835:
+	current->preempt_count -=3D PREEMPT_ACTIVE;
 	                       ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2320: FILE: kernel/sched.c:1551:
+	idle->preempt_count =3D (idle->lock_depth >=3D 0);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2320: FILE: kernel/sched.c:1551:
+	idle->preempt_count =3D (idle->lock_depth >=3D 0);
 	                    ^

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#2320: FILE: kernel/sched.c:1551:
+	idle->preempt_count =3D (idle->lock_depth >=3D 0);
 	                                          ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2379: FILE: lib/dec_and_lock.c:53:
+ *  ^Iand local interrupts are disabled so slab code is preempt-safe.$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2408: FILE: net/core/skbuff.c:114:
+	struct sk_buff *skb =3D NULL;
 	                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2414: FILE: net/core/skbuff.c:116:
+	unsigned long flags;
+	local_irq_save(flags);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2417: FILE: net/core/skbuff.c:117:
+	list =3D &skb_head_pool[smp_processor_id()].list;
 	     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#2417: FILE: net/core/skbuff.c:117:
+	list =3D &skb_head_pool[smp_processor_id()].list;
 	         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2438: FILE: net/core/skbuff.c:129:
+	unsigned long flags;
+	local_irq_save(flags);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#2440: FILE: net/core/skbuff.c:131:
+	list =3D &skb_head_pool[smp_processor_id()].list;
 	     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxV)
#2440: FILE: net/core/skbuff.c:131:
+	list =3D &skb_head_pool[smp_processor_id()].list;
 	         ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000445132.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 75 errors, 29 warnings, 17 checks, 2189 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000445132.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
