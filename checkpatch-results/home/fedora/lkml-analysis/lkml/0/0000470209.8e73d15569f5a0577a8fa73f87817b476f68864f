WARNING:TYPO_SPELLING: 'remebers' may be misspelled - perhaps 'remembers'?
#63: 
        machine's average load, remebers the most loaded node and waits
                                ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#88: 
diff -urN 2.4.17-ia64-kdbv2.1-K3+/arch/ia64/kernel/smpboot.c 2.4.17-ia64-kdbv2.1-k3z-nod9/arch/ia64/kernel/smpboot.c

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#109: FILE: arch/ia64/kernel/smpboot.c:144:
+	for (end = n-1; end >= 0; end--) {
 	            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#111: FILE: arch/ia64/kernel/smpboot.c:146:
+			if (a[j] > a[j+1]) {
 			              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#112: FILE: arch/ia64/kernel/smpboot.c:147:
+				t = a[j+1];
 				       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#113: FILE: arch/ia64/kernel/smpboot.c:148:
+				a[j+1] = a[j];
 				   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#128: FILE: arch/ia64/kernel/smpboot.c:519:
+^I/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#129: FILE: arch/ia64/kernel/smpboot.c:520:
+ ^I * To be on the safe side: sort SAPIC IDs of CPUs$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#129: FILE: arch/ia64/kernel/smpboot.c:520:
+ ^I * To be on the safe side: sort SAPIC IDs of CPUs$

ERROR:CODE_INDENT: code indent should use tabs where possible
#130: FILE: arch/ia64/kernel/smpboot.c:521:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#130: FILE: arch/ia64/kernel/smpboot.c:521:
+ ^I */$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#146: FILE: arch/ia64/kernel/smpboot.c:575:
+}
+#ifdef CONFIG_IA64_DIG

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#153: FILE: arch/ia64/kernel/smpboot.c:582:
+	for (cpu = 0; cpu < NR_CPUS; cpu++)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#154: FILE: arch/ia64/kernel/smpboot.c:583:
+		if (cpu_online_map & (1<<cpu))
 		                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#170: FILE: arch/ia64/kernel/smpboot.c:620:
+unsigned long cache_decay_ticks=6;
                                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: include/asm-ia64/smp.h:122:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#207: FILE: include/asm-ia64/smp.h:123:
+ * This is the node ID on the NEC AzusA, $

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'hwid' may be better as '(hwid)' to avoid precedence issues
#210: FILE: include/asm-ia64/smp.h:126:
+#define SAPICID_TO_NODE(hwid) ((hwid >> 12) & 0xff)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#240: FILE: include/linux/sched.h:152:
+extern void sched_migrate_task(task_t *p, int cpu);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#260: FILE: include/linux/sched.h:463:
+/* $

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#264: FILE: include/linux/sched.h:467:
+#define BALANCE_POOL_WAIT (HZ/10)
                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#267: FILE: include/linux/sched.h:470:
+extern int pool_ptr[NR_NODES+1];
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#273: FILE: include/linux/sched.h:476:
+# define HOMENODE_INC(rq,node) (rq)->nr_homenode[node]++
                         ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#273: FILE: include/linux/sched.h:476:
+# define HOMENODE_INC(rq,node) (rq)->nr_homenode[node]++

ERROR:SPACING: space required after that ',' (ctx:VxV)
#274: FILE: include/linux/sched.h:477:
+# define HOMENODE_DEC(rq,node) (rq)->nr_homenode[node]--
                         ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#274: FILE: include/linux/sched.h:477:
+# define HOMENODE_DEC(rq,node) (rq)->nr_homenode[node]--

ERROR:SPACING: space required after that ',' (ctx:VxV)
#276: FILE: include/linux/sched.h:479:
+# define HOMENODE_INC(rq,node) {}
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#277: FILE: include/linux/sched.h:480:
+# define HOMENODE_DEC(rq,node) {}
                         ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#308: FILE: kernel/ksyms.c:583:
+EXPORT_SYMBOL(numpools);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#309: FILE: kernel/ksyms.c:584:
+EXPORT_SYMBOL(pool_ptr);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#310: FILE: kernel/ksyms.c:585:
+EXPORT_SYMBOL(pool_cpus);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#311: FILE: kernel/ksyms.c:586:
+EXPORT_SYMBOL(pool_nr_cpus);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#312: FILE: kernel/ksyms.c:587:
+EXPORT_SYMBOL(pool_mask);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#313: FILE: kernel/ksyms.c:588:
+EXPORT_SYMBOL(sched_migrate_task);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#362: FILE: kernel/sched.c:188:
+int pool_ptr[NR_NODES+1];
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#375: FILE: kernel/sched.c:278:
+	HOMENODE_INC(rq,p->node);
 	               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#380: FILE: kernel/sched.c:283:
+	HOMENODE_DEC(rq,p->node);
 	               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#396: FILE: kernel/sched.c:512:
+	int i, ii, idx=-1, refload, load;
 	              ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#396: FILE: kernel/sched.c:512:
+	int i, ii, idx=-1, refload, load;
 	               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#401: FILE: kernel/sched.c:517:
+	for (ii = pool_ptr[pool]; ii < pool_ptr[pool+1]; ii++) {
 	                                            ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rq_src->nr_running < this_rq->prev_nr_running[i]'
#404: FILE: kernel/sched.c:520:
+		if (idle || (rq_src->nr_running < this_rq->prev_nr_running[i]))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:TYPO_SPELLING: 'easilly' may be misspelled - perhaps 'easily'?
#438: FILE: kernel/sched.c:554:
+ * This concept can be extended easilly to more than two levels (multi-level
                                 ^^^^^^^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#446: FILE: kernel/sched.c:562:
+	int this_cpu = (int)(((void *)this_rq - (void *)cpu_rq(0))/sizeof(runqueue_t));
 	                                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#450: FILE: kernel/sched.c:566:
+#define BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))
                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#450: FILE: kernel/sched.c:566:
+#define BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))
                                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#450: FILE: kernel/sched.c:566:
+#define BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))
                                                                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#450: FILE: kernel/sched.c:566:
+#define BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))
                                                                          ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm' - possible side-effects?
#450: FILE: kernel/sched.c:566:
+#define BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 't' - possible side-effects?
#450: FILE: kernel/sched.c:566:
+#define BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'this_rq->nr_running > this_rq->prev_nr_running[this_cpu]'
#452: FILE: kernel/sched.c:568:
+	if (idle || (this_rq->nr_running > this_rq->prev_nr_running[this_cpu]))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#462: FILE: kernel/sched.c:578:
+	if (!BALANCED(this_rq->load[0][imax],nr_running)) {
 	                                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#463: FILE: kernel/sched.c:579:
+		*imbalance = (this_rq->load[0][imax] - nr_running)/2;
 		                                                  ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#473: FILE: kernel/sched.c:589:
+		if (pool == this_pool) continue;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#475: FILE: kernel/sched.c:591:
+		avg_load += this_rq->load[1][pool]*pool_nr_cpus[pool];
 		                                  ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'best_cpu < 0'
#483: FILE: kernel/sched.c:599:
+	if ((best_cpu < 0) ||
+	    BALANCED(max_pool_load,this_rq->load[1][this_pool])) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#484: FILE: kernel/sched.c:600:
+	    BALANCED(max_pool_load,this_rq->load[1][this_pool])) {
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#489: FILE: kernel/sched.c:605:
+	if (BALANCED(avg_load,this_rq->load[1][this_pool])) {
 	                     ^

CHECK:BRACES: Unbalanced braces around else statement
#494: FILE: kernel/sched.c:610:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#499: FILE: kernel/sched.c:615:
+	if (!BALANCED(this_rq->load[0][best_cpu],nr_running)) {
 	                                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#500: FILE: kernel/sched.c:616:
+		*imbalance = (this_rq->load[0][best_cpu] - nr_running)/2;
 		                                                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#525: FILE: kernel/sched.c:640:
+	int this_pool=CPU_TO_NODE(this_cpu), take_own;
 	             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#595: FILE: kernel/sched.c:745:
+	HOMENODE_DEC(busiest,next->node);
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#599: FILE: kernel/sched.c:749:
+	HOMENODE_INC(this_rq,next->node);
 	                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#608: FILE: kernel/sched.c:1521:
+static atomic_t sched_node=ATOMIC_INIT(0);
                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#618: FILE: kernel/sched.c:1531:
+	for (n = pool_ptr[p->node]; n < pool_ptr[p->node+1]; n++) {
 	                                                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#636: FILE: kernel/sched.c:1549:
+	int n, best_node=0, min_load, pool_load, min_pool=p->node;
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#636: FILE: kernel/sched.c:1549:
+	int n, best_node=0, min_load, pool_load, min_pool=p->node;
 	                                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#657: FILE: kernel/sched.c:1570:
+		pool_load = (100*load[pool])/pool_nr_cpus[pool];
 		                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#657: FILE: kernel/sched.c:1570:
+		pool_load = (100*load[pool])/pool_nr_cpus[pool];
 		                            ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pool_load < min_load'
#658: FILE: kernel/sched.c:1571:
+		if ((pool_load < min_load) && (pool_mask[pool] & mask)) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#674: FILE: kernel/sched.c:1587:
+			HOMENODE_DEC(this_rq(),current->node);
 			                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#675: FILE: kernel/sched.c:1588:
+			HOMENODE_INC(this_rq(),new_node);
 			                      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#684: FILE: kernel/sched.c:1597:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#689: FILE: kernel/sched.c:1602:
+	printk("CPU pools : %d\n",numpools);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#689: FILE: kernel/sched.c:1602:
+	printk("CPU pools : %d\n",numpools);
 	                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#690: FILE: kernel/sched.c:1603:
+	for (i=0;i<numpools;i++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#690: FILE: kernel/sched.c:1603:
+	for (i=0;i<numpools;i++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#690: FILE: kernel/sched.c:1603:
+	for (i=0;i<numpools;i++) {
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#690: FILE: kernel/sched.c:1603:
+	for (i=0;i<numpools;i++) {
 	                   ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#691: FILE: kernel/sched.c:1604:
+		printk("pool %d :",i);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#691: FILE: kernel/sched.c:1604:
+		printk("pool %d :",i);
 		                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#692: FILE: kernel/sched.c:1605:
+		for (j=pool_ptr[i];j<pool_ptr[i+1];j++)
 		      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#692: FILE: kernel/sched.c:1605:
+		for (j=pool_ptr[i];j<pool_ptr[i+1];j++)
 		                  ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#692: FILE: kernel/sched.c:1605:
+		for (j=pool_ptr[i];j<pool_ptr[i+1];j++)
 		                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#692: FILE: kernel/sched.c:1605:
+		for (j=pool_ptr[i];j<pool_ptr[i+1];j++)
 		                               ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#692: FILE: kernel/sched.c:1605:
+		for (j=pool_ptr[i];j<pool_ptr[i+1];j++)
 		                                  ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#693: FILE: kernel/sched.c:1606:
+			printk("%d ",pool_cpus[j]);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#693: FILE: kernel/sched.c:1606:
+			printk("%d ",pool_cpus[j]);
 			            ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#694: FILE: kernel/sched.c:1607:
+		printk("\n");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#701: FILE: kernel/sched.c:1614:
+	int flag[NR_CPUS] = { [ 0 ... NR_CPUS-1] = 0 };
 	                                     ^

ERROR:SPACING: space prohibited after that open square bracket '['
#701: FILE: kernel/sched.c:1614:
+	int flag[NR_CPUS] = { [ 0 ... NR_CPUS-1] = 0 };

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#707: FILE: kernel/sched.c:1620:
+		if (!(cpu_online_map & (1<<i))) continue;
 		                         ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#707: FILE: kernel/sched.c:1620:
+		if (!(cpu_online_map & (1<<i))) continue;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#709: FILE: kernel/sched.c:1622:
+			pool_ptr[numpools]=ptr;
 			                  ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#712: FILE: kernel/sched.c:1625:
+				if (! (cpu_online_map & (1<<j))) continue;
 				    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#712: FILE: kernel/sched.c:1625:
+				if (! (cpu_online_map & (1<<j))) continue;
 				                          ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#712: FILE: kernel/sched.c:1625:
+				if (! (cpu_online_map & (1<<j))) continue;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#714: FILE: kernel/sched.c:1627:
+					pool_cpus[ptr++]=j;
 					                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#715: FILE: kernel/sched.c:1628:
+					flag[j]=1;
 					       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#716: FILE: kernel/sched.c:1629:
+					mask |= (1<<j);
 					          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#724: FILE: kernel/sched.c:1637:
+	pool_ptr[numpools]=ptr;
 	                  ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#733: FILE: kernel/sched.c:1646:
+	if (node < 0 || node >= numpools) return;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#760: FILE: kernel/sched.c:1706:
+			rq->nr_homenode[j]=0;
 			                  ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#764: FILE: kernel/sched.c:1710:
+	pool_ptr[1] = NR_CPUS;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#767: FILE: kernel/sched.c:1713:
+	pool_nr_cpus[0] = NR_CPUS;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#789: FILE: kernel/sched.c:1808:
+static int migration_thread(void * bind_cpu)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#791: FILE: kernel/sched.c:1810:
+	int cpu = cpu_logical_map((int) (long) bind_cpu);

CHECK:SPACING: No space is necessary after a cast
#812: FILE: kernel/sys.c:1278:
+			pid = (int) arg3;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#816: FILE: kernel/sys.c:1282:
+				error = put_user(child->node,(int *)arg2);
 				                            ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#818: FILE: kernel/sys.c:1284:
+				printk("prctl: could not find process %d\n",pid);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#818: FILE: kernel/sys.c:1284:
+				printk("prctl: could not find process %d\n",pid);
 				                                           ^

CHECK:SPACING: No space is necessary after a cast
#824: FILE: kernel/sys.c:1290:
+			pid = (int) arg3;

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#828: FILE: kernel/sys.c:1294:
+				if (child->uid == current->uid || \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#830: FILE: kernel/sys.c:1296:
+					printk("setting node of process %d to %d\n",pid,(int)arg2);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#830: FILE: kernel/sys.c:1296:
+					printk("setting node of process %d to %d\n",pid,(int)arg2);
 					                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#830: FILE: kernel/sys.c:1296:
+					printk("setting node of process %d to %d\n",pid,(int)arg2);
 					                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#831: FILE: kernel/sys.c:1297:
+					set_task_node(child,(int)arg2);
 					                   ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#834: FILE: kernel/sys.c:1300:
+				printk("prctl: could not find process %d\n",pid);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#834: FILE: kernel/sys.c:1300:
+				printk("prctl: could not find process %d\n",pid);
 				                                           ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000470209.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 59 errors, 22 warnings, 38 checks, 698 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000470209.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
