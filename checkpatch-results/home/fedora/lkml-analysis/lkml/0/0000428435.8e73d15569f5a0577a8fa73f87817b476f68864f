CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#293: FILE: drivers/char/random.c:1751:
+	random_state = batch_work.data = new_store;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#329: FILE: drivers/block/floppy.c:1020:
+	PREPARE_WORK(&floppy_work, (void*)(void*)empty, NULL);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#329: FILE: drivers/block/floppy.c:1020:
+	PREPARE_WORK(&floppy_work, (void*)(void*)empty, NULL);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#340: FILE: drivers/block/floppy.c:1890:
+		printk("floppy_work.routine=%p\n", floppy_work.routine);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#360: FILE: drivers/block/floppy.c:4520:
+		printk("work still pending\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#398: FILE: arch/i386/kernel/bluesmoke.c:315:
+^I^Ischedule_work(&mce_work); $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#426: FILE: fs/reiserfs/journal.c:1340:
+  flush_workqueue(commit_wq);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#427: FILE: fs/reiserfs/journal.c:1341:
+  if (!reiserfs_mounted_fs_count) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#427: FILE: fs/reiserfs/journal.c:1341:
+  if (!reiserfs_mounted_fs_count) {
+    destroy_workqueue(commit_wq);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#428: FILE: fs/reiserfs/journal.c:1342:
+    destroy_workqueue(commit_wq);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#429: FILE: fs/reiserfs/journal.c:1343:
+    commit_wq = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#430: FILE: fs/reiserfs/journal.c:1344:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#440: FILE: fs/reiserfs/journal.c:1808:
+  work_t work;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#445: FILE: fs/reiserfs/journal.c:1811:
+static void reiserfs_journal_commit_task_func(void *__ct) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#446: FILE: fs/reiserfs/journal.c:1812:
+  struct reiserfs_journal_commit_task *ct = __ct;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#458: FILE: fs/reiserfs/journal.c:1838:
+  INIT_WORK(&ct->work, reiserfs_journal_commit_task_func, ct);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#469: FILE: fs/reiserfs/journal.c:1850:
+    queue_work(&ct->work, commit_wq) ;$

WARNING:SPACING: space prohibited before semicolon
#469: FILE: fs/reiserfs/journal.c:1850:
+    queue_work(&ct->work, commit_wq) ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#477: FILE: fs/reiserfs/journal.c:2131:
+  if (reiserfs_mounted_fs_count <= 1)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#477: FILE: fs/reiserfs/journal.c:2131:
+  if (reiserfs_mounted_fs_count <= 1)
+    commit_wq = create_workqueue("reiserfs");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#478: FILE: fs/reiserfs/journal.c:2132:
+    commit_wq = create_workqueue("reiserfs");$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#597: FILE: include/linux/workqueue.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#604: FILE: include/linux/workqueue.h:8:
+typedef struct work_s {

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#607: FILE: include/linux/workqueue.h:11:
+	void (*routine)(void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#611: FILE: include/linux/workqueue.h:15:
+#define __WORK_INITIALIZER(n, f, d) {				\
+        .entry	= { &(n).entry, &(n).entry },			\
+	.routine = (f),						\
+	.data = (d) }

ERROR:CODE_INDENT: code indent should use tabs where possible
#612: FILE: include/linux/workqueue.h:16:
+        .entry^I= { &(n).entry, &(n).entry },^I^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#612: FILE: include/linux/workqueue.h:16:
+        .entry^I= { &(n).entry, &(n).entry },^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#616: FILE: include/linux/workqueue.h:20:
+#define DECLARE_WORK(n, f, d)					\
+	work_t n = __WORK_INITIALIZER(n, f, d)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#620: FILE: include/linux/workqueue.h:24:
+typedef struct workqueue_s workqueue_t;

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_work' - possible side-effects?
#625: FILE: include/linux/workqueue.h:29:
+#define PREPARE_WORK(_work, _routine, _data)			\
+	do {							\
+		(_work)->routine = _routine;			\
+		(_work)->data = _data;				\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_work' - possible side-effects?
#634: FILE: include/linux/workqueue.h:38:
+#define INIT_WORK(_work, _routine, _data)			\
+	do {							\
+		INIT_LIST_HEAD(&(_work)->entry);		\
+		(_work)->pending = 0;				\
+		PREPARE_WORK((_work), (_routine), (_data));	\
+	} while (0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#641: FILE: include/linux/workqueue.h:45:
+extern workqueue_t *create_workqueue(const char *name);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#642: FILE: include/linux/workqueue.h:46:
+extern void destroy_workqueue(workqueue_t *wq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#643: FILE: include/linux/workqueue.h:47:
+extern int queue_work(work_t *work, workqueue_t *wq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#644: FILE: include/linux/workqueue.h:48:
+extern void flush_workqueue(workqueue_t *wq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#646: FILE: include/linux/workqueue.h:50:
+extern int schedule_work(work_t *work);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#647: FILE: include/linux/workqueue.h:51:
+extern void flush_scheduled_work(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#648: FILE: include/linux/workqueue.h:52:
+extern int current_is_keventd(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#650: FILE: include/linux/workqueue.h:54:
+extern void init_workqueues(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1003: FILE: kernel/workqueue.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1004: FILE: kernel/workqueue.c:2:
+ * linux/kernel/workqueue.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1032: FILE: kernel/workqueue.c:30:
+	spinlock_t lock;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1052: FILE: kernel/workqueue.c:50:
+		BUG_ON(!list_empty(&work->entry));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPACING: Unnecessary space before function pointer arguments
#1079: FILE: kernel/workqueue.c:77:
+		void (*f) (void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1079: FILE: kernel/workqueue.c:77:
+		void (*f) (void *);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 61)
#1132: FILE: kernel/workqueue.c:130:
+			while (waitpid(-1, NULL, __WALL|WNOHANG) > 0)
+				/* SIGCHLD - auto-reaping */ ;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1132: FILE: kernel/workqueue.c:130:
+			while (waitpid(-1, NULL, __WALL|WNOHANG) > 0)
 			                               ^

WARNING:SPACING: space prohibited before semicolon
#1133: FILE: kernel/workqueue.c:131:
+				/* SIGCHLD - auto-reaping */ ;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1197: FILE: kernel/workqueue.c:195:
+	BUG_ON(!wq->thread);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1226: FILE: kernel/workqueue.c:224:
+	BUG_ON(!keventd_wq);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1233: FILE: kernel/workqueue.c:231:
+	BUG_ON(!keventd_wq);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1236: FILE: kernel/workqueue.c:234:
+EXPORT_SYMBOL_GPL(create_workqueue);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1237: FILE: kernel/workqueue.c:235:
+EXPORT_SYMBOL_GPL(queue_work);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1238: FILE: kernel/workqueue.c:236:
+EXPORT_SYMBOL_GPL(flush_workqueue);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1239: FILE: kernel/workqueue.c:237:
+EXPORT_SYMBOL_GPL(destroy_workqueue);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1241: FILE: kernel/workqueue.c:239:
+EXPORT_SYMBOL(schedule_work);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1242: FILE: kernel/workqueue.c:240:
+EXPORT_SYMBOL(flush_scheduled_work);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000428435.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 37 warnings, 15 checks, 879 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000428435.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
