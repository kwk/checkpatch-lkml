WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
support for file mappings. With the patch, mbind() will "do the right thing"

WARNING:TYPO_SPELLING: 'appopriate' may be misspelled - perhaps 'appropriate'?
#48: 
    the page cache using the appopriate policy found in the mapping->policy
                             ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#138: FILE: fs/inode.c:153:
+ ^I^Impol_shared_policy_init(&mapping->policy);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#138: FILE: fs/inode.c:153:
+ ^I^Impol_shared_policy_init(&mapping->policy);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: fs/inode.c:153:
+ ^I^Impol_shared_policy_init(&mapping->policy);$

CHECK:BRACES: Unbalanced braces around else statement
#147: FILE: fs/inode.c:181:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#180: FILE: include/linux/mempolicy.h:123:
+extern struct page * mpol_replace_invalid_anon_page(struct page * page,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#180: FILE: include/linux/mempolicy.h:123:
+extern struct page * mpol_replace_invalid_anon_page(struct page * page,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#180: FILE: include/linux/mempolicy.h:123:
+extern struct page * mpol_replace_invalid_anon_page(struct page * page,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#183: FILE: include/linux/mempolicy.h:126:
+extern int mpol_remove_invalid_filemap_page(struct page * page,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#183: FILE: include/linux/mempolicy.h:126:
+extern int mpol_remove_invalid_filemap_page(struct page * page,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#194: FILE: include/linux/mempolicy.h:161:
+struct page *alloc_page_shared_policy(unsigned gfp, struct shared_policy *sp,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#204: FILE: include/linux/mempolicy.h:203:
+mpol_replace_invalid_anon_page(struct page * page,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#212: FILE: include/linux/mempolicy.h:211:
+mpol_remove_invalid_filemap_page(struct page * page,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#227: FILE: include/linux/mempolicy.h:245:
+alloc_page_shared_policy(unsigned gfp, struct shared_policy *sp,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#244: FILE: include/linux/page-flags.h:81:
+#define PG_sharedpolicy		21	/* Page was allocated for a file
+					   mapping using a shared_policy */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#244: FILE: include/linux/page-flags.h:81:
+					   mapping using a shared_policy */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#267: FILE: include/linux/pagemap.h:53:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#287: FILE: include/linux/pagemap.h:70:
+	return __page_cache_alloc(x, idx, mapping_gfp_mask(x)|__GFP_COLD);
 	                                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#345: FILE: mm/filemap.c:1438:
 
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#351: FILE: mm/filemap.c:1444:
+	struct address_space *mapping = vma->vm_file->f_mapping;
+	return mpol_set_shared_policy(&mapping->policy, vma, new);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#366: FILE: mm/filemap.c:1459:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#410: FILE: mm/mempolicy.c:821:
 
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#418: FILE: mm/mempolicy.c:829:
+mpol_replace_invalid_anon_page(struct page * page,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#422: FILE: mm/mempolicy.c:833:
+	struct page * new_page = page;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#423: FILE: mm/mempolicy.c:834:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#426: FILE: mm/mempolicy.c:837:
+		void *from, *to;
+		new_page = alloc_page_vma(GFP_HIGHUSER, vma, addr);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#440: FILE: mm/mempolicy.c:851:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#448: FILE: mm/mempolicy.c:859:
+mpol_remove_invalid_filemap_page(struct page * page,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#453: FILE: mm/mempolicy.c:864:
+^I$

CHECK:CAMELCASE: Avoid CamelCase: <PDprintk>
#471: FILE: mm/mempolicy.c:882:
+			PDprintk("removing page in node %d, "

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPLIT_STRING: quoted string split across lines
#472: FILE: mm/mempolicy.c:883:
+			PDprintk("removing page in node %d, "
+				 "pgoff=%lu, for %s\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#496: FILE: mm/mempolicy.c:907:
+
+

CHECK:BRACES: Unbalanced braces around else statement
#514: FILE: mm/mempolicy.c:1030:
+			} else

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#531: FILE: mm/mempolicy.c:1100:
+alloc_page_shared_policy(unsigned gfp, struct shared_policy *sp,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#535: FILE: mm/mempolicy.c:1104:
+	struct mempolicy * shared_pol = NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#557: FILE: mm/mempolicy.c:1126:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000241748.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 12 warnings, 12 checks, 425 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000241748.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
