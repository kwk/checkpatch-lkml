WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
Here is the latest version of the Mem Binding API.  It's a follow-up to the 

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#96: FILE: include/linux/init_task.h:62:
+    memblk_binding:	{						\
                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#96: FILE: include/linux/init_task.h:62:
+    memblk_binding:	{						\

WARNING:INDENTED_LABEL: labels should not be indented
#97: FILE: include/linux/init_task.h:63:
+	bitmask:	MEMBLK_NO_BINDING,				\

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#98: FILE: include/linux/init_task.h:64:
+	behavior:	MPOL_STRICT,					\
 	        ^

WARNING:INDENTED_LABEL: labels should not be indented
#98: FILE: include/linux/init_task.h:64:
+	behavior:	MPOL_STRICT,					\

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#99: FILE: include/linux/init_task.h:65:
+	lock:		SPIN_LOCK_UNLOCKED				\
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#99: FILE: include/linux/init_task.h:65:
+	lock:		SPIN_LOCK_UNLOCKED				\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: include/linux/init_task.h:66:
+    },^I^I^I^I^I^I^I^I^I\$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#108: FILE: include/linux/membind.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#109: FILE: include/linux/membind.h:2:
+ * linux/include/linux/membind.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#115: FILE: include/linux/membind.h:8:
+ * All rights reserved.          $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#129: FILE: include/linux/membind.h:22:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#130: FILE: include/linux/membind.h:23:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#141: FILE: include/linux/membind.h:34:
+typedef struct memblk_list {

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#144: FILE: include/linux/membind.h:37:
+	spinlock_t lock;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#147: FILE: include/linux/membind.h:40:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#153: FILE: include/linux/membind.h:46:
+#define MPOL_LOOSE	1   /* Memory will be allocated according to binding, but
+				can fall back to other memory blocks if necessary. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#153: FILE: include/linux/membind.h:46:
+				can fall back to other memory blocks if necessary. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#187: FILE: include/linux/sched.h:308:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#220: FILE: kernel/sys.c:1288:
+	/* If the new binding expands upon the old binding, the caller
+	   must have CAP_SYS_NICE. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#220: FILE: kernel/sys.c:1288:
+	   must have CAP_SYS_NICE. */

ERROR:SPACING: space required before the open brace '{'
#222: FILE: kernel/sys.c:1290:
+	    capable(CAP_SYS_NICE)){

ERROR:SPACING: space required before the open brace '{'
#278: FILE: mm/numa.c:79:
+	if (test_and_set_bit(num_online_memblks() + 1, &memblk_online_map)){

WARNING:TYPO_SPELLING: 'alread' may be misspelled - perhaps 'already'?
#279: FILE: mm/numa.c:80:
+		printk("memblk alread counted?!?!\n");
 		               ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#279: FILE: mm/numa.c:80:
+		printk("memblk alread counted?!?!\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#280: FILE: mm/numa.c:81:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#313: FILE: mm/numa.c:121:
+	if ((curr->memblk_binding.behavior == MPOL_LOOSE) &&
[...]
+		 search_twice = 1;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'curr->memblk_binding.behavior == MPOL_LOOSE'
#313: FILE: mm/numa.c:121:
+	if ((curr->memblk_binding.behavior == MPOL_LOOSE) &&
+	    (curr->memblk_binding.bitmask != MEMBLK_NO_BINDING))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'curr->memblk_binding.bitmask != MEMBLK_NO_BINDING'
#313: FILE: mm/numa.c:121:
+	if ((curr->memblk_binding.behavior == MPOL_LOOSE) &&
+	    (curr->memblk_binding.bitmask != MEMBLK_NO_BINDING))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#318: FILE: mm/numa.c:126:
+search_through_memblks: $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#325: FILE: mm/numa.c:131:
+			if ((ret = alloc_pages_pgdat(temp, gfp_mask, order)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#332: FILE: mm/numa.c:138:
+			if ((ret = alloc_pages_pgdat(temp, gfp_mask, order)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#338: FILE: mm/numa.c:144:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#339: FILE: mm/numa.c:145:
+^I^I * If we failed to find a "preferred" memblk, try again $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#351: FILE: mm/numa.c:157:
+struct page * _alloc_pages(unsigned int gfp_mask, unsigned int order)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#355: FILE: mm/numa.c:161:
+	static pg_data_t *next = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#363: FILE: mm/numa.c:168:
+	temp = start = next;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#386: FILE: mm/page_alloc.c:45:
+extern unsigned long memblk_online_map;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000444390.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 18 warnings, 5 checks, 301 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000444390.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
