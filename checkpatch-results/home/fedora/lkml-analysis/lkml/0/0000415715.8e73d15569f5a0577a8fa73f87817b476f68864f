WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
diff -ur linux-2.5.46/arch/alpha/kernel/err_common.c linux-2.5.46-ds20/arch/alpha/kernel/err_common.c

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#76: FILE: arch/alpha/kernel/err_impl.h:136:
+extern void mchk_dump_mem(void *, unsigned int, char **);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#76: FILE: arch/alpha/kernel/err_impl.h:136:
+extern void mchk_dump_mem(void *, unsigned int, char **);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#76: FILE: arch/alpha/kernel/err_impl.h:136:
+extern void mchk_dump_mem(void *, unsigned int, char **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char **' should also have an identifier name
#76: FILE: arch/alpha/kernel/err_impl.h:136:
+extern void mchk_dump_mem(void *, unsigned int, char **);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#117: FILE: arch/alpha/kernel/osf_sys.c:481:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#118: FILE: arch/alpha/kernel/osf_sys.c:482:
+asmlinkage long sys_swapon(const char * specialfile, int swap_flags);	/* mm/swapfile.c */

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#129: FILE: arch/alpha/kernel/osf_sys.c:527:
+	unsigned len, i;

CHECK:SPACING: No space is necessary after a cast
#139: FILE: arch/alpha/kernel/osf_sys.c:1422:
+		if (addr != (unsigned) -ENOMEM)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#139: FILE: arch/alpha/kernel/osf_sys.c:1422:
+		if (addr != (unsigned) -ENOMEM)

CHECK:SPACING: No space is necessary after a cast
#147: FILE: arch/alpha/kernel/osf_sys.c:1429:
+	if (addr != (unsigned) -ENOMEM)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#147: FILE: arch/alpha/kernel/osf_sys.c:1429:
+	if (addr != (unsigned) -ENOMEM)

CHECK:SPACING: No space is necessary after a cast
#159: FILE: arch/alpha/kernel/pci.c:477:
+	return (hose ? (signed) hose->index : -ENXIO);

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#159: FILE: arch/alpha/kernel/pci.c:477:
+	return (hose ? (signed) hose->index : -ENXIO);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#159: FILE: arch/alpha/kernel/pci.c:477:
+	return (hose ? (signed) hose->index : -ENXIO);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#205: FILE: arch/alpha/kernel/setup.c:807:
+	if ((unsigned)type < N(systype_vecs)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#209: FILE: arch/alpha/kernel/setup.c:810:
+		   ((unsigned)type - ST_API_BIAS) < N(api_vecs)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#213: FILE: arch/alpha/kernel/setup.c:813:
+		   ((unsigned)type - ST_UNOFFICIAL_BIAS) < N(unofficial_vecs)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#231: FILE: arch/alpha/kernel/setup.c:941:
+	if ((unsigned)type < N(systype_names)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#235: FILE: arch/alpha/kernel/setup.c:944:
+		   ((unsigned)type - ST_API_BIAS) < N(api_names)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#239: FILE: arch/alpha/kernel/setup.c:947:
+		   ((unsigned)type - ST_UNOFFICIAL_BIAS) < N(unofficial_names)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#248: FILE: arch/alpha/kernel/setup.c:969:
+		if ((unsigned)member < N(eb164_indices))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#257: FILE: arch/alpha/kernel/setup.c:977:
+		if ((unsigned)member < N(alcor_indices))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#262: FILE: arch/alpha/kernel/setup.c:981:
+		if ((unsigned)member < N(eb64p_indices))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#267: FILE: arch/alpha/kernel/setup.c:985:
+		if ((unsigned)member < N(eb66_indices))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#272: FILE: arch/alpha/kernel/setup.c:989:
+		if ((unsigned)member < N(rawhide_indices))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#277: FILE: arch/alpha/kernel/setup.c:993:
+		if ((unsigned)member < N(titan_indices))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#282: FILE: arch/alpha/kernel/setup.c:997:
+		if ((unsigned)member < N(tsunami_indices))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#292: FILE: arch/alpha/kernel/smc37c669.c:2271:
     	for ( i = 0; ( SMC37c669_irq_table[i].device_irq != -1 ) || ( SMC37c669_irq_table[i].isa_irq != -1 ); i++ ) {
+	    if ( (signed)irq == SMC37c669_irq_table[i].device_irq ) {

WARNING:TABSTOP: Statements should start on a tabstop
#294: FILE: arch/alpha/kernel/smc37c669.c:2272:
+	    if ( (signed)irq == SMC37c669_irq_table[i].device_irq ) {

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#294: FILE: arch/alpha/kernel/smc37c669.c:2272:
+	    if ( (signed)irq == SMC37c669_irq_table[i].device_irq ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#294: FILE: arch/alpha/kernel/smc37c669.c:2272:
+	    if ( (signed)irq == SMC37c669_irq_table[i].device_irq ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#294: FILE: arch/alpha/kernel/smc37c669.c:2272:
+	    if ( (signed)irq == SMC37c669_irq_table[i].device_irq ) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#301: FILE: arch/alpha/kernel/smc37c669.c:2282:
     	for ( i = 0; ( SMC37c669_irq_table[i].isa_irq != -1 ) || ( SMC37c669_irq_table[i].device_irq != -1 ); i++ ) {
+	    if ( (signed)irq == SMC37c669_irq_table[i].isa_irq ) {

WARNING:TABSTOP: Statements should start on a tabstop
#303: FILE: arch/alpha/kernel/smc37c669.c:2283:
+	    if ( (signed)irq == SMC37c669_irq_table[i].isa_irq ) {

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#303: FILE: arch/alpha/kernel/smc37c669.c:2283:
+	    if ( (signed)irq == SMC37c669_irq_table[i].isa_irq ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#303: FILE: arch/alpha/kernel/smc37c669.c:2283:
+	    if ( (signed)irq == SMC37c669_irq_table[i].isa_irq ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#303: FILE: arch/alpha/kernel/smc37c669.c:2283:
+	    if ( (signed)irq == SMC37c669_irq_table[i].isa_irq ) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#310: FILE: arch/alpha/kernel/smc37c669.c:2323:
     	for ( i = 0; ( SMC37c669_drq_table[i].device_drq != -1 ) || ( SMC37c669_drq_table[i].isa_drq != -1 ); i++ ) {
+	    if ( (signed)drq == SMC37c669_drq_table[i].device_drq ) {

WARNING:TABSTOP: Statements should start on a tabstop
#312: FILE: arch/alpha/kernel/smc37c669.c:2324:
+	    if ( (signed)drq == SMC37c669_drq_table[i].device_drq ) {

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#312: FILE: arch/alpha/kernel/smc37c669.c:2324:
+	    if ( (signed)drq == SMC37c669_drq_table[i].device_drq ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#312: FILE: arch/alpha/kernel/smc37c669.c:2324:
+	    if ( (signed)drq == SMC37c669_drq_table[i].device_drq ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#312: FILE: arch/alpha/kernel/smc37c669.c:2324:
+	    if ( (signed)drq == SMC37c669_drq_table[i].device_drq ) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#319: FILE: arch/alpha/kernel/smc37c669.c:2334:
     	for ( i = 0; ( SMC37c669_drq_table[i].isa_drq != -1 ) || ( SMC37c669_drq_table[i].device_drq != -1 ); i++ ) {
+	    if ( (signed)drq == SMC37c669_drq_table[i].isa_drq ) {

WARNING:TABSTOP: Statements should start on a tabstop
#321: FILE: arch/alpha/kernel/smc37c669.c:2335:
+	    if ( (signed)drq == SMC37c669_drq_table[i].isa_drq ) {

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#321: FILE: arch/alpha/kernel/smc37c669.c:2335:
+	    if ( (signed)drq == SMC37c669_drq_table[i].isa_drq ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#321: FILE: arch/alpha/kernel/smc37c669.c:2335:
+	    if ( (signed)drq == SMC37c669_drq_table[i].isa_drq ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#321: FILE: arch/alpha/kernel/smc37c669.c:2335:
+	    if ( (signed)drq == SMC37c669_drq_table[i].isa_drq ) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#345: FILE: arch/alpha/kernel/time.c:319:
+		if ((unsigned)diff > one_percent) {

WARNING:TABSTOP: Statements should start on a tabstop
#377: FILE: arch/alpha/lib/fpreg.c:51:
+	      default: return 0;		/* silence gcc */

WARNING:TABSTOP: Statements should start on a tabstop
#385: FILE: arch/alpha/lib/fpreg.c:145:
+	      default: return 0;		/* silence gcc */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000415715.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 36 warnings, 5 checks, 340 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000415715.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
