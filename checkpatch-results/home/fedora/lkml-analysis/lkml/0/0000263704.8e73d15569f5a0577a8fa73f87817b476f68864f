WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
--- linux-2.6.7/include/asm-ppc64/resource.h.mlock	2004-08-03 22:46:28.030210685 -0400

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#93: FILE: include/asm-x86_64/resource.h:42:
+	{ PAGE_SIZE , PAGE_SIZE  },		\
 	            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#115: FILE: include/linux/mm.h:501:
+int shmem_lock(struct file * file, int lock, struct user_struct *);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct user_struct *' should also have an identifier name
#115: FILE: include/linux/mm.h:501:
+int shmem_lock(struct file * file, int lock, struct user_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#126: FILE: include/linux/mm.h:512:
+}
+extern int user_can_mlock(size_t, struct user_struct *);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#126: FILE: include/linux/mm.h:512:
+extern int user_can_mlock(size_t, struct user_struct *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#127: FILE: include/linux/mm.h:513:
+extern void user_subtract_mlock(size_t, struct user_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#127: FILE: include/linux/mm.h:513:
+extern void user_subtract_mlock(size_t, struct user_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct user_struct *' should also have an identifier name
#127: FILE: include/linux/mm.h:513:
+extern void user_subtract_mlock(size_t, struct user_struct *);

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#138: FILE: include/linux/shm.h:87:
+	struct user_struct *	mlock_user;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: include/asm-sparc/resource.h:47:
+    {PAGE_SIZE, PAGE_SIZE},^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#181: FILE: include/asm-alpha/resource.h:44:
+    {PAGE_SIZE, PAGE_SIZE},^I^I^I/* RLIMIT_MEMLOCK */^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: include/asm-sparc64/resource.h:46:
+    {PAGE_SIZE,     PAGE_SIZE    },^I\$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: ipc/shm.c:120:
+		user_subtract_mlock(shp->shm_file->f_dentry->d_inode->i_size,
+						shp->mlock_user);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#398: FILE: ipc/shm.c:532:
+			struct user_struct * user = current->user;

WARNING:LINE_SPACING: Missing a blank line after declarations
#399: FILE: ipc/shm.c:533:
+			struct user_struct * user = current->user;
+			if (!is_file_hugepages(shp->shm_file)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#424: FILE: ipc/util.c:396:
+		if (!can_do_mlock())  {
+			return -1;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#427: FILE: ipc/util.c:399:
+^I}^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#447: FILE: mm/mlock.c:121:
+	if ( (locked <= lock_limit) || capable(CAP_IPC_LOCK))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'locked <= lock_limit'
#447: FILE: mm/mlock.c:121:
+	if ( (locked <= lock_limit) || capable(CAP_IPC_LOCK))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->mm->total_vm <= lock_limit'
#465: FILE: mm/mlock.c:180:
+	if ((current->mm->total_vm <= lock_limit) || capable(CAP_IPC_LOCK))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#476: FILE: mm/mlock.c:199:
+ * and hugetlb files) get accounted against the user_struct instead. $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#480: FILE: mm/mlock.c:203:
+int user_can_mlock(size_t size, struct user_struct * user)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#499: FILE: mm/mlock.c:222:
+void user_subtract_mlock(size_t size, struct user_struct * user)

WARNING:LINE_SPACING: Missing a blank line after declarations
#523: FILE: mm/mmap.c:816:
+		unsigned long locked, lock_limit;
+		locked = mm->locked_vm << PAGE_SHIFT;

WARNING:LINE_SPACING: Missing a blank line after declarations
#537: FILE: mm/mmap.c:1752:
+		unsigned long locked, lock_limit;
+		locked = mm->locked_vm << PAGE_SHIFT;

WARNING:LINE_SPACING: Missing a blank line after declarations
#553: FILE: mm/mremap.c:328:
+		unsigned long locked, lock_limit;
+		locked = current->mm->locked_vm << PAGE_SHIFT;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#569: FILE: mm/shmem.c:1154:
+int shmem_lock(struct file *file, int lock, struct user_struct * user)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000263704.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 12 warnings, 6 checks, 459 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000263704.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
