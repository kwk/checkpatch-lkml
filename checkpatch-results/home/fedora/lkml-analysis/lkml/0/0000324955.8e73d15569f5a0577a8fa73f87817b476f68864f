WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
o This is the main part of the sysfs backing store patch set. It provides the

WARNING:TYPO_SPELLING: 'entires' may be misspelled - perhaps 'entries'?
#34: 
  directories. As we don't create sysfs entires in sysfs_create_xxxx() calls, 
                                        ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'hierachy' may be misspelled - perhaps 'hierarchy'?
#36: 
  We parse the kobject hierachy for the required object and if found and not
                       ^^^^^^^^

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#50: FILE: fs/sysfs/dir.c:13:
+struct inode_operations sysfs_dir_inode_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#54: FILE: fs/sysfs/dir.c:17:
+struct file_operations sysfs_dir_operations = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#64: FILE: fs/sysfs/dir.c:27:
+	struct sysfs_dirent * sd = dentry->d_fsdata;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#67: FILE: fs/sysfs/dir.c:30:
+	iput(inode);
 	^^^^

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#70: FILE: fs/sysfs/dir.c:33:
+static struct dentry_operations sysfs_dops = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#74: FILE: fs/sysfs/dir.c:37:
+char * sysfs_get_name(struct sysfs_dirent *sd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#76: FILE: fs/sysfs/dir.c:39:
+	struct kobject * k;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#77: FILE: fs/sysfs/dir.c:40:
+	struct attribute * a;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#78: FILE: fs/sysfs/dir.c:41:
+	struct bin_attribute * bin_attr;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#79: FILE: fs/sysfs/dir.c:42:
+	struct attribute_group * grp;

ERROR:CODE_INDENT: code indent should use tabs where possible
#80: FILE: fs/sysfs/dir.c:43:
+        char ** link_names;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: fs/sysfs/dir.c:43:
+        char ** link_names;$

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#80: FILE: fs/sysfs/dir.c:43:
+        char ** link_names;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#81: FILE: fs/sysfs/dir.c:44:
+                                                                                $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#81: FILE: fs/sysfs/dir.c:44:
+                                                                                $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: fs/sysfs/dir.c:44:
+                                                                                $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#82: FILE: fs/sysfs/dir.c:45:
+	if (!sd || !sd->s_element) {
+		return NULL;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#86: FILE: fs/sysfs/dir.c:49:
+	switch(sd->s_type) {
+		case SYSFS_KOBJECT:	
[...]
+		case SYSFS_KOBJ_ATTR:
[...]
+		case SYSFS_KOBJ_ATTR_GROUP:
[...]
+                case SYSFS_KOBJ_BIN_ATTR:
[...]
+		case SYSFS_KOBJ_LINK:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#86: FILE: fs/sysfs/dir.c:49:
+	switch(sd->s_type) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#87: FILE: fs/sysfs/dir.c:50:
+^I^Icase SYSFS_KOBJECT:^I$

CHECK:SPACING: No space is necessary after a cast
#88: FILE: fs/sysfs/dir.c:51:
+				k = (struct kobject *) sd->s_element;

CHECK:SPACING: No space is necessary after a cast
#92: FILE: fs/sysfs/dir.c:55:
+				a = (struct attribute *) sd->s_element;

CHECK:SPACING: No space is necessary after a cast
#96: FILE: fs/sysfs/dir.c:59:
+				grp = (struct attribute_group *) sd->s_element;

ERROR:CODE_INDENT: code indent should use tabs where possible
#99: FILE: fs/sysfs/dir.c:62:
+                case SYSFS_KOBJ_BIN_ATTR:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: fs/sysfs/dir.c:62:
+                case SYSFS_KOBJ_BIN_ATTR:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#100: FILE: fs/sysfs/dir.c:63:
+                                bin_attr = (struct bin_attribute *) sd->s_element;$

CHECK:SPACING: No space is necessary after a cast
#100: FILE: fs/sysfs/dir.c:63:
+                                bin_attr = (struct bin_attribute *) sd->s_element;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: fs/sysfs/dir.c:63:
+                                bin_attr = (struct bin_attribute *) sd->s_element;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#101: FILE: fs/sysfs/dir.c:64:
+                                return bin_attr->attr.name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: fs/sysfs/dir.c:64:
+                                return bin_attr->attr.name;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#103: FILE: fs/sysfs/dir.c:66:
+                                link_names = sd->s_element;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: fs/sysfs/dir.c:66:
+                                link_names = sd->s_element;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#104: FILE: fs/sysfs/dir.c:67:
+                                return link_names[0];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: fs/sysfs/dir.c:67:
+                                return link_names[0];$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#108: FILE: fs/sysfs/dir.c:71:
+
+	}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#126: FILE: fs/sysfs/dir.c:82:
+static int create_dir(struct sysfs_dirent * sd, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#126: FILE: fs/sysfs/dir.c:82:
+static int create_dir(struct sysfs_dirent * sd, struct dentry * dentry)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#129: FILE: fs/sysfs/dir.c:85:
+       $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: fs/sysfs/dir.c:85:
+       $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxW)
#130: FILE: fs/sysfs/dir.c:86:
+	error = sysfs_create(dentry, S_IFDIR| S_IRWXU | S_IRUGO | S_IXUGO,
 	                                    ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0755'.
#130: FILE: fs/sysfs/dir.c:86:
+	error = sysfs_create(dentry, S_IFDIR| S_IRWXU | S_IRUGO | S_IXUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#131: FILE: fs/sysfs/dir.c:87:
+	error = sysfs_create(dentry, S_IFDIR| S_IRWXU | S_IRUGO | S_IXUGO,
+				 init_dir);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#155: FILE: fs/sysfs/dir.c:97:
+static  int create_attr_file(struct sysfs_dirent * sd, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#155: FILE: fs/sysfs/dir.c:97:
+static  int create_attr_file(struct sysfs_dirent * sd, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#157: FILE: fs/sysfs/dir.c:99:
+	const struct attribute * attr = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#158: FILE: fs/sysfs/dir.c:100:
+	struct bin_attribute * bin_attr = NULL;

WARNING:SPACING: Unnecessary space before function pointer name
#159: FILE: fs/sysfs/dir.c:101:
+	int (* init) (struct inode *) = NULL;

WARNING:SPACING: Unnecessary space before function pointer arguments
#159: FILE: fs/sysfs/dir.c:101:
+	int (* init) (struct inode *) = NULL;

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#159: FILE: fs/sysfs/dir.c:101:
+	int (* init) (struct inode *) = NULL;
 	     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#169: FILE: fs/sysfs/dir.c:111:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#183: FILE: fs/sysfs/dir.c:124:
+static int sysfs_create_dirent(struct sysfs_dirent * sd, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#183: FILE: fs/sysfs/dir.c:124:
+static int sysfs_create_dirent(struct sysfs_dirent * sd, struct dentry * dentry)

ERROR:CODE_INDENT: code indent should use tabs where possible
#187: FILE: fs/sysfs/dir.c:127:
+        char ** link_names;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: fs/sysfs/dir.c:127:
+        char ** link_names;$

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#187: FILE: fs/sysfs/dir.c:127:
+        char ** link_names;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#189: FILE: fs/sysfs/dir.c:129:
+	switch(sd->s_type) {
+		case SYSFS_KOBJ_ATTR:
+		case SYSFS_KOBJ_BIN_ATTR:
[...]
+                case SYSFS_KOBJ_LINK:
[...]
+		default:

ERROR:SPACING: space required before the open parenthesis '('
#189: FILE: fs/sysfs/dir.c:129:
+	switch(sd->s_type) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#194: FILE: fs/sysfs/dir.c:134:
+                case SYSFS_KOBJ_LINK:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: fs/sysfs/dir.c:134:
+                case SYSFS_KOBJ_LINK:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#195: FILE: fs/sysfs/dir.c:135:
+                        link_names = sd->s_element;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: fs/sysfs/dir.c:135:
+                        link_names = sd->s_element;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: fs/sysfs/dir.c:136:
+                        err = sysfs_symlink(dentry->d_parent->d_inode, dentry,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: fs/sysfs/dir.c:136:
+                        err = sysfs_symlink(dentry->d_parent->d_inode, dentry,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: fs/sysfs/dir.c:137:
+                                       link_names[1]);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#197: FILE: fs/sysfs/dir.c:137:
+                        err = sysfs_symlink(dentry->d_parent->d_inode, dentry,
+                                       link_names[1]);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: fs/sysfs/dir.c:137:
+                                       link_names[1]);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: fs/sysfs/dir.c:138:
+                        break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: fs/sysfs/dir.c:138:
+                        break;$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#211: FILE: fs/sysfs/dir.c:151:
+struct dentry * sysfs_lookup(struct inode *dir, struct dentry *dentry, struct nameidata *nd)
                                                                                          ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#211: FILE: fs/sysfs/dir.c:151:
+struct dentry * sysfs_lookup(struct inode *dir, struct dentry *dentry, struct nameidata *nd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#213: FILE: fs/sysfs/dir.c:153:
+	struct sysfs_dirent * parent_sd = dentry->d_parent->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#214: FILE: fs/sysfs/dir.c:154:
+	struct sysfs_dirent * sd;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#215: FILE: fs/sysfs/dir.c:155:
+	char * name;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: fs/sysfs/dir.c:184:
+^Istruct sysfs_dirent * sd; $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#249: FILE: fs/sysfs/dir.c:184:
+	struct sysfs_dirent * sd; 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#250: FILE: fs/sysfs/dir.c:185:
+	struct sysfs_dirent * parent_sd;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#259: FILE: fs/sysfs/dir.c:190:
+^Iif (kobj->parent) $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#298: FILE: fs/sysfs/dir.c:234:
+	struct dentry * dentry = kobj->s_dirent->s_dentry;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#299: FILE: fs/sysfs/dir.c:235:
+	struct sysfs_dirent * parent_sd;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#304: FILE: fs/sysfs/dir.c:239:
+^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#316: FILE: fs/sysfs/dir.c:253:
+		pr_debug(" o %s (%d):",d->d_name.name,atomic_read(&d->d_count));
 		                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#316: FILE: fs/sysfs/dir.c:253:
+		pr_debug(" o %s (%d):",d->d_name.name,atomic_read(&d->d_count));
 		                                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#366: FILE: fs/sysfs/dir.c:305:
+^I^Iup(&parent->d_inode->i_sem);^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#369: FILE: fs/sysfs/dir.c:308:
+	kobject_set_name(kobj,new_name);
 	                     ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#373: FILE: fs/sysfs/dir.c:311:
+int sysfs_dir_close(struct inode *inode, struct file *filp)
                                                       ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#375: FILE: fs/sysfs/dir.c:313:
+	struct dentry * dentry = filp->f_dentry;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#376: FILE: fs/sysfs/dir.c:314:
+	struct sysfs_dirent * sd = dentry->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#377: FILE: fs/sysfs/dir.c:315:
+	struct sysfs_dirent * cursor = filp->private_data;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#378: FILE: fs/sysfs/dir.c:316:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#383: FILE: fs/sysfs/dir.c:321:
+^I$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#391: FILE: fs/sysfs/dir.c:325:
+int sysfs_dir_open(struct inode *inode, struct file *filp)
                                                      ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#393: FILE: fs/sysfs/dir.c:327:
+	struct dentry * parent = filp->f_dentry;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#394: FILE: fs/sysfs/dir.c:328:
+	struct sysfs_dirent * parent_sd = parent->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#395: FILE: fs/sysfs/dir.c:329:
+	struct sysfs_dirent * cursor;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#408: FILE: fs/sysfs/dir.c:342:
+	struct dentry * dentry = file->f_dentry;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#411: FILE: fs/sysfs/dir.c:345:
+	switch (origin) {
+		case 1:
[...]
+		case 0:
[...]
+		default:

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#425: FILE: fs/sysfs/dir.c:359:
+			struct sysfs_dirent * parent_sd = dentry->d_fsdata;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#426: FILE: fs/sysfs/dir.c:360:
+			struct sysfs_dirent * cursor = file->private_data;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#432: FILE: fs/sysfs/dir.c:366:
+				struct sysfs_dirent * next_sd;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#434: FILE: fs/sysfs/dir.c:368:
+				char * name;

WARNING:LINE_SPACING: Missing a blank line after declarations
#435: FILE: fs/sysfs/dir.c:369:
+				char * name;
+				next_sd = list_entry(p, struct sysfs_dirent, s_sibling);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#465: FILE: fs/sysfs/dir.c:399:
+int sysfs_readdir(struct file * filp, void * dirent, filldir_t filldir)
                                 ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#465: FILE: fs/sysfs/dir.c:399:
+int sysfs_readdir(struct file * filp, void * dirent, filldir_t filldir)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#465: FILE: fs/sysfs/dir.c:399:
+int sysfs_readdir(struct file * filp, void * dirent, filldir_t filldir)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#475: FILE: fs/sysfs/dir.c:409:
+	switch (i) {
+		case 0:
[...]
+		case 1:
[...]
+		default:

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#482: FILE: fs/sysfs/dir.c:416:
+			/* fallthrough */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#489: FILE: fs/sysfs/dir.c:423:
+			/* fallthrough */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#498: FILE: fs/sysfs/dir.c:432:
+				struct dentry * next;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#499: FILE: fs/sysfs/dir.c:433:
+				char * name;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#501: FILE: fs/sysfs/dir.c:435:
+^I^I^I^Inext_sd = list_entry(p, struct sysfs_dirent, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#502: FILE: fs/sysfs/dir.c:436:
+				next_sd = list_entry(p, struct sysfs_dirent, 
+						   s_sibling);

WARNING:LONG_LINE: line length of 150 exceeds 100 columns
#513: FILE: fs/sysfs/dir.c:447:
+				err = filldir(dirent, next->d_name.name, next->d_name.len, filp->f_pos, next->d_inode->i_ino, dt_type(next->d_inode));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#515: FILE: fs/sysfs/dir.c:449:
+^I^I^I^Iif (err < 0) $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000324955.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 74 errors, 33 warnings, 9 checks, 476 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000324955.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
