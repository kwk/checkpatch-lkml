ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#106: FILE: arch/i386/kernel/kprobes.c:16:
  * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#107: FILE: arch/i386/kernel/kprobes.c:17:
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#124: FILE: arch/i386/kernel/kprobes.c:35:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#144: FILE: arch/i386/kernel/kprobes.c:103:
+			if (p->break_handler && p->break_handler(p, regs)) {
+				goto ss_probe;
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:INDENTED_LABEL: labels should not be indented
#160: FILE: arch/i386/kernel/kprobes.c:141:
+      ss_probe:

WARNING:LINE_SPACING: Missing a blank line after declarations
#172: FILE: arch/i386/kernel/kprobes.c:296:
+	struct jprobe *jp = container_of(p, struct jprobe, kp);
+	jprobe_saved_regs = *regs;

CHECK:SPACING: No space is necessary after a cast
#182: FILE: arch/i386/kernel/kprobes.c:306:
+	memcpy(jprobes_stack, (kprobe_opcode_t *) addr,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#192: FILE: arch/i386/kernel/kprobes.c:316:
+	asm volatile ("       xchgl   %%ebx,%%esp     \n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#193: FILE: arch/i386/kernel/kprobes.c:317:
+		      "       int3			\n"::"b"

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#194: FILE: arch/i386/kernel/kprobes.c:318:
+		      (jprobe_saved_esp):"memory");
 		                        ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#196: FILE: arch/i386/kernel/kprobes.c:320:
+}
+void jprobe_return_end(void)

CHECK:SPACING: No space is necessary after a cast
#202: FILE: arch/i386/kernel/kprobes.c:326:
+	u8 *addr = (u8 *) (regs->eip - 1);

CHECK:SPACING: No space is necessary after a cast
#206: FILE: arch/i386/kernel/kprobes.c:330:
+	if ((addr > (u8 *) jprobe_return) && (addr < (u8 *) jprobe_return_end)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#210: FILE: arch/i386/kernel/kprobes.c:334:
+			printk("current esp %p does not match saved esp %p\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#212: FILE: arch/i386/kernel/kprobes.c:336:
+			printk("Saved registers for jprobe %p\n", jp);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#214: FILE: arch/i386/kernel/kprobes.c:338:
+			printk("Current registers\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#216: FILE: arch/i386/kernel/kprobes.c:340:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#219: FILE: arch/i386/kernel/kprobes.c:343:
+		memcpy((kprobe_opcode_t *) stack_addr, jprobes_stack,

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ADDR' - possible side-effects?
#233: FILE: include/asm-i386/kprobes.h:36:
+#define MIN_STACK_SIZE(ADDR) ((((ADDR) + MAX_STACK_SIZE) <  \
+	(((ADDR) & PAGE_MASK) + PAGE_SIZE) ? ((ADDR) + MAX_STACK_SIZE) \
+	: (((ADDR) & PAGE_MASK) + PAGE_SIZE )) - (ADDR))

ERROR:SPACING: space prohibited before that close parenthesis ')'
#235: FILE: include/asm-i386/kprobes.h:38:
+	: (((ADDR) & PAGE_MASK) + PAGE_SIZE )) - (ADDR))

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#243: FILE: include/linux/kprobes.h:18:
  * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#244: FILE: include/linux/kprobes.h:19:
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#272: FILE: include/linux/kprobes.h:60:
+	 * Return 1 if it handled break, otherwise kernel will see it. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#304: FILE: include/linux/kprobes.h:98:
+extern void show_registers(struct pt_regs *regs);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kprobe *' should also have an identifier name
#311: FILE: include/linux/kprobes.h:105:
+int setjmp_pre_handler(struct kprobe *, struct pt_regs *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#311: FILE: include/linux/kprobes.h:105:
+int setjmp_pre_handler(struct kprobe *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kprobe *' should also have an identifier name
#312: FILE: include/linux/kprobes.h:106:
+int longjmp_break_handler(struct kprobe *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#312: FILE: include/linux/kprobes.h:106:
+int longjmp_break_handler(struct kprobe *, struct pt_regs *);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#324: FILE: include/linux/kprobes.h:123:
 }
+static inline int register_jprobe(struct jprobe *p)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#326: FILE: include/linux/kprobes.h:125:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#328: FILE: include/linux/kprobes.h:127:
+}
+static inline void unregister_jprobe(struct jprobe *p)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#331: FILE: include/linux/kprobes.h:130:
+}
+static inline void jprobe_return(void)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#374: FILE: kernel/kprobes.c:143:
+EXPORT_SYMBOL_GPL(unregister_jprobe);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#375: FILE: kernel/kprobes.c:144:
+EXPORT_SYMBOL_GPL(jprobe_return);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000261288.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 17 warnings, 12 checks, 247 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000261288.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
