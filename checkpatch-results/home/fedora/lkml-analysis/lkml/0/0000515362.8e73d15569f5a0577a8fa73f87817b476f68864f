WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#75: FILE: fs/minix/bitmap.c:129:
+		printk("Bad inode number on dev %s: %ld is out of range\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#119: FILE: fs/minix/bitmap.c:154:
+		printk("Bad inode number on dev %s: %ld is out of range\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#158: FILE: fs/minix/bitmap.c:177:
+		struct minix_inode *raw_inode;
+		raw_inode = minix_V1_raw_inode(inode->i_sb, inode->i_ino, &bh);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#165: FILE: fs/minix/bitmap.c:184:
+		struct minix2_inode *raw_inode;
+		raw_inode = minix_V2_raw_inode(inode->i_sb, inode->i_ino, &bh);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#173: FILE: fs/minix/bitmap.c:192:
+		brelse (bh);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#192: FILE: fs/minix/dir.c:13:
+typedef struct minix_dir_entry minix_dirent;

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#200: FILE: fs/minix/dir.c:20:
+	fsync:		minix_sync_file,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#200: FILE: fs/minix/dir.c:20:
+	fsync:		minix_sync_file,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#217: FILE: fs/minix/dir.c:31:
+	return (inode->i_size+PAGE_CACHE_SIZE-1)>>PAGE_CACHE_SHIFT;
 	                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#217: FILE: fs/minix/dir.c:31:
+	return (inode->i_size+PAGE_CACHE_SIZE-1)>>PAGE_CACHE_SHIFT;
 	                                     ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#217: FILE: fs/minix/dir.c:31:
+	return (inode->i_size+PAGE_CACHE_SIZE-1)>>PAGE_CACHE_SHIFT;
 	                                        ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#220: FILE: fs/minix/dir.c:34:
+static int dir_commit_chunk(struct page *page, unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#220: FILE: fs/minix/dir.c:34:
+static int dir_commit_chunk(struct page *page, unsigned from, unsigned to)

WARNING:LINE_SPACING: Missing a blank line after declarations
#224: FILE: fs/minix/dir.c:38:
+	int err = 0;
+	page->mapping->a_ops->commit_write(NULL, page, from, to);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#230: FILE: fs/minix/dir.c:44:
+static struct page * dir_get_page(struct inode *dir, unsigned long n)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#234: FILE: fs/minix/dir.c:48:
+				(filler_t*)mapping->a_ops->readpage, NULL);

CHECK:CAMELCASE: Avoid CamelCase: <Page_Uptodate>
#238: FILE: fs/minix/dir.c:52:
+		if (!Page_Uptodate(page))

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#250: FILE: fs/minix/dir.c:64:
+	return (void*)((char*)de + sbi->s_dirsize);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#250: FILE: fs/minix/dir.c:64:
+	return (void*)((char*)de + sbi->s_dirsize);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#253: FILE: fs/minix/dir.c:67:
+static int minix_readdir(struct file * filp, void * dirent, filldir_t filldir)
                                        ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#253: FILE: fs/minix/dir.c:67:
+static int minix_readdir(struct file * filp, void * dirent, filldir_t filldir)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#253: FILE: fs/minix/dir.c:67:
+static int minix_readdir(struct file * filp, void * dirent, filldir_t filldir)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#258: FILE: fs/minix/dir.c:72:
+	unsigned offset = pos & ~PAGE_CACHE_MASK;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#262: FILE: fs/minix/dir.c:76:
+	unsigned chunk_size = sbi->s_dirsize;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#272: FILE: fs/minix/dir.c:78:
+	pos = (pos + chunk_size-1) & ~(chunk_size-1);
 	                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#272: FILE: fs/minix/dir.c:78:
+	pos = (pos + chunk_size-1) & ~(chunk_size-1);
 	                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#286: FILE: fs/minix/dir.c:89:
+		p = kaddr+offset;
 		         ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#296: FILE: fs/minix/dir.c:95:
+				unsigned l = strnlen(de->name,sbi->s_namelen);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#296: FILE: fs/minix/dir.c:95:
+				unsigned l = strnlen(de->name,sbi->s_namelen);
 				                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#300: FILE: fs/minix/dir.c:99:
+				over = filldir(dirent, de->name, l,
+						(n<<PAGE_CACHE_SHIFT) | offset,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#300: FILE: fs/minix/dir.c:99:
+						(n<<PAGE_CACHE_SHIFT) | offset,
 						  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#322: FILE: fs/minix/dir.c:117:
+static inline int namecompare(int len, int maxlen,
+	const char * name, const char * buffer)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#322: FILE: fs/minix/dir.c:117:
+	const char * name, const char * buffer)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#322: FILE: fs/minix/dir.c:117:
+	const char * name, const char * buffer)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#339: FILE: fs/minix/dir.c:134:
+	const char * name = dentry->d_name.name;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#341: FILE: fs/minix/dir.c:136:
+	struct inode * dir = dentry->d_parent->d_inode;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#342: FILE: fs/minix/dir.c:137:
+	struct super_block * sb = dir->i_sb;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#343: FILE: fs/minix/dir.c:138:
+	struct minix_sb_info * sbi = &sb->u.minix_sb;

WARNING:LINE_SPACING: Missing a blank line after declarations
#353: FILE: fs/minix/dir.c:148:
+		char *kaddr;
+		page = dir_get_page(dir, n);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#357: FILE: fs/minix/dir.c:152:
+		kaddr = (char*)page_address(page);

CHECK:SPACING: No space is necessary after a cast
#358: FILE: fs/minix/dir.c:153:
+		de = (struct minix_dir_entry *) kaddr;

CHECK:SPACING: No space is necessary after a cast
#360: FILE: fs/minix/dir.c:155:
+		for ( ; (char *) de <= kaddr ; de = minix_next_entry(de,sbi)) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#360: FILE: fs/minix/dir.c:155:
+		for ( ; (char *) de <= kaddr ; de = minix_next_entry(de,sbi)) {
 		                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#363: FILE: fs/minix/dir.c:158:
+			if (namecompare(namelen,sbi->s_namelen,name,de->name))
 			                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#363: FILE: fs/minix/dir.c:158:
+			if (namecompare(namelen,sbi->s_namelen,name,de->name))
 			                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#363: FILE: fs/minix/dir.c:158:
+			if (namecompare(namelen,sbi->s_namelen,name,de->name))
 			                                           ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#378: FILE: fs/minix/dir.c:173:
+	const char * name = dentry->d_name.name;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#380: FILE: fs/minix/dir.c:175:
+	struct super_block * sb = dir->i_sb;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#381: FILE: fs/minix/dir.c:176:
+	struct minix_sb_info * sbi = &sb->u.minix_sb;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#383: FILE: fs/minix/dir.c:178:
+	struct minix_dir_entry * de;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#387: FILE: fs/minix/dir.c:182:
+	unsigned from, to;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#396: FILE: fs/minix/dir.c:191:
+		kaddr = (char*)page_address(page);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#403: FILE: fs/minix/dir.c:198:
+			if (namecompare(namelen,sbi->s_namelen,name,de->name))
 			                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#403: FILE: fs/minix/dir.c:198:
+			if (namecompare(namelen,sbi->s_namelen,name,de->name))
 			                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#403: FILE: fs/minix/dir.c:198:
+			if (namecompare(namelen,sbi->s_namelen,name,de->name))
 			                                           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#409: FILE: fs/minix/dir.c:204:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#413: FILE: fs/minix/dir.c:208:
+	from = (char*)de - (char*)page_address(page);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#413: FILE: fs/minix/dir.c:208:
+	from = (char*)de - (char*)page_address(page);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#419: FILE: fs/minix/dir.c:214:
+	memcpy (de->name, name, namelen);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#420: FILE: fs/minix/dir.c:215:
+	memset (de->name + namelen, 0, sbi->s_dirsize - namelen - 2);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#423: FILE: fs/minix/dir.c:218:
+	dir->i_mtime = dir->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:CAMELCASE: Avoid CamelCase: <UnlockPage>
#426: FILE: fs/minix/dir.c:221:
+	UnlockPage(page);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#436: FILE: fs/minix/dir.c:231:
+	struct inode *inode = (struct inode*)mapping->host;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#437: FILE: fs/minix/dir.c:232:
+	char *kaddr = (char*)page_address(page);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#438: FILE: fs/minix/dir.c:233:
+	unsigned from = (char*)de - kaddr;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#438: FILE: fs/minix/dir.c:233:
+	unsigned from = (char*)de - kaddr;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#439: FILE: fs/minix/dir.c:234:
+	unsigned to = from + inode->i_sb->u.minix_sb.s_dirsize;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#445: FILE: fs/minix/dir.c:240:
+		BUG();

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#450: FILE: fs/minix/dir.c:245:
+	inode->i_ctime = inode->i_mtime = CURRENT_TIME;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#459: FILE: fs/minix/dir.c:254:
+	struct minix_sb_info * sbi = &inode->i_sb->u.minix_sb;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#460: FILE: fs/minix/dir.c:255:
+	struct minix_dir_entry * de;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#470: FILE: fs/minix/dir.c:265:
+	base = (char*)page_address(page);

CHECK:SPACING: No space is necessary after a cast
#473: FILE: fs/minix/dir.c:268:
+	de = (struct minix_dir_entry *) base;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#475: FILE: fs/minix/dir.c:270:
+	strcpy(de->name,".");
 	               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#478: FILE: fs/minix/dir.c:273:
+	strcpy(de->name,"..");
 	               ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#490: FILE: fs/minix/dir.c:285:
+int minix_empty_dir(struct inode * inode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#498: FILE: fs/minix/dir.c:293:
+		minix_dirent * de;

WARNING:LINE_SPACING: Missing a blank line after declarations
#499: FILE: fs/minix/dir.c:294:
+		minix_dirent * de;
+		page = dir_get_page(inode, i);

CHECK:BRACES: braces {} should be used on all arms of this statement
#513: FILE: fs/minix/dir.c:308:
+				if (!de->name[1]) {
[...]
+				} else if (de->name[1] != '.')
[...]
+				else if (de->name[2])
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#534: FILE: fs/minix/dir.c:329:
+void minix_set_link(struct minix_dir_entry *de, struct page *page,
+	struct inode *inode)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#536: FILE: fs/minix/dir.c:331:
+	struct inode *dir = (struct inode*)page->mapping->host;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#538: FILE: fs/minix/dir.c:333:
+	unsigned from = (char *)de-(char*)page_address(page);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#538: FILE: fs/minix/dir.c:333:
+	unsigned from = (char *)de-(char*)page_address(page);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#538: FILE: fs/minix/dir.c:333:
+	unsigned from = (char *)de-(char*)page_address(page);
 	                          ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#539: FILE: fs/minix/dir.c:334:
+	unsigned to = from + sbi->s_dirsize;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#545: FILE: fs/minix/dir.c:340:
+		BUG();

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#550: FILE: fs/minix/dir.c:345:
+	dir->i_mtime = dir->i_ctime = CURRENT_TIME;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#554: FILE: fs/minix/dir.c:349:
+struct minix_dir_entry * minix_dotdot (struct inode *dir, struct page **p)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#554: FILE: fs/minix/dir.c:349:
+struct minix_dir_entry * minix_dotdot (struct inode *dir, struct page **p)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#587: FILE: fs/minix/file.c:16:
+int minix_sync_file(struct file *, struct dentry *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#587: FILE: fs/minix/file.c:16:
+int minix_sync_file(struct file *, struct dentry *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#587: FILE: fs/minix/file.c:16:
+int minix_sync_file(struct file *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#587: FILE: fs/minix/file.c:16:
+int minix_sync_file(struct file *, struct dentry *, int);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#598: FILE: fs/minix/file.c:29:
+int minix_sync_file(struct file * file, struct dentry *dentry, int datasync)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#611: FILE: fs/minix/file.c:38:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#791: FILE: fs/minix/inode.c:200:
+	for (i=0 ; i < sbi->s_imap_blocks ; i++) {
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#792: FILE: fs/minix/inode.c:201:
+		if (!(sbi->s_imap[i]=bread(dev,block,BLOCK_SIZE)))
 		                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#792: FILE: fs/minix/inode.c:201:
+		if (!(sbi->s_imap[i]=bread(dev,block,BLOCK_SIZE)))
 		                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#792: FILE: fs/minix/inode.c:201:
+		if (!(sbi->s_imap[i]=bread(dev,block,BLOCK_SIZE)))
 		                                    ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#792: FILE: fs/minix/inode.c:201:
+		if (!(sbi->s_imap[i]=bread(dev,block,BLOCK_SIZE)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#798: FILE: fs/minix/inode.c:205:
+	for (i=0 ; i < sbi->s_zmap_blocks ; i++) {
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#799: FILE: fs/minix/inode.c:206:
+		if (!(sbi->s_zmap[i]=bread(dev,block,BLOCK_SIZE)))
 		                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#799: FILE: fs/minix/inode.c:206:
+		if (!(sbi->s_zmap[i]=bread(dev,block,BLOCK_SIZE)))
 		                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#799: FILE: fs/minix/inode.c:206:
+		if (!(sbi->s_zmap[i]=bread(dev,block,BLOCK_SIZE)))
 		                                    ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#799: FILE: fs/minix/inode.c:206:
+		if (!(sbi->s_zmap[i]=bread(dev,block,BLOCK_SIZE)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#806: FILE: fs/minix/inode.c:211:
+	minix_set_bit(0,sbi->s_imap[0]->b_data);
 	               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#807: FILE: fs/minix/inode.c:212:
+	minix_set_bit(0,sbi->s_zmap[0]->b_data);
 	               ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#839: FILE: fs/minix/inode.c:235:
+ ^Ielse if (sbi->s_mount_state & MINIX_ERROR_FS)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#839: FILE: fs/minix/inode.c:235:
+ ^Ielse if (sbi->s_mount_state & MINIX_ERROR_FS)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#839: FILE: fs/minix/inode.c:235:
+ ^Ielse if (sbi->s_mount_state & MINIX_ERROR_FS)$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#918: FILE: fs/minix/inode.c:320:
 }
+static struct address_space_operations minix_aops = {

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#918: FILE: fs/minix/inode.c:320:
+static struct address_space_operations minix_aops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:BRACES: braces {} should be used on all arms of this statement
#928: FILE: fs/minix/inode.c:331:
+	if (S_ISREG(inode->i_mode)) {
[...]
+	} else if (S_ISDIR(inode->i_mode)) {
[...]
+	} else if (S_ISLNK(inode->i_mode)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#939: FILE: fs/minix/inode.c:342:
+	} else

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1087: FILE: fs/minix/inode.c:429:
+	else for (i = 0; i < 9; i++)

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1087: FILE: fs/minix/inode.c:429:
+	else for (i = 0; i < 9; i++)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1125: FILE: fs/minix/inode.c:457:
+	else for (i = 0; i < 10; i++)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1125: FILE: fs/minix/inode.c:457:
+	else for (i = 0; i < 10; i++)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1249: FILE: fs/minix/itree_v1.c:1:
+#include <linux/fs.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1271: FILE: fs/minix/itree_v2.c:1:
+#include <linux/fs.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#1384: FILE: fs/minix/namei.c:26:
+	int err = minix_add_link(dentry, inode);
+	if (!err) {

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1389: FILE: fs/minix/namei.c:31:
+	iput(inode);
 	^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1449: FILE: fs/minix/namei.c:80:
+static int minix_mknod(struct inode * dir, struct dentry *dentry, int mode, int rdev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1457: FILE: fs/minix/namei.c:83:
+	struct inode * inode = minix_new_inode(dir, &error);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1545: FILE: fs/minix/namei.c:99:
+static int minix_symlink(struct inode * dir, struct dentry *dentry,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1546: FILE: fs/minix/namei.c:100:
+static int minix_symlink(struct inode * dir, struct dentry *dentry,
+	  const char * symname)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1546: FILE: fs/minix/namei.c:100:
+	  const char * symname)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1550: FILE: fs/minix/namei.c:103:
+	int i = strlen(symname)+1;
 	                       ^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1642: FILE: fs/minix/namei.c:125:
+	iput(inode);
 	^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1650: FILE: fs/minix/namei.c:129:
+static int minix_link(struct dentry * old_dentry, struct inode * dir,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1650: FILE: fs/minix/namei.c:129:
+static int minix_link(struct dentry * old_dentry, struct inode * dir,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1651: FILE: fs/minix/namei.c:130:
+static int minix_link(struct dentry * old_dentry, struct inode * dir,
+	struct dentry *dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1754: FILE: fs/minix/namei.c:146:
+static int minix_mkdir(struct inode * dir, struct dentry *dentry, int mode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1853: FILE: fs/minix/namei.c:188:
+static int minix_unlink(struct inode * dir, struct dentry *dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1858: FILE: fs/minix/namei.c:191:
+	struct inode * inode = dentry->d_inode;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1859: FILE: fs/minix/namei.c:192:
+	struct page * page;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1898: FILE: fs/minix/namei.c:209:
+static int minix_rmdir(struct inode * dir, struct dentry *dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1900: FILE: fs/minix/namei.c:211:
+	struct inode * inode = dentry->d_inode;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1944: FILE: fs/minix/namei.c:227:
+	struct minix_sb_info * info = &old_dir->i_sb->u.minix_sb;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1945: FILE: fs/minix/namei.c:228:
+	struct inode * old_inode = old_dentry->d_inode;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1946: FILE: fs/minix/namei.c:229:
+	struct inode * new_inode = new_dentry->d_inode;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1947: FILE: fs/minix/namei.c:230:
+	struct page * dir_page = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1948: FILE: fs/minix/namei.c:231:
+	struct minix_dir_entry * dir_de = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1949: FILE: fs/minix/namei.c:232:
+	struct page * old_page;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1950: FILE: fs/minix/namei.c:233:
+	struct minix_dir_entry * old_de;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1998: FILE: fs/minix/namei.c:248:
+		struct page * new_page;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1999: FILE: fs/minix/namei.c:249:
+		struct minix_dir_entry * new_de;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2086: FILE: include/linux/minix_fs.h:98:
+extern struct minix_inode * minix_V1_raw_inode(struct super_block *, ino_t, struct buffer_head **);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2086: FILE: include/linux/minix_fs.h:98:
+extern struct minix_inode * minix_V1_raw_inode(struct super_block *, ino_t, struct buffer_head **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#2086: FILE: include/linux/minix_fs.h:98:
+extern struct minix_inode * minix_V1_raw_inode(struct super_block *, ino_t, struct buffer_head **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ino_t' should also have an identifier name
#2086: FILE: include/linux/minix_fs.h:98:
+extern struct minix_inode * minix_V1_raw_inode(struct super_block *, ino_t, struct buffer_head **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct buffer_head **' should also have an identifier name
#2086: FILE: include/linux/minix_fs.h:98:
+extern struct minix_inode * minix_V1_raw_inode(struct super_block *, ino_t, struct buffer_head **);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2087: FILE: include/linux/minix_fs.h:99:
+extern struct minix2_inode * minix_V2_raw_inode(struct super_block *, ino_t, struct buffer_head **);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2087: FILE: include/linux/minix_fs.h:99:
+extern struct minix2_inode * minix_V2_raw_inode(struct super_block *, ino_t, struct buffer_head **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#2087: FILE: include/linux/minix_fs.h:99:
+extern struct minix2_inode * minix_V2_raw_inode(struct super_block *, ino_t, struct buffer_head **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ino_t' should also have an identifier name
#2087: FILE: include/linux/minix_fs.h:99:
+extern struct minix2_inode * minix_V2_raw_inode(struct super_block *, ino_t, struct buffer_head **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct buffer_head **' should also have an identifier name
#2087: FILE: include/linux/minix_fs.h:99:
+extern struct minix2_inode * minix_V2_raw_inode(struct super_block *, ino_t, struct buffer_head **);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2104: FILE: include/linux/minix_fs.h:111:
+extern void minix_set_inode(struct inode *, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#2104: FILE: include/linux/minix_fs.h:111:
+extern void minix_set_inode(struct inode *, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dev_t' should also have an identifier name
#2104: FILE: include/linux/minix_fs.h:111:
+extern void minix_set_inode(struct inode *, dev_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2109: FILE: include/linux/minix_fs.h:115:
+extern struct minix_dir_entry *minix_find_entry(struct dentry*, struct page**);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry*' should also have an identifier name
#2109: FILE: include/linux/minix_fs.h:115:
+extern struct minix_dir_entry *minix_find_entry(struct dentry*, struct page**);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page**' should also have an identifier name
#2109: FILE: include/linux/minix_fs.h:115:
+extern struct minix_dir_entry *minix_find_entry(struct dentry*, struct page**);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2110: FILE: include/linux/minix_fs.h:116:
+extern int minix_add_link(struct dentry*, struct inode*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry*' should also have an identifier name
#2110: FILE: include/linux/minix_fs.h:116:
+extern int minix_add_link(struct dentry*, struct inode*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode*' should also have an identifier name
#2110: FILE: include/linux/minix_fs.h:116:
+extern int minix_add_link(struct dentry*, struct inode*);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2111: FILE: include/linux/minix_fs.h:117:
+extern int minix_delete_entry(struct minix_dir_entry*, struct page*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct minix_dir_entry*' should also have an identifier name
#2111: FILE: include/linux/minix_fs.h:117:
+extern int minix_delete_entry(struct minix_dir_entry*, struct page*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page*' should also have an identifier name
#2111: FILE: include/linux/minix_fs.h:117:
+extern int minix_delete_entry(struct minix_dir_entry*, struct page*);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2112: FILE: include/linux/minix_fs.h:118:
+extern int minix_make_empty(struct inode*, struct inode*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode*' should also have an identifier name
#2112: FILE: include/linux/minix_fs.h:118:
+extern int minix_make_empty(struct inode*, struct inode*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode*' should also have an identifier name
#2112: FILE: include/linux/minix_fs.h:118:
+extern int minix_make_empty(struct inode*, struct inode*);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2113: FILE: include/linux/minix_fs.h:119:
+extern int minix_empty_dir(struct inode*);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2113: FILE: include/linux/minix_fs.h:119:
+extern int minix_empty_dir(struct inode*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode*' should also have an identifier name
#2113: FILE: include/linux/minix_fs.h:119:
+extern int minix_empty_dir(struct inode*);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2114: FILE: include/linux/minix_fs.h:120:
+extern void minix_set_link(struct minix_dir_entry*, struct page*, struct inode*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct minix_dir_entry*' should also have an identifier name
#2114: FILE: include/linux/minix_fs.h:120:
+extern void minix_set_link(struct minix_dir_entry*, struct page*, struct inode*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page*' should also have an identifier name
#2114: FILE: include/linux/minix_fs.h:120:
+extern void minix_set_link(struct minix_dir_entry*, struct page*, struct inode*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode*' should also have an identifier name
#2114: FILE: include/linux/minix_fs.h:120:
+extern void minix_set_link(struct minix_dir_entry*, struct page*, struct inode*);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2115: FILE: include/linux/minix_fs.h:121:
+extern struct minix_dir_entry *minix_dotdot(struct inode*, struct page**);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode*' should also have an identifier name
#2115: FILE: include/linux/minix_fs.h:121:
+extern struct minix_dir_entry *minix_dotdot(struct inode*, struct page**);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page**' should also have an identifier name
#2115: FILE: include/linux/minix_fs.h:121:
+extern struct minix_dir_entry *minix_dotdot(struct inode*, struct page**);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2116: FILE: include/linux/minix_fs.h:122:
+extern ino_t minix_inode_by_name(struct dentry*);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2116: FILE: include/linux/minix_fs.h:122:
+extern ino_t minix_inode_by_name(struct dentry*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry*' should also have an identifier name
#2116: FILE: include/linux/minix_fs.h:122:
+extern ino_t minix_inode_by_name(struct dentry*);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2118: FILE: include/linux/minix_fs.h:124:
+extern int minix_sync_file(struct file *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#2118: FILE: include/linux/minix_fs.h:124:
+extern int minix_sync_file(struct file *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#2118: FILE: include/linux/minix_fs.h:124:
+extern int minix_sync_file(struct file *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2118: FILE: include/linux/minix_fs.h:124:
+extern int minix_sync_file(struct file *, struct dentry *, int);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000515362.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 86 errors, 65 warnings, 38 checks, 2035 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000515362.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
