WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#46: 
# Project Name: Linux kernel tree

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#47: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#47: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#49: 
#                  ChangeSet    1.1087  -> 1.1088 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#50: 
#       include/linux/sched.h   1.137   -> 1.138  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#51: 
#              kernel/fork.c    1.112   -> 1.113  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#52: 
#              kernel/user.c    1.6     -> 1.7    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#53: 
#             kernel/sched.c    1.163   -> 1.164  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#54: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#55: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#56: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#57: 
# 03/03/07      ed@oscar.et.ca  1.1088

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#58: 
# Add user and thread group governors to prevent either from monoplizing

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#59: 
# the system.  The governors work by limiting the sum of the timeslices

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#60: 
# of active tasks in a group to <n> timeslices.  The defaults set <n> to

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#61: 
# 1.5 for thread groups and to 10 for user tasks.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#62: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#63: 
# For numa systems the governors are per node.  Idealy the storage

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#64: 
# should also be local to the node however, we do not have dynamic per

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#65: 
# node storage yet...

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#66: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#67: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#69: 
--- a/include/linux/sched.h     Sat Mar  8 14:18:48 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: include/linux/sched.h:182:
+       atomic_t active[MAX_NUMNODES];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#77: FILE: include/linux/sched.h:183:
+        atomic_t count;         /* number of refs */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: include/linux/sched.h:183:
+        atomic_t count;         /* number of refs */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#87: FILE: include/linux/sched.h:286:
+       atomic_t active[MAX_NUMNODES];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: include/linux/sched.h:353:
+       struct ptg_struct * ptgroup;            /* pseudo thread group for this task */$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#95: FILE: include/linux/sched.h:353:
+       struct ptg_struct * ptgroup;            /* pseudo thread group for this task */

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: include/linux/sched.h:354:
+       atomic_t *governor;                     /* the atomic_t that governs this task */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: kernel/fork.c:101:
+       if (tsk->ptgroup && atomic_sub_and_test(1,&tsk->ptgroup->count)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 16)
#109: FILE: kernel/fork.c:101:
+       if (tsk->ptgroup && atomic_sub_and_test(1,&tsk->ptgroup->count)) {
+                kfree(tsk->ptgroup);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#109: FILE: kernel/fork.c:101:
+       if (tsk->ptgroup && atomic_sub_and_test(1,&tsk->ptgroup->count)) {
                                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '&' (ctx:OxV)
#109: FILE: kernel/fork.c:101:
+       if (tsk->ptgroup && atomic_sub_and_test(1,&tsk->ptgroup->count)) {
                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#110: FILE: kernel/fork.c:102:
+                kfree(tsk->ptgroup);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: kernel/fork.c:102:
+                kfree(tsk->ptgroup);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#111: FILE: kernel/fork.c:103:
+                tsk->ptgroup = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: kernel/fork.c:103:
+                tsk->ptgroup = NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#112: FILE: kernel/fork.c:104:
+                tsk->governor = &tsk->user->active[cpu_to_node(task_cpu(tsk))];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: kernel/fork.c:104:
+                tsk->governor = &tsk->user->active[cpu_to_node(task_cpu(tsk))];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#113: FILE: kernel/fork.c:105:
+                if (tsk == current)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: kernel/fork.c:105:
+                if (tsk == current)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#114: FILE: kernel/fork.c:106:
+                        atomic_inc(tsk->governor);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: kernel/fork.c:106:
+                        atomic_inc(tsk->governor);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#115: FILE: kernel/fork.c:107:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: kernel/fork.c:107:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: kernel/fork.c:116:
+       free_ptgroup(tsk);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: kernel/fork.c:484:
+       tsk->ptgroup = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: kernel/fork.c:752:
+       if ( ((clone_flags & CLONE_VM) && (clone_flags & CLONE_FILES)) ||$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#142: FILE: kernel/fork.c:752:
+       if ( ((clone_flags & CLONE_VM) && (clone_flags & CLONE_FILES)) ||
[...]
+               if (current->ptgroup)

ERROR:SPACING: space prohibited after that open parenthesis '('
#142: FILE: kernel/fork.c:752:
+       if ( ((clone_flags & CLONE_VM) && (clone_flags & CLONE_FILES)) ||

CHECK:BRACES: braces {} should be used on all arms of this statement
#142: FILE: kernel/fork.c:752:
+       if ( ((clone_flags & CLONE_VM) && (clone_flags & CLONE_FILES)) ||
[...]
+       } else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#143: FILE: kernel/fork.c:753:
+            (clone_flags & CLONE_THREAD)) {$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#143: FILE: kernel/fork.c:753:
+       if ( ((clone_flags & CLONE_VM) && (clone_flags & CLONE_FILES)) ||
+            (clone_flags & CLONE_THREAD)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#143: FILE: kernel/fork.c:753:
+            (clone_flags & CLONE_THREAD)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#144: FILE: kernel/fork.c:754:
+               if (current->ptgroup)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: kernel/fork.c:754:
+               if (current->ptgroup)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#144: FILE: kernel/fork.c:754:
+               if (current->ptgroup)
+                       atomic_inc(&current->ptgroup->count);

CHECK:BRACES: braces {} should be used on all arms of this statement
#144: FILE: kernel/fork.c:754:
+               if (current->ptgroup)
[...]
+               else {
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#145: FILE: kernel/fork.c:755:
+                       atomic_inc(&current->ptgroup->count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: kernel/fork.c:755:
+                       atomic_inc(&current->ptgroup->count);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#146: FILE: kernel/fork.c:756:
+               else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: kernel/fork.c:756:
+               else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#146: FILE: kernel/fork.c:756:
+               else {
+                       int i;

CHECK:BRACES: Unbalanced braces around else statement
#146: FILE: kernel/fork.c:756:
+               else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#147: FILE: kernel/fork.c:757:
+                       int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: kernel/fork.c:757:
+                       int i;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#148: FILE: kernel/fork.c:758:
+                       current->ptgroup = kmalloc(sizeof(struct ptg_struct), GFP_ATOMIC);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#148: FILE: kernel/fork.c:758:
+                       int i;
+                       current->ptgroup = kmalloc(sizeof(struct ptg_struct), GFP_ATOMIC);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: kernel/fork.c:758:
+                       current->ptgroup = kmalloc(sizeof(struct ptg_struct), GFP_ATOMIC);$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*current->ptgroup)...) over kmalloc(sizeof(struct ptg_struct)...)
#148: FILE: kernel/fork.c:758:
+                       current->ptgroup = kmalloc(sizeof(struct ptg_struct), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:CODE_INDENT: code indent should use tabs where possible
#149: FILE: kernel/fork.c:759:
+                       if (!current->ptgroup)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: kernel/fork.c:759:
+                       if (!current->ptgroup)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#149: FILE: kernel/fork.c:759:
+                       if (!current->ptgroup)
+                               return 1;

ERROR:CODE_INDENT: code indent should use tabs where possible
#150: FILE: kernel/fork.c:760:
+                               return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: kernel/fork.c:760:
+                               return 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: kernel/fork.c:761:
+                       /* printk(KERN_INFO "ptgroup - pid %u\n",current->pid); */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: kernel/fork.c:762:
+                       atomic_set(&current->ptgroup->count,2);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: kernel/fork.c:762:
+                       atomic_set(&current->ptgroup->count,2);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#152: FILE: kernel/fork.c:762:
+                       atomic_set(&current->ptgroup->count,2);
                                                           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: kernel/fork.c:763:
+                       for(i=0; i < MAX_NUMNODES; i++)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: kernel/fork.c:763:
+                       for(i=0; i < MAX_NUMNODES; i++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#153: FILE: kernel/fork.c:763:
+                       for(i=0; i < MAX_NUMNODES; i++)
+                               atomic_set(&current->ptgroup->active[i], 0);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#153: FILE: kernel/fork.c:763:
+                       for(i=0; i < MAX_NUMNODES; i++)
                             ^

ERROR:SPACING: space required before the open parenthesis '('
#153: FILE: kernel/fork.c:763:
+                       for(i=0; i < MAX_NUMNODES; i++)

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: kernel/fork.c:764:
+                               atomic_set(&current->ptgroup->active[i], 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: kernel/fork.c:764:
+                               atomic_set(&current->ptgroup->active[i], 0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: kernel/fork.c:765:
+                       atomic_set(&current->ptgroup->active[numa_node_id()], 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: kernel/fork.c:765:
+                       atomic_set(&current->ptgroup->active[numa_node_id()], 1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: kernel/fork.c:766:
+                       atomic_dec(current->governor);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: kernel/fork.c:766:
+                       atomic_dec(current->governor);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#157: FILE: kernel/fork.c:767:
+                       current->governor = &current->ptgroup->active[numa_node_id()];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: kernel/fork.c:767:
+                       current->governor = &current->ptgroup->active[numa_node_id()];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: kernel/fork.c:768:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: kernel/fork.c:768:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#159: FILE: kernel/fork.c:769:
+               p->ptgroup = current->ptgroup;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: kernel/fork.c:769:
+               p->ptgroup = current->ptgroup;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#160: FILE: kernel/fork.c:770:
+               p->governor = &p->ptgroup->active[numa_node_id()];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: kernel/fork.c:770:
+               p->governor = &p->ptgroup->active[numa_node_id()];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: kernel/fork.c:771:
+       } else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#161: FILE: kernel/fork.c:771:
+       } else
+               p->governor = &p->user->active[numa_node_id()];

CHECK:BRACES: Unbalanced braces around else statement
#161: FILE: kernel/fork.c:771:
+       } else

ERROR:CODE_INDENT: code indent should use tabs where possible
#162: FILE: kernel/fork.c:772:
+               p->governor = &p->user->active[numa_node_id()];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: kernel/fork.c:772:
+               p->governor = &p->user->active[numa_node_id()];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: kernel/fork.c:773:
+       return 0;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#172: FILE: kernel/fork.c:917:
        if (retval)
+               goto bad_fork_cleanup_namespace;

ERROR:CODE_INDENT: code indent should use tabs where possible
#173: FILE: kernel/fork.c:918:
+               goto bad_fork_cleanup_namespace;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#173: FILE: kernel/fork.c:918:
+               goto bad_fork_cleanup_namespace;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#175: FILE: kernel/fork.c:920:
+        * Setup the governor pointer for the new process, allocating a new ptg as$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#176: FILE: kernel/fork.c:921:
+        * required if the process is a thread. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#176: FILE: kernel/fork.c:921:
+        * required if the process is a thread. $

ERROR:CODE_INDENT: code indent should use tabs where possible
#177: FILE: kernel/fork.c:922:
+        */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: kernel/fork.c:923:
+       if (setup_governor(clone_flags, p))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#178: FILE: kernel/fork.c:923:
+       if (setup_governor(clone_flags, p))
                goto bad_fork_cleanup_namespace;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: kernel/sched.c:129:
+       int slice = BASE_TIMESLICE(p);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: kernel/sched.c:130:
+       int threads = atomic_read(p->governor) * 10;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: kernel/sched.c:131:
+       int govern = threads;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#203: FILE: kernel/sched.c:132:
+       int govern = threads;
+       if (p->user->uid)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: kernel/sched.c:132:
+       if (p->user->uid)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#203: FILE: kernel/sched.c:132:
+       if (p->user->uid)
+               govern = (p->ptgroup) ? THREAD_GOVERNOR : USER_GOVERNOR;

ERROR:CODE_INDENT: code indent should use tabs where possible
#204: FILE: kernel/sched.c:133:
+               govern = (p->ptgroup) ? THREAD_GOVERNOR : USER_GOVERNOR;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: kernel/sched.c:133:
+               govern = (p->ptgroup) ? THREAD_GOVERNOR : USER_GOVERNOR;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: kernel/sched.c:134:
+       if (threads > govern) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#205: FILE: kernel/sched.c:134:
+       if (threads > govern) {
+               slice = (slice * govern) / threads;

ERROR:CODE_INDENT: code indent should use tabs where possible
#206: FILE: kernel/sched.c:135:
+               slice = (slice * govern) / threads;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: kernel/sched.c:135:
+               slice = (slice * govern) / threads;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#207: FILE: kernel/sched.c:136:
+               slice = (slice > MIN_TIMESLICE) ? slice : MIN_TIMESLICE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: kernel/sched.c:136:
+               slice = (slice > MIN_TIMESLICE) ? slice : MIN_TIMESLICE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: kernel/sched.c:137:
+       }$

WARNING:IF_1: Consider removing the #if 1 and its #endif
#209: FILE: kernel/sched.c:138:
+#if 1

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: kernel/sched.c:139:
+       {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#211: FILE: kernel/sched.c:140:
+               static int next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: kernel/sched.c:140:
+               static int next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#212: FILE: kernel/sched.c:141:
+               if (time_after(jiffies, next)) {$

WARNING:LINE_SPACING: Missing a blank line after declarations
#212: FILE: kernel/sched.c:141:
+               static int next;
+               if (time_after(jiffies, next)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: kernel/sched.c:141:
+               if (time_after(jiffies, next)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#212: FILE: kernel/sched.c:141:
+               if (time_after(jiffies, next)) {
+                       printk(KERN_INFO "uid %d pid %d nod %d ptg %x gov %x threads %d lim %d slice %d\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#213: FILE: kernel/sched.c:142:
+                       printk(KERN_INFO "uid %d pid %d nod %d ptg %x gov %x threads %d lim %d slice %d\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: kernel/sched.c:142:
+                       printk(KERN_INFO "uid %d pid %d nod %d ptg %x gov %x threads %d lim %d slice %d\n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#213: FILE: kernel/sched.c:142:
+                       printk(KERN_INFO "uid %d pid %d nod %d ptg %x gov %x threads %d lim %d slice %d\n",

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#214: FILE: kernel/sched.c:143:
+                         p->uid, p->pid, numa_node_id(), p->ptgroup, p->governor, threads/10, govern, slice);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:CODE_INDENT: code indent should use tabs where possible
#214: FILE: kernel/sched.c:143:
+                         p->uid, p->pid, numa_node_id(), p->ptgroup, p->governor, threads/10, govern, slice);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#214: FILE: kernel/sched.c:143:
+                       printk(KERN_INFO "uid %d pid %d nod %d ptg %x gov %x threads %d lim %d slice %d\n",
+                         p->uid, p->pid, numa_node_id(), p->ptgroup, p->governor, threads/10, govern, slice);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: kernel/sched.c:143:
+                         p->uid, p->pid, numa_node_id(), p->ptgroup, p->governor, threads/10, govern, slice);$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#214: FILE: kernel/sched.c:143:
+                         p->uid, p->pid, numa_node_id(), p->ptgroup, p->governor, threads/10, govern, slice);
                                                                                          ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#215: FILE: kernel/sched.c:144:
+                       next = jiffies + HZ*300;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: kernel/sched.c:144:
+                       next = jiffies + HZ*300;$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#215: FILE: kernel/sched.c:144:
+                       next = jiffies + HZ*300;
                                           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#216: FILE: kernel/sched.c:145:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: kernel/sched.c:145:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: kernel/sched.c:146:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: kernel/sched.c:148:
+       return slice;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: kernel/sched.c:226:
+       atomic_inc(p->governor);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: kernel/sched.c:233:
+       atomic_dec(p->governor);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#260: FILE: kernel/sched.c:353:
+       nr_running_inc(p, rq);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: kernel/sched.c:414:
+       nr_running_dec(p, rq);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#278: FILE: kernel/sched.c:613:
+               nr_running_inc(p, rq);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: kernel/sched.c:613:
+               nr_running_inc(p, rq);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: kernel/sched.c:1031:
+       nr_running_dec(p, src_rq);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#291: FILE: kernel/sched.c:1034:
+        if (p->ptgroup)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: kernel/sched.c:1034:
+        if (p->ptgroup)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#292: FILE: kernel/sched.c:1035:
+                p->governor = &p->ptgroup->active[cpu_to_node(this_cpu)];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: kernel/sched.c:1035:
+                p->governor = &p->ptgroup->active[cpu_to_node(this_cpu)];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#293: FILE: kernel/sched.c:1036:
+        else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#293: FILE: kernel/sched.c:1036:
+        else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#294: FILE: kernel/sched.c:1037:
+                p->governor = &p->user->active[cpu_to_node(this_cpu)];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#294: FILE: kernel/sched.c:1037:
+                p->governor = &p->user->active[cpu_to_node(this_cpu)];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: kernel/sched.c:1039:
+       nr_running_inc(p, this_rq);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#304: FILE: kernel/sched.c:2554:
+        current->governor = &current->user->active[numa_node_id()];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#304: FILE: kernel/sched.c:2554:
+        current->governor = &current->user->active[numa_node_id()];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#305: FILE: kernel/sched.c:2555:
+       atomic_inc(current->governor);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: kernel/user.c:33:
+       .active         = {[0 ...MAX_NUMNODES-1] = ATOMIC_INIT(0)},$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#316: FILE: kernel/user.c:33:
+       .active         = {[0 ...MAX_NUMNODES-1] = ATOMIC_INIT(0)},
                                             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#324: FILE: kernel/user.c:93:
+               int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: kernel/user.c:93:
+               int i;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#332: FILE: kernel/user.c:101:
+               for(i=0; i < MAX_NUMNODES; i++)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: kernel/user.c:101:
+               for(i=0; i < MAX_NUMNODES; i++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#332: FILE: kernel/user.c:101:
+               for(i=0; i < MAX_NUMNODES; i++)
+                       atomic_set(&new->active[i], 0);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#332: FILE: kernel/user.c:101:
+               for(i=0; i < MAX_NUMNODES; i++)
                     ^

ERROR:SPACING: space required before the open parenthesis '('
#332: FILE: kernel/user.c:101:
+               for(i=0; i < MAX_NUMNODES; i++)

ERROR:CODE_INDENT: code indent should use tabs where possible
#333: FILE: kernel/user.c:102:
+                       atomic_set(&new->active[i], 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#333: FILE: kernel/user.c:102:
+                       atomic_set(&new->active[i], 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: kernel/user.c:137:
+       if (!current->ptgroup) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#341: FILE: kernel/user.c:137:
+       if (!current->ptgroup) {
+               atomic_dec(current->governor);

ERROR:CODE_INDENT: code indent should use tabs where possible
#342: FILE: kernel/user.c:138:
+               atomic_dec(current->governor);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#342: FILE: kernel/user.c:138:
+               atomic_dec(current->governor);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#343: FILE: kernel/user.c:139:
+               current->governor = &current->user->active[numa_node_id()];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: kernel/user.c:139:
+               current->governor = &current->user->active[numa_node_id()];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#344: FILE: kernel/user.c:140:
+               atomic_inc(current->governor);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#344: FILE: kernel/user.c:140:
+               atomic_inc(current->governor);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#345: FILE: kernel/user.c:141:
+       }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#471: FILE: Documentation/filesystems/proc.txt:1760:
+When the number of active threads in a threadgroup exceeds the limit reduce the   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#499: FILE: include/linux/sysctl.h:69:
+       CTL_CPU=10,             /* CPU stuff (speed scaling, etc) */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#499: FILE: include/linux/sysctl.h:69:
+       CTL_CPU=10,             /* CPU stuff (speed scaling, etc) */
               ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#500: FILE: include/linux/sysctl.h:70:
+       CTL_SCHED=11,           /* scheduler tunables */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#500: FILE: include/linux/sysctl.h:70:
+       CTL_SCHED=11,           /* scheduler tunables */
                 ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#510: FILE: include/linux/sysctl.h:163:
+       SCHED_MIN_TIMESLICE=1,          /* minimum process timeslice */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#510: FILE: include/linux/sysctl.h:163:
+       SCHED_MIN_TIMESLICE=1,          /* minimum process timeslice */
                           ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#511: FILE: include/linux/sysctl.h:164:
+       SCHED_MAX_TIMESLICE=2,          /* maximum process timeslice */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#511: FILE: include/linux/sysctl.h:164:
+       SCHED_MAX_TIMESLICE=2,          /* maximum process timeslice */
                           ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#512: FILE: include/linux/sysctl.h:165:
+       SCHED_CHILD_PENALTY=3,          /* penalty on fork to child */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#512: FILE: include/linux/sysctl.h:165:
+       SCHED_CHILD_PENALTY=3,          /* penalty on fork to child */
                           ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#513: FILE: include/linux/sysctl.h:166:
+       SCHED_PARENT_PENALTY=4,         /* penalty on fork to parent */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#513: FILE: include/linux/sysctl.h:166:
+       SCHED_PARENT_PENALTY=4,         /* penalty on fork to parent */
                            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#514: FILE: include/linux/sysctl.h:167:
+       SCHED_EXIT_WEIGHT=5,            /* penalty to parent of CPU hog child */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#514: FILE: include/linux/sysctl.h:167:
+       SCHED_EXIT_WEIGHT=5,            /* penalty to parent of CPU hog child */
                         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#515: FILE: include/linux/sysctl.h:168:
+       SCHED_PRIO_BONUS_RATIO=6,       /* percent of max prio given as bonus */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#515: FILE: include/linux/sysctl.h:168:
+       SCHED_PRIO_BONUS_RATIO=6,       /* percent of max prio given as bonus */
                              ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#516: FILE: include/linux/sysctl.h:169:
+       SCHED_INTERACTIVE_DELTA=7,      /* delta used to scale interactivity */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#516: FILE: include/linux/sysctl.h:169:
+       SCHED_INTERACTIVE_DELTA=7,      /* delta used to scale interactivity */
                               ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#517: FILE: include/linux/sysctl.h:170:
+       SCHED_MAX_SLEEP_AVG=8,          /* maximum sleep avg attainable */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#517: FILE: include/linux/sysctl.h:170:
+       SCHED_MAX_SLEEP_AVG=8,          /* maximum sleep avg attainable */
                           ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#518: FILE: include/linux/sysctl.h:171:
+       SCHED_STARVATION_LIMIT=9,       /* no re-active if expired is starved */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#518: FILE: include/linux/sysctl.h:171:
+       SCHED_STARVATION_LIMIT=9,       /* no re-active if expired is starved */
                              ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#519: FILE: include/linux/sysctl.h:172:
+       SCHED_NODE_THRESHOLD=10,        /* NUMA imbalance threshold */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#519: FILE: include/linux/sysctl.h:172:
+       SCHED_NODE_THRESHOLD=10,        /* NUMA imbalance threshold */
                            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#520: FILE: include/linux/sysctl.h:173:
+       SCHED_THREAD_GOVERNOR=11,       /* govern threadgroups when needed */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#520: FILE: include/linux/sysctl.h:173:
+       SCHED_THREAD_GOVERNOR=11,       /* govern threadgroups when needed */
                             ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#521: FILE: include/linux/sysctl.h:174:
+       SCHED_USER_GOVERNOR=12,         /* govern users when needed  */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#521: FILE: include/linux/sysctl.h:174:
+       SCHED_USER_GOVERNOR=12,         /* govern users when needed  */
                           ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#584: FILE: kernel/sysctl.c:58:
+extern int min_timeslice;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#585: FILE: kernel/sysctl.c:59:
+extern int max_timeslice;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#586: FILE: kernel/sysctl.c:60:
+extern int child_penalty;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#587: FILE: kernel/sysctl.c:61:
+extern int parent_penalty;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#588: FILE: kernel/sysctl.c:62:
+extern int exit_weight;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#589: FILE: kernel/sysctl.c:63:
+extern int prio_bonus_ratio;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#590: FILE: kernel/sysctl.c:64:
+extern int interactive_delta;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#591: FILE: kernel/sysctl.c:65:
+extern int max_sleep_avg;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#592: FILE: kernel/sysctl.c:66:
+extern int starvation_limit;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#593: FILE: kernel/sysctl.c:67:
+extern int node_threshold;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#594: FILE: kernel/sysctl.c:68:
+extern int thread_governor;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#595: FILE: kernel/sysctl.c:69:
+extern int user_governor;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#611: FILE: kernel/sysctl.c:172:
+       {CTL_SCHED, "sched", NULL, 0, 0555, sched_table},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#623: FILE: kernel/sysctl.c:378:
+       {SCHED_MAX_TIMESLICE, "max_timeslice", &max_timeslice,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#624: FILE: kernel/sysctl.c:379:
+        sizeof(int), 0644, NULL, &proc_dointvec_minmax,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#624: FILE: kernel/sysctl.c:379:
+        sizeof(int), 0644, NULL, &proc_dointvec_minmax,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#625: FILE: kernel/sysctl.c:380:
+        &sysctl_intvec, NULL, &one, NULL},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#625: FILE: kernel/sysctl.c:380:
+        &sysctl_intvec, NULL, &one, NULL},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#626: FILE: kernel/sysctl.c:381:
+       {SCHED_MIN_TIMESLICE, "min_timeslice", &min_timeslice,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#627: FILE: kernel/sysctl.c:382:
+        sizeof(int), 0644, NULL, &proc_dointvec_minmax,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#627: FILE: kernel/sysctl.c:382:
+        sizeof(int), 0644, NULL, &proc_dointvec_minmax,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#628: FILE: kernel/sysctl.c:383:
+        &sysctl_intvec, NULL, &one, NULL},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#628: FILE: kernel/sysctl.c:383:
+        &sysctl_intvec, NULL, &one, NULL},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#629: FILE: kernel/sysctl.c:384:
+       {SCHED_CHILD_PENALTY, "child_penalty", &child_penalty,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#630: FILE: kernel/sysctl.c:385:
+        sizeof(int), 0644, NULL, &proc_dointvec_minmax,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#630: FILE: kernel/sysctl.c:385:
+        sizeof(int), 0644, NULL, &proc_dointvec_minmax,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#631: FILE: kernel/sysctl.c:386:
+        &sysctl_intvec, NULL, &zero, NULL},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#631: FILE: kernel/sysctl.c:386:
+        &sysctl_intvec, NULL, &zero, NULL},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#632: FILE: kernel/sysctl.c:387:
+       {SCHED_PARENT_PENALTY, "parent_penalty", &parent_penalty,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#633: FILE: kernel/sysctl.c:388:
+        sizeof(int), 0644, NULL, &proc_dointvec_minmax,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#633: FILE: kernel/sysctl.c:388:
+        sizeof(int), 0644, NULL, &proc_dointvec_minmax,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#634: FILE: kernel/sysctl.c:389:
+        &sysctl_intvec, NULL, &zero, NULL},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#634: FILE: kernel/sysctl.c:389:
+        &sysctl_intvec, NULL, &zero, NULL},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#635: FILE: kernel/sysctl.c:390:
+       {SCHED_EXIT_WEIGHT, "exit_weight", &exit_weight,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#636: FILE: kernel/sysctl.c:391:
+        sizeof(int), 0644, NULL, &proc_dointvec_minmax,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#636: FILE: kernel/sysctl.c:391:
+        sizeof(int), 0644, NULL, &proc_dointvec_minmax,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#637: FILE: kernel/sysctl.c:392:
+        &sysctl_intvec, NULL, &zero, NULL},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#637: FILE: kernel/sysctl.c:392:
+        &sysctl_intvec, NULL, &zero, NULL},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#638: FILE: kernel/sysctl.c:393:
+       {SCHED_PRIO_BONUS_RATIO, "prio_bonus_ratio", &prio_bonus_ratio,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#639: FILE: kernel/sysctl.c:394:
+        sizeof(int), 0644, NULL, &proc_dointvec_minmax,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#639: FILE: kernel/sysctl.c:394:
+        sizeof(int), 0644, NULL, &proc_dointvec_minmax,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#640: FILE: kernel/sysctl.c:395:
+        &sysctl_intvec, NULL, &zero, NULL},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#640: FILE: kernel/sysctl.c:395:
+        &sysctl_intvec, NULL, &zero, NULL},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#641: FILE: kernel/sysctl.c:396:
+       {SCHED_INTERACTIVE_DELTA, "interactive_delta", &interactive_delta,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#642: FILE: kernel/sysctl.c:397:
+        sizeof(int), 0644, NULL, &proc_dointvec_minmax,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#642: FILE: kernel/sysctl.c:397:
+        sizeof(int), 0644, NULL, &proc_dointvec_minmax,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#643: FILE: kernel/sysctl.c:398:
+        &sysctl_intvec, NULL, &zero, NULL},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#643: FILE: kernel/sysctl.c:398:
+        &sysctl_intvec, NULL, &zero, NULL},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#644: FILE: kernel/sysctl.c:399:
+       {SCHED_MAX_SLEEP_AVG, "max_sleep_avg", &max_sleep_avg,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#645: FILE: kernel/sysctl.c:400:
+        sizeof(int), 0644, NULL, &proc_dointvec_minmax,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#645: FILE: kernel/sysctl.c:400:
+        sizeof(int), 0644, NULL, &proc_dointvec_minmax,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#646: FILE: kernel/sysctl.c:401:
+        &sysctl_intvec, NULL, &one, NULL},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#646: FILE: kernel/sysctl.c:401:
+        &sysctl_intvec, NULL, &one, NULL},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#647: FILE: kernel/sysctl.c:402:
+       {SCHED_STARVATION_LIMIT, "starvation_limit", &starvation_limit,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#648: FILE: kernel/sysctl.c:403:
+        sizeof(int), 0644, NULL, &proc_dointvec_minmax,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#648: FILE: kernel/sysctl.c:403:
+        sizeof(int), 0644, NULL, &proc_dointvec_minmax,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#649: FILE: kernel/sysctl.c:404:
+        &sysctl_intvec, NULL, &zero, NULL},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#649: FILE: kernel/sysctl.c:404:
+        &sysctl_intvec, NULL, &zero, NULL},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#650: FILE: kernel/sysctl.c:405:
+       {SCHED_NODE_THRESHOLD, "node_threshold", &node_threshold,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#651: FILE: kernel/sysctl.c:406:
+        sizeof(int), 0644, NULL, &proc_dointvec_minmax,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#651: FILE: kernel/sysctl.c:406:
+        sizeof(int), 0644, NULL, &proc_dointvec_minmax,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#652: FILE: kernel/sysctl.c:407:
+        &sysctl_intvec, NULL, &zero, NULL},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#652: FILE: kernel/sysctl.c:407:
+        &sysctl_intvec, NULL, &zero, NULL},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#653: FILE: kernel/sysctl.c:408:
+       {SCHED_THREAD_GOVERNOR, "thread_governor", &thread_governor,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#654: FILE: kernel/sysctl.c:409:
+        sizeof(int), 0644, NULL, &proc_dointvec_minmax,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#654: FILE: kernel/sysctl.c:409:
+        sizeof(int), 0644, NULL, &proc_dointvec_minmax,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#655: FILE: kernel/sysctl.c:410:
+        &sysctl_intvec, NULL, &zero, NULL},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#655: FILE: kernel/sysctl.c:410:
+        &sysctl_intvec, NULL, &zero, NULL},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#656: FILE: kernel/sysctl.c:411:
+       {SCHED_USER_GOVERNOR, "user_governor", &user_governor,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#657: FILE: kernel/sysctl.c:412:
+        sizeof(int), 0644, NULL, &proc_dointvec_minmax,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#657: FILE: kernel/sysctl.c:412:
+        sizeof(int), 0644, NULL, &proc_dointvec_minmax,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#658: FILE: kernel/sysctl.c:413:
+        &sysctl_intvec, NULL, &zero, NULL},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#658: FILE: kernel/sysctl.c:413:
+        &sysctl_intvec, NULL, &zero, NULL},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#659: FILE: kernel/sysctl.c:414:
+       {0}$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000387016.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 101 errors, 185 warnings, 10 checks, 526 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000387016.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
