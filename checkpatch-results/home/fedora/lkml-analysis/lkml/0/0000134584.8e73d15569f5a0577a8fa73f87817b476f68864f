WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'i2o_device_show_class_id' to 'class_id_show'
#125: FILE: drivers/message/i2o/device.c:176:
+static DEVICE_ATTR(class_id, S_IRUGO, i2o_device_show_class_id, NULL);

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#125: FILE: drivers/message/i2o/device.c:176:
+static DEVICE_ATTR(class_id, S_IRUGO, i2o_device_show_class_id, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'i2o_device_show_tid' to 'tid_show'
#126: FILE: drivers/message/i2o/device.c:177:
+static DEVICE_ATTR(tid, S_IRUGO, i2o_device_show_tid, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#126: FILE: drivers/message/i2o/device.c:177:
+static DEVICE_ATTR(tid, S_IRUGO, i2o_device_show_tid, NULL);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp != i2o_dev'
#186: FILE: drivers/message/i2o/device.c:248:
+	if (tmp && (tmp != i2o_dev))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:TYPO_SPELLING: 'refering' may be misspelled - perhaps 'referring'?
#191: FILE: drivers/message/i2o/device.c:252:
+	/* create user entries refering to this device */
 	                       ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#192: FILE: drivers/message/i2o/device.c:253:
+	list_for_each_entry(tmp, &c->devices, list)
+	    if ((tmp->lct_data.user_tid == i2o_dev->lct_data.tid)

WARNING:TABSTOP: Statements should start on a tabstop
#193: FILE: drivers/message/i2o/device.c:254:
+	    if ((tmp->lct_data.user_tid == i2o_dev->lct_data.tid)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp->lct_data.user_tid == i2o_dev->lct_data.tid'
#193: FILE: drivers/message/i2o/device.c:254:
+	    if ((tmp->lct_data.user_tid == i2o_dev->lct_data.tid)
+		&& (tmp != i2o_dev))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp != i2o_dev'
#193: FILE: drivers/message/i2o/device.c:254:
+	    if ((tmp->lct_data.user_tid == i2o_dev->lct_data.tid)
+		&& (tmp != i2o_dev))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#194: FILE: drivers/message/i2o/device.c:255:
+	    if ((tmp->lct_data.user_tid == i2o_dev->lct_data.tid)
+		&& (tmp != i2o_dev))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp != i2o_dev'
#201: FILE: drivers/message/i2o/device.c:261:
+	if (tmp && (tmp != i2o_dev))

WARNING:TYPO_SPELLING: 'refering' may be misspelled - perhaps 'referring'?
#205: FILE: drivers/message/i2o/device.c:265:
+	/* create parent entries refering to this device */
 	                         ^^^^^^^^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#206: FILE: drivers/message/i2o/device.c:266:
+	list_for_each_entry(tmp, &c->devices, list)
+	    if ((tmp->lct_data.parent_tid == i2o_dev->lct_data.tid)

WARNING:TABSTOP: Statements should start on a tabstop
#207: FILE: drivers/message/i2o/device.c:267:
+	    if ((tmp->lct_data.parent_tid == i2o_dev->lct_data.tid)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp->lct_data.parent_tid == i2o_dev->lct_data.tid'
#207: FILE: drivers/message/i2o/device.c:267:
+	    if ((tmp->lct_data.parent_tid == i2o_dev->lct_data.tid)
+		&& (tmp != i2o_dev))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp != i2o_dev'
#207: FILE: drivers/message/i2o/device.c:267:
+	    if ((tmp->lct_data.parent_tid == i2o_dev->lct_data.tid)
+		&& (tmp != i2o_dev))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#208: FILE: drivers/message/i2o/device.c:268:
+	    if ((tmp->lct_data.parent_tid == i2o_dev->lct_data.tid)
+		&& (tmp != i2o_dev))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000134584.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 10 warnings, 8 checks, 436 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000134584.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
