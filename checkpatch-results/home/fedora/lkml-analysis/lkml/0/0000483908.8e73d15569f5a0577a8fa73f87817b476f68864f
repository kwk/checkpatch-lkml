WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#62: 
diff -ur linux-orig/Documentation/filesystems/cramfs.txt linux/Documentation/filesystems/cramfs.txt

ERROR:SPACING: space prohibited after that open parenthesis '('
#210: FILE: include/linux/cramfs_fs.h:88:
+#define CRAMFS_SUPPORTED_FLAGS	( 0x000000ff \

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#213: FILE: include/linux/cramfs_fs.h:91:
+				| CRAMFS_FLAG_SHIFTED_ROOT_OFFSET )

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#284: FILE: scripts/cramfs/cramfsck.c:77:
+static int opt_extract = 0;		/* extract cramfs (-x) */

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#292: FILE: scripts/cramfs/cramfsck.c:83:
+static unsigned long end_dir = 0;	/* end of the directory structure */

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#294: FILE: scripts/cramfs/cramfsck.c:85:
+static unsigned long end_data = 0;	/* end of the data */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#323: FILE: scripts/cramfs/cramfsck.c:125:
+	if (syserr) {
+		fprintf(stderr, ": %s", strerror(save));
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#331: FILE: scripts/cramfs/cramfsck.c:133:
+static void test_super(int *start, size_t *length) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#335: FILE: scripts/cramfs/cramfsck.c:137:
+	if (stat(filename, &st) < 0) {
+		die(FSCK_ERROR, 1, "stat failed: %s", filename);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#339: FILE: scripts/cramfs/cramfsck.c:141:
+	if (fd < 0) {
+		die(FSCK_ERROR, 1, "open failed: %s", filename);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#343: FILE: scripts/cramfs/cramfsck.c:145:
+		if (ioctl(fd, BLKGETSIZE, length) < 0) {
+			die(FSCK_ERROR, 1, "ioctl failed: unable to determine device size: %s", filename);
+		}

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#344: FILE: scripts/cramfs/cramfsck.c:146:
+			die(FSCK_ERROR, 1, "ioctl failed: unable to determine device size: %s", filename);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#348: FILE: scripts/cramfs/cramfsck.c:150:
+	}
+	else if (S_ISREG(st.st_mode)) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#351: FILE: scripts/cramfs/cramfsck.c:153:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#351: FILE: scripts/cramfs/cramfsck.c:153:
+	else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#355: FILE: scripts/cramfs/cramfsck.c:157:
+	if (*length < sizeof(struct cramfs_super)) {
+		die(FSCK_UNCORRECTED, 0, "file length too short");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#360: FILE: scripts/cramfs/cramfsck.c:162:
+	if (read(fd, &super, sizeof(super)) != sizeof(super)) {
+		die(FSCK_ERROR, 1, "read failed: %s", filename);
+	}

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#366: FILE: scripts/cramfs/cramfsck.c:168:
+	}
+	else if (*length >= (PAD_SIZE + sizeof(super))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#368: FILE: scripts/cramfs/cramfsck.c:170:
+		if (read(fd, &super, sizeof(super)) != sizeof(super)) {
+			die(FSCK_ERROR, 1, "read failed: %s", filename);
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#371: FILE: scripts/cramfs/cramfsck.c:173:
+		if (super.magic == CRAMFS_MAGIC) {
+			*start = PAD_SIZE;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#377: FILE: scripts/cramfs/cramfsck.c:179:
+	if (super.magic != CRAMFS_MAGIC) {
+		die(FSCK_UNCORRECTED, 0, "superblock magic not found");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#380: FILE: scripts/cramfs/cramfsck.c:182:
+	if (super.flags & ~CRAMFS_SUPPORTED_FLAGS) {
+		die(FSCK_ERROR, 0, "unsupported filesystem features");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#383: FILE: scripts/cramfs/cramfsck.c:185:
+	if (super.size < PAGE_CACHE_SIZE) {
+		die(FSCK_UNCORRECTED, 0, "superblock size (%d) too small", super.size);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#387: FILE: scripts/cramfs/cramfsck.c:189:
+		if (super.fsid.files == 0) {
+			die(FSCK_UNCORRECTED, 0, "zero file count");
+		}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#390: FILE: scripts/cramfs/cramfsck.c:192:
+		if (*length < super.size) {
[...]
+		else if (*length > super.size) {
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#393: FILE: scripts/cramfs/cramfsck.c:195:
+		}
+		else if (*length > super.size) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#397: FILE: scripts/cramfs/cramfsck.c:199:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#397: FILE: scripts/cramfs/cramfsck.c:199:
+	else {

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#419: FILE: scripts/cramfs/cramfsck.c:221:
+		buf = mmap(NULL, super.size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);

CHECK:SPACING: No space is necessary after a cast
#426: FILE: scripts/cramfs/cramfsck.c:228:
+		((struct cramfs_super *) (buf+start))->fsid.crc = crc32(0L, Z_NULL, 0);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#426: FILE: scripts/cramfs/cramfsck.c:228:
+		((struct cramfs_super *) (buf+start))->fsid.crc = crc32(0L, Z_NULL, 0);
 		                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#427: FILE: scripts/cramfs/cramfsck.c:229:
+		crc = crc32(crc, buf+start, super.size-start);
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#427: FILE: scripts/cramfs/cramfsck.c:229:
+		crc = crc32(crc, buf+start, super.size-start);
 		                                      ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#430: FILE: scripts/cramfs/cramfsck.c:232:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#430: FILE: scripts/cramfs/cramfsck.c:232:
+	else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#435: FILE: scripts/cramfs/cramfsck.c:237:
+		if (!buf) {
+			die(FSCK_ERROR, 1, "malloc failed");
+		}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#441: FILE: scripts/cramfs/cramfsck.c:243:
+			if (retval < 0) {
[...]
+			else if (retval == 0) {
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#444: FILE: scripts/cramfs/cramfsck.c:246:
+			}
+			else if (retval == 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#447: FILE: scripts/cramfs/cramfsck.c:249:
+			if (length == 0) {
+				((struct cramfs_super *) buf)->fsid.crc = crc32(0L, Z_NULL, 0);
+			}

CHECK:SPACING: No space is necessary after a cast
#448: FILE: scripts/cramfs/cramfsck.c:250:
+				((struct cramfs_super *) buf)->fsid.crc = crc32(0L, Z_NULL, 0);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#451: FILE: scripts/cramfs/cramfsck.c:253:
+			if (length > (super.size-start)) {
 			                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#452: FILE: scripts/cramfs/cramfsck.c:254:
+				crc = crc32(crc, buf, retval - (length - (super.size-start)));
 				                                                    ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#476: FILE: scripts/cramfs/cramfsck.c:303:
+	if (!inode) {
+		die(FSCK_ERROR, 1, "malloc failed");
+	}

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#487: FILE: scripts/cramfs/cramfsck.c:315:
+static void iput(struct cramfs_inode *inode)
             ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#512: FILE: scripts/cramfs/cramfsck.c:329:
+	if (!(super.flags & CRAMFS_FLAG_SHIFTED_ROOT_OFFSET) &&
+	    ((offset != sizeof(struct cramfs_super)) &&
+	     (offset != PAD_SIZE + sizeof(struct cramfs_super))))
+	{

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'offset != sizeof(struct cramfs_super)'
#512: FILE: scripts/cramfs/cramfsck.c:329:
+	if (!(super.flags & CRAMFS_FLAG_SHIFTED_ROOT_OFFSET) &&
+	    ((offset != sizeof(struct cramfs_super)) &&
+	     (offset != PAD_SIZE + sizeof(struct cramfs_super))))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#526: FILE: scripts/cramfs/cramfsck.c:350:
+	if (len > PAGE_CACHE_SIZE*2) {
 	                         ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#526: FILE: scripts/cramfs/cramfsck.c:350:
+	if (len > PAGE_CACHE_SIZE*2) {
+		die(FSCK_UNCORRECTED, 0, "data block too large");
+	}

CHECK:CAMELCASE: Avoid CamelCase: <zError>
#535: FILE: scripts/cramfs/cramfsck.c:356:
+		    zError(err), src, len);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: No space is necessary after a cast
#546: FILE: scripts/cramfs/cramfsck.c:367:
+		unsigned long next = *(u32 *) romfs_read(offset);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#548: FILE: scripts/cramfs/cramfsck.c:369:
+		if (next > end_data) {
+			end_data = next;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#554: FILE: scripts/cramfs/cramfsck.c:375:
+			if (opt_verbose > 1) {
+				printf("  hole at %ld (%d)\n", curr, PAGE_CACHE_SIZE);
+			}

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#561: FILE: scripts/cramfs/cramfsck.c:382:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#561: FILE: scripts/cramfs/cramfsck.c:382:
+		else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#562: FILE: scripts/cramfs/cramfsck.c:383:
+			if (opt_verbose > 1) {
+				printf("  uncompressing block at %ld to %ld (%ld)\n", curr, next, next - curr);
+			}

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#563: FILE: scripts/cramfs/cramfsck.c:384:
+				printf("  uncompressing block at %ld to %ld (%ld)\n", curr, next, next - curr);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#568: FILE: scripts/cramfs/cramfsck.c:389:
+			if (out != PAGE_CACHE_SIZE) {
+				die(FSCK_UNCORRECTED, 0, "non-block (%ld) bytes", out);
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#572: FILE: scripts/cramfs/cramfsck.c:393:
+			if (out != size) {
+				die(FSCK_UNCORRECTED, 0, "non-size (%ld vs %ld) bytes", out, size);
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#578: FILE: scripts/cramfs/cramfsck.c:399:
+			if (write(fd, outbuffer, out) < 0) {
+				die(FSCK_ERROR, 1, "write failed: %s", path);
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#622: FILE: scripts/cramfs/cramfsck.c:437:
+	if (!newpath) {
+		die(FSCK_ERROR, 1, "malloc failed");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#625: FILE: scripts/cramfs/cramfsck.c:440:
+	if (offset == 0 && count != 0) {
+		die(FSCK_UNCORRECTED, 0, "directory inode has zero offset and non-zero size: %s", path);
+	}

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#626: FILE: scripts/cramfs/cramfsck.c:441:
+		die(FSCK_UNCORRECTED, 0, "directory inode has zero offset and non-zero size: %s", path);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#628: FILE: scripts/cramfs/cramfsck.c:443:
+	if (offset != 0 && offset < start_dir) {
+		start_dir = offset;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#635: FILE: scripts/cramfs/cramfsck.c:450:
+	if (opt_verbose) {
+		print_node('d', i, path);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#639: FILE: scripts/cramfs/cramfsck.c:454:
+		if (mkdir(path, i->mode) < 0) {
+			die(FSCK_ERROR, 1, "mkdir failed: %s", path);
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#656: FILE: scripts/cramfs/cramfsck.c:471:
+		if (newlen == 0) {
+			die(FSCK_UNCORRECTED, 0, "filename length is zero");
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#659: FILE: scripts/cramfs/cramfsck.c:474:
+		if ((pathlen + newlen) - strlen(newpath) > 3) {
+			die(FSCK_UNCORRECTED, 0, "bad filename length");
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#666: FILE: scripts/cramfs/cramfsck.c:481:
+		if (offset <= start_dir) {
+			die(FSCK_UNCORRECTED, 0, "bad inode offset");
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#669: FILE: scripts/cramfs/cramfsck.c:484:
+		if (offset > end_dir) {
+			end_dir = offset;
+		}

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#672: FILE: scripts/cramfs/cramfsck.c:487:
+		iput(child); /* free(child) */
 		^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#682: FILE: scripts/cramfs/cramfsck.c:497:
+	if (offset == 0 && i->size != 0) {
+		die(FSCK_UNCORRECTED, 0, "file inode has zero offset and non-zero size");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#685: FILE: scripts/cramfs/cramfsck.c:500:
+	if (i->size == 0 && offset != 0) {
+		die(FSCK_UNCORRECTED, 0, "file inode has zero size and non-zero offset");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#688: FILE: scripts/cramfs/cramfsck.c:503:
+	if (offset != 0 && offset < start_data) {
+		start_data = offset;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#691: FILE: scripts/cramfs/cramfsck.c:506:
+	if (opt_verbose) {
+		print_node('f', i, path);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#696: FILE: scripts/cramfs/cramfsck.c:511:
+		if (fd < 0) {
+			die(FSCK_ERROR, 1, "open failed: %s", path);
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#700: FILE: scripts/cramfs/cramfsck.c:515:
+	if (i->size) {
+		do_uncompress(path, fd, offset, i->size);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#713: FILE: scripts/cramfs/cramfsck.c:531:
+	if (offset == 0) {
+		die(FSCK_UNCORRECTED, 0, "symbolic link has zero offset");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#716: FILE: scripts/cramfs/cramfsck.c:534:
+	if (i->size == 0) {
+		die(FSCK_UNCORRECTED, 0, "symbolic link has zero size");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#720: FILE: scripts/cramfs/cramfsck.c:538:
+	if (offset < start_data) {
+		start_data = offset;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#752: FILE: scripts/cramfs/cramfsck.c:561:
+		if (symlink(outbuffer, path) < 0) {
+			die(FSCK_ERROR, 1, "symlink failed: %s", path);
+		}

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#773: FILE: scripts/cramfs/cramfsck.c:584:
 	}
+	else if (S_ISFIFO(i->mode)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#774: FILE: scripts/cramfs/cramfsck.c:585:
+		if (i->size != 0) {
+			die(FSCK_UNCORRECTED, 0, "fifo has non-zero size: %s", path);
+		}

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#780: FILE: scripts/cramfs/cramfsck.c:590:
+	}
+	else if (S_ISSOCK(i->mode)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#781: FILE: scripts/cramfs/cramfsck.c:591:
+		if (i->size != 0) {
+			die(FSCK_UNCORRECTED, 0, "socket has non-zero size: %s", path);
+		}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#851: FILE: scripts/cramfs/cramfsck.c:615:
+	if (S_ISDIR(inode->mode)) {
[...]
+	else if (S_ISREG(inode->mode)) {
[...]
+	else if (S_ISLNK(inode->mode)) {
[...]
+	else {
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#854: FILE: scripts/cramfs/cramfsck.c:618:
+	}
+	else if (S_ISREG(inode->mode)) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#857: FILE: scripts/cramfs/cramfsck.c:621:
+	}
+	else if (S_ISLNK(inode->mode)) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#860: FILE: scripts/cramfs/cramfsck.c:624:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#860: FILE: scripts/cramfs/cramfsck.c:624:
+	else {

CHECK:CAMELCASE: Avoid CamelCase: <inflateInit>
#934: FILE: scripts/cramfs/cramfsck.c:638:
+	inflateInit(&stream);

CHECK:CAMELCASE: Avoid CamelCase: <inflateEnd>
#936: FILE: scripts/cramfs/cramfsck.c:640:
+	inflateEnd(&stream);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#938: FILE: scripts/cramfs/cramfsck.c:642:
+		if (start_data < (sizeof(struct cramfs_super) + start)) {
+			die(FSCK_UNCORRECTED, 0, "directory data start (%ld) < sizeof(struct cramfs_super) + start (%ld)", start_data, sizeof(struct cramfs_super) + start);
 		}

WARNING:LONG_LINE: line length of 172 exceeds 100 columns
#939: FILE: scripts/cramfs/cramfsck.c:643:
+			die(FSCK_UNCORRECTED, 0, "directory data start (%ld) < sizeof(struct cramfs_super) + start (%ld)", start_data, sizeof(struct cramfs_super) + start);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#944: FILE: scripts/cramfs/cramfsck.c:645:
+		if (end_dir != start_data) {
+			die(FSCK_UNCORRECTED, 0, "directory data end (%ld) != file data start (%ld)", end_dir, start_data);
 		}

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#945: FILE: scripts/cramfs/cramfsck.c:646:
+			die(FSCK_UNCORRECTED, 0, "directory data end (%ld) != file data start (%ld)", end_dir, start_data);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#955: FILE: scripts/cramfs/cramfsck.c:650:
+		if (end_data > super.size) {
+			die(FSCK_UNCORRECTED, 0, "invalid file data offset");
 		}

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#965: FILE: scripts/cramfs/cramfsck.c:654:
+	iput(root);		/* free(root) */
 	^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1141: FILE: scripts/cramfs/cramfsck.c:696:
+	if (opt_verbose) {
+		printf("%s: OK\n", filename);
 	}

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1168: FILE: scripts/cramfs/mkcramfs.c:18:
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1242: FILE: scripts/cramfs/mkcramfs.c:73:
+		  + (1 << CRAMFS_SIZE_WIDTH) * 4 / PAGE_CACHE_SIZE /* block pointers */ )

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1258: FILE: scripts/cramfs/mkcramfs.c:90:
+static u32 opt_edition = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1262: FILE: scripts/cramfs/mkcramfs.c:94:
+static int opt_verbose = 0;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'usage', this function's name, in a string
#1307: FILE: scripts/cramfs/mkcramfs.c:123:
+	fprintf(stream, "usage: %s [-h] [-e edition] [-i file] [-n name] dirname outfile\n"

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1332: FILE: scripts/cramfs/mkcramfs.c:148:
+	if (syserr) {
+		fprintf(stderr, ": %s", strerror(save));
+	}

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1354: FILE: scripts/cramfs/mkcramfs.c:162:
+	if (orig->size == newfile->size && orig->uncompressed &&
+	    !memcmp(orig->uncompressed, newfile->uncompressed, orig->size))
+	{

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1360: FILE: scripts/cramfs/mkcramfs.c:168:
+	return (find_identical_file(orig->child,newfile) ||
 	                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1361: FILE: scripts/cramfs/mkcramfs.c:169:
+		find_identical_file(orig->next,newfile));
 		                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1373: FILE: scripts/cramfs/mkcramfs.c:176:
+		eliminate_doubles(root,orig->child);
 		                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1374: FILE: scripts/cramfs/mkcramfs.c:177:
+		eliminate_doubles(root,orig->next);
 		                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1412: FILE: scripts/cramfs/mkcramfs.c:238:
+			die(MKFS_ERROR, 0,
+				"very long (%u bytes) filename found: %s\n"

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1450: FILE: scripts/cramfs/mkcramfs.c:264:
+				if (entry->name[namelen] < 0x80 || !namelen) {
+					die(MKFS_ERROR, 0, "cannot truncate filenames not encoded in UTF-8");
+				}

WARNING:LONG_LINE_STRING: line length of 109 exceeds 100 columns
#1451: FILE: scripts/cramfs/mkcramfs.c:265:
+					die(MKFS_ERROR, 0, "cannot truncate filenames not encoded in UTF-8");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1469: FILE: scripts/cramfs/mkcramfs.c:281:
+			   supports >16-bit uids. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1488: FILE: scripts/cramfs/mkcramfs.c:309:
+				if (entry->uncompressed == MAP_FAILED) {
+					die(MKFS_ERROR, 1, "mmap failed");
 				}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1548: FILE: scripts/cramfs/mkcramfs.c:393:
+	if ((offset & 3) != 0) {
+		die(MKFS_ERROR, 0, "illegal offset of %lu bytes", offset);
+	}

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1569: FILE: scripts/cramfs/mkcramfs.c:412:
+	if (S_ISREG(e->mode)) type = 'f';

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1570: FILE: scripts/cramfs/mkcramfs.c:413:
+	else if (S_ISDIR(e->mode)) type = 'd';

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1571: FILE: scripts/cramfs/mkcramfs.c:414:
+	else if (S_ISLNK(e->mode)) type = 'l';

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1572: FILE: scripts/cramfs/mkcramfs.c:415:
+	else if (S_ISCHR(e->mode)) type = 'c';

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1573: FILE: scripts/cramfs/mkcramfs.c:416:
+	else if (S_ISBLK(e->mode)) type = 'b';

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1574: FILE: scripts/cramfs/mkcramfs.c:417:
+	else if (S_ISFIFO(e->mode)) type = 'p';

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1575: FILE: scripts/cramfs/mkcramfs.c:418:
+	else if (S_ISSOCK(e->mode)) type = 's';

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1581: FILE: scripts/cramfs/mkcramfs.c:424:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1581: FILE: scripts/cramfs/mkcramfs.c:424:
+	else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1604: FILE: scripts/cramfs/mkcramfs.c:445:
+	if (!entry_stack) {
+		die(MKFS_ERROR, 1, "malloc failed");
+	}

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#1632: FILE: scripts/cramfs/mkcramfs.c:486:
+					entry_stack = realloc(entry_stack, stack_size * sizeof(struct entry *));

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1633: FILE: scripts/cramfs/mkcramfs.c:487:
+					if (!entry_stack) {
+						die(MKFS_ERROR, 1, "realloc failed");
+					}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1657: FILE: scripts/cramfs/mkcramfs.c:522:
+		if (opt_verbose) {
+			printf("%s:\n", entry->name);
+		}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1707: FILE: scripts/cramfs/mkcramfs.c:574:
+		if (!(opt_holes && is_zero (uncompressed, input))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1709: FILE: scripts/cramfs/mkcramfs.c:576:
+			if (err != Z_OK) {
+				die(MKFS_ERROR, 0, "compression error: %s", zError(err));
+			}

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1720: FILE: scripts/cramfs/mkcramfs.c:585:
+			die(MKFS_ERROR, 0, "AIEEE: block \"compressed\" to > 2*blocklength (%ld)", len);

CHECK:SPACING: No space is necessary after a cast
#1732: FILE: scripts/cramfs/mkcramfs.c:600:
+		       (change * 100) / (double) original_size, change, name);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1753: FILE: scripts/cramfs/mkcramfs.c:620:
+			}
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#1753: FILE: scripts/cramfs/mkcramfs.c:620:
+			else {

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#1756: FILE: scripts/cramfs/mkcramfs.c:623:
+				offset = do_compress(base, offset, entry->name, entry->uncompressed, entry->size);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1762: FILE: scripts/cramfs/mkcramfs.c:628:
+		entry=entry->next;
 		     ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1775: FILE: scripts/cramfs/mkcramfs.c:643:
+	if (buf == MAP_FAILED) {
+		die(MKFS_ERROR, 1, "mmap failed");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1874: FILE: scripts/cramfs/mkcramfs.c:726:
+	if (fd < 0) {
+		die(MKFS_USAGE, 1, "open failed: %s", outfile);
+	}

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1891: FILE: scripts/cramfs/mkcramfs.c:741:
+	   what we're going to write later on */

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#1897: FILE: scripts/cramfs/mkcramfs.c:746:
+			"warning: estimate of required size (upper bound) is %LdMB, but maximum image size is %uMB, we might die prematurely\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1907: FILE: scripts/cramfs/mkcramfs.c:753:
+	/* find duplicate files. TODO: uses the most inefficient algorithm
+	   possible. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1907: FILE: scripts/cramfs/mkcramfs.c:753:
+	   possible. */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1908: FILE: scripts/cramfs/mkcramfs.c:754:
+	eliminate_doubles(root_entry,root_entry);
 	                            ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1926: FILE: scripts/cramfs/mkcramfs.c:764:
+	   and revert to anonymous mmap if the shared mmap fails. */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1932: FILE: scripts/cramfs/mkcramfs.c:767:
+	if (rom_image == MAP_FAILED) {
+		die(MKFS_ERROR, 1, "mmap failed");
 	}

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1942: FILE: scripts/cramfs/mkcramfs.c:790:
+	   losetup works. */

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#1960: FILE: scripts/cramfs/mkcramfs.c:806:
+		die(MKFS_ERROR, 0, "not enough space allocated for ROM image (%Ld allocated, %d used)", fslen_ub, offset);

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#1960: FILE: scripts/cramfs/mkcramfs.c:806:
+		die(MKFS_ERROR, 0, "not enough space allocated for ROM image (%Ld allocated, %d used)", fslen_ub, offset);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1972: FILE: scripts/cramfs/mkcramfs.c:814:
+		die(MKFS_ERROR, 0, "ROM image write failed (wrote %d of %d bytes)", written, offset);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1980: FILE: scripts/cramfs/mkcramfs.c:818:
+	   screen too quickly.) */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000483908.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 40 errors, 88 warnings, 22 checks, 1897 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000483908.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
