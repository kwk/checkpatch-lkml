WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#54: FILE: drivers/net/irda/nsc-ircc.c:92:
+static int __devinit nsc_ircc_pnp_probe(struct pnp_dev *dev, const struct pnp_device_id *id);

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#55: FILE: drivers/net/irda/nsc-ircc.c:93:
+static void __devexit nsc_ircc_pnp_remove(struct pnp_dev * dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#55: FILE: drivers/net/irda/nsc-ircc.c:93:
+static void __devexit nsc_ircc_pnp_remove(struct pnp_dev * dev);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#134: FILE: drivers/net/irda/nsc-ircc.c:278:
+static int __devinit nsc_ircc_open(chipio_t *info)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#145: FILE: drivers/net/irda/nsc-ircc.c:289:
+	for (i=0; i < 4; i++) {
 	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#150: FILE: drivers/net/irda/nsc-ircc.c:294:
+		IRDA_ERROR("%s(), maximum number of supported chips reached!\n", __FUNCTION__);

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#162: FILE: drivers/net/irda/nsc-ircc.c:436:
+static int __devexit nsc_ircc_close(struct nsc_ircc_cb *self)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#171: FILE: drivers/net/irda/nsc-ircc.c:854:
+static int __devinit

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#182: FILE: drivers/net/irda/nsc-ircc.c:865:
+	 * motherboard. Oh well... Jean II */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#185: FILE: drivers/net/irda/nsc-ircc.c:868:
+	if (pnp_port_valid(dev, 0) &&
+		!(pnp_port_flags(dev, 0) & IORESOURCE_DISABLED))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#189: FILE: drivers/net/irda/nsc-ircc.c:872:
+	if (pnp_irq_valid(dev, 0) &&
+		!(pnp_irq_flags(dev, 0) & IORESOURCE_DISABLED))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: drivers/net/irda/nsc-ircc.c:876:
+	if (pnp_dma_valid(dev, 0) &&
+		!(pnp_dma_flags(dev, 0) & IORESOURCE_DISABLED))

WARNING:LONG_LINE: line length of 156 exceeds 100 columns
#196: FILE: drivers/net/irda/nsc-ircc.c:879:
+	IRDA_DEBUG(0, "%s() : Found cfg_base 0x%03X ; firbase 0x%03X ; irq %d ; dma %d.\n", __FUNCTION__, info.cfg_base, info.fir_base, info.irq, info.dma);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#196: FILE: drivers/net/irda/nsc-ircc.c:879:
+	IRDA_DEBUG(0, "%s() : Found cfg_base 0x%03X ; firbase 0x%03X ; irq %d ; dma %d.\n", __FUNCTION__, info.cfg_base, info.fir_base, info.irq, info.dma);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info.fir_base == 0'
#198: FILE: drivers/net/irda/nsc-ircc.c:881:
+	if(/*(info.cfg_base == 0) ||*/ (info.fir_base == 0) ||
+	   (info.irq == -1) || (info.dma == -1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required before the open parenthesis '('
#198: FILE: drivers/net/irda/nsc-ircc.c:881:
+	if(/*(info.cfg_base == 0) ||*/ (info.fir_base == 0) ||

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#212: FILE: drivers/net/irda/nsc-ircc.c:895:
+static void __devexit

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#213: FILE: drivers/net/irda/nsc-ircc.c:896:
+nsc_ircc_pnp_remove(struct pnp_dev * dev)

WARNING:LINE_SPACING: Missing a blank line after declarations
#216: FILE: drivers/net/irda/nsc-ircc.c:899:
+	int index = (int)pnp_get_drvdata(dev);
+	if (index && dev_self[index - 1])

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000120016.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 11 warnings, 4 checks, 178 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000120016.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
