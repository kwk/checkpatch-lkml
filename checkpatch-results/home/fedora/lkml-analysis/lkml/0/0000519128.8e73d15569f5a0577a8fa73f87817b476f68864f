WARNING:TYPO_SPELLING: 'transmited' may be misspelled - perhaps 'transmitted'?
#25: 
Protocol) packets which can be transmited by various pieces of Cisco kit.
                               ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'recieve' may be misspelled - perhaps 'receive'?
#38: 
recieve code, and it doesn't delete neighors whose TTL's have expired yet
^^^^^^^

WARNING:TYPO_SPELLING: 'neighors' may be misspelled - perhaps 'neighbors'?
#38: 
recieve code, and it doesn't delete neighors whose TTL's have expired yet
                                    ^^^^^^^^

WARNING:TYPO_SPELLING: 'eventualy' may be misspelled - perhaps 'eventually'?
#41: 
	The plan is eventualy to make the addition transmit CDP packets as
	            ^^^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#49: 
diff -urN -X dontdiff linux-2.4/Documentation/Configure.help linux-2.4.7-cdp/Documentation/Configure.help

WARNING:TYPO_SPELLING: 'Debuging' may be misspelled - perhaps 'Debugging'?
#70: FILE: Documentation/Configure.help:4243:
+CDP Debuging
     ^^^^^^^^

WARNING:TYPO_SPELLING: 'debuging' may be misspelled - perhaps 'debugging'?
#72: FILE: Documentation/Configure.help:4245:
+  Enable debuging information in the CDP code - this generate a lot of
          ^^^^^^^^

WARNING:TYPO_SPELLING: 'debuging' may be misspelled - perhaps 'debugging'?
#76: FILE: Documentation/Configure.help:4249:
+  generates over 20 lines of debuging information.
                              ^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#88: FILE: include/net/cdp.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#91: FILE: include/net/cdp.h:4:
+ * ^Iwhich is available from:$

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#98: FILE: include/net/cdp.h:11:
+ *	This software is released under the the GNU Public Licence (GPL).

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#99: FILE: include/net/cdp.h:12:
+ *	This software is released under the the GNU Public Licence (GPL).
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#106: FILE: include/net/cdp.h:19:
+#define CDP_POLL		HZ*5	/* poll the neighbor list every 5 seconds for expired
                 		  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#106: FILE: include/net/cdp.h:19:
+#define CDP_POLL		HZ*5	/* poll the neighbor list every 5 seconds for expired

WARNING:TYPO_SPELLING: 'entires' may be misspelled - perhaps 'entries'?
#107: FILE: include/net/cdp.h:20:
+						entires */
 						^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#107: FILE: include/net/cdp.h:20:
+#define CDP_POLL		HZ*5	/* poll the neighbor list every 5 seconds for expired
+						entires */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#107: FILE: include/net/cdp.h:20:
+						entires */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#108: FILE: include/net/cdp.h:21:
+#define CDP_TXTIME		HZ*60	/* send out packets every 60 seconds */
                   		  ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#108: FILE: include/net/cdp.h:21:
+#define CDP_TXTIME		HZ*60	/* send out packets every 60 seconds */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#110: FILE: include/net/cdp.h:23:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#113: FILE: include/net/cdp.h:26:
+#define CDP_TYPE_ADDRESS ^I0x0002$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#131: FILE: include/net/cdp.h:44:
+struct s_cdp_neighbor {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#141: FILE: include/net/cdp.h:54:
+	struct in_addr cdp_addresss;	/* FIXME This should really be a linked list of
+					addresses, since routers can have more than one.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#143: FILE: include/net/cdp.h:56:
+					here also? */

CHECK:CAMELCASE: Avoid CamelCase: <cdp_portID>
#147: FILE: include/net/cdp.h:60:
+	char *cdp_portID;		/* Remote port origin */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#252: FILE: net/cdp/af_cdp.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#255: FILE: net/cdp/af_cdp.c:4:
+ * ^IThis code is derived from protocol specifications by Cisco Systems$

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#269: FILE: net/cdp/af_cdp.c:18:
+ *	This software is released under the the GNU Public Licence (GPL).

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#271: FILE: net/cdp/af_cdp.c:20:
+ *
+*/

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#307: FILE: net/cdp/af_cdp.c:56:
+{
+

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#310: FILE: net/cdp/af_cdp.c:59:
+	while(p != NULL)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#310: FILE: net/cdp/af_cdp.c:59:
+	while(p != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#310: FILE: net/cdp/af_cdp.c:59:
+	while(p != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#313: FILE: net/cdp/af_cdp.c:62:
+		printk(KERN_DEBUG "CDP: Comparing neighbor with %.2X:%.2X:%.2X:%.2X:%.2X:%.2X\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#314: FILE: net/cdp/af_cdp.c:63:
+		printk(KERN_DEBUG "CDP: Comparing neighbor with %.2X:%.2X:%.2X:%.2X:%.2X:%.2X\n",
+			p->remote_ethernet[0],

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#321: FILE: net/cdp/af_cdp.c:70:
+		if (!memcmp(remote_ethernet, p->remote_ethernet, ETH_ALEN))
+		{

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#324: FILE: net/cdp/af_cdp.c:73:
+			printk(KERN_DEBUG "CDP: Matches existing entry\n");

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#327: FILE: net/cdp/af_cdp.c:76:
+			return p;
+		} else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#329: FILE: net/cdp/af_cdp.c:78:
+			printk(KERN_DEBUG "CDP: Doesn't match, trying next entry (if any)\n");

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#335: FILE: net/cdp/af_cdp.c:84:
+	/* fallthrough */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

ERROR:SPACING: space required before the open parenthesis '('
#342: FILE: net/cdp/af_cdp.c:91:
+	if(p->prev)

ERROR:SPACING: space required before the open parenthesis '('
#345: FILE: net/cdp/af_cdp.c:94:
+	if(p->next)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#355: FILE: net/cdp/af_cdp.c:104:
+	printk(KERN_DEBUG "CDP: Freeing neighbor entry at memory ref: 0x%X\n",p);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#355: FILE: net/cdp/af_cdp.c:104:
+	printk(KERN_DEBUG "CDP: Freeing neighbor entry at memory ref: 0x%X\n",p);
 	                                                                     ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#363: FILE: net/cdp/af_cdp.c:112:
+{
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#365: FILE: net/cdp/af_cdp.c:114:
+	/* We store all data localy in host byte order, which means we need to run ntoh[l/s] over
+		all the numeric values (except single bytes of course).  It's safe to always run

WARNING:TYPO_SPELLING: 'systmes' may be misspelled - perhaps 'systems'?
#367: FILE: net/cdp/af_cdp.c:116:
+		byte order (as is the case with Big Endian systmes). */
 		                                           ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#367: FILE: net/cdp/af_cdp.c:116:
+		byte order (as is the case with Big Endian systmes). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#375: FILE: net/cdp/af_cdp.c:124:
+	/* If we have less than 4 bytes of data, we don't have a valid CDP packet, return
+		NULL so we know to toast the record */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#375: FILE: net/cdp/af_cdp.c:124:
+		NULL so we know to toast the record */

ERROR:SPACING: space required before the open parenthesis '('
#376: FILE: net/cdp/af_cdp.c:125:
+	if(skb->len < 4)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#380: FILE: net/cdp/af_cdp.c:129:
+	/* copy the timestamp from the skb to the neighbor so we know
+		when it arrived, and therefore know when to expire it */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#380: FILE: net/cdp/af_cdp.c:129:
+		when it arrived, and therefore know when to expire it */

ERROR:SPACING: space required after that ',' (ctx:VxO)
#381: FILE: net/cdp/af_cdp.c:130:
+	memcpy(&(p->timestamp),&(skb->stamp),sizeof(struct timeval));
 	                      ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#381: FILE: net/cdp/af_cdp.c:130:
+	memcpy(&(p->timestamp),&(skb->stamp),sizeof(struct timeval));
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#381: FILE: net/cdp/af_cdp.c:130:
+	memcpy(&(p->timestamp),&(skb->stamp),sizeof(struct timeval));
 	                                    ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around p->timestamp
#381: FILE: net/cdp/af_cdp.c:130:
+	memcpy(&(p->timestamp),&(skb->stamp),sizeof(struct timeval));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around skb->stamp
#381: FILE: net/cdp/af_cdp.c:130:
+	memcpy(&(p->timestamp),&(skb->stamp),sizeof(struct timeval));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#382: FILE: net/cdp/af_cdp.c:131:
+	memcpy(&(p->cdp_version),(skb->data)++,1);
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#382: FILE: net/cdp/af_cdp.c:131:
+	memcpy(&(p->cdp_version),(skb->data)++,1);
 	                                      ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around p->cdp_version
#382: FILE: net/cdp/af_cdp.c:131:
+	memcpy(&(p->cdp_version),(skb->data)++,1);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#383: FILE: net/cdp/af_cdp.c:132:
+	memcpy(&(p->cdp_ttl),(skb->data)++,1);
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#383: FILE: net/cdp/af_cdp.c:132:
+	memcpy(&(p->cdp_ttl),(skb->data)++,1);
 	                                  ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around p->cdp_ttl
#383: FILE: net/cdp/af_cdp.c:132:
+	memcpy(&(p->cdp_ttl),(skb->data)++,1);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#384: FILE: net/cdp/af_cdp.c:133:
+	memcpy(&(p->cdp_checksum),(skb->data)++,2); (skb->data)++;
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#384: FILE: net/cdp/af_cdp.c:133:
+	memcpy(&(p->cdp_checksum),(skb->data)++,2); (skb->data)++;
 	                                       ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around p->cdp_checksum
#384: FILE: net/cdp/af_cdp.c:133:
+	memcpy(&(p->cdp_checksum),(skb->data)++,2); (skb->data)++;

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#391: FILE: net/cdp/af_cdp.c:140:
+	if ((p->remote_ethernet = (unsigned char *)kmalloc(sizeof(unsigned char)*ETH_ALEN,GFP_ATOMIC)) == NULL)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#391: FILE: net/cdp/af_cdp.c:140:
+	if ((p->remote_ethernet = (unsigned char *)kmalloc(sizeof(unsigned char)*ETH_ALEN,GFP_ATOMIC)) == NULL)
+	{

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#391: FILE: net/cdp/af_cdp.c:140:
+	if ((p->remote_ethernet = (unsigned char *)kmalloc(sizeof(unsigned char)*ETH_ALEN,GFP_ATOMIC)) == NULL)
 	                                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#391: FILE: net/cdp/af_cdp.c:140:
+	if ((p->remote_ethernet = (unsigned char *)kmalloc(sizeof(unsigned char)*ETH_ALEN,GFP_ATOMIC)) == NULL)
 	                                                                                 ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#391: FILE: net/cdp/af_cdp.c:140:
+	if ((p->remote_ethernet = (unsigned char *)kmalloc(sizeof(unsigned char)*ETH_ALEN,GFP_ATOMIC)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#391: FILE: net/cdp/af_cdp.c:140:
+	if ((p->remote_ethernet = (unsigned char *)kmalloc(sizeof(unsigned char)*ETH_ALEN,GFP_ATOMIC)) == NULL)
[...]
+	} else {
[...]

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#391: FILE: net/cdp/af_cdp.c:140:
+	if ((p->remote_ethernet = (unsigned char *)kmalloc(sizeof(unsigned char)*ETH_ALEN,GFP_ATOMIC)) == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#393: FILE: net/cdp/af_cdp.c:142:
+		printk(KERN_CRIT "CDP: Could not allocate memory for neighbor key member.\n");

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#395: FILE: net/cdp/af_cdp.c:144:
+		return NULL;
+	} else {

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#399: FILE: net/cdp/af_cdp.c:148:
+	if ((p->local_iface = (char *)kmalloc(sizeof(unsigned char)*strlen(skb->dev->name),GFP_ATOMIC)) == NULL)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#399: FILE: net/cdp/af_cdp.c:148:
+	if ((p->local_iface = (char *)kmalloc(sizeof(unsigned char)*strlen(skb->dev->name),GFP_ATOMIC)) == NULL)
+	{

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#399: FILE: net/cdp/af_cdp.c:148:
+	if ((p->local_iface = (char *)kmalloc(sizeof(unsigned char)*strlen(skb->dev->name),GFP_ATOMIC)) == NULL)
 	                                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#399: FILE: net/cdp/af_cdp.c:148:
+	if ((p->local_iface = (char *)kmalloc(sizeof(unsigned char)*strlen(skb->dev->name),GFP_ATOMIC)) == NULL)
 	                                                                                  ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#399: FILE: net/cdp/af_cdp.c:148:
+	if ((p->local_iface = (char *)kmalloc(sizeof(unsigned char)*strlen(skb->dev->name),GFP_ATOMIC)) == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#399: FILE: net/cdp/af_cdp.c:148:
+	if ((p->local_iface = (char *)kmalloc(sizeof(unsigned char)*strlen(skb->dev->name),GFP_ATOMIC)) == NULL)
[...]
+	} else {
[...]

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#399: FILE: net/cdp/af_cdp.c:148:
+	if ((p->local_iface = (char *)kmalloc(sizeof(unsigned char)*strlen(skb->dev->name),GFP_ATOMIC)) == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#401: FILE: net/cdp/af_cdp.c:150:
+		printk(KERN_CRIT "CDP: Could not allocate memory for neighbor member.\n");

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#404: FILE: net/cdp/af_cdp.c:153:
+		return NULL;
+	} else {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#405: FILE: net/cdp/af_cdp.c:154:
+		strncpy(p->local_iface,(char *)(skb->dev->name),IFNAMSIZ);
 		                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#405: FILE: net/cdp/af_cdp.c:154:
+		strncpy(p->local_iface,(char *)(skb->dev->name),IFNAMSIZ);
 		                                               ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#409: FILE: net/cdp/af_cdp.c:158:
+	/* only go while we're at less than the tail value - we can't actually go equal
+		to it, since we must have at least 4 bytes left for our type and length fields */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#409: FILE: net/cdp/af_cdp.c:158:
+		to it, since we must have at least 4 bytes left for our type and length fields */

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#411: FILE: net/cdp/af_cdp.c:160:
+	while(skb->data < skb->tail)
+	{

ERROR:SPACING: space required before the open parenthesis '('
#411: FILE: net/cdp/af_cdp.c:160:
+	while(skb->data < skb->tail)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#420: FILE: net/cdp/af_cdp.c:169:
+		length = (ntohs(length)-4); /* length includes the type field and length field
 		                       ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#421: FILE: net/cdp/af_cdp.c:170:
+		length = (ntohs(length)-4); /* length includes the type field and length field
+							for some reason */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#421: FILE: net/cdp/af_cdp.c:170:
+							for some reason */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#423: FILE: net/cdp/af_cdp.c:172:
+		data = (unsigned char *)kmalloc(sizeof(unsigned char)*length,GFP_ATOMIC);
 		                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#423: FILE: net/cdp/af_cdp.c:172:
+		data = (unsigned char *)kmalloc(sizeof(unsigned char)*length,GFP_ATOMIC);
 		                                                            ^

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#423: FILE: net/cdp/af_cdp.c:172:
+		data = (unsigned char *)kmalloc(sizeof(unsigned char)*length,GFP_ATOMIC);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#423: FILE: net/cdp/af_cdp.c:172:
+		data = (unsigned char *)kmalloc(sizeof(unsigned char)*length,GFP_ATOMIC);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#430: FILE: net/cdp/af_cdp.c:179:
+		printk(KERN_DEBUG "CDP: Data Type = %.4X\n",type);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#430: FILE: net/cdp/af_cdp.c:179:
+		printk(KERN_DEBUG "CDP: Data Type = %.4X\n",type);
 		                                           ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#431: FILE: net/cdp/af_cdp.c:180:
+		printk(KERN_DEBUG "CDP: Data Length = %d bytes\n",length);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#431: FILE: net/cdp/af_cdp.c:180:
+		printk(KERN_DEBUG "CDP: Data Length = %d bytes\n",length);
 		                                                 ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#435: FILE: net/cdp/af_cdp.c:184:
+		switch (type)
+		{

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#443: FILE: net/cdp/af_cdp.c:192:
+				p->cdp_platform = (char *)kmalloc(sizeof(char)*length+1,GFP_ATOMIC);
 				                                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#443: FILE: net/cdp/af_cdp.c:192:
+				p->cdp_platform = (char *)kmalloc(sizeof(char)*length+1,GFP_ATOMIC);
 				                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#443: FILE: net/cdp/af_cdp.c:192:
+				p->cdp_platform = (char *)kmalloc(sizeof(char)*length+1,GFP_ATOMIC);
 				                                                       ^

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#443: FILE: net/cdp/af_cdp.c:192:
+				p->cdp_platform = (char *)kmalloc(sizeof(char)*length+1,GFP_ATOMIC);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#445: FILE: net/cdp/af_cdp.c:194:
+				*(p->cdp_platform+length) = '\000';
 				                 ^

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#449: FILE: net/cdp/af_cdp.c:198:
+				p->cdp_neighbor_sw_ver = (char *)kmalloc(sizeof(char)*length+1,GFP_ATOMIC);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#449: FILE: net/cdp/af_cdp.c:198:
+				p->cdp_neighbor_sw_ver = (char *)kmalloc(sizeof(char)*length+1,GFP_ATOMIC);
 				                                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#449: FILE: net/cdp/af_cdp.c:198:
+				p->cdp_neighbor_sw_ver = (char *)kmalloc(sizeof(char)*length+1,GFP_ATOMIC);
 				                                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#449: FILE: net/cdp/af_cdp.c:198:
+				p->cdp_neighbor_sw_ver = (char *)kmalloc(sizeof(char)*length+1,GFP_ATOMIC);
 				                                                              ^

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#449: FILE: net/cdp/af_cdp.c:198:
+				p->cdp_neighbor_sw_ver = (char *)kmalloc(sizeof(char)*length+1,GFP_ATOMIC);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#451: FILE: net/cdp/af_cdp.c:200:
+				*(p->cdp_neighbor_sw_ver+length) = '\000';
 				                        ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around p->cdp_capab_mask
#456: FILE: net/cdp/af_cdp.c:205:
+				memcpy(&(p->cdp_capab_mask), data, length);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#460: FILE: net/cdp/af_cdp.c:209:
+				printk(KERN_DEBUG "CDP: Capab Mask = %.8X\n",p->cdp_capab_mask);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#460: FILE: net/cdp/af_cdp.c:209:
+				printk(KERN_DEBUG "CDP: Capab Mask = %.8X\n",p->cdp_capab_mask);
 				                                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#464: FILE: net/cdp/af_cdp.c:213:
+					len += sprintf(buf+len, "R");
 					                  ^

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#465: FILE: net/cdp/af_cdp.c:214:
+				if ((p->cdp_capab_mask & CDP_CAPABILITY_L2TB) == CDP_CAPABILITY_L2TB)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#466: FILE: net/cdp/af_cdp.c:215:
+					len += sprintf(buf+len, "T");
 					                  ^

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#467: FILE: net/cdp/af_cdp.c:216:
+				if ((p->cdp_capab_mask & CDP_CAPABILITY_L2SRB) == CDP_CAPABILITY_L2SRB)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#468: FILE: net/cdp/af_cdp.c:217:
+					len += sprintf(buf+len, "B");
 					                  ^

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#469: FILE: net/cdp/af_cdp.c:218:
+				if ((p->cdp_capab_mask & CDP_CAPABILITY_L2SW) == CDP_CAPABILITY_L2SW)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#470: FILE: net/cdp/af_cdp.c:219:
+					len += sprintf(buf+len, "S");
 					                  ^

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#471: FILE: net/cdp/af_cdp.c:220:
+				if ((p->cdp_capab_mask & CDP_CAPABILITY_L3TXRX) == CDP_CAPABILITY_L3TXRX)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#472: FILE: net/cdp/af_cdp.c:221:
+					len += sprintf(buf+len, "r");
 					                  ^

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#473: FILE: net/cdp/af_cdp.c:222:
+				if ((p->cdp_capab_mask & CDP_CAPABILITY_IGRPFW) == CDP_CAPABILITY_IGRPFW)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#474: FILE: net/cdp/af_cdp.c:223:
+					len += sprintf(buf+len, "I");
 					                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#476: FILE: net/cdp/af_cdp.c:225:
+					len += sprintf(buf+len, "H");
 					                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#479: FILE: net/cdp/af_cdp.c:228:
+				*(p->cdp_capabitlities+len) = '\000';
 				                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#483: FILE: net/cdp/af_cdp.c:232:
+				p->cdp_portID = (char *)kmalloc(sizeof(char)*length+1,GFP_ATOMIC);
 				                                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#483: FILE: net/cdp/af_cdp.c:232:
+				p->cdp_portID = (char *)kmalloc(sizeof(char)*length+1,GFP_ATOMIC);
 				                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#483: FILE: net/cdp/af_cdp.c:232:
+				p->cdp_portID = (char *)kmalloc(sizeof(char)*length+1,GFP_ATOMIC);
 				                                                     ^

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#483: FILE: net/cdp/af_cdp.c:232:
+				p->cdp_portID = (char *)kmalloc(sizeof(char)*length+1,GFP_ATOMIC);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#485: FILE: net/cdp/af_cdp.c:234:
+				*(p->cdp_portID+length) = '\000';
 				               ^

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#493: FILE: net/cdp/af_cdp.c:242:
+				p->cdp_neighbor_id = (char *)kmalloc(sizeof(char)*length+1,GFP_ATOMIC);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#493: FILE: net/cdp/af_cdp.c:242:
+				p->cdp_neighbor_id = (char *)kmalloc(sizeof(char)*length+1,GFP_ATOMIC);
 				                                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#493: FILE: net/cdp/af_cdp.c:242:
+				p->cdp_neighbor_id = (char *)kmalloc(sizeof(char)*length+1,GFP_ATOMIC);
 				                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#493: FILE: net/cdp/af_cdp.c:242:
+				p->cdp_neighbor_id = (char *)kmalloc(sizeof(char)*length+1,GFP_ATOMIC);
 				                                                          ^

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#493: FILE: net/cdp/af_cdp.c:242:
+				p->cdp_neighbor_id = (char *)kmalloc(sizeof(char)*length+1,GFP_ATOMIC);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#495: FILE: net/cdp/af_cdp.c:244:
+				*(p->cdp_neighbor_id+length) = '\000';
 				                    ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#501: FILE: net/cdp/af_cdp.c:250:
+				printk(KERN_DEBUG "CDP: Unknown type 0x%.4X\n",type);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#501: FILE: net/cdp/af_cdp.c:250:
+				printk(KERN_DEBUG "CDP: Unknown type 0x%.4X\n",type);
 				                                              ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#515: FILE: net/cdp/af_cdp.c:264:
+	printk(KERN_DEBUG "CDP: Version = %i\n",p->cdp_version);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#515: FILE: net/cdp/af_cdp.c:264:
+	printk(KERN_DEBUG "CDP: Version = %i\n",p->cdp_version);
 	                                       ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#516: FILE: net/cdp/af_cdp.c:265:
+	printk(KERN_DEBUG "CDP: TTL = %i\n",p->cdp_ttl);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#516: FILE: net/cdp/af_cdp.c:265:
+	printk(KERN_DEBUG "CDP: TTL = %i\n",p->cdp_ttl);
 	                                   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#517: FILE: net/cdp/af_cdp.c:266:
+	printk(KERN_DEBUG "CDP: Checksum = 0x%.4X\n",p->cdp_checksum);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#517: FILE: net/cdp/af_cdp.c:266:
+	printk(KERN_DEBUG "CDP: Checksum = 0x%.4X\n",p->cdp_checksum);
 	                                            ^

WARNING:TYPO_SPELLING: 'itialise' may be misspelled - perhaps 'initialise'?
#525: FILE: net/cdp/af_cdp.c:274:
+	/* itialise all the memebers, in case no value is assigned */
 	   ^^^^^^^^

WARNING:TYPO_SPELLING: 'memebers' may be misspelled - perhaps 'members'?
#525: FILE: net/cdp/af_cdp.c:274:
+	/* itialise all the memebers, in case no value is assigned */
 	                    ^^^^^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#537: FILE: net/cdp/af_cdp.c:286:
+	p->next = p->prev = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#542: FILE: net/cdp/af_cdp.c:291:
+{
+

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#545: FILE: net/cdp/af_cdp.c:294:
+	if ((p = (struct s_cdp_neighbor *)kmalloc(sizeof(struct s_cdp_neighbor),GFP_ATOMIC)) == NULL)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#545: FILE: net/cdp/af_cdp.c:294:
+	if ((p = (struct s_cdp_neighbor *)kmalloc(sizeof(struct s_cdp_neighbor),GFP_ATOMIC)) == NULL)
+	{

ERROR:SPACING: space required after that ',' (ctx:VxV)
#545: FILE: net/cdp/af_cdp.c:294:
+	if ((p = (struct s_cdp_neighbor *)kmalloc(sizeof(struct s_cdp_neighbor),GFP_ATOMIC)) == NULL)
 	                                                                       ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#545: FILE: net/cdp/af_cdp.c:294:
+	if ((p = (struct s_cdp_neighbor *)kmalloc(sizeof(struct s_cdp_neighbor),GFP_ATOMIC)) == NULL)

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#545: FILE: net/cdp/af_cdp.c:294:
+	if ((p = (struct s_cdp_neighbor *)kmalloc(sizeof(struct s_cdp_neighbor),GFP_ATOMIC)) == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*p)...) over kmalloc(sizeof(struct s_cdp_neighbor)...)
#545: FILE: net/cdp/af_cdp.c:294:
+	if ((p = (struct s_cdp_neighbor *)kmalloc(sizeof(struct s_cdp_neighbor),GFP_ATOMIC)) == NULL)

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#547: FILE: net/cdp/af_cdp.c:296:
+		printk(KERN_CRIT "CDP: Can not allocate memory for new neighbor.\n");

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#549: FILE: net/cdp/af_cdp.c:298:
+		return NULL;
+	} else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#551: FILE: net/cdp/af_cdp.c:300:
+		printk(KERN_DEBUG "CDP: Allocated new neighbor at memory ref: 0x%X\n",p);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#551: FILE: net/cdp/af_cdp.c:300:
+		printk(KERN_DEBUG "CDP: Allocated new neighbor at memory ref: 0x%X\n",p);
 		                                                                     ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#558: FILE: net/cdp/af_cdp.c:307:
+		if (!cdp_update_neighbor(skb,p))
+		{

ERROR:SPACING: space required after that ',' (ctx:VxV)
#558: FILE: net/cdp/af_cdp.c:307:
+		if (!cdp_update_neighbor(skb,p))
 		                            ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#564: FILE: net/cdp/af_cdp.c:313:
+		if (cdp_neighbors.head == NULL)
+		{

CHECK:BRACES: braces {} should be used on all arms of this statement
#564: FILE: net/cdp/af_cdp.c:313:
+		if (cdp_neighbors.head == NULL)
[...]
+		} else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cdp_neighbors.head"
#564: FILE: net/cdp/af_cdp.c:313:
+		if (cdp_neighbors.head == NULL)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#566: FILE: net/cdp/af_cdp.c:315:
+			cdp_neighbors.foot = cdp_neighbors.head = p;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#581: FILE: net/cdp/af_cdp.c:330:
+	int len=0;
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#582: FILE: net/cdp/af_cdp.c:331:
+	off_t pos=0;
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#583: FILE: net/cdp/af_cdp.c:332:
+	off_t begin=0;
 	           ^

WARNING:LONG_LINE_STRING: line length of 102 exceeds 100 columns
#585: FILE: net/cdp/af_cdp.c:334:
+	len += sprintf(buffer,"Device ID\t\tLocal Intrfce\tHoldtme\tCapability\tPlatform\tPort ID\n");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#585: FILE: net/cdp/af_cdp.c:334:
+	len += sprintf(buffer,"Device ID\t\tLocal Intrfce\tHoldtme\tCapability\tPlatform\tPort ID\n");
 	                     ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#589: FILE: net/cdp/af_cdp.c:338:
+	while (p != NULL)
+	{

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#589: FILE: net/cdp/af_cdp.c:338:
+	while (p != NULL)

WARNING:LONG_LINE: line length of 167 exceeds 100 columns
#591: FILE: net/cdp/af_cdp.c:340:
+		len += sprintf(buffer+len, "%s\t%s\t%d\t%s\t%s\t%s\n",p->cdp_neighbor_id,p->local_iface,p->cdp_ttl,p->cdp_capabitlities,p->cdp_platform,p->cdp_portID);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#591: FILE: net/cdp/af_cdp.c:340:
+		len += sprintf(buffer+len, "%s\t%s\t%d\t%s\t%s\t%s\n",p->cdp_neighbor_id,p->local_iface,p->cdp_ttl,p->cdp_capabitlities,p->cdp_platform,p->cdp_portID);
 		                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#591: FILE: net/cdp/af_cdp.c:340:
+		len += sprintf(buffer+len, "%s\t%s\t%d\t%s\t%s\t%s\n",p->cdp_neighbor_id,p->local_iface,p->cdp_ttl,p->cdp_capabitlities,p->cdp_platform,p->cdp_portID);
 		                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#591: FILE: net/cdp/af_cdp.c:340:
+		len += sprintf(buffer+len, "%s\t%s\t%d\t%s\t%s\t%s\n",p->cdp_neighbor_id,p->local_iface,p->cdp_ttl,p->cdp_capabitlities,p->cdp_platform,p->cdp_portID);
 		                                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#591: FILE: net/cdp/af_cdp.c:340:
+		len += sprintf(buffer+len, "%s\t%s\t%d\t%s\t%s\t%s\n",p->cdp_neighbor_id,p->local_iface,p->cdp_ttl,p->cdp_capabitlities,p->cdp_platform,p->cdp_portID);
 		                                                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#591: FILE: net/cdp/af_cdp.c:340:
+		len += sprintf(buffer+len, "%s\t%s\t%d\t%s\t%s\t%s\n",p->cdp_neighbor_id,p->local_iface,p->cdp_ttl,p->cdp_capabitlities,p->cdp_platform,p->cdp_portID);
 		                                                                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#591: FILE: net/cdp/af_cdp.c:340:
+		len += sprintf(buffer+len, "%s\t%s\t%d\t%s\t%s\t%s\n",p->cdp_neighbor_id,p->local_iface,p->cdp_ttl,p->cdp_capabitlities,p->cdp_platform,p->cdp_portID);
 		                                                                                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#591: FILE: net/cdp/af_cdp.c:340:
+		len += sprintf(buffer+len, "%s\t%s\t%d\t%s\t%s\t%s\n",p->cdp_neighbor_id,p->local_iface,p->cdp_ttl,p->cdp_capabitlities,p->cdp_platform,p->cdp_portID);
 		                                                                                                                                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#595: FILE: net/cdp/af_cdp.c:344:
+		pos=begin+len;
 		   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#595: FILE: net/cdp/af_cdp.c:344:
+		pos=begin+len;
 		         ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#596: FILE: net/cdp/af_cdp.c:345:
+		if(pos<offset)
+		{

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#596: FILE: net/cdp/af_cdp.c:345:
+		if(pos<offset)
 		      ^

ERROR:SPACING: space required before the open parenthesis '('
#596: FILE: net/cdp/af_cdp.c:345:
+		if(pos<offset)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#598: FILE: net/cdp/af_cdp.c:347:
+			len=0;
 			   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#599: FILE: net/cdp/af_cdp.c:348:
+			begin=pos;
 			     ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#601: FILE: net/cdp/af_cdp.c:350:
+		if(pos>offset+length)
 		      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#601: FILE: net/cdp/af_cdp.c:350:
+		if(pos>offset+length)
 		             ^

ERROR:SPACING: space required before the open parenthesis '('
#601: FILE: net/cdp/af_cdp.c:350:
+		if(pos>offset+length)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#607: FILE: net/cdp/af_cdp.c:356:
+	*start=buffer+(offset-begin);
 	      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#607: FILE: net/cdp/af_cdp.c:356:
+	*start=buffer+(offset-begin);
 	             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#607: FILE: net/cdp/af_cdp.c:356:
+	*start=buffer+(offset-begin);
 	                     ^

ERROR:SPACING: spaces required around that '-=' (ctx:VxV)
#608: FILE: net/cdp/af_cdp.c:357:
+	len-=(offset-begin);
 	   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#608: FILE: net/cdp/af_cdp.c:357:
+	len-=(offset-begin);
 	            ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#609: FILE: net/cdp/af_cdp.c:358:
+	if(len>length)
 	      ^

ERROR:SPACING: space required before the open parenthesis '('
#609: FILE: net/cdp/af_cdp.c:358:
+	if(len>length)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#610: FILE: net/cdp/af_cdp.c:359:
+		len=length;
 		   ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#624: FILE: net/cdp/af_cdp.c:373:
+}
+SMP_TIMER_DEFINE(cdp_check_expire, cdp_expire_task);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#634: FILE: net/cdp/af_cdp.c:383:
+	/*
+	 * XXX How do we check for capabilities?

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#648: FILE: net/cdp/af_cdp.c:397:
+	 * Can the kernel route IPX packets?
+	*/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#652: FILE: net/cdp/af_cdp.c:401:
+}
+SMP_TIMER_DEFINE(cdp_send_update, cdp_update_task);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#657: FILE: net/cdp/af_cdp.c:406:
+{
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#661: FILE: net/cdp/af_cdp.c:410:
+	printk(KERN_DEBUG "CDP: Packet from %.2X:%.2X:%.2X:%.2X:%.2X:%.2X\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#662: FILE: net/cdp/af_cdp.c:411:
+	printk(KERN_DEBUG "CDP: Packet from %.2X:%.2X:%.2X:%.2X:%.2X:%.2X\n",
+		skb->mac.ethernet->h_source[0],

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#673: FILE: net/cdp/af_cdp.c:422:
+	if ( p == NULL)
+	{

ERROR:SPACING: space prohibited after that open parenthesis '('
#673: FILE: net/cdp/af_cdp.c:422:
+	if ( p == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#673: FILE: net/cdp/af_cdp.c:422:
+	if ( p == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#676: FILE: net/cdp/af_cdp.c:425:
+		printk(KERN_DEBUG "CDP: Creating new neighbor.\n");

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#680: FILE: net/cdp/af_cdp.c:429:
+	else
+	{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#680: FILE: net/cdp/af_cdp.c:429:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#683: FILE: net/cdp/af_cdp.c:432:
+		printk(KERN_DEBUG "CDP: Updating existing neighbor at memory ref: 0x%X\n",p);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#683: FILE: net/cdp/af_cdp.c:432:
+		printk(KERN_DEBUG "CDP: Updating existing neighbor at memory ref: 0x%X\n",p);
 		                                                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#685: FILE: net/cdp/af_cdp.c:434:
+		cdp_update_neighbor(skb,p);
 		                       ^

CHECK:CAMELCASE: Avoid CamelCase: <pSNAP_datalink>
#696: FILE: net/cdp/af_cdp.c:445:
+static struct datalink_proto *pSNAP_datalink;

ERROR:INIT_ATTRIBUTE: Use of const init definition must use __initconst
#698: FILE: net/cdp/af_cdp.c:447:
+static const char banner[] __initdata =

Const init definitions should use __initconst instead of
__initdata.

Similarly init definitions without const require a separate
use of const.

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#705: FILE: net/cdp/af_cdp.c:454:
+	if (!pSNAP_datalink)
+	{

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#707: FILE: net/cdp/af_cdp.c:456:
+		printk(KERN_CRIT "CDP: Unable to register with SNAP\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#711: FILE: net/cdp/af_cdp.c:460:
+	cdp_neighbors.head = cdp_neighbors.foot = NULL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#725: FILE: net/cdp/af_cdp.c:474:
+        proc_net_create("cdp_neighbors", 0, cdp_get_neighbor_info);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#725: FILE: net/cdp/af_cdp.c:474:
+        proc_net_create("cdp_neighbors", 0, cdp_get_neighbor_info);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#727: FILE: net/cdp/af_cdp.c:476:
+	printk(banner);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#735: FILE: net/cdp/af_cdp.c:484:
+{
+

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#748: FILE: net/cdp/af_cdp.c:497:
+	while(p!=NULL)
+	{

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#748: FILE: net/cdp/af_cdp.c:497:
+	while(p!=NULL)
 	       ^

ERROR:SPACING: space required before the open parenthesis '('
#748: FILE: net/cdp/af_cdp.c:497:
+	while(p!=NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#748: FILE: net/cdp/af_cdp.c:497:
+	while(p!=NULL)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#754: FILE: net/cdp/af_cdp.c:503:
+	cdp_neighbors.foot = cdp_neighbors.head = NULL;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#756: FILE: net/cdp/af_cdp.c:505:
+	printk(KERN_INFO "CDP: Exiting\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000519128.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 84 errors, 85 warnings, 64 checks, 680 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000519128.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
