ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#45: 
--- a/drivers/i2c/chips/Kconfig	Mon Feb  9 15:05:36 2004

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#80: FILE: drivers/i2c/chips/fscher.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#84: FILE: drivers/i2c/chips/fscher.c:5:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#89: FILE: drivers/i2c/chips/fscher.c:10:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#94: FILE: drivers/i2c/chips/fscher.c:15:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#96: FILE: drivers/i2c/chips/fscher.c:17:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#97: FILE: drivers/i2c/chips/fscher.c:18:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#100: FILE: drivers/i2c/chips/fscher.c:21:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: drivers/i2c/chips/fscher.c:22:
+ *  fujitsu siemens hermes chip, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#102: FILE: drivers/i2c/chips/fscher.c:23:
+ *  module based on fscpos.c $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#199: FILE: drivers/i2c/chips/fscher.c:120:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: drivers/i2c/chips/fscher.c:120:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#223: FILE: drivers/i2c/chips/fscher.c:144:
+^Iu8 volt[3];^I^I/* 12, 5, battery voltage */ $

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#236: FILE: drivers/i2c/chips/fscher.c:157:
+static int fscher_id = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#243: FILE: drivers/i2c/chips/fscher.c:164:
+static ssize_t show_##kind (struct fscher_data *, char *, int); \

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#244: FILE: drivers/i2c/chips/fscher.c:165:
+static ssize_t show_##kind##offset (struct device *, char *); \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#245: FILE: drivers/i2c/chips/fscher.c:166:
+static ssize_t show_##kind##offset (struct device *dev, char *buf) \

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#254: FILE: drivers/i2c/chips/fscher.c:175:
+static ssize_t set_##kind (struct i2c_client *, struct fscher_data *, const char *, size_t, int, int); \

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#254: FILE: drivers/i2c/chips/fscher.c:175:
+static ssize_t set_##kind (struct i2c_client *, struct fscher_data *, const char *, size_t, int, int); \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#255: FILE: drivers/i2c/chips/fscher.c:176:
+static ssize_t set_##kind##offset (struct device *, const char *, size_t); \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#256: FILE: drivers/i2c/chips/fscher.c:177:
+static ssize_t set_##kind##offset (struct device *dev, const char *buf, size_t count) \

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#263: FILE: drivers/i2c/chips/fscher.c:184:
+#define sysfs_rw_n(kind, offset, reg) \
+sysfs_r(kind, offset, reg) \
+sysfs_w(kind, offset, reg) \
+static DEVICE_ATTR(kind##offset, S_IRUGO | S_IWUSR, show_##kind##offset, set_##kind##offset);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'kind' - possible side-effects?
#263: FILE: drivers/i2c/chips/fscher.c:184:
+#define sysfs_rw_n(kind, offset, reg) \
+sysfs_r(kind, offset, reg) \
+sysfs_w(kind, offset, reg) \
+static DEVICE_ATTR(kind##offset, S_IRUGO | S_IWUSR, show_##kind##offset, set_##kind##offset);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offset' - possible side-effects?
#263: FILE: drivers/i2c/chips/fscher.c:184:
+#define sysfs_rw_n(kind, offset, reg) \
+sysfs_r(kind, offset, reg) \
+sysfs_w(kind, offset, reg) \
+static DEVICE_ATTR(kind##offset, S_IRUGO | S_IWUSR, show_##kind##offset, set_##kind##offset);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'reg' - possible side-effects?
#263: FILE: drivers/i2c/chips/fscher.c:184:
+#define sysfs_rw_n(kind, offset, reg) \
+sysfs_r(kind, offset, reg) \
+sysfs_w(kind, offset, reg) \
+static DEVICE_ATTR(kind##offset, S_IRUGO | S_IWUSR, show_##kind##offset, set_##kind##offset);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#263: FILE: drivers/i2c/chips/fscher.c:184:
+#define sysfs_rw_n(kind, offset, reg) \
+sysfs_r(kind, offset, reg) \
+sysfs_w(kind, offset, reg) \
+static DEVICE_ATTR(kind##offset, S_IRUGO | S_IWUSR, show_##kind##offset, set_##kind##offset);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#266: FILE: drivers/i2c/chips/fscher.c:187:
+static DEVICE_ATTR(kind##offset, S_IRUGO | S_IWUSR, show_##kind##offset, set_##kind##offset);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#268: FILE: drivers/i2c/chips/fscher.c:189:
+#define sysfs_rw(kind, reg) \
+sysfs_r(kind, 0, reg) \
+sysfs_w(kind, 0, reg) \
+static DEVICE_ATTR(kind, S_IRUGO | S_IWUSR, show_##kind##0, set_##kind##0);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'kind' - possible side-effects?
#268: FILE: drivers/i2c/chips/fscher.c:189:
+#define sysfs_rw(kind, reg) \
+sysfs_r(kind, 0, reg) \
+sysfs_w(kind, 0, reg) \
+static DEVICE_ATTR(kind, S_IRUGO | S_IWUSR, show_##kind##0, set_##kind##0);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'reg' - possible side-effects?
#268: FILE: drivers/i2c/chips/fscher.c:189:
+#define sysfs_rw(kind, reg) \
+sysfs_r(kind, 0, reg) \
+sysfs_w(kind, 0, reg) \
+static DEVICE_ATTR(kind, S_IRUGO | S_IWUSR, show_##kind##0, set_##kind##0);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#268: FILE: drivers/i2c/chips/fscher.c:189:
+#define sysfs_rw(kind, reg) \
+sysfs_r(kind, 0, reg) \
+sysfs_w(kind, 0, reg) \
+static DEVICE_ATTR(kind, S_IRUGO | S_IWUSR, show_##kind##0, set_##kind##0);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#271: FILE: drivers/i2c/chips/fscher.c:192:
+static DEVICE_ATTR(kind, S_IRUGO | S_IWUSR, show_##kind##0, set_##kind##0);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#273: FILE: drivers/i2c/chips/fscher.c:194:
+#define sysfs_ro_n(kind, offset, reg) \
+sysfs_r(kind, offset, reg) \
+static DEVICE_ATTR(kind##offset, S_IRUGO, show_##kind##offset, NULL);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#273: FILE: drivers/i2c/chips/fscher.c:194:
+#define sysfs_ro_n(kind, offset, reg) \
+sysfs_r(kind, offset, reg) \
+static DEVICE_ATTR(kind##offset, S_IRUGO, show_##kind##offset, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#275: FILE: drivers/i2c/chips/fscher.c:196:
+static DEVICE_ATTR(kind##offset, S_IRUGO, show_##kind##offset, NULL);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#277: FILE: drivers/i2c/chips/fscher.c:198:
+#define sysfs_ro(kind, reg) \
+sysfs_r(kind, 0, reg) \
+static DEVICE_ATTR(kind, S_IRUGO, show_##kind##0, NULL);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'kind' - possible side-effects?
#277: FILE: drivers/i2c/chips/fscher.c:198:
+#define sysfs_ro(kind, reg) \
+sysfs_r(kind, 0, reg) \
+static DEVICE_ATTR(kind, S_IRUGO, show_##kind##0, NULL);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#277: FILE: drivers/i2c/chips/fscher.c:198:
+#define sysfs_ro(kind, reg) \
+sysfs_r(kind, 0, reg) \
+static DEVICE_ATTR(kind, S_IRUGO, show_##kind##0, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#279: FILE: drivers/i2c/chips/fscher.c:200:
+static DEVICE_ATTR(kind, S_IRUGO, show_##kind##0, NULL);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#281: FILE: drivers/i2c/chips/fscher.c:202:
+#define sysfs_fan(offset, reg_status, reg_min, reg_ripple, reg_act) \
+sysfs_rw_n(pwm       , offset, reg_min) \
+sysfs_rw_n(fan_status, offset, reg_status) \
+sysfs_rw_n(fan_div   , offset, reg_ripple) \
+sysfs_ro_n(fan_input , offset, reg_act)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offset' - possible side-effects?
#281: FILE: drivers/i2c/chips/fscher.c:202:
+#define sysfs_fan(offset, reg_status, reg_min, reg_ripple, reg_act) \
+sysfs_rw_n(pwm       , offset, reg_min) \
+sysfs_rw_n(fan_status, offset, reg_status) \
+sysfs_rw_n(fan_div   , offset, reg_ripple) \
+sysfs_ro_n(fan_input , offset, reg_act)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#282: FILE: drivers/i2c/chips/fscher.c:203:
+sysfs_rw_n(pwm       , offset, reg_min) \
                      ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#284: FILE: drivers/i2c/chips/fscher.c:205:
+sysfs_rw_n(fan_div   , offset, reg_ripple) \
                      ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#285: FILE: drivers/i2c/chips/fscher.c:206:
+sysfs_ro_n(fan_input , offset, reg_act)
                      ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#287: FILE: drivers/i2c/chips/fscher.c:208:
+#define sysfs_temp(offset, reg_status, reg_act) \
+sysfs_rw_n(temp_status, offset, reg_status) \
+sysfs_ro_n(temp_input , offset, reg_act)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offset' - possible side-effects?
#287: FILE: drivers/i2c/chips/fscher.c:208:
+#define sysfs_temp(offset, reg_status, reg_act) \
+sysfs_rw_n(temp_status, offset, reg_status) \
+sysfs_ro_n(temp_input , offset, reg_act)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#289: FILE: drivers/i2c/chips/fscher.c:210:
+sysfs_ro_n(temp_input , offset, reg_act)
                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#290: FILE: drivers/i2c/chips/fscher.c:211:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: drivers/i2c/chips/fscher.c:211:
+    $

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#303: FILE: drivers/i2c/chips/fscher.c:224:
+#define sysfs_watchdog(reg_control, reg_status, reg_preset) \
+sysfs_rw(watchdog_control, reg_control) \
+sysfs_rw(watchdog_status , reg_status) \
+sysfs_rw(watchdog_preset , reg_preset)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#305: FILE: drivers/i2c/chips/fscher.c:226:
+sysfs_rw(watchdog_status , reg_status) \
                          ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#306: FILE: drivers/i2c/chips/fscher.c:227:
+sysfs_rw(watchdog_preset , reg_preset)
                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#309: FILE: drivers/i2c/chips/fscher.c:230:
+sysfs_fan(1, FSCHER_REG_FAN0_STATE, FSCHER_REG_FAN0_MIN,
+	     FSCHER_REG_FAN0_RIPPLE, FSCHER_REG_FAN0_ACT)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#311: FILE: drivers/i2c/chips/fscher.c:232:
+sysfs_fan(2, FSCHER_REG_FAN1_STATE, FSCHER_REG_FAN1_MIN,
+	     FSCHER_REG_FAN1_RIPPLE, FSCHER_REG_FAN1_ACT)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#313: FILE: drivers/i2c/chips/fscher.c:234:
+sysfs_fan(3, FSCHER_REG_FAN2_STATE, FSCHER_REG_FAN2_MIN,
+	     FSCHER_REG_FAN2_RIPPLE, FSCHER_REG_FAN2_ACT)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#327: FILE: drivers/i2c/chips/fscher.c:248:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#327: FILE: drivers/i2c/chips/fscher.c:248:
+  $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'client' - possible side-effects?
#328: FILE: drivers/i2c/chips/fscher.c:249:
+#define device_create_file_fan(client, offset) \
+do { \
+	device_create_file(&client->dev, &dev_attr_fan_status##offset); \
+	device_create_file(&client->dev, &dev_attr_pwm##offset); \
+	device_create_file(&client->dev, &dev_attr_fan_div##offset); \
+	device_create_file(&client->dev, &dev_attr_fan_input##offset); \
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'client' may be better as '(client)' to avoid precedence issues
#328: FILE: drivers/i2c/chips/fscher.c:249:
+#define device_create_file_fan(client, offset) \
+do { \
+	device_create_file(&client->dev, &dev_attr_fan_status##offset); \
+	device_create_file(&client->dev, &dev_attr_pwm##offset); \
+	device_create_file(&client->dev, &dev_attr_fan_div##offset); \
+	device_create_file(&client->dev, &dev_attr_fan_input##offset); \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'client' - possible side-effects?
#336: FILE: drivers/i2c/chips/fscher.c:257:
+#define device_create_file_temp(client, offset) \
+do { \
+	device_create_file(&client->dev, &dev_attr_temp_status##offset); \
+	device_create_file(&client->dev, &dev_attr_temp_input##offset); \
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'client' may be better as '(client)' to avoid precedence issues
#336: FILE: drivers/i2c/chips/fscher.c:257:
+#define device_create_file_temp(client, offset) \
+do { \
+	device_create_file(&client->dev, &dev_attr_temp_status##offset); \
+	device_create_file(&client->dev, &dev_attr_temp_input##offset); \
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'client' may be better as '(client)' to avoid precedence issues
#342: FILE: drivers/i2c/chips/fscher.c:263:
+#define device_create_file_in(client, offset) \
+do { \
+	device_create_file(&client->dev, &dev_attr_in_input##offset); \
+} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#342: FILE: drivers/i2c/chips/fscher.c:263:
+#define device_create_file_in(client, offset) \
+do { \
+	device_create_file(&client->dev, &dev_attr_in_input##offset); \
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'client' may be better as '(client)' to avoid precedence issues
#347: FILE: drivers/i2c/chips/fscher.c:268:
+#define device_create_file_revision(client) \
+do { \
+	device_create_file(&client->dev, &dev_attr_revision); \
+} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#347: FILE: drivers/i2c/chips/fscher.c:268:
+#define device_create_file_revision(client) \
+do { \
+	device_create_file(&client->dev, &dev_attr_revision); \
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'client' may be better as '(client)' to avoid precedence issues
#352: FILE: drivers/i2c/chips/fscher.c:273:
+#define device_create_file_alarms(client) \
+do { \
+	device_create_file(&client->dev, &dev_attr_alarms); \
+} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#352: FILE: drivers/i2c/chips/fscher.c:273:
+#define device_create_file_alarms(client) \
+do { \
+	device_create_file(&client->dev, &dev_attr_alarms); \
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'client' may be better as '(client)' to avoid precedence issues
#357: FILE: drivers/i2c/chips/fscher.c:278:
+#define device_create_file_control(client) \
+do { \
+	device_create_file(&client->dev, &dev_attr_control); \
+} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#357: FILE: drivers/i2c/chips/fscher.c:278:
+#define device_create_file_control(client) \
+do { \
+	device_create_file(&client->dev, &dev_attr_control); \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'client' - possible side-effects?
#362: FILE: drivers/i2c/chips/fscher.c:283:
+#define device_create_file_watchdog(client) \
+do { \
+	device_create_file(&client->dev, &dev_attr_watchdog_status); \
+	device_create_file(&client->dev, &dev_attr_watchdog_control); \
+	device_create_file(&client->dev, &dev_attr_watchdog_preset); \
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'client' may be better as '(client)' to avoid precedence issues
#362: FILE: drivers/i2c/chips/fscher.c:283:
+#define device_create_file_watchdog(client) \
+do { \
+	device_create_file(&client->dev, &dev_attr_watchdog_status); \
+	device_create_file(&client->dev, &dev_attr_watchdog_control); \
+	device_create_file(&client->dev, &dev_attr_watchdog_preset); \
+} while (0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#368: FILE: drivers/i2c/chips/fscher.c:289:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#368: FILE: drivers/i2c/chips/fscher.c:289:
+  $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#391: FILE: drivers/i2c/chips/fscher.c:312:
+	 * But it allows us to access i2c_smbus_read_byte_data. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#392: FILE: drivers/i2c/chips/fscher.c:313:
+	if (!(new_client = kmalloc(sizeof(struct i2c_client) +

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new_client)...) over kmalloc(sizeof(struct i2c_client)...)
#392: FILE: drivers/i2c/chips/fscher.c:313:
+	if (!(new_client = kmalloc(sizeof(struct i2c_client) +

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:CODE_INDENT: code indent should use tabs where possible
#396: FILE: drivers/i2c/chips/fscher.c:317:
+  ^I}$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#396: FILE: drivers/i2c/chips/fscher.c:317:
+  ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#396: FILE: drivers/i2c/chips/fscher.c:317:
+  ^I}$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#401: FILE: drivers/i2c/chips/fscher.c:322:
+	 * client data. */

CHECK:SPACING: No space is necessary after a cast
#402: FILE: drivers/i2c/chips/fscher.c:323:
+	data = (struct fscher_data *) (new_client + 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#412: FILE: drivers/i2c/chips/fscher.c:333:
+		if ((i2c_smbus_read_byte_data(new_client,
+		     FSCHER_REG_IDENT_0) != 0x48)	/* 'H' */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#413: FILE: drivers/i2c/chips/fscher.c:334:
+		     FSCHER_REG_IDENT_0) != 0x48)	/* 'H' */
+		 || (i2c_smbus_read_byte_data(new_client,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#415: FILE: drivers/i2c/chips/fscher.c:336:
+		     FSCHER_REG_IDENT_1) != 0x45)	/* 'E' */
+		 || (i2c_smbus_read_byte_data(new_client,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#421: FILE: drivers/i2c/chips/fscher.c:342:
+	 * global list */

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#422: FILE: drivers/i2c/chips/fscher.c:343:
+	strlcpy(new_client->name, "fscher", I2C_NAME_SIZE);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#428: FILE: drivers/i2c/chips/fscher.c:349:
+	if ((err = i2c_attach_client(new_client)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#463: FILE: drivers/i2c/chips/fscher.c:384:
+	if ((err = i2c_detach_client(client))) {

WARNING:SPLIT_STRING: quoted string split across lines
#465: FILE: drivers/i2c/chips/fscher.c:386:
+		dev_err(&client->dev, "Client deregistration failed, "
+			"client not detached.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'jiffies < data->last_updated'
#503: FILE: drivers/i2c/chips/fscher.c:424:
+	if ((jiffies - data->last_updated > 2 * HZ) ||
+	    (jiffies < data->last_updated) || !data->valid) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#504: FILE: drivers/i2c/chips/fscher.c:425:
+	    (jiffies < data->last_updated) || !data->valid) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#505: FILE: drivers/i2c/chips/fscher.c:426:
+	    (jiffies < data->last_updated) || !data->valid) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#539: FILE: drivers/i2c/chips/fscher.c:460:
+^I^Idata->valid = 1;                 $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#545: FILE: drivers/i2c/chips/fscher.c:466:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#552: FILE: drivers/i2c/chips/fscher.c:473:
+^I/* bits 0..1, 3..7 reserved => mask with 0x04 */  $

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#553: FILE: drivers/i2c/chips/fscher.c:474:
+	unsigned long v = simple_strtoul(buf, NULL, 10) & 0x04;

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LINE_SPACING: Missing a blank line after declarations
#554: FILE: drivers/i2c/chips/fscher.c:475:
+	unsigned long v = simple_strtoul(buf, NULL, 10) & 0x04;
+	data->fan_status[FAN_INDEX_FROM_NUM(nr)] &= ~v;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#562: FILE: drivers/i2c/chips/fscher.c:483:
+^I/* bits 0..1, 3..7 reserved => mask with 0x04 */  $

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#569: FILE: drivers/i2c/chips/fscher.c:490:
+	data->fan_min[FAN_INDEX_FROM_NUM(nr)] = simple_strtoul(buf, NULL, 10) & 0xff;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#575: FILE: drivers/i2c/chips/fscher.c:496:
+static ssize_t show_pwm (struct fscher_data *data, char *buf, int nr)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#584: FILE: drivers/i2c/chips/fscher.c:505:
+	unsigned long v = simple_strtoul(buf, NULL, 10);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#587: FILE: drivers/i2c/chips/fscher.c:508:
+	case 2: v = 1; break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#588: FILE: drivers/i2c/chips/fscher.c:509:
+	case 4: v = 2; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#589: FILE: drivers/i2c/chips/fscher.c:510:
+	case 8: v = 3; break;

WARNING:SPLIT_STRING: quoted string split across lines
#592: FILE: drivers/i2c/chips/fscher.c:513:
+		dev_err(&client->dev, "fan_div value %ld not "
+			 "supported. Choose one of 2, 4 or 8!\n", v);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#606: FILE: drivers/i2c/chips/fscher.c:527:
+^I/* bits 2..7 reserved => mask with 0x03 */  $

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#610: FILE: drivers/i2c/chips/fscher.c:531:
+#define RPM_FROM_REG(val)	(val*60)
                          	    ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'val' may be better as '(val)' to avoid precedence issues
#610: FILE: drivers/i2c/chips/fscher.c:531:
+#define RPM_FROM_REG(val)	(val*60)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#612: FILE: drivers/i2c/chips/fscher.c:533:
+static ssize_t show_fan_input (struct fscher_data *data, char *buf, int nr)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#617: FILE: drivers/i2c/chips/fscher.c:538:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#624: FILE: drivers/i2c/chips/fscher.c:545:
+^I/* bits 2..7 reserved, 0 read only => mask with 0x02 */  $

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#625: FILE: drivers/i2c/chips/fscher.c:546:
+	unsigned long v = simple_strtoul(buf, NULL, 10) & 0x02;

WARNING:LINE_SPACING: Missing a blank line after declarations
#626: FILE: drivers/i2c/chips/fscher.c:547:
+	unsigned long v = simple_strtoul(buf, NULL, 10) & 0x02;
+	data->temp_status[TEMP_INDEX_FROM_NUM(nr)] &= ~v;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#659: FILE: drivers/i2c/chips/fscher.c:580:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#666: FILE: drivers/i2c/chips/fscher.c:587:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#674: FILE: drivers/i2c/chips/fscher.c:595:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#679: FILE: drivers/i2c/chips/fscher.c:600:
+^I/* bits 1..7 reserved => mask with 0x01 */  $

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#680: FILE: drivers/i2c/chips/fscher.c:601:
+	unsigned long v = simple_strtoul(buf, NULL, 10) & 0x01;

WARNING:LINE_SPACING: Missing a blank line after declarations
#681: FILE: drivers/i2c/chips/fscher.c:602:
+	unsigned long v = simple_strtoul(buf, NULL, 10) & 0x01;
+	data->global_control &= ~v;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#693: FILE: drivers/i2c/chips/fscher.c:614:
+
+

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#696: FILE: drivers/i2c/chips/fscher.c:617:
+				    fscher_data *data, const char *buf, size_t count,
 				                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#699: FILE: drivers/i2c/chips/fscher.c:620:
+^I/* bits 0..3 reserved => mask with 0xf0 */  $

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#700: FILE: drivers/i2c/chips/fscher.c:621:
+	unsigned long v = simple_strtoul(buf, NULL, 10) & 0xf0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#701: FILE: drivers/i2c/chips/fscher.c:622:
+	unsigned long v = simple_strtoul(buf, NULL, 10) & 0xf0;
+	data->watchdog[2] &= ~0xf0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#717: FILE: drivers/i2c/chips/fscher.c:638:
+^I/* bits 0, 2..7 reserved => mask with 0x02 */  $

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#718: FILE: drivers/i2c/chips/fscher.c:639:
+	unsigned long v = simple_strtoul(buf, NULL, 10) & 0x02;

WARNING:LINE_SPACING: Missing a blank line after declarations
#719: FILE: drivers/i2c/chips/fscher.c:640:
+	unsigned long v = simple_strtoul(buf, NULL, 10) & 0x02;
+	data->watchdog[1] &= ~v;

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#734: FILE: drivers/i2c/chips/fscher.c:655:
+	data->watchdog[0] = simple_strtoul(buf, NULL, 10) & 0xff;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000305231.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 43 errors, 48 warnings, 37 checks, 712 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000305231.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
