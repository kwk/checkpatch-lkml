WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#51: FILE: arch/i386/kernel/cpu/mcheck/init.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#64: FILE: arch/i386/kernel/cpu/mcheck/init.c:14:
+#include <asm/processor.h> $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#64: FILE: arch/i386/kernel/cpu/mcheck/init.c:14:
+#include <asm/processor.h> 

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#69: FILE: arch/i386/kernel/cpu/mcheck/init.c:19:
+int mce_disabled __initdata = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#72: FILE: arch/i386/kernel/cpu/mcheck/init.c:22:
+EXPORT_SYMBOL_GPL(nr_mce_banks);	/* non-fatal.o */

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#75: FILE: arch/i386/kernel/cpu/mcheck/init.c:25:
+static fastcall void unexpected_machine_check(struct pt_regs * regs, long error_code)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#76: FILE: arch/i386/kernel/cpu/mcheck/init.c:26:
+{^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#77: FILE: arch/i386/kernel/cpu/mcheck/init.c:27:
+	printk(KERN_ERR "CPU#%d: Unexpected int18 (Machine Check).\n", smp_processor_id());

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#86: FILE: arch/i386/kernel/cpu/mcheck/init.c:36:
+	if (mce_disabled==1)
 	                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#89: FILE: arch/i386/kernel/cpu/mcheck/init.c:39:
+	switch (c->x86_vendor) {
+		case X86_VENDOR_AMD:
[...]
+		case X86_VENDOR_INTEL:
[...]
+		case X86_VENDOR_CENTAUR:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#91: FILE: arch/i386/kernel/cpu/mcheck/init.c:41:
+			if (c->x86==6 || c->x86==15)
 			          ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#91: FILE: arch/i386/kernel/cpu/mcheck/init.c:41:
+			if (c->x86==6 || c->x86==15)
 			                       ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#96: FILE: arch/i386/kernel/cpu/mcheck/init.c:46:
+			if (c->x86==5)
 			          ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#98: FILE: arch/i386/kernel/cpu/mcheck/init.c:48:
+			if (c->x86==6)
 			          ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#100: FILE: arch/i386/kernel/cpu/mcheck/init.c:50:
+			if (c->x86==15)
 			          ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#105: FILE: arch/i386/kernel/cpu/mcheck/init.c:55:
+			if (c->x86==5)
 			          ^

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#126: FILE: arch/i386/kernel/cpu/mcheck/init.c:76:
+__setup("nomce", mcheck_disable);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#127: FILE: arch/i386/kernel/cpu/mcheck/init.c:77:
+__setup("mce", mcheck_enable);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#823: FILE: arch/x86_64/kernel/mce.h:1:
+#ifndef _ASM_MCE_H

ERROR:TRAILING_WHITESPACE: trailing whitespace
#829: FILE: arch/x86_64/kernel/mce.h:7:
+/* $

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#833: FILE: arch/x86_64/kernel/mce.h:11:
+#define MCG_CTL_P        (1UL<<8)   /* MCG_CAP register available */
                              ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#833: FILE: arch/x86_64/kernel/mce.h:11:
+#define MCG_CTL_P        (1UL<<8)   /* MCG_CAP register available */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#835: FILE: arch/x86_64/kernel/mce.h:13:
+#define MCG_STATUS_RIPV  (1UL<<0)   /* restart ip valid */
                              ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#835: FILE: arch/x86_64/kernel/mce.h:13:
+#define MCG_STATUS_RIPV  (1UL<<0)   /* restart ip valid */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#836: FILE: arch/x86_64/kernel/mce.h:14:
+#define MCG_STATUS_EIPV  (1UL<<1)   /* eip points to correct instruction */
                              ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#836: FILE: arch/x86_64/kernel/mce.h:14:
+#define MCG_STATUS_EIPV  (1UL<<1)   /* eip points to correct instruction */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#837: FILE: arch/x86_64/kernel/mce.h:15:
+#define MCG_STATUS_MCIP  (1UL<<2)   /* machine check in progress */
                              ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#837: FILE: arch/x86_64/kernel/mce.h:15:
+#define MCG_STATUS_MCIP  (1UL<<2)   /* machine check in progress */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#839: FILE: arch/x86_64/kernel/mce.h:17:
+#define MCI_STATUS_VAL   (1UL<<63)  /* valid error */
                              ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#839: FILE: arch/x86_64/kernel/mce.h:17:
+#define MCI_STATUS_VAL   (1UL<<63)  /* valid error */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#840: FILE: arch/x86_64/kernel/mce.h:18:
+#define MCI_STATUS_OVER  (1UL<<62)  /* previous errors lost */
                              ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#840: FILE: arch/x86_64/kernel/mce.h:18:
+#define MCI_STATUS_OVER  (1UL<<62)  /* previous errors lost */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#841: FILE: arch/x86_64/kernel/mce.h:19:
+#define MCI_STATUS_UC    (1UL<<61)  /* uncorrected error */
                              ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#841: FILE: arch/x86_64/kernel/mce.h:19:
+#define MCI_STATUS_UC    (1UL<<61)  /* uncorrected error */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#842: FILE: arch/x86_64/kernel/mce.h:20:
+#define MCI_STATUS_EN    (1UL<<60)  /* error enabled */
                              ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#842: FILE: arch/x86_64/kernel/mce.h:20:
+#define MCI_STATUS_EN    (1UL<<60)  /* error enabled */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#843: FILE: arch/x86_64/kernel/mce.h:21:
+#define MCI_STATUS_MISCV (1UL<<59)  /* misc error reg. valid */
                              ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#843: FILE: arch/x86_64/kernel/mce.h:21:
+#define MCI_STATUS_MISCV (1UL<<59)  /* misc error reg. valid */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#844: FILE: arch/x86_64/kernel/mce.h:22:
+#define MCI_STATUS_ADDRV (1UL<<58)  /* addr reg. valid */
                              ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#844: FILE: arch/x86_64/kernel/mce.h:22:
+#define MCI_STATUS_ADDRV (1UL<<58)  /* addr reg. valid */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#845: FILE: arch/x86_64/kernel/mce.h:23:
+#define MCI_STATUS_PCC   (1UL<<57)  /* processor context corrupt */
                              ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#845: FILE: arch/x86_64/kernel/mce.h:23:
+#define MCI_STATUS_PCC   (1UL<<57)  /* processor context corrupt */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#853: FILE: arch/x86_64/kernel/mce.h:31:
+^I__u64 rip;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#855: FILE: arch/x86_64/kernel/mce.h:33:
+^I__u64 res1;^I/* for future extension */^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#861: FILE: arch/x86_64/kernel/mce.h:39:
+^I__u32 pad;   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#864: FILE: arch/x86_64/kernel/mce.h:42:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#872: FILE: arch/x86_64/kernel/mce.h:50:
+struct mce_log { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#873: FILE: arch/x86_64/kernel/mce.h:51:
+^Ichar signature[12]; /* "MACHINECHECK" */ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#874: FILE: arch/x86_64/kernel/mce.h:52:
+^Iunsigned len;  ^I    /* = MCE_LOG_LEN */ $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#874: FILE: arch/x86_64/kernel/mce.h:52:
+^Iunsigned len;  ^I    /* = MCE_LOG_LEN */ $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#874: FILE: arch/x86_64/kernel/mce.h:52:
+	unsigned len;  	    /* = MCE_LOG_LEN */ 

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#875: FILE: arch/x86_64/kernel/mce.h:53:
+	unsigned next;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#876: FILE: arch/x86_64/kernel/mce.h:54:
+	unsigned flags;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#877: FILE: arch/x86_64/kernel/mce.h:55:
+^Iunsigned pad0; $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#877: FILE: arch/x86_64/kernel/mce.h:55:
+	unsigned pad0; 

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#883: FILE: arch/x86_64/kernel/mce.h:61:
+#define MCE_LOG_SIGNATURE ^I"MACHINECHECK"$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#891: FILE: arch/x86_64/kernel/mce.h:69:
+#define MCE_THERMAL_BANK	MCE_EXTENDED_BANK + 0

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000182412.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 10 warnings, 25 checks, 157 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000182412.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
