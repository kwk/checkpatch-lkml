WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#48: FILE: ltt/ltt-tracer.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#52: FILE: ltt/ltt-tracer.c:5:
+ * ^I^IMathieu Desnoyers (mathieu.desnoyers@polymtl.ca)$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#77: FILE: ltt/ltt-tracer.c:30:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#94: FILE: ltt/ltt-tracer.c:47:
+#include <asm/atomic.h>

WARNING:FUNCTION_ARGUMENTS: arguments for function declarations should follow identifier
#107: FILE: ltt/ltt-tracer.c:60:
+int ltt_filter_control_default

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#118: FILE: ltt/ltt-tracer.c:71:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#125: FILE: ltt/ltt-tracer.c:78:
+struct module *ltt_filter_control_owner = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#130: FILE: ltt/ltt-tracer.c:83:
+struct module *ltt_run_filter_owner = NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#134: FILE: ltt/ltt-tracer.c:87:
+int (*ltt_statedump_functor)(struct ltt_trace_struct *trace) = $

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#136: FILE: ltt/ltt-tracer.c:89:
+struct module *ltt_statedump_owner = NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#137: FILE: ltt/ltt-tracer.c:90:
+^I^I^I^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#141: FILE: ltt/ltt-tracer.c:94:
+int ltt_module_register(enum ltt_module_function name, void *function,
+		struct module *owner)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#144: FILE: ltt/ltt-tracer.c:97:
+^I$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#145: FILE: ltt/ltt-tracer.c:98:
+	switch (name) {
+		case LTT_FUNCTION_RUN_FILTER:
[...]
+		case LTT_FUNCTION_FILTER_CONTROL:
[...]
+		case LTT_FUNCTION_STATEDUMP:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ltt_run_filter_owner"
#147: FILE: ltt/ltt-tracer.c:100:
+			if (ltt_run_filter_owner != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ltt_filter_control_owner"
#155: FILE: ltt/ltt-tracer.c:108:
+			if (ltt_filter_control_owner != NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#159: FILE: ltt/ltt-tracer.c:112:
+^I^I^Iltt_filter_control_functor = $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ltt_statedump_owner"
#164: FILE: ltt/ltt-tracer.c:117:
+			if (ltt_statedump_owner != NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#168: FILE: ltt/ltt-tracer.c:121:
+^I^I^Iltt_statedump_functor = $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#179: FILE: ltt/ltt-tracer.c:132:
+
+

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#182: FILE: ltt/ltt-tracer.c:135:
+	switch (name) {
+		case LTT_FUNCTION_RUN_FILTER:
[...]
+		case LTT_FUNCTION_FILTER_CONTROL:
[...]
+		case LTT_FUNCTION_STATEDUMP:

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#187: FILE: ltt/ltt-tracer.c:140:
+			synchronize_sched();

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#199: FILE: ltt/ltt-tracer.c:152:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#201: FILE: ltt/ltt-tracer.c:154:
+EXPORT_SYMBOL_GPL(ltt_module_register);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#202: FILE: ltt/ltt-tracer.c:155:
+EXPORT_SYMBOL_GPL(ltt_module_unregister);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#220: FILE: ltt/ltt-tracer.c:173:
+EXPORT_SYMBOL_GPL(ltt_transport_register);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#221: FILE: ltt/ltt-tracer.c:174:
+EXPORT_SYMBOL_GPL(ltt_transport_unregister);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#223: FILE: ltt/ltt-tracer.c:176:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#225: FILE: ltt/ltt-tracer.c:178:
+static inline int is_channel_overwrite(enum ltt_channels chan,
+	enum trace_mode mode)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#227: FILE: ltt/ltt-tracer.c:180:
+	switch (mode) {
+		case LTT_TRACE_NORMAL:
[...]
+		case LTT_TRACE_FLIGHT:
[...]
+		case LTT_TRACE_HYBRID:
[...]
+		default:

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#231: FILE: ltt/ltt-tracer.c:184:
+			switch (chan) {
+				case LTT_CHANNEL_FACILITIES:
[...]
+				default:

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#238: FILE: ltt/ltt-tracer.c:191:
+			switch (chan) {
+				case LTT_CHANNEL_CPU:
[...]
+				default:

CHECK:LINE_SPACING: Please don't use multiple blank lines
#249: FILE: ltt/ltt-tracer.c:202:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#251: FILE: ltt/ltt-tracer.c:204:
+void ltt_write_trace_header(struct ltt_trace_struct *trace,
+		struct ltt_trace_header *header)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#258: FILE: ltt/ltt-tracer.c:211:
+	header->arch_size = sizeof(void*);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#260: FILE: ltt/ltt-tracer.c:213:
+	switch (trace->mode) {
+		case LTT_TRACE_NORMAL:
[...]
+		case LTT_TRACE_FLIGHT:
[...]
+		case LTT_TRACE_HYBRID:
[...]
+		default:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#273: FILE: ltt/ltt-tracer.c:226:
+^I$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#281: FILE: ltt/ltt-tracer.c:234:
+	header->has_alignment = sizeof(void*);

WARNING:LINE_SPACING: Missing a blank line after declarations
#310: FILE: ltt/ltt-tracer.c:263:
+	struct ltt_trace_struct *trace;
+	preempt_disable();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#321: FILE: ltt/ltt-tracer.c:274:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#323: FILE: ltt/ltt-tracer.c:276:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#327: FILE: ltt/ltt-tracer.c:280:
+	struct ltt_channel_buf_struct *ltt_buf = private;
+	wake_up_interruptible(&ltt_buf->write_wait);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#331: FILE: ltt/ltt-tracer.c:284:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#335: FILE: ltt/ltt-tracer.c:288:
+ * Returns a pointer to the trace structure, NULL if not found. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#339: FILE: ltt/ltt-tracer.c:292:
+	struct ltt_trace_struct *trace, *found=NULL;
 	                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#340: FILE: ltt/ltt-tracer.c:293:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#349: FILE: ltt/ltt-tracer.c:302:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#355: FILE: ltt/ltt-tracer.c:308:
+static int _ltt_trace_create(char *trace_name,	enum trace_mode mode,
+				struct ltt_trace_struct *new_trace)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "_ltt_trace_find"
#359: FILE: ltt/ltt-tracer.c:312:
+	if (_ltt_trace_find(trace_name) != NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#360: FILE: ltt/ltt-tracer.c:313:
+		printk(KERN_ERR "LTT : Trace %s already exists\n", trace_name);

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#365: FILE: ltt/ltt-tracer.c:318:
+	synchronize_sched();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#374: FILE: ltt/ltt-tracer.c:327:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#383: FILE: ltt/ltt-tracer.c:336:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#392: FILE: ltt/ltt-tracer.c:345:
+static inline void prepare_chan_size_num(unsigned *subbuf_size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#393: FILE: ltt/ltt-tracer.c:346:
+static inline void prepare_chan_size_num(unsigned *subbuf_size,
+	unsigned *n_subbufs, unsigned default_size, unsigned default_n_subbufs)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#393: FILE: ltt/ltt-tracer.c:346:
+	unsigned *n_subbufs, unsigned default_size, unsigned default_n_subbufs)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#393: FILE: ltt/ltt-tracer.c:346:
+	unsigned *n_subbufs, unsigned default_size, unsigned default_n_subbufs)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#393: FILE: ltt/ltt-tracer.c:346:
+	unsigned *n_subbufs, unsigned default_size, unsigned default_n_subbufs)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#408: FILE: ltt/ltt-tracer.c:361:
+static int ltt_trace_create(char *trace_name, char *trace_type,
+		enum trace_mode mode,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#409: FILE: ltt/ltt-tracer.c:362:
+		unsigned subbuf_size_low, unsigned n_subbufs_low,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#409: FILE: ltt/ltt-tracer.c:362:
+		unsigned subbuf_size_low, unsigned n_subbufs_low,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#410: FILE: ltt/ltt-tracer.c:363:
+		unsigned subbuf_size_med, unsigned n_subbufs_med,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#410: FILE: ltt/ltt-tracer.c:363:
+		unsigned subbuf_size_med, unsigned n_subbufs_med,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#411: FILE: ltt/ltt-tracer.c:364:
+		unsigned subbuf_size_high, unsigned n_subbufs_high)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#411: FILE: ltt/ltt-tracer.c:364:
+		unsigned subbuf_size_high, unsigned n_subbufs_high)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#417: FILE: ltt/ltt-tracer.c:370:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#419: FILE: ltt/ltt-tracer.c:372:
+	prepare_chan_size_num(&subbuf_size_low, &n_subbufs_low,
+		LTT_DEFAULT_SUBBUF_SIZE_LOW, LTT_DEFAULT_N_SUBBUFS_LOW);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#422: FILE: ltt/ltt-tracer.c:375:
+	prepare_chan_size_num(&subbuf_size_med, &n_subbufs_med,
+		LTT_DEFAULT_SUBBUF_SIZE_MED, LTT_DEFAULT_N_SUBBUFS_MED);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#425: FILE: ltt/ltt-tracer.c:378:
+	prepare_chan_size_num(&subbuf_size_high, &n_subbufs_high,
+		LTT_DEFAULT_SUBBUF_SIZE_HIGH, LTT_DEFAULT_N_SUBBUFS_HIGH);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*new_trace)...) over kzalloc(sizeof(struct ltt_trace_struct)...)
#427: FILE: ltt/ltt-tracer.c:380:
+	new_trace = kzalloc(sizeof(struct ltt_trace_struct), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#429: FILE: ltt/ltt-tracer.c:382:
+		printk(KERN_ERR

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#429: FILE: ltt/ltt-tracer.c:382:
+	if (!new_trace) {
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#454: FILE: ltt/ltt-tracer.c:407:
+		printk(KERN_ERR	"LTT : Transport %s is not present.\n", trace_type);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#461: FILE: ltt/ltt-tracer.c:414:
+		printk(KERN_ERR	"LTT : Can't lock transport module.\n");

ERROR:SPACING: space required before the open parenthesis '('
#467: FILE: ltt/ltt-tracer.c:420:
+	if(trace) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#468: FILE: ltt/ltt-tracer.c:421:
+		printk(KERN_ERR	"LTT : Trace name %s already used.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#469: FILE: ltt/ltt-tracer.c:422:
+		printk(KERN_ERR	"LTT : Trace name %s already used.\n",
+			trace_name);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#486: FILE: ltt/ltt-tracer.c:439:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#500: FILE: ltt/ltt-tracer.c:453:
+	if (err != 0) {
+		goto facilities_error;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#507: FILE: ltt/ltt-tracer.c:460:
+	if (err != 0) {
+		goto interrupts_error;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#514: FILE: ltt/ltt-tracer.c:467:
+	if (err != 0) {
+		goto processes_error;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#521: FILE: ltt/ltt-tracer.c:474:
+	if (err != 0) {
+		goto modules_error;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#528: FILE: ltt/ltt-tracer.c:481:
+	if (err != 0) {
+		goto cpu_error;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#535: FILE: ltt/ltt-tracer.c:488:
+	if (err != 0) {
+		goto network_error;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#538: FILE: ltt/ltt-tracer.c:491:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#573: FILE: ltt/ltt-tracer.c:526:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!trace"
#574: FILE: ltt/ltt-tracer.c:527:
+	if (trace == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#579: FILE: ltt/ltt-tracer.c:532:
+		printk(KERN_ERR

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#587: FILE: ltt/ltt-tracer.c:540:
+	synchronize_sched();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#613: FILE: ltt/ltt-tracer.c:566:
+		 * we must make one last check for reader wakeups pending. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#618: FILE: ltt/ltt-tracer.c:571:
+	 * the last subbuffers. */

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#638: FILE: ltt/ltt-tracer.c:591:
+	struct ltt_trace_struct* trace;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#656: FILE: ltt/ltt-tracer.c:609:
+static int _ltt_trace_start(struct ltt_trace_struct* trace)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!trace"
#660: FILE: ltt/ltt-tracer.c:613:
+	if (trace == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#665: FILE: ltt/ltt-tracer.c:618:
+		printk(KERN_INFO "LTT : Tracing already active for trace %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#666: FILE: ltt/ltt-tracer.c:619:
+		printk(KERN_INFO "LTT : Tracing already active for trace %s\n",
+				trace->trace_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#669: FILE: ltt/ltt-tracer.c:622:
+		printk(KERN_ERR "LTT : Can't lock filter module.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#676: FILE: ltt/ltt-tracer.c:629:
+			printk(KERN_ERR

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#688: FILE: ltt/ltt-tracer.c:641:
+					 * protection : be careful */

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#704: FILE: ltt/ltt-tracer.c:657:
+	struct ltt_trace_struct* trace;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!trace"
#709: FILE: ltt/ltt-tracer.c:662:
+	if (trace == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#714: FILE: ltt/ltt-tracer.c:667:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#719: FILE: ltt/ltt-tracer.c:672:
+	 * directly using this trace handle inside the logging function. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#720: FILE: ltt/ltt-tracer.c:673:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#725: FILE: ltt/ltt-tracer.c:678:
+		printk(KERN_ERR

CHECK:LINE_SPACING: Please don't use multiple blank lines
#740: FILE: ltt/ltt-tracer.c:693:
+
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#742: FILE: ltt/ltt-tracer.c:695:
+static int _ltt_trace_stop(struct ltt_trace_struct* trace)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!trace"
#746: FILE: ltt/ltt-tracer.c:699:
+	if (trace == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#751: FILE: ltt/ltt-tracer.c:704:
+		printk(KERN_INFO "LTT : Tracing not active for trace %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#752: FILE: ltt/ltt-tracer.c:705:
+		printk(KERN_INFO "LTT : Tracing not active for trace %s\n",
+				trace->trace_name);

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#756: FILE: ltt/ltt-tracer.c:709:
+		synchronize_sched(); /* Wait for each tracing to be finished */

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#776: FILE: ltt/ltt-tracer.c:729:
+	struct ltt_trace_struct* trace;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#785: FILE: ltt/ltt-tracer.c:738:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#792: FILE: ltt/ltt-tracer.c:745:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#793: FILE: ltt/ltt-tracer.c:746:
+	printk(KERN_ALERT "ltt_control : trace %s\n", trace_name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ltt_control', this function's name, in a string
#793: FILE: ltt/ltt-tracer.c:746:
+	printk(KERN_ALERT "ltt_control : trace %s\n", trace_name);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#794: FILE: ltt/ltt-tracer.c:747:
+	switch (msg) {
+		case LTT_CONTROL_START:
[...]
+		case LTT_CONTROL_STOP:
[...]
+		case LTT_CONTROL_CREATE_TRACE:
[...]
+		case LTT_CONTROL_DESTROY_TRACE:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#796: FILE: ltt/ltt-tracer.c:749:
+			printk(KERN_DEBUG "Start tracing %s\n", trace_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#800: FILE: ltt/ltt-tracer.c:753:
+			printk(KERN_DEBUG "Stop tracing %s\n", trace_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#804: FILE: ltt/ltt-tracer.c:757:
+			printk(KERN_DEBUG "Creating trace %s\n", trace_name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#806: FILE: ltt/ltt-tracer.c:759:
+			err = ltt_trace_create(trace_name, trace_type,
+				args.new_trace.mode,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#815: FILE: ltt/ltt-tracer.c:768:
+			printk(KERN_DEBUG "Destroying trace %s\n", trace_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#828: FILE: ltt/ltt-tracer.c:781:
+	printk(KERN_DEBUG "ltt_filter_control : trace %s\n", trace_name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ltt_filter_control', this function's name, in a string
#828: FILE: ltt/ltt-tracer.c:781:
+	printk(KERN_DEBUG "ltt_filter_control : trace %s\n", trace_name);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!trace"
#831: FILE: ltt/ltt-tracer.c:784:
+	if (trace == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#832: FILE: ltt/ltt-tracer.c:785:
+		printk(KERN_ALERT

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#841: FILE: ltt/ltt-tracer.c:794:
+	switch (msg) {
+		case LTT_FILTER_DEFAULT_ACCEPT:
[...]
+		case LTT_FILTER_DEFAULT_REJECT:
[...]
+		default:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#843: FILE: ltt/ltt-tracer.c:796:
+			printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#848: FILE: ltt/ltt-tracer.c:801:
+			printk(KERN_DEBUG

ERROR:TRAILING_WHITESPACE: trailing whitespace
#856: FILE: ltt/ltt-tracer.c:809:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#867: FILE: ltt/ltt-tracer.c:820:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000015323.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 38 errors, 58 warnings, 35 checks, 836 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000015323.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
