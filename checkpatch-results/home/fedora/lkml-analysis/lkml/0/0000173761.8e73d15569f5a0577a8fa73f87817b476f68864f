WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#31: 
Signed-Off-By: Chandra Seetharaman <sekharan@us.ibm.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#32: 
Signed-Off-By: Hubertus Franke <frankeh@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#33: 
Signed-Off-By: Shailabh Nagar <nagar@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#34: 
Signed-Off-By: Gerrit Huizenga <gh@us.ibm.com>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#56: FILE: fs/proc/array.c:486:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#57: FILE: fs/proc/array.c:487:
+int proc_pid_delay(struct task_struct *task, char * buffer)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#61: FILE: fs/proc/array.c:491:
+	res  = sprintf(buffer,"%u %llu %llu %u %llu %u %llu\n",
 	                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#62: FILE: fs/proc/array.c:492:
+		       (unsigned int) get_delay(task,runs),

ERROR:SPACING: space required after that ',' (ctx:VxV)
#62: FILE: fs/proc/array.c:492:
+		       (unsigned int) get_delay(task,runs),
 		                                    ^

CHECK:SPACING: No space is necessary after a cast
#63: FILE: fs/proc/array.c:493:
+		       (uint64_t) get_delay(task,runcpu_total),

ERROR:SPACING: space required after that ',' (ctx:VxV)
#63: FILE: fs/proc/array.c:493:
+		       (uint64_t) get_delay(task,runcpu_total),
 		                                ^

CHECK:SPACING: No space is necessary after a cast
#64: FILE: fs/proc/array.c:494:
+		       (uint64_t) get_delay(task,waitcpu_total),

ERROR:SPACING: space required after that ',' (ctx:VxV)
#64: FILE: fs/proc/array.c:494:
+		       (uint64_t) get_delay(task,waitcpu_total),
 		                                ^

CHECK:SPACING: No space is necessary after a cast
#65: FILE: fs/proc/array.c:495:
+		       (unsigned int) get_delay(task,num_iowaits),

ERROR:SPACING: space required after that ',' (ctx:VxV)
#65: FILE: fs/proc/array.c:495:
+		       (unsigned int) get_delay(task,num_iowaits),
 		                                    ^

CHECK:SPACING: No space is necessary after a cast
#66: FILE: fs/proc/array.c:496:
+		       (uint64_t) get_delay(task,iowait_total),

ERROR:SPACING: space required after that ',' (ctx:VxV)
#66: FILE: fs/proc/array.c:496:
+		       (uint64_t) get_delay(task,iowait_total),
 		                                ^

CHECK:SPACING: No space is necessary after a cast
#67: FILE: fs/proc/array.c:497:
+		       (unsigned int) get_delay(task,num_memwaits),

ERROR:SPACING: space required after that ',' (ctx:VxV)
#67: FILE: fs/proc/array.c:497:
+		       (unsigned int) get_delay(task,num_memwaits),
 		                                    ^

CHECK:SPACING: No space is necessary after a cast
#68: FILE: fs/proc/array.c:498:
+		       (uint64_t) get_delay(task,mem_iowait_total)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#68: FILE: fs/proc/array.c:498:
+		       (uint64_t) get_delay(task,mem_iowait_total)
 		                                ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#82: FILE: fs/proc/base.c:124:
+        PROC_TID_DELAY_ACCT,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: fs/proc/base.c:124:
+        PROC_TID_DELAY_ACCT,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#83: FILE: fs/proc/base.c:125:
+        PROC_TGID_DELAY_ACCT,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#83: FILE: fs/proc/base.c:125:
+        PROC_TGID_DELAY_ACCT,$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#93: FILE: fs/proc/base.c:163:
+	E(PROC_TGID_DELAY_ACCT,"delay",   S_IFREG|S_IRUGO),
 	                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#93: FILE: fs/proc/base.c:163:
+	E(PROC_TGID_DELAY_ACCT,"delay",   S_IFREG|S_IRUGO),
 	                                         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#93: FILE: fs/proc/base.c:163:
+	E(PROC_TGID_DELAY_ACCT,"delay",   S_IFREG|S_IRUGO),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#103: FILE: fs/proc/base.c:202:
+	E(PROC_TGID_DELAY_ACCT,"delay",   S_IFREG|S_IRUGO),
 	                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#103: FILE: fs/proc/base.c:202:
+	E(PROC_TGID_DELAY_ACCT,"delay",   S_IFREG|S_IRUGO),
 	                                         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#103: FILE: fs/proc/base.c:202:
+	E(PROC_TGID_DELAY_ACCT,"delay",   S_IFREG|S_IRUGO),

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#130: FILE: fs/proc/internal.h:39:
+extern int proc_pid_delay(struct task_struct *, char*);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#130: FILE: fs/proc/internal.h:39:
+extern int proc_pid_delay(struct task_struct *, char*);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char*' should also have an identifier name
#130: FILE: fs/proc/internal.h:39:
+extern int proc_pid_delay(struct task_struct *, char*);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#174: FILE: include/linux/sched.h:1284:
+#define test_delay_flag(tsk,flg)	((tsk)->flags & (flg))
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#175: FILE: include/linux/sched.h:1285:
+#define set_delay_flag(tsk,flg)		((tsk)->flags |= (flg))
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#176: FILE: include/linux/sched.h:1286:
+#define clear_delay_flag(tsk,flg)	((tsk)->flags &= ~(flg))
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#179: FILE: include/linux/sched.h:1289:
+#define get_delay(tsk,field)		((tsk)->delays.field)
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#182: FILE: include/linux/sched.h:1292:
+#define start_delay_set(var,flg)	(set_delay_flag(current,flg),(var) = \
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#182: FILE: include/linux/sched.h:1292:
+#define start_delay_set(var,flg)	(set_delay_flag(current,flg),(var) = \
                                 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#182: FILE: include/linux/sched.h:1292:
+#define start_delay_set(var,flg)	(set_delay_flag(current,flg),(var) = \
                                 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#185: FILE: include/linux/sched.h:1295:
+#define inc_delay(tsk,field)		(((tsk)->delays.field)++)
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#193: FILE: include/linux/sched.h:1303:
+#define test_ts_integrity(start_ts,end_ts)  (likely((end_ts) > (start_ts)))
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#195: FILE: include/linux/sched.h:1305:
+#define test_ts_integrity(start_ts,end_ts)  (1)
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#198: FILE: include/linux/sched.h:1308:
+#define add_delay_ts(tsk,field,start_ts,end_ts) \
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#198: FILE: include/linux/sched.h:1308:
+#define add_delay_ts(tsk,field,start_ts,end_ts) \
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#198: FILE: include/linux/sched.h:1308:
+#define add_delay_ts(tsk,field,start_ts,end_ts) \
                                        ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#198: FILE: include/linux/sched.h:1308:
+#define add_delay_ts(tsk,field,start_ts,end_ts) \
+	do { if (test_ts_integrity(start_ts,end_ts)) (tsk)->delays.field += ((end_ts)-(start_ts)); } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'start_ts' - possible side-effects?
#198: FILE: include/linux/sched.h:1308:
+#define add_delay_ts(tsk,field,start_ts,end_ts) \
+	do { if (test_ts_integrity(start_ts,end_ts)) (tsk)->delays.field += ((end_ts)-(start_ts)); } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'end_ts' - possible side-effects?
#198: FILE: include/linux/sched.h:1308:
+#define add_delay_ts(tsk,field,start_ts,end_ts) \
+	do { if (test_ts_integrity(start_ts,end_ts)) (tsk)->delays.field += ((end_ts)-(start_ts)); } while (0)

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#199: FILE: include/linux/sched.h:1309:
+	do { if (test_ts_integrity(start_ts,end_ts)) (tsk)->delays.field += ((end_ts)-(start_ts)); } while (0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#199: FILE: include/linux/sched.h:1309:
+	do { if (test_ts_integrity(start_ts,end_ts)) (tsk)->delays.field += ((end_ts)-(start_ts)); } while (0)
 	                                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#199: FILE: include/linux/sched.h:1309:
+	do { if (test_ts_integrity(start_ts,end_ts)) (tsk)->delays.field += ((end_ts)-(start_ts)); } while (0)
 	                                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#201: FILE: include/linux/sched.h:1311:
+#define add_delay_clear(tsk,field,start_ts,flg)		\
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#201: FILE: include/linux/sched.h:1311:
+#define add_delay_clear(tsk,field,start_ts,flg)		\
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#201: FILE: include/linux/sched.h:1311:
+#define add_delay_clear(tsk,field,start_ts,flg)		\
                                           ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tsk' - possible side-effects?
#201: FILE: include/linux/sched.h:1311:
+#define add_delay_clear(tsk,field,start_ts,flg)		\
+	do {						\
+		unsigned long long now = sched_clock();	\
+		add_delay_ts(tsk,field,start_ts,now);	\
+		clear_delay_flag(tsk,flg);		\
+	} while (0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#204: FILE: include/linux/sched.h:1314:
+		add_delay_ts(tsk,field,start_ts,now);	\
 		                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#204: FILE: include/linux/sched.h:1314:
+		add_delay_ts(tsk,field,start_ts,now);	\
 		                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#204: FILE: include/linux/sched.h:1314:
+		add_delay_ts(tsk,field,start_ts,now);	\
 		                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#205: FILE: include/linux/sched.h:1315:
+		clear_delay_flag(tsk,flg);		\
 		                    ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#210: FILE: include/linux/sched.h:1320:
+	struct task_struct * tsk = current;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#214: FILE: include/linux/sched.h:1324:
+	if (test_ts_integrity(dstart,now))
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#218: FILE: include/linux/sched.h:1328:
+	if (test_delay_flag(tsk,PF_MEMIO)) {
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#225: FILE: include/linux/sched.h:1335:
+	clear_delay_flag(tsk,PF_IOWAIT);
 	                    ^

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#228: FILE: include/linux/sched.h:1338:
+inline static void init_delays(struct task_struct *tsk)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#230: FILE: include/linux/sched.h:1340:
+	memset((void*)&tsk->delays,0,sizeof(tsk->delays));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#230: FILE: include/linux/sched.h:1340:
+	memset((void*)&tsk->delays,0,sizeof(tsk->delays));
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#230: FILE: include/linux/sched.h:1340:
+	memset((void*)&tsk->delays,0,sizeof(tsk->delays));
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#235: FILE: include/linux/sched.h:1345:
+#define test_delay_flag(tsk,flg)                (0)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#236: FILE: include/linux/sched.h:1346:
+#define set_delay_flag(tsk,flg)                 do { } while (0)
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#237: FILE: include/linux/sched.h:1347:
+#define clear_delay_flag(tsk,flg)               do { } while (0)
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#240: FILE: include/linux/sched.h:1350:
+#define get_delay(tsk,field)                    (0)
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#243: FILE: include/linux/sched.h:1353:
+#define start_delay_set(var,flg)                do { } while (0)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#245: FILE: include/linux/sched.h:1355:
+#define inc_delay(tsk,field)                    do { } while (0)
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#246: FILE: include/linux/sched.h:1356:
+#define add_delay_ts(tsk,field,start_ts,now)    do { } while (0)
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#246: FILE: include/linux/sched.h:1356:
+#define add_delay_ts(tsk,field,start_ts,now)    do { } while (0)
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#246: FILE: include/linux/sched.h:1356:
+#define add_delay_ts(tsk,field,start_ts,now)    do { } while (0)
                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#247: FILE: include/linux/sched.h:1357:
+#define add_delay_clear(tsk,field,start_ts,flg) do { } while (0)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#247: FILE: include/linux/sched.h:1357:
+#define add_delay_clear(tsk,field,start_ts,flg) do { } while (0)
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#247: FILE: include/linux/sched.h:1357:
+#define add_delay_clear(tsk,field,start_ts,flg) do { } while (0)
                                           ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#260: FILE: include/linux/taskdelays.h:1:
+/* taskdelays.h - for delay accounting

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#285: FILE: include/linux/taskdelays.h:26:
+	uint64_t waitcpu_total;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#286: FILE: include/linux/taskdelays.h:27:
+	uint64_t runcpu_total;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#287: FILE: include/linux/taskdelays.h:28:
+	uint64_t iowait_total;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#288: FILE: include/linux/taskdelays.h:29:
+	uint64_t mem_iowait_total;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#289: FILE: include/linux/taskdelays.h:30:
+	uint32_t runs;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#290: FILE: include/linux/taskdelays.h:31:
+	uint32_t num_iowaits;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#291: FILE: include/linux/taskdelays.h:32:
+	uint32_t num_memwaits;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#375: FILE: kernel/sched.c:3840:
+	start_delay_set(dstart,PF_IOWAIT);
 	                      ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000173761.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 55 errors, 12 warnings, 23 checks, 328 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000173761.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
