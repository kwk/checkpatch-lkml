WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
in fact, design is taken from htree modern ext2/ext3 uses. in constrast with

WARNING:TYPO_SPELLING: 'constrast' may be misspelled - perhaps 'contrast'?
#36: 
in fact, design is taken from htree modern ext2/ext3 uses. in constrast with
                                                              ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#148: FILE: fs/ext3/extents.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#150: FILE: fs/ext3/extents.c:3:
+ * linux/fs/ext3/extents.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#155: FILE: fs/ext3/extents.c:8:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#194: FILE: fs/ext3/extents.c:47:
+#define ext_debug(inode,fmt,a...) ^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#194: FILE: fs/ext3/extents.c:47:
+#define ext_debug(inode,fmt,a...) 		\
                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#194: FILE: fs/ext3/extents.c:47:
+#define ext_debug(inode,fmt,a...) 		\
                            ^

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#194: FILE: fs/ext3/extents.c:47:
+#define ext_debug(inode,fmt,a...) 		\
+do {						\
+	if (test_opt((inode)->i_sb, EXTDEBUG))	\
+		printk(fmt, ##a);		\
+} while (0);

do {} while(0) macros should not have a trailing semicolon.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#197: FILE: fs/ext3/extents.c:50:
+		printk(fmt, ##a);		\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#200: FILE: fs/ext3/extents.c:53:
+#define ext_debug(inode,fmt,a...)
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#200: FILE: fs/ext3/extents.c:53:
+#define ext_debug(inode,fmt,a...)
                            ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#229: FILE: fs/ext3/extents.c:82:
+				 * level. leaf or next index could bet here */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#229: FILE: fs/ext3/extents.c:82:
+	__u32	e_leaf;		/* pointer to the physical block of the next *
+				 * level. leaf or next index could bet here */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#235: FILE: fs/ext3/extents.c:88:
+struct ext3_extent_header {^I$

CHECK:SPACING: No space is necessary after a cast
#255: FILE: fs/ext3/extents.c:108:
+	((struct ext3_extent *) (((char *) (__hdr__)) +		\

CHECK:SPACING: No space is necessary after a cast
#258: FILE: fs/ext3/extents.c:111:
+	((struct ext3_extent_idx *) (((char *) (__hdr__)) +	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__path__' - possible side-effects?
#260: FILE: fs/ext3/extents.c:113:
+#define EXT_HAS_FREE_INDEX(__path__) \
+	((__path__)->p_hdr->e_num < (__path__)->p_hdr->e_max)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__hdr__' - possible side-effects?
#262: FILE: fs/ext3/extents.c:115:
+#define EXT_LAST_EXTENT(__hdr__) \
+	(EXT_FIRST_EXTENT((__hdr__)) + (__hdr__)->e_num - 1)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__hdr__' - possible side-effects?
#264: FILE: fs/ext3/extents.c:117:
+#define EXT_LAST_INDEX(__hdr__) \
+	(EXT_FIRST_INDEX((__hdr__)) + (__hdr__)->e_num - 1)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__hdr__' - possible side-effects?
#266: FILE: fs/ext3/extents.c:119:
+#define EXT_MAX_EXTENT(__hdr__) \
+	(EXT_FIRST_EXTENT((__hdr__)) + (__hdr__)->e_max - 1)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__hdr__' - possible side-effects?
#268: FILE: fs/ext3/extents.c:121:
+#define EXT_MAX_INDEX(__hdr__) \
+	(EXT_FIRST_INDEX((__hdr__)) + (__hdr__)->e_max - 1)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#271: FILE: fs/ext3/extents.c:124:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#272: FILE: fs/ext3/extents.c:125:
+#define EXT_ASSERT(__x__) if (!(__x__)) BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#272: FILE: fs/ext3/extents.c:125:
+#define EXT_ASSERT(__x__) if (!(__x__)) BUG();

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#272: FILE: fs/ext3/extents.c:125:
+#define EXT_ASSERT(__x__) if (!(__x__)) BUG();

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#274: FILE: fs/ext3/extents.c:127:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#288: FILE: fs/ext3/extents.c:141:
+int ext3_ext_dirty(handle_t *handle, struct inode *inode,
+			struct ext3_ext_path *path)

CHECK:BRACES: braces {} should be used on all arms of this statement
#344: FILE: fs/ext3/extents.c:197:
+		if (path->p_idx) {
[...]
+		} else if (path->p_ext) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#346: FILE: fs/ext3/extents.c:199:
+			ext_debug(inode, "  %d->%d", path->p_idx->e_block,
+					path->p_idx->e_leaf);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#349: FILE: fs/ext3/extents.c:202:
+			ext_debug(inode, "  %d:%d:%d",
+					path->p_ext->e_block,

CHECK:BRACES: Unbalanced braces around else statement
#352: FILE: fs/ext3/extents.c:205:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#367: FILE: fs/ext3/extents.c:220:
+		ext_debug(inode, "%d:%d:%d ",
+				ex->e_block, ex->e_start, ex->e_num);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#390: FILE: fs/ext3/extents.c:243:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#397: FILE: fs/ext3/extents.c:250:
+^I^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#399: FILE: fs/ext3/extents.c:252:
+		 * try to find starting from index itself */

CHECK:SPACING: No space is necessary after a cast
#416: FILE: fs/ext3/extents.c:269:
+	struct ext3_extent_header *eh = (void *) ei->i_data;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#421: FILE: fs/ext3/extents.c:274:
+^I$

CHECK:SPACING: No space is necessary after a cast
#422: FILE: fs/ext3/extents.c:275:
+	eh = (struct ext3_extent_header *) ei->i_data;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#427: FILE: fs/ext3/extents.c:280:
+	i = depth = ei->i_depth;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#429: FILE: fs/ext3/extents.c:282:
+^I$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*path)...) over kmalloc(sizeof(struct ext3_ext_path)...)
#432: FILE: fs/ext3/extents.c:285:
+		path = kmalloc(sizeof(struct ext3_ext_path) * (depth + 2),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#433: FILE: fs/ext3/extents.c:286:
+		path = kmalloc(sizeof(struct ext3_ext_path) * (depth + 2),
+				GFP_NOFS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#442: FILE: fs/ext3/extents.c:295:
+		ext_debug(inode, "depth %d: num %d, max %d\n",
+				ppos, eh->e_num, eh->e_max);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#449: FILE: fs/ext3/extents.c:302:
+			ext_debug(inode, "index: %d -> %d\n",
+					ix->e_block, ix->e_leaf);

CHECK:SPACING: No space is necessary after a cast
#465: FILE: fs/ext3/extents.c:318:
+		eh = (struct ext3_extent_header *) bh->b_data;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#475: FILE: fs/ext3/extents.c:328:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#482: FILE: fs/ext3/extents.c:335:
+^I^Iif (block < ex->e_block) $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#493: FILE: fs/ext3/extents.c:346:
+void ext3_ext_check_boundary(struct inode *inode, struct ext3_ext_path *curp,
+				void *addr, int len)

CHECK:SPACING: No space is necessary after a cast
#500: FILE: fs/ext3/extents.c:353:
+		end = (void *) curp->p_hdr + inode->i_sb->s_blocksize;

CHECK:SPACING: No space is necessary after a cast
#502: FILE: fs/ext3/extents.c:355:
+		end = (void *) curp->p_hdr + sizeof(EXT3_I(inode)->i_data);

CHECK:SPACING: No space is necessary after a cast
#503: FILE: fs/ext3/extents.c:356:
+	if (((unsigned long) addr) + len > (unsigned long) end) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#504: FILE: fs/ext3/extents.c:357:
+		printk("overflow! 0x%p > 0x%p\n", addr + len, end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#505: FILE: fs/ext3/extents.c:358:
+		BUG();

CHECK:SPACING: No space is necessary after a cast
#507: FILE: fs/ext3/extents.c:360:
+	if ((unsigned long) addr < (unsigned long) curp->p_hdr) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#508: FILE: fs/ext3/extents.c:361:
+		printk("underflow! 0x%p < 0x%p\n", addr, curp->p_hdr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#509: FILE: fs/ext3/extents.c:362:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#514: FILE: fs/ext3/extents.c:367:
+void ext3_ext_insert_index(handle_t *handle, struct inode *inode,
+				struct ext3_ext_path *curp, int logical,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#520: FILE: fs/ext3/extents.c:373:
+	if ((err = ext3_ext_get_access(handle, inode, curp)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#521: FILE: fs/ext3/extents.c:374:
+		BUG();

WARNING:SPLIT_STRING: quoted string split across lines
#530: FILE: fs/ext3/extents.c:383:
+		ext_debug(inode, "insert new index %d after: %d. "
+				"move %d from 0x%p to 0x%p\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#542: FILE: fs/ext3/extents.c:395:
+		ext_debug(inode, "insert new index %d before: %d. "
+				"move %d from 0x%p to 0x%p\n",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#555: FILE: fs/ext3/extents.c:408:
+	if ((err = ext3_ext_dirty(handle, inode, curp)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#556: FILE: fs/ext3/extents.c:409:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#560: FILE: fs/ext3/extents.c:413:
+int ext3_ext_create_new_leaf(handle_t *handle, struct inode *inode,
+				struct ext3_ext_path *path,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#581: FILE: fs/ext3/extents.c:434:
+	 * so, subsequent data blocks should be contigoues */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#592: FILE: fs/ext3/extents.c:445:
+		 * entry: create all needed subtree and add new leaf */

WARNING:TYPO_SPELLING: 'desicion' may be misspelled - perhaps 'decision'?
#595: FILE: fs/ext3/extents.c:448:
+		/* FIXME: now desicion is simplest: at current extent */
 		              ^^^^^^^^

WARNING:TYPO_SPELLING: 'splitted' may be misspelled - perhaps 'split'?
#597: FILE: fs/ext3/extents.c:450:
+		/* if current leaf will be splitted, then we should use 
 		                           ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#597: FILE: fs/ext3/extents.c:450:
+^I^I/* if current leaf will be splitted, then we should use $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#598: FILE: fs/ext3/extents.c:451:
+		 * border from split point */

WARNING:TYPO_SPELLING: 'splitted' may be misspelled - perhaps 'split'?
#601: FILE: fs/ext3/extents.c:454:
+			ext_debug(inode, "leaf will be splitted."
 			                               ^^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#602: FILE: fs/ext3/extents.c:455:
+			ext_debug(inode, "leaf will be splitted."
+					" next leaf starts at %d\n",

WARNING:SPLIT_STRING: quoted string split across lines
#607: FILE: fs/ext3/extents.c:460:
+			ext_debug(inode, "leaf will be added."
+					" next leaf starts at %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#617: FILE: fs/ext3/extents.c:470:
+			ext_debug(inode,
+					"create %d intermediate indices\n", k);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#624: FILE: fs/ext3/extents.c:477:
+				ext3_new_block(handle, inode, newblock,
+						0, 0, &err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#626: FILE: fs/ext3/extents.c:479:
+				BUG();

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#628: FILE: fs/ext3/extents.c:481:
+			if ((err = ext3_journal_get_create_access(handle, bh)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#629: FILE: fs/ext3/extents.c:482:
+				BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#630: FILE: fs/ext3/extents.c:483:
+^I^I^I$

CHECK:SPACING: No space is necessary after a cast
#631: FILE: fs/ext3/extents.c:484:
+			neh = (struct ext3_extent_header *) bh->b_data;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#637: FILE: fs/ext3/extents.c:490:
+^I^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#644: FILE: fs/ext3/extents.c:497:
+			ext_debug(inode, "cur 0x%p, last 0x%p\n", path[i].p_idx,
+					EXT_MAX_INDEX(path[i].p_hdr));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#648: FILE: fs/ext3/extents.c:501:
+				ext_debug(inode, "%d: move %d:%d in new index\n",
+						i, path[i].p_idx->e_block,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#651: FILE: fs/ext3/extents.c:504:
+				memmove(++fidx, path[i].p_idx++,
+						sizeof(struct ext3_extent_idx));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#658: FILE: fs/ext3/extents.c:511:
+				err = ext3_ext_get_access(handle,inode,path+i);
 				                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#658: FILE: fs/ext3/extents.c:511:
+				err = ext3_ext_get_access(handle,inode,path+i);
 				                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#658: FILE: fs/ext3/extents.c:511:
+				err = ext3_ext_get_access(handle,inode,path+i);
 				                                           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#660: FILE: fs/ext3/extents.c:513:
+					BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#664: FILE: fs/ext3/extents.c:517:
+					BUG();

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#670: FILE: fs/ext3/extents.c:523:
+			if ((err = ext3_journal_dirty_metadata(handle, bh)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#671: FILE: fs/ext3/extents.c:524:
+				BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#673: FILE: fs/ext3/extents.c:526:
+^I^I^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#676: FILE: fs/ext3/extents.c:529:
+				BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#680: FILE: fs/ext3/extents.c:533:
+^I^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#682: FILE: fs/ext3/extents.c:535:
+		if ((err = ext3_journal_get_create_access(handle, bh)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#683: FILE: fs/ext3/extents.c:536:
+			BUG();

CHECK:SPACING: No space is necessary after a cast
#685: FILE: fs/ext3/extents.c:538:
+		neh = (struct ext3_extent_header *) bh->b_data;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#699: FILE: fs/ext3/extents.c:552:
+			ext_debug(inode, "move %d:%d:%d in new leaf\n",
+					path[depth].p_ext->e_block,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#703: FILE: fs/ext3/extents.c:556:
+			memmove(ex++, path[depth].p_ext++,
+					sizeof(struct ext3_extent));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#710: FILE: fs/ext3/extents.c:563:
+		if ((err = ext3_journal_dirty_metadata(handle, bh)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#711: FILE: fs/ext3/extents.c:564:
+			BUG();

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#715: FILE: fs/ext3/extents.c:568:
+			if ((err = ext3_ext_get_access(handle, inode, path)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#716: FILE: fs/ext3/extents.c:569:
+				BUG();

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#718: FILE: fs/ext3/extents.c:571:
+			if ((err = ext3_ext_dirty(handle, inode, path)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#719: FILE: fs/ext3/extents.c:572:
+				BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#724: FILE: fs/ext3/extents.c:577:
+^I^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#725: FILE: fs/ext3/extents.c:578:
+		if ((err = ext3_journal_get_create_access(handle, bh)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#726: FILE: fs/ext3/extents.c:579:
+			BUG();

CHECK:SPACING: No space is necessary after a cast
#735: FILE: fs/ext3/extents.c:588:
+		neh = (struct ext3_extent_header *) bh->b_data;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#740: FILE: fs/ext3/extents.c:593:
+		if ((err = ext3_journal_dirty_metadata(handle, bh)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#741: FILE: fs/ext3/extents.c:594:
+			BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#742: FILE: fs/ext3/extents.c:595:
+^I^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#744: FILE: fs/ext3/extents.c:597:
+		if ((err = ext3_ext_get_access(handle, inode, curp)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#745: FILE: fs/ext3/extents.c:598:
+			BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#752: FILE: fs/ext3/extents.c:605:
+^I^I$

CHECK:SPACING: No space is necessary after a cast
#753: FILE: fs/ext3/extents.c:606:
+		neh = (struct ext3_extent_header *) EXT3_I(inode)->i_data;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#756: FILE: fs/ext3/extents.c:609:
+^I^I^Ineh->e_num, neh->e_max, fidx->e_block, fidx->e_leaf); $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#756: FILE: fs/ext3/extents.c:609:
+		ext_debug(inode, "new root: num %d(%d), lblock %d, ptr %d\n",
+			neh->e_num, neh->e_max, fidx->e_block, fidx->e_leaf); 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#757: FILE: fs/ext3/extents.c:610:
+^I^I^I^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#759: FILE: fs/ext3/extents.c:612:
+		if ((err = ext3_ext_dirty(handle, inode, curp)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#760: FILE: fs/ext3/extents.c:613:
+			BUG();

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#785: FILE: fs/ext3/extents.c:638:
+#if 0

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#787: FILE: fs/ext3/extents.c:640:
+static unsigned ext3_ext_next_allocated_block(struct inode *inode,

ERROR:CODE_INDENT: code indent should use tabs where possible
#788: FILE: fs/ext3/extents.c:641:
+                                               struct ext3_ext_path *path)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#788: FILE: fs/ext3/extents.c:641:
+static unsigned ext3_ext_next_allocated_block(struct inode *inode,
+                                               struct ext3_ext_path *path)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#788: FILE: fs/ext3/extents.c:641:
+                                               struct ext3_ext_path *path)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "path"
#792: FILE: fs/ext3/extents.c:645:
+	EXT_ASSERT(path != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path->p_ext"
#795: FILE: fs/ext3/extents.c:648:
+	if (depth == 0 && path->p_ext == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#811: FILE: fs/ext3/extents.c:664:
+^I^Idepth--;        $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#819: FILE: fs/ext3/extents.c:672:
+static unsigned ext3_ext_next_leaf_block(struct inode *inode,

ERROR:CODE_INDENT: code indent should use tabs where possible
#820: FILE: fs/ext3/extents.c:673:
+                                               struct ext3_ext_path *path)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#820: FILE: fs/ext3/extents.c:673:
+static unsigned ext3_ext_next_leaf_block(struct inode *inode,
+                                               struct ext3_ext_path *path)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#820: FILE: fs/ext3/extents.c:673:
+                                               struct ext3_ext_path *path)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "path"
#824: FILE: fs/ext3/extents.c:677:
+	EXT_ASSERT(path != NULL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#833: FILE: fs/ext3/extents.c:686:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#838: FILE: fs/ext3/extents.c:691:
+^I^Idepth--;        $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#845: FILE: fs/ext3/extents.c:698:
+int ext3_ext_insert_extent(handle_t *handle, struct inode *inode,
+				struct ext3_ext_path *path,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#849: FILE: fs/ext3/extents.c:702:
+	struct ext3_extent_header * eh;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#855: FILE: fs/ext3/extents.c:708:
+^Idepth = EXT3_I(inode)->i_depth;^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#856: FILE: fs/ext3/extents.c:709:
+	if ((ex = path[depth].p_ext)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#859: FILE: fs/ext3/extents.c:712:
+		if (ex->e_block + ex->e_num == newext->e_block &&
+				ex->e_start + ex->e_num == newext->e_start) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#864: FILE: fs/ext3/extents.c:717:
+			if ((err = ext3_ext_get_access(handle, inode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#865: FILE: fs/ext3/extents.c:718:
+			if ((err = ext3_ext_get_access(handle, inode,
+							path + depth)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#866: FILE: fs/ext3/extents.c:719:
+				BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#868: FILE: fs/ext3/extents.c:721:
+			ext_debug(inode, "append %d block to %d:%d (from %d)\n",
+					newext->e_num, ex->e_block, ex->e_num,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#871: FILE: fs/ext3/extents.c:724:
+			if ((err = ext3_ext_dirty(handle, inode, path + depth)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#872: FILE: fs/ext3/extents.c:725:
+				BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#878: FILE: fs/ext3/extents.c:731:
+^Idepth = EXT3_I(inode)->i_depth;^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#883: FILE: fs/ext3/extents.c:736:
+		int next = ext3_ext_next_leaf_block(inode, path);
+		if (next != 0xffffffff) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#893: FILE: fs/ext3/extents.c:746:
+				ext_debug(inode,
+						"next leaf has free ext(%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#899: FILE: fs/ext3/extents.c:752:
+			ext_debug(inode, "next leaf has no free space(%d, %d)\n",
+					eh->e_num, eh->e_max);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#909: FILE: fs/ext3/extents.c:762:
+	if ((err = ext3_ext_get_access(handle, inode, path + depth)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#910: FILE: fs/ext3/extents.c:763:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#917: FILE: fs/ext3/extents.c:770:
+		ext_debug(inode, "first extent in the leaf: %d:%d:%d\n",
+				newext->e_block, newext->e_start,

WARNING:SPLIT_STRING: quoted string split across lines
#926: FILE: fs/ext3/extents.c:779:
+		ext_debug(inode, "insert %d:%d:%d after: nearest 0x%p, "
+				"move %d from 0x%p to 0x%p\n",

WARNING:SPLIT_STRING: quoted string split across lines
#938: FILE: fs/ext3/extents.c:791:
+		ext_debug(inode, "insert %d:%d:%d before: nearest 0x%p, "
+				"move %d from 0x%p to 0x%p\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#947: FILE: fs/ext3/extents.c:800:
+			int k = depth - 1;
+			if ((err = ext3_ext_get_access(handle, inode, path+k)))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#947: FILE: fs/ext3/extents.c:800:
+			if ((err = ext3_ext_get_access(handle, inode, path+k)))
 			                                                  ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#947: FILE: fs/ext3/extents.c:800:
+			if ((err = ext3_ext_get_access(handle, inode, path+k)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#948: FILE: fs/ext3/extents.c:801:
+				BUG();

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#950: FILE: fs/ext3/extents.c:803:
+			if ((err = ext3_ext_dirty(handle, inode, path + k)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#951: FILE: fs/ext3/extents.c:804:
+				BUG();

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#958: FILE: fs/ext3/extents.c:811:
+				if ((err = ext3_ext_get_access(handle, inode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#959: FILE: fs/ext3/extents.c:812:
+				if ((err = ext3_ext_get_access(handle, inode,
+								path + k)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#960: FILE: fs/ext3/extents.c:813:
+					BUG();

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#962: FILE: fs/ext3/extents.c:815:
+				if ((err = ext3_ext_dirty(handle, inode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#963: FILE: fs/ext3/extents.c:816:
+				if ((err = ext3_ext_dirty(handle, inode,
+								path + k)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#964: FILE: fs/ext3/extents.c:817:
+					BUG();

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#975: FILE: fs/ext3/extents.c:828:
+	if ((err = ext3_ext_dirty(handle, inode, path + depth)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#976: FILE: fs/ext3/extents.c:829:
+		BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#983: FILE: fs/ext3/extents.c:836:
+^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#988: FILE: fs/ext3/extents.c:841:
+int ext3_ext_get_block(handle_t *handle, struct inode *inode, sector_t iblock,
+			struct buffer_head *bh_result, int create,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#998: FILE: fs/ext3/extents.c:851:
+	ext_debug(inode, "block %d requested for inode %u, bh_result 0x%p\n",
+			(int) iblock, (unsigned) inode->i_ino, bh_result);

CHECK:SPACING: No space is necessary after a cast
#998: FILE: fs/ext3/extents.c:851:
+			(int) iblock, (unsigned) inode->i_ino, bh_result);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#998: FILE: fs/ext3/extents.c:851:
+			(int) iblock, (unsigned) inode->i_ino, bh_result);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1010: FILE: fs/ext3/extents.c:863:
+	if ((ex = path[depth].p_ext)) {

WARNING:TYPO_SPELLING: 'exent' may be misspelled - perhaps 'extent'?
#1011: FILE: fs/ext3/extents.c:864:
+		/* if found exent covers block, simple return it */
 		            ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1015: FILE: fs/ext3/extents.c:868:
+			ext_debug(inode, "%d fit into %d:%d -> %d\n",
+					(int) iblock, ex->e_block, ex->e_num,

CHECK:SPACING: No space is necessary after a cast
#1015: FILE: fs/ext3/extents.c:868:
+					(int) iblock, ex->e_block, ex->e_num,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1022: FILE: fs/ext3/extents.c:875:
+^I * we couldn't try to create block if create flag is zero $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1024: FILE: fs/ext3/extents.c:877:
+^Iif (!create) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1040: FILE: fs/ext3/extents.c:893:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1042: FILE: fs/ext3/extents.c:895:
+	 * for index block */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1054: FILE: fs/ext3/extents.c:907:
+^Ireturn err;^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1061: FILE: fs/ext3/extents.c:914:
+int ext3_ext_more_to_truncate(struct inode *inode,
+				struct ext3_ext_path *path)

WARNING:REPEATED_WORD: Possible repeated word: 'it'
#1069: FILE: fs/ext3/extents.c:922:
+	 * if truncate on deeper level happened it it wasn't partial

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1080: FILE: fs/ext3/extents.c:933:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1085: FILE: fs/ext3/extents.c:938:
+void ext3_ext_remove_index(handle_t *handle, struct inode *inode,
+					struct ext3_ext_path *path)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1089: FILE: fs/ext3/extents.c:942:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1093: FILE: fs/ext3/extents.c:946:
+	if ((err = ext3_ext_get_access(handle, inode, path)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1094: FILE: fs/ext3/extents.c:947:
+		BUG();

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1096: FILE: fs/ext3/extents.c:949:
+	if ((err = ext3_ext_dirty(handle, inode, path)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1097: FILE: fs/ext3/extents.c:950:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1103: FILE: fs/ext3/extents.c:956:
+	ext_debug(inode, "index is empty, remove it, free block %d\n",
+			path->p_idx->e_leaf);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1111: FILE: fs/ext3/extents.c:964:
+int ext3_ext_more_leaves_to_truncate(struct inode *inode,
+					struct ext3_ext_path *path)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1113: FILE: fs/ext3/extents.c:966:
+	unsigned blocksize = inode->i_sb->s_blocksize;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1115: FILE: fs/ext3/extents.c:968:
+^Iint last_block; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1122: FILE: fs/ext3/extents.c:975:
+^I$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1123: FILE: fs/ext3/extents.c:976:
+	last_block = (inode->i_size + blocksize-1)
 	                                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1142: FILE: fs/ext3/extents.c:995:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1151: FILE: fs/ext3/extents.c:1004:
+static int ext3_ext_calc_credits(struct inode *inode,
+					struct ext3_ext_path *path,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1156: FILE: fs/ext3/extents.c:1009:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1172: FILE: fs/ext3/extents.c:1025:
+	if (!path || (num == path->p_ext->e_num &&
+				path->p_ext == EXT_FIRST_EXTENT(path->p_hdr)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1179: FILE: fs/ext3/extents.c:1032:
+void ext3_ext_truncate_leaf(handle_t *handle, struct inode *inode,
+				struct ext3_ext_path *path, int depth)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1181: FILE: fs/ext3/extents.c:1034:
+	unsigned blocksize = inode->i_sb->s_blocksize;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1182: FILE: fs/ext3/extents.c:1035:
+^Iint last_block; $

CHECK:SPACING: No space is necessary after a cast
#1188: FILE: fs/ext3/extents.c:1041:
+			(struct ext3_extent_header *) path->p_bh->b_data;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1191: FILE: fs/ext3/extents.c:1044:
+^I$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1192: FILE: fs/ext3/extents.c:1045:
+	last_block = (inode->i_size + blocksize-1)
 	                                       ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1196: FILE: fs/ext3/extents.c:1049:
+	while (ext3_ext_more_leaves_to_truncate(inode, path)) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1209: FILE: fs/ext3/extents.c:1062:
+^I^Iif (IS_ERR(handle)) $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1210: FILE: fs/ext3/extents.c:1063:
+			BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1211: FILE: fs/ext3/extents.c:1064:
+^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1213: FILE: fs/ext3/extents.c:1066:
+		ext_debug(inode, "free extent %d:%d:%d -> free %d:%d\n",
+				path->p_ext->e_block, path->p_ext->e_start,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1228: FILE: fs/ext3/extents.c:1081:
+		if ((err = ext3_ext_get_access(handle, inode, path)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1229: FILE: fs/ext3/extents.c:1082:
+			BUG();

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1236: FILE: fs/ext3/extents.c:1089:
+		if ((err = ext3_ext_dirty(handle, inode, path)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1237: FILE: fs/ext3/extents.c:1090:
+			BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1241: FILE: fs/ext3/extents.c:1094:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1243: FILE: fs/ext3/extents.c:1096:
+	 * remove it from index block above */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1244: FILE: fs/ext3/extents.c:1097:
+^Iif (path->p_hdr->e_num == 0 && depth > 0) $

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1247: FILE: fs/ext3/extents.c:1100:
+
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1252: FILE: fs/ext3/extents.c:1105:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1256: FILE: fs/ext3/extents.c:1109:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1261: FILE: fs/ext3/extents.c:1114:
+  $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1261: FILE: fs/ext3/extents.c:1114:
+
+  

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1261: FILE: fs/ext3/extents.c:1114:
+  $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#1263: FILE: fs/ext3/extents.c:1116:
+	if (depth < EXT3_SB(inode->i_sb)->s_ext_mindepth)
+		 EXT3_SB(inode->i_sb)->s_ext_mindepth = depth;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#1265: FILE: fs/ext3/extents.c:1118:
+	if (depth > EXT3_SB(inode->i_sb)->s_ext_maxdepth)
+		 EXT3_SB(inode->i_sb)->s_ext_maxdepth = depth;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1269: FILE: fs/ext3/extents.c:1122:
+^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1270: FILE: fs/ext3/extents.c:1123:
+	
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1272: FILE: fs/ext3/extents.c:1125:
+void ext3_ext_truncate(struct inode * inode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1276: FILE: fs/ext3/extents.c:1129:
+	struct page * page;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1291: FILE: fs/ext3/extents.c:1144:
+		page = grab_cache_page(mapping,
+				inode->i_size >> PAGE_CACHE_SHIFT);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1314: FILE: fs/ext3/extents.c:1167:
+^I/* $

WARNING:TYPO_SPELLING: 'scaning' may be misspelled - perhaps 'scanning'?
#1316: FILE: fs/ext3/extents.c:1169:
+	 * probably we need not scaning at all,
 	                        ^^^^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*path)...) over kmalloc(sizeof(struct ext3_ext_path)...)
#1332: FILE: fs/ext3/extents.c:1185:
+	path = kmalloc(sizeof(struct ext3_ext_path) * (depth + 1), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1335: FILE: fs/ext3/extents.c:1188:
+		ext3_error(inode->i_sb, "ext3_ext_truncate",
+				"Can't allocate path array");

CHECK:SPACING: No space is necessary after a cast
#1340: FILE: fs/ext3/extents.c:1193:
+	path[i].p_hdr = (struct ext3_extent_header *) EXT3_I(inode)->i_data;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1350: FILE: fs/ext3/extents.c:1203:
+^I^I$

CHECK:SPACING: No space is necessary after a cast
#1354: FILE: fs/ext3/extents.c:1207:
+				(struct ext3_extent_header *) path[i].p_bh->b_data;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1359: FILE: fs/ext3/extents.c:1212:
+^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1365: FILE: fs/ext3/extents.c:1218:
+			ext_debug(inode, "init index ptr: hdr 0x%p, num %d\n",
+					path[i].p_hdr, path[i].p_hdr->e_num);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1372: FILE: fs/ext3/extents.c:1225:
+		ext_debug(inode, "level %d - index, first 0x%p, cur 0x%p\n",
+				i, EXT_FIRST_INDEX(path[i].p_hdr),

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1376: FILE: fs/ext3/extents.c:1229:
+			ext_debug(inode, "move to level %d (block %d)\n", i+1,
 			                                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1377: FILE: fs/ext3/extents.c:1230:
+			ext_debug(inode, "move to level %d (block %d)\n", i+1,
+					path[i].p_idx->e_leaf);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1378: FILE: fs/ext3/extents.c:1231:
+			memset(path+i+1, 0, sizeof(*path));
 			           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1378: FILE: fs/ext3/extents.c:1231:
+			memset(path+i+1, 0, sizeof(*path));
 			             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1379: FILE: fs/ext3/extents.c:1232:
+			path[i+1].p_bh = sb_bread(inode->i_sb,
 			      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1380: FILE: fs/ext3/extents.c:1233:
+			path[i+1].p_bh = sb_bread(inode->i_sb,
+							path[i].p_idx->e_leaf);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1392: FILE: fs/ext3/extents.c:1245:
+
+			}

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1414: FILE: fs/ext3/extents.c:1267:
+	 * transaction synchronous */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1441: FILE: fs/ext3/extents.c:1294:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1449: FILE: fs/ext3/extents.c:1302:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1464: FILE: fs/ext3/extents.c:1317:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1466: FILE: fs/ext3/extents.c:1319:
+^I/* $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1483: FILE: fs/ext3/extents.c:1336:
+		printk("EXT3-fs: file extents enabled\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1493: FILE: fs/ext3/extents.c:1346:
+		printk("EXT3-fs: min depth - %d, max depth - %d, "

WARNING:SPLIT_STRING: quoted string split across lines
#1494: FILE: fs/ext3/extents.c:1347:
+		printk("EXT3-fs: min depth - %d, max depth - %d, "
+				"ave. depth - %d, ave. blocks/extent - %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1522: FILE: fs/ext3/inode.c:867:
+ext3_get_block_wrap(handle_t *handle, struct inode *inode, sector_t block,
+		struct buffer_head *bh, int create, int extend_disksize)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1538: FILE: fs/ext3/inode.c:885:
+	ret = ext3_get_block_wrap(handle, inode, iblock,
 				bh_result, create, 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1547: FILE: fs/ext3/inode.c:912:
+		ret = ext3_get_block_wrap(handle, inode, iblock,
 					bh_result, create, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1565: FILE: fs/ext3/inode.c:1676:
+int ext3_block_truncate_page(handle_t *handle, struct page *page,
 		struct address_space *mapping, loff_t from)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1590: FILE: fs/ext3/inode.c:2658:
+ ^Iraw_inode->osd2.linux2.l_i_depth = ei->i_depth;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1590: FILE: fs/ext3/inode.c:2658:
+ ^Iraw_inode->osd2.linux2.l_i_depth = ei->i_depth;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1590: FILE: fs/ext3/inode.c:2658:
+ ^Iraw_inode->osd2.linux2.l_i_depth = ei->i_depth;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1640: FILE: fs/ext3/super.c:662:
+		if (!strcmp (this_char, "extents"))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1641: FILE: fs/ext3/super.c:663:
+			set_opt (sbi->s_mount_opt, EXTENTS);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#1642: FILE: fs/ext3/super.c:664:
+		else
+		if (!strcmp (this_char, "extdebug"))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1643: FILE: fs/ext3/super.c:665:
+		if (!strcmp (this_char, "extdebug"))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1644: FILE: fs/ext3/super.c:666:
+			set_opt (sbi->s_mount_opt, EXTDEBUG);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#1645: FILE: fs/ext3/super.c:667:
+		else
[...]
 		if (!strcmp (this_char, "user_xattr"))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1691: FILE: include/linux/ext3_fs.h:739:
+extern int ext3_block_truncate_page(handle_t *handle, struct page *page,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1692: FILE: include/linux/ext3_fs.h:740:
+extern int ext3_block_truncate_page(handle_t *handle, struct page *page,
+					struct address_space *mapping, loff_t from);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1693: FILE: include/linux/ext3_fs.h:741:
+extern int ext3_forget(handle_t *handle, int is_metadata,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1704: FILE: include/linux/ext3_fs.h:801:
+extern int ext3_ext_writepage_trans_blocks(struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1704: FILE: include/linux/ext3_fs.h:801:
+extern int ext3_ext_writepage_trans_blocks(struct inode *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1704: FILE: include/linux/ext3_fs.h:801:
+extern int ext3_ext_writepage_trans_blocks(struct inode *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1705: FILE: include/linux/ext3_fs.h:802:
+extern int ext3_ext_get_block(handle_t *, struct inode *, sector_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#1705: FILE: include/linux/ext3_fs.h:802:
+extern int ext3_ext_get_block(handle_t *, struct inode *, sector_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1705: FILE: include/linux/ext3_fs.h:802:
+extern int ext3_ext_get_block(handle_t *, struct inode *, sector_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t' should also have an identifier name
#1705: FILE: include/linux/ext3_fs.h:802:
+extern int ext3_ext_get_block(handle_t *, struct inode *, sector_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct buffer_head *' should also have an identifier name
#1705: FILE: include/linux/ext3_fs.h:802:
+extern int ext3_ext_get_block(handle_t *, struct inode *, sector_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1705: FILE: include/linux/ext3_fs.h:802:
+extern int ext3_ext_get_block(handle_t *, struct inode *, sector_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1705: FILE: include/linux/ext3_fs.h:802:
+extern int ext3_ext_get_block(handle_t *, struct inode *, sector_t,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1706: FILE: include/linux/ext3_fs.h:803:
+extern int ext3_ext_get_block(handle_t *, struct inode *, sector_t,
+				struct buffer_head *, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1707: FILE: include/linux/ext3_fs.h:804:
+extern void ext3_ext_truncate(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1707: FILE: include/linux/ext3_fs.h:804:
+extern void ext3_ext_truncate(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1708: FILE: include/linux/ext3_fs.h:805:
+extern void ext3_ext_init(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1708: FILE: include/linux/ext3_fs.h:805:
+extern void ext3_ext_init(struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1709: FILE: include/linux/ext3_fs.h:806:
+extern void ext3_ext_release(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1709: FILE: include/linux/ext3_fs.h:806:
+extern void ext3_ext_release(struct super_block *);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1741: FILE: include/linux/ext3_fs_sb.h:78:
+	spinlock_t s_ext_lock;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000346549.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 90 errors, 98 warnings, 106 checks, 1556 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000346549.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
