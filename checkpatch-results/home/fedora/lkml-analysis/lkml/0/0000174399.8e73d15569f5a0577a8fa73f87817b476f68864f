WARNING:TYPO_SPELLING: 'familiy' may be misspelled - perhaps 'family'?
#79: 
	in blocking I/O mode, and the poll familiy of system
	                                   ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:REPEATED_WORD: Possible repeated word: 'can'
#83: 
	can can be written in units of 32 bits. If the mailbox

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#127: FILE: arch/ppc64/kernel/spu_base.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#145: FILE: arch/ppc64/kernel/spu_base.c:19:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#146: FILE: arch/ppc64/kernel/spu_base.c:20:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#157: FILE: arch/ppc64/kernel/spu_base.c:31:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#161: FILE: arch/ppc64/kernel/spu_base.c:35:
+#include <asm/mmu_context.h>

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#167: FILE: arch/ppc64/kernel/spu_base.c:41:
+	pr_debug("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#174: FILE: arch/ppc64/kernel/spu_base.c:48:
+	pr_debug("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#181: FILE: arch/ppc64/kernel/spu_base.c:55:
+	pr_debug("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#191: FILE: arch/ppc64/kernel/spu_base.c:65:
+	pr_debug("%s\n", __FUNCTION__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#194: FILE: arch/ppc64/kernel/spu_base.c:68:
+		printk("invalid region access at %016lx\n", ea);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#206: FILE: arch/ppc64/kernel/spu_base.c:80:
+	out_be64(&priv2->slb_vsid_RW,
+		(get_vsid(mm->context.id, ea) << SLB_VSID_SHIFT)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#211: FILE: arch/ppc64/kernel/spu_base.c:85:
+	printk("set slb %d context %lx, ea %016lx, vsid %016lx, esid %016lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#212: FILE: arch/ppc64/kernel/spu_base.c:86:
+	printk("set slb %d context %lx, ea %016lx, vsid %016lx, esid %016lx\n",
+		spu->slb_replace, mm->context.id, ea,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxW)
#213: FILE: arch/ppc64/kernel/spu_base.c:87:
+		(get_vsid(mm->context.id, ea) << SLB_VSID_SHIFT)| SLB_VSID_USER,
 		                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: arch/ppc64/kernel/spu_base.c:90:
+}^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#223: FILE: arch/ppc64/kernel/spu_base.c:97:
+	pr_debug("%s\n", __FUNCTION__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#228: FILE: arch/ppc64/kernel/spu_base.c:102:
+		printk("pte lookup ea %016lx, dsisr %lx\n", ea, dsisr);

WARNING:TYPO_SPELLING: 'unexpexted' may be misspelled - perhaps 'unexpected'?
#231: FILE: arch/ppc64/kernel/spu_base.c:105:
+		printk("unexpexted data fault ea %016lx, dsisr %lx\n", ea, dsisr);
 		        ^^^^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#231: FILE: arch/ppc64/kernel/spu_base.c:105:
+		printk("unexpexted data fault ea %016lx, dsisr %lx\n", ea, dsisr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#243: FILE: arch/ppc64/kernel/spu_base.c:117:
+^Iout_be64(&spu->priv1->int_mask_class2_RW, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#244: FILE: arch/ppc64/kernel/spu_base.c:118:
+	out_be64(&spu->priv1->int_mask_class2_RW, 
+		in_be64(&spu->priv1->int_mask_class2_RW) & ~0x1);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#251: FILE: arch/ppc64/kernel/spu_base.c:125:
+	pr_debug("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#259: FILE: arch/ppc64/kernel/spu_base.c:133:
+	pr_debug("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#267: FILE: arch/ppc64/kernel/spu_base.c:141:
+	pr_debug("%s\n", __FUNCTION__);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#278: FILE: arch/ppc64/kernel/spu_base.c:152:
+^Iout_be64(&spu->priv1->int_mask_class2_RW, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#279: FILE: arch/ppc64/kernel/spu_base.c:153:
+	out_be64(&spu->priv1->int_mask_class2_RW, 
+		in_be64(&spu->priv1->int_mask_class2_RW) & ~0x10);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#288: FILE: arch/ppc64/kernel/spu_base.c:162:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#355: FILE: arch/ppc64/kernel/spu_base.c:229:
+	pr_debug("class 2 interrupt %d, %lx, %lx\n", irq, stat,
+		in_be64(&spu->priv1->int_mask_class2_RW));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#356: FILE: arch/ppc64/kernel/spu_base.c:230:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#357: FILE: arch/ppc64/kernel/spu_base.c:231:
+	
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#385: FILE: arch/ppc64/kernel/spu_base.c:259:
+	snprintf(spu->irq_c0, sizeof (spu->irq_c0), "spe%02d.0", spu->number);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#387: FILE: arch/ppc64/kernel/spu_base.c:261:
+	ret = request_irq(irq_base + spu->isrc,
+		 spu_irq_class_0, 0, spu->irq_c0, spu);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#391: FILE: arch/ppc64/kernel/spu_base.c:265:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#392: FILE: arch/ppc64/kernel/spu_base.c:266:
+	snprintf(spu->irq_c1, sizeof (spu->irq_c1), "spe%02d.1", spu->number);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: arch/ppc64/kernel/spu_base.c:268:
+	ret = request_irq(irq_base + IIC_CLASS_STRIDE + spu->isrc,
+		 spu_irq_class_1, 0, spu->irq_c1, spu);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#399: FILE: arch/ppc64/kernel/spu_base.c:273:
+	snprintf(spu->irq_c2, sizeof (spu->irq_c2), "spe%02d.2", spu->number);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#400: FILE: arch/ppc64/kernel/spu_base.c:274:
+	ret = request_irq(irq_base + 2*IIC_CLASS_STRIDE + spu->isrc,
 	                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#401: FILE: arch/ppc64/kernel/spu_base.c:275:
+	ret = request_irq(irq_base + 2*IIC_CLASS_STRIDE + spu->isrc,
+		 spu_irq_class_2, 0, spu->irq_c2, spu);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#424: FILE: arch/ppc64/kernel/spu_base.c:298:
+	free_irq(irq_base + 2*IIC_CLASS_STRIDE + spu->isrc, spu);
 	                     ^

WARNING:TABSTOP: Statements should start on a tabstop
#433: FILE: arch/ppc64/kernel/spu_base.c:307:
+		 unsigned channel;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#433: FILE: arch/ppc64/kernel/spu_base.c:307:
+		 unsigned channel;

WARNING:TABSTOP: Statements should start on a tabstop
#434: FILE: arch/ppc64/kernel/spu_base.c:308:
+		 unsigned count;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#434: FILE: arch/ppc64/kernel/spu_base.c:308:
+		 unsigned count;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#479: FILE: arch/ppc64/kernel/spu_base.c:353:
+		printk("Got SPU %x\n", spu->isrc);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#481: FILE: arch/ppc64/kernel/spu_base.c:355:
+		printk("No SPU left\n");

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#503: FILE: arch/ppc64/kernel/spu_base.c:377:
+extern int hash_page(unsigned long ea, unsigned long access, unsigned long trap); //XXX

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#514: FILE: arch/ppc64/kernel/spu_base.c:388:
+	printk("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#514: FILE: arch/ppc64/kernel/spu_base.c:388:
+	printk("%s\n", __FUNCTION__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#526: FILE: arch/ppc64/kernel/spu_base.c:400:
+		printk("error in hash_page!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#531: FILE: arch/ppc64/kernel/spu_base.c:405:
+	printk("current %ld, spu %ld, ea %ld\n", current->mm->context.id, mm->context.id, ea);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#533: FILE: arch/ppc64/kernel/spu_base.c:407:
+		printk("hash inserted, vsid %lx\n", get_vsid(current->mm->context.id, ea));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#540: FILE: arch/ppc64/kernel/spu_base.c:414:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#555: FILE: arch/ppc64/kernel/spu_base.c:429:
+		printk("minor\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#556: FILE: arch/ppc64/kernel/spu_base.c:430:
+                current->min_flt++;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#556: FILE: arch/ppc64/kernel/spu_base.c:430:
+                current->min_flt++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#557: FILE: arch/ppc64/kernel/spu_base.c:431:
+                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#557: FILE: arch/ppc64/kernel/spu_base.c:431:
+                break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#558: FILE: arch/ppc64/kernel/spu_base.c:432:
+        case VM_FAULT_MAJOR:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#558: FILE: arch/ppc64/kernel/spu_base.c:432:
+        case VM_FAULT_MAJOR:$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#559: FILE: arch/ppc64/kernel/spu_base.c:433:
+		printk("major\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#560: FILE: arch/ppc64/kernel/spu_base.c:434:
+                current->maj_flt++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#560: FILE: arch/ppc64/kernel/spu_base.c:434:
+                current->maj_flt++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#561: FILE: arch/ppc64/kernel/spu_base.c:435:
+                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#561: FILE: arch/ppc64/kernel/spu_base.c:435:
+                break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#562: FILE: arch/ppc64/kernel/spu_base.c:436:
+        case VM_FAULT_SIGBUS:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#562: FILE: arch/ppc64/kernel/spu_base.c:436:
+        case VM_FAULT_SIGBUS:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#564: FILE: arch/ppc64/kernel/spu_base.c:438:
+                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#564: FILE: arch/ppc64/kernel/spu_base.c:438:
+                break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#565: FILE: arch/ppc64/kernel/spu_base.c:439:
+        case VM_FAULT_OOM:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#565: FILE: arch/ppc64/kernel/spu_base.c:439:
+        case VM_FAULT_OOM:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#567: FILE: arch/ppc64/kernel/spu_base.c:441:
+                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#567: FILE: arch/ppc64/kernel/spu_base.c:441:
+                break;$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#569: FILE: arch/ppc64/kernel/spu_base.c:443:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#571: FILE: arch/ppc64/kernel/spu_base.c:445:
+out:^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#578: FILE: arch/ppc64/kernel/spu_base.c:452:
+	printk("%s: returning %d\n", __FUNCTION__, ret);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#578: FILE: arch/ppc64/kernel/spu_base.c:452:
+	printk("%s: returning %d\n", __FUNCTION__, ret);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#597: FILE: arch/ppc64/kernel/spu_base.c:471:
+^Ido {^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#599: FILE: arch/ppc64/kernel/spu_base.c:473:
+		ret = wait_event_interruptible(spu->stop_wq,
+			 (!((status = in_be32(&prob->spu_status_R)) & 0x1))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#600: FILE: arch/ppc64/kernel/spu_base.c:474:
+			 (!((status = in_be32(&prob->spu_status_R)) & 0x1))
+			|| (in_be64(&priv1->mfc_dsisr_RW) & MFC_DSISR_PTE_NOT_FOUND));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#622: FILE: arch/ppc64/kernel/spu_base.c:496:
+static void __iomem * __init map_spe_prop(struct device_node *n,
+						 const char *name)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#627: FILE: arch/ppc64/kernel/spu_base.c:501:
+	} __attribute__((packed)) *prop;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#631: FILE: arch/ppc64/kernel/spu_base.c:505:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#633: FILE: arch/ppc64/kernel/spu_base.c:507:
+	if (proplen != sizeof (struct address_prop))

CHECK:SPACING: No space is necessary after a cast
#665: FILE: arch/ppc64/kernel/spu_base.c:539:
+	spu->local_store = (u8 __force *) map_spe_prop(spe, "local-store");

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#669: FILE: arch/ppc64/kernel/spu_base.c:543:
+	spu->problem= map_spe_prop(spe, "problem");
 	            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#673: FILE: arch/ppc64/kernel/spu_base.c:547:
+	spu->priv1= map_spe_prop(spe, "priv1");
 	          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#677: FILE: arch/ppc64/kernel/spu_base.c:551:
+	spu->priv2= map_spe_prop(spe, "priv2");
 	          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#682: FILE: arch/ppc64/kernel/spu_base.c:556:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#707: FILE: arch/ppc64/kernel/spu_base.c:581:
+	spu = kmalloc(sizeof (*spu), GFP_KERNEL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#738: FILE: arch/ppc64/kernel/spu_base.c:612:
+^Iprintk(KERN_DEBUG "Using SPE %s %02x %p %p %p %p %d\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#738: FILE: arch/ppc64/kernel/spu_base.c:612:
+	printk(KERN_DEBUG "Using SPE %s %02x %p %p %p %p %d\n", 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#739: FILE: arch/ppc64/kernel/spu_base.c:613:
+^I^Ispu->name, spu->isrc, spu->local_store, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#739: FILE: arch/ppc64/kernel/spu_base.c:613:
+	printk(KERN_DEBUG "Using SPE %s %02x %p %p %p %p %d\n", 
+		spu->name, spu->isrc, spu->local_store, 

WARNING:LINE_SPACING: Missing a blank line after declarations
#764: FILE: arch/ppc64/kernel/spu_base.c:638:
+	struct spu *spu, *tmp;
+	down(&spu_mutex);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#781: FILE: arch/ppc64/kernel/spu_base.c:655:
+			printk(KERN_WARNING "%s: Error initializing %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#782: FILE: arch/ppc64/kernel/spu_base.c:656:
+			printk(KERN_WARNING "%s: Error initializing %s\n",
+				__FUNCTION__, node->name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#782: FILE: arch/ppc64/kernel/spu_base.c:656:
+				__FUNCTION__, node->name);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#788: FILE: arch/ppc64/kernel/spu_base.c:662:
+	/* in some old firmware versions, the spe is called 'spc', so we
+	   look for that as well */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#788: FILE: arch/ppc64/kernel/spu_base.c:662:
+	   look for that as well */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#793: FILE: arch/ppc64/kernel/spu_base.c:667:
+			printk(KERN_WARNING "%s: Error initializing %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#794: FILE: arch/ppc64/kernel/spu_base.c:668:
+			printk(KERN_WARNING "%s: Error initializing %s\n",
+				__FUNCTION__, node->name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#794: FILE: arch/ppc64/kernel/spu_base.c:668:
+				__FUNCTION__, node->name);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#821: FILE: fs/Kconfig:856:
+config SPU_FS
+	tristate "SPU file system"
+	default m
+	depends on PPC_BPA
+	help
+	  The SPU file system is used to access Synergistic Processing
+	  Units on machines implementing the Broadband Processor
+	  Architecture.
+	
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#829: FILE: fs/Kconfig:864:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#849: FILE: fs/spufs/file.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#867: FILE: fs/spufs/file.c:19:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#868: FILE: fs/spufs/file.c:20:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#876: FILE: fs/spufs/file.c:28:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#879: FILE: fs/spufs/file.c:31:
+#include <asm/uaccess.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#887: FILE: fs/spufs/file.c:39:
+	struct spufs_inode_info *i = SPUFS_I(inode);
+	file->private_data = i->i_ctx;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#893: FILE: fs/spufs/file.c:45:
+spufs_mem_read(struct file *file, char __user *buffer,
+				size_t size, loff_t *pos)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#922: FILE: fs/spufs/file.c:74:
+spufs_mem_write(struct file *file, const char __user *buffer, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#923: FILE: fs/spufs/file.c:75:
+spufs_mem_write(struct file *file, const char __user *buffer, 
+					size_t size, loff_t *pos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#955: FILE: fs/spufs/file.c:107:
+	if (remap_pfn_range(vma, vma->vm_start, pfn,
+				vma->vm_end-vma->vm_start, vma->vm_page_prot))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#955: FILE: fs/spufs/file.c:107:
+				vma->vm_end-vma->vm_start, vma->vm_page_prot))
 				           ^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#961: FILE: fs/spufs/file.c:113:
+static struct file_operations spufs_mem_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:CODE_INDENT: code indent should use tabs where possible
#964: FILE: fs/spufs/file.c:116:
+        .write   = spufs_mem_write,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#964: FILE: fs/spufs/file.c:116:
+        .write   = spufs_mem_write,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#972: FILE: fs/spufs/file.c:124:
+        struct spufs_inode_info *i = SPUFS_I(inode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#972: FILE: fs/spufs/file.c:124:
+        struct spufs_inode_info *i = SPUFS_I(inode);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#973: FILE: fs/spufs/file.c:125:
+        file->private_data = i->i_ctx;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#973: FILE: fs/spufs/file.c:125:
+        struct spufs_inode_info *i = SPUFS_I(inode);
+        file->private_data = i->i_ctx;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#973: FILE: fs/spufs/file.c:125:
+        file->private_data = i->i_ctx;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#978: FILE: fs/spufs/file.c:130:
+static ssize_t spufs_mbox_read(struct file *file, char __user *buf, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#979: FILE: fs/spufs/file.c:131:
+static ssize_t spufs_mbox_read(struct file *file, char __user *buf, 
+			size_t len, loff_t *pos)

WARNING:SIZEOF_PARENTHESIS: sizeof mbox_data should be sizeof(mbox_data)
#997: FILE: fs/spufs/file.c:149:
+	if (copy_to_user(buf, &mbox_data, sizeof mbox_data))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1001: FILE: fs/spufs/file.c:153:
+}^I$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1003: FILE: fs/spufs/file.c:155:
+static struct file_operations spufs_mbox_fops = {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1021: FILE: fs/spufs/file.c:173:
+^I^Iout_be64(&spu->priv1->int_mask_class2_RW, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1022: FILE: fs/spufs/file.c:174:
+		out_be64(&spu->priv1->int_mask_class2_RW, 
+			in_be64(&spu->priv1->int_mask_class2_RW) | 0x1);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1031: FILE: fs/spufs/file.c:183:
+static ssize_t spufs_ibox_read(struct file *file, char __user *buf, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1032: FILE: fs/spufs/file.c:184:
+static ssize_t spufs_ibox_read(struct file *file, char __user *buf, 
+			size_t len, loff_t *pos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1049: FILE: fs/spufs/file.c:201:
+		ret = wait_event_interruptible(ctx->spu->ibox_wq,
+				 spu_ibox_read(ctx->spu, &ibox_data));

WARNING:SIZEOF_PARENTHESIS: sizeof ibox_data should be sizeof(ibox_data)
#1056: FILE: fs/spufs/file.c:208:
+	if (copy_to_user(buf, &ibox_data, sizeof ibox_data))

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1082: FILE: fs/spufs/file.c:234:
+static struct file_operations spufs_ibox_fops = {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1101: FILE: fs/spufs/file.c:253:
+		/* make sure we get woken up by the interrupt when space
+		   becomes available */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1101: FILE: fs/spufs/file.c:253:
+		   becomes available */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1102: FILE: fs/spufs/file.c:254:
+^I^Iout_be64(&spu->priv1->int_mask_class2_RW, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1103: FILE: fs/spufs/file.c:255:
+		out_be64(&spu->priv1->int_mask_class2_RW, 
+			in_be64(&spu->priv1->int_mask_class2_RW) | 0x10);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1112: FILE: fs/spufs/file.c:264:
+static ssize_t spufs_wbox_write(struct file *file, const char __user *buf, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1113: FILE: fs/spufs/file.c:265:
+static ssize_t spufs_wbox_write(struct file *file, const char __user *buf, 
+			size_t len, loff_t *pos)

WARNING:SIZEOF_PARENTHESIS: sizeof wbox_data should be sizeof(wbox_data)
#1124: FILE: fs/spufs/file.c:276:
+	if (copy_from_user(&wbox_data, buf, sizeof wbox_data))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1133: FILE: fs/spufs/file.c:285:
+		ret = wait_event_interruptible(ctx->spu->wbox_wq,
+			spu_wbox_write(ctx->spu, wbox_data));

WARNING:SIZEOF_PARENTHESIS: sizeof wbox_data should be sizeof(wbox_data)
#1136: FILE: fs/spufs/file.c:288:
+	return ret ? ret : sizeof wbox_data;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1137: FILE: fs/spufs/file.c:289:
+}^I$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1159: FILE: fs/spufs/file.c:311:
+static struct file_operations spufs_wbox_fops = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1166: FILE: fs/spufs/file.c:318:
+static long spufs_run_spu(struct file *file, struct spu_context *ctx,
+		u32 *npc, u32 *status)

WARNING:TYPO_SPELLING: 'inout' may be misspelled - perhaps 'input'?
#1195: FILE: fs/spufs/file.c:347:
+	u32 npc;    /* inout: Next Program Counter */
 	               ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1201: FILE: fs/spufs/file.c:353:
+static long spufs_run_ioctl(struct file *file, unsigned int num,
+						unsigned long arg)

WARNING:SIZEOF_PARENTHESIS: sizeof data should be sizeof(data)
#1209: FILE: fs/spufs/file.c:361:
+	if (copy_from_user(&data, (void __user *)arg, sizeof data))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1213: FILE: fs/spufs/file.c:365:
+	ret = spufs_run_spu(file, file->private_data,
+				&data.npc, &data.status);

WARNING:SIZEOF_PARENTHESIS: sizeof data should be sizeof(data)
#1215: FILE: fs/spufs/file.c:367:
+	if (copy_to_user((void __user *)arg, &data, sizeof data))

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1221: FILE: fs/spufs/file.c:373:
+static struct file_operations spufs_run_fops = {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1230: FILE: fs/spufs/file.c:382:
+	struct spu_context *ctx = data;
+	ctx->sig1_type = !!val;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1236: FILE: fs/spufs/file.c:388:
+	struct spu_context *ctx = data;
+	return ctx->sig1_type;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1239: FILE: fs/spufs/file.c:391:
+DEFINE_SIMPLE_ATTRIBUTE(spufs_signal1_type, spufs_signal1_type_get,
+					spufs_signal1_type_set, "%llu");

WARNING:LINE_SPACING: Missing a blank line after declarations
#1244: FILE: fs/spufs/file.c:396:
+	struct spu_context *ctx = data;
+	ctx->sig2_type = !!val;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1250: FILE: fs/spufs/file.c:402:
+	struct spu_context *ctx = data;
+	return ctx->sig2_type;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1253: FILE: fs/spufs/file.c:405:
+DEFINE_SIMPLE_ATTRIBUTE(spufs_signal2_type, spufs_signal2_type_get,
+					spufs_signal2_type_set, "%llu");

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1255: FILE: fs/spufs/file.c:407:
+#define prob_attr(name) ^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#1255: FILE: fs/spufs/file.c:407:
+#define prob_attr(name) 				\
+static void spufs_ ## name ## _set(void *data, u64 val) \
+{							\
+	struct spu_context *ctx = data; 		\
+	out_be32(&ctx->spu->problem->name, val);	\
+}						 	\
+static u64 spufs_ ## name ## _get(void *data)		\
+{							\
+	struct spu_context *ctx = data;			\
+	return in_be32(&ctx->spu->problem->name);	\
+}							\
+DEFINE_SIMPLE_ATTRIBUTE(spufs_ ## name, 		\
+	spufs_ ## name ## _get, 			\
+	spufs_ ## name ## _set, "%llx\n")

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#1255: FILE: fs/spufs/file.c:407:
+#define prob_attr(name) 				\
+static void spufs_ ## name ## _set(void *data, u64 val) \
+{							\
+	struct spu_context *ctx = data; 		\
+	out_be32(&ctx->spu->problem->name, val);	\
+}						 	\
+static u64 spufs_ ## name ## _get(void *data)		\
+{							\
+	struct spu_context *ctx = data;			\
+	return in_be32(&ctx->spu->problem->name);	\
+}							\
+DEFINE_SIMPLE_ATTRIBUTE(spufs_ ## name, 		\
+	spufs_ ## name ## _get, 			\
+	spufs_ ## name ## _set, "%llx\n")

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1258: FILE: fs/spufs/file.c:410:
+^Istruct spu_context *ctx = data; ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1260: FILE: fs/spufs/file.c:412:
+}^I^I^I^I^I^I ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1266: FILE: fs/spufs/file.c:418:
+DEFINE_SIMPLE_ATTRIBUTE(spufs_ ## name, ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1267: FILE: fs/spufs/file.c:419:
+^Ispufs_ ## name ## _get, ^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1270: FILE: fs/spufs/file.c:422:
+#define priv1_attr(name) ^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#1270: FILE: fs/spufs/file.c:422:
+#define priv1_attr(name) 				\
+static void spufs_ ## name ## _set(void *data, u64 val) \
+{							\
+	struct spu_context *ctx = data; 		\
+	out_be64(&ctx->spu->priv1->name, val);		\
+}						 	\
+static u64 spufs_ ## name ## _get(void *data)		\
+{							\
+	struct spu_context *ctx = data;			\
+	return in_be64(&ctx->spu->priv1->name);		\
+}							\
+DEFINE_SIMPLE_ATTRIBUTE(spufs_ ## name, 		\
+	spufs_ ## name ## _get, 			\
+	spufs_ ## name ## _set, "%llx\n")

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#1270: FILE: fs/spufs/file.c:422:
+#define priv1_attr(name) 				\
+static void spufs_ ## name ## _set(void *data, u64 val) \
+{							\
+	struct spu_context *ctx = data; 		\
+	out_be64(&ctx->spu->priv1->name, val);		\
+}						 	\
+static u64 spufs_ ## name ## _get(void *data)		\
+{							\
+	struct spu_context *ctx = data;			\
+	return in_be64(&ctx->spu->priv1->name);		\
+}							\
+DEFINE_SIMPLE_ATTRIBUTE(spufs_ ## name, 		\
+	spufs_ ## name ## _get, 			\
+	spufs_ ## name ## _set, "%llx\n")

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1273: FILE: fs/spufs/file.c:425:
+^Istruct spu_context *ctx = data; ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1275: FILE: fs/spufs/file.c:427:
+}^I^I^I^I^I^I ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1281: FILE: fs/spufs/file.c:433:
+DEFINE_SIMPLE_ATTRIBUTE(spufs_ ## name, ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1282: FILE: fs/spufs/file.c:434:
+^Ispufs_ ## name ## _get, ^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1285: FILE: fs/spufs/file.c:437:
+#define priv2_attr(name) ^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#1285: FILE: fs/spufs/file.c:437:
+#define priv2_attr(name) 				\
+static void spufs_ ## name ## _set(void *data, u64 val) \
+{							\
+	struct spu_context *ctx = data; 		\
+	out_be64(&ctx->spu->priv2->name, val);		\
+}						 	\
+static u64 spufs_ ## name ## _get(void *data)		\
+{							\
+	struct spu_context *ctx = data;			\
+	return in_be64(&ctx->spu->priv2->name);		\
+}							\
+DEFINE_SIMPLE_ATTRIBUTE(spufs_ ## name, 		\
+	spufs_ ## name ## _get, 			\
+	spufs_ ## name ## _set, "%llx\n")

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#1285: FILE: fs/spufs/file.c:437:
+#define priv2_attr(name) 				\
+static void spufs_ ## name ## _set(void *data, u64 val) \
+{							\
+	struct spu_context *ctx = data; 		\
+	out_be64(&ctx->spu->priv2->name, val);		\
+}						 	\
+static u64 spufs_ ## name ## _get(void *data)		\
+{							\
+	struct spu_context *ctx = data;			\
+	return in_be64(&ctx->spu->priv2->name);		\
+}							\
+DEFINE_SIMPLE_ATTRIBUTE(spufs_ ## name, 		\
+	spufs_ ## name ## _get, 			\
+	spufs_ ## name ## _set, "%llx\n")

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1288: FILE: fs/spufs/file.c:440:
+^Istruct spu_context *ctx = data; ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1290: FILE: fs/spufs/file.c:442:
+}^I^I^I^I^I^I ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1296: FILE: fs/spufs/file.c:448:
+DEFINE_SIMPLE_ATTRIBUTE(spufs_ ## name, ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1297: FILE: fs/spufs/file.c:449:
+^Ispufs_ ## name ## _get, ^I^I^I\$

WARNING:IF_1: Consider removing the #if 1 and its #endif
#1332: FILE: fs/spufs/file.c:484:
+#if 1 /* debugging only */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1359: FILE: fs/spufs/inode.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1377: FILE: fs/spufs/inode.c:19:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1378: FILE: fs/spufs/inode.c:20:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#1390: FILE: fs/spufs/inode.c:32:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1393: FILE: fs/spufs/inode.c:35:
+#include <asm/uaccess.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#1402: FILE: fs/spufs/inode.c:44:
+	struct spu_context *ctx;
+	ctx = kmalloc(sizeof *ctx, GFP_KERNEL);

WARNING:SIZEOF_PARENTHESIS: sizeof *ctx should be sizeof(*ctx)
#1402: FILE: fs/spufs/inode.c:44:
+	ctx = kmalloc(sizeof *ctx, GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1423: FILE: fs/spufs/inode.c:65:
+	struct spu_context *ctx;
+	ctx = container_of(kref, struct spu_context, kref);

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#1458: FILE: fs/spufs/inode.c:100:
+static struct address_space_operations spufs_aops = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1484: FILE: fs/spufs/inode.c:126:
+spufs_init_once(void *p, kmem_cache_t * cachep, unsigned long flags)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1488: FILE: fs/spufs/inode.c:130:
+	if ((flags & (SLAB_CTOR_VERIFY|SLAB_CTOR_CONSTRUCTOR)) ==
 	                              ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1508: FILE: fs/spufs/inode.c:150:
+	inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1519: FILE: fs/spufs/inode.c:161:
+/*	dump_stack();
+	printk("ia_size %lld, i_size:%lld\n", attr->ia_size, inode->i_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1536: FILE: fs/spufs/inode.c:178:
+spufs_fill_dir(struct dentry *dir, struct tree_descr *files,
+		int mode, struct spu_context *ctx)

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1542: FILE: fs/spufs/inode.c:184:
+	static struct inode_operations iops = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1553: FILE: fs/spufs/inode.c:195:
+		inode = spufs_new_inode(dir->d_sb,
+				S_IFREG | (files->mode & mode));

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1607: FILE: fs/spufs/inode.c:249:
+	iput(inode);
 	^^^^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1647: FILE: fs/spufs/inode.c:289:
+static int
+spufs_create_root(struct super_block *sb) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1649: FILE: fs/spufs/inode.c:291:
+	static struct inode_operations spufs_dir_inode_operations = {

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1668: FILE: fs/spufs/inode.c:310:
+			iput(inode);
 			^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1697: FILE: fs/spufs/inode.c:339:
+spufs_get_sb(struct file_system_type *fstype, int flags,
+		const char *name, void *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1712: FILE: fs/spufs/inode.c:354:
+	int ret;
+	ret = -ENOMEM;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1714: FILE: fs/spufs/inode.c:356:
+	spufs_inode_cache = kmem_cache_create("spufs_inode_cache",
+			sizeof(struct spufs_inode_info), 0,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1740: FILE: fs/spufs/spufs.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1758: FILE: fs/spufs/spufs.h:19:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1759: FILE: fs/spufs/spufs.h:20:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1776: FILE: fs/spufs/spufs.h:37:
+^Ispinlock_t mmio_lock; /* protects mmio access */ $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1786: FILE: fs/spufs/spufs.h:47:
+};
+#define SPUFS_I(inode) container_of(inode, struct spufs_inode_info, vfs_inode)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1794: FILE: include/asm-ppc64/spu.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1812: FILE: include/asm-ppc64/spu.h:19:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1813: FILE: include/asm-ppc64/spu.h:20:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1838: FILE: include/asm-ppc64/spu.h:45:
+	spinlock_t register_lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1884: FILE: include/asm-ppc64/spu.h:91:
+^Iu8  pad_0x0000_0x3000[0x3000 - 0x0000]; ^I^I/* 0x0000 */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1901: FILE: include/asm-ppc64/spu.h:108:
+^Iu8  pad_0x3230_0x4000[0x4000 - 0x3230]; ^I^I/* 0x3230 */$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(0x20000) over __attribute__((aligned(0x20000)))
#1933: FILE: include/asm-ppc64/spu.h:140:
+} __attribute__ ((aligned(0x20000)));

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1938: FILE: include/asm-ppc64/spu.h:145:
+^Iu8  pad_0x0000_0x1100[0x1100 - 0x0000]; ^I^I/* 0x0000 */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1960: FILE: include/asm-ppc64/spu.h:167:
+^Iu8  pad_0x1130_0x2000[0x2000 - 0x1130]; ^I^I/* 0x1130 */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1965: FILE: include/asm-ppc64/spu.h:172:
+^Iu8  pad_0x2300_0x3000[0x3000 - 0x2300]; ^I^I/* 0x2300 */$

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#1970: FILE: include/asm-ppc64/spu.h:177:
+#define MFC_CNTL_SUSPEND_DMA_QUEUE		(1ull << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#1971: FILE: include/asm-ppc64/spu.h:178:
+#define MFC_CNTL_SUSPEND_DMA_QUEUE_MASK		(1ull << 0)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#1973: FILE: include/asm-ppc64/spu.h:180:
+#define MFC_CNTL_SUSPEND_IN_PROGRESS		(1ull << 8)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#1976: FILE: include/asm-ppc64/spu.h:183:
+#define MFC_CNTL_DMA_QUEUES_EMPTY		(1ull << 14)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#1977: FILE: include/asm-ppc64/spu.h:184:
+#define MFC_CNTL_DMA_QUEUES_EMPTY_MASK		(1ull << 14)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#1978: FILE: include/asm-ppc64/spu.h:185:
+#define MFC_CNTL_PURGE_DMA_REQUEST		(1ull << 15)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#1979: FILE: include/asm-ppc64/spu.h:186:
+#define MFC_CNTL_PURGE_DMA_IN_PROGRESS		(1ull << 24)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#1982: FILE: include/asm-ppc64/spu.h:189:
+#define MFC_CNTL_RESTART_DMA_COMMAND		(1ull << 32)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#1983: FILE: include/asm-ppc64/spu.h:190:
+#define MFC_CNTL_DMA_COMMAND_REISSUE_PENDING	(1ull << 32)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#1984: FILE: include/asm-ppc64/spu.h:191:
+#define MFC_CNTL_DMA_COMMAND_REISSUE_STATUS_MASK (1ull << 32)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#1988: FILE: include/asm-ppc64/spu.h:195:
+#define MFC_CNTL_DECREMENTER_HALTED		(1ull << 35)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#1989: FILE: include/asm-ppc64/spu.h:196:
+#define MFC_CNTL_DECREMENTER_RUNNING		(1ull << 40)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#1990: FILE: include/asm-ppc64/spu.h:197:
+#define MFC_CNTL_DECREMENTER_STATUS_MASK	(1ull << 40)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1991: FILE: include/asm-ppc64/spu.h:198:
+^Iu8  pad_0x3008_0x4000[0x4000 - 0x3008]; ^I^I/* 0x3008 */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1995: FILE: include/asm-ppc64/spu.h:202:
+^Iu8  pad_0x4008_0x4040[0x4040 - 0x4008]; ^I^I/* 0x4008 */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2013: FILE: include/asm-ppc64/spu.h:220:
+^Iu8  pad_0x4080_0x5000[0x5000 - 0x4080]; ^I^I/* 0x4080 */$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(0x20000) over __attribute__((aligned(0x20000)))
#2028: FILE: include/asm-ppc64/spu.h:235:
+} __attribute__ ((aligned(0x20000)));

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2050: FILE: include/asm-ppc64/spu.h:257:
+#define SPU_GET_VERSION_BITS(vr)	(vr & SPU_VERSION_BITS) >> 16

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'vr' may be better as '(vr)' to avoid precedence issues
#2050: FILE: include/asm-ppc64/spu.h:257:
+#define SPU_GET_VERSION_BITS(vr)	(vr & SPU_VERSION_BITS) >> 16

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'vr' may be better as '(vr)' to avoid precedence issues
#2051: FILE: include/asm-ppc64/spu.h:258:
+#define SPU_GET_REVISION_BITS(vr)	(vr & SPU_REVISION_BITS)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2054: FILE: include/asm-ppc64/spu.h:261:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <resource_allocation_groupID_RW>
#2085: FILE: include/asm-ppc64/spu.h:292:
+	u64 resource_allocation_groupID_RW;			/* 0x280 */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2086: FILE: include/asm-ppc64/spu.h:293:
+^Iu64 resource_allocation_enable_RW; ^I^I^I/* 0x288 */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2090: FILE: include/asm-ppc64/spu.h:297:
+^I/* mfc_fir_R:^I^I^IMFC Fault Isolation Register. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2091: FILE: include/asm-ppc64/spu.h:298:
+^I * mfc_fir_status_or_W:^I^IMFC Fault Isolation Status OR Register. $

CHECK:BIT_MACRO: Prefer using the BIT macro
#2145: FILE: include/asm-ppc64/spu.h:352:
+#define MFC_ACCR_EA_ACCESS_GET		(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2146: FILE: include/asm-ppc64/spu.h:353:
+#define MFC_ACCR_EA_ACCESS_PUT		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2147: FILE: include/asm-ppc64/spu.h:354:
+#define MFC_ACCR_LS_ACCESS_GET		(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2148: FILE: include/asm-ppc64/spu.h:355:
+#define MFC_ACCR_LS_ACCESS_PUT		(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2151: FILE: include/asm-ppc64/spu.h:358:
+#define MFC_DSISR_PTE_NOT_FOUND		(1 << 30)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2152: FILE: include/asm-ppc64/spu.h:359:
+#define MFC_DSISR_ACCESS_DENIED		(1 << 27)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2153: FILE: include/asm-ppc64/spu.h:360:
+#define MFC_DSISR_ATOMIC		(1 << 26)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2154: FILE: include/asm-ppc64/spu.h:361:
+#define MFC_DSISR_ACCESS_PUT		(1 << 25)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2155: FILE: include/asm-ppc64/spu.h:362:
+#define MFC_DSISR_ADDR_MATCH		(1 << 22)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2156: FILE: include/asm-ppc64/spu.h:363:
+#define MFC_DSISR_LS			(1 << 17)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2157: FILE: include/asm-ppc64/spu.h:364:
+#define MFC_DSISR_L			(1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2158: FILE: include/asm-ppc64/spu.h:365:
+#define MFC_DSISR_ADDRESS_OVERFLOW	(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2171: FILE: include/asm-ppc64/spu.h:378:
+#define MFC_DSIR_Q			(1 << 31)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2177: FILE: include/asm-ppc64/spu.h:384:
+#define MFC_LSCRR_Q			(1 << 31)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2206: FILE: include/asm-ppc64/spu.h:413:
+#define MFC_CER_Q		(1 << 31)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#2213: FILE: include/asm-ppc64/spu.h:420:
+#define SPU_ECC_CNTL_E			(1ull << 0ull)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#2216: FILE: include/asm-ppc64/spu.h:423:
+#define SPU_ECC_CNTL_S			(1ull << 1ull)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#2219: FILE: include/asm-ppc64/spu.h:426:
+#define SPU_ECC_CNTL_B			(1ull << 2ull)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#2225: FILE: include/asm-ppc64/spu.h:432:
+#define SPU_ECC_WRITE_CORRECTABLE	(1ull << SPU_ECC_CNTL_I_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#2227: FILE: include/asm-ppc64/spu.h:434:
+#define SPU_ECC_CNTL_D			(1ull << 5ull)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#2231: FILE: include/asm-ppc64/spu.h:438:
+#define SPU_ECC_CORRECTED_ERROR		(1ull << 0ul)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#2232: FILE: include/asm-ppc64/spu.h:439:
+#define SPU_ECC_UNCORRECTED_ERROR	(1ull << 1ul)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#2233: FILE: include/asm-ppc64/spu.h:440:
+#define SPU_ECC_SCRUB_COMPLETE		(1ull << 2ul)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#2234: FILE: include/asm-ppc64/spu.h:441:
+#define SPU_ECC_SCRUB_IN_PROGRESS	(1ull << 3ul)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#2235: FILE: include/asm-ppc64/spu.h:442:
+#define SPU_ECC_INSTRUCTION_ERROR	(1ull << 4ul)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#2236: FILE: include/asm-ppc64/spu.h:443:
+#define SPU_ECC_DATA_ERROR		(1ull << 5ul)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#2237: FILE: include/asm-ppc64/spu.h:444:
+#define SPU_ECC_DMA_ERROR		(1ull << 6ul)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#2241: FILE: include/asm-ppc64/spu.h:448:
+#define SPU_ERR_ILLEGAL_INSTR		(1ull << 0ul)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#2242: FILE: include/asm-ppc64/spu.h:449:
+#define SPU_ERR_ILLEGAL_CHANNEL		(1ull << 1ul)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(0x2000) over __attribute__((aligned(0x2000)))
#2259: FILE: include/asm-ppc64/spu.h:466:
+} __attribute__ ((aligned(0x2000)));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000174399.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 53 errors, 126 warnings, 97 checks, 2125 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000174399.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
