ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#61: FILE: fs/sysfs/dir.c:34:
+static struct sysfs_dirent * sysfs_new_dirent(struct sysfs_dir * parent_sd,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#61: FILE: fs/sysfs/dir.c:34:
+static struct sysfs_dirent * sysfs_new_dirent(struct sysfs_dir * parent_sd,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#62: FILE: fs/sysfs/dir.c:35:
+					      void * element, int type)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#70: FILE: fs/sysfs/dir.c:40:
+		struct sysfs_dir * sdir;

WARNING:LINE_SPACING: Missing a blank line after declarations
#71: FILE: fs/sysfs/dir.c:41:
+		struct sysfs_dir * sdir;
+		sdir = kmem_cache_alloc(sysfs_dir_cachep, GFP_KERNEL);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#92: FILE: fs/sysfs/dir.c:60:
+int sysfs_make_dirent(struct sysfs_dir * parent_sd, struct dentry * dentry,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#92: FILE: fs/sysfs/dir.c:60:
+int sysfs_make_dirent(struct sysfs_dir * parent_sd, struct dentry * dentry,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#93: FILE: fs/sysfs/dir.c:61:
+int sysfs_make_dirent(struct sysfs_dir * parent_sd, struct dentry * dentry,
 			void * element, umode_t mode, int type)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#137: FILE: fs/sysfs/dir.c:137:
+	return create_dir((void*)grp, k->dentry, grp->name, d,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#151: FILE: fs/sysfs/dir.c:219:
+	struct sysfs_dir * parent_sd = dentry_to_sysfs_dir(dentry->d_parent);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#164: FILE: fs/sysfs/dir.c:283:
+	struct sysfs_dir * parent_sd;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#175: FILE: fs/sysfs/dir.c:292:
+	list_for_each_entry_safe(sd,tmp,&parent_sd->s_children,s_sibling) {
 	                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#175: FILE: fs/sysfs/dir.c:292:
+	list_for_each_entry_safe(sd,tmp,&parent_sd->s_children,s_sibling) {
 	                               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#175: FILE: fs/sysfs/dir.c:292:
+	list_for_each_entry_safe(sd,tmp,&parent_sd->s_children,s_sibling) {
 	                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#175: FILE: fs/sysfs/dir.c:292:
+	list_for_each_entry_safe(sd,tmp,&parent_sd->s_children,s_sibling) {
 	                                                      ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#188: FILE: fs/sysfs/dir.c:347:
+	struct sysfs_dir * parent_sd = dentry_to_sysfs_dir(dentry);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#204: FILE: fs/sysfs/dir.c:366:
+	BUG_ON(cursor->s_dentry != NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cursor->s_dentry"
#204: FILE: fs/sysfs/dir.c:366:
+	BUG_ON(cursor->s_dentry != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#219: FILE: fs/sysfs/dir.c:381:
+	struct sysfs_dir * parent_sd = dentry_to_sysfs_dir(dentry);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#260: FILE: fs/sysfs/file.c:360:
+	struct sysfs_dir * parent_sd = dentry_to_sysfs_dir(dir);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#276: FILE: fs/sysfs/inode.c:151:
+	struct sysfs_dir * parent_sd = dentry_to_sysfs_dir(dir);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#336: FILE: fs/sysfs/mount.c:86:
+	sysfs_dir_cachep = kmem_cache_create("sysfs_dir",
+					      sizeof(struct sysfs_dir),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#342: FILE: fs/sysfs/mount.c:92:
+	sysfs_dirent_cachep = kmem_cache_create("sysfs_dirent",
+					      sizeof(struct sysfs_dirent),

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#373: FILE: fs/sysfs/symlink.c:48:
+	struct sysfs_dir * parent_sd = dentry_to_sysfs_dir(parent);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#418: FILE: fs/sysfs/sysfs.h:33:
+extern int sysfs_make_dirent(struct sysfs_dir *, struct dentry *, void *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysfs_dir *' should also have an identifier name
#418: FILE: fs/sysfs/sysfs.h:33:
+extern int sysfs_make_dirent(struct sysfs_dir *, struct dentry *, void *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#418: FILE: fs/sysfs/sysfs.h:33:
+extern int sysfs_make_dirent(struct sysfs_dir *, struct dentry *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#418: FILE: fs/sysfs/sysfs.h:33:
+extern int sysfs_make_dirent(struct sysfs_dir *, struct dentry *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'umode_t' should also have an identifier name
#418: FILE: fs/sysfs/sysfs.h:33:
+extern int sysfs_make_dirent(struct sysfs_dir *, struct dentry *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#418: FILE: fs/sysfs/sysfs.h:33:
+extern int sysfs_make_dirent(struct sysfs_dir *, struct dentry *, void *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#419: FILE: fs/sysfs/sysfs.h:34:
+extern int sysfs_make_dirent(struct sysfs_dir *, struct dentry *, void *,
 				umode_t, int);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#437: FILE: fs/sysfs/sysfs.h:66:
+static inline struct sysfs_dir * to_sysfs_dir(struct sysfs_dirent *ent)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#439: FILE: fs/sysfs/sysfs.h:68:
+	BUG_ON(!sysfs_type_dir(ent->s_type));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#443: FILE: fs/sysfs/sysfs.h:72:
+static inline struct sysfs_dir *dentry_to_sysfs_dir(struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#445: FILE: fs/sysfs/sysfs.h:74:
+	struct sysfs_dirent * sd = dentry->d_fsdata;

WARNING:LINE_SPACING: Missing a blank line after declarations
#446: FILE: fs/sysfs/sysfs.h:75:
+	struct sysfs_dirent * sd = dentry->d_fsdata;
+	return to_sysfs_dir(sd);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000225715.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 9 warnings, 6 checks, 382 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000225715.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
