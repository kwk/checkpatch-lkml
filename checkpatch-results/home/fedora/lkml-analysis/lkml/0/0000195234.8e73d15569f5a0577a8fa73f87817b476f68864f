ERROR:SPACING: space required after that ',' (ctx:VxV)
#41: FILE: fs/isofs/rock.c:29:
+#define SIG(A,B) ((A) | ((B) << 8))	/* isonum_721() */
              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#110: FILE: fs/isofs/rock.c:98:
+	unsigned char *chr;
+	CONTINUE_DECLS;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#125: FILE: fs/isofs/rock.c:106:
+      repeat:

WARNING:BRACES: braces {} are not necessary for single statement blocks
#163: FILE: fs/isofs/rock.c:144:
+				if (rr->u.NM.flags & 6) {
+					break;
+				}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#182: FILE: fs/isofs/rock.c:163:
+				if (buffer)
+					kfree(buffer);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#208: FILE: fs/isofs/rock.c:172:
+	if (buffer)
+		kfree(buffer);

WARNING:INDENTED_LABEL: labels should not be indented
#210: FILE: fs/isofs/rock.c:174:
+      out:

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#212: FILE: fs/isofs/rock.c:176:
+	if (buffer)
+		kfree(buffer);

WARNING:LINE_SPACING: Missing a blank line after declarations
#254: FILE: fs/isofs/rock.c:187:
+	int symlink_len = 0;
+	CONTINUE_DECLS;

WARNING:INDENTED_LABEL: labels should not be indented
#267: FILE: fs/isofs/rock.c:200:
+      repeat:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#428: FILE: fs/isofs/rock.c:233:
+				printk(KERN_DEBUG "ISO 9660 Extensions: ");

WARNING:LINE_SPACING: Missing a blank line after declarations
#431: FILE: fs/isofs/rock.c:236:
+					int p;
+					for (p = 0; p < rr->u.ER.len_id; p++)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#432: FILE: fs/isofs/rock.c:237:
+						printk("%c", rr->u.ER.data[p]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#434: FILE: fs/isofs/rock.c:239:
+				printk("\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#445: FILE: fs/isofs/rock.c:250:
+					int high, low;
+					high = isonum_733(rr->u.PN.dev_high);

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#448: FILE: fs/isofs/rock.c:253:
+					 * The Rock Ridge standard specifies that if sizeof(dev_t) <= 4,

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 109 exceeds 100 columns
#449: FILE: fs/isofs/rock.c:254:
+					 * then the high field is unused, and the device number is completely

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#450: FILE: fs/isofs/rock.c:255:
+					 * stored in the low field.  Some writers may ignore this subtlety,

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#451: FILE: fs/isofs/rock.c:256:
+					 * and as a result we test to see if the entire device number is

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#465: FILE: fs/isofs/rock.c:270:
+				/* Some RRIP writers incorrectly place ctime in the TF_CREATE field.
+				   Try to handle this correctly for either case. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#465: FILE: fs/isofs/rock.c:270:
+				   Try to handle this correctly for either case. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#497: FILE: fs/isofs/rock.c:302:
+					struct SL_component *oldslp;
+					slen = rr->len - 5;

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#502: FILE: fs/isofs/rock.c:307:
+						switch (slp->flags & ~1) {

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:LONG_LINE_STRING: line length of 105 exceeds 100 columns
#519: FILE: fs/isofs/rock.c:324:
+							    ("Symlink component flag not implemented\n");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#528: FILE: fs/isofs/rock.c:333:
+						if (slen < 2) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#529: FILE: fs/isofs/rock.c:334:
+							if (((rr->u.SL.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'rr->u.SL.flags'
#530: FILE: fs/isofs/rock.c:335:
+							if (((rr->u.SL.
+							      flags & 1) != 0)

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#531: FILE: fs/isofs/rock.c:336:
+							      flags & 1) != 0)
+							    &&

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'oldslp->flags'
#533: FILE: fs/isofs/rock.c:338:
+							    ((oldslp->
+							      flags & 1) == 0))

WARNING:LONG_LINE_COMMENT: line length of 111 exceeds 100 columns
#540: FILE: fs/isofs/rock.c:345:
+						 * If this component record isn't continued, then append a '/'.

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#542: FILE: fs/isofs/rock.c:347:
+						if (!rootflag

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#543: FILE: fs/isofs/rock.c:348:
+						if (!rootflag
+						    && (oldslp->flags & 1) == 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#550: FILE: fs/isofs/rock.c:355:
+				printk(KERN_WARNING

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#572: FILE: fs/isofs/rock.c:377:
+				iput(reloc);
 				^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#600: FILE: fs/isofs/rock.c:383:
+					int algo;
+					algo = isonum_721(rr->u.ZF.algorithm);

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#604: FILE: fs/isofs/rock.c:387:
+							       parms[1]);
 							       ^^^^^

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'rr->u.ZF.parms[1]'
#604: FILE: fs/isofs/rock.c:387:
+						    isonum_711(&rr->u.ZF.
+							       parms[1]);

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#605: FILE: fs/isofs/rock.c:388:
+						if (block_shift <

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#607: FILE: fs/isofs/rock.c:390:
+						    PAGE_CACHE_SHIFT
+						    || block_shift > 17) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#608: FILE: fs/isofs/rock.c:391:
+							printk(KERN_WARNING

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#611: FILE: fs/isofs/rock.c:394:
+						} else {

WARNING:LONG_LINE_COMMENT: line length of 123 exceeds 100 columns
#616: FILE: fs/isofs/rock.c:399:
+							/* Parameters to compression algorithm (header size, block size) */

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'rr->u.ZF'
#620: FILE: fs/isofs/rock.c:403:
+							    isonum_711(&rr->u.
+								       ZF.

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#621: FILE: fs/isofs/rock.c:404:
+								       parms
 								       ^^^^^

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'ZF.parms'
#621: FILE: fs/isofs/rock.c:404:
+								       ZF.
+								       parms

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'rr->u.ZF'
#626: FILE: fs/isofs/rock.c:409:
+							    isonum_711(&rr->u.
+								       ZF.

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#627: FILE: fs/isofs/rock.c:410:
+								       parms
 								       ^^^^^

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'ZF.parms'
#627: FILE: fs/isofs/rock.c:410:
+								       ZF.
+								       parms

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'rr->u.ZF.real_size'
#631: FILE: fs/isofs/rock.c:414:
+							    isonum_733(rr->u.ZF.
+								       real_size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#634: FILE: fs/isofs/rock.c:417:
+						printk(KERN_WARNING

WARNING:INDENTED_LABEL: labels should not be indented
#657: FILE: fs/isofs/rock.c:431:
+      out:

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#659: FILE: fs/isofs/rock.c:433:
+	if (buffer)
+		kfree(buffer);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#739: FILE: fs/isofs/rock.c:509:
+	 * behind eventual XA attributes, have a look there */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#741: FILE: fs/isofs/rock.c:511:
+	if ((ISOFS_SB(inode->i_sb)->s_rock_offset == -1)
+	    && (ISOFS_SB(inode->i_sb)->s_rock == 2)) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000195234.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 49 warnings, 4 checks, 744 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000195234.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
