WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#52: FILE: net/irda/irttp.c:97:
+		ERROR("%s: can't allocate IrTTP hashbin!\n", __FUNCTION__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#148: FILE: net/irda/irttp.c:239:
+	ASSERT(self != NULL, return NULL;);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#152: FILE: net/irda/irttp.c:242:
+	IRDA_DEBUG(2, __FUNCTION__ "(), self->rx_sdu_size=%d\n",

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#162: FILE: net/irda/irttp.c:250:
+	/*
+	 * Need to reserve space for TTP header in case this skb needs to

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#232: FILE: net/irda/irttp.c:424:
+		WARNING("%s: unable to allocate LSAP!!\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#254: FILE: net/irda/irttp.c:500:
+			WARNING("%s: TSAP still connected!\n", __FUNCTION__);

WARNING:TYPO_SPELLING: 'fragement' may be misspelled - perhaps 'fragment'?
#296: FILE: net/irda/irttp.c:558:
+ *    Queue frame for transmission. If SAR is enabled, fragement the frame
                                                        ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#309: FILE: net/irda/irttp.c:574:
+		WARNING("%s: No data, or not connected\n", __FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#322: FILE: net/irda/irttp.c:584:
+		ERROR("%s: SAR disabled, and data is to large for IrLAP!\n",
+				__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#322: FILE: net/irda/irttp.c:584:
+				__FUNCTION__);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#330: FILE: net/irda/irttp.c:589:
+	/*
+	 *  Check if SAR is enabled, and the frame is larger than the

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'self->tx_max_sdu_size != 0'
#335: FILE: net/irda/irttp.c:592:
+	if ((self->tx_max_sdu_size != 0) &&
+	    (self->tx_max_sdu_size != TTP_SAR_UNBOUND) &&
 	    (skb->len > self->tx_max_sdu_size))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'self->tx_max_sdu_size != TTP_SAR_UNBOUND'
#335: FILE: net/irda/irttp.c:592:
+	if ((self->tx_max_sdu_size != 0) &&
+	    (self->tx_max_sdu_size != TTP_SAR_UNBOUND) &&
 	    (skb->len > self->tx_max_sdu_size))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'skb->len > self->tx_max_sdu_size'
#335: FILE: net/irda/irttp.c:592:
+	if ((self->tx_max_sdu_size != 0) &&
+	    (self->tx_max_sdu_size != TTP_SAR_UNBOUND) &&
 	    (skb->len > self->tx_max_sdu_size))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#342: FILE: net/irda/irttp.c:597:
+		      __FUNCTION__);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!self->tx_sdu_busy'
#372: FILE: net/irda/irttp.c:633:
+	if ((!self->tx_sdu_busy) &&
 	    (skb_queue_len(&self->tx_queue) > TTP_TX_HIGH_THRESHOLD)) {

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#424: FILE: net/irda/irttp.c:703:
+		/*
+		 *  More bit must be set by the data_request() or fragment()

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'self->tx_sdu_busy'
#446: FILE: net/irda/irttp.c:743:
+	if ((self->tx_sdu_busy) &&
 	    (skb_queue_len(&self->tx_queue) < TTP_TX_LOW_THRESHOLD) &&
 	    (!self->close_pend))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!self->close_pend'
#446: FILE: net/irda/irttp.c:743:
+	if ((self->tx_sdu_busy) &&
 	    (skb_queue_len(&self->tx_queue) < TTP_TX_LOW_THRESHOLD) &&
 	    (!self->close_pend))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#466: FILE: net/irda/irttp.c:776:
+	IRDA_DEBUG(4, __FUNCTION__ "() send=%d,avail=%d,remote=%d\n",

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#538: FILE: net/irda/irttp.c:874:
+	/*
+	 *  Data or dataless packet? Dataless frames contains only the

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#633: FILE: net/irda/irttp.c:1045:
+	IRDA_DEBUG(4, __FUNCTION__ "(), max_sdu_size=%d\n", max_sdu_size);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#657: FILE: net/irda/irttp.c:1064:
+		/*
+		 *  Check that the client has reserved enough space for

CHECK:SPACING: No space is necessary after a cast
#689: FILE: net/irda/irttp.c:1106:
+		put_unaligned(cpu_to_be16((__u16) max_sdu_size),

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'Sevice' may be misspelled - perhaps 'Service'?
#710: FILE: net/irda/irttp.c:1124:
+ *    Sevice user confirms TSAP connection with peer.
       ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#738: FILE: net/irda/irttp.c:1154:
+		IRDA_DEBUG(4, "IrTTP, Negotiated BAUD_RATE: %02x\n",
+		       qos->baud_rate.bits);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#740: FILE: net/irda/irttp.c:1156:
+		IRDA_DEBUG(4, "IrTTP, Negotiated BAUD_RATE: %d bps.\n",
 		       qos->baud_rate.value);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#763: FILE: net/irda/irttp.c:1176:
+					     IRDA_MIN(skb->len-1, plen),
 					                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#771: FILE: net/irda/irttp.c:1182:
+			WARNING("%s: error extracting parameters\n",
+					__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#771: FILE: net/irda/irttp.c:1182:
+					__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#782: FILE: net/irda/irttp.c:1192:
+	IRDA_DEBUG(4, __FUNCTION__ "() send=%d,avail=%d,remote=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#783: FILE: net/irda/irttp.c:1193:
+	IRDA_DEBUG(4, __FUNCTION__ "() send=%d,avail=%d,remote=%d\n",
 	      self->send_credit, self->avail_credit, self->remote_credit);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "skb"
#802: FILE: net/irda/irttp.c:1225:
+	ASSERT(skb != NULL, return;);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#823: FILE: net/irda/irttp.c:1251:
+					     IRDA_MIN(skb->len-1, plen),
 					                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#831: FILE: net/irda/irttp.c:1257:
+			WARNING("%s: error extracting parameters\n",
+					__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#831: FILE: net/irda/irttp.c:1257:
+					__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#866: FILE: net/irda/irttp.c:1294:
+	IRDA_DEBUG(4, __FUNCTION__ "(), Source TSAP selector=%02x\n",

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#880: FILE: net/irda/irttp.c:1308:
+		/*
+		 *  Check that the client has reserved enough space for

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#895: FILE: net/irda/irttp.c:1333:
+		ASSERT(skb_headroom(skb) >= (TTP_MAX_HEADER+TTP_SAR_HEADER),
 		                                           ^

CHECK:SPACING: No space is necessary after a cast
#915: FILE: net/irda/irttp.c:1348:
+		put_unaligned(cpu_to_be16((__u16) max_sdu_size),

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#959: FILE: net/irda/irttp.c:1445:
+			/*
+			 *  No need to send the queued data, if we are

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#980: FILE: net/irda/irttp.c:1479:
+		/*
+		 *  Reserve space for MUX and LAP header

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1048: FILE: net/irda/irttp.c:1589:
+	IRDA_DEBUG(2, __FUNCTION__ "() send=%d,avail=%d,remote=%d\n",

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1075: FILE: net/irda/irttp.c:1625:
+			/*
+			 *  Queue the fragment if we still are within the

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1149: FILE: net/irda/irttp.c:1738:
+		len += sprintf(buf+len, "stsap_sel: %02x, ",
 		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1152: FILE: net/irda/irttp.c:1740:
+		len += sprintf(buf+len, "dtsap_sel: %02x\n",
 		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1161: FILE: net/irda/irttp.c:1754:
+		len += sprintf(buf+len, "tx_queue len: %d ",
 		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1164: FILE: net/irda/irttp.c:1756:
+		len += sprintf(buf+len, "rx_queue len: %d\n",
 		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1173: FILE: net/irda/irttp.c:1769:
+		len += sprintf(buf+len, "  Used by (%s)\n",
 		                  ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000451065.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 25 warnings, 24 checks, 1068 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000451065.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
