WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
 tiny-mpm/mm/tiny-shmem.c    |  128 ++++++++++++++++++++++++++++++++++++++++++++

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#73: FILE: mm/tiny-shmem.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#96: FILE: mm/tiny-shmem.c:24:
+extern struct super_block *ramfs_get_sb(struct file_system_type *fs_type,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#97: FILE: mm/tiny-shmem.c:25:
+extern struct super_block *ramfs_get_sb(struct file_system_type *fs_type,
+	 int flags, const char *dev_name, void *data);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#98: FILE: mm/tiny-shmem.c:26:
+extern struct file_operations ramfs_file_operations;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#98: FILE: mm/tiny-shmem.c:26:
+extern struct file_operations ramfs_file_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#99: FILE: mm/tiny-shmem.c:27:
+extern struct vm_operations_struct generic_file_vm_ops;

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#99: FILE: mm/tiny-shmem.c:27:
+extern struct vm_operations_struct generic_file_vm_ops;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#153: FILE: mm/tiny-shmem.c:81:
+	inode = ramfs_get_inode(root->d_sb, S_IFREG | S_IRWXUGO, 0);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#200: FILE: mm/tiny-shmem.c:128:
+EXPORT_SYMBOL(shmem_file_setup);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#210: FILE: mm/filemap.c:1413:
+struct vm_operations_struct generic_file_vm_ops = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#238: FILE: include/linux/mm.h:507:
+struct file *shmem_file_setup(char * name, loff_t size, unsigned long flags);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#252: FILE: fs/ramfs/inode.c:42:
+extern struct file_operations ramfs_file_operations;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#252: FILE: fs/ramfs/inode.c:42:
+extern struct file_operations ramfs_file_operations;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#270: FILE: fs/ramfs/inode.c:149:
+struct file_operations ramfs_file_operations = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#280: FILE: fs/ramfs/inode.c:203:
+struct super_block *ramfs_get_sb(struct file_system_type *fs_type,
 	int flags, const char *dev_name, void *data)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000262379.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 13 warnings, 2 checks, 228 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000262379.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
