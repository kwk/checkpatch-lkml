WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
   *create_statctr_proc_entry(struct proc_dir_entry *parent, const char *name); 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#68: FILE: fs/proc/proc_misc.c:67:
+int proc_calc_metrics(char *page, char **start, off_t off,
 				 int count, int *eof, int len)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#97: FILE: include/linux/proc_fs.h:104:
+extern int proc_calc_metrics(char *, char **, off_t, int, int *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#97: FILE: include/linux/proc_fs.h:104:
+extern int proc_calc_metrics(char *, char **, off_t, int, int *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char **' should also have an identifier name
#97: FILE: include/linux/proc_fs.h:104:
+extern int proc_calc_metrics(char *, char **, off_t, int, int *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'off_t' should also have an identifier name
#97: FILE: include/linux/proc_fs.h:104:
+extern int proc_calc_metrics(char *, char **, off_t, int, int *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#97: FILE: include/linux/proc_fs.h:104:
+extern int proc_calc_metrics(char *, char **, off_t, int, int *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#97: FILE: include/linux/proc_fs.h:104:
+extern int proc_calc_metrics(char *, char **, off_t, int, int *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#97: FILE: include/linux/proc_fs.h:104:
+extern int proc_calc_metrics(char *, char **, off_t, int, int *, int);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#105: FILE: include/linux/statctr.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#109: FILE: include/linux/statctr.h:5:
+ *  Scalable Statistic Counters $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#124: FILE: include/linux/statctr.h:20:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#125: FILE: include/linux/statctr.h:21:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#129: FILE: include/linux/statctr.h:25:
+ * include/linux/statctr.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: include/linux/statctr.h:31:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: include/linux/statctr.h:31:
+ $

ERROR:SPACING: exactly one space required after that #ifdef
#136: FILE: include/linux/statctr.h:32:
+#ifdef  __KERNEL__

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#144: FILE: include/linux/statctr.h:40:
+^Istruct proc_dir_entry ^I*parent;$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#149: FILE: include/linux/statctr.h:45:
+typedef struct {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#151: FILE: include/linux/statctr.h:47:
+^Iunsigned long ^I^I*ctr;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#153: FILE: include/linux/statctr.h:49:
+^Iunsigned long ^I^Ictr;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#156: FILE: include/linux/statctr.h:52:
+^Ichar ^I^I^I*name;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#162: FILE: include/linux/statctr.h:58:
+extern int statctr_init(statctr_t *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'statctr_t *' should also have an identifier name
#162: FILE: include/linux/statctr.h:58:
+extern int statctr_init(statctr_t *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#162: FILE: include/linux/statctr.h:58:
+extern int statctr_init(statctr_t *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statctr_proc_entry *' should also have an identifier name
#162: FILE: include/linux/statctr.h:58:
+extern int statctr_init(statctr_t *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#162: FILE: include/linux/statctr.h:58:
+extern int statctr_init(statctr_t *, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#162: FILE: include/linux/statctr.h:58:
+extern int statctr_init(statctr_t *, unsigned long,

ERROR:SPACING: space required after that ',' (ctx:OxV)
#163: FILE: include/linux/statctr.h:59:
+			struct statctr_proc_entry *, const char *,int);
 			                                         ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#164: FILE: include/linux/statctr.h:60:
+extern void statctr_cleanup(statctr_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'statctr_t *' should also have an identifier name
#164: FILE: include/linux/statctr.h:60:
+extern void statctr_cleanup(statctr_t *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#168: FILE: include/linux/statctr.h:64:
+extern struct statctr_proc_entry $

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct proc_dir_entry *' should also have an identifier name
#168: FILE: include/linux/statctr.h:64:
+extern struct statctr_proc_entry 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#168: FILE: include/linux/statctr.h:64:
+extern struct statctr_proc_entry 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#170: FILE: include/linux/statctr.h:66:
+extern void free_statctr_proc_entry(struct statctr_proc_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statctr_proc_entry *' should also have an identifier name
#170: FILE: include/linux/statctr.h:66:
+extern void free_statctr_proc_entry(struct statctr_proc_entry *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#172: FILE: include/linux/statctr.h:68:
+static inline struct statctr_proc_entry $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#173: FILE: include/linux/statctr.h:69:
+*create_statctr_proc_entry(struct proc_dir_entry *parent, const char *name) $

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#175: FILE: include/linux/statctr.h:71:
+	return(NULL);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#177: FILE: include/linux/statctr.h:73:
+}
+static inline void free_statctr_proc_entry(struct statctr_proc_entry *pentry)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#178: FILE: include/linux/statctr.h:74:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#179: FILE: include/linux/statctr.h:75:
+} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#182: FILE: include/linux/statctr.h:78:
+#ifdef^ICONFIG_SMP $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#186: FILE: include/linux/statctr.h:82:
+^Istctr->ctr = kmalloc_percpu(sizeof(*(stctr->ctr)), flags); $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around stctr->ctr
#186: FILE: include/linux/statctr.h:82:
+	stctr->ctr = kmalloc_percpu(sizeof(*(stctr->ctr)), flags); 

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_WHITESPACE: trailing whitespace
#187: FILE: include/linux/statctr.h:83:
+^Iif(!stctr->ctr) $

ERROR:SPACING: space required before the open parenthesis '('
#187: FILE: include/linux/statctr.h:83:
+	if(!stctr->ctr) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#197: FILE: include/linux/statctr.h:93:
+/** $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#199: FILE: include/linux/statctr.h:95:
+ * @stctr: Statistics counter $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#201: FILE: include/linux/statctr.h:97:
+ * Increments the counter by one.  Internally only the per-cpu counter is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: include/linux/statctr.h:113:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: include/linux/statctr.h:113:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#228: FILE: include/linux/statctr.h:124:
+ * Sets the statistics counter. If statctr_read() is invoked after a counter $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#231: FILE: include/linux/statctr.h:127:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: include/linux/statctr.h:127:
+ $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#236: FILE: include/linux/statctr.h:132:
+	for (i=0; i < NR_CPUS; i++) {
 	      ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#236: FILE: include/linux/statctr.h:132:
+	for (i=0; i < NR_CPUS; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#237: FILE: include/linux/statctr.h:133:
+		if(cpu_possible(i))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#250: FILE: include/linux/statctr.h:146:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: include/linux/statctr.h:146:
+ $

WARNING:LINE_SPACING: Missing a blank line after declarations
#255: FILE: include/linux/statctr.h:151:
+	unsigned long res = 0;
+	for( i=0; i < NR_CPUS; i++ )

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#255: FILE: include/linux/statctr.h:151:
+	for( i=0; i < NR_CPUS; i++ )
 	      ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#255: FILE: include/linux/statctr.h:151:
+	for( i=0; i < NR_CPUS; i++ )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#255: FILE: include/linux/statctr.h:151:
+	for( i=0; i < NR_CPUS; i++ )

ERROR:SPACING: space required before the open parenthesis '('
#255: FILE: include/linux/statctr.h:151:
+	for( i=0; i < NR_CPUS; i++ )

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#255: FILE: include/linux/statctr.h:151:
+	for( i=0; i < NR_CPUS; i++ )

ERROR:SPACING: space required before the open parenthesis '('
#256: FILE: include/linux/statctr.h:152:
+		if(cpu_possible(i))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#265: FILE: include/linux/statctr.h:161:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: include/linux/statctr.h:161:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#275: FILE: include/linux/statctr.h:171:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: include/linux/statctr.h:171:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#287: FILE: include/linux/statctr.h:183:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: include/linux/statctr.h:183:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#290: FILE: include/linux/statctr.h:186:
+        *this_cpu_ptr(stctr->ctr) += val;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: include/linux/statctr.h:186:
+        *this_cpu_ptr(stctr->ctr) += val;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#299: FILE: include/linux/statctr.h:195:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: include/linux/statctr.h:195:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#302: FILE: include/linux/statctr.h:198:
+        *this_cpu_ptr(stctr->ctr) -= val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#302: FILE: include/linux/statctr.h:198:
+        *this_cpu_ptr(stctr->ctr) -= val;$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#326: FILE: include/linux/statctr.h:222:
+	return(stctr->ctr);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#331: FILE: include/linux/statctr.h:227:
+	return(stctr->ctr);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#336: FILE: include/linux/statctr.h:232:
+	return(stctr->ctr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#339: FILE: include/linux/statctr.h:235:
+static inline void statctr_set(statctr_t *stctr, unsigned long val) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#344: FILE: include/linux/statctr.h:240:
+static inline void statctr_add(statctr_t *stctr, unsigned long val) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#357: FILE: include/linux/statctr.h:253:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#357: FILE: include/linux/statctr.h:253:
+ $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#381: FILE: kernel/statctr.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#386: FILE: kernel/statctr.c:6:
+ *  $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#400: FILE: kernel/statctr.c:20:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#401: FILE: kernel/statctr.c:21:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#405: FILE: kernel/statctr.c:25:
+ * kernel/statctr.c

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#415: FILE: kernel/statctr.c:35:
+static int read_statctr_proc_entry(char *page, char **start,
+			     off_t off, int count, int *eof, void *data)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#420: FILE: kernel/statctr.c:40:
+^Istruct statctr_proc_entry *pentry = $

CHECK:SPACING: No space is necessary after a cast
#421: FILE: kernel/statctr.c:41:
+					   (struct statctr_proc_entry *) data;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#422: FILE: kernel/statctr.c:42:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#426: FILE: kernel/statctr.c:46:
+		statctr_t *stctr;
+		stctr = list_entry(tmp, statctr_t, pentrylist);

ERROR:SPACING: space required before the open parenthesis '('
#427: FILE: kernel/statctr.c:47:
+		if(!stctr->name) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#427: FILE: kernel/statctr.c:47:
+		if(!stctr->name) {
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#430: FILE: kernel/statctr.c:50:
+		}
+		else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#430: FILE: kernel/statctr.c:50:
+		else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#433: FILE: kernel/statctr.c:53:
+^I^Ilen += sprintf(page+len, $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#433: FILE: kernel/statctr.c:53:
+		len += sprintf(page+len, 
 		                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#441: FILE: kernel/statctr.c:61:
+ * create_statctr_proc_entry - Creates and sets up a "statctr proc entry" $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#443: FILE: kernel/statctr.c:63:
+ *^I      NULL is ok; but procname will be created under $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#446: FILE: kernel/statctr.c:66:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#451: FILE: kernel/statctr.c:71:
+struct statctr_proc_entry $

ERROR:SPACING: space required before the open parenthesis '('
#458: FILE: kernel/statctr.c:78:
+	if(!procname)

ERROR:SPACING: space required before the open parenthesis '('
#461: FILE: kernel/statctr.c:81:
+	if(!parent)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#467: FILE: kernel/statctr.c:87:
+^Iif(!pentry) $

ERROR:SPACING: space required before the open parenthesis '('
#467: FILE: kernel/statctr.c:87:
+	if(!pentry) 

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#470: FILE: kernel/statctr.c:90:
+	tmpentry = create_proc_read_entry (procname, 0444, tmpparent,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#471: FILE: kernel/statctr.c:91:
+	tmpentry = create_proc_read_entry (procname, 0444, tmpparent,
+			read_statctr_proc_entry, pentry);

ERROR:SPACING: space required before the open parenthesis '('
#472: FILE: kernel/statctr.c:92:
+	if(!tmpentry) {

ERROR:SPACING: space required before the open parenthesis '('
#478: FILE: kernel/statctr.c:98:
+	if(!pentry->procname) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#483: FILE: kernel/statctr.c:103:
+	memcpy(pentry->procname, procname, strlen(procname)+1);
 	                                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#486: FILE: kernel/statctr.c:106:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#492: FILE: kernel/statctr.c:112:
+ * @pentry: Pointer to struct statctr_proc_entry type; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#494: FILE: kernel/statctr.c:114:
+ * frees the memory pointed by it. $

ERROR:SPACING: space required before the open parenthesis '('
#498: FILE: kernel/statctr.c:118:
+	if(!list_empty(&pentry->head))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#499: FILE: kernel/statctr.c:119:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#505: FILE: kernel/statctr.c:125:
+static int statctr_link_pentry(statctr_t *stctr, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#507: FILE: kernel/statctr.c:127:
+^I^I^I       const char *ctrname, $

ERROR:SPACING: space required before the open parenthesis '('
#511: FILE: kernel/statctr.c:131:
+	if(!pentry) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#515: FILE: kernel/statctr.c:135:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#516: FILE: kernel/statctr.c:136:
+	if(ctrname) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#517: FILE: kernel/statctr.c:137:
+^I^Istctr->name = kmalloc(strlen(ctrname) + 1, flags); $

ERROR:SPACING: space required before the open parenthesis '('
#518: FILE: kernel/statctr.c:138:
+		if(!stctr->name)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#520: FILE: kernel/statctr.c:140:
+		memcpy(stctr->name, ctrname, strlen(ctrname)+1);
 		                                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#522: FILE: kernel/statctr.c:142:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#526: FILE: kernel/statctr.c:146:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#529: FILE: kernel/statctr.c:149:
+	if(stctr->name)

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#530: FILE: kernel/statctr.c:150:
+	if(stctr->name)
+		kfree(stctr->name);

ERROR:SPACING: space required before the open parenthesis '('
#531: FILE: kernel/statctr.c:151:
+	if(!list_empty(&stctr->pentrylist))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#536: FILE: kernel/statctr.c:156:
+^I^I({do { } while (0); 0;}) $

ERROR:SPACING: space required after that ';' (ctx:VxV)
#536: FILE: kernel/statctr.c:156:
+		({do { } while (0); 0;}) 
 		                     ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#543: FILE: kernel/statctr.c:163:
+ * @val      : ^IInitial value.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#544: FILE: kernel/statctr.c:164:
+ * @pentry   : ^IThe struct statctr_proc_entry type which represents a $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#544: FILE: kernel/statctr.c:164:
+ * @pentry   : ^IThe struct statctr_proc_entry type which represents a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#545: FILE: kernel/statctr.c:165:
+ *^I^I/proc entry. This should have been created by using the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#546: FILE: kernel/statctr.c:166:
+ *^I^Icreate_statctr_proc_entry interface. Passing NULL turns $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#558: FILE: kernel/statctr.c:178:
+ * then you would have no control over the order in which entries show up $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#561: FILE: kernel/statctr.c:181:
+int statctr_init(statctr_t *stctr, unsigned long val, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#562: FILE: kernel/statctr.c:182:
+^I^I struct statctr_proc_entry *pentry, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#563: FILE: kernel/statctr.c:183:
+^I^I const char *ctrname, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#566: FILE: kernel/statctr.c:186:
+^Iif(__statctr_init(stctr, flags)) $

ERROR:SPACING: space required before the open parenthesis '('
#566: FILE: kernel/statctr.c:186:
+	if(__statctr_init(stctr, flags)) 

ERROR:SPACING: space required before the open parenthesis '('
#568: FILE: kernel/statctr.c:188:
+	if(statctr_link_pentry(stctr, pentry, ctrname, flags)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#578: FILE: kernel/statctr.c:198:
+ * @ctr: Pointer to statctr_t type; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#586: FILE: kernel/statctr.c:206:
+#ifdef  CONFIG_PROC_FS  $

ERROR:SPACING: exactly one space required after that #ifdef
#586: FILE: kernel/statctr.c:206:
+#ifdef  CONFIG_PROC_FS  

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#588: FILE: kernel/statctr.c:208:
+EXPORT_SYMBOL(free_statctr_proc_entry);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#591: FILE: kernel/statctr.c:211:
+EXPORT_SYMBOL(statctr_init);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#592: FILE: kernel/statctr.c:212:
+EXPORT_SYMBOL(statctr_cleanup);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000441299.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 90 errors, 49 warnings, 14 checks, 510 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000441299.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
