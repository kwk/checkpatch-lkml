ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#66: FILE: drivers/char/sysrq.c:50:
+#define  GDB_OP &kgdb_op

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#69: FILE: drivers/char/sysrq.c:53:
+	printk("kgdb sysrq\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#98: FILE: include/linux/debugger.h:1:
+#ifndef _DEBUGGER_H_

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:CAMELCASE: Avoid CamelCase: <exVector>
#112: FILE: include/linux/debugger.h:15:
+typedef int gdb_debug_hook(int exVector, int signo, int err_code,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:CODE_INDENT: code indent should use tabs where possible
#113: FILE: include/linux/debugger.h:16:
+                            struct pt_regs *regs);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: include/linux/debugger.h:16:
+                            struct pt_regs *regs);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#115: FILE: include/linux/debugger.h:18:
+#define	CHK_DEBUGGER(trapnr,signr,error_code,regs,after)			\
        	                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#115: FILE: include/linux/debugger.h:18:
+#define	CHK_DEBUGGER(trapnr,signr,error_code,regs,after)			\
        	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#115: FILE: include/linux/debugger.h:18:
+#define	CHK_DEBUGGER(trapnr,signr,error_code,regs,after)			\
        	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#115: FILE: include/linux/debugger.h:18:
+#define	CHK_DEBUGGER(trapnr,signr,error_code,regs,after)			\
        	                                         ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regs' - possible side-effects?
#115: FILE: include/linux/debugger.h:18:
+#define	CHK_DEBUGGER(trapnr,signr,error_code,regs,after)			\
+    {									\
+	if (linux_debug_hook != (gdb_debug_hook *) NULL && !user_mode(regs)) \
+	{								\
+		(*linux_debug_hook)(trapnr, signr, error_code, regs) ;	\
+		after;							\
+	}								\
+    }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: include/linux/debugger.h:19:
+    {^I^I^I^I^I^I^I^I^I\$

CHECK:SPACING: No space is necessary after a cast
#117: FILE: include/linux/debugger.h:20:
+	if (linux_debug_hook != (gdb_debug_hook *) NULL && !user_mode(regs)) \

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#117: FILE: include/linux/debugger.h:20:
+	if (linux_debug_hook != (gdb_debug_hook *) NULL && !user_mode(regs)) \
+	{								\

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: include/linux/debugger.h:25:
+    }$

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#138: FILE: include/linux/debugger.h:41:
+extern volatile int debugger_memerr_expected;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#145: FILE: include/linux/debugger.h:48:
+#define	CHK_DEBUGGER(trapnr,signr,error_code,regs,after)	\
        	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#145: FILE: include/linux/debugger.h:48:
+#define	CHK_DEBUGGER(trapnr,signr,error_code,regs,after)	\
        	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#145: FILE: include/linux/debugger.h:48:
+#define	CHK_DEBUGGER(trapnr,signr,error_code,regs,after)	\
        	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#145: FILE: include/linux/debugger.h:48:
+#define	CHK_DEBUGGER(trapnr,signr,error_code,regs,after)	\
        	                                         ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#151: FILE: include/linux/debugger.h:54:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#168: FILE: include/linux/debugger.h:71:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#173: FILE: include/linux/kgdb.h:1:
+#ifndef _KGDB_H_

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#183: FILE: include/linux/kgdb.h:11:
+#include <asm/atomic.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#198: FILE: include/linux/kgdb.h:26:
+extern void breakpoint(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#199: FILE: include/linux/kgdb.h:27:
+extern void kgdb_schedule_breakpoint(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#200: FILE: include/linux/kgdb.h:28:
+extern void kgdb_process_breakpoint(void);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#201: FILE: include/linux/kgdb.h:29:
+extern volatile int kgdb_connected;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#213: FILE: include/linux/kgdb.h:41:
+
+

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#217: FILE: include/linux/kgdb.h:45:
+enum gdb_bptype
+{

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#226: FILE: include/linux/kgdb.h:54:
+enum gdb_bpstate
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: include/linux/kgdb.h:55:
+       bp_disabled,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: include/linux/kgdb.h:56:
+       bp_enabled$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#236: FILE: include/linux/kgdb.h:64:
+struct gdb_breakpoint
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: include/linux/kgdb.h:65:
+       unsigned long            bpt_addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: include/linux/kgdb.h:66:
+       unsigned char           saved_instr[BREAK_INSTR_SIZE];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: include/linux/kgdb.h:67:
+       enum gdb_bptype         type;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: include/linux/kgdb.h:68:
+       enum gdb_bpstate        state;$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#243: FILE: include/linux/kgdb.h:71:
+typedef struct gdb_breakpoint gdb_breakpoint_t;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#252: FILE: include/linux/kgdb.h:80:
+ * must, provide. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#253: FILE: include/linux/kgdb.h:81:
+extern int kgdb_arch_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#254: FILE: include/linux/kgdb.h:82:
+extern void regs_to_gdb_regs(unsigned long *gdb_regs, struct pt_regs *regs);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#255: FILE: include/linux/kgdb.h:83:
+extern void sleeping_thread_to_gdb_regs(unsigned long *gdb_regs,struct task_struct *p);
                                                                ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#255: FILE: include/linux/kgdb.h:83:
+extern void sleeping_thread_to_gdb_regs(unsigned long *gdb_regs,struct task_struct *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#256: FILE: include/linux/kgdb.h:84:
+extern void gdb_regs_to_regs(unsigned long *gdb_regs, struct pt_regs *regs);

CHECK:CAMELCASE: Avoid CamelCase: <exceptionNo>
#257: FILE: include/linux/kgdb.h:85:
+extern void kgdb_printexceptioninfo(int exceptionNo, int errorcode,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#257: FILE: include/linux/kgdb.h:85:
+extern void kgdb_printexceptioninfo(int exceptionNo, int errorcode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#258: FILE: include/linux/kgdb.h:86:
+extern void kgdb_printexceptioninfo(int exceptionNo, int errorcode,
+		char *buffer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#259: FILE: include/linux/kgdb.h:87:
+extern void kgdb_disable_hw_debug(struct pt_regs *regs);

CHECK:CAMELCASE: Avoid CamelCase: <eVector>
#260: FILE: include/linux/kgdb.h:88:
+extern void kgdb_post_master_code(struct pt_regs *regs, int eVector,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#260: FILE: include/linux/kgdb.h:88:
+extern void kgdb_post_master_code(struct pt_regs *regs, int eVector,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#261: FILE: include/linux/kgdb.h:89:
+extern void kgdb_post_master_code(struct pt_regs *regs, int eVector,
+		int err_code);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#262: FILE: include/linux/kgdb.h:90:
+extern int kgdb_arch_handle_exception(int vector, int signo, int err_code,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#263: FILE: include/linux/kgdb.h:91:
+extern int kgdb_arch_handle_exception(int vector, int signo, int err_code,
+		char *InBuffer, char *outBuffer, struct pt_regs *regs);

CHECK:CAMELCASE: Avoid CamelCase: <InBuffer>
#263: FILE: include/linux/kgdb.h:91:
+		char *InBuffer, char *outBuffer, struct pt_regs *regs);

CHECK:CAMELCASE: Avoid CamelCase: <outBuffer>
#263: FILE: include/linux/kgdb.h:91:
+		char *InBuffer, char *outBuffer, struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#264: FILE: include/linux/kgdb.h:92:
+extern int kgdb_arch_set_break(unsigned long addr, int type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#265: FILE: include/linux/kgdb.h:93:
+extern int kgdb_arch_remove_break(unsigned long addr, int type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#266: FILE: include/linux/kgdb.h:94:
+extern void kgdb_correct_hw_break(void);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#267: FILE: include/linux/kgdb.h:95:
+extern void kgdb_shadowinfo(struct pt_regs *regs, char *buffer, unsigned threadid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#267: FILE: include/linux/kgdb.h:95:
+extern void kgdb_shadowinfo(struct pt_regs *regs, char *buffer, unsigned threadid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#268: FILE: include/linux/kgdb.h:96:
+extern struct task_struct *kgdb_get_shadow_thread(struct pt_regs *regs,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#269: FILE: include/linux/kgdb.h:97:
+extern struct task_struct *kgdb_get_shadow_thread(struct pt_regs *regs,
+		int threadid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#270: FILE: include/linux/kgdb.h:98:
+extern struct pt_regs *kgdb_shadow_regs(struct pt_regs *regs, int threadid);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#275: FILE: include/linux/kgdb.h:103:
+	unsigned shadowth;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#276: FILE: include/linux/kgdb.h:104:
+};^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#279: FILE: include/linux/kgdb.h:107:
+typedef unsigned char threadref[8];

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#281: FILE: include/linux/kgdb.h:109:
+extern int kgdb_get_debug_char(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#282: FILE: include/linux/kgdb.h:110:
+extern void kgdb_put_debug_char(int ch);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#283: FILE: include/linux/kgdb.h:111:
+extern void kgdb_flush_debug_char(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#284: FILE: include/linux/kgdb.h:112:
+extern int kgdb_hook_io(void);

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#286: FILE: include/linux/kgdb.h:114:
+extern struct kgdb_arch arch_kgdb_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#291: FILE: include/linux/kgdb.h:119:
+extern void kgdb8250_add_port(int i, struct uart_port *serial_req);

CHECK:CAMELCASE: Avoid CamelCase: <longValue>
#293: FILE: include/linux/kgdb.h:121:
+int kgdb_hex2long(char **ptr, long *longValue);

ERROR:SPACING: space required before the open parenthesis '('
#297: FILE: include/linux/kgdb.h:125:
+#define kgdb_process_breakpoint()	do {} while(0)

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#350: FILE: kernel/Kconfig.kgdb:1:
+config KGDB
+	bool "KGDB: kernel debugging with remote gdb"
+	depends on DEBUG_KERNEL
+	select DEBUG_INFO
+	select FRAME_POINTER
+	# XXX: Doesn't work w/o this right now
+	select KGDB_THREAD if PPC32
+	help
+	  If you say Y here, it will be possible to remotely debug the
+	  kernel using gdb. This enlarges your kernel image disk size by
+	  several megabytes and requires a machine with more than 128 MB
+	  RAM to avoid excessive linking time. 
+	  Documentation of kernel debugger available at
+	  http://kgdb.sourceforge.net
+	  This is only useful for kernel hackers. If unsure, say N.
+
+choice
+	prompt "Method for KGDB communication"
+	depends on KGDB
+	default PPC_SIMPLE_SERIAL if PPC32 && (8xx || 8260)
+	default KGDB_8250
+	help
+	  There are a number of different ways in which you can communicate
+	  with KGDB.  The oldest is using a serial driver.  A newer method
+	  is to use UDP packets and a special network driver.
+
+config KGDB_8250
+	bool "KGDB: On generic serial port (8250)"
+	help
+	  Uses generic serial port (8250) for kgdb. This is independent of the
+	  option 9250/16550 and compatible serial port.
+
+config KGDB_ETH
+	bool "KGDB: On ethernet"
+	select NETPOLL
+	select NETPOLL_TRAP
+	select NETPOLL_RX
+	help
+	  Uses ethernet interface for kgdb.
+
+config PPC_SIMPLE_SERIAL 
+	bool "KGDB: On any serial port"
+	depends on PPC32
+	help
+	  Use a very simple, and not necessarily feature complete serial
+	  driver.  This is the only serial option currently for MPC8xx or
+	  MPC82xx based ports that do not offer an 8250-style UART.
+
+endchoice
+
+config KGDB_SIMPLE_SERIAL
+	bool "Simple selection of KGDB serial port"
+	depends on KGDB_8250 || PPC_SIMPLE_SERIAL
+	help
+	  If you say Y here, you will only have to pick the baud rate
+	  and serial port (ttyS) that you wish to use for KGDB.  If you
+	  say N, you will have provide the I/O port and IRQ number.  Note
+	  that if your serial ports are iomapped, then you must say Y here.
+	  If in doubt, say Y.
+
+choice
+	depends on KGDB_8250 || PPC_SIMPLE_SERIAL
+    	prompt "Debug serial port BAUD"
+	default KGDB_115200BAUD
+	help
+	  Gdb and the kernel stub need to agree on the baud rate to be
+	  used.  Some systems (x86 family at this writing) allow this to
+	  be configured.
+
+config KGDB_9600BAUD
+	bool "9600"
+
+config KGDB_19200BAUD
+	bool "19200"
+
+config KGDB_38400BAUD
+	bool "38400"
+
+config KGDB_57600BAUD
+	bool "57600"
+
+config KGDB_115200BAUD
+	bool "115200"
+endchoice
+
+choice
+	prompt "Serial port for KGDB"
+	depends on KGDB_SIMPLE_SERIAL
+	default KGDB_TTYS0
+
+config KGDB_TTYS0
+	bool "ttyS0"
+
+config KGDB_TTYS1
+	bool "ttyS1"
+
+config KGDB_TTYS2
+	bool "ttyS2"
+
+config KGDB_TTYS3
+	bool "ttyS3"
+
+endchoice
+
+config KGDB_PORT
+	hex "hex I/O port address of the debug serial port"
+	depends on !KGDB_SIMPLE_SERIAL && (KGDB_8250 || PPC_SIMPLE_SERIAL)
+	default  3f8
+	help
+	  Some systems (x86 family at this writing) allow the port
+	  address to be configured.  The number entered is assumed to be
+	  hex, don't put 0x in front of it.  The standard address are:
+	  COM1 3f8 , irq 4 and COM2 2f8 irq 3.  Setserial /dev/ttySx
+	  will tell you what you have.  It is good to test the serial
+	  connection with a live system before trying to debug.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#361: FILE: kernel/Kconfig.kgdb:12:
+^I  RAM to avoid excessive linking time. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#390: FILE: kernel/Kconfig.kgdb:41:
+config PPC_SIMPLE_SERIAL $

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#485: FILE: kernel/Kconfig.kgdb:136:
+config KGDB_CONSOLE
+	bool "KGDB: Console messages through gdb"
+	depends on KGDB
+	help
+	  If you say Y here, console messages will appear through gdb.
+	  Other consoles such as tty or ttyS will continue to work as usual.
+++ linux-2.6.3-rc4-kgdb/kernel/Makefile	2004-02-17 11:33:52.879156407 -0700
+++ linux-2.6.3-rc4-kgdb/kernel/Makefile	2004-02-17 11:33:52.879156407 -0700

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#504: FILE: kernel/kgdbstub.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#523: FILE: kernel/kgdbstub.c:20:
+ * thread support, support for multiple processors,support for ia-32(x86) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#530: FILE: kernel/kgdbstub.c:27:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#533: FILE: kernel/kgdbstub.c:30:
+ *  $

WARNING:TYPO_SPELLING: 'Origianl' may be misspelled - perhaps 'Original'?
#535: FILE: kernel/kgdbstub.c:32:
+ * Origianl kgdb, compatibility with 2.1.xx kernel by David Grothe <dave@gcom.com>
    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#548: FILE: kernel/kgdbstub.c:45:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#550: FILE: kernel/kgdbstub.c:47:
+#include <asm/atomic.h>

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#553: FILE: kernel/kgdbstub.c:50:
+#include <asm/cacheflush.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#559: FILE: kernel/kgdbstub.c:56:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#559: FILE: kernel/kgdbstub.c:56:
+ $

WARNING:TYPO_SPELLING: 'initalization' may be misspelled - perhaps 'initialization'?
#568: FILE: kernel/kgdbstub.c:65:
+ * This function will handle the initalization of any architecture specific
                                  ^^^^^^^^^^^^^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#571: FILE: kernel/kgdbstub.c:68:
+int __attribute__ ((weak))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#577: FILE: kernel/kgdbstub.c:74:
+void __attribute__ ((weak))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#582: FILE: kernel/kgdbstub.c:79:
+void __attribute__ ((weak))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#583: FILE: kernel/kgdbstub.c:80:
+sleeping_thread_to_gdb_regs(unsigned long *gdb_regs,struct task_struct *p)
                                                    ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#587: FILE: kernel/kgdbstub.c:84:
+void __attribute__ ((weak))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#592: FILE: kernel/kgdbstub.c:89:
+void __attribute__ ((weak))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#597: FILE: kernel/kgdbstub.c:94:
+void __attribute__ ((weak))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#602: FILE: kernel/kgdbstub.c:99:
+void __attribute__ ((weak))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#612: FILE: kernel/kgdbstub.c:109:
+int __attribute__ ((weak))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#614: FILE: kernel/kgdbstub.c:111:
+kgdb_arch_handle_exception(int vector, int signo, int err_code, char *InBuffer,
+		char *outBuffer, struct pt_regs *regs)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#619: FILE: kernel/kgdbstub.c:116:
+int __attribute__ ((weak))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#625: FILE: kernel/kgdbstub.c:122:
+int __attribute__ ((weak))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#631: FILE: kernel/kgdbstub.c:128:
+void __attribute__ ((weak))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#636: FILE: kernel/kgdbstub.c:133:
+void __attribute__ ((weak))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#637: FILE: kernel/kgdbstub.c:134:
+kgdb_shadowinfo(struct pt_regs *regs, char *buffer, unsigned threadid)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#641: FILE: kernel/kgdbstub.c:138:
+struct task_struct __attribute__ ((weak))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#647: FILE: kernel/kgdbstub.c:144:
+struct pt_regs __attribute__ ((weak))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#658: FILE: kernel/kgdbstub.c:155:
+int __attribute__ ((weak))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#665: FILE: kernel/kgdbstub.c:162:
+void __attribute__ ((weak))

WARNING:RETURN_VOID: void function return statements are not generally useful
#669: FILE: kernel/kgdbstub.c:166:
+	return;
+}

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#672: FILE: kernel/kgdbstub.c:169:
+void __attribute__ ((weak))

WARNING:RETURN_VOID: void function return statements are not generally useful
#676: FILE: kernel/kgdbstub.c:173:
+	return;
+}

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#679: FILE: kernel/kgdbstub.c:176:
+int __attribute__ ((weak))

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#685: FILE: kernel/kgdbstub.c:182:
+struct kgdb_arch *kgdb_ops = &arch_kgdb_ops;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#687: FILE: kernel/kgdbstub.c:184:
+extern int pid_max;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#689: FILE: kernel/kgdbstub.c:186:
+int kgdb_initialized = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#690: FILE: kernel/kgdbstub.c:187:
+int kgdb_enter = 0;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#696: FILE: kernel/kgdbstub.c:193:
+spinlock_t slavecpulocks[KGDB_MAX_NO_CPUS];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#697: FILE: kernel/kgdbstub.c:194:
+static volatile int procindebug[KGDB_MAX_NO_CPUS];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#699: FILE: kernel/kgdbstub.c:196:
+volatile int kgdb_connected;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#705: FILE: kernel/kgdbstub.c:202:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#707: FILE: kernel/kgdbstub.c:204:
+ * error.  $

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#709: FILE: kernel/kgdbstub.c:206:
+volatile int kgdb_memerr = 0;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#709: FILE: kernel/kgdbstub.c:206:
+volatile int kgdb_memerr = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#710: FILE: kernel/kgdbstub.c:207:
+volatile int debugger_memerr_expected = 0;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#710: FILE: kernel/kgdbstub.c:207:
+volatile int debugger_memerr_expected = 0;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#717: FILE: kernel/kgdbstub.c:214:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <remcomInBuffer>
#718: FILE: kernel/kgdbstub.c:215:
+static char remcomInBuffer[BUFMAX];

CHECK:CAMELCASE: Avoid CamelCase: <remcomOutBuffer>
#719: FILE: kernel/kgdbstub.c:216:
+static char remcomOutBuffer[BUFMAX];

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#722: FILE: kernel/kgdbstub.c:219:
+static int module_event(struct notifier_block * self, unsigned long val,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#723: FILE: kernel/kgdbstub.c:220:
+static int module_event(struct notifier_block * self, unsigned long val,
+		void * data);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#723: FILE: kernel/kgdbstub.c:220:
+		void * data);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#741: FILE: kernel/kgdbstub.c:238:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#788: FILE: kernel/kgdbstub.c:285:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#830: FILE: kernel/kgdbstub.c:327:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#832: FILE: kernel/kgdbstub.c:329:
+	for (i = 0; i < count; i++) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#833: FILE: kernel/kgdbstub.c:330:
+^I^Iif (get_char(mem++, &ch, can_fault) < 0) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#835: FILE: kernel/kgdbstub.c:332:
+^I^I$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#840: FILE: kernel/kgdbstub.c:337:
+	return (buf);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#850: FILE: kernel/kgdbstub.c:347:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#854: FILE: kernel/kgdbstub.c:351:
+^I^Iif (set_char(mem++, ch, can_fault) < 0) $

CHECK:CAMELCASE: Avoid CamelCase: <numChars>
#866: FILE: kernel/kgdbstub.c:363:
+	int numChars = 0;

CHECK:CAMELCASE: Avoid CamelCase: <hexValue>
#867: FILE: kernel/kgdbstub.c:364:
+	int hexValue;

CHECK:BRACES: braces {} should be used on all arms of this statement
#873: FILE: kernel/kgdbstub.c:370:
+		if (hexValue >= 0) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#876: FILE: kernel/kgdbstub.c:373:
+		} else

CHECK:SPACING: No space is necessary after a cast
#899: FILE: kernel/kgdbstub.c:396:
+	altid = (unsigned char *) id;

CHECK:SPACING: No space is necessary after a cast
#911: FILE: kernel/kgdbstub.c:408:
+	scan = (unsigned char *) id;

WARNING:LINE_SPACING: Missing a blank line after declarations
#914: FILE: kernel/kgdbstub.c:411:
+		int i = 4;
+		while (i--)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#923: FILE: kernel/kgdbstub.c:420:
+static struct task_struct *getthread(struct pt_regs *regs,int tid)
                                                          ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#930: FILE: kernel/kgdbstub.c:427:
+	if (tid >= pid_max + num_online_cpus() + kgdb_ops->shadowth) {
+		return NULL;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#940: FILE: kernel/kgdbstub.c:437:
+			if (tid == pid_max + i) {
+				return p;
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#947: FILE: kernel/kgdbstub.c:444:
+	if (!tid) {
+		return NULL;
+	}

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#969: FILE: kernel/kgdbstub.c:466:
+			asm volatile ("nop": : : "memory");
 			                   ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#988: FILE: kernel/kgdbstub.c:485:
+static void get_mem (char *addr, unsigned char *buf, int count)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#991: FILE: kernel/kgdbstub.c:488:
+^I^Iif(get_char(addr++, buf, 1) <  0) $

ERROR:SPACING: space required before the open parenthesis '('
#991: FILE: kernel/kgdbstub.c:488:
+		if(get_char(addr++, buf, 1) <  0) 

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#998: FILE: kernel/kgdbstub.c:495:
+static void set_mem (char *addr,unsigned char *buf, int count)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#998: FILE: kernel/kgdbstub.c:495:
+static void set_mem (char *addr,unsigned char *buf, int count)
                                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1001: FILE: kernel/kgdbstub.c:498:
+^I^Iif (set_char(addr++,*buf++, 1) < 0) $

ERROR:SPACING: space required after that ',' (ctx:OxO)
#1001: FILE: kernel/kgdbstub.c:498:
+		if (set_char(addr++,*buf++, 1) < 0) 
 		                   ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#1001: FILE: kernel/kgdbstub.c:498:
+		if (set_char(addr++,*buf++, 1) < 0) 
 		                    ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1007: FILE: kernel/kgdbstub.c:504:
+static int set_break (unsigned long addr)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].state == bp_enabled'
#1012: FILE: kernel/kgdbstub.c:509:
+		if ((kgdb_break[i].state == bp_enabled) &&
+		    (kgdb_break[i].bpt_addr == addr)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].bpt_addr == addr'
#1012: FILE: kernel/kgdbstub.c:509:
+		if ((kgdb_break[i].state == bp_enabled) &&
+		    (kgdb_break[i].bpt_addr == addr)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].bpt_addr == addr'
#1019: FILE: kernel/kgdbstub.c:516:
+			if ((breakno == -1) || (kgdb_break[i].bpt_addr == addr))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1031: FILE: kernel/kgdbstub.c:528:
+	flush_cache_range (current->mm, addr, addr + BREAK_INSTR_SIZE);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1032: FILE: kernel/kgdbstub.c:529:
+	flush_icache_range (addr, addr + BREAK_INSTR_SIZE);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1039: FILE: kernel/kgdbstub.c:536:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1041: FILE: kernel/kgdbstub.c:538:
+}^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1043: FILE: kernel/kgdbstub.c:540:
+static int remove_break (unsigned long addr)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1047: FILE: kernel/kgdbstub.c:544:
+	for (i=0; i < MAX_BREAKPOINTS; i++) {
 	      ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].state == bp_enabled'
#1048: FILE: kernel/kgdbstub.c:545:
+		if ((kgdb_break[i].state == bp_enabled) &&
+		   (kgdb_break[i].bpt_addr == addr)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kgdb_break[i].bpt_addr == addr'
#1048: FILE: kernel/kgdbstub.c:545:
+		if ((kgdb_break[i].state == bp_enabled) &&
+		   (kgdb_break[i].bpt_addr == addr)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1049: FILE: kernel/kgdbstub.c:546:
+		if ((kgdb_break[i].state == bp_enabled) &&
+		   (kgdb_break[i].bpt_addr == addr)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1051: FILE: kernel/kgdbstub.c:548:
+^I^I^I        BREAK_INSTR_SIZE);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1052: FILE: kernel/kgdbstub.c:549:
+			flush_cache_range (current->mm, addr, addr + BREAK_INSTR_SIZE);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1053: FILE: kernel/kgdbstub.c:550:
+			flush_icache_range (addr, addr + BREAK_INSTR_SIZE);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1066: FILE: kernel/kgdbstub.c:563:
+	int i;
+	for (i=0; i < MAX_BREAKPOINTS; i++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1066: FILE: kernel/kgdbstub.c:563:
+	for (i=0; i < MAX_BREAKPOINTS; i++) {
 	      ^

ERROR:SPACING: space required before the open parenthesis '('
#1067: FILE: kernel/kgdbstub.c:564:
+		if(kgdb_break[i].state == bp_enabled) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1069: FILE: kernel/kgdbstub.c:566:
+			unsigned long addr = kgdb_break[i].bpt_addr;
+			set_mem((char *)addr, kgdb_break[i].saved_instr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1070: FILE: kernel/kgdbstub.c:567:
+			set_mem((char *)addr, kgdb_break[i].saved_instr,
+			       BREAK_INSTR_SIZE);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1071: FILE: kernel/kgdbstub.c:568:
+			flush_cache_range (current->mm, addr, addr + BREAK_INSTR_SIZE);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1072: FILE: kernel/kgdbstub.c:569:
+			flush_icache_range (addr, addr + BREAK_INSTR_SIZE);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1078: FILE: kernel/kgdbstub.c:575:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1083: FILE: kernel/kgdbstub.c:580:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1085: FILE: kernel/kgdbstub.c:582:
+^I$

WARNING:MEMORY_BARRIER: memory barrier without comment
#1088: FILE: kernel/kgdbstub.c:585:
+	wmb();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1091: FILE: kernel/kgdbstub.c:588:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1096: FILE: kernel/kgdbstub.c:593:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1097: FILE: kernel/kgdbstub.c:594:
+^Idebugger_memerr_expected = 0;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1106: FILE: kernel/kgdbstub.c:603:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1108: FILE: kernel/kgdbstub.c:605:
+^I$

WARNING:MEMORY_BARRIER: memory barrier without comment
#1111: FILE: kernel/kgdbstub.c:608:
+	wmb();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1119: FILE: kernel/kgdbstub.c:616:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1127: FILE: kernel/kgdbstub.c:624:
+	if (realpid) {
+		return realpid;
+	}

WARNING:TYPO_SPELLING: 'procesing' may be misspelled - perhaps 'processing'?
#1134: FILE: kernel/kgdbstub.c:631:
+ * This function does all command procesing for interfacing to gdb.
                                   ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1141: FILE: kernel/kgdbstub.c:638:
+int kgdb_handle_exception(int exVector, int signo, int err_code, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1142: FILE: kernel/kgdbstub.c:639:
+                     struct pt_regs *linux_regs)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1142: FILE: kernel/kgdbstub.c:639:
+int kgdb_handle_exception(int exVector, int signo, int err_code, 
+                     struct pt_regs *linux_regs)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1142: FILE: kernel/kgdbstub.c:639:
+                     struct pt_regs *linux_regs)$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1147: FILE: kernel/kgdbstub.c:644:
+	unsigned long gdb_regs[NUMREGBYTES / sizeof (unsigned long)];

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1152: FILE: kernel/kgdbstub.c:649:
+	unsigned procid;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1159: FILE: kernel/kgdbstub.c:656:
+	if (atomic_read(&debugger_active) == smp_processor_id() + 1) {
+		return 0;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1163: FILE: kernel/kgdbstub.c:660:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1168: FILE: kernel/kgdbstub.c:665:
+^I$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1175: FILE: kernel/kgdbstub.c:672:
+			asm volatile ("nop": : : "memory");
 			                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1177: FILE: kernel/kgdbstub.c:674:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1184: FILE: kernel/kgdbstub.c:681:
+	for (i = 0; i < num_online_cpus(); i++) {
+		spin_lock(&slavecpulocks[i]);
+	}

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1189: FILE: kernel/kgdbstub.c:686:
+	 * need one here */

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#1198: FILE: kernel/kgdbstub.c:695:
+	/* If kgdb is connected, then an exception has occured, and
 	                                               ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1199: FILE: kernel/kgdbstub.c:696:
+	 * we need to pass something back to GDB. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1214: FILE: kernel/kgdbstub.c:711:
+		ptr = kgdb_mem2hex(((char *)linux_regs) + SP_REGNUM * 4, ptr,
+				4, 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1229: FILE: kernel/kgdbstub.c:726:
+		int bpt_type = 0;
+		error = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1238: FILE: kernel/kgdbstub.c:735:
+^I^Iprintk("CPU%d pid%d GDB packet: %s\n", $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1238: FILE: kernel/kgdbstub.c:735:
+		printk("CPU%d pid%d GDB packet: %s\n", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1253: FILE: kernel/kgdbstub.c:750:
+			ptr = kgdb_mem2hex((char *)&linux_regs->PTRACE_PC, ptr,
+					4, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1259: FILE: kernel/kgdbstub.c:756:
+			ptr = kgdb_mem2hex(((char *)linux_regs) + SP_REGNUM * 4,
+					ptr, 4, 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1268: FILE: kernel/kgdbstub.c:765:
+^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1271: FILE: kernel/kgdbstub.c:768:
+^I^I^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1273: FILE: kernel/kgdbstub.c:770:
+			/* All threads that don't have debuggerinfo should be
+			   in __schedule() sleeping, since all other CPUs

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1274: FILE: kernel/kgdbstub.c:771:
+			   are in kgdb_wait, and thus have debuggerinfo. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1275: FILE: kernel/kgdbstub.c:772:
+^I^I^I   $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1278: FILE: kernel/kgdbstub.c:775:
+				regs_to_gdb_regs(gdb_regs,
+					kgdb_shadow_regs(linux_regs,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1279: FILE: kernel/kgdbstub.c:776:
+					kgdb_shadow_regs(linux_regs,
+						kgdb_usethreadid - pid_max -

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1283: FILE: kernel/kgdbstub.c:780:
+				if (get_char(thread->thread.debuggerinfo,
+					(unsigned char *)gdb_regs, 1)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1288: FILE: kernel/kgdbstub.c:785:
+				regs_to_gdb_regs(gdb_regs,
+					(struct pt_regs *)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1291: FILE: kernel/kgdbstub.c:788:
+^I^I^I^I/* Pull stuff saved during $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1294: FILE: kernel/kgdbstub.c:791:
+				 * This should be enough for a stack trace. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1297: FILE: kernel/kgdbstub.c:794:
+^I^I^I^I$

CHECK:SPACING: No space is necessary after a cast
#1298: FILE: kernel/kgdbstub.c:795:
+			kgdb_mem2hex((char *) gdb_regs, remcomOutBuffer, NUMREGBYTES, 0);

CHECK:SPACING: No space is necessary after a cast
#1302: FILE: kernel/kgdbstub.c:799:
+			hex2mem(&remcomInBuffer[1], (char *) gdb_regs,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1304: FILE: kernel/kgdbstub.c:801:
+^I^I^I^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#1305: FILE: kernel/kgdbstub.c:802:
+			if (kgdb_usethread && kgdb_usethread != current)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1307: FILE: kernel/kgdbstub.c:804:
+			else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1309: FILE: kernel/kgdbstub.c:806:
+				gdb_regs_to_regs(gdb_regs,
+					(struct pt_regs *)

CHECK:SPACING: No space is necessary after a cast
#1323: FILE: kernel/kgdbstub.c:820:
+				kgdb_mem2hex((char *) addr, remcomOutBuffer, length, 1);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1326: FILE: kernel/kgdbstub.c:823:
+^I^I^I^I^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1327: FILE: kernel/kgdbstub.c:824:
+					
+			}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1329: FILE: kernel/kgdbstub.c:826:
+^I^I^Iif (ptr) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1337: FILE: kernel/kgdbstub.c:834:
+^I^I^Iif (kgdb_hex2long(&ptr, &addr) && *(ptr++) == ',' && $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1346: FILE: kernel/kgdbstub.c:843:
+			if (ptr) {
+				strcpy(remcomOutBuffer, "E02");
+			}

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1351: FILE: kernel/kgdbstub.c:848:
+		 * our breakpoints and get back to 'normal'. */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1355: FILE: kernel/kgdbstub.c:852:
+			/* fall through. */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1357: FILE: kernel/kgdbstub.c:854:
+		 * just stop debugging. */

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1367: FILE: kernel/kgdbstub.c:864:
+				if (memcmp(remcomInBuffer+2, "ThreadInfo",10))
+				{

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1367: FILE: kernel/kgdbstub.c:864:
+				if (memcmp(remcomInBuffer+2, "ThreadInfo",10))
 				                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1367: FILE: kernel/kgdbstub.c:864:
+				if (memcmp(remcomInBuffer+2, "ThreadInfo",10))
 				                                         ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1372: FILE: kernel/kgdbstub.c:869:
+				if (remcomInBuffer[1] == 'f') {
+					threadid = 1;
+				}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1382: FILE: kernel/kgdbstub.c:879:
+						int_to_threadref(&thref,
+								threadid);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1396: FILE: kernel/kgdbstub.c:893:
+^I^I^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1404: FILE: kernel/kgdbstub.c:901:
+				kgdb_printexceptioninfo(exVector, err_code,
+						remcomOutBuffer);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1407: FILE: kernel/kgdbstub.c:904:
+				if (memcmp(remcomInBuffer+1, "ThreadExtraInfo,",16))
+				{

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1407: FILE: kernel/kgdbstub.c:904:
+				if (memcmp(remcomInBuffer+1, "ThreadExtraInfo,",16))
 				                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1407: FILE: kernel/kgdbstub.c:904:
+				if (memcmp(remcomInBuffer+1, "ThreadExtraInfo,",16))
 				                                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1413: FILE: kernel/kgdbstub.c:910:
+				ptr = remcomInBuffer+17;
 				                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1417: FILE: kernel/kgdbstub.c:914:
+					sprintf(tmpstr, "invalid pid %d",
+							(int) threadid);

CHECK:SPACING: No space is necessary after a cast
#1417: FILE: kernel/kgdbstub.c:914:
+							(int) threadid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1419: FILE: kernel/kgdbstub.c:916:
+					kgdb_mem2hex(tmpstr, remcomOutBuffer,
+							strlen(tmpstr), 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1424: FILE: kernel/kgdbstub.c:921:
+					kgdb_mem2hex(getthread(linux_regs, threadid)->comm,
+							remcomOutBuffer, 16, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1428: FILE: kernel/kgdbstub.c:925:
+					kgdb_shadowinfo(linux_regs,
+						remcomOutBuffer,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1433: FILE: kernel/kgdbstub.c:930:
+					sprintf(tmpstr, "Shadow task %d for pid 0",
+							(int)(threadid -

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1436: FILE: kernel/kgdbstub.c:933:
+					kgdb_mem2hex(tmpstr, remcomOutBuffer,
+							strlen(tmpstr), 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1494: FILE: kernel/kgdbstub.c:991:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1497: FILE: kernel/kgdbstub.c:994:
+^I^I^I^Iif (bpt_type == bp_hardware_breakpoint && $

ERROR:SPACING: space required before the open parenthesis '('
#1504: FILE: kernel/kgdbstub.c:1001:
+				if(!(kgdb_ops->flags & KGDB_HW_BREAKPOINT))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1507: FILE: kernel/kgdbstub.c:1004:
+^I^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1513: FILE: kernel/kgdbstub.c:1010:
+					ret = kgdb_arch_set_break(addr,
+							bpt_type);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1515: FILE: kernel/kgdbstub.c:1012:
+			}
+			else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1515: FILE: kernel/kgdbstub.c:1012:
+			else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1520: FILE: kernel/kgdbstub.c:1017:
+					ret = kgdb_arch_remove_break(addr,
+							bpt_type);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1522: FILE: kernel/kgdbstub.c:1019:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1527: FILE: kernel/kgdbstub.c:1024:
+^I^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1532: FILE: kernel/kgdbstub.c:1029:
+			if (kgdb_arch_handle_exception(exVector, signo,
+						err_code, remcomInBuffer,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1540: FILE: kernel/kgdbstub.c:1037:
+		printk("Response to GDB: %s\n", remcomOutBuffer);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1549: FILE: kernel/kgdbstub.c:1046:
+^Iprocindebug[smp_processor_id()] = 0;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1550: FILE: kernel/kgdbstub.c:1047:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1551: FILE: kernel/kgdbstub.c:1048:
+	for (i = 0; i < num_online_cpus(); i++) {
+		spin_unlock(&slavecpulocks[i]);
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1555: FILE: kernel/kgdbstub.c:1052:
+^I * from the debugger $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1557: FILE: kernel/kgdbstub.c:1054:
+^Ifor (i = 0; i < num_online_cpus(); i++) { $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1561: FILE: kernel/kgdbstub.c:1058:
+			while (--j) {
+				asm volatile ("nop" : : : "memory");
+			}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1581: FILE: kernel/kgdbstub.c:1078:
+int module_event(struct notifier_block * self, unsigned long val, void * data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1581: FILE: kernel/kgdbstub.c:1078:
+int module_event(struct notifier_block * self, unsigned long val, void * data)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1587: FILE: kernel/kgdbstub.c:1084:
+/* this function is used to set up exception handlers for tracing and
+   breakpoints */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1587: FILE: kernel/kgdbstub.c:1084:
+   breakpoints */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1591: FILE: kernel/kgdbstub.c:1088:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1592: FILE: kernel/kgdbstub.c:1089:
+^Ifor (i = 0; i < KGDB_MAX_NO_CPUS; i++) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1598: FILE: kernel/kgdbstub.c:1095:
+^Ifor (i = 0; i < MAX_BREAKPOINTS; i++) $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1617: FILE: kernel/kgdbstub.c:1114:
+/* This function will generate a breakpoint exception.  It is used at the
+   beginning of a program to sync up with a debugger and can be used

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1619: FILE: kernel/kgdbstub.c:1116:
+   the debugger. */

WARNING:MEMORY_BARRIER: memory barrier without comment
#1627: FILE: kernel/kgdbstub.c:1124:
+	wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#1629: FILE: kernel/kgdbstub.c:1126:
+	wmb();

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1636: FILE: kernel/kgdbstub.c:1133:
+	if (!procindebug[cpu] && atomic_read(&debugger_active) != (cpu + 1)) {
+		kgdb_wait((struct pt_regs *)regs);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1648: FILE: kernel/kgdbstub.c:1145:
+	if (!kgdb_enter) {
+		return;
+	}

WARNING:TYPO_SPELLING: 'initalization' may be misspelled - perhaps 'initialization'?
#1652: FILE: kernel/kgdbstub.c:1149:
+	/* Let the arch do any initalization it needs to, including
 	                       ^^^^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1653: FILE: kernel/kgdbstub.c:1150:
+	 * pointing to a suitable early output device. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1660: FILE: kernel/kgdbstub.c:1157:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1670: FILE: kernel/kgdbstub.c:1167:
+	printk(KERN_CRIT "Waiting for connection from remote gdb... ");

WARNING:SPACING: space prohibited before semicolon
#1671: FILE: kernel/kgdbstub.c:1168:
+	breakpoint() ;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1672: FILE: kernel/kgdbstub.c:1169:
+	printk("Connected.\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1690: FILE: kernel/kgdbstub.c:1187:
+         * to avoid reentrancy issues$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1701: FILE: kernel/kgdbstub.c:1198:
+void kgdb_console_write(struct console *co, const char *s, unsigned count)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1708: FILE: kernel/kgdbstub.c:1205:
+	if (!kgdb_connected) {
+		return;
+	}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1716: FILE: kernel/kgdbstub.c:1213:
+		if ((count << 1) > (BUFMAX - 2)) {
[...]
+		} else {
[...]

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1722: FILE: kernel/kgdbstub.c:1219:
+		for (i = 0; i < wcount; i++) {
+			bufptr = pack_hex_byte(bufptr, s[i]);
+		}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1730: FILE: kernel/kgdbstub.c:1227:
+
+	}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1756: FILE: kernel/kgdbstub.c:1253:
+EXPORT_SYMBOL(breakpoint);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1779: FILE: kernel/kgdbstub.c:1276:
+extern int kgdb8250_ttyS;

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1782: FILE: kernel/kgdbstub.c:1279:
+	kgdb8250_ttyS = simple_strtoul(str, NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1785: FILE: kernel/kgdbstub.c:1282:
+}
+static int __init opt_gdbbaud(char *str)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1787: FILE: kernel/kgdbstub.c:1284:
+	kgdb8250_baud = simple_strtoul(str, NULL, 10);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1799: FILE: kernel/kgdbstub.c:1296:
+__setup("gdbttyS=", opt_gdbttyS);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1800: FILE: kernel/kgdbstub.c:1297:
+__setup("gdbbaud=", opt_gdbbaud);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1802: FILE: kernel/kgdbstub.c:1299:
+__setup("gdb", opt_gdb);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1803: FILE: kernel/kgdbstub.c:1300:
+__setup("kgdbwait", opt_kgdb_enter);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1812: FILE: kernel/module.c:732:
+	notifier_call_chain(&module_notify_list, MODULE_STATE_GOING,
+				mod);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1826: FILE: kernel/module.c:1770:
+		notifier_call_chain(&module_notify_list, MODULE_STATE_GOING,
+					mod);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000303228.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 100 errors, 119 warnings, 98 checks, 1803 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000303228.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
