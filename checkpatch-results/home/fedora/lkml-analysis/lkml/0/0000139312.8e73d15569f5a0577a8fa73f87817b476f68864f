WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#86: FILE: mm/slob.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#129: FILE: mm/slob.c:44:
+};
+typedef struct slob_block slob_t;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#129: FILE: mm/slob.c:44:
+typedef struct slob_block slob_t;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#132: FILE: mm/slob.c:47:
+#define SLOB_UNITS(size) (((size) + SLOB_UNIT - 1)/SLOB_UNIT)
                                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#140: FILE: mm/slob.c:55:
+};
+typedef struct bigblock bigblock_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#140: FILE: mm/slob.c:55:
+typedef struct bigblock bigblock_t;

CHECK:BRACES: Unbalanced braces around else statement
#175: FILE: mm/slob.c:90:
+			else { /* fragment */

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#220: FILE: mm/slob.c:135:
+	if (b + b->units == cur->next) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#223: FILE: mm/slob.c:138:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#226: FILE: mm/slob.c:141:
+	if (cur + cur->units == b) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#229: FILE: mm/slob.c:144:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#241: FILE: mm/slob.c:156:
+	int order = 0;
+	for ( ; size > 4096 ; size >>=1)

ERROR:SPACING: spaces required around that '>>=' (ctx:WxV)
#241: FILE: mm/slob.c:156:
+	for ( ; size > 4096 ; size >>=1)
 	                           ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#276: FILE: mm/slob.c:191:
+EXPORT_SYMBOL(kmalloc);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:LINE_SPACING: Missing a blank line after declarations
#281: FILE: mm/slob.c:196:
+	void *ret = kmalloc(size, flags);
+	if (ret)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#286: FILE: mm/slob.c:201:
+EXPORT_SYMBOL(kzalloc);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#296: FILE: mm/slob.c:211:
+	if (!((unsigned int)block & (PAGE_SIZE-1))) {
 	                                      ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#313: FILE: mm/slob.c:228:
+	return;
+}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#315: FILE: mm/slob.c:230:
+EXPORT_SYMBOL(kfree);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#325: FILE: mm/slob.c:240:
+	if (!((unsigned int)block & (PAGE_SIZE-1))) {
 	                                      ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#341: FILE: mm/slob.c:256:
+	void (*ctor)(void *, kmem_cache_t *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#341: FILE: mm/slob.c:256:
+	void (*ctor)(void *, kmem_cache_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#341: FILE: mm/slob.c:256:
+	void (*ctor)(void *, kmem_cache_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#342: FILE: mm/slob.c:257:
+	void (*dtor)(void *, kmem_cache_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#342: FILE: mm/slob.c:257:
+	void (*dtor)(void *, kmem_cache_t *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#342: FILE: mm/slob.c:257:
+	void (*dtor)(void *, kmem_cache_t *, unsigned long);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#346: FILE: mm/slob.c:261:
+kmem_cache_t *kmem_cache_create(const char *name, size_t size, size_t align,
+	unsigned long flags,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#416: FILE: mm/slob.c:331:
+static struct timer_list slob_timer = TIMER_INITIALIZER(

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#421: FILE: mm/slob.c:336:
+	void *p = slob_alloc(PAGE_SIZE, 0, PAGE_SIZE-1);
 	                                            ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#437: FILE: mm/slob.c:352:
+	struct percpu_data *pdata = kmalloc(sizeof (*pdata), GFP_KERNEL);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#442: FILE: mm/slob.c:357:
+	for (i = 0; i < NR_CPUS; i++) {

CHECK:SPACING: No space is necessary after a cast
#452: FILE: mm/slob.c:367:
+	return (void *) (~(unsigned long) pdata);

CHECK:SPACING: No space is necessary after a cast
#469: FILE: mm/slob.c:384:
+	struct percpu_data *p = (struct percpu_data *) (~(unsigned long) objp);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#471: FILE: mm/slob.c:386:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#524: FILE: include/linux/slab.h:144:
+kmem_cache_t *kmem_find_general_cachep(size_t, gfp_t gfpflags);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#525: FILE: include/linux/slab.h:145:
+kmem_cache_t *kmem_cache_create(const char *c, size_t, size_t, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#525: FILE: include/linux/slab.h:145:
+kmem_cache_t *kmem_cache_create(const char *c, size_t, size_t, unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#525: FILE: include/linux/slab.h:145:
+kmem_cache_t *kmem_cache_create(const char *c, size_t, size_t, unsigned long,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#526: FILE: include/linux/slab.h:146:
+kmem_cache_t *kmem_cache_create(const char *c, size_t, size_t, unsigned long,
+	void (*)(void *, kmem_cache_t *, unsigned long),

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kmem_cache_t *' should also have an identifier name
#531: FILE: include/linux/slab.h:151:
+const char *kmem_cache_name(kmem_cache_t *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000139312.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 23 warnings, 16 checks, 504 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000139312.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
