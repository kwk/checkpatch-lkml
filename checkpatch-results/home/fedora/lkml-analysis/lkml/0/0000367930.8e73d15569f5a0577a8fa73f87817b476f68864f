WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#161: 
ftp://ftp.kernel.org/pub/linux/kernel/people/jgarzik/patchkits/2.4/2.4.21-rc3-atascsi1.patch.bz2

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#210: 
--- a/drivers/scsi/Kconfig	Sat May 24 14:36:45 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#216: FILE: drivers/scsi/Kconfig:403:
+config SCSI_ATA
+	bool "ATA support (EXPERIMENTAL)"
+	depends on SCSI && EXPERIMENTAL
+	help
+	  This driver family supports ATA host controllers and devices
+	  (a.k.a. IDE drives).
+
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#225: FILE: drivers/scsi/Kconfig:412:
+config SCSI_ATA_PATA
+	bool "Parallel ATA support (EXPERIMENTAL)"
+	depends on SCSI_ATA && EXPERIMENTAL
+	help
+	  This option enables support for parallel ATA host controllers.
+
+	  If unsure, say N.
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#261: FILE: drivers/scsi/ata_piix.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#262: FILE: drivers/scsi/ata_piix.c:2:
+/*
+	Copyright 2003 Red Hat Inc

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#265: FILE: drivers/scsi/ata_piix.c:5:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#274: FILE: drivers/scsi/ata_piix.c:14:
+
+

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#294: FILE: drivers/scsi/ata_piix.c:34:
+static int __devinit piix_init_one (struct pci_dev *pdev,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#294: FILE: drivers/scsi/ata_piix.c:34:
+static int __devinit piix_init_one (struct pci_dev *pdev,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#298: FILE: drivers/scsi/ata_piix.c:38:
+static void piix_set_piomode (struct ata_host *ah, struct ata_device *adev,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#300: FILE: drivers/scsi/ata_piix.c:40:
+static void piix_set_udmamode (struct ata_host *ah, struct ata_device *adev,

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#305: FILE: drivers/scsi/ata_piix.c:45:
+static struct pci_device_id piix_pci_tbl[] __devinitdata = {

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host_Template>
#321: FILE: drivers/scsi/ata_piix.c:61:
+static Scsi_Host_Template piix_sht = {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#338: FILE: drivers/scsi/ata_piix.c:78:
+struct ata_board ata_board_tbl[] __devinitdata = {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#423: FILE: drivers/scsi/ata_piix.c:163:
+static void piix_set_piomode (struct ata_host *ah, struct ata_device *adev,

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#428: FILE: drivers/scsi/ata_piix.c:168:
+	unsigned int master_port= ah->port_no ? 0x42 : 0x40;
 	                        ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#462: FILE: drivers/scsi/ata_piix.c:202:
+static void piix_set_udmamode (struct ata_host *ah, struct ata_device *adev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#463: FILE: drivers/scsi/ata_piix.c:203:
+static void piix_set_udmamode (struct ata_host *ah, struct ata_device *adev,
+			      unsigned int udma)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#487: FILE: drivers/scsi/ata_piix.c:227:
+	switch(speed) {
+		case XFER_UDMA_4:
+		case XFER_UDMA_2:	u_speed = 2 << (drive_dn * 4); break;
+		case XFER_UDMA_6:
+		case XFER_UDMA_5:
+		case XFER_UDMA_3:
+		case XFER_UDMA_1:	u_speed = 1 << (drive_dn * 4); break;
+		case XFER_UDMA_0:	u_speed = 0 << (drive_dn * 4); break;
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#487: FILE: drivers/scsi/ata_piix.c:227:
+	switch(speed) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#489: FILE: drivers/scsi/ata_piix.c:229:
+		case XFER_UDMA_2:	u_speed = 2 << (drive_dn * 4); break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#493: FILE: drivers/scsi/ata_piix.c:233:
+		case XFER_UDMA_1:	u_speed = 1 << (drive_dn * 4); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#494: FILE: drivers/scsi/ata_piix.c:234:
+		case XFER_UDMA_0:	u_speed = 0 << (drive_dn * 4); break;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#496: FILE: drivers/scsi/ata_piix.c:236:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#501: FILE: drivers/scsi/ata_piix.c:241:
+		pci_write_config_word(dev, 0x48, reg48|u_flag);
 		                                      ^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#502: FILE: drivers/scsi/ata_piix.c:242:
+	if (speed == XFER_UDMA_5) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#503: FILE: drivers/scsi/ata_piix.c:243:
+		pci_write_config_byte(dev, 0x55, (u8) reg55|w_flag);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#503: FILE: drivers/scsi/ata_piix.c:243:
+		pci_write_config_byte(dev, 0x55, (u8) reg55|w_flag);
 		                                           ^

CHECK:SPACING: No space is necessary after a cast
#505: FILE: drivers/scsi/ata_piix.c:245:
+		pci_write_config_byte(dev, 0x55, (u8) reg55 & ~w_flag);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#509: FILE: drivers/scsi/ata_piix.c:249:
+		pci_write_config_word(dev, 0x4a, reg4a|u_speed);
 		                                      ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#512: FILE: drivers/scsi/ata_piix.c:252:
+		if (!(reg54 & v_flag)) {
+			pci_write_config_word(dev, 0x54, reg54|v_flag);
+		}

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#513: FILE: drivers/scsi/ata_piix.c:253:
+			pci_write_config_word(dev, 0x54, reg54|v_flag);
 			                                      ^

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#520: FILE: drivers/scsi/ata_piix.c:260:
+static int __devinit piix_init_one (struct pci_dev *pdev,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#520: FILE: drivers/scsi/ata_piix.c:260:
+static int __devinit piix_init_one (struct pci_dev *pdev,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#524: FILE: drivers/scsi/ata_piix.c:264:
+	unsigned is_sata = board_info->host_flags & ATA_FLAG_SATA;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#528: FILE: drivers/scsi/ata_piix.c:268:
+		printk(KERN_DEBUG DRV_NAME " version " DRV_VERSION "\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#577: FILE: drivers/scsi/libata.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#578: FILE: drivers/scsi/libata.c:2:
+/*
+   Copyright 2003 Red Hat, Inc.  All rights reserved.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#597: FILE: drivers/scsi/libata.c:21:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#608: FILE: drivers/scsi/libata.c:32:
+
+

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#622: FILE: drivers/scsi/libata.c:46:
+#include <asm/io.h>

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Cmnd>
#634: FILE: drivers/scsi/libata.c:58:
+	Scsi_Cmnd		*cmd;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'Scsi_Cmnd *' should also have an identifier name
#635: FILE: drivers/scsi/libata.c:59:
+	void			(*done)(Scsi_Cmnd *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'Scsi_Cmnd *' should also have an identifier name
#640: FILE: drivers/scsi/libata.c:64:
+			    void (*done)(Scsi_Cmnd *),

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#652: FILE: drivers/scsi/libata.c:76:
+static const char * thr_state_name[] = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#652: FILE: drivers/scsi/libata.c:76:
+static const char * thr_state_name[] = {

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#730: FILE: drivers/scsi/libata.c:154:
+static inline void ata_exec(struct ata_host *ah, struct ata_taskfile *tf,
+			   unsigned int bus_state)

WARNING:LINE_SPACING: Missing a blank line after declarations
#757: FILE: drivers/scsi/libata.c:181:
+		u16 data = inw(ioaddr->cmd_addr + ATA_REG_DATA);
+		tf->data = data & 0xff;

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#777: FILE: drivers/scsi/libata.c:201:
+static const char * udma_str[] = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#777: FILE: drivers/scsi/libata.c:201:
+static const char * udma_str[] = {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tf->lbam == 0'
#807: FILE: drivers/scsi/libata.c:231:
+	if (((tf->lbam == 0) && (tf->lbah == 0)) ||
+	    ((tf->lbam == 0x3c) && (tf->lbah == 0xc3))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tf->lbah == 0'
#807: FILE: drivers/scsi/libata.c:231:
+	if (((tf->lbam == 0) && (tf->lbah == 0)) ||
+	    ((tf->lbam == 0x3c) && (tf->lbah == 0xc3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tf->lbam == 0x3c'
#807: FILE: drivers/scsi/libata.c:231:
+	if (((tf->lbam == 0) && (tf->lbah == 0)) ||
+	    ((tf->lbam == 0x3c) && (tf->lbah == 0xc3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tf->lbah == 0xc3'
#807: FILE: drivers/scsi/libata.c:231:
+	if (((tf->lbam == 0) && (tf->lbah == 0)) ||
+	    ((tf->lbam == 0x3c) && (tf->lbah == 0xc3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tf->lbam == 0x14'
#813: FILE: drivers/scsi/libata.c:237:
+	if (((tf->lbam == 0x14) && (tf->lbah == 0xeb)) ||
+	    ((tf->lbam == 0x69) && (tf->lbah == 0x96))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tf->lbah == 0xeb'
#813: FILE: drivers/scsi/libata.c:237:
+	if (((tf->lbam == 0x14) && (tf->lbah == 0xeb)) ||
+	    ((tf->lbam == 0x69) && (tf->lbah == 0x96))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tf->lbam == 0x69'
#813: FILE: drivers/scsi/libata.c:237:
+	if (((tf->lbam == 0x14) && (tf->lbah == 0xeb)) ||
+	    ((tf->lbam == 0x69) && (tf->lbah == 0x96))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tf->lbah == 0x96'
#813: FILE: drivers/scsi/libata.c:237:
+	if (((tf->lbam == 0x14) && (tf->lbah == 0xeb)) ||
+	    ((tf->lbam == 0x69) && (tf->lbah == 0x96))) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#833: FILE: drivers/scsi/libata.c:257:
+		ret = c = dev->id[ofs] & 0xff;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#858: FILE: drivers/scsi/libata.c:282:
+static u8 ata_dev_select(struct ata_host *ah, unsigned int device,
+			   unsigned int unconditional, unsigned int islba)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#863: FILE: drivers/scsi/libata.c:287:
+	newtmp = tmp = inb(ioaddr->cmd_addr + ATA_REG_DEVICE);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#865: FILE: drivers/scsi/libata.c:289:
+	if (device == 0) {
[...]
+	} else {
[...]

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp != newtmp'
#874: FILE: drivers/scsi/libata.c:298:
+	if (unconditional || (tmp != newtmp)) {

CHECK:SPACING: No space is necessary after a cast
#881: FILE: drivers/scsi/libata.c:305:
+		DPRINTK("Using cached Device reg, 0x%X\n", (u32) tmp);

WARNING:SPLIT_STRING: quoted string split across lines
#892: FILE: drivers/scsi/libata.c:316:
+	DPRINTK("49==0x%04x  "
+		"53==0x%04x  "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#893: FILE: drivers/scsi/libata.c:317:
+		"53==0x%04x  "
+		"63==0x%04x  "

WARNING:SPLIT_STRING: quoted string split across lines
#894: FILE: drivers/scsi/libata.c:318:
+		"63==0x%04x  "
+		"64==0x%04x  "

WARNING:SPLIT_STRING: quoted string split across lines
#895: FILE: drivers/scsi/libata.c:319:
+		"64==0x%04x  "
+		"75==0x%04x  \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#895: FILE: drivers/scsi/libata.c:319:
+		"75==0x%04x  \n",

WARNING:SPLIT_STRING: quoted string split across lines
#902: FILE: drivers/scsi/libata.c:326:
+	DPRINTK("80==0x%04x  "
+		"81==0x%04x  "

WARNING:SPLIT_STRING: quoted string split across lines
#903: FILE: drivers/scsi/libata.c:327:
+		"81==0x%04x  "
+		"82==0x%04x  "

WARNING:SPLIT_STRING: quoted string split across lines
#904: FILE: drivers/scsi/libata.c:328:
+		"82==0x%04x  "
+		"83==0x%04x  "

WARNING:SPLIT_STRING: quoted string split across lines
#905: FILE: drivers/scsi/libata.c:329:
+		"83==0x%04x  "
+		"84==0x%04x  \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#905: FILE: drivers/scsi/libata.c:329:
+		"84==0x%04x  \n",

WARNING:SPLIT_STRING: quoted string split across lines
#912: FILE: drivers/scsi/libata.c:336:
+	DPRINTK("88==0x%04x  "
+		"93==0x%04x\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#934: FILE: drivers/scsi/libata.c:358:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#936: FILE: drivers/scsi/libata.c:360:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#938: FILE: drivers/scsi/libata.c:362:
+		BUG();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#961: FILE: drivers/scsi/libata.c:385:
+	assert (((status & ATA_BUSY) == 0) && (status & ATA_DRQ));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1010: FILE: drivers/scsi/libata.c:434:
+		printk(KERN_INFO "ata%u: dev %u ATA, max %s, %Lu sectors\n",

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#1010: FILE: drivers/scsi/libata.c:434:
+		printk(KERN_INFO "ata%u: dev %u ATA, max %s, %Lu sectors\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1021: FILE: drivers/scsi/libata.c:445:
+		printk(KERN_INFO "ata%u: dev %u ATAPI, max %s\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1030: FILE: drivers/scsi/libata.c:454:
+	printk(KERN_WARNING "ata%u: dev %u not supported, ignoring\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'devsel == 0xff'
#1082: FILE: drivers/scsi/libata.c:506:
+	if ((devsel == 0xff) && (err == 0xff) && (status == 0xff)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'err == 0xff'
#1082: FILE: drivers/scsi/libata.c:506:
+	if ((devsel == 0xff) && (err == 0xff) && (status == 0xff)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'status == 0xff'
#1082: FILE: drivers/scsi/libata.c:506:
+	if ((devsel == 0xff) && (err == 0xff) && (status == 0xff)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'err == 0x01'
#1092: FILE: drivers/scsi/libata.c:516:
+	if ((err == 0x01) || (err == 0x81)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'err == 0x81'
#1092: FILE: drivers/scsi/libata.c:516:
+	if ((err == 0x01) || (err == 0x81)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!slave_possible'
#1103: FILE: drivers/scsi/libata.c:527:
+		if ((!slave_possible) || (err == 0x81))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'err == 0x81'
#1103: FILE: drivers/scsi/libata.c:527:
+		if ((!slave_possible) || (err == 0x81))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!slave_possible'
#1110: FILE: drivers/scsi/libata.c:534:
+		if ((!slave_possible) || (err == 0x80) ||
+		    ((err >= 0x82) && (err <= 0xff)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'err == 0x80'
#1110: FILE: drivers/scsi/libata.c:534:
+		if ((!slave_possible) || (err == 0x80) ||
+		    ((err >= 0x82) && (err <= 0xff)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'err >= 0x82'
#1110: FILE: drivers/scsi/libata.c:534:
+		if ((!slave_possible) || (err == 0x80) ||
+		    ((err >= 0x82) && (err <= 0xff)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'err <= 0xff'
#1110: FILE: drivers/scsi/libata.c:534:
+		if ((!slave_possible) || (err == 0x80) ||
+		    ((err >= 0x82) && (err <= 0xff)))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1132: FILE: drivers/scsi/libata.c:556:
+	assert (ata_dev_present(master) || ata_dev_present(slave));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1142: FILE: drivers/scsi/libata.c:566:
+		printk(KERN_WARNING "ata%u: no PIO3/4 support, ignoring\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1171: FILE: drivers/scsi/libata.c:595:
+	assert (ata_dev_present(master) || ata_dev_present(slave));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1172: FILE: drivers/scsi/libata.c:596:
+	assert ((ah->flags & ATA_FLAG_PORT_DISABLED) == 0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1201: FILE: drivers/scsi/libata.c:625:
+		printk(KERN_WARNING "ata%u: no UltraDMA support, ignoring\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1259: FILE: drivers/scsi/libata.c:683:
+	printk(KERN_INFO "ata%u: dev %u configured for %s\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1278: FILE: drivers/scsi/libata.c:702:
+	printk(KERN_INFO "ata%u: dev %u configured for PIO%c\n",

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1313: FILE: drivers/scsi/libata.c:737:
+
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#1342: FILE: drivers/scsi/libata.c:766:
+		int dir = scsi_to_pci_dma_dir(cmd->sc_data_direction);
+		n_elem = pci_map_sg(ah->host_set->pdev, sg, cmd->use_sg, dir);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1351: FILE: drivers/scsi/libata.c:775:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1402: FILE: drivers/scsi/libata.c:826:
+		BUG();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1420: FILE: drivers/scsi/libata.c:844:
+static void ata_pio_start (struct ata_host *ah, struct ata_queued_cmd *qc)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1430: FILE: drivers/scsi/libata.c:854:
+static void ata_pio_complete (struct ata_host *ah)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1435: FILE: drivers/scsi/libata.c:859:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'hueristic' may be misspelled - perhaps 'heuristic'?
#1437: FILE: drivers/scsi/libata.c:861:
+	 * This is purely hueristic.  This is a fast path.
 	                  ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#1446: FILE: drivers/scsi/libata.c:870:
+		msleep(2);

WARNING:TYPO_SPELLING: 'hueristic' may be misspelled - perhaps 'heuristic'?
#1496: FILE: drivers/scsi/libata.c:920:
+	 * This is purely hueristic.  This is a fast path.
 	                  ^^^^^^^^^

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#1505: FILE: drivers/scsi/libata.c:929:
+		msleep(2);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1532: FILE: drivers/scsi/libata.c:956:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1551: FILE: drivers/scsi/libata.c:975:
+static void ata_dma_start (struct ata_host *ah, struct ata_queued_cmd *qc)

CHECK:SPACING: No space is necessary after a cast
#1603: FILE: drivers/scsi/libata.c:1027:
+		ah->id, (u32) host_stat, (u32) drv_stat);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1607: FILE: drivers/scsi/libata.c:1031:
+	if (!(qc->flags & ATA_QCFLAG_ACTIVE))
[...]
+	else {
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1608: FILE: drivers/scsi/libata.c:1032:
+		printk(KERN_ERR "ata%u: BUG: SCSI cmd not active\n", ah->id);

CHECK:BRACES: Unbalanced braces around else statement
#1609: FILE: drivers/scsi/libata.c:1033:
+	else {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1623: FILE: drivers/scsi/libata.c:1047:
+static inline unsigned int ata_host_intr (struct ata_host *ah)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1638: FILE: drivers/scsi/libata.c:1062:
+			printk(KERN_WARNING "ata%d: irq trap\n", ah->id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1686: FILE: drivers/scsi/libata.c:1110:
+		printk(KERN_DEBUG "ata%u: unhandled bus state %u\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1694: FILE: drivers/scsi/libata.c:1118:
+			printk(KERN_WARNING "ata%d: irq trap\n", ah->id);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1703: FILE: drivers/scsi/libata.c:1127:
+static irqreturn_t ata_interrupt (int irq, void *dev_instance,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1747: FILE: drivers/scsi/libata.c:1171:
+		printk(KERN_WARNING "ata%u: DMA timeout\n", ah->id);

CHECK:SPACING: No space is necessary after a cast
#1765: FILE: drivers/scsi/libata.c:1189:
+	struct ata_host *ah = (struct ata_host *) opaque;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1806: FILE: drivers/scsi/libata.c:1230:
+		if (!ata_dev_present(&ah->device[0]) &&
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1810: FILE: drivers/scsi/libata.c:1234:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1879: FILE: drivers/scsi/libata.c:1303:
+		printk(KERN_ERR "ata%d: FIXME: THR_PIO_TMOUT\n", /* FIXME */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1885: FILE: drivers/scsi/libata.c:1309:
+		printk(KERN_ERR "ata%d: FIXME: THR_PIO_ERR\n", /* FIXME */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1900: FILE: drivers/scsi/libata.c:1324:
+static int ata_thread (void *data)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1902: FILE: drivers/scsi/libata.c:1326:
+        struct ata_host *ah = data;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1902: FILE: drivers/scsi/libata.c:1326:
+        struct ata_host *ah = data;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1905: FILE: drivers/scsi/libata.c:1329:
+	daemonize ("katad-%u", ah->id);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1908: FILE: drivers/scsi/libata.c:1332:
+        while (1) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1908: FILE: drivers/scsi/libata.c:1332:
+        while (1) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1913: FILE: drivers/scsi/libata.c:1337:
+                if (signal_pending (current))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1913: FILE: drivers/scsi/libata.c:1337:
+                if (signal_pending (current))$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1913: FILE: drivers/scsi/libata.c:1337:
+                if (signal_pending (current))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1914: FILE: drivers/scsi/libata.c:1338:
+                        flush_signals(current);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1914: FILE: drivers/scsi/libata.c:1338:
+                        flush_signals(current);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1916: FILE: drivers/scsi/libata.c:1340:
+                if ((timeout < 0) || (ah->time_to_die))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1916: FILE: drivers/scsi/libata.c:1340:
+                if ((timeout < 0) || (ah->time_to_die))$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'timeout < 0'
#1916: FILE: drivers/scsi/libata.c:1340:
+                if ((timeout < 0) || (ah->time_to_die))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ah->time_to_die'
#1916: FILE: drivers/scsi/libata.c:1340:
+                if ((timeout < 0) || (ah->time_to_die))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1917: FILE: drivers/scsi/libata.c:1341:
+                        break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1917: FILE: drivers/scsi/libata.c:1341:
+                        break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1919: FILE: drivers/scsi/libata.c:1343:
+ ^I^I/* note sleeping for full timeout not guaranteed (that's ok) */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1919: FILE: drivers/scsi/libata.c:1343:
+ ^I^I/* note sleeping for full timeout not guaranteed (that's ok) */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1919: FILE: drivers/scsi/libata.c:1343:
+ ^I^I/* note sleeping for full timeout not guaranteed (that's ok) */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1924: FILE: drivers/scsi/libata.c:1348:
+                ^Iif (signal_pending (current))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1924: FILE: drivers/scsi/libata.c:1348:
+                ^Iif (signal_pending (current))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1924: FILE: drivers/scsi/libata.c:1348:
+                ^Iif (signal_pending (current))$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1924: FILE: drivers/scsi/libata.c:1348:
+                	if (signal_pending (current))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1925: FILE: drivers/scsi/libata.c:1349:
+                        ^Iflush_signals(current);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1925: FILE: drivers/scsi/libata.c:1349:
+                        ^Iflush_signals(current);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1925: FILE: drivers/scsi/libata.c:1349:
+                        ^Iflush_signals(current);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1927: FILE: drivers/scsi/libata.c:1351:
+                ^Iif (ah->time_to_die)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1927: FILE: drivers/scsi/libata.c:1351:
+                ^Iif (ah->time_to_die)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1927: FILE: drivers/scsi/libata.c:1351:
+                ^Iif (ah->time_to_die)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1928: FILE: drivers/scsi/libata.c:1352:
+                        ^Ibreak;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1928: FILE: drivers/scsi/libata.c:1352:
+                        ^Ibreak;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1928: FILE: drivers/scsi/libata.c:1352:
+                        ^Ibreak;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1930: FILE: drivers/scsi/libata.c:1354:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1930: FILE: drivers/scsi/libata.c:1354:
+        }$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1932: FILE: drivers/scsi/libata.c:1356:
+	printk(KERN_INFO "ata%u: thread exiting\n", ah->id);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1934: FILE: drivers/scsi/libata.c:1358:
+        complete_and_exit (&ah->thr_exited, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1934: FILE: drivers/scsi/libata.c:1358:
+        complete_and_exit (&ah->thr_exited, 0);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1934: FILE: drivers/scsi/libata.c:1358:
+        complete_and_exit (&ah->thr_exited, 0);

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host>
#1957: FILE: drivers/scsi/libata.c:1381:
+int ata_scsi_error(struct Scsi_Host *host)

CHECK:SPACING: No space is necessary after a cast
#1964: FILE: drivers/scsi/libata.c:1388:
+	ah = (struct ata_host *) &host->hostdata[0];

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1994: FILE: drivers/scsi/libata.c:1418:
+	qc->cursect = qc->cursg = qc->cursg_ofs = 0;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2041: FILE: drivers/scsi/libata.c:1465:
+			 * -may- be too large. */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2062: FILE: drivers/scsi/libata.c:1486:
+		qc->nsect = tf->nsect = scsicmd[4];

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2141: FILE: drivers/scsi/libata.c:1565:
+		printk(KERN_ERR "ata%u: BUG: cmd->use_sg == 0\n", ah->id);

CHECK:SPACING: No space is necessary after a cast
#2166: FILE: drivers/scsi/libata.c:1590:
+		sg = (struct scatterlist *) cmd->request_buffer;

CHECK:SPACING: No space is necessary after a cast
#2184: FILE: drivers/scsi/libata.c:1608:
+		sg = (struct scatterlist *) cmd->request_buffer;

CHECK:SPACING: No space is necessary after a cast
#2235: FILE: drivers/scsi/libata.c:1659:
+		ata_dev_id_string(args->dev, (unsigned char *) &reqbuf[4],

ERROR:CODE_INDENT: code indent should use tabs where possible
#2262: FILE: drivers/scsi/libata.c:1686:
+^I^I^I        unsigned int buflen)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2262: FILE: drivers/scsi/libata.c:1686:
+static void ata_scsiop_read_cap(struct ata_scsi_args *args, u8 *reqbuf,
+			        unsigned int buflen)

WARNING:SPACING: Unnecessary space before function pointer arguments
#2304: FILE: drivers/scsi/libata.c:1728:
+			     void (*actor) (struct ata_scsi_args *args,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2305: FILE: drivers/scsi/libata.c:1729:
+^I^I^I     ^I^I    u8 *reqbuf,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2305: FILE: drivers/scsi/libata.c:1729:
+^I^I^I     ^I^I    u8 *reqbuf,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2305: FILE: drivers/scsi/libata.c:1729:
+			     void (*actor) (struct ata_scsi_args *args,
+			     		    u8 *reqbuf,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd->device->channel != 0'
#2350: FILE: drivers/scsi/libata.c:1774:
+	if ((cmd->device->channel != 0) || (cmd->device->lun != 0) ||
+	    (cmd->device->id >= ATA_MAX_DEVICES)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd->device->lun != 0'
#2350: FILE: drivers/scsi/libata.c:1774:
+	if ((cmd->device->channel != 0) || (cmd->device->lun != 0) ||
+	    (cmd->device->id >= ATA_MAX_DEVICES)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd->device->id >= ATA_MAX_DEVICES'
#2350: FILE: drivers/scsi/libata.c:1774:
+	if ((cmd->device->channel != 0) || (cmd->device->lun != 0) ||
+	    (cmd->device->id >= ATA_MAX_DEVICES)) {

CHECK:SPACING: No space is necessary after a cast
#2357: FILE: drivers/scsi/libata.c:1781:
+	ah = (struct ata_host *) &cmd->device->host->hostdata[0];

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#2379: FILE: drivers/scsi/libata.c:1803:
+	switch(scsicmd[0]) {
+		case READ_6:
+		case WRITE_6:
[...]
+		case READ_10:
+		case WRITE_10:
[...]
+		case READ_16:
+		case WRITE_16:
[...]
+		default:

ERROR:SPACING: space required before the open parenthesis '('
#2379: FILE: drivers/scsi/libata.c:1803:
+	switch(scsicmd[0]) {

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#2409: FILE: drivers/scsi/libata.c:1833:
+	switch(scsicmd[0]) {
+		case TEST_UNIT_READY:		/* FIXME: correct? */
+		case FORMAT_UNIT:		/* FIXME: correct? */
+		case SEND_DIAGNOSTIC:		/* FIXME: correct? */
[...]
+		case INQUIRY:
[...]
+		case READ_CAPACITY:
[...]
+		case SERVICE_ACTION_IN:
[...]
+		case REPORT_LUNS:
[...]
+		case REQUEST_SENSE:
[...]
+		default:

ERROR:SPACING: space required before the open parenthesis '('
#2409: FILE: drivers/scsi/libata.c:1833:
+	switch(scsicmd[0]) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2471: FILE: drivers/scsi/libata.c:1895:
+static struct ata_host * __init ata_host_add(struct ata_probe_ent *ent,
+				struct ata_host_set *host_set,

CHECK:SPACING: No space is necessary after a cast
#2490: FILE: drivers/scsi/libata.c:1914:
+	ah = (struct ata_host *) &host->hostdata[0];

CHECK:SPACING: No space is necessary after a cast
#2512: FILE: drivers/scsi/libata.c:1936:
+	ah->thr_timer.data = (unsigned long) ah;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2527: FILE: drivers/scsi/libata.c:1951:
+		printk(KERN_ERR "ata%d: unable to start kernel thread\n",

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*host_set)...) over kmalloc(sizeof(struct ata_host_set)...)
#2550: FILE: drivers/scsi/libata.c:1974:
+	host_set = kmalloc(sizeof(struct ata_host_set) +

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2571: FILE: drivers/scsi/libata.c:1995:
+		printk(KERN_INFO "ata%u: %cATA max %s cmd 0x%lX ctl 0x%lX "

WARNING:SPLIT_STRING: quoted string split across lines
#2572: FILE: drivers/scsi/libata.c:1996:
+		printk(KERN_INFO "ata%u: %cATA max %s cmd 0x%lX ctl 0x%lX "
+				 "bmdma 0x%lX irq %lu\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#2576: FILE: drivers/scsi/libata.c:2000:
+^I       ^I^Ihost->ioaddr.cmd_addr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2576: FILE: drivers/scsi/libata.c:2000:
+^I       ^I^Ihost->ioaddr.cmd_addr,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2577: FILE: drivers/scsi/libata.c:2001:
+^I       ^I^Ihost->ioaddr.ctl_addr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2577: FILE: drivers/scsi/libata.c:2001:
+^I       ^I^Ihost->ioaddr.ctl_addr,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2578: FILE: drivers/scsi/libata.c:2002:
+^I       ^I^Ihost->ioaddr.bmdma_addr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2578: FILE: drivers/scsi/libata.c:2002:
+^I       ^I^Ihost->ioaddr.bmdma_addr,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2579: FILE: drivers/scsi/libata.c:2003:
+^I       ^I^Ient->irq);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2579: FILE: drivers/scsi/libata.c:2003:
+^I       ^I^Ient->irq);$

CHECK:SPACING: No space is necessary after a cast
#2651: FILE: drivers/scsi/libata.c:2075:
+	struct ata_host *ah = (struct ata_host *) &host->hostdata[0];

WARNING:MEMORY_BARRIER: memory barrier without comment
#2658: FILE: drivers/scsi/libata.c:2082:
+		wmb();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2661: FILE: drivers/scsi/libata.c:2085:
+			printk(KERN_ERR "ata%d: unable to kill kernel thread\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2675: FILE: drivers/scsi/libata.c:2099:
+int ata_pci_init_one (struct pci_dev *pdev, struct ata_board *board_info,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2742: FILE: drivers/scsi/libata.c:2166:
+		probe_ent2->port[0].bmdma_addr = pci_resource_start(pdev, 4)+8;
 		                                                            ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2785: FILE: drivers/scsi/libata.c:2209:
+void ata_pci_remove_one (struct pci_dev *pdev)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2801: FILE: drivers/scsi/libata.c:2225:
+	printk(KERN_DEBUG "libata version " DRV_VERSION " loaded.\n");

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2807: FILE: drivers/scsi/libata.c:2231:
+EXPORT_SYMBOL(ata_port_probe);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2808: FILE: drivers/scsi/libata.c:2232:
+EXPORT_SYMBOL(ata_port_disable);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2809: FILE: drivers/scsi/libata.c:2233:
+EXPORT_SYMBOL(ata_pci_init_one);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2810: FILE: drivers/scsi/libata.c:2234:
+EXPORT_SYMBOL(ata_pci_remove_one);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2811: FILE: drivers/scsi/libata.c:2235:
+EXPORT_SYMBOL(ata_scsi_detect);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2812: FILE: drivers/scsi/libata.c:2236:
+EXPORT_SYMBOL(ata_scsi_release);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2813: FILE: drivers/scsi/libata.c:2237:
+EXPORT_SYMBOL(ata_scsi_queuecmd);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2814: FILE: drivers/scsi/libata.c:2238:
+EXPORT_SYMBOL(ata_scsi_error);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2820: FILE: include/linux/ata.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2821: FILE: include/linux/ata.h:2:
+/*
+   Copyright 2003 Red Hat, Inc.  All rights reserved.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2824: FILE: include/linux/ata.h:5:
+   The contents of this file are subject to the Open $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2860: FILE: include/linux/ata.h:41:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2863: FILE: include/linux/ata.h:44:
+#define DPRINTK(fmt, args...) printk(KERN_ERR "%s: " fmt, __FUNCTION__, ## args)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2863: FILE: include/linux/ata.h:44:
+#define DPRINTK(fmt, args...) printk(KERN_ERR "%s: " fmt, __FUNCTION__, ## args)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2865: FILE: include/linux/ata.h:46:
+#define VPRINTK(fmt, args...) printk(KERN_ERR "%s: " fmt, __FUNCTION__, ## args)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2865: FILE: include/linux/ata.h:46:
+#define VPRINTK(fmt, args...) printk(KERN_ERR "%s: " fmt, __FUNCTION__, ## args)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2877: FILE: include/linux/ata.h:58:
+#define assert(expr) \
+        if(!(expr)) {                                   \
+        printk(KERN_ERR "Assertion failed! %s,%s,%s,line=%d\n", \
+        #expr,__FILE__,__FUNCTION__,__LINE__);          \
+        }

ERROR:CODE_INDENT: code indent should use tabs where possible
#2878: FILE: include/linux/ata.h:59:
+        if(!(expr)) {                                   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2878: FILE: include/linux/ata.h:59:
+        if(!(expr)) {                                   \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#2878: FILE: include/linux/ata.h:59:
+        if(!(expr)) {                                   \
+        printk(KERN_ERR "Assertion failed! %s,%s,%s,line=%d\n", \

ERROR:SPACING: space required before the open parenthesis '('
#2878: FILE: include/linux/ata.h:59:
+        if(!(expr)) {                                   \

ERROR:CODE_INDENT: code indent should use tabs where possible
#2879: FILE: include/linux/ata.h:60:
+        printk(KERN_ERR "Assertion failed! %s,%s,%s,line=%d\n", \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2879: FILE: include/linux/ata.h:60:
+        printk(KERN_ERR "Assertion failed! %s,%s,%s,line=%d\n", \$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2879: FILE: include/linux/ata.h:60:
+        printk(KERN_ERR "Assertion failed! %s,%s,%s,line=%d\n", \

ERROR:CODE_INDENT: code indent should use tabs where possible
#2880: FILE: include/linux/ata.h:61:
+        #expr,__FILE__,__FUNCTION__,__LINE__);          \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2880: FILE: include/linux/ata.h:61:
+        #expr,__FILE__,__FUNCTION__,__LINE__);          \
              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2880: FILE: include/linux/ata.h:61:
+        #expr,__FILE__,__FUNCTION__,__LINE__);          \
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2880: FILE: include/linux/ata.h:61:
+        #expr,__FILE__,__FUNCTION__,__LINE__);          \
                                    ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2880: FILE: include/linux/ata.h:61:
+        #expr,__FILE__,__FUNCTION__,__LINE__);          \

ERROR:CODE_INDENT: code indent should use tabs where possible
#2881: FILE: include/linux/ata.h:62:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2881: FILE: include/linux/ata.h:62:
+        }$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#3055: FILE: include/linux/ata.h:236:
+} __attribute__((packed));

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#3080: FILE: include/linux/ata.h:261:
+	spinlock_t		lock;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#3084: FILE: include/linux/ata.h:265:
+	struct ata_host *	hosts[0];

WARNING:FUNCTION_ARGUMENTS: function definition argument 'Scsi_Cmnd *' should also have an identifier name
#3118: FILE: include/linux/ata.h:299:
+	void			(*done)(Scsi_Cmnd *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#3181: FILE: include/linux/ata.h:362:
+	void (*port_probe) (struct ata_host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_host *' should also have an identifier name
#3181: FILE: include/linux/ata.h:362:
+	void (*port_probe) (struct ata_host *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#3182: FILE: include/linux/ata.h:363:
+	void (*port_disable) (struct ata_host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_host *' should also have an identifier name
#3182: FILE: include/linux/ata.h:363:
+	void (*port_disable) (struct ata_host *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#3184: FILE: include/linux/ata.h:365:
+	void (*set_piomode) (struct ata_host *, struct ata_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_host *' should also have an identifier name
#3184: FILE: include/linux/ata.h:365:
+	void (*set_piomode) (struct ata_host *, struct ata_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#3184: FILE: include/linux/ata.h:365:
+	void (*set_piomode) (struct ata_host *, struct ata_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#3184: FILE: include/linux/ata.h:365:
+	void (*set_piomode) (struct ata_host *, struct ata_device *,

WARNING:SPACING: Unnecessary space before function pointer arguments
#3186: FILE: include/linux/ata.h:367:
+	void (*set_udmamode) (struct ata_host *, struct ata_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_host *' should also have an identifier name
#3186: FILE: include/linux/ata.h:367:
+	void (*set_udmamode) (struct ata_host *, struct ata_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#3186: FILE: include/linux/ata.h:367:
+	void (*set_udmamode) (struct ata_host *, struct ata_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#3186: FILE: include/linux/ata.h:367:
+	void (*set_udmamode) (struct ata_host *, struct ata_device *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3187: FILE: include/linux/ata.h:368:
+	void (*set_udmamode) (struct ata_host *, struct ata_device *,
+			     unsigned int);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3201: FILE: include/linux/ata.h:382:
+#define ata_id_u32(dev,n)	\
                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#3201: FILE: include/linux/ata.h:382:
+#define ata_id_u32(dev,n)	\
+	(((u32) (dev)->id[(n) + 1] << 16) | ((u32) (dev)->id[(n)]))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#3201: FILE: include/linux/ata.h:382:
+#define ata_id_u32(dev,n)	\
+	(((u32) (dev)->id[(n) + 1] << 16) | ((u32) (dev)->id[(n)]))

CHECK:SPACING: No space is necessary after a cast
#3202: FILE: include/linux/ata.h:383:
+	(((u32) (dev)->id[(n) + 1] << 16) | ((u32) (dev)->id[(n)]))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3203: FILE: include/linux/ata.h:384:
+#define ata_id_u64(dev,n)	\
                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#3203: FILE: include/linux/ata.h:384:
+#define ata_id_u64(dev,n)	\
+	( ((u64) dev->id[(n) + 3] << 48) |	\
+	  ((u64) dev->id[(n) + 2] << 32) |	\
+	  ((u64) dev->id[(n) + 1] << 16) |	\
+	  ((u64) dev->id[(n) + 0]) )  

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dev' may be better as '(dev)' to avoid precedence issues
#3203: FILE: include/linux/ata.h:384:
+#define ata_id_u64(dev,n)	\
+	( ((u64) dev->id[(n) + 3] << 48) |	\
+	  ((u64) dev->id[(n) + 2] << 32) |	\
+	  ((u64) dev->id[(n) + 1] << 16) |	\
+	  ((u64) dev->id[(n) + 0]) )  

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#3203: FILE: include/linux/ata.h:384:
+#define ata_id_u64(dev,n)	\
+	( ((u64) dev->id[(n) + 3] << 48) |	\
+	  ((u64) dev->id[(n) + 2] << 32) |	\
+	  ((u64) dev->id[(n) + 1] << 16) |	\
+	  ((u64) dev->id[(n) + 0]) )  

CHECK:SPACING: No space is necessary after a cast
#3204: FILE: include/linux/ata.h:385:
+	( ((u64) dev->id[(n) + 3] << 48) |	\

ERROR:SPACING: space prohibited after that open parenthesis '('
#3204: FILE: include/linux/ata.h:385:
+	( ((u64) dev->id[(n) + 3] << 48) |	\

CHECK:SPACING: No space is necessary after a cast
#3205: FILE: include/linux/ata.h:386:
+	  ((u64) dev->id[(n) + 2] << 32) |	\

CHECK:SPACING: No space is necessary after a cast
#3206: FILE: include/linux/ata.h:387:
+	  ((u64) dev->id[(n) + 1] << 16) |	\

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3207: FILE: include/linux/ata.h:388:
+^I  ((u64) dev->id[(n) + 0]) )  $

CHECK:SPACING: No space is necessary after a cast
#3207: FILE: include/linux/ata.h:388:
+	  ((u64) dev->id[(n) + 0]) )  

ERROR:SPACING: space prohibited before that close parenthesis ')'
#3207: FILE: include/linux/ata.h:388:
+	  ((u64) dev->id[(n) + 0]) )  

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3209: FILE: include/linux/ata.h:390:
+extern void ata_port_probe(struct ata_host *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3210: FILE: include/linux/ata.h:391:
+extern void ata_port_disable(struct ata_host *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_host *' should also have an identifier name
#3210: FILE: include/linux/ata.h:391:
+extern void ata_port_disable(struct ata_host *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#3211: FILE: include/linux/ata.h:392:
+extern int ata_pci_init_one (struct pci_dev *, struct ata_board *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3211: FILE: include/linux/ata.h:392:
+extern int ata_pci_init_one (struct pci_dev *, struct ata_board *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#3211: FILE: include/linux/ata.h:392:
+extern int ata_pci_init_one (struct pci_dev *, struct ata_board *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_board *' should also have an identifier name
#3211: FILE: include/linux/ata.h:392:
+extern int ata_pci_init_one (struct pci_dev *, struct ata_board *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_host_ops *' should also have an identifier name
#3211: FILE: include/linux/ata.h:392:
+extern int ata_pci_init_one (struct pci_dev *, struct ata_board *,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#3213: FILE: include/linux/ata.h:394:
+extern void ata_pci_remove_one (struct pci_dev *pdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3213: FILE: include/linux/ata.h:394:
+extern void ata_pci_remove_one (struct pci_dev *pdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3214: FILE: include/linux/ata.h:395:
+extern int ata_scsi_detect(Scsi_Host_Template *sht);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3215: FILE: include/linux/ata.h:396:
+extern int ata_scsi_release(struct Scsi_Host *host);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3216: FILE: include/linux/ata.h:397:
+extern int ata_scsi_queuecmd(Scsi_Cmnd *cmd, void (*done)(Scsi_Cmnd *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3217: FILE: include/linux/ata.h:398:
+extern int ata_scsi_error(struct Scsi_Host *host);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#3241: FILE: include/linux/ata.h:422:
+		udelay(10);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

WARNING:LINE_SPACING: Missing a blank line after declarations
#3255: FILE: include/linux/ata.h:436:
+		unsigned long l = ioaddrs->cmd_addr + ATA_REG_STATUS;
+		printk(KERN_WARNING

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#3255: FILE: include/linux/ata.h:436:
+		printk(KERN_WARNING

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000367930.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 50 errors, 155 warnings, 89 checks, 3074 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000367930.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
