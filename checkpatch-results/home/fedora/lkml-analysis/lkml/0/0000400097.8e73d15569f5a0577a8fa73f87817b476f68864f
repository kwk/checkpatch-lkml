ERROR:TRAILING_WHITESPACE: trailing whitespace
#51: FILE: arch/i386/Kconfig:958:
+^I  interface instead (which is built automatically). $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#52: FILE: arch/i386/Kconfig:959:
+^I  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#53: FILE: arch/i386/Kconfig:960:
+^I  For details, take a look at linux/Documentation/cpufreq. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#54: FILE: arch/i386/Kconfig:961:
+^I  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#66: FILE: arch/i386/Kconfig:970:
+^I  uses a sysfs interface instead. Please note that some drivers do $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#123: FILE: kernel/cpufreq.c:89:
+static int cpufreq_parse_governor (char *str_governor, unsigned int *governor)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#125: FILE: kernel/cpufreq.c:91:
+	if (!strnicmp(str_governor, "performance", 11)) {
[...]
+	} else if (!strnicmp(str_governor, "powersave", 9)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#131: FILE: kernel/cpufreq.c:97:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#135: FILE: kernel/cpufreq.c:101:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#137: FILE: kernel/cpufreq.c:103:
+static int cpufreq_add_dev (struct device * dev);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#137: FILE: kernel/cpufreq.c:103:
+static int cpufreq_add_dev (struct device * dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#138: FILE: kernel/cpufreq.c:104:
+static int cpufreq_remove_dev (struct intf_data * dev);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#138: FILE: kernel/cpufreq.c:104:
+static int cpufreq_remove_dev (struct intf_data * dev);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#141: FILE: kernel/cpufreq.c:107:
+extern struct device_class cpu_devclass;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:CODE_INDENT: code indent should use tabs where possible
#144: FILE: kernel/cpufreq.c:110:
+        .name = "cpufreq",$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: kernel/cpufreq.c:110:
+        .name = "cpufreq",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#145: FILE: kernel/cpufreq.c:111:
+        .devclass = &cpu_devclass,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: kernel/cpufreq.c:111:
+        .devclass = &cpu_devclass,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#146: FILE: kernel/cpufreq.c:112:
+        .add_device = &cpufreq_add_dev,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: kernel/cpufreq.c:112:
+        .add_device = &cpufreq_add_dev,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#147: FILE: kernel/cpufreq.c:113:
+        .remove_device = &cpufreq_remove_dev,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: kernel/cpufreq.c:113:
+        .remove_device = &cpufreq_remove_dev,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#149: FILE: kernel/cpufreq.c:115:
+        .devnum = 0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: kernel/cpufreq.c:115:
+        .devnum = 0,$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#152: FILE: kernel/cpufreq.c:118:
+static inline int to_cpu_nr (struct device *dev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#154: FILE: kernel/cpufreq.c:120:
+	struct sys_device * cpu_sys_dev = container_of(dev, struct sys_device, dev);

WARNING:LINE_SPACING: Missing a blank line after declarations
#155: FILE: kernel/cpufreq.c:121:
+	struct sys_device * cpu_sys_dev = container_of(dev, struct sys_device, dev);
+	return (cpu_sys_dev->id);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#155: FILE: kernel/cpufreq.c:121:
+	return (cpu_sys_dev->id);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#158: FILE: kernel/cpufreq.c:124:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#166: FILE: kernel/cpufreq.c:132:
+#define cpufreq_per_cpu_attr_read(file_name, object) ^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#167: FILE: kernel/cpufreq.c:133:
+static ssize_t show_##file_name ^I^I^I^I^I\$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#180: FILE: kernel/cpufreq.c:146:
+	return sprintf (buf, "%u\n", value);				\

CHECK:LINE_SPACING: Please don't use multiple blank lines
#183: FILE: kernel/cpufreq.c:149:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#201: FILE: kernel/cpufreq.c:167:
+	ret = sscanf (buf, "%u", &policy.object);			\

CHECK:LINE_SPACING: Please don't use multiple blank lines
#212: FILE: kernel/cpufreq.c:178:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#216: FILE: kernel/cpufreq.c:182:
+static ssize_t show_scaling_governor (struct device *dev, char *buf)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#238: FILE: kernel/cpufreq.c:204:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#242: FILE: kernel/cpufreq.c:208:
+static ssize_t $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#243: FILE: kernel/cpufreq.c:209:
+store_scaling_governor (struct device *dev, const char *buf, size_t count) $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#243: FILE: kernel/cpufreq.c:209:
+store_scaling_governor (struct device *dev, const char *buf, size_t count) 

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#256: FILE: kernel/cpufreq.c:222:
+	ret = sscanf (buf, "%15s", str_governor);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#270: FILE: kernel/cpufreq.c:236:
+
+

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#274: FILE: kernel/cpufreq.c:240:
+#define cpufreq_per_cpu_attr_ro(file_name, object)			\
+cpufreq_per_cpu_attr_read(file_name, object) 				\
+static DEVICE_ATTR(file_name, S_IRUGO, show_##file_name, NULL);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'file_name' - possible side-effects?
#274: FILE: kernel/cpufreq.c:240:
+#define cpufreq_per_cpu_attr_ro(file_name, object)			\
+cpufreq_per_cpu_attr_read(file_name, object) 				\
+static DEVICE_ATTR(file_name, S_IRUGO, show_##file_name, NULL);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#274: FILE: kernel/cpufreq.c:240:
+#define cpufreq_per_cpu_attr_ro(file_name, object)			\
+cpufreq_per_cpu_attr_read(file_name, object) 				\
+static DEVICE_ATTR(file_name, S_IRUGO, show_##file_name, NULL);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#275: FILE: kernel/cpufreq.c:241:
+cpufreq_per_cpu_attr_read(file_name, object) ^I^I^I^I\$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#276: FILE: kernel/cpufreq.c:242:
+static DEVICE_ATTR(file_name, S_IRUGO, show_##file_name, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#278: FILE: kernel/cpufreq.c:244:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#282: FILE: kernel/cpufreq.c:248:
+#define cpufreq_per_cpu_attr_rw(file_name, object) ^I^I^I\$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#282: FILE: kernel/cpufreq.c:248:
+#define cpufreq_per_cpu_attr_rw(file_name, object) 			\
+cpufreq_per_cpu_attr_read(file_name, object) 				\
+cpufreq_per_cpu_attr_write(file_name, object) 				\
+static DEVICE_ATTR(file_name, (S_IRUGO | S_IWUSR), show_##file_name, store_##file_name);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'file_name' - possible side-effects?
#282: FILE: kernel/cpufreq.c:248:
+#define cpufreq_per_cpu_attr_rw(file_name, object) 			\
+cpufreq_per_cpu_attr_read(file_name, object) 				\
+cpufreq_per_cpu_attr_write(file_name, object) 				\
+static DEVICE_ATTR(file_name, (S_IRUGO | S_IWUSR), show_##file_name, store_##file_name);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'object' - possible side-effects?
#282: FILE: kernel/cpufreq.c:248:
+#define cpufreq_per_cpu_attr_rw(file_name, object) 			\
+cpufreq_per_cpu_attr_read(file_name, object) 				\
+cpufreq_per_cpu_attr_write(file_name, object) 				\
+static DEVICE_ATTR(file_name, (S_IRUGO | S_IWUSR), show_##file_name, store_##file_name);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#282: FILE: kernel/cpufreq.c:248:
+#define cpufreq_per_cpu_attr_rw(file_name, object) 			\
+cpufreq_per_cpu_attr_read(file_name, object) 				\
+cpufreq_per_cpu_attr_write(file_name, object) 				\
+static DEVICE_ATTR(file_name, (S_IRUGO | S_IWUSR), show_##file_name, store_##file_name);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#283: FILE: kernel/cpufreq.c:249:
+cpufreq_per_cpu_attr_read(file_name, object) ^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#284: FILE: kernel/cpufreq.c:250:
+cpufreq_per_cpu_attr_write(file_name, object) ^I^I^I^I\$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#285: FILE: kernel/cpufreq.c:251:
+static DEVICE_ATTR(file_name, (S_IRUGO | S_IWUSR), show_##file_name, store_##file_name);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#287: FILE: kernel/cpufreq.c:253:
+
+

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#294: FILE: kernel/cpufreq.c:260:
+static DEVICE_ATTR(scaling_governor, (S_IRUGO | S_IWUSR), show_scaling_governor, store_scaling_governor);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_scaling_governor' to 'scaling_governor_show' 'store_scaling_governor' to 'scaling_governor_store'
#294: FILE: kernel/cpufreq.c:260:
+static DEVICE_ATTR(scaling_governor, (S_IRUGO | S_IWUSR), show_scaling_governor, store_scaling_governor);

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#294: FILE: kernel/cpufreq.c:260:
+static DEVICE_ATTR(scaling_governor, (S_IRUGO | S_IWUSR), show_scaling_governor, store_scaling_governor);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#296: FILE: kernel/cpufreq.c:262:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#300: FILE: kernel/cpufreq.c:266:
+ * Adds the cpufreq interface for a CPU device. $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#302: FILE: kernel/cpufreq.c:268:
+static int cpufreq_add_dev (struct device * dev)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#302: FILE: kernel/cpufreq.c:268:
+static int cpufreq_add_dev (struct device * dev)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dev->kobj
#317: FILE: kernel/cpufreq.c:283:
+	cpufreq_driver->policy[cpu].intf.kobj.parent = &(dev->kobj);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cpufreq_interface.kset
#318: FILE: kernel/cpufreq.c:284:
+	cpufreq_driver->policy[cpu].intf.kobj.kset = &(cpufreq_interface.kset);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#329: FILE: kernel/cpufreq.c:295:
+	device_create_file (dev, &dev_attr_cpuinfo_min_freq);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#330: FILE: kernel/cpufreq.c:296:
+	device_create_file (dev, &dev_attr_cpuinfo_max_freq);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#331: FILE: kernel/cpufreq.c:297:
+	device_create_file (dev, &dev_attr_scaling_min_freq);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#332: FILE: kernel/cpufreq.c:298:
+	device_create_file (dev, &dev_attr_scaling_max_freq);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#333: FILE: kernel/cpufreq.c:299:
+	device_create_file (dev, &dev_attr_scaling_governor);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#339: FILE: kernel/cpufreq.c:305:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#346: FILE: kernel/cpufreq.c:312:
+static int cpufreq_remove_dev (struct intf_data *intf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#348: FILE: kernel/cpufreq.c:314:
+	struct device * dev = intf->dev;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#350: FILE: kernel/cpufreq.c:316:
+	device_remove_file (dev, &dev_attr_cpuinfo_min_freq);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#351: FILE: kernel/cpufreq.c:317:
+	device_remove_file (dev, &dev_attr_cpuinfo_max_freq);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#352: FILE: kernel/cpufreq.c:318:
+	device_remove_file (dev, &dev_attr_scaling_min_freq);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#353: FILE: kernel/cpufreq.c:319:
+	device_remove_file (dev, &dev_attr_scaling_max_freq);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#354: FILE: kernel/cpufreq.c:320:
+	device_remove_file (dev, &dev_attr_scaling_governor);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#387: FILE: kernel/cpufreq.c:359:
+^Iif (sscanf(input_string, "%d:%d:%d:%15s", &cpu, &min, &max, str_governor) == 4) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#405: FILE: kernel/cpufreq.c:378:
+^Iif (sscanf(input_string, "%d:%d:%15s", &min, &max, str_governor) == 3) $

ERROR:SPACING: space required before the open parenthesis '('
#471: FILE: kernel/cpufreq.c:566:
+#define cpufreq_proc_init() do {} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#472: FILE: kernel/cpufreq.c:567:
+#define cpufreq_proc_exit() do {} while(0)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000400097.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 41 warnings, 17 checks, 440 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000400097.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
