WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#35: FILE: Makefile:4:
+EXTRAVERSION = .5
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#47: FILE: arch/ppc64/boot/zlib.c:1310:
+    return Z_DATA_ERROR;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#55: FILE: arch/ppc64/boot/zlib.c:1354:
+  n = x[g];^I^I^I/* set n to length of v */$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#81: FILE: arch/x86_64/kernel/smp.c:290:
+static void __smp_call_function_single (int cpu, void (*func) (void *info), void *info,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#82: FILE: arch/x86_64/kernel/smp.c:291:
+static void __smp_call_function_single (int cpu, void (*func) (void *info), void *info,
+				int nonatomic, int wait)

WARNING:MEMORY_BARRIER: memory barrier without comment
#95: FILE: arch/x86_64/kernel/smp.c:304:
+	wmb();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#122: FILE: arch/x86_64/kernel/smp.c:331:
+int smp_call_function_single (int cpu, void (*func) (void *info), void *info, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#122: FILE: arch/x86_64/kernel/smp.c:331:
+int smp_call_function_single (int cpu, void (*func) (void *info), void *info, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#123: FILE: arch/x86_64/kernel/smp.c:332:
+int smp_call_function_single (int cpu, void (*func) (void *info), void *info, 
+	int nonatomic, int wait)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#125: FILE: arch/x86_64/kernel/smp.c:334:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#125: FILE: arch/x86_64/kernel/smp.c:334:
+{
+	

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#129: FILE: arch/x86_64/kernel/smp.c:338:
+		printk("%s: trying to call self\n", __func__);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: arch/x86_64/kernel/smp.c:344:
+^I__smp_call_function_single(cpu, func,info,nonatomic,wait);^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#135: FILE: arch/x86_64/kernel/smp.c:344:
+	__smp_call_function_single(cpu, func,info,nonatomic,wait);	
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#135: FILE: arch/x86_64/kernel/smp.c:344:
+	__smp_call_function_single(cpu, func,info,nonatomic,wait);	
 	                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#135: FILE: arch/x86_64/kernel/smp.c:344:
+	__smp_call_function_single(cpu, func,info,nonatomic,wait);	
 	                                                   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#172: FILE: arch/x86_64/kernel/smpboot.c:267:
+	printk(KERN_INFO "CPU %d: Syncing TSC to CPU %u.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#173: FILE: arch/x86_64/kernel/smpboot.c:268:
+	printk(KERN_INFO "CPU %d: Syncing TSC to CPU %u.\n",
+		smp_processor_id(), master);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#215: FILE: fs/isofs/compress.c:134:
+^I^I$

CHECK:CAMELCASE: Avoid CamelCase: <deflateBound>
#218: FILE: fs/isofs/compress.c:137:
+	if (csize > deflateBound(1UL << zisofs_block_shift))

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#231: FILE: include/asm-x86_64/smp.h:49:
+extern int smp_call_function_single (int cpuid, void (*func) (void *info), void *info,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#231: FILE: include/asm-x86_64/smp.h:49:
+extern int smp_call_function_single (int cpuid, void (*func) (void *info), void *info,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#268: FILE: kernel/module.c:260:
+		printk(KERN_WARNING "%s: per-cpu alignment %li > %i\n",

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: lib/inflate.c:329:
+    return 2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#311: FILE: lib/inflate.c:377:
+  n = x[g];                   /* set n to length of v */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#325: FILE: lib/inflate.c:414:
+          if (j < z)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: lib/inflate.c:414:
+          if (j < z)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#325: FILE: lib/inflate.c:414:
+          if (j < z)
+            while (++j < z)       /* try smaller tables up to z bits */

ERROR:CODE_INDENT: code indent should use tabs where possible
#326: FILE: lib/inflate.c:415:
+            while (++j < z)       /* try smaller tables up to z bits */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#326: FILE: lib/inflate.c:415:
+            while (++j < z)       /* try smaller tables up to z bits */$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#326: FILE: lib/inflate.c:415:
+            while (++j < z)       /* try smaller tables up to z bits */
+            {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#326: FILE: lib/inflate.c:415:
+            while (++j < z)       /* try smaller tables up to z bits */
+            {

ERROR:CODE_INDENT: code indent should use tabs where possible
#327: FILE: lib/inflate.c:416:
+            {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#327: FILE: lib/inflate.c:416:
+            {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#328: FILE: lib/inflate.c:417:
+              if ((f <<= 1) <= *++xp)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#328: FILE: lib/inflate.c:417:
+              if ((f <<= 1) <= *++xp)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#329: FILE: lib/inflate.c:418:
+                break;            /* enough codes to use up j bits */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: lib/inflate.c:418:
+                break;            /* enough codes to use up j bits */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#330: FILE: lib/inflate.c:419:
+              f -= *xp;           /* else deduct codes from patterns */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: lib/inflate.c:419:
+              f -= *xp;           /* else deduct codes from patterns */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#331: FILE: lib/inflate.c:420:
+            }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: lib/inflate.c:420:
+            }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: lib/zlib_inflate/inftrees.c:144:
+    return Z_DATA_ERROR;$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "keyring->type_data.link.next"
#368: FILE: security/keys/keyring.c:192:
+		if (keyring->type_data.link.next != NULL &&

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000159711.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 23 warnings, 7 checks, 296 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000159711.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
