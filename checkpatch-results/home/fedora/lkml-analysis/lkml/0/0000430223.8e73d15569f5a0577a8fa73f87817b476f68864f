ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#52: FILE: kernel/sched.c:53:
+static inline void move_last_tasklist(struct task_struct * p)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#91: FILE: kernel/sched.c:70:
+#define safe_for_each_task(p) \
+	for (p = init_task.next_task, next = p->next_task ; p != &init_task ; \
+			p = next, next = p->next_task)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#102: FILE: kernel/sched.c:620:
 	if (unlikely(!c)) {
[...]
+ 	    if (fairsched) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#104: FILE: kernel/sched.c:622:
+ ^I    if (fairsched) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#104: FILE: kernel/sched.c:622:
+ ^I    if (fairsched) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: kernel/sched.c:622:
+ ^I    if (fairsched) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#114: FILE: kernel/sched.c:632:
+		safe_for_each_task(p) {
+		    up = p->user;

WARNING:TABSTOP: Statements should start on a tabstop
#116: FILE: kernel/sched.c:634:
+		    if (up->cpu_ticks > 0) {

WARNING:TABSTOP: Statements should start on a tabstop
#130: FILE: kernel/sched.c:648:
+		    }

WARNING:TABSTOP: Statements should start on a tabstop
#134: FILE: kernel/sched.c:652:
+	    } else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 12)
#134: FILE: kernel/sched.c:652:
+	    } else
[...]
+	    {

CHECK:BRACES: Unbalanced braces around else statement
#134: FILE: kernel/sched.c:652:
+	    } else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TABSTOP: Statements should start on a tabstop
#136: FILE: kernel/sched.c:654:
+	    {

WARNING:TABSTOP: Statements should start on a tabstop
#145: FILE: kernel/sched.c:663:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#146: FILE: kernel/sched.c:664:
+	    goto repeat_schedule;

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#157: FILE: kernel/user.c:32:
+	files:		ATOMIC_INIT(0),
 	     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#157: FILE: kernel/user.c:32:
+	files:		ATOMIC_INIT(0),

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#158: FILE: kernel/user.c:33:
+	l_prev:		&root_user,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#158: FILE: kernel/user.c:33:
+	l_prev:		&root_user,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#159: FILE: kernel/user.c:34:
+	l_next:		&root_user,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#159: FILE: kernel/user.c:34:
+	l_next:		&root_user,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#160: FILE: kernel/user.c:35:
+	cpu_ticks:	NICE_TO_TICKS(0)
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#160: FILE: kernel/user.c:35:
+	cpu_ticks:	NICE_TO_TICKS(0)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#204: FILE: kernel/user.c:139:
+	struct user_struct * up;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#208: FILE: kernel/user.c:143:
+	for (up = &root_user ; (up = up->l_next) != &root_user ; ) {
+		up->cpu_ticks = (up->cpu_ticks / 2) + NICE_TO_TICKS(0);
+	}

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#222: FILE: kernel/sysctl.c:53:
+extern int fairsched;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#254: FILE: include/linux/sched.h:289:
+extern void recalculate_peruser_cputicks(void);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#284: FILE: include/linux/sched.h:452:
+#define NICE_TO_TICKS(nice)	(TICK_SCALE(20-(nice))+1)
                            	              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#284: FILE: include/linux/sched.h:452:
+#define NICE_TO_TICKS(nice)	(TICK_SCALE(20-(nice))+1)
                            	                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#296: FILE: include/linux/sysctl.h:127:
+	KERN_FAIRSCHED=55,	/* int: turn fair scheduler on/off */
 	              ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000430223.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 17 warnings, 5 checks, 253 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000430223.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
