WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: kernel/capability.c:33:
+     int ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: kernel/capability.c:34:
+     pid_t pid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: kernel/capability.c:36:
+     task_t *target;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: kernel/capability.c:42:
+     if (version != _LINUX_CAPABILITY_VERSION)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 13)
#148: FILE: kernel/capability.c:42:
+     if (version != _LINUX_CAPABILITY_VERSION)
+	     if (put_user(_LINUX_CAPABILITY_VERSION, &header->version))

WARNING:TABSTOP: Statements should start on a tabstop
#149: FILE: kernel/capability.c:43:
+	     if (put_user(_LINUX_CAPABILITY_VERSION, &header->version))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (13, 21)
#149: FILE: kernel/capability.c:43:
+	     if (put_user(_LINUX_CAPABILITY_VERSION, &header->version))
+		     return -EFAULT; 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#150: FILE: kernel/capability.c:44:
+^I^I     return -EFAULT; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TABSTOP: Statements should start on a tabstop
#150: FILE: kernel/capability.c:44:
+		     return -EFAULT; 

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: kernel/capability.c:45:
+             return -EINVAL;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: kernel/capability.c:45:
+             return -EINVAL;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#162: FILE: kernel/capability.c:54:
+     read_lock(&tasklist_lock); $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: kernel/capability.c:54:
+     read_lock(&tasklist_lock); $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: kernel/capability.c:56:
+     target = find_task_by_pid(pid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: kernel/capability.c:57:
+     if (!target) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 10)
#172: FILE: kernel/capability.c:57:
+     if (!target) {
+          ret = -ESRCH;

ERROR:CODE_INDENT: code indent should use tabs where possible
#173: FILE: kernel/capability.c:58:
+          ret = -ESRCH;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#173: FILE: kernel/capability.c:58:
+          ret = -ESRCH;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#174: FILE: kernel/capability.c:59:
+          goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#174: FILE: kernel/capability.c:59:
+          goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: kernel/capability.c:62:
+     data.permitted = cap_t(target->cap_permitted);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#183: FILE: kernel/capability.c:63:
+     data.inheritable = cap_t(target->cap_inheritable); $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: kernel/capability.c:63:
+     data.inheritable = cap_t(target->cap_inheritable); $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: kernel/capability.c:64:
+     data.effective = cap_t(target->cap_effective);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#189: FILE: kernel/capability.c:67:
+     read_unlock(&tasklist_lock); $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: kernel/capability.c:67:
+     read_unlock(&tasklist_lock); $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: kernel/capability.c:70:
+     if (!ret && copy_to_user(dataptr, &data, sizeof data))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 10)
#196: FILE: kernel/capability.c:70:
+     if (!ret && copy_to_user(dataptr, &data, sizeof data))
+          return -EFAULT; 

WARNING:SIZEOF_PARENTHESIS: sizeof data should be sizeof(data)
#196: FILE: kernel/capability.c:70:
+     if (!ret && copy_to_user(dataptr, &data, sizeof data))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#197: FILE: kernel/capability.c:71:
+          return -EFAULT; $

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: kernel/capability.c:71:
+          return -EFAULT; $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: kernel/capability.c:71:
+          return -EFAULT; $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: kernel/capability.c:73:
+     return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: kernel/capability.c:84:
+     task_t *target;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: kernel/capability.c:103:
+     task_t *target;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#282: FILE: kernel/capability.c:130:
+     task_t *target;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: kernel/capability.c:131:
+     int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#284: FILE: kernel/capability.c:132:
+     pid_t pid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: kernel/capability.c:137:
+     if (version != _LINUX_CAPABILITY_VERSION)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 13)
#292: FILE: kernel/capability.c:137:
+     if (version != _LINUX_CAPABILITY_VERSION)
+	     if (put_user(_LINUX_CAPABILITY_VERSION, &header->version))

WARNING:TABSTOP: Statements should start on a tabstop
#293: FILE: kernel/capability.c:138:
+	     if (put_user(_LINUX_CAPABILITY_VERSION, &header->version))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (13, 21)
#293: FILE: kernel/capability.c:138:
+	     if (put_user(_LINUX_CAPABILITY_VERSION, &header->version))
 		     return -EFAULT; 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#306: FILE: kernel/capability.c:154:
+     read_lock(&tasklist_lock);$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 10)
#308: FILE: kernel/capability.c:156:
      if (pid > 0 && pid != current->pid) {
+          target = find_task_by_pid(pid);

ERROR:CODE_INDENT: code indent should use tabs where possible
#318: FILE: kernel/capability.c:157:
+          target = find_task_by_pid(pid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#318: FILE: kernel/capability.c:157:
+          target = find_task_by_pid(pid);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#319: FILE: kernel/capability.c:158:
+          if (!target) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: kernel/capability.c:158:
+          if (!target) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 15)
#319: FILE: kernel/capability.c:158:
+          if (!target) {
+               ret = -ESRCH;

ERROR:CODE_INDENT: code indent should use tabs where possible
#320: FILE: kernel/capability.c:159:
+               ret = -ESRCH;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: kernel/capability.c:159:
+               ret = -ESRCH;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#321: FILE: kernel/capability.c:160:
+               goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#321: FILE: kernel/capability.c:160:
+               goto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#322: FILE: kernel/capability.c:161:
+          }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: kernel/capability.c:161:
+          }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#323: FILE: kernel/capability.c:162:
+     } else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 15)
#323: FILE: kernel/capability.c:162:
+     } else
+               target = current;

CHECK:BRACES: Unbalanced braces around else statement
#323: FILE: kernel/capability.c:162:
+     } else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#324: FILE: kernel/capability.c:163:
+               target = current;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: kernel/capability.c:163:
+               target = current;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#326: FILE: kernel/capability.c:165:
+     ret = -EPERM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: kernel/capability.c:168:
+     if (!cap_issubset(inheritable, cap_combine(target->cap_inheritable,$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 13)
#332: FILE: kernel/capability.c:168:
+     if (!cap_issubset(inheritable, cap_combine(target->cap_inheritable,
[...]
              goto out;

ERROR:CODE_INDENT: code indent should use tabs where possible
#333: FILE: kernel/capability.c:169:
+                       current->cap_permitted)))$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#333: FILE: kernel/capability.c:169:
+     if (!cap_issubset(inheritable, cap_combine(target->cap_inheritable,
+                       current->cap_permitted)))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#333: FILE: kernel/capability.c:169:
+                       current->cap_permitted)))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: kernel/capability.c:173:
+     if (!cap_issubset(permitted, cap_combine(target->cap_permitted,$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 13)
#341: FILE: kernel/capability.c:173:
+     if (!cap_issubset(permitted, cap_combine(target->cap_permitted,
[...]
              goto out;

ERROR:CODE_INDENT: code indent should use tabs where possible
#342: FILE: kernel/capability.c:174:
+                       current->cap_permitted)))$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#342: FILE: kernel/capability.c:174:
+     if (!cap_issubset(permitted, cap_combine(target->cap_permitted,
+                       current->cap_permitted)))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#342: FILE: kernel/capability.c:174:
+                       current->cap_permitted)))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#348: FILE: kernel/capability.c:178:
+     if (!cap_issubset(effective, permitted))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 13)
#348: FILE: kernel/capability.c:178:
+     if (!cap_issubset(effective, permitted))
              goto out;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#355: FILE: kernel/capability.c:181:
+     ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#376: FILE: kernel/capability.c:196:
+     read_unlock(&tasklist_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#380: FILE: kernel/capability.c:199:
+     return ret;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000455133.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 56 warnings, 3 checks, 304 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000455133.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
