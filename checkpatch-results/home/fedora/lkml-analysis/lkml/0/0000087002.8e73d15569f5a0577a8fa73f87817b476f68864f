WARNING:TYPO_SPELLING: 'concensus' may be misspelled - perhaps 'consensus'?
#33: 
in this fashion allows us to postpone concensus on a namespace
                                      ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#56: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#61: FILE: fs/debugfs/uts.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#88: FILE: fs/debugfs/uts.c:28:
+static inline char* uts_buffer(struct dentry *dentry)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#110: FILE: fs/debugfs/uts.c:50:
+	char* buf;

CHECK:SPACING: No space is necessary after a cast
#128: FILE: fs/debugfs/uts.c:68:
+		if (put_user('\n', ((char __user *) user_buf) + len))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#137: FILE: fs/debugfs/uts.c:77:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#138: FILE: fs/debugfs/uts.c:78:
+static ssize_t uts_write_file(struct file * file, const char __user * user_buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#138: FILE: fs/debugfs/uts.c:78:
+static ssize_t uts_write_file(struct file * file, const char __user * user_buf,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#145: FILE: fs/debugfs/uts.c:85:
+	char* buf;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#181: FILE: fs/debugfs/uts.c:121:
+static struct file_operations uts_file_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#191: FILE: fs/debugfs/uts.c:131:
+	uts_dentry_sysname = debugfs_create_file("sysname", 0666,

Exporting world writable sysfs/debugfs files is usually a bad thing.
When done arbitrarily they can introduce serious security bugs.
In the past, some of the debugfs vulnerabilities would seemingly allow
any local user to write arbitrary values into device registers - a
situation from which little good can be expected to emerge.

See: https://lore.kernel.org/linux-arm-kernel/cover.1296818921.git.segoon@openwall.com/

ERROR:EXPORTED_WORLD_WRITABLE: Exporting writable files is usually an error. Consider more restrictive permissions.
#191: FILE: fs/debugfs/uts.c:131:
+	uts_dentry_sysname = debugfs_create_file("sysname", 0666,
+						 uts_dentry, NULL,
+						 &uts_file_operations);
WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#194: FILE: fs/debugfs/uts.c:134:
+	uts_dentry_nodename = debugfs_create_file("nodename", 0666,

ERROR:EXPORTED_WORLD_WRITABLE: Exporting writable files is usually an error. Consider more restrictive permissions.
#194: FILE: fs/debugfs/uts.c:134:
+	uts_dentry_nodename = debugfs_create_file("nodename", 0666,
+						  uts_dentry, NULL,
+						  &uts_file_operations);
WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#197: FILE: fs/debugfs/uts.c:137:
+	uts_dentry_release = debugfs_create_file("release", 0666,

ERROR:EXPORTED_WORLD_WRITABLE: Exporting writable files is usually an error. Consider more restrictive permissions.
#197: FILE: fs/debugfs/uts.c:137:
+	uts_dentry_release = debugfs_create_file("release", 0666,
+						 uts_dentry, NULL,
+						 &uts_file_operations);
WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#200: FILE: fs/debugfs/uts.c:140:
+	uts_dentry_version = debugfs_create_file("version", 0666,

ERROR:EXPORTED_WORLD_WRITABLE: Exporting writable files is usually an error. Consider more restrictive permissions.
#200: FILE: fs/debugfs/uts.c:140:
+	uts_dentry_version = debugfs_create_file("version", 0666,
+						 uts_dentry, NULL,
+						 &uts_file_operations);
WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#203: FILE: fs/debugfs/uts.c:143:
+	uts_dentry_machine = debugfs_create_file("machine", 0666,

ERROR:EXPORTED_WORLD_WRITABLE: Exporting writable files is usually an error. Consider more restrictive permissions.
#203: FILE: fs/debugfs/uts.c:143:
+	uts_dentry_machine = debugfs_create_file("machine", 0666,
+						 uts_dentry, NULL,
+						 &uts_file_operations);
WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#206: FILE: fs/debugfs/uts.c:146:
+	uts_dentry_domainname = debugfs_create_file("domainname", 0666,

ERROR:EXPORTED_WORLD_WRITABLE: Exporting writable files is usually an error. Consider more restrictive permissions.
#206: FILE: fs/debugfs/uts.c:146:
+	uts_dentry_domainname = debugfs_create_file("domainname", 0666,
+						    uts_dentry, NULL,
+						    &uts_file_operations);
CHECK:LINE_SPACING: Please don't use multiple blank lines
#226: FILE: fs/debugfs/uts.c:166:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000087002.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 10 warnings, 3 checks, 189 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000087002.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
