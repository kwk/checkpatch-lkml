WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#57: FILE: include/linux/mutex.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#72: FILE: include/linux/mutex.h:16:
+#include <asm/atomic.h>

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#104: FILE: include/linux/mutex.h:48:
+	spinlock_t		wait_lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#110: FILE: include/linux/mutex.h:54:
+^Iconst char ^I^I*name;$

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#123: FILE: include/linux/mutex.h:67:
+	struct mutex		*lock;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lockname' - possible side-effects?
#140: FILE: include/linux/mutex.h:84:
+#define __MUTEX_INITIALIZER(lockname) \
+		{ .count = ATOMIC_INIT(1) \
+		, .wait_lock = SPIN_LOCK_UNLOCKED \
+		, .wait_list = LIST_HEAD_INIT(lockname.wait_list) \
+		__DEBUG_MUTEX_INITIALIZER(lockname) }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mutexname' - possible side-effects?
#146: FILE: include/linux/mutex.h:90:
+#define DEFINE_MUTEX(mutexname) \
+	struct mutex mutexname = __MUTEX_INITIALIZER(mutexname)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#149: FILE: include/linux/mutex.h:93:
+extern void fastcall __mutex_init(struct mutex *lock, const char *name);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#166: FILE: include/linux/mutex.h:110:
+extern void fastcall mutex_lock(struct mutex *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#167: FILE: include/linux/mutex.h:111:
+extern int fastcall mutex_lock_interruptible(struct mutex *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#172: FILE: include/linux/mutex.h:116:
+extern int fastcall mutex_trylock(struct mutex *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#173: FILE: include/linux/mutex.h:117:
+extern void fastcall mutex_unlock(struct mutex *lock);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#194: FILE: kernel/mutex.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#195: FILE: kernel/mutex.c:2:
+ * kernel/mutex.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#243: FILE: kernel/mutex.c:50:
+EXPORT_SYMBOL(__mutex_init);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#251: FILE: kernel/mutex.c:58:
+static void fastcall noinline __sched

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#290: FILE: kernel/mutex.c:97:
+EXPORT_SYMBOL(mutex_lock);

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#292: FILE: kernel/mutex.c:99:
+static void fastcall noinline __sched

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#317: FILE: kernel/mutex.c:124:
+EXPORT_SYMBOL(mutex_unlock);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#358: FILE: kernel/mutex.c:165:
+		if (unlikely(state == TASK_INTERRUPTIBLE &&
+						signal_pending(task))) {

WARNING:TYPO_SPELLING: 'didnt' may be misspelled - perhaps 'didn't'?
#367: FILE: kernel/mutex.c:174:
+		/* didnt get the lock, go to sleep: */
 		   ^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#391: FILE: kernel/mutex.c:198:
+static void fastcall noinline __sched

ERROR:CODE_INDENT: code indent should use tabs where possible
#405: FILE: kernel/mutex.c:212:
+        struct mutex *lock = container_of(lock_count, struct mutex, count);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#405: FILE: kernel/mutex.c:212:
+        struct mutex *lock = container_of(lock_count, struct mutex, count);$

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#441: FILE: kernel/mutex.c:248:
+static int fastcall noinline __sched

WARNING:TYPO_SPELLING: 'interruptable' may be misspelled - perhaps 'interruptible'?
#445: FILE: kernel/mutex.c:252:
+ * mutex_lock_interruptible - acquire the mutex, interruptable
                                                  ^^^^^^^^^^^^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#462: FILE: kernel/mutex.c:269:
+EXPORT_SYMBOL(mutex_lock_interruptible);

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#464: FILE: kernel/mutex.c:271:
+static int fastcall noinline __sched

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#515: FILE: kernel/mutex.c:322:
+EXPORT_SYMBOL(mutex_trylock);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#517: FILE: kernel/mutex.c:324:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#524: FILE: kernel/mutex.h:1:
+/*

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'waiter' - possible side-effects?
#537: FILE: kernel/mutex.h:14:
+#define mutex_remove_waiter(lock, waiter, ti) \
+		__list_del((waiter)->list.prev, (waiter)->list.next)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000119593.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 14 warnings, 12 checks, 487 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000119593.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
