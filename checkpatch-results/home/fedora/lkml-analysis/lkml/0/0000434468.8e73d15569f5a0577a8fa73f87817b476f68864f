ERROR:TRAILING_WHITESPACE: trailing whitespace
#98: FILE: arch/sh/kernel/entry.S:529:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: arch/sh/kernel/irq.c:133:
+    ^Iif (irq != TIMER_IRQ) { /* avoid double-reporting the timer IRQ */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#153: FILE: arch/sh/kernel/irq.c:133:
+    ^Iif (irq != TIMER_IRQ) { /* avoid double-reporting the timer IRQ */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: arch/sh/kernel/irq.c:133:
+    ^Iif (irq != TIMER_IRQ) { /* avoid double-reporting the timer IRQ */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#167: FILE: arch/sh/kernel/irq.c:155:
+    ^Iif (irq != TIMER_IRQ) { /* avoid double-reporting the timer IRQ */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#167: FILE: arch/sh/kernel/irq.c:155:
+    ^Iif (irq != TIMER_IRQ) { /* avoid double-reporting the timer IRQ */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: arch/sh/kernel/irq.c:155:
+    ^Iif (irq != TIMER_IRQ) { /* avoid double-reporting the timer IRQ */$

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#193: FILE: arch/sh/kernel/process.c:145:
+		volatile unsigned long retval = __sc0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#194: FILE: arch/sh/kernel/process.c:146:
+		volatile unsigned long retval = __sc0;
+		if (retval > 0)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#195: FILE: arch/sh/kernel/process.c:147:
+			TRACE_PROCESS(TRACE_EV_PROCESS_KTHREAD, retval, (int) fn);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: arch/sh/kernel/process.c:151:
+ ^Ireturn __sc0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#199: FILE: arch/sh/kernel/process.c:151:
+ ^Ireturn __sc0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: arch/sh/kernel/process.c:151:
+ ^Ireturn __sc0;$

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#262: FILE: arch/sh/kernel/traps.c:496:
+		if (tmp==0) {
 		       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#264: FILE: arch/sh/kernel/traps.c:498:
+ ^I^I^Ireturn; /* sorted */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#264: FILE: arch/sh/kernel/traps.c:498:
+ ^I^I^Ireturn; /* sorted */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#264: FILE: arch/sh/kernel/traps.c:498:
+ ^I^I^Ireturn; /* sorted */$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#284: FILE: arch/sh/kernel/traps.c:601:
+asmlinkage void trace_real_syscall_entry(struct pt_regs * regs)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo*      bar" should be "foo *bar"
#293: FILE: arch/sh/kernel/traps.c:610:
+	unsigned long*      stack;

CHECK:SPACING: No space is necessary after a cast
#297: FILE: arch/sh/kernel/traps.c:614:
+	trace_syscall_event.syscall_id = (uint8_t) regs->regs[REG_REG0+3];

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#297: FILE: arch/sh/kernel/traps.c:614:
+	trace_syscall_event.syscall_id = (uint8_t) regs->regs[REG_REG0+3];
 	                                                              ^

ERROR:SPACING: space required before the open parenthesis '('
#303: FILE: arch/sh/kernel/traps.c:620:
+	if(!user_mode(regs))

ERROR:SPACING: space required before the open parenthesis '('
#308: FILE: arch/sh/kernel/traps.c:625:
+	if(trace_get_config(&use_depth, &use_bounds, &seek_depth,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#309: FILE: arch/sh/kernel/traps.c:626:
+	if(trace_get_config(&use_depth, &use_bounds, &seek_depth,
+	   (void*)&lower_bound, (void*)&upper_bound) < 0)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#309: FILE: arch/sh/kernel/traps.c:626:
+	   (void*)&lower_bound, (void*)&upper_bound) < 0)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#309: FILE: arch/sh/kernel/traps.c:626:
+	   (void*)&lower_bound, (void*)&upper_bound) < 0)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#313: FILE: arch/sh/kernel/traps.c:630:
+	if((use_depth == 1) || (use_bounds == 1))
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_depth == 1'
#313: FILE: arch/sh/kernel/traps.c:630:
+	if((use_depth == 1) || (use_bounds == 1))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_bounds == 1'
#313: FILE: arch/sh/kernel/traps.c:630:
+	if((use_depth == 1) || (use_bounds == 1))

ERROR:SPACING: space required before the open parenthesis '('
#313: FILE: arch/sh/kernel/traps.c:630:
+	if((use_depth == 1) || (use_bounds == 1))

CHECK:SPACING: No space is necessary after a cast
#316: FILE: arch/sh/kernel/traps.c:633:
+		stack = (unsigned long*) regs->regs[REG_REG15];

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#316: FILE: arch/sh/kernel/traps.c:633:
+		stack = (unsigned long*) regs->regs[REG_REG15];

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#318: FILE: arch/sh/kernel/traps.c:635:
+		/* Keep on going until we reach the end of the process' stack limit (wherever it may be) */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#319: FILE: arch/sh/kernel/traps.c:636:
+		while(!get_user(addr, stack))
+		{

ERROR:SPACING: space required before the open parenthesis '('
#319: FILE: arch/sh/kernel/traps.c:636:
+		while(!get_user(addr, stack))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#323: FILE: arch/sh/kernel/traps.c:640:
+			if((addr > current->mm->start_code) &&(addr < current->mm->end_code))
+			{

ERROR:SPACING: spaces required around that '&&' (ctx:WxV)
#323: FILE: arch/sh/kernel/traps.c:640:
+			if((addr > current->mm->start_code) &&(addr < current->mm->end_code))
 			                                    ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr > current->mm->start_code'
#323: FILE: arch/sh/kernel/traps.c:640:
+			if((addr > current->mm->start_code) &&(addr < current->mm->end_code))

ERROR:SPACING: space required before the open parenthesis '('
#323: FILE: arch/sh/kernel/traps.c:640:
+			if((addr > current->mm->start_code) &&(addr < current->mm->end_code))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#326: FILE: arch/sh/kernel/traps.c:643:
+				if(((use_depth == 1) && (depth == seek_depth))
+				   ||((use_bounds == 1) && (addr > lower_bound)
+				   && (addr < upper_bound)))
+				{

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_depth == 1'
#326: FILE: arch/sh/kernel/traps.c:643:
+				if(((use_depth == 1) && (depth == seek_depth))
+				   ||((use_bounds == 1) && (addr > lower_bound)
+				   && (addr < upper_bound)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'depth == seek_depth'
#326: FILE: arch/sh/kernel/traps.c:643:
+				if(((use_depth == 1) && (depth == seek_depth))
+				   ||((use_bounds == 1) && (addr > lower_bound)
+				   && (addr < upper_bound)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_bounds == 1'
#326: FILE: arch/sh/kernel/traps.c:643:
+				if(((use_depth == 1) && (depth == seek_depth))
+				   ||((use_bounds == 1) && (addr > lower_bound)
+				   && (addr < upper_bound)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr > lower_bound'
#326: FILE: arch/sh/kernel/traps.c:643:
+				if(((use_depth == 1) && (depth == seek_depth))
+				   ||((use_bounds == 1) && (addr > lower_bound)
+				   && (addr < upper_bound)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr < upper_bound'
#326: FILE: arch/sh/kernel/traps.c:643:
+				if(((use_depth == 1) && (depth == seek_depth))
+				   ||((use_bounds == 1) && (addr > lower_bound)
+				   && (addr < upper_bound)))

ERROR:SPACING: space required before the open parenthesis '('
#326: FILE: arch/sh/kernel/traps.c:643:
+				if(((use_depth == 1) && (depth == seek_depth))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#327: FILE: arch/sh/kernel/traps.c:644:
+				if(((use_depth == 1) && (depth == seek_depth))
+				   ||((use_bounds == 1) && (addr > lower_bound)

ERROR:SPACING: spaces required around that '||' (ctx:ExV)
#327: FILE: arch/sh/kernel/traps.c:644:
+				   ||((use_bounds == 1) && (addr > lower_bound)
 				   ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#328: FILE: arch/sh/kernel/traps.c:645:
+				   ||((use_bounds == 1) && (addr > lower_bound)
+				   && (addr < upper_bound)))

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#336: FILE: arch/sh/kernel/traps.c:653:
+				}
+				else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#375: FILE: arch/sh/mm/fault.c:106:
+		unsigned long trapnr;
+		asm volatile("stc       r2_bank,%0": "=r" (trapnr));

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#375: FILE: arch/sh/mm/fault.c:106:
+		asm volatile("stc       r2_bank,%0": "=r" (trapnr));
 		                                   ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#420: FILE: include/asm-sh/trace.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#421: FILE: include/asm-sh/trace.h:2:
+ * linux/include/asm-sh/trace.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000434468.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 14 warnings, 15 checks, 349 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000434468.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
