WARNING:TYPO_SPELLING: 'alignement' may be misspelled - perhaps 'alignment'?
#21: 
Subject: Re: [BUG] slab debug vs. L1 alignement
                                     ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'OTHO' may be misspelled - perhaps 'OTOH'?
#44: 
pretty. OTHO noone uses offset and it's not implemented as intended by 
        ^^^^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#72: FILE: mm/slab.c:360:
+	colour_off:	SMP_CACHE_BYTES,
 	          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#72: FILE: mm/slab.c:360:
+	colour_off:	SMP_CACHE_BYTES,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#82: FILE: mm/slab.c:385:
+	return (x+alignment-1)&(~(alignment-1));
 	         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#82: FILE: mm/slab.c:385:
+	return (x+alignment-1)&(~(alignment-1));
 	                   ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#82: FILE: mm/slab.c:385:
+	return (x+alignment-1)&(~(alignment-1));
 	                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#82: FILE: mm/slab.c:385:
+	return (x+alignment-1)&(~(alignment-1));
 	                                   ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#87: FILE: mm/slab.c:389:
+static void kmem_cache_estimate (unsigned long gfporder, size_t size, size_t align,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#88: FILE: mm/slab.c:390:
+static void kmem_cache_estimate (unsigned long gfporder, size_t size, size_t align,
 		 int flags, size_t *left_over, unsigned int *num)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#96: FILE: mm/slab.c:402:
+	while (i*size + aligned_size(base+i*extra, align) <= wastage)
 	        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#96: FILE: mm/slab.c:402:
+	while (i*size + aligned_size(base+i*extra, align) <= wastage)
 	                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#96: FILE: mm/slab.c:402:
+	while (i*size + aligned_size(base+i*extra, align) <= wastage)
 	                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#105: FILE: mm/slab.c:412:
+	wastage -= aligned_size(base+i*extra, align);
 	                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#105: FILE: mm/slab.c:412:
+	wastage -= aligned_size(base+i*extra, align);
 	                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#115: FILE: mm/slab.c:425:
+	kmem_cache_estimate(0, cache_cache.objsize, SMP_CACHE_BYTES, 0,
 			&left_over, &cache_cache.num);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#122: FILE: mm/slab.c:432:
+			+ cache_cache.num*sizeof(kmem_bufctl_t), SMP_CACHE_BYTES);
 			                 ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#140: FILE: mm/slab.c:625:
+kmem_cache_create (const char *name, size_t size, size_t align,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#141: FILE: mm/slab.c:626:
+kmem_cache_create (const char *name, size_t size, size_t align,
 	unsigned long flags, void (*ctor)(void*, kmem_cache_t *, unsigned long),

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#164: FILE: mm/slab.c:658:
+	if (size < (PAGE_SIZE>>3) && (align <= BYTES_PER_WORD))
 	                     ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'align <= BYTES_PER_WORD'
#164: FILE: mm/slab.c:658:
+	if (size < (PAGE_SIZE>>3) && (align <= BYTES_PER_WORD))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:TABSTOP: Statements should start on a tabstop
#186: FILE: mm/slab.c:699:
+	 if ((flags & SLAB_HWCACHE_ALIGN) && !(flags & SLAB_RED_ZONE)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#187: FILE: mm/slab.c:700:
+^I ^Iint autoalign = SMP_CACHE_BYTES;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#187: FILE: mm/slab.c:700:
+^I ^Iint autoalign = SMP_CACHE_BYTES;$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#195: FILE: mm/slab.c:706:
+		while (size < autoalign/2)
 		                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#203: FILE: mm/slab.c:714:
+		size += 2*BYTES_PER_WORD;	/* words for redzone */
 		         ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#214: FILE: mm/slab.c:721:
+	if (size >= (PAGE_SIZE>>3) || align >= (PAGE_SIZE>>3))
 	                      ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#214: FILE: mm/slab.c:721:
+	if (size >= (PAGE_SIZE>>3) || align >= (PAGE_SIZE>>3))
 	                                                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: mm/slab.c:736:
+		kmem_cache_estimate(cachep->gfporder, size, align, flags,
 						&left_over, &cachep->num);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#253: FILE: mm/slab.c:773:
+	slab_size = aligned_size(cachep->num*sizeof(kmem_bufctl_t)+sizeof(slab_t), align);
 	                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#253: FILE: mm/slab.c:773:
+	slab_size = aligned_size(cachep->num*sizeof(kmem_bufctl_t)+sizeof(slab_t), align);
 	                                                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#261: FILE: mm/slab.c:781:
+		slab_size = cachep->num*sizeof(kmem_bufctl_t)+sizeof(slab_t);
 		                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#261: FILE: mm/slab.c:781:
+		slab_size = cachep->num*sizeof(kmem_bufctl_t)+sizeof(slab_t);
 		                                             ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#273: FILE: mm/slab.c:786:
+	cachep->colour = left_over/align;
 	                          ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000344969.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 7 warnings, 25 checks, 214 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000344969.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
