WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#49: FILE: fs/gfs2/locking/harness/lm_interface.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#66: FILE: fs/gfs2/locking/harness/lm_interface.h:18:
+typedef void lm_lockspace_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#67: FILE: fs/gfs2/locking/harness/lm_interface.h:19:
+typedef void lm_lock_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#68: FILE: fs/gfs2/locking/harness/lm_interface.h:20:
+typedef void lm_fsdata_t;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#209: FILE: fs/gfs2/locking/harness/lm_interface.h:161:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#211: FILE: fs/gfs2/locking/harness/lm_interface.h:163:
+	uint64_t ln_number;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name1' - possible side-effects?
#215: FILE: fs/gfs2/locking/harness/lm_interface.h:167:
+#define lm_name_equal(name1, name2) \
+	(((name1)->ln_number == (name2)->ln_number) && \
+	 ((name1)->ln_type == (name2)->ln_type)) \
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name2' - possible side-effects?
#215: FILE: fs/gfs2/locking/harness/lm_interface.h:167:
+#define lm_name_equal(name1, name2) \
+	(((name1)->ln_number == (name2)->ln_number) && \
+	 ((name1)->ln_type == (name2)->ln_type)) \
+

WARNING:SPACING: Unnecessary space before function pointer arguments
#233: FILE: fs/gfs2/locking/harness/lm_interface.h:185:
+	int (*lm_mount) (char *table_name, char *host_data,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#239: FILE: fs/gfs2/locking/harness/lm_interface.h:191:
+	void (*lm_others_may_mount) (lm_lockspace_t *lockspace);

WARNING:SPACING: Unnecessary space before function pointer arguments
#241: FILE: fs/gfs2/locking/harness/lm_interface.h:193:
+	void (*lm_unmount) (lm_lockspace_t *lockspace);

WARNING:SPACING: Unnecessary space before function pointer arguments
#243: FILE: fs/gfs2/locking/harness/lm_interface.h:195:
+	void (*lm_withdraw) (lm_lockspace_t *lockspace);

WARNING:SPACING: Unnecessary space before function pointer arguments
#249: FILE: fs/gfs2/locking/harness/lm_interface.h:201:
+	int (*lm_get_lock) (lm_lockspace_t *lockspace,

WARNING:SPACING: Unnecessary space before function pointer arguments
#252: FILE: fs/gfs2/locking/harness/lm_interface.h:204:
+	void (*lm_put_lock) (lm_lock_t *lock);

WARNING:SPACING: Unnecessary space before function pointer arguments
#254: FILE: fs/gfs2/locking/harness/lm_interface.h:206:
+	unsigned int (*lm_lock) (lm_lock_t *lock, unsigned int cur_state,

WARNING:SPACING: Unnecessary space before function pointer arguments
#257: FILE: fs/gfs2/locking/harness/lm_interface.h:209:
+	unsigned int (*lm_unlock) (lm_lock_t *lock, unsigned int cur_state);

WARNING:SPACING: Unnecessary space before function pointer arguments
#259: FILE: fs/gfs2/locking/harness/lm_interface.h:211:
+	void (*lm_cancel) (lm_lock_t *lock);

WARNING:SPACING: Unnecessary space before function pointer arguments
#261: FILE: fs/gfs2/locking/harness/lm_interface.h:213:
+	int (*lm_hold_lvb) (lm_lock_t *lock, char **lvbp);

WARNING:SPACING: Unnecessary space before function pointer arguments
#262: FILE: fs/gfs2/locking/harness/lm_interface.h:214:
+	void (*lm_unhold_lvb) (lm_lock_t *lock, char *lvb);

WARNING:SPACING: Unnecessary space before function pointer arguments
#263: FILE: fs/gfs2/locking/harness/lm_interface.h:215:
+	void (*lm_sync_lvb) (lm_lock_t *lock, char *lvb);

WARNING:SPACING: Unnecessary space before function pointer arguments
#269: FILE: fs/gfs2/locking/harness/lm_interface.h:221:
+	int (*lm_plock_get) (lm_lockspace_t *lockspace,

WARNING:SPACING: Unnecessary space before function pointer arguments
#273: FILE: fs/gfs2/locking/harness/lm_interface.h:225:
+	int (*lm_plock) (lm_lockspace_t *lockspace,

WARNING:SPACING: Unnecessary space before function pointer arguments
#277: FILE: fs/gfs2/locking/harness/lm_interface.h:229:
+	int (*lm_punlock) (lm_lockspace_t *lockspace,

WARNING:SPACING: Unnecessary space before function pointer arguments
#285: FILE: fs/gfs2/locking/harness/lm_interface.h:237:
+	void (*lm_recovery_done) (lm_lockspace_t *lockspace, unsigned int jid,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#342: FILE: fs/gfs2/locking/harness/main.c:1:
+/*

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#386: FILE: fs/gfs2/locking/harness/main.c:45:
+			printk("lock_harness:  protocol %s already exists\n",

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*lw)...) over kmalloc(sizeof(struct lmh_wrapper)...)
#392: FILE: fs/gfs2/locking/harness/main.c:51:
+	lw = kmalloc(sizeof(struct lmh_wrapper), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#430: FILE: fs/gfs2/locking/harness/main.c:89:
+	printk("lock_harness:  can't unregister lock protocol %s\n",

WARNING:TYPO_SPELLING: 'mininum' may be misspelled - perhaps 'minimum'?
#441: FILE: fs/gfs2/locking/harness/main.c:100:
+ * @min_lvb_size - the mininum LVB size that the caller can deal with
                        ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#449: FILE: fs/gfs2/locking/harness/main.c:108:
+int lm_mount(char *proto_name, char *table_name, char *host_data,
+	 lm_callback_t cb, lm_fsdata_t * fsdata,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#449: FILE: fs/gfs2/locking/harness/main.c:108:
+	 lm_callback_t cb, lm_fsdata_t * fsdata,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#476: FILE: fs/gfs2/locking/harness/main.c:135:
+		printk("lock_harness:  can't find protocol %s\n", proto_name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#528: FILE: fs/gfs2/locking/harness/main.c:187:
+	printk("Lock_Harness (built %s %s) installed\n", __DATE__, __TIME__);

ERROR:DATE_TIME: Use of the '__DATE__' macro makes the build non-deterministic
#528: FILE: fs/gfs2/locking/harness/main.c:187:
+	printk("Lock_Harness (built %s %s) installed\n", __DATE__, __TIME__);

It is generally desirable that building the same source code with
the same set of tools is reproducible, i.e. the output is always
exactly the same.

The kernel does *not* use the ``__DATE__`` and ``__TIME__`` macros,
and enables warnings if they are used as they can lead to
non-deterministic builds.

See: https://www.kernel.org/doc/html/latest/kbuild/reproducible-builds.html#timestamps

ERROR:DATE_TIME: Use of the '__TIME__' macro makes the build non-deterministic
#528: FILE: fs/gfs2/locking/harness/main.c:187:
+	printk("Lock_Harness (built %s %s) installed\n", __DATE__, __TIME__);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#543: FILE: fs/gfs2/locking/harness/main.c:202:
+EXPORT_SYMBOL_GPL(lm_register_proto);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#544: FILE: fs/gfs2/locking/harness/main.c:203:
+EXPORT_SYMBOL_GPL(lm_unregister_proto);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#545: FILE: fs/gfs2/locking/harness/main.c:204:
+EXPORT_SYMBOL_GPL(lm_mount);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#546: FILE: fs/gfs2/locking/harness/main.c:205:
+EXPORT_SYMBOL_GPL(lm_unmount);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#547: FILE: fs/gfs2/locking/harness/main.c:206:
+EXPORT_SYMBOL_GPL(lm_withdraw);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000144426.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 31 warnings, 6 checks, 499 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000144426.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
