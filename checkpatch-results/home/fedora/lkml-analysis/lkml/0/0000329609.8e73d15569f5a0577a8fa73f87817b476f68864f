WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#78: 
diff -dpur linux-2.6.0-test1/arch/i386/Kconfig linux-2.6.0-test1-mh/arch/i386/Kconfig

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#85: FILE: arch/i386/Kconfig:707:
+config MEMHOTPLUGTEST
+       bool "Memory hotplug test"
+       default n
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#121: FILE: arch/i386/mm/discontig.c:117:
+	printk("NUMA - single node, flat memory mode, but broken in several blocks\n");

ERROR:SPACING: space required before the open parenthesis '('
#125: FILE: arch/i386/mm/discontig.c:121:
+	for(i = 0; i < MAX_NUMNODES; i++) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#129: FILE: arch/i386/mm/discontig.c:125:
+		if (pfn < max_pfn)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#131: FILE: arch/i386/mm/discontig.c:127:
+		else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#134: FILE: arch/i386/mm/discontig.c:130:
+			printk("total %d blocks, max %d\n", i, max_pfn);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#140: FILE: arch/i386/mm/discontig.c:136:
+	/* Fill in the physnode_map with our simplistic memory model,
+	* all memory is in node 0.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#142: FILE: arch/i386/mm/discontig.c:138:
+	for (pfn = node_start_pfn[0]; pfn <= max_pfn;
+	       pfn += PAGES_PER_ELEMENT)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#148: FILE: arch/i386/mm/discontig.c:144:
+         /* Indicate there is one node available. */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#170: FILE: arch/i386/mm/discontig.c:237:
+		memset(node_remap_start_vaddr[node], 0,
+		    node_remap_size[node] * PAGE_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#173: FILE: arch/i386/mm/discontig.c:240:
+	kclist_add(&numa_kc, node_remap_start_vaddr[numnodes - 1],
+	    node_remap_offset[numnodes - 1] << PAGE_SHIFT);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#195: FILE: drivers/char/mem.c:116:
+static ssize_t read_highmem(struct file * file, char * buf,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#195: FILE: drivers/char/mem.c:116:
+static ssize_t read_highmem(struct file * file, char * buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#196: FILE: drivers/char/mem.c:117:
+static ssize_t read_highmem(struct file * file, char * buf,
+			size_t count, loff_t *ppos)

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#204: FILE: drivers/char/mem.c:125:
+	if (! pfn_valid(pfn))
 	    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#222: FILE: drivers/char/mem.c:143:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#305: FILE: include/linux/mm.h:223:
+			printk("Page: %lx ", (long)p);			\

ERROR:SPACING: space required before the open parenthesis '('
#306: FILE: include/linux/mm.h:224:
+			for(i = 0; i < sizeof(struct page); i++)	\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#307: FILE: include/linux/mm.h:225:
+				printk(" %02x", ((unsigned char *)p)[i]); \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#308: FILE: include/linux/mm.h:226:
+			printk("\n");					\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#309: FILE: include/linux/mm.h:227:
+			BUG();				\

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#320: FILE: include/linux/mm.h:623:
+#define	page_trace(p)	page_trace_func(p, __FUNCTION__, __LINE__)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#321: FILE: include/linux/mm.h:624:
+extern void page_trace_func(const struct page *, const char *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required before the open parenthesis '('
#323: FILE: include/linux/mm.h:626:
+#define	page_trace(p)	do { } while(0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#349: FILE: ipc/util.c:327:
+	printk("ipc_rcu_alloc: %lx\n", (unsigned long)out);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ipc_rcu_alloc', this function's name, in a string
#349: FILE: ipc/util.c:327:
+	printk("ipc_rcu_alloc: %lx\n", (unsigned long)out);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:IF_1: Consider removing the #if 1 and its #endif
#361: FILE: mm/memory.c:416:
+#if 1 // debug

WARNING:LINE_SPACING: Missing a blank line after declarations
#366: FILE: mm/memory.c:421:
+		int idx = page - z->zone_mem_map;
+		if (idx < 0 || idx >= z->spanned_pages) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#367: FILE: mm/memory.c:422:
+			printk("zap_pte_range: %d %d\n", page->flags >> ZONE_SHIFT, idx);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'zap_pte_range', this function's name, in a string
#367: FILE: mm/memory.c:422:
+			printk("zap_pte_range: %d %d\n", page->flags >> ZONE_SHIFT, idx);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#368: FILE: mm/memory.c:423:
+			BUG();

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#391: FILE: mm/page_alloc.c:57:
+static char zone_active[MAX_NR_ZONES*MAX_NR_NODES];
                                     ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#420: FILE: mm/page_alloc.c:522:
+	if (! zone_active[page->flags >> ZONE_SHIFT])
 	    ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#421: FILE: mm/page_alloc.c:523:
+		BUG();

ERROR:SPACING: space required before the open parenthesis '('
#432: FILE: mm/page_alloc.c:534:
+	for(i = 0; ; i++) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!zone_table[i]"
#435: FILE: mm/page_alloc.c:537:
+		if (zone_table[i] == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#436: FILE: mm/page_alloc.c:538:
+			BUG();

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#449: FILE: mm/page_alloc.c:589:
+		if (! zone_activep(z))
 		    ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#460: FILE: mm/page_alloc.c:613:
+		if (! zone_activep(z))
 		    ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#471: FILE: mm/page_alloc.c:638:
+			if (! zone_activep(z))
 			    ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#482: FILE: mm/page_alloc.c:667:
+		if (! zone_activep(z))
 		    ^

WARNING:IF_1: Consider removing the #if 1 and its #endif
#492: FILE: mm/page_alloc.c:708:
+#if 1 // debug

WARNING:LINE_SPACING: Missing a blank line after declarations
#497: FILE: mm/page_alloc.c:713:
+		int idx = page - z->zone_mem_map;
+		if (idx < 0 || idx >= z->spanned_pages) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#498: FILE: mm/page_alloc.c:714:
+			printk("%d %d\n", page->flags >> ZONE_SHIFT, idx);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#499: FILE: mm/page_alloc.c:715:
+			BUG();

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#504: FILE: mm/page_alloc.c:720:
+	if (! zone_active[page->flags >> ZONE_SHIFT])
 	    ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#505: FILE: mm/page_alloc.c:721:
+		BUG();

ERROR:SPACING: space required before the open parenthesis '('
#534: FILE: mm/page_alloc.c:1145:
+		for(; k >= 0; k--) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#569: FILE: mm/page_alloc.c:1352:
+		printk("  %s zone: %lu pages, LIFO batch:%lu start:%lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#570: FILE: mm/page_alloc.c:1353:
+		printk("  %s zone: %lu pages, LIFO batch:%lu start:%lu\n",
+				zone_names[j], realsize, batch, zone_start_pfn);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#581: FILE: mm/page_alloc.c:1702:
+static int mhtest_read(char *page, char **start, off_t off, int count,
+    int *eof, void *data)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#581: FILE: mm/page_alloc.c:1702:
+    int *eof, void *data)$

ERROR:SPACING: space required before the open parenthesis '('
#588: FILE: mm/page_alloc.c:1709:
+	for(i = 0; ; i++) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!z"
#590: FILE: mm/page_alloc.c:1711:
+		if (z == NULL)

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#592: FILE: mm/page_alloc.c:1713:
+		if (! z->present_pages)
 		    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#596: FILE: mm/page_alloc.c:1717:
+		len = sprintf(p, "Zone %d: %sabled free %d, active %d, present %d\n", i,
+		    zone_active[i] ? "en" : "dis", z->free_pages, z->nr_active,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#615: FILE: mm/page_alloc.c:1736:
+static int mhtest_write(struct file *file, const char *buffer,
+    unsigned long count, void *data)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#615: FILE: mm/page_alloc.c:1736:
+    unsigned long count, void *data)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#630: FILE: mm/page_alloc.c:1751:
+	if (p == NULL)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#634: FILE: mm/page_alloc.c:1755:
+	idx = simple_strtoul(p, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:SPACING: space required before the open parenthesis '('
#637: FILE: mm/page_alloc.c:1758:
+		for(i = 0; i < sizeof(page_trace_list) /

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page_trace_list[i]"
#639: FILE: mm/page_alloc.c:1760:
+			if (page_trace_list[i] == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#641: FILE: mm/page_alloc.c:1762:
+				printk("add trace %lx\n", (unsigned long)idx);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#644: FILE: mm/page_alloc.c:1765:
+		printk("page_trace_list is full (not added)\n");

ERROR:SPACING: space required before the open parenthesis '('
#647: FILE: mm/page_alloc.c:1768:
+		for(i = 0; i < sizeof(page_trace_list) /

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(page_trace_list)
#651: FILE: mm/page_alloc.c:1772:
+		if (i == sizeof(page_trace_list) / sizeof(page_trace_list[0])) {

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#652: FILE: mm/page_alloc.c:1773:
+			printk("not registered\n");

ERROR:SPACING: space required before the open parenthesis '('
#655: FILE: mm/page_alloc.c:1776:
+		for(; i < sizeof(page_trace_list) /

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#661: FILE: mm/page_alloc.c:1782:
+	if (idx > MAX_NR_ZONES*MAX_NR_NODES) {
 	                      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#662: FILE: mm/page_alloc.c:1783:
+		printk("Argument out of range\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#666: FILE: mm/page_alloc.c:1787:
+		printk("disable %d\n", idx);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#668: FILE: mm/page_alloc.c:1789:
+		for (i = 0; i < NR_CPUS; i++) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#672: FILE: mm/page_alloc.c:1793:
+			pcp->low = pcp->high = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#675: FILE: mm/page_alloc.c:1796:
+			pcp->low = pcp->high = 0;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#681: FILE: mm/page_alloc.c:1802:
+			printk("Zone %d still active (proceeding anyway)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#682: FILE: mm/page_alloc.c:1803:
+			printk("Zone %d still active (proceeding anyway)\n",
+			    idx);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#683: FILE: mm/page_alloc.c:1804:
+		printk("purge %d\n", idx);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#688: FILE: mm/page_alloc.c:1809:
+		printk("enable %d\n", idx);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#690: FILE: mm/page_alloc.c:1811:
+^I^Izone_table[idx]->pages_high = $

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#693: FILE: mm/page_alloc.c:1814:
+		for (i = 0; i < NR_CPUS; i++) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!zone_table[idx]"
#707: FILE: mm/page_alloc.c:1828:
+		if (zone_table[idx] == NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#712: FILE: mm/page_alloc.c:1833:
+			printk(" %lx", (unsigned long)list_entry(l, struct page, lru));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#718: FILE: mm/page_alloc.c:1839:
+		printk("\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!zone_table[idx]"
#720: FILE: mm/page_alloc.c:1841:
+		if (zone_table[idx] == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#722: FILE: mm/page_alloc.c:1843:
+		for(i = 0; i < zone_table[idx]->spanned_pages; i++)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#724: FILE: mm/page_alloc.c:1845:
+				printk(" %lx", (unsigned long)&zone_table[idx]->zone_mem_map[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#725: FILE: mm/page_alloc.c:1846:
+		printk("\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#736: FILE: mm/page_alloc.c:1857:
+	if (entry == NULL)

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#743: FILE: mm/page_alloc.c:1864:
+__initcall(procmhtest_init);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#745: FILE: mm/page_alloc.c:1866:
+void
+page_trace_func(const struct page *p, const char *func, int line) {

ERROR:SPACING: space required before the open parenthesis '('
#749: FILE: mm/page_alloc.c:1870:
+	for(i = 0; i < sizeof(page_trace_list) /

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page_trace_list[i]"
#751: FILE: mm/page_alloc.c:1872:
+		if (page_trace_list[i] == NULL)

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(page_trace_list)
#756: FILE: mm/page_alloc.c:1877:
+	if (i == sizeof(page_trace_list) / sizeof(page_trace_list[0]))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#759: FILE: mm/page_alloc.c:1880:
+	printk("Page %lx, %s %d\n", (unsigned long)p, func, line);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#771: FILE: mm/shmem.c:80:
+	struct page* p = alloc_pages(gfp_mask & ~__GFP_HIGHMEM,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#772: FILE: mm/shmem.c:81:
+	    PAGE_CACHE_SHIFT-PAGE_SHIFT);
 	                    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#773: FILE: mm/shmem.c:82:
+	printk("shmem_dir_alloc: %lx\n", (unsigned long)p);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#777: FILE: mm/shmem.c:86:
+	    PAGE_CACHE_SHIFT-PAGE_SHIFT);
 	                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#800: FILE: mm/swap.c:192:
+			int idx;
+			while (*z) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "z"
#806: FILE: mm/swap.c:198:
+			if (*z != NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#807: FILE: mm/swap.c:199:
+				printk("Zone: %lx %d, index: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#808: FILE: mm/swap.c:200:
+				printk("Zone: %lx %d, index: %d\n",
+				    (unsigned long)*z, z - zone_table, idx);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#819: FILE: mm/swap.c:266:
+			printk("Page %lx disappearing\n", page);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#851: FILE: mm/vmalloc.c:435:
+       return __vmalloc(size, GFP_KERNEL, PAGE_KERNEL);$

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#865: FILE: mm/vmscan.c:257:
+		if ((! zone_activep(page_zone(page))) && page_mapped(page))
 		     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#953: FILE: mm/vmscan.c:572:
+refill_inactive_zone(struct zone *zone, int nr_pages_in,
 			struct page_state *ps, int priority)

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#961: FILE: mm/vmscan.c:590:
+	if (! zone_activep(zone)) {
 	    ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#962: FILE: mm/vmscan.c:591:
+		nr_pages = nr_pages_in = zone->present_pages - zone->free_pages;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#963: FILE: mm/vmscan.c:592:
+		printk("Purging active list of disabled zone\n");

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#982: FILE: mm/vmscan.c:648:
+	if (! zone_activep(zone))
 	    ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#992: FILE: mm/vmscan.c:658:
+			if (! zone_activep(zone))
 			    ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1025: FILE: mm/vmscan.c:769:
+	if (! zone_activep(zone))
 	    ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!newpage"
#1048: FILE: mm/vmscan.c:1055:
+	if (newpage == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1051: FILE: mm/vmscan.c:1058:
+		BUG();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mapping"
#1057: FILE: mm/vmscan.c:1064:
+	if (mapping == NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1068: FILE: mm/vmscan.c:1075:
+		BUG();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1104: FILE: mm/vmscan.c:1111:
+			printk("remap_onepage: still waiting on %p\n", page);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'remap_onepage', this function's name, in a string
#1104: FILE: mm/vmscan.c:1111:
+			printk("remap_onepage: still waiting on %p\n", page);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1139: FILE: mm/vmscan.c:1146:
+	printk("You are hosed.\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1140: FILE: mm/vmscan.c:1147:
+	BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1141: FILE: mm/vmscan.c:1148:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#1158: FILE: mm/vmscan.c:1165:
+	while(nr_failed < 100) {

ERROR:SPACING: space prohibited after that '!' (ctx:WxW)
#1160: FILE: mm/vmscan.c:1167:
+		for(i = 0; ! list_empty(&zone->inactive_list) &&
 		           ^

ERROR:SPACING: space required before the open parenthesis '('
#1160: FILE: mm/vmscan.c:1167:
+		for(i = 0; ! list_empty(&zone->inactive_list) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1163: FILE: mm/vmscan.c:1170:
+			page = list_entry(zone->inactive_list.prev,
+			    struct page, lru);

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1164: FILE: mm/vmscan.c:1171:
+			if (! TestClearPageLRU(page))
 			    ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1165: FILE: mm/vmscan.c:1172:
+				BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1170: FILE: mm/vmscan.c:1177:
+				/* the page is in pagevec_release();
+				   shrink_cache says so. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1170: FILE: mm/vmscan.c:1177:
+				   shrink_cache says so. */

ERROR:SPACING: space prohibited after that '!' (ctx:WxW)
#1180: FILE: mm/vmscan.c:1187:
+		for(i = 0; ! list_empty(&zone->active_list) &&
 		           ^

ERROR:SPACING: space required before the open parenthesis '('
#1180: FILE: mm/vmscan.c:1187:
+		for(i = 0; ! list_empty(&zone->active_list) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1183: FILE: mm/vmscan.c:1190:
+			page = list_entry(zone->active_list.prev,
+			    struct page, lru);

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1184: FILE: mm/vmscan.c:1191:
+			if (! TestClearPageLRU(page))
 			    ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1185: FILE: mm/vmscan.c:1192:
+				BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1190: FILE: mm/vmscan.c:1197:
+				/* the page is in pagevec_release();
+				   shrink_cache says so. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1190: FILE: mm/vmscan.c:1197:
+				   shrink_cache says so. */

WARNING:INDENTED_LABEL: labels should not be indented
#1202: FILE: mm/vmscan.c:1209:
+	got_page:

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1212: FILE: mm/vmscan.c:1219:
+	while (! list_empty(&failedp)) {
 	       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1228: FILE: mm/vmscan.c:1235:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1229: FILE: mm/vmscan.c:1236:
+^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1229: FILE: mm/vmscan.c:1236:
+			
+		

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000329609.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 43 errors, 65 warnings, 34 checks, 1051 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000329609.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
