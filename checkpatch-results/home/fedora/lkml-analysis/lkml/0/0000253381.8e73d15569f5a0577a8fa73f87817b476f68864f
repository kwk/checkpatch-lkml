WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#39: FILE: lib/zlib_inflate/inflate_sync.c:1:
+/* inflate.c -- zlib interface to inflate modules

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#41: FILE: lib/zlib_inflate/inflate_sync.c:3:
+ * For conditions of distribution and use, see copyright notice in zlib.h $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#48: FILE: lib/zlib_inflate/inflate_sync.c:10:
+int zlib_inflateSync(

CHECK:CAMELCASE: Avoid CamelCase: <zlib_inflateSync>
#48: FILE: lib/zlib_inflate/inflate_sync.c:10:
+int zlib_inflateSync(

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#52: FILE: lib/zlib_inflate/inflate_sync.c:14:
+  uInt n;       /* number of bytes to look at */$

CHECK:CAMELCASE: Avoid CamelCase: <uInt>
#52: FILE: lib/zlib_inflate/inflate_sync.c:14:
+  uInt n;       /* number of bytes to look at */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#53: FILE: lib/zlib_inflate/inflate_sync.c:15:
+  Byte *p;      /* pointer to bytes */$

CHECK:CAMELCASE: Avoid CamelCase: <Byte>
#53: FILE: lib/zlib_inflate/inflate_sync.c:15:
+  Byte *p;      /* pointer to bytes */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#54: FILE: lib/zlib_inflate/inflate_sync.c:16:
+  uInt m;       /* number of marker bytes found in a row */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#55: FILE: lib/zlib_inflate/inflate_sync.c:17:
+  uLong r, w;   /* temporaries to save total_in and total_out */$

CHECK:CAMELCASE: Avoid CamelCase: <uLong>
#55: FILE: lib/zlib_inflate/inflate_sync.c:17:
+  uLong r, w;   /* temporaries to save total_in and total_out */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#58: FILE: lib/zlib_inflate/inflate_sync.c:20:
+  if (z == NULL || z->state == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#58: FILE: lib/zlib_inflate/inflate_sync.c:20:
+  if (z == NULL || z->state == NULL)
+    return Z_STREAM_ERROR;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!z"
#58: FILE: lib/zlib_inflate/inflate_sync.c:20:
+  if (z == NULL || z->state == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!z->state"
#58: FILE: lib/zlib_inflate/inflate_sync.c:20:
+  if (z == NULL || z->state == NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#59: FILE: lib/zlib_inflate/inflate_sync.c:21:
+    return Z_STREAM_ERROR;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#60: FILE: lib/zlib_inflate/inflate_sync.c:22:
+  if (z->state->mode != I_BAD)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#60: FILE: lib/zlib_inflate/inflate_sync.c:22:
+  if (z->state->mode != I_BAD)
+  {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#60: FILE: lib/zlib_inflate/inflate_sync.c:22:
+  if (z->state->mode != I_BAD)
+  {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#61: FILE: lib/zlib_inflate/inflate_sync.c:23:
+  {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#62: FILE: lib/zlib_inflate/inflate_sync.c:24:
+    z->state->mode = I_BAD;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#63: FILE: lib/zlib_inflate/inflate_sync.c:25:
+    z->state->sub.marker = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#64: FILE: lib/zlib_inflate/inflate_sync.c:26:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#65: FILE: lib/zlib_inflate/inflate_sync.c:27:
+  if ((n = z->avail_in) == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#65: FILE: lib/zlib_inflate/inflate_sync.c:27:
+  if ((n = z->avail_in) == 0)
+    return Z_BUF_ERROR;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#65: FILE: lib/zlib_inflate/inflate_sync.c:27:
+  if ((n = z->avail_in) == 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#66: FILE: lib/zlib_inflate/inflate_sync.c:28:
+    return Z_BUF_ERROR;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#67: FILE: lib/zlib_inflate/inflate_sync.c:29:
+  p = z->next_in;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#68: FILE: lib/zlib_inflate/inflate_sync.c:30:
+  m = z->state->sub.marker;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#71: FILE: lib/zlib_inflate/inflate_sync.c:33:
+  while (n && m < 4)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#71: FILE: lib/zlib_inflate/inflate_sync.c:33:
+  while (n && m < 4)
+  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#71: FILE: lib/zlib_inflate/inflate_sync.c:33:
+  while (n && m < 4)
+  {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: lib/zlib_inflate/inflate_sync.c:34:
+  {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#73: FILE: lib/zlib_inflate/inflate_sync.c:35:
+    static const Byte mark[4] = {0, 0, 0xff, 0xff};$

WARNING:LINE_SPACING: Missing a blank line after declarations
#74: FILE: lib/zlib_inflate/inflate_sync.c:36:
+    static const Byte mark[4] = {0, 0, 0xff, 0xff};
+    if (*p == mark[m])

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: lib/zlib_inflate/inflate_sync.c:36:
+    if (*p == mark[m])$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#74: FILE: lib/zlib_inflate/inflate_sync.c:36:
+    if (*p == mark[m])
+      m++;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#75: FILE: lib/zlib_inflate/inflate_sync.c:37:
+      m++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: lib/zlib_inflate/inflate_sync.c:38:
+    else if (*p)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#76: FILE: lib/zlib_inflate/inflate_sync.c:38:
+    else if (*p)
+      m = 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: lib/zlib_inflate/inflate_sync.c:39:
+      m = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: lib/zlib_inflate/inflate_sync.c:40:
+    else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#78: FILE: lib/zlib_inflate/inflate_sync.c:40:
+    else
+      m = 4 - m;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: lib/zlib_inflate/inflate_sync.c:41:
+      m = 4 - m;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: lib/zlib_inflate/inflate_sync.c:42:
+    p++, n--;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: lib/zlib_inflate/inflate_sync.c:43:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: lib/zlib_inflate/inflate_sync.c:46:
+  z->total_in += p - z->next_in;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: lib/zlib_inflate/inflate_sync.c:47:
+  z->next_in = p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: lib/zlib_inflate/inflate_sync.c:48:
+  z->avail_in = n;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#87: FILE: lib/zlib_inflate/inflate_sync.c:49:
+  z->state->sub.marker = m;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: lib/zlib_inflate/inflate_sync.c:52:
+  if (m != 4)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#90: FILE: lib/zlib_inflate/inflate_sync.c:52:
+  if (m != 4)
+    return Z_DATA_ERROR;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: lib/zlib_inflate/inflate_sync.c:53:
+    return Z_DATA_ERROR;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: lib/zlib_inflate/inflate_sync.c:54:
+  r = z->total_in;  w = z->total_out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: lib/zlib_inflate/inflate_sync.c:55:
+  zlib_inflateReset(z);$

CHECK:CAMELCASE: Avoid CamelCase: <zlib_inflateReset>
#93: FILE: lib/zlib_inflate/inflate_sync.c:55:
+  zlib_inflateReset(z);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: lib/zlib_inflate/inflate_sync.c:56:
+  z->total_in = r;  z->total_out = w;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: lib/zlib_inflate/inflate_sync.c:57:
+  z->state->mode = BLOCKS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: lib/zlib_inflate/inflate_sync.c:58:
+  return Z_OK;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#99: FILE: lib/zlib_inflate/inflate_sync.c:61:
+
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#107: FILE: lib/zlib_inflate/inflate_sync.c:69:
+int zlib_inflateSyncPoint(

CHECK:CAMELCASE: Avoid CamelCase: <zlib_inflateSyncPoint>
#107: FILE: lib/zlib_inflate/inflate_sync.c:69:
+int zlib_inflateSyncPoint(

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: lib/zlib_inflate/inflate_sync.c:73:
+  if (z == NULL || z->state == NULL || z->state->blocks == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#111: FILE: lib/zlib_inflate/inflate_sync.c:73:
+  if (z == NULL || z->state == NULL || z->state->blocks == NULL)
+    return Z_STREAM_ERROR;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!z"
#111: FILE: lib/zlib_inflate/inflate_sync.c:73:
+  if (z == NULL || z->state == NULL || z->state->blocks == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!z->state"
#111: FILE: lib/zlib_inflate/inflate_sync.c:73:
+  if (z == NULL || z->state == NULL || z->state->blocks == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!z->state->blocks"
#111: FILE: lib/zlib_inflate/inflate_sync.c:73:
+  if (z == NULL || z->state == NULL || z->state->blocks == NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: lib/zlib_inflate/inflate_sync.c:74:
+    return Z_STREAM_ERROR;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: lib/zlib_inflate/inflate_sync.c:75:
+  return zlib_inflate_blocks_sync_point(z->state->blocks);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#125: FILE: lib/zlib_inflate/inflate_sync.c:87:
+static int zlib_inflate_addhistory(inflate_blocks_statef *s,
+				      z_stream              *z)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: lib/zlib_inflate/inflate_sync.c:89:
+    uLong b;              /* bit buffer */  /* NOT USED HERE */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: lib/zlib_inflate/inflate_sync.c:90:
+    uInt k;               /* bits in bit buffer */ /* NOT USED HERE */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: lib/zlib_inflate/inflate_sync.c:91:
+    uInt t;               /* temporary storage */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: lib/zlib_inflate/inflate_sync.c:92:
+    Byte *p;              /* input data pointer */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: lib/zlib_inflate/inflate_sync.c:93:
+    uInt n;               /* bytes available there */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: lib/zlib_inflate/inflate_sync.c:94:
+    Byte *q;              /* output window write pointer */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: lib/zlib_inflate/inflate_sync.c:95:
+    uInt m;               /* bytes to end of window or read pointer */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: lib/zlib_inflate/inflate_sync.c:97:
+    if (s->read != s->write)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: lib/zlib_inflate/inflate_sync.c:99:
+    if (s->mode != TYPE)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: lib/zlib_inflate/inflate_sync.c:103:
+    LOAD$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: lib/zlib_inflate/inflate_sync.c:107:
+    while (n) {$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#148: FILE: lib/zlib_inflate/inflate_sync.c:110:
+	if (t > m) t = m;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#150: FILE: lib/zlib_inflate/inflate_sync.c:112:
+	if (s->checkfn != NULL)
+	    s->check = (*s->checkfn)(s->check, q, t);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "s->checkfn"
#150: FILE: lib/zlib_inflate/inflate_sync.c:112:
+	if (s->checkfn != NULL)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#158: FILE: lib/zlib_inflate/inflate_sync.c:120:
+/*      WWRAP  */ ^I/* expand WWRAP macro by hand to handle s->read */$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#159: FILE: lib/zlib_inflate/inflate_sync.c:121:
+	if (q == s->end) {
+	    s->read = q = s->window;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#160: FILE: lib/zlib_inflate/inflate_sync.c:122:
+	    s->read = q = s->window;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: lib/zlib_inflate/inflate_sync.c:125:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: lib/zlib_inflate/inflate_sync.c:126:
+    UPDATE$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: lib/zlib_inflate/inflate_sync.c:127:
+    return Z_OK;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#168: FILE: lib/zlib_inflate/inflate_sync.c:130:
+
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#178: FILE: lib/zlib_inflate/inflate_sync.c:140:
+int zlib_inflateIncomp(

CHECK:CAMELCASE: Avoid CamelCase: <zlib_inflateIncomp>
#178: FILE: lib/zlib_inflate/inflate_sync.c:140:
+int zlib_inflateIncomp(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#180: FILE: lib/zlib_inflate/inflate_sync.c:142:
+^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: lib/zlib_inflate/inflate_sync.c:145:
+    if (z->state->mode != BLOCKS)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: lib/zlib_inflate/inflate_sync.c:147:
+    return zlib_inflate_addhistory(z->state->blocks, z);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000253381.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 70 warnings, 20 checks, 156 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000253381.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
