WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#56: FILE: char/page_color.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#58: FILE: char/page_color.c:3:
+ * ^Ito get the most performance out of the expensive cache$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#75: FILE: char/page_color.c:20:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#76: FILE: char/page_color.c:21:
+ * ^Iinsmod will create a module called 'page_color' which changes$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#103: FILE: char/page_color.c:48:
+extern unsigned int page_hit_count;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#104: FILE: char/page_color.c:49:
+extern unsigned int page_colors;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#105: FILE: char/page_color.c:50:
+extern unsigned int page_alloc_count;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#106: FILE: char/page_color.c:51:
+extern struct list_head *page_color_table;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#108: FILE: char/page_color.c:53:
+void page_color_start(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#109: FILE: char/page_color.c:54:
+void page_color_stop(void);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#112: FILE: char/page_color.c:57:
+#define CACHE_SIZE_GUESS (4*1024*1024)
                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#112: FILE: char/page_color.c:57:
+#define CACHE_SIZE_GUESS (4*1024*1024)
                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#114: FILE: char/page_color.c:59:
+#define CACHE_SIZE_GUESS (256*1024)
                              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#116: FILE: char/page_color.c:61:
+#define CACHE_SIZE_GUESS (1*1024*1024)
                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#116: FILE: char/page_color.c:61:
+#define CACHE_SIZE_GUESS (1*1024*1024)
                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#117: FILE: char/page_color.c:62:
+#endif $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#133: FILE: char/page_color.c:78:
+	for(i=0; i<MAX_NR_ZONES; i++) {
 	     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#133: FILE: char/page_color.c:78:
+	for(i=0; i<MAX_NR_ZONES; i++) {
 	          ^

ERROR:SPACING: space required before the open parenthesis '('
#133: FILE: char/page_color.c:78:
+	for(i=0; i<MAX_NR_ZONES; i++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#136: FILE: char/page_color.c:81:
+		for(j=0; j<MAX_ORDER; j++) {
 		     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#136: FILE: char/page_color.c:81:
+		for(j=0; j<MAX_ORDER; j++) {
 		          ^

ERROR:SPACING: space required before the open parenthesis '('
#136: FILE: char/page_color.c:81:
+		for(j=0; j<MAX_ORDER; j++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#137: FILE: char/page_color.c:82:
+			for(k=0; k<num_colors; k++) {
 			     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#137: FILE: char/page_color.c:82:
+			for(k=0; k<num_colors; k++) {
 			          ^

ERROR:SPACING: space required before the open parenthesis '('
#137: FILE: char/page_color.c:82:
+			for(k=0; k<num_colors; k++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#148: FILE: char/page_color.c:93:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: char/page_color.c:101:
+        return p - buf;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: char/page_color.c:101:
+        return p - buf;$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#163: FILE: char/page_color.c:108:
+	printk("page_color: terminating page coloring\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#182: FILE: char/page_color.c:127:
+^I^Icache_size_int = simple_strtoul(cache_size, $

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#182: FILE: char/page_color.c:127:
+		cache_size_int = simple_strtoul(cache_size, 

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#183: FILE: char/page_color.c:128:
+		cache_size_int = simple_strtoul(cache_size, 
+					(char **)NULL, 10);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: char/page_color.c:129:
+^I^Iif ( strchr(cache_size, 'M') || $

ERROR:SPACING: space prohibited after that open parenthesis '('
#184: FILE: char/page_color.c:129:
+		if ( strchr(cache_size, 'M') || 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#185: FILE: char/page_color.c:130:
+		if ( strchr(cache_size, 'M') || 
+		     strchr(cache_size, 'm') )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#185: FILE: char/page_color.c:130:
+		     strchr(cache_size, 'm') )

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#186: FILE: char/page_color.c:131:
+			cache_size_int *= 1024*1024;
 			                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#188: FILE: char/page_color.c:133:
+^I^Iif ( strchr(cache_size, 'K') || $

ERROR:SPACING: space prohibited after that open parenthesis '('
#188: FILE: char/page_color.c:133:
+		if ( strchr(cache_size, 'K') || 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#189: FILE: char/page_color.c:134:
+		if ( strchr(cache_size, 'K') || 
+		     strchr(cache_size, 'k') )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#189: FILE: char/page_color.c:134:
+		     strchr(cache_size, 'k') )

ERROR:TRAILING_WHITESPACE: trailing whitespace
#191: FILE: char/page_color.c:136:
+^I} $

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#192: FILE: char/page_color.c:137:
+	} 
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#192: FILE: char/page_color.c:137:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#196: FILE: char/page_color.c:141:
+	if( (-cache_size_int & cache_size_int) != cache_size_int ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#196: FILE: char/page_color.c:141:
+	if( (-cache_size_int & cache_size_int) != cache_size_int ) {

ERROR:SPACING: space required before the open parenthesis '('
#196: FILE: char/page_color.c:141:
+	if( (-cache_size_int & cache_size_int) != cache_size_int ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#197: FILE: char/page_color.c:142:
+		printk ("page_color: cache size is not a power of two\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#197: FILE: char/page_color.c:142:
+		printk ("page_color: cache size is not a power of two\n");

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#207: FILE: char/page_color.c:152:
+	page_color_table = (struct list_head *)kmalloc(alloc_size, GFP_KERNEL);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#209: FILE: char/page_color.c:154:
+		printk("page_color: memory allocation failed\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#220: FILE: char/page_color.c:165:
+	printk("page_color: starting with %d colors\n", page_colors );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#220: FILE: char/page_color.c:165:
+	printk("page_color: starting with %d colors\n", page_colors );

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#261: FILE: ksyms.c:571:
+extern unsigned int page_hit_count;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#262: FILE: ksyms.c:572:
+extern unsigned int page_alloc_count;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#263: FILE: ksyms.c:573:
+extern unsigned int page_colors;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#264: FILE: ksyms.c:574:
+extern struct list_head *page_color_table;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#265: FILE: ksyms.c:575:
+void page_color_start(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#266: FILE: ksyms.c:576:
+void page_color_stop(void);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#268: FILE: ksyms.c:578:
+EXPORT_SYMBOL_NOVERS(page_miss_count);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#269: FILE: ksyms.c:579:
+EXPORT_SYMBOL_NOVERS(page_hit_count);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#270: FILE: ksyms.c:580:
+EXPORT_SYMBOL_NOVERS(page_alloc_count);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#271: FILE: ksyms.c:581:
+EXPORT_SYMBOL_NOVERS(page_colors);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#272: FILE: ksyms.c:582:
+EXPORT_SYMBOL_NOVERS(page_color_table);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#273: FILE: ksyms.c:583:
+EXPORT_SYMBOL_NOVERS(page_color_start);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#274: FILE: ksyms.c:584:
+EXPORT_SYMBOL_NOVERS(page_color_stop);

WARNING:PATCH_PREFIX: patch prefix 'mm' exists, appears to be a -p0 patch

CHECK:LINE_SPACING: Please don't use multiple blank lines
#282: FILE: page_alloc.c:51:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#289: FILE: page_alloc.c:58:
+unsigned int page_coloring = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#293: FILE: page_alloc.c:62:
+unsigned int page_colors = 0;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#301: FILE: page_alloc.c:70:
+	/* Empty the free list in each zone. For each
+	   queue in the free list, transfer the entries

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#303: FILE: page_alloc.c:72:
+^I   (the destination queue is determined by the $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#304: FILE: page_alloc.c:73:
+	   color of each entry). */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#314: FILE: page_alloc.c:83:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#314: FILE: page_alloc.c:83:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#315: FILE: page_alloc.c:84:
+ ^Icache_mask = page_colors - 1;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#315: FILE: page_alloc.c:84:
+ ^Icache_mask = page_colors - 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#315: FILE: page_alloc.c:84:
+ ^Icache_mask = page_colors - 1;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#320: FILE: page_alloc.c:89:
+	/* Stop all allocation of free pages while the
+	   reshuffling is taking place */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#320: FILE: page_alloc.c:89:
+	   reshuffling is taking place */

ERROR:SPACING: space required before the open parenthesis '('
#323: FILE: page_alloc.c:92:
+	for(i = 0; i < MAX_NR_ZONES; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#329: FILE: page_alloc.c:98:
+	for(i = 0; i < MAX_NR_ZONES; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#336: FILE: page_alloc.c:105:
+		for(j = 0; j < MAX_ORDER; j++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#343: FILE: page_alloc.c:112:
+^I^I^Ifor(k = 0; k < num_colors; k++) $

ERROR:SPACING: space required before the open parenthesis '('
#343: FILE: page_alloc.c:112:
+			for(k = 0; k < num_colors; k++) 

ERROR:SPACING: space required before the open parenthesis '('
#346: FILE: page_alloc.c:115:
+			while(curr != head) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#355: FILE: page_alloc.c:124:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#365: FILE: page_alloc.c:134:
+	for(i = 0; i < MAX_NR_ZONES; i++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#384: FILE: page_alloc.c:153:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#384: FILE: page_alloc.c:153:
+ $

ERROR:SPACING: space required before the open parenthesis '('
#388: FILE: page_alloc.c:157:
+	for(i = 0; i < MAX_NR_ZONES; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#394: FILE: page_alloc.c:163:
+	for(i = 0; i < MAX_NR_ZONES; i++) {

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#401: FILE: page_alloc.c:170:
+		for(j = 0; j<MAX_ORDER; j++) {
 		            ^

ERROR:SPACING: space required before the open parenthesis '('
#401: FILE: page_alloc.c:170:
+		for(j = 0; j<MAX_ORDER; j++) {

ERROR:SPACING: space required before the open parenthesis '('
#405: FILE: page_alloc.c:174:
+			for(k = 0; k < num_colors; k++) {

ERROR:SPACING: space required before the open parenthesis '('
#408: FILE: page_alloc.c:177:
+				while(curr != head) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#410: FILE: page_alloc.c:179:
+^I^I^I^I^Ilist_add_head(curr, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#415: FILE: page_alloc.c:184:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#422: FILE: page_alloc.c:191:
+	for(i = 0; i < MAX_NR_ZONES; i++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#435: FILE: page_alloc.c:204:
+static inline unsigned int get_rand(void) $

CHECK:SPACING: No space is necessary after a cast
#435: FILE: page_alloc.c:204:
+static inline unsigned int get_rand(void) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#437: FILE: page_alloc.c:206:
+^I/* A multiply-with-carry random number generator by $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#438: FILE: page_alloc.c:207:
+	/* A multiply-with-carry random number generator by 
+	   George Marsaglia. The period is about 1<<63, and

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#439: FILE: page_alloc.c:208:
+	   each call to get_rand() returns 32 random bits */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#443: FILE: page_alloc.c:212:
+^Iprod = (unsigned long long)rand_seed * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#444: FILE: page_alloc.c:213:
+^I       (unsigned long long)MULT + $

ERROR:CODE_INDENT: code indent should use tabs where possible
#460: FILE: page_alloc.c:229:
+ ^Iunsigned int cache_mask = page_colors - 1;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#460: FILE: page_alloc.c:229:
+ ^Iunsigned int cache_mask = page_colors - 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#460: FILE: page_alloc.c:229:
+ ^Iunsigned int cache_mask = page_colors - 1;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#463: FILE: page_alloc.c:232:
+	/* If this process hasn't asked for free pages
+	   before, assign it a random starting color. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#463: FILE: page_alloc.c:232:
+	   before, assign it a random starting color. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#471: FILE: page_alloc.c:240:
+	/* Round the target color to look for up to the
+	   next 1<<order boundary. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#471: FILE: page_alloc.c:240:
+	   next 1<<order boundary. */

ERROR:SPACING: space required before the open parenthesis '('
#479: FILE: page_alloc.c:248:
+	for(i = order; i < MAX_ORDER; i++)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#482: FILE: page_alloc.c:251:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#483: FILE: page_alloc.c:252:
+^Iif (i == MAX_ORDER) $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#487: FILE: page_alloc.c:256:
+	/* The memory allocation is guaranteed to succeed
+	   (although we may not find the correct color) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#487: FILE: page_alloc.c:256:
+	   (although we may not find the correct color) */

ERROR:SPACING: space required before the open parenthesis '('
#489: FILE: page_alloc.c:258:
+	while(1) {

ERROR:SPACING: space required before the open parenthesis '('
#491: FILE: page_alloc.c:260:
+		for(i = order; i < MAX_ORDER; i++) {

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#500: FILE: page_alloc.c:269:
+		color = COLOR(color + (1<<order));
 		                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#501: FILE: page_alloc.c:270:
+^I} $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#505: FILE: page_alloc.c:274:
+	if (BAD_RANGE(zone,page))
 	                  ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#506: FILE: page_alloc.c:275:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#514: FILE: page_alloc.c:283:
+		__change_bit(page_idx >> (1+i), area->map);
 		                           ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#517: FILE: page_alloc.c:286:
+	while (i > order) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#518: FILE: page_alloc.c:287:
+^I^I/* Return 1<<order contiguous pages out of $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#519: FILE: page_alloc.c:288:
+		/* Return 1<<order contiguous pages out of 
+		   the 1<<i available now. Without page coloring

ERROR:TRAILING_WHITESPACE: trailing whitespace
#522: FILE: page_alloc.c:291:
+^I^I   them. Here, the bottom bits of the index to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#523: FILE: page_alloc.c:292:
+^I^I   return must match the target color. We have to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#525: FILE: page_alloc.c:294:
+^I^I   only ignore the halves that don't match the $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#526: FILE: page_alloc.c:295:
+		   bit pattern of the target color. */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#532: FILE: page_alloc.c:301:
+		__change_bit(page_idx >> (1+i), area->map);
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#534: FILE: page_alloc.c:303:
+			if (BAD_RANGE(zone,page + mask))
 			                  ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#535: FILE: page_alloc.c:304:
+				BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#542: FILE: page_alloc.c:311:
+^I^I^Ilist_add_head(&(page + mask)->list, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#543: FILE: page_alloc.c:312:
+^I^I^I^I      (area->color_list + $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#550: FILE: page_alloc.c:319:
+	if (BAD_RANGE(zone,page))
 	                  ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#551: FILE: page_alloc.c:320:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#553: FILE: page_alloc.c:322:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#555: FILE: page_alloc.c:324:
+		BUG();

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#557: FILE: page_alloc.c:326:
+	current->target_color = COLOR(color + (1<<order));
 	                                        ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#565: FILE: page_alloc.c:334:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#587: FILE: page_alloc.c:440:
+^I^Ilist_add_head(&(base + page_idx)->list, $

WARNING:LINE_SPACING: Missing a blank line after declarations
#587: FILE: page_alloc.c:440:
+		unsigned long cache_mask = page_colors - 1;
+		list_add_head(&(base + page_idx)->list, 

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000452220.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 70 errors, 63 warnings, 18 checks, 561 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000452220.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
