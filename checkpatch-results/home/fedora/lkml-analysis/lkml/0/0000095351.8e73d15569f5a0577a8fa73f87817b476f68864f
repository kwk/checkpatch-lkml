CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#102: FILE: arch/i386/kernel/traps.c:1077:
+	_set_gate(n, DESCTYPE_TASK, (void *)0, (gdt_entry<<3));
 	                                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#146: FILE: include/asm-i386/desc.h:45:
+static inline void pack_descriptor(__u32 *a, __u32 *b,
+	unsigned long base, unsigned long limit, unsigned char type, unsigned char flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#155: FILE: include/asm-i386/desc.h:53:
+static inline void pack_gate(__u32 *a, __u32 *b,
+	unsigned long base, unsigned short seg, unsigned char type, unsigned char flags)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#164: FILE: include/asm-i386/desc.h:59:
+#define DESCTYPE_LDT ^I0x82^I/* present, system, DPL-0, LDT */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#165: FILE: include/asm-i386/desc.h:60:
+#define DESCTYPE_TSS ^I0x89^I/* present, system, DPL-0, 32-bit TSS */$

WARNING:LINE_SPACING: Missing a blank line after declarations
#177: FILE: include/asm-i386/desc.h:72:
+	__u32 a, b;
+	pack_gate(&a, &b, (unsigned long)addr, seg, type, 0);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#184: FILE: include/asm-i386/desc.h:79:
+	__u32 a, b;
+	pack_descriptor(&a, &b, (unsigned long)addr,

WARNING:LINE_SPACING: Missing a blank line after declarations
#195: FILE: include/asm-i386/desc.h:88:
+	__u32 a, b;
+	pack_descriptor(&a, &b, (unsigned long)addr,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#201: FILE: include/asm-i386/desc.h:94:
+#define set_tss_desc(cpu,addr) __set_tss_desc(cpu, GDT_ENTRY_TSS, addr)
                         ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#236: FILE: include/asm-i386/mach-vmi/mach_desc.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#253: FILE: include/asm-i386/mach-vmi/mach_desc.h:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#254: FILE: include/asm-i386/mach-vmi/mach_desc.h:19:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#259: FILE: include/asm-i386/mach-vmi/mach_desc.h:24:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#269: FILE: include/asm-i386/mach-vmi/mach_desc.h:34:
+static inline void load_gdt(VMI_DTR *const dtr)
                                     ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#271: FILE: include/asm-i386/mach-vmi/mach_desc.h:36:
+	vmi_wrap_call(

CHECK:CAMELCASE: Avoid CamelCase: <SetGDT>
#272: FILE: include/asm-i386/mach-vmi/mach_desc.h:37:
+		SetGDT, "lgdt (%0)",

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#274: FILE: include/asm-i386/mach-vmi/mach_desc.h:39:
+		1, VMI_IREG1 (dtr),

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#278: FILE: include/asm-i386/mach-vmi/mach_desc.h:43:
+static inline void load_idt(VMI_DTR *const dtr)
                                     ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#280: FILE: include/asm-i386/mach-vmi/mach_desc.h:45:
+	vmi_wrap_call(

CHECK:CAMELCASE: Avoid CamelCase: <SetIDT>
#281: FILE: include/asm-i386/mach-vmi/mach_desc.h:46:
+		SetIDT, "lidt (%0)",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#283: FILE: include/asm-i386/mach-vmi/mach_desc.h:48:
+		1, VMI_IREG1 (dtr),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#289: FILE: include/asm-i386/mach-vmi/mach_desc.h:54:
+	vmi_wrap_call(

CHECK:CAMELCASE: Avoid CamelCase: <SetLDT>
#290: FILE: include/asm-i386/mach-vmi/mach_desc.h:55:
+		SetLDT, "lldt %w0",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#292: FILE: include/asm-i386/mach-vmi/mach_desc.h:57:
+		1, VMI_IREG1 (sel),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#298: FILE: include/asm-i386/mach-vmi/mach_desc.h:63:
+	vmi_wrap_call(

CHECK:CAMELCASE: Avoid CamelCase: <SetTR>
#299: FILE: include/asm-i386/mach-vmi/mach_desc.h:64:
+		SetTR, "ltr %w0",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#301: FILE: include/asm-i386/mach-vmi/mach_desc.h:66:
+		1, VMI_IREG1 (sel),

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#305: FILE: include/asm-i386/mach-vmi/mach_desc.h:70:
+static inline void store_gdt(VMI_DTR *const dtr)
                                      ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#307: FILE: include/asm-i386/mach-vmi/mach_desc.h:72:
+	vmi_wrap_call(

CHECK:CAMELCASE: Avoid CamelCase: <GetGDT>
#308: FILE: include/asm-i386/mach-vmi/mach_desc.h:73:
+		GetGDT, "sgdt (%0)",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#310: FILE: include/asm-i386/mach-vmi/mach_desc.h:75:
+		1, VMI_IREG1 (dtr),

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#314: FILE: include/asm-i386/mach-vmi/mach_desc.h:79:
+static inline void store_idt(VMI_DTR *const dtr)
                                      ^

CHECK:CAMELCASE: Avoid CamelCase: <GetIDT>
#316: FILE: include/asm-i386/mach-vmi/mach_desc.h:81:
+	vmi_wrap_call(GetIDT, "sidt (%0)",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#317: FILE: include/asm-i386/mach-vmi/mach_desc.h:82:
+	vmi_wrap_call(GetIDT, "sidt (%0)",
+		VMI_NO_OUTPUT,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#318: FILE: include/asm-i386/mach-vmi/mach_desc.h:83:
+		1, VMI_IREG1 (dtr),

WARNING:LINE_SPACING: Missing a blank line after declarations
#325: FILE: include/asm-i386/mach-vmi/mach_desc.h:90:
+	VMI_SELECTOR ret;
+	vmi_wrap_call(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#325: FILE: include/asm-i386/mach-vmi/mach_desc.h:90:
+	vmi_wrap_call(

CHECK:CAMELCASE: Avoid CamelCase: <GetLDT>
#326: FILE: include/asm-i386/mach-vmi/mach_desc.h:91:
+		GetLDT, "sldt %%ax",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#327: FILE: include/asm-i386/mach-vmi/mach_desc.h:92:
+		VMI_OREG1 (ret),

WARNING:LINE_SPACING: Missing a blank line after declarations
#336: FILE: include/asm-i386/mach-vmi/mach_desc.h:101:
+	VMI_SELECTOR ret;
+	vmi_wrap_call(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#336: FILE: include/asm-i386/mach-vmi/mach_desc.h:101:
+	vmi_wrap_call(

CHECK:CAMELCASE: Avoid CamelCase: <GetTR>
#337: FILE: include/asm-i386/mach-vmi/mach_desc.h:102:
+		GetTR, "str %%ax",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#338: FILE: include/asm-i386/mach-vmi/mach_desc.h:103:
+		VMI_OREG1 (ret),

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#344: FILE: include/asm-i386/mach-vmi/mach_desc.h:109:
+#define load_TR_desc() load_tr(GDT_ENTRY_TSS*8)
                                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#345: FILE: include/asm-i386/mach-vmi/mach_desc.h:110:
+#define load_LDT_desc() load_ldt(GDT_ENTRY_LDT*8)
                                               ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#347: FILE: include/asm-i386/mach-vmi/mach_desc.h:112:
+#define store_tr(tr) do { (tr) = vmi_get_tr(); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#348: FILE: include/asm-i386/mach-vmi/mach_desc.h:113:
+#define store_ldt(ldt) do { (ldt) = vmi_get_ldt(); } while (0)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#350: FILE: include/asm-i386/mach-vmi/mach_desc.h:115:
+static inline void vmi_write_gdt(void *gdt, unsigned entry, u32 descLo, u32 descHi)

CHECK:CAMELCASE: Avoid CamelCase: <descLo>
#350: FILE: include/asm-i386/mach-vmi/mach_desc.h:115:
+static inline void vmi_write_gdt(void *gdt, unsigned entry, u32 descLo, u32 descHi)

CHECK:CAMELCASE: Avoid CamelCase: <descHi>
#350: FILE: include/asm-i386/mach-vmi/mach_desc.h:115:
+static inline void vmi_write_gdt(void *gdt, unsigned entry, u32 descLo, u32 descHi)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#352: FILE: include/asm-i386/mach-vmi/mach_desc.h:117:
+	vmi_wrap_call(

CHECK:CAMELCASE: Avoid CamelCase: <WriteGDTEntry>
#353: FILE: include/asm-i386/mach-vmi/mach_desc.h:118:
+		WriteGDTEntry, "movl %2, (%0,%1,8);"

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#360: FILE: include/asm-i386/mach-vmi/mach_desc.h:125:
+static inline void vmi_write_ldt(void *ldt, unsigned entry, u32 descLo, u32 descHi)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#362: FILE: include/asm-i386/mach-vmi/mach_desc.h:127:
+	vmi_wrap_call(

CHECK:CAMELCASE: Avoid CamelCase: <WriteLDTEntry>
#363: FILE: include/asm-i386/mach-vmi/mach_desc.h:128:
+		WriteLDTEntry, "movl %2, (%0,%1,8);"

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#370: FILE: include/asm-i386/mach-vmi/mach_desc.h:135:
+static inline void vmi_write_idt(void *idt, unsigned entry, u32 descLo, u32 descHi)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#372: FILE: include/asm-i386/mach-vmi/mach_desc.h:137:
+	vmi_wrap_call(

CHECK:CAMELCASE: Avoid CamelCase: <WriteIDTEntry>
#373: FILE: include/asm-i386/mach-vmi/mach_desc.h:138:
+		WriteIDTEntry, "movl %2, (%0,%1,8);"

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#382: FILE: include/asm-i386/mach-vmi/mach_desc.h:147:
+	unsigned i;

WARNING:LINE_SPACING: Missing a blank line after declarations
#384: FILE: include/asm-i386/mach-vmi/mach_desc.h:149:
+	struct desc_struct *gdt = get_cpu_gdt_table(cpu);
+	for (i = 0; i < TLS_SIZE / sizeof(struct desc_struct); i++) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#385: FILE: include/asm-i386/mach-vmi/mach_desc.h:150:
+		unsigned cur = i + GDT_ENTRY_TLS_MIN;

WARNING:LINE_SPACING: Missing a blank line after declarations
#386: FILE: include/asm-i386/mach-vmi/mach_desc.h:151:
+		unsigned cur = i + GDT_ENTRY_TLS_MIN;
+		if (gdt[cur].a != t->tls_array[i].a || gdt[cur].b != t->tls_array[i].b) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#386: FILE: include/asm-i386/mach-vmi/mach_desc.h:151:
+		if (gdt[cur].a != t->tls_array[i].a || gdt[cur].b != t->tls_array[i].b) {
+			vmi_write_gdt(gdt, cur, t->tls_array[i].a, t->tls_array[i].b);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#389: FILE: include/asm-i386/mach-vmi/mach_desc.h:154:
+        }$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#389: FILE: include/asm-i386/mach-vmi/mach_desc.h:154:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#394: FILE: include/asm-i386/mach-vmi/mach_desc.h:159:
+        vmi_write_gdt(gdt, entry, entry_a, entry_b);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#394: FILE: include/asm-i386/mach-vmi/mach_desc.h:159:
+        vmi_write_gdt(gdt, entry, entry_a, entry_b);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#404: FILE: include/asm-i386/mach-vmi/mach_desc.h:169:
+        vmi_write_idt(idt, entry, entry_a, entry_b);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#404: FILE: include/asm-i386/mach-vmi/mach_desc.h:169:
+        vmi_write_idt(idt, entry, entry_a, entry_b);$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#412: FILE: include/asm-i386/mach-default/mach_desc.h:1:
+#ifndef __MACH_DESC_H

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#415: FILE: include/asm-i386/mach-default/mach_desc.h:4:
+#define load_TR_desc() __asm__ __volatile__("ltr %w0"::"q" (GDT_ENTRY_TSS*8))
                                                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#415: FILE: include/asm-i386/mach-default/mach_desc.h:4:
+#define load_TR_desc() __asm__ __volatile__("ltr %w0"::"q" (GDT_ENTRY_TSS*8))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#416: FILE: include/asm-i386/mach-default/mach_desc.h:5:
+#define load_LDT_desc() __asm__ __volatile__("lldt %w0"::"q" (GDT_ENTRY_LDT*8))
                                                                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#416: FILE: include/asm-i386/mach-default/mach_desc.h:5:
+#define load_LDT_desc() __asm__ __volatile__("lldt %w0"::"q" (GDT_ENTRY_LDT*8))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#418: FILE: include/asm-i386/mach-default/mach_desc.h:7:
+#define load_gdt(dtr) __asm__ __volatile("lgdt %0"::"m" (*dtr))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dtr' may be better as '(dtr)' to avoid precedence issues
#418: FILE: include/asm-i386/mach-default/mach_desc.h:7:
+#define load_gdt(dtr) __asm__ __volatile("lgdt %0"::"m" (*dtr))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#419: FILE: include/asm-i386/mach-default/mach_desc.h:8:
+#define load_idt(dtr) __asm__ __volatile("lidt %0"::"m" (*dtr))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dtr' may be better as '(dtr)' to avoid precedence issues
#419: FILE: include/asm-i386/mach-default/mach_desc.h:8:
+#define load_idt(dtr) __asm__ __volatile("lidt %0"::"m" (*dtr))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#420: FILE: include/asm-i386/mach-default/mach_desc.h:9:
+#define load_tr(tr) __asm__ __volatile("ltr %0"::"m" (tr))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#421: FILE: include/asm-i386/mach-default/mach_desc.h:10:
+#define load_ldt(ldt) __asm__ __volatile("lldt %0"::"m" (ldt))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#423: FILE: include/asm-i386/mach-default/mach_desc.h:12:
+#define store_gdt(dtr) __asm__ ("sgdt %0":"=m" (*dtr))
                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#423: FILE: include/asm-i386/mach-default/mach_desc.h:12:
+#define store_gdt(dtr) __asm__ ("sgdt %0":"=m" (*dtr))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dtr' may be better as '(dtr)' to avoid precedence issues
#423: FILE: include/asm-i386/mach-default/mach_desc.h:12:
+#define store_gdt(dtr) __asm__ ("sgdt %0":"=m" (*dtr))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#424: FILE: include/asm-i386/mach-default/mach_desc.h:13:
+#define store_idt(dtr) __asm__ ("sidt %0":"=m" (*dtr))
                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#424: FILE: include/asm-i386/mach-default/mach_desc.h:13:
+#define store_idt(dtr) __asm__ ("sidt %0":"=m" (*dtr))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dtr' may be better as '(dtr)' to avoid precedence issues
#424: FILE: include/asm-i386/mach-default/mach_desc.h:13:
+#define store_idt(dtr) __asm__ ("sidt %0":"=m" (*dtr))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#425: FILE: include/asm-i386/mach-default/mach_desc.h:14:
+#define store_tr(tr) __asm__ ("str %0":"=m" (tr))
                                       ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#425: FILE: include/asm-i386/mach-default/mach_desc.h:14:
+#define store_tr(tr) __asm__ ("str %0":"=m" (tr))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#426: FILE: include/asm-i386/mach-default/mach_desc.h:15:
+#define store_ldt(ldt) __asm__ ("sldt %0":"=m" (ldt))
                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#426: FILE: include/asm-i386/mach-default/mach_desc.h:15:
+#define store_ldt(ldt) __asm__ ("sldt %0":"=m" (ldt))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#434: FILE: include/asm-i386/mach-default/mach_desc.h:23:
+#define C(i) get_cpu_gdt_table(cpu)[GDT_ENTRY_TLS_MIN + i] = t->tls_array[i]

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#434: FILE: include/asm-i386/mach-default/mach_desc.h:23:
+#define C(i) get_cpu_gdt_table(cpu)[GDT_ENTRY_TLS_MIN + i] = t->tls_array[i]

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'i' may be better as '(i)' to avoid precedence issues
#434: FILE: include/asm-i386/mach-default/mach_desc.h:23:
+#define C(i) get_cpu_gdt_table(cpu)[GDT_ENTRY_TLS_MIN + i] = t->tls_array[i]

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#441: FILE: include/asm-i386/mach-default/mach_desc.h:30:
+	__u32 *lp = (__u32 *)((char *)dt + entry*8);
 	                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#443: FILE: include/asm-i386/mach-default/mach_desc.h:32:
+	*(lp+1) = entry_b;
 	    ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000095351.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 30 warnings, 47 checks, 383 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000095351.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
