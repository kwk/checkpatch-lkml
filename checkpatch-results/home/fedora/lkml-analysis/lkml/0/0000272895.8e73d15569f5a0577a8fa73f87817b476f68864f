WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#40: 
#!/bin/bash

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#41: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#42: 
# gdbline module image

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#43: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#44: 
# Outputs an add-symbol-file line suitable for pasting into gdb to examine

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
# a loaded module.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#46: 
#

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#81: FILE: include/linux/module.h:231:
+struct module_sect_attr
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#88: FILE: include/linux/module.h:238:
+struct module_sections
+{

CHECK:LINE_SPACING: Please don't use multiple blank lines
#93: FILE: include/linux/module.h:243:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#114: FILE: kernel/module.c:984:
 
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#126: FILE: kernel/module.c:996:
+static ssize_t module_sect_show(struct kobject *kobj, struct attribute *attr,
+		char *buf)

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#133: FILE: kernel/module.c:1003:
+static struct sysfs_ops module_sect_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#143: FILE: kernel/module.c:1013:
+static void add_sect_attrs(struct module *mod, unsigned int nsect,
+		char *secstrings, Elf_Shdr *sechdrs)

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#143: FILE: kernel/module.c:1013:
+		char *secstrings, Elf_Shdr *sechdrs)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:TRAILING_WHITESPACE: trailing whitespace
#147: FILE: kernel/module.c:1017:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#150: FILE: kernel/module.c:1020:
+^I$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*mod->sect_attrs)...) over kmalloc(sizeof(struct module_sections)...)
#155: FILE: kernel/module.c:1025:
+	mod->sect_attrs = kmalloc(sizeof(struct module_sections) +

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#156: FILE: kernel/module.c:1026:
+			nloaded*sizeof(mod->sect_attrs->attrs[0]), GFP_KERNEL);
 			       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#157: FILE: kernel/module.c:1027:
+	if (! mod->sect_attrs)
 	    ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#172: FILE: kernel/module.c:1042:
+		if (! (sechdrs[i].sh_flags & SHF_ALLOC))
 		    ^

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#175: FILE: kernel/module.c:1045:
+		strlcpy(sattr->name, secstrings + sechdrs[i].sh_name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#176: FILE: kernel/module.c:1046:
+		strlcpy(sattr->name, secstrings + sechdrs[i].sh_name,
+				MODULE_SECT_NAME_LEN);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#179: FILE: kernel/module.c:1049:
+		sattr->attr.mode = S_IRUGO;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: No space is necessary after a cast
#180: FILE: kernel/module.c:1050:
+		(void) sysfs_create_file(&mod->sect_attrs->kobj, &sattr->attr);

WARNING:INDENTED_LABEL: labels should not be indented
#184: FILE: kernel/module.c:1054:
+  out:

CHECK:LINE_SPACING: Please don't use multiple blank lines
#197: FILE: kernel/module.c:1067:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#200: FILE: kernel/module.c:1070:
+static inline void add_sect_attrs(struct module *mod, unsigned int nsect,
+		char *sectstrings, Elf_Shdr *sechdrs)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#209: FILE: kernel/module.c:1079:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#211: FILE: kernel/module.c:1081:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000272895.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 11 warnings, 13 checks, 149 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000272895.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
