ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Durairaj, Sundarapandian'
#50: 
To: Durairaj, Sundarapandian

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: Unexpected content after email: 'linux-pci@atrey.karlin.mff.cuni.cz; linux-kernel@vger.kernel.org;', should be: 'linux-pci@atrey.karlin.mff.cuni.cz; (linux-kernel@vger.kernel.org;)'
#51: 
Cc: linux-pci@atrey.karlin.mff.cuni.cz; linux-kernel@vger.kernel.org;

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#77: FILE: arch/i386/Kconfig:1030:
try to

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#98: FILE: arch/i386/Kconfig:1041:
+config PCI_GOMMCONFIG
+	bool "MMConfig"
 

Kconfig symbols should have a help text which fully describes
it.

CHECK:SPACING: No space is necessary after a cast
#135: FILE: arch/i386/kernel/acpi/boot.c:106:
+	mcfg = (struct acpi_table_mcfg *) __acpi_map_table(phys_addr,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#138: FILE: arch/i386/kernel/acpi/boot.c:108:
+		printk(KERN_WARNING PREFIX "Unable to map MCFG\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#143: FILE: arch/i386/kernel/acpi/boot.c:113:
+		printk(KERN_ERR PREFIX "MMCONFIG not in low 4GB of

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#164: FILE: arch/i386/kernel/acpi/boot.c:594:
+		printk(KERN_ERR PREFIX "Error %d parsing MCFG\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#166: FILE: arch/i386/kernel/acpi/boot.c:595:
+		printk(KERN_ERR PREFIX "Error %d parsing MCFG\n",
+	} else if (result > 1) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#167: FILE: arch/i386/kernel/acpi/boot.c:596:
+		printk(KERN_WARNING PREFIX "Multiple MCFG tables

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#227: FILE: arch/i386/pci/mmconfig.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#237: FILE: arch/i386/pci/mmconfig.c:10:
+/* The physical address of the MMCONFIG aperture.  Set from ACPI
+u32 pci_mmcfg_base_addr;

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bus > 255'
#264: FILE: arch/i386/pci/mmconfig.c:34:
+	if (!value || (bus > 255) || (devfn > 255) || (reg > 4095))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'devfn > 255'
#264: FILE: arch/i386/pci/mmconfig.c:34:
+	if (!value || (bus > 255) || (devfn > 255) || (reg > 4095))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg > 4095'
#264: FILE: arch/i386/pci/mmconfig.c:34:
+	if (!value || (bus > 255) || (devfn > 255) || (reg > 4095))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#293: FILE: arch/i386/pci/mmconfig.c:62:
+^Iif ((bus > 255) || (devfn > 255) || (reg > 4095)) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bus > 255'
#293: FILE: arch/i386/pci/mmconfig.c:62:
+	if ((bus > 255) || (devfn > 255) || (reg > 4095)) 

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'devfn > 255'
#293: FILE: arch/i386/pci/mmconfig.c:62:
+	if ((bus > 255) || (devfn > 255) || (reg > 4095)) 

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg > 4095'
#293: FILE: arch/i386/pci/mmconfig.c:62:
+	if ((bus > 255) || (devfn > 255) || (reg > 4095)) 

WARNING:CONST_STRUCT: struct pci_raw_ops should normally be const
#320: FILE: arch/i386/pci/mmconfig.c:89:
+static struct pci_raw_ops pci_mmcfg = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#332: FILE: arch/i386/pci/mmconfig.c:101:
+	printk(KERN_INFO "PCI: Using MMCONFIG\n");

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#370: FILE: arch/ia64/pci/pci.c:60:
+#define PCI_SAL_EXT_ADDRESS(seg, bus, devfn, reg) \
+	((u64)(seg << 28) | (u64)(bus << 20) | \
+	 (u64)(devfn << 12) | (u64)(reg)), 1

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'seg' may be better as '(seg)' to avoid precedence issues
#370: FILE: arch/ia64/pci/pci.c:60:
+#define PCI_SAL_EXT_ADDRESS(seg, bus, devfn, reg) \
+	((u64)(seg << 28) | (u64)(bus << 20) | \
+	 (u64)(devfn << 12) | (u64)(reg)), 1

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bus' may be better as '(bus)' to avoid precedence issues
#370: FILE: arch/ia64/pci/pci.c:60:
+#define PCI_SAL_EXT_ADDRESS(seg, bus, devfn, reg) \
+	((u64)(seg << 28) | (u64)(bus << 20) | \
+	 (u64)(devfn << 12) | (u64)(reg)), 1

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'devfn' may be better as '(devfn)' to avoid precedence issues
#370: FILE: arch/ia64/pci/pci.c:60:
+#define PCI_SAL_EXT_ADDRESS(seg, bus, devfn, reg) \
+	((u64)(seg << 28) | (u64)(bus << 20) | \
+	 (u64)(devfn << 12) | (u64)(reg)), 1

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'seg > 65535'
#383: FILE: arch/ia64/pci/pci.c:70:
+	if (!value || (seg > 65535) || (bus > 255) || (devfn > 255) ||
(reg > 4095))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bus > 255'
#383: FILE: arch/ia64/pci/pci.c:70:
+	if (!value || (seg > 65535) || (bus > 255) || (devfn > 255) ||
(reg > 4095))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'devfn > 255'
#383: FILE: arch/ia64/pci/pci.c:70:
+	if (!value || (seg > 65535) || (bus > 255) || (devfn > 255) ||
(reg > 4095))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg > 4095'
#383: FILE: arch/ia64/pci/pci.c:70:
+	if (!value || (seg > 65535) || (bus > 255) || (devfn > 255) ||
(reg > 4095))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#385: FILE: arch/ia64/pci/pci.c:71:
+	if (!value || (seg > 65535) || (bus > 255) || (devfn > 255) ||
 		return -EINVAL;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'seg < 256'
#389: FILE: arch/ia64/pci/pci.c:73:
+	if ((seg < 256) && (reg < 256)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg < 256'
#389: FILE: arch/ia64/pci/pci.c:73:
+	if ((seg < 256) && (reg < 256)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#392: FILE: arch/ia64/pci/pci.c:75:
+		result = ia64_sal_pci_config_read(PCI_SAL_ADDRESS(seg,
+	} else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'seg > 65535'
#406: FILE: arch/ia64/pci/pci.c:87:
+	if ((seg > 65535) || (bus > 255) || (devfn > 255) || (reg >
4095))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bus > 255'
#406: FILE: arch/ia64/pci/pci.c:87:
+	if ((seg > 65535) || (bus > 255) || (devfn > 255) || (reg >
4095))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'devfn > 255'
#406: FILE: arch/ia64/pci/pci.c:87:
+	if ((seg > 65535) || (bus > 255) || (devfn > 255) || (reg >
4095))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg >
 095'
#406: FILE: arch/ia64/pci/pci.c:87:
+	if ((seg > 65535) || (bus > 255) || (devfn > 255) || (reg >
4095))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'seg < 256'
#412: FILE: arch/ia64/pci/pci.c:90:
+	if ((seg < 256) && (reg < 256)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg < 256'
#412: FILE: arch/ia64/pci/pci.c:90:
+	if ((seg < 256) && (reg < 256)) {

WARNING:CONST_STRUCT: struct pci_raw_ops should normally be const
#423: FILE: arch/ia64/pci/pci.c:97:
+static struct pci_raw_ops pci_sal_ops = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#479: FILE: drivers/pci/pci-sysfs.c:173:
+		.mode = S_IRUGO | S_IWUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#494: FILE: drivers/pci/pci-sysfs.c:192:
+	if (pdev->cfg_size < 4096) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'header == 0'
#545: FILE: drivers/pci/pci.c:203:
+	if ((header == 0) || ((header & 0xfff0ffff) == 0x0000ffff))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#720: FILE: include/asm-ia64/sal.h:744:
+ia64_sal_pci_config_read (u64 pci_config_addr, int type, u64 size, u64

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#728: FILE: include/asm-ia64/sal.h:748:
+	SAL_CALL(isrv, SAL_PCI_CONFIG_READ, pci_config_addr, size, type,
 	if (value)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#736: FILE: include/asm-ia64/sal.h:755:
+ia64_sal_pci_config_write (u64 pci_config_addr, int type, u64 size, u64

ERROR:CODE_INDENT: code indent should use tabs where possible
#743: FILE: include/asm-ia64/sal.h:759:
+^I         type, 0, 0, 0);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#764: FILE: include/linux/acpi.h:327:
+} __attribute__ ((packed));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#838: FILE: include/linux/pci.h:359:
+#define  PCI_PWR_CAP_BUDGET	0x01	/* Already included in system
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#848: FILE: include/linux/pci.h:454:
+	int		cfg_size;	/* Size of configuration space
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#858: FILE: include/linux/pci.h:654:
+int pci_find_ext_capability (struct pci_dev *dev, int cap);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#869: FILE: include/linux/pci.h:814:
+static inline int pci_find_ext_capability (struct pci_dev *dev, int

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000305120.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 20 warnings, 27 checks, 670 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000305120.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
