WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#49: 
diff -ur -X /home/kiran/dontdiff linux-2.5.68/fs/aio.c linux-aio-2568/fs/aio.c

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#56: FILE: fs/aio.c:42:
+long aio_run = 0; /* for testing only */

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#57: FILE: fs/aio.c:43:
+long aio_wakeups = 0; /* for testing only */

CHECK:CAMELCASE: Avoid CamelCase: <kiocbSetCancelled>
#66: FILE: fs/aio.c:287:
+		kiocbSetCancelled(iocb);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:TRAILING_WHITESPACE: trailing whitespace
#112: FILE: fs/aio.c:572:
+^I^Ilist_add_tail(&iocb->ki_run_list, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#113: FILE: fs/aio.c:573:
+		list_add_tail(&iocb->ki_run_list, 
+			&ctx->run_list);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#128: FILE: fs/aio.c:584:
+	ssize_t (*retry)(struct kiocb *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#136: FILE: fs/aio.c:587:
+	if (iocb->ki_retried++ > 1024*1024) {
 	                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#137: FILE: fs/aio.c:588:
+		printk("Maximal retry count. Bytes done %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#138: FILE: fs/aio.c:589:
+		printk("Maximal retry count. Bytes done %d\n",
+			iocb->ki_nbytes - iocb->ki_left);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#145: FILE: fs/aio.c:594:
+		printk("%ld retry: %d of %d (kick %ld, Q %ld run %ld, wake %ld)\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#146: FILE: fs/aio.c:595:
+^I^I^Iiocb->ki_retried, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#146: FILE: fs/aio.c:595:
+		printk("%ld retry: %d of %d (kick %ld, Q %ld run %ld, wake %ld)\n",
+			iocb->ki_retried, 

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#151: FILE: fs/aio.c:600:
+	if (!(retry = iocb->ki_retry)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#152: FILE: fs/aio.c:601:
+		printk("aio_run_iocb: iocb->ki_retry = NULL\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'aio_run_iocb', this function's name, in a string
#152: FILE: fs/aio.c:601:
+		printk("aio_run_iocb: iocb->ki_retry = NULL\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#156: FILE: fs/aio.c:605:
+	iocb->ki_users ++;
 	               ^

CHECK:CAMELCASE: Avoid CamelCase: <kiocbClearKicked>
#157: FILE: fs/aio.c:606:
+	kiocbClearKicked(iocb);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#158: FILE: fs/aio.c:607:
+	iocb->ki_run_list.next = iocb->ki_run_list.prev = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#159: FILE: fs/aio.c:608:
+^Iiocb->ki_retry = NULL;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#161: FILE: fs/aio.c:610:
+^I$

CHECK:CAMELCASE: Avoid CamelCase: <kiocbIsCancelled>
#162: FILE: fs/aio.c:611:
+	if (kiocbIsCancelled(iocb)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#169: FILE: fs/aio.c:618:
+	BUG_ON(current->io_wait != NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "current->io_wait"
#169: FILE: fs/aio.c:618:
+	BUG_ON(current->io_wait != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#176: FILE: fs/aio.c:625:
+^I^I^IBUG_ON(!list_empty(&iocb->ki_wait.task_list)); $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#176: FILE: fs/aio.c:625:
+			BUG_ON(!list_empty(&iocb->ki_wait.task_list)); 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#181: FILE: fs/aio.c:629:
+^I^Iif (list_empty(&iocb->ki_wait.task_list)) $

CHECK:CAMELCASE: Avoid CamelCase: <kiocbSetKicked>
#182: FILE: fs/aio.c:630:
+			kiocbSetKicked(iocb);

CHECK:CAMELCASE: Avoid CamelCase: <kiocbIsKicked>
#191: FILE: fs/aio.c:636:
+	if (kiocbIsKicked(iocb)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#192: FILE: fs/aio.c:637:
+		BUG_ON(ret != -EIOCBRETRY);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#194: FILE: fs/aio.c:639:
+^I} $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#208: FILE: fs/aio.c:653:
+		iocb = list_entry(ctx->run_list.next, struct kiocb,
+			ki_run_list);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#230: FILE: fs/aio.c:674:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#283: FILE: fs/aio.c:790:
+^I^Iiocb->ki_retried, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#283: FILE: fs/aio.c:790:
+	pr_debug("%ld retries: %d of %d (kicked %ld, Q %ld run %ld wake %ld)\n",
+		iocb->ki_retried, 

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#294: FILE: fs/aio.c:908:
+^Iint ^I^I^Ievent_loop = 0; /* testing only */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#337: FILE: fs/aio.c:1098:
+^I * Can't just depend on iocb->ki_left to determine $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#349: FILE: fs/aio.c:1110:
+^Iif ((ret == 0) || (iocb->ki_left == 0)) $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret == 0'
#349: FILE: fs/aio.c:1110:
+	if ((ret == 0) || (iocb->ki_left == 0)) 

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'iocb->ki_left == 0'
#349: FILE: fs/aio.c:1110:
+	if ((ret == 0) || (iocb->ki_left == 0)) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#363: FILE: fs/aio.c:1124:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#364: FILE: fs/aio.c:1125:
+^I * TBD: Even if iocb->ki_left = 0, could we need to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#378: FILE: fs/aio.c:1139:
+^Iif (ret == 0) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#393: FILE: fs/aio.c:1154:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#403: FILE: fs/aio.c:1164:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#409: FILE: fs/aio.c:1170:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#416: FILE: fs/aio.c:1177:
+^I^Iif (unlikely(!access_ok(VERIFY_WRITE, iocb->ki_buf, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#417: FILE: fs/aio.c:1178:
+		if (unlikely(!access_ok(VERIFY_WRITE, iocb->ki_buf, 
+			iocb->ki_left)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#428: FILE: fs/aio.c:1189:
+^I^Iif (unlikely(!access_ok(VERIFY_READ, iocb->ki_buf, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#429: FILE: fs/aio.c:1190:
+		if (unlikely(!access_ok(VERIFY_READ, iocb->ki_buf, 
+			iocb->ki_left)))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#456: FILE: fs/aio.c:1217:
+int aio_wake_function(wait_queue_t *wait, unsigned mode, int sync)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#482: FILE: fs/aio.c:1275:
+	req->ki_left = req->ki_nbytes = iocb->aio_nbytes;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#486: FILE: fs/aio.c:1279:
+	req->ki_run_list.next = req->ki_run_list.prev = NULL;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#559: FILE: include/linux/aio.h:57:
+	ssize_t			(*ki_retry)(struct kiocb *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#567: FILE: include/linux/aio.h:65:
+^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#570: FILE: include/linux/aio.h:68:
+^Isize_t^I^I^Iki_nbytes; ^I/* copy of iocb->aio_nbytes */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#571: FILE: include/linux/aio.h:69:
+^Ichar ^I^I^I*ki_buf;^I/* remaining iocb->aio_buf */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#572: FILE: include/linux/aio.h:70:
+^Isize_t^I^I^Iki_left; ^I/* remaining bytes */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#574: FILE: include/linux/aio.h:72:
+^Ilong^I^I^Iki_retried; ^I/* just for testing */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#575: FILE: include/linux/aio.h:73:
+^Ilong^I^I^Iki_kicked; ^I/* just for testing */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#576: FILE: include/linux/aio.h:74:
+^Ilong^I^I^Iki_queued; ^I/* just for testing */$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#596: FILE: include/linux/aio.h:174:
+#define do_sync_op(op)		if (in_aio()) { \
+	wait_queue_t *wait = current->io_wait; \
+	current->io_wait = NULL; \
+	op; \
+	current->io_wait = wait; \
+} else { \
+	op; \
+}	

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op' - possible side-effects?
#596: FILE: include/linux/aio.h:174:
+#define do_sync_op(op)		if (in_aio()) { \
+	wait_queue_t *wait = current->io_wait; \
+	current->io_wait = NULL; \
+	op; \
+	current->io_wait = wait; \
+} else { \
+	op; \
+}	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#603: FILE: include/linux/aio.h:181:
+}^I$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#605: FILE: include/linux/aio.h:183:
+#define warn_if_async()	if (in_aio()) {\
+	printk(KERN_ERR "%s(%s:%d) called in async context!\n", \
+	__FUNCTION__, __FILE__, __LINE__); \
+	dump_stack(); \
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#606: FILE: include/linux/aio.h:184:
+	printk(KERN_ERR "%s(%s:%d) called in async context!\n", \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#607: FILE: include/linux/aio.h:185:
+	__FUNCTION__, __FILE__, __LINE__); \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'wait' - possible side-effects?
#655: FILE: include/linux/wait.h:83:
+#define is_sync_wait(wait)	(!(wait) || ((wait)->task))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#669: FILE: kernel/fork.c:142:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000375629.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 27 errors, 20 warnings, 22 checks, 598 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000375629.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
