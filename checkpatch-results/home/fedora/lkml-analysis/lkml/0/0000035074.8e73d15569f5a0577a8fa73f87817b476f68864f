WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
> - Review all the volatiles, consolidate them in some helper-in-header-file.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#78: FILE: arch/blackfin/kernel/bfin_dma_5xx.c:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#81: FILE: arch/blackfin/kernel/bfin_dma_5xx.c:4:
+	if (dma_ch[channel].chan_status == DMA_CHANNEL_FREE) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#87: FILE: arch/blackfin/kernel/bfin_dma_5xx.c:9:
Drop all of those braces.  Not needed nor wanted (see Doc/CodingStyle).

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#92: FILE: arch/blackfin/kernel/bfin_dma_5xx.c:14:
+/*------------------------------------------------------------------------------
+*		Set the Start Address register for the specific DMA channel

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#93: FILE: arch/blackfin/kernel/bfin_dma_5xx.c:15:
+* ^I^IThis function can be used for register based DMA,$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#96: FILE: arch/blackfin/kernel/bfin_dma_5xx.c:18:
+*-----------------------------------------------------------------------------*/

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'set_dma_start_addr', this function's name, in a string
#102: FILE: arch/blackfin/kernel/bfin_dma_5xx.c:23:
+	DMA_DBG("set_dma_start_addr() : BEGIN \n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#102: FILE: arch/blackfin/kernel/bfin_dma_5xx.c:23:
+	DMA_DBG("set_dma_start_addr() : BEGIN \n");

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#105: FILE: arch/blackfin/kernel/bfin_dma_5xx.c:26:
+	assert(dma_ch[channel].chan_status != DMA_CHANNEL_FREE
+	       && channel < MAX_BLACKFIN_DMA_CHANNEL);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'set_dma_start_addr', this function's name, in a string
#109: FILE: arch/blackfin/kernel/bfin_dma_5xx.c:30:
+	DMA_DBG("set_dma_start_addr() : END\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'set_dma_next_desc_addr', this function's name, in a string
#117: FILE: arch/blackfin/kernel/bfin_dma_5xx.c:36:
+	DMA_DBG("set_dma_next_desc_addr() : BEGIN \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#117: FILE: arch/blackfin/kernel/bfin_dma_5xx.c:36:
+	DMA_DBG("set_dma_next_desc_addr() : BEGIN \n");

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#120: FILE: arch/blackfin/kernel/bfin_dma_5xx.c:39:
+	assert(dma_ch[channel].chan_status != DMA_CHANNEL_FREE
+	       && channel < MAX_BLACKFIN_DMA_CHANNEL);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#137: FILE: arch/blackfin/kernel/bfin_ksyms.c:5:
+EXPORT_SYMBOL(strncmp);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#138: FILE: arch/blackfin/kernel/bfin_ksyms.c:6:
+EXPORT_SYMBOL(dump_thread);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#140: FILE: arch/blackfin/kernel/bfin_ksyms.c:8:
+EXPORT_SYMBOL(ip_fast_csum);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#142: FILE: arch/blackfin/kernel/bfin_ksyms.c:10:
+EXPORT_SYMBOL(kernel_thread);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#144: FILE: arch/blackfin/kernel/bfin_ksyms.c:12:
+EXPORT_SYMBOL(__up);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#145: FILE: arch/blackfin/kernel/bfin_ksyms.c:13:
+EXPORT_SYMBOL(__down);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#146: FILE: arch/blackfin/kernel/bfin_ksyms.c:14:
+EXPORT_SYMBOL(__down_trylock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#147: FILE: arch/blackfin/kernel/bfin_ksyms.c:15:
+EXPORT_SYMBOL(__down_interruptible);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#149: FILE: arch/blackfin/kernel/bfin_ksyms.c:17:
+EXPORT_SYMBOL(is_in_rom);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#155: FILE: arch/blackfin/kernel/bfin_ksyms.c:23:
+/* The following are special because they're not called
+   explicitly (the C compiler generates them).  Fortunately,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#157: FILE: arch/blackfin/kernel/bfin_ksyms.c:25:
+   it's OK to leave it out of version control.  */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#159: FILE: arch/blackfin/kernel/bfin_ksyms.c:27:
+EXPORT_SYMBOL(memset);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#160: FILE: arch/blackfin/kernel/bfin_ksyms.c:28:
+EXPORT_SYMBOL(memcmp);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#161: FILE: arch/blackfin/kernel/bfin_ksyms.c:29:
+EXPORT_SYMBOL(memmove);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#162: FILE: arch/blackfin/kernel/bfin_ksyms.c:30:
+EXPORT_SYMBOL(memchr);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#163: FILE: arch/blackfin/kernel/bfin_ksyms.c:31:
+EXPORT_SYMBOL(get_wchan);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#168: FILE: arch/blackfin/kernel/init_task.c:1:
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: arch/blackfin/kernel/init_task.c:3:
+    __attribute__ ((__section__(".data.init_task"))) = {$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.init_task") over __attribute__((__section__(".data.init_task")))
#170: FILE: arch/blackfin/kernel/init_task.c:3:
+    __attribute__ ((__section__(".data.init_task"))) = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#179: FILE: arch/blackfin/kernel/irqchip.c:1:
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#183: FILE: arch/blackfin/kernel/irqchip.c:5:
+	printk(KERN_ERR "IRQ: spurious interrupt %d\n", irq);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#195: FILE: arch/blackfin/kernel/module.c:1:
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#198: FILE: arch/blackfin/kernel/module.c:4:
+	uint32_t value;

WARNING:LINE_SPACING: Missing a blank line after declarations
#199: FILE: arch/blackfin/kernel/module.c:5:
+	uint32_t value;
+	switch (oper) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#246: FILE: arch/blackfin/kernel/module.c:50:
+			printk(KERN_WARNING "module %s: unhandled reloction\n",

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#268: FILE: arch/blackfin/kernel/module.c:70:
+apply_relocate_add(Elf_Shdr * sechdrs, const char *strtab,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LINE_SPACING: Missing a blank line after declarations
#278: FILE: arch/blackfin/kernel/module.c:79:
+				unsigned short tmp;
+				DEBUGP("before %x after %x\n", *location16,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#290: FILE: arch/blackfin/kernel/process.c:1:
+

WARNING:INDENTED_LABEL: labels should not be indented
#308: FILE: arch/blackfin/kernel/process.c:19:
+      out:

WARNING:LINE_SPACING: Missing a blank line after declarations
#321: FILE: arch/blackfin/kernel/process.c:31:
+	int count = 0;
+	if (!p || p == current || p->state == TASK_RUNNING)

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#335: FILE: arch/blackfin/kernel/process.c:45:
+	}
+	while (count++ < 16);

while should follow the closing bracket on the same line::

  do {
          ...
  } while(something);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#347: FILE: arch/blackfin/kernel/ptrace.c:1:
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#357: FILE: arch/blackfin/kernel/ptrace.c:11:
+		printk("PTRACE_PEEKDATA\n");

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#360: FILE: arch/blackfin/kernel/ptrace.c:14:
+		/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:LINE_SPACING: Missing a blank line after declarations
#379: FILE: arch/blackfin/kernel/ptrace.c:31:
+			unsigned long tmp;
+			break;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#384: FILE: arch/blackfin/kernel/ptrace.c:36:
+		printk(KERN_NOTICE "ptrace: PTRACE_PEEKDATA\n");

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#385: FILE: arch/blackfin/kernel/ptrace.c:37:
+		/* fall through */

WARNING:LINE_SPACING: Missing a blank line after declarations
#401: FILE: arch/blackfin/kernel/ptrace.c:51:
+			long tmp;
+			break;

WARNING:LINE_SPACING: Missing a blank line after declarations
#416: FILE: arch/blackfin/kernel/ptrace.c:64:
+			long tmp;
+			ret = 0;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#428: FILE: arch/blackfin/kernel/ptrace.c:76:
+		printk(KERN_NOTICE "ptrace: *** Unhandled case **** %d\n",

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#441: FILE: arch/blackfin/kernel/setup.c:1:
+

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - u_long get_sclk() should probably be u_long get_sclk(void)
#442: FILE: arch/blackfin/kernel/setup.c:2:
+u_long get_sclk()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 1)
#450: FILE: arch/blackfin/kernel/setup.c:10:
+	if (0 == ssel) {


WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#450: FILE: arch/blackfin/kernel/setup.c:10:
+	if (0 == ssel) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#455: FILE: arch/blackfin/kernel/setup.c:13:
+		printk(KERN_WARNING "Invalid System Clock\n");

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#462: FILE: arch/blackfin/kernel/setup.c:20:
+EXPORT_SYMBOL(get_sclk);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#468: FILE: arch/blackfin/kernel/signal.c:1:
+

WARNING:INDENTED_LABEL: labels should not be indented
#490: FILE: arch/blackfin/kernel/signal.c:22:
+      badframe:

WARNING:INDENTED_LABEL: labels should not be indented
#518: FILE: arch/blackfin/kernel/signal.c:48:
+      badframe:

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#530: FILE: arch/blackfin/kernel/sys_bfin.c:1:
+

WARNING:INDENTED_LABEL: labels should not be indented
#553: FILE: arch/blackfin/kernel/sys_bfin.c:24:
+      out:

WARNING:LINE_SPACING: Missing a blank line after declarations
#587: FILE: arch/blackfin/kernel/sys_bfin.c:54:
+				union semun fourth;
+				if (!ptr)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#594: FILE: arch/blackfin/kernel/sys_bfin.c:61:
+			return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#602: FILE: arch/blackfin/kernel/time.c:1:
+

WARNING:LONG_LINE_COMMENT: line length of 120 exceeds 100 columns
#627: FILE: arch/blackfin/kernel/time.c:26:
+	/* call setup_irq instead of request_irq because request_irq calls kmalloc which has not been initialized yet */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#649: FILE: arch/blackfin/kernel/time.c:47:
+	}
+	while (read_seqretry_irqrestore(&xtime_lock, seq, flags));

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#663: FILE: arch/blackfin/kernel/time.c:60:
+EXPORT_SYMBOL(do_gettimeofday);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#669: FILE: arch/blackfin/lib/checksum.c:1:
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#705: FILE: arch/blackfin/mach-bf533/boards/cm_bf533.c:1:
+

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#706: FILE: arch/blackfin/mach-bf533/boards/cm_bf533.c:2:
+#if defined(CONFIG_SPI_BFIN) || defined(CONFIG_SPI_BFIN_MODULE)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#713: FILE: arch/blackfin/mach-bf533/boards/cm_bf533.c:8:
+	printk("%s(): registering device resources\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#713: FILE: arch/blackfin/mach-bf533/boards/cm_bf533.c:8:
+	printk("%s(): registering device resources\n", __FUNCTION__);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#725: FILE: arch/blackfin/mach-bf533/boards/ezkit.c:1:
+

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#726: FILE: arch/blackfin/mach-bf533/boards/ezkit.c:2:
+#if defined(CONFIG_SPI_BFIN) || defined(CONFIG_SPI_BFIN_MODULE)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#733: FILE: arch/blackfin/mach-bf533/boards/ezkit.c:8:
+	printk("%s(): registering device resources\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#733: FILE: arch/blackfin/mach-bf533/boards/ezkit.c:8:
+	printk("%s(): registering device resources\n", __FUNCTION__);

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#738: FILE: arch/blackfin/mach-bf533/boards/ezkit.c:12:
+#if defined(CONFIG_SPI_BFIN) || defined(CONFIG_SPI_BFIN_MODULE)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#749: FILE: arch/blackfin/mach-bf533/boards/generic_board.c:1:
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#754: FILE: arch/blackfin/mach-bf533/boards/generic_board.c:6:
+	printk("%s(): registering device resources\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#754: FILE: arch/blackfin/mach-bf533/boards/generic_board.c:6:
+	printk("%s(): registering device resources\n", __FUNCTION__);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#767: FILE: arch/blackfin/mach-bf533/boards/stamp.c:1:
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#770: FILE: arch/blackfin/mach-bf533/boards/stamp.c:4:
+	printk("%s(): registering device resources\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#770: FILE: arch/blackfin/mach-bf533/boards/stamp.c:4:
+	printk("%s(): registering device resources\n", __FUNCTION__);

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#775: FILE: arch/blackfin/mach-bf533/boards/stamp.c:8:
+#if defined(CONFIG_SPI_BFIN) || defined(CONFIG_SPI_BFIN_MODULE)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#785: FILE: arch/blackfin/mach-bf533/cpu.c:1:
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#791: FILE: arch/blackfin/mach-bf533/cpu.c:5:
+    static int bf533_target(struct cpufreq_policy *policy,$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#800: FILE: arch/blackfin/mach-bf533/ints-priority.c:1:
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#801: FILE: arch/blackfin/mach-bf533/ints-priority.c:2:
+void program_IAR(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#815: FILE: arch/blackfin/mach-bf533/pm.c:1:
+

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#816: FILE: arch/blackfin/mach-bf533/pm.c:2:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#875: FILE: arch/blackfin/mach-bf537/boards/cm_bf537.c:1:
+

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#876: FILE: arch/blackfin/mach-bf537/boards/cm_bf537.c:2:
+#if defined(CONFIG_SPI_BFIN) || defined(CONFIG_SPI_BFIN_MODULE)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#885: FILE: arch/blackfin/mach-bf537/boards/generic_board.c:1:
+

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#886: FILE: arch/blackfin/mach-bf537/boards/generic_board.c:2:
+#if defined(CONFIG_SPI_BFIN) || defined(CONFIG_SPI_BFIN_MODULE)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#895: FILE: arch/blackfin/mach-bf537/boards/stamp.c:1:
+

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#896: FILE: arch/blackfin/mach-bf537/boards/stamp.c:2:
+#if defined(CONFIG_SPI_BFIN) || defined(CONFIG_SPI_BFIN_MODULE)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#905: FILE: arch/blackfin/mach-bf537/cpu.c:1:
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#910: FILE: arch/blackfin/mach-bf537/cpu.c:5:
+    static int bf537_target(struct cpufreq_policy *policy,$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#944: FILE: arch/blackfin/mach-bf537/ints-priority.c:1:
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#945: FILE: arch/blackfin/mach-bf537/ints-priority.c:2:
+void program_IAR(void);

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void program_IAR() should probably be void program_IAR(void)
#951: FILE: arch/blackfin/mach-bf537/ints-priority.c:7:
+void program_IAR()

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#958: FILE: arch/blackfin/mach-bf537/pm.c:1:
+

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#959: FILE: arch/blackfin/mach-bf537/pm.c:2:
+#include <asm/io.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1006: FILE: arch/blackfin/mach-bf561/boards/ezkit.c:1:
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1009: FILE: arch/blackfin/mach-bf561/boards/ezkit.c:4:
+	printk("%s(): registering device resources\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1009: FILE: arch/blackfin/mach-bf561/boards/ezkit.c:4:
+	printk("%s(): registering device resources\n", __FUNCTION__);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1021: FILE: arch/blackfin/mach-bf561/boards/generic_board.c:1:
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1024: FILE: arch/blackfin/mach-bf561/boards/generic_board.c:4:
+	printk("%s(): registering device resources\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1024: FILE: arch/blackfin/mach-bf561/boards/generic_board.c:4:
+	printk("%s(): registering device resources\n", __FUNCTION__);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1035: FILE: arch/blackfin/mach-bf561/coreb.c:1:
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1038: FILE: arch/blackfin/mach-bf561/coreb.c:4:
+{
+

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#1041: FILE: arch/blackfin/mach-bf561/coreb.c:6:
+      release_dma_src:
                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#1041: FILE: arch/blackfin/mach-bf561/coreb.c:6:
+      release_dma_src:

WARNING:INDENTED_LABEL: labels should not be indented
#1043: FILE: arch/blackfin/mach-bf561/coreb.c:8:
+      release_dma_dest:

WARNING:INDENTED_LABEL: labels should not be indented
#1045: FILE: arch/blackfin/mach-bf561/coreb.c:10:
+      release_data_a_sram:

WARNING:INDENTED_LABEL: labels should not be indented
#1047: FILE: arch/blackfin/mach-bf561/coreb.c:12:
+      release_data_b_sram:

WARNING:INDENTED_LABEL: labels should not be indented
#1049: FILE: arch/blackfin/mach-bf561/coreb.c:14:
+      release_instruction_b_sram:

WARNING:INDENTED_LABEL: labels should not be indented
#1051: FILE: arch/blackfin/mach-bf561/coreb.c:16:
+      release_instruction_a_sram:

WARNING:INDENTED_LABEL: labels should not be indented
#1053: FILE: arch/blackfin/mach-bf561/coreb.c:18:
+      exit:

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1061: FILE: arch/blackfin/mach-bf561/ints-priority.c:1:
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1062: FILE: arch/blackfin/mach-bf561/ints-priority.c:2:
+void program_IAR(void);

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void program_IAR() should probably be void program_IAR(void)
#1068: FILE: arch/blackfin/mach-bf561/ints-priority.c:7:
+void program_IAR()

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1075: FILE: arch/blackfin/mach-common/bf5xx_rtc.c:1:
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1079: FILE: arch/blackfin/mach-common/bf5xx_rtc.c:5:
+int rtc_get(time_t * time_in_seconds)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1087: FILE: arch/blackfin/mach-common/bf5xx_rtc.c:12:
+	if (time_in_seconds == NULL) {
+		return -1;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!time_in_seconds"
#1087: FILE: arch/blackfin/mach-common/bf5xx_rtc.c:12:
+	if (time_in_seconds == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1100: FILE: arch/blackfin/mach-common/cplbinfo.c:1:
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1104: FILE: arch/blackfin/mach-common/cplbinfo.c:5:
+	printk("Reset the CPLB swap in/out counts.\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1116: FILE: arch/blackfin/mach-common/ints-priority-dc.c:1:
+

WARNING:RETURN_VOID: void function return statements are not generally useful
#1144: FILE: arch/blackfin/mach-common/ints-priority-dc.c:26:
+	return;
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1150: FILE: arch/blackfin/mach-common/ints-priority-sc.c:1:
+

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1151: FILE: arch/blackfin/mach-common/ints-priority-sc.c:2:
+volatile unsigned long irq_flags = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1151: FILE: arch/blackfin/mach-common/ints-priority-sc.c:2:
+volatile unsigned long irq_flags = 0;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1154: FILE: arch/blackfin/mach-common/ints-priority-sc.c:5:
+volatile unsigned int num_spurious;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1168: FILE: arch/blackfin/mach-common/ints-priority-sc.c:17:
+	unsigned ivg, irq_pos = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1169: FILE: arch/blackfin/mach-common/ints-priority-sc.c:18:
+	unsigned ivg, irq_pos = 0;
+	for (ivg = 0; ivg <= IVG13 - IVG7; ivg++) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1172: FILE: arch/blackfin/mach-common/ints-priority-sc.c:21:
+		ivg7_13[ivg].istop = ivg7_13[ivg].ifirst = &ivg_table[irq_pos];

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LINE_SPACING: Missing a blank line after declarations
#1176: FILE: arch/blackfin/mach-common/ints-priority-sc.c:25:
+			int iar_shift = (irqn & 7) * 4;
+			if (ivg ==

WARNING:LINE_SPACING: Missing a blank line after declarations
#1211: FILE: arch/blackfin/mach-common/ints-priority-sc.c:56:
+	int mask = (1L << gpionr);
+	bfin_write_FIO_FLAG_C(mask);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1233: FILE: arch/blackfin/mach-common/ints-priority-sc.c:77:
+			if (ivg >= ivg_stop) {
[...]
+			} else if (sic_status & ivg->isrflag)
[...]

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1248: FILE: arch/blackfin/mach-common/irqpanic.c:1:
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1256: FILE: arch/blackfin/mach-common/irqpanic.c:8:
+		printk("icache coherency error\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1270: FILE: arch/blackfin/mach-common/irqpanic.c:21:
+		printk("\n\nicache checked, and OK\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1276: FILE: arch/blackfin/mach-common/irqpanic.c:26:
+	printk("\n\nException: IRQ 0x%x entered\n", reason);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1277: FILE: arch/blackfin/mach-common/irqpanic.c:27:
+	printk(" code=[0x%08x],  ", (unsigned int)regs->seqstat);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1278: FILE: arch/blackfin/mach-common/irqpanic.c:28:
+	printk(" stack frame=0x%04x,  ", (unsigned int)(unsigned long)regs);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1279: FILE: arch/blackfin/mach-common/irqpanic.c:29:
+	printk(" bad PC=0x%04x\n", (unsigned int)regs->pc);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1281: FILE: arch/blackfin/mach-common/irqpanic.c:31:
+		printk("\n----------- HARDWARE ERROR -----------\n\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1290: FILE: arch/blackfin/mach-common/irqpanic.c:40:
+			printk(HWC_x2);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1295: FILE: arch/blackfin/mach-common/irqpanic.c:45:
+			printk(KERN_EMERG HWC_x3);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1298: FILE: arch/blackfin/mach-common/irqpanic.c:48:
+			printk(KERN_EMERG HWC_x12);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1301: FILE: arch/blackfin/mach-common/irqpanic.c:51:
+			printk(KERN_EMERG HWC_x18);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1304: FILE: arch/blackfin/mach-common/irqpanic.c:54:
+			printk(KERN_EMERG HWC_default);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1311: FILE: arch/blackfin/mach-common/irqpanic.c:61:
+	if (0 == (info.si_signo = sig) || 0 == user_mode(regs))	/* in kernelspace */

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: Unbalanced braces around else statement
#1313: FILE: arch/blackfin/mach-common/irqpanic.c:63:
+	else {			/* in userspace */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1324: FILE: arch/blackfin/mm/blackfin_sram.c:1:
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1327: FILE: arch/blackfin/mm/blackfin_sram.c:4:
+	if (0) {
+	}

WARNING:INDENTED_LABEL: labels should not be indented
#1343: FILE: arch/blackfin/mm/blackfin_sram.c:19:
+      found:

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1359: FILE: arch/blackfin/oprofile/common.c:1:
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1367: FILE: arch/blackfin/oprofile/common.c:9:
+		char buf[3];
+		printk("Oprofile: creating files... \n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1367: FILE: arch/blackfin/oprofile/common.c:9:
+		printk("Oprofile: creating files... \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1367: FILE: arch/blackfin/oprofile/common.c:9:
+		printk("Oprofile: creating files... \n");

WARNING:SIZEOF_PARENTHESIS: sizeof buf should be sizeof(buf)
#1371: FILE: arch/blackfin/oprofile/common.c:12:
+		snprintf(buf, sizeof buf, "%d", i);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1389: FILE: arch/blackfin/oprofile/common.c:30:
+}
+int __init oprofile_arch_init(struct oprofile_operations *ops)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1398: FILE: arch/blackfin/oprofile/common.c:39:
+	printk("Oprofile got the cpu id is 0x%x. \n", dspid);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1398: FILE: arch/blackfin/oprofile/common.c:39:
+	printk("Oprofile got the cpu id is 0x%x. \n", dspid);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1419: FILE: arch/blackfin/oprofile/op_model_bf533.c:1:
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1421: FILE: arch/blackfin/oprofile/op_model_bf533.c:3:
+#define dbg(args...) printk(args)

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1425: FILE: arch/blackfin/oprofile/op_model_bf533.c:7:
+#define PM_ENABLE 0x01;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1435: FILE: arch/blackfin/oprofile/op_model_bf533.c:16:
+unsigned curr_pfctl, curr_count[2];

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1455: FILE: arch/blackfin/oprofile/timer_int.c:1:
+static int sys_timer0_start(void)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000035074.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 153 warnings, 12 checks, 1319 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000035074.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
