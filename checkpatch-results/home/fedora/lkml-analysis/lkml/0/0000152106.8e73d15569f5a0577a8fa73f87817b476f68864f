WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#45: FILE: arch/i386/mm/numa.c:1:
+#include <linux/bootmem.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#49: FILE: arch/i386/mm/numa.c:5:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:BRACES: braces {} should be used on all arms of this statement
#73: FILE: arch/i386/mm/numa.c:29:
+	if (nid && node_has_online_mem(nid))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#75: FILE: arch/i386/mm/numa.c:31:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#86: FILE: arch/i386/mm/numa.c:42:
+	int nid;
+	for_each_online_node(nid) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#89: FILE: arch/i386/mm/numa.c:45:
+		node_remap_start_vaddr[nid] = pfn_to_kaddr(

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#98: FILE: arch/i386/mm/numa.c:54:
+		printk ("node %d will remap to vaddr %08lx - %08lx\n", nid,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#98: FILE: arch/i386/mm/numa.c:54:
+		printk ("node %d will remap to vaddr %08lx - %08lx\n", nid,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#99: FILE: arch/i386/mm/numa.c:55:
+			(ulong) node_remap_start_vaddr[nid],

CHECK:SPACING: No space is necessary after a cast
#100: FILE: arch/i386/mm/numa.c:56:
+			(ulong) pfn_to_kaddr(max_low_pfn

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#127: FILE: arch/i386/mm/numa.c:83:
+		for (pfn=0; pfn < node_remap_size[node]; pfn += PTRS_PER_PTE) {
 		        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#128: FILE: arch/i386/mm/numa.c:84:
+			vaddr = node_remap_start_vaddr[node]+(pfn<<PAGE_SHIFT);
 			                                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#128: FILE: arch/i386/mm/numa.c:84:
+			vaddr = node_remap_start_vaddr[node]+(pfn<<PAGE_SHIFT);
 			                                         ^

CHECK:SPACING: No space is necessary after a cast
#129: FILE: arch/i386/mm/numa.c:85:
+			set_pmd_pfn((ulong) vaddr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#130: FILE: arch/i386/mm/numa.c:86:
+			set_pmd_pfn((ulong) vaddr,
+				node_remap_start_pfn[node] + pfn,

WARNING:TYPO_SPELLING: 'memroy' may be misspelled - perhaps 'memory'?
#144: FILE: arch/i386/mm/numa.c:100:
+		 * The acpi/srat node info can show hot-add memroy zones
 		                                            ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#172: FILE: arch/i386/mm/numa.c:128:
+		printk("Reserving %ld pages of KVA for lmem_map of node %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#173: FILE: arch/i386/mm/numa.c:129:
+		printk("Reserving %ld pages of KVA for lmem_map of node %d\n",
+				size, nid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#177: FILE: arch/i386/mm/numa.c:133:
+		printk("Shrinking node %d from %ld pages to %ld pages\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#178: FILE: arch/i386/mm/numa.c:134:
+		printk("Shrinking node %d from %ld pages to %ld pages\n",
+			nid, node_end_pfn[nid], node_end_pfn[nid] - size);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#180: FILE: arch/i386/mm/numa.c:136:
+		if (node_end_pfn[nid] & (PTRS_PER_PTE-1)) {
 		                                     ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#185: FILE: arch/i386/mm/numa.c:141:
+			printk("Shrinking node %d further by %ld pages for proper alignment\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#186: FILE: arch/i386/mm/numa.c:142:
+			printk("Shrinking node %d further by %ld pages for proper alignment\n",
+				nid, node_end_pfn[nid] & (PTRS_PER_PTE-1));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#186: FILE: arch/i386/mm/numa.c:142:
+				nid, node_end_pfn[nid] & (PTRS_PER_PTE-1));
 				                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#187: FILE: arch/i386/mm/numa.c:143:
+			size +=  node_end_pfn[nid] & (PTRS_PER_PTE-1);
 			                                          ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#193: FILE: arch/i386/mm/numa.c:149:
+	printk("Reserving total of %ld pages for numa KVA remap\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#194: FILE: arch/i386/mm/numa.c:150:
+	printk("Reserving total of %ld pages for numa KVA remap\n",
+			reserve_pages);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#429: FILE: include/asm-i386/mmzone.h:41:
+extern void __init remap_numa_kva(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#430: FILE: include/asm-i386/mmzone.h:42:
+extern unsigned long calculate_numa_remap_pages(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#431: FILE: include/asm-i386/mmzone.h:43:
+extern void setup_numa_kva_remap(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#448: FILE: include/asm-i386/pgtable-3level.h:68:
+extern void set_pmd_pfn(unsigned long vaddr, unsigned long pfn, pgprot_t flags);

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/mmzone.h> instead of <asm/mmzone.h>
#471: FILE: arch/i386/mm/init.c:39:
+#include <asm/mmzone.h>

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000152106.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 9 warnings, 22 checks, 244 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000152106.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
