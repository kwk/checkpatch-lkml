WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#59: FILE: include/linux/net_ns.h:24:
+	unsigned		fib4_hash_size, fib4_info_cnt;

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#148: FILE: include/net/ip_fib.h:222:
+extern struct fib_table * fib_tables_static[RT_TABLE_MAX+1];

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#148: FILE: include/net/ip_fib.h:222:
+extern struct fib_table * fib_tables_static[RT_TABLE_MAX+1];
                                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#179: FILE: include/net/ip_fib.h:254:
+extern int ip_fib_struct_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#180: FILE: include/net/ip_fib.h:255:
+extern void ip_fib_struct_fini(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#190: FILE: include/net/ip_fib.h:275:
+extern void fib_hashtable_destroy(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#196: FILE: include/net/ip_fib.h:281:
+extern void fib_hash_fini(struct fib_table *tb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#197: FILE: include/net/ip_fib.h:282:
+extern void fib_hash_destroy_hash(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#207: FILE: include/net/ip_fib.h:294:
+extern int fib_rules_struct_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#208: FILE: include/net/ip_fib.h:295:
+extern void fib_rules_notif_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#210: FILE: include/net/ip_fib.h:297:
+extern void fib_rules_struct_fini(void);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#291: FILE: net/ipv4/fib_frontend.c:66:
+struct fib_table *fib_tables_static[RT_TABLE_MAX+1];
                                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#387: FILE: net/ipv4/fib_frontend.c:673:
+	tables = kmalloc((RT_TABLE_MAX+1) * sizeof(*tables), GFP_KERNEL);
 	                              ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tables"
#388: FILE: net/ipv4/fib_frontend.c:674:
+	if (tables == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#390: FILE: net/ipv4/fib_frontend.c:676:
+	memset(tables, 0, (RT_TABLE_MAX+1) * sizeof(*tables));
 	                               ^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#423: FILE: net/ipv4/fib_frontend.c:709:
+	/*
+	 * FIB should already be empty since there is no netdevice,

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fi"
#458: FILE: net/ipv4/fib_hash.c:646:
+			if (fi == NULL)

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#460: FILE: net/ipv4/fib_hash.c:648:
+			if (destroy || (fi->fib_flags&RTNH_F_DEAD)) {
 			                             ^

CHECK:SPACING: No space is necessary after a cast
#469: FILE: net/ipv4/fib_hash.c:829:
+	struct fn_hash *table = (struct fn_hash *) ip_fib_main_table_ns()->tb_data;

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tbs[id]"
#531: FILE: net/ipv4/fib_rules.c:161:
+		if (tbs[id] == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#644: FILE: net/ipv4/fib_rules.c:509:
+static struct fib_rule *fib_rule_create(struct fib_rule *orig,
+		struct fib_rule *prev)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#649: FILE: net/ipv4/fib_rules.c:514:
+	if (p == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "prev"
#652: FILE: net/ipv4/fib_rules.c:517:
+	if (prev != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#668: FILE: net/ipv4/fib_rules.c:533:
+	if (p == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!q"
#671: FILE: net/ipv4/fib_rules.c:536:
+	if (q == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!q"
#675: FILE: net/ipv4/fib_rules.c:540:
+	if (q == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "r"
#693: FILE: net/ipv4/fib_rules.c:558:
+			r != NULL; r = nxt) {

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#767: FILE: net/ipv4/fib_semantics.c:215:
+static inline unsigned int fib_info_hashfn(const struct fib_info *fi,
+		struct net_namespace *ns)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000065037.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 12 warnings, 25 checks, 961 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000065037.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
