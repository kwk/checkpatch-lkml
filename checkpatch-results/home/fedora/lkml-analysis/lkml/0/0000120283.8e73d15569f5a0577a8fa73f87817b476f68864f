WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#115: 
#include

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#116: 
#include

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#117: 
#include \"hid-simple.h\"

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#119: 
#define DRIVER_DESC \"HID simple device example #1\"

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#120: 
#define DRIVER_VERSION \"0.1.0\"

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#123: 
#define SAMPLE_ID_VENDOR 0x0e8f

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#124: 
#define SAMPLE_ID_PRODUCT 0x0003

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#209: FILE: drivers/usb/input/hid-core.c:3:
* Copyright (c) 1999 Andreas Gal

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: drivers/usb/input/hid-core.c:806:
+ if (hid->claimed & HID_CLAIMED_INPUT) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 0)
#251: FILE: drivers/usb/input/hid-core.c:806:
+ if (hid->claimed & HID_CLAIMED_INPUT) {
hidinput_hid_event(hid, field, usage, value, regs);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#253: FILE: drivers/usb/input/hid-core.c:807:
+ if (hid->simple && hid->simple->event)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#253: FILE: drivers/usb/input/hid-core.c:807:
+ if (hid->simple && hid->simple->event)
+ hid->simple->event(hid, field, usage, value, regs);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: drivers/usb/input/hid-core.c:808:
+ hid->simple->event(hid, field, usage, value, regs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: drivers/usb/input/hid-core.c:809:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: drivers/usb/input/hid-core.c:1836:
+ struct list_head *node;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#264: FILE: drivers/usb/input/hid-core.c:1837:
+ struct matched_device *matched;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#274: FILE: drivers/usb/input/hid-core.c:1848:
+ if (hid->claimed & HID_CLAIMED_INPUT) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#274: FILE: drivers/usb/input/hid-core.c:1848:
+ if (hid->claimed & HID_CLAIMED_INPUT) {
[...]
+ if (hid->simple) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#276: FILE: drivers/usb/input/hid-core.c:1850:
+ if (hid->simple) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#276: FILE: drivers/usb/input/hid-core.c:1850:
+ if (hid->simple) {
+ if (hid->simple->disconnect)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#277: FILE: drivers/usb/input/hid-core.c:1851:
+ if (hid->simple->disconnect)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#277: FILE: drivers/usb/input/hid-core.c:1851:
+ if (hid->simple->disconnect)
+ hid->simple->disconnect(hid);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: drivers/usb/input/hid-core.c:1852:
+ hid->simple->disconnect(hid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: drivers/usb/input/hid-core.c:1854:
+ spin_lock(&simple_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#281: FILE: drivers/usb/input/hid-core.c:1855:
+ list_add(&hid->simple->node, &simple_devices_list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#282: FILE: drivers/usb/input/hid-core.c:1856:
+ spin_unlock(&simple_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: drivers/usb/input/hid-core.c:1857:
+ hid->simple->intf = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#284: FILE: drivers/usb/input/hid-core.c:1858:
+ hid->simple = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: drivers/usb/input/hid-core.c:1859:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: drivers/usb/input/hid-core.c:1861:
+ matched = NULL; /* shut up gcc */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#289: FILE: drivers/usb/input/hid-core.c:1863:
+ spin_lock(&matched_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: drivers/usb/input/hid-core.c:1864:
+ list_for_each(node, &matched_devices_list) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: drivers/usb/input/hid-core.c:1865:
+ matched = list_entry(node, struct matched_device, node);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: drivers/usb/input/hid-core.c:1866:
+ if (matched->intf == intf) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#292: FILE: drivers/usb/input/hid-core.c:1866:
+ if (matched->intf == intf) {
+ list_del(&matched->node);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#293: FILE: drivers/usb/input/hid-core.c:1867:
+ list_del(&matched->node);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#294: FILE: drivers/usb/input/hid-core.c:1868:
+ break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: drivers/usb/input/hid-core.c:1869:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: drivers/usb/input/hid-core.c:1870:
+ matched = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#297: FILE: drivers/usb/input/hid-core.c:1871:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#298: FILE: drivers/usb/input/hid-core.c:1872:
+ spin_unlock(&matched_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: drivers/usb/input/hid-core.c:1873:
+ if (matched) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#299: FILE: drivers/usb/input/hid-core.c:1873:
+ if (matched) {
+ matched->intf = 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#300: FILE: drivers/usb/input/hid-core.c:1874:
+ matched->intf = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#301: FILE: drivers/usb/input/hid-core.c:1875:
+ kfree(matched);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#302: FILE: drivers/usb/input/hid-core.c:1876:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: drivers/usb/input/hid-core.c:1877:
+ hidinput_disconnect(hid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#304: FILE: drivers/usb/input/hid-core.c:1878:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: drivers/usb/input/hid-core.c:1895:
+ struct hidinput_simple_device *simple=0;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#316: FILE: drivers/usb/input/hid-core.c:1895:
+ struct hidinput_simple_device *simple=0;
                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: drivers/usb/input/hid-core.c:1896:
+ struct matched_device *matched=0;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#317: FILE: drivers/usb/input/hid-core.c:1896:
+ struct matched_device *matched=0;
                                ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#318: FILE: drivers/usb/input/hid-core.c:1897:
+ struct list_head *simple_node;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: drivers/usb/input/hid-core.c:1898:
+ struct list_head *matched_node;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: drivers/usb/input/hid-core.c:1899:
+ struct hid_device *hid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: drivers/usb/input/hid-core.c:1901:
+ spin_lock(&matched_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#323: FILE: drivers/usb/input/hid-core.c:1902:
+ list_for_each(matched_node, &matched_devices_list) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: drivers/usb/input/hid-core.c:1903:
+ matched = list_entry(matched_node, struct matched_device, node);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: drivers/usb/input/hid-core.c:1904:
+ spin_lock(&simple_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#326: FILE: drivers/usb/input/hid-core.c:1905:
+ list_for_each(simple_node, &simple_devices_list) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#327: FILE: drivers/usb/input/hid-core.c:1906:
+ simple = list_entry(simple_node, struct hidinput_simple_device, node);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#328: FILE: drivers/usb/input/hid-core.c:1907:
+ if (usb_match_id(matched->intf, simple->id))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#328: FILE: drivers/usb/input/hid-core.c:1907:
+ if (usb_match_id(matched->intf, simple->id))
+ break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: drivers/usb/input/hid-core.c:1908:
+ break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: drivers/usb/input/hid-core.c:1909:
+ simple = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: drivers/usb/input/hid-core.c:1910:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: drivers/usb/input/hid-core.c:1911:
+ spin_unlock(&simple_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#333: FILE: drivers/usb/input/hid-core.c:1912:
+ if (simple)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#333: FILE: drivers/usb/input/hid-core.c:1912:
+ if (simple)
+ break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#334: FILE: drivers/usb/input/hid-core.c:1913:
+ break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#335: FILE: drivers/usb/input/hid-core.c:1914:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#336: FILE: drivers/usb/input/hid-core.c:1915:
+ spin_unlock(&matched_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#338: FILE: drivers/usb/input/hid-core.c:1917:
+ if (0 == simple)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#338: FILE: drivers/usb/input/hid-core.c:1917:
+ if (0 == simple)
+ return;

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#338: FILE: drivers/usb/input/hid-core.c:1917:
+ if (0 == simple)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#339: FILE: drivers/usb/input/hid-core.c:1918:
+ return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: drivers/usb/input/hid-core.c:1920:
+ hid = usb_get_intfdata(matched->intf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#342: FILE: drivers/usb/input/hid-core.c:1921:
+ if ((simple->connect && 0==simple->connect(hid)) || !simple->connect) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#342: FILE: drivers/usb/input/hid-core.c:1921:
+ if ((simple->connect && 0==simple->connect(hid)) || !simple->connect) {
+ simple->intf = matched->intf;

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#342: FILE: drivers/usb/input/hid-core.c:1921:
+ if ((simple->connect && 0==simple->connect(hid)) || !simple->connect) {
                           ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: drivers/usb/input/hid-core.c:1922:
+ simple->intf = matched->intf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#344: FILE: drivers/usb/input/hid-core.c:1923:
+ hid->simple = simple;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#345: FILE: drivers/usb/input/hid-core.c:1924:
+ spin_lock(&simple_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#346: FILE: drivers/usb/input/hid-core.c:1925:
+ list_del(&simple->node);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#347: FILE: drivers/usb/input/hid-core.c:1926:
+ spin_unlock(&simple_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#348: FILE: drivers/usb/input/hid-core.c:1927:
+ hidinput_simple_device_setup_usage(hid);$

WARNING:TYPO_SPELLING: 'attatch' may be misspelled - perhaps 'attach'?
#349: FILE: drivers/usb/input/hid-core.c:1928:
+ printk(KERN_INFO\"The simple HID device \\\'%s\\\' attatch on 
                                                     ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#349: FILE: drivers/usb/input/hid-core.c:1928:
+ printk(KERN_INFO\"The simple HID device \\\'%s\\\' attatch on $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#349: FILE: drivers/usb/input/hid-core.c:1928:
+ printk(KERN_INFO\"The simple HID device \\\'%s\\\' attatch on $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#349: FILE: drivers/usb/input/hid-core.c:1928:
+ printk(KERN_INFO\"The simple HID device \\\'%s\\\' attatch on 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#351: FILE: drivers/usb/input/hid-core.c:1929:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#357: FILE: drivers/usb/input/hid-core.c:1935:
+ struct hidinput_simple_device *simple;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#358: FILE: drivers/usb/input/hid-core.c:1936:
+ struct list_head *node;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#359: FILE: drivers/usb/input/hid-core.c:1937:
+ struct hid_device *hid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#361: FILE: drivers/usb/input/hid-core.c:1939:
+ if (!intf)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#362: FILE: drivers/usb/input/hid-core.c:1940:
+ return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#364: FILE: drivers/usb/input/hid-core.c:1942:
+ simple = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#365: FILE: drivers/usb/input/hid-core.c:1943:
+ spin_lock(&simple_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#366: FILE: drivers/usb/input/hid-core.c:1944:
+ list_for_each(node, &simple_devices_list) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#367: FILE: drivers/usb/input/hid-core.c:1945:
+ simple = list_entry(node, struct hidinput_simple_device, node);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#368: FILE: drivers/usb/input/hid-core.c:1946:
+ if (usb_match_id(intf, simple->id))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#369: FILE: drivers/usb/input/hid-core.c:1947:
+ break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#370: FILE: drivers/usb/input/hid-core.c:1948:
+ simple = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#371: FILE: drivers/usb/input/hid-core.c:1949:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#372: FILE: drivers/usb/input/hid-core.c:1950:
+ spin_unlock(&simple_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#373: FILE: drivers/usb/input/hid-core.c:1951:
+ /* no such simple device match this hid_device, also ok */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#374: FILE: drivers/usb/input/hid-core.c:1952:
+ if (0 == simple)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#375: FILE: drivers/usb/input/hid-core.c:1953:
+ return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#377: FILE: drivers/usb/input/hid-core.c:1955:
+ hid = usb_get_intfdata (intf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#378: FILE: drivers/usb/input/hid-core.c:1956:
+ if ((simple->connect && 0==simple->connect(hid)) || !simple->connect) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#379: FILE: drivers/usb/input/hid-core.c:1957:
+ simple->intf = intf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#380: FILE: drivers/usb/input/hid-core.c:1958:
+ hid->simple = simple;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#381: FILE: drivers/usb/input/hid-core.c:1959:
+ spin_lock(&simple_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#382: FILE: drivers/usb/input/hid-core.c:1960:
+ list_del(&simple->node);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#383: FILE: drivers/usb/input/hid-core.c:1961:
+ spin_unlock(&simple_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#384: FILE: drivers/usb/input/hid-core.c:1962:
+ hidinput_simple_device_setup_usage(hid);$

WARNING:TYPO_SPELLING: 'attatch' may be misspelled - perhaps 'attach'?
#385: FILE: drivers/usb/input/hid-core.c:1963:
+ printk(KERN_INFO\"The simple HID device \\\'%s\\\' attatch on 
                                                     ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#385: FILE: drivers/usb/input/hid-core.c:1963:
+ printk(KERN_INFO\"The simple HID device \\\'%s\\\' attatch on $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#385: FILE: drivers/usb/input/hid-core.c:1963:
+ printk(KERN_INFO\"The simple HID device \\\'%s\\\' attatch on $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#387: FILE: drivers/usb/input/hid-core.c:1964:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#393: FILE: drivers/usb/input/hid-core.c:1970:
+ struct list_head *node;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#394: FILE: drivers/usb/input/hid-core.c:1971:
+ struct matched_device *matched;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#396: FILE: drivers/usb/input/hid-core.c:1973:
+ if (!simple || !simple->name || simple->intf)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#397: FILE: drivers/usb/input/hid-core.c:1974:
+ return -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#399: FILE: drivers/usb/input/hid-core.c:1976:
+ simple->flags = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#400: FILE: drivers/usb/input/hid-core.c:1977:
+ matched = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#402: FILE: drivers/usb/input/hid-core.c:1979:
+ spin_lock(&matched_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#403: FILE: drivers/usb/input/hid-core.c:1980:
+ list_for_each(node, &matched_devices_list) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#404: FILE: drivers/usb/input/hid-core.c:1981:
+ matched = list_entry(node, struct matched_device, node);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#405: FILE: drivers/usb/input/hid-core.c:1982:
+ if (usb_match_id(matched->intf, simple->id))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#406: FILE: drivers/usb/input/hid-core.c:1983:
+ break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#407: FILE: drivers/usb/input/hid-core.c:1984:
+ matched = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#408: FILE: drivers/usb/input/hid-core.c:1985:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#409: FILE: drivers/usb/input/hid-core.c:1986:
+ spin_unlock(&matched_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#411: FILE: drivers/usb/input/hid-core.c:1988:
+ if (matched) {/* We called hid_probe() on this usb_interface ago */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#412: FILE: drivers/usb/input/hid-core.c:1989:
+ struct hid_device *hid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#414: FILE: drivers/usb/input/hid-core.c:1991:
+ hid = usb_get_intfdata (matched->intf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: drivers/usb/input/hid-core.c:1992:
+ if (hid->simple)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#416: FILE: drivers/usb/input/hid-core.c:1993:
+ goto device_busy;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#417: FILE: drivers/usb/input/hid-core.c:1994:
+ if ((simple->connect && 0==simple->connect(hid)) || !simple->connect) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#418: FILE: drivers/usb/input/hid-core.c:1995:
+ simple->intf = matched->intf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#419: FILE: drivers/usb/input/hid-core.c:1996:
+ hid->simple = simple;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#420: FILE: drivers/usb/input/hid-core.c:1997:
+ hidinput_simple_device_setup_usage(hid);$

WARNING:TYPO_SPELLING: 'attatch' may be misspelled - perhaps 'attach'?
#421: FILE: drivers/usb/input/hid-core.c:1998:
+ printk(KERN_INFO\"The simple HID device \\\'%s\\\' attatch on 
                                                     ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#421: FILE: drivers/usb/input/hid-core.c:1998:
+ printk(KERN_INFO\"The simple HID device \\\'%s\\\' attatch on $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#421: FILE: drivers/usb/input/hid-core.c:1998:
+ printk(KERN_INFO\"The simple HID device \\\'%s\\\' attatch on $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#423: FILE: drivers/usb/input/hid-core.c:1999:
+ return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#424: FILE: drivers/usb/input/hid-core.c:2000:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#425: FILE: drivers/usb/input/hid-core.c:2001:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#426: FILE: drivers/usb/input/hid-core.c:2002:
+ return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#428: FILE: drivers/usb/input/hid-core.c:2004:
+ device_busy:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#429: FILE: drivers/usb/input/hid-core.c:2005:
+ spin_lock(&simple_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#430: FILE: drivers/usb/input/hid-core.c:2006:
+ list_add(&simple->node, &simple_devices_list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#431: FILE: drivers/usb/input/hid-core.c:2007:
+ spin_unlock(&simple_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#432: FILE: drivers/usb/input/hid-core.c:2008:
+ return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#440: FILE: drivers/usb/input/hid-core.c:2016:
+ if (simple->intf) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#441: FILE: drivers/usb/input/hid-core.c:2017:
+ struct hid_device *hid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#442: FILE: drivers/usb/input/hid-core.c:2018:
+ hid = usb_get_intfdata (simple->intf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#444: FILE: drivers/usb/input/hid-core.c:2020:
+ if (hid->simple != simple)$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#445: FILE: drivers/usb/input/hid-core.c:2021:
+ printk(KERN_ERR\"failed to check simple device for consistency at %s $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#445: FILE: drivers/usb/input/hid-core.c:2021:
+ printk(KERN_ERR\"failed to check simple device for consistency at %s $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: drivers/usb/input/hid-core.c:2022:
+ hidinput_simple_device_clear_usage(hid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#448: FILE: drivers/usb/input/hid-core.c:2023:
+ if (simple->disconnect)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: drivers/usb/input/hid-core.c:2024:
+ simple->disconnect(hid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#450: FILE: drivers/usb/input/hid-core.c:2025:
+ hid->simple = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#451: FILE: drivers/usb/input/hid-core.c:2026:
+ simple->intf = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#452: FILE: drivers/usb/input/hid-core.c:2027:
+ simple->flags = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#453: FILE: drivers/usb/input/hid-core.c:2028:
+ } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#454: FILE: drivers/usb/input/hid-core.c:2029:
+ spin_lock(&simple_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#455: FILE: drivers/usb/input/hid-core.c:2030:
+ list_del(&simple->node);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#456: FILE: drivers/usb/input/hid-core.c:2031:
+ spin_unlock(&simple_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#457: FILE: drivers/usb/input/hid-core.c:2032:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#458: FILE: drivers/usb/input/hid-core.c:2033:
+ /* to active simple device that matched current HID device is waiting */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#459: FILE: drivers/usb/input/hid-core.c:2034:
+ hidinput_simple_device_bind_foreach();$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#460: FILE: drivers/usb/input/hid-core.c:2035:
+ printk(KERN_INFO\"The simple HID device \\\'%s\\\' unregistered.\\n\", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#460: FILE: drivers/usb/input/hid-core.c:2035:
+ printk(KERN_INFO\"The simple HID device \\\'%s\\\' unregistered.\\n\", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#474: FILE: drivers/usb/input/hid-core.c:2040:
+ struct matched_device *matched;$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#474: FILE: drivers/usb/input/hid-core.c:2040:
+ struct matched_device *matched;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#486: FILE: drivers/usb/input/hid-core.c:2057:
+ usb_set_intfdata(intf, hid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#488: FILE: drivers/usb/input/hid-core.c:2059:
+ if (!hidinput_connect(hid)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#488: FILE: drivers/usb/input/hid-core.c:2059:
+ if (!hidinput_connect(hid)) {
+ matched = kmalloc(sizeof(struct matched_device), GFP_KERNEL);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#489: FILE: drivers/usb/input/hid-core.c:2060:
+ matched = kmalloc(sizeof(struct matched_device), GFP_KERNEL);$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*matched)...) over kmalloc(sizeof(struct matched_device)...)
#489: FILE: drivers/usb/input/hid-core.c:2060:
+ matched = kmalloc(sizeof(struct matched_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#490: FILE: drivers/usb/input/hid-core.c:2061:
+ if (matched) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#490: FILE: drivers/usb/input/hid-core.c:2061:
+ if (matched) {
+ matched->intf = intf;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#491: FILE: drivers/usb/input/hid-core.c:2062:
+ matched->intf = intf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#492: FILE: drivers/usb/input/hid-core.c:2063:
+ spin_lock(&matched_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#493: FILE: drivers/usb/input/hid-core.c:2064:
+ list_add(&matched->node, &matched_devices_list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#494: FILE: drivers/usb/input/hid-core.c:2065:
+ spin_unlock(&matched_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#495: FILE: drivers/usb/input/hid-core.c:2066:
+ hidinput_simple_device_bind(intf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#496: FILE: drivers/usb/input/hid-core.c:2067:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#498: FILE: drivers/usb/input/hid-core.c:2068:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#512: FILE: drivers/usb/input/hid-core.c:2152:
+ spin_lock_init(&matched_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#513: FILE: drivers/usb/input/hid-core.c:2153:
+ spin_lock_init(&simple_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#514: FILE: drivers/usb/input/hid-core.c:2154:
+ INIT_LIST_HEAD(&matched_devices_list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#515: FILE: drivers/usb/input/hid-core.c:2155:
+ INIT_LIST_HEAD(&simple_devices_list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#546: FILE: drivers/usb/input/hid.h:434:
+ struct hidinput_simple_device *simple;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#588: FILE: drivers/usb/input/hid-input.c:684:
+ struct hid_report *report;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#589: FILE: drivers/usb/input/hid-input.c:685:
+ int i, j, k;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#590: FILE: drivers/usb/input/hid-input.c:686:
+ void (*do_usage)(struct hid_field *, struct hid_usage *);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hid_field *' should also have an identifier name
#590: FILE: drivers/usb/input/hid-input.c:686:
+ void (*do_usage)(struct hid_field *, struct hid_usage *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hid_usage *' should also have an identifier name
#590: FILE: drivers/usb/input/hid-input.c:686:
+ void (*do_usage)(struct hid_field *, struct hid_usage *);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#592: FILE: drivers/usb/input/hid-input.c:688:
+ if (!hid->simple)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#592: FILE: drivers/usb/input/hid-input.c:688:
+ if (!hid->simple)
+ return;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#593: FILE: drivers/usb/input/hid-input.c:689:
+ return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#594: FILE: drivers/usb/input/hid-input.c:690:
+ do_usage = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#595: FILE: drivers/usb/input/hid-input.c:691:
+ if (hid->simple->flags & HIDINPUT_SIMPLE_SETUP_USAGE)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#595: FILE: drivers/usb/input/hid-input.c:691:
+ if (hid->simple->flags & HIDINPUT_SIMPLE_SETUP_USAGE)
+ do_usage = hid->simple->setup_usage;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#596: FILE: drivers/usb/input/hid-input.c:692:
+ do_usage = hid->simple->setup_usage;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#597: FILE: drivers/usb/input/hid-input.c:693:
+ else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#597: FILE: drivers/usb/input/hid-input.c:693:
+ else
+ do_usage = hid->simple->clear_usage;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#598: FILE: drivers/usb/input/hid-input.c:694:
+ do_usage = hid->simple->clear_usage;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#599: FILE: drivers/usb/input/hid-input.c:695:
+ if (!do_usage)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#599: FILE: drivers/usb/input/hid-input.c:695:
+ if (!do_usage)
+ return;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#600: FILE: drivers/usb/input/hid-input.c:696:
+ return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#602: FILE: drivers/usb/input/hid-input.c:698:
+ for (i = 0; i < hid->maxcollection; i++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#602: FILE: drivers/usb/input/hid-input.c:698:
+ for (i = 0; i < hid->maxcollection; i++)
+ if (hid->collection[i].type == HID_COLLECTION_APPLICATION ||

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#603: FILE: drivers/usb/input/hid-input.c:699:
+ if (hid->collection[i].type == HID_COLLECTION_APPLICATION ||$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#603: FILE: drivers/usb/input/hid-input.c:699:
+ if (hid->collection[i].type == HID_COLLECTION_APPLICATION ||
[...]
+ if (IS_INPUT_APPLICATION(hid->collection[i].usage))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#604: FILE: drivers/usb/input/hid-input.c:700:
+ if (hid->collection[i].type == HID_COLLECTION_APPLICATION ||
+ hid->collection[i].type == HID_COLLECTION_PHYSICAL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#604: FILE: drivers/usb/input/hid-input.c:700:
+ hid->collection[i].type == HID_COLLECTION_PHYSICAL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#605: FILE: drivers/usb/input/hid-input.c:701:
+ if (IS_INPUT_APPLICATION(hid->collection[i].usage))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#605: FILE: drivers/usb/input/hid-input.c:701:
+ if (IS_INPUT_APPLICATION(hid->collection[i].usage))
+ break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#606: FILE: drivers/usb/input/hid-input.c:702:
+ break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#608: FILE: drivers/usb/input/hid-input.c:704:
+ if (i == hid->maxcollection)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#608: FILE: drivers/usb/input/hid-input.c:704:
+ if (i == hid->maxcollection)
+ return;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#609: FILE: drivers/usb/input/hid-input.c:705:
+ return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#611: FILE: drivers/usb/input/hid-input.c:707:
+ for (k = HID_INPUT_REPORT; k <= HID_OUTPUT_REPORT; k++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#611: FILE: drivers/usb/input/hid-input.c:707:
+ for (k = HID_INPUT_REPORT; k <= HID_OUTPUT_REPORT; k++)
+ list_for_each_entry(report, &hid->report_enum[k].report_list, list) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#612: FILE: drivers/usb/input/hid-input.c:708:
+ list_for_each_entry(report, &hid->report_enum[k].report_list, list) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#612: FILE: drivers/usb/input/hid-input.c:708:
+ list_for_each_entry(report, &hid->report_enum[k].report_list, list) {
[...]
+ if (!report->maxfield)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#613: FILE: drivers/usb/input/hid-input.c:709:
+ list_for_each_entry(report, &hid->report_enum[k].report_list, list) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#614: FILE: drivers/usb/input/hid-input.c:710:
+ if (!report->maxfield)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#614: FILE: drivers/usb/input/hid-input.c:710:
+ if (!report->maxfield)
+ continue;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#615: FILE: drivers/usb/input/hid-input.c:711:
+ continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#617: FILE: drivers/usb/input/hid-input.c:713:
+ for (i = 0; i < report->maxfield; i++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#617: FILE: drivers/usb/input/hid-input.c:713:
+ for (i = 0; i < report->maxfield; i++)
+ for (j = 0; j < report->field[i]->maxusage; j++)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#618: FILE: drivers/usb/input/hid-input.c:714:
+ for (j = 0; j < report->field[i]->maxusage; j++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#618: FILE: drivers/usb/input/hid-input.c:714:
+ for (j = 0; j < report->field[i]->maxusage; j++)
+ do_usage(report->field[i], report->field[i]->usage + j);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#619: FILE: drivers/usb/input/hid-input.c:715:
+ do_usage(report->field[i], report->field[i]->usage + j);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#620: FILE: drivers/usb/input/hid-input.c:716:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#622: FILE: drivers/usb/input/hid-input.c:718:
+ return;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#635: FILE: drivers/usb/input/hid-simple.h:1:
+#ifndef __HID_SIMPLE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#641: FILE: drivers/usb/input/hid-simple.h:7:
+/************ The private section for simple device implement only $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#645: FILE: drivers/usb/input/hid-simple.h:10:
+ and is removed at hidinput_disconnect().$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#646: FILE: drivers/usb/input/hid-simple.h:11:
+ */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#648: FILE: drivers/usb/input/hid-simple.h:13:
+ struct usb_interface *intf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#649: FILE: drivers/usb/input/hid-simple.h:14:
+ struct list_head node;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#653: FILE: drivers/usb/input/hid-simple.h:18:
+#define HIDINPUT_SIMPLE_SETUP_USAGE 0x1 /* the reverse is to call $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#658: FILE: drivers/usb/input/hid-simple.h:22:
+ if (hid->simple) {\\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#659: FILE: drivers/usb/input/hid-simple.h:23:
+ hid->simple->flags |= HIDINPUT_SIMPLE_SETUP_USAGE; \\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#660: FILE: drivers/usb/input/hid-simple.h:24:
+ hidinput_simple_device_configure_usage(hid); \\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#661: FILE: drivers/usb/input/hid-simple.h:25:
+ }\\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#666: FILE: drivers/usb/input/hid-simple.h:30:
+ if (hid->simple) {\\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#667: FILE: drivers/usb/input/hid-simple.h:31:
+ hid->simple->flags &= (~HIDINPUT_SIMPLE_SETUP_USAGE); \\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#668: FILE: drivers/usb/input/hid-simple.h:32:
+ hidinput_simple_device_configure_usage(hid); \\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#669: FILE: drivers/usb/input/hid-simple.h:33:
+ }\\$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#675: FILE: drivers/usb/input/hid-simple.h:39:
+/******************** The private section end. $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#678: FILE: drivers/usb/input/hid-simple.h:41:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#679: FILE: drivers/usb/input/hid-simple.h:42:
+/********************* The public interface for simple device driver $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#683: FILE: drivers/usb/input/hid-simple.h:45:
+ struct list_head node;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#684: FILE: drivers/usb/input/hid-simple.h:46:
+ struct usb_interface *intf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#685: FILE: drivers/usb/input/hid-simple.h:47:
+ int flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#687: FILE: drivers/usb/input/hid-simple.h:49:
+ char *name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#688: FILE: drivers/usb/input/hid-simple.h:50:
+ int (*connect)(struct hid_device *);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#689: FILE: drivers/usb/input/hid-simple.h:51:
+ void (*setup_usage)(struct hid_field *, struct hid_usage *);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#690: FILE: drivers/usb/input/hid-simple.h:52:
+ void (*event)(const struct hid_device *, const struct hid_field *, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#690: FILE: drivers/usb/input/hid-simple.h:52:
+ void (*event)(const struct hid_device *, const struct hid_field *, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#692: FILE: drivers/usb/input/hid-simple.h:53:
+ void (*clear_usage)(struct hid_field *, struct hid_usage *);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#693: FILE: drivers/usb/input/hid-simple.h:54:
+ void (*disconnect)(struct hid_device *);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#694: FILE: drivers/usb/input/hid-simple.h:55:
+ struct usb_device_id id[2]; /* variable length member */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#698: FILE: drivers/usb/input/hid-simple.h:59:
+void hidinput_unregister_simple_device(struct hidinput_simple_device $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000120283.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 253 warnings, 4 checks, 475 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000120283.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
