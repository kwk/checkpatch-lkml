ERROR:CODE_INDENT: code indent should use tabs where possible
#179: FILE: include/linux/futex.h:34:
+        INIT_LIST_HEAD(&inode->i_data.robust_list);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: include/linux/futex.h:34:
+        INIT_LIST_HEAD(&inode->i_data.robust_list);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#180: FILE: include/linux/futex.h:35:
+        init_MUTEX(&inode->i_data.robust_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: include/linux/futex.h:35:
+        init_MUTEX(&inode->i_data.robust_sem);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#183: FILE: include/linux/futex.h:38:
+extern void futex_free_robust_list(struct inode *inode);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#184: FILE: include/linux/futex.h:39:
+extern void exit_futex(struct task_struct *tsk);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#188: FILE: include/linux/futex.h:43:
+#define futex_init_inode(a) ^I^Ido { } while (0)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#248: FILE: kernel/futex.c:150:
+static int get_futex_key(unsigned long uaddr, union futex_key *key,
+			struct list_head **list, struct semaphore **sem)

ERROR:CODE_INDENT: code indent should use tabs where possible
#421: FILE: kernel/futex.c:917:
+ ^Istruct futex_robust *this, *next;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#421: FILE: kernel/futex.c:917:
+ ^Istruct futex_robust *this, *next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#421: FILE: kernel/futex.c:917:
+ ^Istruct futex_robust *this, *next;$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#423: FILE: kernel/futex.c:919:
+	if (inode == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mapping"
#427: FILE: kernel/futex.c:923:
+	if (mapping == NULL)

WARNING:RETURN_VOID: void function return statements are not generally useful
#444: FILE: kernel/futex.c:940:
+	return;
+}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#509: FILE: kernel/futex.c:1005:
+		uaddr = get_shared_uaddr(key,vma);
 		                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#525: FILE: kernel/futex.c:1021:
+static void find_owned_futex(struct vm_area_struct *vma, struct list_head *head,
+				struct semaphore *sem)

ERROR:CODE_INDENT: code indent should use tabs where possible
#528: FILE: kernel/futex.c:1024:
+ ^Iunsigned long uaddr;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#528: FILE: kernel/futex.c:1024:
+ ^Iunsigned long uaddr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#528: FILE: kernel/futex.c:1024:
+ ^Iunsigned long uaddr;$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#534: FILE: kernel/futex.c:1030:
+	list_for_each_entry_safe(this, next, head, list) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#568: FILE: kernel/futex.c:1064:
+	if (tsk==NULL)
 	       ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tsk"
#568: FILE: kernel/futex.c:1064:
+	if (tsk==NULL)

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#572: FILE: kernel/futex.c:1068:
+	if (mm==NULL)
 	      ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mm"
#572: FILE: kernel/futex.c:1068:
+	if (mm==NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "vma"
#577: FILE: kernel/futex.c:1073:
+	for (vma = mm->mmap; vma != NULL; vma = vma->vm_next) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma->vm_file"
#578: FILE: kernel/futex.c:1074:
+		if (vma->vm_file == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma->vm_file->f_mapping"
#581: FILE: kernel/futex.c:1077:
+		if (vma->vm_file->f_mapping == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!head"
#678: FILE: kernel/futex.c:1174:
+	if (head == NULL) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#686: FILE: kernel/futex.c:1182:
+		if (match_futex (&this->key, &key)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#724: FILE: kernel/futex.c:1220:
+	if ((value = futex_get_user(uaddr)) == -EFAULT)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#758: FILE: kernel/futex.c:1312:
+	robust_futex_cachep = kmem_cache_create("robust_futex", sizeof(struct futex_robust), 0, 0, NULL, NULL);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#771: FILE: init/Kconfig:351:
+config ROBUST_FUTEX
+	bool "Enable robust futex support"
+	depends on FUTEX
+	default y
+	help
+	  Enable this option if you want to use robust user space mutexes.
+	  Enabling this option slows down the exit path of the kernel for
+	  all processes.  Robust futexes will run glibc-based applications correctly.
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000115668.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 11 warnings, 13 checks, 643 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000115668.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
