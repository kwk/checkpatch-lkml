WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
This patch (made against linux-2.4.4-pre5) makes several changes to the rwsem 

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#655: FILE: include/asm-i386/rwsem.h:1:
+/* rwsem.h: R/W semaphores implemented using XADD/CMPXCHG for i486+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#689: FILE: include/asm-i386/rwsem.h:38:
+	spinlock_t		wait_lock;

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#706: FILE: include/asm-i386/rwsem.h:55:
+#define __RWSEM_DEBUG_INIT      , 0
                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#706: FILE: include/asm-i386/rwsem.h:55:
+#define __RWSEM_DEBUG_INIT      , 0

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#711: FILE: include/asm-i386/rwsem.h:60:
+#define __RWSEM_DEBUG_MINIT(name)	, (int)&(name).__magic, ATOMIC_INIT(0), ATOMIC_INIT(0)
                                  	^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#711: FILE: include/asm-i386/rwsem.h:60:
+#define __RWSEM_DEBUG_MINIT(name)	, (int)&(name).__magic, ATOMIC_INIT(0), ATOMIC_INIT(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#716: FILE: include/asm-i386/rwsem.h:65:
+#define __RWSEM_INITIALIZER(name) \
+{ RWSEM_UNLOCKED_VALUE, SPIN_LOCK_UNLOCKED, NULL, &(name).wait_front \
+	__RWSEM_DEBUG_INIT __RWSEM_DEBUG_MINIT(name) }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#720: FILE: include/asm-i386/rwsem.h:69:
+#define DECLARE_RWSEM(name) \
+	struct rw_semaphore name = __RWSEM_INITIALIZER(name)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#744: FILE: include/asm-i386/rwsem.h:93:
+	__asm__ __volatile__(

WARNING:SPLIT_STRING: quoted string split across lines
#754: FILE: include/asm-i386/rwsem.h:103:
+		".previous"
+		"# ending down_read\n\t"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#768: FILE: include/asm-i386/rwsem.h:117:
+	__asm__ __volatile__(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#793: FILE: include/asm-i386/rwsem.h:142:
+	__asm__ __volatile__(

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__up_read', this function's name, in a string
#794: FILE: include/asm-i386/rwsem.h:143:
+		"# beginning __up_read\n\t"

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__up_read', this function's name, in a string
#806: FILE: include/asm-i386/rwsem.h:155:
+		"# ending __up_read\n"

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#817: FILE: include/asm-i386/rwsem.h:166:
+	__asm__ __volatile__(

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__up_write', this function's name, in a string
#818: FILE: include/asm-i386/rwsem.h:167:
+		"# beginning __up_write\n\t"

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__up_write', this function's name, in a string
#827: FILE: include/asm-i386/rwsem.h:176:
+		"# ending __up_write\n"

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#840: FILE: include/asm-i386/rwsem.h:189:
+	__asm__ __volatile__(

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#846: FILE: include/asm-i386/rwsem.h:195:
+	return tmp+delta;
 	          ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#854: FILE: include/asm-i386/rwsem.h:203:
+	return cmpxchg((__u16*)&sem->count,0,RWSEM_ACTIVE_BIAS);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#854: FILE: include/asm-i386/rwsem.h:203:
+	return cmpxchg((__u16*)&sem->count,0,RWSEM_ACTIVE_BIAS);
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#854: FILE: include/asm-i386/rwsem.h:203:
+	return cmpxchg((__u16*)&sem->count,0,RWSEM_ACTIVE_BIAS);
 	                                    ^

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#878: FILE: include/asm-sparc64/rwsem.h:26:
+	spinlock_t		wait_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#915: FILE: include/linux/rwsem-spinlock.h:30:
+	spinlock_t		wait_lock;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1050: FILE: include/linux/rwsem.h:65:
+extern void FASTCALL(rwsemtrace(struct rw_semaphore *sem, const char *str));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1186: FILE: lib/rwsem.c:17:
+};
+#define RWSEM_WAITER_MAGIC 0x52575345

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1194: FILE: lib/rwsem.c:25:
+		printk("[%d] %s(count=%08lx)\n",current->pid,str,sem->count);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1194: FILE: lib/rwsem.c:25:
+		printk("[%d] %s(count=%08lx)\n",current->pid,str,sem->count);
 		                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1194: FILE: lib/rwsem.c:25:
+		printk("[%d] %s(count=%08lx)\n",current->pid,str,sem->count);
 		                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1194: FILE: lib/rwsem.c:25:
+		printk("[%d] %s(count=%08lx)\n",current->pid,str,sem->count);
 		                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1211: FILE: lib/rwsem.c:42:
+	rwsemtrace(sem,"Entering __rwsem_do_wake");
 	              ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__rwsem_do_wake', this function's name, in a string
#1211: FILE: lib/rwsem.c:42:
+	rwsemtrace(sem,"Entering __rwsem_do_wake");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1218: FILE: lib/rwsem.c:49:
+	if (rwsem_cmpxchgw(sem,0,RWSEM_ACTIVE_BIAS)!=0) {
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1218: FILE: lib/rwsem.c:49:
+	if (rwsem_cmpxchgw(sem,0,RWSEM_ACTIVE_BIAS)!=0) {
 	                        ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#1218: FILE: lib/rwsem.c:49:
+	if (rwsem_cmpxchgw(sem,0,RWSEM_ACTIVE_BIAS)!=0) {
 	                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1219: FILE: lib/rwsem.c:50:
+		rwsemtrace(sem,"__rwsem_do_wake: abort wakeup due to renewed activity");
 		              ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__rwsem_do_wake', this function's name, in a string
#1219: FILE: lib/rwsem.c:50:
+		rwsemtrace(sem,"__rwsem_do_wake: abort wakeup due to renewed activity");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1226: FILE: lib/rwsem.c:57:
+	if (__builtin_expect(!waiter,0)) {
 	                            ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1227: FILE: lib/rwsem.c:58:
+		printk("__rwsem_do_wake(): wait_list unexpectedly empty\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__rwsem_do_wake', this function's name, in a string
#1227: FILE: lib/rwsem.c:58:
+		printk("__rwsem_do_wake(): wait_list unexpectedly empty\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1228: FILE: lib/rwsem.c:59:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1232: FILE: lib/rwsem.c:63:
+	if (__builtin_expect(!waiter->flags,0)) {
 	                                   ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1233: FILE: lib/rwsem.c:64:
+		printk("__rwsem_do_wake(): wait_list front apparently not waiting\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__rwsem_do_wake', this function's name, in a string
#1233: FILE: lib/rwsem.c:64:
+		printk("__rwsem_do_wake(): wait_list front apparently not waiting\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1234: FILE: lib/rwsem.c:65:
+		BUG();

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1259: FILE: lib/rwsem.c:90:
+	} while (waiter && waiter->flags&RWSEM_WAITING_FOR_READ);
 	                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1262: FILE: lib/rwsem.c:93:
+	woken *= RWSEM_ACTIVE_BIAS-RWSEM_WAITING_BIAS;
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1264: FILE: lib/rwsem.c:95:
+	rwsem_atomic_update(woken,sem);
 	                         ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#1267: FILE: lib/rwsem.c:98:
+	for (; loop>0; loop--) {
 	           ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1276: FILE: lib/rwsem.c:107:
+	if (!next) sem->wait_back = &sem->wait_front;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1279: FILE: lib/rwsem.c:110:
+	rwsemtrace(sem,"Leaving __rwsem_do_wake");
 	              ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__rwsem_do_wake', this function's name, in a string
#1279: FILE: lib/rwsem.c:110:
+	rwsemtrace(sem,"Leaving __rwsem_do_wake");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1296: FILE: lib/rwsem.c:126:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1297: FILE: lib/rwsem.c:127:
+	set_task_state(tsk,TASK_UNINTERRUPTIBLE);
 	                  ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000539230.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 23 errors, 17 warnings, 15 checks, 807 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000539230.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
