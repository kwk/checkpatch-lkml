WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
diff -urpNX dontdiff linux-2.5.44/arch/i386/Config.help linux-2.5.44-willy/arch/i386/Config.help

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#76: FILE: drivers/pci/write-debug.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#86: FILE: drivers/pci/write-debug.c:11:
+#include <asm/io.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#101: FILE: drivers/pci/write-debug.c:26:
+	int i;
+	for (i = 0; i < dbg_data_count; i++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#105: FILE: drivers/pci/write-debug.c:30:
+		unsigned long size = dbg_data[i].size;
+		if (size == 8) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#105: FILE: drivers/pci/write-debug.c:30:
+		if (size == 8) {
[...]
+		} else if (size == 16) {
[...]
+		} else if (size == 32) {
[...]
+		} else if (size == 64) {
[...]
+		} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#106: FILE: drivers/pci/write-debug.c:31:
+			*(volatile unsigned char *) addr = data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#106: FILE: drivers/pci/write-debug.c:31:
+			*(volatile unsigned char *) addr = data;

CHECK:SPACING: No space is necessary after a cast
#108: FILE: drivers/pci/write-debug.c:33:
+			*(volatile unsigned short *) addr = data;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#108: FILE: drivers/pci/write-debug.c:33:
+			*(volatile unsigned short *) addr = data;

CHECK:SPACING: No space is necessary after a cast
#110: FILE: drivers/pci/write-debug.c:35:
+			*(volatile unsigned int *) addr = data;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#110: FILE: drivers/pci/write-debug.c:35:
+			*(volatile unsigned int *) addr = data;

CHECK:SPACING: No space is necessary after a cast
#112: FILE: drivers/pci/write-debug.c:37:
+			*(volatile unsigned long long *) addr = data;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#112: FILE: drivers/pci/write-debug.c:37:
+			*(volatile unsigned long long *) addr = data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#122: FILE: drivers/pci/write-debug.c:47:
+	unsigned long flags;
+	spin_lock_irqsave(&dbg_data_lock, flags);

CHECK:SPACING: No space is necessary after a cast
#126: FILE: drivers/pci/write-debug.c:51:
+	return *(volatile unsigned char *) addr;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#126: FILE: drivers/pci/write-debug.c:51:
+	return *(volatile unsigned char *) addr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#132: FILE: drivers/pci/write-debug.c:57:
+	unsigned long flags;
+	spin_lock_irqsave(&dbg_data_lock, flags);

CHECK:SPACING: No space is necessary after a cast
#136: FILE: drivers/pci/write-debug.c:61:
+	return *(volatile unsigned short *) addr;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#136: FILE: drivers/pci/write-debug.c:61:
+	return *(volatile unsigned short *) addr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#142: FILE: drivers/pci/write-debug.c:67:
+	unsigned long flags;
+	spin_lock_irqsave(&dbg_data_lock, flags);

CHECK:SPACING: No space is necessary after a cast
#146: FILE: drivers/pci/write-debug.c:71:
+	return *(volatile unsigned int *) addr;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#146: FILE: drivers/pci/write-debug.c:71:
+	return *(volatile unsigned int *) addr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#152: FILE: drivers/pci/write-debug.c:77:
+	unsigned long flags;
+	spin_lock_irqsave(&dbg_data_lock, flags);

CHECK:SPACING: No space is necessary after a cast
#156: FILE: drivers/pci/write-debug.c:81:
+	return *(volatile unsigned long long *) addr;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#156: FILE: drivers/pci/write-debug.c:81:
+	return *(volatile unsigned long long *) addr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#162: FILE: drivers/pci/write-debug.c:87:
+	unsigned long flags;
+	spin_lock_irqsave(&dbg_data_lock, flags);

WARNING:LINE_SPACING: Missing a blank line after declarations
#175: FILE: drivers/pci/write-debug.c:100:
+	unsigned long flags;
+	spin_lock_irqsave(&dbg_data_lock, flags);

WARNING:LINE_SPACING: Missing a blank line after declarations
#188: FILE: drivers/pci/write-debug.c:113:
+	unsigned long flags;
+	spin_lock_irqsave(&dbg_data_lock, flags);

WARNING:LINE_SPACING: Missing a blank line after declarations
#201: FILE: drivers/pci/write-debug.c:126:
+	unsigned long flags;
+	spin_lock_irqsave(&dbg_data_lock, flags);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#219: FILE: include/asm-i386/io.h:154:
+extern unsigned char __dbg_readb(void * addr);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#219: FILE: include/asm-i386/io.h:154:
+extern unsigned char __dbg_readb(void * addr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#220: FILE: include/asm-i386/io.h:155:
+extern unsigned short __dbg_readw(void * addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#220: FILE: include/asm-i386/io.h:155:
+extern unsigned short __dbg_readw(void * addr);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#221: FILE: include/asm-i386/io.h:156:
+extern unsigned int __dbg_readl(void * addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#221: FILE: include/asm-i386/io.h:156:
+extern unsigned int __dbg_readl(void * addr);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#222: FILE: include/asm-i386/io.h:157:
+extern void __dbg_writeb(unsigned char data, void * addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#222: FILE: include/asm-i386/io.h:157:
+extern void __dbg_writeb(unsigned char data, void * addr);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#223: FILE: include/asm-i386/io.h:158:
+extern void __dbg_writew(unsigned short data, void * addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#223: FILE: include/asm-i386/io.h:158:
+extern void __dbg_writew(unsigned short data, void * addr);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#224: FILE: include/asm-i386/io.h:159:
+extern void __dbg_writel(unsigned int data, void * addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#224: FILE: include/asm-i386/io.h:159:
+extern void __dbg_writel(unsigned int data, void * addr);

CHECK:SPACING: No space is necessary after a cast
#235: FILE: include/asm-i386/io.h:170:
+#define writeb(b,addr) (*(volatile unsigned char *) __io_virt(addr) = (b))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#235: FILE: include/asm-i386/io.h:170:
+#define writeb(b,addr) (*(volatile unsigned char *) __io_virt(addr) = (b))
                 ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#235: FILE: include/asm-i386/io.h:170:
+#define writeb(b,addr) (*(volatile unsigned char *) __io_virt(addr) = (b))

CHECK:SPACING: No space is necessary after a cast
#236: FILE: include/asm-i386/io.h:171:
+#define writew(b,addr) (*(volatile unsigned short *) __io_virt(addr) = (b))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#236: FILE: include/asm-i386/io.h:171:
+#define writew(b,addr) (*(volatile unsigned short *) __io_virt(addr) = (b))
                 ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#236: FILE: include/asm-i386/io.h:171:
+#define writew(b,addr) (*(volatile unsigned short *) __io_virt(addr) = (b))

CHECK:SPACING: No space is necessary after a cast
#237: FILE: include/asm-i386/io.h:172:
+#define writel(b,addr) (*(volatile unsigned int *) __io_virt(addr) = (b))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#237: FILE: include/asm-i386/io.h:172:
+#define writel(b,addr) (*(volatile unsigned int *) __io_virt(addr) = (b))
                 ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#237: FILE: include/asm-i386/io.h:172:
+#define writel(b,addr) (*(volatile unsigned int *) __io_virt(addr) = (b))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000420698.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 25 warnings, 17 checks, 194 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000420698.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
