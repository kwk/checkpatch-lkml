CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#54: FILE: include/linux/ipc.h:59:
+	spinlock_t	lock;

ERROR:SPACING: space required before the open parenthesis '('
#223: FILE: ipc/msg.c:812:
+			if(msq)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#230: FILE: ipc/msg.c:818:
+			if(!msq)

ERROR:SPACING: space required before the open parenthesis '('
#240: FILE: ipc/msg.c:828:
+	if(msq)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#379: FILE: ipc/sem.c:558:
+^I^I^Isem_unlock(sma);^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#468: FILE: ipc/sem.c:1065:
+		if(sma==NULL) {
 		      ^

ERROR:SPACING: space required before the open parenthesis '('
#468: FILE: ipc/sem.c:1065:
+		if(sma==NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sma"
#468: FILE: ipc/sem.c:1065:
+		if(sma==NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#541: FILE: ipc/shm.c:118:
+	ipc_rcu_free (shp, sizeof(struct shmid_kernel));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#719: FILE: ipc/util.c:75:
+	ids->entries = ipc_rcu_alloc(sizeof(struct ipc_id)*size);
 	                                                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#734: FILE: ipc/util.c:89:
+ *^I$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#765: FILE: ipc/util.c:124:
+	new = ipc_rcu_alloc(sizeof(struct ipc_id)*newsize);
 	                                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#777: FILE: ipc/util.c:133:
+^I$

WARNING:MEMORY_BARRIER: memory barrier without comment
#779: FILE: ipc/util.c:135:
+	wmb();

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#784: FILE: ipc/util.c:138:
+	ipc_rcu_free(old, sizeof(struct ipc_id)*i);
 	                                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#813: FILE: ipc/util.c:203:
+^I$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#847: FILE: ipc/util.c:258:
+struct ipc_rcu_kmalloc
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#854: FILE: ipc/util.c:265:
+struct ipc_rcu_vmalloc
+{

ERROR:TRAILING_WHITESPACE: trailing whitespace
#870: FILE: ipc/util.c:281:
+ *^Iipc_rcu_alloc^I-^Iallocate ipc and rcu space $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#875: FILE: ipc/util.c:286:
+ *^INULL is returned if the allocation fails. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#877: FILE: ipc/util.c:288:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#877: FILE: ipc/util.c:288:
+ $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#878: FILE: ipc/util.c:289:
+void* ipc_rcu_alloc(int size)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#880: FILE: ipc/util.c:291:
+	void* out;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#881: FILE: ipc/util.c:292:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#883: FILE: ipc/util.c:294:
+^I * workqueue if necessary (for vmalloc). $

CHECK:ALLOC_SIZEOF_STRUCT: Prefer vmalloc(sizeof(*out)...) over vmalloc(sizeof(struct ipc_rcu_vmalloc)...)
#886: FILE: ipc/util.c:297:
+		out = vmalloc(sizeof(struct ipc_rcu_vmalloc) + size);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#887: FILE: ipc/util.c:298:
+		if (out) out += sizeof(struct ipc_rcu_vmalloc);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#889: FILE: ipc/util.c:300:
+		out = kmalloc(sizeof(struct ipc_rcu_kmalloc)+size, GFP_KERNEL);
 		                                            ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*out)...) over kmalloc(sizeof(struct ipc_rcu_kmalloc)...)
#889: FILE: ipc/util.c:300:
+		out = kmalloc(sizeof(struct ipc_rcu_kmalloc)+size, GFP_KERNEL);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#890: FILE: ipc/util.c:301:
+		if (out) out += sizeof(struct ipc_rcu_kmalloc);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#898: FILE: ipc/util.c:309:
+ * $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#902: FILE: ipc/util.c:313:
+static void ipc_schedule_free(void* arg)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#910: FILE: ipc/util.c:321:
+void ipc_rcu_free(void* ptr, int size)

WARNING:LINE_SPACING: Missing a blank line after declarations
#914: FILE: ipc/util.c:325:
+		struct ipc_rcu_vmalloc *free;
+		free = ptr - sizeof(*free);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#918: FILE: ipc/util.c:329:
+		struct ipc_rcu_kmalloc *free;
+		free = ptr - sizeof(*free);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#923: FILE: ipc/util.c:334:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#962: FILE: ipc/util.h:49:
+void* ipc_rcu_alloc(int size);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#963: FILE: ipc/util.h:50:
+void ipc_rcu_free(void* arg, int size);

WARNING:MEMORY_BARRIER: memory barrier without comment
#988: FILE: ipc/util.h:69:
+	rmb();

ERROR:SPACING: space required before the open parenthesis '('
#1004: FILE: ipc/util.h:80:
+	if(lid >= ids->size) {

ERROR:SPACING: space required before the open parenthesis '('
#1015: FILE: ipc/util.h:88:
+	if(out == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!out"
#1015: FILE: ipc/util.h:88:
+	if(out == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1020: FILE: ipc/util.h:93:
+^I$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1033: FILE: ipc/util.h:105:
+extern inline void ipc_unlock(struct kern_ipc_perm* perm)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000417803.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 6 warnings, 10 checks, 901 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000417803.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
