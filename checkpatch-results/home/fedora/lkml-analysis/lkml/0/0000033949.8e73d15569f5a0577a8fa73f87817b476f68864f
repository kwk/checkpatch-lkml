WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#216: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:73:
+	unsigned subport_cnt;

CHECK:SPACING: No space is necessary after a cast
#266: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:150:
+	kinfo->spi_rcvhdr_tailaddr = (u64) pd->port_rcvhdrqtailaddr_phys;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#280: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:158:
+		kinfo->spi_piobufbase = (u64) pd->port_piobufs;

CHECK:SPACING: No space is necessary after a cast
#281: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:159:
+		kinfo->__spi_uregbase = (u64) dd->ipath_uregbase +

CHECK:SPACING: No space is necessary after a cast
#287: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:165:
+		kinfo->spi_piobufbase = (u64) pd->port_piobufs +

CHECK:SPACING: No space is necessary after a cast
#290: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:168:
+		kinfo->__spi_uregbase = (u64) dd->ipath_uregbase +

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#293: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:171:
+		unsigned slave = subport_fp(fp) - 1;

CHECK:SPACING: No space is necessary after a cast
#296: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:174:
+		kinfo->spi_piobufbase = (u64) pd->port_piobufs +

CHECK:SPACING: No space is necessary after a cast
#298: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:176:
+		kinfo->__spi_uregbase = ((u64) pd->subport_uregbase +

CHECK:SPACING: No space is necessary after a cast
#301: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:179:
+		kinfo->spi_rcvhdr_base = ((u64) pd->subport_rcvhdr_base +

CHECK:SPACING: No space is necessary after a cast
#304: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:182:
+			(u64) pd->port_rcvhdrqtailaddr_phys & MMAP64_MASK;

CHECK:SPACING: No space is necessary after a cast
#305: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:183:
+		kinfo->spi_rcv_egrbufs = ((u64) pd->subport_rcvegrbuf +

CHECK:SPACING: No space is necessary after a cast
#325: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:203:
+			(u64) pd->subport_uregbase & MMAP64_MASK;

CHECK:SPACING: No space is necessary after a cast
#327: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:205:
+			(u64) pd->subport_rcvegrbuf & MMAP64_MASK;

CHECK:SPACING: No space is necessary after a cast
#329: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:207:
+			(u64) pd->subport_rcvhdr_base & MMAP64_MASK;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:209:
+		ipath_cdbg(PROC, "port %u flags %x %llx %llx %llx\n",
+			kinfo->spi_port,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#366: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:262:
+	unsigned subport = subport_fp(fp);

CHECK:SPACING: No space is necessary after a cast
#401: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:302:
+	pagep = &((struct page **) pd->port_tid_pg_list)[tidoff];

CHECK:SPACING: No space is necessary after a cast
#402: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:303:
+	tidlist = &((u16 *) &pagep[dd->ipath_rcvtidcnt])[tidoff];

WARNING:SPLIT_STRING: quoted string split across lines
#419: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:365:
 		ipath_cdbg(VERBOSE, "Updating idx %u to TID %u, "
+			   "vaddr %lx\n", i, tid + tidoff, vaddr);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#448: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:460:
+static int ipath_tid_free(struct ipath_portdata *pd, unsigned subport,

CHECK:BRACES: braces {} should be used on all arms of this statement
#456: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:481:
+	if (!pd->port_subport_cnt)
[...]
+	else if (!subport) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#486: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:690:
+static int ipath_manage_rcvq(struct ipath_portdata *pd, unsigned subport,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#523: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:803:
+	unsigned egrperchunk, egrcnt, size;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#552: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:839:
+	unsigned e, egrcnt, egrperchunk, chunk, egrsize, egroff;

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#582: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:862:
+	pd->port_rcvegrbuf = kmalloc(chunk * sizeof(pd->port_rcvegrbuf[0]),
+				     GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#698: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1000:
+			unsigned piobufs, unsigned piocnt)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#698: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1000:
+			unsigned piobufs, unsigned piocnt)

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#770: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1117:
+static struct vm_operations_struct ipath_file_vm_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#775: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1122:
+		       struct ipath_portdata *pd, unsigned subport)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#797: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1144:
+		unsigned num_slaves = pd->port_subport_cnt - 1;

CHECK:SPACING: No space is necessary after a cast
#799: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1146:
+		if (pgaddr == ((u64) pd->subport_uregbase & MMAP64_MASK)) {

CHECK:SPACING: No space is necessary after a cast
#802: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1149:
+		} else if (pgaddr == ((u64) pd->subport_rcvhdr_base &

CHECK:SPACING: No space is necessary after a cast
#806: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1153:
+		} else if (pgaddr == ((u64) pd->subport_rcvegrbuf &

CHECK:SPACING: No space is necessary after a cast
#814: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1161:
+	} else if (pgaddr == (((u64) pd->subport_uregbase +

CHECK:SPACING: No space is necessary after a cast
#818: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1165:
+	} else if (pgaddr == (((u64) pd->subport_rcvhdr_base +

CHECK:SPACING: No space is necessary after a cast
#824: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1171:
+	} else if (pgaddr == (((u64) pd->subport_rcvegrbuf +

WARNING:SPLIT_STRING: quoted string split across lines
#831: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1178:
+				 "Can't map eager buffers as "
+				 "writable (flags=%lx)\n", vma->vm_flags);

CHECK:SPACING: No space is necessary after a cast
#851: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1198:
+	vma->vm_pgoff = (unsigned long) addr >> PAGE_SHIFT;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#861: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1222:
+	unsigned piobufs, piocnt;

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#922: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1261:
+	if (pgaddr >= (1ULL<<40)) {
 	                   ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#940: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1279:
+		unsigned slave = subport_fp(fp) - 1;

ERROR:CODE_INDENT: code indent should use tabs where possible
#955: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1294:
+^I^I^I      ^I     dd->ipath_pioavailregs_phys,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#955: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1294:
+^I^I^I      ^I     dd->ipath_pioavailregs_phys,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#955: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1294:
+		ret = ipath_mmap_mem(vma, pd, PAGE_SIZE, 0,
+			      	     dd->ipath_pioavailregs_phys,

CHECK:SPACING: No space is necessary after a cast
#969: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1301:
+	else if (pgaddr == (u64) pd->port_rcvhdrq_phys)

CHECK:SPACING: No space is necessary after a cast
#984: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1310:
+	else if (pgaddr == (u64) pd->port_rcvhdrqtailaddr_phys)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1042: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1396:
+	unsigned num_slaves;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1109: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1457:
+	if (!(pd = dd->ipath_pd[port])) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*pd)...) over kzalloc(sizeof(struct ipath_portdata)...)
#1112: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1460:
+		pd = kzalloc(sizeof(struct ipath_portdata), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BRACES: braces {} should be used on all arms of this statement
#1140: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1484:
+	if (!pd->port_cnt) {
[...]
+		strncpy(pd->port_comm, current->comm, sizeof(pd->port_comm));
[...]

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1143: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1487:
+		if ((ret = init_subports(dd, pd, uinfo)) != 0)

CHECK:BRACES: Unbalanced braces around else statement
#1160: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1498:
+	} else

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*fp->private_data)...) over kzalloc(sizeof(struct ipath_filedata)...)
#1277: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1697:
+	fp->private_data = kzalloc(sizeof(struct ipath_filedata), GFP_KERNEL);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1289: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1709:
+	unsigned swminor;

WARNING:SPLIT_STRING: quoted string split across lines
#1300: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1720:
+		ipath_dbg("User major version %d not same as driver "
+			  "major %d\n", uinfo->spu_userversion >> 16,

WARNING:SPLIT_STRING: quoted string split across lines
#1309: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1729:
+		ipath_dbg("User minor version %d not same as driver "
+			  "minor %d\n", swminor, IPATH_USER_SWMINOR);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1314: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1733:
+	if (swminor == IPATH_USER_SWMINOR && uinfo->spu_subport_cnt &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1380: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1794:
+	ipath_cdbg(VERBOSE, "Wrote port%d egrhead %x from tail regs\n",
+		pd->port_port, head32);

WARNING:TYPO_SPELLING: 'explictly' may be misspelled - perhaps 'explicitly'?
#1389: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1803:
+	 * We explictly set the in-memory copy to 0 beforehand, so we don't
 	      ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#1416: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1866:
+	fd = (struct ipath_filedata *) fp->private_data;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1483: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1974:
+	if ((pd->userversion & 0xffff) == IPATH_USER_SWMINOR) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1488: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:1979:
+	} else

CHECK:SPACING: No space is necessary after a cast
#1541: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:2087:
+			fp, (void __user *) (unsigned long)

CHECK:SPACING: No space is necessary after a cast
#1568: FILE: drivers/infiniband/hw/ipath/ipath_file_ops.c:2110:
+					   (void __user *) (unsigned long)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1627: FILE: drivers/infiniband/hw/ipath/ipath_kernel.h:532:
+	unsigned subport;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1628: FILE: drivers/infiniband/hw/ipath/ipath_kernel.h:533:
+	unsigned tidcursor;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1638: FILE: drivers/infiniband/hw/ipath/ipath_kernel.h:595:
+#define port_fp(fp) ((struct ipath_filedata *)(fp)->private_data)->pd

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1639: FILE: drivers/infiniband/hw/ipath/ipath_kernel.h:596:
+#define subport_fp(fp) \
+	((struct ipath_filedata *)(fp)->private_data)->subport

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1641: FILE: drivers/infiniband/hw/ipath/ipath_kernel.h:598:
+#define tidcursor_fp(fp) \
+	((struct ipath_filedata *)(fp)->private_data)->tidcursor

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_nports' to 'nports_show'
#1670: FILE: drivers/infiniband/hw/ipath/ipath_sysfs.c:621:
+static DEVICE_ATTR(nports, S_IRUGO, show_nports, NULL);

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1670: FILE: drivers/infiniband/hw/ipath/ipath_sysfs.c:621:
+static DEVICE_ATTR(nports, S_IRUGO, show_nports, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000033949.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 27 warnings, 38 checks, 1571 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000033949.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
