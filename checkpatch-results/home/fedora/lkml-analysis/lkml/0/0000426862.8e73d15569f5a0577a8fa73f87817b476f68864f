ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#40: 
--- a/fs/inode.c	Thu Aug 29 03:02:23 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#50: FILE: fs/inode.c:80:
+	static struct address_space_operations empty_aops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#51: FILE: fs/inode.c:81:
+	static struct inode_operations empty_iops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#52: FILE: fs/inode.c:82:
+	static struct file_operations empty_fops;

CHECK:BRACES: braces {} should be used on all arms of this statement
#55: FILE: fs/inode.c:85:
+	if (sb->s_op->alloc_inode)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#57: FILE: fs/inode.c:87:
+	else {

CHECK:SPACING: No space is necessary after a cast
#58: FILE: fs/inode.c:88:
+		inode = (struct inode *) kmem_cache_alloc(inode_cachep, SLAB_KERNEL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#188: FILE: fs/inode.c:810:
+ *^Inew_inode ^I- obtain an inode$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#203: FILE: fs/inode.c:816:
+struct inode * new_inode(struct super_block *sb)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#282: FILE: include/linux/fs.h:876:
+   ^Istruct inode *(*alloc_inode)(struct super_block *sb);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#282: FILE: include/linux/fs.h:876:
+   ^Istruct inode *(*alloc_inode)(struct super_block *sb);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#282: FILE: include/linux/fs.h:876:
+   ^Istruct inode *(*alloc_inode)(struct super_block *sb);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#283: FILE: include/linux/fs.h:877:
+	void (*destroy_inode)(struct inode *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#292: FILE: include/linux/fs.h:1342:
+extern void inode_init_once(struct inode *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#292: FILE: include/linux/fs.h:1342:
+extern void inode_init_once(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#312: FILE: include/linux/fs.h:1356:
+extern struct inode *new_inode(struct super_block *sb);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000426862.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 8 warnings, 5 checks, 286 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000426862.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
