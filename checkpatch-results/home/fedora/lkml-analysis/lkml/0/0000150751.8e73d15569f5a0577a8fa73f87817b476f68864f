CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#34: 
Linus Torvalds a écrit :
                 ^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#51: 
> In other words, no. It's not worth doing anything more than we already do. 

WARNING:NEW_TYPEDEFS: do not add new typedefs
#90: FILE: include/linux/file.h:23:
+typedef struct {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#91: FILE: include/linux/file.h:24:
+	unsigned long fds_bits[NR_OPEN_DEFAULT/BITS_PER_LONG];
 	                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE_COMMENT: line length of 122 exceeds 100 columns
#121: FILE: include/linux/file.h:52:
+	spinlock_t file_lock ____cacheline_aligned_in_smp;     /* Writers take this lock.  Nests inside tsk->alloc_lock */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#125: FILE: include/linux/file.h:56:
+	struct file * fd_array[NR_OPEN_DEFAULT];

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#135: FILE: include/linux/file.h:80:
+extern void free_fd_array(struct file **, unsigned int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file **' should also have an identifier name
#135: FILE: include/linux/file.h:80:
+extern void free_fd_array(struct file **, unsigned int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#135: FILE: include/linux/file.h:80:
+extern void free_fd_array(struct file **, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#139: FILE: include/linux/file.h:82:
+extern void free_fdset(fd_set *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'fd_set *' should also have an identifier name
#139: FILE: include/linux/file.h:82:
+extern void free_fdset(fd_set *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#139: FILE: include/linux/file.h:82:
+extern void free_fdset(fd_set *, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#142: FILE: include/linux/file.h:84:
+extern int expand_files(struct files_struct *, unsigned int nr);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct files_struct *' should also have an identifier name
#142: FILE: include/linux/file.h:84:
+extern int expand_files(struct files_struct *, unsigned int nr);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#157: FILE: include/linux/init_task.h:13:
+^I.open_fds^I= (fd_set *)&init_files.open_fds_init, ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#168: FILE: include/linux/init_task.h:24:
+^I.file_lock^I= SPIN_LOCK_UNLOCKED, ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#169: FILE: include/linux/init_task.h:25:
+^I.next_fd^I= 0, ^I^I^I^I\$

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#180: FILE: fs/file.c:41:
+static struct file ** alloc_fd_array(unsigned int num)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#201: FILE: fs/file.c:58:
+		printk (KERN_ERR "free_fd_array: array = 0 (num = %u)\n", num);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#201: FILE: fs/file.c:58:
+		printk (KERN_ERR "free_fd_array: array = 0 (num = %u)\n", num);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'free_fd_array', this function's name, in a string
#201: FILE: fs/file.c:58:
+		printk (KERN_ERR "free_fd_array: array = 0 (num = %u)\n", num);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#231: FILE: fs/file.c:164:
+	if (fdt->free_files ||
+		fdt->max_fdset > 8 * sizeof(embedded_fd_set) ||

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#258: FILE: fs/file.c:215:
+static fd_set * alloc_fdset(unsigned int num)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000150751.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 14 warnings, 6 checks, 297 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000150751.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
