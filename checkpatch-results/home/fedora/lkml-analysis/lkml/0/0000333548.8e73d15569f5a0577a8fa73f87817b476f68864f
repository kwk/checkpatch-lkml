WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#72: FILE: fs/nfs/inode.c:1136:
+extern int nfs_init_diroppagecache(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#73: FILE: fs/nfs/inode.c:1137:
+extern void nfs_destroy_diroppagecache(void);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#102: FILE: fs/nfs/dir.c:72:
 };
+static kmem_cache_t *nfs_ddata_cachep;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nfs_ddata_cachep"
#110: FILE: fs/nfs/dir.c:80:
+	if (nfs_ddata_cachep == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#119: FILE: fs/nfs/dir.c:89:
+		printk(KERN_INFO "nfs_diropt_data: not all structures were freed\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#121: FILE: fs/nfs/dir.c:91:
+static __inline__ int $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#121: FILE: fs/nfs/dir.c:91:
+}
+static __inline__ int 

WARNING:INLINE: plain inline is preferred over __inline__
#121: FILE: fs/nfs/dir.c:91:
+static __inline__ int 

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mem"
#128: FILE: fs/nfs/dir.c:98:
+	if (mem == NULL)

CHECK:SPACING: No space is necessary after a cast
#133: FILE: fs/nfs/dir.c:103:
+	*fattr = (struct nfs_fattr *) (mem + sizeof(struct nfs_fh));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#137: FILE: fs/nfs/dir.c:107:
+static __inline__ void $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#137: FILE: fs/nfs/dir.c:107:
+}
+static __inline__ void 

WARNING:INLINE: plain inline is preferred over __inline__
#137: FILE: fs/nfs/dir.c:107:
+static __inline__ void 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#140: FILE: fs/nfs/dir.c:110:
+^Ivoid *mem = ((void *)fh < (void *)fattr ? $

WARNING:RETURN_VOID: void function return statements are not generally useful
#146: FILE: fs/nfs/dir.c:116:
+	return;
+}

ERROR:SPACING: spaces required around that '!=' (ctx:VxW)
#208: FILE: fs/nfs/dir.c:567:
+	if (memcmp(NFS_FH(inode), fhandle, sizeof(struct nfs_fh))!= 0)
 	                                                         ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#211: FILE: fs/nfs/dir.c:569:
+	if ((error = nfs_refresh_inode(inode, fattr)) != 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#356: FILE: fs/nfs/dir.c:797:
+	error = NFS_PROTO(dir)->mkdir(dir, &dentry->d_name, &attr, fhandle,
+					fattr);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000333548.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 6 warnings, 7 checks, 309 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000333548.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
