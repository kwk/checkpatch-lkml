WARNING:TYPO_SPELLING: 'wich' may be misspelled - perhaps 'which'?
#30: 
inserting modules wich are loaded at boot time into the kernel.
                  ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'aditionaly' may be misspelled - perhaps 'additionally'?
#34: 
(If you add aditionaly features to the boot-loader).
            ^^^^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#50: 
diff -Nurb linux.orig/arch/i386/kernel/Makefile linux/arch/i386/kernel/Makefile

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#67: FILE: arch/i386/kernel/obj_i386.c:1:
+/* i386 specific support for Elf loading and relocation.

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#68: FILE: arch/i386/kernel/obj_i386.c:2:
+/* i386 specific support for Elf loading and relocation.
+   Copyright 1996, 1997 Linux International.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#85: FILE: arch/i386/kernel/obj_i386.c:19:
+   along with this program; if not, write to the Free Software Foundation,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#86: FILE: arch/i386/kernel/obj_i386.c:20:
+   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#88: FILE: arch/i386/kernel/obj_i386.c:22:
+   Modified by Christian König (ChristianK.@t-online.de) to work inside the kernel*/
                           ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#88: FILE: arch/i386/kernel/obj_i386.c:22:
+   Modified by Christian König (ChristianK.@t-online.de) to work inside the kernel*/

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#90: FILE: arch/i386/kernel/obj_i386.c:24:
+#ident "$Id: obj_i386.c 1.3 Wed, 26 Sep 2001 14:50:45 +1000 kaos $"

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#95: FILE: arch/i386/kernel/obj_i386.c:29:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#99: FILE: arch/i386/kernel/obj_i386.c:33:
+struct i386_got_entry
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: arch/i386/kernel/obj_i386.c:34:
+  int offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: arch/i386/kernel/obj_i386.c:35:
+  unsigned offset_done : 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: arch/i386/kernel/obj_i386.c:36:
+  unsigned reloc_done : 1;$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#106: FILE: arch/i386/kernel/obj_i386.c:40:
+struct i386_file
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: arch/i386/kernel/obj_i386.c:41:
+  struct obj_file root;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: arch/i386/kernel/obj_i386.c:42:
+  struct obj_section *got;$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#112: FILE: arch/i386/kernel/obj_i386.c:46:
+struct i386_symbol
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: arch/i386/kernel/obj_i386.c:47:
+  struct obj_symbol root;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: arch/i386/kernel/obj_i386.c:48:
+  struct i386_got_entry gotent;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#117: FILE: arch/i386/kernel/obj_i386.c:51:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#121: FILE: arch/i386/kernel/obj_i386.c:55:
+arch_new_file (void)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: arch/i386/kernel/obj_i386.c:57:
+  struct i386_file *f;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#124: FILE: arch/i386/kernel/obj_i386.c:58:
+  struct i386_file *f;
+  f = kmalloc(sizeof(*f), GFP_KERNEL);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: arch/i386/kernel/obj_i386.c:58:
+  f = kmalloc(sizeof(*f), GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: arch/i386/kernel/obj_i386.c:59:
+  f->got = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: arch/i386/kernel/obj_i386.c:60:
+  return &f->root;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#130: FILE: arch/i386/kernel/obj_i386.c:64:
+arch_new_section (void)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: arch/i386/kernel/obj_i386.c:66:
+  return kmalloc(sizeof(struct obj_section), GFP_KERNEL);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#136: FILE: arch/i386/kernel/obj_i386.c:70:
+arch_new_symbol (void)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: arch/i386/kernel/obj_i386.c:72:
+  struct i386_symbol *sym;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#139: FILE: arch/i386/kernel/obj_i386.c:73:
+  struct i386_symbol *sym;
+  sym = kmalloc(sizeof(*sym), GFP_KERNEL);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: arch/i386/kernel/obj_i386.c:73:
+  sym = kmalloc(sizeof(*sym), GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: arch/i386/kernel/obj_i386.c:74:
+  memset(&sym->gotent, 0, sizeof(sym->gotent));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: arch/i386/kernel/obj_i386.c:75:
+  return &sym->root;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#148: FILE: arch/i386/kernel/obj_i386.c:82:
+    /* Assume it's just a debugging section that we can safely
+       ignore ...  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#148: FILE: arch/i386/kernel/obj_i386.c:82:
+       ignore ...  */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: arch/i386/kernel/obj_i386.c:83:
+    sec->contents = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: arch/i386/kernel/obj_i386.c:85:
+    return 0;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#155: FILE: arch/i386/kernel/obj_i386.c:89:
+arch_apply_relocation (struct obj_file *f,

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Rel>
#159: FILE: arch/i386/kernel/obj_i386.c:93:
+		       Elf32_Rel *rel,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Addr>
#160: FILE: arch/i386/kernel/obj_i386.c:94:
+		       Elf32_Addr v)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: arch/i386/kernel/obj_i386.c:96:
+  struct i386_file *ifile = (struct i386_file *)f;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: arch/i386/kernel/obj_i386.c:97:
+  struct i386_symbol *isym  = (struct i386_symbol *)sym;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: arch/i386/kernel/obj_i386.c:99:
+  Elf32_Addr *loc = (Elf32_Addr *)(targsec->contents + rel->r_offset);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: arch/i386/kernel/obj_i386.c:100:
+  Elf32_Addr dot = targsec->header.sh_addr + rel->r_offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: arch/i386/kernel/obj_i386.c:101:
+  Elf32_Addr got = ifile->got ? ifile->got->header.sh_addr : 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: arch/i386/kernel/obj_i386.c:103:
+  enum obj_reloc ret = obj_reloc_ok;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: arch/i386/kernel/obj_i386.c:105:
+  switch (ELF32_R_TYPE(rel->r_info))$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#171: FILE: arch/i386/kernel/obj_i386.c:105:
+  switch (ELF32_R_TYPE(rel->r_info))
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: arch/i386/kernel/obj_i386.c:106:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#173: FILE: arch/i386/kernel/obj_i386.c:107:
+    case R_386_NONE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#174: FILE: arch/i386/kernel/obj_i386.c:108:
+      break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: arch/i386/kernel/obj_i386.c:110:
+    case R_386_32:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: arch/i386/kernel/obj_i386.c:111:
+      *loc += v;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: arch/i386/kernel/obj_i386.c:112:
+      break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: arch/i386/kernel/obj_i386.c:114:
+    case R_386_PLT32:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#181: FILE: arch/i386/kernel/obj_i386.c:115:
+    case R_386_PC32:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: arch/i386/kernel/obj_i386.c:116:
+      *loc += v - dot;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: arch/i386/kernel/obj_i386.c:117:
+      break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: arch/i386/kernel/obj_i386.c:119:
+    case R_386_GLOB_DAT:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: arch/i386/kernel/obj_i386.c:120:
+    case R_386_JMP_SLOT:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: arch/i386/kernel/obj_i386.c:121:
+      *loc = v;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: arch/i386/kernel/obj_i386.c:122:
+      break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: arch/i386/kernel/obj_i386.c:124:
+    case R_386_RELATIVE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: arch/i386/kernel/obj_i386.c:125:
+      *loc += f->baseaddr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: arch/i386/kernel/obj_i386.c:126:
+      break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: arch/i386/kernel/obj_i386.c:128:
+    case R_386_GOTPC:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: arch/i386/kernel/obj_i386.c:130:
+      *loc += got - dot;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: arch/i386/kernel/obj_i386.c:131:
+      break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: arch/i386/kernel/obj_i386.c:133:
+    case R_386_GOT32:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: arch/i386/kernel/obj_i386.c:135:
+      if (!isym->gotent.reloc_done)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#201: FILE: arch/i386/kernel/obj_i386.c:135:
+      if (!isym->gotent.reloc_done)
+	{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#201: FILE: arch/i386/kernel/obj_i386.c:135:
+      if (!isym->gotent.reloc_done)
+	{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: arch/i386/kernel/obj_i386.c:140:
+      *loc += isym->gotent.offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: arch/i386/kernel/obj_i386.c:141:
+      break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: arch/i386/kernel/obj_i386.c:143:
+    case R_386_GOTOFF:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: arch/i386/kernel/obj_i386.c:145:
+      *loc += v - got;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: arch/i386/kernel/obj_i386.c:146:
+      break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: arch/i386/kernel/obj_i386.c:149:
+      ret = obj_reloc_unhandled;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: arch/i386/kernel/obj_i386.c:150:
+      break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: arch/i386/kernel/obj_i386.c:151:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: arch/i386/kernel/obj_i386.c:153:
+  return ret;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#223: FILE: arch/i386/kernel/obj_i386.c:157:
+arch_create_got (struct obj_file *f)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: arch/i386/kernel/obj_i386.c:159:
+  struct i386_file *ifile = (struct i386_file *)f;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: arch/i386/kernel/obj_i386.c:160:
+  int i, n, offset = 0, gotneeded = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: arch/i386/kernel/obj_i386.c:162:
+  n = ifile->root.header.e_shnum;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: arch/i386/kernel/obj_i386.c:163:
+  for (i = 0; i < n; ++i)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#229: FILE: arch/i386/kernel/obj_i386.c:163:
+  for (i = 0; i < n; ++i)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#229: FILE: arch/i386/kernel/obj_i386.c:163:
+  for (i = 0; i < n; ++i)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: arch/i386/kernel/obj_i386.c:164:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: arch/i386/kernel/obj_i386.c:165:
+      struct obj_section *relsec, *symsec, *strsec;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: arch/i386/kernel/obj_i386.c:166:
+      Elf32_Rel *rel, *relend;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: arch/i386/kernel/obj_i386.c:167:
+      Elf32_Sym *symtab;$

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Sym>
#233: FILE: arch/i386/kernel/obj_i386.c:167:
+      Elf32_Sym *symtab;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#234: FILE: arch/i386/kernel/obj_i386.c:168:
+      const char *strtab;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: arch/i386/kernel/obj_i386.c:170:
+      relsec = ifile->root.sections[i];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: arch/i386/kernel/obj_i386.c:171:
+      if (relsec->header.sh_type != SHT_REL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: arch/i386/kernel/obj_i386.c:174:
+      symsec = ifile->root.sections[relsec->header.sh_link];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: arch/i386/kernel/obj_i386.c:175:
+      strsec = ifile->root.sections[symsec->header.sh_link];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#243: FILE: arch/i386/kernel/obj_i386.c:177:
+      rel = (Elf32_Rel *)relsec->contents;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#244: FILE: arch/i386/kernel/obj_i386.c:178:
+      relend = rel + (relsec->header.sh_size / sizeof(Elf32_Rel));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#245: FILE: arch/i386/kernel/obj_i386.c:179:
+      symtab = (Elf32_Sym *)symsec->contents;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: arch/i386/kernel/obj_i386.c:180:
+      strtab = (const char *)strsec->contents;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: arch/i386/kernel/obj_i386.c:182:
+      for (; rel < relend; ++rel)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#248: FILE: arch/i386/kernel/obj_i386.c:182:
+      for (; rel < relend; ++rel)
+	{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#248: FILE: arch/i386/kernel/obj_i386.c:182:
+      for (; rel < relend; ++rel)
+	{

WARNING:TABSTOP: Statements should start on a tabstop
#250: FILE: arch/i386/kernel/obj_i386.c:184:
+	  struct i386_symbol *intsym;

WARNING:TABSTOP: Statements should start on a tabstop
#252: FILE: arch/i386/kernel/obj_i386.c:186:
+	  switch (ELF32_R_TYPE(rel->r_info))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#252: FILE: arch/i386/kernel/obj_i386.c:186:
+	  switch (ELF32_R_TYPE(rel->r_info))
+	    {

WARNING:TABSTOP: Statements should start on a tabstop
#253: FILE: arch/i386/kernel/obj_i386.c:187:
+	    {

WARNING:TABSTOP: Statements should start on a tabstop
#254: FILE: arch/i386/kernel/obj_i386.c:188:
+	    case R_386_GOTPC:

WARNING:TABSTOP: Statements should start on a tabstop
#255: FILE: arch/i386/kernel/obj_i386.c:189:
+	    case R_386_GOTOFF:

WARNING:TABSTOP: Statements should start on a tabstop
#257: FILE: arch/i386/kernel/obj_i386.c:191:
+	    default:

WARNING:TABSTOP: Statements should start on a tabstop
#258: FILE: arch/i386/kernel/obj_i386.c:192:
+	      continue;

WARNING:TABSTOP: Statements should start on a tabstop
#260: FILE: arch/i386/kernel/obj_i386.c:194:
+	    case R_386_GOT32:

WARNING:TABSTOP: Statements should start on a tabstop
#261: FILE: arch/i386/kernel/obj_i386.c:195:
+	      break;

WARNING:TABSTOP: Statements should start on a tabstop
#262: FILE: arch/i386/kernel/obj_i386.c:196:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#266: FILE: arch/i386/kernel/obj_i386.c:200:
+	  if (!intsym->gotent.offset_done)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#266: FILE: arch/i386/kernel/obj_i386.c:200:
+	  if (!intsym->gotent.offset_done)
+	    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 14)
#266: FILE: arch/i386/kernel/obj_i386.c:200:
+	  if (!intsym->gotent.offset_done)
+	    {

WARNING:TABSTOP: Statements should start on a tabstop
#267: FILE: arch/i386/kernel/obj_i386.c:201:
+	    {

WARNING:TABSTOP: Statements should start on a tabstop
#271: FILE: arch/i386/kernel/obj_i386.c:205:
+	    }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#273: FILE: arch/i386/kernel/obj_i386.c:207:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: arch/i386/kernel/obj_i386.c:209:
+  if (offset > 0 || gotneeded)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#275: FILE: arch/i386/kernel/obj_i386.c:209:
+  if (offset > 0 || gotneeded)
+    ifile->got = obj_create_alloced_section(&ifile->root, ".got", 4, offset,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#276: FILE: arch/i386/kernel/obj_i386.c:210:
+    ifile->got = obj_create_alloced_section(&ifile->root, ".got", 4, offset,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: arch/i386/kernel/obj_i386.c:213:
+  return 1;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#283: FILE: arch/i386/kernel/obj_i386.c:217:
+arch_init_module (struct obj_file *f, struct module *mod)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: arch/i386/kernel/obj_i386.c:219:
+  return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: arch/i386/kernel/obj_i386.c:225:
+  int  i, n = f->header.e_shnum;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#293: FILE: arch/i386/kernel/obj_i386.c:227:
+  f->baseaddr = base;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#294: FILE: arch/i386/kernel/obj_i386.c:228:
+  for (i = 0; i < n; ++i)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#294: FILE: arch/i386/kernel/obj_i386.c:228:
+  for (i = 0; i < n; ++i)
+    f->sections[i]->header.sh_addr += base;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: arch/i386/kernel/obj_i386.c:229:
+    f->sections[i]->header.sh_addr += base;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: arch/i386/kernel/obj_i386.c:230:
+  return 1;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#300: FILE: arch/i386/kernel/obj_i386.c:234:
+arch_archdata (struct obj_file *fin, struct obj_section *sec)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#302: FILE: arch/i386/kernel/obj_i386.c:236:
+  return 0;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#308: FILE: include/linux/obj_load.h:1:
+/* Elf object file loading and relocation routines.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#309: FILE: include/linux/obj_load.h:2:
+/* Elf object file loading and relocation routines.
+   Copyright 1996, 1997 Linux International.

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#312: FILE: include/linux/obj_load.h:5:
+   obj_free() added by Björn Ekwall <bj0rn@blox.se> March 1999
                          ^

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#327: FILE: include/linux/obj_load.h:20:
+   along with this program; if not, write to the Free Software Foundation,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#328: FILE: include/linux/obj_load.h:21:
+   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#330: FILE: include/linux/obj_load.h:23:
+   Modified by Christian König (ChristianK.@t-online.de) to work inside the kernel*/
                           ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#330: FILE: include/linux/obj_load.h:23:
+   Modified by Christian König (ChristianK.@t-online.de) to work inside the kernel*/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#332: FILE: include/linux/obj_load.h:25:
+
+

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#336: FILE: include/linux/obj_load.h:29:
+#ident "$Id: obj.h 1.7 Tue, 02 Oct 2001 11:22:51 +1000 kaos $"

CHECK:CAMELCASE: Avoid CamelCase: <ElfW>
#345: FILE: include/linux/obj_load.h:38:
+#  define ElfW(x)  Elf32_ ## x

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_ ## x>
#345: FILE: include/linux/obj_load.h:38:
+#  define ElfW(x)  Elf32_ ## x

CHECK:CAMELCASE: Avoid CamelCase: <ObjW>
#354: FILE: include/linux/obj_load.h:47:
+#  define ObjW(x)  obj32_ ## x

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#376: FILE: include/linux/obj_load.h:69:
+struct obj_section
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#377: FILE: include/linux/obj_load.h:70:
+  ElfW(Shdr) header;$

CHECK:CAMELCASE: Avoid CamelCase: <Shdr>
#377: FILE: include/linux/obj_load.h:70:
+  ElfW(Shdr) header;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#378: FILE: include/linux/obj_load.h:71:
+  const char *name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#379: FILE: include/linux/obj_load.h:72:
+  char *contents;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#380: FILE: include/linux/obj_load.h:73:
+  struct obj_section *load_next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#381: FILE: include/linux/obj_load.h:74:
+  int idx;$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#385: FILE: include/linux/obj_load.h:78:
+struct obj_symbol
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#386: FILE: include/linux/obj_load.h:79:
+  struct obj_symbol *next;^I/* hash table link */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#387: FILE: include/linux/obj_load.h:80:
+  const char *name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#388: FILE: include/linux/obj_load.h:81:
+  unsigned long value;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#389: FILE: include/linux/obj_load.h:82:
+  unsigned long size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#390: FILE: include/linux/obj_load.h:83:
+  int secidx;^I^I^I/* the defining section index/module */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#391: FILE: include/linux/obj_load.h:84:
+  int info;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#392: FILE: include/linux/obj_load.h:85:
+  int ksymidx;^I^I^I/* for export to the kernel symtab */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#393: FILE: include/linux/obj_load.h:86:
+  int r_type;^I^I^I/* relocation type */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#397: FILE: include/linux/obj_load.h:90:
+/* Hardcode the hash table size.  We shouldn't be needing so many
+   symbols that we begin to degrade performance, and we get a big win

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#398: FILE: include/linux/obj_load.h:91:
+   by giving the compiler a constant divisor.  */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#403: FILE: include/linux/obj_load.h:96:
+struct obj_file
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#404: FILE: include/linux/obj_load.h:97:
+  ElfW(Ehdr) header;$

CHECK:CAMELCASE: Avoid CamelCase: <Ehdr>
#404: FILE: include/linux/obj_load.h:97:
+  ElfW(Ehdr) header;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#405: FILE: include/linux/obj_load.h:98:
+  ElfW(Addr) baseaddr;$

CHECK:CAMELCASE: Avoid CamelCase: <Addr>
#405: FILE: include/linux/obj_load.h:98:
+  ElfW(Addr) baseaddr;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#406: FILE: include/linux/obj_load.h:99:
+  struct obj_section **sections;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#407: FILE: include/linux/obj_load.h:100:
+  struct obj_section *load_order;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#408: FILE: include/linux/obj_load.h:101:
+  struct obj_section **load_order_search_start;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#409: FILE: include/linux/obj_load.h:102:
+  struct obj_string_patch_struct *string_patches;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#410: FILE: include/linux/obj_load.h:103:
+  struct obj_symbol_patch_struct *symbol_patches;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#411: FILE: include/linux/obj_load.h:104:
+  int (*symbol_cmp)(const char *, const char *);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#411: FILE: include/linux/obj_load.h:104:
+  int (*symbol_cmp)(const char *, const char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#411: FILE: include/linux/obj_load.h:104:
+  int (*symbol_cmp)(const char *, const char *);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#412: FILE: include/linux/obj_load.h:105:
+  unsigned long (*symbol_hash)(const char *);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#412: FILE: include/linux/obj_load.h:105:
+  unsigned long (*symbol_hash)(const char *);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#413: FILE: include/linux/obj_load.h:106:
+  unsigned long local_symtab_size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#414: FILE: include/linux/obj_load.h:107:
+  struct obj_symbol **local_symtab;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: include/linux/obj_load.h:108:
+  struct obj_symbol *symtab[HASH_BUCKETS];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#416: FILE: include/linux/obj_load.h:109:
+  const char *filename;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#417: FILE: include/linux/obj_load.h:110:
+  char *persist;$

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#421: FILE: include/linux/obj_load.h:114:
+enum obj_reloc
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#422: FILE: include/linux/obj_load.h:115:
+  obj_reloc_ok,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#423: FILE: include/linux/obj_load.h:116:
+  obj_reloc_overflow,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#424: FILE: include/linux/obj_load.h:117:
+  obj_reloc_dangerous,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#425: FILE: include/linux/obj_load.h:118:
+  obj_reloc_unhandled,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#426: FILE: include/linux/obj_load.h:119:
+  obj_reloc_constant_gp$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#430: FILE: include/linux/obj_load.h:123:
+struct obj_string_patch_struct
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#431: FILE: include/linux/obj_load.h:124:
+  struct obj_string_patch_struct *next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#432: FILE: include/linux/obj_load.h:125:
+  int reloc_secidx;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#433: FILE: include/linux/obj_load.h:126:
+  int reloc_secidx;
+  ElfW(Addr) reloc_offset;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#433: FILE: include/linux/obj_load.h:126:
+  ElfW(Addr) reloc_offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#434: FILE: include/linux/obj_load.h:127:
+  ElfW(Addr) string_offset;$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#438: FILE: include/linux/obj_load.h:131:
+struct obj_symbol_patch_struct
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#439: FILE: include/linux/obj_load.h:132:
+  struct obj_symbol_patch_struct *next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#440: FILE: include/linux/obj_load.h:133:
+  int reloc_secidx;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#441: FILE: include/linux/obj_load.h:134:
+  int reloc_secidx;
+  ElfW(Addr) reloc_offset;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#441: FILE: include/linux/obj_load.h:134:
+  ElfW(Addr) reloc_offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#442: FILE: include/linux/obj_load.h:135:
+  struct obj_symbol *sym;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#445: FILE: include/linux/obj_load.h:138:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#483: FILE: include/linux/obj_load.h:176:
+unsigned long obj_elf_hash (const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#483: FILE: include/linux/obj_load.h:176:
+unsigned long obj_elf_hash (const char *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#485: FILE: include/linux/obj_load.h:178:
+unsigned long obj_elf_hash_n (const char *, unsigned long len);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#485: FILE: include/linux/obj_load.h:178:
+unsigned long obj_elf_hash_n (const char *, unsigned long len);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#487: FILE: include/linux/obj_load.h:180:
+struct obj_symbol *obj_add_symbol (struct obj_file *f, const char *name,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#491: FILE: include/linux/obj_load.h:184:
+struct obj_symbol *obj_find_symbol (struct obj_file *f,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#492: FILE: include/linux/obj_load.h:185:
+struct obj_symbol *obj_find_symbol (struct obj_file *f,
+					 const char *name);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#494: FILE: include/linux/obj_load.h:187:
+ElfW(Addr) obj_symbol_final_value (struct obj_file *f,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#495: FILE: include/linux/obj_load.h:188:
+ElfW(Addr) obj_symbol_final_value (struct obj_file *f,
+				  struct obj_symbol *sym);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#497: FILE: include/linux/obj_load.h:190:
+void obj_set_symbol_compare (struct obj_file *f,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#498: FILE: include/linux/obj_load.h:191:
+void obj_set_symbol_compare (struct obj_file *f,
+			    int (*cmp)(const char *, const char *),

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#501: FILE: include/linux/obj_load.h:194:
+struct obj_section *obj_find_section (struct obj_file *f,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#502: FILE: include/linux/obj_load.h:195:
+struct obj_section *obj_find_section (struct obj_file *f,
+					   const char *name);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#504: FILE: include/linux/obj_load.h:197:
+void obj_insert_section_load_order (struct obj_file *f,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#507: FILE: include/linux/obj_load.h:200:
+struct obj_section *obj_create_alloced_section (struct obj_file *f,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#513: FILE: include/linux/obj_load.h:206:
+struct obj_section *obj_create_alloced_section_first (struct obj_file *f,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#518: FILE: include/linux/obj_load.h:211:
+void *obj_extend_section (struct obj_section *sec, unsigned long more);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#520: FILE: include/linux/obj_load.h:213:
+int obj_string_patch (struct obj_file *f, int secidx, ElfW(Addr) offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: include/linux/obj_load.h:214:
+int obj_string_patch (struct obj_file *f, int secidx, ElfW(Addr) offset,
+		     const char *string);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#523: FILE: include/linux/obj_load.h:216:
+int obj_symbol_patch (struct obj_file *f, int secidx, ElfW(Addr) offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#524: FILE: include/linux/obj_load.h:217:
+int obj_symbol_patch (struct obj_file *f, int secidx, ElfW(Addr) offset,
+		     struct obj_symbol *sym);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#526: FILE: include/linux/obj_load.h:219:
+int obj_check_undefineds (struct obj_file *f, int quiet);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#528: FILE: include/linux/obj_load.h:221:
+void obj_clear_undefineds (struct obj_file *f);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#530: FILE: include/linux/obj_load.h:223:
+void obj_allocate_commons (struct obj_file *f);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#532: FILE: include/linux/obj_load.h:225:
+unsigned long obj_load_size (struct obj_file *f);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#534: FILE: include/linux/obj_load.h:227:
+int obj_relocate (struct obj_file *f, ElfW(Addr) base);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#537: FILE: include/linux/obj_load.h:230:
+obj_load (void *modmem, unsigned int modsize, Elf32_Half e_type, const char *filename);

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Half>
#537: FILE: include/linux/obj_load.h:230:
+obj_load (void *modmem, unsigned int modsize, Elf32_Half e_type, const char *filename);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#539: FILE: include/linux/obj_load.h:232:
+void obj_free (struct obj_file *f);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#541: FILE: include/linux/obj_load.h:234:
+int obj_create_image (struct obj_file *f, char *image);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#543: FILE: include/linux/obj_load.h:236:
+int obj_kallsyms (struct obj_file *fin, struct obj_file **fout);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#547: FILE: include/linux/obj_load.h:240:
+struct obj_file *arch_new_file (void);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#549: FILE: include/linux/obj_load.h:242:
+struct obj_section *arch_new_section (void);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#551: FILE: include/linux/obj_load.h:244:
+struct obj_symbol *arch_new_symbol (void);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#553: FILE: include/linux/obj_load.h:246:
+enum obj_reloc arch_apply_relocation (struct obj_file *f,

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#557: FILE: include/linux/obj_load.h:250:
+				      ElfW(Rel) *rel, ElfW(Addr) value);
 				                ^

CHECK:CAMELCASE: Avoid CamelCase: <Rel>
#557: FILE: include/linux/obj_load.h:250:
+				      ElfW(Rel) *rel, ElfW(Addr) value);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#559: FILE: include/linux/obj_load.h:252:
+int arch_create_got (struct obj_file *f);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#562: FILE: include/linux/obj_load.h:255:
+int arch_init_module (struct obj_file *f, struct module *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct module *' should also have an identifier name
#562: FILE: include/linux/obj_load.h:255:
+int arch_init_module (struct obj_file *f, struct module *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#564: FILE: include/linux/obj_load.h:257:
+int arch_load_proc_section (struct obj_section *sec, int fp);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#566: FILE: include/linux/obj_load.h:259:
+int arch_finalize_section_address (struct obj_file *f, ElfW(Addr) base);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#568: FILE: include/linux/obj_load.h:261:
+int arch_archdata (struct obj_file *fin, struct obj_section *sec);

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Word>
#574: FILE: include/linux/obj_load.h:267:
+	Elf32_Word addr;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#577: FILE: include/linux/obj_load.h:270:
+};
+union obj_ptr_8 {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'u_int64_t'
#578: FILE: include/linux/obj_load.h:271:
+	u_int64_t addr;	/* Should be Elf64_Xword but not all users have this yet */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'isym' - possible side-effects?
#587: FILE: include/linux/obj_load.h:280:
+#define obj_find_relsym(isym, f, find, rel, symtab, strtab) \
+	{ \
+		unsigned long symndx = ELFW(R_SYM)((rel)->r_info); \
+		ElfW(Sym) *extsym = (symtab)+symndx; \
+		if (ELFW(ST_BIND)(extsym->st_info) == STB_LOCAL) { \
+			isym = (typeof(isym)) (f)->local_symtab[symndx]; \
+		} \
+		else { \
+			const char *name; \
+			if (extsym->st_name) \
+				name = (strtab) + extsym->st_name; \
+			else \
+				name = (f)->sections[extsym->st_shndx]->name; \
+			isym = (typeof(isym)) obj_find_symbol((find), name); \
+		} \
+	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'f' - possible side-effects?
#587: FILE: include/linux/obj_load.h:280:
+#define obj_find_relsym(isym, f, find, rel, symtab, strtab) \
+	{ \
+		unsigned long symndx = ELFW(R_SYM)((rel)->r_info); \
+		ElfW(Sym) *extsym = (symtab)+symndx; \
+		if (ELFW(ST_BIND)(extsym->st_info) == STB_LOCAL) { \
+			isym = (typeof(isym)) (f)->local_symtab[symndx]; \
+		} \
+		else { \
+			const char *name; \
+			if (extsym->st_name) \
+				name = (strtab) + extsym->st_name; \
+			else \
+				name = (f)->sections[extsym->st_shndx]->name; \
+			isym = (typeof(isym)) obj_find_symbol((find), name); \
+		} \
+	}

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#590: FILE: include/linux/obj_load.h:283:
+		ElfW(Sym) *extsym = (symtab)+symndx; \
 		          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#590: FILE: include/linux/obj_load.h:283:
+		ElfW(Sym) *extsym = (symtab)+symndx; \
 		                            ^

CHECK:CAMELCASE: Avoid CamelCase: <Sym>
#590: FILE: include/linux/obj_load.h:283:
+		ElfW(Sym) *extsym = (symtab)+symndx; \

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'extsym->st_info'
#591: FILE: include/linux/obj_load.h:284:
+		if (ELFW(ST_BIND)(extsym->st_info) == STB_LOCAL) { \

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: No space is necessary after a cast
#592: FILE: include/linux/obj_load.h:285:
+			isym = (typeof(isym)) (f)->local_symtab[symndx]; \

CHECK:SPACING: No space is necessary after a cast
#600: FILE: include/linux/obj_load.h:293:
+			isym = (typeof(isym)) obj_find_symbol((find), name); \

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#614: FILE: init/main.c:97:
+extern void init_boot_modules(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#643: FILE: kernel/boot_modules.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#644: FILE: kernel/boot_modules.c:2:
+ *  linux/kernel/boot_modules.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#646: FILE: kernel/boot_modules.c:4:
+ *  Copyright (C) 2001 Christian König
                                   ^

WARNING:TYPO_SPELLING: 'Ervery' may be misspelled - perhaps 'Every'?
#648: FILE: kernel/boot_modules.c:6:
+ *  Ervery thing here is GPL'ed.
     ^^^^^^

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#654: FILE: kernel/boot_modules.c:12:
+#ifndef __i386__ //this file should'n be arch dependent, but I'am lazy

Architecture specific defines should be avoided wherever
possible.

CHECK:SPACING: No space is necessary after a cast
#700: FILE: kernel/boot_modules.c:58:
+		sym = obj_find_symbol(f, (char *) s->name);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sym->info'
#701: FILE: kernel/boot_modules.c:59:
+		if (sym && ELFW(ST_BIND) (sym->info) != STB_LOCAL) {

CHECK:SPACING: No space is necessary after a cast
#702: FILE: kernel/boot_modules.c:60:
+			sym = obj_add_symbol(f, (char *) s->name, -1,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#703: FILE: kernel/boot_modules.c:61:
+			sym = obj_add_symbol(f, (char *) s->name, -1,
+				  ELFW(ST_INFO) (STB_GLOBAL, STT_NOTYPE),

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#723: FILE: kernel/boot_modules.c:81:
+	for (mod=module_list, i = 0; mod; mod=mod->next, i++)
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#723: FILE: kernel/boot_modules.c:81:
+	for (mod=module_list, i = 0; mod; mod=mod->next, i++)
 	                                     ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#749: FILE: kernel/boot_modules.c:107:
+	static const char *const specials[] =
+	{

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#757: FILE: kernel/boot_modules.c:115:
+		if ((sym = obj_find_symbol(f, *p)) != NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#769: FILE: kernel/boot_modules.c:127:
+/*	if (n_ext_modules_used) {
+		struct module_ref *dep;

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#783: FILE: kernel/boot_modules.c:141:
+				obj_symbol_patch(f, sec->idx, (char *) &dep->ref - sec->contents, tm);

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#787: FILE: kernel/boot_modules.c:145:
+	}*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#789: FILE: kernel/boot_modules.c:147:
+/*	if (!obj_find_section(f, "__ksymtab")) {
+		int *loaded;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#803: FILE: kernel/boot_modules.c:161:
+				if (ELFW(ST_BIND) (sym->info) != STB_LOCAL
+				    && sym->secidx <= SHN_HIRESERVE

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#804: FILE: kernel/boot_modules.c:162:
+				    && sym->secidx <= SHN_HIRESERVE
+				    && (sym->secidx >= SHN_LORESERVE

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#805: FILE: kernel/boot_modules.c:163:
+				    && (sym->secidx >= SHN_LORESERVE
+					|| loaded[sym->secidx])) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#810: FILE: kernel/boot_modules.c:168:
+	}*/

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#815: FILE: kernel/boot_modules.c:173:
+extern asmlinkage long sys_delete_module(const char *name_user);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#816: FILE: kernel/boot_modules.c:174:
+extern asmlinkage long sys_init_module(const char *name_user, struct module *mod_user);

CHECK:SPACING: No space is necessary after a cast
#828: FILE: kernel/boot_modules.c:186:
+	module = (struct module *) sec->contents;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#841: FILE: kernel/boot_modules.c:199:
+/*	if (n_ext_modules_used) {
+		sec = obj_find_section(f, ".kmodtab");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#844: FILE: kernel/boot_modules.c:202:
+	}*/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#847: FILE: kernel/boot_modules.c:205:
+	module->cleanup = obj_symbol_final_value(f,
+		obj_find_symbol(f, "cleanup_module"));

WARNING:BRACES: braces {} are not necessary for single statement blocks
#855: FILE: kernel/boot_modules.c:213:
+	if (sec) {
+		module->runsize = sec->header.sh_addr - m_addr;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#865: FILE: kernel/boot_modules.c:223:
+/*	sec = obj_find_section(f, ARCHDATA_SEC_NAME);
+	if (sec && sec->header.sh_size) {

CHECK:SPACING: No space is necessary after a cast
#886: FILE: kernel/boot_modules.c:244:
+		ret = sys_init_module(m_name, (struct module *) image);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#888: FILE: kernel/boot_modules.c:246:
+			printk(KERN_INFO "init_module: %m\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'init_module', this function's name, in a string
#888: FILE: kernel/boot_modules.c:246:
+			printk(KERN_INFO "init_module: %m\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#889: FILE: kernel/boot_modules.c:247:
+			printk(KERN_INFO "Hint: insmod errors can be caused by incorrect module parameters, "

WARNING:SPLIT_STRING: quoted string split across lines
#890: FILE: kernel/boot_modules.c:248:
+			printk(KERN_INFO "Hint: insmod errors can be caused by incorrect module parameters, "
+				"including invalid IO or IRQ parameters\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#906: FILE: kernel/boot_modules.c:264:
+/*	int k_crcs;
+	int m_version;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#927: FILE: kernel/boot_modules.c:285:
+		obj_set_symbol_compare(f, ncv_strcmp, ncv_symbol_hash);*/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#948: FILE: kernel/boot_modules.c:306:
+			printk(KERN_INFO "Note: modules without a GPL compatible license cannot use GPLONLY_ symbols\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#957: FILE: kernel/boot_modules.c:315:
+/*	if (argc) {
+		if (!process_module_arguments(f, argc, argv, 1))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#959: FILE: kernel/boot_modules.c:317:
+	}*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#963: FILE: kernel/boot_modules.c:321:
+/*	if (flag_ksymoops)
+		add_ksymoops_symbols(f, filename, m_name);*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#963: FILE: kernel/boot_modules.c:321:
+		add_ksymoops_symbols(f, filename, m_name);*/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#990: FILE: kernel/boot_modules.c:348:
+		printk(KERN_INFO "a module named %s already exists\n", m_name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#993: FILE: kernel/boot_modules.c:351:
+		printk(KERN_INFO "can't allocate kernel memory for module; needed %lu bytes\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#994: FILE: kernel/boot_modules.c:352:
+		printk(KERN_INFO "can't allocate kernel memory for module; needed %lu bytes\n",
+		      m_size);

ERROR:SPACING: space required before the open parenthesis '('
#997: FILE: kernel/boot_modules.c:355:
+		if(m_addr > 127)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#999: FILE: kernel/boot_modules.c:357:
+		printk(KERN_INFO "create_module: %m\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1003: FILE: kernel/boot_modules.c:361:
+	printk(KERN_INFO "Trying to relocate module @ 0x%x\n",m_addr);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1003: FILE: kernel/boot_modules.c:361:
+	printk(KERN_INFO "Trying to relocate module @ 0x%x\n",m_addr);
 	                                                     ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1019: FILE: kernel/boot_modules.c:377:
+/*	if (errors) {
+		delete_module(m_name);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1021: FILE: kernel/boot_modules.c:379:
+	}*/

ERROR:SPACING: space required before the open parenthesis '('
#1030: FILE: kernel/boot_modules.c:388:
+	if(!mbootinfo)

ERROR:SPACING: space required before the open parenthesis '('
#1032: FILE: kernel/boot_modules.c:390:
+	if(!(mbootinfo->flags & 8))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1035: FILE: kernel/boot_modules.c:393:
+	for(i=0;i<mbootinfo->mods_count;i++) {
 	     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1035: FILE: kernel/boot_modules.c:393:
+	for(i=0;i<mbootinfo->mods_count;i++) {
 	       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1035: FILE: kernel/boot_modules.c:393:
+	for(i=0;i<mbootinfo->mods_count;i++) {
 	         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1035: FILE: kernel/boot_modules.c:393:
+	for(i=0;i<mbootinfo->mods_count;i++) {
 	                               ^

ERROR:SPACING: space required before the open parenthesis '('
#1035: FILE: kernel/boot_modules.c:393:
+	for(i=0;i<mbootinfo->mods_count;i++) {

ERROR:SPACING: space required before the open parenthesis '('
#1039: FILE: kernel/boot_modules.c:397:
+		for(m_name = mod->string;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1039: FILE: kernel/boot_modules.c:397:
+		for(m_name = mod->string;
[...]
+		    m_name++);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1040: FILE: kernel/boot_modules.c:398:
+		    (*m_name != 0) && (*m_name != ' ') && (strncmp(m_name,".o",2) != 0);
 		                                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1040: FILE: kernel/boot_modules.c:398:
+		    (*m_name != 0) && (*m_name != ' ') && (strncmp(m_name,".o",2) != 0);
 		                                                              ^

ERROR:SPACING: space required after that ';' (ctx:BxV)
#1043: FILE: kernel/boot_modules.c:401:
+		for(;(m_name > mod->string) && (*m_name != '/');m_name--);
 		    ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1043: FILE: kernel/boot_modules.c:401:
+		for(;(m_name > mod->string) && (*m_name != '/');m_name--);
 		                                               ^

ERROR:SPACING: space required before the open parenthesis '('
#1043: FILE: kernel/boot_modules.c:401:
+		for(;(m_name > mod->string) && (*m_name != '/');m_name--);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1043: FILE: kernel/boot_modules.c:401:
+		for(;(m_name > mod->string) && (*m_name != '/');m_name--);

WARNING:LONG_LINE: line length of 128 exceeds 100 columns
#1046: FILE: kernel/boot_modules.c:404:
+		printk(KERN_INFO "Ok Starting to load Module %s from addr 0x%x - 0x%x\n", m_name, mod->mod_start, mod->mod_end);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1046: FILE: kernel/boot_modules.c:404:
+		printk(KERN_INFO "Ok Starting to load Module %s from addr 0x%x - 0x%x\n", m_name, mod->mod_start, mod->mod_end);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1047: FILE: kernel/boot_modules.c:405:
+		f = obj_load ((void *)mod->mod_start, mod->mod_end - mod->mod_start, ET_REL, mod->string);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1047: FILE: kernel/boot_modules.c:405:
+		f = obj_load ((void *)mod->mod_start, mod->mod_end - mod->mod_start, ET_REL, mod->string);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1048: FILE: kernel/boot_modules.c:406:
+		if (!f) continue;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1050: FILE: kernel/boot_modules.c:408:
+		insert_module(f,m_name,0,0);
 		               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1050: FILE: kernel/boot_modules.c:408:
+		insert_module(f,m_name,0,0);
 		                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1050: FILE: kernel/boot_modules.c:408:
+		insert_module(f,m_name,0,0);
 		                        ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1060: FILE: kernel/obj_common.c:1:
+/* Elf file, section, and symbol manipulation routines.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1061: FILE: kernel/obj_common.c:2:
+/* Elf file, section, and symbol manipulation routines.
+   Copyright 1996, 1997 Linux International.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1078: FILE: kernel/obj_common.c:19:
+   along with this program; if not, write to the Free Software Foundation,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1079: FILE: kernel/obj_common.c:20:
+   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#1081: FILE: kernel/obj_common.c:22:
+   Modified by Christian König (ChristianK.@t-online.de) to work inside the kernel*/
                           ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1081: FILE: kernel/obj_common.c:22:
+   Modified by Christian König (ChristianK.@t-online.de) to work inside the kernel*/

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#1083: FILE: kernel/obj_common.c:24:
+#ident "$Id: obj_common.c 1.4 Wed, 26 Sep 2001 11:58:34 +1000 kaos $"

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1095: FILE: kernel/obj_common.c:36:
+  unsigned long h = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1096: FILE: kernel/obj_common.c:37:
+  unsigned long g;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1097: FILE: kernel/obj_common.c:38:
+  unsigned char ch;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1099: FILE: kernel/obj_common.c:40:
+  while (n > 0)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1099: FILE: kernel/obj_common.c:40:
+  while (n > 0)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#1099: FILE: kernel/obj_common.c:40:
+  while (n > 0)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1100: FILE: kernel/obj_common.c:41:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1101: FILE: kernel/obj_common.c:42:
+      ch = *name++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1102: FILE: kernel/obj_common.c:43:
+      h = (h << 4) + ch;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1103: FILE: kernel/obj_common.c:44:
+      if ((g = (h & 0xf0000000)) != 0)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1103: FILE: kernel/obj_common.c:44:
+      if ((g = (h & 0xf0000000)) != 0)
+	{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#1103: FILE: kernel/obj_common.c:44:
+      if ((g = (h & 0xf0000000)) != 0)
+	{

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1103: FILE: kernel/obj_common.c:44:
+      if ((g = (h & 0xf0000000)) != 0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1108: FILE: kernel/obj_common.c:49:
+      n--;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1109: FILE: kernel/obj_common.c:50:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1110: FILE: kernel/obj_common.c:51:
+  return h;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1114: FILE: kernel/obj_common.c:55:
+obj_elf_hash (const char *name)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1116: FILE: kernel/obj_common.c:57:
+  return obj_elf_hash_n(name, strlen(name));$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1120: FILE: kernel/obj_common.c:61:
+obj_set_symbol_compare (struct obj_file *f,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1124: FILE: kernel/obj_common.c:65:
+  if (cmp)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1124: FILE: kernel/obj_common.c:65:
+  if (cmp)
+    f->symbol_cmp = cmp;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1125: FILE: kernel/obj_common.c:66:
+    f->symbol_cmp = cmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1126: FILE: kernel/obj_common.c:67:
+  if (hash)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1126: FILE: kernel/obj_common.c:67:
+  if (hash)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#1126: FILE: kernel/obj_common.c:67:
+  if (hash)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1127: FILE: kernel/obj_common.c:68:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1128: FILE: kernel/obj_common.c:69:
+      struct obj_symbol *tmptab[HASH_BUCKETS], *sym, *next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1129: FILE: kernel/obj_common.c:70:
+      int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1131: FILE: kernel/obj_common.c:72:
+      f->symbol_hash = hash;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1133: FILE: kernel/obj_common.c:74:
+      memcpy(tmptab, f->symtab, sizeof(tmptab));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1134: FILE: kernel/obj_common.c:75:
+      memset(f->symtab, 0, sizeof(f->symtab));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1136: FILE: kernel/obj_common.c:77:
+      for (i = 0; i < HASH_BUCKETS; ++i)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1137: FILE: kernel/obj_common.c:78:
+	for (sym = tmptab[i]; sym ; sym = next)
+	  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1137: FILE: kernel/obj_common.c:78:
+	for (sym = tmptab[i]; sym ; sym = next)
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#1138: FILE: kernel/obj_common.c:79:
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#1139: FILE: kernel/obj_common.c:80:
+	    unsigned long h = hash(sym->name) % HASH_BUCKETS;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1140: FILE: kernel/obj_common.c:81:
+	    unsigned long h = hash(sym->name) % HASH_BUCKETS;
+	    next = sym->next;

WARNING:TABSTOP: Statements should start on a tabstop
#1143: FILE: kernel/obj_common.c:84:
+	  }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1144: FILE: kernel/obj_common.c:85:
+    }$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1148: FILE: kernel/obj_common.c:89:
+obj_add_symbol (struct obj_file *f, const char *name, unsigned long symidx,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1151: FILE: kernel/obj_common.c:92:
+  struct obj_symbol *sym;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1152: FILE: kernel/obj_common.c:93:
+  unsigned long hash = f->symbol_hash(name) % HASH_BUCKETS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1153: FILE: kernel/obj_common.c:94:
+  int n_type = ELFW(ST_TYPE)(info);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1154: FILE: kernel/obj_common.c:95:
+  int n_binding = ELFW(ST_BIND)(info);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1156: FILE: kernel/obj_common.c:97:
+  for (sym = f->symtab[hash]; sym; sym = sym->next)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1156: FILE: kernel/obj_common.c:97:
+  for (sym = f->symtab[hash]; sym; sym = sym->next)
+    if (f->symbol_cmp(sym->name, name) == 0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1157: FILE: kernel/obj_common.c:98:
+    if (f->symbol_cmp(sym->name, name) == 0)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1157: FILE: kernel/obj_common.c:98:
+    if (f->symbol_cmp(sym->name, name) == 0)
+      {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1158: FILE: kernel/obj_common.c:99:
+      {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#1166: FILE: kernel/obj_common.c:107:
+	if (secidx == SHN_UNDEF)
+	  return sym;

WARNING:TABSTOP: Statements should start on a tabstop
#1167: FILE: kernel/obj_common.c:108:
+	  return sym;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#1168: FILE: kernel/obj_common.c:109:
+	else if (o_secidx == SHN_UNDEF)
+	  goto found;

WARNING:TABSTOP: Statements should start on a tabstop
#1169: FILE: kernel/obj_common.c:110:
+	  goto found;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1170: FILE: kernel/obj_common.c:111:
+	else if (n_binding == STB_GLOBAL && o_binding == STB_LOCAL)
+	  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1170: FILE: kernel/obj_common.c:111:
+	else if (n_binding == STB_GLOBAL && o_binding == STB_LOCAL)
[...]
+

WARNING:TABSTOP: Statements should start on a tabstop
#1171: FILE: kernel/obj_common.c:112:
+	  {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1173: FILE: kernel/obj_common.c:114:
+	    /* Cope with local and global symbols of the same name
+	       in the same object file, as might have been created

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1176: FILE: kernel/obj_common.c:117:
+	       with parameters.  */

WARNING:TABSTOP: Statements should start on a tabstop
#1185: FILE: kernel/obj_common.c:126:
+	    for (p = &f->symtab[hash]; *p != sym; p = &(*p)->next)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#1185: FILE: kernel/obj_common.c:126:
+	    for (p = &f->symtab[hash]; *p != sym; p = &(*p)->next)
+	      continue;

WARNING:TABSTOP: Statements should start on a tabstop
#1186: FILE: kernel/obj_common.c:127:
+	      continue;

WARNING:TABSTOP: Statements should start on a tabstop
#1188: FILE: kernel/obj_common.c:129:
+	    goto found;

WARNING:TABSTOP: Statements should start on a tabstop
#1189: FILE: kernel/obj_common.c:130:
+	  }

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1190: FILE: kernel/obj_common.c:131:
+	else if (n_binding == STB_LOCAL)
+	  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1190: FILE: kernel/obj_common.c:131:
+	else if (n_binding == STB_LOCAL)
[...]
+	       Just add this to the local table.  */

WARNING:TABSTOP: Statements should start on a tabstop
#1191: FILE: kernel/obj_common.c:132:
+	  {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1193: FILE: kernel/obj_common.c:134:
+	    /* Another symbol of the same name has already been defined.
+	       Just add this to the local table.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1193: FILE: kernel/obj_common.c:134:
+	       Just add this to the local table.  */

WARNING:TABSTOP: Statements should start on a tabstop
#1198: FILE: kernel/obj_common.c:139:
+	    goto found;

WARNING:TABSTOP: Statements should start on a tabstop
#1199: FILE: kernel/obj_common.c:140:
+	  }

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#1200: FILE: kernel/obj_common.c:141:
+	else if (n_binding == STB_WEAK)
+	  return sym;

WARNING:TABSTOP: Statements should start on a tabstop
#1201: FILE: kernel/obj_common.c:142:
+	  return sym;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#1202: FILE: kernel/obj_common.c:143:
+	else if (o_binding == STB_WEAK)
+	  goto found;

WARNING:TABSTOP: Statements should start on a tabstop
#1203: FILE: kernel/obj_common.c:144:
+	  goto found;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1205: FILE: kernel/obj_common.c:146:
+	/* Don't unify COMMON symbols with object types the programmer
+	   doesn't expect.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1205: FILE: kernel/obj_common.c:146:
+	   doesn't expect.  */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#1206: FILE: kernel/obj_common.c:147:
+	else if (secidx == SHN_COMMON
[...]
+	  return sym;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1207: FILE: kernel/obj_common.c:148:
+	else if (secidx == SHN_COMMON
+		 && (o_type == STT_NOTYPE || o_type == STT_OBJECT))

WARNING:TABSTOP: Statements should start on a tabstop
#1208: FILE: kernel/obj_common.c:149:
+	  return sym;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#1209: FILE: kernel/obj_common.c:150:
+	else if (o_secidx == SHN_COMMON
[...]
+	  goto found;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1210: FILE: kernel/obj_common.c:151:
+	else if (o_secidx == SHN_COMMON
+		 && (n_type == STT_NOTYPE || n_type == STT_OBJECT))

WARNING:TABSTOP: Statements should start on a tabstop
#1211: FILE: kernel/obj_common.c:152:
+	  goto found;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1212: FILE: kernel/obj_common.c:153:
+	else
+	  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1212: FILE: kernel/obj_common.c:153:
+	else
[...]
+	       the kernel or some external module.  */

WARNING:TABSTOP: Statements should start on a tabstop
#1213: FILE: kernel/obj_common.c:154:
+	  {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1215: FILE: kernel/obj_common.c:156:
+	    /* Don't report an error if the symbol is coming from
+	       the kernel or some external module.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1215: FILE: kernel/obj_common.c:156:
+	       the kernel or some external module.  */

WARNING:TABSTOP: Statements should start on a tabstop
#1216: FILE: kernel/obj_common.c:157:
+	    if (secidx <= SHN_HIRESERVE)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#1216: FILE: kernel/obj_common.c:157:
+	    if (secidx <= SHN_HIRESERVE)
+	      printk(KERN_INFO "%s multiply defined", name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1217: FILE: kernel/obj_common.c:158:
+	      printk(KERN_INFO "%s multiply defined", name);

WARNING:TABSTOP: Statements should start on a tabstop
#1218: FILE: kernel/obj_common.c:159:
+	    return sym;

WARNING:TABSTOP: Statements should start on a tabstop
#1219: FILE: kernel/obj_common.c:160:
+	  }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1220: FILE: kernel/obj_common.c:161:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1223: FILE: kernel/obj_common.c:164:
+  sym = arch_new_symbol();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1224: FILE: kernel/obj_common.c:165:
+  sym->next = f->symtab[hash];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1225: FILE: kernel/obj_common.c:166:
+  f->symtab[hash] = sym;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1226: FILE: kernel/obj_common.c:167:
+  sym->ksymidx = -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1228: FILE: kernel/obj_common.c:169:
+  if (ELFW(ST_BIND)(info) == STB_LOCAL && symidx != -1) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1228: FILE: kernel/obj_common.c:169:
+  if (ELFW(ST_BIND)(info) == STB_LOCAL && symidx != -1) {
+    if (symidx >= f->local_symtab_size)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1229: FILE: kernel/obj_common.c:170:
+    if (symidx >= f->local_symtab_size)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#1229: FILE: kernel/obj_common.c:170:
+    if (symidx >= f->local_symtab_size)
+      printk(KERN_INFO "local symbol %s with index %ld exceeds local_symtab_size %ld",

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1230: FILE: kernel/obj_common.c:171:
+      printk(KERN_INFO "local symbol %s with index %ld exceeds local_symtab_size %ld",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1230: FILE: kernel/obj_common.c:171:
+      printk(KERN_INFO "local symbol %s with index %ld exceeds local_symtab_size %ld",

ERROR:CODE_INDENT: code indent should use tabs where possible
#1231: FILE: kernel/obj_common.c:172:
+        name, (long) symidx, (long) f->local_symtab_size);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1231: FILE: kernel/obj_common.c:172:
+      printk(KERN_INFO "local symbol %s with index %ld exceeds local_symtab_size %ld",
+        name, (long) symidx, (long) f->local_symtab_size);

CHECK:SPACING: No space is necessary after a cast
#1231: FILE: kernel/obj_common.c:172:
+        name, (long) symidx, (long) f->local_symtab_size);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1231: FILE: kernel/obj_common.c:172:
+        name, (long) symidx, (long) f->local_symtab_size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1232: FILE: kernel/obj_common.c:173:
+    else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#1232: FILE: kernel/obj_common.c:173:
+    else
+      f->local_symtab[symidx] = sym;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1233: FILE: kernel/obj_common.c:174:
+      f->local_symtab[symidx] = sym;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1234: FILE: kernel/obj_common.c:175:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1237: FILE: kernel/obj_common.c:178:
+  sym->name = name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1238: FILE: kernel/obj_common.c:179:
+  sym->value = value;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1239: FILE: kernel/obj_common.c:180:
+  sym->size = size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1240: FILE: kernel/obj_common.c:181:
+  sym->secidx = secidx;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1241: FILE: kernel/obj_common.c:182:
+  sym->info = info;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1242: FILE: kernel/obj_common.c:183:
+  sym->r_type = 0;^I/* should be R_arch_NONE for all arch */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1244: FILE: kernel/obj_common.c:185:
+  return sym;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1248: FILE: kernel/obj_common.c:189:
+obj_find_symbol (struct obj_file *f, const char *name)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1250: FILE: kernel/obj_common.c:191:
+  struct obj_symbol *sym;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1251: FILE: kernel/obj_common.c:192:
+  unsigned long hash = f->symbol_hash(name) % HASH_BUCKETS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1253: FILE: kernel/obj_common.c:194:
+  for (sym = f->symtab[hash]; sym; sym = sym->next)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1253: FILE: kernel/obj_common.c:194:
+  for (sym = f->symtab[hash]; sym; sym = sym->next)
+    if (f->symbol_cmp(sym->name, name) == 0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1254: FILE: kernel/obj_common.c:195:
+    if (f->symbol_cmp(sym->name, name) == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#1254: FILE: kernel/obj_common.c:195:
+    if (f->symbol_cmp(sym->name, name) == 0)
+      return sym;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1255: FILE: kernel/obj_common.c:196:
+      return sym;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1257: FILE: kernel/obj_common.c:198:
+  return NULL;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1261: FILE: kernel/obj_common.c:202:
+obj_symbol_final_value (struct obj_file *f, struct obj_symbol *sym)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1263: FILE: kernel/obj_common.c:204:
+  if (sym)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1263: FILE: kernel/obj_common.c:204:
+  if (sym)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#1263: FILE: kernel/obj_common.c:204:
+  if (sym)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1264: FILE: kernel/obj_common.c:205:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1265: FILE: kernel/obj_common.c:206:
+      if (sym->secidx >= SHN_LORESERVE)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1268: FILE: kernel/obj_common.c:209:
+      return sym->value + f->sections[sym->secidx]->header.sh_addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1269: FILE: kernel/obj_common.c:210:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1270: FILE: kernel/obj_common.c:211:
+  else$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1270: FILE: kernel/obj_common.c:211:
+  else
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#1270: FILE: kernel/obj_common.c:211:
+  else
[...]
+      /* As a special case, a NULL sym has value zero.  */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1271: FILE: kernel/obj_common.c:212:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1273: FILE: kernel/obj_common.c:214:
+      return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1274: FILE: kernel/obj_common.c:215:
+    }$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1278: FILE: kernel/obj_common.c:219:
+obj_find_section (struct obj_file *f, const char *name)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1280: FILE: kernel/obj_common.c:221:
+  int i, n = f->header.e_shnum;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1282: FILE: kernel/obj_common.c:223:
+  for (i = 0; i < n; ++i)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1282: FILE: kernel/obj_common.c:223:
+  for (i = 0; i < n; ++i)
+    if (strcmp(f->sections[i]->name, name) == 0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1283: FILE: kernel/obj_common.c:224:
+    if (strcmp(f->sections[i]->name, name) == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#1283: FILE: kernel/obj_common.c:224:
+    if (strcmp(f->sections[i]->name, name) == 0)
+      return f->sections[i];

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1284: FILE: kernel/obj_common.c:225:
+      return f->sections[i];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1286: FILE: kernel/obj_common.c:227:
+  return NULL;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1289: FILE: kernel/obj_common.c:230:
+#if defined (ARCH_alpha)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1291: FILE: kernel/obj_common.c:232:
+#elif defined (ARCH_ia64)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1300: FILE: kernel/obj_common.c:241:
+  unsigned long af, ac;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1302: FILE: kernel/obj_common.c:243:
+  af = a->header.sh_flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1304: FILE: kernel/obj_common.c:245:
+  ac = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1305: FILE: kernel/obj_common.c:246:
+  if (a->name[0] != '.'$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1305: FILE: kernel/obj_common.c:246:
+  if (a->name[0] != '.'
[...]
+    ac |= 64;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1306: FILE: kernel/obj_common.c:247:
+  if (a->name[0] != '.'
+      || strlen(a->name) != 10

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1306: FILE: kernel/obj_common.c:247:
+      || strlen(a->name) != 10$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1307: FILE: kernel/obj_common.c:248:
+      || strlen(a->name) != 10
+      || strcmp(a->name + 5, ".init"))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1307: FILE: kernel/obj_common.c:248:
+      || strcmp(a->name + 5, ".init"))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1308: FILE: kernel/obj_common.c:249:
+    ac |= 64;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1309: FILE: kernel/obj_common.c:250:
+  if (af & SHF_ALLOC) ac |= 32;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1309: FILE: kernel/obj_common.c:250:
+  if (af & SHF_ALLOC) ac |= 32;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1310: FILE: kernel/obj_common.c:251:
+  if (af & SHF_EXECINSTR) ac |= 16;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1310: FILE: kernel/obj_common.c:251:
+  if (af & SHF_EXECINSTR) ac |= 16;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1311: FILE: kernel/obj_common.c:252:
+  if (!(af & SHF_WRITE)) ac |= 8;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1311: FILE: kernel/obj_common.c:252:
+  if (!(af & SHF_WRITE)) ac |= 8;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1312: FILE: kernel/obj_common.c:253:
+  if (a->header.sh_type != SHT_NOBITS) ac |= 4;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1312: FILE: kernel/obj_common.c:253:
+  if (a->header.sh_type != SHT_NOBITS) ac |= 4;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1314: FILE: kernel/obj_common.c:255:
+  /* Desired order is
+		P S  AC & 7

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1319: FILE: kernel/obj_common.c:260:
+	.bss    0 0  0  */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1320: FILE: kernel/obj_common.c:261:
+  if (strcmp (a->name, ".got") == 0) ac |= 2;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1320: FILE: kernel/obj_common.c:261:
+  if (strcmp (a->name, ".got") == 0) ac |= 2;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1320: FILE: kernel/obj_common.c:261:
+  if (strcmp (a->name, ".got") == 0) ac |= 2;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1321: FILE: kernel/obj_common.c:262:
+  if (af & ARCH_SHF_SHORT)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1321: FILE: kernel/obj_common.c:262:
+  if (af & ARCH_SHF_SHORT)
+    ac = (ac & ~4) | 1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1322: FILE: kernel/obj_common.c:263:
+    ac = (ac & ~4) | 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1324: FILE: kernel/obj_common.c:265:
+  return ac;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1328: FILE: kernel/obj_common.c:269:
+obj_insert_section_load_order (struct obj_file *f, struct obj_section *sec)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1330: FILE: kernel/obj_common.c:271:
+  struct obj_section **p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1331: FILE: kernel/obj_common.c:272:
+  int prio = obj_load_order_prio(sec);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1332: FILE: kernel/obj_common.c:273:
+  int prio = obj_load_order_prio(sec);
+  for (p = f->load_order_search_start; *p ; p = &(*p)->load_next)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1332: FILE: kernel/obj_common.c:273:
+  for (p = f->load_order_search_start; *p ; p = &(*p)->load_next)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1332: FILE: kernel/obj_common.c:273:
+  for (p = f->load_order_search_start; *p ; p = &(*p)->load_next)
+    if (obj_load_order_prio(*p) < prio)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1333: FILE: kernel/obj_common.c:274:
+    if (obj_load_order_prio(*p) < prio)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#1333: FILE: kernel/obj_common.c:274:
+    if (obj_load_order_prio(*p) < prio)
+      break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1334: FILE: kernel/obj_common.c:275:
+      break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1335: FILE: kernel/obj_common.c:276:
+  sec->load_next = *p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1336: FILE: kernel/obj_common.c:277:
+  *p = sec;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1342: FILE: kernel/obj_common.c:283:
+	void *new;
+	new = kmalloc(size, GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1349: FILE: kernel/obj_common.c:290:
+obj_create_alloced_section (struct obj_file *f, const char *name,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1353: FILE: kernel/obj_common.c:294:
+  int newidx = f->header.e_shnum++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1354: FILE: kernel/obj_common.c:295:
+  struct obj_section *sec;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1356: FILE: kernel/obj_common.c:297:
+  f->sections = realloc(f->sections, (newidx+1) * sizeof(sec), newidx * sizeof(sec));$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1356: FILE: kernel/obj_common.c:297:
+  f->sections = realloc(f->sections, (newidx+1) * sizeof(sec), newidx * sizeof(sec));
                                             ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1357: FILE: kernel/obj_common.c:298:
+  f->sections[newidx] = sec = arch_new_section();$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1357: FILE: kernel/obj_common.c:298:
+  f->sections[newidx] = sec = arch_new_section();

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1359: FILE: kernel/obj_common.c:300:
+  memset(sec, 0, sizeof(*sec));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1360: FILE: kernel/obj_common.c:301:
+  sec->header.sh_type = SHT_PROGBITS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1361: FILE: kernel/obj_common.c:302:
+  sec->header.sh_flags = flags | SHF_ALLOC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1362: FILE: kernel/obj_common.c:303:
+  sec->header.sh_size = size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1363: FILE: kernel/obj_common.c:304:
+  sec->header.sh_addralign = align;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1364: FILE: kernel/obj_common.c:305:
+  sec->name = name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1365: FILE: kernel/obj_common.c:306:
+  sec->idx = newidx;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1366: FILE: kernel/obj_common.c:307:
+  if (size)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1366: FILE: kernel/obj_common.c:307:
+  if (size)
+    sec->contents = kmalloc(size, GFP_KERNEL);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1367: FILE: kernel/obj_common.c:308:
+    sec->contents = kmalloc(size, GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1369: FILE: kernel/obj_common.c:310:
+  obj_insert_section_load_order(f, sec);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1371: FILE: kernel/obj_common.c:312:
+  return sec;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1375: FILE: kernel/obj_common.c:316:
+obj_create_alloced_section_first (struct obj_file *f, const char *name,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1378: FILE: kernel/obj_common.c:319:
+  int newidx = f->header.e_shnum++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1379: FILE: kernel/obj_common.c:320:
+  struct obj_section *sec;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1381: FILE: kernel/obj_common.c:322:
+  f->sections = realloc(f->sections, (newidx+1) * sizeof(sec), newidx * sizeof(sec));$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1381: FILE: kernel/obj_common.c:322:
+  f->sections = realloc(f->sections, (newidx+1) * sizeof(sec), newidx * sizeof(sec));
                                             ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1382: FILE: kernel/obj_common.c:323:
+  f->sections[newidx] = sec = arch_new_section();$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1382: FILE: kernel/obj_common.c:323:
+  f->sections[newidx] = sec = arch_new_section();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1384: FILE: kernel/obj_common.c:325:
+  memset(sec, 0, sizeof(*sec));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1385: FILE: kernel/obj_common.c:326:
+  sec->header.sh_type = SHT_PROGBITS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1386: FILE: kernel/obj_common.c:327:
+  sec->header.sh_flags = SHF_WRITE|SHF_ALLOC;$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1386: FILE: kernel/obj_common.c:327:
+  sec->header.sh_flags = SHF_WRITE|SHF_ALLOC;
                                   ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1387: FILE: kernel/obj_common.c:328:
+  sec->header.sh_size = size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1388: FILE: kernel/obj_common.c:329:
+  sec->header.sh_addralign = align;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1389: FILE: kernel/obj_common.c:330:
+  sec->name = name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1390: FILE: kernel/obj_common.c:331:
+  sec->idx = newidx;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1391: FILE: kernel/obj_common.c:332:
+  if (size)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1391: FILE: kernel/obj_common.c:332:
+  if (size)
+    sec->contents = kmalloc(size, GFP_KERNEL);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1392: FILE: kernel/obj_common.c:333:
+    sec->contents = kmalloc(size, GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1394: FILE: kernel/obj_common.c:335:
+  sec->load_next = f->load_order;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1395: FILE: kernel/obj_common.c:336:
+  f->load_order = sec;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1396: FILE: kernel/obj_common.c:337:
+  if (f->load_order_search_start == &f->load_order)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1396: FILE: kernel/obj_common.c:337:
+  if (f->load_order_search_start == &f->load_order)
+    f->load_order_search_start = &sec->load_next;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1397: FILE: kernel/obj_common.c:338:
+    f->load_order_search_start = &sec->load_next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1399: FILE: kernel/obj_common.c:340:
+  return sec;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1403: FILE: kernel/obj_common.c:344:
+obj_extend_section (struct obj_section *sec, unsigned long more)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1405: FILE: kernel/obj_common.c:346:
+  unsigned long oldsize = sec->header.sh_size;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1406: FILE: kernel/obj_common.c:347:
+  unsigned long oldsize = sec->header.sh_size;
+  sec->contents = realloc(sec->contents, sec->header.sh_size += more, oldsize);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1406: FILE: kernel/obj_common.c:347:
+  sec->contents = realloc(sec->contents, sec->header.sh_size += more, oldsize);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1407: FILE: kernel/obj_common.c:348:
+  return sec->contents + oldsize;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1417: FILE: kernel/obj_common.c:358:
+obj_addr_to_native_ptr (ElfW(Addr) addr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1422: FILE: kernel/obj_common.c:363:
+	union obj_ptr_8 p8;
+	switch (convert) {

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1425: FILE: kernel/obj_common.c:366:
+		return(p4.ptr);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#1426: FILE: kernel/obj_common.c:367:
+		return(p4.ptr);
+		break;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1430: FILE: kernel/obj_common.c:371:
+			printk(KERN_INFO "obj_addr_to_native_ptr truncation %lx",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'obj_addr_to_native_ptr', this function's name, in a string
#1430: FILE: kernel/obj_common.c:371:
+			printk(KERN_INFO "obj_addr_to_native_ptr truncation %lx",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1431: FILE: kernel/obj_common.c:372:
+			printk(KERN_INFO "obj_addr_to_native_ptr truncation %lx",
+				(unsigned long) addr);

CHECK:SPACING: No space is necessary after a cast
#1431: FILE: kernel/obj_common.c:372:
+				(unsigned long) addr);

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#1435: FILE: kernel/obj_common.c:376:
+		return(p4.ptr);
+		break;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1438: FILE: kernel/obj_common.c:379:
+		return(p8.ptr);

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#1439: FILE: kernel/obj_common.c:380:
+		return(p8.ptr);
+		break;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1442: FILE: kernel/obj_common.c:383:
+		return(p8.ptr);

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#1443: FILE: kernel/obj_common.c:384:
+		return(p8.ptr);
+		break;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1445: FILE: kernel/obj_common.c:386:
+		printk(KERN_INFO "obj_addr_to_native_ptr unknown conversion 0x%04x", convert);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'obj_addr_to_native_ptr', this function's name, in a string
#1445: FILE: kernel/obj_common.c:386:
+		printk(KERN_INFO "obj_addr_to_native_ptr unknown conversion 0x%04x", convert);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1451: FILE: kernel/obj_common.c:392:
+obj_native_ptr_to_addr (void *ptr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1456: FILE: kernel/obj_common.c:397:
+	union obj_ptr_8 p8;
+	switch (convert) {

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1459: FILE: kernel/obj_common.c:400:
+		return(p4.addr);

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#1460: FILE: kernel/obj_common.c:401:
+		return(p4.addr);
+		break;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1465: FILE: kernel/obj_common.c:406:
+			printk(KERN_INFO "obj_native_ptr_to_addr truncation %x",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1466: FILE: kernel/obj_common.c:407:
+			printk(KERN_INFO "obj_native_ptr_to_addr truncation %x",
+				p8.addr);

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#1470: FILE: kernel/obj_common.c:411:
+		return(p4.addr);
+		break;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1473: FILE: kernel/obj_common.c:414:
+		return(p4.addr);	/* compiler expands to 8 */

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#1474: FILE: kernel/obj_common.c:415:
+		return(p4.addr);	/* compiler expands to 8 */
+		break;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1477: FILE: kernel/obj_common.c:418:
+		return(p8.addr);

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#1478: FILE: kernel/obj_common.c:419:
+		return(p8.addr);
+		break;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1480: FILE: kernel/obj_common.c:421:
+		printk(KERN_INFO "obj_native_ptr_to_addr unknown conversion 0x%04x", convert);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1488: FILE: kernel/obj_gpl_license.c:1:
+/* Return the type of license for a module.  0 for GPL, 1 for no license, 2 for

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1489: FILE: kernel/obj_gpl_license.c:2:
+/* Return the type of license for a module.  0 for GPL, 1 for no license, 2 for
+   non-GPL.  The license parameter is set to the license string or NULL.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1504: FILE: kernel/obj_gpl_license.c:17:
+   along with this program; if not, write to the Free Software Foundation,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1505: FILE: kernel/obj_gpl_license.c:18:
+   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#1507: FILE: kernel/obj_gpl_license.c:20:
+   Modified by Christian König (ChristianK.@t-online.de) to work inside the kernel*/
                           ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1507: FILE: kernel/obj_gpl_license.c:20:
+   Modified by Christian König (ChristianK.@t-online.de) to work inside the kernel*/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1509: FILE: kernel/obj_gpl_license.c:22:
+
+

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#1520: FILE: kernel/obj_gpl_license.c:33:
+static const char *gpl_licenses[] = {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1530: FILE: kernel/obj_gpl_license.c:43:
+	struct obj_section *sec;
+	if ((sec = obj_find_section(f, ".modinfo"))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1530: FILE: kernel/obj_gpl_license.c:43:
+	if ((sec = obj_find_section(f, ".modinfo"))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1532: FILE: kernel/obj_gpl_license.c:45:
+		const char *value, *ptr, *endptr;
+		ptr = sec->contents;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1535: FILE: kernel/obj_gpl_license.c:48:
+			if ((value = strchr(ptr, '=')) && strncmp(ptr, "license", value-ptr) == 0) {
 			                                                               ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1535: FILE: kernel/obj_gpl_license.c:48:
+			if ((value = strchr(ptr, '=')) && strncmp(ptr, "license", value-ptr) == 0) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1537: FILE: kernel/obj_gpl_license.c:50:
+				int i;
+				if (license)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1538: FILE: kernel/obj_gpl_license.c:51:
+					*license = value+1;
 					                ^

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(gpl_licenses)
#1539: FILE: kernel/obj_gpl_license.c:52:
+				for (i = 0; i < sizeof(gpl_licenses)/sizeof(gpl_licenses[0]); ++i) {

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1539: FILE: kernel/obj_gpl_license.c:52:
+				for (i = 0; i < sizeof(gpl_licenses)/sizeof(gpl_licenses[0]); ++i) {
 				                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1540: FILE: kernel/obj_gpl_license.c:53:
+					if (strcmp(value+1, gpl_licenses[i]) == 0)
 					                ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1557: FILE: kernel/obj_load.c:1:
+/* Elf file reader.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1558: FILE: kernel/obj_load.c:2:
+/* Elf file reader.
+   Copyright 1996, 1997 Linux International.

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#1561: FILE: kernel/obj_load.c:5:
+   obj_free() added by Björn Ekwall <bj0rn@blox.se> March 1999
                          ^

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1577: FILE: kernel/obj_load.c:21:
+   along with this program; if not, write to the Free Software Foundation,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1578: FILE: kernel/obj_load.c:22:
+   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#1580: FILE: kernel/obj_load.c:24:
+   Modified by Christian König (ChristianK.@t-online.de) to work inside the kernel*/
                           ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1580: FILE: kernel/obj_load.c:24:
+   Modified by Christian König (ChristianK.@t-online.de) to work inside the kernel*/

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#1582: FILE: kernel/obj_load.c:26:
+#ident "$Id: obj_load.c 1.4 Wed, 26 Sep 2001 14:50:45 +1000 kaos $"

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1595: FILE: kernel/obj_load.c:39:
+	if((size-index) < dstsize)
 	        ^

ERROR:SPACING: space required before the open parenthesis '('
#1595: FILE: kernel/obj_load.c:39:
+	if((size-index) < dstsize)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1602: FILE: kernel/obj_load.c:46:
+obj_load (void *modmem, unsigned int modsize, Elf32_Half e_type, const char *filename)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1604: FILE: kernel/obj_load.c:48:
+  struct obj_file *f;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1605: FILE: kernel/obj_load.c:49:
+  struct obj_file *f;
+  ElfW(Shdr) *section_headers;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1605: FILE: kernel/obj_load.c:49:
+  ElfW(Shdr) *section_headers;$

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#1605: FILE: kernel/obj_load.c:49:
+  ElfW(Shdr) *section_headers;
              ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1606: FILE: kernel/obj_load.c:50:
+  int shnum, i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1607: FILE: kernel/obj_load.c:51:
+  char *shstrtab;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1611: FILE: kernel/obj_load.c:55:
+  f = arch_new_file();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1612: FILE: kernel/obj_load.c:56:
+  memset(f, 0, sizeof(*f));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1613: FILE: kernel/obj_load.c:57:
+  f->symbol_cmp = strcmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1614: FILE: kernel/obj_load.c:58:
+  f->symbol_hash = obj_elf_hash;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1615: FILE: kernel/obj_load.c:59:
+  f->load_order_search_start = &f->load_order;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1617: FILE: kernel/obj_load.c:61:
+  if (memcpy_chk(modmem, modsize, 0, &f->header, sizeof(f->header)) != sizeof(f->header))$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1617: FILE: kernel/obj_load.c:61:
+  if (memcpy_chk(modmem, modsize, 0, &f->header, sizeof(f->header)) != sizeof(f->header))
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#1617: FILE: kernel/obj_load.c:61:
+  if (memcpy_chk(modmem, modsize, 0, &f->header, sizeof(f->header)) != sizeof(f->header))
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1618: FILE: kernel/obj_load.c:62:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1619: FILE: kernel/obj_load.c:63:
+      printk(KERN_INFO "cannot read ELF header from %s\n", filename);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1619: FILE: kernel/obj_load.c:63:
+      printk(KERN_INFO "cannot read ELF header from %s\n", filename);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1620: FILE: kernel/obj_load.c:64:
+      obj_free(f);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1621: FILE: kernel/obj_load.c:65:
+      return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1622: FILE: kernel/obj_load.c:66:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1624: FILE: kernel/obj_load.c:68:
+  if (f->header.e_ident[EI_MAG0] != ELFMAG0$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1624: FILE: kernel/obj_load.c:68:
+  if (f->header.e_ident[EI_MAG0] != ELFMAG0
+      || f->header.e_ident[EI_MAG1] != ELFMAG1
+      || f->header.e_ident[EI_MAG2] != ELFMAG2
+      || f->header.e_ident[EI_MAG3] != ELFMAG3)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#1624: FILE: kernel/obj_load.c:68:
+  if (f->header.e_ident[EI_MAG0] != ELFMAG0
[...]
+    {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1625: FILE: kernel/obj_load.c:69:
+  if (f->header.e_ident[EI_MAG0] != ELFMAG0
+      || f->header.e_ident[EI_MAG1] != ELFMAG1

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1625: FILE: kernel/obj_load.c:69:
+      || f->header.e_ident[EI_MAG1] != ELFMAG1$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1626: FILE: kernel/obj_load.c:70:
+      || f->header.e_ident[EI_MAG1] != ELFMAG1
+      || f->header.e_ident[EI_MAG2] != ELFMAG2

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1626: FILE: kernel/obj_load.c:70:
+      || f->header.e_ident[EI_MAG2] != ELFMAG2$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1627: FILE: kernel/obj_load.c:71:
+      || f->header.e_ident[EI_MAG2] != ELFMAG2
+      || f->header.e_ident[EI_MAG3] != ELFMAG3)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1627: FILE: kernel/obj_load.c:71:
+      || f->header.e_ident[EI_MAG3] != ELFMAG3)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1628: FILE: kernel/obj_load.c:72:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1629: FILE: kernel/obj_load.c:73:
+      printk(KERN_INFO "%s is not an ELF file\n", filename);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1629: FILE: kernel/obj_load.c:73:
+      printk(KERN_INFO "%s is not an ELF file\n", filename);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1630: FILE: kernel/obj_load.c:74:
+      obj_free(f);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1631: FILE: kernel/obj_load.c:75:
+      return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1632: FILE: kernel/obj_load.c:76:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1633: FILE: kernel/obj_load.c:77:
+  if (f->header.e_ident[EI_CLASS] != ELF_CLASS$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1633: FILE: kernel/obj_load.c:77:
+  if (f->header.e_ident[EI_CLASS] != ELF_CLASS
+      || f->header.e_ident[EI_DATA] != ELF_DATA
+      || f->header.e_ident[EI_VERSION] != EV_CURRENT
+      || f->header.e_machine != ELF_ARCH)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#1633: FILE: kernel/obj_load.c:77:
+  if (f->header.e_ident[EI_CLASS] != ELF_CLASS
[...]
+    {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1634: FILE: kernel/obj_load.c:78:
+  if (f->header.e_ident[EI_CLASS] != ELF_CLASS
+      || f->header.e_ident[EI_DATA] != ELF_DATA

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1634: FILE: kernel/obj_load.c:78:
+      || f->header.e_ident[EI_DATA] != ELF_DATA$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1635: FILE: kernel/obj_load.c:79:
+      || f->header.e_ident[EI_DATA] != ELF_DATA
+      || f->header.e_ident[EI_VERSION] != EV_CURRENT

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1635: FILE: kernel/obj_load.c:79:
+      || f->header.e_ident[EI_VERSION] != EV_CURRENT$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1636: FILE: kernel/obj_load.c:80:
+      || f->header.e_ident[EI_VERSION] != EV_CURRENT
+      || f->header.e_machine != ELF_ARCH)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1636: FILE: kernel/obj_load.c:80:
+      || f->header.e_machine != ELF_ARCH)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1637: FILE: kernel/obj_load.c:81:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1638: FILE: kernel/obj_load.c:82:
+      printk(KERN_INFO "ELF file %s not for this architecture\n", filename);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1638: FILE: kernel/obj_load.c:82:
+      printk(KERN_INFO "ELF file %s not for this architecture\n", filename);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1639: FILE: kernel/obj_load.c:83:
+      obj_free(f);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1640: FILE: kernel/obj_load.c:84:
+      return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1641: FILE: kernel/obj_load.c:85:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1642: FILE: kernel/obj_load.c:86:
+  if (f->header.e_type != e_type && e_type != ET_NONE)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1642: FILE: kernel/obj_load.c:86:
+  if (f->header.e_type != e_type && e_type != ET_NONE)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#1642: FILE: kernel/obj_load.c:86:
+  if (f->header.e_type != e_type && e_type != ET_NONE)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1643: FILE: kernel/obj_load.c:87:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1644: FILE: kernel/obj_load.c:88:
+      switch (e_type) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1645: FILE: kernel/obj_load.c:89:
+      case ET_REL:$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1646: FILE: kernel/obj_load.c:90:
+	printk(KERN_INFO "ELF file %s not a relocatable object\n", filename);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1648: FILE: kernel/obj_load.c:92:
+      case ET_EXEC:$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1649: FILE: kernel/obj_load.c:93:
+	printk(KERN_INFO "ELF file %s not an executable object\n", filename);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1652: FILE: kernel/obj_load.c:96:
+	printk(KERN_INFO "ELF file %s has wrong type, expecting %d got %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1653: FILE: kernel/obj_load.c:97:
+	printk(KERN_INFO "ELF file %s has wrong type, expecting %d got %d\n",
+		filename, e_type, f->header.e_type);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1655: FILE: kernel/obj_load.c:99:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1656: FILE: kernel/obj_load.c:100:
+      obj_free(f);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1657: FILE: kernel/obj_load.c:101:
+      return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1658: FILE: kernel/obj_load.c:102:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1662: FILE: kernel/obj_load.c:106:
+  if (f->header.e_shentsize != sizeof(ElfW(Shdr)))$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1662: FILE: kernel/obj_load.c:106:
+  if (f->header.e_shentsize != sizeof(ElfW(Shdr)))
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#1662: FILE: kernel/obj_load.c:106:
+  if (f->header.e_shentsize != sizeof(ElfW(Shdr)))
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1663: FILE: kernel/obj_load.c:107:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1664: FILE: kernel/obj_load.c:108:
+      printk(KERN_INFO "section header size mismatch %s: %lu != %lu\n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1664: FILE: kernel/obj_load.c:108:
+      printk(KERN_INFO "section header size mismatch %s: %lu != %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1665: FILE: kernel/obj_load.c:109:
+      printk(KERN_INFO "section header size mismatch %s: %lu != %lu\n",
+	    filename,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1668: FILE: kernel/obj_load.c:112:
+      obj_free(f);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1669: FILE: kernel/obj_load.c:113:
+      return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1670: FILE: kernel/obj_load.c:114:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1672: FILE: kernel/obj_load.c:116:
+  shnum = f->header.e_shnum;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1673: FILE: kernel/obj_load.c:117:
+  f->sections = kmalloc(sizeof(struct obj_section *) * shnum, GFP_KERNEL);$

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1673: FILE: kernel/obj_load.c:117:
+  f->sections = kmalloc(sizeof(struct obj_section *) * shnum, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1674: FILE: kernel/obj_load.c:118:
+  memset(f->sections, 0, sizeof(struct obj_section *) * shnum);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1676: FILE: kernel/obj_load.c:120:
+  section_headers = kmalloc(sizeof(ElfW(Shdr)) * shnum, GFP_KERNEL);$

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1676: FILE: kernel/obj_load.c:120:
+  section_headers = kmalloc(sizeof(ElfW(Shdr)) * shnum, GFP_KERNEL);

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#1677: FILE: kernel/obj_load.c:121:
+  if (memcpy_chk(modmem, modsize, f->header.e_shoff, section_headers, sizeof(ElfW(Shdr))*shnum) != sizeof(ElfW(Shdr))*shnum)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1677: FILE: kernel/obj_load.c:121:
+  if (memcpy_chk(modmem, modsize, f->header.e_shoff, section_headers, sizeof(ElfW(Shdr))*shnum) != sizeof(ElfW(Shdr))*shnum)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1677: FILE: kernel/obj_load.c:121:
+  if (memcpy_chk(modmem, modsize, f->header.e_shoff, section_headers, sizeof(ElfW(Shdr))*shnum) != sizeof(ElfW(Shdr))*shnum)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#1677: FILE: kernel/obj_load.c:121:
+  if (memcpy_chk(modmem, modsize, f->header.e_shoff, section_headers, sizeof(ElfW(Shdr))*shnum) != sizeof(ElfW(Shdr))*shnum)
+    {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1677: FILE: kernel/obj_load.c:121:
+  if (memcpy_chk(modmem, modsize, f->header.e_shoff, section_headers, sizeof(ElfW(Shdr))*shnum) != sizeof(ElfW(Shdr))*shnum)
                                                                                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1677: FILE: kernel/obj_load.c:121:
+  if (memcpy_chk(modmem, modsize, f->header.e_shoff, section_headers, sizeof(ElfW(Shdr))*shnum) != sizeof(ElfW(Shdr))*shnum)
                                                                                                                      ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1678: FILE: kernel/obj_load.c:122:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1679: FILE: kernel/obj_load.c:123:
+      printk(KERN_INFO "reading ELF section headers %s: %m\n", filename);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1679: FILE: kernel/obj_load.c:123:
+      printk(KERN_INFO "reading ELF section headers %s: %m\n", filename);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1680: FILE: kernel/obj_load.c:124:
+      obj_free(f);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1681: FILE: kernel/obj_load.c:125:
+      return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1682: FILE: kernel/obj_load.c:126:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1686: FILE: kernel/obj_load.c:130:
+  for (i = 0; i < shnum; ++i)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1686: FILE: kernel/obj_load.c:130:
+  for (i = 0; i < shnum; ++i)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#1686: FILE: kernel/obj_load.c:130:
+  for (i = 0; i < shnum; ++i)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1687: FILE: kernel/obj_load.c:131:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1688: FILE: kernel/obj_load.c:132:
+      struct obj_section *sec;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1690: FILE: kernel/obj_load.c:134:
+      f->sections[i] = sec = arch_new_section();$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1690: FILE: kernel/obj_load.c:134:
+      f->sections[i] = sec = arch_new_section();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1691: FILE: kernel/obj_load.c:135:
+      memset(sec, 0, sizeof(*sec));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1693: FILE: kernel/obj_load.c:137:
+      sec->header = section_headers[i];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1694: FILE: kernel/obj_load.c:138:
+      sec->idx = i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1696: FILE: kernel/obj_load.c:140:
+      switch (sec->header.sh_type)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1696: FILE: kernel/obj_load.c:140:
+      switch (sec->header.sh_type)
+	{

WARNING:TABSTOP: Statements should start on a tabstop
#1702: FILE: kernel/obj_load.c:146:
+	  break;

WARNING:TABSTOP: Statements should start on a tabstop
#1709: FILE: kernel/obj_load.c:153:
+	  if (sec->header.sh_size > 0)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1709: FILE: kernel/obj_load.c:153:
+	  if (sec->header.sh_size > 0)
+	    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 14)
#1709: FILE: kernel/obj_load.c:153:
+	  if (sec->header.sh_size > 0)
+	    {

WARNING:TABSTOP: Statements should start on a tabstop
#1710: FILE: kernel/obj_load.c:154:
+	    {

WARNING:LONG_LINE: line length of 128 exceeds 100 columns
#1712: FILE: kernel/obj_load.c:156:
+	      if (memcpy_chk(modmem, modsize, sec->header.sh_offset, sec->contents, sec->header.sh_size) != sec->header.sh_size)

WARNING:TABSTOP: Statements should start on a tabstop
#1712: FILE: kernel/obj_load.c:156:
+	      if (memcpy_chk(modmem, modsize, sec->header.sh_offset, sec->contents, sec->header.sh_size) != sec->header.sh_size)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1712: FILE: kernel/obj_load.c:156:
+	      if (memcpy_chk(modmem, modsize, sec->header.sh_offset, sec->contents, sec->header.sh_size) != sec->header.sh_size)
+		{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (14, 18)
#1712: FILE: kernel/obj_load.c:156:
+	      if (memcpy_chk(modmem, modsize, sec->header.sh_offset, sec->contents, sec->header.sh_size) != sec->header.sh_size)
+		{

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1714: FILE: kernel/obj_load.c:158:
+		  printk(KERN_INFO "reading ELF section data %s: %m\n", filename);

WARNING:TABSTOP: Statements should start on a tabstop
#1716: FILE: kernel/obj_load.c:160:
+		  return NULL;

WARNING:TABSTOP: Statements should start on a tabstop
#1718: FILE: kernel/obj_load.c:162:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#1719: FILE: kernel/obj_load.c:163:
+	  else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#1719: FILE: kernel/obj_load.c:163:
+	  else
+	    sec->contents = NULL;

WARNING:TABSTOP: Statements should start on a tabstop
#1721: FILE: kernel/obj_load.c:165:
+	  break;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1724: FILE: kernel/obj_load.c:168:
+/*#if SHT_RELM == SHT_REL
+	case SHT_RELA:

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1739: FILE: kernel/obj_load.c:183:
+#endif*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1743: FILE: kernel/obj_load.c:187:
+/*	  if (sec->header.sh_type >= SHT_LOPROC)
+	    {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1747: FILE: kernel/obj_load.c:191:
+	    }*/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1749: FILE: kernel/obj_load.c:193:
+	  printk(KERN_INFO "can't handle sections of type %ld %s %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1750: FILE: kernel/obj_load.c:194:
+	  printk(KERN_INFO "can't handle sections of type %ld %s %d\n",
+		(long)sec->header.sh_type, filename,i);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1750: FILE: kernel/obj_load.c:194:
+		(long)sec->header.sh_type, filename,i);
 		                                   ^

WARNING:TABSTOP: Statements should start on a tabstop
#1752: FILE: kernel/obj_load.c:196:
+	  return NULL;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1754: FILE: kernel/obj_load.c:198:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1758: FILE: kernel/obj_load.c:202:
+  shstrtab = f->sections[f->header.e_shstrndx]->contents;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1760: FILE: kernel/obj_load.c:204:
+  for (i = 0; i < shnum; ++i)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1760: FILE: kernel/obj_load.c:204:
+  for (i = 0; i < shnum; ++i)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#1760: FILE: kernel/obj_load.c:204:
+  for (i = 0; i < shnum; ++i)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1761: FILE: kernel/obj_load.c:205:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1762: FILE: kernel/obj_load.c:206:
+      struct obj_section *sec = f->sections[i];$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1763: FILE: kernel/obj_load.c:207:
+      struct obj_section *sec = f->sections[i];
+      sec->name = shstrtab + sec->header.sh_name;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1763: FILE: kernel/obj_load.c:207:
+      sec->name = shstrtab + sec->header.sh_name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1764: FILE: kernel/obj_load.c:208:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1766: FILE: kernel/obj_load.c:210:
+  for (i = 0; i < shnum; ++i)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1766: FILE: kernel/obj_load.c:210:
+  for (i = 0; i < shnum; ++i)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#1766: FILE: kernel/obj_load.c:210:
+  for (i = 0; i < shnum; ++i)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1767: FILE: kernel/obj_load.c:211:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1768: FILE: kernel/obj_load.c:212:
+      struct obj_section *sec = f->sections[i];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1774: FILE: kernel/obj_load.c:218:
+      if (strcmp(sec->name, ".modinfo") == 0 ||$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1778: FILE: kernel/obj_load.c:222:
+      if (sec->header.sh_flags & SHF_ALLOC)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1781: FILE: kernel/obj_load.c:225:
+      switch (sec->header.sh_type)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1781: FILE: kernel/obj_load.c:225:
+      switch (sec->header.sh_type)
+	{

WARNING:TABSTOP: Statements should start on a tabstop
#1784: FILE: kernel/obj_load.c:228:
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#1786: FILE: kernel/obj_load.c:230:
+	    char *strtab;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1787: FILE: kernel/obj_load.c:231:
+	    char *strtab;
+	    ElfW(Sym) *sym;

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#1787: FILE: kernel/obj_load.c:231:
+	    ElfW(Sym) *sym;
 	              ^

WARNING:TABSTOP: Statements should start on a tabstop
#1789: FILE: kernel/obj_load.c:233:
+	    if (sec->header.sh_entsize != sizeof(ElfW(Sym)))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1789: FILE: kernel/obj_load.c:233:
+	    if (sec->header.sh_entsize != sizeof(ElfW(Sym)))
+	      {

WARNING:TABSTOP: Statements should start on a tabstop
#1790: FILE: kernel/obj_load.c:234:
+	      {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1791: FILE: kernel/obj_load.c:235:
+		printk(KERN_INFO "symbol size mismatch %s: %lu != %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1792: FILE: kernel/obj_load.c:236:
+		printk(KERN_INFO "symbol size mismatch %s: %lu != %lu\n",
+		      filename,

WARNING:TABSTOP: Statements should start on a tabstop
#1797: FILE: kernel/obj_load.c:241:
+	      }

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1804: FILE: kernel/obj_load.c:248:
+	    j = f->local_symtab_size = sec->header.sh_info;

WARNING:TABSTOP: Statements should start on a tabstop
#1809: FILE: kernel/obj_load.c:253:
+	    for (j = 1, ++sym; j < nsym; ++j, ++sym)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1809: FILE: kernel/obj_load.c:253:
+	    for (j = 1, ++sym; j < nsym; ++j, ++sym)
+	      {

WARNING:TABSTOP: Statements should start on a tabstop
#1810: FILE: kernel/obj_load.c:254:
+	      {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1812: FILE: kernel/obj_load.c:256:
+		const char *name;
+		if (sym->st_name)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#1812: FILE: kernel/obj_load.c:256:
+		if (sym->st_name)
+		  name = strtab+sym->st_name;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1813: FILE: kernel/obj_load.c:257:
+		  name = strtab+sym->st_name;
 		               ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#1814: FILE: kernel/obj_load.c:258:
+		else
+		  name = f->sections[sym->st_shndx]->name;

WARNING:TABSTOP: Statements should start on a tabstop
#1820: FILE: kernel/obj_load.c:264:
+	      }

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1820: FILE: kernel/obj_load.c:264:
+
+	      }

WARNING:TABSTOP: Statements should start on a tabstop
#1821: FILE: kernel/obj_load.c:265:
+	  }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1824: FILE: kernel/obj_load.c:268:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1827: FILE: kernel/obj_load.c:271:
+  for (i = 0; i < shnum; ++i)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1827: FILE: kernel/obj_load.c:271:
+  for (i = 0; i < shnum; ++i)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#1827: FILE: kernel/obj_load.c:271:
+  for (i = 0; i < shnum; ++i)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1828: FILE: kernel/obj_load.c:272:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1829: FILE: kernel/obj_load.c:273:
+      struct obj_section *sec = f->sections[i];$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1830: FILE: kernel/obj_load.c:274:
+      struct obj_section *sec = f->sections[i];
+      switch (sec->header.sh_type)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1830: FILE: kernel/obj_load.c:274:
+      switch (sec->header.sh_type)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1830: FILE: kernel/obj_load.c:274:
+      switch (sec->header.sh_type)
+	{

WARNING:TABSTOP: Statements should start on a tabstop
#1834: FILE: kernel/obj_load.c:278:
+	  {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1836: FILE: kernel/obj_load.c:280:
+	    unsigned long nrel, j, nsyms;
+	    ElfW(Rel) *rel;

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#1836: FILE: kernel/obj_load.c:280:
+	    ElfW(Rel) *rel;
 	              ^

WARNING:TABSTOP: Statements should start on a tabstop
#1837: FILE: kernel/obj_load.c:281:
+	    struct obj_section *symtab;

WARNING:TABSTOP: Statements should start on a tabstop
#1838: FILE: kernel/obj_load.c:282:
+	    char *strtab;

WARNING:TABSTOP: Statements should start on a tabstop
#1839: FILE: kernel/obj_load.c:283:
+	    if (sec->header.sh_entsize != sizeof(ElfW(Rel)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1839: FILE: kernel/obj_load.c:283:
+	    char *strtab;
+	    if (sec->header.sh_entsize != sizeof(ElfW(Rel)))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1839: FILE: kernel/obj_load.c:283:
+	    if (sec->header.sh_entsize != sizeof(ElfW(Rel)))
+	      {

WARNING:TABSTOP: Statements should start on a tabstop
#1840: FILE: kernel/obj_load.c:284:
+	      {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1841: FILE: kernel/obj_load.c:285:
+		printk(KERN_INFO "relocation entry size mismatch %s: %lu != %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1842: FILE: kernel/obj_load.c:286:
+		printk(KERN_INFO "relocation entry size mismatch %s: %lu != %lu\n",
+		      filename,

WARNING:TABSTOP: Statements should start on a tabstop
#1847: FILE: kernel/obj_load.c:291:
+	      }

WARNING:TABSTOP: Statements should start on a tabstop
#1856: FILE: kernel/obj_load.c:300:
+	    for (j = 0; j < nrel; ++j, ++rel)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1856: FILE: kernel/obj_load.c:300:
+	    for (j = 0; j < nrel; ++j, ++rel)
+	      {

WARNING:TABSTOP: Statements should start on a tabstop
#1857: FILE: kernel/obj_load.c:301:
+	      {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1860: FILE: kernel/obj_load.c:304:
+		unsigned long symndx;
+		symndx = ELFW(R_SYM)(rel->r_info);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1861: FILE: kernel/obj_load.c:305:
+		if (symndx)
+		  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#1861: FILE: kernel/obj_load.c:305:
+		if (symndx)
+		  {

WARNING:TABSTOP: Statements should start on a tabstop
#1862: FILE: kernel/obj_load.c:306:
+		  {

WARNING:TABSTOP: Statements should start on a tabstop
#1863: FILE: kernel/obj_load.c:307:
+		    if (symndx >= nsyms)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1863: FILE: kernel/obj_load.c:307:
+		    if (symndx >= nsyms)
+		      {

WARNING:TABSTOP: Statements should start on a tabstop
#1864: FILE: kernel/obj_load.c:308:
+		      {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1865: FILE: kernel/obj_load.c:309:
+			printk(KERN_INFO "%s: Bad symbol index: %08lx >= %08lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1866: FILE: kernel/obj_load.c:310:
+			printk(KERN_INFO "%s: Bad symbol index: %08lx >= %08lx\n",
+			      filename, symndx, nsyms);

WARNING:TABSTOP: Statements should start on a tabstop
#1868: FILE: kernel/obj_load.c:312:
+		      }

WARNING:TABSTOP: Statements should start on a tabstop
#1872: FILE: kernel/obj_load.c:316:
+		  }

WARNING:TABSTOP: Statements should start on a tabstop
#1873: FILE: kernel/obj_load.c:317:
+	      }

WARNING:TABSTOP: Statements should start on a tabstop
#1874: FILE: kernel/obj_load.c:318:
+	  }

WARNING:TABSTOP: Statements should start on a tabstop
#1875: FILE: kernel/obj_load.c:319:
+	  break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1877: FILE: kernel/obj_load.c:321:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1879: FILE: kernel/obj_load.c:323:
+  f->filename = kmalloc(strlen(filename), GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1880: FILE: kernel/obj_load.c:324:
+  strcpy((char *)f->filename,filename);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1880: FILE: kernel/obj_load.c:324:
+  strcpy((char *)f->filename,filename);
                             ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1882: FILE: kernel/obj_load.c:326:
+  return f;$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1896: FILE: kernel/obj_load.c:340:
+			if ((sec = f->sections[i]) != NULL) {

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1898: FILE: kernel/obj_load.c:342:
+				if (sec->contents)
+					kfree(sec->contents);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1913: FILE: kernel/obj_load.c:357:
+	if (f->local_symtab)
+		kfree(f->local_symtab);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1927: FILE: kernel/obj_reloc.c:1:
+/* Elf relocation routines.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1928: FILE: kernel/obj_reloc.c:2:
+/* Elf relocation routines.
+   Copyright 1996, 1997 Linux International.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1945: FILE: kernel/obj_reloc.c:19:
+   along with this program; if not, write to the Free Software Foundation,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1946: FILE: kernel/obj_reloc.c:20:
+   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#1948: FILE: kernel/obj_reloc.c:22:
+   Modified by Christian König (ChristianK.@t-online.de) to work inside the kernel*/
                           ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1948: FILE: kernel/obj_reloc.c:22:
+   Modified by Christian König (ChristianK.@t-online.de) to work inside the kernel*/

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#1950: FILE: kernel/obj_reloc.c:24:
+#ident "$Id: obj_reloc.c 1.4 Wed, 26 Sep 2001 14:50:45 +1000 kaos $"

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1964: FILE: kernel/obj_reloc.c:38:
+  struct obj_string_patch_struct *p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1965: FILE: kernel/obj_reloc.c:39:
+  struct obj_section *strsec;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1966: FILE: kernel/obj_reloc.c:40:
+  size_t len = strlen(string)+1;$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1966: FILE: kernel/obj_reloc.c:40:
+  size_t len = strlen(string)+1;
                              ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1967: FILE: kernel/obj_reloc.c:41:
+  char *loc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1969: FILE: kernel/obj_reloc.c:43:
+  p = kmalloc(sizeof(*p), GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1970: FILE: kernel/obj_reloc.c:44:
+  p->next = f->string_patches;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1971: FILE: kernel/obj_reloc.c:45:
+  p->reloc_secidx = secidx;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1972: FILE: kernel/obj_reloc.c:46:
+  p->reloc_offset = offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1973: FILE: kernel/obj_reloc.c:47:
+  f->string_patches = p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1975: FILE: kernel/obj_reloc.c:49:
+  strsec = obj_find_section(f, ".kstrtab");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1976: FILE: kernel/obj_reloc.c:50:
+  if (strsec == NULL)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1976: FILE: kernel/obj_reloc.c:50:
+  if (strsec == NULL)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#1976: FILE: kernel/obj_reloc.c:50:
+  if (strsec == NULL)
+    {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strsec"
#1976: FILE: kernel/obj_reloc.c:50:
+  if (strsec == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1977: FILE: kernel/obj_reloc.c:51:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1978: FILE: kernel/obj_reloc.c:52:
+      strsec = obj_create_alloced_section(f, ".kstrtab", 1, len, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1979: FILE: kernel/obj_reloc.c:53:
+      p->string_offset = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1980: FILE: kernel/obj_reloc.c:54:
+      loc = strsec->contents;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1981: FILE: kernel/obj_reloc.c:55:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1982: FILE: kernel/obj_reloc.c:56:
+  else$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1982: FILE: kernel/obj_reloc.c:56:
+  else
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#1982: FILE: kernel/obj_reloc.c:56:
+  else
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1983: FILE: kernel/obj_reloc.c:57:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1984: FILE: kernel/obj_reloc.c:58:
+      p->string_offset = strsec->header.sh_size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1985: FILE: kernel/obj_reloc.c:59:
+      loc = obj_extend_section(strsec, len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1986: FILE: kernel/obj_reloc.c:60:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1987: FILE: kernel/obj_reloc.c:61:
+  memcpy(loc, string, len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1989: FILE: kernel/obj_reloc.c:63:
+  return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1996: FILE: kernel/obj_reloc.c:70:
+  struct obj_symbol_patch_struct *p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1998: FILE: kernel/obj_reloc.c:72:
+  p = kmalloc(sizeof(*p), GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1999: FILE: kernel/obj_reloc.c:73:
+  p->next = f->symbol_patches;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2000: FILE: kernel/obj_reloc.c:74:
+  p->reloc_secidx = secidx;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2001: FILE: kernel/obj_reloc.c:75:
+  p->reloc_offset = offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2002: FILE: kernel/obj_reloc.c:76:
+  p->sym = sym;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2003: FILE: kernel/obj_reloc.c:77:
+  f->symbol_patches = p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2005: FILE: kernel/obj_reloc.c:79:
+  return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2011: FILE: kernel/obj_reloc.c:85:
+  unsigned long i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2012: FILE: kernel/obj_reloc.c:86:
+  int ret = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2014: FILE: kernel/obj_reloc.c:88:
+  for (i = 0; i < HASH_BUCKETS; ++i)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2014: FILE: kernel/obj_reloc.c:88:
+  for (i = 0; i < HASH_BUCKETS; ++i)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#2014: FILE: kernel/obj_reloc.c:88:
+  for (i = 0; i < HASH_BUCKETS; ++i)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2015: FILE: kernel/obj_reloc.c:89:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2016: FILE: kernel/obj_reloc.c:90:
+      struct obj_symbol *sym;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#2017: FILE: kernel/obj_reloc.c:91:
+      struct obj_symbol *sym;
+      for (sym = f->symtab[i]; sym ; sym = sym->next)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2017: FILE: kernel/obj_reloc.c:91:
+      for (sym = f->symtab[i]; sym ; sym = sym->next)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2018: FILE: kernel/obj_reloc.c:92:
+	if (sym->secidx == SHN_UNDEF)
+	  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#2018: FILE: kernel/obj_reloc.c:92:
+	if (sym->secidx == SHN_UNDEF)
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#2019: FILE: kernel/obj_reloc.c:93:
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#2020: FILE: kernel/obj_reloc.c:94:
+	    if (ELFW(ST_BIND)(sym->info) == STB_WEAK)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2020: FILE: kernel/obj_reloc.c:94:
+	    if (ELFW(ST_BIND)(sym->info) == STB_WEAK)
+	      {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sym->info'
#2020: FILE: kernel/obj_reloc.c:94:
+	    if (ELFW(ST_BIND)(sym->info) == STB_WEAK)

WARNING:TABSTOP: Statements should start on a tabstop
#2021: FILE: kernel/obj_reloc.c:95:
+	      {

WARNING:TABSTOP: Statements should start on a tabstop
#2024: FILE: kernel/obj_reloc.c:98:
+	      }

WARNING:TABSTOP: Statements should start on a tabstop
#2025: FILE: kernel/obj_reloc.c:99:
+	    else if (sym->r_type) /* assumes R_arch_NONE is 0 on all arch */

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2025: FILE: kernel/obj_reloc.c:99:
+	    else if (sym->r_type) /* assumes R_arch_NONE is 0 on all arch */
+	      {

WARNING:TABSTOP: Statements should start on a tabstop
#2026: FILE: kernel/obj_reloc.c:100:
+	      {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2028: FILE: kernel/obj_reloc.c:102:
+			printk(KERN_INFO "unresolved symbol %s", sym->name);

WARNING:TABSTOP: Statements should start on a tabstop
#2030: FILE: kernel/obj_reloc.c:104:
+	      }

WARNING:TABSTOP: Statements should start on a tabstop
#2031: FILE: kernel/obj_reloc.c:105:
+	  }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2032: FILE: kernel/obj_reloc.c:106:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2034: FILE: kernel/obj_reloc.c:108:
+  return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2040: FILE: kernel/obj_reloc.c:114:
+  unsigned long i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2041: FILE: kernel/obj_reloc.c:115:
+  struct obj_symbol *sym;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#2042: FILE: kernel/obj_reloc.c:116:
+  struct obj_symbol *sym;
+  for (i = 0; i < HASH_BUCKETS; ++i)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2042: FILE: kernel/obj_reloc.c:116:
+  for (i = 0; i < HASH_BUCKETS; ++i)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2042: FILE: kernel/obj_reloc.c:116:
+  for (i = 0; i < HASH_BUCKETS; ++i)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#2042: FILE: kernel/obj_reloc.c:116:
+  for (i = 0; i < HASH_BUCKETS; ++i)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2043: FILE: kernel/obj_reloc.c:117:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2044: FILE: kernel/obj_reloc.c:118:
+      for (sym = f->symtab[i]; sym ; sym = sym->next)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2045: FILE: kernel/obj_reloc.c:119:
+	if (sym->secidx == SHN_UNDEF)
+	  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#2045: FILE: kernel/obj_reloc.c:119:
+	if (sym->secidx == SHN_UNDEF)
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#2046: FILE: kernel/obj_reloc.c:120:
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#2049: FILE: kernel/obj_reloc.c:123:
+	  }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2050: FILE: kernel/obj_reloc.c:124:
+    }$

WARNING:LINE_SPACING: Missing a blank line after declarations
#2056: FILE: kernel/obj_reloc.c:130:
+	void *new;
+	new = kmalloc(size, GFP_KERNEL);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2065: FILE: kernel/obj_reloc.c:139:
+  struct common_entry$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2066: FILE: kernel/obj_reloc.c:140:
+  {$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2066: FILE: kernel/obj_reloc.c:140:
+  struct common_entry
+  {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2067: FILE: kernel/obj_reloc.c:141:
+    struct common_entry *next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2068: FILE: kernel/obj_reloc.c:142:
+    struct obj_symbol *sym;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2069: FILE: kernel/obj_reloc.c:143:
+  } *common_head = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2071: FILE: kernel/obj_reloc.c:145:
+  unsigned long i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2073: FILE: kernel/obj_reloc.c:147:
+  for (i = 0; i < HASH_BUCKETS; ++i)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2073: FILE: kernel/obj_reloc.c:147:
+  for (i = 0; i < HASH_BUCKETS; ++i)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#2073: FILE: kernel/obj_reloc.c:147:
+  for (i = 0; i < HASH_BUCKETS; ++i)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2074: FILE: kernel/obj_reloc.c:148:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2075: FILE: kernel/obj_reloc.c:149:
+      struct obj_symbol *sym;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#2076: FILE: kernel/obj_reloc.c:150:
+      struct obj_symbol *sym;
+      for (sym = f->symtab[i]; sym ; sym = sym->next)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2076: FILE: kernel/obj_reloc.c:150:
+      for (sym = f->symtab[i]; sym ; sym = sym->next)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2077: FILE: kernel/obj_reloc.c:151:
+	if (sym->secidx == SHN_COMMON)
+	  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#2077: FILE: kernel/obj_reloc.c:151:
+	if (sym->secidx == SHN_COMMON)
[...]
+	       minimize space wasted by alignment requirements.  */

WARNING:TABSTOP: Statements should start on a tabstop
#2078: FILE: kernel/obj_reloc.c:152:
+	  {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2080: FILE: kernel/obj_reloc.c:154:
+	    /* Collect all COMMON symbols and sort them by size so as to
+	       minimize space wasted by alignment requirements.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2080: FILE: kernel/obj_reloc.c:154:
+	       minimize space wasted by alignment requirements.  */

WARNING:TABSTOP: Statements should start on a tabstop
#2081: FILE: kernel/obj_reloc.c:155:
+	    {

WARNING:TABSTOP: Statements should start on a tabstop
#2083: FILE: kernel/obj_reloc.c:157:
+	      for (p = &common_head; *p ; p = &(*p)->next)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2083: FILE: kernel/obj_reloc.c:157:
+	      struct common_entry **p, *n;
+	      for (p = &common_head; *p ; p = &(*p)->next)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#2084: FILE: kernel/obj_reloc.c:158:
+		if (sym->size <= (*p)->sym->size)
+		  break;

WARNING:TABSTOP: Statements should start on a tabstop
#2085: FILE: kernel/obj_reloc.c:159:
+		  break;

WARNING:TABSTOP: Statements should start on a tabstop
#2091: FILE: kernel/obj_reloc.c:165:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#2092: FILE: kernel/obj_reloc.c:166:
+	  }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2093: FILE: kernel/obj_reloc.c:167:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2095: FILE: kernel/obj_reloc.c:169:
+  for (i = 1; i < f->local_symtab_size; ++i)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2095: FILE: kernel/obj_reloc.c:169:
+  for (i = 1; i < f->local_symtab_size; ++i)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#2095: FILE: kernel/obj_reloc.c:169:
+  for (i = 1; i < f->local_symtab_size; ++i)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2096: FILE: kernel/obj_reloc.c:170:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2097: FILE: kernel/obj_reloc.c:171:
+      struct obj_symbol *sym = f->local_symtab[i];$

WARNING:LINE_SPACING: Missing a blank line after declarations
#2098: FILE: kernel/obj_reloc.c:172:
+      struct obj_symbol *sym = f->local_symtab[i];
+      if (sym && sym->secidx == SHN_COMMON)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2098: FILE: kernel/obj_reloc.c:172:
+      if (sym && sym->secidx == SHN_COMMON)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2098: FILE: kernel/obj_reloc.c:172:
+      if (sym && sym->secidx == SHN_COMMON)
+	{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#2098: FILE: kernel/obj_reloc.c:172:
+      if (sym && sym->secidx == SHN_COMMON)
+	{

WARNING:TABSTOP: Statements should start on a tabstop
#2101: FILE: kernel/obj_reloc.c:175:
+	  for (p = &common_head; *p ; p = &(*p)->next)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2101: FILE: kernel/obj_reloc.c:175:
+	  struct common_entry **p, *n;
+	  for (p = &common_head; *p ; p = &(*p)->next)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#2101: FILE: kernel/obj_reloc.c:175:
+	  for (p = &common_head; *p ; p = &(*p)->next)
+	    if (sym == (*p)->sym)

WARNING:TABSTOP: Statements should start on a tabstop
#2102: FILE: kernel/obj_reloc.c:176:
+	    if (sym == (*p)->sym)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#2102: FILE: kernel/obj_reloc.c:176:
+	    if (sym == (*p)->sym)
+	      break;

WARNING:TABSTOP: Statements should start on a tabstop
#2103: FILE: kernel/obj_reloc.c:177:
+	      break;

WARNING:TABSTOP: Statements should start on a tabstop
#2104: FILE: kernel/obj_reloc.c:178:
+	    else if (sym->size < (*p)->sym->size)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2104: FILE: kernel/obj_reloc.c:178:
+	    else if (sym->size < (*p)->sym->size)
+	      {

WARNING:TABSTOP: Statements should start on a tabstop
#2105: FILE: kernel/obj_reloc.c:179:
+	      {

WARNING:TABSTOP: Statements should start on a tabstop
#2111: FILE: kernel/obj_reloc.c:185:
+	      }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2113: FILE: kernel/obj_reloc.c:187:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2115: FILE: kernel/obj_reloc.c:189:
+  if (common_head)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2115: FILE: kernel/obj_reloc.c:189:
+  if (common_head)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#2115: FILE: kernel/obj_reloc.c:189:
+  if (common_head)
[...]
+      /* Find the bss section.  */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2116: FILE: kernel/obj_reloc.c:190:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2118: FILE: kernel/obj_reloc.c:192:
+      for (i = 0; i < f->header.e_shnum; ++i)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#2119: FILE: kernel/obj_reloc.c:193:
+	if (f->sections[i]->header.sh_type == SHT_NOBITS)
+	  break;

WARNING:TABSTOP: Statements should start on a tabstop
#2120: FILE: kernel/obj_reloc.c:194:
+	  break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2123: FILE: kernel/obj_reloc.c:197:
+      if (i == f->header.e_shnum)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2123: FILE: kernel/obj_reloc.c:197:
+      if (i == f->header.e_shnum)
+	{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#2123: FILE: kernel/obj_reloc.c:197:
+      if (i == f->header.e_shnum)
+	{

WARNING:TABSTOP: Statements should start on a tabstop
#2125: FILE: kernel/obj_reloc.c:199:
+	  struct obj_section *sec;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2127: FILE: kernel/obj_reloc.c:201:
+	  f->sections = realloc(f->sections, (i+1) * sizeof(sec), i * sizeof(sec));
 	                                       ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2128: FILE: kernel/obj_reloc.c:202:
+	  f->sections[i] = sec = arch_new_section();

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2129: FILE: kernel/obj_reloc.c:203:
+	  f->header.e_shnum = i+1;
 	                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2133: FILE: kernel/obj_reloc.c:207:
+	  sec->header.sh_flags = SHF_WRITE|SHF_ALLOC;
 	                                  ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2139: FILE: kernel/obj_reloc.c:213:
+      {$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2144: FILE: kernel/obj_reloc.c:218:
+	for (c = common_head; c ; c = c->next)
+	  {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#2144: FILE: kernel/obj_reloc.c:218:
+	for (c = common_head; c ; c = c->next)
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#2145: FILE: kernel/obj_reloc.c:219:
+	  {

WARNING:TABSTOP: Statements should start on a tabstop
#2148: FILE: kernel/obj_reloc.c:222:
+	    if (align > max_align)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#2148: FILE: kernel/obj_reloc.c:222:
+	    if (align > max_align)
+	      max_align = align;

WARNING:TABSTOP: Statements should start on a tabstop
#2150: FILE: kernel/obj_reloc.c:224:
+	    if (bss_size & (align - 1))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 14)
#2150: FILE: kernel/obj_reloc.c:224:
+	    if (bss_size & (align - 1))
+	      bss_size = (bss_size | (align - 1)) + 1;

WARNING:TABSTOP: Statements should start on a tabstop
#2157: FILE: kernel/obj_reloc.c:231:
+	  }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2161: FILE: kernel/obj_reloc.c:235:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2162: FILE: kernel/obj_reloc.c:236:
+    }$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2165: FILE: kernel/obj_reloc.c:239:
+  /* For the sake of patch relocation and parameter initialization,
+     allocate zeroed data for NOBITS sections now.  Note that after

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2166: FILE: kernel/obj_reloc.c:240:
+     this we cannot assume NOBITS are really empty.  */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2167: FILE: kernel/obj_reloc.c:241:
+  for (i = 0; i < f->header.e_shnum; ++i)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2167: FILE: kernel/obj_reloc.c:241:
+  for (i = 0; i < f->header.e_shnum; ++i)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#2167: FILE: kernel/obj_reloc.c:241:
+  for (i = 0; i < f->header.e_shnum; ++i)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2168: FILE: kernel/obj_reloc.c:242:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2169: FILE: kernel/obj_reloc.c:243:
+      struct obj_section *s = f->sections[i];$

WARNING:LINE_SPACING: Missing a blank line after declarations
#2170: FILE: kernel/obj_reloc.c:244:
+      struct obj_section *s = f->sections[i];
+      if (s->header.sh_type == SHT_NOBITS)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2170: FILE: kernel/obj_reloc.c:244:
+      if (s->header.sh_type == SHT_NOBITS)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2170: FILE: kernel/obj_reloc.c:244:
+      if (s->header.sh_type == SHT_NOBITS)
+	{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#2170: FILE: kernel/obj_reloc.c:244:
+      if (s->header.sh_type == SHT_NOBITS)
+	{

WARNING:TABSTOP: Statements should start on a tabstop
#2172: FILE: kernel/obj_reloc.c:246:
+	  if (s->header.sh_size)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#2172: FILE: kernel/obj_reloc.c:246:
+	  if (s->header.sh_size)
+	    s->contents = memset(kmalloc(s->header.sh_size, GFP_KERNEL),

WARNING:TABSTOP: Statements should start on a tabstop
#2175: FILE: kernel/obj_reloc.c:249:
+	  else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#2175: FILE: kernel/obj_reloc.c:249:
+	  else
+	    s->contents = NULL;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2179: FILE: kernel/obj_reloc.c:253:
+    }$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2183: FILE: kernel/obj_reloc.c:257:
+obj_load_size (struct obj_file *f)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2185: FILE: kernel/obj_reloc.c:259:
+  unsigned long dot = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2186: FILE: kernel/obj_reloc.c:260:
+  struct obj_section *sec;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2190: FILE: kernel/obj_reloc.c:264:
+  for (sec = f->load_order; sec ; sec = sec->load_next)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2190: FILE: kernel/obj_reloc.c:264:
+  for (sec = f->load_order; sec ; sec = sec->load_next)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#2190: FILE: kernel/obj_reloc.c:264:
+  for (sec = f->load_order; sec ; sec = sec->load_next)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2191: FILE: kernel/obj_reloc.c:265:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2192: FILE: kernel/obj_reloc.c:266:
+      ElfW(Addr) align;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2194: FILE: kernel/obj_reloc.c:268:
+      align = sec->header.sh_addralign;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2195: FILE: kernel/obj_reloc.c:269:
+      if (align && (dot & (align - 1)))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2198: FILE: kernel/obj_reloc.c:272:
+      sec->header.sh_addr = dot;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2199: FILE: kernel/obj_reloc.c:273:
+      dot += sec->header.sh_size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2200: FILE: kernel/obj_reloc.c:274:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2202: FILE: kernel/obj_reloc.c:276:
+  return dot;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2206: FILE: kernel/obj_reloc.c:280:
+obj_relocate (struct obj_file *f, ElfW(Addr) base)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2208: FILE: kernel/obj_reloc.c:282:
+  int i, n = f->header.e_shnum;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2209: FILE: kernel/obj_reloc.c:283:
+  int ret = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2213: FILE: kernel/obj_reloc.c:287:
+  arch_finalize_section_address(f, base);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2217: FILE: kernel/obj_reloc.c:291:
+  for (i = 0; i < n; ++i)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2217: FILE: kernel/obj_reloc.c:291:
+  for (i = 0; i < n; ++i)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#2217: FILE: kernel/obj_reloc.c:291:
+  for (i = 0; i < n; ++i)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2218: FILE: kernel/obj_reloc.c:292:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2219: FILE: kernel/obj_reloc.c:293:
+      struct obj_section *relsec, *symsec, *targsec, *strsec;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#2220: FILE: kernel/obj_reloc.c:294:
+      struct obj_section *relsec, *symsec, *targsec, *strsec;
+      ElfW(Rel) *rel, *relend;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2220: FILE: kernel/obj_reloc.c:294:
+      ElfW(Rel) *rel, *relend;$

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#2220: FILE: kernel/obj_reloc.c:294:
+      ElfW(Rel) *rel, *relend;
                 ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2221: FILE: kernel/obj_reloc.c:295:
+      ElfW(Sym) *symtab;$

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#2221: FILE: kernel/obj_reloc.c:295:
+      ElfW(Sym) *symtab;
                 ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2222: FILE: kernel/obj_reloc.c:296:
+      const char *strtab;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2223: FILE: kernel/obj_reloc.c:297:
+      unsigned long nsyms;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2225: FILE: kernel/obj_reloc.c:299:
+      relsec = f->sections[i];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2226: FILE: kernel/obj_reloc.c:300:
+      if (relsec->header.sh_type != SHT_REL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2229: FILE: kernel/obj_reloc.c:303:
+      symsec = f->sections[relsec->header.sh_link];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2230: FILE: kernel/obj_reloc.c:304:
+      targsec = f->sections[relsec->header.sh_info];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2231: FILE: kernel/obj_reloc.c:305:
+      strsec = f->sections[symsec->header.sh_link];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2233: FILE: kernel/obj_reloc.c:307:
+      if (!(targsec->header.sh_flags & SHF_ALLOC))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2236: FILE: kernel/obj_reloc.c:310:
+      rel = (ElfW(Rel) *)relsec->contents;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2237: FILE: kernel/obj_reloc.c:311:
+      relend = rel + (relsec->header.sh_size / sizeof(ElfW(Rel)));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2238: FILE: kernel/obj_reloc.c:312:
+      symtab = (ElfW(Sym) *)symsec->contents;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2239: FILE: kernel/obj_reloc.c:313:
+      nsyms = symsec->header.sh_size / symsec->header.sh_entsize;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2240: FILE: kernel/obj_reloc.c:314:
+      strtab = (const char *)strsec->contents;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2242: FILE: kernel/obj_reloc.c:316:
+      for (; rel < relend; ++rel)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2242: FILE: kernel/obj_reloc.c:316:
+      for (; rel < relend; ++rel)
+	{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#2242: FILE: kernel/obj_reloc.c:316:
+      for (; rel < relend; ++rel)
+	{

WARNING:TABSTOP: Statements should start on a tabstop
#2245: FILE: kernel/obj_reloc.c:319:
+	  struct obj_symbol *intsym = NULL;

WARNING:TABSTOP: Statements should start on a tabstop
#2246: FILE: kernel/obj_reloc.c:320:
+	  unsigned long symndx;

WARNING:TABSTOP: Statements should start on a tabstop
#2247: FILE: kernel/obj_reloc.c:321:
+	  const char *errmsg;

WARNING:TABSTOP: Statements should start on a tabstop
#2252: FILE: kernel/obj_reloc.c:326:
+	  if (symndx)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2252: FILE: kernel/obj_reloc.c:326:
+	  if (symndx)
+	    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 14)
#2252: FILE: kernel/obj_reloc.c:326:
+	  if (symndx)
[...]
+

WARNING:TABSTOP: Statements should start on a tabstop
#2253: FILE: kernel/obj_reloc.c:327:
+	    {

WARNING:TABSTOP: Statements should start on a tabstop
#2256: FILE: kernel/obj_reloc.c:330:
+	      if (symndx >= nsyms)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2256: FILE: kernel/obj_reloc.c:330:
+	      if (symndx >= nsyms)
+		{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (14, 18)
#2256: FILE: kernel/obj_reloc.c:330:
+	      if (symndx >= nsyms)
+		{

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2258: FILE: kernel/obj_reloc.c:332:
+		  printk(KERN_INFO "Bad symbol index: %08lx >= %08lx",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2259: FILE: kernel/obj_reloc.c:333:
+		  printk(KERN_INFO "Bad symbol index: %08lx >= %08lx",
+			symndx, nsyms);

WARNING:TABSTOP: Statements should start on a tabstop
#2260: FILE: kernel/obj_reloc.c:334:
+		  continue;

WARNING:TABSTOP: Statements should start on a tabstop
#2265: FILE: kernel/obj_reloc.c:339:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#2272: FILE: kernel/obj_reloc.c:346:
+	  switch (arch_apply_relocation(f,targsec,symsec,intsym,rel,value))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2272: FILE: kernel/obj_reloc.c:346:
+	  switch (arch_apply_relocation(f,targsec,symsec,intsym,rel,value))
+	    {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2272: FILE: kernel/obj_reloc.c:346:
+	  switch (arch_apply_relocation(f,targsec,symsec,intsym,rel,value))
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2272: FILE: kernel/obj_reloc.c:346:
+	  switch (arch_apply_relocation(f,targsec,symsec,intsym,rel,value))
 	                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2272: FILE: kernel/obj_reloc.c:346:
+	  switch (arch_apply_relocation(f,targsec,symsec,intsym,rel,value))
 	                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2272: FILE: kernel/obj_reloc.c:346:
+	  switch (arch_apply_relocation(f,targsec,symsec,intsym,rel,value))
 	                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2272: FILE: kernel/obj_reloc.c:346:
+	  switch (arch_apply_relocation(f,targsec,symsec,intsym,rel,value))
 	                                                           ^

WARNING:TABSTOP: Statements should start on a tabstop
#2273: FILE: kernel/obj_reloc.c:347:
+	    {

WARNING:TABSTOP: Statements should start on a tabstop
#2274: FILE: kernel/obj_reloc.c:348:
+	    case obj_reloc_ok:

WARNING:TABSTOP: Statements should start on a tabstop
#2275: FILE: kernel/obj_reloc.c:349:
+	      break;

WARNING:TABSTOP: Statements should start on a tabstop
#2277: FILE: kernel/obj_reloc.c:351:
+	    case obj_reloc_overflow:

WARNING:TABSTOP: Statements should start on a tabstop
#2279: FILE: kernel/obj_reloc.c:353:
+	      goto bad_reloc;

WARNING:TABSTOP: Statements should start on a tabstop
#2280: FILE: kernel/obj_reloc.c:354:
+	    case obj_reloc_dangerous:

WARNING:TABSTOP: Statements should start on a tabstop
#2282: FILE: kernel/obj_reloc.c:356:
+	      goto bad_reloc;

WARNING:TABSTOP: Statements should start on a tabstop
#2283: FILE: kernel/obj_reloc.c:357:
+	    case obj_reloc_unhandled:

WARNING:TABSTOP: Statements should start on a tabstop
#2285: FILE: kernel/obj_reloc.c:359:
+	      goto bad_reloc;

WARNING:TABSTOP: Statements should start on a tabstop
#2286: FILE: kernel/obj_reloc.c:360:
+	    case obj_reloc_constant_gp:

WARNING:TABSTOP: Statements should start on a tabstop
#2288: FILE: kernel/obj_reloc.c:362:
+	      goto bad_reloc;

WARNING:INDENTED_LABEL: labels should not be indented
#2289: FILE: kernel/obj_reloc.c:363:
+	    bad_reloc:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2290: FILE: kernel/obj_reloc.c:364:
+	      printk(KERN_INFO "%s of type %ld for %s", errmsg,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2291: FILE: kernel/obj_reloc.c:365:
+	      printk(KERN_INFO "%s of type %ld for %s", errmsg,
+		    (long)ELFW(R_TYPE)(rel->r_info), intsym->name);

WARNING:TABSTOP: Statements should start on a tabstop
#2293: FILE: kernel/obj_reloc.c:367:
+	      break;

WARNING:TABSTOP: Statements should start on a tabstop
#2294: FILE: kernel/obj_reloc.c:368:
+	    }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2296: FILE: kernel/obj_reloc.c:370:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2300: FILE: kernel/obj_reloc.c:374:
+  if (f->string_patches)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2300: FILE: kernel/obj_reloc.c:374:
+  if (f->string_patches)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#2300: FILE: kernel/obj_reloc.c:374:
+  if (f->string_patches)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2301: FILE: kernel/obj_reloc.c:375:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2302: FILE: kernel/obj_reloc.c:376:
+      struct obj_string_patch_struct *p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2303: FILE: kernel/obj_reloc.c:377:
+      struct obj_section *strsec;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#2304: FILE: kernel/obj_reloc.c:378:
+      struct obj_section *strsec;
+      ElfW(Addr) strsec_base;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2304: FILE: kernel/obj_reloc.c:378:
+      ElfW(Addr) strsec_base;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2305: FILE: kernel/obj_reloc.c:379:
+      strsec = obj_find_section(f, ".kstrtab");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2306: FILE: kernel/obj_reloc.c:380:
+      strsec_base = strsec->header.sh_addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2308: FILE: kernel/obj_reloc.c:382:
+      for (p = f->string_patches; p ; p = p->next)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2308: FILE: kernel/obj_reloc.c:382:
+      for (p = f->string_patches; p ; p = p->next)
+	{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#2308: FILE: kernel/obj_reloc.c:382:
+      for (p = f->string_patches; p ; p = p->next)
+	{

WARNING:TABSTOP: Statements should start on a tabstop
#2310: FILE: kernel/obj_reloc.c:384:
+	  struct obj_section *targsec = f->sections[p->reloc_secidx];

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#2312: FILE: kernel/obj_reloc.c:386:
+	  *(ElfW(Addr) *)(targsec->contents + p->reloc_offset)
+	    = strsec_base + p->string_offset;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2314: FILE: kernel/obj_reloc.c:388:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2316: FILE: kernel/obj_reloc.c:390:
+  if (f->symbol_patches)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2316: FILE: kernel/obj_reloc.c:390:
+  if (f->symbol_patches)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#2316: FILE: kernel/obj_reloc.c:390:
+  if (f->symbol_patches)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2317: FILE: kernel/obj_reloc.c:391:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2318: FILE: kernel/obj_reloc.c:392:
+      struct obj_symbol_patch_struct *p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2320: FILE: kernel/obj_reloc.c:394:
+      for (p = f->symbol_patches; p; p = p->next)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2320: FILE: kernel/obj_reloc.c:394:
+      for (p = f->symbol_patches; p; p = p->next)
+	{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#2320: FILE: kernel/obj_reloc.c:394:
+      for (p = f->symbol_patches; p; p = p->next)
+	{

WARNING:TABSTOP: Statements should start on a tabstop
#2322: FILE: kernel/obj_reloc.c:396:
+	  struct obj_section *targsec = f->sections[p->reloc_secidx];

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#2324: FILE: kernel/obj_reloc.c:398:
+	  *(ElfW(Addr) *)(targsec->contents + p->reloc_offset)
+	    = obj_symbol_final_value(f, p->sym);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2326: FILE: kernel/obj_reloc.c:400:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2328: FILE: kernel/obj_reloc.c:402:
+  return ret;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2332: FILE: kernel/obj_reloc.c:406:
+obj_create_image (struct obj_file *f, char *image)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2334: FILE: kernel/obj_reloc.c:408:
+  struct obj_section *sec;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#2335: FILE: kernel/obj_reloc.c:409:
+  struct obj_section *sec;
+  ElfW(Addr) base = f->baseaddr;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2335: FILE: kernel/obj_reloc.c:409:
+  ElfW(Addr) base = f->baseaddr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2337: FILE: kernel/obj_reloc.c:411:
+  for (sec = f->load_order; sec ; sec = sec->load_next)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2337: FILE: kernel/obj_reloc.c:411:
+  for (sec = f->load_order; sec ; sec = sec->load_next)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#2337: FILE: kernel/obj_reloc.c:411:
+  for (sec = f->load_order; sec ; sec = sec->load_next)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2338: FILE: kernel/obj_reloc.c:412:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2339: FILE: kernel/obj_reloc.c:413:
+      char *secimg;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2341: FILE: kernel/obj_reloc.c:415:
+      if (sec->contents == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2344: FILE: kernel/obj_reloc.c:418:
+      secimg = image + (sec->header.sh_addr - base);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2347: FILE: kernel/obj_reloc.c:421:
+      memcpy(secimg, sec->contents, sec->header.sh_size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2348: FILE: kernel/obj_reloc.c:422:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2350: FILE: kernel/obj_reloc.c:424:
+  return 1;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000493477.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 137 errors, 902 warnings, 108 checks, 2261 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000493477.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
