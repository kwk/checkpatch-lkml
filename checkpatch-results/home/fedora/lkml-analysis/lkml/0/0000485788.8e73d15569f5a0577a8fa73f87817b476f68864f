WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#23: 
included are unlikely() optimizations for less straightforward if() {blah(); 

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#40: FILE: fs//attr.c:121:
+	BUG_ON(!inode);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#73: FILE: fs//block_dev.c:379:
+		BUG_ON(bdev->bd_openers);

CHECK:BRACES: Unbalanced braces around else statement
#84: FILE: fs//block_dev.c:409:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#85: FILE: fs//block_dev.c:410:
+		BUG_ON(inode->i_bdev != bdev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#101: FILE: fs//buffer.c:508:
+	BUG_ON(bh->b_prev_free || bh->b_next_free);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#111: FILE: fs//buffer.c:695:
+			BUG_ON(!buffer_mapped(bh));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#122: FILE: fs//buffer.c:1199:
+	BUG_ON(bh->b_inode);

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#129: FILE: fs//buffer.c:1270:
offset)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#134: FILE: fs//buffer.c:1273:
+	BUG_ON(offset >= PAGE_SIZE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#145: FILE: fs//buffer.c:1385:
+	BUG_ON(!PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#155: FILE: fs//buffer.c:1414:
+	BUG_ON(!PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#166: FILE: fs//buffer.c:1458:
+	BUG_ON(page->buffers);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#176: FILE: fs//buffer.c:1519:
+	BUG_ON(!PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#186: FILE: fs//buffer.c:1597:
+		BUG_ON(!bh);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#196: FILE: fs//buffer.c:2023:
+			BUG_ON(buffer_new(&bh));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#206: FILE: fs//buffer.c:2032:
+			BUG_ON(!buffer_mapped(&bh));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#216: FILE: fs//buffer.c:2208:
+	BUG_ON(!PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#226: FILE: fs//buffer.c:2271:
+	BUG_ON(size & (get_hardsect_size(dev)-1));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#226: FILE: fs//buffer.c:2271:
+	BUG_ON(size & (get_hardsect_size(dev)-1));
 	                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#230: FILE: fs//buffer.c:2273:
+	BUG_ON(size < 512 || size > PAGE_SIZE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#248: FILE: fs//buffer.c:2389:
+		BUG_ON(kdev_same(p->b_dev, B_FREE));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#264: FILE: fs//dcache.c:35:
+#define check_lock()	BUG_ON(!kernel_locked())

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#274: FILE: fs//dcache.c:128:
+	BUG_ON(!list_empty(&dentry->d_lru));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#284: FILE: fs//dcache.c:343:
+		BUG_ON(atomic_read(&dentry->d_count));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#293: FILE: fs//dcache.c:652:
+	BUG_ON(!list_empty(&entry->d_alias));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#302: FILE: fs//dcache.c:835:
+	BUG_ON(!list_empty(&entry->d_hash));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#319: FILE: fs//dquot.c:1213:
+		BUG_ON(inode->i_dquot[cnt] == NODQUOT);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#337: FILE: fs//exec.c:427:
+			BUG_ON(active_mm != old_mm);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#354: FILE: fs//fcntl.c:416:
+			BUG_ON((reason & __SI_MASK) != __SI_POLL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#372: FILE: fs//inode.c:82:
+	BUG_ON(inode_has_buffers(inode));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#382: FILE: fs//inode.c:214:
+	BUG_ON(inode->i_state & I_LOCK);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#396: FILE: fs//inode.c:510:
+	BUG_ON(inode->i_data.nrpages);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#397: FILE: fs//inode.c:511:
+	BUG_ON(!(inode->i_state & I_FREEING));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#398: FILE: fs//inode.c:512:
+	BUG_ON(inode->i_state & I_CLEAR);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#408: FILE: fs//inode.c:1039:
+		BUG_ON(inode->i_state == I_CLEAR);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#418: FILE: fs//inode.c:1069:
+			BUG_ON(inode->i_state != I_CLEAR);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fl"
#434: FILE: fs//locks.c:151:
+	if (unlikely(fl == NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#451: FILE: fs//pipe.c:119:
+		BUG_ON(!PIPE_EMPTY(*inode));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#469: FILE: fs//affs/file.c:220:
+		BUG_ON(ext > AFFS_INODE->i_extcnt);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#479: FILE: fs//affs/file.c:237:
+		BUG_ON(ext > AFFS_INODE->i_extcnt);

ERROR:CODE_INDENT: code indent should use tabs where possible
#495: FILE: fs//coda/cache.c:54:
+        BUG_ON(!sbi);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#495: FILE: fs//coda/cache.c:54:
+        BUG_ON(!sbi);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#495: FILE: fs//coda/cache.c:54:
+        BUG_ON(!sbi);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#511: FILE: fs//coda/cnode.c:87:
+	BUG_ON(!coda_fideq(fid, &cii->c_fid));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#521: FILE: fs//coda/cnode.c:135:
+	BUG_ON(!coda_fideq(&cii->c_fid, oldfid));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#530: FILE: fs//coda/cnode.c:177:
+	BUG_ON( !coda_fideq(fid, &cii->c_fid) );

ERROR:SPACING: space prohibited after that open parenthesis '('
#530: FILE: fs//coda/cnode.c:177:
+	BUG_ON( !coda_fideq(fid, &cii->c_fid) );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#530: FILE: fs//coda/cnode.c:177:
+	BUG_ON( !coda_fideq(fid, &cii->c_fid) );

ERROR:CODE_INDENT: code indent should use tabs where possible
#546: FILE: fs//coda/dir.c:505:
+        BUG_ON(!cfile);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#546: FILE: fs//coda/dir.c:505:
+        BUG_ON(!cfile);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#546: FILE: fs//coda/dir.c:505:
+        BUG_ON(!cfile);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#562: FILE: fs//coda/file.c:40:
+	BUG_ON(!cfile);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#571: FILE: fs//coda/file.c:58:
+	BUG_ON(!cfile);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#580: FILE: fs//coda/file.c:86:
+	BUG_ON(!cfile);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#589: FILE: fs//coda/file.c:173:
+	BUG_ON(!cfile);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#598: FILE: fs//coda/file.c:215:
+	BUG_ON(!cfile);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#607: FILE: fs//coda/file.c:248:
+	BUG_ON(!cfile);

ERROR:CODE_INDENT: code indent should use tabs where possible
#623: FILE: fs//coda/inode.c:189:
+        BUG_ON(!sbi);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#623: FILE: fs//coda/inode.c:189:
+        BUG_ON(!sbi);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#623: FILE: fs//coda/inode.c:189:
+        BUG_ON(!sbi);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#632: FILE: fs//coda/inode.c:224:
+	BUG_ON(cii->c_container);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#648: FILE: fs//devfs/base.c:886:
+    if (unlikely(de->info == POISON_PTR)) OOPS ("(%p): poisoned pointer\n", $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#648: FILE: fs//devfs/base.c:886:
+    if (unlikely(de->info == POISON_PTR)) OOPS ("(%p): poisoned pointer\n", $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#648: FILE: fs//devfs/base.c:886:
+    if (unlikely(de->info == POISON_PTR)) OOPS ("(%p): poisoned pointer\n", 

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#648: FILE: fs//devfs/base.c:886:
+    if (unlikely(de->info == POISON_PTR)) OOPS ("(%p): poisoned pointer\n", 

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#650: FILE: fs//devfs/base.c:887:
+    if (unlikely(de->info == POISON_PTR)) OOPS ("(%p): poisoned pointer\n", 
     if ( !atomic_dec_and_test (&de->refcount) ) return;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#652: FILE: fs//devfs/base.c:888:
+    if (unlikely(de == root_entry)) OOPS ("(%p): root entry being freed\n", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#652: FILE: fs//devfs/base.c:888:
+    if (unlikely(de == root_entry)) OOPS ("(%p): root entry being freed\n", $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#652: FILE: fs//devfs/base.c:888:
+    if (unlikely(de == root_entry)) OOPS ("(%p): root entry being freed\n", 

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#652: FILE: fs//devfs/base.c:888:
+    if (unlikely(de == root_entry)) OOPS ("(%p): root entry being freed\n", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#654: FILE: fs//devfs/base.c:889:
+    if (unlikely(de == root_entry)) OOPS ("(%p): root entry being freed\n", 
     DPRINTK (DEBUG_FREE, "(%s): de: %p, parent: %p \"%s\"\n",

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#663: FILE: fs//devfs/base.c:2799:
+    if (unlikely(de->inode.dentry && (de->inode.dentry != dentry) ))$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#672: FILE: fs//devfs/base.c:3436:
+    if (unlikely(!devfsd_buf_cache)) OOPS ("(): unable to allocate event $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#672: FILE: fs//devfs/base.c:3436:
+    if (unlikely(!devfsd_buf_cache)) OOPS ("(): unable to allocate event $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#672: FILE: fs//devfs/base.c:3436:
+    if (unlikely(!devfsd_buf_cache)) OOPS ("(): unable to allocate event 

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#672: FILE: fs//devfs/base.c:3436:
+    if (unlikely(!devfsd_buf_cache)) OOPS ("(): unable to allocate event 

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#690: FILE: fs//ext2/dir.c:380:
+	BUG_ON(err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#700: FILE: fs//ext2/dir.c:486:
+	BUG_ON(err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#717: FILE: fs//ext3/super.c:1554:
+	BUG_ON(down_trylock(&sb->s_lock) == 0);/* aviro detector */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#734: FILE: fs//fat/file.c:63:
+^Iif (unlikely(iblock << sb->s_blocksize_bits != $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#745: FILE: fs//fat/file.c:73:
+	BUG_ON(!phys);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#762: FILE: fs//freevxfs/vxfs_olt.c:45:
+	BUG_ON(infp->vsi_fshino);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#771: FILE: fs//freevxfs/vxfs_olt.c:52:
+	BUG_ON(infp->vsi_iext);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#780: FILE: fs//freevxfs/vxfs_olt.c:59:
+	BUG_ON(sbp->s_blocksize % bsize);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#796: FILE: fs//hpfs/file.c:80:
+	if (unlikely(iblock<<9 != inode->u.hpfs_i.mmu_private)) {
 	                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#813: FILE: fs//intermezzo/dcache.c:79:
+        BUG_ON(dentry == NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#813: FILE: fs//intermezzo/dcache.c:79:
+        BUG_ON(dentry == NULL);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#813: FILE: fs//intermezzo/dcache.c:79:
+        BUG_ON(dentry == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dentry"
#813: FILE: fs//intermezzo/dcache.c:79:
+        BUG_ON(dentry == NULL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#831: FILE: fs//intermezzo/presto.c:59:
+        if (unlikely(dentry->d_fsdata == NULL)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#831: FILE: fs//intermezzo/presto.c:59:
+        if (unlikely(dentry->d_fsdata == NULL)) {$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dentry->d_fsdata"
#831: FILE: fs//intermezzo/presto.c:59:
+        if (unlikely(dentry->d_fsdata == NULL)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#832: FILE: fs//intermezzo/presto.c:60:
+                printk("BAD dentry: %p\n", dentry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#832: FILE: fs//intermezzo/presto.c:60:
+                printk("BAD dentry: %p\n", dentry);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#832: FILE: fs//intermezzo/presto.c:60:
+                printk("BAD dentry: %p\n", dentry);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!journal->j_inode"
#848: FILE: fs//jbd/journal.c:870:
+	if (unlikely(journal->j_inode == NULL)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#865: FILE: fs//jbd/transaction.c:1881:
+	BUG_ON(!PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#882: FILE: fs//jffs2/background.c:67:
+	BUG_ON(c->gc_task);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#943: FILE: fs//jffs2/nodelist.h:194:
+^Iif (unlikely(jeb->used_size + jeb->dirty_size + jeb->free_size != $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#954: FILE: fs//jffs2/nodelist.h:200:
+^Iif (unlikely(c->used_size + c->dirty_size + c->free_size + c->erasing_size $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#955: FILE: fs//jffs2/nodelist.h:201:
+ c->bad_size != c->flash_size)) { \$

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#955: FILE: fs//jffs2/nodelist.h:201:
+ c->bad_size != c->flash_size)) { \

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1027: FILE: fs//jffs2/write.c:184:
+^ID1(if(unlikely(ri->hdr_crc != crc32(0, ri, sizeof(struct $

ERROR:SPACING: space required before the open parenthesis '('
#1027: FILE: fs//jffs2/write.c:184:
+	D1(if(unlikely(ri->hdr_crc != crc32(0, ri, sizeof(struct 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1038: FILE: fs//jffs2/write.c:272:
+^ID1(if(unlikely(rd->hdr_crc != crc32(0, rd, sizeof(struct $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1056: FILE: fs//minix/dir.c:239:
+	BUG_ON(err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1066: FILE: fs//minix/dir.c:338:
+	BUG_ON(err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1089: FILE: fs//nfs/pagelist.c:148:
+	BUG_ON(!list_empty(&req->wb_list));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1090: FILE: fs//nfs/pagelist.c:149:
+	BUG_ON(!list_empty(&req->wb_hash));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1091: FILE: fs//nfs/pagelist.c:150:
+	BUG_ON(NFS_WBACK_BUSY(req));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1092: FILE: fs//nfs/pagelist.c:151:
+	BUG_ON(atomic_read(&cache->nr_requests) < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1118: FILE: fs//nfs/read.c:455:
+		BUG_ON(!mapping);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1124: FILE: fs//nfs/read.c:459:
+	BUG_ON(!inode);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1141: FILE: fs//nfs/write.c:248:
+	BUG_ON(!mapping);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1145: FILE: fs//nfs/write.c:250:
+	BUG_ON(!inode);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1162: FILE: fs//ntfs/inode.c:1829:
+	BUG_ON(*buf & (1 << (bit & 7)));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1171: FILE: fs//ntfs/inode.c:1901:
+		BUG_ON(!err && nr_lcn2 < min_nr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1184: FILE: fs//ntfs/inode.c:1984:
+	BUG_ON(data->size > data->allocated || data->size < data->initialized ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1185: FILE: fs//ntfs/inode.c:1985:
+	BUG_ON(data->size > data->allocated || data->size < data->initialized ||
+			data->initialized > data->allocated);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1202: FILE: fs//ntfs/macros.h:24:
+	BUG_ON((char*)NTFS_LINO2NINO(i) != (char*)ntfs_ino);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1202: FILE: fs//ntfs/macros.h:24:
+	BUG_ON((char*)NTFS_LINO2NINO(i) != (char*)ntfs_ino);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1202: FILE: fs//ntfs/macros.h:24:
+	BUG_ON((char*)NTFS_LINO2NINO(i) != (char*)ntfs_ino);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1219: FILE: fs//partitions/ibm.c:113:
+	BUG_ON( first_sector != 0 );

ERROR:SPACING: space prohibited after that open parenthesis '('
#1219: FILE: fs//partitions/ibm.c:113:
+	BUG_ON( first_sector != 0 );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1219: FILE: fs//partitions/ibm.c:113:
+	BUG_ON( first_sector != 0 );

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1235: FILE: fs//proc/array.c:661:
+		BUG_ON(loff);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1242: FILE: fs//proc/array.c:667:
+	BUG_ON(retval > count);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1259: FILE: fs//reiserfs/fix_node.c:834:
+    BUG_ON(p_s_tb->FEB[p_s_tb->cur_blknum]);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1259: FILE: fs//reiserfs/fix_node.c:834:
+    BUG_ON(p_s_tb->FEB[p_s_tb->cur_blknum]);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1275: FILE: fs//reiserfs/journal.c:406:
+  if (unlikely(current->lock_depth < 0)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1275: FILE: fs//reiserfs/journal.c:406:
+  if (unlikely(current->lock_depth < 0)) {
     printk("%s called without kernel lock held\n", caller) ;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#1289: FILE: fs//reiserfs/tail_conversion.c:136:
   if (buffer_mapped(bh)) {
+    BUG_ON(buffer_journaled(bh) || buffer_journal_dirty(bh));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1293: FILE: fs//reiserfs/tail_conversion.c:137:
+    BUG_ON(buffer_journaled(bh) || buffer_journal_dirty(bh));$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1293: FILE: fs//reiserfs/tail_conversion.c:137:
+    BUG_ON(buffer_journaled(bh) || buffer_journal_dirty(bh));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1310: FILE: fs//smbfs/file.c:179:
+	BUG_ON(!mapping);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1314: FILE: fs//smbfs/file.c:181:
+	BUG_ON(!inode);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1331: FILE: fs//sysv/dir.c:249:
+	BUG_ON(err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1341: FILE: fs//sysv/dir.c:345:
+	BUG_ON(err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1358: FILE: fs//udf/inode.c:347:
+	BUG_ON(bh);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1363: FILE: fs//udf/inode.c:350:
+	BUG_ON(!phys);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000485788.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 106 warnings, 10 checks, 931 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000485788.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
