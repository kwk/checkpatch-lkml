WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#95: 
diff --exclude-from=/home/ldb/src/linux-exclude -urNdp linux-2.5.32/arch/i386/kernel/entry.S linux-2.5.32_fixup/arch/i386/kernel/entry.S

ERROR:TRAILING_WHITESPACE: trailing whitespace
#107: FILE: arch/i386/kernel/entry.S:453:
+1:^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#124: FILE: arch/i386/kernel/entry.S:525:
+^Iiret^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: arch/i386/kernel/entry.S:536:
+^Iiret^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#155: FILE: arch/i386/kernel/entry.S:556:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#163: FILE: arch/i386/kernel/fixup.c:1:
+#include <linux/config.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#169: FILE: arch/i386/kernel/fixup.c:7:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/atomic.h> instead of <asm/atomic.h>
#170: FILE: arch/i386/kernel/fixup.c:8:
+#include <asm/atomic.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/bitops.h> instead of <asm/bitops.h>
#171: FILE: arch/i386/kernel/fixup.c:9:
+#include <asm/bitops.h>

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#176: FILE: arch/i386/kernel/fixup.c:14:
+/* If we are running on SMP any other processor might be executing the
+   code that we are modifying. We must make sure that the other

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#187: FILE: arch/i386/kernel/fixup.c:25:
+   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#190: FILE: arch/i386/kernel/fixup.c:28:
+   $

ERROR:SPACING: space required before the open parenthesis '('
#197: FILE: arch/i386/kernel/fixup.c:35:
+#define dynamic_fixup_smp_lock() do {} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#198: FILE: arch/i386/kernel/fixup.c:36:
+#define dynamic_fixup_smp_unlock() do {} while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#200: FILE: arch/i386/kernel/fixup.c:38:
+#define non_atomic  0, 0,

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#202: FILE: arch/i386/kernel/fixup.c:40:
+#define pass_atomic atomic, atomicv,

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#203: FILE: arch/i386/kernel/fixup.c:41:
+#define want_atomic 1, value,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#206: FILE: arch/i386/kernel/fixup.c:44:
+/* This variable is 0 before smp boot is completed and the value to
+   replace int3 with it is completed.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#207: FILE: arch/i386/kernel/fixup.c:45:
+   $

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#211: FILE: arch/i386/kernel/fixup.c:49:
+u8 lock_fixup = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#214: FILE: arch/i386/kernel/fixup.c:52:
+void flush_tlb(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#215: FILE: arch/i386/kernel/fixup.c:53:
+unsigned long long emulate_rdtsc(void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#219: FILE: arch/i386/kernel/fixup.c:57:
+atomic_read_unaligned32(u32 * p)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#222: FILE: arch/i386/kernel/fixup.c:60:
+	u32 value;
+	if (is_smp())

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#230: FILE: arch/i386/kernel/fixup.c:68:
+atomic_write_unaligned32(u32 * p, u32 value)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#234: FILE: arch/i386/kernel/fixup.c:72:
+	/*
+	   u32 eax;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#246: FILE: arch/i386/kernel/fixup.c:84:
+	   *(u32*)p = value;
+	 */

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#249: FILE: arch/i386/kernel/fixup.c:87:
+	asm volatile ("xchgl %1, %0":"=m" (*p), "=r"(xchgv):"1"(value));
 	                            ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#249: FILE: arch/i386/kernel/fixup.c:87:
+	asm volatile ("xchgl %1, %0":"=m" (*p), "=r"(xchgv):"1"(value));
 	                                                   ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#253: FILE: arch/i386/kernel/fixup.c:91:
+set1(decl_atomic u8 * instr, u8 a)

CHECK:SPACING: No space is necessary after a cast
#258: FILE: arch/i386/kernel/fixup.c:96:
+		atomic_write_unaligned32((u32 *) instr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#263: FILE: arch/i386/kernel/fixup.c:101:
+set2(decl_atomic u8 * instr, u8 a, u8 b)

CHECK:BRACES: Unbalanced braces around else statement
#268: FILE: arch/i386/kernel/fixup.c:106:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#269: FILE: arch/i386/kernel/fixup.c:107:
+		atomic_write_unaligned32((u32 *) instr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#274: FILE: arch/i386/kernel/fixup.c:112:
+set3(decl_atomic u8 * instr, u8 a, u8 b, u8 c)

CHECK:BRACES: Unbalanced braces around else statement
#279: FILE: arch/i386/kernel/fixup.c:117:
+	} else

CHECK:SPACING: No space is necessary after a cast
#280: FILE: arch/i386/kernel/fixup.c:118:
+		atomic_write_unaligned32((u32 *) instr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#285: FILE: arch/i386/kernel/fixup.c:123:
+set4(decl_atomic u8 * instr, u8 a, u8 b, u8 c, u8 d)

CHECK:BRACES: Unbalanced braces around else statement
#290: FILE: arch/i386/kernel/fixup.c:128:
+	} else

CHECK:SPACING: No space is necessary after a cast
#291: FILE: arch/i386/kernel/fixup.c:129:
+		atomic_write_unaligned32((u32 *) instr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#296: FILE: arch/i386/kernel/fixup.c:134:
+set5(decl_atomic u8 * instr, u8 a, u8 b, u8 c, u8 d, u8 e)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#303: FILE: arch/i386/kernel/fixup.c:141:
+set6(decl_atomic u8 * instr, u8 a, u8 b, u8 c, u8 d, u8 e, u8 f)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#310: FILE: arch/i386/kernel/fixup.c:148:
+set7(decl_atomic u8 * instr, u8 a, u8 b, u8 c, u8 d, u8 e, u8 f, u8 g)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#317: FILE: arch/i386/kernel/fixup.c:155:
+set8(decl_atomic u8 * instr, u8 a, u8 b, u8 c, u8 d, u8 e, u8 f, u8 g, u8 h)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#324: FILE: arch/i386/kernel/fixup.c:162:
+generate_nop(decl_atomic u8 * instr, unsigned size)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#324: FILE: arch/i386/kernel/fixup.c:162:
+generate_nop(decl_atomic u8 * instr, unsigned size)

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#340: FILE: arch/i386/kernel/fixup.c:178:
+		set5(pass_atomic instr, 0x36, 0x8d, 0x74, 0x26, 0);	/* leal %ss:0(%esi,1), %esi */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#349: FILE: arch/i386/kernel/fixup.c:187:
+		set8(pass_atomic instr, 0x36, 0x8d, 0xb4, 0x26, 0, 0, 0, 0);	/* leal %ss:0(%esi,1), %esi */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#355: FILE: arch/i386/kernel/fixup.c:193:
+generate_call(decl_atomic u8 * instr, void *func)

CHECK:SPACING: No space is necessary after a cast
#357: FILE: arch/i386/kernel/fixup.c:195:
+	u32 value = (u8 *) func - instr - 5;

WARNING:LINE_SPACING: Missing a blank line after declarations
#358: FILE: arch/i386/kernel/fixup.c:196:
+	u32 value = (u8 *) func - instr - 5;
+	if (atomic) {

CHECK:SPACING: No space is necessary after a cast
#359: FILE: arch/i386/kernel/fixup.c:197:
+		set1(non_atomic instr + 4, (u8) (value >> 24));

CHECK:SPACING: No space is necessary after a cast
#360: FILE: arch/i386/kernel/fixup.c:198:
+		atomic_write_unaligned32((u32 *) instr, 0xe8 | (value << 8));

CHECK:SPACING: No space is necessary after a cast
#363: FILE: arch/i386/kernel/fixup.c:201:
+		*(u32 *) (instr + 1) = value;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#368: FILE: arch/i386/kernel/fixup.c:206:
+generate_fence(decl_atomic u8 * instr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#377: FILE: arch/i386/kernel/fixup.c:215:
+generate_sfence(decl_atomic u8 * instr)

CHECK:BRACES: braces {} should be used on all arms of this statement
#379: FILE: arch/i386/kernel/fixup.c:217:
+	if (cpu_needs_sfence) {
[...]
+	} else
[...]

WARNING:LONG_LINE_COMMENT: line length of 109 exceeds 100 columns
#381: FILE: arch/i386/kernel/fixup.c:219:
+			set5(pass_atomic instr, 0x0f, 0xae, 0xf8, 0x89, 0xf6);	/* sfence; movl %esi, %esi */

CHECK:BRACES: Unbalanced braces around else statement
#384: FILE: arch/i386/kernel/fixup.c:222:
+	} else

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#391: FILE: arch/i386/kernel/fixup.c:229:
+#define DSTAT_(x) static atomic_t stat_fixup_##x = ATOMIC_INIT(0); static atomic_t stat_emu_##x = ATOMIC_INIT(0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#407: FILE: arch/i386/kernel/fixup.c:245:
+#define STAT_(x) do {if(perform_fixup) atomic_inc(&stat_fixup_##x); else atomic_inc(&stat_emu_##x);} while(0)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#407: FILE: arch/i386/kernel/fixup.c:245:
+#define STAT_(x) do {if(perform_fixup) atomic_inc(&stat_fixup_##x); else atomic_inc(&stat_emu_##x);} while(0)
                                                                                                   ^

ERROR:SPACING: space required before the open parenthesis '('
#407: FILE: arch/i386/kernel/fixup.c:245:
+#define STAT_(x) do {if(perform_fixup) atomic_inc(&stat_fixup_##x); else atomic_inc(&stat_emu_##x);} while(0)

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#409: FILE: arch/i386/kernel/fixup.c:247:
+#define PSTAT_(x) printk(#x " - emu: %u fixup: %u\n", atomic_read(&stat_emu_##x), atomic_read(&stat_fixup_##x))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#409: FILE: arch/i386/kernel/fixup.c:247:
+#define PSTAT_(x) printk(#x " - emu: %u fixup: %u\n", atomic_read(&stat_emu_##x), atomic_read(&stat_fixup_##x))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#410: FILE: arch/i386/kernel/fixup.c:248:
+#define PSTAT(x) printk(#x " - fixup: %u\n", atomic_read(&stat_fixup_##x))

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#441: FILE: arch/i386/kernel/fixup.c:279:
+__initcall(dynamic_fixup_sysrq_init);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#453: FILE: arch/i386/kernel/fixup.c:291:
+	/* We use an %ss: segment override rather than a nop because it's faster
+	   (at least on 686). We can safely use it since %ss must always point to

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#454: FILE: arch/i386/kernel/fixup.c:292:
+	   a kernel data segment and instructions with LOCK must reference memory. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#459: FILE: arch/i386/kernel/fixup.c:297:
+dynamic_fixup_x86_int(u32 ecx, u32 edx, u32 eax, u8 * eip)

WARNING:LINE_SPACING: Missing a blank line after declarations
#463: FILE: arch/i386/kernel/fixup.c:301:
+	u32 value;
+	dynamic_fixup_smp_lock();

CHECK:SPACING: No space is necessary after a cast
#464: FILE: arch/i386/kernel/fixup.c:302:
+	value = atomic_read_unaligned32((u32 *) instr);

CHECK:SPACING: No space is necessary after a cast
#466: FILE: arch/i386/kernel/fixup.c:304:
+		switch ((u8) (value >> 16)) {

WARNING:LONG_LINE_COMMENT: line length of 117 exceeds 100 columns
#471: FILE: arch/i386/kernel/fixup.c:309:
+					set3(want_atomic instr, 0xb2, 0x01, 0x86);	/* movb $1, %dl; xchgb ... */

WARNING:LONG_LINE_COMMENT: line length of 116 exceeds 100 columns
#473: FILE: arch/i386/kernel/fixup.c:311:
+					set3(want_atomic instr, 0xb2, 0x01, 0x88);	/* movb $1, %dl; movb ... */

CHECK:SPACING: No space is necessary after a cast
#476: FILE: arch/i386/kernel/fixup.c:314:
+				*(volatile u32 *) &edx = 1;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#476: FILE: arch/i386/kernel/fixup.c:314:
+				*(volatile u32 *) &edx = 1;

CHECK:BRACES: braces {} should be used on all arms of this statement
#488: FILE: arch/i386/kernel/fixup.c:326:
+			if (perform_fixup) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#493: FILE: arch/i386/kernel/fixup.c:331:
+			} else

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#500: FILE: arch/i386/kernel/fixup.c:338:
+					set3(want_atomic instr, 0x36, 0x89, 0x05);	/* movl %eax, ... */

WARNING:LONG_LINE_COMMENT: line length of 109 exceeds 100 columns
#502: FILE: arch/i386/kernel/fixup.c:340:
+					set3(want_atomic instr, 0x36, 0x87, 0x05);	/* xchgl %eax, ... */

CHECK:SPACING: No space is necessary after a cast
#504: FILE: arch/i386/kernel/fixup.c:342:
+				xchg((volatile unsigned long*)(*(u32 *) (instr + 3)), eax);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#504: FILE: arch/i386/kernel/fixup.c:342:
+				xchg((volatile unsigned long*)(*(u32 *) (instr + 3)), eax);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#504: FILE: arch/i386/kernel/fixup.c:342:
+				xchg((volatile unsigned long*)(*(u32 *) (instr + 3)), eax);

CHECK:SPACING: No space is necessary after a cast
#510: FILE: arch/i386/kernel/fixup.c:348:
+			      (u8) (value >> 16));

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#514: FILE: arch/i386/kernel/fixup.c:352:
+	*(u8 * volatile *) &eip = instr;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#519: FILE: arch/i386/kernel/fixup.c:357:
+dynamic_fixup_x86_int3(u32 ecx, u32 edx, u32 eax, u8 * eip)

WARNING:LINE_SPACING: Missing a blank line after declarations
#523: FILE: arch/i386/kernel/fixup.c:361:
+	u32 value;
+	dynamic_fixup_smp_lock();

CHECK:SPACING: No space is necessary after a cast
#524: FILE: arch/i386/kernel/fixup.c:362:
+	value = atomic_read_unaligned32((u32 *) instr);

CHECK:SPACING: No space is necessary after a cast
#525: FILE: arch/i386/kernel/fixup.c:363:
+	if ((u8) value == 0xcc) {

CHECK:SPACING: No space is necessary after a cast
#526: FILE: arch/i386/kernel/fixup.c:364:
+		switch ((u8) (value >> 8)) {

WARNING:LONG_LINE_COMMENT: line length of 109 exceeds 100 columns
#531: FILE: arch/i386/kernel/fixup.c:369:
+					set2(want_atomic instr, 0x89, 0x05);	/* movl %eax, ... [disp32] */

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#533: FILE: arch/i386/kernel/fixup.c:371:
+					set2(want_atomic instr, 0x87, 0x05);	/* xchgl %eax, ... [disp32] */

CHECK:SPACING: No space is necessary after a cast
#535: FILE: arch/i386/kernel/fixup.c:373:
+				xchg((volatile unsigned long*) (*(u32 *) (instr + 2)), eax);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#535: FILE: arch/i386/kernel/fixup.c:373:
+				xchg((volatile unsigned long*) (*(u32 *) (instr + 2)), eax);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#535: FILE: arch/i386/kernel/fixup.c:373:
+				xchg((volatile unsigned long*) (*(u32 *) (instr + 2)), eax);

WARNING:LONG_LINE: line length of 128 exceeds 100 columns
#541: FILE: arch/i386/kernel/fixup.c:379:
+		      __asm__ __volatile__("lock; incl %0" : "=m" ((perform_fixup ? &stat_fixup_lock : &stat_emu_lock)->counter)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#550: FILE: arch/i386/kernel/fixup.c:388:
+	*(u8 * volatile *) &eip = instr;

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#588: FILE: arch/i386/kernel/fixup.c:426:
+handle_prefetch(decl_atomic u8 ** pinstr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#591: FILE: arch/i386/kernel/fixup.c:429:
+	u8 *instr = *pinstr;
+	STAT_(prefetch);

CHECK:BRACES: braces {} should be used on all arms of this statement
#592: FILE: arch/i386/kernel/fixup.c:430:
+	if (perform_fixup) {
[...]
+	} else
[...]

CHECK:SPACING: No space is necessary after a cast
#594: FILE: arch/i386/kernel/fixup.c:432:
+			atomic_write_unaligned32((u32 *) instr, (atomicv & ~0x38ff00) |

CHECK:BRACES: Unbalanced braces around else statement
#599: FILE: arch/i386/kernel/fixup.c:437:
+	} else

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#604: FILE: arch/i386/kernel/fixup.c:442:
+dynamic_fixup_x86_ud(u8 ** pinstr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#608: FILE: arch/i386/kernel/fixup.c:446:
+	u32 value;
+	dynamic_fixup_smp_lock();

CHECK:SPACING: No space is necessary after a cast
#609: FILE: arch/i386/kernel/fixup.c:447:
+	value = atomic_read_unaligned32((u32 *) instr);

CHECK:SPACING: No space is necessary after a cast
#610: FILE: arch/i386/kernel/fixup.c:448:
+	switch ((u8) value) {

CHECK:SPACING: No space is necessary after a cast
#612: FILE: arch/i386/kernel/fixup.c:450:
+		switch ((u8) (value >> 8)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#617: FILE: arch/i386/kernel/fixup.c:455:
+				/* We could make this inline by declaring that eax is clobbered,
+				   but the tlb flush penalty should be large enough to make

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#618: FILE: arch/i386/kernel/fixup.c:456:
+				   optimizing this irrelevant */

CHECK:SPACING: No space is necessary after a cast
#640: FILE: arch/i386/kernel/fixup.c:478:
+			if ((u8) (value >> 16) == 0x90) {

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#642: FILE: arch/i386/kernel/fixup.c:480:
+				set3(want_atomic instr, 0x31, 0xc0, 0x99);	/* xorl %eax, %eax; cltd */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#670: FILE: arch/i386/kernel/fixup.c:508:
+	/* Checking whether this is bad code or not is difficult with
+	   preempt and smp, so let's just ignore it for now */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#670: FILE: arch/i386/kernel/fixup.c:508:
+	   preempt and smp, so let's just ignore it for now */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#683: FILE: arch/i386/kernel/head.S:20:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#707: FILE: arch/i386/kernel/head.S:323:
+^I^I^I^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vector != SYSCALL_VECTOR'
#719: FILE: arch/i386/kernel/i8259.c:388:
+		if ((vector != SYSCALL_VECTOR) && (vector != DYNAMIC_FIXUP_VECTOR))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vector != DYNAMIC_FIXUP_VECTOR'
#719: FILE: arch/i386/kernel/i8259.c:388:
+		if ((vector != SYSCALL_VECTOR) && (vector != DYNAMIC_FIXUP_VECTOR))

ERROR:SPACING: space required before the open parenthesis '('
#773: FILE: arch/i386/kernel/time.c:264:
+	if(likely(cpu_has_tsc))

ERROR:OPEN_BRACE: open brace '{' following union go on the same line
#789: FILE: arch/i386/kernel/time.c:278:
+	union
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#791: FILE: arch/i386/kernel/time.c:280:
+		struct
+		{

ERROR:OPEN_BRACE: open brace '{' following union go on the same line
#820: FILE: arch/i386/kernel/time.c:302:
+	union
+	{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#822: FILE: arch/i386/kernel/time.c:304:
+		struct
+		{

ERROR:TRAILING_WHITESPACE: trailing whitespace
#885: FILE: arch/i386/kernel/traps.c:329:
+#ifdef CONFIG_PNPBIOS^I^I$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#886: FILE: arch/i386/kernel/traps.c:330:
+		if (regs->xcs == 0x60 || regs->xcs == 0x68)
+		{

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#888: FILE: arch/i386/kernel/traps.c:332:
+			extern u32 pnp_bios_fault_eip, pnp_bios_fault_esp;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#889: FILE: arch/i386/kernel/traps.c:333:
+			extern u32 pnp_bios_is_utter_crap;

WARNING:LINE_SPACING: Missing a blank line after declarations
#890: FILE: arch/i386/kernel/traps.c:334:
+			extern u32 pnp_bios_is_utter_crap;
+			pnp_bios_is_utter_crap = 1;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#893: FILE: arch/i386/kernel/traps.c:337:
+			if((trapnr == 6) && *(u8*)regs->eip == 0xf0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'trapnr == 6'
#893: FILE: arch/i386/kernel/traps.c:337:
+			if((trapnr == 6) && *(u8*)regs->eip == 0xf0)

ERROR:SPACING: space required before the open parenthesis '('
#893: FILE: arch/i386/kernel/traps.c:337:
+			if((trapnr == 6) && *(u8*)regs->eip == 0xf0)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#894: FILE: arch/i386/kernel/traps.c:338:
+				*(u8*)regs->eip = 0x90;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#895: FILE: arch/i386/kernel/traps.c:339:
+^I^I^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#896: FILE: arch/i386/kernel/traps.c:340:
+			printk(KERN_CRIT "PNPBIOS fault.. attempting recovery.\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#897: FILE: arch/i386/kernel/traps.c:341:
+			__asm__ volatile(

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_trap', this function's name, in a string
#901: FILE: arch/i386/kernel/traps.c:345:
+			panic("do_trap: can't hit this");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#903: FILE: arch/i386/kernel/traps.c:347:
+#endif^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#904: FILE: arch/i386/kernel/traps.c:348:
+^I^I$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#905: FILE: arch/i386/kernel/traps.c:349:
+		if(trapnr == 6)
+		{

ERROR:SPACING: space required before the open parenthesis '('
#905: FILE: arch/i386/kernel/traps.c:349:
+		if(trapnr == 6)

ERROR:POINTER_LOCATION: "(foo**)" should be "(foo **)"
#907: FILE: arch/i386/kernel/traps.c:351:
+			if(!dynamic_fixup_x86_ud((u8**)&regs->eip))

ERROR:SPACING: space required before the open parenthesis '('
#907: FILE: arch/i386/kernel/traps.c:351:
+			if(!dynamic_fixup_x86_ud((u8**)&regs->eip))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#910: FILE: arch/i386/kernel/traps.c:354:
+		else
+		{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#910: FILE: arch/i386/kernel/traps.c:354:
+		}
+		else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#913: FILE: arch/i386/kernel/traps.c:357:
+			unsigned long fixup = search_exception_table(regs->eip);
+			if (fixup)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#915: FILE: arch/i386/kernel/traps.c:359:
+^I^I^Ielse^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#926: FILE: arch/i386/kernel/traps.c:981:
+	/* already set in head.S
+	   set_trap_gate(DYNAMIC_FIXUP_VECTOR, &__dynamic_fixup_int); */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#926: FILE: arch/i386/kernel/traps.c:981:
+	   set_trap_gate(DYNAMIC_FIXUP_VECTOR, &__dynamic_fixup_int); */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#927: FILE: arch/i386/kernel/traps.c:982:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#935: FILE: include/asm-i386/fixup.h:1:
+#ifndef __ASM_FIXUP_H

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#953: FILE: include/asm-i386/fixup.h:19:
+/* This should be only used for padding or single-byte nops,
+   not for efficient multibyte nops */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#953: FILE: include/asm-i386/fixup.h:19:
+   not for efficient multibyte nops */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#956: FILE: include/asm-i386/fixup.h:22:
+#define dynamic_fixup_int \
+	asm_byte(0xcd) asm_byte(DYNAMIC_FIXUP_VECTOR) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#957: FILE: include/asm-i386/fixup.h:23:
+^Iasm_byte(0xcd) asm_byte(DYNAMIC_FIXUP_VECTOR) $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#967: FILE: include/asm-i386/fixup.h:33:
+/* void FASTCALL(x86_dynamic_fixup_call(u8* instr));
+   void __dynamic_fixup(void);

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#972: FILE: include/asm-i386/fixup.h:38:
+int dynamic_fixup_x86_ud(u8** instr);

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#996: FILE: init/main.c:543:
+#ifdef __i386__

Architecture specific defines should be avoided wherever
possible.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#998: FILE: init/main.c:545:
+		extern void dynamic_fixup_start(void);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1001: FILE: init/main.c:548:
+#endif^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000436881.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 62 errors, 56 warnings, 41 checks, 863 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000436881.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
