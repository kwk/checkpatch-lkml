WARNING:TYPO_SPELLING: 'dependend' may be misspelled - perhaps 'dependent'?
#31: 
> bit -- because it is dependend on ucb1x00, not on platform bus.
                       ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: arch/arm/mach-sa1100/collie_pm.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:CAMELCASE: Avoid CamelCase: <ADCtoPower>
#73: FILE: arch/arm/mach-sa1100/collie_pm.c:32:
+#define ADCtoPower(x)	       ((330 * x * 2) / 1024)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#73: FILE: arch/arm/mach-sa1100/collie_pm.c:32:
+#define ADCtoPower(x)	       ((330 * x * 2) / 1024)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#79: FILE: arch/arm/mach-sa1100/collie_pm.c:38:
+	if (sharpsl_param.adadj != -1) {
+		ad_revise = sharpsl_param.adadj;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#84: FILE: arch/arm/mach-sa1100/collie_pm.c:43:
+	if ((err = request_irq(COLLIE_IRQ_GPIO_AC_IN, sharpsl_ac_isr, SA_INTERRUPT,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#86: FILE: arch/arm/mach-sa1100/collie_pm.c:45:
+		printk("Could not get irq %d.\n", COLLIE_IRQ_GPIO_AC_IN);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#89: FILE: arch/arm/mach-sa1100/collie_pm.c:48:
+	if ((err = request_irq(COLLIE_IRQ_GPIO_CO, sharpsl_chrg_full_isr, SA_INTERRUPT,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#92: FILE: arch/arm/mach-sa1100/collie_pm.c:51:
+		printk("Could not get irq %d.\n", COLLIE_IRQ_GPIO_CO);

ERROR:CODE_INDENT: code indent should use tabs where possible
#102: FILE: arch/arm/mach-sa1100/collie_pm.c:61:
+^I^I^I           COLLIE_TC35143_GPIO_BBAT_ON);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:RETURN_VOID: void function return statements are not generally useful
#104: FILE: arch/arm/mach-sa1100/collie_pm.c:63:
+	return;
+}

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#118: FILE: arch/arm/mach-sa1100/collie_pm.c:77:
+#define        SCOOP_REG(adr) (*(volatile unsigned short*)(CF_BUF_CTRL_BASE+(adr)))

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#118: FILE: arch/arm/mach-sa1100/collie_pm.c:77:
+#define        SCOOP_REG(adr) (*(volatile unsigned short*)(CF_BUF_CTRL_BASE+(adr)))
                                                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#118: FILE: arch/arm/mach-sa1100/collie_pm.c:77:
+#define        SCOOP_REG(adr) (*(volatile unsigned short*)(CF_BUF_CTRL_BASE+(adr)))

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#121: FILE: arch/arm/mach-sa1100/collie_pm.c:80:
+	if (on) {
[...]
+	} else {
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#164: FILE: arch/arm/mach-sa1100/collie_pm.c:123:
+	printk("Backup battery = %d(%d)\n", ADCtoPower(voltage), voltage);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#182: FILE: arch/arm/mach-sa1100/collie_pm.c:141:
+	printk("Main battery = %d(%d)\n", voltage_volts, voltage);

ERROR:SPACING: space prohibited after that open parenthesis '('
#184: FILE: arch/arm/mach-sa1100/collie_pm.c:143:
+	if ( voltage != -1 ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#184: FILE: arch/arm/mach-sa1100/collie_pm.c:143:
+	if ( voltage != -1 ) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#184: FILE: arch/arm/mach-sa1100/collie_pm.c:143:
+	if ( voltage != -1 ) {
[...]
+	} else {
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#202: FILE: arch/arm/mach-sa1100/collie_pm.c:161:
+	printk("Battery temp = %d\n", voltage);

WARNING:LINE_SPACING: Missing a blank line after declarations
#217: FILE: arch/arm/mach-sa1100/collie_pm.c:176:
+		int ret = GPLR & COLLIE_GPIO_AC_IN;
+		printk("AC status = %d\n", ret);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#217: FILE: arch/arm/mach-sa1100/collie_pm.c:176:
+		printk("AC status = %d\n", ret);

WARNING:LINE_SPACING: Missing a blank line after declarations
#222: FILE: arch/arm/mach-sa1100/collie_pm.c:181:
+		int ret = GPLR & COLLIE_GPIO_MAIN_BAT_LOW;
+		printk("Fatal bat = %d\n", ret);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#222: FILE: arch/arm/mach-sa1100/collie_pm.c:181:
+		printk("Fatal bat = %d\n", ret);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#264: FILE: arch/arm/mach-sa1100/collie_pm.c:223:
+extern struct sharpsl_pm_status sharpsl_pm;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000096481.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 17 warnings, 3 checks, 254 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000096481.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
