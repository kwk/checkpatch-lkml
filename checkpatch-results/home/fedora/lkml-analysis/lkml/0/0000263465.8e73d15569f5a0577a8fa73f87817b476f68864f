WARNING:TYPO_SPELLING: 'configed' may be misspelled - perhaps 'configured'?
#45: 
> invasive, no impact unless configed in, and nothing measurable even
                             ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#50: 
 http://kernel.org/pub/linux/kernel/people/akpm/patches/2.6/2.6.7/2.6.7-mm1/broken-out/schedstats.patch

WARNING:CONST_STRUCT: struct file_operations should normally be const
#460: FILE: fs/proc/proc_misc.c:286:
+extern struct file_operations proc_schedstat_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#514: FILE: kernel/sched.c:301:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#538: FILE: kernel/sched.c:325:
+		seq_printf(seq,
+		    "cpu%d %lu %lu %lu %lu %lu %lu %lu %lu %lu",

WARNING:LINE_SPACING: Missing a blank line after declarations
#548: FILE: kernel/sched.c:335:
+			int k;
+			cpumask_scnprintf(str, NR_CPUS, sd->span);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#548: FILE: kernel/sched.c:335:
+			cpumask_scnprintf(str, NR_CPUS, sd->span);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#553: FILE: kernel/sched.c:340:
+				seq_printf(seq, " %lu %lu %lu %lu %lu %lu",
+				    sd->lb_cnt[k], sd->lb_balanced[k],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#559: FILE: kernel/sched.c:346:
+			seq_printf(seq, " %lu %lu %lu %lu %lu %lu %lu",
+			    sd->alb_cnt, sd->alb_failed,

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#566: FILE: kernel/sched.c:353:
+		seq_printf(seq, "\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#574: FILE: kernel/sched.c:361:
+	unsigned size = 4096 * (1 + num_online_cpus() / 32);

CHECK:BRACES: braces {} should be used on all arms of this statement
#582: FILE: kernel/sched.c:369:
+	if (!res) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#586: FILE: kernel/sched.c:373:
+	} else

WARNING:CONST_STRUCT: struct file_operations should normally be const
#591: FILE: kernel/sched.c:378:
+struct file_operations proc_schedstat_operations = {

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#598: FILE: kernel/sched.c:385:
+# define schedstat_inc(s, field)	((s)->field++)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#599: FILE: kernel/sched.c:386:
+# define schedstat_add(s, field, amt)	((s)->field += (amt))

CHECK:BRACES: braces {} should be used on all arms of this statement
#619: FILE: kernel/sched.c:870:
+	if (cpu == this_cpu)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#621: FILE: kernel/sched.c:872:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#641: FILE: kernel/sched.c:928:
+				if ((sd->flags & SD_WAKE_AFFINE) &&
+				     !task_hot(p, rq->timestamp_last_tick, sd))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#644: FILE: kernel/sched.c:931:
+				else if ((sd->flags & SD_WAKE_BALANCE) &&
+					  imbalance*this_load <= 100*load)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#644: FILE: kernel/sched.c:931:
+					  imbalance*this_load <= 100*load)
 					           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#644: FILE: kernel/sched.c:931:
+					  imbalance*this_load <= 100*load)
 					                            ^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#809: FILE: kernel/Kconfig.debug:5:
+config DEBUG_KERNEL
+	bool "Kernel debugging"
+	help
+	  Say Y here if you are developing drivers or trying to debug and
+	  identify kernel problems.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#815: FILE: kernel/Kconfig.debug:11:
+config DEBUG_SLAB
+	bool "Debug memory allocations"
+	depends on DEBUG_KERNEL
+	help
+	  Say Y here to have the kernel do limited verification on memory
+	  allocation as well as poisoning memory on free to catch use of freed
+	  memory.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#832: FILE: kernel/Kconfig.debug:28:
+config DEBUG_SPINLOCK_SLEEP
+	bool "Sleep-inside-spinlock checking"
+	depends on DEBUG_KERNEL && SMP
+	help
+	  If you say Y here, various routines which may sleep will become very
+	  noisy if they are called with a spinlock held.	
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#837: FILE: kernel/Kconfig.debug:33:
+^I  noisy if they are called with a spinlock held.^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#839: FILE: kernel/Kconfig.debug:35:
+config DEBUG_PAGEALLOC
+	bool "Page alloc debugging"
+	depends on DEBUG_KERNEL
+	help
+	  Unmap pages from the kernel linear mapping after free_pages().
+	  This results in a large slowdown, but helps to find certain types
+	  of memory corruptions.
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000263465.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 12 warnings, 14 checks, 735 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000263465.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
