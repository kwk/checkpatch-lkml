WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#52: 
-----------------------------------------------------------------------------

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#328: 
--- a/include/asm-generic/vmlinux.lds.h	Sat Jan 25 12:24:59 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#766: FILE: include/linux/module.h:145:
+ * generate a checksums for some symbols */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#767: FILE: include/linux/module.h:146:
+#define __CRC_SYMBOL(sym, sec)					\
+	extern void *__crc_##sym __attribute__((weak));		\
+	static const unsigned long __kcrctab_##sym		\
+	__attribute__((section("__kcrctab" sec)))		\
+	= (unsigned long) &__crc_##sym;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#768: FILE: include/linux/module.h:147:
+	extern void *__crc_##sym __attribute__((weak));		\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__kcrctab" sec) over __attribute__((section("__kcrctab" sec)))
#770: FILE: include/linux/module.h:149:
+	__attribute__((section("__kcrctab" sec)))		\

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#771: FILE: include/linux/module.h:150:
+	__attribute__((section("__kcrctab" sec)))		\
+	= (unsigned long) &__crc_##sym;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:SPACING: No space is necessary after a cast
#771: FILE: include/linux/module.h:150:
+	= (unsigned long) &__crc_##sym;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sym' - possible side-effects?
#778: FILE: include/linux/module.h:156:
+#define __EXPORT_SYMBOL(sym, sec)				\
+	__CRC_SYMBOL(sym, sec)					\
 	static const char __kstrtab_##sym[]			\
 	__attribute__((section("__ksymtab_strings")))		\
 	= MODULE_SYMBOL_PREFIX #sym;                    	\
 	static const struct kernel_symbol __ksymtab_##sym	\
+	__attribute__((section("__ksymtab" sec)))		\
 	= { (unsigned long)&sym, __kstrtab_##sym }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sec' - possible side-effects?
#778: FILE: include/linux/module.h:156:
+#define __EXPORT_SYMBOL(sym, sec)				\
+	__CRC_SYMBOL(sym, sec)					\
 	static const char __kstrtab_##sym[]			\
 	__attribute__((section("__ksymtab_strings")))		\
 	= MODULE_SYMBOL_PREFIX #sym;                    	\
 	static const struct kernel_symbol __ksymtab_##sym	\
+	__attribute__((section("__ksymtab" sec)))		\
 	= { (unsigned long)&sym, __kstrtab_##sym }

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__ksymtab" sec) over __attribute__((section("__ksymtab" sec)))
#785: FILE: include/linux/module.h:162:
+	__attribute__((section("__ksymtab" sec)))		\

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#789: FILE: include/linux/module.h:165:
+#define EXPORT_SYMBOL(sym)	__EXPORT_SYMBOL(sym, "")

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#790: FILE: include/linux/module.h:166:
+#define EXPORT_SYMBOL_GPL(sym)	__EXPORT_SYMBOL(sym, "_gpl")

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#800: FILE: include/linux/module.h:169:
+ * special casing EXPORT_SYMBOL_NOVERS */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#835: FILE: kernel/module.c:1043:
+		} else if (strcmp(secstrings+sechdrs[i].sh_name,
 		                            ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#861: FILE: kernel/module.c:1495:
+extern const struct kernel_symbol __start___ksymtab_gpl[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#862: FILE: kernel/module.c:1496:
+extern const struct kernel_symbol __stop___ksymtab_gpl[];

ERROR:TRAILING_WHITESPACE: trailing whitespace
#917: FILE: include/linux/module.h:147:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#929: FILE: include/linux/module.h:172:
+#define EXPORT_SYMBOL(sym)					\

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#932: FILE: include/linux/module.h:175:
+#define EXPORT_SYMBOL_GPL(sym)					\

ERROR:TRAILING_WHITESPACE: trailing whitespace
#986: FILE: scripts/Makefile.build:93:
+^Ifi;^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1130: FILE: kernel/module.c:1016:
+^Iexportindex = setupindex = obsparmindex = gplindex = licenseindex $

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1130: FILE: kernel/module.c:1016:
+	exportindex = setupindex = obsparmindex = gplindex = licenseindex 

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1131: FILE: kernel/module.c:1017:
+	exportindex = setupindex = obsparmindex = gplindex = licenseindex 
+		= crcindex = gplcrcindex = 0;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1139: FILE: kernel/module.c:1050:
+		} else if (strcmp(secstrings+sechdrs[i].sh_name, "__kcrctab")
 		                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1144: FILE: kernel/module.c:1055:
+		} else if (strcmp(secstrings+sechdrs[i].sh_name, "__kcrctab_gpl")
 		                            ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1168: FILE: kernel/module.c:1514:
+extern const unsigned long __start___kcrctab[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1169: FILE: kernel/module.c:1515:
+extern const unsigned long __stop___kcrctab[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1170: FILE: kernel/module.c:1516:
+extern const unsigned long __start___kcrctab_gpl[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1171: FILE: kernel/module.c:1517:
+extern const unsigned long __stop___kcrctab_gpl[];

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1278: FILE: Makefile:265:
+#	make sure the checksums are uptodate before we use them.
  	                            ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1405: FILE: Makefile:265:
+#	make sure the checksums are uptodate before we record them.
  	                            ^^^^^^^^

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1422: FILE: Makefile:518:
+	$(Q)$(MAKE) -rR -f scripts/Makefile.modver

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1451: FILE: include/linux/module.h:44:
+struct modversion_info
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'prequisites' may be misspelled - perhaps 'prerequisites'?
#1535: FILE: scripts/Makefile.modver:76:
+# Add FORCE to the prequisites of a target to force it to be always rebuilt.
                    ^^^^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#1637: FILE: kernel/module.c:729:
+static int check_version(Elf_Shdr *sechdrs,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1640: FILE: kernel/module.c:732:
+^I^I^I struct module *mod, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1648: FILE: kernel/module.c:740:
+^Iif (!ksg->crcs) { $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1649: FILE: kernel/module.c:741:
+		printk("%s: no CRC for \"%s\" [%s] found: kernel tainted.\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1650: FILE: kernel/module.c:742:
+^I^I       mod->name, symname, $

CHECK:SPACING: No space is necessary after a cast
#1657: FILE: kernel/module.c:749:
+	versions = (void *) sechdrs[versindex].sh_addr;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1667: FILE: kernel/module.c:759:
+		printk("%s: disagrees about version of symbol %s\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1674: FILE: kernel/module.c:766:
+	printk("%s: no version for \"%s\" found: kernel tainted.\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1684: FILE: kernel/module.c:776:
+^I^I^I^Istruct module *mod, $

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1727: FILE: kernel/module.c:913:
 			sym[i].st_value
+			  = resolve_symbol(sechdrs, versindex,

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1745: FILE: kernel/module.c:1079:
 	exportindex = setupindex = obsparmindex = gplindex = licenseindex 
+		= crcindex = gplcrcindex = versindex = 0;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1753: FILE: kernel/module.c:1150:
+		} else if (strcmp(secstrings+sechdrs[i].sh_name,
 		                            ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000397465.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 24 warnings, 14 checks, 1003 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000397465.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
