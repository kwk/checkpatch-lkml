WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#29: 
 Signed-off-by: Chuck Lever <cel@netapp.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#154: FILE: fs/nfs/file.c:98:
+	res = NFS_SERVER(inode)->rpc_ops->file_open(inode, filp);
 	                                                   ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#291: FILE: fs/nfs/inode.c:602:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#304: FILE: fs/nfs/inode.c:615:
+	seq_printf(m, "\n\topts:\t");

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#311: FILE: fs/nfs/inode.c:622:
+	seq_printf(m, ",acregmin=%d", nfss->acregmin/HZ);
 	                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#312: FILE: fs/nfs/inode.c:623:
+	seq_printf(m, ",acregmax=%d", nfss->acregmax/HZ);
 	                                            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#313: FILE: fs/nfs/inode.c:624:
+	seq_printf(m, ",acdirmin=%d", nfss->acdirmin/HZ);
 	                                            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#314: FILE: fs/nfs/inode.c:625:
+	seq_printf(m, ",acdirmax=%d", nfss->acdirmax/HZ);
 	                                            ^

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#324: FILE: fs/nfs/inode.c:635:
+	seq_printf(m, "\n\tcaps:\t");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#333: FILE: fs/nfs/inode.c:644:
+		seq_printf(m, "\n\tnfsv4:\t");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#350: FILE: fs/nfs/inode.c:661:
+	seq_printf(m, "\n\tcounts:\t");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#353: FILE: fs/nfs/inode.c:664:
+	seq_printf(m, "\n\tbytes:\t");

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#355: FILE: fs/nfs/inode.c:666:
+		seq_printf(m, "%Lu ", totals.bytes[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#378: FILE: fs/nfs/inode.c:908:
+		error = nfs_wait_event(clnt, nfsi->nfs_i_wait,
 				!(NFS_FLAGS(inode) & flag));

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#382: FILE: fs/nfs/inode.c:911:
+		iput(inode);
 		^^^^

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#605: FILE: include/linux/nfs_fs_sb.h:16:
+	struct nfs_iostats *	io_stats;	/* I/O statistics */

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#622: FILE: include/linux/nfs_iostat.h:1:
+#ifndef _NFS_IOSTAT

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LINE_SPACING: Missing a blank line after declarations
#677: FILE: include/linux/nfs_iostat.h:56:
+	struct nfs_iostats *iostats = NFS_SERVER(inode)->io_stats;
+	iostats[smp_processor_id()].counts[stat]++;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#683: FILE: include/linux/nfs_iostat.h:62:
+	struct nfs_iostats *iostats = NFS_SERVER(inode)->io_stats;
+	iostats[smp_processor_id()].bytes[stat] += addend;

WARNING:LINE_SPACING: Missing a blank line after declarations
#689: FILE: include/linux/nfs_iostat.h:68:
+	struct nfs_iostats *new;
+	new = kmalloc(sizeof(struct nfs_iostats) * NR_CPUS, GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new)...) over kmalloc(sizeof(struct nfs_iostats)...)
#689: FILE: include/linux/nfs_iostat.h:68:
+	new = kmalloc(sizeof(struct nfs_iostats) * NR_CPUS, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#689: FILE: include/linux/nfs_iostat.h:68:
+	new = kmalloc(sizeof(struct nfs_iostats) * NR_CPUS, GFP_KERNEL);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#691: FILE: include/linux/nfs_iostat.h:70:
+		memset(new, 0, sizeof(struct nfs_iostats) * NR_CPUS);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000198173.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 16 warnings, 6 checks, 581 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000198173.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
