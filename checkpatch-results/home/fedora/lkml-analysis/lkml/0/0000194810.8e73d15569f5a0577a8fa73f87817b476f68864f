WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#66: 
rprobe_instance object available for establishing the function-return probe.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#113: FILE: tmp/linux-2.6.12-rc1.mm3.works/include/linux/kprobes.h:74:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#124: FILE: tmp/linux-2.6.12-rc1.mm3.works/include/linux/kprobes.h:95:
+extern int trampoline_probe_handler(struct kprobe *p, struct pt_regs *regs);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#125: FILE: tmp/linux-2.6.12-rc1.mm3.works/include/linux/kprobes.h:96:
+extern struct task_struct *arch_get_kprobe_task(void *ptr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#126: FILE: tmp/linux-2.6.12-rc1.mm3.works/include/linux/kprobes.h:97:
+#else $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#131: FILE: tmp/linux-2.6.12-rc1.mm3.works/include/linux/kprobes.h:102:
+}
+static int trampoline_probe_handler(struct kprobe *p, struct pt_regs *regs)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#134: FILE: tmp/linux-2.6.12-rc1.mm3.works/include/linux/kprobes.h:105:
+} $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#135: FILE: tmp/linux-2.6.12-rc1.mm3.works/include/linux/kprobes.h:106:
+} 
+#define arch_get_kprobe_task(ptr) ((struct task_struct *)NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#142: FILE: tmp/linux-2.6.12-rc1.mm3.works/include/linux/kprobes.h:113:
+ * can be active concurrently. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#143: FILE: tmp/linux-2.6.12-rc1.mm3.works/include/linux/kprobes.h:114:
+ * nmissed - tracks the number of times the probed function's return was $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#178: FILE: tmp/linux-2.6.12-rc1.mm3.works/include/linux/kprobes.h:170:
+void add_retprobe_inst_to_hash(struct retprobe_instance *ri); $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#188: FILE: tmp/linux-2.6.12-rc1.mm3.works/include/linux/kprobes.h:195:
 }
+static inline int register_kretprobe(struct kprobe *p, struct retprobe *rp)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#190: FILE: tmp/linux-2.6.12-rc1.mm3.works/include/linux/kprobes.h:197:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#192: FILE: tmp/linux-2.6.12-rc1.mm3.works/include/linux/kprobes.h:199:
+}
+static inline int register_jretprobe(struct jprobe *p, struct retprobe *rp)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#194: FILE: tmp/linux-2.6.12-rc1.mm3.works/include/linux/kprobes.h:201:
+	return -ENOSYS;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#205: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:31:
+ *^I^I<jkenisto@us.ibm.com> Added function-return probes, aka exit $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:45:
+#endif $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#223: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:52:
+#define RPROBE_HASH_BITS^IKPROBE_HASH_BITS^I$

CHECK:SPACING: No space is necessary after a cast
#235: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:73:
+		.addr = (kprobe_opcode_t *) &retprobe_trampoline,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#240: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:78:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:87:
+^I/* Allocate retprobe instances hash table */^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#262: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:107:
+struct retprobe_instance * get_free_rp_inst(struct retprobe *rp)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#264: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:109:
+	if (list_empty(&rp->free_instances)) {
+		return NULL;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#267: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:112:
+	return (struct retprobe_instance *) rp->free_instances.next;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#268: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:113:
+}^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#289: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:134:
+^Itsk = arch_get_kprobe_task(ri->stack_addr);^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#289: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:134:
+	struct task_struct *tsk;
+	tsk = arch_get_kprobe_task(ri->stack_addr);	

CHECK:SPACING: No space is necessary after a cast
#296: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:141:
+	*((unsigned long *)(ri->stack_addr)) = (unsigned long) ri->ret_addr;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#299: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:144:
+^I^I/* This is the last running ri during unregister. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#312: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:157:
+ * about to be recycled. Recycle any function-return probe instances $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#313: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:158:
+ * associated with this task. These represent probed functions that have $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#324: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:169:
+	if (!arch_supports_retprobes) {
+		return;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#327: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:172:
+^Ispin_lock_irqsave(&kprobe_lock, flags);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#336: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:181:
+^Ispin_unlock_irqrestore(&kprobe_lock, flags);^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!get_kprobe"
#358: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:226:
+	if (get_kprobe(p->addr) == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#366: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:234:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p->rp"
#367: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:235:
+	if (p->rp != NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*rp)...) over kmalloc(sizeof(struct retprobe)...)
#376: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:244:
+			rp = kmalloc(sizeof(struct retprobe), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#377: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:245:
+			BUG_ON(rp == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rp"
#377: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:245:
+			BUG_ON(rp == NULL);

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#398: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:281:
+	static int retprobe_init_setup = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#401: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:284:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#402: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:285:
+	if (!arch_supports_retprobes) {
+		return -ENOSYS;
+	}

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#403: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:286:
+		return -ENOSYS;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#414: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:297:
+		maxinst = max(10, 2 * NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#416: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:299:
+		maxinst = NR_CPUS;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#418: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:301:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#419: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:302:
+^Irp->instances = kmalloc(maxinst * sizeof(struct retprobe_instance), $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#420: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:303:
+	rp->instances = kmalloc(maxinst * sizeof(struct retprobe_instance), 
+					GFP_KERNEL);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#421: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:304:
+	if (rp->instances == NULL) {
+		return -ENOMEM;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rp->instances"
#421: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:304:
+	if (rp->instances == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#424: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:307:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#439: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:322:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#440: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:323:
+	if((ret = _register_kprobe(p)) != 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#440: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:323:
+	if((ret = _register_kprobe(p)) != 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#449: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:332:
+{
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#455: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:338:
+^I$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#464: FILE: tmp/linux-2.6.12-rc1.mm3.works/kernel/kprobes.c:360:
+EXPORT_SYMBOL_GPL(register_jretprobe);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:SPACING: No space is necessary after a cast
#483: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:68:
+	return ((struct thread_info *) (((unsigned long) ptr) & (~(THREAD_SIZE -1))))->task;

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#483: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:68:
+	return ((struct thread_info *) (((unsigned long) ptr) & (~(THREAD_SIZE -1))))->task;
 	                                                                       ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#486: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:71:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p->rp"
#494: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:171:
+	if (p->rp != NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#495: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:172:
+^I^I/* $

ERROR:CODE_INDENT: code indent should use tabs where possible
#496: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:173:
+^I ^I * Get a retprobe instance off the free list and populate it$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#496: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:173:
+^I ^I * Get a retprobe instance off the free list and populate it$

ERROR:CODE_INDENT: code indent should use tabs where possible
#497: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:174:
+^I ^I * with the return addr, stack addr, and rp.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#497: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:174:
+^I ^I * with the return addr, stack addr, and rp.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#498: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:175:
+^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#498: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:175:
+^I ^I */$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#502: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:179:
+		if ((ri = get_free_rp_inst(p->rp)) != NULL) {

CHECK:SPACING: No space is necessary after a cast
#506: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:183:
+			ri->ret_addr =  (void *) *sara;

CHECK:SPACING: No space is necessary after a cast
#509: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:186:
+			*sara = (unsigned long) &retprobe_trampoline;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#510: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:187:
+^I^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#511: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:188:
+^I^I^I * Remove obj in free list - $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#512: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:189:
+^I^I^I * will add it back when probed function returns $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#522: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:199:
+^I} ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#522: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:199:
+^I} ^I$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#530: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:214:
 }
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#532: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:216:
+ */  $

CHECK:SPACING: No space is necessary after a cast
#536: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:220:
+	unsigned long *sara = ((unsigned long *) &regs->esp) - 1;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#537: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:221:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#538: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:222:
+	if ((ri = get_rp_inst(sara)) == NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#538: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:222:
+	if ((ri = get_rp_inst(sara)) == NULL) {
+		return 0;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#541: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:225:
+	if (ri->rp && !ri->rp->unregistering) {
+		return ri->rp->handler(ri, regs);
+	}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#553: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:283:
+^Icase 0x90: ^I/* nop */$

CHECK:SPACING: No space is necessary after a cast
#555: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:285:
+		if (orig_eip  == (unsigned long) retprobe_trampoline) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#558: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:288:
+			unsigned long *sara = tos - 1;	/* RA already popped */
+			ri = get_rp_inst(sara);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ri"
#559: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/kprobes.c:289:
+			if (ri != NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#605: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/process.c:376:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#608: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/process.c:379:
+^I * this function, it will be disabled by kprobe_flush_task if you do. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#621: FILE: tmp/linux-2.6.12-rc1.mm3.works/arch/i386/kernel/process.c:407:
+^I/* $

CHECK:SPACING: No space is necessary after a cast
#639: FILE: tmp/linux-2.6.12-rc1.mm3.works/include/asm-i386/kprobes.h:44:
+asmlinkage void retprobe_trampoline(void) __asm__("retprobe_trampoline");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000194810.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 44 errors, 21 warnings, 27 checks, 527 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000194810.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
