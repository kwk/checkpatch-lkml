WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#69: 
diff -urN -X dontdiff linux-2.5.74-bk1-sel.orig/include/linux/hashtab.h linux-2.5.74-bk1-sel.w1/include/linux/hashtab.h

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#73: FILE: include/linux/hashtab.h:1:
+/* Author : Stephen Smalley, <sds@epoch.ncsc.mil> */

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#77: FILE: include/linux/hashtab.h:5:
+ * key values and datum values.  The type of the key values $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#110: FILE: include/linux/hashtab.h:38:
+/*
+   Creates a new hash table with the specified characteristics.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'insufficent' may be misspelled - perhaps 'insufficient'?
#112: FILE: include/linux/hashtab.h:40:
+   Returns NULL if insufficent space is available or
                    ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#117: FILE: include/linux/hashtab.h:45:
+               int (*keycmp)(struct hashtab *h, void *key1, void *key2),$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: include/linux/hashtab.h:45:
+               int (*keycmp)(struct hashtab *h, void *key1, void *key2),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#118: FILE: include/linux/hashtab.h:46:
+               u32 size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: include/linux/hashtab.h:46:
+               u32 size);$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#121: FILE: include/linux/hashtab.h:49:
+/*
+   Inserts the specified (key, datum) pair into the specified hash table.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#131: FILE: include/linux/hashtab.h:59:
+/*
+   Removes the entry with the specified key from the hash table.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#144: FILE: include/linux/hashtab.h:72:
+/*
+   Insert or replace the specified (key, datum) pair in the specified

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#158: FILE: include/linux/hashtab.h:86:
+/*
+   Searches for the entry with the specified key in the hash table.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#166: FILE: include/linux/hashtab.h:94:
+/*
+   Destroys the specified hash table.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#171: FILE: include/linux/hashtab.h:99:
+/*
+   Applies the specified apply function to (key,datum,args)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#186: FILE: include/linux/hashtab.h:114:
+/*
+   Same as hashtab_map, except that if apply returns a non-zero status,

ERROR:CODE_INDENT: code indent should use tabs where possible
#191: FILE: include/linux/hashtab.h:119:
+                                 int (*apply)(void *k, void *d, void *args),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: include/linux/hashtab.h:119:
+                                 int (*apply)(void *k, void *d, void *args),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#192: FILE: include/linux/hashtab.h:120:
+                                 void (*destroy)(void *k, void *d, void *args),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: include/linux/hashtab.h:120:
+                                 void (*destroy)(void *k, void *d, void *args),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: include/linux/hashtab.h:121:
+                                 void *args);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: include/linux/hashtab.h:121:
+                                 void *args);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#195: FILE: include/linux/hashtab.h:123:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#204: FILE: lib/hashtab.c:1:
+/* Author : Stephen Smalley, <sds@epoch.ncsc.mil> */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#207: FILE: lib/hashtab.c:4:
+ * $

ERROR:CODE_INDENT: code indent should use tabs where possible
#223: FILE: lib/hashtab.c:20:
+               int (*keycmp)(struct hashtab *h, void *key1, void *key2),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: lib/hashtab.c:20:
+               int (*keycmp)(struct hashtab *h, void *key1, void *key2),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: lib/hashtab.c:21:
+               u32 size)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: lib/hashtab.c:21:
+               u32 size)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#230: FILE: lib/hashtab.c:27:
+	if (p == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#238: FILE: lib/hashtab.c:35:
+	p->htable = kmalloc(sizeof(p) * size, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p->htable"
#239: FILE: lib/hashtab.c:36:
+	if (p->htable == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#263: FILE: lib/hashtab.c:60:
+^I} $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!newnode"
#269: FILE: lib/hashtab.c:66:
+	if (newnode == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur"
#300: FILE: lib/hashtab.c:97:
+	while (cur != NULL && h->keycmp(h, key, cur->key) > 0) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cur"
#305: FILE: lib/hashtab.c:102:
+	if (cur == NULL || (h->keycmp(h, key, cur->key) != 0))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!last"
#308: FILE: lib/hashtab.c:105:
+	if (last == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur"
#333: FILE: lib/hashtab.c:130:
+	while (cur != NULL && h->keycmp(h, key, cur->key) > 0) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!newnode"
#345: FILE: lib/hashtab.c:142:
+		if (newnode == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur"
#372: FILE: lib/hashtab.c:169:
+	while (cur != NULL && h->keycmp(h, key, cur->key) > 0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cur"
#375: FILE: lib/hashtab.c:172:
+	if (cur == NULL || (h->keycmp(h, key, cur->key) != 0))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur"
#391: FILE: lib/hashtab.c:188:
+		while (cur != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur"
#418: FILE: lib/hashtab.c:215:
+		while (cur != NULL) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#428: FILE: lib/hashtab.c:225:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#430: FILE: lib/hashtab.c:227:
+                                 int (*apply)(void *k, void *d, void *args),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#430: FILE: lib/hashtab.c:227:
+                                 int (*apply)(void *k, void *d, void *args),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#431: FILE: lib/hashtab.c:228:
+                                 void (*destroy)(void *k, void *d, void *args),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#431: FILE: lib/hashtab.c:228:
+                                 void (*destroy)(void *k, void *d, void *args),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#432: FILE: lib/hashtab.c:229:
+                                 void *args)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#432: FILE: lib/hashtab.c:229:
+                                 void *args)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur"
#444: FILE: lib/hashtab.c:241:
+		while (cur != NULL) {

WARNING:RETURN_VOID: void function return statements are not generally useful
#465: FILE: lib/hashtab.c:262:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#488: FILE: lib/hashtab.c:285:
+^I$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#495: FILE: lib/hashtab.c:292:
+EXPORT_SYMBOL_GPL(hashtab_create);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#496: FILE: lib/hashtab.c:293:
+EXPORT_SYMBOL_GPL(hashtab_insert);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#497: FILE: lib/hashtab.c:294:
+EXPORT_SYMBOL_GPL(hashtab_remove);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#498: FILE: lib/hashtab.c:295:
+EXPORT_SYMBOL_GPL(hashtab_replace);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#499: FILE: lib/hashtab.c:296:
+EXPORT_SYMBOL_GPL(hashtab_search);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#500: FILE: lib/hashtab.c:297:
+EXPORT_SYMBOL_GPL(hashtab_destroy);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#501: FILE: lib/hashtab.c:298:
+EXPORT_SYMBOL_GPL(hashtab_map);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#502: FILE: lib/hashtab.c:299:
+EXPORT_SYMBOL_GPL(hashtab_map_remove_on_error);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#503: FILE: lib/hashtab.c:300:
+EXPORT_SYMBOL_GPL(hashtab_stat);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1027: FILE: security/selinux/ss/Makefile:9:
+ss-objs := ebitmap.o symtab.o sidtab.o avtab.o policydb.o services.o $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1159: FILE: security/selinux/ss/policydb.c:243:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1163: FILE: security/selinux/ss/policydb.c:247:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1165: FILE: security/selinux/ss/policydb.c:249:
+		printk("%s:  %d entries and %d/%d buckets used, longest "

WARNING:SPLIT_STRING: quoted string split across lines
#1166: FILE: security/selinux/ss/policydb.c:250:
+		printk("%s:  %d entries and %d/%d buckets used, longest "
+		       "chain length %d\n", symtab_name[i], h->nel, info.slots_used,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1298: FILE: security/selinux/ss/policydb.c:574:
+static int perm_read(policydb_t * p, struct hashtab * h, void * fp)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1298: FILE: security/selinux/ss/policydb.c:574:
+static int perm_read(policydb_t * p, struct hashtab * h, void * fp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1298: FILE: security/selinux/ss/policydb.c:574:
+static int perm_read(policydb_t * p, struct hashtab * h, void * fp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1307: FILE: security/selinux/ss/policydb.c:614:
+static int common_read(policydb_t * p, struct hashtab * h, void * fp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1307: FILE: security/selinux/ss/policydb.c:614:
+static int common_read(policydb_t * p, struct hashtab * h, void * fp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1307: FILE: security/selinux/ss/policydb.c:614:
+static int common_read(policydb_t * p, struct hashtab * h, void * fp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1316: FILE: security/selinux/ss/policydb.c:663:
+static int class_read(policydb_t * p, struct hashtab * h, void * fp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1316: FILE: security/selinux/ss/policydb.c:663:
+static int class_read(policydb_t * p, struct hashtab * h, void * fp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1316: FILE: security/selinux/ss/policydb.c:663:
+static int class_read(policydb_t * p, struct hashtab * h, void * fp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1325: FILE: security/selinux/ss/policydb.c:819:
+static int role_read(policydb_t * p, struct hashtab * h, void * fp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1325: FILE: security/selinux/ss/policydb.c:819:
+static int role_read(policydb_t * p, struct hashtab * h, void * fp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1325: FILE: security/selinux/ss/policydb.c:819:
+static int role_read(policydb_t * p, struct hashtab * h, void * fp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1334: FILE: security/selinux/ss/policydb.c:874:
+static int type_read(policydb_t * p, struct hashtab * h, void * fp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1334: FILE: security/selinux/ss/policydb.c:874:
+static int type_read(policydb_t * p, struct hashtab * h, void * fp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1334: FILE: security/selinux/ss/policydb.c:874:
+static int type_read(policydb_t * p, struct hashtab * h, void * fp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1343: FILE: security/selinux/ss/policydb.c:912:
+static int user_read(policydb_t * p, struct hashtab * h, void * fp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1343: FILE: security/selinux/ss/policydb.c:912:
+static int user_read(policydb_t * p, struct hashtab * h, void * fp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1343: FILE: security/selinux/ss/policydb.c:912:
+static int user_read(policydb_t * p, struct hashtab * h, void * fp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1352: FILE: security/selinux/ss/policydb.c:957:
+static int (*read_f[SYM_NUM]) (policydb_t * p, struct hashtab * h, void * fp) =

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1352: FILE: security/selinux/ss/policydb.c:957:
+static int (*read_f[SYM_NUM]) (policydb_t * p, struct hashtab * h, void * fp) =

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1352: FILE: security/selinux/ss/policydb.c:957:
+static int (*read_f[SYM_NUM]) (policydb_t * p, struct hashtab * h, void * fp) =

ERROR:CODE_INDENT: code indent should use tabs where possible
#1364: FILE: security/selinux/ss/services.c:448:
+^I^I^I^I^I           scontextp);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1382: FILE: security/selinux/ss/services.c:478:
+^I^I^I^I^I           scontextp);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1406: FILE: security/selinux/ss/services.c:733:
+		printk("security:  permission %s disappeared", (char *)key);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1411: FILE: security/selinux/ss/services.c:737:
+		printk("security:  the value of permission %s changed", (char *)key);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1433: FILE: security/selinux/ss/services.c:759:
+		printk("security:  class %s disappeared\n", (char *)key);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1438: FILE: security/selinux/ss/services.c:763:
+		printk("security:  the value of class %s changed\n", (char *)key);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1444: FILE: security/selinux/ss/services.c:768:
+		printk("security:  the inherits clause for the access "

WARNING:SPLIT_STRING: quoted string split across lines
#1445: FILE: security/selinux/ss/services.c:769:
+		printk("security:  the inherits clause for the access "
+		       "vector definition for class %s changed\n", (char *)key);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1452: FILE: security/selinux/ss/services.c:775:
+			printk(" in the access vector definition for class %s\n", (char *)key);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1459: FILE: security/selinux/ss/services.c:781:
+		printk(" in access vector definition for class %s\n", (char *)key);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000356929.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 40 errors, 43 warnings, 15 checks, 922 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000356929.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
