WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
> >   http://redhat.com/~mingo/exec-shield/exec-shield-on-nx-2.6.7-rc2-bk2-A7

WARNING:TYPO_SPELLING: 'litte' may be misspelled - perhaps 'little'?
#43: 
> are a litte bit too much security by obscurity for my taste.
        ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#120: FILE: arch/sparc64/kernel/sys_sparc.c:143:
+		addr = get_unmapped_area(NULL, orig_addr, len + (align_goal - PAGE_SIZE), pgoff, flags, 0);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#207: FILE: arch/i386/kernel/process.c:797:
+^Iint first_time = 1;^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#210: FILE: arch/i386/kernel/process.c:800:
+		printk("hm, %s:%d, !mmap_top.\n", current->comm, current->pid);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: arch/i386/kernel/process.c:806:
+^Iif (len > TASK_SIZE) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: arch/i386/kernel/process.c:814:
+        if (addr) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: arch/i386/kernel/process.c:814:
+        if (addr) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#225: FILE: arch/i386/kernel/process.c:815:
+                addr = PAGE_ALIGN(addr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: arch/i386/kernel/process.c:815:
+                addr = PAGE_ALIGN(addr);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#226: FILE: arch/i386/kernel/process.c:816:
+                vma = find_vma(mm, addr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: arch/i386/kernel/process.c:816:
+                vma = find_vma(mm, addr);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#227: FILE: arch/i386/kernel/process.c:817:
+^I^Iif (TASK_SIZE - len >= addr && $

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: arch/i386/kernel/process.c:820:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: arch/i386/kernel/process.c:820:
+        }$

WARNING:TYPO_SPELLING: 'cant' may be misspelled - perhaps 'can't'?
#236: FILE: arch/i386/kernel/process.c:826:
+	/* either no address requested or cant fit in requested address hole */
 	                                  ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#238: FILE: arch/i386/kernel/process.c:828:
+        addr = (mm->non_executable_cache - len)&PAGE_MASK;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: arch/i386/kernel/process.c:828:
+        addr = (mm->non_executable_cache - len)&PAGE_MASK;$

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#238: FILE: arch/i386/kernel/process.c:828:
+        addr = (mm->non_executable_cache - len)&PAGE_MASK;
                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#240: FILE: arch/i386/kernel/process.c:830:
+       ^I ^Iif (!(vma = find_vma_prev(mm, addr, &prev_vma)))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#240: FILE: arch/i386/kernel/process.c:830:
+       ^I ^Iif (!(vma = find_vma_prev(mm, addr, &prev_vma)))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: arch/i386/kernel/process.c:830:
+       ^I ^Iif (!(vma = find_vma_prev(mm, addr, &prev_vma)))$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#240: FILE: arch/i386/kernel/process.c:830:
+       	 	if (!(vma = find_vma_prev(mm, addr, &prev_vma)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#241: FILE: arch/i386/kernel/process.c:831:
+                        return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: arch/i386/kernel/process.c:831:
+                        return -ENOMEM;$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#244: FILE: arch/i386/kernel/process.c:834:
+		if (addr+len <= vma->vm_start && (!prev_vma || (addr >= prev_vma->vm_end))) {
 		        ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr >= prev_vma->vm_end'
#244: FILE: arch/i386/kernel/process.c:834:
+		if (addr+len <= vma->vm_start && (!prev_vma || (addr >= prev_vma->vm_end))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#244: FILE: arch/i386/kernel/process.c:834:
+		if (addr+len <= vma->vm_start && (!prev_vma || (addr >= prev_vma->vm_end))) {
[...]
+		} else if (mm->non_executable_cache == vma->vm_end)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#250: FILE: arch/i386/kernel/process.c:840:
+		} else if (mm->non_executable_cache == vma->vm_end)
+				mm->non_executable_cache = vma->vm_start;	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#251: FILE: arch/i386/kernel/process.c:841:
+^I^I^I^Imm->non_executable_cache = vma->vm_start;^I$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#254: FILE: arch/i386/kernel/process.c:844:
+		addr = vma->vm_start-len;
 		                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#255: FILE: arch/i386/kernel/process.c:845:
+        } while (len <= vma->vm_start);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: arch/i386/kernel/process.c:845:
+        } while (len <= vma->vm_start);$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#266: FILE: arch/i386/kernel/process.c:856:
+stock_arch_get_unmapped_area(struct file *filp, unsigned long addr,
                                           ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#267: FILE: arch/i386/kernel/process.c:857:
+stock_arch_get_unmapped_area(struct file *filp, unsigned long addr,
+		unsigned long len, unsigned long pgoff, unsigned long flags)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#283: FILE: arch/i386/kernel/process.c:873:
+	start_addr = addr = mm->free_area_cache;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#294: FILE: arch/i386/kernel/process.c:884:
+				start_addr = addr = TASK_UNMAPPED_BASE;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#310: FILE: arch/i386/kernel/process.c:900:
+unsigned long arch_get_unmapped_area(struct file *filp, unsigned long addr0,
                                                   ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#311: FILE: arch/i386/kernel/process.c:901:
+unsigned long arch_get_unmapped_area(struct file *filp, unsigned long addr0,
+		unsigned long len0, unsigned long pgoff, unsigned long flags,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 15)
#323: FILE: arch/i386/kernel/process.c:913:
+	if (!(current->flags & PF_RELOCEXEC))
+	       return stock_arch_get_unmapped_area(filp, addr0, len0, pgoff, flags);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#324: FILE: arch/i386/kernel/process.c:914:
+	       return stock_arch_get_unmapped_area(filp, addr0, len0, pgoff, flags);
 	                                           ^^^^

WARNING:TABSTOP: Statements should start on a tabstop
#324: FILE: arch/i386/kernel/process.c:914:
+	       return stock_arch_get_unmapped_area(filp, addr0, len0, pgoff, flags);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#345: FILE: arch/i386/kernel/process.c:935:
+		if ((tmp = arch_get_unmapped_nonexecutable_area(mm, addr, len)) != -ENOMEM)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#353: FILE: arch/i386/kernel/process.c:943:
+		if (TASK_SIZE - len < addr) {
+			return -ENOMEM;
+		}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_end > limit'
#388: FILE: arch/i386/kernel/process.c:978:
+			if ((vma->vm_flags & VM_EXEC) && (vma->vm_end > limit))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#408: FILE: arch/i386/kernel/process.c:998:
+#define MIN_GAP (128*1024*1024)
                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#408: FILE: arch/i386/kernel/process.c:998:
+#define MIN_GAP (128*1024*1024)
                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#409: FILE: arch/i386/kernel/process.c:999:
+#define MAX_GAP (TASK_SIZE/6*5)
                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#409: FILE: arch/i386/kernel/process.c:999:
+#define MAX_GAP (TASK_SIZE/6*5)
                             ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#431: FILE: arch/i386/kernel/signal.c:336:
+extern char __kernel_sigreturn, __kernel_rt_sigreturn, SYSENTER_RETURN;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#481: FILE: arch/i386/kernel/traps.c:456:
+^I^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_end > limit'
#484: FILE: arch/i386/kernel/traps.c:459:
+			if ((vma->vm_flags & VM_EXEC) && (vma->vm_end > limit))

WARNING:TYPO_SPELLING: 'wont' may be misspelled - perhaps 'won't'?
#497: FILE: arch/i386/kernel/traps.c:472:
+		 * we wont hit this branch next time around.
 		      ^^^^

WARNING:LONG_LINE: line length of 145 exceeds 100 columns
#501: FILE: arch/i386/kernel/traps.c:476:
+				printk("#GPF fixup (%ld[seg:%lx]) at %08lx, CPU#%d.\n", error_code, error_code/8, regs->eip, smp_processor_id());

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#501: FILE: arch/i386/kernel/traps.c:476:
+				printk("#GPF fixup (%ld[seg:%lx]) at %08lx, CPU#%d.\n", error_code, error_code/8, regs->eip, smp_processor_id());

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#501: FILE: arch/i386/kernel/traps.c:476:
+				printk("#GPF fixup (%ld[seg:%lx]) at %08lx, CPU#%d.\n", error_code, error_code/8, regs->eip, smp_processor_id());
 				                                                                              ^

WARNING:LONG_LINE: line length of 180 exceeds 100 columns
#502: FILE: arch/i386/kernel/traps.c:477:
+				printk(" exec_limit: %08lx, user_cs: %08lx/%08lx, CPU_cs: %08lx/%08lx.\n", current->mm->context.exec_limit, desc1->a, desc1->b, desc2->a, desc2->b);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#502: FILE: arch/i386/kernel/traps.c:477:
+				printk(" exec_limit: %08lx, user_cs: %08lx/%08lx, CPU_cs: %08lx/%08lx.\n", current->mm->context.exec_limit, desc1->a, desc1->b, desc2->a, desc2->b);

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#509: FILE: arch/i386/kernel/traps.c:484:
+		printk("#GPF(%ld[seg:%lx]) at %08lx, CPU#%d.\n", error_code, error_code/8, regs->eip, smp_processor_id());

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#509: FILE: arch/i386/kernel/traps.c:484:
+		printk("#GPF(%ld[seg:%lx]) at %08lx, CPU#%d.\n", error_code, error_code/8, regs->eip, smp_processor_id());

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#509: FILE: arch/i386/kernel/traps.c:484:
+		printk("#GPF(%ld[seg:%lx]) at %08lx, CPU#%d.\n", error_code, error_code/8, regs->eip, smp_processor_id());
 		                                                                       ^

WARNING:LONG_LINE: line length of 167 exceeds 100 columns
#510: FILE: arch/i386/kernel/traps.c:485:
+		printk(" exec_limit: %08lx, user_cs: %08lx/%08lx.\n", current->mm->context.exec_limit, current->mm->context.user_cs.a, current->mm->context.user_cs.b);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#510: FILE: arch/i386/kernel/traps.c:485:
+		printk(" exec_limit: %08lx, user_cs: %08lx/%08lx.\n", current->mm->context.exec_limit, current->mm->context.user_cs.a, current->mm->context.user_cs.b);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#552: FILE: arch/i386/kernel/sysenter.c:72:
+extern void SYSENTER_RETURN_OFFSET;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#580: FILE: arch/i386/kernel/sysenter.c:100:
+			install_page(current->mm, vma, addr,
+					sysenter_page, vma->vm_page_prot);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#581: FILE: arch/i386/kernel/sysenter.c:101:
+^I^I^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#582: FILE: arch/i386/kernel/sysenter.c:102:
+			
+		}

ERROR:CODE_INDENT: code indent should use tabs where possible
#589: FILE: arch/i386/kernel/sysenter.c:109:
+        vdso_enabled = simple_strtoul(str, NULL, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#589: FILE: arch/i386/kernel/sysenter.c:109:
+        vdso_enabled = simple_strtoul(str, NULL, 0);$

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#589: FILE: arch/i386/kernel/sysenter.c:109:
+        vdso_enabled = simple_strtoul(str, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:CODE_INDENT: code indent should use tabs where possible
#590: FILE: arch/i386/kernel/sysenter.c:110:
+        return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#590: FILE: arch/i386/kernel/sysenter.c:110:
+        return 1;$

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#592: FILE: arch/i386/kernel/sysenter.c:112:
+__setup("vdso=", vdso_setup);

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#647: FILE: arch/i386/mm/init.c:417:
+int use_nx = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:BRACES: Unbalanced braces around else statement
#681: FILE: arch/i386/mm/init.c:475:
+	else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#684: FILE: arch/i386/mm/init.c:478:
+			printk("Using x86 segment limits to approximate NX protection\n");

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#718: FILE: arch/ia64/ia32/binfmt_elf32.c:214:
+elf32_map (struct file *filep, unsigned long addr, struct elf_phdr *eppnt, int prot, int type, unsigned long unused)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#718: FILE: arch/ia64/ia32/binfmt_elf32.c:214:
+elf32_map (struct file *filep, unsigned long addr, struct elf_phdr *eppnt, int prot, int type, unsigned long unused)

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#729: FILE: arch/x86_64/ia32/ia32_binfmt.c:385:
+elf32_map (struct file *filep, unsigned long addr, struct elf_phdr *eppnt, int prot, int type, unsigned long unused)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#729: FILE: arch/x86_64/ia32/ia32_binfmt.c:385:
+elf32_map (struct file *filep, unsigned long addr, struct elf_phdr *eppnt, int prot, int type, unsigned long unused)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#739: FILE: include/asm-x86_64/pgalloc.h:10:
+#define arch_add_exec_range(mm, limit) do { ; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#740: FILE: include/asm-x86_64/pgalloc.h:11:
+#define arch_flush_exec_range(mm)      do { ; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#741: FILE: include/asm-x86_64/pgalloc.h:12:
+#define arch_remove_exec_range(mm, limit) do { ; } while (0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#743: FILE: include/asm-x86_64/pgalloc.h:14:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#754: FILE: include/linux/mm.h:633:
+extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#754: FILE: include/linux/mm.h:633:
+extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#754: FILE: include/linux/mm.h:633:
+extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#754: FILE: include/linux/mm.h:633:
+extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#754: FILE: include/linux/mm.h:633:
+extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#754: FILE: include/linux/mm.h:633:
+extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#754: FILE: include/linux/mm.h:633:
+extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#754: FILE: include/linux/mm.h:633:
+extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#768: FILE: include/linux/resource.h:58:
+#define _STK_LIM	(10*1024*1024)
                 	   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#768: FILE: include/linux/resource.h:58:
+#define _STK_LIM	(10*1024*1024)
                 	        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#769: FILE: include/linux/resource.h:59:
+#define EXEC_STACK_BIAS	(2*1024*1024)
                        	  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#769: FILE: include/linux/resource.h:59:
+#define EXEC_STACK_BIAS	(2*1024*1024)
                        	       ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#809: FILE: include/asm-ppc64/pgalloc.h:14:
+#define arch_add_exec_range(mm, limit) do { ; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#810: FILE: include/asm-ppc64/pgalloc.h:15:
+#define arch_flush_exec_range(mm)      do { ; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#811: FILE: include/asm-ppc64/pgalloc.h:16:
+#define arch_remove_exec_range(mm, limit) do { ; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#822: FILE: include/asm-ia64/pgalloc.h:26:
+#define arch_add_exec_range(mm, limit)		do { ; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#823: FILE: include/asm-ia64/pgalloc.h:27:
+#define arch_flush_exec_range(mm)		do { ; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#824: FILE: include/asm-ia64/pgalloc.h:28:
+#define arch_remove_exec_range(mm, limit)	do { ; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#835: FILE: include/asm-ppc/pgalloc.h:43:
+#define arch_add_exec_range(mm, limit)         do { ; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#836: FILE: include/asm-ppc/pgalloc.h:44:
+#define arch_flush_exec_range(mm)              do { ; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#837: FILE: include/asm-ppc/pgalloc.h:45:
+#define arch_remove_exec_range(mm, limit)      do { ; } while (0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#839: FILE: include/asm-ppc/pgalloc.h:47:
+
+

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#848: FILE: include/asm-sparc/pgalloc.h:69:
+#define arch_add_exec_range(mm, limit)		do { ; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#849: FILE: include/asm-sparc/pgalloc.h:70:
+#define arch_flush_exec_range(mm)		do { ; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#850: FILE: include/asm-sparc/pgalloc.h:71:
+#define arch_remove_exec_range(mm, limit)	do { ; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#859: FILE: include/asm-s390/pgalloc.h:22:
+#define arch_add_exec_range(mm, limit) do { ; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#860: FILE: include/asm-s390/pgalloc.h:23:
+#define arch_flush_exec_range(mm)      do { ; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#861: FILE: include/asm-s390/pgalloc.h:24:
+#define arch_remove_exec_range(mm, limit) do { ; } while (0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#879: FILE: include/asm-i386/desc.h:133:
+#define load_user_cs_desc(cpu, mm) \
+    	cpu_gdt_table[(cpu)][GDT_ENTRY_DEFAULT_USER_CS] = (mm)->context.user_cs

ERROR:CODE_INDENT: code indent should use tabs where possible
#880: FILE: include/asm-i386/desc.h:134:
+    ^Icpu_gdt_table[(cpu)][GDT_ENTRY_DEFAULT_USER_CS] = (mm)->context.user_cs$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#880: FILE: include/asm-i386/desc.h:134:
+    ^Icpu_gdt_table[(cpu)][GDT_ENTRY_DEFAULT_USER_CS] = (mm)->context.user_cs$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#880: FILE: include/asm-i386/desc.h:134:
+    ^Icpu_gdt_table[(cpu)][GDT_ENTRY_DEFAULT_USER_CS] = (mm)->context.user_cs$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#882: FILE: include/asm-i386/desc.h:136:
+extern void arch_add_exec_range(struct mm_struct *mm, unsigned long limit);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#883: FILE: include/asm-i386/desc.h:137:
+extern void arch_remove_exec_range(struct mm_struct *mm, unsigned long limit);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#884: FILE: include/asm-i386/desc.h:138:
+extern void arch_flush_exec_range(struct mm_struct *mm);

CHECK:SPACING: No space is necessary after a cast
#918: FILE: include/asm-i386/elf.h:134:
+#define VSYSCALL_EHDR	((const struct elfhdr *) VSYSCALL_BASE)

CHECK:SPACING: No space is necessary after a cast
#919: FILE: include/asm-i386/elf.h:135:
+#define VSYSCALL_OFFSET	((unsigned long) &__kernel_vsyscall)

CHECK:SPACING: No space is necessary after a cast
#928: FILE: include/asm-i386/elf.h:140:
+#define __VSYSCALL_EHDR	((const struct elfhdr *) __VSYSCALL_BASE)

CHECK:SPACING: No space is necessary after a cast
#950: FILE: include/asm-i386/elf.h:162:
+		(const struct elf_phdr *) (__VSYSCALL_BASE		      \

CHECK:SPACING: No space is necessary after a cast
#965: FILE: include/asm-i386/elf.h:184:
+		(const struct elf_phdr *) (__VSYSCALL_BASE		      \

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#978: FILE: include/asm-i386/elf.h:197:
+extern void map_vsyscall(void);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1040: FILE: include/asm-i386/processor.h:303:
+#define TASK_UNMAPPED_BASE	PAGE_ALIGN(TASK_SIZE/3)
                           	                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1043: FILE: include/asm-i386/processor.h:306:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1043: FILE: include/asm-i386/processor.h:306:
+ $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1045: FILE: include/asm-i386/processor.h:308:
+extern unsigned long arch_align_stack(unsigned long sp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1048: FILE: include/asm-i386/processor.h:311:
+extern unsigned long mmap_top(void);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1085: FILE: include/asm-sparc64/pgalloc.h:239:
+#define arch_add_exec_range(mm, limit)		do { ; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1086: FILE: include/asm-sparc64/pgalloc.h:240:
+#define arch_flush_exec_range(mm)		do { ; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1087: FILE: include/asm-sparc64/pgalloc.h:241:
+#define arch_remove_exec_range(mm, limit)	do { ; } while (0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1099: FILE: fs/proc/array.c:329:
+	if (current->uid == task->uid || current->euid == task->uid ||
+							capable(CAP_SYS_NICE))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1111: FILE: fs/proc/base.c:114:
+	E(PROC_TGID_MAPS,      "maps",    S_IFREG|S_IRUSR),
 	                                         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#1111: FILE: fs/proc/base.c:114:
+	E(PROC_TGID_MAPS,      "maps",    S_IFREG|S_IRUSR),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1120: FILE: fs/proc/base.c:136:
+	E(PROC_TID_MAPS,       "maps",    S_IFREG|S_IRUSR),
 	                                         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#1120: FILE: fs/proc/base.c:136:
+	E(PROC_TID_MAPS,       "maps",    S_IFREG|S_IRUSR),

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1135: FILE: fs/proc/task_mmu.c:41:
+#if __i386__

Architecture specific defines should be avoided wherever
possible.

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1145: FILE: fs/proc/task_mmu.c:50:
+#if __i386__

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1171: FILE: fs/exec.c:394:
+	stack_base = arch_align_stack(STACK_TOP - MAX_ARG_PAGES*PAGE_SIZE);
 	                                                       ^

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1194: FILE: fs/exec.c:897:
+#ifdef __i386__

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXGRP' are not preferred. Consider using octal permissions '0010'.
#1207: FILE: fs/exec.c:909:
+		if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP)) {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXGRP' are not preferred. Consider using octal permissions '0010'.
#1207: FILE: fs/exec.c:909:
+		if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP)) {

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1209: FILE: fs/exec.c:911:
+#ifdef __i386__

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1224: FILE: fs/binfmt_elf.c:49:
+static unsigned long elf_map (struct file *, unsigned long, struct elf_phdr *, int, int, unsigned long);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1224: FILE: fs/binfmt_elf.c:49:
+static unsigned long elf_map (struct file *, unsigned long, struct elf_phdr *, int, int, unsigned long);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1279: FILE: fs/binfmt_elf.c:284:
+	if (total_size) {
[...]
+	} else
[...]

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1283: FILE: fs/binfmt_elf.c:288:
+			do_munmap(current->mm, map_addr+size, total_size-size);
 			                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1283: FILE: fs/binfmt_elf.c:288:
+			do_munmap(current->mm, map_addr+size, total_size-size);
 			                                                ^

CHECK:BRACES: Unbalanced braces around else statement
#1284: FILE: fs/binfmt_elf.c:289:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1286: FILE: fs/binfmt_elf.c:291:
+^I^I$

WARNING:TABSTOP: Statements should start on a tabstop
#1349: FILE: fs/binfmt_elf.c:386:
+	    else if (no_base && interp_elf_ex->e_type == ET_DYN)

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1353: FILE: fs/binfmt_elf.c:389:
+	    map_addr = elf_map(interpreter, load_addr + vaddr, eppnt, elf_prot, elf_type, total_size);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#1384: FILE: fs/binfmt_elf.c:668:
+	if (current->personality == PER_LINUX)
+	switch (exec_shield) {

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1409: FILE: fs/binfmt_elf.c:738:
+#ifdef __i386__

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1442: FILE: fs/binfmt_elf.c:781:
 
+

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1464: FILE: fs/binfmt_elf.c:824:
+#ifdef __i386__

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1528: FILE: kernel/signal.c:1549:
+int print_fatal_signals = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1534: FILE: kernel/signal.c:1555:
+	unsigned char insn;
+	printk("%s/%d: potentially unexpected fatal signal %d.\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1534: FILE: kernel/signal.c:1555:
+	printk("%s/%d: potentially unexpected fatal signal %d.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1535: FILE: kernel/signal.c:1556:
+	printk("%s/%d: potentially unexpected fatal signal %d.\n",
+		current->comm, current->pid, signr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1536: FILE: kernel/signal.c:1557:
+^I^I$

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1537: FILE: kernel/signal.c:1558:
+#ifdef __i386__

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1538: FILE: kernel/signal.c:1559:
+	printk("code at %08lx: ", regs->eip);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1541: FILE: kernel/signal.c:1562:
+		printk("%02x ", insn);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1543: FILE: kernel/signal.c:1564:
+#endif^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1544: FILE: kernel/signal.c:1565:
+	printk("\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1550: FILE: kernel/signal.c:1571:
+	get_option (&str, &print_fatal_signals);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1555: FILE: kernel/signal.c:1576:
+__setup("print-fatal-signals=", setup_print_fatal_signals);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'signr == SIGSEGV'
#1563: FILE: kernel/signal.c:1768:
+		if ((signr == SIGSEGV) && print_fatal_signals) {

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1586: FILE: kernel/sysctl.c:68:
+extern unsigned int vdso_enabled;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1592: FILE: kernel/sysctl.c:74:
+        get_option (&str, &exec_shield);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1592: FILE: kernel/sysctl.c:74:
+        get_option (&str, &exec_shield);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1592: FILE: kernel/sysctl.c:74:
+        get_option (&str, &exec_shield);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1594: FILE: kernel/sysctl.c:76:
+        return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1594: FILE: kernel/sysctl.c:76:
+        return 1;$

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1597: FILE: kernel/sysctl.c:79:
+__setup("exec-shield=", setup_exec_shield);

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1621: FILE: kernel/sysctl.c:299:
+#if __i386__

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1710: FILE: mm/mmap.c:1158:
 
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1727: FILE: mm/mmap.c:1201:
+	if (over_stack_limit(address - vma->vm_start) ||
 			((vma->vm_mm->total_vm + grow) << PAGE_SHIFT) >

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1736: FILE: mm/mmap.c:1262:
+	if (over_stack_limit(vma->vm_end - address) ||
 			((vma->vm_mm->total_vm + grow) << PAGE_SHIFT) >

CHECK:BRACES: braces {} should be used on all arms of this statement
#1768: FILE: mm/mmap.c:1501:
+	if (new_below) {
[...]
+			arch_remove_exec_range(mm, old_end);
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1776: FILE: mm/mmap.c:1508:
+	} else

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000277206.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 28 errors, 90 warnings, 66 checks, 1587 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000277206.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
