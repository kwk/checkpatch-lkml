WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#50: 
Signed-Off-By: Robert Love <rml@novell.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#63: FILE: include/linux/kobject.h:61:
+extern char * kobject_get_path(struct kset *, struct kobject *, int);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#63: FILE: include/linux/kobject.h:61:
+extern char * kobject_get_path(struct kset *, struct kobject *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kset *' should also have an identifier name
#63: FILE: include/linux/kobject.h:61:
+extern char * kobject_get_path(struct kset *, struct kobject *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#63: FILE: include/linux/kobject.h:61:
+extern char * kobject_get_path(struct kset *, struct kobject *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#63: FILE: include/linux/kobject.h:61:
+extern char * kobject_get_path(struct kset *, struct kobject *, int);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#83: FILE: lib/kobject.c:114:
+char * kobject_get_path(struct kset *kset, struct kobject *kobj, int gfp_mask)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#88: FILE: lib/kobject.c:119:
+	len = get_kobj_path_length (kset, kobj);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#89: FILE: lib/kobject.c:120:
+	path = kmalloc (len, gfp_mask);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#92: FILE: lib/kobject.c:123:
+	memset (path, 0x00, len);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#93: FILE: lib/kobject.c:124:
+	fill_kobj_path (kset, kobj, path, len);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#115: FILE: lib/kobject.c:188:
+	kobj_path = kobject_get_path (kset, kobj, GFP_KERNEL);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#128: FILE: lib/kobject.c:648:
+EXPORT_SYMBOL(kobject_get_path);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000262666.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 10 warnings, 1 checks, 65 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000262666.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
