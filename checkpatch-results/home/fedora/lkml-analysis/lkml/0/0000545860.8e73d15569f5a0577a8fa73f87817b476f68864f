WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#62: 
------------------------------------------------------------------------------------

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#208: FILE: fs/read_write.c:132:
+				if (file->f_op && (read = file->f_op->read) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#210: FILE: fs/read_write.c:134:
+					if (ret > 0) {
+						current->rchar += ret;
+					}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#223: FILE: fs/read_write.c:164:
+				if (file->f_op && (write = file->f_op->write) != NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#225: FILE: fs/read_write.c:166:
+					if (ret > 0) {
+						current->wchar += ret;
+					}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#237: FILE: fs/read_write.c:299:
+	if (ret > 0) {
+		current->rchar += ret;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#248: FILE: fs/read_write.c:323:
+	if (ret > 0) {
+		current->wchar += ret;
+	}

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#288: FILE: include/asm-i386/unistd.h:233:
+#if defined(CONFIG_CSA_JOB_ACCT) || defined(CONFIG_CSA_JOB_ACCT_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#301: FILE: include/asm-ia64/unistd.h:210:
+#if defined(CONFIG_CSA_JOB_ACCT) || defined(CONFIG_CSA_JOB_ACCT_MODULE)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#311: FILE: include/linux/csa_internal.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#325: FILE: include/linux/csa_internal.h:15:
+ * with this program; if not, write to the Free Software Foundation, Inc.,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#326: FILE: include/linux/csa_internal.h:16:
+ * 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#347: FILE: include/linux/csa_internal.h:37:
+#if defined (CONFIG_CSA_JOB_ACCT) || defined (CONFIG_CSA_JOB_ACCT_MODULE)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#347: FILE: include/linux/csa_internal.h:37:
+#if defined (CONFIG_CSA_JOB_ACCT) || defined (CONFIG_CSA_JOB_ACCT_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#347: FILE: include/linux/csa_internal.h:37:
+#if defined (CONFIG_CSA_JOB_ACCT) || defined (CONFIG_CSA_JOB_ACCT_MODULE)

WARNING:SPACING: Unnecessary space before function pointer arguments
#364: FILE: include/linux/csa_internal.h:54:
+	int	(*do_acctctl) (int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#364: FILE: include/linux/csa_internal.h:54:
+	int	(*do_acctctl) (int, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#364: FILE: include/linux/csa_internal.h:54:
+	int	(*do_acctctl) (int, void *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#365: FILE: include/linux/csa_internal.h:55:
+	void	(*do_csa_acct) (int, struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#365: FILE: include/linux/csa_internal.h:55:
+	void	(*do_csa_acct) (int, struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#365: FILE: include/linux/csa_internal.h:55:
+	void	(*do_csa_acct) (int, struct task_struct *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#387: FILE: include/linux/csa_internal.h:77:
+^I}^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#390: FILE: include/linux/csa_internal.h:80:
+extern int  register_csa(struct csa_module_s *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#391: FILE: include/linux/csa_internal.h:81:
+extern void unregister_csa(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#392: FILE: include/linux/csa_internal.h:82:
+extern void csa_acct(int, struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#392: FILE: include/linux/csa_internal.h:82:
+extern void csa_acct(int, struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#392: FILE: include/linux/csa_internal.h:82:
+extern void csa_acct(int, struct task_struct *);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#396: FILE: include/linux/csa_internal.h:86:
+#define csa_update_integrals()		do { } while (0);

do {} while(0) macros should not have a trailing semicolon.

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#397: FILE: include/linux/csa_internal.h:87:
+#define csa_clear_integrals(task)	do { } while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#398: FILE: include/linux/csa_internal.h:88:
+#define csa_acct(exitcode, task)	do { } while (0);

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#440: FILE: include/linux/sched.h:406:
+#if defined(CONFIG_CSA_JOB_ACCT) || defined(CONFIG_CSA_JOB_ACCT_MODULE)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#456: FILE: include/linux/sched.h:744:
+		if (current->mm->hiwater_rss < current->mm->rss) {
+			current->mm->hiwater_rss = current->mm->rss;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#459: FILE: include/linux/sched.h:747:
+		if (current->mm->hiwater_vm < current->mm->total_vm) {
+			current->mm->hiwater_vm = current->mm->total_vm;
+		}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#483: FILE: kernel/csa.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#497: FILE: kernel/csa.c:15:
+ * with this program; if not, write to the Free Software Foundation, Inc.,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#498: FILE: kernel/csa.c:16:
+ * 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.$

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#508: FILE: kernel/csa.c:26:
+ *	This file (kernel/csa.c) contains the procedures to handle kernel CSA

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#529: FILE: kernel/csa.c:47:
+#if defined (CONFIG_CSA_JOB_ACCT) || defined (CONFIG_CSA_JOB_ACCT_MODULE)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#529: FILE: kernel/csa.c:47:
+#if defined (CONFIG_CSA_JOB_ACCT) || defined (CONFIG_CSA_JOB_ACCT_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#529: FILE: kernel/csa.c:47:
+#if defined (CONFIG_CSA_JOB_ACCT) || defined (CONFIG_CSA_JOB_ACCT_MODULE)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#541: FILE: kernel/csa.c:59:
+};
+static struct csa_module_s *csa_op = &csa_operations;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#542: FILE: kernel/csa.c:60:
+static int csa_registered = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#547: FILE: kernel/csa.c:65:
+ *  The CSA csa_job_acct.c code calls this during initialization to set its $

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#556: FILE: kernel/csa.c:74:
+{
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#559: FILE: kernel/csa.c:77:
+	if (csa_callbacks == (struct csa_module_s *)NULL) {
+		return -EINVAL;
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#568: FILE: kernel/csa.c:86:
+		printk(KERN_WARNING "%s: %s\n",

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#571: FILE: kernel/csa.c:89:
+		return -EBUSY;
+	} else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#574: FILE: kernel/csa.c:92:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#575: FILE: kernel/csa.c:93:
+^Imemcpy((char *)csa_op, (char *)csa_callbacks, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#576: FILE: kernel/csa.c:94:
+	memcpy((char *)csa_op, (char *)csa_callbacks, 
+		sizeof(struct csa_module_s));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#578: FILE: kernel/csa.c:96:
+	printk(KERN_INFO "%s: %s\n", func_id, "CSA support registered");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#591: FILE: kernel/csa.c:109:
+	printk(KERN_INFO "%s: %s\n", func_id, "CSA support unregistered");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!csa_op->do_acctctl"
#604: FILE: kernel/csa.c:122:
+	if (csa_op->do_acctctl == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#606: FILE: kernel/csa.c:124:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#607: FILE: kernel/csa.c:125:
+		return -ENOSYS;
+	} else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#608: FILE: kernel/csa.c:126:
+		if (csa_op->module) {
+			__MOD_INC_USE_COUNT(csa_op->module);
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#612: FILE: kernel/csa.c:130:
+		if (csa_op->module) {
+			__MOD_DEC_USE_COUNT(csa_op->module);
+		}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#628: FILE: kernel/csa.c:146:
+{
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "csa_op->do_csa_acct"
#629: FILE: kernel/csa.c:147:
+	if (csa_op->do_csa_acct != NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#630: FILE: kernel/csa.c:148:
+		if (csa_op->module) {
+			__MOD_INC_USE_COUNT(csa_op->module);
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#634: FILE: kernel/csa.c:152:
+		if (csa_op->module) {
+			__MOD_DEC_USE_COUNT(csa_op->module);
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#675: FILE: kernel/fork.c:346:
+^Imm->hiwater_vm = mm->total_vm;^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#684: FILE: kernel/fork.c:633:
+	p->rchar = p->wchar = p->rblk = p->wblk = p->syscr = p->syscw = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#708: FILE: kernel/ksyms.c:488:
+#if defined(CONFIG_CSA_JOB_ACCT) || defined(CONFIG_CSA_JOB_ACCT_MODULE)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#711: FILE: kernel/ksyms.c:491:
+EXPORT_SYMBOL(csa_acct);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000545860.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 43 warnings, 10 checks, 696 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000545860.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
