CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#149: FILE: arch/ppc/kernel/setup.c:618:
 }
+#ifdef CONFIG_BOOKE_WDT

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#153: FILE: arch/ppc/kernel/setup.c:622:
+	extern u32 wdt_enable;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 15)
#155: FILE: arch/ppc/kernel/setup.c:624:
+	if (p && strncmp(p, "0", 1) != 0)
+	       wdt_enable = 1;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#160: FILE: arch/ppc/kernel/setup.c:629:
+}
+early_param("wdt", early_parse_wdt);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#162: FILE: arch/ppc/kernel/setup.c:631:
+int __init early_parse_wdt_period (char *p)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#164: FILE: arch/ppc/kernel/setup.c:633:
+	extern u32 wdt_period;

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#167: FILE: arch/ppc/kernel/setup.c:636:
+		wdt_period = simple_strtoul(p, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#171: FILE: arch/ppc/kernel/setup.c:640:
+}
+early_param("wdt_period", early_parse_wdt_period);

CHECK:CAMELCASE: Avoid CamelCase: <WatchdogHandler>
#188: FILE: arch/ppc/kernel/traps.c:912:
+void __attribute__ ((weak)) WatchdogHandler(struct pt_regs *regs)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#188: FILE: arch/ppc/kernel/traps.c:912:
+void __attribute__ ((weak)) WatchdogHandler(struct pt_regs *regs)

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#191: FILE: arch/ppc/kernel/traps.c:915:
+	mtspr(SPRN_TCR, mfspr(SPRN_TCR)&(~TCR_WIE));
 	                               ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#193: FILE: arch/ppc/kernel/traps.c:917:
+	return;
+}

CHECK:CAMELCASE: Avoid CamelCase: <WatchdogException>
#195: FILE: arch/ppc/kernel/traps.c:919:
+void WatchdogException(struct pt_regs *regs)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#197: FILE: arch/ppc/kernel/traps.c:921:
+	printk (KERN_EMERG "PowerPC Book-E Watchdog Exception\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#197: FILE: arch/ppc/kernel/traps.c:921:
+	printk (KERN_EMERG "PowerPC Book-E Watchdog Exception\n");

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#261: FILE: drivers/char/watchdog/Kconfig:349:
+config BOOKE_WDT
+	tristate "PowerPC Book-E Watchdog Timer"
+	depends on WATCHDOG && (BOOKE || 4xx)
+
 # MIPS Architecture
 

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#280: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#284: FILE: drivers/char/watchdog/booke_wdt.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#285: FILE: drivers/char/watchdog/booke_wdt.c:2:
+ * drivers/char/watchdog/booke_wdt.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#308: FILE: drivers/char/watchdog/booke_wdt.c:25:
+#include <asm/uaccess.h>

WARNING:TYPO_SPELLING: 'watchog' may be misspelled - perhaps 'watchdog'?
#313: FILE: drivers/char/watchdog/booke_wdt.c:30:
+ * trigger a watchog timeout. This watchdog timeout will occur 3 times, the
              ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#324: FILE: drivers/char/watchdog/booke_wdt.c:41:
+u32 wdt_enable = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#328: FILE: drivers/char/watchdog/booke_wdt.c:45:
+#define WDTP(x)		((((63-x)&0x3)<<30)|(((63-x)&0x3c)<<15))
                		      ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#328: FILE: drivers/char/watchdog/booke_wdt.c:45:
+#define WDTP(x)		((((63-x)&0x3)<<30)|(((63-x)&0x3c)<<15))
                		         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#328: FILE: drivers/char/watchdog/booke_wdt.c:45:
+#define WDTP(x)		((((63-x)&0x3)<<30)|(((63-x)&0x3c)<<15))
                		              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#328: FILE: drivers/char/watchdog/booke_wdt.c:45:
+#define WDTP(x)		((((63-x)&0x3)<<30)|(((63-x)&0x3c)<<15))
                		                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#328: FILE: drivers/char/watchdog/booke_wdt.c:45:
+#define WDTP(x)		((((63-x)&0x3)<<30)|(((63-x)&0x3c)<<15))
                		                         ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#328: FILE: drivers/char/watchdog/booke_wdt.c:45:
+#define WDTP(x)		((((63-x)&0x3)<<30)|(((63-x)&0x3c)<<15))
                		                            ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#328: FILE: drivers/char/watchdog/booke_wdt.c:45:
+#define WDTP(x)		((((63-x)&0x3)<<30)|(((63-x)&0x3c)<<15))
                		                                  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#328: FILE: drivers/char/watchdog/booke_wdt.c:45:
+#define WDTP(x)		((((63-x)&0x3)<<30)|(((63-x)&0x3c)<<15))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#328: FILE: drivers/char/watchdog/booke_wdt.c:45:
+#define WDTP(x)		((((63-x)&0x3)<<30)|(((63-x)&0x3c)<<15))

WARNING:INLINE: plain inline is preferred over __inline__
#336: FILE: drivers/char/watchdog/booke_wdt.c:53:
+static __inline__ void booke_wdt_enable(void)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#341: FILE: drivers/char/watchdog/booke_wdt.c:58:
+	val |= (TCR_WIE|TCR_WRC(WRC_CHIP)|WDTP(wdt_period));
 	               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#341: FILE: drivers/char/watchdog/booke_wdt.c:58:
+	val |= (TCR_WIE|TCR_WRC(WRC_CHIP)|WDTP(wdt_period));
 	                                 ^

WARNING:INLINE: plain inline is preferred over __inline__
#349: FILE: drivers/char/watchdog/booke_wdt.c:66:
+static __inline__ void booke_wdt_ping(void)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#351: FILE: drivers/char/watchdog/booke_wdt.c:68:
+	mtspr(SPRN_TSR, TSR_ENW|TSR_WIS);
 	                       ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#357: FILE: drivers/char/watchdog/booke_wdt.c:74:
+static ssize_t booke_wdt_write (struct file *file, const char *buf,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#365: FILE: drivers/char/watchdog/booke_wdt.c:82:
+  .options = WDIOF_SETTIMEOUT | WDIOF_KEEPALIVEPING,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#366: FILE: drivers/char/watchdog/booke_wdt.c:83:
+  .firmware_version = 0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#367: FILE: drivers/char/watchdog/booke_wdt.c:84:
+  .identity = "PowerPC Book-E Watchdog",$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#373: FILE: drivers/char/watchdog/booke_wdt.c:90:
+static int booke_wdt_ioctl (struct inode *inode, struct file *file,

CHECK:SPACING: No space is necessary after a cast
#380: FILE: drivers/char/watchdog/booke_wdt.c:97:
+		if (copy_to_user ((struct watchdog_info *) arg, &ident,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#380: FILE: drivers/char/watchdog/booke_wdt.c:97:
+		if (copy_to_user ((struct watchdog_info *) arg, &ident,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#381: FILE: drivers/char/watchdog/booke_wdt.c:98:
+		if (copy_to_user ((struct watchdog_info *) arg, &ident,
+				sizeof(struct watchdog_info)))

CHECK:SPACING: No space is necessary after a cast
#384: FILE: drivers/char/watchdog/booke_wdt.c:101:
+		return put_user(ident.options, (u32 *) arg);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#389: FILE: drivers/char/watchdog/booke_wdt.c:106:
+		return (tmp ? 1 : 0);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:SPACING: No space is necessary after a cast
#394: FILE: drivers/char/watchdog/booke_wdt.c:111:
+		if (get_user(wdt_period, (u32 *) arg))

CHECK:SPACING: spaces preferred around that '&' (ctx:VxO)
#396: FILE: drivers/char/watchdog/booke_wdt.c:113:
+		mtspr(SPRN_TCR, (mfspr(SPRN_TCR)&~WDTP(0))|WDTP(wdt_period));
 		                                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#396: FILE: drivers/char/watchdog/booke_wdt.c:113:
+		mtspr(SPRN_TCR, (mfspr(SPRN_TCR)&~WDTP(0))|WDTP(wdt_period));
 		                                          ^

CHECK:SPACING: No space is necessary after a cast
#399: FILE: drivers/char/watchdog/booke_wdt.c:116:
+		return put_user(wdt_period, (u32 *) arg);

CHECK:SPACING: No space is necessary after a cast
#401: FILE: drivers/char/watchdog/booke_wdt.c:118:
+		if (get_user(tmp, (u32 *) arg))

CHECK:BRACES: braces {} should be used on all arms of this statement
#403: FILE: drivers/char/watchdog/booke_wdt.c:120:
+		if (tmp == WDIOS_ENABLECARD) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#406: FILE: drivers/char/watchdog/booke_wdt.c:123:
+			break;
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#406: FILE: drivers/char/watchdog/booke_wdt.c:123:
+		} else

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#415: FILE: drivers/char/watchdog/booke_wdt.c:132:
+}
+/*

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#418: FILE: drivers/char/watchdog/booke_wdt.c:135:
+static int booke_wdt_open (struct inode *inode, struct file *file)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#423: FILE: drivers/char/watchdog/booke_wdt.c:140:
+		printk (KERN_INFO "PowerPC Book-E Watchdog Timer Enabled (wdt_period=%d)\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#423: FILE: drivers/char/watchdog/booke_wdt.c:140:
+		printk (KERN_INFO "PowerPC Book-E Watchdog Timer Enabled (wdt_period=%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#424: FILE: drivers/char/watchdog/booke_wdt.c:141:
+		printk (KERN_INFO "PowerPC Book-E Watchdog Timer Enabled (wdt_period=%d)\n",
+				wdt_period);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#430: FILE: drivers/char/watchdog/booke_wdt.c:147:
+static struct file_operations booke_wdt_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#431: FILE: drivers/char/watchdog/booke_wdt.c:148:
+  .owner = THIS_MODULE,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#432: FILE: drivers/char/watchdog/booke_wdt.c:149:
+  .llseek = no_llseek,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#433: FILE: drivers/char/watchdog/booke_wdt.c:150:
+  .write = booke_wdt_write,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#434: FILE: drivers/char/watchdog/booke_wdt.c:151:
+  .ioctl = booke_wdt_ioctl,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#435: FILE: drivers/char/watchdog/booke_wdt.c:152:
+  .open = booke_wdt_open,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#439: FILE: drivers/char/watchdog/booke_wdt.c:156:
+  .minor = WATCHDOG_MINOR,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#440: FILE: drivers/char/watchdog/booke_wdt.c:157:
+  .name = "watchdog",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#441: FILE: drivers/char/watchdog/booke_wdt.c:158:
+  .fops = &booke_wdt_fops,$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#456: FILE: drivers/char/watchdog/booke_wdt.c:173:
+	printk (KERN_INFO "PowerPC Book-E Watchdog Timer Loaded\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#456: FILE: drivers/char/watchdog/booke_wdt.c:173:
+	printk (KERN_INFO "PowerPC Book-E Watchdog Timer Loaded\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#461: FILE: drivers/char/watchdog/booke_wdt.c:178:
+		printk (KERN_CRIT "Cannot register miscdev on minor=%d (err=%d)\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#461: FILE: drivers/char/watchdog/booke_wdt.c:178:
+		printk (KERN_CRIT "Cannot register miscdev on minor=%d (err=%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#462: FILE: drivers/char/watchdog/booke_wdt.c:179:
+		printk (KERN_CRIT "Cannot register miscdev on minor=%d (err=%d)\n",
+				WATCHDOG_MINOR, ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#467: FILE: drivers/char/watchdog/booke_wdt.c:184:
+		printk (KERN_INFO "PowerPC Book-E Watchdog Timer Enabled (wdt_period=%d)\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#467: FILE: drivers/char/watchdog/booke_wdt.c:184:
+		printk (KERN_INFO "PowerPC Book-E Watchdog Timer Enabled (wdt_period=%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#468: FILE: drivers/char/watchdog/booke_wdt.c:185:
+		printk (KERN_INFO "PowerPC Book-E Watchdog Timer Enabled (wdt_period=%d)\n",
+				wdt_period);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000161080.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 42 warnings, 32 checks, 365 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000161080.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
