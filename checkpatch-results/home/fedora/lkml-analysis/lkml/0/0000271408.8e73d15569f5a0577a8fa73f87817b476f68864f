WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
This patch updates the pcmcia subsystem to utilize the driver model and sysfs.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#61: FILE: drivers/pcmcia/cs.c:1159:
+/*=====================================================================
+

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#64: FILE: drivers/pcmcia/cs.c:1162:
+======================================================================*/

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#74: FILE: drivers/pcmcia/cs.c:1172:
+EXPORT_SYMBOL(pcmcia_lookup_device);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: drivers/pcmcia/cs_internal.h:36:
+    struct device      *device;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#142: FILE: drivers/pcmcia/ds.c:366:
+static struct pcmcia_device * get_pcmcia_device (struct pcmcia_bus_socket *s, int function);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#142: FILE: drivers/pcmcia/ds.c:366:
+static struct pcmcia_device * get_pcmcia_device (struct pcmcia_bus_socket *s, int function);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#153: FILE: drivers/pcmcia/ds.c:446:
+======================================================================*/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#161: FILE: drivers/pcmcia/ds.c:454:
+		str += sprintf(str,"%s\n",
 		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#162: FILE: drivers/pcmcia/ds.c:455:
+			       dev->vers_1.str+dev->vers_1.ofs[index]);
 			                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#164: FILE: drivers/pcmcia/ds.c:457:
+		str += sprintf(str,"\n");
 		                  ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#168: FILE: drivers/pcmcia/ds.c:461:
+#define pcmcia_prod_str_attr(field, index)				\
+static ssize_t								\
+show_##field (struct device *dmdev, char *buf)				\
+{									\
+	struct pcmcia_device *dev;					\
+									\
+	dev = to_pcmcia_device (dmdev);					\
+	return pcmcia_show_product_string(dev,buf,index);		\
+}									\
+static DEVICE_ATTR(field, S_IRUGO, show_##field, NULL);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#170: FILE: drivers/pcmcia/ds.c:463:
+show_##field (struct device *dmdev, char *buf)				\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#174: FILE: drivers/pcmcia/ds.c:467:
+	dev = to_pcmcia_device (dmdev);					\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#175: FILE: drivers/pcmcia/ds.c:468:
+	return pcmcia_show_product_string(dev,buf,index);		\
 	                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#175: FILE: drivers/pcmcia/ds.c:468:
+	return pcmcia_show_product_string(dev,buf,index);		\
 	                                         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#177: FILE: drivers/pcmcia/ds.c:470:
+static DEVICE_ATTR(field, S_IRUGO, show_##field, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#179: FILE: drivers/pcmcia/ds.c:472:
+pcmcia_prod_str_attr(prod_str0,0);
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#180: FILE: drivers/pcmcia/ds.c:473:
+pcmcia_prod_str_attr(prod_str1,1);
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#181: FILE: drivers/pcmcia/ds.c:474:
+pcmcia_prod_str_attr(prod_str2,2);
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#182: FILE: drivers/pcmcia/ds.c:475:
+pcmcia_prod_str_attr(prod_str3,3);
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#191: FILE: drivers/pcmcia/ds.c:484:
+		str += sprintf(str,"0x%04x, 0x%04x\n",
 		                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#195: FILE: drivers/pcmcia/ds.c:488:
+		str += sprintf(str,"\n");
 		                  ^

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'pcmcia_show_manfid' to 'manfid_show'
#197: FILE: drivers/pcmcia/ds.c:490:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

ERROR:SPACING: space required after that ',' (ctx:VxV)
#199: FILE: drivers/pcmcia/ds.c:492:
+static DEVICE_ATTR(manfid,S_IRUGO,pcmcia_show_manfid,NULL);
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#199: FILE: drivers/pcmcia/ds.c:492:
+static DEVICE_ATTR(manfid,S_IRUGO,pcmcia_show_manfid,NULL);
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#199: FILE: drivers/pcmcia/ds.c:492:
+static DEVICE_ATTR(manfid,S_IRUGO,pcmcia_show_manfid,NULL);
                                                     ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#199: FILE: drivers/pcmcia/ds.c:492:
+static DEVICE_ATTR(manfid,S_IRUGO,pcmcia_show_manfid,NULL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#203: FILE: drivers/pcmcia/ds.c:496:
+	device_create_file (&dev->dev, &dev_attr_prod_str0);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#204: FILE: drivers/pcmcia/ds.c:497:
+	device_create_file (&dev->dev, &dev_attr_prod_str1);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#205: FILE: drivers/pcmcia/ds.c:498:
+	device_create_file (&dev->dev, &dev_attr_prod_str2);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#206: FILE: drivers/pcmcia/ds.c:499:
+	device_create_file (&dev->dev, &dev_attr_prod_str3);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#207: FILE: drivers/pcmcia/ds.c:500:
+	device_create_file (&dev->dev, &dev_attr_manfid);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#211: FILE: drivers/pcmcia/ds.c:504:
+/*======================================================================
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#214: FILE: drivers/pcmcia/ds.c:507:
+======================================================================*/

WARNING:LINE_SPACING: Missing a blank line after declarations
#219: FILE: drivers/pcmcia/ds.c:512:
+	struct pcmcia_device *dev = to_pcmcia_device(pdev);
+	kfree(dev);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Chains>
#244: FILE: drivers/pcmcia/ds.c:537:
+	if (cisinfo.Chains) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#252: FILE: drivers/pcmcia/ds.c:545:
+	for (i=0; i<=function_count; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#252: FILE: drivers/pcmcia/ds.c:545:
+	for (i=0; i<=function_count; i++) {
 	           ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dev)...) over kmalloc(sizeof(struct pcmcia_device)...)
#253: FILE: drivers/pcmcia/ds.c:546:
+		dev = kmalloc(sizeof(struct pcmcia_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BRACES: braces {} should be used on all arms of this statement
#273: FILE: drivers/pcmcia/ds.c:566:
+		if (!ret) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#276: FILE: drivers/pcmcia/ds.c:569:
+		} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#288: FILE: drivers/pcmcia/ds.c:581:
+	struct pcmcia_device *dev, *tmp;
+	down(&s->device_mutex);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: drivers/pcmcia/ds.c:592:
+int pcmcia_bus_hotplug(struct device *pdev, char **envp, int num_envp,
+		 char *buffer, int buffer_size)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#315: FILE: drivers/pcmcia/ds.c:608:
+	length += snprintf (scratch, buffer_size - length, "PRODUCT=");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#317: FILE: drivers/pcmcia/ds.c:610:
+		length += snprintf(scratch,buffer_size - length, "%s\"%s\"", (i>0) ? "," : "",
 		                          ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#317: FILE: drivers/pcmcia/ds.c:610:
+		length += snprintf(scratch,buffer_size - length, "%s\"%s\"", (i>0) ? "," : "",
 		                                                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#318: FILE: drivers/pcmcia/ds.c:611:
+			       dev->vers_1.str+dev->vers_1.ofs[i]);
 			                      ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i >= num_envp'
#321: FILE: drivers/pcmcia/ds.c:614:
+	if ((buffer_size - length <= 0) || (i >= num_envp))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#326: FILE: drivers/pcmcia/ds.c:619:
+	envp [i++] = scratch;

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#327: FILE: drivers/pcmcia/ds.c:620:
+	length += snprintf (scratch, buffer_size - length, "MANFID=0x%04x,0x%04x",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i >= num_envp'
#329: FILE: drivers/pcmcia/ds.c:622:
+	if ((buffer_size - length <= 0) || (i >= num_envp))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#342: FILE: drivers/pcmcia/ds.c:635:
+int pcmcia_bus_hotplug(struct device *pdev, char **envp, int num_envp,
+		 char *buffer, int buffer_size)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#362: FILE: drivers/pcmcia/ds.c:655:
+/*======================================================================
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#386: FILE: drivers/pcmcia/ds.c:790:
+    struct pcmcia_device *device;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#394: FILE: drivers/pcmcia/ds.c:816:
+    device = get_pcmcia_device(s, bind_info->function);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#395: FILE: drivers/pcmcia/ds.c:817:
+    if (!device)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#395: FILE: drivers/pcmcia/ds.c:817:
+    if (!device)
+	    return -EINVAL;

WARNING:TABSTOP: Statements should start on a tabstop
#396: FILE: drivers/pcmcia/ds.c:818:
+	    return -EINVAL;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#399: FILE: drivers/pcmcia/ds.c:821:
+    bind_req.device = device;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#407: FILE: drivers/pcmcia/ds.c:848:
+    down_write(&device->dev.bus->subsys.rwsem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#408: FILE: drivers/pcmcia/ds.c:849:
+    device->dev.driver = &driver->drv;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#422: FILE: drivers/pcmcia/ds.c:863:
+    device_bind_driver(&device->dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#423: FILE: drivers/pcmcia/ds.c:864:
+    up_write(&device->dev.bus->subsys.rwsem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#424: FILE: drivers/pcmcia/ds.c:865:
+    put_pcmcia_device(device);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#433: FILE: drivers/pcmcia/ds.c:942:
+    struct pcmcia_device *device;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#441: FILE: drivers/pcmcia/ds.c:954:
+    device = get_pcmcia_device(s, bind_info->function);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#442: FILE: drivers/pcmcia/ds.c:955:
+    if (device) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#442: FILE: drivers/pcmcia/ds.c:955:
+    if (device) {
+	    down_write(&device->dev.bus->subsys.rwsem);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: drivers/pcmcia/ds.c:960:
+    }$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret == CS_SUCCESS'
#460: FILE: drivers/pcmcia/ds.c:1189:
+	if ((ret == CS_SUCCESS) && (buf.adjust.Resource == RES_MEMORY_RANGE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'buf.adjust.Resource == RES_MEMORY_RANGE'
#460: FILE: drivers/pcmcia/ds.c:1189:
+	if ((ret == CS_SUCCESS) && (buf.adjust.Resource == RES_MEMORY_RANGE))

CHECK:CAMELCASE: Avoid CamelCase: <Resource>
#460: FILE: drivers/pcmcia/ds.c:1189:
+	if ((ret == CS_SUCCESS) && (buf.adjust.Resource == RES_MEMORY_RANGE))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#552: FILE: drivers/pcmcia/ds.c:1515:
+static struct pcmcia_device * get_pcmcia_device (struct pcmcia_bus_socket *s, int function)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#552: FILE: drivers/pcmcia/ds.c:1515:
+static struct pcmcia_device * get_pcmcia_device (struct pcmcia_bus_socket *s, int function)

WARNING:LINE_SPACING: Missing a blank line after declarations
#555: FILE: drivers/pcmcia/ds.c:1518:
+	struct pcmcia_device *dev, *tmp;
+	down(&s->device_mutex);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#579: FILE: include/pcmcia/cs.h:321:
+    struct pcmcia_device^I*device;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000271408.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 44 warnings, 13 checks, 520 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000271408.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
