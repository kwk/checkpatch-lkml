WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#60: 
0000:04:02.1 Input device controller: Creative Labs SB Audigy MIDI/Gameport (rev 03)

WARNING:LINE_SPACING: Missing a blank line after declarations
#87: FILE: drivers/pci/hotplug/fakephp.c:181:
+	u8 hdr_type;
+	if (!pci_read_config_byte(temp, PCI_HEADER_TYPE, &hdr_type)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#93: FILE: drivers/pci/hotplug/fakephp.c:187:
+				dbg("New device on %s function %x:%x\n",
+					bus->name, temp->devfn >> 3,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#113: FILE: drivers/pci/hotplug/fakephp.c:207:
+					dbg("New device on %s function %x:%x\n",
+						bus->name, temp->devfn >> 3,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#123: FILE: drivers/pci/hotplug/fakephp.c:217:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#134: FILE: drivers/pci/hotplug/fakephp.c:228:
+	struct pci_dev *dev;
+	dev = kmalloc(sizeof(struct pci_dev), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dev)...) over kmalloc(sizeof(struct pci_dev)...)
#134: FILE: drivers/pci/hotplug/fakephp.c:228:
+	dev = kmalloc(sizeof(struct pci_dev), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#139: FILE: drivers/pci/hotplug/fakephp.c:233:
+	dev->bus = (struct pci_bus*)bus;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#152: FILE: drivers/pci/hotplug/fakephp.c:246:
+	const struct list_head *l;
+	list_for_each(l,list) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#152: FILE: drivers/pci/hotplug/fakephp.c:246:
+	list_for_each(l,list) {
 	               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#154: FILE: drivers/pci/hotplug/fakephp.c:248:
+		const struct pci_bus *b = pci_bus_b(l);
+		pci_rescan_bus(b);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#160: FILE: drivers/pci/hotplug/fakephp.c:254:
+static inline void pci_rescan(void) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#164: FILE: drivers/pci/hotplug/fakephp.c:258:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#184: FILE: drivers/pci/hotplug/fakephp.c:278:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#202: FILE: drivers/pci/hotplug/fakephp.c:301:
+			dev = pci_find_slot(dslot->dev->bus->number,
+					dslot->dev->devfn + func);

CHECK:BRACES: braces {} should be used on all arms of this statement
#203: FILE: drivers/pci/hotplug/fakephp.c:302:
+			if (dev) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#205: FILE: drivers/pci/hotplug/fakephp.c:304:
+				if (hslot)
[...]
+				else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#207: FILE: drivers/pci/hotplug/fakephp.c:306:
+				else {

WARNING:LONG_LINE_STRING: line length of 102 exceeds 100 columns
#208: FILE: drivers/pci/hotplug/fakephp.c:307:
+					err("Hotplug slot not found for subfunction of PCI device\n");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:BRACES: Unbalanced braces around else statement
#211: FILE: drivers/pci/hotplug/fakephp.c:310:
+			} else

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#223: FILE: drivers/pci/hotplug/fakephp.c:356:
+module_param(debug, int, S_IRUGO | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000235115.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 7 warnings, 11 checks, 153 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000235115.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
