WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#59: 
2) I have not removed f_iobuf from filp. Need to do some kiobuf cleanup.
                                   ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#70: 
diff -Naur -X dontdiff linux-2.5.3pre6.org/drivers/char/raw.c linux-2.5.3pre6/drivers/char/raw.c

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#92: FILE: drivers/char/raw.c:252:
+^Istruct kvec ^I*vec;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#111: FILE: drivers/char/raw.c:269:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#112: FILE: drivers/char/raw.c:270:
+	vec = alloc_kvec((size/PAGE_SIZE) + 1);
 	                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#124: FILE: drivers/char/raw.c:308:
+		err = map_user_kvec(rw, vec, (unsigned long) buf, iosize);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#156: FILE: drivers/char/raw.c:336:
+out_free:^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#170: FILE: fs/bio.c:500:
+	struct kvec_cb *kvec_cb = (struct kvec_cb *) bio->bi_private;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#189: FILE: fs/bio.c:519:
+		printk("ll_rw_kvec: WRITE to ro device %s\n", kdevname(dev));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'll_rw_kvec', this function's name, in a string
#189: FILE: fs/bio.c:519:
+		printk("ll_rw_kvec: WRITE to ro device %s\n", kdevname(dev));

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#199: FILE: fs/bio.c:529:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#208: FILE: fs/bio.c:538:
+		while (tlen) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#214: FILE: fs/bio.c:544:
+			if ((bio = bio_alloc(GFP_NOIO, 0)) == NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#228: FILE: fs/bio.c:558:
+^I^I^I^Iif ((blen + veclet->bv_len) > BIO_MAX_SIZE) $

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#261: FILE: fs/bio.c:590:
diff -Naur -X dontdiff linux-2.5.3pre6.org/fs/block_dev.c linux-2.5.3pre6/fs/block_dev.c

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:LONG_LINE: line length of 128 exceeds 100 columns
#269: FILE: fs/block_dev.c:137:
+static int blkdev_direct_IO(int rw, struct inode * inode, struct kvec * iobuf, unsigned long blocknr, int iosize, int blocksize)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#269: FILE: fs/block_dev.c:137:
+static int blkdev_direct_IO(int rw, struct inode * inode, struct kvec * iobuf, unsigned long blocknr, int iosize, int blocksize)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#269: FILE: fs/block_dev.c:137:
+static int blkdev_direct_IO(int rw, struct inode * inode, struct kvec * iobuf, unsigned long blocknr, int iosize, int blocksize)

WARNING:LONG_LINE: line length of 145 exceeds 100 columns
#284: FILE: fs/buffer.c:1922:
+int generic_direct_IO(int rw, struct inode * inode, struct kvec * vec, unsigned long blocknr, int blocksize, int iosize, get_block_t * get_block)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#284: FILE: fs/buffer.c:1922:
+int generic_direct_IO(int rw, struct inode * inode, struct kvec * vec, unsigned long blocknr, int blocksize, int iosize, get_block_t * get_block)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#284: FILE: fs/buffer.c:1922:
+int generic_direct_IO(int rw, struct inode * inode, struct kvec * vec, unsigned long blocknr, int blocksize, int iosize, get_block_t * get_block)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#284: FILE: fs/buffer.c:1922:
+int generic_direct_IO(int rw, struct inode * inode, struct kvec * vec, unsigned long blocknr, int blocksize, int iosize, get_block_t * get_block)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#288: FILE: fs/buffer.c:1925:
+^Iint ^Iblkno, len;$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#292: FILE: fs/buffer.c:1929:
+	nr_blocks = iosize/blocksize;
 	                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#338: FILE: fs/buffer.c:1976:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#339: FILE: fs/buffer.c:1977:
+		
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#362: FILE: fs/buffer.c:2053:
+int brw_kvec(int rw, int nr, struct kvec *vec, kdev_t dev, sector_t b[],
+	       int len[], int size)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#371: FILE: fs/buffer.c:2062:
+^I$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'brw_kvec', this function's name, in a string
#373: FILE: fs/buffer.c:2064:
+		panic("brw_kvec: kvec not initialised");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#377: FILE: fs/buffer.c:2068:
+		if ((vecl->bv_offset & (size-1)) || (vecl->bv_len & (size-1)))
 		                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#377: FILE: fs/buffer.c:2068:
+		if ((vecl->bv_offset & (size-1)) || (vecl->bv_len & (size-1)))
 		                                                         ^

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#402: FILE: fs/ext2/inode.c:595:
+static int ext2_direct_IO(int rw, struct inode * inode, struct kvec * iobuf, unsigned long blocknr, int blocksize, int iosize)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#402: FILE: fs/ext2/inode.c:595:
 }
+static int ext2_direct_IO(int rw, struct inode * inode, struct kvec * iobuf, unsigned long blocknr, int blocksize, int iosize)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#402: FILE: fs/ext2/inode.c:595:
+static int ext2_direct_IO(int rw, struct inode * inode, struct kvec * iobuf, unsigned long blocknr, int blocksize, int iosize)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#402: FILE: fs/ext2/inode.c:595:
+static int ext2_direct_IO(int rw, struct inode * inode, struct kvec * iobuf, unsigned long blocknr, int blocksize, int iosize)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#419: FILE: fs/iobuf.c:126:
+^I$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*vec)...) over kmalloc(sizeof(struct kvec)...)
#420: FILE: fs/iobuf.c:127:
+	vec = kmalloc(sizeof(struct kvec) + nr * sizeof(kveclet_t), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:BRACES: braces {} are not necessary for single statement blocks
#421: FILE: fs/iobuf.c:128:
+	if (!vec) {
+		return 0;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#426: FILE: fs/iobuf.c:133:
+^Ireturn vec; $

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#434: FILE: fs/iobuf.c:141:
+int end_kvec_request(struct kvec_cb *vec_cb, int uptodate)
                                                  ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#438: FILE: fs/iobuf.c:145:
+	if ((!uptodate) && !vec_cb->errno)
 	      ^^^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!uptodate'
#438: FILE: fs/iobuf.c:145:
+	if ((!uptodate) && !vec_cb->errno)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#485: FILE: include/linux/fs.h:370:
+	int (*direct_IO)(int, struct inode *, struct kvec *, unsigned long, int, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#485: FILE: include/linux/fs.h:370:
+	int (*direct_IO)(int, struct inode *, struct kvec *, unsigned long, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kvec *' should also have an identifier name
#485: FILE: include/linux/fs.h:370:
+	int (*direct_IO)(int, struct inode *, struct kvec *, unsigned long, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#485: FILE: include/linux/fs.h:370:
+	int (*direct_IO)(int, struct inode *, struct kvec *, unsigned long, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#485: FILE: include/linux/fs.h:370:
+	int (*direct_IO)(int, struct inode *, struct kvec *, unsigned long, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#485: FILE: include/linux/fs.h:370:
+	int (*direct_IO)(int, struct inode *, struct kvec *, unsigned long, int, int);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#494: FILE: include/linux/fs.h:1438:
+extern int generic_direct_IO(int, struct inode *, struct kvec *, unsigned long, int, int, get_block_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#494: FILE: include/linux/fs.h:1438:
+extern int generic_direct_IO(int, struct inode *, struct kvec *, unsigned long, int, int, get_block_t *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#494: FILE: include/linux/fs.h:1438:
+extern int generic_direct_IO(int, struct inode *, struct kvec *, unsigned long, int, int, get_block_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#494: FILE: include/linux/fs.h:1438:
+extern int generic_direct_IO(int, struct inode *, struct kvec *, unsigned long, int, int, get_block_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kvec *' should also have an identifier name
#494: FILE: include/linux/fs.h:1438:
+extern int generic_direct_IO(int, struct inode *, struct kvec *, unsigned long, int, int, get_block_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#494: FILE: include/linux/fs.h:1438:
+extern int generic_direct_IO(int, struct inode *, struct kvec *, unsigned long, int, int, get_block_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#494: FILE: include/linux/fs.h:1438:
+extern int generic_direct_IO(int, struct inode *, struct kvec *, unsigned long, int, int, get_block_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#494: FILE: include/linux/fs.h:1438:
+extern int generic_direct_IO(int, struct inode *, struct kvec *, unsigned long, int, int, get_block_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'get_block_t *' should also have an identifier name
#494: FILE: include/linux/fs.h:1438:
+extern int generic_direct_IO(int, struct inode *, struct kvec *, unsigned long, int, int, get_block_t *);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#514: FILE: include/linux/iobuf.h:89:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#515: FILE: include/linux/iobuf.h:90:
+typedef struct bio_vec kveclet_t;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#518: FILE: include/linux/iobuf.h:93:
+	unsigned	max_nr;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#519: FILE: include/linux/iobuf.h:94:
+	unsigned	nr;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#526: FILE: include/linux/iobuf.h:101:
+^Iint^I^Ierrno;^I$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kvec_cb *' should also have an identifier name
#538: FILE: include/linux/iobuf.h:113:
+int	end_kvec_request(struct kvec_cb *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#538: FILE: include/linux/iobuf.h:113:
+int	end_kvec_request(struct kvec_cb *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kvec *' should also have an identifier name
#540: FILE: include/linux/iobuf.h:115:
+void	free_kvec(struct kvec *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kvec_cb *' should also have an identifier name
#541: FILE: include/linux/iobuf.h:116:
+void	kvec_wait_for_io(struct kvec_cb *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#544: FILE: include/linux/iobuf.h:119:
+int^Ibrw_kvec(int rw, int nr, struct kvec *vec, $

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t []' should also have an identifier name
#544: FILE: include/linux/iobuf.h:119:
+int	brw_kvec(int rw, int nr, struct kvec *vec, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#545: FILE: include/linux/iobuf.h:120:
+int	brw_kvec(int rw, int nr, struct kvec *vec, 
+		   kdev_t dev, sector_t [], int len[], int size);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#577: FILE: mm/filemap.c:1491:
+	vec = alloc_kvec((count/PAGE_SIZE) + 1);
 	                       ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#578: FILE: mm/filemap.c:1492:
+	if (!vec) {
+		return -ENOMEM;
 	}

CHECK:SPACING: No space is necessary after a cast
#588: FILE: mm/filemap.c:1523:
+		retval = map_user_kvec(rw, vec, (unsigned long) buf, iosize);

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#593: FILE: mm/filemap.c:1527:
+		retval = mapping->a_ops->direct_IO(rw, inode, vec, (offset+progress) >> blocksize_bits, blocksize, iosize);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#593: FILE: mm/filemap.c:1527:
+		retval = mapping->a_ops->direct_IO(rw, inode, vec, (offset+progress) >> blocksize_bits, blocksize, iosize);
 		                                                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#630: FILE: mm/memory.c:1447:
+int get_user_pages_veclet(struct task_struct *tsk, struct mm_struct *mm, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#631: FILE: mm/memory.c:1448:
+int get_user_pages_veclet(struct task_struct *tsk, struct mm_struct *mm, 
+		unsigned long start, int len, int write, int force, kveclet_t *vecl)

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#639: FILE: mm/memory.c:1456:
+		struct vm_area_struct *	vma;

ERROR:SPACING: space prohibited after that open parenthesis '('
#643: FILE: mm/memory.c:1460:
+		if ( !vma ||

ERROR:CODE_INDENT: code indent should use tabs where possible
#645: FILE: mm/memory.c:1462:
+^I^I     ^I((write && (!(vma->vm_flags & VM_WRITE))) ||$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#645: FILE: mm/memory.c:1462:
+^I^I     ^I((write && (!(vma->vm_flags & VM_WRITE))) ||$

ERROR:CODE_INDENT: code indent should use tabs where possible
#646: FILE: mm/memory.c:1463:
+^I^I    ^I (!write && (!(vma->vm_flags & VM_READ))) ) )) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#646: FILE: mm/memory.c:1463:
+^I^I    ^I (!write && (!(vma->vm_flags & VM_READ))) ) )) {$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#646: FILE: mm/memory.c:1463:
+		    	 (!write && (!(vma->vm_flags & VM_READ))) ) )) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#647: FILE: mm/memory.c:1464:
+			if (i) return i;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LINE_SPACING: Missing a blank line after declarations
#654: FILE: mm/memory.c:1471:
+			struct page *map;
+			while (!(map = follow_page(mm, start, write))) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#664: FILE: mm/memory.c:1481:
+					if (i) return i;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#667: FILE: mm/memory.c:1484:
+					if (i) return i;

CHECK:BRACES: braces {} should be used on all arms of this statement
#673: FILE: mm/memory.c:1490:
+			if (map) {
[...]
+			} else 
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#677: FILE: mm/memory.c:1494:
+^I^I^I} else $

CHECK:BRACES: Unbalanced braces around else statement
#677: FILE: mm/memory.c:1494:
+			} else 

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#678: FILE: mm/memory.c:1495:
+				printk (KERN_INFO "Mapped page missing\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#678: FILE: mm/memory.c:1495:
+				printk (KERN_INFO "Mapped page missing\n");

ERROR:SPACING: space required before the open parenthesis '('
#689: FILE: mm/memory.c:1506:
+		} while(len && start < vma->vm_end);

ERROR:SPACING: space required before the open parenthesis '('
#691: FILE: mm/memory.c:1508:
+	} while(len);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#699: FILE: mm/memory.c:1516:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#701: FILE: mm/memory.c:1518:
+^I$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#702: FILE: mm/memory.c:1519:
+	pgcount = (va + len + PAGE_SIZE - 1)/PAGE_SIZE - va/PAGE_SIZE;
 	                                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#702: FILE: mm/memory.c:1519:
+	pgcount = (va + len + PAGE_SIZE - 1)/PAGE_SIZE - va/PAGE_SIZE;
 	                                                   ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#704: FILE: mm/memory.c:1521:
+	if (!pgcount) BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#704: FILE: mm/memory.c:1521:
+	if (!pgcount) BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#706: FILE: mm/memory.c:1523:
+^Iif (vec->nr + pgcount > vec->max_nr) $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#714: FILE: mm/memory.c:1531:
+	err = get_user_pages_veclet(current, mm, va, len,
+			(rw==READ), 0, &vec->veclet[vec->nr]);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#714: FILE: mm/memory.c:1531:
+			(rw==READ), 0, &vec->veclet[vec->nr]);
 			   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#727: FILE: mm/memory.c:1544:
+void unmap_kvec (struct kvec *vec) $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#727: FILE: mm/memory.c:1544:
+void unmap_kvec (struct kvec *vec) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#734: FILE: mm/memory.c:1551:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#737: FILE: mm/memory.c:1554:
+		if (map) {
+			page_cache_release(map);
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#741: FILE: mm/memory.c:1558:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#750: FILE: mm/memory.c:1567:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#755: FILE: mm/memory.c:1572:
+^I^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000478700.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 39 errors, 45 warnings, 26 checks, 642 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000478700.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
