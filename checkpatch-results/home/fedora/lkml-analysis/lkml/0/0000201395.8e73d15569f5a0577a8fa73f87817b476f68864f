WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#95: FILE: include/linux/rt_lock.h:17:
+	volatile unsigned long owner_pc;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#96: FILE: include/linux/rt_lock.h:18:
+	volatile unsigned long owner_cpu;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#109: FILE: include/linux/rt_lock.h:42:
+	volatile signed int lock;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#193: FILE: arch/ppc/lib/dec_and_lock.c:45:
+EXPORT_SYMBOL(_atomic_dec_and_raw_spin_lock);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#426: FILE: arch/ppc/platforms/chrp_smp.c:63:
 void __devinit

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'flags' may be better as '(flags)' to avoid precedence issues
#435: FILE: include/asm-ppc/hw_irq.h:16:
+#define irqs_disabled_flags(flags)	((flags & MSR_EE) == 0)

CHECK:SPACING: No space is necessary after a cast
#467: FILE: include/asm-ppc/spinlock.h:18:
+#define RAW_SPIN_LOCK_UNLOCKED   (raw_spinlock_t) __RAW_SPIN_LOCK_UNLOCKED

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#467: FILE: include/asm-ppc/spinlock.h:18:
+#define RAW_SPIN_LOCK_UNLOCKED   (raw_spinlock_t) __RAW_SPIN_LOCK_UNLOCKED

ERROR:SPACING: space required before the open parenthesis '('
#473: FILE: include/asm-ppc/spinlock.h:20:
+#define __raw_spin_lock_init(x)	do { *(x) = RAW_SPIN_LOCK_UNLOCKED; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#473: FILE: include/asm-ppc/spinlock.h:20:
+#define __raw_spin_lock_init(x)	do { *(x) = RAW_SPIN_LOCK_UNLOCKED; } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required before the open parenthesis '('
#476: FILE: include/asm-ppc/spinlock.h:23:
+		do { barrier(); } while(__raw_spin_is_locked(x))

ERROR:SPACING: space required after that ',' (ctx:VxO)
#498: FILE: include/asm-ppc/spinlock.h:55:
+#define __raw_spin_trylock(l) (!test_and_set_bit(0,&(l)->lock))
                                                   ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#498: FILE: include/asm-ppc/spinlock.h:55:
+#define __raw_spin_trylock(l) (!test_and_set_bit(0,&(l)->lock))
                                                    ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#505: FILE: include/asm-ppc/spinlock.h:59:
+extern void __raw_spin_lock(raw_spinlock_t *lock);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#506: FILE: include/asm-ppc/spinlock.h:60:
+extern void __raw_spin_unlock(raw_spinlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#507: FILE: include/asm-ppc/spinlock.h:61:
+extern int __raw_spin_trylock(raw_spinlock_t *lock);

CHECK:SPACING: No space is necessary after a cast
#531: FILE: include/asm-ppc/spinlock.h:66:
+#define RAW_RW_LOCK_UNLOCKED (raw_rwlock_t) __RAW_RW_LOCK_UNLOCKED

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#531: FILE: include/asm-ppc/spinlock.h:66:
+#define RAW_RW_LOCK_UNLOCKED (raw_rwlock_t) __RAW_RW_LOCK_UNLOCKED

ERROR:SPACING: space required before the open parenthesis '('
#532: FILE: include/asm-ppc/spinlock.h:67:
+#define __raw_rwlock_init(lp) do { *(lp) = RAW_RW_LOCK_UNLOCKED; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#532: FILE: include/asm-ppc/spinlock.h:67:
+#define __raw_rwlock_init(lp) do { *(lp) = RAW_RW_LOCK_UNLOCKED; } while(0)

WARNING:INLINE: plain inline is preferred over __inline__
#542: FILE: include/asm-ppc/spinlock.h:74:
+static __inline__ int __raw_read_trylock(raw_rwlock_t *rw)

WARNING:INLINE: plain inline is preferred over __inline__
#551: FILE: include/asm-ppc/spinlock.h:94:
+static __inline__ void __raw_read_lock(raw_rwlock_t *rw)

WARNING:INLINE: plain inline is preferred over __inline__
#560: FILE: include/asm-ppc/spinlock.h:115:
+static __inline__ void __raw_read_unlock(raw_rwlock_t *rw)

WARNING:INLINE: plain inline is preferred over __inline__
#569: FILE: include/asm-ppc/spinlock.h:131:
+static __inline__ int __raw_write_trylock(raw_rwlock_t *rw)

WARNING:INLINE: plain inline is preferred over __inline__
#578: FILE: include/asm-ppc/spinlock.h:151:
+static __inline__ void __raw_write_lock(raw_rwlock_t *rw)

WARNING:INLINE: plain inline is preferred over __inline__
#587: FILE: include/asm-ppc/spinlock.h:172:
+static __inline__ void __raw_write_unlock(raw_rwlock_t *rw)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#601: FILE: include/asm-ppc/spinlock.h:180:
+extern void __raw_read_lock(raw_rwlock_t *rw);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#602: FILE: include/asm-ppc/spinlock.h:181:
+extern void __raw_read_unlock(raw_rwlock_t *rw);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#603: FILE: include/asm-ppc/spinlock.h:182:
+extern void __raw_write_lock(raw_rwlock_t *rw);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#604: FILE: include/asm-ppc/spinlock.h:183:
+extern void __raw_write_unlock(raw_rwlock_t *rw);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#605: FILE: include/asm-ppc/spinlock.h:184:
+extern int __raw_read_trylock(raw_rwlock_t *rw);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#606: FILE: include/asm-ppc/spinlock.h:185:
+extern int __raw_write_trylock(raw_rwlock_t *rw);

WARNING:INLINE: plain inline is preferred over __inline__
#672: FILE: arch/ppc/lib/locks.c:98:
+static __inline__ int __read_trylock(raw_rwlock_t *rw)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000201395.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 14 warnings, 12 checks, 618 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000201395.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
