WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#65: 
diff -u mm1-2.6.0-2/arch/i386/mm/pgtable.c mm1-2.6.0-2/arch/i386/mm/pgtable.c

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#109: FILE: arch/i386/mm/pgtable.c:418:
+	for (cpu = 0; cpu < NR_CPUS; ++cpu) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#111: FILE: arch/i386/mm/pgtable.c:420:
+		struct mmu_gather *tlb;
+		if (!cpu_online(cpu))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#114: FILE: arch/i386/mm/pgtable.c:423:
+		if ((gfp_mask & __GFP_HIGHMEM) || !(GFP_PTE & __GFP_HIGHMEM))
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#116: FILE: arch/i386/mm/pgtable.c:425:
+		else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#118: FILE: arch/i386/mm/pgtable.c:427:
+			int zone;
+			for (zone = 0; zone < MAX_ZONE_ID; ++zone) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#132: FILE: arch/i386/mm/pgtable.c:439:
+	int possible;
+	if ((gfp_mask & __GFP_HIGHMEM) && !(GFP_PTE & __GFP_HIGHMEM))

CHECK:BRACES: braces {} should be used on all arms of this statement
#135: FILE: arch/i386/mm/pgtable.c:442:
+	if (!nr_to_scan)
[...]
+	else if (!possible)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#139: FILE: arch/i386/mm/pgtable.c:446:
+		return 0;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#139: FILE: arch/i386/mm/pgtable.c:446:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#141: FILE: arch/i386/mm/pgtable.c:448:
+		struct pagetable_shrink shrink;
+		shrink.gfp_mask = gfp_mask;

WARNING:LINE_SPACING: Missing a blank line after declarations
#194: FILE: arch/i386/mm/pgtable.c:147:
+	int cpu;
+	for (cpu = 0; cpu < NR_CPUS; ++cpu) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#194: FILE: arch/i386/mm/pgtable.c:147:
+	for (cpu = 0; cpu < NR_CPUS; ++cpu) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#197: FILE: arch/i386/mm/pgtable.c:150:
+		struct mmu_gather *tlb = &per_cpu(mmu_gathers, cpu);
+		for (zone = 0; zone < MAX_ZONE_ID; ++zone) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#215: FILE: arch/i386/mm/pgtable.c:160:
+	struct page *page = alloc_page(gfp_mask);
+	if (page) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#218: FILE: arch/i386/mm/pgtable.c:163:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#240: FILE: arch/i386/mm/pgtable.c:185:
+		int z;
+		for (z = MAX_ZONE_ID - 1; z >= 0; --z) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#242: FILE: arch/i386/mm/pgtable.c:187:
+			struct zone *zone = zone_table[z];
+			if (!(gfp_flags & __GFP_HIGHMEM) && zone_high(zone))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#249: FILE: arch/i386/mm/pgtable.c:194:
+			BUG();

WARNING:LINE_SPACING: Missing a blank line after declarations
#262: FILE: arch/i386/mm/pgtable.c:207:
+	struct page *page = pte_alloc_ready(GFP_PTE);
+	return page ? page : pte_alloc_fresh(GFP_PTE);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#311: FILE: arch/i386/mm/pgtable.c:418:
+	for (cpu = 0; cpu < NR_CPUS; ++cpu) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#313: FILE: arch/i386/mm/pgtable.c:420:
+		struct mmu_gather *tlb;
+		if (!cpu_online(cpu))

CHECK:BRACES: braces {} should be used on all arms of this statement
#316: FILE: arch/i386/mm/pgtable.c:423:
+		if ((gfp_mask & __GFP_HIGHMEM) || !(GFP_PTE & __GFP_HIGHMEM))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#318: FILE: arch/i386/mm/pgtable.c:425:
+		else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#320: FILE: arch/i386/mm/pgtable.c:427:
+			int zone;
+			for (zone = 0; zone < MAX_ZONE_ID; ++zone) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#332: FILE: arch/i386/mm/pgtable.c:439:
+	int possible;
+	if ((gfp_mask & __GFP_HIGHMEM) && !(GFP_PTE & __GFP_HIGHMEM))

CHECK:BRACES: braces {} should be used on all arms of this statement
#335: FILE: arch/i386/mm/pgtable.c:442:
+	if (!nr_to_scan)
[...]
+	else if (!possible)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#339: FILE: arch/i386/mm/pgtable.c:446:
+		return 0;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#339: FILE: arch/i386/mm/pgtable.c:446:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#341: FILE: arch/i386/mm/pgtable.c:448:
+		struct pagetable_shrink shrink;
+		shrink.gfp_mask = gfp_mask;

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#354: FILE: arch/i386/mm/pgtable.c:461:
+__initcall(init_pagetable_cache_shrinker);

WARNING:LINE_SPACING: Missing a blank line after declarations
#451: FILE: include/asm-i386/pgalloc.h:51:
+	struct mmu_gather *tlb = &per_cpu(mmu_gathers, get_cpu());
+	tlb_remove_page(tlb, page);

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#472: FILE: include/asm-i386/tlb.h:4:
+ * include/asm-i386/tlb.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#486: FILE: include/asm-i386/tlb.h:18:
+#define GFP_PTE			(GFP_KERNEL|__GFP_REPEAT|__GFP_HIGHMEM)
                			           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#486: FILE: include/asm-i386/tlb.h:18:
+#define GFP_PTE			(GFP_KERNEL|__GFP_REPEAT|__GFP_HIGHMEM)
                			                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#488: FILE: include/asm-i386/tlb.h:20:
+#define GFP_PTE			(GFP_KERNEL|__GFP_REPEAT)
                			           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#535: FILE: include/asm-i386/tlb.h:66:
+	struct mmu_gather *tlb = &per_cpu(mmu_gathers, get_cpu());
+	tlb->mm = mm;

WARNING:LINE_SPACING: Missing a blank line after declarations
#624: FILE: include/asm-i386/tlb.h:155:
+	int zone = PageZoneID(page);
+	ClearPagePTE(page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#666: FILE: mm/page_alloc.c:242:
+int free_pages_bulk(struct zone *zone, int count,
 		struct list_head *list, unsigned int order)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000316675.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 27 warnings, 12 checks, 576 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000316675.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
