WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#48: 
http://groups.google.com/groups?hl=en&lr=&ie=UTF-8&threadm=1dvnl-5Pr-1%40gated-at.bofh.it&rnum=1&prev=/groups%3Fhl%3Den%26lr%3D%26ie%3DISO-8859-1%26q%3DOutstanding%2Bfixups%26btnG%3DGoogle%2BSearch%26meta%3Dgroup%253Dlinux.kernel

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#60: FILE: drivers/char/amiserial.c:1253:
+	struct async_struct * info = (struct async_struct *)tty->driver_data;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#91: FILE: drivers/char/amiserial.c:1276:
+	struct async_struct * info = (struct async_struct *)tty->driver_data;

CHECK:SPACING: No space is necessary after a cast
#165: FILE: drivers/char/epca.c:2936:
+	struct channel *ch = (struct channel *) tty->driver_data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#166: FILE: drivers/char/epca.c:2937:
+	volatile struct board_chan *bc;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#172: FILE: drivers/char/epca.c:2943:
+^Ielse $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#172: FILE: drivers/char/epca.c:2943:
+	else 
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#174: FILE: drivers/char/epca.c:2945:
+		printk(KERN_ERR "<Error> - ch is NULL in pc_tiocmget!\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pc_tiocmget', this function's name, in a string
#174: FILE: drivers/char/epca.c:2945:
+		printk(KERN_ERR "<Error> - ch is NULL in pc_tiocmget!\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: No space is necessary after a cast
#209: FILE: drivers/char/epca.c:2980:
+	struct channel *ch = (struct channel *) tty->driver_data;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#213: FILE: drivers/char/epca.c:2984:
+		printk(KERN_ERR "<Error> - ch is NULL in pc_tiocmset!\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pc_tiocmset', this function's name, in a string
#213: FILE: drivers/char/epca.c:2984:
+		printk(KERN_ERR "<Error> - ch is NULL in pc_tiocmset!\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#244: FILE: drivers/char/epca.c:3015:
+^I^IThe below routine generally sets up parity, baud, flow control $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#244: FILE: drivers/char/epca.c:3015:
+	/*  --------------------------------------------------------------
+		The below routine generally sets up parity, baud, flow control 

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#246: FILE: drivers/char/epca.c:3017:
+	------------------------------------------------------------------ */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#248: FILE: drivers/char/epca.c:3019:
+	epcaparam(tty,ch);
 	             ^

CHECK:SPACING: No space is necessary after a cast
#296: FILE: drivers/char/epca.c:3115:
+			if (putUser(mflag, (unsigned int *) arg))

CHECK:CAMELCASE: Avoid CamelCase: <putUser>
#296: FILE: drivers/char/epca.c:3115:
+			if (putUser(mflag, (unsigned int *) arg))

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <getUser>
#347: FILE: drivers/char/epca.c:3120:
+			if (getUser(mstat, (unsigned int *)arg))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#363: FILE: drivers/char/esp.c:1758:
+	struct esp_struct * info = (struct esp_struct *)tty->driver_data;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#367: FILE: drivers/char/esp.c:1761:
+	if (serial_paranoia_check(info, tty->name, __FUNCTION__))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#392: FILE: drivers/char/esp.c:1782:
+	struct esp_struct * info = (struct esp_struct *)tty->driver_data;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#397: FILE: drivers/char/esp.c:1785:
+	if (serial_paranoia_check(info, tty->name, __FUNCTION__))

CHECK:SPACING: No space is necessary after a cast
#470: FILE: drivers/char/isicom.c:1296:
+	struct isi_port * port = (struct isi_port *) tty->driver_data;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#470: FILE: drivers/char/isicom.c:1296:
+	struct isi_port * port = (struct isi_port *) tty->driver_data;

CHECK:SPACING: No space is necessary after a cast
#493: FILE: drivers/char/isicom.c:1314:
+	struct isi_port * port = (struct isi_port *) tty->driver_data;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#493: FILE: drivers/char/isicom.c:1314:
+	struct isi_port * port = (struct isi_port *) tty->driver_data;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#535: FILE: drivers/char/isicom.c:1322:
+^Iif (set & TIOCM_RTS) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#537: FILE: drivers/char/isicom.c:1324:
+^Iif (set & TIOCM_DTR) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#543: FILE: drivers/char/isicom.c:1330:
+^I^Idrop_dtr(port);^I$

CHECK:SPACING: No space is necessary after a cast
#601: FILE: drivers/char/moxa.c:751:
+	struct moxa_str *ch = (struct moxa_str *) tty->driver_data;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'port != MAX_PORTS'
#605: FILE: drivers/char/moxa.c:755:
+	if ((port != MAX_PORTS) && (!ch))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!ch'
#605: FILE: drivers/char/moxa.c:755:
+	if ((port != MAX_PORTS) && (!ch))

CHECK:CAMELCASE: Avoid CamelCase: <MoxaPortGetLineOut>
#608: FILE: drivers/char/moxa.c:758:
+	MoxaPortGetLineOut(ch->port, &dtr, &rts);

CHECK:CAMELCASE: Avoid CamelCase: <MoxaPortLineStatus>
#613: FILE: drivers/char/moxa.c:763:
+	dtr = MoxaPortLineStatus(ch->port);

CHECK:SPACING: No space is necessary after a cast
#626: FILE: drivers/char/moxa.c:776:
+	struct moxa_str *ch = (struct moxa_str *) tty->driver_data;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'port != MAX_PORTS'
#630: FILE: drivers/char/moxa.c:780:
+	if ((port != MAX_PORTS) && (!ch))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!ch'
#630: FILE: drivers/char/moxa.c:780:
+	if ((port != MAX_PORTS) && (!ch))

CHECK:CAMELCASE: Avoid CamelCase: <MoxaPortLineCtrl>
#642: FILE: drivers/char/moxa.c:792:
+	MoxaPortLineCtrl(ch->port, dtr, rts);

CHECK:SPACING: No space is necessary after a cast
#745: FILE: drivers/char/mxser.c:2151:
+	struct mxser_struct *info = (struct mxser_struct *) tty->driver_data;

CHECK:SPACING: No space is necessary after a cast
#777: FILE: drivers/char/mxser.c:2179:
+	struct mxser_struct *info = (struct mxser_struct *) tty->driver_data;

CHECK:SPACING: No space is necessary after a cast
#852: FILE: drivers/char/pcxx.c:1993:
+	struct channel *ch = (struct channel *) tty->driver_data;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#853: FILE: drivers/char/pcxx.c:1994:
+	volatile struct board_chan *bc;

ERROR:SPACING: space required before the open parenthesis '('
#857: FILE: drivers/char/pcxx.c:1998:
+	if(ch)

CHECK:BRACES: braces {} should be used on all arms of this statement
#857: FILE: drivers/char/pcxx.c:1998:
+	if(ch)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#859: FILE: drivers/char/pcxx.c:2000:
+	else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#860: FILE: drivers/char/pcxx.c:2001:
+		printk("ch is NULL in %s!\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#860: FILE: drivers/char/pcxx.c:2001:
+		printk("ch is NULL in %s!\n", __FUNCTION__);

ERROR:SPACING: space required before the open parenthesis '('
#871: FILE: drivers/char/pcxx.c:2012:
+	if(mstat & DTR)

ERROR:SPACING: space required before the open parenthesis '('
#873: FILE: drivers/char/pcxx.c:2014:
+	if(mstat & RTS)

ERROR:SPACING: space required before the open parenthesis '('
#875: FILE: drivers/char/pcxx.c:2016:
+	if(mstat & CTS)

ERROR:SPACING: space required before the open parenthesis '('
#877: FILE: drivers/char/pcxx.c:2018:
+	if(mstat & ch->dsr)

ERROR:SPACING: space required before the open parenthesis '('
#879: FILE: drivers/char/pcxx.c:2020:
+	if(mstat & RI)

ERROR:SPACING: space required before the open parenthesis '('
#881: FILE: drivers/char/pcxx.c:2022:
+	if(mstat & ch->dcd)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#887: FILE: drivers/char/pcxx.c:2028:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#891: FILE: drivers/char/pcxx.c:2032:
+	struct channel *ch = (struct channel *) tty->driver_data;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#892: FILE: drivers/char/pcxx.c:2033:
+	volatile struct board_chan *bc;

ERROR:SPACING: space required before the open parenthesis '('
#895: FILE: drivers/char/pcxx.c:2036:
+	if(ch)

CHECK:BRACES: braces {} should be used on all arms of this statement
#895: FILE: drivers/char/pcxx.c:2036:
+	if(ch)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#897: FILE: drivers/char/pcxx.c:2038:
+	else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#898: FILE: drivers/char/pcxx.c:2039:
+		printk("ch is NULL in %s!\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#898: FILE: drivers/char/pcxx.c:2039:
+		printk("ch is NULL in %s!\n", __FUNCTION__);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#927: FILE: drivers/char/pcxx.c:2068:
+	pcxxparam(tty,ch);
 	             ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#932: FILE: drivers/char/pcxx.c:2073:
+
+

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1024: FILE: drivers/char/riscom8.c:1316:
+	if (rc_paranoia_check(port, tty->name, __FUNCTION__))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1053: FILE: drivers/char/riscom8.c:1340:
+	if (rc_paranoia_check(port, tty->name, __FUNCTION__))

CHECK:CAMELCASE: Avoid CamelCase: <port_Board>
#1056: FILE: drivers/char/riscom8.c:1343:
+	bp = port_Board(port);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1083: FILE: drivers/char/riscom8.c:1346:
+^Iif (set & TIOCM_RTS) $

CHECK:CAMELCASE: Avoid CamelCase: <port_No>
#1086: FILE: drivers/char/riscom8.c:1349:
+		bp->DTR &= ~(1u << port_No(port));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1128: FILE: drivers/char/serial167.c:1497:
+  struct cyclades_port * info = (struct cyclades_port *)tty->driver_data;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1128: FILE: drivers/char/serial167.c:1497:
+  struct cyclades_port * info = (struct cyclades_port *)tty->driver_data;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1137: FILE: drivers/char/serial167.c:1511:
+    return    ((status  & CyRTS) ? TIOCM_RTS : 0)$

CHECK:CAMELCASE: Avoid CamelCase: <CyRTS>
#1137: FILE: drivers/char/serial167.c:1511:
+    return    ((status  & CyRTS) ? TIOCM_RTS : 0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1152: FILE: drivers/char/serial167.c:1522:
+  struct cyclades_port * info = (struct cyclades_port *)tty->driver_data;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1152: FILE: drivers/char/serial167.c:1522:
+  struct cyclades_port * info = (struct cyclades_port *)tty->driver_data;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1165: FILE: drivers/char/serial167.c:1530:
+	if (set & TIOCM_RTS){
 	    local_irq_save(flags);

ERROR:SPACING: space required before the open brace '{'
#1165: FILE: drivers/char/serial167.c:1530:
+	if (set & TIOCM_RTS){

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1172: FILE: drivers/char/serial167.c:1536:
+	if (set & TIOCM_DTR){
 	    local_irq_save(flags);

ERROR:SPACING: space required before the open brace '{'
#1172: FILE: drivers/char/serial167.c:1536:
+	if (set & TIOCM_DTR){

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1184: FILE: drivers/char/serial167.c:1548:
+	if (clear & TIOCM_RTS){
 	    local_irq_save(flags);

ERROR:SPACING: space required before the open brace '{'
#1184: FILE: drivers/char/serial167.c:1548:
+	if (clear & TIOCM_RTS){

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1191: FILE: drivers/char/serial167.c:1554:
+	if (clear & TIOCM_DTR){
 	    local_irq_save(flags);

ERROR:SPACING: space required before the open brace '{'
#1191: FILE: drivers/char/serial167.c:1554:
+	if (clear & TIOCM_DTR){

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1288: FILE: drivers/char/specialix.c:1663:
+	if (sx_paranoia_check(port, tty->name, __FUNCTION__))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1320: FILE: drivers/char/specialix.c:1703:
+	if (sx_paranoia_check(port, tty->name, __FUNCTION__))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1373: FILE: drivers/char/specialix.c:1709:
+   /*^Iif (set & TIOCM_RTS) $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1374: FILE: drivers/char/specialix.c:1710:
+   /*	if (set & TIOCM_RTS) 
+		port->MSVR |= MSVR_RTS; */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1374: FILE: drivers/char/specialix.c:1710:
+		port->MSVR |= MSVR_RTS; */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1376: FILE: drivers/char/specialix.c:1712:
+   /*   if (set & TIOCM_DTR)
+		port->MSVR |= MSVR_DTR; */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1376: FILE: drivers/char/specialix.c:1712:
+		port->MSVR |= MSVR_DTR; */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1380: FILE: drivers/char/specialix.c:1716:
+^I^I^Iport->MSVR |= MSVR_DTR; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1383: FILE: drivers/char/specialix.c:1719:
+^I^I^Iport->MSVR |= MSVR_DTR; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1384: FILE: drivers/char/specialix.c:1720:
+^I}^I     $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1387: FILE: drivers/char/specialix.c:1723:
+  /*	if (clear & TIOCM_RTS)
+		port->MSVR &= ~MSVR_RTS; */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1387: FILE: drivers/char/specialix.c:1723:
+		port->MSVR &= ~MSVR_RTS; */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1389: FILE: drivers/char/specialix.c:1725:
+  /*    if (clear & TIOCM_DTR)
+		port->MSVR &= ~MSVR_DTR; */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1389: FILE: drivers/char/specialix.c:1725:
+		port->MSVR &= ~MSVR_DTR; */

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1443: FILE: drivers/isdn/i4l/isdn_tty.c:1447:
+	if (isdn_tty_paranoia_check(info, tty->name, __FUNCTION__))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1449: FILE: drivers/isdn/i4l/isdn_tty.c:1453:
+	printk(KERN_DEBUG "ttyI%d ioctl TIOCMGET\n", info->line);

CHECK:SPACING: No space is necessary after a cast
#1472: FILE: drivers/isdn/i4l/isdn_tty.c:1473:
+	modem_info *info = (modem_info *) tty->driver_data;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1512: FILE: drivers/isdn/i4l/isdn_tty.c:1477:
+	if (isdn_tty_paranoia_check(info, tty->name, __FUNCTION__))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1519: FILE: drivers/isdn/i4l/isdn_tty.c:1483:
+	printk(KERN_DEBUG "ttyI%d ioctl TIOCMxxx: %x %x\n", info->line, set, clear);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1545: FILE: drivers/isdn/i4l/isdn_tty.c:1500:
+			printk(KERN_DEBUG "Mhup in TIOCMBIC\n");

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1598: FILE: drivers/net/wan/pc300_tty.c:588:
+/*
+ * TIOCMBIS/TIOCMBIC do not control only the DTR signal, but also

CHECK:SPACING: No space is necessary after a cast
#1617: FILE: drivers/sbus/char/aurora.c:1757:
+	struct Aurora_port *port = (struct Aurora_port *) tty->driver_data;

CHECK:CAMELCASE: Avoid CamelCase: <Aurora_port>
#1617: FILE: drivers/sbus/char/aurora.c:1757:
+	struct Aurora_port *port = (struct Aurora_port *) tty->driver_data;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1625: FILE: drivers/sbus/char/aurora.c:1766:
+	if ((aurora_paranoia_check(port, tty->name, __FUNCTION__))

CHECK:SPACING: No space is necessary after a cast
#1648: FILE: drivers/sbus/char/aurora.c:1798:
+	struct Aurora_port *port = (struct Aurora_port *) tty->driver_data;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1658: FILE: drivers/sbus/char/aurora.c:1807:
+	if ((aurora_paranoia_check(port, tty->name, __FUNCTION__))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1738: FILE: drivers/serial/68360serial.c:1292:
+	if (serial_paranoia_check(info, tty->name, __FUNCTION__))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1803: FILE: drivers/serial/68360serial.c:1321:
+ ^Iunsigned int arg;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1803: FILE: drivers/serial/68360serial.c:1321:
+ ^Iunsigned int arg;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1803: FILE: drivers/serial/68360serial.c:1321:
+ ^Iunsigned int arg;$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1805: FILE: drivers/serial/68360serial.c:1323:
+	if (serial_paranoia_check(info, tty->name, __FUNCTION__))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1811: FILE: drivers/serial/68360serial.c:1329:
+ ^Iif (set & TIOCM_RTS)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1811: FILE: drivers/serial/68360serial.c:1329:
+ ^Iif (set & TIOCM_RTS)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1811: FILE: drivers/serial/68360serial.c:1329:
+ ^Iif (set & TIOCM_RTS)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1812: FILE: drivers/serial/68360serial.c:1330:
+ ^I^Iinfo->mcr |= UART_MCR_RTS;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1812: FILE: drivers/serial/68360serial.c:1330:
+ ^I^Iinfo->mcr |= UART_MCR_RTS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1812: FILE: drivers/serial/68360serial.c:1330:
+ ^I^Iinfo->mcr |= UART_MCR_RTS;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1813: FILE: drivers/serial/68360serial.c:1331:
+ ^Iif (set & TIOCM_DTR)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1813: FILE: drivers/serial/68360serial.c:1331:
+ ^Iif (set & TIOCM_DTR)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1813: FILE: drivers/serial/68360serial.c:1331:
+ ^Iif (set & TIOCM_DTR)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1814: FILE: drivers/serial/68360serial.c:1332:
+ ^I^Iinfo->mcr |= UART_MCR_DTR;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1814: FILE: drivers/serial/68360serial.c:1332:
+ ^I^Iinfo->mcr |= UART_MCR_DTR;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1814: FILE: drivers/serial/68360serial.c:1332:
+ ^I^Iinfo->mcr |= UART_MCR_DTR;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1873: FILE: drivers/tc/zs.c:1181:
+	struct dec_serial * info = (struct dec_serial *)tty->driver_data;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1880: FILE: drivers/tc/zs.c:1188:
+	if (serial_paranoia_check(info, tty->name, __FUNCTION__))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1903: FILE: drivers/tc/zs.c:1215:
+	struct dec_serial * info = (struct dec_serial *)tty->driver_data;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1913: FILE: drivers/tc/zs.c:1222:
+	if (serial_paranoia_check(info, tty->name, __FUNCTION__))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000311990.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 40 errors, 57 warnings, 33 checks, 1826 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000311990.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
