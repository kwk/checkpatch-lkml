WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
I've been working on a patch that is a roll up of Andrew Morton's patch, and

WARNING:TYPO_SPELLING: 'attatch' may be misspelled - perhaps 'attach'?
#34: 
http://sourceforge.com/projects/lse and I'll also attatch the most recent
                                                  ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#104: FILE: fs/proc/array.c:702:
+static inline int proc_pid_cpu_bitmask_read(char * buffer, unsigned long *bitmask)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#116: FILE: fs/proc/array.c:714:
+static inline int proc_pid_cpu_bitmask_write(char * buffer, size_t nbytes, unsigned long *bitmask)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#127: FILE: fs/proc/array.c:725:
+	new_mask = simple_strtoul(buffer, &endp, 16);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#141: FILE: fs/proc/array.c:739:
+int proc_pid_cpus_allowed_read(struct task_struct *task, char * buffer)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#146: FILE: fs/proc/array.c:744:
+int proc_pid_cpus_allowed_write(struct task_struct *task, char * buffer, size_t nbytes)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#151: FILE: fs/proc/array.c:749:
+int proc_pid_launch_policy_read(struct task_struct *task, char * buffer)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#156: FILE: fs/proc/array.c:754:
+int proc_pid_launch_policy_write(struct task_struct *task, char * buffer, size_t nbytes)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#168: FILE: fs/proc/base.c:42:
+int proc_pid_cpus_allowed_read(struct task_struct *task, char * buffer);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#168: FILE: fs/proc/base.c:42:
+int proc_pid_cpus_allowed_read(struct task_struct *task, char * buffer);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#169: FILE: fs/proc/base.c:43:
+int proc_pid_cpus_allowed_write(struct task_struct *task, char * buffer, size_t nbytes);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#169: FILE: fs/proc/base.c:43:
+int proc_pid_cpus_allowed_write(struct task_struct *task, char * buffer, size_t nbytes);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#170: FILE: fs/proc/base.c:44:
+int proc_pid_launch_policy_read(struct task_struct *task, char * buffer);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#170: FILE: fs/proc/base.c:44:
+int proc_pid_launch_policy_read(struct task_struct *task, char * buffer);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#171: FILE: fs/proc/base.c:45:
+int proc_pid_launch_policy_write(struct task_struct *task, char * buffer, size_t nbytes);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#171: FILE: fs/proc/base.c:45:
+int proc_pid_launch_policy_write(struct task_struct *task, char * buffer, size_t nbytes);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#179: FILE: fs/proc/base.c:312:
+static ssize_t proc_info_write(struct file * file, const char * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#179: FILE: fs/proc/base.c:312:
+static ssize_t proc_info_write(struct file * file, const char * buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#180: FILE: fs/proc/base.c:313:
+static ssize_t proc_info_write(struct file * file, const char * buf,
+			  size_t count, loff_t *ppos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#182: FILE: fs/proc/base.c:315:
+	struct inode * inode = file->f_dentry->d_inode;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode->u.proc_i.op.proc_write"
#188: FILE: fs/proc/base.c:321:
+	if (inode->u.proc_i.op.proc_write == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#194: FILE: fs/proc/base.c:327:
+	if (!(page = __get_free_page(GFP_KERNEL)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#202: FILE: fs/proc/base.c:335:
+	ret = inode->u.proc_i.op.proc_write(task, (char*)page, count);

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#216: FILE: fs/proc/base.c:349:
+	write:		proc_info_write,
 	     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#216: FILE: fs/proc/base.c:349:
+	write:		proc_info_write,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: fs/proc/base.c:570:
+  E(PROC_PID_FD,^I^I"fd",^I^IS_IFDIR|S_IRUSR|S_IXUSR),$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#237: FILE: fs/proc/base.c:570:
+  E(PROC_PID_FD,		"fd",		S_IFDIR|S_IRUSR|S_IXUSR),
                 		     		       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#237: FILE: fs/proc/base.c:570:
+  E(PROC_PID_FD,		"fd",		S_IFDIR|S_IRUSR|S_IXUSR),
                 		     		               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IXUSR' are not preferred. Consider using octal permissions '0500'.
#237: FILE: fs/proc/base.c:570:
+  E(PROC_PID_FD,		"fd",		S_IFDIR|S_IRUSR|S_IXUSR),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: fs/proc/base.c:571:
+  E(PROC_PID_ENVIRON,^I^I"environ",^IS_IFREG|S_IRUSR),$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#238: FILE: fs/proc/base.c:571:
+  E(PROC_PID_ENVIRON,		"environ",	S_IFREG|S_IRUSR),
                      		          	       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#238: FILE: fs/proc/base.c:571:
+  E(PROC_PID_ENVIRON,		"environ",	S_IFREG|S_IRUSR),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: fs/proc/base.c:572:
+  E(PROC_PID_STATUS,^I^I"status",^IS_IFREG|S_IRUGO),$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#239: FILE: fs/proc/base.c:572:
+  E(PROC_PID_STATUS,		"status",	S_IFREG|S_IRUGO),
                     		         	       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#239: FILE: fs/proc/base.c:572:
+  E(PROC_PID_STATUS,		"status",	S_IFREG|S_IRUGO),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: fs/proc/base.c:573:
+  E(PROC_PID_CMDLINE,^I^I"cmdline",^IS_IFREG|S_IRUGO),$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#240: FILE: fs/proc/base.c:573:
+  E(PROC_PID_CMDLINE,		"cmdline",	S_IFREG|S_IRUGO),
                      		          	       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#240: FILE: fs/proc/base.c:573:
+  E(PROC_PID_CMDLINE,		"cmdline",	S_IFREG|S_IRUGO),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: fs/proc/base.c:574:
+  E(PROC_PID_STAT,^I^I"stat",^I^IS_IFREG|S_IRUGO),$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#241: FILE: fs/proc/base.c:574:
+  E(PROC_PID_STAT,		"stat",		S_IFREG|S_IRUGO),
                   		       		       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#241: FILE: fs/proc/base.c:574:
+  E(PROC_PID_STAT,		"stat",		S_IFREG|S_IRUGO),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: fs/proc/base.c:575:
+  E(PROC_PID_STATM,^I^I"statm",^IS_IFREG|S_IRUGO),$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#242: FILE: fs/proc/base.c:575:
+  E(PROC_PID_STATM,		"statm",	S_IFREG|S_IRUGO),
                    		        	       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#242: FILE: fs/proc/base.c:575:
+  E(PROC_PID_STATM,		"statm",	S_IFREG|S_IRUGO),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#245: FILE: fs/proc/base.c:577:
+  E(PROC_PID_CPU,^I^I"cpu",^I^IS_IFREG|S_IRUGO),$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#245: FILE: fs/proc/base.c:577:
+  E(PROC_PID_CPU,		"cpu",		S_IFREG|S_IRUGO),
                  		      		       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#245: FILE: fs/proc/base.c:577:
+  E(PROC_PID_CPU,		"cpu",		S_IFREG|S_IRUGO),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: fs/proc/base.c:578:
+  E(PROC_PID_CPUS_ALLOWED,^I"cpus_allowed",^IS_IFREG|S_IRUGO|S_IWUSR),$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#246: FILE: fs/proc/base.c:578:
+  E(PROC_PID_CPUS_ALLOWED,	"cpus_allowed",	S_IFREG|S_IRUGO|S_IWUSR),
                           	               	       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#246: FILE: fs/proc/base.c:578:
+  E(PROC_PID_CPUS_ALLOWED,	"cpus_allowed",	S_IFREG|S_IRUGO|S_IWUSR),
                           	               	               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#246: FILE: fs/proc/base.c:578:
+  E(PROC_PID_CPUS_ALLOWED,	"cpus_allowed",	S_IFREG|S_IRUGO|S_IWUSR),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: fs/proc/base.c:579:
+  E(PROC_PID_LAUNCH_POLICY,^I"launch_policy",S_IFREG|S_IRUGO|S_IWUSR),$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#247: FILE: fs/proc/base.c:579:
+  E(PROC_PID_LAUNCH_POLICY,	"launch_policy",S_IFREG|S_IRUGO|S_IWUSR),
                            	               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#247: FILE: fs/proc/base.c:579:
+  E(PROC_PID_LAUNCH_POLICY,	"launch_policy",S_IFREG|S_IRUGO|S_IWUSR),
                            	                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#247: FILE: fs/proc/base.c:579:
+  E(PROC_PID_LAUNCH_POLICY,	"launch_policy",S_IFREG|S_IRUGO|S_IWUSR),
                            	                               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#247: FILE: fs/proc/base.c:579:
+  E(PROC_PID_LAUNCH_POLICY,	"launch_policy",S_IFREG|S_IRUGO|S_IWUSR),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: fs/proc/base.c:581:
+  E(PROC_PID_MAPS,^I^I"maps",^I^IS_IFREG|S_IRUGO),$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#254: FILE: fs/proc/base.c:581:
+  E(PROC_PID_MAPS,		"maps",		S_IFREG|S_IRUGO),
                   		       		       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#254: FILE: fs/proc/base.c:581:
+  E(PROC_PID_MAPS,		"maps",		S_IFREG|S_IRUGO),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: fs/proc/base.c:582:
+  E(PROC_PID_MEM,^I^I"mem",^I^IS_IFREG|S_IRUSR|S_IWUSR),$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#255: FILE: fs/proc/base.c:582:
+  E(PROC_PID_MEM,		"mem",		S_IFREG|S_IRUSR|S_IWUSR),
                  		      		       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#255: FILE: fs/proc/base.c:582:
+  E(PROC_PID_MEM,		"mem",		S_IFREG|S_IRUSR|S_IWUSR),
                  		      		               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#255: FILE: fs/proc/base.c:582:
+  E(PROC_PID_MEM,		"mem",		S_IFREG|S_IRUSR|S_IWUSR),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#256: FILE: fs/proc/base.c:583:
+  E(PROC_PID_CWD,^I^I"cwd",^I^IS_IFLNK|S_IRWXUGO),$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#256: FILE: fs/proc/base.c:583:
+  E(PROC_PID_CWD,		"cwd",		S_IFLNK|S_IRWXUGO),
                  		      		       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#256: FILE: fs/proc/base.c:583:
+  E(PROC_PID_CWD,		"cwd",		S_IFLNK|S_IRWXUGO),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#257: FILE: fs/proc/base.c:584:
+  E(PROC_PID_ROOT,^I^I"root",^I^IS_IFLNK|S_IRWXUGO),$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#257: FILE: fs/proc/base.c:584:
+  E(PROC_PID_ROOT,		"root",		S_IFLNK|S_IRWXUGO),
                   		       		       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#257: FILE: fs/proc/base.c:584:
+  E(PROC_PID_ROOT,		"root",		S_IFLNK|S_IRWXUGO),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: fs/proc/base.c:585:
+  E(PROC_PID_EXE,^I^I"exe",^I^IS_IFLNK|S_IRWXUGO),$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#258: FILE: fs/proc/base.c:585:
+  E(PROC_PID_EXE,		"exe",		S_IFLNK|S_IRWXUGO),
                  		      		       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#258: FILE: fs/proc/base.c:585:
+  E(PROC_PID_EXE,		"exe",		S_IFLNK|S_IRWXUGO),

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#337: FILE: include/linux/sched.h:471:
+    launch_policy:	-1,						\
                  ^

WARNING:INDENTED_LABEL: labels should not be indented
#337: FILE: include/linux/sched.h:471:
+    launch_policy:	-1,						\

CHECK:BRACES: braces {} should be used on all arms of this statement
#366: FILE: kernel/sys.c:1266:
+			if ((((1 << smp_num_cpus) - 1) & arg2) == 0)
[...]
+			else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#368: FILE: kernel/sys.c:1268:
+			else {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000496643.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 37 warnings, 22 checks, 286 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000496643.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
