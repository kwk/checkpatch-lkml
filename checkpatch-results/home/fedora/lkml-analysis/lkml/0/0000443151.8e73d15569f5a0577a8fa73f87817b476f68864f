WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
diff -urN v2.5.29/arch/i386/kernel/entry.S aio-v2.5.29.diff/arch/i386/kernel/entry.S

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#83: FILE: fs/aio.c:1:
+/* fs/aio.c

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#83: FILE: fs/aio.c:1:
+/* fs/aio.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#102: FILE: fs/aio.c:20:
+ *   with this program; if not, write to the Free Software Foundation, Inc.,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#103: FILE: fs/aio.c:21:
+ *   59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#124: FILE: fs/aio.c:42:
+#include <asm/uaccess.h>

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#130: FILE: fs/aio.c:48:
+#define dprintk(x...)	do { ; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#135: FILE: fs/aio.c:53:
+unsigned aio_max_nr = 0x10000;	/* system wide maximum number of aio requests */

WARNING:INDENTED_LABEL: labels should not be indented
#144: FILE: fs/aio.c:62:
+	routine:	aio_fput_routine,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#157: FILE: fs/aio.c:75:
+	kiocb_cachep = kmem_cache_create("kiocb", sizeof(struct kiocb),
+				0, SLAB_HWCACHE_ALIGN, NULL, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#162: FILE: fs/aio.c:80:
+	kioctx_cachep = kmem_cache_create("kioctx", sizeof(struct kioctx),
+				0, SLAB_HWCACHE_ALIGN, NULL, NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#166: FILE: fs/aio.c:84:
+	printk(KERN_NOTICE "aio_setup: sizeof(struct page) = %d\n", (int)sizeof(struct page));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'aio_setup', this function's name, in a string
#166: FILE: fs/aio.c:84:
+	printk(KERN_NOTICE "aio_setup: sizeof(struct page) = %d\n", (int)sizeof(struct page));

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LINE_SPACING: Missing a blank line after declarations
#174: FILE: fs/aio.c:92:
+	struct list_head *pos, *next;
+	list_for_each_safe(pos, next, &ctx->free_reqs) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#176: FILE: fs/aio.c:94:
+		struct kiocb *iocb = list_kiocb(pos);
+		list_del(&iocb->ki_list);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#186: FILE: fs/aio.c:104:
+	for (i=0; i<info->nr_pages; i++)
 	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#186: FILE: fs/aio.c:104:
+	for (i=0; i<info->nr_pages; i++)
 	           ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#205: FILE: fs/aio.c:123:
+	unsigned nr_reqs = ctx->max_reqs;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#214: FILE: fs/aio.c:132:
+	nr_pages = (size + PAGE_SIZE-1) >> PAGE_SHIFT;
 	                            ^

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#226: FILE: fs/aio.c:144:
+		info->ring_pages = kmalloc(sizeof(struct page *) * nr_pages, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#235: FILE: fs/aio.c:153:
+^Iinfo->mmap_base = do_mmap(NULL, 0, info->mmap_size, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#236: FILE: fs/aio.c:154:
+				  PROT_READ|PROT_WRITE, MAP_ANON|MAP_PRIVATE,
 				           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#236: FILE: fs/aio.c:154:
+				  PROT_READ|PROT_WRITE, MAP_ANON|MAP_PRIVATE,
 				                                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#240: FILE: fs/aio.c:158:
+		printk("mmap err: %ld\n", -info->mmap_base);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#248: FILE: fs/aio.c:166:
+^I^I^I^I^Iinfo->mmap_base, info->mmap_size, $

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#264: FILE: fs/aio.c:182:
+	ring->head = ring->tail = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LINE_SPACING: Missing a blank line after declarations
#285: FILE: fs/aio.c:203:
+		struct aio_ring *ring;
+		ring = kmap_atomic(info->ring_pages[0], km);

WARNING:LINE_SPACING: Missing a blank line after declarations
#298: FILE: fs/aio.c:216:
+	void *p = (void *)((unsigned long)event & PAGE_MASK);
+	kunmap_atomic(p, km);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#304: FILE: fs/aio.c:222:
+static struct kioctx *ioctx_alloc(unsigned nr_reqs)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#308: FILE: fs/aio.c:226:
+	unsigned i;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#326: FILE: fs/aio.c:244:
+	mm = ctx->mm = current->mm;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#340: FILE: fs/aio.c:258:
+^I/* Allocate nr_reqs iocbs for io.  Free iocbs are on the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#341: FILE: fs/aio.c:259:
+^I * ctx->free_reqs list.  When active they migrate to the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#342: FILE: fs/aio.c:260:
+^I * active_reqs list.  During completion and cancellation $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#345: FILE: fs/aio.c:263:
+	for (i=0; i<nr_reqs; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#345: FILE: fs/aio.c:263:
+	for (i=0; i<nr_reqs; i++) {
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#347: FILE: fs/aio.c:265:
+		struct kiocb *iocb = kmem_cache_alloc(kiocb_cachep, GFP_KERNEL);
+		if (!iocb)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#386: FILE: fs/aio.c:304:
+ *^ICancels all outstanding aio requests on an aio context.  Used $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#387: FILE: fs/aio.c:305:
+ *^Iwhen the processes owning a context have all exited to encourage $

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#392: FILE: fs/aio.c:310:
+	int (*cancel)(struct kiocb *, struct io_event *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct io_event *' should also have an identifier name
#392: FILE: fs/aio.c:310:
+	int (*cancel)(struct kiocb *, struct io_event *);

WARNING:LINE_SPACING: Missing a blank line after declarations
#394: FILE: fs/aio.c:312:
+	struct io_event res;
+	spin_lock_irq(&ctx->ctx_lock);

WARNING:LINE_SPACING: Missing a blank line after declarations
#399: FILE: fs/aio.c:317:
+		struct kiocb *iocb = list_kiocb(pos);
+		list_del_init(&iocb->ki_list);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#422: FILE: fs/aio.c:340:
+		printk("ctx->reqs_active = %d\n", ctx->reqs_active);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#430: FILE: fs/aio.c:348:
+/* exit_aio: called when the last user of mm goes away.  At this point, $

WARNING:TYPO_SPELLING: 'submited' may be misspelled - perhaps 'submitted'?
#431: FILE: fs/aio.c:349:
+ * there is no way for any new requests to be submited or any of the 
                                               ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#431: FILE: fs/aio.c:349:
+ * there is no way for any new requests to be submited or any of the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#432: FILE: fs/aio.c:350:
+ * io_* syscalls to be called on the context.  However, there may be $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#433: FILE: fs/aio.c:351:
+ * outstanding requests which hold references to the context; as they $

WARNING:LINE_SPACING: Missing a blank line after declarations
#440: FILE: fs/aio.c:358:
+	struct kioctx *ctx = mm->ioctx_list;
+	mm->ioctx_list = NULL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#443: FILE: fs/aio.c:361:
+		struct kioctx *next = ctx->next;
+		ctx->next = NULL;

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#448: FILE: fs/aio.c:366:
+		if (1 != atomic_read(&ctx->users))

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#449: FILE: fs/aio.c:367:
+			printk(KERN_DEBUG

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'exit_aio', this function's name, in a string
#450: FILE: fs/aio.c:368:
+				"exit_aio:ioctx still alive: %d %d %d\n",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#464: FILE: fs/aio.c:382:
+	unsigned nr_reqs = ctx->max_reqs;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#467: FILE: fs/aio.c:385:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__put_ioctx', this function's name, in a string
#472: FILE: fs/aio.c:390:
+	pr_debug("__put_ioctx: freeing %p\n", ctx);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ctx->reqs_active < aio_ring_avail(&ctx->ring_info, ring)'
#495: FILE: fs/aio.c:413:
+	if (likely(!list_empty(&ctx->free_reqs) &&
+	    (ctx->reqs_active < aio_ring_avail(&ctx->ring_info, ring)))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#496: FILE: fs/aio.c:414:
+	if (likely(!list_empty(&ctx->free_reqs) &&
+	    (ctx->reqs_active < aio_ring_avail(&ctx->ring_info, ring)))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "req->ki_ctx"
#504: FILE: fs/aio.c:422:
+		if (unlikely(req->ki_ctx != NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#505: FILE: fs/aio.c:423:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#508: FILE: fs/aio.c:426:
+			BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#520: FILE: fs/aio.c:438:
+^I/* Handle a potential starvation case -- should be exceedingly rare as $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#521: FILE: fs/aio.c:439:
+^I * requests will be stuck on fput_head only if the aio_fput_routine is $

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#525: FILE: fs/aio.c:443:
+	if (unlikely(NULL == req)) {

ERROR:SPACING: space prohibited before that '--' (ctx:WxO)
#576: FILE: fs/aio.c:494:
+	req->ki_users --;
 	              ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#578: FILE: fs/aio.c:496:
+		BUG();

CHECK:BRACES: braces {} should be used on all arms of this statement
#587: FILE: fs/aio.c:505:
+	if (unlikely(atomic_dec_and_test(&req->ki_filp->f_count))) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#593: FILE: fs/aio.c:511:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#606: FILE: fs/aio.c:524:
+	int ret;
+	spin_lock_irq(&ctx->ctx_lock);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#636: FILE: fs/aio.c:554:
+ *^IReturns true if this is the last user of the request.  The $

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'aio_complete', this function's name, in a string
#668: FILE: fs/aio.c:586:
+	dprintk("aio_complete: %p[%lu]: %p: %p %Lx %lx %lx\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#668: FILE: fs/aio.c:586:
+	dprintk("aio_complete: %p[%lu]: %p: %p %Lx %lx %lx\n",

WARNING:MEMORY_BARRIER: memory barrier without comment
#680: FILE: fs/aio.c:598:
+	wmb();

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#691: FILE: fs/aio.c:609:
+	if (waitqueue_active(&ctx->wait))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#701: FILE: fs/aio.c:619:
+ *^IPull an event off of the ioctx's event ring.  Returns the number of $

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'aio_read_evt', this function's name, in a string
#714: FILE: fs/aio.c:632:
+	dprintk("in aio_read_evt h%lu t%lu m%lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#715: FILE: fs/aio.c:633:
+	dprintk("in aio_read_evt h%lu t%lu m%lu\n",
+		 (unsigned long)ring->head, (unsigned long)ring->tail,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'aio_read_evt', this function's name, in a string
#737: FILE: fs/aio.c:655:
+	dprintk("leaving aio_read_evt: %d  h%lu t%lu\n", ret,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#738: FILE: fs/aio.c:656:
+	dprintk("leaving aio_read_evt: %d  h%lu t%lu\n", ret,
+		 (unsigned long)ring->head, (unsigned long)ring->tail);

WARNING:LINE_SPACING: Missing a blank line after declarations
#768: FILE: fs/aio.c:686:
+	struct timeval tv;
+	do_gettimeofday(&tv);

ERROR:SPACING: space prohibited before that '--' (ctx:WxO)
#773: FILE: fs/aio.c:691:
+		ts->tv_sec --;
 		           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#789: FILE: fs/aio.c:707:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#800: FILE: fs/aio.c:718:
+static int read_events(struct kioctx *ctx, int nr, struct io_event *event,
+			const struct timespec *timeout)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#809: FILE: fs/aio.c:727:
+^I/* needed to zero any padding within an entry (there shouldn't be $

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#820: FILE: fs/aio.c:738:
+		dprintk("read event: %Lx %Lx %Lx %Lx\n",

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#832: FILE: fs/aio.c:750:
+		event ++;
 		      ^

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#833: FILE: fs/aio.c:751:
+		i ++;
 		  ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#845: FILE: fs/aio.c:763:
+		struct timespec	ts;
+		ret = -EFAULT;

WARNING:SPACING: space prohibited before semicolon
#875: FILE: fs/aio.c:793:
+		} while (1) ;

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#890: FILE: fs/aio.c:808:
+		event ++;
 		      ^

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#891: FILE: fs/aio.c:809:
+		i ++;
 		  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#900: FILE: fs/aio.c:818:
+/* Take an ioctx and remove it from the list of ioctx's.  Protects $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#929: FILE: fs/aio.c:847:
+asmlinkage long sys_io_setup(unsigned nr_reqs, aio_context_t *ctxp)

WARNING:LINE_SPACING: Missing a blank line after declarations
#964: FILE: fs/aio.c:882:
+	struct kioctx *ioctx = lookup_ioctx(ctx);
+	if (likely(NULL != ioctx)) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#964: FILE: fs/aio.c:882:
+	if (likely(NULL != ioctx)) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#990: FILE: fs/aio.c:908:
+	if (unlikely(

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'iocb->aio_buf != (unsigned long)iocb->aio_buf'
#990: FILE: fs/aio.c:908:
+	if (unlikely(
+	    (iocb->aio_buf != (unsigned long)iocb->aio_buf) ||
+	    (iocb->aio_nbytes != (size_t)iocb->aio_nbytes) ||
+	    ((ssize_t)iocb->aio_nbytes < 0)
+	   )) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'iocb->aio_nbytes != (size_t)iocb->aio_nbytes'
#990: FILE: fs/aio.c:908:
+	if (unlikely(
+	    (iocb->aio_buf != (unsigned long)iocb->aio_buf) ||
+	    (iocb->aio_nbytes != (size_t)iocb->aio_nbytes) ||
+	    ((ssize_t)iocb->aio_nbytes < 0)
+	   )) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1062: FILE: fs/aio.c:980:
+	if (likely(EIOCBQUEUED == ret))

WARNING:TYPO_SPELLING: 'sematics' may be misspelled - perhaps 'semantics'?
#1078: FILE: fs/aio.c:996:
+ *	of aiocbs copied is returned (standard write sematics).
   	                                             ^^^^^^^^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1089: FILE: fs/aio.c:1007:
+	if (unlikely(!access_ok(VERIFY_READ, iocbpp, (nr*sizeof(*iocbpp)))))
 	                                                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1098: FILE: fs/aio.c:1016:
+	for (i=0; i<nr; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1098: FILE: fs/aio.c:1016:
+	for (i=0; i<nr; i++) {
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1130: FILE: fs/aio.c:1048:
+		struct kiocb *kiocb = list_kiocb(pos);
+		if (kiocb->ki_user_obj == iocb && kiocb->ki_key == key)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1138: FILE: fs/aio.c:1056:
+ *^Ireturns 0 and places the resulting event in res.  Otherwise, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1142: FILE: fs/aio.c:1060:
+asmlinkage long sys_io_cancel(aio_context_t ctx_id, struct iocb *iocb,
+				struct io_event *u_res)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1162: FILE: fs/aio.c:1080:
+	if (kiocb && kiocb->ki_cancel) {
[...]
+	} else
[...]

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#1164: FILE: fs/aio.c:1082:
+		kiocb->ki_users ++;
 		                ^

CHECK:BRACES: Unbalanced braces around else statement
#1165: FILE: fs/aio.c:1083:
+	} else

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1169: FILE: fs/aio.c:1087:
+	if (NULL != cancel) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1169: FILE: fs/aio.c:1087:
+	if (NULL != cancel) {
[...]
+	} else
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1170: FILE: fs/aio.c:1088:
+		printk("calling cancel\n");

CHECK:BRACES: Unbalanced braces around else statement
#1179: FILE: fs/aio.c:1097:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1180: FILE: fs/aio.c:1098:
+		printk(KERN_DEBUG "iocb has no cancel operation\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1189: FILE: fs/aio.c:1107:
+ *^Ievents from the io context ctx_id.  $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1192: FILE: fs/aio.c:1110:
+asmlinkage long sys_io_getevents_abs(aio_context_t ctx_id,
+				 long nr,

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1199: FILE: fs/aio.c:1117:
+	if (likely(NULL != ioctx)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1207: FILE: fs/aio.c:1125:
+/* vsys_io_getevents: runs in userspace to fetch what io events are $

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1210: FILE: fs/aio.c:1128:
+#if 0

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".vsyscall_text") over __attribute__((section(".vsyscall_text")))
#1211: FILE: fs/aio.c:1129:
+__attribute__((section(".vsyscall_text")))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1213: FILE: fs/aio.c:1131:
+asmlinkage long vsys_io_getevents(aio_context_t ctx_id,
+				   long nr,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1221: FILE: fs/aio.c:1139:
+		unsigned head;

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#1239: FILE: fs/aio.c:1157:
+__initcall(aio_setup);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1241: FILE: fs/aio.c:1159:
+EXPORT_SYMBOL(aio_complete);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1242: FILE: fs/aio.c:1160:
+EXPORT_SYMBOL(aio_put_req);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1277: FILE: include/linux/aio.h:1:
+#ifndef __LINUX__AIO_H

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#1282: FILE: include/linux/aio.h:6:
+#include <asm/atomic.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1292: FILE: include/linux/aio.h:16:
+ *^IIf a kiocb is cancelled, aio_complete may return 0 to indicate $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1293: FILE: include/linux/aio.h:17:
+ *^Ithat cancel has not yet disposed of the kiocb.  All cancel $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1294: FILE: include/linux/aio.h:18:
+ *^Ioperations *must* call aio_put_req to dispose of the kiocb $

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#1304: FILE: include/linux/aio.h:28:
+	void			*ki_data;	/* for use by the the file */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1312: FILE: include/linux/aio.h:36:
+	unsigned		ki_key;		/* id of this request */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#1313: FILE: include/linux/aio.h:37:
+	int			(*ki_cancel)(struct kiocb *, struct io_event *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct io_event *' should also have an identifier name
#1313: FILE: include/linux/aio.h:37:
+	int			(*ki_cancel)(struct kiocb *, struct io_event *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1320: FILE: include/linux/aio.h:44:
+	unsigned	id;	/* kernel internal index number */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1321: FILE: include/linux/aio.h:45:
+	unsigned	nr;	/* number of io_events */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1322: FILE: include/linux/aio.h:46:
+	unsigned	head;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1323: FILE: include/linux/aio.h:47:
+	unsigned	tail;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1325: FILE: include/linux/aio.h:49:
+	unsigned	magic;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1326: FILE: include/linux/aio.h:50:
+	unsigned	compat_features;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1327: FILE: include/linux/aio.h:51:
+	unsigned	incompat_features;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1328: FILE: include/linux/aio.h:52:
+	unsigned	header_length;	/* size of aio_ring */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1330: FILE: include/linux/aio.h:54:
+
+

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1334: FILE: include/linux/aio.h:58:
+#define aio_ring_avail(info, ring)	(((ring)->head + (info)->nr - 1 - (ring)->tail) % (info)->nr)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'info' - possible side-effects?
#1334: FILE: include/linux/aio.h:58:
+#define aio_ring_avail(info, ring)	(((ring)->head + (info)->nr - 1 - (ring)->tail) % (info)->nr)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ring' - possible side-effects?
#1334: FILE: include/linux/aio.h:58:
+#define aio_ring_avail(info, ring)	(((ring)->head + (info)->nr - 1 - (ring)->tail) % (info)->nr)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1342: FILE: include/linux/aio.h:66:
+	spinlock_t		ring_lock;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1345: FILE: include/linux/aio.h:69:
+	unsigned		nr, tail;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1361: FILE: include/linux/aio.h:85:
+	spinlock_t		ctx_lock;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1367: FILE: include/linux/aio.h:91:
+	unsigned		max_reqs;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1373: FILE: include/linux/aio.h:97:
+extern unsigned aio_max_size;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1375: FILE: include/linux/aio.h:99:
+extern int FASTCALL(aio_put_req(struct kiocb *iocb));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1376: FILE: include/linux/aio.h:100:
+extern int FASTCALL(aio_complete(struct kiocb *iocb, long res, long res2));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1377: FILE: include/linux/aio.h:101:
+extern void FASTCALL(__put_ioctx(struct kioctx *ctx));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1379: FILE: include/linux/aio.h:103:
+extern void FASTCALL(exit_aio(struct mm_struct *mm));

WARNING:LONG_LINE: line length of 135 exceeds 100 columns
#1381: FILE: include/linux/aio.h:105:
+#define get_ioctx(kioctx)	do { if (unlikely(atomic_read(&(kioctx)->users) <= 0)) BUG(); atomic_inc(&(kioctx)->users); } while (0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1381: FILE: include/linux/aio.h:105:
+#define get_ioctx(kioctx)	do { if (unlikely(atomic_read(&(kioctx)->users) <= 0)) BUG(); atomic_inc(&(kioctx)->users); } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'kioctx' - possible side-effects?
#1381: FILE: include/linux/aio.h:105:
+#define get_ioctx(kioctx)	do { if (unlikely(atomic_read(&(kioctx)->users) <= 0)) BUG(); atomic_inc(&(kioctx)->users); } while (0)

WARNING:LONG_LINE: line length of 183 exceeds 100 columns
#1382: FILE: include/linux/aio.h:106:
+#define put_ioctx(kioctx)	do { if (unlikely(atomic_dec_and_test(&(kioctx)->users))) __put_ioctx(kioctx); else if (unlikely(atomic_read(&(kioctx)->users) < 0)) BUG(); } while (0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1382: FILE: include/linux/aio.h:106:
+#define put_ioctx(kioctx)	do { if (unlikely(atomic_dec_and_test(&(kioctx)->users))) __put_ioctx(kioctx); else if (unlikely(atomic_read(&(kioctx)->users) < 0)) BUG(); } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'kioctx' - possible side-effects?
#1382: FILE: include/linux/aio.h:106:
+#define put_ioctx(kioctx)	do { if (unlikely(atomic_dec_and_test(&(kioctx)->users))) __put_ioctx(kioctx); else if (unlikely(atomic_read(&(kioctx)->users) < 0)) BUG(); } while (0)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1392: FILE: include/linux/aio.h:116:
+extern unsigned aio_max_nr, aio_max_size, aio_max_pinned;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1399: FILE: include/linux/aio_abi.h:1:
+/* linux/aio_abi.h

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1427: FILE: include/linux/aio_abi.h:29:
+typedef unsigned long	aio_context_t;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1450: FILE: include/linux/aio_abi.h:52:
+#define PADDED(x,y)	x, y
                 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1450: FILE: include/linux/aio_abi.h:52:
+#define PADDED(x,y)	x, y

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1452: FILE: include/linux/aio_abi.h:54:
+#define PADDED(x,y)	y, x
                 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1452: FILE: include/linux/aio_abi.h:54:
+#define PADDED(x,y)	y, x

WARNING:LINE_SPACING: Missing a blank line after declarations
#1466: FILE: include/linux/aio_abi.h:68:
+	__u64	aio_data;	/* data to be returned in event's data */
+	__u32	PADDED(aio_key, aio_reserved1);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'aio_key' should also have an identifier name
#1466: FILE: include/linux/aio_abi.h:68:
+	__u32	PADDED(aio_key, aio_reserved1);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'aio_reserved1' should also have an identifier name
#1466: FILE: include/linux/aio_abi.h:68:
+	__u32	PADDED(aio_key, aio_reserved1);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#1515: FILE: include/linux/fs.h:764:
+	ssize_t (*aio_read)(struct kiocb *, char *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1515: FILE: include/linux/fs.h:764:
+	ssize_t (*aio_read)(struct kiocb *, char *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1515: FILE: include/linux/fs.h:764:
+	ssize_t (*aio_read)(struct kiocb *, char *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#1515: FILE: include/linux/fs.h:764:
+	ssize_t (*aio_read)(struct kiocb *, char *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#1516: FILE: include/linux/fs.h:765:
+	ssize_t (*aio_write)(struct kiocb *, const char *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1516: FILE: include/linux/fs.h:765:
+	ssize_t (*aio_write)(struct kiocb *, const char *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1516: FILE: include/linux/fs.h:765:
+	ssize_t (*aio_write)(struct kiocb *, const char *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#1516: FILE: include/linux/fs.h:765:
+	ssize_t (*aio_write)(struct kiocb *, const char *, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#1517: FILE: include/linux/fs.h:766:
+	int (*aio_fsync)(struct kiocb *, int datasync);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000443151.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 43 errors, 101 warnings, 37 checks, 1486 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000443151.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
