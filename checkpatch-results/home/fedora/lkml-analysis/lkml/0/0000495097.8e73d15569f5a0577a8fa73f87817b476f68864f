WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#58: 
//  EXTRAVERSION =-pre5
    ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#94: FILE: include/linux/spinlock.h:98:
+#define SPIN_LOCK_UNLOCKED (spinlock_t) { SPINLOCK_MAGIC, 0, 10, __FILE__ , NULL, 0}
                                                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#94: FILE: include/linux/spinlock.h:98:
+#define SPIN_LOCK_UNLOCKED (spinlock_t) { SPINLOCK_MAGIC, 0, 10, __FILE__ , NULL, 0}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#105: FILE: include/linux/spinlock.h:102:
+#define spin_lock_init(x) \
+	do { \
+		(x)->magic = SPINLOCK_MAGIC; \
+		(x)->lock = 0; \
+		(x)->babble = 5; \
+		(x)->module = __FILE__; \
+		(x)->owner = NULL; \
+		(x)->oline = 0; \
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#114: FILE: include/linux/spinlock.h:111:
+#define CHECK_LOCK(x) \
+	do { \
+	 	if ((x)->magic != SPINLOCK_MAGIC) { \
+			printk(KERN_ERR "%s:%d: spin_is_locked on uninitialized spinlock %p.\n", \
+					__FILE__, __LINE__, (x)); \
+		} \
+	} while(0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#116: FILE: include/linux/spinlock.h:113:
+^I ^Iif ((x)->magic != SPINLOCK_MAGIC) { \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#116: FILE: include/linux/spinlock.h:113:
+^I ^Iif ((x)->magic != SPINLOCK_MAGIC) { \$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#117: FILE: include/linux/spinlock.h:114:
+			printk(KERN_ERR "%s:%d: spin_is_locked on uninitialized spinlock %p.\n", \

ERROR:SPACING: space required before the open parenthesis '('
#120: FILE: include/linux/spinlock.h:117:
+	} while(0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#122: FILE: include/linux/spinlock.h:119:
+ * FALSE. --> printk if already locked. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#123: FILE: include/linux/spinlock.h:120:
+#define spin_is_locked(x) \
+	({ \
+	 	CHECK_LOCK(x); \
+		if ((x)->lock&&(x)->babble) { \
+			printk("%s:%d: spin_is_locked(%s:%p) already locked by %s/%d\n", \
+					__FILE__,__LINE__, (x)->module, \
+					(x), (x)->owner, (x)->oline); \
+			(x)->babble--; \
+		} \
+		0; \
+	})

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#123: FILE: include/linux/spinlock.h:120:
+#define spin_is_locked(x) \

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

ERROR:CODE_INDENT: code indent should use tabs where possible
#125: FILE: include/linux/spinlock.h:122:
+^I ^ICHECK_LOCK(x); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#125: FILE: include/linux/spinlock.h:122:
+^I ^ICHECK_LOCK(x); \$

ERROR:SPACING: spaces required around that '&&' (ctx:VxV)
#126: FILE: include/linux/spinlock.h:123:
+		if ((x)->lock&&(x)->babble) { \
 		             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#127: FILE: include/linux/spinlock.h:124:
+			printk("%s:%d: spin_is_locked(%s:%p) already locked by %s/%d\n", \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#128: FILE: include/linux/spinlock.h:125:
+					__FILE__,__LINE__, (x)->module, \
 					        ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#136: FILE: include/linux/spinlock.h:133:
+ * TRUE. --> printk if already locked. */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#137: FILE: include/linux/spinlock.h:134:
+#define spin_trylock(x) \
+	({ \
+	 	CHECK_LOCK(x); \
+		if ((x)->lock&&(x)->babble) { \
+			printk("%s:%d: spin_trylock(%s:%p) already locked by %s/%d\n", \
+					__FILE__,__LINE__, (x)->module, \
+					(x), (x)->owner, (x)->oline); \
+			(x)->babble--; \
+		} \
+		(x)->lock = 1; \
+		(x)->owner = __FILE__; \
+		(x)->oline = __LINE__; \
+		1; \
+	})

ERROR:CODE_INDENT: code indent should use tabs where possible
#139: FILE: include/linux/spinlock.h:136:
+^I ^ICHECK_LOCK(x); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#139: FILE: include/linux/spinlock.h:136:
+^I ^ICHECK_LOCK(x); \$

ERROR:SPACING: spaces required around that '&&' (ctx:VxV)
#140: FILE: include/linux/spinlock.h:137:
+		if ((x)->lock&&(x)->babble) { \
 		             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#141: FILE: include/linux/spinlock.h:138:
+			printk("%s:%d: spin_trylock(%s:%p) already locked by %s/%d\n", \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#142: FILE: include/linux/spinlock.h:139:
+					__FILE__,__LINE__, (x)->module, \
 					        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#152: FILE: include/linux/spinlock.h:149:
+#define spin_lock(x)		\
+	do { \
+	 	CHECK_LOCK(x); \
+		if ((x)->lock&&(x)->babble) { \
+			printk("%s:%d: spin_lock(%s:%p) already locked by %s/%d\n", \
+					__FILE__,__LINE__, (x)->module, \
+					(x), (x)->owner, (x)->oline); \
+			(x)->babble--; \
+		} \
+		(x)->lock = 1; \
+		(x)->owner = __FILE__; \
+		(x)->oline = __LINE__; \
+	} while (0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: include/linux/spinlock.h:151:
+^I ^ICHECK_LOCK(x); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#154: FILE: include/linux/spinlock.h:151:
+^I ^ICHECK_LOCK(x); \$

ERROR:SPACING: spaces required around that '&&' (ctx:VxV)
#155: FILE: include/linux/spinlock.h:152:
+		if ((x)->lock&&(x)->babble) { \
 		             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#156: FILE: include/linux/spinlock.h:153:
+			printk("%s:%d: spin_lock(%s:%p) already locked by %s/%d\n", \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#157: FILE: include/linux/spinlock.h:154:
+					__FILE__,__LINE__, (x)->module, \
 					        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#166: FILE: include/linux/spinlock.h:163:
+#define spin_unlock_wait(x)	\
+	do { \
+	 	CHECK_LOCK(x); \
+		if ((x)->lock&&(x)->babble) { \
+			printk("%s:%d: spin_unlock_wait(%s:%p) owned by %s/%d\n", \
+					__FILE__,__LINE__, (x)->module, (x), \
+					(x)->owner, (x)->oline); \
+			(x)->babble--; \
+		}\
+	} while (0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#168: FILE: include/linux/spinlock.h:165:
+^I ^ICHECK_LOCK(x); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#168: FILE: include/linux/spinlock.h:165:
+^I ^ICHECK_LOCK(x); \$

ERROR:SPACING: spaces required around that '&&' (ctx:VxV)
#169: FILE: include/linux/spinlock.h:166:
+		if ((x)->lock&&(x)->babble) { \
 		             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#170: FILE: include/linux/spinlock.h:167:
+			printk("%s:%d: spin_unlock_wait(%s:%p) owned by %s/%d\n", \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#171: FILE: include/linux/spinlock.h:168:
+					__FILE__,__LINE__, (x)->module, (x), \
 					        ^

ERROR:SPACING: space required after that close brace '}'
#174: FILE: include/linux/spinlock.h:171:
+		}\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#177: FILE: include/linux/spinlock.h:174:
+#define spin_unlock(x) \
+	do { \
+	 	CHECK_LOCK(x); \
+		if (!(x)->lock&&(x)->babble) { \
+			printk("%s:%d: spin_unlock(%s:%p) not locked\n", \
+					__FILE__,__LINE__, (x)->module, (x));\
+			(x)->babble--; \
+		} \
+		(x)->lock = 0; \
+	} while (0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#179: FILE: include/linux/spinlock.h:176:
+^I ^ICHECK_LOCK(x); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#179: FILE: include/linux/spinlock.h:176:
+^I ^ICHECK_LOCK(x); \$

ERROR:SPACING: spaces required around that '&&' (ctx:VxV)
#180: FILE: include/linux/spinlock.h:177:
+		if (!(x)->lock&&(x)->babble) { \
 		              ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#181: FILE: include/linux/spinlock.h:178:
+			printk("%s:%d: spin_unlock(%s:%p) not locked\n", \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#182: FILE: include/linux/spinlock.h:179:
+					__FILE__,__LINE__, (x)->module, (x));\
 					        ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000495097.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 16 warnings, 7 checks, 150 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000495097.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
