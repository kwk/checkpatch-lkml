WARNING:BAD_SIGN_OFF: Non-standard signature: Patch-by:
#38: 
Patch-by: Leo Yuriev <leo@yuriev.ru>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:PATCH_PREFIX: patch prefix 'net' exists, appears to be a -p0 patch

CHECK:LINE_SPACING: Please don't use multiple blank lines
#68: FILE: bridge/br_input.c:55:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INLINE: plain inline is preferred over __inline__
#80: FILE: bridge/br_input.c:67:
+static __inline__ void br_update_skb_priority_if_vlan(struct sk_buff *skb)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: bridge/br_input.c:69:
+       unsigned short vlan_TCI;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#83: FILE: bridge/br_input.c:70:
+       struct vlan_hdr *vhdr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: bridge/br_input.c:72:
+       if (skb->protocol == __constant_htons(ETH_P_8021Q)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#85: FILE: bridge/br_input.c:72:
+       if (skb->protocol == __constant_htons(ETH_P_8021Q)) {
+               vhdr = (struct vlan_hdr *)(skb->data);

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#85: FILE: bridge/br_input.c:72:
+       if (skb->protocol == __constant_htons(ETH_P_8021Q)) {

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

ERROR:CODE_INDENT: code indent should use tabs where possible
#86: FILE: bridge/br_input.c:73:
+               vhdr = (struct vlan_hdr *)(skb->data);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: bridge/br_input.c:73:
+               vhdr = (struct vlan_hdr *)(skb->data);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#87: FILE: bridge/br_input.c:74:
+               /* vlan_TCI = ntohs(get_unaligned(&vhdr->h_vlan_TCI)); */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#88: FILE: bridge/br_input.c:75:
+               vlan_TCI = ntohs(vhdr->h_vlan_TCI);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: bridge/br_input.c:75:
+               vlan_TCI = ntohs(vhdr->h_vlan_TCI);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#90: FILE: bridge/br_input.c:77:
+               printk(VLAN_DBG "%s: skb: %p vlan_id: %hx\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: bridge/br_input.c:77:
+               printk(VLAN_DBG "%s: skb: %p vlan_id: %hx\n",$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#90: FILE: bridge/br_input.c:77:
+               printk(VLAN_DBG "%s: skb: %p vlan_id: %hx\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#91: FILE: bridge/br_input.c:78:
+                       __FUNCTION__, skb, (vlan_TCI & VLAN_VID_MASK));$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#91: FILE: bridge/br_input.c:78:
+               printk(VLAN_DBG "%s: skb: %p vlan_id: %hx\n",
+                       __FUNCTION__, skb, (vlan_TCI & VLAN_VID_MASK));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: bridge/br_input.c:78:
+                       __FUNCTION__, skb, (vlan_TCI & VLAN_VID_MASK));$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#91: FILE: bridge/br_input.c:78:
+                       __FUNCTION__, skb, (vlan_TCI & VLAN_VID_MASK));

ERROR:CODE_INDENT: code indent should use tabs where possible
#93: FILE: bridge/br_input.c:80:
+               /*$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#94: FILE: bridge/br_input.c:81:
+                *   We map VLAN_TCI priority (0..7) to skb->priority (0..15) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#94: FILE: bridge/br_input.c:81:
+                *   We map VLAN_TCI priority (0..7) to skb->priority (0..15) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#95: FILE: bridge/br_input.c:82:
+                *   most similarly e.g. 0->0, 1->1, .., 7->7$

ERROR:CODE_INDENT: code indent should use tabs where possible
#96: FILE: bridge/br_input.c:83:
+                */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#97: FILE: bridge/br_input.c:84:
+               skb->priority = (vlan_TCI >> 13) & 7;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: bridge/br_input.c:84:
+               skb->priority = (vlan_TCI >> 13) & 7;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: bridge/br_input.c:85:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: bridge/br_input.c:99:
+       br_update_skb_priority_if_vlan(skb);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000202021.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 17 warnings, 2 checks, 69 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000202021.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
