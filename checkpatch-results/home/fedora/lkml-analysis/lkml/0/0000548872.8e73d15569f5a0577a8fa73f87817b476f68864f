WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
  Some people see much less than 100 NMI/s with the current code in 2.4.1-ac.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#71: FILE: arch/i386/kernel/apic.c:390:
+	/* 'active' is true if the local APIC was enabled by us and
+	   not the BIOS; this signifies that we are also responsible

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#72: FILE: arch/i386/kernel/apic.c:391:
+	   for disabling it before entering apm/acpi suspend */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#75: FILE: arch/i386/kernel/apic.c:394:
+	/* 'perfctr_pmdev' is here because the current (2.4.1) PM
+	   callback system doesn't handle hierarchical dependencies */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#75: FILE: arch/i386/kernel/apic.c:394:
+	   callback system doesn't handle hierarchical dependencies */

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dev)...) over kmalloc(sizeof(struct pm_dev)...)
#176: FILE: arch/i386/kernel/apic.c:495:
+	dev = kmalloc(sizeof(struct pm_dev), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#201: FILE: arch/i386/kernel/apic.c:520:
+	/* can't pm_register() at this early stage in the boot process
+	   (causes an immediate reboot), so just set the flag */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#201: FILE: arch/i386/kernel/apic.c:520:
+	   (causes an immediate reboot), so just set the flag */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#224: FILE: arch/i386/kernel/apic.c:542:
+static int __init detect_init_APIC (void)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#254: FILE: arch/i386/kernel/apic.c:1056:
+int __init APIC_init_uniprocessor (void)

CHECK:BIT_MACRO: Prefer using the BIT macro
#308: FILE: arch/i386/kernel/nmi.c:32:
+#define K7_EVNTSEL_ENABLE	(1 << 22)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#309: FILE: arch/i386/kernel/nmi.c:33:
+#define K7_EVNTSEL_INT		(1 << 20)

CHECK:BIT_MACRO: Prefer using the BIT macro
#310: FILE: arch/i386/kernel/nmi.c:34:
+#define K7_EVNTSEL_OS		(1 << 17)

CHECK:BIT_MACRO: Prefer using the BIT macro
#311: FILE: arch/i386/kernel/nmi.c:35:
+#define K7_EVNTSEL_USR		(1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#315: FILE: arch/i386/kernel/nmi.c:39:
+#define P6_EVNTSEL0_ENABLE	(1 << 22)

CHECK:BIT_MACRO: Prefer using the BIT macro
#316: FILE: arch/i386/kernel/nmi.c:40:
+#define P6_EVNTSEL_INT		(1 << 20)

CHECK:BIT_MACRO: Prefer using the BIT macro
#317: FILE: arch/i386/kernel/nmi.c:41:
+#define P6_EVNTSEL_OS		(1 << 17)

CHECK:BIT_MACRO: Prefer using the BIT macro
#318: FILE: arch/i386/kernel/nmi.c:42:
+#define P6_EVNTSEL_USR		(1 << 16)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#329: FILE: arch/i386/kernel/nmi.c:55:
+	mdelay((10*1000)/nmi_hz); // wait 10 ticks
 	          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#329: FILE: arch/i386/kernel/nmi.c:55:
+	mdelay((10*1000)/nmi_hz); // wait 10 ticks
 	                ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#339: FILE: arch/i386/kernel/nmi.c:67:
+	/* now that we know it works we can reduce NMI frequency to
+	   something more reasonable; makes a difference in some configs */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#339: FILE: arch/i386/kernel/nmi.c:67:
+	   something more reasonable; makes a difference in some configs */

ERROR:SPACING: space required before the open parenthesis '('
#456: FILE: arch/i386/kernel/nmi.c:167:
+	for(i = 0; i < 4; ++i) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#457: FILE: arch/i386/kernel/nmi.c:168:
+		wrmsr(MSR_K7_EVNTSEL0+i, 0, 0);
 		                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#458: FILE: arch/i386/kernel/nmi.c:169:
+		wrmsr(MSR_K7_PERFCTR0+i, 0, 0);
 		                     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#468: FILE: arch/i386/kernel/nmi.c:178:
+	Dprintk("setting K7_PERFCTR0 to %08lx\n", -(cpu_khz/nmi_hz*1000));
 	                                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#468: FILE: arch/i386/kernel/nmi.c:178:
+	Dprintk("setting K7_PERFCTR0 to %08lx\n", -(cpu_khz/nmi_hz*1000));
 	                                                          ^

CHECK:CAMELCASE: Avoid CamelCase: <Dprintk>
#468: FILE: arch/i386/kernel/nmi.c:178:
+	Dprintk("setting K7_PERFCTR0 to %08lx\n", -(cpu_khz/nmi_hz*1000));

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#469: FILE: arch/i386/kernel/nmi.c:179:
+	wrmsr(MSR_K7_PERFCTR0, -(cpu_khz/nmi_hz*1000), -1);
 	                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#469: FILE: arch/i386/kernel/nmi.c:179:
+	wrmsr(MSR_K7_PERFCTR0, -(cpu_khz/nmi_hz*1000), -1);
 	                                       ^

ERROR:SPACING: space required before the open parenthesis '('
#503: FILE: arch/i386/kernel/nmi.c:192:
+	for(i = 0; i < 2; ++i) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#504: FILE: arch/i386/kernel/nmi.c:193:
+		wrmsr(MSR_IA32_EVNTSEL0+i, 0, 0);
 		                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#505: FILE: arch/i386/kernel/nmi.c:194:
+		wrmsr(MSR_IA32_PERFCTR0+i, 0, 0);
 		                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#514: FILE: arch/i386/kernel/nmi.c:203:
+	Dprintk("setting IA32_PERFCTR0 to %08lx\n", -(cpu_khz/nmi_hz*1000));
 	                                                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#514: FILE: arch/i386/kernel/nmi.c:203:
+	Dprintk("setting IA32_PERFCTR0 to %08lx\n", -(cpu_khz/nmi_hz*1000));
 	                                                            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#515: FILE: arch/i386/kernel/nmi.c:204:
+	wrmsr(MSR_IA32_PERFCTR0, -(cpu_khz/nmi_hz*1000), 0);
 	                                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#515: FILE: arch/i386/kernel/nmi.c:204:
+	wrmsr(MSR_IA32_PERFCTR0, -(cpu_khz/nmi_hz*1000), 0);
 	                                         ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#521: FILE: arch/i386/kernel/nmi.c:210:
+void __pminit setup_apic_nmi_watchdog (void)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#546: FILE: arch/i386/kernel/nmi.c:265:
+		if (alert_counter[cpu] == 5*nmi_hz) {
 		                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#557: FILE: arch/i386/kernel/nmi.c:284:
+		wrmsr(nmi_perfctr_msr, -(cpu_khz/nmi_hz*1000), -1);
 		                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#557: FILE: arch/i386/kernel/nmi.c:284:
+		wrmsr(nmi_perfctr_msr, -(cpu_khz/nmi_hz*1000), -1);
 		                                       ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#567: FILE: arch/i386/kernel/smpboot.c:872:
+		printk(KERN_NOTICE "SMP motherboard not detected.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#574: FILE: arch/i386/kernel/smpboot.c:879:
+			printk(KERN_NOTICE "Local APIC not detected."

WARNING:SPLIT_STRING: quoted string split across lines
#575: FILE: arch/i386/kernel/smpboot.c:880:
+			printk(KERN_NOTICE "Local APIC not detected."
+					   " Using dummy APIC emulation.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#608: FILE: include/asm-i386/apic.h:80:
+extern int APIC_init_uniprocessor (void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#608: FILE: include/asm-i386/apic.h:80:
+extern int APIC_init_uniprocessor (void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#610: FILE: include/asm-i386/apic.h:82:
+extern struct pm_dev *apic_pm_register(pm_dev_t, unsigned long, pm_callback);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pm_dev_t' should also have an identifier name
#610: FILE: include/asm-i386/apic.h:82:
+extern struct pm_dev *apic_pm_register(pm_dev_t, unsigned long, pm_callback);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#610: FILE: include/asm-i386/apic.h:82:
+extern struct pm_dev *apic_pm_register(pm_dev_t, unsigned long, pm_callback);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pm_callback' should also have an identifier name
#610: FILE: include/asm-i386/apic.h:82:
+extern struct pm_dev *apic_pm_register(pm_dev_t, unsigned long, pm_callback);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#611: FILE: include/asm-i386/apic.h:83:
+extern void apic_pm_unregister(struct pm_dev*);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#611: FILE: include/asm-i386/apic.h:83:
+extern void apic_pm_unregister(struct pm_dev*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pm_dev*' should also have an identifier name
#611: FILE: include/asm-i386/apic.h:83:
+extern void apic_pm_unregister(struct pm_dev*);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000548872.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 20 warnings, 30 checks, 555 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000548872.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
