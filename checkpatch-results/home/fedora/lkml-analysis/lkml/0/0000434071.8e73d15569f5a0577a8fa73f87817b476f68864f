WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
diff -rNu linux-2.4.19/fs/lockd/Makefile linux-2.4.19-lockd-sysctl/fs/lockd/Makefile

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#44: FILE: fs/lockd/svc.c:62:
+extern void             lockd_register_sysctl(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#45: FILE: fs/lockd/svc.c:63:
+extern void             lockd_deregister_sysctl(void);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#60: FILE: fs/lockd/svc.c:84:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#63: FILE: fs/lockd/svc.c:87:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#70: FILE: fs/lockd/svc.c:94:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#104: FILE: fs/lockd/sysctl.c:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#109: FILE: fs/lockd/sysctl.c:6:
+#include <asm/uaccess.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#118: FILE: fs/lockd/sysctl.c:15:
+extern inline void start_grace_period(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#119: FILE: fs/lockd/sysctl.c:16:
+extern inline void clear_grace_period(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#120: FILE: fs/lockd/sysctl.c:17:
+extern int nlmsvc_grace_period;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#122: FILE: fs/lockd/sysctl.c:19:
+
+

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void lockd_register_sysctl() should probably be void lockd_register_sysctl(void)
#127: FILE: fs/lockd/sysctl.c:24:
+void lockd_register_sysctl()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#129: FILE: fs/lockd/sysctl.c:26:
+{
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: fs/lockd/sysctl.c:27:
+  if (!lockd_table_header) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#130: FILE: fs/lockd/sysctl.c:27:
+  if (!lockd_table_header) {
[...]
+    printk("lockd_register_sysctl:=>register_sysctl_table()\n");

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#131: FILE: fs/lockd/sysctl.c:28:
+  if (!lockd_table_header) {
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: fs/lockd/sysctl.c:29:
+    printk("lockd_register_sysctl:=>register_sysctl_table()\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#132: FILE: fs/lockd/sysctl.c:29:
+    printk("lockd_register_sysctl:=>register_sysctl_table()\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lockd_register_sysctl', this function's name, in a string
#132: FILE: fs/lockd/sysctl.c:29:
+    printk("lockd_register_sysctl:=>register_sysctl_table()\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: fs/lockd/sysctl.c:30:
+    lockd_table_header = register_sysctl_table(lockd_table, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: fs/lockd/sysctl.c:32:
+  }$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#135: FILE: fs/lockd/sysctl.c:32:
+
+  }

ERROR:TRAILING_WHITESPACE: trailing whitespace
#136: FILE: fs/lockd/sysctl.c:33:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#137: FILE: fs/lockd/sysctl.c:34:
+	
+

ERROR:SPACING: space required after that close brace '}'
#138: FILE: fs/lockd/sysctl.c:35:
+}/* void lockd_register_sysctl() */

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#140: FILE: fs/lockd/sysctl.c:37:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#142: FILE: fs/lockd/sysctl.c:39:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#143: FILE: fs/lockd/sysctl.c:40:
+/* De-register with sysctl so we do not have stale entries in $

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void lockd_deregister_sysctl() should probably be void lockd_deregister_sysctl(void)
#147: FILE: fs/lockd/sysctl.c:44:
+void lockd_deregister_sysctl()

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#149: FILE: fs/lockd/sysctl.c:46:
+{
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: fs/lockd/sysctl.c:48:
+^I        printk("lockd_deregister_sysctl:=>register_sysctl_table()\n");$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#151: FILE: fs/lockd/sysctl.c:48:
+	        printk("lockd_deregister_sysctl:=>register_sysctl_table()\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lockd_deregister_sysctl', this function's name, in a string
#151: FILE: fs/lockd/sysctl.c:48:
+	        printk("lockd_deregister_sysctl:=>register_sysctl_table()\n");

ERROR:SPACING: space required after that close brace '}'
#156: FILE: fs/lockd/sysctl.c:53:
+}/* void lockd_deregister_sysctl() */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#159: FILE: fs/lockd/sysctl.c:56:
+proc_do_lockd_grace_period(ctl_table *table, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#160: FILE: fs/lockd/sysctl.c:57:
+                           int write, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#160: FILE: fs/lockd/sysctl.c:57:
+                           int write, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: fs/lockd/sysctl.c:57:
+                           int write, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#161: FILE: fs/lockd/sysctl.c:58:
+                           struct file *file,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: fs/lockd/sysctl.c:58:
+                           struct file *file,$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#162: FILE: fs/lockd/sysctl.c:59:
+                           void *buffer, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#162: FILE: fs/lockd/sysctl.c:59:
+                           void *buffer, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: fs/lockd/sysctl.c:59:
+                           void *buffer, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#163: FILE: fs/lockd/sysctl.c:60:
+                           size_t *lenp)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: fs/lockd/sysctl.c:60:
+                           size_t *lenp)$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#169: FILE: fs/lockd/sysctl.c:66:
+	printk("proc_do_lockd_grace_period: write=%d, lenp=%p, buffer=%p\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'proc_do_lockd_grace_period', this function's name, in a string
#169: FILE: fs/lockd/sysctl.c:66:
+	printk("proc_do_lockd_grace_period: write=%d, lenp=%p, buffer=%p\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#171: FILE: fs/lockd/sysctl.c:68:
+	printk("proc_do_lockd_grace_period: len=%d\n", lenp ? *lenp : 0);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'proc_do_lockd_grace_period', this function's name, in a string
#171: FILE: fs/lockd/sysctl.c:68:
+	printk("proc_do_lockd_grace_period: len=%d\n", lenp ? *lenp : 0);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#180: FILE: fs/lockd/sysctl.c:77:
+	if (write) {
[...]
+          if (!access_ok(VERIFY_WRITE, buffer, left))

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#181: FILE: fs/lockd/sysctl.c:78:
+	if (write) {
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#182: FILE: fs/lockd/sysctl.c:79:
+          if (!access_ok(VERIFY_WRITE, buffer, left))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: fs/lockd/sysctl.c:79:
+          if (!access_ok(VERIFY_WRITE, buffer, left))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#182: FILE: fs/lockd/sysctl.c:79:
+          if (!access_ok(VERIFY_WRITE, buffer, left))
+            return -EFAULT;

ERROR:CODE_INDENT: code indent should use tabs where possible
#183: FILE: fs/lockd/sysctl.c:80:
+            return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: fs/lockd/sysctl.c:80:
+            return -EFAULT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#184: FILE: fs/lockd/sysctl.c:81:
+          p = (char *) buffer;$

CHECK:SPACING: No space is necessary after a cast
#184: FILE: fs/lockd/sysctl.c:81:
+          p = (char *) buffer;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: fs/lockd/sysctl.c:81:
+          p = (char *) buffer;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#185: FILE: fs/lockd/sysctl.c:82:
+          while (left && __get_user(c, p) >= 0 && isspace(c))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: fs/lockd/sysctl.c:82:
+          while (left && __get_user(c, p) >= 0 && isspace(c))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#185: FILE: fs/lockd/sysctl.c:82:
+          while (left && __get_user(c, p) >= 0 && isspace(c))
+            left--, p++;

ERROR:CODE_INDENT: code indent should use tabs where possible
#186: FILE: fs/lockd/sysctl.c:83:
+            left--, p++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: fs/lockd/sysctl.c:83:
+            left--, p++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#187: FILE: fs/lockd/sysctl.c:84:
+          if (!left)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: fs/lockd/sysctl.c:84:
+          if (!left)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#187: FILE: fs/lockd/sysctl.c:84:
+          if (!left)
+            goto done;

ERROR:CODE_INDENT: code indent should use tabs where possible
#188: FILE: fs/lockd/sysctl.c:85:
+            goto done;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: fs/lockd/sysctl.c:85:
+            goto done;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#189: FILE: fs/lockd/sysctl.c:86:
+          $

ERROR:CODE_INDENT: code indent should use tabs where possible
#189: FILE: fs/lockd/sysctl.c:86:
+          $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: fs/lockd/sysctl.c:86:
+          $

ERROR:CODE_INDENT: code indent should use tabs where possible
#190: FILE: fs/lockd/sysctl.c:87:
+          if (left > sizeof(tmpbuf) - 1)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: fs/lockd/sysctl.c:87:
+          if (left > sizeof(tmpbuf) - 1)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#190: FILE: fs/lockd/sysctl.c:87:
+          if (left > sizeof(tmpbuf) - 1)
+            return -EINVAL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#191: FILE: fs/lockd/sysctl.c:88:
+            return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: fs/lockd/sysctl.c:88:
+            return -EINVAL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#192: FILE: fs/lockd/sysctl.c:89:
+          copy_from_user(tmpbuf, p, left);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: fs/lockd/sysctl.c:89:
+          copy_from_user(tmpbuf, p, left);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: fs/lockd/sysctl.c:90:
+          tmpbuf[left] = '\0';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: fs/lockd/sysctl.c:90:
+          tmpbuf[left] = '\0';$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#195: FILE: fs/lockd/sysctl.c:92:
+
+

WARNING:TABSTOP: Statements should start on a tabstop
#196: FILE: fs/lockd/sysctl.c:93:
+	  for (p = tmpbuf, value = 0; '0' <= *p && *p <= '9'; p++, left--)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#196: FILE: fs/lockd/sysctl.c:93:
+	  for (p = tmpbuf, value = 0; '0' <= *p && *p <= '9'; p++, left--)
+	    value = 10 * value + (*p - '0');

WARNING:TABSTOP: Statements should start on a tabstop
#198: FILE: fs/lockd/sysctl.c:95:
+	  if (*p && !isspace(*p))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#198: FILE: fs/lockd/sysctl.c:95:
+	  if (*p && !isspace(*p))
+	    return -EINVAL;

WARNING:TABSTOP: Statements should start on a tabstop
#199: FILE: fs/lockd/sysctl.c:96:
+	    return -EINVAL;

WARNING:TABSTOP: Statements should start on a tabstop
#200: FILE: fs/lockd/sysctl.c:97:
+	  while (left && isspace(*p))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#200: FILE: fs/lockd/sysctl.c:97:
+	  while (left && isspace(*p))
+	    left--, p++;

ERROR:CODE_INDENT: code indent should use tabs where possible
#203: FILE: fs/lockd/sysctl.c:100:
+          if (value == 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: fs/lockd/sysctl.c:100:
+          if (value == 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#203: FILE: fs/lockd/sysctl.c:100:
+          if (value == 0) {
[...]
+            clear_grace_period();

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#203: FILE: fs/lockd/sysctl.c:100:
+          if (value == 0) {
[...]
+          } else if(value == 1) {
[...]
+          } else {
[...]

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#204: FILE: fs/lockd/sysctl.c:101:
+          if (value == 0) {
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#205: FILE: fs/lockd/sysctl.c:102:
+            clear_grace_period();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: fs/lockd/sysctl.c:102:
+            clear_grace_period();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#207: FILE: fs/lockd/sysctl.c:104:
+          } else if(value == 1) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: fs/lockd/sysctl.c:104:
+          } else if(value == 1) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#207: FILE: fs/lockd/sysctl.c:104:
+          } else if(value == 1) {
[...]
+            start_grace_period();

ERROR:SPACING: space required before the open parenthesis '('
#207: FILE: fs/lockd/sysctl.c:104:
+          } else if(value == 1) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#208: FILE: fs/lockd/sysctl.c:105:
+          } else if(value == 1) {
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#209: FILE: fs/lockd/sysctl.c:106:
+            start_grace_period();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: fs/lockd/sysctl.c:106:
+            start_grace_period();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#211: FILE: fs/lockd/sysctl.c:108:
+          } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: fs/lockd/sysctl.c:108:
+          } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#211: FILE: fs/lockd/sysctl.c:108:
+          } else {
[...]
+            return -EINVAL;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#212: FILE: fs/lockd/sysctl.c:109:
+          } else {
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#213: FILE: fs/lockd/sysctl.c:110:
+            return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: fs/lockd/sysctl.c:110:
+            return -EINVAL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#215: FILE: fs/lockd/sysctl.c:112:
+          }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: fs/lockd/sysctl.c:112:
+          }$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#215: FILE: fs/lockd/sysctl.c:112:
+
+          }

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: fs/lockd/sysctl.c:113:
+          $

ERROR:CODE_INDENT: code indent should use tabs where possible
#216: FILE: fs/lockd/sysctl.c:113:
+          $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: fs/lockd/sysctl.c:113:
+          $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#217: FILE: fs/lockd/sysctl.c:114:
+          
+

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#218: FILE: fs/lockd/sysctl.c:115:
+	} else {
[...]
+	  printk("proc_do_lockd_grace_period: reading...\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#219: FILE: fs/lockd/sysctl.c:116:
+          /* Read Access */$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#221: FILE: fs/lockd/sysctl.c:118:
+	  printk("proc_do_lockd_grace_period: reading...\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'proc_do_lockd_grace_period', this function's name, in a string
#221: FILE: fs/lockd/sysctl.c:118:
+	  printk("proc_do_lockd_grace_period: reading...\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#223: FILE: fs/lockd/sysctl.c:120:
+          if (!access_ok(VERIFY_READ, buffer, left))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: fs/lockd/sysctl.c:120:
+          if (!access_ok(VERIFY_READ, buffer, left))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#223: FILE: fs/lockd/sysctl.c:120:
+          if (!access_ok(VERIFY_READ, buffer, left))
+            return -EFAULT;

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: fs/lockd/sysctl.c:121:
+            return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: fs/lockd/sysctl.c:121:
+            return -EFAULT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#226: FILE: fs/lockd/sysctl.c:123:
+          len = sprintf(tmpbuf, "%d", nlmsvc_grace_period);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: fs/lockd/sysctl.c:123:
+          len = sprintf(tmpbuf, "%d", nlmsvc_grace_period);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: fs/lockd/sysctl.c:124:
+          if (len > left)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: fs/lockd/sysctl.c:124:
+          if (len > left)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#227: FILE: fs/lockd/sysctl.c:124:
+          if (len > left)
+            len = left;

ERROR:CODE_INDENT: code indent should use tabs where possible
#228: FILE: fs/lockd/sysctl.c:125:
+            len = left;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: fs/lockd/sysctl.c:125:
+            len = left;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#229: FILE: fs/lockd/sysctl.c:126:
+          copy_to_user(buffer, tmpbuf, len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: fs/lockd/sysctl.c:126:
+          copy_to_user(buffer, tmpbuf, len);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: fs/lockd/sysctl.c:127:
+          if ((left -= len) > 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: fs/lockd/sysctl.c:127:
+          if ((left -= len) > 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#230: FILE: fs/lockd/sysctl.c:127:
+          if ((left -= len) > 0) {
+            put_user('\n', (char *)buffer + len);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#230: FILE: fs/lockd/sysctl.c:127:
+          if ((left -= len) > 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#231: FILE: fs/lockd/sysctl.c:128:
+            put_user('\n', (char *)buffer + len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: fs/lockd/sysctl.c:128:
+            put_user('\n', (char *)buffer + len);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#232: FILE: fs/lockd/sysctl.c:129:
+            left--;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: fs/lockd/sysctl.c:129:
+            left--;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#233: FILE: fs/lockd/sysctl.c:130:
+          }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: fs/lockd/sysctl.c:130:
+          }$

ERROR:SPACING: space required after that close brace '}'
#241: FILE: fs/lockd/sysctl.c:138:
+}/*static int proc_do_lockd_sysctl() */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#269: FILE: include/linux/sysctl.h:66:
+	CTL_CPU=10,		/* CPU stuff (speed scaling, etc) */
 	       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#270: FILE: include/linux/sysctl.h:67:
+        CTL_LOCKD=11,           /* Lockd info and control */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: include/linux/sysctl.h:67:
+        CTL_LOCKD=11,           /* Lockd info and control */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#270: FILE: include/linux/sysctl.h:67:
+        CTL_LOCKD=11,           /* Lockd info and control */
                  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#279: FILE: include/linux/sysctl.h:632:
+
+

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#282: FILE: include/linux/sysctl.h:635:
+enum
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#283: FILE: include/linux/sysctl.h:636:
+        LOCKD_CTL_GRACE_PERIOD=1,/* Enable user-level grace period control */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: include/linux/sysctl.h:636:
+        LOCKD_CTL_GRACE_PERIOD=1,/* Enable user-level grace period control */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#283: FILE: include/linux/sysctl.h:636:
+        LOCKD_CTL_GRACE_PERIOD=1,/* Enable user-level grace period control */
                               ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000434071.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 56 errors, 79 warnings, 20 checks, 244 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000434071.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
