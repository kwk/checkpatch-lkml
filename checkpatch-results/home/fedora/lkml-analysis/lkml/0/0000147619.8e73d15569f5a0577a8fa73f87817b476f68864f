WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#58: 
 drivers/spi/spi-core.c |  506 +++++++++++++++++++++++++++++++++++++++++++++++++

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#110: FILE: drivers/spi/Kconfig:6:
+config SPI
+	default Y
+	tristate "SPI (Serial Peripheral Interface) bus support"
+        default false
+	help
+	  Say Y if you need to enable SPI support on your kernel.
+ 	  Say M if you want to create the spi-core loadable module.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:DEPRECATED_VARIABLE: Use of EXTRA_CFLAGS is deprecated, please use `ccflags-y instead.
#154: FILE: drivers/spi/Makefile:12:
+EXTRA_CFLAGS += -DDEBUG

EXTRA_{A,C,CPP,LD}FLAGS are deprecated and should be replaced by the new
flags added via commit f77bf01425b1 ("kbuild: introduce ccflags-y,
asflags-y and ldflags-y").

The following conversion scheme maybe used::

  EXTRA_AFLAGS    ->  asflags-y
  EXTRA_CFLAGS    ->  ccflags-y
  EXTRA_CPPFLAGS  ->  cppflags-y
  EXTRA_LDFLAGS   ->  ldflags-y

See:

  1. https://lore.kernel.org/lkml/20070930191054.GA15876@uranus.ravnborg.org/
  2. https://lore.kernel.org/lkml/1313384834-24433-12-git-send-email-lacombar@gmail.com/
  3. https://www.kernel.org/doc/html/latest/kbuild/makefiles.html#compilation-flags

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#162: FILE: drivers/spi/spi-core.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#163: FILE: drivers/spi/spi-core.c:2:
+ *  drivers/spi/spi-core.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#185: FILE: drivers/spi/spi-core.c:24:
+#include <asm/atomic.h>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#214: FILE: drivers/spi/spi-core.c:53:
+ * ^Ispi_bus_driver* ^Ipointer to bus driver structure$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#215: FILE: drivers/spi/spi-core.c:54:
+ * ^Idevice*^I^I^Iplatform device to be attached to$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#217: FILE: drivers/spi/spi-core.c:56:
+ * ^I0 on success, error code otherwise$

WARNING:INDENTED_LABEL: labels should not be indented
#244: FILE: drivers/spi/spi-core.c:83:
+      init_failed_1:

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#255: FILE: drivers/spi/spi-core.c:94:
+ * ^Istruct device* dev^Ithe 'bus' device$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#256: FILE: drivers/spi/spi-core.c:95:
+ * ^Ivoid* context^I^Inot used. Will be NULL$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#289: FILE: drivers/spi/spi-core.c:128:
+ *  ^Istruct spi_bus_driver* bus_driver^Ithe bus driver$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#291: FILE: drivers/spi/spi-core.c:130:
+ *  ^Ivoid$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#308: FILE: drivers/spi/spi-core.c:147:
+ * ^Istruct device* dev$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#310: FILE: drivers/spi/spi-core.c:149:
+ * ^Inone$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#314: FILE: drivers/spi/spi-core.c:153:
+	struct spi_device* sdev = TO_SPI_DEV(dev);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#316: FILE: drivers/spi/spi-core.c:155:
+	kfree( sdev );

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#316: FILE: drivers/spi/spi-core.c:155:
+	kfree( sdev );

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#325: FILE: drivers/spi/spi-core.c:164:
+ * ^Istruct device* parent^I^Ithe 'bus' device$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#326: FILE: drivers/spi/spi-core.c:165:
+ * ^Ichar* name^I^I^Iname of device. Should not be NULL$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#328: FILE: drivers/spi/spi-core.c:167:
+ * ^Ipointer to allocated spi_device structure; NULL on error$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#330: FILE: drivers/spi/spi-core.c:169:
+struct spi_device* spi_device_add(struct device *parent, char *name)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#332: FILE: drivers/spi/spi-core.c:171:
+	struct spi_device* dev;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dev)...) over kmalloc(sizeof(struct spi_device)...)
#337: FILE: drivers/spi/spi-core.c:176:
+	dev = kmalloc(sizeof(struct spi_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: space prohibited after that open parenthesis '('
#338: FILE: drivers/spi/spi-core.c:177:
+	if( !dev )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#338: FILE: drivers/spi/spi-core.c:177:
+	if( !dev )

ERROR:SPACING: space required before the open parenthesis '('
#338: FILE: drivers/spi/spi-core.c:177:
+	if( !dev )

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#348: FILE: drivers/spi/spi-core.c:187:
+	if (device_register(&dev->dev)<0) {
 	                              ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#366: FILE: drivers/spi/spi-core.c:205:
+ *  ^Istruct spi_msg* msg            message to be sent$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#368: FILE: drivers/spi/spi-core.c:207:
+ *  ^I0 on no errors, negative error code otherwise$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#392: FILE: drivers/spi/spi-core.c:231:
+ * ^Istruct spimsg* msg^Imessage that is being processed now$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#393: FILE: drivers/spi/spi-core.c:232:
+ * ^Iint code^I^Istatus of processing$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#408: FILE: drivers/spi/spi-core.c:247:
+ * ^Istruct spi_msg* msg^Imessage to process$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#409: FILE: drivers/spi/spi-core.c:248:
+ * ^Icallback^I^Iuser-supplied callback. If both msg->status and$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#410: FILE: drivers/spi/spi-core.c:249:
+ * ^I^I^I^Icallback are set, the error code of -EINVAL$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#411: FILE: drivers/spi/spi-core.c:250:
+ * ^I^I^I^Iwill be returned$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#413: FILE: drivers/spi/spi-core.c:252:
+ * ^I0 on success, error code otherwise. This code does not reflect$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#414: FILE: drivers/spi/spi-core.c:253:
+ * ^Istatus of message, just status of queueing$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#449: FILE: drivers/spi/spi-core.c:288:
+ *^Ivoid* context ^I^Ipointer to struct spi_bus_data$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#455: FILE: drivers/spi/spi-core.c:294:
+	if (atomic_read(&bd->exiting)) {
+		return 1;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#472: FILE: drivers/spi/spi-core.c:311:
+	while (!kthread_should_stop()) {
+

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'bd->selected_device'
#490: FILE: drivers/spi/spi-core.c:329:
+						bd->bus->select(bd->
+								selected_device);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#552: FILE: drivers/spi/spi-core.c:391:
+ * ^Isend data to a device on an SPI bus$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#554: FILE: drivers/spi/spi-core.c:393:
+ * ^Ispi_device* dev^I^Ithe target device$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#558: FILE: drivers/spi/spi-core.c:397:
+ * ^Ithe number of bytes transferred, or negative error code.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#572: FILE: drivers/spi/spi-core.c:411:
+ * ^Ireceive data from a device on an SPI bus$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#574: FILE: drivers/spi/spi-core.c:413:
+ * ^Ispi_device* dev^I^Ithe target device$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#578: FILE: drivers/spi/spi-core.c:417:
+ * ^I the number of bytes transferred, or negative error code.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#603: FILE: drivers/spi/spi-core.c:442:
+ * ^Ithe number of devices that were successfully added$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#607: FILE: drivers/spi/spi-core.c:446:
+		     void (*callback) (struct device * bus,

WARNING:SPACING: Unnecessary space before function pointer arguments
#607: FILE: drivers/spi/spi-core.c:446:
+		     void (*callback) (struct device * bus,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#608: FILE: drivers/spi/spi-core.c:447:
+				       struct spi_device * new_dev))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#616: FILE: drivers/spi/spi-core.c:455:
+		if ((new_device = spi_device_add(parent, devices)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#627: FILE: drivers/spi/spi-core.c:466:
+int spi_bus_populate2(struct device *parent,
+			struct spi_device_desc* devices,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#627: FILE: drivers/spi/spi-core.c:466:
+			struct spi_device_desc* devices,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#628: FILE: drivers/spi/spi-core.c:467:
+			void (*callback) (struct device* bus,

WARNING:SPACING: Unnecessary space before function pointer arguments
#628: FILE: drivers/spi/spi-core.c:467:
+			void (*callback) (struct device* bus,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#630: FILE: drivers/spi/spi-core.c:469:
+					  void* params))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#637: FILE: drivers/spi/spi-core.c:476:
+		dev_dbg(parent, " discovered new SPI device, name '%s'\n",
+				devices->name );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#637: FILE: drivers/spi/spi-core.c:476:
+				devices->name );

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#638: FILE: drivers/spi/spi-core.c:477:
+		if ((new_device = spi_device_add(parent, devices->name)) == NULL)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#658: FILE: drivers/spi/spi-core.c:497:
+EXPORT_SYMBOL_GPL(spi_queue);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#659: FILE: drivers/spi/spi-core.c:498:
+EXPORT_SYMBOL_GPL(spi_device_add);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#660: FILE: drivers/spi/spi-core.c:499:
+EXPORT_SYMBOL_GPL(spi_bus_driver_unregister);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#661: FILE: drivers/spi/spi-core.c:500:
+EXPORT_SYMBOL_GPL(spi_bus_populate);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#662: FILE: drivers/spi/spi-core.c:501:
+EXPORT_SYMBOL_GPL(spi_bus_populate2);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#663: FILE: drivers/spi/spi-core.c:502:
+EXPORT_SYMBOL_GPL(spi_transfer);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#664: FILE: drivers/spi/spi-core.c:503:
+EXPORT_SYMBOL_GPL(spi_write);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#665: FILE: drivers/spi/spi-core.c:504:
+EXPORT_SYMBOL_GPL(spi_read);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#666: FILE: drivers/spi/spi-core.c:505:
+EXPORT_SYMBOL_GPL(spi_bus);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#667: FILE: drivers/spi/spi-core.c:506:
+EXPORT_SYMBOL_GPL(spi_bus_driver_init);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#673: FILE: drivers/spi/spi-dev.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#674: FILE: drivers/spi/spi-dev.c:2:
+/*
+    spi-dev.c - spi driver, char device interface

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#689: FILE: drivers/spi/spi-dev.c:17:
+    along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#690: FILE: drivers/spi/spi-dev.c:18:
+    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#704: FILE: drivers/spi/spi-dev.c:32:
+#include <asm/uaccess.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#714: FILE: drivers/spi/spi-dev.c:42:
+			   loff_t * offset);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#716: FILE: drivers/spi/spi-dev.c:44:
+			    loff_t * offset);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#727: FILE: drivers/spi/spi-dev.c:55:
+static struct file_operations spidev_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*drvdata)...) over kmalloc(sizeof(struct spidev_driver_data)...)
#752: FILE: drivers/spi/spi-dev.c:80:
+	drvdata = kmalloc(sizeof(struct spidev_driver_data), GFP_KERNEL);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#754: FILE: drivers/spi/spi-dev.c:82:
+	if (!drvdata) {
+		dev_dbg(dev, "allocating drvdata failed\n");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#781: FILE: drivers/spi/spi-dev.c:109:
+			   loff_t * offset)

WARNING:LINE_SPACING: Missing a blank line after declarations
#784: FILE: drivers/spi/spi-dev.c:112:
+	struct spi_device *dev = (struct spi_device *)file->private_data;
+	if (count > SPI_TRANSFER_MAX)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#790: FILE: drivers/spi/spi-dev.c:118:
+			    loff_t * offset)

WARNING:LINE_SPACING: Missing a blank line after declarations
#793: FILE: drivers/spi/spi-dev.c:121:
+	struct spi_device *dev = (struct spi_device *)file->private_data;
+	if (count > SPI_TRANSFER_MAX)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#811: FILE: drivers/spi/spi-dev.c:139:
+		pr_debug("%s: oops, drvdata is NULL !\n", __FUNCTION__);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#834: FILE: drivers/spi/spi-dev.c:162:
+	if (status == 0) {
+		status = -ENODEV;
+	}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#855: FILE: drivers/spi/spi-dev.c:183:
+	if ((res = register_chrdev(SPI_MAJOR, "spi", &spidev_fops)) != 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#855: FILE: drivers/spi/spi-dev.c:183:
+	if ((res = register_chrdev(SPI_MAJOR, "spi", &spidev_fops)) != 0) {
+		goto out;
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#861: FILE: drivers/spi/spi-dev.c:189:
+		printk(KERN_ERR "%s: error creating class\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#861: FILE: drivers/spi/spi-dev.c:189:
+		printk(KERN_ERR "%s: error creating class\n", __FUNCTION__);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#866: FILE: drivers/spi/spi-dev.c:194:
+	if ((res = spi_driver_add(&spidev_driver)) != 0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#869: FILE: drivers/spi/spi-dev.c:197:
+	printk("SPI /dev entries driver.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#875: FILE: drivers/spi/spi-dev.c:203:
+	printk(KERN_ERR "%s: Driver initialization failed\n", __FILE__);

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#897: FILE: Documentation/spi.txt:1:
+Documentation/spi.txt

WARNING:TYPO_SPELLING: 'approproate' may be misspelled - perhaps 'appropriate'?
#1059: FILE: Documentation/spi.txt:163:
+		device driver, if device driver provides approproate callback.
 		                                         ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1276: FILE: include/linux/spi.h:1:
+/*

ERROR:SPACING: space prohibited after that open parenthesis '('
#1309: FILE: include/linux/spi.h:34:
+#define TO_SPI_BUS_DRIVER(drv) container_of( drv, struct spi_bus_driver, driver )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1309: FILE: include/linux/spi.h:34:
+#define TO_SPI_BUS_DRIVER(drv) container_of( drv, struct spi_bus_driver, driver )

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1311: FILE: include/linux/spi.h:36:
+^Iint ^I(*xfer) (struct spi_msg * msg);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1311: FILE: include/linux/spi.h:36:
+	int 	(*xfer) (struct spi_msg * msg);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1311: FILE: include/linux/spi.h:36:
+	int 	(*xfer) (struct spi_msg * msg);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1312: FILE: include/linux/spi.h:37:
+^Ivoid ^I(*select) (struct spi_device * dev);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1312: FILE: include/linux/spi.h:37:
+	void 	(*select) (struct spi_device * dev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1312: FILE: include/linux/spi.h:37:
+	void 	(*select) (struct spi_device * dev);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1313: FILE: include/linux/spi.h:38:
+^Ivoid ^I(*deselect) (struct spi_device * dev);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1313: FILE: include/linux/spi.h:38:
+	void 	(*deselect) (struct spi_device * dev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1313: FILE: include/linux/spi.h:38:
+	void 	(*deselect) (struct spi_device * dev);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1314: FILE: include/linux/spi.h:39:
+^Ivoid ^I(*set_clock) (struct device * bus_device, u32 clock_hz);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1314: FILE: include/linux/spi.h:39:
+	void 	(*set_clock) (struct device * bus_device, u32 clock_hz);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1314: FILE: include/linux/spi.h:39:
+	void 	(*set_clock) (struct device * bus_device, u32 clock_hz);

ERROR:SPACING: space prohibited after that open parenthesis '('
#1318: FILE: include/linux/spi.h:43:
+#define TO_SPI_DEV(device) container_of( device, struct spi_device, dev )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1318: FILE: include/linux/spi.h:43:
+#define TO_SPI_DEV(device) container_of( device, struct spi_device, dev )

ERROR:SPACING: space prohibited after that open parenthesis '('
#1324: FILE: include/linux/spi.h:49:
+#define TO_SPI_DRIVER(drv) container_of( drv, struct spi_driver, driver )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1324: FILE: include/linux/spi.h:49:
+#define TO_SPI_DRIVER(drv) container_of( drv, struct spi_driver, driver )

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1326: FILE: include/linux/spi.h:51:
+^Ivoid ^I       *(*alloc) (size_t, int);$

WARNING:SPACING: Unnecessary space before function pointer arguments
#1326: FILE: include/linux/spi.h:51:
+	void 	       *(*alloc) (size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1326: FILE: include/linux/spi.h:51:
+	void 	       *(*alloc) (size_t, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1326: FILE: include/linux/spi.h:51:
+	void 	       *(*alloc) (size_t, int);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1327: FILE: include/linux/spi.h:52:
+^Ivoid ^I ^I(*free) (const void *);$

WARNING:SPACING: Unnecessary space before function pointer arguments
#1327: FILE: include/linux/spi.h:52:
+	void 	 	(*free) (const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#1327: FILE: include/linux/spi.h:52:
+	void 	 	(*free) (const void *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1328: FILE: include/linux/spi.h:53:
+	unsigned char  *(*get_buffer) (struct spi_device *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_device *' should also have an identifier name
#1328: FILE: include/linux/spi.h:53:
+	unsigned char  *(*get_buffer) (struct spi_device *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1328: FILE: include/linux/spi.h:53:
+	unsigned char  *(*get_buffer) (struct spi_device *, void *);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1329: FILE: include/linux/spi.h:54:
+^Ivoid ^I^I(*release_buffer) (struct spi_device *, unsigned char *);$

WARNING:SPACING: Unnecessary space before function pointer arguments
#1329: FILE: include/linux/spi.h:54:
+	void 		(*release_buffer) (struct spi_device *, unsigned char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_device *' should also have an identifier name
#1329: FILE: include/linux/spi.h:54:
+	void 		(*release_buffer) (struct spi_device *, unsigned char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#1329: FILE: include/linux/spi.h:54:
+	void 		(*release_buffer) (struct spi_device *, unsigned char *);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1330: FILE: include/linux/spi.h:55:
+^Ivoid ^I^I(*control) (struct spi_device *, int mode, u32 ctl);$

WARNING:SPACING: Unnecessary space before function pointer arguments
#1330: FILE: include/linux/spi.h:55:
+	void 		(*control) (struct spi_device *, int mode, u32 ctl);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_device *' should also have an identifier name
#1330: FILE: include/linux/spi.h:55:
+	void 		(*control) (struct spi_device *, int mode, u32 ctl);

ERROR:SPACING: space prohibited after that open parenthesis '('
#1334: FILE: include/linux/spi.h:59:
+#define SPI_DEV_DRV( device )  TO_SPI_DRIVER( (device)->dev.driver )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1334: FILE: include/linux/spi.h:59:
+#define SPI_DEV_DRV( device )  TO_SPI_DRIVER( (device)->dev.driver )

ERROR:SPACING: space prohibited after that open parenthesis '('
#1336: FILE: include/linux/spi.h:61:
+#define spi_device_lock( dev )		/* down( dev->dev.sem ) */

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1336: FILE: include/linux/spi.h:61:
+#define spi_device_lock( dev )		/* down( dev->dev.sem ) */

ERROR:SPACING: space prohibited after that open parenthesis '('
#1337: FILE: include/linux/spi.h:62:
+#define spi_device_unlock( dev )	/* up( dev->dev.sem ) */

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1337: FILE: include/linux/spi.h:62:
+#define spi_device_unlock( dev )	/* up( dev->dev.sem ) */

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#1342: FILE: include/linux/spi.h:67:
+ * This structure represent the SPI message internally. You should never use fields of this structure directly

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#1351: FILE: include/linux/spi.h:76:
+#define SPI_M_CS	0x08	/**< CS active level at begining of frame ( default low ) */
                 	    	                        ^^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1359: FILE: include/linux/spi.h:84:
+	void (*status) (struct spi_msg * msg, int code);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1359: FILE: include/linux/spi.h:84:
+	void (*status) (struct spi_msg * msg, int code);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1365: FILE: include/linux/spi.h:90:
+					   unsigned flags,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1367: FILE: include/linux/spi.h:92:
+					   void (*status) (struct spi_msg *,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*msg)...) over kmalloc(sizeof(struct spi_msg)...)
#1373: FILE: include/linux/spi.h:98:
+	msg = kmalloc(sizeof(struct spi_msg), GFP_KERNEL);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1395: FILE: include/linux/spi.h:120:
+		 __FUNCTION__,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1406: FILE: include/linux/spi.h:131:
+	void (*do_free) (const void *) = kfree;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1443: FILE: include/linux/spi.h:168:
+		printk(KERN_ERR "%s: what buffer do you really want ?\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1444: FILE: include/linux/spi.h:169:
+		       __FUNCTION__);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1453: FILE: include/linux/spi.h:178:
+#define SPIMSG_OK ^I0x01$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1454: FILE: include/linux/spi.h:179:
+#define SPIMSG_FAILED ^I0x80$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1470: FILE: include/linux/spi.h:195:
+struct spi_device* spi_device_add(struct device *parent, char *name);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1476: FILE: include/linux/spi.h:201:
+}
+static inline int spi_driver_add(struct spi_driver *drv)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1481: FILE: include/linux/spi.h:206:
+}
+static inline void spi_driver_del(struct spi_driver *drv)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1488: FILE: include/linux/spi.h:213:
+extern int spi_write(struct spi_device *dev, const char *buf, int len);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1489: FILE: include/linux/spi.h:214:
+extern int spi_read(struct spi_device *dev, char *buf, int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1491: FILE: include/linux/spi.h:216:
+extern int spi_queue(struct spi_msg *message);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1492: FILE: include/linux/spi.h:217:
+extern int spi_transfer(struct spi_msg *message,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1493: FILE: include/linux/spi.h:218:
+			void (*status) (struct spi_msg *, int));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1494: FILE: include/linux/spi.h:219:
+extern int spi_bus_populate(struct device *parent, char *device,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1495: FILE: include/linux/spi.h:220:
+			    void (*assign) (struct device *parent,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1498: FILE: include/linux/spi.h:223:
+	char* name;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1499: FILE: include/linux/spi.h:224:
+	void* params;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1501: FILE: include/linux/spi.h:226:
+};
+extern int spi_bus_populate2(struct device *parent,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1501: FILE: include/linux/spi.h:226:
+extern int spi_bus_populate2(struct device *parent,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1503: FILE: include/linux/spi.h:228:
+			     void (*assign) (struct device *parent,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1504: FILE: include/linux/spi.h:229:
+^I^I^I^I             struct spi_device *,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1504: FILE: include/linux/spi.h:229:
+			     void (*assign) (struct device *parent,
+				             struct spi_device *,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000147619.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 46 errors, 107 warnings, 16 checks, 1398 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000147619.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
