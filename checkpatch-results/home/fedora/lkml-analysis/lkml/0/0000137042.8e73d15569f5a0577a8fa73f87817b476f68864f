WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#51: 
'nid' is more common than 'nodeid' or 'node' when referring to a node number

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cachep' may be better as '(cachep)' to avoid precedence issues
#74: FILE: mm/slab.c:352:
+#define MAKE_LIST(cachep, listp, slab, nid)				\
 	do {								\
 		INIT_LIST_HEAD(listp);					\
+		list_splice(&(cachep->nodelists[nid]->slab), listp);	\
 	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'listp' - possible side-effects?
#74: FILE: mm/slab.c:352:
+#define MAKE_LIST(cachep, listp, slab, nid)				\
 	do {								\
 		INIT_LIST_HEAD(listp);					\
+		list_splice(&(cachep->nodelists[nid]->slab), listp);	\
 	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'slab' may be better as '(slab)' to avoid precedence issues
#74: FILE: mm/slab.c:352:
+#define MAKE_LIST(cachep, listp, slab, nid)				\
 	do {								\
 		INIT_LIST_HEAD(listp);					\
+		list_splice(&(cachep->nodelists[nid]->slab), listp);	\
 	} while (0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cachep->nodelists[nid]->slab
#78: FILE: mm/slab.c:355:
+		list_splice(&(cachep->nodelists[nid]->slab), listp);	\

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cachep' - possible side-effects?
#82: FILE: mm/slab.c:358:
+#define	MAKE_ALL_LISTS(cachep, ptr, nid)				\
 	do {								\
+	MAKE_LIST((cachep), (&(ptr)->slabs_full), slabs_full, nid);	\
+	MAKE_LIST((cachep), (&(ptr)->slabs_partial), slabs_partial, nid);\
+	MAKE_LIST((cachep), (&(ptr)->slabs_free), slabs_free, nid);	\
 	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#82: FILE: mm/slab.c:358:
+#define	MAKE_ALL_LISTS(cachep, ptr, nid)				\
 	do {								\
+	MAKE_LIST((cachep), (&(ptr)->slabs_full), slabs_full, nid);	\
+	MAKE_LIST((cachep), (&(ptr)->slabs_partial), slabs_partial, nid);\
+	MAKE_LIST((cachep), (&(ptr)->slabs_free), slabs_free, nid);	\
 	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nid' - possible side-effects?
#82: FILE: mm/slab.c:358:
+#define	MAKE_ALL_LISTS(cachep, ptr, nid)				\
 	do {								\
+	MAKE_LIST((cachep), (&(ptr)->slabs_full), slabs_full, nid);	\
+	MAKE_LIST((cachep), (&(ptr)->slabs_partial), slabs_partial, nid);\
+	MAKE_LIST((cachep), (&(ptr)->slabs_free), slabs_free, nid);	\
 	} while (0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#83: FILE: mm/slab.c:359:
 	do {								\
+	MAKE_LIST((cachep), (&(ptr)->slabs_full), slabs_full, nid);	\

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#217: FILE: mm/slab.c:880:
+			nc = alloc_arraycache(nid, cachep->limit,
 					cachep->batchcount);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#227: FILE: mm/slab.c:888:
+				if (!(nc = alloc_arraycache(nid,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#228: FILE: mm/slab.c:889:
+				if (!(nc = alloc_arraycache(nid,
 					cachep->shared*cachep->batchcount,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#286: FILE: mm/slab.c:980:
+	BUG_ON(cachep->nodelists[nid] != list);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*ptr)...) over kmalloc_node(sizeof(struct kmem_list3)...)
#287: FILE: mm/slab.c:981:
+	ptr = kmalloc_node(sizeof(struct kmem_list3), GFP_KERNEL, nid);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#313: FILE: mm/slab.c:1135:
+				  &initkmem_list3[SIZE_AC+nid], nid);
 				                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#318: FILE: mm/slab.c:1139:
+					  &initkmem_list3[SIZE_L3+nid], nid);
 					                         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#366: FILE: mm/slab.c:1766:
+				int nid;
+				for_each_online_node(nid) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#375: FILE: mm/slab.c:1771:
+					BUG_ON(!cachep->nodelists[nid]);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#468: FILE: mm/slab.c:2217:
+	if (!(objp = kmem_getpages(cachep, flags, nid)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#506: FILE: mm/slab.c:2582:
+ ^Il3 = cachep->nodelists[nid];$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#506: FILE: mm/slab.c:2582:
+ ^Il3 = cachep->nodelists[nid];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#506: FILE: mm/slab.c:2582:
+ ^Il3 = cachep->nodelists[nid];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#515: FILE: mm/slab.c:2596:
+ ^Icheck_spinlock_acquired_node(cachep, nid);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#515: FILE: mm/slab.c:2596:
+ ^Icheck_spinlock_acquired_node(cachep, nid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#515: FILE: mm/slab.c:2596:
+ ^Icheck_spinlock_acquired_node(cachep, nid);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#524: FILE: mm/slab.c:2629:
+ ^Ix = cache_grow(cachep, flags, nid);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#524: FILE: mm/slab.c:2629:
+ ^Ix = cache_grow(cachep, flags, nid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#524: FILE: mm/slab.c:2629:
+ ^Ix = cache_grow(cachep, flags, nid);$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cachep->nodelists[nid]
#603: FILE: mm/slab.c:2784:
+				spin_lock(&(cachep->nodelists[nid])->list_lock);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cachep->nodelists[nid]
#605: FILE: mm/slab.c:2786:
+				spin_unlock(&(cachep->nodelists[nid])->list_lock);

WARNING:SPLIT_STRING: quoted string split across lines
#637: FILE: mm/slab.c:2882:
 		printk(KERN_WARNING "slab: not allocating in inactive node %d "
+		       "for cache %s\n", nid, cachep->name);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#698: FILE: mm/slab.c:3102:
+		if (!(new_alien = alloc_alien_cache(nid, cachep->limit)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#702: FILE: mm/slab.c:3105:
+		if (!(new = alloc_arraycache(nid, cachep->shared *

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#706: FILE: mm/slab.c:3108:
+		if ((l3 = cachep->nodelists[nid])) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#712: FILE: mm/slab.c:3112:
+			if ((nc = cachep->nodelists[nid]->shared))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000137042.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 12 warnings, 14 checks, 685 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000137042.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
