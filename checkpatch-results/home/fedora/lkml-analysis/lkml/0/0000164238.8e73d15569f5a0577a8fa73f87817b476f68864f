WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
This adds basic support for KGDB on SuperH as well as adding some architecture

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#442: FILE: arch/sh/kernel/kgdb.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#443: FILE: arch/sh/kernel/kgdb.c:2:
+ * arch/sh/kernel/kgdb.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'Containes' may be misspelled - perhaps 'Contains'?
#447: FILE: arch/sh/kernel/kgdb.c:6:
+ * Containes extracts from code by Glenn Engel, Jim Kingdon,
    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#474: FILE: arch/sh/kernel/kgdb.c:33:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#478: FILE: arch/sh/kernel/kgdb.c:37:
+extern atomic_t cpu_doing_single_step;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op' - possible side-effects?
#496: FILE: arch/sh/kernel/kgdb.c:55:
+#define OPCODE_BTF_DISP(op)   (((op) & 0x80) ? (((op) | 0xffffff80) << 1) : \
+			      (((op) & 0x7f ) << 1))

ERROR:SPACING: space prohibited before that close parenthesis ')'
#497: FILE: arch/sh/kernel/kgdb.c:56:
+			      (((op) & 0x7f ) << 1))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op' - possible side-effects?
#501: FILE: arch/sh/kernel/kgdb.c:60:
+#define OPCODE_BRA_DISP(op)   (((op) & 0x800) ? (((op) | 0xfffff800) << 1) : \
+			      (((op) & 0x7ff) << 1))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op' - possible side-effects?
#506: FILE: arch/sh/kernel/kgdb.c:65:
+#define OPCODE_BSR_DISP(op)   (((op) & 0x800) ? (((op) | 0xfffff800) << 1) : \
+			      (((op) & 0x7ff) << 1))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#700: FILE: arch/sh/kernel/kgdb.c:259:
+			 * us to */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#702: FILE: arch/sh/kernel/kgdb.c:261:
+			unsigned short *next_addr = get_step_address();
+			stepped_address = (int)next_addr;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#721: FILE: arch/sh/kernel/kgdb.c:280:
+ * When an exception has occured, we are called.  We need to set things
                          ^^^^^^^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#740: FILE: arch/sh/kernel/kgdb.c:299:
+	__asm__ __volatile__("stc vbr, %0":"=r"(vbr_val));
 	                                  ^

WARNING:TYPO_SPELLING: 'execption' may be misspelled - perhaps 'exception'?
#743: FILE: arch/sh/kernel/kgdb.c:302:
+	/* Get the execption code. */
 	           ^^^^^^^^^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#744: FILE: arch/sh/kernel/kgdb.c:303:
+	__asm__ __volatile__("stc r2_bank, %0":"=r"(excep_code));
 	                                      ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#749: FILE: arch/sh/kernel/kgdb.c:308:
+	 * breakpoint() to try and initialize everything for us. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#759: FILE: arch/sh/kernel/kgdb.c:318:
+	 * will not be replaced (and we would retake the trap forever) */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#761: FILE: arch/sh/kernel/kgdb.c:320:
+	    (*(volatile unsigned long *)TRA != (0xff << 2)))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#766: FILE: arch/sh/kernel/kgdb.c:325:
+	 * instruction away. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#774: FILE: arch/sh/kernel/kgdb.c:333:
+	 * need to send back and forth lives in pt_regs. */

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#788: FILE: arch/sh/kernel/kgdb.c:347:
+	__asm__ __volatile__("ldc %0, vbr": :"r"(vbr_val));
 	                                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#788: FILE: arch/sh/kernel/kgdb.c:347:
+	__asm__ __volatile__("ldc %0, vbr": :"r"(vbr_val));
 	                                    ^

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#798: FILE: arch/sh/kernel/kgdb.c:357:
+struct kgdb_arch arch_kgdb_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#846: FILE: arch/sh/kernel/kgdb-jmp.S:1:
+#include <linux/linkage.h>

CHECK:CAMELCASE: Avoid CamelCase: <kgdbsci_ttySC>
#2760: FILE: drivers/serial/sh-sci.c:85:
+static int kgdbsci_ttySC = 1;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#2766: FILE: drivers/serial/sh-sci.c:91:
+static int kgdbsci_ttySC = 0;		/* Start with this if not given */

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:CAMELCASE: Avoid CamelCase: <SCxSR>
#2805: FILE: drivers/serial/sh-sci.c:128:
+			sci_out(port, SCxSR, SCxSR_ERROR_CLEAR(port));

CHECK:CAMELCASE: Avoid CamelCase: <SCxSR_ERROR_CLEAR>
#2805: FILE: drivers/serial/sh-sci.c:128:
+			sci_out(port, SCxSR, SCxSR_ERROR_CLEAR(port));

WARNING:STATIC_CONST_CHAR_ARRAY: const array should probably be static const
#2840: FILE: drivers/serial/sh-sci.c:173:
+	const char hexchars[] = "0123456789abcdef";

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#2853: FILE: drivers/serial/sh-sci.c:178:
+	if (sh_bios_in_gdb_mode()) {
[...]
 	    do {

CHECK:CAMELCASE: Avoid CamelCase: <SCxSR_TDxE>
#2918: FILE: drivers/serial/sh-sci.c:224:
+	while (!(status & SCxSR_TDxE(&KGDBPORT.port)));

CHECK:CAMELCASE: Avoid CamelCase: <SCxTDR>
#2920: FILE: drivers/serial/sh-sci.c:226:
+	sci_out(&KGDBPORT.port, SCxTDR, c);

CHECK:CAMELCASE: Avoid CamelCase: <SCxSR_TDxE_CLEAR>
#2922: FILE: drivers/serial/sh-sci.c:228:
+	sci_out(&KGDBPORT.port, SCxSR, SCxSR_TDxE_CLEAR(&KGDBPORT.port));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2932: FILE: drivers/serial/sh-sci.c:236:
+static irqreturn_t kgdbsci_rx_interrupt(int irq, void *ptr,
+		struct pt_regs *regs)

CHECK:CAMELCASE: Avoid CamelCase: <SCxSR_RDxF>
#2947: FILE: drivers/serial/sh-sci.c:240:
+	if (!(sci_in(port, SCxSR) & SCxSR_RDxF(port)))

CHECK:BRACES: Unbalanced braces around else statement
#2957: FILE: drivers/serial/sh-sci.c:246:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <SCxSR_RDxF_CLEAR>
#2964: FILE: drivers/serial/sh-sci.c:251:
+	sci_out(port, SCxSR, SCxSR_RDxF_CLEAR(port));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2973: FILE: drivers/serial/sh-sci.c:257:
+static irqreturn_t kgdbsci_mpxed_interrupt(int irq, void *ptr,
+		struct pt_regs *regs)

ERROR:CODE_INDENT: code indent should use tabs where possible
#2975: FILE: drivers/serial/sh-sci.c:259:
+        unsigned short ssr_status, scr_status;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2975: FILE: drivers/serial/sh-sci.c:259:
+        unsigned short ssr_status, scr_status;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2976: FILE: drivers/serial/sh-sci.c:260:
+        struct uart_port *port = ptr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2976: FILE: drivers/serial/sh-sci.c:260:
+        struct uart_port *port = ptr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2978: FILE: drivers/serial/sh-sci.c:262:
+        ssr_status = sci_in(port,SCxSR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2978: FILE: drivers/serial/sh-sci.c:262:
+        ssr_status = sci_in(port,SCxSR);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2978: FILE: drivers/serial/sh-sci.c:262:
+        ssr_status = sci_in(port,SCxSR);
                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2979: FILE: drivers/serial/sh-sci.c:263:
+        scr_status = sci_in(port,SCSCR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2979: FILE: drivers/serial/sh-sci.c:263:
+        scr_status = sci_in(port,SCSCR);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2979: FILE: drivers/serial/sh-sci.c:263:
+        scr_status = sci_in(port,SCSCR);
                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2983: FILE: drivers/serial/sh-sci.c:266:
+        if ((ssr_status&0x0002) && (scr_status&0x0040))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2983: FILE: drivers/serial/sh-sci.c:266:
+        if ((ssr_status&0x0002) && (scr_status&0x0040))$

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2983: FILE: drivers/serial/sh-sci.c:266:
+        if ((ssr_status&0x0002) && (scr_status&0x0040))
                        ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#2983: FILE: drivers/serial/sh-sci.c:266:
+        if ((ssr_status&0x0002) && (scr_status&0x0040))
                                               ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2996: FILE: drivers/serial/sh-sci.c:276:
+			printk(KERN_ERR "kgdbsci: Cannot allocate irq.\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3000: FILE: drivers/serial/sh-sci.c:280:
+		if (request_irq(KGDBPORT.irqs[0], kgdbsci_mpxed_interrupt,
+					SA_INTERRUPT, "kgdbsci",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3002: FILE: drivers/serial/sh-sci.c:282:
+			printk(KERN_ERR "kgdbsci: Cannot allocate irq.\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3008: FILE: drivers/serial/sh-sci.c:288:
+			request_irq(KGDBPORT.irqs[1],
+					kgdbsci_rx_interrupt, SA_INTERRUPT,

WARNING:CONST_STRUCT: struct kgdb_io should normally be const
#3058: FILE: drivers/serial/sh-sci.c:327:
+struct kgdb_io kgdb_io_ops = {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#3078: FILE: drivers/serial/sh-sci.c:347:
+	if (*str < '0' || *str > SCI_NPORTS + '0')
+		 goto errout;

WARNING:TABSTOP: Statements should start on a tabstop
#3079: FILE: drivers/serial/sh-sci.c:348:
+		 goto errout;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#3082: FILE: drivers/serial/sh-sci.c:351:
+	if (*str != ',')
+		 goto errout;

WARNING:TABSTOP: Statements should start on a tabstop
#3083: FILE: drivers/serial/sh-sci.c:352:
+		 goto errout;

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#3085: FILE: drivers/serial/sh-sci.c:354:
+	kgdbsci_baud = simple_strtoul(str, &str, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#3086: FILE: drivers/serial/sh-sci.c:355:
+	if (kgdbsci_baud != 9600 && kgdbsci_baud != 19200 &&
[...]
+		 goto errout;

WARNING:TABSTOP: Statements should start on a tabstop
#3089: FILE: drivers/serial/sh-sci.c:358:
+		 goto errout;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3094: FILE: drivers/serial/sh-sci.c:363:
+	printk(KERN_ERR "Invalid syntax for option kgdbsci=\n");

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#3097: FILE: drivers/serial/sh-sci.c:366:
+__setup("kgdbsci", kgdbsci_opt);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3112: FILE: drivers/serial/sh-sci.c:621:
+				if (port->line == KGDBPORT.port.line &&
+						c == 3)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#3123: FILE: drivers/serial/sh-sci.c:1636:
+#if 0

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3197: FILE: include/asm-sh/kgdb.h:19:
+/* Based on sh-gdb.c from gdb-6.1, Glenn
+     Engel at HP  Ben Lee and Steve Chamberlain */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3197: FILE: include/asm-sh/kgdb.h:19:
+     Engel at HP  Ben Lee and Steve Chamberlain */

ERROR:CODE_INDENT: code indent should use tabs where possible
#3210: FILE: include/asm-sh/kgdb.h:30:
+        unsigned long vbr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3210: FILE: include/asm-sh/kgdb.h:30:
+        unsigned long vbr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3242: FILE: include/asm-sh/kgdb.h:33:
+        unsigned long sr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3242: FILE: include/asm-sh/kgdb.h:33:
+        unsigned long sr;$

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#3275: FILE: include/asm-sh/kgdb.h:36:
+#define BREAKPOINT()		asm("trapa #0xff");

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3329: FILE: include/asm-sh/system.h:256:
+static inline unsigned long __cmpxchg_u32(volatile int * m, unsigned long old,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#3329: FILE: include/asm-sh/system.h:256:
+static inline unsigned long __cmpxchg_u32(volatile int * m, unsigned long old,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3330: FILE: include/asm-sh/system.h:257:
+static inline unsigned long __cmpxchg_u32(volatile int * m, unsigned long old,
+	unsigned long new)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3344: FILE: include/asm-sh/system.h:271:
+ * if something tries to do an invalid cmpxchg(). */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3345: FILE: include/asm-sh/system.h:272:
+extern void __cmpxchg_called_with_bad_pointer(void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3349: FILE: include/asm-sh/system.h:276:
+static inline unsigned long __cmpxchg(volatile void * ptr, unsigned long old,

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#3349: FILE: include/asm-sh/system.h:276:
+static inline unsigned long __cmpxchg(volatile void * ptr, unsigned long old,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3350: FILE: include/asm-sh/system.h:277:
+static inline unsigned long __cmpxchg(volatile void * ptr, unsigned long old,
+		unsigned long new, int size)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3360: FILE: include/asm-sh/system.h:287:
+#define cmpxchg(ptr,o,n)						 \
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3360: FILE: include/asm-sh/system.h:287:
+#define cmpxchg(ptr,o,n)						 \
                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#3360: FILE: include/asm-sh/system.h:287:
+#define cmpxchg(ptr,o,n)						 \
+  ({									 \
+     __typeof__(*(ptr)) _o_ = (o);					 \
+     __typeof__(*(ptr)) _n_ = (n);					 \
+     (__typeof__(*(ptr))) __cmpxchg((ptr), (unsigned long)_o_,		 \
+				    (unsigned long)_n_, sizeof(*(ptr))); \
+  })

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3361: FILE: include/asm-sh/system.h:288:
+  ({^I^I^I^I^I^I^I^I^I \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3362: FILE: include/asm-sh/system.h:289:
+     __typeof__(*(ptr)) _o_ = (o);^I^I^I^I^I \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3363: FILE: include/asm-sh/system.h:290:
+     __typeof__(*(ptr)) _n_ = (n);^I^I^I^I^I \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3364: FILE: include/asm-sh/system.h:291:
+     (__typeof__(*(ptr))) __cmpxchg((ptr), (unsigned long)_o_,^I^I \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3366: FILE: include/asm-sh/system.h:293:
+  })$

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#3396: FILE: lib/Kconfig.debug:230:
+config KGDB_SH_SCI
+	bool "KGDB: On SH SCI(F) serial port"
+	depends on SUPERH && SERIAL_SH_SCI
+	help
+	  Uses the SCI(F) serial port found on the board.
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000164238.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 49 warnings, 27 checks, 1626 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000164238.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
