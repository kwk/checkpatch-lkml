WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
 > 	Declaring a function to return a const scalar value is pretty meaningless. 

WARNING:INLINE: plain inline is preferred over __inline
#85: FILE: include/asm-alpha/byteorder.h:9:
+static __inline __u32 __attribute_const__ __arch__swab32(__u32 x)

CHECK:SPACING: No space is necessary after a cast
#97: FILE: include/asm-arm/current.h:6:
+static inline struct task_struct *get_current(void) __attribute_const__;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#109: FILE: include/asm-arm/thread_info.h:79:
+static inline struct thread_info *current_thread_info(void) __attribute_const__;

CHECK:SPACING: No space is necessary after a cast
#121: FILE: include/asm-arm26/current.h:6:
+static inline struct task_struct *get_current(void) __attribute_const__;

CHECK:SPACING: No space is necessary after a cast
#133: FILE: include/asm-arm26/thread_info.h:74:
+static inline struct thread_info *current_thread_info(void) __attribute_const__;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#146: FILE: include/asm-m68k/virtconvert.h:22:
+extern unsigned long mm_vtop(unsigned long addr) __attribute_const__;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#147: FILE: include/asm-m68k/virtconvert.h:23:
+extern unsigned long mm_ptov(unsigned long addr) __attribute_const__;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#159: FILE: include/asm-ppc/io.h:211:
+extern unsigned long mm_ptov(unsigned long addr) __attribute_const__;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#171: FILE: include/asm-ppc/pgtable.h:629:
+extern unsigned long mm_ptov(unsigned long addr) __attribute_const__;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#183: FILE: include/asm-sparc/btfixup.h:42:
+	extern __type ___f_##__name(__args) __attribute_const__;			\

CHECK:SPACING: No space is necessary after a cast
#192: FILE: include/asm-sparc/btfixup.h:52:
+	extern unsigned int ___sf_##__name(void) __attribute_const__;		\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#192: FILE: include/asm-sparc/btfixup.h:52:
+	extern unsigned int ___sf_##__name(void) __attribute_const__;		\

CHECK:SPACING: No space is necessary after a cast
#201: FILE: include/asm-sparc/btfixup.h:60:
+	extern unsigned int ___sf_##__name(void) __attribute_const__;		\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#201: FILE: include/asm-sparc/btfixup.h:60:
+	extern unsigned int ___sf_##__name(void) __attribute_const__;		\

CHECK:SPACING: No space is necessary after a cast
#210: FILE: include/asm-sparc/btfixup.h:74:
+	extern unsigned int ___af_##__name(void) __attribute_const__;		\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#210: FILE: include/asm-sparc/btfixup.h:74:
+	extern unsigned int ___af_##__name(void) __attribute_const__;		\

CHECK:SPACING: No space is necessary after a cast
#219: FILE: include/asm-sparc/btfixup.h:82:
+	extern unsigned int ___af_##__name(void) __attribute_const__;		\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#219: FILE: include/asm-sparc/btfixup.h:82:
+	extern unsigned int ___af_##__name(void) __attribute_const__;		\

CHECK:SPACING: No space is necessary after a cast
#228: FILE: include/asm-sparc/btfixup.h:93:
+	extern unsigned int ___hf_##__name(void) __attribute_const__;		\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#228: FILE: include/asm-sparc/btfixup.h:93:
+	extern unsigned int ___hf_##__name(void) __attribute_const__;		\

CHECK:SPACING: No space is necessary after a cast
#237: FILE: include/asm-sparc/btfixup.h:101:
+	extern unsigned int ___hf_##__name(void) __attribute_const__;		\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#237: FILE: include/asm-sparc/btfixup.h:101:
+	extern unsigned int ___hf_##__name(void) __attribute_const__;		\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#249: FILE: include/asm-sparc/pgtable.h:83:
+extern unsigned int pmd_align(unsigned int addr) __attribute_const__;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#258: FILE: include/asm-sparc/pgtable.h:93:
+extern unsigned int pgdir_align(unsigned int addr) __attribute_const__;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#267: FILE: include/asm-sparc/pgtable.h:251:
+extern int pte_write(pte_t pte) __attribute_const__;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#274: FILE: include/asm-sparc/pgtable.h:257:
+extern int pte_dirty(pte_t pte) __attribute_const__;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#281: FILE: include/asm-sparc/pgtable.h:263:
+extern int pte_young(pte_t pte) __attribute_const__;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#290: FILE: include/asm-sparc/pgtable.h:274:
+extern int pte_file(pte_t pte) __attribute_const__;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#299: FILE: include/asm-sparc/pgtable.h:286:
+extern pte_t pte_wrprotect(pte_t pte) __attribute_const__;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#306: FILE: include/asm-sparc/pgtable.h:292:
+extern pte_t pte_mkclean(pte_t pte) __attribute_const__;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#313: FILE: include/asm-sparc/pgtable.h:298:
+extern pte_t pte_mkold(pte_t pte) __attribute_const__;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#322: FILE: include/asm-sparc/pgtable.h:335:
+extern pte_t pte_modify(pte_t pte, pgprot_t newprot) __attribute_const__;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000310281.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 2 warnings, 31 checks, 228 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000310281.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
