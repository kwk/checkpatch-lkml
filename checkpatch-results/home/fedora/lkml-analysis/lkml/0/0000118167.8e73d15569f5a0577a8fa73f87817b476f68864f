WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#93: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#98: FILE: include/asm-generic/compat_signal.h:1:
+#ifndef _ASM_GENERIC_COMPAT_SIGNAL_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#104: FILE: include/asm-generic/compat_signal.h:7:
+typedef compat_uptr_t compat_sighandler_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#106: FILE: include/asm-generic/compat_signal.h:9:
+typedef struct compat_sigaltstack {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#113: FILE: include/asm-generic/compat_signal.h:16:
+/* Most things should be clean enough to redefine this at will, if care
+   is taken to make libc match.  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#113: FILE: include/asm-generic/compat_signal.h:16:
+   is taken to make libc match.  */

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#151: FILE: include/linux/compat.h:29:
+#define is_compat_task(x) (personality(x->personality) == PER_LINUX32)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#203: FILE: include/linux/compat_siginfo.h:1:
+#ifndef _ASM_GENERIC_COMPAT_SIGINFO_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#213: FILE: include/linux/compat_siginfo.h:11:
+typedef struct compat_siginfo{

WARNING:SPACING: missing space after struct definition
#213: FILE: include/linux/compat_siginfo.h:11:
+typedef struct compat_siginfo{

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: include/linux/compat_siginfo.h:14:
+static inline int compat_copy_siginfo_to_user(compat_siginfo_t __user *to, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#217: FILE: include/linux/compat_siginfo.h:15:
+static inline int compat_copy_siginfo_to_user(compat_siginfo_t __user *to, 
+						struct siginfo *from)

ERROR:CODE_INDENT: code indent should use tabs where possible
#223: FILE: include/linux/compat_siginfo.h:21:
+                                                compat_siginfo_t __user *from)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: include/linux/compat_siginfo.h:21:
+                                                compat_siginfo_t __user *from)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#225: FILE: include/linux/compat_siginfo.h:23:
+        return -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: include/linux/compat_siginfo.h:23:
+        return -1;$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#234: FILE: include/linux/compat_siginfo.h:32:
+typedef union compat_sigval {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: include/linux/compat_siginfo.h:48:
+  ((SI_COMPAT_MAX_SIZE - __ARCH_SI_COMPAT_PREAMBLE_SIZE) / sizeof(compat_int_t))$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#266: FILE: include/linux/compat_siginfo.h:64:
+typedef struct compat_siginfo {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#328: FILE: include/linux/compat_siginfo.h:126:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#329: FILE: include/linux/compat_siginfo.h:127:
+ * It seems likely that SIGEV_THREAD will have to be handled from $

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#339: FILE: include/linux/compat_siginfo.h:137:
+#define COMPAT_SIGEV_PAD_SIZE	((SIGEV_MAX_SIZE/sizeof(int)) - 3)
                              	                ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#344: FILE: include/linux/compat_siginfo.h:142:
+typedef struct compat_sigevent {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#376: FILE: include/linux/compat_siginfo.h:174:
+extern int compat_copy_siginfo_to_user(compat_siginfo_t __user *to, struct siginfo *from);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#377: FILE: include/linux/compat_siginfo.h:175:
+extern int compat_copy_siginfo_from_user(struct siginfo *to, compat_siginfo_t __user *from);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#379: FILE: include/linux/compat_siginfo.h:177:
+extern int compat_copy_sigevent_from_user(struct sigevent *to, compat_sigevent_t __user *from);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#380: FILE: include/linux/compat_siginfo.h:178:
+extern int compat_copy_sigevent_to_user(compat_sigevent_t __user *to, struct sigevent *from);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#441: FILE: kernel/compat.c:443:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#455: FILE: kernel/compat.c:661:
+			     compat_timer_t __user * created_timer_id)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "timer_event_spec"
#463: FILE: kernel/compat.c:669:
+	if (timer_event_spec != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#466: FILE: kernel/compat.c:672:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "created_timer_id"
#468: FILE: kernel/compat.c:674:
+	if (created_timer_id != NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#470: FILE: kernel/compat.c:676:
+^I^I  ^Ireturn -EFAULT;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#470: FILE: kernel/compat.c:676:
+^I^I  ^Ireturn -EFAULT;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#473: FILE: kernel/compat.c:679:
+^Iret = sys_timer_create(which_clock, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#474: FILE: kernel/compat.c:680:
+^I    ^I^I^Itimer_event_spec ? (sigevent_t __user *)&kevent : NULL, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#474: FILE: kernel/compat.c:680:
+^I    ^I^I^Itimer_event_spec ? (sigevent_t __user *)&kevent : NULL, $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#474: FILE: kernel/compat.c:680:
+^I    ^I^I^Itimer_event_spec ? (sigevent_t __user *)&kevent : NULL, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#474: FILE: kernel/compat.c:680:
+	ret = sys_timer_create(which_clock, 
+	    			timer_event_spec ? (sigevent_t __user *)&kevent : NULL, 

ERROR:CODE_INDENT: code indent should use tabs where possible
#475: FILE: kernel/compat.c:681:
+^I    ^I^I^Icreated_timer_id ? (timer_t __user *)&ktimer : NULL);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#475: FILE: kernel/compat.c:681:
+^I    ^I^I^Icreated_timer_id ? (timer_t __user *)&ktimer : NULL);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#477: FILE: kernel/compat.c:683:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "timer_event_spec"
#479: FILE: kernel/compat.c:685:
+	if (timer_event_spec != NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#480: FILE: kernel/compat.c:686:
+^I  ^Iif (compat_copy_sigevent_to_user(timer_event_spec, &kevent) != 0)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#480: FILE: kernel/compat.c:686:
+^I  ^Iif (compat_copy_sigevent_to_user(timer_event_spec, &kevent) != 0)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "created_timer_id"
#483: FILE: kernel/compat.c:689:
+	if (created_timer_id != NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#484: FILE: kernel/compat.c:690:
+^I  ^Iif (__put_user(ktimer, created_timer_id) != 0)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#484: FILE: kernel/compat.c:690:
+^I  ^Iif (__put_user(ktimer, created_timer_id) != 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#485: FILE: kernel/compat.c:691:
+^I^I  ^Ireturn -EFAULT;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#485: FILE: kernel/compat.c:691:
+^I^I  ^Ireturn -EFAULT;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#486: FILE: kernel/compat.c:692:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#490: FILE: kernel/compat.c:696:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#509: FILE: kernel/compat_signal.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#511: FILE: kernel/compat_signal.c:3:
+ * $

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#513: FILE: kernel/compat_signal.c:5:
+ *              Copied linux/kernel/compat_signal.c (copy_siginfo_to_user)

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#516: FILE: kernel/compat_signal.c:8:
+ *              $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#529: FILE: kernel/compat_signal.c:21:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#530: FILE: kernel/compat_signal.c:22:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#530: FILE: kernel/compat_signal.c:22:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#536: FILE: kernel/compat_signal.c:28:
+#include <asm/uaccess.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#543: FILE: kernel/compat_signal.c:35:
+^Icompat_siginfo_t compat_from;^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#545: FILE: kernel/compat_signal.c:37:
+	if (!access_ok (VERIFY_WRITE, to, sizeof(compat_siginfo_t)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#547: FILE: kernel/compat_signal.c:39:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#549: FILE: kernel/compat_signal.c:41:
+^I * If you change compat_siginfo_t structure *or* siginfo_t, $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#557: FILE: kernel/compat_signal.c:49:
+	memset(&compat_from,'\0',sizeof(compat_siginfo_t));
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#557: FILE: kernel/compat_signal.c:49:
+	memset(&compat_from,'\0',sizeof(compat_siginfo_t));
 	                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#559: FILE: kernel/compat_signal.c:51:
+        /* Always copy si_signo, si_errno, and si_code */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#564: FILE: kernel/compat_signal.c:56:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#564: FILE: kernel/compat_signal.c:56:
+        $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#564: FILE: kernel/compat_signal.c:56:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#569: FILE: kernel/compat_signal.c:61:
+        /* siginfo_t came from userspace, so it is the right$

ERROR:CODE_INDENT: code indent should use tabs where possible
#570: FILE: kernel/compat_signal.c:62:
+         * size, no need for conversion$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#571: FILE: kernel/compat_signal.c:63:
+         */        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#571: FILE: kernel/compat_signal.c:63:
+         */        $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#573: FILE: kernel/compat_signal.c:65:
+^I^Ireturn __copy_to_user(&to->_sifields._pad, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#574: FILE: kernel/compat_signal.c:66:
+                                      &from->_sifields._pad, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#574: FILE: kernel/compat_signal.c:66:
+                                      &from->_sifields._pad, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#574: FILE: kernel/compat_signal.c:66:
+                                      &from->_sifields._pad, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#575: FILE: kernel/compat_signal.c:67:
+                                      SI_COMPAT_PAD_SIZE)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#575: FILE: kernel/compat_signal.c:67:
+                                      SI_COMPAT_PAD_SIZE)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#577: FILE: kernel/compat_signal.c:69:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#577: FILE: kernel/compat_signal.c:69:
+        }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#578: FILE: kernel/compat_signal.c:70:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#646: FILE: kernel/compat_signal.c:138:
+        u64 scratch;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#646: FILE: kernel/compat_signal.c:138:
+        u64 scratch;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#648: FILE: kernel/compat_signal.c:140:
+	if (!access_ok (VERIFY_READ, from, sizeof(compat_siginfo_t)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#650: FILE: kernel/compat_signal.c:142:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#652: FILE: kernel/compat_signal.c:144:
+^I * If you change compat_siginfo_t structure *or* siginfo_t, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#656: FILE: kernel/compat_signal.c:148:
+        /* Always copy si_signo, si_errno, and si_code */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#660: FILE: kernel/compat_signal.c:152:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#660: FILE: kernel/compat_signal.c:152:
+        $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#660: FILE: kernel/compat_signal.c:152:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#661: FILE: kernel/compat_signal.c:153:
+        /* siginfo_t came from userspace, so it is the right$

ERROR:CODE_INDENT: code indent should use tabs where possible
#662: FILE: kernel/compat_signal.c:154:
+         * size, no need for conversion$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#663: FILE: kernel/compat_signal.c:155:
+         */        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#663: FILE: kernel/compat_signal.c:155:
+         */        $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#665: FILE: kernel/compat_signal.c:157:
+^I^Ireturn __copy_from_user(&to->_sifields._pad, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#666: FILE: kernel/compat_signal.c:158:
+                                        &from->_sifields._pad, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#666: FILE: kernel/compat_signal.c:158:
+                                        &from->_sifields._pad, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#666: FILE: kernel/compat_signal.c:158:
+                                        &from->_sifields._pad, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#667: FILE: kernel/compat_signal.c:159:
+                                        SI_COMPAT_PAD_SIZE)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#667: FILE: kernel/compat_signal.c:159:
+                                        SI_COMPAT_PAD_SIZE)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#669: FILE: kernel/compat_signal.c:161:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#669: FILE: kernel/compat_signal.c:161:
+        }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#670: FILE: kernel/compat_signal.c:162:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#680: FILE: kernel/compat_signal.c:172:
+                to->si_ptr = (u64 __user*)scratch;                $

ERROR:CODE_INDENT: code indent should use tabs where possible
#680: FILE: kernel/compat_signal.c:172:
+                to->si_ptr = (u64 __user*)scratch;                $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#680: FILE: kernel/compat_signal.c:172:
+                to->si_ptr = (u64 __user*)scratch;                $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#680: FILE: kernel/compat_signal.c:172:
+                to->si_ptr = (u64 __user*)scratch;                

ERROR:CODE_INDENT: code indent should use tabs where possible
#688: FILE: kernel/compat_signal.c:180:
+                to->si_addr = (u64 __user*)scratch;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#688: FILE: kernel/compat_signal.c:180:
+                to->si_addr = (u64 __user*)scratch;$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#688: FILE: kernel/compat_signal.c:180:
+                to->si_addr = (u64 __user*)scratch;

ERROR:CODE_INDENT: code indent should use tabs where possible
#706: FILE: kernel/compat_signal.c:198:
+                to->si_ptr = (u64 __user*)scratch;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#706: FILE: kernel/compat_signal.c:198:
+                to->si_ptr = (u64 __user*)scratch;$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#706: FILE: kernel/compat_signal.c:198:
+                to->si_ptr = (u64 __user*)scratch;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#722: FILE: kernel/compat_signal.c:214:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#723: FILE: kernel/compat_signal.c:215:
+^I/* copy sigval_t sigev_value $

ERROR:CODE_INDENT: code indent should use tabs where possible
#724: FILE: kernel/compat_signal.c:216:
+^I ^Iint_t sival_int^I^I(same)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#724: FILE: kernel/compat_signal.c:216:
+^I ^Iint_t sival_int^I^I(same)$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#724: FILE: kernel/compat_signal.c:216:
+	/* copy sigval_t sigev_value 
+	 	int_t sival_int		(same)

ERROR:CODE_INDENT: code indent should use tabs where possible
#725: FILE: kernel/compat_signal.c:217:
+^I ^Iuptr_t sival_ptr^I(32 vs 64)*/$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#725: FILE: kernel/compat_signal.c:217:
+^I ^Iuptr_t sival_ptr^I(32 vs 64)*/$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#725: FILE: kernel/compat_signal.c:217:
+	 	uptr_t sival_ptr	(32 vs 64)*/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#726: FILE: kernel/compat_signal.c:218:
+^Ierr = __get_user(to->sigev_value.sival_int, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#727: FILE: kernel/compat_signal.c:219:
+^I    ^I^I &from->sigev_value.sival_int);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#727: FILE: kernel/compat_signal.c:219:
+^I    ^I^I &from->sigev_value.sival_int);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#727: FILE: kernel/compat_signal.c:219:
+	err = __get_user(to->sigev_value.sival_int, 
+	    		 &from->sigev_value.sival_int);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#730: FILE: kernel/compat_signal.c:222:
+^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#731: FILE: kernel/compat_signal.c:223:
+^I/* copy int_t sigev_signo ^I(same)*/$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#733: FILE: kernel/compat_signal.c:225:
+^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#739: FILE: kernel/compat_signal.c:231:
+^I/* copy int_t _tid ^I^I(same),$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#740: FILE: kernel/compat_signal.c:232:
+	/* copy int_t _tid 		(same),
+	   good_sigevent() uses this value of */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#740: FILE: kernel/compat_signal.c:232:
+	   good_sigevent() uses this value of */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#742: FILE: kernel/compat_signal.c:234:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#744: FILE: kernel/compat_signal.c:236:
+	/* XXX: Do not copy these, they aren't used by
+	   anyone. We would need to distinguish the uses of the union.

ERROR:CODE_INDENT: code indent should use tabs where possible
#746: FILE: kernel/compat_signal.c:238:
+^I  ^Iuptr_t _function^I(32 vs 64)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#746: FILE: kernel/compat_signal.c:238:
+^I  ^Iuptr_t _function^I(32 vs 64)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#747: FILE: kernel/compat_signal.c:239:
+^I  ^Iuptr_t _attribute^I(32 vs 64)*/$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#747: FILE: kernel/compat_signal.c:239:
+^I  ^Iuptr_t _attribute^I(32 vs 64)*/$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#747: FILE: kernel/compat_signal.c:239:
+	  	uptr_t _attribute	(32 vs 64)*/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#748: FILE: kernel/compat_signal.c:240:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#758: FILE: kernel/compat_signal.c:250:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#759: FILE: kernel/compat_signal.c:251:
+^I/* copy sigval_t sigev_value $

ERROR:CODE_INDENT: code indent should use tabs where possible
#760: FILE: kernel/compat_signal.c:252:
+^I ^Iint_t sival_int^I^I(same)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#760: FILE: kernel/compat_signal.c:252:
+^I ^Iint_t sival_int^I^I(same)$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#760: FILE: kernel/compat_signal.c:252:
+	/* copy sigval_t sigev_value 
+	 	int_t sival_int		(same)

ERROR:CODE_INDENT: code indent should use tabs where possible
#761: FILE: kernel/compat_signal.c:253:
+^I ^Iuptr_t sival_ptr^I(32 vs 64)*/$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#761: FILE: kernel/compat_signal.c:253:
+^I ^Iuptr_t sival_ptr^I(32 vs 64)*/$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#761: FILE: kernel/compat_signal.c:253:
+	 	uptr_t sival_ptr	(32 vs 64)*/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#762: FILE: kernel/compat_signal.c:254:
+^Ierr = __put_user(from->sigev_value.sival_int, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#763: FILE: kernel/compat_signal.c:255:
+^I    ^I^I &to->sigev_value.sival_int);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#763: FILE: kernel/compat_signal.c:255:
+^I    ^I^I &to->sigev_value.sival_int);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#763: FILE: kernel/compat_signal.c:255:
+	err = __put_user(from->sigev_value.sival_int, 
+	    		 &to->sigev_value.sival_int);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#766: FILE: kernel/compat_signal.c:258:
+^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#767: FILE: kernel/compat_signal.c:259:
+^I/* copy int_t sigev_signo ^I(same)*/$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#769: FILE: kernel/compat_signal.c:261:
+^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#775: FILE: kernel/compat_signal.c:267:
+^I/* copy int_t _tid ^I^I(same),$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#776: FILE: kernel/compat_signal.c:268:
+	/* copy int_t _tid 		(same),
+	   good_sigevent() uses this value of */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#776: FILE: kernel/compat_signal.c:268:
+	   good_sigevent() uses this value of */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#778: FILE: kernel/compat_signal.c:270:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#780: FILE: kernel/compat_signal.c:272:
+	/* XXX: Do not copy these, they aren't used by
+	   anyone. We would need to distinguish the uses of the union.

ERROR:CODE_INDENT: code indent should use tabs where possible
#782: FILE: kernel/compat_signal.c:274:
+^I  ^Iuptr_t _function^I(32 vs 64)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#782: FILE: kernel/compat_signal.c:274:
+^I  ^Iuptr_t _function^I(32 vs 64)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#783: FILE: kernel/compat_signal.c:275:
+^I  ^Iuptr_t _attribute^I(32 vs 64)*/$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#783: FILE: kernel/compat_signal.c:275:
+^I  ^Iuptr_t _attribute^I(32 vs 64)*/$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#783: FILE: kernel/compat_signal.c:275:
+	  	uptr_t _attribute	(32 vs 64)*/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#784: FILE: kernel/compat_signal.c:276:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#822: FILE: kernel/signal.c:2103:
+        if(is_compat_task(current))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#822: FILE: kernel/signal.c:2103:
+        if(is_compat_task(current))$

ERROR:SPACING: space required before the open parenthesis '('
#822: FILE: kernel/signal.c:2103:
+        if(is_compat_task(current))

ERROR:CODE_INDENT: code indent should use tabs where possible
#823: FILE: kernel/signal.c:2104:
+                return compat_copy_siginfo_from_user(to,(compat_siginfo_t __user *)from);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#823: FILE: kernel/signal.c:2104:
+                return compat_copy_siginfo_from_user(to,(compat_siginfo_t __user *)from);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#823: FILE: kernel/signal.c:2104:
+                return compat_copy_siginfo_from_user(to,(compat_siginfo_t __user *)from);
                                                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#824: FILE: kernel/signal.c:2105:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#824: FILE: kernel/signal.c:2105:
+  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#825: FILE: kernel/signal.c:2106:
+        return copy_from_user(&to, from, sizeof(siginfo_t));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#825: FILE: kernel/signal.c:2106:
+        return copy_from_user(&to, from, sizeof(siginfo_t));$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#835: FILE: kernel/signal.c:2116:
+^I$

ERROR:SPACING: space required before the open brace '{'
#837: FILE: kernel/signal.c:2118:
+	if(is_compat_task(current)){

ERROR:SPACING: space required before the open parenthesis '('
#837: FILE: kernel/signal.c:2118:
+	if(is_compat_task(current)){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#837: FILE: kernel/signal.c:2118:
+	if(is_compat_task(current)){
+		return compat_copy_siginfo_to_user((compat_siginfo_t __user *)to,from);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#838: FILE: kernel/signal.c:2119:
+		return compat_copy_siginfo_to_user((compat_siginfo_t __user *)to,from);
 		                                                                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#846: FILE: kernel/signal.c:2127:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000118167.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 99 errors, 69 warnings, 15 checks, 706 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000118167.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
