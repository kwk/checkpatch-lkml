WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
>From the 'user' side of things it provides a function to mark a 'struct sock'

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#83: FILE: include/linux/gfp.h:58:
+			__GFP_NOMEMALLOC|__GFP_HARDWALL|__GFP_MEMALLOC)
 			                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#83: FILE: include/linux/gfp.h:58:
+			__GFP_NOMEMALLOC|__GFP_HARDWALL|__GFP_MEMALLOC)
 			                               ^

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#147: FILE: include/linux/netdevice.h:421:
+	spinlock_t		memalloc_lock;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#207: FILE: include/net/sock.h:422:
+extern int sk_set_memalloc(struct sock *sk);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#231: FILE: mm/page_alloc.c:975:
+	if ((((p->flags & PF_MEMALLOC) || unlikely(test_thread_flag(TIF_MEMDIE)))
+			&& !in_interrupt()) || (gfp_mask & __GFP_MEMALLOC)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#240: FILE: mm/page_alloc.c:2200:
+	unsigned pages_min = (min_free_kbytes + var_free_kbytes)

WARNING:LINE_SPACING: Missing a blank line after declarations
#252: FILE: mm/page_alloc.c:2256:
+	int kbytes = var_free_kbytes + (pages << (PAGE_SHIFT - 10));
+	if (kbytes < 0)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#259: FILE: mm/page_alloc.c:2263:
+		pg_data_t *pgdat;
+		for_each_online_pgdat(pgdat) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#264: FILE: mm/page_alloc.c:2268:
+	printk(KERN_DEBUG "RX reserve: %d\n", var_free_kbytes);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#268: FILE: mm/page_alloc.c:2272:
+EXPORT_SYMBOL_GPL(adjust_memalloc_reserve);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#302: FILE: net/core/skbuff.c:157:
+		/*
+		 * We have to do higher order allocations for icky jumbo

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#317: FILE: net/core/skbuff.c:172:
+		/*
+		 * force fclone alloc in order to fudge a lacking in skb_clone().

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#328: FILE: net/core/skbuff.c:183:
+		if (!(page = alloc_pages(gfp_mask & ~__GFP_HIGHMEM, order)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#382: FILE: net/core/skbuff.c:314:
+static struct sk_buff *___netdev_alloc_skb(struct net_device *dev,
 		unsigned int length, gfp_t gfp_mask)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#390: FILE: net/core/skbuff.c:325:
+struct sk_buff *__netdev_alloc_skb(struct net_device *dev,
+		unsigned length, gfp_t gfp_mask)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#390: FILE: net/core/skbuff.c:325:
+		unsigned length, gfp_t gfp_mask)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#398: FILE: net/core/skbuff.c:333:
+		if ((skb = ___netdev_alloc_skb(dev, length,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#403: FILE: net/core/skbuff.c:338:
+		if (!(skb = ___netdev_alloc_skb(dev, length,

CHECK:BRACES: Unbalanced braces around else statement
#407: FILE: net/core/skbuff.c:342:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#408: FILE: net/core/skbuff.c:343:
+		if (!(skb = ___netdev_alloc_skb(dev, length, gfp_mask)))

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#445: FILE: net/core/skbuff.c:412:
+	void (*free_skb)(struct kmem_cache *, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#445: FILE: net/core/skbuff.c:412:
+	void (*free_skb)(struct kmem_cache *, void *);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#497: FILE: net/core/skbuff.c:531:
+		/*
+		 * should we special-case skb->memalloc cloning?

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#512: FILE: net/core/skbuff.c:787:
+	BUG_ON(skb->memalloc);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#626: FILE: net/ipv4/af_inet.c:137:
+	if (dev && (dev->flags & IFF_MEMALLOC) &&
+			sk_is_memalloc(sk) &&

WARNING:LINE_SPACING: Missing a blank line after declarations
#662: FILE: net/core/sock.c:205:
+	unsigned int order = ceiling_log2(pages);
+	pages = 1 << order;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#663: FILE: net/core/sock.c:206:
+	if (pages > 1) ++pages;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:BRACES: braces {} should be used on all arms of this statement
#682: FILE: net/core/sock.c:225:
+	if (atomic_read(&dev->memalloc_socks) == 0) {
[...]
+	} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#690: FILE: net/core/sock.c:233:
+				printk(KERN_WARNING

CHECK:BRACES: Unbalanced braces around else statement
#700: FILE: net/core/sock.c:243:
+	} else

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000050072.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 15 warnings, 11 checks, 548 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000050072.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
