ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#24: 
--- a/fs/gfs2/ops_dentry.c	1969-12-31 17:00:00.000000000 -0700

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#27: FILE: fs/gfs2/ops_dentry.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#52: FILE: fs/gfs2/ops_dentry.c:26:
+ * @nd:
     ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#60: FILE: fs/gfs2/ops_dentry.c:34:
+static int gfs2_drevalidate(struct dentry *dentry, struct nameidata *nd)
                                                                      ^^

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#140: FILE: fs/gfs2/ops_dentry.c:114:
+struct dentry_operations gfs2_dops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#147: FILE: fs/gfs2/ops_dentry.h:1:
+/*

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#159: FILE: fs/gfs2/ops_dentry.h:13:
+extern struct dentry_operations gfs2_dops;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#165: FILE: fs/gfs2/ops_export.c:1:
+/*

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#278: FILE: fs/gfs2/ops_export.c:114:
+			    uint64_t offset, struct gfs2_inum *inum,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#300: FILE: fs/gfs2/ops_export.c:136:
+	uint64_t offset = 0;

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#355: FILE: fs/gfs2/ops_export.c:191:
+		iput(inode);
 		^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#381: FILE: fs/gfs2/ops_export.c:217:
+			iput(inode);
 			^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#450: FILE: fs/gfs2/ops_export.c:286:
+		iput(inode);
 		^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#478: FILE: fs/gfs2/ops_export.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#496: FILE: fs/gfs2/ops_file.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#517: FILE: fs/gfs2/ops_file.c:22:
+#include <asm/uaccess.h>

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#540: FILE: fs/gfs2/ops_file.c:45:
+	uint64_t fbe_offset;

CHECK:BRACES: braces {} should be used on all arms of this statement
#591: FILE: fs/gfs2/ops_file.c:96:
+	if (origin == 2) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#598: FILE: fs/gfs2/ops_file.c:103:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#647: FILE: fs/gfs2/ops_file.c:152:
+			struct inode *inode = vma->vm_file->f_dentry->d_inode;
+			if (inode->i_sb == sb)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#785: FILE: fs/gfs2/ops_file.c:290:
+	if (gfs2_is_stuffed(ip)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#792: FILE: fs/gfs2/ops_file.c:297:
+	} else

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXGRP' are not preferred. Consider using octal permissions '0010'.
#954: FILE: fs/gfs2/ops_file.c:459:
+		ip->i_di.di_mode &= (ip->i_di.di_mode & S_IXGRP) ?

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#980: FILE: fs/gfs2/ops_file.c:485:
+	ip->i_di.di_mtime = ip->i_di.di_ctime = get_seconds();

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: Unbalanced braces around else statement
#1081: FILE: fs/gfs2/ops_file.c:586:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1083: FILE: fs/gfs2/ops_file.c:588:
+		error = gfs2_write_alloc_required(ip, *offset, size,
+						 &alloc_required);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1199: FILE: fs/gfs2/ops_file.c:704:
+		error = gfs2_trans_begin(sdp,
+					((journaled) ? data_blocks : 0) +

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXGRP' are not preferred. Consider using octal permissions '0010'.
#1211: FILE: fs/gfs2/ops_file.c:716:
+		ip->i_di.di_mode &= (ip->i_di.di_mode & S_IXGRP) ?

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1222: FILE: fs/gfs2/ops_file.c:727:
+	     *offset + size <= sdp->sd_sb.sb_bsize - sizeof(struct gfs2_dinode))) {
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1246: FILE: fs/gfs2/ops_file.c:751:
+		ip->i_di.di_mtime = ip->i_di.di_ctime = get_seconds();

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1408: FILE: fs/gfs2/ops_file.c:913:
+			    uint64_t offset, struct gfs2_inum *inum,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1422: FILE: fs/gfs2/ops_file.c:927:
+		gfs2_glock_prefetch_num(sdp,
+				       inum->no_addr, &gfs2_inode_glops,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1425: FILE: fs/gfs2/ops_file.c:930:
+		gfs2_glock_prefetch_num(sdp,
+				       inum->no_addr, &gfs2_iopen_glops,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1446: FILE: fs/gfs2/ops_file.c:951:
+	uint64_t offset = file->f_pos;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1485: FILE: fs/gfs2/ops_file.c:990:
+			    uint64_t offset, struct gfs2_inum *inum,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1509: FILE: fs/gfs2/ops_file.c:1014:
+		gfs2_glock_prefetch_num(sdp,
+				       inum->no_addr, &gfs2_inode_glops,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1512: FILE: fs/gfs2/ops_file.c:1017:
+		gfs2_glock_prefetch_num(sdp,
+				       inum->no_addr, &gfs2_iopen_glops,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1538: FILE: fs/gfs2/ops_file.c:1043:
+	uint64_t offset = file->f_pos;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1639: FILE: fs/gfs2/ops_file.c:1144:
+		unsigned int x = GFS2_MAGIC;
+		if (copy_to_user((unsigned int *)arg, &x, sizeof(unsigned int)))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1682: FILE: fs/gfs2/ops_file.c:1187:
+		/* This is VM_MAYWRITE instead of VM_WRITE because a call
+		   to mprotect() can turn on VM_WRITE later. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1682: FILE: fs/gfs2/ops_file.c:1187:
+		   to mprotect() can turn on VM_WRITE later. */

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*fp)...) over kzalloc(sizeof(struct gfs2_file)...)
#1713: FILE: fs/gfs2/ops_file.c:1218:
+	fp = kzalloc(sizeof(struct gfs2_file), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1822: FILE: fs/gfs2/ops_file.c:1327:
+	struct lm_lockname name =
+		{ .ln_number = ip->i_num.no_addr,

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXGRP' are not preferred. Consider using octal permissions '0010'.
#1829: FILE: fs/gfs2/ops_file.c:1334:
+	if ((ip->i_di.di_mode & (S_ISGID | S_IXGRP)) == S_ISGID)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1835: FILE: fs/gfs2/ops_file.c:1340:
+			struct file_lock *tmp;
+			lock_kernel();

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1842: FILE: fs/gfs2/ops_file.c:1347:
+			return 0;
+		} else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1844: FILE: fs/gfs2/ops_file.c:1349:
+			int error;
+			lock_kernel();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1921: FILE: fs/gfs2/ops_file.c:1426:
+^I^I^I^I     &(struct file_lock){.fl_type = F_UNLCK});^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1925: FILE: fs/gfs2/ops_file.c:1430:
+		error = gfs2_glock_get(ip->i_sbd,
+				      ip->i_num.no_addr, &gfs2_flock_glops,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXGRP' are not preferred. Consider using octal permissions '0010'.
#1980: FILE: fs/gfs2/ops_file.c:1485:
+	if ((ip->i_di.di_mode & (S_ISGID | S_IXGRP)) == S_ISGID)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1986: FILE: fs/gfs2/ops_file.c:1491:
+	if (fl->fl_type == F_UNLCK) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1989: FILE: fs/gfs2/ops_file.c:1494:
+	} else

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1993: FILE: fs/gfs2/ops_file.c:1498:
+struct file_operations gfs2_file_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2007: FILE: fs/gfs2/ops_file.c:1512:
+struct file_operations gfs2_dir_fops = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2020: FILE: fs/gfs2/ops_file.h:1:
+/*

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2032: FILE: fs/gfs2/ops_file.h:13:
+extern struct file_operations gfs2_file_fops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2033: FILE: fs/gfs2/ops_file.h:14:
+extern struct file_operations gfs2_dir_fops;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2039: FILE: fs/gfs2/ops_fstype.c:1:
+/*

CHECK:ALLOC_SIZEOF_STRUCT: Prefer vmalloc(sizeof(*sdp)...) over vmalloc(sizeof(struct gfs2_sbd)...)
#2082: FILE: fs/gfs2/ops_fstype.c:44:
+	sdp = vmalloc(sizeof(struct gfs2_sbd));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2165: FILE: fs/gfs2/ops_fstype.c:127:
+	/* Set up the buffer cache and fill in some fake block size values
+	   to allow us to read-in the on-disk superblock. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2165: FILE: fs/gfs2/ops_fstype.c:127:
+	   to allow us to read-in the on-disk superblock. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#2185: FILE: fs/gfs2/ops_fstype.c:147:
+		struct buffer_head *bh;
+		bh = sb_getblk(sdp->sd_vfs,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sb)...) over kmalloc(sizeof(struct gfs2_sb)...)
#2199: FILE: fs/gfs2/ops_fstype.c:161:
+		sb = kmalloc(sizeof(struct gfs2_sb), GFP_KERNEL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2204: FILE: fs/gfs2/ops_fstype.c:166:
+^I^Igfs2_sb_in(sb, bh->b_data); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2325: FILE: fs/gfs2/ops_fstype.c:287:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2327: FILE: fs/gfs2/ops_fstype.c:289:
+	error = gfs2_glock_nq_num(sdp,
+				 GFS2_SB_LOCK, &gfs2_meta_glops,

WARNING:SPLIT_STRING: quoted string split across lines
#2344: FILE: fs/gfs2/ops_fstype.c:306:
+		fs_err(sdp, "FS block size (%u) is too small for device "
+		       "block size (%u)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#2350: FILE: fs/gfs2/ops_fstype.c:312:
+		fs_err(sdp, "FS block size (%u) is too big for machine "
+		       "page size (%u)\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2402: FILE: fs/gfs2/ops_fstype.c:364:
+^I^Igoto fail_jindex;^I^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#2450: FILE: fs/gfs2/ops_fstype.c:412:
+		unsigned int x;
+		for (x = 0; x < sdp->sd_journals; x++) {

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#2571: FILE: fs/gfs2/ops_fstype.c:533:
+		iput(inode);
 		^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2763: FILE: fs/gfs2/ops_fstype.c:725:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2784: FILE: fs/gfs2/ops_fstype.c:746:
+		printk("GFS2: can't alloc struct gfs2_sbd\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2790: FILE: fs/gfs2/ops_fstype.c:752:
+		printk("GFS2: can't parse mount arguments\n");

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#2872: FILE: fs/gfs2/ops_fstype.c:834:
+		yield();

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2902: FILE: fs/gfs2/ops_fstype.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2920: FILE: fs/gfs2/ops_inode.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#2940: FILE: fs/gfs2/ops_inode.c:21:
+#include <asm/uaccess.h>

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2969: FILE: fs/gfs2/ops_inode.c:50:
+		       int mode, struct nameidata *nd)
 		                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3027: FILE: fs/gfs2/ops_inode.c:108:
+ * @nd: passed from Linux VFS, ignored by us
     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3035: FILE: fs/gfs2/ops_inode.c:116:
+				  struct nameidata *nd)
 				                    ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#3048: FILE: fs/gfs2/ops_inode.c:129:
+	if (!error) {
[...]
+	} else if (error != -ENOENT)
[...]

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#3170: FILE: fs/gfs2/ops_inode.c:251:
+	error = gfs2_change_nlink(ip, +1);
 	                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3244: FILE: fs/gfs2/ops_inode.c:325:
+	error = gfs2_unlinki(dip, &dentry->d_name, ip,ul);
 	                                             ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#3289: FILE: fs/gfs2/ops_inode.c:370:
+	error = gfs2_createi(ghs, &dentry->d_name, S_IFLNK | S_IRWXUGO);

CHECK:SPACING: No space is necessary after a cast
#3376: FILE: fs/gfs2/ops_inode.c:457:
+		memcpy((char *) (dent + 1), ".", 1);

CHECK:SPACING: No space is necessary after a cast
#3381: FILE: fs/gfs2/ops_inode.c:462:
+		gfs2_inum_out(&dip->i_num, (char *) &dent->de_inum);

CHECK:SPACING: No space is necessary after a cast
#3385: FILE: fs/gfs2/ops_inode.c:466:
+		memcpy((char *) (dent + 1), "..", 2);

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#3392: FILE: fs/gfs2/ops_inode.c:473:
+	error = gfs2_change_nlink(dip, +1);
 	                               ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3500: FILE: fs/gfs2/ops_inode.c:581:
+	uint32_t major = 0, minor = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3515: FILE: fs/gfs2/ops_inode.c:596:
+^I^Ireturn -EOPNOTSUPP;^I^I$

WARNING:TYPO_SPELLING: 'dirctory' may be misspelled - perhaps 'directory'?
#3596: FILE: fs/gfs2/ops_inode.c:677:
+	/* Make sure we aren't trying to move a dirctory into it's subdir */
 	                                        ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#3742: FILE: fs/gfs2/ops_inode.c:823:
+		struct qstr name;
+		name.len = 2;

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#3745: FILE: fs/gfs2/ops_inode.c:826:
+		error = gfs2_change_nlink(ndip, +1);
 		                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#3757: FILE: fs/gfs2/ops_inode.c:838:
+		struct buffer_head *dibh;
+		error = gfs2_meta_inode_buffer(ip, &dibh);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3847: FILE: fs/gfs2/ops_inode.c:928:
+ * @nd: Data that we pass to vfs_follow_link()
     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3855: FILE: fs/gfs2/ops_inode.c:936:
+static void *gfs2_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3866: FILE: fs/gfs2/ops_inode.c:947:
+		error = vfs_follow_link(nd, buf);
 		                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3878: FILE: fs/gfs2/ops_inode.c:959:
+ * @nd: passed from Linux VFS, ignored by us
     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3883: FILE: fs/gfs2/ops_inode.c:964:
+static int gfs2_permission(struct inode *inode, int mask, struct nameidata *nd)
                                                                             ^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3928: FILE: fs/gfs2/ops_inode.c:1009:
+	uint32_t ouid, ogid, nuid, ngid;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3937: FILE: fs/gfs2/ops_inode.c:1018:
+		ouid = nuid = NO_QUOTA_CHANGE;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3939: FILE: fs/gfs2/ops_inode.c:1020:
+		ogid = ngid = NO_QUOTA_CHANGE;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3971: FILE: fs/gfs2/ops_inode.c:1052:
+		gfs2_quota_change(ip, -ip->i_di.di_blocks,
+				 ouid, ogid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3973: FILE: fs/gfs2/ops_inode.c:1054:
+		gfs2_quota_change(ip, ip->i_di.di_blocks,
+				 nuid, ngid);

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#4134: FILE: fs/gfs2/ops_inode.c:1215:
+struct inode_operations gfs2_file_iops = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#4144: FILE: fs/gfs2/ops_inode.c:1225:
+struct inode_operations gfs2_dev_iops = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#4154: FILE: fs/gfs2/ops_inode.c:1235:
+struct inode_operations gfs2_dir_iops = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#4173: FILE: fs/gfs2/ops_inode.c:1254:
+struct inode_operations gfs2_symlink_iops = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4188: FILE: fs/gfs2/ops_inode.h:1:
+/*

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#4200: FILE: fs/gfs2/ops_inode.h:13:
+extern struct inode_operations gfs2_file_iops;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#4201: FILE: fs/gfs2/ops_inode.h:14:
+extern struct inode_operations gfs2_dir_iops;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#4202: FILE: fs/gfs2/ops_inode.h:15:
+extern struct inode_operations gfs2_symlink_iops;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#4203: FILE: fs/gfs2/ops_inode.h:16:
+extern struct inode_operations gfs2_dev_iops;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000144367.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 65 warnings, 41 checks, 4152 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000144367.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
