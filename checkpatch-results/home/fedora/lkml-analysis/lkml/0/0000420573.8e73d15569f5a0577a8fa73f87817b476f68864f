WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
diff -ur linux.orig/arch/i386/kernel/i386_ksyms.c linux/arch/i386/kernel/i386_ksyms.c

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#52: FILE: arch/i386/kernel/i386_ksyms.c:93:
+EXPORT_SYMBOL(request_nmi);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#53: FILE: arch/i386/kernel/i386_ksyms.c:94:
+EXPORT_SYMBOL(release_nmi);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#65: FILE: arch/i386/kernel/irq.c:134:
+extern void nmi_append_user_names(struct seq_file *p);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#74: FILE: arch/i386/kernel/irq.c:171:
+	seq_printf(p, "                ");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#94: FILE: arch/i386/kernel/nmi.c:106:
+static int nmi_watchdog_tick (void * dev_id, struct pt_regs * regs);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#94: FILE: arch/i386/kernel/nmi.c:106:
+static int nmi_watchdog_tick (void * dev_id, struct pt_regs * regs);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#94: FILE: arch/i386/kernel/nmi.c:106:
+static int nmi_watchdog_tick (void * dev_id, struct pt_regs * regs);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#97: FILE: arch/i386/kernel/nmi.c:109:
+static struct nmi_handler nmi_watchdog_handler =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#126: FILE: arch/i386/kernel/nmi.c:371:
+static int nmi_watchdog_tick (void * dev_id, struct pt_regs * regs)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#126: FILE: arch/i386/kernel/nmi.c:371:
+static int nmi_watchdog_tick (void * dev_id, struct pt_regs * regs)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#126: FILE: arch/i386/kernel/nmi.c:371:
+static int nmi_watchdog_tick (void * dev_id, struct pt_regs * regs)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#155: FILE: arch/i386/kernel/traps.c:492:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'somes' may be misspelled - perhaps 'some'?
#157: FILE: arch/i386/kernel/traps.c:494:
+ * when an NMI from an otherwise unidentifiable source somes in.  If
                                                        ^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#167: FILE: arch/i386/kernel/traps.c:504:
+static struct nmi_handler *nmi_handler_list = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#169: FILE: arch/i386/kernel/traps.c:506:
+static struct nmi_handler *nmi_to_free_list = NULL;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#194: FILE: arch/i386/kernel/traps.c:531:
+}
+static inline void free_nmi_handler(struct nmi_handler *item)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#203: FILE: arch/i386/kernel/traps.c:540:
+           once.  If there are items in the list, then it has already$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#203: FILE: arch/i386/kernel/traps.c:540:
+	/* We only have one copy of nmi_rcu, so we only want to add it
+           once.  If there are items in the list, then it has already

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#204: FILE: arch/i386/kernel/traps.c:541:
+           been added. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#204: FILE: arch/i386/kernel/traps.c:541:
+           been added. */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nmi_to_free_list"
#205: FILE: arch/i386/kernel/traps.c:542:
+	if (nmi_to_free_list == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#212: FILE: arch/i386/kernel/traps.c:549:
+static inline struct nmi_handler *find_nmi_handler(

WARNING:BRACES: braces {} are not necessary for single statement blocks
#221: FILE: arch/i386/kernel/traps.c:558:
+		if (curr == handler) {
+			break;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:USE_NEGATIVE_ERRNO: return of an errno should typically be negative (ie: return -EBUSY)
#242: FILE: arch/i386/kernel/traps.c:579:
+		return EBUSY;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!curr'
#246: FILE: arch/i386/kernel/traps.c:583:
+	if ((!curr) || (curr->priority < handler->priority)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'curr->priority < handler->priority'
#246: FILE: arch/i386/kernel/traps.c:583:
+	if ((!curr) || (curr->priority < handler->priority)) {

WARNING:MEMORY_BARRIER: memory barrier without comment
#248: FILE: arch/i386/kernel/traps.c:585:
+		smp_mb();

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#251: FILE: arch/i386/kernel/traps.c:588:
+		while (curr->next &&
+		       (curr->next->priority > handler->priority))
+		{

WARNING:MEMORY_BARRIER: memory barrier without comment
#257: FILE: arch/i386/kernel/traps.c:594:
+		smp_mb();

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around curr->next
#258: FILE: arch/i386/kernel/traps.c:595:
+		xchg(&(curr->next), handler);

ERROR:CODE_INDENT: code indent should use tabs where possible
#276: FILE: arch/i386/kernel/traps.c:613:
+                   assume the write operation here is atomic. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#276: FILE: arch/i386/kernel/traps.c:613:
+		/* If it was found, remove it from the list.  We
+                   assume the write operation here is atomic. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#276: FILE: arch/i386/kernel/traps.c:613:
+                   assume the write operation here is atomic. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around prev->next
#279: FILE: arch/i386/kernel/traps.c:616:
+			xchg(&(prev->next), curr->next);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#288: FILE: arch/i386/kernel/traps.c:625:
+static int call_nmi_handlers(struct pt_regs * regs)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#368: FILE: include/asm-i386/irq.h:31:
 
+

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#386: FILE: include/asm-i386/irq.h:49:
+struct nmi_handler
+{

ERROR:CODE_INDENT: code indent should use tabs where possible
#393: FILE: include/asm-i386/irq.h:56:
+           is no longer in use. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#393: FILE: include/asm-i386/irq.h:56:
+	/* If "freed" is not NULL, this will be called when the item
+           is no longer in use. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#393: FILE: include/asm-i386/irq.h:56:
+           is no longer in use. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#400: FILE: include/asm-i386/irq.h:63:
+	/* This is for linking into the list of things release in the
+	   rcu callback.  We can't use next because we can't touch it

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#401: FILE: include/asm-i386/irq.h:64:
+	   until the rcu callback runs. */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#404: FILE: include/asm-i386/irq.h:67:
+};
+int request_nmi(struct nmi_handler *handler);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000420573.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 20 warnings, 9 checks, 333 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000420573.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
