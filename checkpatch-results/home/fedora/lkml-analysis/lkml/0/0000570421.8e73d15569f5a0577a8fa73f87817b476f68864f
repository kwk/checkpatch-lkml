ERROR:SPACING: space required before the open parenthesis '('
#125: FILE: fs/binfmt_elf.c:1070:
+	for(vma = current->mm->mmap_neighbours; vma != NULL; vma = vma->vm_next) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "vma"
#125: FILE: fs/binfmt_elf.c:1070:
+	for(vma = current->mm->mmap_neighbours; vma != NULL; vma = vma->vm_next) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required before the open parenthesis '('
#134: FILE: fs/binfmt_elf.c:1259:
+	for(vma = current->mm->mmap_neighbours, i = 0;

ERROR:SPACING: space required before the open parenthesis '('
#143: FILE: fs/binfmt_elf.c:1291:
+	for(i = 0, vma = current->mm->mmap_neighbours;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#155: FILE: fs/proc/array.c:705:
+		struct vm_area_struct * vma;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#182: FILE: fs/proc/array.c:982:
+		struct vm_area_struct * vma = tsk->mm->mmap_neighbours;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#252: FILE: include/asm-i386/processor.h:249:
+  NULL, NULL,^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#253: FILE: include/asm-i386/processor.h:250:
+  0, VM_READ | VM_WRITE | VM_EXEC, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: include/asm-i386/processor.h:251:
+  &init_mm, NULL,^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: include/asm-i386/processor.h:252:
+  PAGE_SHARED, NULL,^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#256: FILE: include/asm-i386/processor.h:253:
+  &init_mm.mmap_hash[0], &init_mm.mmap_neighbours, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#257: FILE: include/asm-i386/processor.h:254:
+  NULL, NULL,^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: include/asm-i386/processor.h:255:
+  0}$

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#284: FILE: include/linux/mm.h:43:
+/*0x38*/struct vm_operations_struct	*vm_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#313: FILE: include/linux/mm.h:357:
+extern struct vm_area_struct *__find_vma(struct mm_struct *mm,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#314: FILE: include/linux/mm.h:358:
+extern struct vm_area_struct *__find_vma(struct mm_struct *mm,
+		unsigned long addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#318: FILE: include/linux/mm.h:362:
+extern inline struct vm_area_struct *find_vma(struct mm_struct *mm,
+		unsigned long addr)

ERROR:SPACING: space required before the open parenthesis '('
#324: FILE: include/linux/mm.h:365:
+	if(mm) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_end <= addr'
#333: FILE: include/linux/mm.h:368:
+		if(vma == NULL			||
+		   (vma->vm_end <= addr)	||
+		   (mm->mmap_cache_start > addr))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mm->mmap_cache_start > addr'
#333: FILE: include/linux/mm.h:368:
+		if(vma == NULL			||
+		   (vma->vm_end <= addr)	||
+		   (mm->mmap_cache_start > addr))

ERROR:SPACING: space required before the open parenthesis '('
#333: FILE: include/linux/mm.h:368:
+		if(vma == NULL			||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma"
#333: FILE: include/linux/mm.h:368:
+		if(vma == NULL			||

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#434: FILE: kernel/fork.c:322:
+		mm->mmap_neighbours = mm->mmap_cache = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#458: FILE: mm/mmap.c:75:
+#define vmahash(__addr_key)	(((__addr_key)>>13) & (MM_MMAP_HASHSZ - 1))
                            	              ^

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#460: FILE: mm/mmap.c:77:
+#define __VMA_HASH_LOOKUP					\
+	do {	vma = mm->mmap_hash[hash];			\
+		if((vma != NULL) && (vma->vm_start < addr))	\
+			goto start_search;			\
+		hash = ((hash - 1) & (MM_MMAP_HASHSZ - 1));	\
+	} while(hash != starthash)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma != NULL'
#462: FILE: mm/mmap.c:79:
+		if((vma != NULL) && (vma->vm_start < addr))	\

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_start < addr'
#462: FILE: mm/mmap.c:79:
+		if((vma != NULL) && (vma->vm_start < addr))	\

ERROR:SPACING: space required before the open parenthesis '('
#462: FILE: mm/mmap.c:79:
+		if((vma != NULL) && (vma->vm_start < addr))	\

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "vma"
#462: FILE: mm/mmap.c:79:
+		if((vma != NULL) && (vma->vm_start < addr))	\

ERROR:SPACING: space required before the open parenthesis '('
#465: FILE: mm/mmap.c:82:
+	} while(hash != starthash)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tmp"
#471: FILE: mm/mmap.c:88:
+		if (tmp != NULL && tmp->vm_start < addr) {	\

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tmp"
#476: FILE: mm/mmap.c:93:
+		if (tmp != NULL && tmp->vm_start < addr) {	\

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tmp"
#489: FILE: mm/mmap.c:106:
+		if (tmp != NULL && tmp->vm_end <= addr) {	\

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tmp"
#494: FILE: mm/mmap.c:111:
+		if (tmp != NULL && tmp->vm_start < addr) {	\

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#526: FILE: mm/mmap.c:143:
+static struct vm_area_struct *find_vma_prev(struct mm_struct *mm,
+		unsigned long addr, struct vm_area_struct **pprev)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "vma"
#566: FILE: mm/mmap.c:183:
+	if (vma != NULL)

ERROR:SPACING: space required before the open parenthesis '('
#577: FILE: mm/mmap.c:194:
+	for( ; *vpp && (*vpp)->vm_start < start; vpp = &(*vpp)->vm_hash_next)

ERROR:SPACING: space required before the open parenthesis '('
#579: FILE: mm/mmap.c:196:
+	if((vma->vm_hash_next = *vpp) != NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#579: FILE: mm/mmap.c:196:
+	if((vma->vm_hash_next = *vpp) != NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#595: FILE: mm/mmap.c:212:
+	struct vm_area_struct *h_next = vma->vm_hash_next;
+	if(n_next) n_next->vm_pprev = vma->vm_pprev;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#595: FILE: mm/mmap.c:212:
+	if(n_next) n_next->vm_pprev = vma->vm_pprev;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#595: FILE: mm/mmap.c:212:
+	if(n_next) n_next->vm_pprev = vma->vm_pprev;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required before the open parenthesis '('
#596: FILE: mm/mmap.c:213:
+	if(h_next) h_next->vm_hash_pprev = vma->vm_hash_pprev;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#596: FILE: mm/mmap.c:213:
+	if(h_next) h_next->vm_hash_pprev = vma->vm_hash_pprev;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#635: FILE: mm/mmap.c:687:
+	mm->mmap_neighbours = mm->mmap_cache = NULL;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000570421.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 10 warnings, 19 checks, 547 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000570421.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
