WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#62: FILE: drivers/md/dm-ioctl.c:18:
+#include <asm/uaccess.h>

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#69: FILE: drivers/md/dm-ioctl.c:25:
+ *---------------------------------------------------------------*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#85: FILE: drivers/md/dm-ioctl.c:41:
+void dm_hash_remove_all(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#118: FILE: drivers/md/dm-ioctl.c:74:
+ *---------------------------------------------------------------*/

CHECK:SPACING: No space is necessary after a cast
#125: FILE: drivers/md/dm-ioctl.c:81:
+		h = (h + (unsigned int) *str++) * hash_mult;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#132: FILE: drivers/md/dm-ioctl.c:88:
+ *---------------------------------------------------------------*/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#139: FILE: drivers/md/dm-ioctl.c:95:
+	list_for_each (tmp, _name_buckets + h) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#154: FILE: drivers/md/dm-ioctl.c:110:
+	list_for_each (tmp, _uuid_buckets + h) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#165: FILE: drivers/md/dm-ioctl.c:121:
+ *---------------------------------------------------------------*/

WARNING:LINE_SPACING: Missing a blank line after declarations
#169: FILE: drivers/md/dm-ioctl.c:125:
+	char *r = kmalloc(strlen(str) + 1, GFP_KERNEL);
+	if (r)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#189: FILE: drivers/md/dm-ioctl.c:145:
+	if (!uuid)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#192: FILE: drivers/md/dm-ioctl.c:148:
+	else {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR | S_IRGRP' are not preferred. Consider using octal permissions '0640'.
#225: FILE: drivers/md/dm-ioctl.c:181:
+		      S_IFBLK | S_IRUSR | S_IWUSR | S_IRGRP,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#232: FILE: drivers/md/dm-ioctl.c:188:
+	devfs_remove(DM_DIR"/%s", hc->name);

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#299: FILE: drivers/md/dm-ioctl.c:255:
+		list_for_each_safe (tmp, n, _name_buckets + i) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#365: FILE: drivers/md/dm-ioctl.c:321:
+ *---------------------------------------------------------------*/

CHECK:SPACING: No space is necessary after a cast
#385: FILE: drivers/md/dm-ioctl.c:341:
+	return (void *) (((size_t) (ptr + ALIGN_MASK)) & ~ALIGN_MASK);

CHECK:SPACING: No space is necessary after a cast
#395: FILE: drivers/md/dm-ioctl.c:351:
+	param->data_start = align_ptr(param + 1) - (void *) param;

CHECK:SPACING: No space is necessary after a cast
#402: FILE: drivers/md/dm-ioctl.c:358:
+	return ((void *) param) + param->data_start;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#420: FILE: drivers/md/dm-ioctl.c:376:
+		list_for_each_entry (hc, _name_buckets + i, name_list) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#443: FILE: drivers/md/dm-ioctl.c:399:
+		list_for_each_entry (hc, _name_buckets + i, name_list) {

CHECK:SPACING: No space is necessary after a cast
#445: FILE: drivers/md/dm-ioctl.c:401:
+				old_nl->next = (uint32_t) ((void *) nl -

CHECK:SPACING: No space is necessary after a cast
#446: FILE: drivers/md/dm-ioctl.c:402:
+							   (void *) old_nl);

CHECK:SPACING: No space is necessary after a cast
#453: FILE: drivers/md/dm-ioctl.c:409:
+			nl = align_ptr(((void *) ++nl) + strlen(hc->name) + 1);

CHECK:BRACES: braces {} should be used on all arms of this statement
#508: FILE: drivers/md/dm-ioctl.c:464:
+	if (table) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#512: FILE: drivers/md/dm-ioctl.c:468:
+	} else

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#574: FILE: drivers/md/dm-ioctl.c:530:
+			strncpy(param->uuid, hc->uuid, sizeof(param->uuid)-1);
 			                                                  ^

CHECK:SPACING: No space is necessary after a cast
#615: FILE: drivers/md/dm-ioctl.c:571:
+	while ((void *) str < end)

CHECK:SPACING: No space is necessary after a cast
#625: FILE: drivers/md/dm-ioctl.c:581:
+	char *new_name = (char *) param + param->data_start;

CHECK:SPACING: No space is necessary after a cast
#627: FILE: drivers/md/dm-ioctl.c:583:
+	if (new_name < (char *) (param + 1) ||

CHECK:SPACING: No space is necessary after a cast
#628: FILE: drivers/md/dm-ioctl.c:584:
+	    invalid_str(new_name, (void *) param + param_size)) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#758: FILE: drivers/md/dm-ioctl.c:714:
+	outptr = outbuf = get_result_buffer(param, param_size, &len);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: No space is necessary after a cast
#776: FILE: drivers/md/dm-ioctl.c:732:
+		spec = (struct dm_target_spec *) outptr;

CHECK:BRACES: braces {} should be used on all arms of this statement
#788: FILE: drivers/md/dm-ioctl.c:744:
+		if (ti->type->status) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#793: FILE: drivers/md/dm-ioctl.c:749:
+		} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#831: FILE: drivers/md/dm-ioctl.c:787:
+ ^Iset_current_state(TASK_RUNNING);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#831: FILE: drivers/md/dm-ioctl.c:787:
+ ^Iset_current_state(TASK_RUNNING);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#831: FILE: drivers/md/dm-ioctl.c:787:
+ ^Iset_current_state(TASK_RUNNING);$

CHECK:SPACING: No space is necessary after a cast
#866: FILE: drivers/md/dm-ioctl.c:822:
+	*spec = (struct dm_target_spec *) ((unsigned char *) last + next);

CHECK:SPACING: No space is necessary after a cast
#867: FILE: drivers/md/dm-ioctl.c:823:
+	*target_params = (char *) (*spec + 1);

CHECK:SPACING: No space is necessary after a cast
#880: FILE: drivers/md/dm-ioctl.c:836:
+	struct dm_target_spec *spec = (struct dm_target_spec *) param;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#881: FILE: drivers/md/dm-ioctl.c:837:
+	uint32_t next = param->data_start;

CHECK:SPACING: No space is necessary after a cast
#882: FILE: drivers/md/dm-ioctl.c:838:
+	void *end = (void *) param + param_size;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'populate_table', this function's name, in a string
#886: FILE: drivers/md/dm-ioctl.c:842:
+		DMWARN("populate_table: no targets specified");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#891: FILE: drivers/md/dm-ioctl.c:847:
+	for (i = 0; i < param->target_count; i++) {
+

CHECK:SPACING: No space is necessary after a cast
#899: FILE: drivers/md/dm-ioctl.c:855:
+					(sector_t) spec->sector_start,

CHECK:SPACING: No space is necessary after a cast
#900: FILE: drivers/md/dm-ioctl.c:856:
+					(sector_t) spec->length,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1008: FILE: drivers/md/dm-ioctl.c:964:
+		struct dm_dev *dd = list_entry(tmp, struct dm_dev, list);
+		deps->dev[count++] = huge_encode_dev(dd->bdev->bd_dev);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1071: FILE: drivers/md/dm-ioctl.c:1027:
+ *---------------------------------------------------------------*/

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1104: FILE: drivers/md/dm-ioctl.c:1060:
+	uint32_t version[3];

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'DM_VERSION_MAJOR != version[0]'
#1110: FILE: drivers/md/dm-ioctl.c:1066:
+	if ((DM_VERSION_MAJOR != version[0]) ||
+	    (DM_VERSION_MINOR < version[1])) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'DM_VERSION_MINOR < version[1]'
#1110: FILE: drivers/md/dm-ioctl.c:1066:
+	if ((DM_VERSION_MAJOR != version[0]) ||
+	    (DM_VERSION_MINOR < version[1])) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1110: FILE: drivers/md/dm-ioctl.c:1066:
+	if ((DM_VERSION_MAJOR != version[0]) ||

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1111: FILE: drivers/md/dm-ioctl.c:1067:
+	    (DM_VERSION_MINOR < version[1])) {

WARNING:SPLIT_STRING: quoted string split across lines
#1113: FILE: drivers/md/dm-ioctl.c:1069:
+		DMWARN("ioctl interface mismatch: "
+		       "kernel(%u.%u.%u), user(%u.%u.%u), cmd(%d)",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#1147: FILE: drivers/md/dm-ioctl.c:1103:
+	dmi = (struct dm_ioctl *) vmalloc(tmp.data_size);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1147: FILE: drivers/md/dm-ioctl.c:1103:
+	dmi = (struct dm_ioctl *) vmalloc(tmp.data_size);

CHECK:SPACING: No space is necessary after a cast
#1192: FILE: drivers/md/dm-ioctl.c:1148:
+	struct dm_ioctl *user = (struct dm_ioctl *) u;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1266: FILE: drivers/md/dm-ioctl.c:1222:
+static struct file_operations _ctl_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1272: FILE: drivers/md/dm-ioctl.c:1228:
+^I.minor ^I^I= MISC_DYNAMIC_MINOR,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1273: FILE: drivers/md/dm-ioctl.c:1229:
+^I.name  ^I^I= DM_NAME,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1274: FILE: drivers/md/dm-ioctl.c:1230:
+^I.devfs_name ^I= "mapper/control",$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1275: FILE: drivers/md/dm-ioctl.c:1231:
+^I.fops  ^I^I= &_ctl_fops$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1418: FILE: include/linux/dm-ioctl.h:102:
+	uint32_t version[3];	/* in/out */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1419: FILE: include/linux/dm-ioctl.h:103:
+	uint32_t data_size;	/* total size of data passed in

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1420: FILE: include/linux/dm-ioctl.h:104:
+				 * including this struct */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1422: FILE: include/linux/dm-ioctl.h:106:
+	uint32_t data_start;	/* offset to start of data

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1423: FILE: include/linux/dm-ioctl.h:107:
+				 * relative to start of this struct */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1425: FILE: include/linux/dm-ioctl.h:109:
+	uint32_t target_count;	/* in/out */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#1426: FILE: include/linux/dm-ioctl.h:110:
+	int32_t open_count;	/* out */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1427: FILE: include/linux/dm-ioctl.h:111:
+	uint32_t flags;		/* in/out */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1428: FILE: include/linux/dm-ioctl.h:112:
+^Iuint32_t event_nr;      ^I/* in/out */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1428: FILE: include/linux/dm-ioctl.h:112:
+	uint32_t event_nr;      	/* in/out */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1429: FILE: include/linux/dm-ioctl.h:113:
+	uint32_t padding;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1431: FILE: include/linux/dm-ioctl.h:115:
+	uint64_t dev;		/* in/out */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1435: FILE: include/linux/dm-ioctl.h:119:
+				 * the block device */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1443: FILE: include/linux/dm-ioctl.h:127:
+	uint64_t sector_start;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1444: FILE: include/linux/dm-ioctl.h:128:
+	uint64_t length;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#1445: FILE: include/linux/dm-ioctl.h:129:
+	int32_t status;		/* used when reading from kernel only */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1451: FILE: include/linux/dm-ioctl.h:135:
+	uint32_t next;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1466: FILE: include/linux/dm-ioctl.h:150:
+	uint32_t count;	/* Array size */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1467: FILE: include/linux/dm-ioctl.h:151:
+	uint32_t padding;	/* unused */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1468: FILE: include/linux/dm-ioctl.h:152:
+	uint64_t dev[0];	/* out */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1475: FILE: include/linux/dm-ioctl.h:159:
+	uint64_t dev;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1476: FILE: include/linux/dm-ioctl.h:160:
+	uint32_t next;		/* offset to the next record from

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1477: FILE: include/linux/dm-ioctl.h:161:
+	uint32_t next;		/* offset to the next record from
+				   the _start_ of this */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1477: FILE: include/linux/dm-ioctl.h:161:
+				   the _start_ of this */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1530: FILE: include/linux/dm-ioctl.h:214:
+#define DM_READONLY_FLAG	(1 << 0) /* In/Out */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1531: FILE: include/linux/dm-ioctl.h:215:
+#define DM_SUSPEND_FLAG		(1 << 1) /* In/Out */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1532: FILE: include/linux/dm-ioctl.h:216:
+#define DM_PERSISTENT_DEV_FLAG	(1 << 3) /* In */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1538: FILE: include/linux/dm-ioctl.h:222:
+#define DM_STATUS_TABLE_FLAG	(1 << 4) /* In */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1544: FILE: include/linux/dm-ioctl.h:228:
+#define DM_ACTIVE_PRESENT_FLAG   (1 << 5) /* Out */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1545: FILE: include/linux/dm-ioctl.h:229:
+#define DM_INACTIVE_PRESENT_FLAG (1 << 6) /* Out */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1551: FILE: include/linux/dm-ioctl.h:235:
+#define DM_BUFFER_FULL_FLAG	(1 << 8) /* Out */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000322442.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 34 warnings, 59 checks, 1508 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000322442.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
