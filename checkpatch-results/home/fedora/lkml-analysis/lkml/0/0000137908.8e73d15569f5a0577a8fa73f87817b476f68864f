CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#64: FILE: include/asm-alpha/atomic.h:182:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#64: FILE: include/asm-alpha/atomic.h:182:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#98: FILE: include/asm-arm26/atomic.h:92:
+}
+#define atomic_inc_not_zero(v) atomic_add_unless((v), 1, 0)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#111: FILE: include/asm-frv/atomic.h:419:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#111: FILE: include/asm-frv/atomic.h:419:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

WARNING:INLINE: plain inline is preferred over __inline__
#130: FILE: include/asm-h8300/atomic.h:97:
+static __inline__ int atomic_add_unless(atomic_t *v, int a, int u)

WARNING:LINE_SPACING: Missing a blank line after declarations
#134: FILE: include/asm-h8300/atomic.h:101:
+	unsigned long flags;
+	local_irq_save(flags);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#141: FILE: include/asm-h8300/atomic.h:108:
+}
+#define atomic_inc_not_zero(v) atomic_add_unless((v), 1, 0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#163: FILE: include/asm-i386/atomic.h:229:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#163: FILE: include/asm-i386/atomic.h:229:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#184: FILE: include/asm-ia64/atomic.h:93:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#184: FILE: include/asm-ia64/atomic.h:93:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#205: FILE: include/asm-m68k/atomic.h:144:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#205: FILE: include/asm-m68k/atomic.h:144:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#226: FILE: include/asm-m68knommu/atomic.h:133:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#226: FILE: include/asm-m68knommu/atomic.h:133:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#256: FILE: include/asm-mips/atomic.h:301:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#256: FILE: include/asm-mips/atomic.h:301:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#286: FILE: include/asm-parisc/atomic.h:178:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#286: FILE: include/asm-parisc/atomic.h:178:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#307: FILE: include/asm-s390/atomic.h:203:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#307: FILE: include/asm-s390/atomic.h:203:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

WARNING:INLINE: plain inline is preferred over __inline__
#328: FILE: include/asm-sh/atomic.h:104:
+static __inline__ int atomic_add_unless(atomic_t *v, int a, int u)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#341: FILE: include/asm-sh/atomic.h:117:
+}
+#define atomic_inc_not_zero(v) atomic_add_unless((v), 1, 0)

WARNING:INLINE: plain inline is preferred over __inline__
#354: FILE: include/asm-sh64/atomic.h:116:
+static __inline__ int atomic_add_unless(atomic_t *v, int a, int u)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#367: FILE: include/asm-sh64/atomic.h:129:
+}
+#define atomic_inc_not_zero(v) atomic_add_unless((v), 1, 0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#380: FILE: include/asm-sparc/atomic.h:23:
+extern int atomic_add_unless(atomic_t *, int, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'atomic_t *' should also have an identifier name
#380: FILE: include/asm-sparc/atomic.h:23:
+extern int atomic_add_unless(atomic_t *, int, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#380: FILE: include/asm-sparc/atomic.h:23:
+extern int atomic_add_unless(atomic_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#380: FILE: include/asm-sparc/atomic.h:23:
+extern int atomic_add_unless(atomic_t *, int, int);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#401: FILE: include/asm-sparc64/atomic.h:75:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#401: FILE: include/asm-sparc64/atomic.h:75:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

WARNING:INLINE: plain inline is preferred over __inline__
#422: FILE: include/asm-v850/atomic.h:107:
+static __inline__ int atomic_add_unless(atomic_t *v, int a, int u)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#458: FILE: include/asm-x86_64/atomic.h:374:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#458: FILE: include/asm-x86_64/atomic.h:374:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#488: FILE: include/asm-xtensa/atomic.h:237:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#488: FILE: include/asm-xtensa/atomic.h:237:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

WARNING:INLINE: plain inline is preferred over __inline__
#509: FILE: include/asm-cris/atomic.h:138:
+static __inline__ int atomic_add_unless(atomic_t *v, int a, int u)

WARNING:LINE_SPACING: Missing a blank line after declarations
#513: FILE: include/asm-cris/atomic.h:142:
+	unsigned long flags;
+	cris_atomic_save(v, flags);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#520: FILE: include/asm-cris/atomic.h:149:
+}
+#define atomic_inc_not_zero(v) atomic_add_unless((v), 1, 0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#537: FILE: arch/sparc/lib/atomic32.c:59:
+	unsigned long flags;
+	spin_lock_irqsave(ATOMIC_HASH(v), flags);

WARNING:LINE_SPACING: Missing a blank line after declarations
#593: FILE: include/asm-arm/atomic.h:180:
+	int c, old;
+	c = atomic_read(v);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#598: FILE: include/asm-arm/atomic.h:185:
+}
+#define atomic_inc_not_zero(v) atomic_add_unless((v), 1, 0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#620: FILE: include/asm-powerpc/atomic.h:186:
+#define atomic_add_unless(v, a, u)							 \
+({															 \
+	   int c, old;											 \
+	   c = atomic_read(v);									 \
+	   for (;;) {											  \
+			   if (unlikely(c == (u)))						 \
+					   break;								  \
+			   old = atomic_cmpxchg((v), c, c + (a));		  \
+			   if (likely(old == c))						   \
+					   break;								  \
+			   c = old;										\
+	   }													   \
+	   c != (u);											   \
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#620: FILE: include/asm-powerpc/atomic.h:186:
+#define atomic_add_unless(v, a, u)							 \
+({															 \
+	   int c, old;											 \
+	   c = atomic_read(v);									 \
+	   for (;;) {											  \
+			   if (unlikely(c == (u)))						 \
+					   break;								  \
+			   old = atomic_cmpxchg((v), c, c + (a));		  \
+			   if (likely(old == c))						   \
+					   break;								  \
+			   c = old;										\
+	   }													   \
+	   c != (u);											   \
+})

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#621: FILE: include/asm-powerpc/atomic.h:187:
+({															 \

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#622: FILE: include/asm-powerpc/atomic.h:188:
+	   int c, old;											 \

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#624: FILE: include/asm-powerpc/atomic.h:190:
+	   for (;;) {											  \

WARNING:TABSTOP: Statements should start on a tabstop
#624: FILE: include/asm-powerpc/atomic.h:190:
+	   for (;;) {											  \

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (11, 27)
#624: FILE: include/asm-powerpc/atomic.h:190:
+	   for (;;) {											  \
+			   if (unlikely(c == (u)))						 \

WARNING:TABSTOP: Statements should start on a tabstop
#625: FILE: include/asm-powerpc/atomic.h:191:
+			   if (unlikely(c == (u)))						 \

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (27, 43)
#625: FILE: include/asm-powerpc/atomic.h:191:
+			   if (unlikely(c == (u)))						 \
+					   break;								  \

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#626: FILE: include/asm-powerpc/atomic.h:192:
+					   break;								  \

WARNING:TABSTOP: Statements should start on a tabstop
#626: FILE: include/asm-powerpc/atomic.h:192:
+					   break;								  \

WARNING:TABSTOP: Statements should start on a tabstop
#628: FILE: include/asm-powerpc/atomic.h:194:
+			   if (likely(old == c))						   \

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (27, 43)
#628: FILE: include/asm-powerpc/atomic.h:194:
+			   if (likely(old == c))						   \
+					   break;								  \

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#629: FILE: include/asm-powerpc/atomic.h:195:
+					   break;								  \

WARNING:TABSTOP: Statements should start on a tabstop
#629: FILE: include/asm-powerpc/atomic.h:195:
+					   break;								  \

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#630: FILE: include/asm-powerpc/atomic.h:196:
+			   c = old;										\

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#631: FILE: include/asm-powerpc/atomic.h:197:
+	   }													   \

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#632: FILE: include/asm-powerpc/atomic.h:198:
+	   c != (u);											   \

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000137908.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 28 warnings, 33 checks, 466 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000137908.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
