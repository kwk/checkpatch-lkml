WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
There are also whitespace and trivial code cleanups in the surrounding code.

ERROR:SPACING: space required before the open brace '{'
#122: FILE: arch/um/drivers/line.c:611:
+	else if (n >= 0){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#122: FILE: arch/um/drivers/line.c:611:
+	}
+	else if (n >= 0){

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#124: FILE: arch/um/drivers/line.c:613:
+		if(err)

ERROR:SPACING: space required before the open brace '{'
#132: FILE: arch/um/drivers/line.c:617:
+		for(i = 0; i < num; i++){

ERROR:SPACING: space required before the open parenthesis '('
#132: FILE: arch/um/drivers/line.c:617:
+		for(i = 0; i < num; i++){

ERROR:SPACING: space required before the open parenthesis '('
#135: FILE: arch/um/drivers/line.c:620:
+			if(err)

ERROR:SPACING: space required before the open brace '{'
#207: FILE: arch/um/drivers/line.c:768:
+		if(parse_chan_pair(line->init_str, line, i, opts, &error)){

ERROR:SPACING: space required before the open parenthesis '('
#207: FILE: arch/um/drivers/line.c:768:
+		if(parse_chan_pair(line->init_str, line, i, opts, &error)){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#208: FILE: arch/um/drivers/line.c:769:
+			printk("parse_chan_pair failed for device %d : %s\n",

ERROR:SPACING: space required before the open brace '{'
#229: FILE: arch/um/drivers/mconsole_kern.c:380:
+	if(str[0] != '='){

ERROR:SPACING: space required before the open parenthesis '('
#229: FILE: arch/um/drivers/mconsole_kern.c:380:
+	if(str[0] != '='){

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#241: FILE: arch/um/drivers/mconsole_kern.c:391:
 	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#241: FILE: arch/um/drivers/mconsole_kern.c:391:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open brace '{'
#249: FILE: arch/um/drivers/mconsole_kern.c:398:
+	if(*ret != '\0'){

ERROR:SPACING: space required before the open parenthesis '('
#249: FILE: arch/um/drivers/mconsole_kern.c:398:
+	if(*ret != '\0'){

ERROR:SPACING: space required before the open brace '{'
#263: FILE: arch/um/drivers/mconsole_kern.c:446:
+				if(err){

ERROR:SPACING: space required before the open parenthesis '('
#263: FILE: arch/um/drivers/mconsole_kern.c:446:
+				if(err){

ERROR:SPACING: space required before the open parenthesis '('
#314: FILE: arch/um/drivers/mconsole_kern.c:613:
+		if(err_msg == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!err_msg"
#314: FILE: arch/um/drivers/mconsole_kern.c:613:
+		if(err_msg == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required before the open parenthesis '('
#319: FILE: arch/um/drivers/mconsole_kern.c:617:
+		if(err_msg == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!err_msg"
#319: FILE: arch/um/drivers/mconsole_kern.c:617:
+		if(err_msg == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#341: FILE: arch/um/drivers/net_kern.c:94:
+		printk(KERN_ERR

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#392: FILE: arch/um/drivers/net_kern.c:470:
+	int n, err = -EINVAL;;

ERROR:SPACING: space required before the open brace '{'
#442: FILE: arch/um/drivers/net_kern.c:586:
+	if(err){

ERROR:SPACING: space required before the open parenthesis '('
#442: FILE: arch/um/drivers/net_kern.c:586:
+	if(err){

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#443: FILE: arch/um/drivers/net_kern.c:587:
+		printk(KERN_ERR "eth_setup - Couldn't parse '%s' : %s\n",

ERROR:SPACING: space required before the open parenthesis '('
#469: FILE: arch/um/drivers/net_kern.c:635:
+	if(err)

ERROR:CODE_INDENT: code indent should use tabs where possible
#479: FILE: arch/um/drivers/net_kern.c:643:
+^I        *error_out = "net_config failed to strdup string";$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'net_config', this function's name, in a string
#479: FILE: arch/um/drivers/net_kern.c:643:
+	        *error_out = "net_config failed to strdup string";

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: space required before the open parenthesis '('
#484: FILE: arch/um/drivers/net_kern.c:647:
+	if(err)

ERROR:SPACING: space required before the open parenthesis '('
#531: FILE: arch/um/drivers/net_kern.c:818:
+	if(ip == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ip"
#531: FILE: arch/um/drivers/net_kern.c:818:
+	if(ip == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#536: FILE: arch/um/drivers/net_kern.c:822:
+	if(in == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!in"
#536: FILE: arch/um/drivers/net_kern.c:822:
+	if(in == NULL)

ERROR:SPACING: space required before the open brace '{'
#601: FILE: arch/um/drivers/ubd_kern.c:315:
+		if(fake_major != MAJOR_NR){

ERROR:SPACING: space required before the open parenthesis '('
#601: FILE: arch/um/drivers/ubd_kern.c:315:
+		if(fake_major != MAJOR_NR){

WARNING:INDENTED_LABEL: labels should not be indented
#616: FILE: arch/um/drivers/ubd_kern.c:325:
+	out1:

WARNING:SPLIT_STRING: quoted string split across lines
#661: FILE: arch/um/drivers/ubd_kern.c:372:
+			*error_out = "Expected '=' or flag letter "
+				"(r, s, c, or d)";

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!backing_file"
#682: FILE: arch/um/drivers/ubd_kern.c:387:
+	if (backing_file == NULL)

ERROR:SPACING: space required before the open brace '{'
#690: FILE: arch/um/drivers/ubd_kern.c:390:
+	if(backing_file != NULL){

ERROR:SPACING: space required before the open parenthesis '('
#690: FILE: arch/um/drivers/ubd_kern.c:390:
+	if(backing_file != NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "backing_file"
#690: FILE: arch/um/drivers/ubd_kern.c:390:
+	if(backing_file != NULL){

ERROR:SPACING: space required before the open brace '{'
#691: FILE: arch/um/drivers/ubd_kern.c:391:
+		if(ubd_dev->no_cow){

ERROR:SPACING: space required before the open parenthesis '('
#691: FILE: arch/um/drivers/ubd_kern.c:391:
+		if(ubd_dev->no_cow){

ERROR:SPACING: space required before the open parenthesis '('
#718: FILE: arch/um/drivers/ubd_kern.c:415:
+	if(err)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#719: FILE: arch/um/drivers/ubd_kern.c:416:
+		printk(KERN_ERR "Failed to initialize device with \"%s\" : "

WARNING:SPLIT_STRING: quoted string split across lines
#720: FILE: arch/um/drivers/ubd_kern.c:417:
+		printk(KERN_ERR "Failed to initialize device with \"%s\" : "
+		       "%s\n", str, error);

ERROR:SPACING: space required before the open brace '{'
#751: FILE: arch/um/drivers/ubd_kern.c:685:
+	if(err < 0){

ERROR:SPACING: space required before the open parenthesis '('
#751: FILE: arch/um/drivers/ubd_kern.c:685:
+	if(err < 0){

ERROR:SPACING: space required before the open brace '{'
#835: FILE: arch/um/drivers/ubd_kern.c:885:
+	for (i = 0; i < MAX_DEV; i++){

ERROR:SPACING: space required before the open parenthesis '('
#837: FILE: arch/um/drivers/ubd_kern.c:887:
+		if(err)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#838: FILE: arch/um/drivers/ubd_kern.c:888:
+			printk(KERN_ERR "Failed to initialize ubd device %d :"

WARNING:SPLIT_STRING: quoted string split across lines
#839: FILE: arch/um/drivers/ubd_kern.c:889:
+			printk(KERN_ERR "Failed to initialize ubd device %d :"
+			       "%s\n", i, error);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#892: FILE: arch/um/drivers/chan_kern.c:26:
+	printk("Using a channel type which is configured out of "

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#901: FILE: arch/um/drivers/chan_kern.c:34:
+	printk("Using a channel type which is configured out of "

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#909: FILE: arch/um/drivers/chan_kern.c:41:
+	printk("Using a channel type which is configured out of "

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#916: FILE: arch/um/drivers/chan_kern.c:47:
+	printk("Using a channel type which is configured out of "

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#924: FILE: arch/um/drivers/chan_kern.c:54:
+	printk("Using a channel type which is configured out of "

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#932: FILE: arch/um/drivers/chan_kern.c:61:
+	printk("Using a channel type which is configured out of "

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#941: FILE: arch/um/drivers/chan_kern.c:69:
+	printk("Using a channel type which is configured out of "

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#949: FILE: arch/um/drivers/chan_kern.c:76:
+	printk("Using a channel type which is configured out of "

ERROR:SPACING: space required before the open brace '{'
#976: FILE: arch/um/drivers/chan_kern.c:528:
+	if(data == NULL){

ERROR:SPACING: space required before the open parenthesis '('
#976: FILE: arch/um/drivers/chan_kern.c:528:
+	if(data == NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#976: FILE: arch/um/drivers/chan_kern.c:528:
+	if(data == NULL){

ERROR:SPACING: space required before the open brace '{'
#983: FILE: arch/um/drivers/chan_kern.c:534:
+	if(chan == NULL){

ERROR:SPACING: space required before the open parenthesis '('
#983: FILE: arch/um/drivers/chan_kern.c:534:
+	if(chan == NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chan"
#983: FILE: arch/um/drivers/chan_kern.c:534:
+	if(chan == NULL){

ERROR:SPACING: space required before the open parenthesis '('
#1076: FILE: arch/um/drivers/ssl.c:221:
+	if(ret < 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1077: FILE: arch/um/drivers/ssl.c:222:
+		printk(KERN_ERR "Failed to set up serial line with "

WARNING:SPLIT_STRING: quoted string split across lines
#1078: FILE: arch/um/drivers/ssl.c:223:
+		printk(KERN_ERR "Failed to set up serial line with "
+		       "configuration string \"%s\" : %s\n", str, error);

ERROR:SPACING: space required before the open parenthesis '('
#1133: FILE: arch/um/drivers/stdio_console.c:199:
+	if(ret < 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1134: FILE: arch/um/drivers/stdio_console.c:200:
+		printk(KERN_ERR "Failed to set up console with "

WARNING:SPLIT_STRING: quoted string split across lines
#1135: FILE: arch/um/drivers/stdio_console.c:201:
+		printk(KERN_ERR "Failed to set up console with "
+		       "configuration string \"%s\" : %s\n", str, error);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1176: FILE: arch/um/include/line.h:108:
+extern int line_remove(struct line *lines, unsigned int sizeof_lines, int n,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1190: FILE: arch/um/include/mconsole_kern.h:21:
+	int (*config)(char *, char **);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char **' should also have an identifier name
#1190: FILE: arch/um/include/mconsole_kern.h:21:
+	int (*config)(char *, char **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1194: FILE: arch/um/include/mconsole_kern.h:24:
+	int (*remove)(int, char **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char **' should also have an identifier name
#1194: FILE: arch/um/include/mconsole_kern.h:24:
+	int (*remove)(int, char **);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1246: FILE: arch/um/kernel/tt/gdb_kern.c:12:
+extern int gdb_remove(int n, char **error_out);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000005790.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 41 errors, 29 warnings, 10 checks, 1064 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000005790.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
