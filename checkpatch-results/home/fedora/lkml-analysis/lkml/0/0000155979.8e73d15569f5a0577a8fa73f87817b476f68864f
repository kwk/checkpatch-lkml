WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
Configfs rewritten as a single file and updated to use kobjects instead of its

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#48: FILE: fs/configfs/configfs.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#65: FILE: fs/configfs/configfs.c:18:
+#define CONFIGFS_ITEM_ATTR ^I0x0004$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#66: FILE: fs/configfs/configfs.c:19:
+#define CONFIGFS_ITEM_LINK ^I0x0020$

WARNING:LINE_SPACING: Missing a blank line after declarations
#80: FILE: fs/configfs/configfs.c:33:
+	struct sysfs_dirent *sd = dentry->d_fsdata;
+	return ((struct kobject *)sd->s_element);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#86: FILE: fs/configfs/configfs.c:39:
+	struct sysfs_dirent *sd = dentry->d_fsdata;
+	return ((struct attribute *)sd->s_element);

WARNING:LINE_SPACING: Missing a blank line after declarations
#96: FILE: fs/configfs/configfs.c:49:
+		struct sysfs_dirent *sd = dentry->d_fsdata;
+		if (sd->s_type & CONFIGFS_ITEM_LINK) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#96: FILE: fs/configfs/configfs.c:49:
+		if (sd->s_type & CONFIGFS_ITEM_LINK) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#98: FILE: fs/configfs/configfs.c:51:
+			struct sysfs_symlink *sl = sd->s_element;
+			kobj = kobject_get(sl->sl_target);

CHECK:BRACES: Unbalanced braces around else statement
#99: FILE: fs/configfs/configfs.c:52:
+		} else

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#138: FILE: fs/configfs/configfs.c:91:
+static struct address_space_operations sysfs_aops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#152: FILE: fs/configfs/configfs.c:105:
+	struct inode *inode = new_inode(sysfs_sb);
+	if (inode) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#158: FILE: fs/configfs/configfs.c:111:
+		inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LINE_SPACING: Missing a blank line after declarations
#169: FILE: fs/configfs/configfs.c:122:
+	struct inode *inode = NULL;
+	if (dentry) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#169: FILE: fs/configfs/configfs.c:122:
+	if (dentry) {
[...]
+	} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#170: FILE: fs/configfs/configfs.c:123:
+		if (!dentry->d_inode) {
[...]
+		} else
[...]

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#171: FILE: fs/configfs/configfs.c:124:
+			if ((inode = sysfs_new_inode(mode))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#171: FILE: fs/configfs/configfs.c:124:
+			if ((inode = sysfs_new_inode(mode))) {
[...]
+			} else
[...]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#173: FILE: fs/configfs/configfs.c:126:
+				if (dentry->d_parent
+				    && dentry->d_parent->d_inode) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#176: FILE: fs/configfs/configfs.c:129:
+					p_inode->i_mtime = p_inode->i_ctime =

CHECK:CAMELCASE: Avoid CamelCase: <Proceed>
#179: FILE: fs/configfs/configfs.c:132:
+				goto Proceed;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:BRACES: Unbalanced braces around else statement
#180: FILE: fs/configfs/configfs.c:133:
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#182: FILE: fs/configfs/configfs.c:135:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#184: FILE: fs/configfs/configfs.c:137:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <Done>
#186: FILE: fs/configfs/configfs.c:139:
+	goto Done;

WARNING:INDENTED_LABEL: labels should not be indented
#188: FILE: fs/configfs/configfs.c:141:
+      Proceed:

CHECK:BRACES: braces {} should be used on all arms of this statement
#191: FILE: fs/configfs/configfs.c:144:
+	if (!error) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#195: FILE: fs/configfs/configfs.c:148:
+	} else

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#196: FILE: fs/configfs/configfs.c:149:
+		iput(inode);
 		^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:INDENTED_LABEL: labels should not be indented
#197: FILE: fs/configfs/configfs.c:150:
+      Done:

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#207: FILE: fs/configfs/configfs.c:160:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#239: FILE: fs/configfs/configfs.c:192:
+#if 0

WARNING:LINE_SPACING: Missing a blank line after declarations
#280: FILE: fs/configfs/configfs.c:233:
+	int depth = 0;
+	do {

WARNING:LINE_SPACING: Missing a blank line after declarations
#290: FILE: fs/configfs/configfs.c:243:
+	int length = 1;
+	do {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#322: FILE: fs/configfs/configfs.c:275:
+	pr_debug("%s: depth = %d, size = %d\n", __FUNCTION__, depth, size);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#328: FILE: fs/configfs/configfs.c:281:
+	pr_debug("%s: path = '%s'\n", __FUNCTION__, path);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#358: FILE: fs/configfs/configfs.c:311:
+
+}

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#360: FILE: fs/configfs/configfs.c:313:
+static int sysfs_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                       ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#364: FILE: fs/configfs/configfs.c:317:
+	unsigned long page = get_zeroed_page(GFP_KERNEL);
+	if (page)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#366: FILE: fs/configfs/configfs.c:319:
+	nd_set_link(nd, error ? ERR_PTR(error) : (char *)page);
 	            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#370: FILE: fs/configfs/configfs.c:323:
+static void sysfs_put_link(struct dentry *dentry, struct nameidata *nd)
                                                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#372: FILE: fs/configfs/configfs.c:325:
+	char *page = nd_get_link(nd);
 	                         ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#373: FILE: fs/configfs/configfs.c:326:
+	char *page = nd_get_link(nd);
+	if (!IS_ERR(page))

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#377: FILE: fs/configfs/configfs.c:330:
+static struct inode_operations sysfs_symlink_inode_operations = {

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#397: FILE: fs/configfs/configfs.c:350:
+	struct sysfs_ops *ops;

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#411: FILE: fs/configfs/configfs.c:364:
+	struct sysfs_ops *ops = buffer->ops;

CHECK:SPACING: No space is necessary after a cast
#422: FILE: fs/configfs/configfs.c:375:
+	BUG_ON(count > (ssize_t) PAGE_SIZE);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#422: FILE: fs/configfs/configfs.c:375:
+	BUG_ON(count > (ssize_t) PAGE_SIZE);

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#484: FILE: fs/configfs/configfs.c:437:
+	struct sysfs_ops *ops = buffer->ops;

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#494: FILE: fs/configfs/configfs.c:447:
+	struct sysfs_ops *ops = NULL;

CHECK:CAMELCASE: Avoid CamelCase: <Einval>
#498: FILE: fs/configfs/configfs.c:451:
+		goto Einval;

CHECK:CAMELCASE: Avoid CamelCase: <Eaccess>
#507: FILE: fs/configfs/configfs.c:460:
+		goto Eaccess;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#515: FILE: fs/configfs/configfs.c:468:
+	if (file->f_mode & FMODE_WRITE) {
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#516: FILE: fs/configfs/configfs.c:469:
+		if (!(inode->i_mode & S_IWUGO) || !ops->store)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#519: FILE: fs/configfs/configfs.c:472:
+
+	}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#526: FILE: fs/configfs/configfs.c:479:
+		if (!(inode->i_mode & S_IRUGO) || !ops->show)

WARNING:REPEATED_WORD: Possible repeated word: 'it'
#531: FILE: fs/configfs/configfs.c:484:
+	/* No error? Great, allocate a buffer for the file, and store it
+	 * it in file->private_data for easy access.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*buffer)...) over kmalloc(sizeof(struct sysfs_buffer)...)
#533: FILE: fs/configfs/configfs.c:486:
+	buffer = kmalloc(sizeof(struct sysfs_buffer), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BRACES: braces {} should be used on all arms of this statement
#534: FILE: fs/configfs/configfs.c:487:
+	if (buffer) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#540: FILE: fs/configfs/configfs.c:493:
+	} else

WARNING:INDENTED_LABEL: labels should not be indented
#544: FILE: fs/configfs/configfs.c:497:
+      Einval:

WARNING:INDENTED_LABEL: labels should not be indented
#547: FILE: fs/configfs/configfs.c:500:
+      Eaccess:

WARNING:INDENTED_LABEL: labels should not be indented
#550: FILE: fs/configfs/configfs.c:503:
+      Done:

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#576: FILE: fs/configfs/configfs.c:529:
+		if ((retval = fill_read_buffer(file->f_dentry, buffer)))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#580: FILE: fs/configfs/configfs.c:533:
+		 __FUNCTION__, count, *ppos, buffer->page);

WARNING:INDENTED_LABEL: labels should not be indented
#582: FILE: fs/configfs/configfs.c:535:
+      out:

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#595: FILE: fs/configfs/configfs.c:548:
+ *	Hint: if you're writing a value, first read the file, modify only the
+ *	the value you're changing, then write entire buffer back.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#612: FILE: fs/configfs/configfs.c:565:
+static int sysfs_open_file(struct inode *inode, struct file *filp)
                                                              ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#614: FILE: fs/configfs/configfs.c:567:
+	return check_perm(inode, filp);
 	                         ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#617: FILE: fs/configfs/configfs.c:570:
+static int sysfs_release(struct inode *inode, struct file *filp)
                                                            ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#637: FILE: fs/configfs/configfs.c:590:
+static struct file_operations sysfs_file_operations = {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#657: FILE: fs/configfs/configfs.c:610:
+		BUG_ON(sd->s_dentry != dentry);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#661: FILE: fs/configfs/configfs.c:614:
+	iput(inode);
 	^^^^

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#673: FILE: fs/configfs/configfs.c:626:
+static struct dentry_operations sysfs_dentry_ops = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#701: FILE: fs/configfs/configfs.c:654:
+static int sysfs_make_dirent(struct sysfs_dirent *parent_sd, struct dentry *dentry,
+	void *element, umode_t mode, int type)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#735: FILE: fs/configfs/configfs.c:688:
+	BUG_ON(!kobj || !kobj->dentry || !attr);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#743: FILE: fs/configfs/configfs.c:696:
+	umode_t mode = S_IFLNK | S_IRWXUGO;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#748: FILE: fs/configfs/configfs.c:701:
+		err = sysfs_make_dirent(parent->d_fsdata, dentry, sl,
+					   mode, CONFIGFS_ITEM_LINK);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*sl)...) over kmalloc(sizeof(struct sysfs_symlink)...)
#762: FILE: fs/configfs/configfs.c:715:
+	sl = kmalloc(sizeof(struct sysfs_symlink), GFP_KERNEL);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#778: FILE: fs/configfs/configfs.c:731:
+static int get_target(const char *symname, struct nameidata *nd, struct kobject **target)
                                                              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#782: FILE: fs/configfs/configfs.c:735:
+	ret = path_lookup(symname, LOOKUP_FOLLOW | LOOKUP_DIRECTORY, nd);
 	                                                             ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#784: FILE: fs/configfs/configfs.c:737:
+		if (nd->dentry->d_sb == sysfs_sb) {
[...]
+		} else
[...]

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#788: FILE: fs/configfs/configfs.c:741:
+				path_release(nd);
 				             ^^

CHECK:BRACES: Unbalanced braces around else statement
#790: FILE: fs/configfs/configfs.c:743:
+		} else

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#833: FILE: fs/configfs/configfs.c:786:
+static int sysfs_readdir(struct file *filp, void *dirent, filldir_t filldir)
                                       ^^^^

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#849: FILE: fs/configfs/configfs.c:802:
+		/* fallthrough */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#856: FILE: fs/configfs/configfs.c:809:
+		/* fallthrough */

WARNING:LINE_SPACING: Missing a blank line after declarations
#918: FILE: fs/configfs/configfs.c:871:
+				struct sysfs_dirent *next;
+				next = list_entry(p, struct sysfs_dirent,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#931: FILE: fs/configfs/configfs.c:884:
+static struct file_operations sysfs_dir_operations = {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#960: FILE: fs/configfs/configfs.c:913:
+				   struct nameidata *nd)
 				                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#985: FILE: fs/configfs/configfs.c:938:
+		return simple_lookup(dir, dentry, nd);
 		                                  ^^

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#991: FILE: fs/configfs/configfs.c:944:
+static struct inode_operations sysfs_dir_inode_operations;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0755'.
#1006: FILE: fs/configfs/configfs.c:959:
+	umode_t mode = S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#1019: FILE: fs/configfs/configfs.c:972:
+static struct vfsmount *sysfs_mount = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1026: FILE: fs/configfs/configfs.c:979:
+	BUG_ON(!kobj);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1076: FILE: fs/configfs/configfs.c:1029:
+#if 0

CHECK:BRACES: braces {} should be used on all arms of this statement
#1095: FILE: fs/configfs/configfs.c:1048:
+		if (!new_dentry->d_inode) {
[...]
+		} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#1097: FILE: fs/configfs/configfs.c:1050:
+			if (!error) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1100: FILE: fs/configfs/configfs.c:1053:
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#1102: FILE: fs/configfs/configfs.c:1055:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1133: FILE: fs/configfs/configfs.c:1086:
+		if (sd->s_type & CONFIGFS_USET_DEFAULT) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1141: FILE: fs/configfs/configfs.c:1094:
+		} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1293: FILE: fs/configfs/configfs.c:1246:
+	BUG_ON(!type);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1301: FILE: fs/configfs/configfs.c:1254:
+static int sysfs_attach_group(struct kobject *parent_kobj, struct kobject *kobj, struct dentry *dentry);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1314: FILE: fs/configfs/configfs.c:1267:
+			if ((error = configfs_create_file(kobj, attr)))

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1340: FILE: fs/configfs/configfs.c:1293:
+static int sysfs_attach_item(struct kobject *parent_kobj, struct kobject *kobj, struct dentry *dentry)

WARNING:TYPO_SPELLING: 'attachs' may be misspelled - perhaps 'attaches'?
#1357: FILE: fs/configfs/configfs.c:1310:
+ * creates a dentry, attachs it, and then does fixup
                      ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1383: FILE: fs/configfs/configfs.c:1336:
+		ret = sysfs_attach_group(&parent_group->kobj,
+			&group->kobj, child);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1409: FILE: fs/configfs/configfs.c:1362:
+		 * emulation, and shouldn't hurt. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1428: FILE: fs/configfs/configfs.c:1381:
+static int sysfs_attach_group(struct kobject *parent_kobj, struct kobject *kobj, struct dentry *dentry)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1450: FILE: fs/configfs/configfs.c:1403:
+	 * traversals much nicer. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1471: FILE: fs/configfs/configfs.c:1424:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1504: FILE: fs/configfs/configfs.c:1457:
+	BUG_ON(!subsys);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1587: FILE: fs/configfs/configfs.c:1540:
+	BUG_ON(!subsys);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1635: FILE: fs/configfs/configfs.c:1588:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1650: FILE: fs/configfs/configfs.c:1603:
+	ret = get_target(symname, &nd, &sl_target);
 	                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1659: FILE: fs/configfs/configfs.c:1612:
+	path_release(&nd);
 	              ^^

WARNING:INDENTED_LABEL: labels should not be indented
#1661: FILE: fs/configfs/configfs.c:1614:
+      out_put:

WARNING:INDENTED_LABEL: labels should not be indented
#1664: FILE: fs/configfs/configfs.c:1617:
+      out:

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1681: FILE: fs/configfs/configfs.c:1634:
+		BUG();

WARNING:INDENTED_LABEL: labels should not be indented
#1712: FILE: fs/configfs/configfs.c:1665:
+      out:

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1716: FILE: fs/configfs/configfs.c:1669:
+static struct inode_operations sysfs_dir_inode_operations = {

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1724: FILE: fs/configfs/configfs.c:1677:
+static int sysfs_mnt_count = 0;

WARNING:INDENTED_LABEL: labels should not be indented
#1777: FILE: fs/configfs/configfs.c:1730:
+	      out_release:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1791: FILE: fs/configfs/configfs.c:1744:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1799: FILE: fs/configfs/configfs.c:1752:
+		printk(KERN_ERR

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0755'.
#1845: FILE: fs/configfs/configfs.c:1798:
+	inode = sysfs_new_inode(S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1858: FILE: fs/configfs/configfs.c:1811:
+		pr_debug("%s: could not get root dentry!\n", __FUNCTION__);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1859: FILE: fs/configfs/configfs.c:1812:
+		iput(inode);
 		^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1870: FILE: fs/configfs/configfs.c:1823:
+static struct super_block *sysfs_get_sb(struct file_system_type *fs_type,
+	int flags, const char *dev_name, void *data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1887: FILE: fs/configfs/configfs.c:1840:
+	sysfs_dir_cachep = kmem_cache_create("configfs_dir_cache",
+		sizeof(struct sysfs_dirent), 0, 0, NULL, NULL);

WARNING:INDENTED_LABEL: labels should not be indented
#1894: FILE: fs/configfs/configfs.c:1847:
+      out:

WARNING:INDENTED_LABEL: labels should not be indented
#1896: FILE: fs/configfs/configfs.c:1849:
+      out_err:

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1911: FILE: fs/configfs/configfs.c:1864:
+    ("Simple RAM filesystem for user driven kernel subsystem configuration.");$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1916: FILE: fs/configfs/configfs.c:1869:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1922: FILE: fs/configfs/configfs.c:1875:
+ kobject_set_name(&group->kobj, name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1923: FILE: fs/configfs/configfs.c:1876:
+ group->kobj.ktype = type;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1924: FILE: fs/configfs/configfs.c:1877:
+ config_group_init(group);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1929: FILE: fs/configfs/configfs.c:1882:
+ kobject_init(&group->kobj);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1930: FILE: fs/configfs/configfs.c:1883:
+ INIT_LIST_HEAD(&group->cg_children);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1935: FILE: fs/configfs/configfs.c:1888:
+ kobject_set_name(kobj, name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1936: FILE: fs/configfs/configfs.c:1889:
+ kobj->ktype = type;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1937: FILE: fs/configfs/configfs.c:1890:
+ kobject_init(kobj);$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1940: FILE: fs/configfs/configfs.c:1893:
+EXPORT_SYMBOL(configfs_register_subsystem);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1941: FILE: fs/configfs/configfs.c:1894:
+EXPORT_SYMBOL(configfs_unregister_subsystem);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1942: FILE: fs/configfs/configfs.c:1895:
+EXPORT_SYMBOL(config_group_init_type_name);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1943: FILE: fs/configfs/configfs.c:1896:
+EXPORT_SYMBOL(config_group_init);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1944: FILE: fs/configfs/configfs.c:1897:
+EXPORT_SYMBOL(kobject_init_type_name);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000155979.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 104 warnings, 38 checks, 1903 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000155979.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
