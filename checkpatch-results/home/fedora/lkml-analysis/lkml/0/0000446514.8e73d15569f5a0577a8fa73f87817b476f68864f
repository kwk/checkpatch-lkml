WARNING:TYPO_SPELLING: 'preceed' may be misspelled - perhaps 'precede'?
#19: 
references a symbol in B.o, then B.o's initcall must preceed A.o's.
                                                     ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'persuing' may be misspelled - perhaps 'pursuing'?
#29: 
I will be persuing my previous explicit initcall depends patch in the
          ^^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
diff -urN -I \$.*\$ --exclude TAGS -X /home/rusty/current-dontdiff --minimal linux-2.5.26/Makefile working-2.5.26-initcall/Makefile

ERROR:SPACING: space required after that ',' (ctx:VxV)
#112: FILE: include/linux/init.h:61:
+#define __CAT3(a,b,c) a##b##c
                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#112: FILE: include/linux/init.h:61:
+#define __CAT3(a,b,c) a##b##c
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#113: FILE: include/linux/init.h:62:
+#define _CAT3(a,b,c) __CAT3(a,b,c)
                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#113: FILE: include/linux/init.h:62:
+#define _CAT3(a,b,c) __CAT3(a,b,c)
                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#113: FILE: include/linux/init.h:62:
+#define _CAT3(a,b,c) __CAT3(a,b,c)
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#113: FILE: include/linux/init.h:62:
+#define _CAT3(a,b,c) __CAT3(a,b,c)
                                ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fn' - possible side-effects?
#116: FILE: include/linux/init.h:64:
+#define __initcall(fn)							    \
+  int _CAT3(fn,__LINE__,KBUILD_BASENAME)(void) __attribute__((alias(#fn))); \
+  static inline initcall_t _CAT3(fn##test,__LINE__,KBUILD_BASENAME)(void)   \
+	{ return fn; }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: include/linux/init.h:65:
+  int _CAT3(fn,__LINE__,KBUILD_BASENAME)(void) __attribute__((alias(#fn))); \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#117: FILE: include/linux/init.h:65:
+  int _CAT3(fn,__LINE__,KBUILD_BASENAME)(void) __attribute__((alias(#fn))); \
               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#117: FILE: include/linux/init.h:65:
+  int _CAT3(fn,__LINE__,KBUILD_BASENAME)(void) __attribute__((alias(#fn))); \
                        ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __alias(#fn) over __attribute__((alias(#fn)))
#117: FILE: include/linux/init.h:65:
+  int _CAT3(fn,__LINE__,KBUILD_BASENAME)(void) __attribute__((alias(#fn))); \

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#117: FILE: include/linux/init.h:65:
+  int _CAT3(fn,__LINE__,KBUILD_BASENAME)(void) __attribute__((alias(#fn))); \

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: include/linux/init.h:66:
+  static inline initcall_t _CAT3(fn##test,__LINE__,KBUILD_BASENAME)(void)   \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#118: FILE: include/linux/init.h:66:
+  static inline initcall_t _CAT3(fn##test,__LINE__,KBUILD_BASENAME)(void)   \
                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#118: FILE: include/linux/init.h:66:
+  static inline initcall_t _CAT3(fn##test,__LINE__,KBUILD_BASENAME)(void)   \
                                                   ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#143: FILE: init/main.c:420:
+extern void do_initcalls(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#163: FILE: scripts/build-initcalls:2:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000446514.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 9 warnings, 1 checks, 147 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000446514.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
