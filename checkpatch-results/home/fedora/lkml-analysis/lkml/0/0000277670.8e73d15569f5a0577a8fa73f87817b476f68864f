WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
> http://sourceforge.net/mailarchive/forum.php?thread_id=4536665&forum_id=6379

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#54: 
got itself not uptodate.
               ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#91: FILE: drivers/ide/ide-io.c:606:
+		struct block_device *bdev = journal_no_write[i];
+		if (bdev && bdev_get_queue(bdev) == rq->q) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#92: FILE: drivers/ide/ide-io.c:607:
+			printk("%s: write suppressed\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#92: FILE: drivers/ide/ide-io.c:607:
+			printk("%s: write suppressed\n", __FUNCTION__);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#134: FILE: fs/buffer.c:207:
+		BUFFER_TRACE(bh, "clear uptodate");
 		                        ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#142: FILE: fs/buffer.c:228:
+		BUFFER_TRACE(bh, "clear uptodate");
 		                        ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#158: FILE: fs/buffer.c:627:
+		BUFFER_TRACE(bh, "clear uptodate");
 		                        ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#175: FILE: fs/buffer.c:694:
+		BUFFER_TRACE(bh, "clear uptodate");
 		                        ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#211: FILE: fs/buffer.c:968:
+				printk("%s: !uptodate buffer\n", __FUNCTION__);
 				             ^^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#211: FILE: fs/buffer.c:968:
+				printk("%s: !uptodate buffer\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#211: FILE: fs/buffer.c:968:
+				printk("%s: !uptodate buffer\n", __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#277: FILE: fs/buffer.c:1903:
+				BUFFER_TRACE(bh, "new: call "
+						"unmap_underlying_metadata");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#286: FILE: fs/buffer.c:1933:
+				printk("%s: dirty non-uptodate buffer\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#287: FILE: fs/buffer.c:1934:
+				printk("%s: dirty non-uptodate buffer\n",
+						__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#287: FILE: fs/buffer.c:1934:
+						__FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#306: FILE: fs/buffer.c:2065:
+				BUFFER_TRACE(bh, "new: call "
+						"unmap_underlying_metadata");

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#310: FILE: fs/buffer.c:2069:
+					BUFFER_TRACE(bh, "setting uptodate");
 					                          ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#318: FILE: fs/buffer.c:2090:
+			BUFFER_TRACE(bh, "setting uptodate");
 			                          ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#349: FILE: fs/buffer.c:2455:
+		BUFFER_TRACE(bh, "clear uptodate");
 		                        ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#367: FILE: fs/buffer.c:2772:
+			struct buffer_head *b = page_buffers(page);
+			BUFFER_TRACE(b, "EIO");

WARNING:LINE_SPACING: Missing a blank line after declarations
#376: FILE: fs/buffer.c:2781:
+		struct buffer_head *b = page_buffers(page);
+		BUFFER_TRACE(b, "partial");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bh->b_end_io"
#402: FILE: fs/buffer.c:2829:
+	J_ASSERT_BH(bh, bh->b_end_io != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#441: FILE: fs/ext3/inode.c:1383:
+		struct buffer_head *b = page_buffers(page);
+		BUFFER_TRACE(b, "call block_write_full_page");

CHECK:SPACING: No space is necessary after a cast
#501: FILE: fs/ext3/namei.c:449:
+	if (((struct dx_root *) frames[0].bh->b_data)->info.indirect_levels) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#695: FILE: fs/ext3/super.c:72:
+		printk(KERN_WARNING "Turning device %s read-only\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#713: FILE: fs/ext3/super.c:90:
+	struct ext3_sb_info *sbi = EXT3_SB(sb);
+	init_timer(&sbi->turn_ro_timer);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#715: FILE: fs/ext3/super.c:92:
+		printk(KERN_DEBUG "fs will go read-only in %d jiffies\n",

CHECK:CAMELCASE: Avoid CamelCase: <Opt_ro_after>
#755: FILE: fs/ext3/super.c:649:
+	Opt_ro_after,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#832: FILE: fs/jbd/commit.c:31:
+	if (uptodate) {
 	    ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#836: FILE: fs/jbd/commit.c:34:
+		BUFFER_TRACE(bh, "clear uptodate");
 		                        ^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#865: FILE: fs/jbd-kernel.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#866: FILE: fs/jbd-kernel.c:2:
+ * fs/jbd-kernel.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!transaction"
#896: FILE: fs/jbd-kernel.c:32:
+		if (jh->b_jlist == 0 && transaction == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "transaction"
#899: FILE: fs/jbd-kernel.c:35:
+		J_ASSERT_JH(jh, transaction != NULL);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#902: FILE: fs/jbd-kernel.c:38:
+		 * already been forgotten by a transaction. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:IF_1: Consider removing the #if 1 and its #endif
#904: FILE: fs/jbd-kernel.c:40:
+#if 1

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#906: FILE: fs/jbd-kernel.c:42:
+				printk("%s: clean of clean buffer\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#907: FILE: fs/jbd-kernel.c:43:
+				printk("%s: clean of clean buffer\n",
+					__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#907: FILE: fs/jbd-kernel.c:43:
+					__FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#930: FILE: fs/jbd-kernel.c:66:
+void buffer_trace(char *function, struct buffer_head *dest,
+		struct buffer_head *src, char *info)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#961: FILE: fs/jbd-kernel.c:97:
+#if defined(CONFIG_JBD) || defined(CONFIG_JBD_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#1021: FILE: fs/jbd-kernel.c:157:
+#if defined(CONFIG_JBD) || defined(CONFIG_JBD_MODULE)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1037: FILE: fs/jbd-kernel.c:173:
+	printk(" %s():%s\n", bhist_i->function, bhist_i->info);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1038: FILE: fs/jbd-kernel.c:174:
+	printk("     b_state:0x%lx b_jlist:%s cpu:%d b_count:%d b_blocknr:%lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1039: FILE: fs/jbd-kernel.c:175:
+	printk("     b_state:0x%lx b_jlist:%s cpu:%d b_count:%d b_blocknr:%lu\n",
+			bhist_i->b_state,

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#1044: FILE: fs/jbd-kernel.c:180:
+#if defined(CONFIG_JBD) || defined(CONFIG_JBD_MODULE)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1045: FILE: fs/jbd-kernel.c:181:
+	printk("     b_jbd:%u b_frozen_data:%p b_committed_data:%p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1046: FILE: fs/jbd-kernel.c:182:
+	printk("     b_jbd:%u b_frozen_data:%p b_committed_data:%p\n",
+			bhist_i->b_jbd,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1049: FILE: fs/jbd-kernel.c:185:
+	printk("     b_transaction:%u b_next_transaction:%u "

WARNING:SPLIT_STRING: quoted string split across lines
#1050: FILE: fs/jbd-kernel.c:186:
+	printk("     b_transaction:%u b_next_transaction:%u "
+			"b_cp_transaction:%u b_trans_is_running:%u\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1055: FILE: fs/jbd-kernel.c:191:
+	printk("     b_trans_is_comitting:%u b_jcount:%u pg_dirty:%u",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1056: FILE: fs/jbd-kernel.c:192:
+	printk("     b_trans_is_comitting:%u b_jcount:%u pg_dirty:%u",
+			bhist_i->b_trans_is_committing,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1060: FILE: fs/jbd-kernel.c:196:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1065: FILE: fs/jbd-kernel.c:201:
+	printk("b_blocknr:%llu b_count:%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1066: FILE: fs/jbd-kernel.c:202:
+	printk("b_blocknr:%llu b_count:%d\n",
+		(unsigned long long)bh->b_blocknr, atomic_read(&bh->b_count));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1067: FILE: fs/jbd-kernel.c:203:
+	printk("b_this_page:%p b_data:%p b_page:%p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1068: FILE: fs/jbd-kernel.c:204:
+	printk("b_this_page:%p b_data:%p b_page:%p\n",
+			bh->b_this_page, bh->b_data, bh->b_page);

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#1069: FILE: fs/jbd-kernel.c:205:
+#if defined(CONFIG_JBD) || defined(CONFIG_JBD_MODULE)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1073: FILE: fs/jbd-kernel.c:209:
+		printk("b_jlist:%u b_frozen_data:%p b_committed_data:%p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1074: FILE: fs/jbd-kernel.c:210:
+		printk("b_jlist:%u b_frozen_data:%p b_committed_data:%p\n",
+			jh->b_jlist, jh->b_frozen_data, jh->b_committed_data);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1075: FILE: fs/jbd-kernel.c:211:
+		printk(" b_transaction:%p b_next_transaction:%p "

WARNING:SPLIT_STRING: quoted string split across lines
#1076: FILE: fs/jbd-kernel.c:212:
+		printk(" b_transaction:%p b_next_transaction:%p "
+				"b_cp_transaction:%p\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1079: FILE: fs/jbd-kernel.c:215:
+		printk("b_cpnext:%p b_cpprev:%p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1080: FILE: fs/jbd-kernel.c:216:
+		printk("b_cpnext:%p b_cpprev:%p\n",
+			jh->b_cpnext, jh->b_cpprev);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1090: FILE: fs/jbd-kernel.c:226:
+	printk("buffer trace for buffer at 0x%p (I am CPU %d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1091: FILE: fs/jbd-kernel.c:227:
+	printk("buffer trace for buffer at 0x%p (I am CPU %d)\n",
+			bh, smp_processor_id());

ERROR:SPACING: space prohibited after that open parenthesis '('
#1095: FILE: fs/jbd-kernel.c:231:
+	for (	idx = bh->b_history.b_history_tail, count = 0;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1105: FILE: fs/jbd-kernel.c:241:
+	printk("\n");

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1118: FILE: fs/jbd-kernel.c:254:
+EXPORT_SYMBOL(buffer_assertion_failure);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1119: FILE: fs/jbd-kernel.c:255:
+EXPORT_SYMBOL(print_buffer_fields);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1209: FILE: fs/Kconfig:189:
+config BUFFER_DEBUG
+	bool "buffer-layer tracing"
+	depends on JBD
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1273: FILE: include/linux/buffer-trace.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1274: FILE: include/linux/buffer-trace.h:2:
+ * include/linux/buffer-trace.h

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#1306: FILE: include/linux/buffer-trace.h:34:
+#if defined(CONFIG_JBD) || defined(CONFIG_JBD_MODULE)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1327: FILE: include/linux/buffer-trace.h:55:
+}
+extern void buffer_trace(char *function, struct buffer_head *dest,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1327: FILE: include/linux/buffer-trace.h:55:
+extern void buffer_trace(char *function, struct buffer_head *dest,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1328: FILE: include/linux/buffer-trace.h:56:
+extern void buffer_trace(char *function, struct buffer_head *dest,
+			struct buffer_head *src, char *info);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1329: FILE: include/linux/buffer-trace.h:57:
+extern void print_buffer_fields(struct buffer_head *bh);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1330: FILE: include/linux/buffer-trace.h:58:
+extern void print_buffer_trace(struct buffer_head *bh);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1335: FILE: include/linux/buffer-trace.h:63:
+#define BUFFER_TRACE2(dest, src, info)				\
+	do {							\
+		buffer_trace(__FUNCTION__, (dest), (src),	\
+			"["__FILE__":"				\
+			BUFFER_STRINGIFY(__LINE__)"] " info);	\
+	} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1337: FILE: include/linux/buffer-trace.h:65:
+		buffer_trace(__FUNCTION__, (dest), (src),	\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1338: FILE: include/linux/buffer-trace.h:66:
+			"["__FILE__":"				\

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bh' - possible side-effects?
#1342: FILE: include/linux/buffer-trace.h:70:
+#define BUFFER_TRACE(bh, info) BUFFER_TRACE2(bh, bh, info)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000277670.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 60 warnings, 23 checks, 1201 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000277670.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
