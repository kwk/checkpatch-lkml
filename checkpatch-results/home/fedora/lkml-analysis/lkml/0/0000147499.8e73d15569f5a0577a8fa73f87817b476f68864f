WARNING:TYPO_SPELLING: 'architecures' may be misspelled - perhaps 'architectures'?
#52: 
produces better and denser code for most architecures and does no
                                         ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#64: 
at http://www.tglx.de/private/tglx/ktimers/patch-2.6.14-rc2-kt5.patches.tar.bz2

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#72: 
ktimers seperate the "timer API" from the "timeout API". 
        ^^^^^^^^

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#102: 
CLOCK_REALTIME and CLOCK_MONOTONIC. They provide seperate timer queues 
                                                 ^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#114: FILE: include/linux/calc64.h:1:
+#ifndef _linux_CALC64_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#121: FILE: include/linux/calc64.h:8:
+#define div_long_long_rem(dividend,divisor,remainder) ^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#121: FILE: include/linux/calc64.h:8:
+#define div_long_long_rem(dividend,divisor,remainder) 	\
                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#121: FILE: include/linux/calc64.h:8:
+#define div_long_long_rem(dividend,divisor,remainder) 	\
                                           ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'remainder' may be better as '(remainder)' to avoid precedence issues
#121: FILE: include/linux/calc64.h:8:
+#define div_long_long_rem(dividend,divisor,remainder) 	\
+({							\
+	u64 result = dividend;				\
+	*remainder = do_div(result,divisor);		\
+	result;						\
+})

ERROR:SPACING: space required after that ',' (ctx:VxV)
#124: FILE: include/linux/calc64.h:11:
+	*remainder = do_div(result,divisor);		\
 	                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#186: FILE: fs/exec.c:651:
+				     KTIMER_RESTART|KTIMER_NOCHECK);
 				                   ^

CHECK:SPACING: No space is necessary after a cast
#226: FILE: fs/proc/array.c:438:
+		(clock_t) ktime_to_clock_t(it_real_value),

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#235: FILE: include/linux/ktimer.h:1:
+#ifndef _LINUX_KTIMER_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#254: FILE: include/linux/ktimer.h:20:
+typedef union {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#282: FILE: include/linux/ktimer.h:48:
+^Iint ^I ^I ^Ioverrun;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#284: FILE: include/linux/ktimer.h:50:
+^Ivoid ^I^I^I(*function)(void *);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#284: FILE: include/linux/ktimer.h:50:
+	void 			(*function)(void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#286: FILE: include/linux/ktimer.h:52:
+^Istruct ktimer_base ^I*base;$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#295: FILE: include/linux/ktimer.h:61:
+	spinlock_t		lock;

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#309: FILE: include/linux/ktimer.h:75:
+enum
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'relativ' may be misspelled - perhaps 'relative'?
#312: FILE: include/linux/ktimer.h:78:
+	KTIMER_REL,	/* Time value is relativ to now */
 	           	                 ^^^^^^^

WARNING:TYPO_SPELLING: 'relativ' may be misspelled - perhaps 'relative'?
#313: FILE: include/linux/ktimer.h:79:
+	KTIMER_INCR,	/* Time value is relativ to previous expiry time */
 	            	                 ^^^^^^^

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#321: FILE: include/linux/ktimer.h:87:
+enum
+{

CHECK:SPACING: No space is necessary after a cast
#331: FILE: include/linux/ktimer.h:97:
+#define KTIMER_POISON		((void *) 0x00100101)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#333: FILE: include/linux/ktimer.h:99:
+#define KTIME_ZERO ^I^I0LL$

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#344: FILE: include/linux/ktimer.h:110:
+ * Be careful when using this stuff. It blows up on you if you dön't
                                                                 ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#354: FILE: include/linux/ktimer.h:120:
+#define ktime_cmp(a,op,b) ((a).tv64 op (b).tv64)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#354: FILE: include/linux/ktimer.h:120:
+#define ktime_cmp(a,op,b) ((a).tv64 op (b).tv64)
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#354: FILE: include/linux/ktimer.h:120:
+#define ktime_cmp(a,op,b) ((a).tv64 op (b).tv64)
                       ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#357: FILE: include/linux/ktimer.h:123:
+#define ktime_set(s,n) ^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#357: FILE: include/linux/ktimer.h:123:
+#define ktime_set(s,n) 		\
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#367: FILE: include/linux/ktimer.h:133:
+#define ktime_set_low_high(l,h) ktime_set(h,l)
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#367: FILE: include/linux/ktimer.h:133:
+#define ktime_set_low_high(l,h) ktime_set(h,l)
                                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#369: FILE: include/linux/ktimer.h:135:
+#define ktime_get_low(t)	(t).tv.nsec

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#370: FILE: include/linux/ktimer.h:136:
+#define ktime_get_high(t)	(t).tv.sec

ERROR:CODE_INDENT: code indent should use tabs where possible
#377: FILE: include/linux/ktimer.h:143:
+                nsec += NSEC_PER_SEC;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#377: FILE: include/linux/ktimer.h:143:
+                nsec += NSEC_PER_SEC;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#379: FILE: include/linux/ktimer.h:145:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#379: FILE: include/linux/ktimer.h:145:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#381: FILE: include/linux/ktimer.h:147:
+                nsec -= NSEC_PER_SEC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#381: FILE: include/linux/ktimer.h:147:
+                nsec -= NSEC_PER_SEC;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#421: FILE: include/linux/ktimer.h:187:
+		unsigned long rem;
+		rem = do_div(nsec, NSEC_PER_SEC);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#424: FILE: include/linux/ktimer.h:190:
+	return ktime_add(a,tmp);
 	                  ^

CHECK:SPACING: No space is necessary after a cast
#457: FILE: include/linux/ktimer.h:223:
+	u64 nsecs = (u64) __kt.tv.sec * NSEC_PER_SEC;	\

CHECK:SPACING: No space is necessary after a cast
#458: FILE: include/linux/ktimer.h:224:
+	nsec_to_clock_t(nsecs + (u64) __kt.tv.nsec);	\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#461: FILE: include/linux/ktimer.h:227:
+#define ktime_to_ns(kt) ^I^I^I^I^I\$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#473: FILE: include/linux/ktimer.h:239:
+#define ktime_cmp(a,op,b) ((a) op (b))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#473: FILE: include/linux/ktimer.h:239:
+#define ktime_cmp(a,op,b) ((a) op (b))
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#473: FILE: include/linux/ktimer.h:239:
+#define ktime_cmp(a,op,b) ((a) op (b))
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#474: FILE: include/linux/ktimer.h:240:
+#define ktime_cmp_val(a,op,b) ((a) op b)
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#474: FILE: include/linux/ktimer.h:240:
+#define ktime_cmp_val(a,op,b) ((a) op b)
                           ^

CHECK:SPACING: No space is necessary after a cast
#476: FILE: include/linux/ktimer.h:242:
+#define ktime_set(s,n) (((s64) s * NSEC_PER_SEC) + (s64)n)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#476: FILE: include/linux/ktimer.h:242:
+#define ktime_set(s,n) (((s64) s * NSEC_PER_SEC) + (s64)n)
                    ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's' may be better as '(s)' to avoid precedence issues
#476: FILE: include/linux/ktimer.h:242:
+#define ktime_set(s,n) (((s64) s * NSEC_PER_SEC) + (s64)n)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#477: FILE: include/linux/ktimer.h:243:
+#define ktime_set_zero(kt) kt = 0LL

CHECK:SPACING: No space is necessary after a cast
#479: FILE: include/linux/ktimer.h:245:
+#define ktime_set_low_high(l,h) ((s64)((u64)l) | (((s64) h) << 32))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#479: FILE: include/linux/ktimer.h:245:
+#define ktime_set_low_high(l,h) ((s64)((u64)l) | (((s64) h) << 32))
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#484: FILE: include/linux/ktimer.h:250:
+#define ktime_sub(a,b)	((a) - (b))
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#485: FILE: include/linux/ktimer.h:251:
+#define ktime_add(a,b)	((a) + (b))
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#486: FILE: include/linux/ktimer.h:252:
+#define ktime_add_ns(a,b) ((a) + (b))
                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ts' - possible side-effects?
#488: FILE: include/linux/ktimer.h:254:
+#define timespec_to_ktime(ts) ktime_set(ts.tv_sec, ts.tv_nsec)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#497: FILE: include/linux/ktimer.h:263:
+#define ktime_set_normalized(s,n) ktime_set(s,n)
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#497: FILE: include/linux/ktimer.h:263:
+#define ktime_set_normalized(s,n) ktime_set(s,n)
                                              ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#502: FILE: include/linux/ktimer.h:268:
+extern void fastcall init_ktimer_real(struct ktimer *timer);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#503: FILE: include/linux/ktimer.h:269:
+extern void fastcall init_ktimer_mono(struct ktimer *timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#504: FILE: include/linux/ktimer.h:270:
+extern int modify_ktimer(struct ktimer *timer, ktime_t *tim, int mode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#505: FILE: include/linux/ktimer.h:271:
+extern int start_ktimer(struct ktimer *timer, ktime_t *tim, int mode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#506: FILE: include/linux/ktimer.h:272:
+extern int try_to_stop_ktimer(struct ktimer *timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#507: FILE: include/linux/ktimer.h:273:
+extern int stop_ktimer(struct ktimer *timer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#508: FILE: include/linux/ktimer.h:274:
+extern ktime_t get_remtime_ktimer(struct ktimer *timer, long fake);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#509: FILE: include/linux/ktimer.h:275:
+extern ktime_t get_expiry_ktimer(struct ktimer *timer, ktime_t *now);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#510: FILE: include/linux/ktimer.h:276:
+extern void __init init_ktimers(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#513: FILE: include/linux/ktimer.h:279:
+extern ktime_t ktimer_convert_timeval(struct ktimer *timer, struct timeval *tv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#514: FILE: include/linux/ktimer.h:280:
+extern ktime_t ktimer_convert_timespec(struct ktimer *timer, struct timespec *ts);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#517: FILE: include/linux/ktimer.h:283:
+extern int get_ktimer_mono_res(clockid_t which_clock, struct timespec *tp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#518: FILE: include/linux/ktimer.h:284:
+extern int get_ktimer_real_res(clockid_t which_clock, struct timespec *tp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#525: FILE: include/linux/ktimer.h:291:
+extern void wait_for_ktimer(struct ktimer *timer);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#530: FILE: include/linux/ktimer.h:296:
+#define KTIME_REALTIME_RES (NSEC_PER_SEC/HZ)
                                         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#531: FILE: include/linux/ktimer.h:297:
+#define KTIME_MONOTONIC_RES (NSEC_PER_SEC/HZ)
                                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#537: FILE: include/linux/ktimer.h:303:
+	struct timespec tomono;
+	do {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#543: FILE: include/linux/ktimer.h:309:
+
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#547: FILE: include/linux/ktimer.h:313:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#567: FILE: include/linux/ktimer.h:333:
+extern void run_ktimer_queues(void);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#604: FILE: include/linux/posix-timers.h:75:
+	int (*nsleep) (clockid_t which_clock, int flags, struct timespec *, struct timespec __user *);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: Unnecessary space before function pointer arguments
#604: FILE: include/linux/posix-timers.h:75:
+	int (*nsleep) (clockid_t which_clock, int flags, struct timespec *, struct timespec __user *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct timespec *' should also have an identifier name
#604: FILE: include/linux/posix-timers.h:75:
+	int (*nsleep) (clockid_t which_clock, int flags, struct timespec *, struct timespec __user *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct timespec __user *' should also have an identifier name
#604: FILE: include/linux/posix-timers.h:75:
+	int (*nsleep) (clockid_t which_clock, int flags, struct timespec *, struct timespec __user *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'clockid_t' should also have an identifier name
#613: FILE: include/linux/posix-timers.h:89:
+int do_posix_clock_nonanosleep(clockid_t, int flags, struct timespec *, struct timespec __user *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct timespec *' should also have an identifier name
#613: FILE: include/linux/posix-timers.h:89:
+int do_posix_clock_nonanosleep(clockid_t, int flags, struct timespec *, struct timespec __user *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct timespec __user *' should also have an identifier name
#613: FILE: include/linux/posix-timers.h:89:
+int do_posix_clock_nonanosleep(clockid_t, int flags, struct timespec *, struct timespec __user *);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#648: FILE: include/linux/posix-timers.h:105:
+	if (unlikely(ktime_cmp(delta, >, t->it.real.incr))) {
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#652: FILE: include/linux/posix-timers.h:109:
+		dclc = dns = ktime_to_ns(delta);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#653: FILE: include/linux/posix-timers.h:110:
+		div = inc = ktime_to_ns(t->it.real.incr);

ERROR:SPACING: space required before the open parenthesis '('
#655: FILE: include/linux/posix-timers.h:112:
+		while(div >> 32) {

CHECK:SPACING: No space is necessary after a cast
#660: FILE: include/linux/posix-timers.h:117:
+		do_div(dclc, (unsigned long) div);

CHECK:SPACING: No space is necessary after a cast
#661: FILE: include/linux/posix-timers.h:118:
+		orun = (unsigned long) dclc;

CHECK:SPACING: No space is necessary after a cast
#663: FILE: include/linux/posix-timers.h:120:
+			dclc *= (unsigned long) inc;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#696: FILE: include/linux/posix-timers.h:153:
+	if (unlikely(ktime_cmp(delta, >, t->it.real.incr))) {
+

WARNING:FUNCTION_ARGUMENTS: function definition argument 'clockid_t' should also have an identifier name
#729: FILE: include/linux/posix-timers.h:185:
+int posix_cpu_nsleep(clockid_t, int, struct timespec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#729: FILE: include/linux/posix-timers.h:185:
+int posix_cpu_nsleep(clockid_t, int, struct timespec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct timespec *' should also have an identifier name
#729: FILE: include/linux/posix-timers.h:185:
+int posix_cpu_nsleep(clockid_t, int, struct timespec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct timespec __user *' should also have an identifier name
#729: FILE: include/linux/posix-timers.h:185:
+int posix_cpu_nsleep(clockid_t, int, struct timespec *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#765: FILE: include/linux/timer.h:94:
+extern void it_real_fn(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#765: FILE: include/linux/timer.h:94:
+extern void it_real_fn(void *);

ERROR:CODE_INDENT: code indent should use tabs where possible
#803: FILE: kernel/exit.c:845:
+ ^I^Istop_ktimer(&tsk->signal->real_timer);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#803: FILE: kernel/exit.c:845:
+ ^I^Istop_ktimer(&tsk->signal->real_timer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#803: FILE: kernel/exit.c:845:
+ ^I^Istop_ktimer(&tsk->signal->real_timer);$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#937: FILE: kernel/itimer.c:122:
+			ovalue->it_value = ktime_to_timeval(

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#943: FILE: kernel/itimer.c:128:
+		if (ktime_cmp_val(expires, != , KTIME_ZERO))
 		                              ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#954: FILE: kernel/ktimers.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#955: FILE: kernel/ktimers.c:2:
+ *  linux/kernel/ktimers.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#991: FILE: kernel/ktimers.c:38:
+#include <asm/uaccess.h>

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#999: FILE: kernel/ktimers.c:46:
+static DEFINE_PER_CPU(struct ktimer_base, ktimer_bases[MAX_KTIMER_BASES]) =
+{

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1019: FILE: kernel/ktimers.c:66:
+#define set_running_timer(b,t) b->running_timer = t
                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1019: FILE: kernel/ktimers.c:66:
+#define set_running_timer(b,t) b->running_timer = t

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'b' may be better as '(b)' to avoid precedence issues
#1019: FILE: kernel/ktimers.c:66:
+#define set_running_timer(b,t) b->running_timer = t

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'b' may be better as '(b)' to avoid precedence issues
#1020: FILE: kernel/ktimers.c:67:
+#define wake_up_timer_waiters(b) wake_up(&b->wait_for_running_timer)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1047: FILE: kernel/ktimers.c:94:
+static inline struct ktimer_base *lock_ktimer_base(struct ktimer *timer,
+					    unsigned long *flags)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "base"
#1053: FILE: kernel/ktimers.c:100:
+		if (likely(base != NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1082: FILE: kernel/ktimers.c:129:
+			return base;
+		} else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1101: FILE: kernel/ktimers.c:148:
+	struct ktimer_base *base;
+	while (!(base = timer->base));

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1101: FILE: kernel/ktimers.c:148:
+	while (!(base = timer->base));

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1106: FILE: kernel/ktimers.c:153:
+#define set_running_timer(b,t) do {} while (0)
                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1110: FILE: kernel/ktimers.c:157:
+static inline struct ktimer_base *lock_ktimer_base(struct ktimer *timer,
+					    unsigned long *flags)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1121: FILE: kernel/ktimers.c:168:
+#define get_ktimer_base_unlocked(t) (t)->base

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1168: FILE: kernel/ktimers.c:215:
+static int enqueue_ktimer(struct ktimer *timer, struct ktimer_base *base,
+			   ktime_t *tim, int mode)

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1191: FILE: kernel/ktimers.c:238:
+		while ktime_cmp(timer->expires, <= , now) {

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1191: FILE: kernel/ktimers.c:238:
+		while ktime_cmp(timer->expires, <= , now) {
 		                                   ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1197: FILE: kernel/ktimers.c:244:
+		while ktime_cmp(timer->expires, <= , now) {

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1197: FILE: kernel/ktimers.c:244:
+		while ktime_cmp(timer->expires, <= , now) {
 		                                   ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1205: FILE: kernel/ktimers.c:252:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1209: FILE: kernel/ktimers.c:256:
+	if ktime_cmp(timer->expires, <=, now) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1224: FILE: kernel/ktimers.c:271:
+		if (ktimer_before(timer, entry))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1226: FILE: kernel/ktimers.c:273:
+		else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1255: FILE: kernel/ktimers.c:302:
+	BUG_ON(base->count < 0);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1280: FILE: kernel/ktimers.c:327:
+  ^Iunsigned long flags;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1280: FILE: kernel/ktimers.c:327:
+  ^Iunsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1280: FILE: kernel/ktimers.c:327:
+  ^Iunsigned long flags;$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1283: FILE: kernel/ktimers.c:330:
+	BUG_ON(!timer->function);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1313: FILE: kernel/ktimers.c:360:
+  ^IBUG_ON(!tim || !timer->function);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1313: FILE: kernel/ktimers.c:360:
+  ^IBUG_ON(!tim || !timer->function);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1313: FILE: kernel/ktimers.c:360:
+  ^IBUG_ON(!tim || !timer->function);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1313: FILE: kernel/ktimers.c:360:
+  	BUG_ON(!tim || !timer->function);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1325: FILE: kernel/ktimers.c:372:
+  ^IBUG_ON(ktimer_active(timer) || !timer->function);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1325: FILE: kernel/ktimers.c:372:
+  ^IBUG_ON(ktimer_active(timer) || !timer->function);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1325: FILE: kernel/ktimers.c:372:
+  ^IBUG_ON(ktimer_active(timer) || !timer->function);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1325: FILE: kernel/ktimers.c:372:
+  	BUG_ON(ktimer_active(timer) || !timer->function);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1351: FILE: kernel/ktimers.c:398:
+
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#1362: FILE: kernel/ktimers.c:409:
+		int ret = try_to_stop_ktimer(timer);
+		if (ret >= 0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1382: FILE: kernel/ktimers.c:429:
+		rem = ktime_sub(timer->expires,base->get_time());
 		                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1387: FILE: kernel/ktimers.c:434:
+			rem = ktime_sub(timer->expires,base->get_time());
 			                              ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1497: FILE: kernel/ktimers.c:544:
+		void (*fn)(void *);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1509: FILE: kernel/ktimers.c:556:
+ ^I^Ifn(data);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1509: FILE: kernel/ktimers.c:556:
+ ^I^Ifn(data);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1509: FILE: kernel/ktimers.c:556:
+ ^I^Ifn(data);$

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1532: FILE: kernel/ktimers.c:579:
+static void __devinit init_ktimers_cpu(int cpu)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1560: FILE: kernel/ktimers.c:607:
+static void __devinit migrate_ktimers(int cpu)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1566: FILE: kernel/ktimers.c:613:
+	BUG_ON(cpu_online(cpu));

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1573: FILE: kernel/ktimers.c:620:
+	for (i = 0; i < MAX_KTIMER_BASES; i++) {
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1578: FILE: kernel/ktimers.c:625:
+			BUG();

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1593: FILE: kernel/ktimers.c:640:
+static int __devinit ktimer_cpu_notify(struct notifier_block *self,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1597: FILE: kernel/ktimers.c:644:
+	long cpu = (long)hcpu;
+	switch(action) {

ERROR:SPACING: space required before the open parenthesis '('
#1597: FILE: kernel/ktimers.c:644:
+	switch(action) {

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#1612: FILE: kernel/ktimers.c:659:
+static struct notifier_block __devinitdata ktimers_nb = {

WARNING:MISPLACED_INIT: __devinitdata should be placed after ktimers_nb
#1612: FILE: kernel/ktimers.c:659:
+static struct notifier_block __devinitdata ktimers_nb = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1619: FILE: kernel/ktimers.c:666:
+	ktimer_cpu_notify(&ktimers_nb, (unsigned long)CPU_UP_PREPARE,
+				(void *)(long)smp_processor_id());

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1654: FILE: kernel/ktimers.c:701:
+static fastcall ktime_t __sched schedule_ktimer(struct ktimer *timer,
+					ktime_t *t, int state, int mode)

CHECK:SPACING: No space is necessary after a cast
#1680: FILE: kernel/ktimers.c:727:
+	struct timespec __user *rmtp = (struct timespec __user *) restart->arg2;

CHECK:SPACING: No space is necessary after a cast
#1741: FILE: kernel/ktimers.c:788:
+	restart->arg2 = (unsigned long) rmtp;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1744: FILE: kernel/ktimers.c:791:
+
+}

CHECK:SPACING: No space is necessary after a cast
#1811: FILE: kernel/posix-cpu-timers.c:1475:
+		restart_block->arg1 = (unsigned long) rmtp;

CHECK:SPACING: No space is necessary after a cast
#1824: FILE: kernel/posix-cpu-timers.c:1492:
+	rmtp = (struct timespec __user *) restart_block->arg1;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2113: FILE: kernel/posix-timers.c:289:
+	timr->it.real.overrun = timr->it.real.timer.overrun = -1;

WARNING:TYPO_SPELLING: 'Thats' may be misspelled - perhaps 'That's'?
#2266: FILE: kernel/posix-timers.c:667:
+	 * automatically by the ktimer REARM mode. Thats the next
 	                                           ^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2694: FILE: kernel/posix-timers.c:1008:
+		/* Posix madness. Only absolute timers on clock realtime
+		   are affected by clock set. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2694: FILE: kernel/posix-timers.c:1008:
+		   are affected by clock set. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#2929: FILE: kernel/timer.c:915:
+ ^Irun_ktimer_queues();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2929: FILE: kernel/timer.c:915:
+ ^Irun_ktimer_queues();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2929: FILE: kernel/timer.c:915:
+ ^Irun_ktimer_queues();$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ts' - possible side-effects?
#3012: FILE: include/linux/time.h:42:
+#define timespec_valid(ts) \
+(((ts)->tv_sec >= 0) && (((unsigned) (ts)->tv_nsec) < NSEC_PER_SEC))

CHECK:SPACING: No space is necessary after a cast
#3013: FILE: include/linux/time.h:43:
+(((ts)->tv_sec >= 0) && (((unsigned) (ts)->tv_nsec) < NSEC_PER_SEC))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3013: FILE: include/linux/time.h:43:
+(((ts)->tv_sec >= 0) && (((unsigned) (ts)->tv_nsec) < NSEC_PER_SEC))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3026: FILE: include/linux/time.h:97:
+extern void do_posix_clock_monotonic_gettime(struct timespec *ts);

WARNING:INLINE: plain inline is preferred over __inline__
#3034: FILE: include/linux/time.h:121:
+static __inline__ nsec_t timespec_to_ns(struct timespec *s)

CHECK:SPACING: No space is necessary after a cast
#3036: FILE: include/linux/time.h:123:
+	nsec_t res = (nsec_t) s->tv_sec * NSEC_PER_SEC;

CHECK:SPACING: No space is necessary after a cast
#3037: FILE: include/linux/time.h:124:
+	return res + (nsec_t) s->tv_nsec;

WARNING:LINE_SPACING: Missing a blank line after declarations
#3037: FILE: include/linux/time.h:124:
+	nsec_t res = (nsec_t) s->tv_sec * NSEC_PER_SEC;
+	return res + (nsec_t) s->tv_nsec;

WARNING:INLINE: plain inline is preferred over __inline__
#3040: FILE: include/linux/time.h:127:
+static __inline__ struct timespec ns_to_timespec(nsec_t n)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3047: FILE: include/linux/time.h:134:
+		ts.tv_sec = ts.tv_nsec = 0;

WARNING:INLINE: plain inline is preferred over __inline__
#3051: FILE: include/linux/time.h:138:
+static __inline__ nsec_t timeval_to_ns(struct timeval *s)

CHECK:SPACING: No space is necessary after a cast
#3053: FILE: include/linux/time.h:140:
+	nsec_t res = (nsec_t) s->tv_sec * NSEC_PER_SEC;

CHECK:SPACING: No space is necessary after a cast
#3054: FILE: include/linux/time.h:141:
+	return res + (nsec_t) s->tv_usec * NSEC_PER_USEC;

WARNING:LINE_SPACING: Missing a blank line after declarations
#3054: FILE: include/linux/time.h:141:
+	nsec_t res = (nsec_t) s->tv_sec * NSEC_PER_SEC;
+	return res + (nsec_t) s->tv_usec * NSEC_PER_USEC;

WARNING:INLINE: plain inline is preferred over __inline__
#3057: FILE: include/linux/time.h:144:
+static __inline__ struct timeval ns_to_timeval(nsec_t n)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3060: FILE: include/linux/time.h:147:
+	struct timeval tv;
+	if (n) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#3060: FILE: include/linux/time.h:147:
+	if (n) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3063: FILE: include/linux/time.h:150:
+	} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3064: FILE: include/linux/time.h:151:
+		tv.tv_sec = tv.tv_usec = 0;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3078: FILE: include/linux/time.h:188:
+#define CLOCK_MONOTONIC^I  ^I 1$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000147499.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 50 errors, 80 warnings, 69 checks, 2862 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000147499.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
