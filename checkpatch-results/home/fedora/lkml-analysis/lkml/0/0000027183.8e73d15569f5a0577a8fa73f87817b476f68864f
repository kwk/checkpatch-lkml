WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
Reimplement execvp for our purposes - after we call fork() it is fundamentally

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#64: FILE: arch/um/include/os.h:237:
+extern int execvp_noalloc(char *buf, const char *file, char *const argv[]);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#97: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#102: FILE: arch/um/os-Linux/execvp.c:1:
+/* Copyright (C) 2006 by Paolo Giarrusso - modified from glibc' execvp.c.

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#103: FILE: arch/um/os-Linux/execvp.c:2:
+/* Copyright (C) 2006 by Paolo Giarrusso - modified from glibc' execvp.c.
+   Original copyright notice follows:

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#119: FILE: arch/um/os-Linux/execvp.c:18:
+   License along with the GNU C Library; if not, write to the Free$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#120: FILE: arch/um/os-Linux/execvp.c:19:
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#121: FILE: arch/um/os-Linux/execvp.c:20:
+   02111-1307 USA.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#139: FILE: arch/um/os-Linux/execvp.c:38:
+/* Execute FILE, searching in the `PATH' environment variable if it contains
+   no slashes, with arguments ARGV and environment from `environ'.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#139: FILE: arch/um/os-Linux/execvp.c:38:
+   no slashes, with arguments ARGV and environment from `environ'.  */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#142: FILE: arch/um/os-Linux/execvp.c:41:
+	if (*file == '\0') {
+		return -ENOENT;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#146: FILE: arch/um/os-Linux/execvp.c:45:
+	if (strchr (file, '/') != NULL) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "strchr"
#146: FILE: arch/um/os-Linux/execvp.c:45:
+	if (strchr (file, '/') != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#154: FILE: arch/um/os-Linux/execvp.c:53:
+		char *path = getenv("PATH");
+		if (path == NULL)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path"
#154: FILE: arch/um/os-Linux/execvp.c:53:
+		if (path == NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#178: FILE: arch/um/os-Linux/execvp.c:77:
+				/* Two adjacent colons, or a colon at the beginning or the end
+				   of `PATH' means to search the current directory.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#178: FILE: arch/um/os-Linux/execvp.c:77:
+				   of `PATH' means to search the current directory.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#187: FILE: arch/um/os-Linux/execvp.c:86:
+			/*
+			if (errno == ENOEXEC) {

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#191: FILE: arch/um/os-Linux/execvp.c:90:
+			switch (errno) {
+				case EACCES:
[...]
+				case ENOENT:
+				case ESTALE:
+				case ENOTDIR:
[...]
+				case ENODEV:
+				case ETIMEDOUT:
[...]
+				case ENOEXEC:
[...]
+				default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#194: FILE: arch/um/os-Linux/execvp.c:93:
+					/* Record the we got a `Permission denied' error.  If we end
+					   up finding no executable we can use, we want to diagnose

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#195: FILE: arch/um/os-Linux/execvp.c:94:
+					   that we did find one but were denied access.  */

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#200: FILE: arch/um/os-Linux/execvp.c:99:
+					/* Those errors indicate the file is missing or not executable

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#201: FILE: arch/um/os-Linux/execvp.c:100:
+					/* Those errors indicate the file is missing or not executable
+					   by us, in which case we want to just try the next path

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#202: FILE: arch/um/os-Linux/execvp.c:101:
+					   directory.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#206: FILE: arch/um/os-Linux/execvp.c:105:
+					/* Some strange filesystems like AFS return even
+					   stranger error numbers.  They cannot reasonably mean

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#207: FILE: arch/um/os-Linux/execvp.c:106:
+					   anything else so ignore those, too.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#212: FILE: arch/um/os-Linux/execvp.c:111:
+					 * for us. */

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#217: FILE: arch/um/os-Linux/execvp.c:116:
+					   something went wrong executing it; return the error to our

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#217: FILE: arch/um/os-Linux/execvp.c:116:
+					/* Some other error means we found an executable file, but
+					   something went wrong executing it; return the error to our

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#218: FILE: arch/um/os-Linux/execvp.c:117:
+					   caller.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#226: FILE: arch/um/os-Linux/execvp.c:125:
+			/* At least one failure was due to permissions, so report that
+			   error.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#226: FILE: arch/um/os-Linux/execvp.c:125:
+			   error.  */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#233: FILE: arch/um/os-Linux/execvp.c:132:
+}
+#ifdef TEST

ERROR:POINTER_LOCATION: "foo**bar" should be "foo **bar"
#234: FILE: arch/um/os-Linux/execvp.c:133:
+int main(int argc, char**argv)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#238: FILE: arch/um/os-Linux/execvp.c:137:
+	int ret;
+	argc--;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#244: FILE: arch/um/os-Linux/execvp.c:143:
+	if (ret = execvp_noalloc(buf, argv[0], argv)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#285: FILE: arch/um/os-Linux/helper.c:48:
+	printk("helper_child - execvp of '%s' failed - errno = %d\n", argv[0], -errval);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'helper_child', this function's name, in a string
#285: FILE: arch/um/os-Linux/helper.c:48:
+	printk("helper_child - execvp of '%s' failed - errno = %d\n", argv[0], -errval);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000027183.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 29 warnings, 4 checks, 232 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000027183.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
