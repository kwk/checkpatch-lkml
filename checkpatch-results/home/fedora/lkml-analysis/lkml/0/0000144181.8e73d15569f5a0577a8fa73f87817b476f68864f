WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
This patch implements fallback logic. In the event there is no 2^(MAX_ORDER-1)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#74: FILE: include/linux/mmzone.h:286:
+static inline void inc_reserve_count(struct zone* zone, int type)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#80: FILE: include/linux/mmzone.h:292:
+static inline void dec_reserve_count(struct zone* zone, int type)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#98: FILE: mm/page_alloc.c:59:
+int fallback_allocs[RCLM_TYPES][RCLM_TYPES+1] = {
                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#115: FILE: mm/page_alloc.c:76:
+static inline int min_fallback_reserved(struct zone *zone) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#136: FILE: mm/page_alloc.c:441:
+	if (unlikely(order == MAX_ORDER-1))
 	                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#158: FILE: mm/page_alloc.c:639:
+	if (unlikely(current_order == MAX_ORDER-1))
 	                                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#175: FILE: mm/page_alloc.c:656:
+fallback_buddy_reserve(int start_alloctype, struct zone *zone,
+			unsigned int current_order, struct page *page,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_lists[RCLM_NORCLM][current_order]
#181: FILE: mm/page_alloc.c:662:
+	area = &(zone->free_area_lists[RCLM_NORCLM][current_order]);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LINE_SPACING: Missing a blank line after declarations
#186: FILE: mm/page_alloc.c:667:
+		int reserve_type = RCLM_NORCLM;
+		dec_reserve_count(zone, get_pageblock_type(zone,page));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#186: FILE: mm/page_alloc.c:667:
+		dec_reserve_count(zone, get_pageblock_type(zone,page));
 		                                               ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#212: FILE: mm/page_alloc.c:693:
+	BUG_ON(alloctype >= RCLM_TYPES);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#224: FILE: mm/page_alloc.c:705:
+		area = &(zone->free_area_lists[alloctype][MAX_ORDER-1]);
 		                                                   ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_lists[alloctype][MAX_ORDER-1]
#224: FILE: mm/page_alloc.c:705:
+		area = &(zone->free_area_lists[alloctype][MAX_ORDER-1]);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#230: FILE: mm/page_alloc.c:711:
+^I^I^Ipage = list_entry(area->free_list.next, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#231: FILE: mm/page_alloc.c:712:
+			page = list_entry(area->free_list.next, 
+						struct page, lru);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#234: FILE: mm/page_alloc.c:715:
+			area = fallback_buddy_reserve(start_alloctype, zone,
+					current_order, page, area);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#238: FILE: mm/page_alloc.c:719:
+
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#264: FILE: mm/page_alloc.c:2233:
+		zone->fallback_balance = -(realsize >> (MAX_ORDER+2));
 		                                                 ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000144181.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 3 warnings, 11 checks, 209 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000144181.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
