WARNING:TYPO_SPELLING: 'incomming' may be misspelled - perhaps 'incoming'?
#44: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3247:
+ * This is called from ipath_qp_rcv() to process an incomming UC packet
                                                     ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#75: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3278:
+		psn = be32_to_cpu(((u32 *) data)[0]);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#82: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3285:
+	opcode = *(u8 *) (&ohdr->bth[0]);

WARNING:INDENTED_LABEL: labels should not be indented
#96: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3299:
+	      inv:

WARNING:INDENTED_LABEL: labels should not be indented
#149: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3352:
+	      send_first:

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#164: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3367:
+		/* FALLTHROUGH */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:INDENTED_LABEL: labels should not be indented
#182: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3385:
+	      send_last_imm:

CHECK:SPACING: No space is necessary after a cast
#184: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3387:
+			wc.imm_data = *(u32 *) data;

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#192: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3395:
+		/* FALLTHROUGH */

WARNING:INDENTED_LABEL: labels should not be indented
#194: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3397:
+	      send_last:

WARNING:INDENTED_LABEL: labels should not be indented
#213: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3416:
+	      last_imm:

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_be32 should be cpu_to_be32
#228: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3431:
+			       ohdr->bth[0] & __constant_cpu_to_be32(1 << 23));

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

WARNING:INDENTED_LABEL: labels should not be indented
#234: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3437:
+	      rdma_first:

CHECK:BRACES: braces {} should be used on all arms of this statement
#236: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3439:
+		if (!has_grh)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#238: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3441:
+		else {

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#271: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3474:
+		/* FALLTHROUGH */

WARNING:INDENTED_LABEL: labels should not be indented
#287: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3490:
+	      rdma_last_imm:

CHECK:SPACING: No space is necessary after a cast
#309: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3512:
+			wc.imm_data = *(u32 *) data;

WARNING:INDENTED_LABEL: labels should not be indented
#321: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3524:
+	      rdma_last:

CHECK:BRACES: braces {} should be used on all arms of this statement
#363: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3566:
+	if (list_empty(&dev->rnrwait))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#365: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3568:
+	else {

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#438: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3641:
+		/* FALLTHROUGH */

WARNING:INDENTED_LABEL: labels should not be indented
#442: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3645:
+		      rnr_nak:

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#468: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3671:
+		/* FALLTHROUGH */

WARNING:INDENTED_LABEL: labels should not be indented
#476: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3679:
+		      acc_err:

WARNING:INDENTED_LABEL: labels should not be indented
#478: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3681:
+		      err:

CHECK:SPACING: No space is necessary after a cast
#520: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3723:
+		qp->r_atomic_data = *(u64 *) qp->r_sge.sge.vaddr;

CHECK:SPACING: No space is necessary after a cast
#522: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3725:
+			*(u64 *) qp->r_sge.sge.vaddr =

CHECK:SPACING: No space is necessary after a cast
#525: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3728:
+			*(u64 *) qp->r_sge.sge.vaddr = sdata;

CHECK:SPACING: No space is necessary after a cast
#528: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3731:
+		*(u64 *) sqp->s_sge.sge.vaddr = qp->r_atomic_data;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#541: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3744:
+		BUG_ON(len == 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sge->mr"
#549: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3752:
+		} else if (sge->length == 0 && sge->mr != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#630: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3833:
+		qp->s_lsn = (u32) -1;

CHECK:SPACING: No space is necessary after a cast
#631: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3834:
+	} else if (qp->s_lsn != (u32) -1) {

CHECK:SPACING: No space is necessary after a cast
#640: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3843:
+	    (qp->s_lsn == (u32) -1 ||

WARNING:TYPO_SPELLING: 'incomming' may be misspelled - perhaps 'incoming'?
#647: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:3850:
+ * This is called from ipath_rc_rcv() to process an incomming RC ACK
                                                     ^^^^^^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#871: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4074:
+			if (cmp24(psn, wqe->psn) < 0) {
+				break;
+			}

WARNING:INDENTED_LABEL: labels should not be indented
#891: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4094:
+		      class_b:

WARNING:INDENTED_LABEL: labels should not be indented
#914: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4117:
+	      reserved:

WARNING:TYPO_SPELLING: 'incomming' may be misspelled - perhaps 'incoming'?
#921: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4124:
+ * This is called from ipath_qp_rcv() to process an incomming RC packet
                                                     ^^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#953: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4156:
+		psn = be32_to_cpu(((u32 *) data)[0]);

CHECK:SPACING: No space is necessary after a cast
#960: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4163:
+	opcode = *(u8 *) (&ohdr->bth[0]);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#971: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4174:
+	    opcode <= IB_OPCODE_RC_ATOMIC_ACKNOWLEDGE) {
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#975: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4178:
+		if (cmp24(psn, qp->s_next_psn) >= 0) {
+			goto ack_done;
+		}

CHECK:SPACING: No space is necessary after a cast
#987: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4190:
+					pad = be32_to_cpu(((u32 *) data)[0]);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#990: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4193:
+				if ((pad >> 29) == 0) {
+					ipath_get_credit(qp, pad);
+				}

CHECK:SPACING: No space is necessary after a cast
#1004: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4207:
+				pad = be32_to_cpu(((u32 *) data)[0]);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1007: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4210:
+			if (opcode == IB_OPCODE_RC_ATOMIC_ACKNOWLEDGE) {
+				*(u64 *) qp->s_sge.sge.vaddr = *(u64 *) data;
+			}

CHECK:SPACING: No space is necessary after a cast
#1008: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4211:
+				*(u64 *) qp->s_sge.sge.vaddr = *(u64 *) data;

WARNING:INDENTED_LABEL: labels should not be indented
#1028: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4231:
+		      rdma_read:

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'dev->pending_index'
#1046: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4249:
+					       &dev->pending[dev->
+							     pending_index]);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1068: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4271:
+			/* FALLTHROUGH */

CHECK:SPACING: No space is necessary after a cast
#1093: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4296:
+				pad = be32_to_cpu(((u32 *) data)[0]);

WARNING:INDENTED_LABEL: labels should not be indented
#1107: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4310:
+	      ack_done:

CHECK:BRACES: braces {} should be used on all arms of this statement
#1173: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4376:
+			if (!has_grh)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1175: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4378:
+			else {

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1189: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4392:
+				if (unlikely(!ipath_rkey_ok(dev,
+							    &qp->s_rdma_sge,
+							    qp->s_rdma_len,
+							    vaddr, rkey,
+							    IB_ACCESS_REMOTE_READ)))
+				{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:INDENTED_LABEL: labels should not be indented
#1234: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4437:
+	      nack_inv:

WARNING:INDENTED_LABEL: labels should not be indented
#1294: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4497:
+		      rnr_nak:

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1312: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4515:
+		/* FALLTHROUGH */

WARNING:INDENTED_LABEL: labels should not be indented
#1315: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4518:
+	      send_middle:

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1317: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4520:
+		if (unlikely(tlen != (hdrsize + pmtu + 4))) {
+			goto nack_inv;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1321: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4524:
+		if (unlikely(qp->r_rcv_len > qp->r_len)) {
+			goto nack_inv;
+		}

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1340: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4543:
+		/* FALLTHROUGH */

WARNING:INDENTED_LABEL: labels should not be indented
#1342: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4545:
+	      send_last_imm:

CHECK:SPACING: No space is necessary after a cast
#1344: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4547:
+			wc.imm_data = *(u32 *) data;

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1352: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4555:
+		/* FALLTHROUGH */

WARNING:INDENTED_LABEL: labels should not be indented
#1355: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4558:
+	      send_last:

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1360: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4563:
+		if (unlikely(tlen < (hdrsize + pad + 4))) {
+			goto nack_inv;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1366: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4569:
+		if (unlikely(wc.byte_len > qp->r_len)) {
+			goto nack_inv;
+		}

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_be32 should be cpu_to_be32
#1388: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4591:
+			       ohdr->bth[0] & __constant_cpu_to_be32(1 << 23));

CHECK:BRACES: braces {} should be used on all arms of this statement
#1396: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4599:
+		if (!has_grh)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1398: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4601:
+		else {

WARNING:INDENTED_LABEL: labels should not be indented
#1413: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4616:
+			      nack_acc:

CHECK:BRACES: braces {} should be used on all arms of this statement
#1453: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4656:
+		if (!has_grh)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1455: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4658:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1514: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4717:
+			if (!has_grh)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1516: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4719:
+			else {

CHECK:SPACING: No space is necessary after a cast
#1536: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4739:
+			qp->r_atomic_data = *(u64 *) qp->r_sge.sge.vaddr;

CHECK:SPACING: No space is necessary after a cast
#1538: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4741:
+				*(u64 *) qp->r_sge.sge.vaddr =

CHECK:SPACING: No space is necessary after a cast
#1542: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4745:
+				*(u64 *) qp->r_sge.sge.vaddr = sdata;

WARNING:TYPO_SPELLING: 'incomming' may be misspelled - perhaps 'incoming'?
#1595: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4798:
+ * This is called from ipath_ib_rcv() to process an incomming packet
                                                     ^^^^^^^^^

WARNING:TYPO_SPELLING: 'incomming' may be misspelled - perhaps 'incoming'?
#1630: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4833:
+ * This is called from ipath_kreceive() to process an incomming packet at
                                                       ^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#1643: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4846:
+	if (dev == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1653: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4856:
+	if (lnh == IPS_LRH_BTH)
[...]
+	else if (lnh == IPS_LRH_GRH)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1657: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4860:
+	else {

CHECK:SPACING: No space is necessary after a cast
#1662: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4865:
+	opcode = *(u8 *) (&ohdr->bth[0]);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1668: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4871:
+	if (qp_num == 0xFFFFFF) {
[...]
+	} else if ((qp = ipath_lookup_qpn(&dev->qp_table, qp_num)) != NULL) {
[...]
+	} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mcast"
#1673: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4876:
+		if (mcast == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1687: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4890:
+	} else if ((qp = ipath_lookup_qpn(&dev->qp_table, qp_num)) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: Unbalanced braces around else statement
#1694: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4897:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#1711: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4914:
+	if (dev == NULL)

CHECK:SPACING: No space is necessary after a cast
#1728: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4931:
+			qp->timerwait.prev = (struct list_head *) resend;

CHECK:SPACING: No space is necessary after a cast
#1745: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4948:
+				qp->timerwait.prev = (struct list_head *) rnr;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "qp"
#1782: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4985:
+	for (qp = resend; qp != NULL;

CHECK:SPACING: No space is necessary after a cast
#1783: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:4986:
+	     qp = (struct ipath_qp *) qp->timerwait.prev) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "qp"
#1797: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5000:
+	for (qp = rnr; qp != NULL;

CHECK:SPACING: No space is necessary after a cast
#1798: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5001:
+	     qp = (struct ipath_qp *) qp->timerwait.prev) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#1816: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5019:
+	if (dev == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!swq"
#1850: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5053:
+		if (swq == NULL)

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1852: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5055:
+		/* FALLTHROUGH */

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1908: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5111:
+		return ERR_PTR(-ENOSYS);

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:SPACING: No space is necessary after a cast
#2045: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5248:
+			p = (struct ipath_rwqe *)((char *) p + sz);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2154: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5357:
+	uint32_t vendor, boardrev, majrev, minrev;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2199: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5402:
+	uint32_t flags = ipath_layer_get_flags(dev->ib_unit);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2201: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5404:
+	uint32_t l;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#2202: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5405:
+	uint16_t lid = ipath_layer_get_lid(dev->ib_unit);

WARNING:SIZEOF_PARENTHESIS: sizeof *pd should be sizeof(*pd)
#2315: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5518:
+	pd = kmalloc(sizeof *pd, GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "udata"
#2320: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5523:
+	pd->user = udata != NULL;

WARNING:SIZEOF_PARENTHESIS: sizeof *ah should be sizeof(*ah)
#2342: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5545:
+	ah = kmalloc(sizeof *ah, GFP_ATOMIC);

WARNING:SIZEOF_PARENTHESIS: sizeof *mr should be sizeof(*mr)
#2368: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5571:
+	mr = kmalloc(sizeof *mr, GFP_KERNEL);

WARNING:SIZEOF_PARENTHESIS: sizeof *mr should be sizeof(*mr)
#2373: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5576:
+	memset(mr, 0, sizeof *mr);

WARNING:SIZEOF_PARENTHESIS: sizeof *mr should be sizeof(*mr)
#2388: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5591:
+	mr = kmalloc(sizeof *mr + m * sizeof mr->mr.map[0], GFP_KERNEL);

WARNING:SIZEOF_PARENTHESIS: sizeof *mr->mr.map[0] should be sizeof(*mr->mr.map[0])
#2394: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5597:
+		mr->mr.map[i] = kmalloc(sizeof *mr->mr.map[0], GFP_KERNEL);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2414: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5617:
+	mr->ibmr.rkey = mr->ibmr.lkey = mr->mr.lkey;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#2446: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5649:
+	list_for_each_entry(chunk, &region->chunk_list, list)
+	    n += chunk->nents;

WARNING:SIZEOF_PARENTHESIS: sizeof *mr should be sizeof(*mr)
#2451: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5654:
+	mr = kmalloc(sizeof *mr + m * sizeof mr->mr.map[0], GFP_KERNEL);

WARNING:SIZEOF_PARENTHESIS: sizeof *mr->mr.map[0] should be sizeof(*mr->mr.map[0])
#2457: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5660:
+		mr->mr.map[i] = kmalloc(sizeof *mr->mr.map[0], GFP_KERNEL);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2477: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5680:
+	mr->ibmr.rkey = mr->ibmr.lkey = mr->mr.lkey;

WARNING:SIZEOF_PARENTHESIS: sizeof *fmr should be sizeof(*fmr)
#2526: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5729:
+	fmr = kmalloc(sizeof *fmr + m * sizeof fmr->mr.map[0], GFP_KERNEL);

WARNING:SIZEOF_PARENTHESIS: sizeof *fmr->mr.map[0] should be sizeof(*fmr->mr.map[0])
#2532: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5735:
+		fmr->mr.map[i] = kmalloc(sizeof *fmr->mr.map[0], GFP_KERNEL);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2549: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5752:
+	fmr->ibfmr.rkey = fmr->ibfmr.lkey = fmr->mr.lkey;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2566: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5769:
+			      u64 * page_list, int list_len, u64 iova)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2696: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5899:
+static CLASS_DEVICE_ATTR(hw_rev, S_IRUGO, show_rev, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2697: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5900:
+static CLASS_DEVICE_ATTR(hca_type, S_IRUGO, show_hca, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2698: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5901:
+static CLASS_DEVICE_ATTR(board_id, S_IRUGO, show_board, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2699: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5902:
+static CLASS_DEVICE_ATTR(stats, S_IRUGO, show_stats, NULL);

WARNING:SIZEOF_PARENTHESIS: sizeof *context should be sizeof(*context)
#2717: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5920:
+	context = kmalloc(sizeof *context, GFP_KERNEL);

WARNING:SIZEOF_PARENTHESIS: sizeof *idev should be sizeof(*idev)
#2740: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5943:
+	idev = (struct ipath_ibdev *)ib_alloc_device(sizeof *idev);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!idev"
#2741: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5944:
+	if (idev == NULL)

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_be64 should be cpu_to_be64
#2750: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5953:
+	idev->gid_prefix = __constant_cpu_to_be64(0xfe80000000000000UL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#2754: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5957:
+	idev->qp_table.table = kmalloc(idev->qp_table.max *
+				       sizeof(*idev->qp_table.table),
+				       GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!idev->qp_table.table"
#2757: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5960:
+	if (idev->qp_table.table == NULL) {

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#2773: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5976:
+	idev->lk_table.table = kmalloc(idev->lk_table.max *
+				       sizeof(*idev->lk_table.table),
+				       GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!idev->lk_table.table"
#2776: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:5979:
+	if (idev->lk_table.table == NULL) {

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#2806: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:6009:
+	strlcpy(dev->name, "ipath%d", IB_DEVICE_NAME_MAX);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mcast_tree.rb_node"
#2918: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:6121:
+	if (mcast_tree.rb_node != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ipath_devices"
#2938: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:6141:
+	if (ipath_devices == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#2945: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:6148:
+		if (ret == 0)
[...]
+		else if ((ret = ipath_register_ib_device(i)) != 0) {
[...]

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2947: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:6150:
+		else if ((ret = ipath_register_ib_device(i)) != 0) {

WARNING:SPLIT_STRING: quoted string split across lines
#2949: FILE: drivers/infiniband/hw/ipath/ipath_verbs.c:6152:
+			_VERBS_ERROR("ib_ipath%d cannot register ib device "
+				     "(%d)!\n", i, ret);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000124509.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 71 warnings, 66 checks, 2934 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000124509.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
