WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#159: FILE: char/ipmi/ipmi_msghandler.c:174:
+	/* The event receiver for my BMC, only really used at panic
+	   shutdown as a place to store this. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#159: FILE: char/ipmi/ipmi_msghandler.c:174:
+	   shutdown as a place to store this. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#166: FILE: char/ipmi/ipmi_msghandler.c:181:
+	/* A cheap hack, if this is non-null and a message to an
+	   interface comes in with a NULL user, call this routine with

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#168: FILE: char/ipmi/ipmi_msghandler.c:183:
+	   caller.  This only works on the system interface. */

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#188: FILE: char/ipmi/ipmi_msghandler.c:1752:
+#define IPMI_TIMEOUT_JIFFIES	((IPMI_TIMEOUT_TIME * HZ)/1000)
                             	                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#200: FILE: char/ipmi/ipmi_msghandler.c:1835:
+	if ((msg->rsp[0] == (IPMI_NETFN_SENSOR_EVENT_RESPONSE << 2))
+	    && (msg->rsp[1] == IPMI_GET_EVENT_RECEIVER_CMD)
+	    && (msg->rsp[2] == IPMI_CC_NO_ERROR))
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msg->rsp[1] == IPMI_GET_EVENT_RECEIVER_CMD'
#200: FILE: char/ipmi/ipmi_msghandler.c:1835:
+	if ((msg->rsp[0] == (IPMI_NETFN_SENSOR_EVENT_RESPONSE << 2))
+	    && (msg->rsp[1] == IPMI_GET_EVENT_RECEIVER_CMD)
+	    && (msg->rsp[2] == IPMI_CC_NO_ERROR))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msg->rsp[2] == IPMI_CC_NO_ERROR'
#200: FILE: char/ipmi/ipmi_msghandler.c:1835:
+	if ((msg->rsp[0] == (IPMI_NETFN_SENSOR_EVENT_RESPONSE << 2))
+	    && (msg->rsp[1] == IPMI_GET_EVENT_RECEIVER_CMD)
+	    && (msg->rsp[2] == IPMI_CC_NO_ERROR))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#201: FILE: char/ipmi/ipmi_msghandler.c:1836:
+	if ((msg->rsp[0] == (IPMI_NETFN_SENSOR_EVENT_RESPONSE << 2))
+	    && (msg->rsp[1] == IPMI_GET_EVENT_RECEIVER_CMD)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#202: FILE: char/ipmi/ipmi_msghandler.c:1837:
+	    && (msg->rsp[1] == IPMI_GET_EVENT_RECEIVER_CMD)
+	    && (msg->rsp[2] == IPMI_CC_NO_ERROR))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#212: FILE: char/ipmi/ipmi_msghandler.c:1847:
+	if ((msg->rsp[0] == (IPMI_NETFN_APP_RESPONSE << 2))
+	    && (msg->rsp[1] == IPMI_GET_DEVICE_ID_CMD)
+	    && (msg->rsp[2] == IPMI_CC_NO_ERROR))
+	{

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msg->rsp[1] == IPMI_GET_DEVICE_ID_CMD'
#212: FILE: char/ipmi/ipmi_msghandler.c:1847:
+	if ((msg->rsp[0] == (IPMI_NETFN_APP_RESPONSE << 2))
+	    && (msg->rsp[1] == IPMI_GET_DEVICE_ID_CMD)
+	    && (msg->rsp[2] == IPMI_CC_NO_ERROR))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msg->rsp[2] == IPMI_CC_NO_ERROR'
#212: FILE: char/ipmi/ipmi_msghandler.c:1847:
+	if ((msg->rsp[0] == (IPMI_NETFN_APP_RESPONSE << 2))
+	    && (msg->rsp[1] == IPMI_GET_DEVICE_ID_CMD)
+	    && (msg->rsp[2] == IPMI_CC_NO_ERROR))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#213: FILE: char/ipmi/ipmi_msghandler.c:1848:
+	if ((msg->rsp[0] == (IPMI_NETFN_APP_RESPONSE << 2))
+	    && (msg->rsp[1] == IPMI_GET_DEVICE_ID_CMD)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#214: FILE: char/ipmi/ipmi_msghandler.c:1849:
+	    && (msg->rsp[1] == IPMI_GET_DEVICE_ID_CMD)
+	    && (msg->rsp[2] == IPMI_CC_NO_ERROR))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#217: FILE: char/ipmi/ipmi_msghandler.c:1852:
+		/* A get device id command, save if we are an event
+		   receiver or generator. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#217: FILE: char/ipmi/ipmi_msghandler.c:1852:
+		   receiver or generator. */

CHECK:SPACING: No space is necessary after a cast
#239: FILE: char/ipmi/ipmi_msghandler.c:1870:
+	si = (struct ipmi_system_interface_addr *) &addr;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#257: FILE: char/ipmi/ipmi_msghandler.c:1887:
+	/* Put a few breadcrums in.  Hopefully later we can add more things
+	   to make the panic events more useful. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#257: FILE: char/ipmi/ipmi_msghandler.c:1887:
+	   to make the panic events more useful. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#286: FILE: char/ipmi/ipmi_msghandler.c:1919:
+	/* On every interface, dump a bunch of OEM event holding the
+	   string. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#286: FILE: char/ipmi/ipmi_msghandler.c:1919:
+	   string. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#287: FILE: char/ipmi/ipmi_msghandler.c:1920:
+^Iif (!str) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#290: FILE: char/ipmi/ipmi_msghandler.c:1923:
+	for (i=0; i<MAX_IPMI_INTERFACES; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#290: FILE: char/ipmi/ipmi_msghandler.c:1923:
+	for (i=0; i<MAX_IPMI_INTERFACES; i++) {
 	           ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!intf"
#296: FILE: char/ipmi/ipmi_msghandler.c:1929:
+		if (intf == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#300: FILE: char/ipmi/ipmi_msghandler.c:1933:
+		/* First job here is to figure out where to send the
+		   OEM events.  There's no way in IPMI to send OEM

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#303: FILE: char/ipmi/ipmi_msghandler.c:1936:
+		   there. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#348: FILE: char/ipmi/ipmi_msghandler.c:1981:
+		/* Validate the event receiver.  The low bit must not
+		   be 1 (it must be a valid IPMB address), it cannot

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#349: FILE: char/ipmi/ipmi_msghandler.c:1982:
+		   be zero, and it must not be my address. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#350: FILE: char/ipmi/ipmi_msghandler.c:1983:
+                if (((intf->event_receiver & 1) == 0)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#350: FILE: char/ipmi/ipmi_msghandler.c:1983:
+                if (((intf->event_receiver & 1) == 0)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#350: FILE: char/ipmi/ipmi_msghandler.c:1983:
+                if (((intf->event_receiver & 1) == 0)
+		    && (intf->event_receiver != 0)
+		    && (intf->event_receiver != intf->my_address))
+		{

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'intf->event_receiver != 0'
#350: FILE: char/ipmi/ipmi_msghandler.c:1983:
+                if (((intf->event_receiver & 1) == 0)
+		    && (intf->event_receiver != 0)
+		    && (intf->event_receiver != intf->my_address))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'intf->event_receiver != intf->my_address'
#350: FILE: char/ipmi/ipmi_msghandler.c:1983:
+                if (((intf->event_receiver & 1) == 0)
+		    && (intf->event_receiver != 0)
+		    && (intf->event_receiver != intf->my_address))

CHECK:BRACES: braces {} should be used on all arms of this statement
#350: FILE: char/ipmi/ipmi_msghandler.c:1983:
+                if (((intf->event_receiver & 1) == 0)
[...]
+		} else if (intf->local_sel_device) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#351: FILE: char/ipmi/ipmi_msghandler.c:1984:
+                if (((intf->event_receiver & 1) == 0)
+		    && (intf->event_receiver != 0)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#352: FILE: char/ipmi/ipmi_msghandler.c:1985:
+		    && (intf->event_receiver != 0)
+		    && (intf->event_receiver != intf->my_address))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#355: FILE: char/ipmi/ipmi_msghandler.c:1988:
+			/* The event receiver is valid, send an IPMB
+			   message. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#355: FILE: char/ipmi/ipmi_msghandler.c:1988:
+			   message. */

CHECK:SPACING: No space is necessary after a cast
#356: FILE: char/ipmi/ipmi_msghandler.c:1989:
+			ipmb = (struct ipmi_ipmb_addr *) &addr;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#363: FILE: char/ipmi/ipmi_msghandler.c:1996:
+			/* The event receiver was not valid (or was
+			   me), but I am an SEL device, just dump it

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#364: FILE: char/ipmi/ipmi_msghandler.c:1997:
+			   in my SEL. */

CHECK:SPACING: No space is necessary after a cast
#365: FILE: char/ipmi/ipmi_msghandler.c:1998:
+			si = (struct ipmi_system_interface_addr *) &addr;

CHECK:BRACES: Unbalanced braces around else statement
#369: FILE: char/ipmi/ipmi_msghandler.c:2002:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#372: FILE: char/ipmi/ipmi_msghandler.c:2005:
+^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#372: FILE: char/ipmi/ipmi_msghandler.c:2005:
+
+		

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#390: FILE: char/ipmi/ipmi_msghandler.c:2023:
+			/* Always give 11 bytes, so strncpy will fill
+			   it with zeroes for me. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#390: FILE: char/ipmi/ipmi_msghandler.c:2023:
+			   it with zeroes for me. */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#391: FILE: char/ipmi/ipmi_msghandler.c:2024:
+			strncpy(data+5, p, 11);
 			            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#405: FILE: char/ipmi/ipmi_msghandler.c:2038:
+^I}^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000342041.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 24 warnings, 21 checks, 313 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000342041.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
