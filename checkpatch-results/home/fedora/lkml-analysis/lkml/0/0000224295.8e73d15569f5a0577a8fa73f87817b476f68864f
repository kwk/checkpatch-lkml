WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
 (1) A new bit flag PG_compound_slave has been added. This is used to mark the

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#84: 
Signed-Off-By: dhowells@redhat.com

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#116: FILE: include/linux/mm.h:323:
+#define set_page_count(p,v) ^Iatomic_set(&(p)->_count, (v) - 1)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#116: FILE: include/linux/mm.h:323:
+#define set_page_count(p,v) 	atomic_set(&(p)->_count, (v) - 1)
                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#131: FILE: include/linux/mm.h:332:
+		page = (struct page *) page->private;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#137: FILE: include/linux/mm.h:337:
+static inline unsigned compound_page_order(struct page *page)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#142: FILE: include/linux/mm.h:339:
+	unsigned order = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#152: FILE: include/linux/mm.h:348:
+extern void split_compound_page(struct page *page, unsigned new_order);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#152: FILE: include/linux/mm.h:348:
+extern void split_compound_page(struct page *page, unsigned new_order);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#153: FILE: include/linux/mm.h:349:
+extern void split_highorder_page(struct page *page, unsigned new_order,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#153: FILE: include/linux/mm.h:349:
+extern void split_highorder_page(struct page *page, unsigned new_order,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#154: FILE: include/linux/mm.h:350:
+				 unsigned old_order);

CHECK:SPACING: No space is necessary after a cast
#166: FILE: include/linux/mm.h:360:
+		dtor = (page_dtor_t) page[1].mapping;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#173: FILE: include/linux/mm.h:367:
+	BUG_ON(!PageCompound(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#174: FILE: include/linux/mm.h:368:
+	BUG_ON(PageCompoundSlave(page));

CHECK:SPACING: No space is necessary after a cast
#175: FILE: include/linux/mm.h:369:
+	page[1].mapping = (void *) dtor;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#191: FILE: include/linux/mm.h:385:
+extern fastcall void put_page(struct page *page);

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageCompound>
#219: FILE: include/linux/page-flags.h:298:
+#define __ClearPageCompound(page)	__clear_bit(PG_compound, &(page)->flags)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#293: FILE: mm/page_alloc.c:92:
+	printk(fmt,

CHECK:SPACING: No space is necessary after a cast
#296: FILE: mm/page_alloc.c:95:
+	       (unsigned) page->flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#296: FILE: mm/page_alloc.c:95:
+	       (unsigned) page->flags,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#304: FILE: mm/page_alloc.c:103:
+	printk(KERN_EMERG "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#305: FILE: mm/page_alloc.c:104:
+	printk(KERN_EMERG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#310: FILE: mm/page_alloc.c:109:
+		printk(KERN_EMERG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#312: FILE: mm/page_alloc.c:111:
+		printk(KERN_EMERG

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#315: FILE: mm/page_alloc.c:114:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#315: FILE: mm/page_alloc.c:114:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#316: FILE: mm/page_alloc.c:115:
+		printk(KERN_EMERG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#318: FILE: mm/page_alloc.c:117:
+		printk(KERN_EMERG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#329: FILE: mm/page_alloc.c:128:
+				printk(KERN_EMERG "...\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#463: FILE: mm/page_alloc.c:221:
+			     (xpage->flags & (

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "xpage->mapping"
#475: FILE: mm/page_alloc.c:233:
+			     xpage->mapping != NULL ||

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#476: FILE: mm/page_alloc.c:234:
+			     xpage->private != (unsigned long) page

WARNING:RETURN_VOID: void function return statements are not generally useful
#490: FILE: mm/page_alloc.c:248:
+	return;
+}

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#495: FILE: mm/page_alloc.c:253:
+	if (unlikely(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page->mapping"
#497: FILE: mm/page_alloc.c:255:
+		page->mapping != NULL ||

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#499: FILE: mm/page_alloc.c:257:
+		(page->flags & (

ERROR:SPACING: space prohibited before that close parenthesis ')'
#507: FILE: mm/page_alloc.c:265:
+			1 << PG_writeback ))

WARNING:RETURN_VOID: void function return statements are not generally useful
#525: FILE: mm/page_alloc.c:283:
+	return;
+}

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#592: FILE: mm/page_alloc.c:398:
+	free_pages_check(__FUNCTION__, page, order);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#620: FILE: mm/page_alloc.c:471:
+		    (pgflags & (

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#631: FILE: mm/page_alloc.c:482:
+			bad_page(__FUNCTION__, page, page, order);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#647: FILE: mm/page_alloc.c:495:
+	 * and store high-order page metadata on the second page */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: No space is necessary after a cast
#660: FILE: mm/page_alloc.c:508:
+			xpage->private = (unsigned long) page;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#674: FILE: mm/page_alloc.c:665:
+	free_pages_check(__FUNCTION__, page, 0);

CHECK:SPACING: No space is necessary after a cast
#715: FILE: mm/page_alloc.c:1081:
+		page = (struct page *) page->private;

CHECK:SPACING: No space is necessary after a cast
#721: FILE: mm/page_alloc.c:1085:
+			dtor = (page_dtor_t) page[1].mapping;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#743: FILE: mm/page_alloc.c:2337:
+void split_compound_page(struct page *page, unsigned new_order)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#745: FILE: mm/page_alloc.c:2339:
+	unsigned old_order, loop, stop, step;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#749: FILE: mm/page_alloc.c:2343:
+		BUG_ON(old_order < new_order);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#761: FILE: mm/page_alloc.c:2355:
+void split_highorder_page(struct page *page, unsigned new_order,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#762: FILE: mm/page_alloc.c:2356:
+			  unsigned old_order)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#764: FILE: mm/page_alloc.c:2358:
+	unsigned loop, stop, step;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#767: FILE: mm/page_alloc.c:2361:
+		BUG_ON(old_order < new_order);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000224295.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 32 warnings, 19 checks, 653 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000224295.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
