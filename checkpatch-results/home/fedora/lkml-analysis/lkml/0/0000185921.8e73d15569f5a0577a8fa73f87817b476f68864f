WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
o Fixed up a miscalculation in the bitmap size as pointed out by Mike Kravetz

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#176: 
page-related operations. The results are compiler dependant and there are
                                                  ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: fs/buffer.c:1139:
+^Ipage = find_or_create_page(inode->i_mapping, index, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: fs/buffer.c:1140:
+	page = find_or_create_page(inode->i_mapping, index, 
+					GFP_NOFS | __GFP_USERRCLM);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#259: FILE: fs/buffer.c:3058:
+^Istruct buffer_head *ret = kmem_cache_alloc(bh_cachep, $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#260: FILE: fs/buffer.c:3059:
+						gfp_flags|__GFP_KERNRCLM);
 						         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#272: FILE: fs/dcache.c:722:
+^Identry = kmem_cache_alloc(dentry_cache, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#273: FILE: fs/dcache.c:723:
+^I^I^I^IGFP_KERNEL|__GFP_KERNRCLM); $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#273: FILE: fs/dcache.c:723:
+	dentry = kmem_cache_alloc(dentry_cache, 
+				GFP_KERNEL|__GFP_KERNRCLM); 

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#273: FILE: fs/dcache.c:723:
+				GFP_KERNEL|__GFP_KERNRCLM); 
 				          ^

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#285: FILE: fs/ext2/super.c:140:
+	ei = (struct ext2_inode_info *)kmem_cache_alloc(ext2_inode_cachep, SLAB_KERNEL|__GFP_KERNRCLM);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#285: FILE: fs/ext2/super.c:140:
+	ei = (struct ext2_inode_info *)kmem_cache_alloc(ext2_inode_cachep, SLAB_KERNEL|__GFP_KERNRCLM);
 	                                                                              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#297: FILE: fs/ext3/super.c:435:
+	ei = kmem_cache_alloc(ext3_inode_cachep, SLAB_NOFS|__GFP_KERNRCLM);
 	                                                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#309: FILE: fs/ntfs/inode.c:321:
+			SLAB_NOFS|__GFP_KERNRCLM);
 			         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#318: FILE: fs/ntfs/inode.c:346:
+^Ini = (ntfs_inode *)kmem_cache_alloc(ntfs_inode_cache, $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#319: FILE: fs/ntfs/inode.c:347:
+					SLAB_NOFS|__GFP_KERNRCLM);
 					         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#341: FILE: include/linux/gfp.h:50:
+			__GFP_NOFAIL|__GFP_NORETRY|__GFP_NO_GROW|__GFP_COMP|\
 			            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#341: FILE: include/linux/gfp.h:50:
+			__GFP_NOFAIL|__GFP_NORETRY|__GFP_NO_GROW|__GFP_COMP|\
 			                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#341: FILE: include/linux/gfp.h:50:
+			__GFP_NOFAIL|__GFP_NORETRY|__GFP_NO_GROW|__GFP_COMP|\
 			                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#341: FILE: include/linux/gfp.h:50:
+			__GFP_NOFAIL|__GFP_NORETRY|__GFP_NO_GROW|__GFP_COMP|\
 			                                                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#342: FILE: include/linux/gfp.h:51:
+			__GFP_USERRCLM|__GFP_KERNRCLM)
 			              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#377: FILE: include/linux/mmzone.h:138:
+ ^I/*$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#377: FILE: include/linux/mmzone.h:138:
+ ^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#377: FILE: include/linux/mmzone.h:138:
+ ^I/*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#378: FILE: include/linux/mmzone.h:139:
+ ^I * The map tracks what each 2^MAX_ORDER-1 sized block is being used for.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#378: FILE: include/linux/mmzone.h:139:
+ ^I * The map tracks what each 2^MAX_ORDER-1 sized block is being used for.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#379: FILE: include/linux/mmzone.h:140:
+^I * Each 2^MAX_ORDER block have pages has BITS_PER_ALLOC_TYPE bits in $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#380: FILE: include/linux/mmzone.h:141:
+^I * this map to remember what the block is for. When a page is freed, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#382: FILE: include/linux/mmzone.h:143:
+^I * This means that pages will always be freed into the correct list in $

ERROR:CODE_INDENT: code indent should use tabs where possible
#386: FILE: include/linux/mmzone.h:147:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#386: FILE: include/linux/mmzone.h:147:
+ ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#387: FILE: include/linux/mmzone.h:148:
+ ^Iunsigned long^I^I*free_area_usemap;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#387: FILE: include/linux/mmzone.h:148:
+ ^Iunsigned long^I^I*free_area_usemap;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#387: FILE: include/linux/mmzone.h:148:
+ ^Iunsigned long^I^I*free_area_usemap;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#390: FILE: include/linux/mmzone.h:151:
+^I * There are ALLOC_TYPE number of MAX_ORDER free lists. Once a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#394: FILE: include/linux/mmzone.h:155:
+^I * Non-reclaimable. The objective is to reduce fragmentation $

ERROR:CODE_INDENT: code indent should use tabs where possible
#397: FILE: include/linux/mmzone.h:158:
+ ^Istruct free_area^Ifree_area_lists[ALLOC_TYPES][MAX_ORDER];$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#397: FILE: include/linux/mmzone.h:158:
+ ^Istruct free_area^Ifree_area_lists[ALLOC_TYPES][MAX_ORDER];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#397: FILE: include/linux/mmzone.h:158:
+ ^Istruct free_area^Ifree_area_lists[ALLOC_TYPES][MAX_ORDER];$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#399: FILE: include/linux/mmzone.h:160:
+^I/* $

ERROR:CODE_INDENT: code indent should use tabs where possible
#405: FILE: include/linux/mmzone.h:166:
+ ^Istruct free_area^Ifree_area_global;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#405: FILE: include/linux/mmzone.h:166:
+ ^Istruct free_area^Ifree_area_global;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#405: FILE: include/linux/mmzone.h:166:
+ ^Istruct free_area^Ifree_area_global;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#406: FILE: include/linux/mmzone.h:167:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#406: FILE: include/linux/mmzone.h:167:
+ $

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#441: FILE: include/linux/mmzone.h:276:
+#define inc_globalrefill_count(zone) zone->global_refill++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#441: FILE: include/linux/mmzone.h:276:
+#define inc_globalrefill_count(zone) zone->global_refill++

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#442: FILE: include/linux/mmzone.h:277:
+#define inc_globalsteal_count(zone) zone->global_steal++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#442: FILE: include/linux/mmzone.h:277:
+#define inc_globalsteal_count(zone) zone->global_steal++

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#444: FILE: include/linux/mmzone.h:279:
+#define inc_fallback_count(zone, type) zone->fallback_count[type]++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#444: FILE: include/linux/mmzone.h:279:
+#define inc_fallback_count(zone, type) zone->fallback_count[type]++

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#445: FILE: include/linux/mmzone.h:280:
+#define inc_alloc_count(zone, type) zone->alloc_count[type]++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#445: FILE: include/linux/mmzone.h:280:
+#define inc_alloc_count(zone, type) zone->alloc_count[type]++

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#446: FILE: include/linux/mmzone.h:281:
+#define inc_kernnorclm_partial_steal(zone) zone->kernnorclm_partial_steal++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#446: FILE: include/linux/mmzone.h:281:
+#define inc_kernnorclm_partial_steal(zone) zone->kernnorclm_partial_steal++

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#447: FILE: include/linux/mmzone.h:282:
+#define inc_kernnorclm_full_steal(zone) zone->kernnorclm_full_steal++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#447: FILE: include/linux/mmzone.h:282:
+#define inc_kernnorclm_full_steal(zone) zone->kernnorclm_full_steal++

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#448: FILE: include/linux/mmzone.h:283:
+#define inc_bulk_request(zone, order) zone->bulk_requests[order]++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#448: FILE: include/linux/mmzone.h:283:
+#define inc_bulk_request(zone, order) zone->bulk_requests[order]++

ERROR:SPACING: space required after that ',' (ctx:VxV)
#449: FILE: include/linux/mmzone.h:284:
+#define inc_bulk_alloced(zone,order) zone->bulk_alloced[order]++
                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#449: FILE: include/linux/mmzone.h:284:
+#define inc_bulk_alloced(zone,order) zone->bulk_alloced[order]++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#449: FILE: include/linux/mmzone.h:284:
+#define inc_bulk_alloced(zone,order) zone->bulk_alloced[order]++

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#450: FILE: include/linux/mmzone.h:285:
+static inline void inc_reserve_count(struct zone *zone, int type) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#451: FILE: include/linux/mmzone.h:286:
+	if (type == ALLOC_FALLBACK) zone->fallback_reserve++;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#455: FILE: include/linux/mmzone.h:290:
+static inline void dec_reserve_count(struct zone *zone, int type) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#456: FILE: include/linux/mmzone.h:291:
+^Iif (type == ALLOC_FALLBACK && zone->fallback_reserve) $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#458: FILE: include/linux/mmzone.h:293:
+	if (zone->reserve_count[type]) zone->reserve_count[type]--;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#463: FILE: include/linux/mmzone.h:298:
+#define inc_reserve_count(zone, type) \
+	type == ALLOC_FALLBACK ? zone->fallback_reserve++ : 0

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#463: FILE: include/linux/mmzone.h:298:
+#define inc_reserve_count(zone, type) \
+	type == ALLOC_FALLBACK ? zone->fallback_reserve++ : 0

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#465: FILE: include/linux/mmzone.h:300:
+#define dec_reserve_count(zone, type) \
+	(type == ALLOC_FALLBACK && zone->fallback_reserve) ? \
+		zone->fallback_reserve-- : 0

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'zone' - possible side-effects?
#465: FILE: include/linux/mmzone.h:300:
+#define dec_reserve_count(zone, type) \
+	(type == ALLOC_FALLBACK && zone->fallback_reserve) ? \
+		zone->fallback_reserve-- : 0

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#465: FILE: include/linux/mmzone.h:300:
+#define dec_reserve_count(zone, type) \
+	(type == ALLOC_FALLBACK && zone->fallback_reserve) ? \
+		zone->fallback_reserve-- : 0

ERROR:SPACING: space required after that ',' (ctx:VxV)
#471: FILE: include/linux/mmzone.h:306:
+#define inc_bulk_alloced(zone,order) do {} while (0)
                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#528: FILE: mm/page_alloc.c:77:
+int fallback_allocs[ALLOC_TYPES][ALLOC_TYPES] = { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#542: FILE: mm/page_alloc.c:92:
+static char *type_names[ALLOC_TYPES] = { "KernNoRclm", "KernRclm", $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#552: FILE: mm/page_alloc.c:141:
+ * Return what type of page is being allocated from this 2^MAX_ORDER-1 block $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#555: FILE: mm/page_alloc.c:144:
+static inline unsigned int get_pageblock_type(struct zone *zone, struct page *page) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#556: FILE: mm/page_alloc.c:145:
+^Iint bitidx = ((page - zone->zone_mem_map) >> (MAX_ORDER-1)) * $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#556: FILE: mm/page_alloc.c:145:
+	int bitidx = ((page - zone->zone_mem_map) >> (MAX_ORDER-1)) * 
 	                                                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#561: FILE: mm/page_alloc.c:150:
+	for (i=1; i < BITS_PER_ALLOC_TYPE; i++) {
 	      ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#561: FILE: mm/page_alloc.c:150:
+	for (i=1; i < BITS_PER_ALLOC_TYPE; i++) {
+		type = (type << 1) | (!!test_bit(bitidx+i, zone->free_area_usemap));
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#562: FILE: mm/page_alloc.c:151:
+		type = (type << 1) | (!!test_bit(bitidx+i, zone->free_area_usemap));
 		                                       ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#567: FILE: mm/page_alloc.c:156:
+		printk("\nBogus type in get_pageblock_type: %u\n", type);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#568: FILE: mm/page_alloc.c:157:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#577: FILE: mm/page_alloc.c:166:
+static inline void set_pageblock_type(struct zone *zone, struct page *page, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#578: FILE: mm/page_alloc.c:167:
+static inline void set_pageblock_type(struct zone *zone, struct page *page, 
+					int type) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#579: FILE: mm/page_alloc.c:168:
+^Iint bitidx = ((page - zone->zone_mem_map) >> (MAX_ORDER-1)) * $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#579: FILE: mm/page_alloc.c:168:
+	int bitidx = ((page - zone->zone_mem_map) >> (MAX_ORDER-1)) * 
 	                                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#585: FILE: mm/page_alloc.c:174:
+		set_bit(bitidx+1, zone->free_area_usemap);
 		              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#591: FILE: mm/page_alloc.c:180:
+		clear_bit(bitidx+1, zone->free_area_usemap);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#597: FILE: mm/page_alloc.c:186:
+		set_bit(bitidx+1, zone->free_area_usemap);
 		              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#602: FILE: mm/page_alloc.c:191:
+	clear_bit(bitidx+1, zone->free_area_usemap);
 	                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#607: FILE: mm/page_alloc.c:196:
+ * calculates how many 2**(MAX_ORDER-1) blocks of pages represent 12.5% of $

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#611: FILE: mm/page_alloc.c:200:
+#define min_fallback_reserve(zone) \
+	((zone->present_pages / (1 << (MAX_ORDER-1))) / 8)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#612: FILE: mm/page_alloc.c:201:
+	((zone->present_pages / (1 << (MAX_ORDER-1))) / 8)
 	                                        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'zone' - possible side-effects?
#613: FILE: mm/page_alloc.c:202:
+#define need_min_fallback_reserve(zone) \
+	(zone->global_refill - zone->global_steal <= min_fallback_reserve(zone))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#613: FILE: mm/page_alloc.c:202:
+#define need_min_fallback_reserve(zone) \
+	(zone->global_refill - zone->global_steal <= min_fallback_reserve(zone))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'zone' - possible side-effects?
#615: FILE: mm/page_alloc.c:204:
+#define is_min_fallback_reserved(zone) \
+	(zone->fallback_reserve >= min_fallback_reserve(zone))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#615: FILE: mm/page_alloc.c:204:
+#define is_min_fallback_reserved(zone) \
+	(zone->fallback_reserve >= min_fallback_reserve(zone))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#638: FILE: mm/page_alloc.c:380:
+^I$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#664: FILE: mm/page_alloc.c:407:
+	if (order >= MAX_ORDER-1) {
 	                      ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_global
#665: FILE: mm/page_alloc.c:408:
+		area = &(zone->free_area_global);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#688: FILE: mm/page_alloc.c:573:
+static inline int steal_globallist(struct zone *zone, int alloctype) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_global.free_list
#692: FILE: mm/page_alloc.c:577:
+	if (list_empty(&(zone->free_area_global.free_list)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#700: FILE: mm/page_alloc.c:585:
+	page = list_entry(zone->free_area_global.free_list.next,
+			struct page, lru);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#702: FILE: mm/page_alloc.c:587:
+^Ilist_add(&page->lru, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#703: FILE: mm/page_alloc.c:588:
+	list_add(&page->lru, 
+		&(zone->free_area_lists[alloctype][MAX_ORDER-1].free_list));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#703: FILE: mm/page_alloc.c:588:
+		&(zone->free_area_lists[alloctype][MAX_ORDER-1].free_list));
 		                                            ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_lists[alloctype][MAX_ORDER-1].free_list
#703: FILE: mm/page_alloc.c:588:
+		&(zone->free_area_lists[alloctype][MAX_ORDER-1].free_list));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#706: FILE: mm/page_alloc.c:591:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#707: FILE: mm/page_alloc.c:592:
+^I * Reserve this whole block of pages. When the pool shrinks, a $

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#721: FILE: mm/page_alloc.c:606:
+
+}

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#739: FILE: mm/page_alloc.c:620:
+	int retry_count=0;
 	               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#741: FILE: mm/page_alloc.c:622:
+	int startorder = order;
+	if (flags & __GFP_USERRCLM) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#741: FILE: mm/page_alloc.c:622:
+	if (flags & __GFP_USERRCLM) {
[...]
+	else if (flags & __GFP_KERNRCLM) {
[...]
+	} else {
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#744: FILE: mm/page_alloc.c:625:
+	}
+	else if (flags & __GFP_KERNRCLM) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#758: FILE: mm/page_alloc.c:639:
+^Ifor (current_order = startorder; $

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#760: FILE: mm/page_alloc.c:641:
+			current_order < MAX_ORDER; ++current_order) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#776: FILE: mm/page_alloc.c:657:
+^I^I * allocations fragment the worst so this helps keep them $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#780: FILE: mm/page_alloc.c:661:
+^I^I^Iarea = zone->free_area_lists[ALLOC_KERNNORCLM] + $

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#784: FILE: mm/page_alloc.c:665:
+			if (current_order >= MAX_ORDER/2) {
 			                              ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#784: FILE: mm/page_alloc.c:665:
+			if (current_order >= MAX_ORDER/2) {
[...]
+			} else inc_kernnorclm_partial_steal(zone);
[...]

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#785: FILE: mm/page_alloc.c:666:
+				int reserve_type=ALLOC_KERNNORCLM;
 				                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#786: FILE: mm/page_alloc.c:667:
+^I^I^I^Idec_reserve_count(zone, $

WARNING:LINE_SPACING: Missing a blank line after declarations
#786: FILE: mm/page_alloc.c:667:
+				int reserve_type=ALLOC_KERNNORCLM;
+				dec_reserve_count(zone, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#787: FILE: mm/page_alloc.c:668:
+				dec_reserve_count(zone, 
+						get_pageblock_type(zone, page));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#790: FILE: mm/page_alloc.c:671:
+^I^I^I^I * Use this block for fallbacks if the $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#793: FILE: mm/page_alloc.c:674:
+				if (!is_min_fallback_reserved(zone)) {
+					reserve_type=ALLOC_FALLBACK;
+				}

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#794: FILE: mm/page_alloc.c:675:
+					reserve_type=ALLOC_FALLBACK;
 					            ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#800: FILE: mm/page_alloc.c:681:
+			} else inc_kernnorclm_partial_steal(zone);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#805: FILE: mm/page_alloc.c:686:
+
+	}

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#809: FILE: mm/page_alloc.c:690:
+		startorder = MAX_ORDER-1;
 		                      ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#819: FILE: mm/page_alloc.c:700:
+	while (++retry_count != ALLOC_TYPES) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#826: FILE: mm/page_alloc.c:707:
+^I^Iif (alloctype == ALLOC_FALLBACK) $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#831: FILE: mm/page_alloc.c:712:
+		area = zone->free_area_lists[alloctype] + (MAX_ORDER-1);
 		                                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#832: FILE: mm/page_alloc.c:713:
+		current_order=MAX_ORDER;
 		             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#843: FILE: mm/page_alloc.c:724:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#851: FILE: mm/page_alloc.c:731:
+ * Returns the number of new pages which were placed at *list. An attempt $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#868: FILE: mm/page_alloc.c:747:
+^Iwhile (1 << current_order <= pages_to_alloc && $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#868: FILE: mm/page_alloc.c:747:
+	while (1 << current_order <= pages_to_alloc && 
+			current_order < (MAX_ORDER-1)) current_order++;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#869: FILE: mm/page_alloc.c:748:
+	while (1 << current_order <= pages_to_alloc && 
+			current_order < (MAX_ORDER-1)) current_order++;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#869: FILE: mm/page_alloc.c:748:
+			current_order < (MAX_ORDER-1)) current_order++;
 			                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#870: FILE: mm/page_alloc.c:749:
+	inc_bulk_request(zone, current_order-1);
 	                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#881: FILE: mm/page_alloc.c:754:
+^I * Satisfy the request in as the largest possible physically $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#885: FILE: mm/page_alloc.c:758:
+^I^Iif ((1 << current_order) > (pages_to_alloc - allocated)) $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#888: FILE: mm/page_alloc.c:761:
+		if (allocated > pages_to_alloc) BUG();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#888: FILE: mm/page_alloc.c:761:
+		if (allocated > pages_to_alloc) BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#889: FILE: mm/page_alloc.c:762:
+		if (current_order >= MAX_ORDER) BUG();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#889: FILE: mm/page_alloc.c:762:
+		if (current_order >= MAX_ORDER) BUG();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#893: FILE: mm/page_alloc.c:766:
+		if (page == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#894: FILE: mm/page_alloc.c:767:
+			if (current_order == order) break;

CHECK:BRACES: braces {} should be used on all arms of this statement
#894: FILE: mm/page_alloc.c:767:
+			if (current_order == order) break;
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#895: FILE: mm/page_alloc.c:768:
+			else {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#936: FILE: mm/page_alloc.c:830:
+	for (type=0; type < ALLOC_TYPES; type++) {
 	         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#942: FILE: mm/page_alloc.c:835:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#947: FILE: mm/page_alloc.c:838:
+				for (i=0; i < (1<<order); i++)
 				      ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#947: FILE: mm/page_alloc.c:838:
+				for (i=0; i < (1<<order); i++)
 				                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#948: FILE: mm/page_alloc.c:839:
+					SetPageNosaveFree(pfn_to_page(start_pfn+i));
 					                                       ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#998: FILE: mm/page_alloc.c:1004:
+		free_pages -= (

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1020: FILE: mm/page_alloc.c:1170:
+		if (order < MAX_ORDER/2) out_of_memory(gfp_mask);
 		                     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1020: FILE: mm/page_alloc.c:1170:
+		if (order < MAX_ORDER/2) out_of_memory(gfp_mask);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1038: FILE: mm/page_alloc.c:1607:
+			for (type=0; type < ALLOC_TYPES; type++) {
 			         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1052: FILE: mm/page_alloc.c:1907:
+ ^Iint type;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1052: FILE: mm/page_alloc.c:1907:
+ ^Iint type;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1052: FILE: mm/page_alloc.c:1907:
+ ^Iint type;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1053: FILE: mm/page_alloc.c:1908:
+ ^Istruct free_area *area;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1053: FILE: mm/page_alloc.c:1908:
+ ^Istruct free_area *area;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1053: FILE: mm/page_alloc.c:1908:
+ ^Istruct free_area *area;$

WARNING:TYPO_SPELLING: 'Initialse' may be misspelled - perhaps 'Initialise'?
#1055: FILE: mm/page_alloc.c:1910:
+ 	/* Initialse the three size ordered lists of free_areas */
  	   ^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1055: FILE: mm/page_alloc.c:1910:
+ ^I/* Initialse the three size ordered lists of free_areas */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1055: FILE: mm/page_alloc.c:1910:
+ ^I/* Initialse the three size ordered lists of free_areas */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1055: FILE: mm/page_alloc.c:1910:
+ ^I/* Initialse the three size ordered lists of free_areas */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1056: FILE: mm/page_alloc.c:1911:
+	for (type=0; type < ALLOC_TYPES; type++) {
 	         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1059: FILE: mm/page_alloc.c:1914:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1059: FILE: mm/page_alloc.c:1914:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1064: FILE: mm/page_alloc.c:1919:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1064: FILE: mm/page_alloc.c:1919:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1065: FILE: mm/page_alloc.c:1920:
+ ^I/* Initialise the global pool of 2^size pages */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1065: FILE: mm/page_alloc.c:1920:
+ ^I/* Initialise the global pool of 2^size pages */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1065: FILE: mm/page_alloc.c:1920:
+ ^I/* Initialise the global pool of 2^size pages */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1066: FILE: mm/page_alloc.c:1921:
+ ^IINIT_LIST_HEAD(&zone->free_area_global.free_list);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1066: FILE: mm/page_alloc.c:1921:
+ ^IINIT_LIST_HEAD(&zone->free_area_global.free_list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1066: FILE: mm/page_alloc.c:1921:
+ ^IINIT_LIST_HEAD(&zone->free_area_global.free_list);$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1067: FILE: mm/page_alloc.c:1922:
+	zone->free_area_global.nr_free=0;
 	                              ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1077: FILE: mm/page_alloc.c:1933:
+static unsigned long __init usemap_size(unsigned long zonesize) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1081: FILE: mm/page_alloc.c:1937:
+	usemapsize = (zonesize + (1 << (MAX_ORDER-1))) >> (MAX_ORDER-1);
 	                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1081: FILE: mm/page_alloc.c:1937:
+	usemapsize = (zonesize + (1 << (MAX_ORDER-1))) >> (MAX_ORDER-1);
 	                                                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1084: FILE: mm/page_alloc.c:1940:
+	usemapsize = (usemapsize * BITS_PER_ALLOC_TYPE + (sizeof(unsigned long)*8)) / 8;
 	                                                                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1107: FILE: mm/page_alloc.c:2059:
+		zone->global_steal=0;
 		                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1108: FILE: mm/page_alloc.c:2060:
+		zone->global_refill=0;
 		                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1110: FILE: mm/page_alloc.c:2062:
+^I^Imemset((unsigned long *)zone->fallback_count, 0, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1111: FILE: mm/page_alloc.c:2063:
+		memset((unsigned long *)zone->fallback_count, 0, 
+					sizeof(zone->fallback_count));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1112: FILE: mm/page_alloc.c:2064:
+^I^Imemset((unsigned long *)zone->alloc_count, 0, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1113: FILE: mm/page_alloc.c:2065:
+		memset((unsigned long *)zone->alloc_count, 0, 
+					sizeof(zone->alloc_count));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1114: FILE: mm/page_alloc.c:2066:
+^I^Imemset((unsigned long *)zone->alloc_count, 0, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1115: FILE: mm/page_alloc.c:2067:
+		memset((unsigned long *)zone->alloc_count, 0, 
+					sizeof(zone->alloc_count));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1117: FILE: mm/page_alloc.c:2069:
+		memset((unsigned long *)zone->bulk_requests, 0,
+					sizeof(zone->bulk_requests));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1119: FILE: mm/page_alloc.c:2071:
+		memset((unsigned long *)zone->bulk_alloced, 0,
+					sizeof(zone->bulk_alloced));

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1120: FILE: mm/page_alloc.c:2072:
+		zone->kernnorclm_partial_steal=0;
 		                              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1121: FILE: mm/page_alloc.c:2073:
+		zone->kernnorclm_full_steal=0;
 		                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1124: FILE: mm/page_alloc.c:2076:
+^I^Izone->free_area_usemap = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1125: FILE: mm/page_alloc.c:2077:
+^I^I^I(unsigned long *)alloc_bootmem_node(pgdat, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1129: FILE: mm/page_alloc.c:2081:
+		memset((unsigned long *)zone->free_area_usemap,
+				ALLOC_KERNNORCLM, usemapsize);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1131: FILE: mm/page_alloc.c:2083:
+		printk(KERN_DEBUG "  %s zone: %lu pages, %lu real pages, usemap size:%lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1132: FILE: mm/page_alloc.c:2084:
+		printk(KERN_DEBUG "  %s zone: %lu pages, %lu real pages, usemap size:%lu\n",
+				zone_names[j], size, realsize, usemapsize);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1143: FILE: mm/page_alloc.c:2174:
+ ^Iunsigned long nr_bufs = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1143: FILE: mm/page_alloc.c:2174:
+ ^Iunsigned long nr_bufs = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1143: FILE: mm/page_alloc.c:2174:
+ ^Iunsigned long nr_bufs = 0;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1146: FILE: mm/page_alloc.c:2177:
+	unsigned long global_refill=0;
 	                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1147: FILE: mm/page_alloc.c:2178:
+	unsigned long global_steal=0;
 	                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1148: FILE: mm/page_alloc.c:2179:
+	unsigned long kernnorclm_full_steal=0;
 	                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1149: FILE: mm/page_alloc.c:2180:
+	unsigned long kernnorclm_partial_steal=0;
 	                                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1164: FILE: mm/page_alloc.c:2195:
+ ^I/* Show global fragmentation statistics */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1164: FILE: mm/page_alloc.c:2195:
+ ^I/* Show global fragmentation statistics */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1164: FILE: mm/page_alloc.c:2195:
+ ^I/* Show global fragmentation statistics */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1173: FILE: mm/page_alloc.c:2201:
+ ^I^Iseq_printf(m, "Node %d, zone %8s", pgdat->node_id, zone->name);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1173: FILE: mm/page_alloc.c:2201:
+ ^I^Iseq_printf(m, "Node %d, zone %8s", pgdat->node_id, zone->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1173: FILE: mm/page_alloc.c:2201:
+ ^I^Iseq_printf(m, "Node %d, zone %8s", pgdat->node_id, zone->name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1174: FILE: mm/page_alloc.c:2202:
+ ^I^Ifor (order = 0; order < MAX_ORDER-1; ++order) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1174: FILE: mm/page_alloc.c:2202:
+ ^I^Ifor (order = 0; order < MAX_ORDER-1; ++order) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1174: FILE: mm/page_alloc.c:2202:
+ ^I^Ifor (order = 0; order < MAX_ORDER-1; ++order) {$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1174: FILE: mm/page_alloc.c:2202:
+ 		for (order = 0; order < MAX_ORDER-1; ++order) {
  		                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1175: FILE: mm/page_alloc.c:2203:
+ ^I^I^Inr_bufs = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1175: FILE: mm/page_alloc.c:2203:
+ ^I^I^Inr_bufs = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1175: FILE: mm/page_alloc.c:2203:
+ ^I^I^Inr_bufs = 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1176: FILE: mm/page_alloc.c:2204:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1176: FILE: mm/page_alloc.c:2204:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1177: FILE: mm/page_alloc.c:2205:
+ ^I^I^Ifor (type=0; type < ALLOC_TYPES; type++) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1177: FILE: mm/page_alloc.c:2205:
+ ^I^I^Ifor (type=0; type < ALLOC_TYPES; type++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1177: FILE: mm/page_alloc.c:2205:
+ ^I^I^Ifor (type=0; type < ALLOC_TYPES; type++) {$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1177: FILE: mm/page_alloc.c:2205:
+ 			for (type=0; type < ALLOC_TYPES; type++) {
  			         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1178: FILE: mm/page_alloc.c:2206:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1178: FILE: mm/page_alloc.c:2206:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1178: FILE: mm/page_alloc.c:2206:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_lists[type][order].free_list
#1178: FILE: mm/page_alloc.c:2206:
+ 				list_for_each(elem, &(zone->free_area_lists[type][order].free_list))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1179: FILE: mm/page_alloc.c:2207:
+ ^I^I^I^I^I++nr_bufs;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1179: FILE: mm/page_alloc.c:2207:
+ ^I^I^I^I^I++nr_bufs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1179: FILE: mm/page_alloc.c:2207:
+ ^I^I^I^I^I++nr_bufs;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1180: FILE: mm/page_alloc.c:2208:
+ ^I^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1180: FILE: mm/page_alloc.c:2208:
+ ^I^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1180: FILE: mm/page_alloc.c:2208:
+ ^I^I^I}$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1181: FILE: mm/page_alloc.c:2209:
+ ^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1181: FILE: mm/page_alloc.c:2209:
+ ^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1181: FILE: mm/page_alloc.c:2209:
+ ^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1182: FILE: mm/page_alloc.c:2210:
+ ^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1182: FILE: mm/page_alloc.c:2210:
+ ^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1182: FILE: mm/page_alloc.c:2210:
+ ^I^I}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1183: FILE: mm/page_alloc.c:2211:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1183: FILE: mm/page_alloc.c:2211:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1184: FILE: mm/page_alloc.c:2212:
+ ^I^I/* Scan global list */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1184: FILE: mm/page_alloc.c:2212:
+ ^I^I/* Scan global list */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1184: FILE: mm/page_alloc.c:2212:
+ ^I^I/* Scan global list */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1185: FILE: mm/page_alloc.c:2213:
+ ^I^Inr_bufs = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1185: FILE: mm/page_alloc.c:2213:
+ ^I^Inr_bufs = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1185: FILE: mm/page_alloc.c:2213:
+ ^I^Inr_bufs = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1186: FILE: mm/page_alloc.c:2214:
+ ^I^Ilist_for_each(elem, &(zone->free_area_global.free_list))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1186: FILE: mm/page_alloc.c:2214:
+ ^I^Ilist_for_each(elem, &(zone->free_area_global.free_list))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1186: FILE: mm/page_alloc.c:2214:
+ ^I^Ilist_for_each(elem, &(zone->free_area_global.free_list))$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_global.free_list
#1186: FILE: mm/page_alloc.c:2214:
+ 		list_for_each(elem, &(zone->free_area_global.free_list))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1187: FILE: mm/page_alloc.c:2215:
+ ^I^I^I++nr_bufs;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1187: FILE: mm/page_alloc.c:2215:
+ ^I^I^I++nr_bufs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1187: FILE: mm/page_alloc.c:2215:
+ ^I^I^I++nr_bufs;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1188: FILE: mm/page_alloc.c:2216:
+ ^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1188: FILE: mm/page_alloc.c:2216:
+ ^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1188: FILE: mm/page_alloc.c:2216:
+ ^I^Iseq_printf(m, "%6lu ", nr_bufs);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1189: FILE: mm/page_alloc.c:2217:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1189: FILE: mm/page_alloc.c:2217:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1190: FILE: mm/page_alloc.c:2218:
+ ^I^Ispin_unlock_irqrestore(&zone->lock, flags);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1190: FILE: mm/page_alloc.c:2218:
+ ^I^Ispin_unlock_irqrestore(&zone->lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1190: FILE: mm/page_alloc.c:2218:
+ ^I^Ispin_unlock_irqrestore(&zone->lock, flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1191: FILE: mm/page_alloc.c:2219:
+ ^I^Iseq_putc(m, '\n');$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1191: FILE: mm/page_alloc.c:2219:
+ ^I^Iseq_putc(m, '\n');$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1191: FILE: mm/page_alloc.c:2219:
+ ^I^Iseq_putc(m, '\n');$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1192: FILE: mm/page_alloc.c:2220:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1192: FILE: mm/page_alloc.c:2220:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1192: FILE: mm/page_alloc.c:2220:
+ ^I}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1193: FILE: mm/page_alloc.c:2221:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1193: FILE: mm/page_alloc.c:2221:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1194: FILE: mm/page_alloc.c:2222:
+ ^I/* Show statistics for each allocation type */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1194: FILE: mm/page_alloc.c:2222:
+ ^I/* Show statistics for each allocation type */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1194: FILE: mm/page_alloc.c:2222:
+ ^I/* Show statistics for each allocation type */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1195: FILE: mm/page_alloc.c:2223:
+ ^Iseq_printf(m, "\nPer-allocation-type statistics");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1195: FILE: mm/page_alloc.c:2223:
+ ^Iseq_printf(m, "\nPer-allocation-type statistics");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1195: FILE: mm/page_alloc.c:2223:
+ ^Iseq_printf(m, "\nPer-allocation-type statistics");$

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1195: FILE: mm/page_alloc.c:2223:
+ 	seq_printf(m, "\nPer-allocation-type statistics");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1196: FILE: mm/page_alloc.c:2224:
+ ^Ifor (zone = node_zones; zone - node_zones < MAX_NR_ZONES; ++zone) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1196: FILE: mm/page_alloc.c:2224:
+ ^Ifor (zone = node_zones; zone - node_zones < MAX_NR_ZONES; ++zone) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1196: FILE: mm/page_alloc.c:2224:
+ ^Ifor (zone = node_zones; zone - node_zones < MAX_NR_ZONES; ++zone) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1197: FILE: mm/page_alloc.c:2225:
+ ^I^Iif (!zone->present_pages)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1197: FILE: mm/page_alloc.c:2225:
+ ^I^Iif (!zone->present_pages)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1197: FILE: mm/page_alloc.c:2225:
+ ^I^Iif (!zone->present_pages)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1198: FILE: mm/page_alloc.c:2226:
+ ^I^I^Icontinue;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1198: FILE: mm/page_alloc.c:2226:
+ ^I^I^Icontinue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1198: FILE: mm/page_alloc.c:2226:
+ ^I^I^Icontinue;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1199: FILE: mm/page_alloc.c:2227:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1199: FILE: mm/page_alloc.c:2227:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1200: FILE: mm/page_alloc.c:2228:
+ ^I^Ispin_lock_irqsave(&zone->lock, flags);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1200: FILE: mm/page_alloc.c:2228:
+ ^I^Ispin_lock_irqsave(&zone->lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1200: FILE: mm/page_alloc.c:2228:
+ ^I^Ispin_lock_irqsave(&zone->lock, flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1201: FILE: mm/page_alloc.c:2229:
+ ^I^Ifor (type=0; type < ALLOC_TYPES; type++) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1201: FILE: mm/page_alloc.c:2229:
+ ^I^Ifor (type=0; type < ALLOC_TYPES; type++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1201: FILE: mm/page_alloc.c:2229:
+ ^I^Ifor (type=0; type < ALLOC_TYPES; type++) {$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1201: FILE: mm/page_alloc.c:2229:
+ 		for (type=0; type < ALLOC_TYPES; type++) {
  		         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1203: FILE: mm/page_alloc.c:2231:
+ ^I^I^Iseq_printf(m, "\nNode %d, zone %8s, type %10s ", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1203: FILE: mm/page_alloc.c:2231:
+ ^I^I^Iseq_printf(m, "\nNode %d, zone %8s, type %10s ", $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1203: FILE: mm/page_alloc.c:2231:
+ ^I^I^Iseq_printf(m, "\nNode %d, zone %8s, type %10s ", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1203: FILE: mm/page_alloc.c:2231:
+ ^I^I^Iseq_printf(m, "\nNode %d, zone %8s, type %10s ", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1204: FILE: mm/page_alloc.c:2232:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1204: FILE: mm/page_alloc.c:2232:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1204: FILE: mm/page_alloc.c:2232:
+ 			seq_printf(m, "\nNode %d, zone %8s, type %10s ", 
+ 					pgdat->node_id, zone->name,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1204: FILE: mm/page_alloc.c:2232:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1205: FILE: mm/page_alloc.c:2233:
+ ^I^I^I^I^Itype_names[type]);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1205: FILE: mm/page_alloc.c:2233:
+ ^I^I^I^I^Itype_names[type]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1205: FILE: mm/page_alloc.c:2233:
+ ^I^I^I^I^Itype_names[type]);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1206: FILE: mm/page_alloc.c:2234:
+ ^I^I^Ifor (order = 0; order < MAX_ORDER; ++order) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1206: FILE: mm/page_alloc.c:2234:
+ ^I^I^Ifor (order = 0; order < MAX_ORDER; ++order) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1206: FILE: mm/page_alloc.c:2234:
+ ^I^I^Ifor (order = 0; order < MAX_ORDER; ++order) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1207: FILE: mm/page_alloc.c:2235:
+ ^I^I^I^Inr_bufs = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1207: FILE: mm/page_alloc.c:2235:
+ ^I^I^I^Inr_bufs = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1207: FILE: mm/page_alloc.c:2235:
+ ^I^I^I^Inr_bufs = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1209: FILE: mm/page_alloc.c:2237:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1209: FILE: mm/page_alloc.c:2237:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1209: FILE: mm/page_alloc.c:2237:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_lists[type][order].free_list
#1209: FILE: mm/page_alloc.c:2237:
+ 				list_for_each(elem, &(zone->free_area_lists[type][order].free_list))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1210: FILE: mm/page_alloc.c:2238:
+ ^I^I^I^I^I++nr_bufs;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1210: FILE: mm/page_alloc.c:2238:
+ ^I^I^I^I^I++nr_bufs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1210: FILE: mm/page_alloc.c:2238:
+ ^I^I^I^I^I++nr_bufs;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1211: FILE: mm/page_alloc.c:2239:
+ ^I^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1211: FILE: mm/page_alloc.c:2239:
+ ^I^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1211: FILE: mm/page_alloc.c:2239:
+ ^I^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1212: FILE: mm/page_alloc.c:2240:
+ ^I^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1212: FILE: mm/page_alloc.c:2240:
+ ^I^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1212: FILE: mm/page_alloc.c:2240:
+ ^I^I^I}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1214: FILE: mm/page_alloc.c:2242:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1214: FILE: mm/page_alloc.c:2242:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1215: FILE: mm/page_alloc.c:2243:
+ ^I^I/* Scan global list */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1215: FILE: mm/page_alloc.c:2243:
+ ^I^I/* Scan global list */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1215: FILE: mm/page_alloc.c:2243:
+ ^I^I/* Scan global list */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1216: FILE: mm/page_alloc.c:2244:
+ ^I^Iseq_printf(m, "\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1216: FILE: mm/page_alloc.c:2244:
+ ^I^Iseq_printf(m, "\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1216: FILE: mm/page_alloc.c:2244:
+ ^I^Iseq_printf(m, "\n");$

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1216: FILE: mm/page_alloc.c:2244:
+ 		seq_printf(m, "\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1217: FILE: mm/page_alloc.c:2245:
+ ^I^Iseq_printf(m, "Node %d, zone %8s, type %10s", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1217: FILE: mm/page_alloc.c:2245:
+ ^I^Iseq_printf(m, "Node %d, zone %8s, type %10s", $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1217: FILE: mm/page_alloc.c:2245:
+ ^I^Iseq_printf(m, "Node %d, zone %8s, type %10s", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1217: FILE: mm/page_alloc.c:2245:
+ ^I^Iseq_printf(m, "Node %d, zone %8s, type %10s", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1218: FILE: mm/page_alloc.c:2246:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1218: FILE: mm/page_alloc.c:2246:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1218: FILE: mm/page_alloc.c:2246:
+ 		seq_printf(m, "Node %d, zone %8s, type %10s", 
+ 					pgdat->node_id, zone->name,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1218: FILE: mm/page_alloc.c:2246:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1219: FILE: mm/page_alloc.c:2247:
+ ^I^I^I^I^I"MAX_ORDER");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1219: FILE: mm/page_alloc.c:2247:
+ ^I^I^I^I^I"MAX_ORDER");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1219: FILE: mm/page_alloc.c:2247:
+ ^I^I^I^I^I"MAX_ORDER");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1220: FILE: mm/page_alloc.c:2248:
+ ^I^Inr_bufs = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1220: FILE: mm/page_alloc.c:2248:
+ ^I^Inr_bufs = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1220: FILE: mm/page_alloc.c:2248:
+ ^I^Inr_bufs = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1221: FILE: mm/page_alloc.c:2249:
+ ^I^Ilist_for_each(elem, &(zone->free_area_global.free_list))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1221: FILE: mm/page_alloc.c:2249:
+ ^I^Ilist_for_each(elem, &(zone->free_area_global.free_list))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1221: FILE: mm/page_alloc.c:2249:
+ ^I^Ilist_for_each(elem, &(zone->free_area_global.free_list))$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_global.free_list
#1221: FILE: mm/page_alloc.c:2249:
+ 		list_for_each(elem, &(zone->free_area_global.free_list))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1222: FILE: mm/page_alloc.c:2250:
+ ^I^I^I++nr_bufs;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1222: FILE: mm/page_alloc.c:2250:
+ ^I^I^I++nr_bufs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1222: FILE: mm/page_alloc.c:2250:
+ ^I^I^I++nr_bufs;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1223: FILE: mm/page_alloc.c:2251:
+ ^I^Iseq_printf(m, "%6lu \n", nr_bufs);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1223: FILE: mm/page_alloc.c:2251:
+ ^I^Iseq_printf(m, "%6lu \n", nr_bufs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1223: FILE: mm/page_alloc.c:2251:
+ ^I^Iseq_printf(m, "%6lu \n", nr_bufs);$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1223: FILE: mm/page_alloc.c:2251:
+ 		seq_printf(m, "%6lu \n", nr_bufs);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1226: FILE: mm/page_alloc.c:2254:
+ ^I^Iseq_printf(m, "\n%s Zone beancounters\n", zone->name);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1226: FILE: mm/page_alloc.c:2254:
+ ^I^Iseq_printf(m, "\n%s Zone beancounters\n", zone->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1226: FILE: mm/page_alloc.c:2254:
+ ^I^Iseq_printf(m, "\n%s Zone beancounters\n", zone->name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1227: FILE: mm/page_alloc.c:2255:
+ ^I^Iseq_printf(m, "Global steal:     %lu\n", zone->global_steal);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1227: FILE: mm/page_alloc.c:2255:
+ ^I^Iseq_printf(m, "Global steal:     %lu\n", zone->global_steal);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1227: FILE: mm/page_alloc.c:2255:
+ ^I^Iseq_printf(m, "Global steal:     %lu\n", zone->global_steal);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1228: FILE: mm/page_alloc.c:2256:
+ ^I^Iseq_printf(m, "Global refills:   %lu\n", zone->global_refill);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1228: FILE: mm/page_alloc.c:2256:
+ ^I^Iseq_printf(m, "Global refills:   %lu\n", zone->global_refill);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1228: FILE: mm/page_alloc.c:2256:
+ ^I^Iseq_printf(m, "Global refills:   %lu\n", zone->global_refill);$

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1232: FILE: mm/page_alloc.c:2260:
+		seq_printf(m, "Bulk requests ");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1233: FILE: mm/page_alloc.c:2261:
+		for (i=0; i< MAX_ORDER; i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#1233: FILE: mm/page_alloc.c:2261:
+		for (i=0; i< MAX_ORDER; i++) {
 		           ^

WARNING:TYPO_SPELLING: 'alloced' may be misspelled - perhaps 'allocated'?
#1237: FILE: mm/page_alloc.c:2265:
+		seq_printf(m, "\nBulk alloced  ");
 		                      ^^^^^^^

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1237: FILE: mm/page_alloc.c:2265:
+		seq_printf(m, "\nBulk alloced  ");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1238: FILE: mm/page_alloc.c:2266:
+		for (i=0; i< MAX_ORDER; i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#1238: FILE: mm/page_alloc.c:2266:
+		for (i=0; i< MAX_ORDER; i++) {
 		           ^

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1242: FILE: mm/page_alloc.c:2270:
+		seq_printf(m, "\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1249: FILE: mm/page_alloc.c:2277:
+		for (i=0; i< ALLOC_TYPES; i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#1249: FILE: mm/page_alloc.c:2277:
+		for (i=0; i< ALLOC_TYPES; i++) {
 		           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1250: FILE: mm/page_alloc.c:2278:
+ ^I^I^Iseq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1250: FILE: mm/page_alloc.c:2278:
+ ^I^I^Iseq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1250: FILE: mm/page_alloc.c:2278:
+ ^I^I^Iseq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1250: FILE: mm/page_alloc.c:2278:
+ ^I^I^Iseq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1251: FILE: mm/page_alloc.c:2279:
+^I^I^I^I^Itype_names[i], $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1251: FILE: mm/page_alloc.c:2279:
+ 			seq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", 
+					type_names[i], 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1259: FILE: mm/page_alloc.c:2287:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1259: FILE: mm/page_alloc.c:2287:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1264: FILE: mm/page_alloc.c:2291:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1264: FILE: mm/page_alloc.c:2291:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1265: FILE: mm/page_alloc.c:2292:
+ ^I/* Show bean counters */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1265: FILE: mm/page_alloc.c:2292:
+ ^I/* Show bean counters */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1265: FILE: mm/page_alloc.c:2292:
+ ^I/* Show bean counters */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1267: FILE: mm/page_alloc.c:2294:
+ ^Iseq_printf(m, "\nGlobal beancounters\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1267: FILE: mm/page_alloc.c:2294:
+ ^Iseq_printf(m, "\nGlobal beancounters\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1267: FILE: mm/page_alloc.c:2294:
+ ^Iseq_printf(m, "\nGlobal beancounters\n");$

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1267: FILE: mm/page_alloc.c:2294:
+ 	seq_printf(m, "\nGlobal beancounters\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1268: FILE: mm/page_alloc.c:2295:
+ ^Iseq_printf(m, "Global steal:     %lu\n", global_steal);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1268: FILE: mm/page_alloc.c:2295:
+ ^Iseq_printf(m, "Global steal:     %lu\n", global_steal);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1268: FILE: mm/page_alloc.c:2295:
+ ^Iseq_printf(m, "Global steal:     %lu\n", global_steal);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1269: FILE: mm/page_alloc.c:2296:
+ ^Iseq_printf(m, "Global refills:   %lu\n", global_refill);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1269: FILE: mm/page_alloc.c:2296:
+ ^Iseq_printf(m, "Global refills:   %lu\n", global_refill);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1269: FILE: mm/page_alloc.c:2296:
+ ^Iseq_printf(m, "Global refills:   %lu\n", global_refill);$

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1272: FILE: mm/page_alloc.c:2299:
+	seq_printf(m, "Bulk requests ");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1273: FILE: mm/page_alloc.c:2300:
+	for (i=0; i< MAX_ORDER; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#1273: FILE: mm/page_alloc.c:2300:
+	for (i=0; i< MAX_ORDER; i++) {
 	           ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1273: FILE: mm/page_alloc.c:2300:
+	for (i=0; i< MAX_ORDER; i++) {
+		seq_printf(m, "%7lu ", bulk_requests[i]);
+	}

WARNING:TYPO_SPELLING: 'alloced' may be misspelled - perhaps 'allocated'?
#1276: FILE: mm/page_alloc.c:2303:
+	seq_printf(m, "\nBulk alloced  ");
 	                      ^^^^^^^

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1276: FILE: mm/page_alloc.c:2303:
+	seq_printf(m, "\nBulk alloced  ");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1277: FILE: mm/page_alloc.c:2304:
+	for (i=0; i< MAX_ORDER; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#1277: FILE: mm/page_alloc.c:2304:
+	for (i=0; i< MAX_ORDER; i++) {
 	           ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1277: FILE: mm/page_alloc.c:2304:
+	for (i=0; i< MAX_ORDER; i++) {
+		seq_printf(m, "%7lu ", bulk_alloced[i]);
+	}

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1280: FILE: mm/page_alloc.c:2307:
+	seq_printf(m, "\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1282: FILE: mm/page_alloc.c:2309:
+	for (i=0; i< ALLOC_TYPES; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#1282: FILE: mm/page_alloc.c:2309:
+	for (i=0; i< ALLOC_TYPES; i++) {
 	           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1283: FILE: mm/page_alloc.c:2310:
+ ^I^Iseq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1283: FILE: mm/page_alloc.c:2310:
+ ^I^Iseq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1283: FILE: mm/page_alloc.c:2310:
+ ^I^Iseq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1283: FILE: mm/page_alloc.c:2310:
+ ^I^Iseq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1284: FILE: mm/page_alloc.c:2311:
+^I^I^I^Itype_names[i], $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1284: FILE: mm/page_alloc.c:2311:
+ 		seq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", 
+				type_names[i], 

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000185921.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 179 errors, 165 warnings, 83 checks, 989 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000185921.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
