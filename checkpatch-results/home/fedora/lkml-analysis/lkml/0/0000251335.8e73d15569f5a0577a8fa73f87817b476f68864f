WARNING:TYPO_SPELLING: 'informations' may be misspelled - perhaps 'information'?
#28: 
some CFI informations to the signal trampoline (non tested) and a
         ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'retreive' may be misspelled - perhaps 'retrieve'?
#29: 
function to retreive a bitmap of implemented syscalls (see comments
            ^^^^^^^^

WARNING:TYPO_SPELLING: 'desriptor' may be misspelled - perhaps 'descriptor'?
#46: 
To call the functions directly bypassing the desriptor though, so
                                             ^^^^^^^^^

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/compat.h> instead of <asm/compat.h>
#104: FILE: arch/ppc64/kernel/asm-offsets.c:41:
+#include <asm/compat.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#140: FILE: arch/ppc64/kernel/setup.c:378:
+	printk("systemcfg size                = 0x%d\n", (int)sizeof(struct systemcfg));

ERROR:PRINTF_0XDECIMAL: Prefixing 0x with decimal output is defective
#140: FILE: arch/ppc64/kernel/setup.c:378:
+	printk("systemcfg size                = 0x%d\n", (int)sizeof(struct systemcfg));

Prefixing 0x with decimal output is defective and should be corrected.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#154: FILE: arch/ppc64/kernel/setup.c:754:
+	extern unsigned long *sys_call_table;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#155: FILE: arch/ppc64/kernel/setup.c:755:
+	extern unsigned long *sys_call_table32;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#156: FILE: arch/ppc64/kernel/setup.c:756:
+	extern unsigned long sys_ni_syscall;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#158: FILE: arch/ppc64/kernel/setup.c:758:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#171: FILE: arch/ppc64/kernel/setup.c:771:
+	printk(KERN_INFO "Syscall map setup, %d 32 bits and %d 64 bits syscalls\n",

CHECK:SPACING: No space is necessary after a cast
#218: FILE: arch/ppc64/kernel/signal.c:422:
+		regs->link = (unsigned long) &frame->tramp[0];

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#259: FILE: arch/ppc64/kernel/signal32.c:691:
+		regs->link = (unsigned long) frame->tramp;

CHECK:SPACING: No space is necessary after a cast
#284: FILE: arch/ppc64/kernel/signal32.c:859:
+		regs->link = (unsigned long) frame->mctx.tramp;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#325: FILE: arch/ppc64/kernel/time.c:170:
+ */ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#326: FILE: arch/ppc64/kernel/time.c:171:
+static __inline__ void timer_recalc_offset( unsigned long cur_tb )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#326: FILE: arch/ppc64/kernel/time.c:171:
+static __inline__ void timer_recalc_offset( unsigned long cur_tb )

WARNING:INLINE: plain inline is preferred over __inline__
#326: FILE: arch/ppc64/kernel/time.c:171:
+static __inline__ void timer_recalc_offset( unsigned long cur_tb )

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#328: FILE: arch/ppc64/kernel/time.c:173:
+	struct gettimeofday_vars * temp_varp;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#329: FILE: arch/ppc64/kernel/time.c:174:
+	unsigned temp_idx;

WARNING:MEMORY_BARRIER: memory barrier without comment
#349: FILE: arch/ppc64/kernel/time.c:194:
+	mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#354: FILE: arch/ppc64/kernel/time.c:199:
+	wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#357: FILE: arch/ppc64/kernel/time.c:202:
+	wmb();

ERROR:SPACING: space prohibited after that open parenthesis '('
#368: FILE: arch/ppc64/kernel/time.c:326:
+			timer_recalc_offset( cur_tb );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#368: FILE: arch/ppc64/kernel/time.c:326:
+			timer_recalc_offset( cur_tb );

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#387: FILE: arch/ppc64/kernel/time.c:443:
+	delta_xsec = mulhdu( (tb_last_stamp-do_gtod.varp->tb_orig_stamp),
 	                                   ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#387: FILE: arch/ppc64/kernel/time.c:443:
+	delta_xsec = mulhdu( (tb_last_stamp-do_gtod.varp->tb_orig_stamp),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#388: FILE: arch/ppc64/kernel/time.c:444:
+	delta_xsec = mulhdu( (tb_last_stamp-do_gtod.varp->tb_orig_stamp),
+			     do_gtod.varp->tb_to_xs );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#388: FILE: arch/ppc64/kernel/time.c:444:
+			     do_gtod.varp->tb_to_xs );

ERROR:SPACING: space prohibited after that open parenthesis '('
#418: FILE: arch/ppc64/kernel/time.c:681:
+	write_seqlock_irqsave( &xtime_lock, flags );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#418: FILE: arch/ppc64/kernel/time.c:681:
+	write_seqlock_irqsave( &xtime_lock, flags );

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#432: FILE: arch/ppc64/kernel/vdso.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#433: FILE: arch/ppc64/kernel/vdso.c:2:
+ *  linux/arch/ppc64/kernel/vdso.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#460: FILE: arch/ppc64/kernel/vdso.c:29:
+#include <asm/pgtable.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#462: FILE: arch/ppc64/kernel/vdso.c:31:
+#include <asm/processor.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#464: FILE: arch/ppc64/kernel/vdso.c:33:
+#include <asm/mmu_context.h>

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#473: FILE: arch/ppc64/kernel/vdso.c:42:
+#define DBG(fmt...) printk(fmt)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#478: FILE: arch/ppc64/kernel/vdso.c:47:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#481: FILE: arch/ppc64/kernel/vdso.c:50:
+ */ $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#482: FILE: arch/ppc64/kernel/vdso.c:51:
+extern char vdso64_start, vdso64_end;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#483: FILE: arch/ppc64/kernel/vdso.c:52:
+extern char vdso32_start, vdso32_end;

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#502: FILE: arch/ppc64/kernel/vdso.c:71:
+struct lib32_elfinfo
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Ehdr>
#503: FILE: arch/ppc64/kernel/vdso.c:72:
+	Elf32_Ehdr	*hdr;		/* ptr to ELF */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Sym>
#504: FILE: arch/ppc64/kernel/vdso.c:73:
+	Elf32_Sym	*dynsym;	/* ptr to .dynsym section */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#511: FILE: arch/ppc64/kernel/vdso.c:80:
+struct lib64_elfinfo
+{

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Ehdr>
#512: FILE: arch/ppc64/kernel/vdso.c:81:
+	Elf64_Ehdr	*hdr;

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Sym>
#513: FILE: arch/ppc64/kernel/vdso.c:82:
+	Elf64_Sym	*dynsym;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#519: FILE: arch/ppc64/kernel/vdso.c:88:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#523: FILE: arch/ppc64/kernel/vdso.c:92:
+	printk("kpg: %p (c:%d,f:%08lx)", __va(page_to_pfn(pg) << PAGE_SHIFT),

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#527: FILE: arch/ppc64/kernel/vdso.c:96:
+		printk(" upg: %p (c:%d,f:%08lx)", __va(page_to_pfn(upg) << PAGE_SHIFT),

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#531: FILE: arch/ppc64/kernel/vdso.c:100:
+	printk("\n");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#534: FILE: arch/ppc64/kernel/vdso.c:103:
+static void dump_vdso_pages(struct vm_area_struct * vma)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#539: FILE: arch/ppc64/kernel/vdso.c:108:
+		printk("vDSO32 @ %016lx:\n", (unsigned long)vdso32_kbase);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#540: FILE: arch/ppc64/kernel/vdso.c:109:
+		for (i=0; i<vdso32_pages; i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#540: FILE: arch/ppc64/kernel/vdso.c:109:
+		for (i=0; i<vdso32_pages; i++) {
 		           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#541: FILE: arch/ppc64/kernel/vdso.c:110:
+			struct page *pg = virt_to_page(vdso32_kbase + i*PAGE_SIZE);
 			                                               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#543: FILE: arch/ppc64/kernel/vdso.c:112:
+				follow_page(vma->vm_mm, vma->vm_start + i*PAGE_SIZE, 0)
 				                                         ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#549: FILE: arch/ppc64/kernel/vdso.c:118:
+		printk("vDSO64 @ %016lx:\n", (unsigned long)vdso64_kbase);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#550: FILE: arch/ppc64/kernel/vdso.c:119:
+		for (i=0; i<vdso64_pages; i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#550: FILE: arch/ppc64/kernel/vdso.c:119:
+		for (i=0; i<vdso64_pages; i++) {
 		           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#551: FILE: arch/ppc64/kernel/vdso.c:120:
+			struct page *pg = virt_to_page(vdso64_kbase + i*PAGE_SIZE);
 			                                               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#553: FILE: arch/ppc64/kernel/vdso.c:122:
+				follow_page(vma->vm_mm, vma->vm_start + i*PAGE_SIZE, 0)
 				                                         ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#564: FILE: arch/ppc64/kernel/vdso.c:133:
+static void vdso_vma_close(struct vm_area_struct * vma)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#573: FILE: arch/ppc64/kernel/vdso.c:142:
+static struct page * vdso_vma_nopage(struct vm_area_struct * vma,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#573: FILE: arch/ppc64/kernel/vdso.c:142:
+static struct page * vdso_vma_nopage(struct vm_area_struct * vma,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vdso_vma_nopage', this function's name, in a string
#580: FILE: arch/ppc64/kernel/vdso.c:149:
+	DBG("vdso_vma_nopage(current: %s, address: %016lx, off: %lx)\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#592: FILE: arch/ppc64/kernel/vdso.c:161:
+^I$

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#600: FILE: arch/ppc64/kernel/vdso.c:169:
+static struct vm_operations_struct vdso_vmops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma"
#632: FILE: arch/ppc64/kernel/vdso.c:201:
+	if (vma == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#645: FILE: arch/ppc64/kernel/vdso.c:214:
+^Icurrent->thread.vdso_base = vdso_base $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#680: FILE: arch/ppc64/kernel/vdso.c:249:
+static void * __init find_section32(Elf32_Ehdr *ehdr, const char *secname,
+				  unsigned long *size)

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Shdr>
#682: FILE: arch/ppc64/kernel/vdso.c:251:
+	Elf32_Shdr *sechdrs;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#692: FILE: arch/ppc64/kernel/vdso.c:261:
+		if (strcmp(secnames+sechdrs[i].sh_name, secname) == 0) {
 		                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#703: FILE: arch/ppc64/kernel/vdso.c:272:
+static void * __init find_section64(Elf64_Ehdr *ehdr, const char *secname,
+				  unsigned long *size)

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Shdr>
#705: FILE: arch/ppc64/kernel/vdso.c:274:
+	Elf64_Shdr *sechdrs;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#715: FILE: arch/ppc64/kernel/vdso.c:284:
+		if (strcmp(secnames+sechdrs[i].sh_name, secname) == 0) {
 		                   ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sym"
#759: FILE: arch/ppc64/kernel/vdso.c:328:
+	if (sym == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#760: FILE: arch/ppc64/kernel/vdso.c:329:
+		printk(KERN_WARNING "vDSO32: function %s not found !\n", symname);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sym"
#773: FILE: arch/ppc64/kernel/vdso.c:342:
+	if (sym == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#774: FILE: arch/ppc64/kernel/vdso.c:343:
+		printk(KERN_WARNING "vDSO64: function %s not found !\n", symname);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#780: FILE: arch/ppc64/kernel/vdso.c:349:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!v32->dynsym"
#792: FILE: arch/ppc64/kernel/vdso.c:361:
+	if (v32->dynsym == NULL || v32->dynstr == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!v32->dynstr"
#792: FILE: arch/ppc64/kernel/vdso.c:361:
+	if (v32->dynsym == NULL || v32->dynstr == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#793: FILE: arch/ppc64/kernel/vdso.c:362:
+		printk(KERN_ERR "vDSO32: a required symbol section was not found\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sect"
#797: FILE: arch/ppc64/kernel/vdso.c:366:
+	if (sect == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#798: FILE: arch/ppc64/kernel/vdso.c:367:
+		printk(KERN_ERR "vDSO32: the .text section was not found\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!v64->dynsym"
#805: FILE: arch/ppc64/kernel/vdso.c:374:
+	if (v64->dynsym == NULL || v64->dynstr == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!v64->dynstr"
#805: FILE: arch/ppc64/kernel/vdso.c:374:
+	if (v64->dynsym == NULL || v64->dynstr == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#806: FILE: arch/ppc64/kernel/vdso.c:375:
+		printk(KERN_ERR "vDSO64: a required symbol section was not found\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sect"
#810: FILE: arch/ppc64/kernel/vdso.c:379:
+	if (sect == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#811: FILE: arch/ppc64/kernel/vdso.c:380:
+		printk(KERN_ERR "vDSO64: the .text section was not found\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#832: FILE: arch/ppc64/kernel/vdso.c:401:
+static __init int vdso_fixup_datapage(struct lib32_elfinfo *v32,
+				       struct lib64_elfinfo *v64)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sym32"
#838: FILE: arch/ppc64/kernel/vdso.c:407:
+	if (sym32 == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#839: FILE: arch/ppc64/kernel/vdso.c:408:
+		printk(KERN_ERR "vDSO32: Can't find symbol __v_datapage_offset !\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#845: FILE: arch/ppc64/kernel/vdso.c:414:
+       ^Isym64 = find_symbol64(v64, "__v_datapage_offset");$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#845: FILE: arch/ppc64/kernel/vdso.c:414:
+       ^Isym64 = find_symbol64(v64, "__v_datapage_offset");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#845: FILE: arch/ppc64/kernel/vdso.c:414:
+       ^Isym64 = find_symbol64(v64, "__v_datapage_offset");$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sym64"
#846: FILE: arch/ppc64/kernel/vdso.c:415:
+	if (sym64 == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#847: FILE: arch/ppc64/kernel/vdso.c:416:
+		printk(KERN_ERR "vDSO64: Can't find symbol __v_datapage_offset !\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#883: FILE: arch/ppc64/kernel/vdso.c:452:
+	DBG("vdso64_kbase: %p, 0x%x pages, vdso32_kbase: %p, 0x%x pages\n",
+	       vdso64_kbase, vdso64_pages, vdso32_kbase, vdso32_pages);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#890: FILE: arch/ppc64/kernel/vdso.c:459:
+		printk(KERN_ERR "vDSO setup failure, not enabled !\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#892: FILE: arch/ppc64/kernel/vdso.c:461:
+		vdso64_pages = vdso32_pages = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#898: FILE: arch/ppc64/kernel/vdso.c:467:
+		struct page *pg = virt_to_page(vdso64_kbase + i*PAGE_SIZE);
 		                                               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#899: FILE: arch/ppc64/kernel/vdso.c:468:
+		struct page *pg = virt_to_page(vdso64_kbase + i*PAGE_SIZE);
+		ClearPageReserved(pg);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#903: FILE: arch/ppc64/kernel/vdso.c:472:
+		struct page *pg = virt_to_page(vdso32_kbase + i*PAGE_SIZE);
 		                                               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#904: FILE: arch/ppc64/kernel/vdso.c:473:
+		struct page *pg = virt_to_page(vdso32_kbase + i*PAGE_SIZE);
+		ClearPageReserved(pg);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#967: FILE: arch/ppc64/kernel/vdso32/datapage.S:1:
+#include <linux/config.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1024: FILE: arch/ppc64/kernel/vdso32/gettimeofday.S:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1029: FILE: arch/ppc64/kernel/vdso32/gettimeofday.S:6:
+ *  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1072: FILE: arch/ppc64/kernel/vdso32/gettimeofday.S:49:
+^Imulhwu^Ir5,r5,r6^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1081: FILE: arch/ppc64/kernel/vdso32/gettimeofday.S:58:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1096: FILE: arch/ppc64/kernel/vdso32/gettimeofday.S:73:
+*/ $

WARNING:TYPO_SPELLING: 'Substract' may be misspelled - perhaps 'Subtract'?
#1119: FILE: arch/ppc64/kernel/vdso32/gettimeofday.S:96:
+	/* Substract tb orig stamp. If the high part is non-zero, we jump to the
 	   ^^^^^^^^^

WARNING:TYPO_SPELLING: 'overriden' may be misspelled - perhaps 'overridden'?
#1154: FILE: arch/ppc64/kernel/vdso32/gettimeofday.S:131:
+	 * method). We have overriden that CR bit in the counter check,
 	                    ^^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1165: FILE: arch/ppc64/kernel/vdso32/sigtramp.S:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1171: FILE: arch/ppc64/kernel/vdso32/sigtramp.S:7:
+ *  $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1296: FILE: arch/ppc64/kernel/vdso32/vdso32.lds.S:1:
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1391: FILE: arch/ppc64/kernel/vdso32/vdso32_wrapper.S:1:
+#include <linux/init.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1449: FILE: arch/ppc64/kernel/vdso64/datapage.S:1:
+#include <linux/config.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1506: FILE: arch/ppc64/kernel/vdso64/gettimeofday.S:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1512: FILE: arch/ppc64/kernel/vdso64/gettimeofday.S:7:
+ *  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1564: FILE: arch/ppc64/kernel/vdso64/gettimeofday.S:59:
+*/ $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1598: FILE: arch/ppc64/kernel/vdso64/sigtramp.S:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1604: FILE: arch/ppc64/kernel/vdso64/sigtramp.S:7:
+ *  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1615: FILE: arch/ppc64/kernel/vdso64/sigtramp.S:18:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1718: FILE: arch/ppc64/kernel/vdso64/sigtramp.S:121:
+#^IEH_FRAME_DESCR^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1728: FILE: arch/ppc64/kernel/vdso64/vdso64.lds.S:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1757: FILE: arch/ppc64/kernel/vdso64/vdso64.lds.S:30:
+ $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1825: FILE: arch/ppc64/kernel/vdso64/vdso64_wrapper.S:1:
+#include <linux/init.h>

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_SETUP_ADDITIONAL_PAGES' is wrong - use Kconfig variables or standard guards instead
#1914: FILE: include/asm-ppc64/elf.h:251:
+#define ARCH_HAS_SETUP_ADDITIONAL_PAGES

The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong.

For big conceptual features use Kconfig symbols instead.  And for
smaller things where we have compatibility fallback functions but
want architectures able to override them with optimized ones, we
should either use weak functions (appropriate for some cases), or
the symbol that protects them should be the same symbol we use.

See: https://lore.kernel.org/lkml/CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1916: FILE: include/asm-ppc64/elf.h:253:
+extern int arch_setup_additional_pages(struct linux_binprm *bprm, int executable_stack);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1926: FILE: include/asm-ppc64/elf.h:274:
+^INEW_AUX_ENT(AT_SYSINFO_EHDR, current->thread.vdso_base);       ^I\$

WARNING:TYPO_SPELLING: 'mecanism' may be misspelled - perhaps 'mechanism'?
#1937: FILE: include/asm-ppc64/page.h:186:
+/* We do define AT_SYSINFO_EHDR but don't use the gate mecanism */
                                                        ^^^^^^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2008: FILE: include/asm-ppc64/systemcfg.h:55:
+	__u8  reserved0[3984-2*4*SYSCALL_MAP_SIZE]; /* Reserve rest of page */
 	                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2008: FILE: include/asm-ppc64/systemcfg.h:55:
+	__u8  reserved0[3984-2*4*SYSCALL_MAP_SIZE]; /* Reserve rest of page */
 	                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2008: FILE: include/asm-ppc64/systemcfg.h:55:
+	__u8  reserved0[3984-2*4*SYSCALL_MAP_SIZE]; /* Reserve rest of page */
 	                        ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2056: FILE: include/asm-ppc64/vdso.h:1:
+#ifndef __PPC64_VDSO_H__

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2075: FILE: include/asm-ppc64/vdso.h:20:
+extern void vdso_init(void);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2080: FILE: include/asm-ppc64/vdso.h:25:
+#define V_FUNCTION_BEGIN(name)		\
+	.globl name;			\
+        .section ".opd","a";		\
+        .align 3;			\
+	name:				\
+	.quad .name,.TOC.@tocbase,0;	\
+	.previous;			\
+	.globl .name;			\
+	.type .name,@function; 		\
+	.name:				\
+	.cfi_startproc

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#2080: FILE: include/asm-ppc64/vdso.h:25:
+#define V_FUNCTION_BEGIN(name)		\
+	.globl name;			\
+        .section ".opd","a";		\
+        .align 3;			\
+	name:				\
+	.quad .name,.TOC.@tocbase,0;	\
+	.previous;			\
+	.globl .name;			\
+	.type .name,@function; 		\
+	.name:				\
+	.cfi_startproc

ERROR:CODE_INDENT: code indent should use tabs where possible
#2082: FILE: include/asm-ppc64/vdso.h:27:
+        .section ".opd","a";^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2082: FILE: include/asm-ppc64/vdso.h:27:
+        .section ".opd","a";^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2082: FILE: include/asm-ppc64/vdso.h:27:
+        .section ".opd","a";		\
                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2083: FILE: include/asm-ppc64/vdso.h:28:
+        .align 3;^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2083: FILE: include/asm-ppc64/vdso.h:28:
+        .align 3;^I^I^I\$

WARNING:INDENTED_LABEL: labels should not be indented
#2084: FILE: include/asm-ppc64/vdso.h:29:
+	name:				\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2085: FILE: include/asm-ppc64/vdso.h:30:
+	.quad .name,.TOC.@tocbase,0;	\
 	           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2085: FILE: include/asm-ppc64/vdso.h:30:
+	.quad .name,.TOC.@tocbase,0;	\
 	                         ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2088: FILE: include/asm-ppc64/vdso.h:33:
+^I.type .name,@function; ^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2088: FILE: include/asm-ppc64/vdso.h:33:
+	.type .name,@function; 		\
 	           ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2092: FILE: include/asm-ppc64/vdso.h:37:
+#define V_FUNCTION_END(name)		\
+	.cfi_endproc			\
+	.size .name,.-.name;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#2092: FILE: include/asm-ppc64/vdso.h:37:
+#define V_FUNCTION_END(name)		\
+	.cfi_endproc			\
+	.size .name,.-.name;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2092: FILE: include/asm-ppc64/vdso.h:37:
+#define V_FUNCTION_END(name)		\
+	.cfi_endproc			\
+	.size .name,.-.name;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2094: FILE: include/asm-ppc64/vdso.h:39:
+	.size .name,.-.name;
 	           ^

ERROR:SPACING: space required before that '-' (ctx:VxV)
#2094: FILE: include/asm-ppc64/vdso.h:39:
+	.size .name,.-.name;
 	             ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2099: FILE: include/asm-ppc64/vdso.h:44:
+#define V_FUNCTION_BEGIN(name)		\
+	.globl name;			\
+	.type name,@function; 		\
+	name:				\
+	.cfi_startproc

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#2099: FILE: include/asm-ppc64/vdso.h:44:
+#define V_FUNCTION_BEGIN(name)		\
+	.globl name;			\
+	.type name,@function; 		\
+	name:				\
+	.cfi_startproc

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2101: FILE: include/asm-ppc64/vdso.h:46:
+^I.type name,@function; ^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2101: FILE: include/asm-ppc64/vdso.h:46:
+	.type name,@function; 		\
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#2102: FILE: include/asm-ppc64/vdso.h:47:
+	name:				\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2105: FILE: include/asm-ppc64/vdso.h:50:
+#define V_FUNCTION_END(name)		\
+	.cfi_endproc			\
+	.size name,.-name;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#2105: FILE: include/asm-ppc64/vdso.h:50:
+#define V_FUNCTION_END(name)		\
+	.cfi_endproc			\
+	.size name,.-name;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2105: FILE: include/asm-ppc64/vdso.h:50:
+#define V_FUNCTION_END(name)		\
+	.cfi_endproc			\
+	.size name,.-name;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2107: FILE: include/asm-ppc64/vdso.h:52:
+	.size name,.-name;
 	          ^

ERROR:SPACING: space required before that '-' (ctx:VxV)
#2107: FILE: include/asm-ppc64/vdso.h:52:
+	.size name,.-name;
 	            ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000251335.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 52 errors, 61 warnings, 52 checks, 1912 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000251335.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
