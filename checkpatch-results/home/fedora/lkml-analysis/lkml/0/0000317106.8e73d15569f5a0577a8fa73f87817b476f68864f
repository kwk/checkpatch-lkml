WARNING:TYPO_SPELLING: 'achive' may be misspelled - perhaps 'achieve'?
#30: 
this is the actual dm-crypt target. It uses cryptoapi to achive the same
                                                         ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
diff -Nur linux-2.6.0/drivers/md/dm-crypt.c linux-2.6.0~dm-crypt/drivers/md/dm-crypt.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: drivers/md/dm-crypt.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: drivers/md/dm-crypt.c:116:
+                          struct scatterlist *in, unsigned int length,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: drivers/md/dm-crypt.c:116:
+                          struct scatterlist *in, unsigned int length,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#159: FILE: drivers/md/dm-crypt.c:117:
+                          int write, sector_t sector)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: drivers/md/dm-crypt.c:117:
+                          int write, sector_t sector)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#186: FILE: drivers/md/dm-crypt.c:144:
+                   struct bio *bio_out, struct bio *bio_in,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: drivers/md/dm-crypt.c:144:
+                   struct bio *bio_out, struct bio *bio_in,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#187: FILE: drivers/md/dm-crypt.c:145:
+                   sector_t sector, int write)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: drivers/md/dm-crypt.c:145:
+                   sector_t sector, int write)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#203: FILE: drivers/md/dm-crypt.c:161:
+                         struct convert_context *ctx)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: drivers/md/dm-crypt.c:161:
+                         struct convert_context *ctx)$

ERROR:SPACING: space required before the open parenthesis '('
#207: FILE: drivers/md/dm-crypt.c:165:
+	while(ctx->idx_in < ctx->bio_in->bi_vcnt &&

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#235: FILE: drivers/md/dm-crypt.c:193:
+^I^I                              ctx->write, ctx->sector);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#252: FILE: drivers/md/dm-crypt.c:210:
+                   struct bio *base_bio, int *bio_vec_idx)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#252: FILE: drivers/md/dm-crypt.c:210:
+                   struct bio *base_bio, int *bio_vec_idx)$

ERROR:SPACING: space required before the open parenthesis '('
#274: FILE: drivers/md/dm-crypt.c:232:
+	for(i = bio->bi_idx; i < nr_iovecs; i++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#315: FILE: drivers/md/dm-crypt.c:273:
+                                    unsigned int bytes)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#315: FILE: drivers/md/dm-crypt.c:273:
+                                    unsigned int bytes)$

ERROR:SPACING: space required before the open parenthesis '('
#319: FILE: drivers/md/dm-crypt.c:277:
+	while(bytes) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#321: FILE: drivers/md/dm-crypt.c:279:
+		struct bio_vec *bv = bio_iovec_idx(bio, i++);
+		crypt_free_page(cc, bv->bv_page);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#332: FILE: drivers/md/dm-crypt.c:290:
+	struct crypt_c *cc = (struct crypt_c *) io->target->private;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#372: FILE: drivers/md/dm-crypt.c:330:
+		_bio_head = _bio_tail = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: No space is necessary after a cast
#406: FILE: drivers/md/dm-crypt.c:364:
+		io = (struct crypt_io *) bio->bi_private;

CHECK:SPACING: No space is necessary after a cast
#407: FILE: drivers/md/dm-crypt.c:365:
+		cc = (struct crypt_c *) io->target->private;

ERROR:CODE_INDENT: code indent should use tabs where possible
#410: FILE: drivers/md/dm-crypt.c:368:
+^I^I                   io->bio->bi_sector - io->target->begin, 0);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#431: FILE: drivers/md/dm-crypt.c:389:
+	int i;
+	for(i = 0; i < size; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#431: FILE: drivers/md/dm-crypt.c:389:
+	for(i = 0; i < size; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#433: FILE: drivers/md/dm-crypt.c:391:
+		int digits;
+		if (*hex >= 'a' && *hex <= 'f')

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#469: FILE: drivers/md/dm-crypt.c:427:
+	static char hex_digits[] = "0123456789abcdef";

ERROR:SPACING: space required before the open parenthesis '('
#472: FILE: drivers/md/dm-crypt.c:430:
+	for(i = 0; i < size; i++) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#508: FILE: drivers/md/dm-crypt.c:466:
+	if (!mode || strcmp(mode, "cbc") == 0)
[...]
+	else if (strcmp(mode, "ecb") == 0)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#512: FILE: drivers/md/dm-crypt.c:470:
+	else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cc"
#530: FILE: drivers/md/dm-crypt.c:488:
+	if (cc == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#555: FILE: drivers/md/dm-crypt.c:513:
+	if ((key_size == 0 && strcmp(argv[1], "-") != 0)
+	    || crypt_decode_key(cc->key, argv[1], key_size) < 0) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#576: FILE: drivers/md/dm-crypt.c:534:
+^I                  dm_table_get_mode(ti->table), &cc->dev)) {$

CHECK:SPACING: No space is necessary after a cast
#596: FILE: drivers/md/dm-crypt.c:554:
+	struct crypt_c *cc = (struct crypt_c *) ti->private;

CHECK:SPACING: No space is necessary after a cast
#608: FILE: drivers/md/dm-crypt.c:566:
+	struct crypt_io *io = (struct crypt_io *) bio->bi_private;

CHECK:SPACING: No space is necessary after a cast
#609: FILE: drivers/md/dm-crypt.c:567:
+	struct crypt_c *cc = (struct crypt_c *) io->target->private;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#627: FILE: drivers/md/dm-crypt.c:585:
+	if ((bio_rw(bio) == READ || bio_rw(bio) == READA)
+	    && bio_flagged(bio, BIO_UPTODATE)) {

CHECK:SPACING: No space is necessary after a cast
#641: FILE: drivers/md/dm-crypt.c:599:
+	struct crypt_c *cc = (struct crypt_c *) ti->private;

CHECK:BRACES: braces {} should be used on all arms of this statement
#664: FILE: drivers/md/dm-crypt.c:622:
+		if (bio_rw(bio) == WRITE) {
[...]
+		} else
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#667: FILE: drivers/md/dm-crypt.c:625:
+^I^I^I                           &bio_vec_idx);$

CHECK:BRACES: Unbalanced braces around else statement
#678: FILE: drivers/md/dm-crypt.c:636:
+		} else

CHECK:SPACING: No space is necessary after a cast
#727: FILE: drivers/md/dm-crypt.c:685:
+	struct crypt_c *cc = (struct crypt_c *) ti->private;

ERROR:SPACING: space required before the open parenthesis '('
#741: FILE: drivers/md/dm-crypt.c:699:
+		switch(cc->tfm->crt_u.cipher.cit_mode) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#749: FILE: drivers/md/dm-crypt.c:707:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:CODE_INDENT: code indent should use tabs where possible
#769: FILE: drivers/md/dm-crypt.c:727:
+^I^I         " %s " SECTOR_FORMAT, cc->iv_offset,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#770: FILE: drivers/md/dm-crypt.c:728:
+^I^I         buffer, cc->start);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#790: FILE: drivers/md/dm-crypt.c:748:
+^I                              0, 0, NULL, NULL);$

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#838: FILE: drivers/md/Kconfig:145:
+config DM_CRYPT
+	tristate "Crypt target support"
+	depends on BLK_DEV_DM && EXPERIMENTAL
+	select CRYPTO
+	---help---
+	  This device-mapper target allows you to create a device that
+	  transparently encrypts the data on it. You'll need to activate
+	  the required ciphers in the cryptoapi configuration in order to
+	  be able to use it.
+
+	  If unsure, say N.
+
 endmenu
 

Kconfig symbols should have a help text which fully describes
it.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000317106.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 16 warnings, 16 checks, 809 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000317106.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
