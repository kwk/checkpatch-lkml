WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#281: FILE: drivers/scsi/sg.c:745:
+static inline unsigned sg_jif_to_ms(int jifs)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: drivers/scsi/sg.c:747:
+    if (jifs <= 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: drivers/scsi/sg.c:749:
+    else {$

CHECK:BRACES: Unbalanced braces around else statement
#285: FILE: drivers/scsi/sg.c:749:
+    else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#287: FILE: drivers/scsi/sg.c:751:
+	unsigned int j = (unsigned int)jifs;
+	return (j < (UINT_MAX / 1000)) ? ((j * 1000) / HZ) : ((j / HZ) * 1000);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: drivers/scsi/sg.c:752:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#301: FILE: drivers/scsi/sg.c:1656:
+    return alloc_kiovec_sz(nr, bufp, szp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: drivers/scsi/sg.c:1658:
+    return alloc_kiovec(nr, bufp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#310: FILE: drivers/scsi/sg.c:1665:
+    free_kiovec_sz(nr, bufp, szp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#312: FILE: drivers/scsi/sg.c:1667:
+    free_kiovec(nr, bufp);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#388: FILE: include/asm-i386/apic.h:80:
+extern void nmi_watchdog_tick (struct pt_regs * regs);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#388: FILE: include/asm-i386/apic.h:80:
+extern void nmi_watchdog_tick (struct pt_regs * regs);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#388: FILE: include/asm-i386/apic.h:80:
+extern void nmi_watchdog_tick (struct pt_regs * regs);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#400: FILE: include/asm-x86_64/apic.h:81:
+extern void nmi_watchdog_tick (struct pt_regs * regs, unsigned reason);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#400: FILE: include/asm-x86_64/apic.h:81:
+extern void nmi_watchdog_tick (struct pt_regs * regs, unsigned reason);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#400: FILE: include/asm-x86_64/apic.h:81:
+extern void nmi_watchdog_tick (struct pt_regs * regs, unsigned reason);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#400: FILE: include/asm-x86_64/apic.h:81:
+extern void nmi_watchdog_tick (struct pt_regs * regs, unsigned reason);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#412: FILE: include/linux/blkdev.h:236:
+extern request_queue_t *blk_get_queue(kdev_t dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#421: FILE: include/linux/blkdev.h:249:
+extern int blk_seg_merge_ok(struct buffer_head *, struct buffer_head *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct buffer_head *' should also have an identifier name
#421: FILE: include/linux/blkdev.h:249:
+extern int blk_seg_merge_ok(struct buffer_head *, struct buffer_head *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct buffer_head *' should also have an identifier name
#421: FILE: include/linux/blkdev.h:249:
+extern int blk_seg_merge_ok(struct buffer_head *, struct buffer_head *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#433: FILE: include/linux/fs.h:1262:
+extern int get_buffer_flushtime(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#448: FILE: include/linux/ide.h:1448:
+extern void SELECT_DRIVE(ide_drive_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#448: FILE: include/linux/ide.h:1448:
+extern void SELECT_DRIVE(ide_drive_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#449: FILE: include/linux/ide.h:1449:
+extern void SELECT_INTERRUPT(ide_drive_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#449: FILE: include/linux/ide.h:1449:
+extern void SELECT_INTERRUPT(ide_drive_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#450: FILE: include/linux/ide.h:1450:
+extern void SELECT_MASK(ide_drive_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#450: FILE: include/linux/ide.h:1450:
+extern void SELECT_MASK(ide_drive_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#450: FILE: include/linux/ide.h:1450:
+extern void SELECT_MASK(ide_drive_t *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#451: FILE: include/linux/ide.h:1451:
+extern void QUIRK_LIST(ide_drive_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#451: FILE: include/linux/ide.h:1451:
+extern void QUIRK_LIST(ide_drive_t *);

WARNING:INLINE: plain inline is preferred over __inline__
#463: FILE: include/linux/parport_pc.h:44:
+static __inline__ void parport_pc_write_data(struct parport *p, unsigned char d)

WARNING:INLINE: plain inline is preferred over __inline__
#472: FILE: include/linux/parport_pc.h:52:
+static __inline__ unsigned char parport_pc_read_data(struct parport *p)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#481: FILE: include/linux/parport_pc.h:127:
+static __inline__ void parport_pc_data_reverse (struct parport *p)

WARNING:INLINE: plain inline is preferred over __inline__
#481: FILE: include/linux/parport_pc.h:127:
+static __inline__ void parport_pc_data_reverse (struct parport *p)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#487: FILE: include/linux/parport_pc.h:132:
+static __inline__ void parport_pc_data_forward (struct parport *p)

WARNING:INLINE: plain inline is preferred over __inline__
#487: FILE: include/linux/parport_pc.h:132:
+static __inline__ void parport_pc_data_forward (struct parport *p)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#493: FILE: include/linux/parport_pc.h:137:
+static __inline__ void parport_pc_write_control (struct parport *p,

WARNING:INLINE: plain inline is preferred over __inline__
#493: FILE: include/linux/parport_pc.h:137:
+static __inline__ void parport_pc_write_control (struct parport *p,

WARNING:INLINE: plain inline is preferred over __inline__
#502: FILE: include/linux/parport_pc.h:155:
+static __inline__ unsigned char parport_pc_read_control(struct parport *p)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#511: FILE: include/linux/parport_pc.h:165:
+static __inline__ unsigned char parport_pc_frob_control (struct parport *p,

WARNING:INLINE: plain inline is preferred over __inline__
#511: FILE: include/linux/parport_pc.h:165:
+static __inline__ unsigned char parport_pc_frob_control (struct parport *p,

WARNING:INLINE: plain inline is preferred over __inline__
#520: FILE: include/linux/parport_pc.h:192:
+static __inline__ unsigned char parport_pc_read_status(struct parport *p)

WARNING:INLINE: plain inline is preferred over __inline__
#527: FILE: include/linux/parport_pc.h:198:
+static __inline__ void parport_pc_disable_irq(struct parport *p)

WARNING:INLINE: plain inline is preferred over __inline__
#533: FILE: include/linux/parport_pc.h:203:
+static __inline__ void parport_pc_enable_irq(struct parport *p)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#545: FILE: include/linux/sched.h:766:
+extern void FASTCALL(__mmdrop(struct mm_struct *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#545: FILE: include/linux/sched.h:766:
+extern void FASTCALL(__mmdrop(struct mm_struct *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#557: FILE: include/net/ip.h:140:
+extern int ip_finish_output(struct sk_buff *skb);

WARNING:INLINE: plain inline is preferred over __inline__
#581: FILE: net/ipv4/ip_output.c:187:
+static __inline__ int __ip_finish_output(struct sk_buff *skb)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000259995.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 35 warnings, 12 checks, 499 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000259995.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
