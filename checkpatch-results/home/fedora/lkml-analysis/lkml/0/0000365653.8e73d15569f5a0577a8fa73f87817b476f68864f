CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#37: 
Jörn
 ^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
--- linux-2.5.70/lib/zlib_deflate/deflate.c~zlibspace	2003-04-07 19:30:42.000000000 +0200

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#49: FILE: lib/zlib_deflate/deflate.c:211:
+    zlib_get_workspace(strm);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#57: FILE: lib/zlib_deflate/deflate.c:562:
+    zlib_put_workspace(strm);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#68: FILE: lib/zlib_inflate/inflate.c:11:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: lib/zlib_inflate/inflate.c:39:
+  zlib_put_workspace(z);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: lib/zlib_inflate/inflate.c:51:
+      stream_size != sizeof(z_stream))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: lib/zlib_inflate/inflate.c:57:
+  zlib_get_workspace(z);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: include/linux/zlib.h:81:
+    int      ws_num;    /* index in the internal workspace array */$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#109: FILE: include/linux/zlib.h:175:
+ZEXTERN void * __zlib_panic_workspace OF((void));

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#111: FILE: include/linux/zlib.h:177:
+ ^IBIG FAT WARNING:$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#111: FILE: include/linux/zlib.h:177:
+ ^IBIG FAT WARNING:$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#111: FILE: include/linux/zlib.h:177:
+/*
+ 	BIG FAT WARNING:

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#112: FILE: include/linux/zlib.h:178:
+ ^IThe only valid user of this function is a panic handler. This will$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#112: FILE: include/linux/zlib.h:178:
+ ^IThe only valid user of this function is a panic handler. This will$

ERROR:CODE_INDENT: code indent should use tabs where possible
#113: FILE: include/linux/zlib.h:179:
+ ^Ibreak for sure in any other case, as it bypasses the locking.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#113: FILE: include/linux/zlib.h:179:
+ ^Ibreak for sure in any other case, as it bypasses the locking.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#120: FILE: include/linux/zlib.h:186:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#127: FILE: lib/zlib_generic.c:1:
+#include <linux/init.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:SPACING: space required after that ',' (ctx:VxV)
#136: FILE: lib/zlib_generic.c:10:
+#define MAX(a,b) (a) > (b) ? (a) : (b)
              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#136: FILE: lib/zlib_generic.c:10:
+#define MAX(a,b) (a) > (b) ? (a) : (b)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#136: FILE: lib/zlib_generic.c:10:
+#define MAX(a,b) (a) > (b) ? (a) : (b)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#136: FILE: lib/zlib_generic.c:10:
+#define MAX(a,b) (a) > (b) ? (a) : (b)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#140: FILE: lib/zlib_generic.c:14:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#148: FILE: lib/zlib_generic.c:22:
+
+

CHECK:BRACES: Unbalanced braces around else statement
#153: FILE: lib/zlib_generic.c:27:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#167: FILE: lib/zlib_generic.c:41:
+	if (z->ws_num < 0)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#169: FILE: lib/zlib_generic.c:43:
+	else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#180: FILE: lib/zlib_generic.c:54:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#210: FILE: lib/zlib_generic.c:84:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#221: FILE: lib/zlib_generic.c:95:
+	for (i=1; i<zlib_no_workspaces; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#221: FILE: lib/zlib_generic.c:95:
+	for (i=1; i<zlib_no_workspaces; i++) {
 	           ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#221: FILE: lib/zlib_generic.c:95:
+	for (i=1; i<zlib_no_workspaces; i++) {
+		vfree(zlib_workspace[i]);
+	}

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#233: FILE: lib/zlib_generic.c:107:
+	for (i=1; i<zlib_no_workspaces; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#233: FILE: lib/zlib_generic.c:107:
+	for (i=1; i<zlib_no_workspaces; i++) {
 	           ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#235: FILE: lib/zlib_generic.c:109:
+		if (!zlib_workspace[i]) {
+			zlib_no_workspaces = i-1;
+		}

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#236: FILE: lib/zlib_generic.c:110:
+			zlib_no_workspaces = i-1;
 			                      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#258: FILE: lib/zlib_generic.c:132:
+
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#259: FILE: lib/zlib_generic.c:133:
+EXPORT_SYMBOL(zlib_get_workspace);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#260: FILE: lib/zlib_generic.c:134:
+EXPORT_SYMBOL(zlib_put_workspace);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#261: FILE: lib/zlib_generic.c:135:
+EXPORT_SYMBOL(__zlib_crash_workspace);

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#262: FILE: lib/zlib_generic.c:136:
+MODULE_AUTHOR("Jörn Engel <joern@wh.fh-wedel.de>");
                 ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#270: FILE: include/linux/zutil.h:126:
+extern void zlib_get_workspace(z_streamp z);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#271: FILE: include/linux/zutil.h:127:
+extern void zlib_put_workspace(z_streamp z);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000365653.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 17 warnings, 17 checks, 229 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000365653.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
