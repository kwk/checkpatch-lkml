ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#44: 
--- a/drivers/base/Makefile	Mon Jan 19 17:05:14 2004

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#62: FILE: drivers/base/class.c:49:
+static void class_release(struct kobject * kobj)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#72: FILE: drivers/base/class.c:59:
+		pr_debug("class '%s' does not have a release() function, "
+			 "be careful\n", class->name);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#90: FILE: drivers/base/class_simple.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#95: FILE: drivers/base/class_simple.c:6:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#110: FILE: drivers/base/class_simple.c:21:
+};
+#define to_class_simple(d) container_of(d, struct class_simple, class)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#117: FILE: drivers/base/class_simple.c:28:
+};
+#define to_simple_dev(d) container_of(d, struct simple_dev, class_dev)

WARNING:LINE_SPACING: Missing a blank line after declarations
#125: FILE: drivers/base/class_simple.c:36:
+	struct simple_dev *s_dev = to_simple_dev(class_dev);
+	kfree(s_dev);

WARNING:LINE_SPACING: Missing a blank line after declarations
#131: FILE: drivers/base/class_simple.c:42:
+	struct simple_dev *s_dev = to_simple_dev(class_dev);
+	return print_dev_t(buf, s_dev->dev);

WARNING:LINE_SPACING: Missing a blank line after declarations
#137: FILE: drivers/base/class_simple.c:48:
+	struct class_simple *cs = to_class_simple(class);
+	kfree(cs);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#169: FILE: drivers/base/class_simple.c:80:
+	cs->attr.attr.mode = S_IRUGO;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cs == NULL'
#195: FILE: drivers/base/class_simple.c:106:
+	if ((cs == NULL) || (IS_ERR(cs)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cs"
#195: FILE: drivers/base/class_simple.c:106:
+	if ((cs == NULL) || (IS_ERR(cs)))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: drivers/base/class_simple.c:115:
+ * @cs: pointer to the struct class_simple that this device should be registered to.  $

WARNING:TYPO_SPELLING: 'assiociated' may be misspelled - perhaps 'associated'?
#206: FILE: drivers/base/class_simple.c:117:
+ * @device: a pointer to a struct device that is assiociated with this class device.
                                                  ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#218: FILE: drivers/base/class_simple.c:129:
+struct class_device *class_simple_device_add(struct class_simple *cs, dev_t dev, struct device *device, const char *fmt, ...)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cs == NULL'
#224: FILE: drivers/base/class_simple.c:135:
+	if ((cs == NULL) || (IS_ERR(cs))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cs"
#224: FILE: drivers/base/class_simple.c:135:
+	if ((cs == NULL) || (IS_ERR(cs))) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#239: FILE: drivers/base/class_simple.c:150:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#240: FILE: drivers/base/class_simple.c:151:
+	va_start(args,fmt);
 	             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#262: FILE: drivers/base/class_simple.c:173:
+ * class_simple_device_remove - removes a class device that was created with class_simple_device_add()

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#316: FILE: include/linux/device.h:252:
+extern struct class_simple *class_simple_create(struct module *owner, char *name);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#317: FILE: include/linux/device.h:253:
+extern void class_simple_destroy(struct class_simple *cs);

WARNING:LONG_LINE: line length of 132 exceeds 100 columns
#318: FILE: include/linux/device.h:254:
+extern struct class_device *class_simple_device_add(struct class_simple *cs, dev_t dev, struct device *device, const char *fmt, ...)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#318: FILE: include/linux/device.h:254:
+extern struct class_device *class_simple_device_add(struct class_simple *cs, dev_t dev, struct device *device, const char *fmt, ...)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#319: FILE: include/linux/device.h:255:
+	__attribute__((format(printf,4,5)));
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#319: FILE: include/linux/device.h:255:
+	__attribute__((format(printf,4,5)));
 	                              ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(4,5) over __attribute__((format(printf,4,5)))
#319: FILE: include/linux/device.h:255:
+	__attribute__((format(printf,4,5)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#320: FILE: include/linux/device.h:256:
+extern void class_simple_device_remove(dev_t dev);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000310395.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 11 warnings, 10 checks, 262 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000310395.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
