WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
diff -Naur linux-2.5.44.orig/drivers/Makefile linux-2.5.44.lkcd/drivers/Makefile

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#87: FILE: drivers/dump/dump_base.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#136: FILE: drivers/dump/dump_base.c:50:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#231: FILE: drivers/dump/dump_base.c:145:
+ *     8:   Write out the dump header and all conventional/cached $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#232: FILE: drivers/dump/dump_base.c:146:
+ *^I    memory (RAM) pages in the system (kernel, user, free).  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#244: FILE: drivers/dump/dump_base.c:158:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#269: FILE: drivers/dump/dump_base.c:183:
+#include <asm/uaccess.h>

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#284: FILE: drivers/dump/dump_base.c:198:
+static long dump_scheduler_enabled = 0;  /* Default:scheduler is disabled   */

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#296: FILE: drivers/dump/dump_base.c:210:
+long dump_unreserved_mem = 0;      /* Save Pages even if it isn't reserved */

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#297: FILE: drivers/dump/dump_base.c:211:
+long dump_unreferenced_mem = 0;    /* Save Pages even if page_count == 0   */

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#298: FILE: drivers/dump/dump_base.c:212:
+long dump_nonconventional_mem = 0; /* Save non-conventional mem (firmware) */

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#299: FILE: drivers/dump/dump_base.c:213:
+volatile int dump_started = 0;     /* Indicated we are about to dump  */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#299: FILE: drivers/dump/dump_base.c:213:
+volatile int dump_started = 0;     /* Indicated we are about to dump  */

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#300: FILE: drivers/dump/dump_base.c:214:
+static struct dump_operations *dump_device_ops = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#312: FILE: drivers/dump/dump_base.c:226:
+static int dump_ioctl(struct inode *i, struct file *f,
+	unsigned int cmd, unsigned long arg);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#314: FILE: drivers/dump/dump_base.c:228:
+static struct file_operations dump_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#330: FILE: drivers/dump/dump_base.c:244:
+static int dump_okay = 0;      ^I   /* can we dump out to disk?     */$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#330: FILE: drivers/dump/dump_base.c:244:
+static int dump_okay = 0;      	   /* can we dump out to disk?     */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#338: FILE: drivers/dump/dump_base.c:252:
+extern int panic_timeout;          /* time before reboot                   */

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#344: FILE: drivers/dump/dump_base.c:258:
+#if defined(__LITTLE_ENDIAN) $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: drivers/dump/dump_base.c:283:
+dump_read_proc(char *page, char **start, off_t off,
+	int count, int *eof, void *data)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#375: FILE: drivers/dump/dump_base.c:289:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#376: FILE: drivers/dump/dump_base.c:290:
+	if (0 == strcmp(p->name, DUMP_LEVEL_NAME)) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#379: FILE: drivers/dump/dump_base.c:293:
+	} else if (0 == strcmp(p->name, DUMP_FLAGS_NAME)) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#382: FILE: drivers/dump/dump_base.c:296:
+	} else if (0 == strcmp(p->name, DUMP_COMPRESS_NAME)) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#385: FILE: drivers/dump/dump_base.c:299:
+	} else if (0 == strcmp(p->name, DUMP_DEVICE_NAME)) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#394: FILE: drivers/dump/dump_base.c:308:
+		if (len <= 0) return 0;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#432: FILE: drivers/dump/dump_base.c:346:
+	printk("setting dump_scheduler_enabled = 1\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#438: FILE: drivers/dump/dump_base.c:352:
+	printk("setting dump_interrupts_enabled = 0\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#444: FILE: drivers/dump/dump_base.c:358:
+	printk("setting dump_nondisruptive_enabled = 0\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#452: FILE: drivers/dump/dump_base.c:366:
+ *       block sizes, etc. $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#453: FILE: drivers/dump/dump_base.c:367:
+ * ^I Writes DUMP_BUFFER_SIZE bytes in page buffer$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#455: FILE: drivers/dump/dump_base.c:369:
+ * Returns: number of bytes written or -ERRNO. $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#462: FILE: drivers/dump/dump_base.c:376:
+	loff_t offset=0;
 	             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#463: FILE: drivers/dump/dump_base.c:377:
+^I$

CHECK:SPACING: No space is necessary after a cast
#468: FILE: drivers/dump/dump_base.c:382:
+		offset = (loff_t) (*eof);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#473: FILE: drivers/dump/dump_base.c:387:
+		printk("dump_kernel_write(): dump device not ready for IO\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dump_kernel_write', this function's name, in a string
#473: FILE: drivers/dump/dump_base.c:387:
+		printk("dump_kernel_write(): dump device not ready for IO\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#479: FILE: drivers/dump/dump_base.c:393:
+		printk("dump_kernel_write(): seek to dump device failed, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dump_kernel_write', this function's name, in a string
#479: FILE: drivers/dump/dump_base.c:393:
+		printk("dump_kernel_write(): seek to dump device failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#480: FILE: drivers/dump/dump_base.c:394:
+		printk("dump_kernel_write(): seek to dump device failed, "
+				"err %d\n", err);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#484: FILE: drivers/dump/dump_base.c:398:
+^I/* write to the dump device */ $

CHECK:SPACING: No space is necessary after a cast
#488: FILE: drivers/dump/dump_base.c:402:
+		*eof = (int) offset;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#490: FILE: drivers/dump/dump_base.c:404:
+		printk("dump_kernel_write(): write to dump device failed, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dump_kernel_write', this function's name, in a string
#490: FILE: drivers/dump/dump_base.c:404:
+		printk("dump_kernel_write(): write to dump device failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#491: FILE: drivers/dump/dump_base.c:405:
+		printk("dump_kernel_write(): write to dump device failed, "
+				"err %d\n", err);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#498: FILE: drivers/dump/dump_base.c:412:
+		printk("dump_kernel_write(): dump device not ready for IO\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dump_kernel_write', this function's name, in a string
#498: FILE: drivers/dump/dump_base.c:412:
+		printk("dump_kernel_write(): dump device not ready for IO\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#517: FILE: drivers/dump/dump_base.c:431:
+	dp.dp_address = dp.dp_size = 0x0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#522: FILE: drivers/dump/dump_base.c:436:
+	memcpy((void *)(dump_page_buf + *toffset),
+		(const void *)&dp, sizeof(struct __dump_page));

WARNING:RETURN_VOID: void function return statements are not generally useful
#528: FILE: drivers/dump/dump_base.c:442:
+	return;
+}

CHECK:BRACES: braces {} should be used on all arms of this statement
#542: FILE: drivers/dump/dump_base.c:456:
+	if (PageInuse(p)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#547: FILE: drivers/dump/dump_base.c:461:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#554: FILE: drivers/dump/dump_base.c:468:
+	if (!PageInuse(p)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#559: FILE: drivers/dump/dump_base.c:473:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#567: FILE: drivers/dump/dump_base.c:481:
+ * NB: page is a DUMP_PAGE_SIZE page, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#588: FILE: drivers/dump/dump_base.c:502:
+ ^I * Selective dump:$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#588: FILE: drivers/dump/dump_base.c:502:
+ ^I * Selective dump:$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#589: FILE: drivers/dump/dump_base.c:503:
+^I *  ^ISome systems, have huge memories, NUMA for example, where$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#591: FILE: drivers/dump/dump_base.c:505:
+^I *^IThis is a simple 1st attempt at ordering the dump so the most $

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#603: FILE: drivers/dump/dump_base.c:517:
+			break;
+		else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#605: FILE: drivers/dump/dump_base.c:519:
+^Icase 2: $

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#608: FILE: drivers/dump/dump_base.c:522:
+			break;
+		else

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#613: FILE: drivers/dump/dump_base.c:527:
+			break;
+		else

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#618: FILE: drivers/dump/dump_base.c:532:
+
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#630: FILE: drivers/dump/dump_base.c:544:
+^Iif ((((unsigned long)vaddr < (unsigned long)current->thread_info + $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#630: FILE: drivers/dump/dump_base.c:544:
+	if ((((unsigned long)vaddr < (unsigned long)current->thread_info + 
[...]
+			size = DUMP_PAGE_SIZE;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#635: FILE: drivers/dump/dump_base.c:549:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#635: FILE: drivers/dump/dump_base.c:549:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#637: FILE: drivers/dump/dump_base.c:551:
+		size = dump_compress_func((char *)vaddr, DUMP_PAGE_SIZE,
+			(char *)dpcpage, DUMP_DPC_PAGE_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#652: FILE: drivers/dump/dump_base.c:566:
+	memcpy((void *)(dump_page_buf + *toffset), (const void *)&dp,
+		sizeof(struct __dump_page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#659: FILE: drivers/dump/dump_base.c:573:
+		memcpy((void *)(dump_page_buf + *toffset),
+			(const void *)dpcpage, size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#663: FILE: drivers/dump/dump_base.c:577:
+		DUMP_memcpy((void *)(dump_page_buf + *toffset),
+			(const void *)vaddr, size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#687: FILE: drivers/dump/dump_base.c:601:
+		printk(KERN_ALERT "Dumping from interrupt handler !\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#688: FILE: drivers/dump/dump_base.c:602:
+		printk(KERN_ALERT "Uncertain scenario - but will try my best\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#689: FILE: drivers/dump/dump_base.c:603:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#690: FILE: drivers/dump/dump_base.c:604:
+^I^I * Must be an unrelated interrupt, not in the middle of io ! $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#691: FILE: drivers/dump/dump_base.c:605:
+^I^I * If we've panic'ed in the middle of io we should take $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#692: FILE: drivers/dump/dump_base.c:606:
+^I^I * another approach $

WARNING:RETURN_VOID: void function return statements are not generally useful
#711: FILE: drivers/dump/dump_base.c:625:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#730: FILE: drivers/dump/dump_base.c:644:
+	return;
+}

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#735: FILE: drivers/dump/dump_base.c:649:
+	static int i = 0;

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#737: FILE: drivers/dump/dump_base.c:651:
+	switch (++i%4) {
 	           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#739: FILE: drivers/dump/dump_base.c:653:
+		printk("|\b");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#742: FILE: drivers/dump/dump_base.c:656:
+		printk("\\\b");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#745: FILE: drivers/dump/dump_base.c:659:
+		printk("-\b");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#748: FILE: drivers/dump/dump_base.c:662:
+		printk("/\b");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#768: FILE: drivers/dump/dump_base.c:682:
+	if ((sizeof(struct __dump_header) +
[...]
+			printk("dump_configure_header(): combined "

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#770: FILE: drivers/dump/dump_base.c:684:
+			printk("dump_configure_header(): combined "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dump_configure_header', this function's name, in a string
#770: FILE: drivers/dump/dump_base.c:684:
+			printk("dump_configure_header(): combined "

WARNING:SPLIT_STRING: quoted string split across lines
#771: FILE: drivers/dump/dump_base.c:685:
+			printk("dump_configure_header(): combined "
+				"headers larger than DUMP_BUFFER_SIZE!\n");

CHECK:SPACING: No space is necessary after a cast
#783: FILE: drivers/dump/dump_base.c:697:
+	dump_header.dh_current_task = (unsigned long) current;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#795: FILE: drivers/dump/dump_base.c:709:
+^Imemcpy((void *)&(dump_header.dh_utsname_sysname), $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dump_header.dh_utsname_sysname
#795: FILE: drivers/dump/dump_base.c:709:
+	memcpy((void *)&(dump_header.dh_utsname_sysname), 

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#796: FILE: drivers/dump/dump_base.c:710:
+	memcpy((void *)&(dump_header.dh_utsname_sysname), 
+		(const void *)&(system_utsname.sysname), UTSNAME_ENTRY_SZ);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around system_utsname.sysname
#796: FILE: drivers/dump/dump_base.c:710:
+		(const void *)&(system_utsname.sysname), UTSNAME_ENTRY_SZ);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#797: FILE: drivers/dump/dump_base.c:711:
+^Imemcpy((void *)&(dump_header.dh_utsname_nodename), $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dump_header.dh_utsname_nodename
#797: FILE: drivers/dump/dump_base.c:711:
+	memcpy((void *)&(dump_header.dh_utsname_nodename), 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#798: FILE: drivers/dump/dump_base.c:712:
+	memcpy((void *)&(dump_header.dh_utsname_nodename), 
+		(const void *)&(system_utsname.nodename), UTSNAME_ENTRY_SZ);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around system_utsname.nodename
#798: FILE: drivers/dump/dump_base.c:712:
+		(const void *)&(system_utsname.nodename), UTSNAME_ENTRY_SZ);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#799: FILE: drivers/dump/dump_base.c:713:
+^Imemcpy((void *)&(dump_header.dh_utsname_release), $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dump_header.dh_utsname_release
#799: FILE: drivers/dump/dump_base.c:713:
+	memcpy((void *)&(dump_header.dh_utsname_release), 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#800: FILE: drivers/dump/dump_base.c:714:
+	memcpy((void *)&(dump_header.dh_utsname_release), 
+		(const void *)&(system_utsname.release), UTSNAME_ENTRY_SZ);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around system_utsname.release
#800: FILE: drivers/dump/dump_base.c:714:
+		(const void *)&(system_utsname.release), UTSNAME_ENTRY_SZ);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#801: FILE: drivers/dump/dump_base.c:715:
+^Imemcpy((void *)&(dump_header.dh_utsname_version), $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dump_header.dh_utsname_version
#801: FILE: drivers/dump/dump_base.c:715:
+	memcpy((void *)&(dump_header.dh_utsname_version), 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#802: FILE: drivers/dump/dump_base.c:716:
+	memcpy((void *)&(dump_header.dh_utsname_version), 
+		(const void *)&(system_utsname.version), UTSNAME_ENTRY_SZ);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around system_utsname.version
#802: FILE: drivers/dump/dump_base.c:716:
+		(const void *)&(system_utsname.version), UTSNAME_ENTRY_SZ);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#803: FILE: drivers/dump/dump_base.c:717:
+^Imemcpy((void *)&(dump_header.dh_utsname_machine), $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dump_header.dh_utsname_machine
#803: FILE: drivers/dump/dump_base.c:717:
+	memcpy((void *)&(dump_header.dh_utsname_machine), 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#804: FILE: drivers/dump/dump_base.c:718:
+	memcpy((void *)&(dump_header.dh_utsname_machine), 
+		(const void *)&(system_utsname.machine), UTSNAME_ENTRY_SZ);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around system_utsname.machine
#804: FILE: drivers/dump/dump_base.c:718:
+		(const void *)&(system_utsname.machine), UTSNAME_ENTRY_SZ);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#805: FILE: drivers/dump/dump_base.c:719:
+^Imemcpy((void *)&(dump_header.dh_utsname_domainname), $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dump_header.dh_utsname_domainname
#805: FILE: drivers/dump/dump_base.c:719:
+	memcpy((void *)&(dump_header.dh_utsname_domainname), 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#806: FILE: drivers/dump/dump_base.c:720:
+	memcpy((void *)&(dump_header.dh_utsname_domainname), 
+		(const void *)&(system_utsname.domainname), UTSNAME_ENTRY_SZ);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around system_utsname.domainname
#806: FILE: drivers/dump/dump_base.c:720:
+		(const void *)&(system_utsname.domainname), UTSNAME_ENTRY_SZ);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dump_header.dh_panic_string
#809: FILE: drivers/dump/dump_base.c:723:
+		memcpy((void *)&(dump_header.dh_panic_string),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#810: FILE: drivers/dump/dump_base.c:724:
+		memcpy((void *)&(dump_header.dh_panic_string),
+			(const void *)panic_str, DUMP_PANIC_LEN);

ERROR:CODE_INDENT: code indent should use tabs where possible
#813: FILE: drivers/dump/dump_base.c:727:
+        dump_header_asm.dha_magic_number = DUMP_ASM_MAGIC_NUMBER;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#813: FILE: drivers/dump/dump_base.c:727:
+        dump_header_asm.dha_magic_number = DUMP_ASM_MAGIC_NUMBER;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#814: FILE: drivers/dump/dump_base.c:728:
+        dump_header_asm.dha_version = DUMP_ASM_VERSION_NUMBER;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#814: FILE: drivers/dump/dump_base.c:728:
+        dump_header_asm.dha_version = DUMP_ASM_VERSION_NUMBER;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#815: FILE: drivers/dump/dump_base.c:729:
+        dump_header_asm.dha_header_size = sizeof(struct __dump_header_asm);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#815: FILE: drivers/dump/dump_base.c:729:
+        dump_header_asm.dha_header_size = sizeof(struct __dump_header_asm);$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dump_header_asm.dha_regs
#819: FILE: drivers/dump/dump_base.c:733:
+		memcpy((void *)&(dump_header_asm.dha_regs),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#820: FILE: drivers/dump/dump_base.c:734:
+		memcpy((void *)&(dump_header_asm.dha_regs),
+			(const void *)regs, sizeof(struct pt_regs));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#850: FILE: drivers/dump/dump_base.c:764:
+	memcpy(dump_page_buf, (const void *)&dump_header,
+		sizeof(struct __dump_header));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#853: FILE: drivers/dump/dump_base.c:767:
+	memcpy((void *)(dump_page_buf + sizeof(struct __dump_header)),
+		(const void *)&dump_header_asm, sizeof(struct __dump_header_asm));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#858: FILE: drivers/dump/dump_base.c:772:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#859: FILE: drivers/dump/dump_base.c:773:
+^I * ALWAYS write out the dump header at DUMP_HEADER_OFFSET, $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#869: FILE: drivers/dump/dump_base.c:783:
+		printk("dump_kernel_write() failed!\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#887: FILE: drivers/dump/dump_base.c:801:
+dump_write_mbank(int *dump_truncated, int pass, u64 mbank_start,
+		u64 mbank_end, unsigned long *buf_loc)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#894: FILE: drivers/dump/dump_base.c:808:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#894: FILE: drivers/dump/dump_base.c:808:
+  $

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#894: FILE: drivers/dump/dump_base.c:808:
+			mem_loc += DUMP_PAGE_SIZE) {
+  

ERROR:TRAILING_WHITESPACE: trailing whitespace
#896: FILE: drivers/dump/dump_base.c:810:
+^I^Iif (dump_add_page((mem_loc >> DUMP_PAGE_SHIFT), $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#897: FILE: drivers/dump/dump_base.c:811:
+		if (dump_add_page((mem_loc >> DUMP_PAGE_SHIFT), 
+			buf_loc, pass)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#909: FILE: drivers/dump/dump_base.c:823:
+				printk("Write of dump pages failed!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#912: FILE: drivers/dump/dump_base.c:826:
+				printk("EOF on Write of dump pages; "

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#917: FILE: drivers/dump/dump_base.c:831:
+				printk("Near EOF on Write of dump pages; "

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#940: FILE: drivers/dump/dump_base.c:854:
+					printk("Dump header update "

WARNING:SPLIT_STRING: quoted string split across lines
#941: FILE: drivers/dump/dump_base.c:855:
+					printk("Dump header update "
+							"failed!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#944: FILE: drivers/dump/dump_base.c:858:
+					printk("Dump header update "

WARNING:SPLIT_STRING: quoted string split across lines
#945: FILE: drivers/dump/dump_base.c:859:
+					printk("Dump header update "
+							"failed; bizarre\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#948: FILE: drivers/dump/dump_base.c:862:
+				printk(".");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#961: FILE: drivers/dump/dump_base.c:875:
+				memcpy((void *)dump_page_buf,
+					(const void *)(dump_page_buf +

WARNING:BRACES: braces {} are not necessary for single statement blocks
#972: FILE: drivers/dump/dump_base.c:886:
+		if (*dump_truncated) {
+			break;
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#976: FILE: drivers/dump/dump_base.c:890:
+^Iprintk(" ");^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#976: FILE: drivers/dump/dump_base.c:890:
+	printk(" ");	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#987: FILE: drivers/dump/dump_base.c:901:
+ *^I 0: dump truncated^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#998: FILE: drivers/dump/dump_base.c:912:
+	printk("Compression value is 0x%x, Writing dump header \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#998: FILE: drivers/dump/dump_base.c:912:
+	printk("Compression value is 0x%x, Writing dump header \n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#999: FILE: drivers/dump/dump_base.c:913:
+	printk("Compression value is 0x%x, Writing dump header \n",
+			dump_compress);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1003: FILE: drivers/dump/dump_base.c:917:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1006: FILE: drivers/dump/dump_base.c:920:
+		printk("Initial dump header update failed!\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 25)
#1026: FILE: drivers/dump/dump_base.c:940:
+		if ((pass == 2) && dump_unreserved_mem == 0)
+			 continue;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pass == 2'
#1026: FILE: drivers/dump/dump_base.c:940:
+		if ((pass == 2) && dump_unreserved_mem == 0)

WARNING:TABSTOP: Statements should start on a tabstop
#1027: FILE: drivers/dump/dump_base.c:941:
+			 continue;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 25)
#1028: FILE: drivers/dump/dump_base.c:942:
+		if ((pass == 3) && dump_unreferenced_mem == 0)
+			 continue;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pass == 3'
#1028: FILE: drivers/dump/dump_base.c:942:
+		if ((pass == 3) && dump_unreferenced_mem == 0)

WARNING:TABSTOP: Statements should start on a tabstop
#1029: FILE: drivers/dump/dump_base.c:943:
+			 continue;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1030: FILE: drivers/dump/dump_base.c:944:
+^I^Iif (pass == 4) { $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1031: FILE: drivers/dump/dump_base.c:945:
+			if (dump_nonconventional_mem == 0) break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1033: FILE: drivers/dump/dump_base.c:947:
+			if (dump_mbanks == 1) break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1034: FILE: drivers/dump/dump_base.c:948:
+^I^I} $

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1036: FILE: drivers/dump/dump_base.c:950:
+		switch(pass) {
+			case 1:	printk("\nPass 1: Saving Kernel Pages: \n");
[...]
+			case 2:	printk("\nPass 2: Saving Remaining "
[...]
+			case 3:	printk("\nPass 3: Saving Remaining "
[...]
+			case 4:	printk("\nPass 4: Saving Unconventional "

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#1036: FILE: drivers/dump/dump_base.c:950:
+		switch(pass) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1037: FILE: drivers/dump/dump_base.c:951:
+			case 1:	printk("\nPass 1: Saving Kernel Pages: \n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1037: FILE: drivers/dump/dump_base.c:951:
+			case 1:	printk("\nPass 1: Saving Kernel Pages: \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1037: FILE: drivers/dump/dump_base.c:951:
+			case 1:	printk("\nPass 1: Saving Kernel Pages: \n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1039: FILE: drivers/dump/dump_base.c:953:
+			case 2:	printk("\nPass 2: Saving Remaining "

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1039: FILE: drivers/dump/dump_base.c:953:
+			case 2:	printk("\nPass 2: Saving Remaining "

WARNING:SPLIT_STRING: quoted string split across lines
#1040: FILE: drivers/dump/dump_base.c:954:
+			case 2:	printk("\nPass 2: Saving Remaining "
+						"Referenced Pages: \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1040: FILE: drivers/dump/dump_base.c:954:
+						"Referenced Pages: \n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1042: FILE: drivers/dump/dump_base.c:956:
+			case 3:	printk("\nPass 3: Saving Remaining "

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1042: FILE: drivers/dump/dump_base.c:956:
+			case 3:	printk("\nPass 3: Saving Remaining "

WARNING:SPLIT_STRING: quoted string split across lines
#1043: FILE: drivers/dump/dump_base.c:957:
+			case 3:	printk("\nPass 3: Saving Remaining "
+						"Unreferenced Pages: \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1043: FILE: drivers/dump/dump_base.c:957:
+						"Unreferenced Pages: \n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1045: FILE: drivers/dump/dump_base.c:959:
+			case 4:	printk("\nPass 4: Saving Unconventional "

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1045: FILE: drivers/dump/dump_base.c:959:
+			case 4:	printk("\nPass 4: Saving Unconventional "

WARNING:SPLIT_STRING: quoted string split across lines
#1046: FILE: drivers/dump/dump_base.c:960:
+			case 4:	printk("\nPass 4: Saving Unconventional "
+						"Memory: \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1046: FILE: drivers/dump/dump_base.c:960:
+						"Memory: \n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type != DUMP_MBANK_TYPE_CONVENTIONAL_MEMORY'
#1054: FILE: drivers/dump/dump_base.c:968:
+			if ((type != DUMP_MBANK_TYPE_CONVENTIONAL_MEMORY) &&
+				  (pass != 4)) continue;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pass != 4'
#1054: FILE: drivers/dump/dump_base.c:968:
+			if ((type != DUMP_MBANK_TYPE_CONVENTIONAL_MEMORY) &&
+				  (pass != 4)) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1054: FILE: drivers/dump/dump_base.c:968:
+			if ((type != DUMP_MBANK_TYPE_CONVENTIONAL_MEMORY) &&
+				  (pass != 4)) continue;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1055: FILE: drivers/dump/dump_base.c:969:
+			if ((type != DUMP_MBANK_TYPE_CONVENTIONAL_MEMORY) &&
+				  (pass != 4)) continue;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type == DUMP_MBANK_TYPE_CONVENTIONAL_MEMORY'
#1056: FILE: drivers/dump/dump_base.c:970:
+			if ((type == DUMP_MBANK_TYPE_CONVENTIONAL_MEMORY) &&
+				  (pass == 4)) continue;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pass == 4'
#1056: FILE: drivers/dump/dump_base.c:970:
+			if ((type == DUMP_MBANK_TYPE_CONVENTIONAL_MEMORY) &&
+				  (pass == 4)) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1056: FILE: drivers/dump/dump_base.c:970:
+			if ((type == DUMP_MBANK_TYPE_CONVENTIONAL_MEMORY) &&
+				  (pass == 4)) continue;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1057: FILE: drivers/dump/dump_base.c:971:
+			if ((type == DUMP_MBANK_TYPE_CONVENTIONAL_MEMORY) &&
+				  (pass == 4)) continue;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1058: FILE: drivers/dump/dump_base.c:972:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1059: FILE: drivers/dump/dump_base.c:973:
+			printk("Memory Bank[%d]: %llx ... %llx: "

ERROR:SPACING: space required after that ',' (ctx:ExV)
#1060: FILE: drivers/dump/dump_base.c:974:
+					,i, mem_bank_start, mem_bank_end);
 					^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1062: FILE: drivers/dump/dump_base.c:976:
+			if ((retval = dump_write_mbank(&dump_truncated, pass,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1063: FILE: drivers/dump/dump_base.c:977:
+			if ((retval = dump_write_mbank(&dump_truncated, pass,
+				mem_bank_start, mem_bank_end, &buf_loc)) <= 0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1070: FILE: drivers/dump/dump_base.c:984:
+		printk("\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1073: FILE: drivers/dump/dump_base.c:987:
+^I/* $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1091: FILE: drivers/dump/dump_base.c:1005:
+                printk("Final write of last of page buffer and "$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1091: FILE: drivers/dump/dump_base.c:1005:
+                printk("Final write of last of page buffer and "$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1091: FILE: drivers/dump/dump_base.c:1005:
+                printk("Final write of last of page buffer and "

WARNING:SPLIT_STRING: quoted string split across lines
#1092: FILE: drivers/dump/dump_base.c:1006:
+                printk("Final write of last of page buffer and "
+				"DUMP_DH_END failed!\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1093: FILE: drivers/dump/dump_base.c:1007:
+                return -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1093: FILE: drivers/dump/dump_base.c:1007:
+                return -1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1094: FILE: drivers/dump/dump_base.c:1008:
+        } else if (n_bytes == 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1094: FILE: drivers/dump/dump_base.c:1008:
+        } else if (n_bytes == 0) {$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1095: FILE: drivers/dump/dump_base.c:1009:
+		printk("Hit EOF writing DUMP_DH_END; bad luck\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1096: FILE: drivers/dump/dump_base.c:1010:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1096: FILE: drivers/dump/dump_base.c:1010:
+                return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1097: FILE: drivers/dump/dump_base.c:1011:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1097: FILE: drivers/dump/dump_base.c:1011:
+        }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1101: FILE: drivers/dump/dump_base.c:1015:
+^I * part of the page buffer, if it did we have to write out one last $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1109: FILE: drivers/dump/dump_base.c:1023:
+^I^I * Copy the dump page buffer remnants in the second $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1113: FILE: drivers/dump/dump_base.c:1027:
+		memcpy((void *)dump_page_buf,
+			(const void *)(dump_page_buf + DUMP_BUFFER_SIZE),

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1118: FILE: drivers/dump/dump_base.c:1032:
+			printk("Final write of spillover page failed!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1121: FILE: drivers/dump/dump_base.c:1035:
+			printk("Hit EOF writing spill over page with "

WARNING:SPLIT_STRING: quoted string split across lines
#1122: FILE: drivers/dump/dump_base.c:1036:
+			printk("Hit EOF writing spill over page with "
+					"DUMP_DH_END; very bad luck!\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1138: FILE: drivers/dump/dump_base.c:1052:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1158: FILE: drivers/dump/dump_base.c:1072:
+^I/* $

ERROR:SPACING: space required before the open parenthesis '('
#1166: FILE: drivers/dump/dump_base.c:1080:
+	if(!dump_configure_header(panic_str, regs)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1167: FILE: drivers/dump/dump_base.c:1081:
+		printk("dump header could not be configured!\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1178: FILE: drivers/dump/dump_base.c:1092:
+		notifier_call_chain(&dump_notifier_list, DUMP_BEGIN_NONDISRUPT,
+				&dump_device);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1181: FILE: drivers/dump/dump_base.c:1095:
+		notifier_call_chain(&dump_notifier_list, DUMP_BEGIN,
+				&dump_device);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1185: FILE: drivers/dump/dump_base.c:1099:
+^I * if dump device notifier indicated the scheduler needs to be $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1193: FILE: drivers/dump/dump_base.c:1107:
+        /*$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1198: FILE: drivers/dump/dump_base.c:1112:
+				DUMP_FLAGS_NONDISRUPT) ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1199: FILE: drivers/dump/dump_base.c:1113:
+		printk("Non-Disruptive Dumps are not Supported by "

WARNING:SPLIT_STRING: quoted string split across lines
#1200: FILE: drivers/dump/dump_base.c:1114:
+		printk("Non-Disruptive Dumps are not Supported by "
+			"Dump Device 0x%x\n", kdev_val(dump_device));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1206: FILE: drivers/dump/dump_base.c:1120:
+			printk("Dumping to device 0x%x on CPU %d ...\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1207: FILE: drivers/dump/dump_base.c:1121:
+			printk("Dumping to device 0x%x on CPU %d ...\n",
+				kdev_val(dump_device), smp_processor_id());

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1208: FILE: drivers/dump/dump_base.c:1122:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1213: FILE: drivers/dump/dump_base.c:1127:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1214: FILE: drivers/dump/dump_base.c:1128:
+			printk("\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1215: FILE: drivers/dump/dump_base.c:1129:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1218: FILE: drivers/dump/dump_base.c:1132:
+				printk("Final dump header update "

WARNING:SPLIT_STRING: quoted string split across lines
#1219: FILE: drivers/dump/dump_base.c:1133:
+				printk("Final dump header update "
+						"failed!\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1221: FILE: drivers/dump/dump_base.c:1135:
+^I^I^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1225: FILE: drivers/dump/dump_base.c:1139:
+				printk("Dump Failed!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1227: FILE: drivers/dump/dump_base.c:1141:
+				printk("Dump Truncated (likely out of "

WARNING:SPLIT_STRING: quoted string split across lines
#1228: FILE: drivers/dump/dump_base.c:1142:
+				printk("Dump Truncated (likely out of "
+						"space).\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1230: FILE: drivers/dump/dump_base.c:1144:
+				printk("Dump Complete; %d dump pages "

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1231: FILE: drivers/dump/dump_base.c:1145:
+^I^I^I^I^I^I"saved.\n", $

WARNING:SPLIT_STRING: quoted string split across lines
#1231: FILE: drivers/dump/dump_base.c:1145:
+				printk("Dump Complete; %d dump pages "
+						"saved.\n", 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1244: FILE: drivers/dump/dump_base.c:1158:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1246: FILE: drivers/dump/dump_base.c:1160:
+^I * Non-disruptive dumps have to be set up special $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1253: FILE: drivers/dump/dump_base.c:1167:
+		printk("Dump: Rebooting in %d seconds ...\n", timeout);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around item->list
#1273: FILE: drivers/dump/dump_base.c:1187:
+	list_add(&(item->list), &dump_compress_list);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1276: FILE: drivers/dump/dump_base.c:1190:
+	printk("\n \nRegistering dump compression type 0x%x\n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1276: FILE: drivers/dump/dump_base.c:1190:
+	printk("\n \nRegistering dump compression type 0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1277: FILE: drivers/dump/dump_base.c:1191:
+	printk("\n \nRegistering dump compression type 0x%x\n",
+			item->compress_type);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1293: FILE: drivers/dump/dump_base.c:1207:
+		printk("Compression list is invalid!\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dc->list
#1301: FILE: drivers/dump/dump_base.c:1215:
+			list_del(&(dc->list));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1302: FILE: drivers/dump/dump_base.c:1216:
+			printk("De-registering dump compression type "

WARNING:SPLIT_STRING: quoted string split across lines
#1303: FILE: drivers/dump/dump_base.c:1217:
+			printk("De-registering dump compression type "
+					"0x%x\n", compression_type);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1326: FILE: drivers/dump/dump_base.c:1240:
+			printk("dump_compress = %d\n", dump_compress);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1331: FILE: drivers/dump/dump_base.c:1245:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1332: FILE: drivers/dump/dump_base.c:1246:
+^I * nothing on the list -- return ENODATA to indicate an error $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1334: FILE: drivers/dump/dump_base.c:1248:
+^I * NB: $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1338: FILE: drivers/dump/dump_base.c:1252:
+	printk("compression_type:%d not found\n", compression_type);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1358: FILE: drivers/dump/dump_base.c:1272:
+		printk("dump device driver is not loaded\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1366: FILE: drivers/dump/dump_base.c:1280:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1367: FILE: drivers/dump/dump_base.c:1281:
+^I * Allocate buffer to be used for copying pages (only once ...) $

WARNING:TYPO_SPELLING: 'boundry' may be misspelled - perhaps 'boundary'?
#1377: FILE: drivers/dump/dump_base.c:1291:
+	 * a system page (PAGE_SIZE) boundry.
 	                             ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1378: FILE: drivers/dump/dump_base.c:1292:
+^I * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1380: FILE: drivers/dump/dump_base.c:1294:
+^Idump_page_buf = dump_page_buf_0 = (void *)kmalloc(DUMP_BUFFER_SIZE + $

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1380: FILE: drivers/dump/dump_base.c:1294:
+	dump_page_buf = dump_page_buf_0 = (void *)kmalloc(DUMP_BUFFER_SIZE + 

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1380: FILE: drivers/dump/dump_base.c:1294:
+	dump_page_buf = dump_page_buf_0 = (void *)kmalloc(DUMP_BUFFER_SIZE + 

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1384: FILE: drivers/dump/dump_base.c:1298:
+		printk("Cannot kmalloc() dump page buffer!\n");

CHECK:SPACING: No space is necessary after a cast
#1390: FILE: drivers/dump/dump_base.c:1304:
+	dump_page_addr = (unsigned long) dump_page_buf;

CHECK:SPACING: No space is necessary after a cast
#1392: FILE: drivers/dump/dump_base.c:1306:
+		dump_page_buf = (void *) PAGE_ALIGN(dump_page_addr);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1438: FILE: drivers/dump/dump_base.c:1352:
+	switch (cmd) {
[...]
+		case DIOSDUMPDEV:
[...]
+		case DIOGDUMPDEV:
[...]
+		case DIOSDUMPLEVEL:
[...]
+		case DIOGDUMPLEVEL:
[...]
+		case DIOSDUMPFLAGS:
[...]
+		case DIOGDUMPFLAGS:
[...]
+		case DIOSDUMPCOMPRESS:
[...]
+		case DIOGDUMPCOMPRESS:

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1446: FILE: drivers/dump/dump_base.c:1360:
+			return (dump_open_kdev(to_kdev_t((dev_t)arg)));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1506: FILE: drivers/dump/dump_base.c:1420:
+			return (dump_compress_init((int)arg));

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1512: FILE: drivers/dump/dump_base.c:1426:
+
+	}

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#1530: FILE: drivers/dump/dump_base.c:1444:
+	if (!(dirent = create_proc_entry(name,
[...]
+			printk("unable to initialize "

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1530: FILE: drivers/dump/dump_base.c:1444:
+	if (!(dirent = create_proc_entry(name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1531: FILE: drivers/dump/dump_base.c:1445:
+	if (!(dirent = create_proc_entry(name,
+		S_IFREG|S_IRUGO|S_IWUSR, dump_root))) {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1531: FILE: drivers/dump/dump_base.c:1445:
+		S_IFREG|S_IRUGO|S_IWUSR, dump_root))) {
 		       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1531: FILE: drivers/dump/dump_base.c:1445:
+		S_IFREG|S_IRUGO|S_IWUSR, dump_root))) {
 		               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1531: FILE: drivers/dump/dump_base.c:1445:
+		S_IFREG|S_IRUGO|S_IWUSR, dump_root))) {

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1532: FILE: drivers/dump/dump_base.c:1446:
+			printk("unable to initialize "

WARNING:SPLIT_STRING: quoted string split across lines
#1533: FILE: drivers/dump/dump_base.c:1447:
+			printk("unable to initialize "
+				"/proc/%s/%s!\n", DUMP_ROOT_NAME, name);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1546: FILE: drivers/dump/dump_base.c:1460:
+ * $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1559: FILE: drivers/dump/dump_base.c:1473:
+		printk("unable to initialize /proc/%s!\n", DUMP_ROOT_NAME);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1602: FILE: drivers/dump/dump_base.c:1516:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1634: FILE: drivers/dump/dump_base.c:1548:
+^Iint i; $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1638: FILE: drivers/dump/dump_base.c:1552:
+		printk("dump_proc_init failed!; dump not initialized\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1644: FILE: drivers/dump/dump_base.c:1558:
+		printk("cannot register dump character device!\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1676: FILE: drivers/dump/dump_base.c:1590:
+^I^Iprintk("mbank[%d]: type:%d, phys_addr %llx ... " $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1676: FILE: drivers/dump/dump_base.c:1590:
+		printk("mbank[%d]: type:%d, phys_addr %llx ... " 

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#1677: FILE: drivers/dump/dump_base.c:1591:
+			"%llx \n" ,i, dump_mbank[i].type, dump_mbank[i].start,
 			          ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#1677: FILE: drivers/dump/dump_base.c:1591:
+			"%llx \n" ,i, dump_mbank[i].type, dump_mbank[i].start,
 			          ^

WARNING:SPLIT_STRING: quoted string split across lines
#1677: FILE: drivers/dump/dump_base.c:1591:
+		printk("mbank[%d]: type:%d, phys_addr %llx ... " 
+			"%llx \n" ,i, dump_mbank[i].type, dump_mbank[i].start,

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1677: FILE: drivers/dump/dump_base.c:1591:
+			"%llx \n" ,i, dump_mbank[i].type, dump_mbank[i].start,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1680: FILE: drivers/dump/dump_base.c:1594:
+			printk("oops, start is not DUMP_PAGE_SIZE:%x "

CHECK:SPACING: No space is necessary after a cast
#1681: FILE: drivers/dump/dump_base.c:1595:
+				"aligned!\n", (int) DUMP_PAGE_SIZE);

WARNING:SPLIT_STRING: quoted string split across lines
#1681: FILE: drivers/dump/dump_base.c:1595:
+			printk("oops, start is not DUMP_PAGE_SIZE:%x "
+				"aligned!\n", (int) DUMP_PAGE_SIZE);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1684: FILE: drivers/dump/dump_base.c:1598:
+			printk("oops, end is not DUMP_PAGE_SIZE:%x "

CHECK:SPACING: No space is necessary after a cast
#1685: FILE: drivers/dump/dump_base.c:1599:
+				"aligned!\n", (int) DUMP_PAGE_SIZE);

WARNING:SPLIT_STRING: quoted string split across lines
#1685: FILE: drivers/dump/dump_base.c:1599:
+			printk("oops, end is not DUMP_PAGE_SIZE:%x "
+				"aligned!\n", (int) DUMP_PAGE_SIZE);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1687: FILE: drivers/dump/dump_base.c:1601:
+	printk("Crash dump driver initialized.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1706: FILE: drivers/dump/dump_base.c:1620:
+		printk("cannot unregister dump character device!\n");

WARNING:RETURN_VOID: void function return statements are not generally useful
#1712: FILE: drivers/dump/dump_base.c:1626:
+	return;
+}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1714: FILE: drivers/dump/dump_base.c:1628:
+EXPORT_SYMBOL(dump_register_compression);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1715: FILE: drivers/dump/dump_base.c:1629:
+EXPORT_SYMBOL(dump_unregister_compression);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1716: FILE: drivers/dump/dump_base.c:1630:
+EXPORT_SYMBOL(dump_register_device);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1717: FILE: drivers/dump/dump_base.c:1631:
+EXPORT_SYMBOL(dump_unregister_device);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1718: FILE: drivers/dump/dump_base.c:1632:
+EXPORT_SYMBOL(dump_page_buf);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1732: FILE: drivers/dump/dump_blockdev.c:1:
+/*

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1752: FILE: drivers/dump/dump_blockdev.c:21:
+int dump_io_abort = 0;		/* set by end_io func during io error   */

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#1755: FILE: drivers/dump/dump_blockdev.c:24:
+struct block_device *dump_bdev = NULL;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1758: FILE: drivers/dump/dump_blockdev.c:27:
+volatile int bio_complete = 1;

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1766: FILE: drivers/dump/dump_blockdev.c:35:
+	if (dump_bio)
+		kfree(dump_bio);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1775: FILE: drivers/dump/dump_blockdev.c:44:
+^I/* $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1783: FILE: drivers/dump/dump_blockdev.c:52:
+		printk("dump_bio_end_io(): IO error while writing "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dump_bio_end_io', this function's name, in a string
#1783: FILE: drivers/dump/dump_blockdev.c:52:
+		printk("dump_bio_end_io(): IO error while writing "

WARNING:SPLIT_STRING: quoted string split across lines
#1784: FILE: drivers/dump/dump_blockdev.c:53:
+		printk("dump_bio_end_io(): IO error while writing "
+			"the dump, aborting\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1830: FILE: drivers/dump/dump_blockdev.c:99:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1839: FILE: drivers/dump/dump_blockdev.c:108:
+	if ((dump_bio = kmalloc(sizeof(struct bio), GFP_KERNEL)) == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dump_bio)...) over kmalloc(sizeof(struct bio)...)
#1839: FILE: drivers/dump/dump_blockdev.c:108:
+	if ((dump_bio = kmalloc(sizeof(struct bio), GFP_KERNEL)) == NULL) {

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1840: FILE: drivers/dump/dump_blockdev.c:109:
+		printk("dump_open_device(): Cannot allocate bio\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dump_open_device', this function's name, in a string
#1840: FILE: drivers/dump/dump_blockdev.c:109:
+		printk("dump_open_device(): Cannot allocate bio\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1847: FILE: drivers/dump/dump_blockdev.c:116:
+^Iif ((bvec = kmalloc(sizeof(struct bio_vec) * $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1847: FILE: drivers/dump/dump_blockdev.c:116:
+	if ((bvec = kmalloc(sizeof(struct bio_vec) * 

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*bvec)...) over kmalloc(sizeof(struct bio_vec)...)
#1847: FILE: drivers/dump/dump_blockdev.c:116:
+	if ((bvec = kmalloc(sizeof(struct bio_vec) * 

CHECK:SPACING: No space is necessary after a cast
#1856: FILE: drivers/dump/dump_blockdev.c:125:
+	a = (unsigned long) dump_page_buf;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1858: FILE: drivers/dump/dump_blockdev.c:127:
+	for (i = 0; i < (DUMP_BUFFER_SIZE >> PAGE_SHIFT); i++, bvec++,
+			a += PAGE_SIZE) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1874: FILE: drivers/dump/dump_blockdev.c:143:
+	printk("dump device 0x%x opened; Ready to take a "

WARNING:SPLIT_STRING: quoted string split across lines
#1875: FILE: drivers/dump/dump_blockdev.c:144:
+	printk("dump device 0x%x opened; Ready to take a "
+			"core dump\n", kdev_val(dump_dev));

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 16)
#1881: FILE: drivers/dump/dump_blockdev.c:150:
+err2:	if (dump_bdev) {
+		blkdev_put(dump_bdev, BDEV_RAW);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 16)
#1885: FILE: drivers/dump/dump_blockdev.c:154:
+err1:	if (dump_bdev) {
+		bdput(dump_bdev);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1934: FILE: drivers/dump/dump_blockdev.c:203:
+		printk("dev_dump_seek(): non-aligned page\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dev_dump_seek', this function's name, in a string
#1934: FILE: drivers/dump/dump_blockdev.c:203:
+		printk("dev_dump_seek(): non-aligned page\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1937: FILE: drivers/dump/dump_blockdev.c:206:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1939: FILE: drivers/dump/dump_blockdev.c:208:
+		printk("dev_dump_seek(): sector not aligned\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dev_dump_seek', this function's name, in a string
#1939: FILE: drivers/dump/dump_blockdev.c:208:
+		printk("dev_dump_seek(): sector not aligned\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1944: FILE: drivers/dump/dump_blockdev.c:213:
+		printk("dev_dump_seek(): not enough space left on device!\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dev_dump_seek', this function's name, in a string
#1944: FILE: drivers/dump/dump_blockdev.c:213:
+		printk("dev_dump_seek(): not enough space left on device!\n");

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1955: FILE: drivers/dump/dump_blockdev.c:224:
+ * ^I Writes DUMP_BUFFER_SIZE bytes in page buffer$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1957: FILE: drivers/dump/dump_blockdev.c:226:
+ * Returns: number of bytes written or -ERRNO. $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1965: FILE: drivers/dump/dump_blockdev.c:234:
+		printk("dev_dump_write(): max dump buffer size exceeded");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dev_dump_write', this function's name, in a string
#1965: FILE: drivers/dump/dump_blockdev.c:234:
+		printk("dev_dump_write(): max dump buffer size exceeded");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1968: FILE: drivers/dump/dump_blockdev.c:237:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1970: FILE: drivers/dump/dump_blockdev.c:239:
+		printk("dev_dump_write(): no space left on device!");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dev_dump_write', this function's name, in a string
#1970: FILE: drivers/dump/dump_blockdev.c:239:
+		printk("dev_dump_write(): no space left on device!");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1974: FILE: drivers/dump/dump_blockdev.c:243:
+^I/* $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1979: FILE: drivers/dump/dump_blockdev.c:248:
+		if (offset != NULL) *offset = 1;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "offset"
#1979: FILE: drivers/dump/dump_blockdev.c:248:
+		if (offset != NULL) *offset = 1;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1986: FILE: drivers/dump/dump_blockdev.c:255:
+		printk("dev_dump_write(): no space left on dump device!");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dev_dump_write', this function's name, in a string
#1986: FILE: drivers/dump/dump_blockdev.c:255:
+		printk("dev_dump_write(): no space left on dump device!");

ERROR:CODE_INDENT: code indent should use tabs where possible
#2051: FILE: drivers/dump/dump_blockdev.c:320:
+        .dump_write^I= dev_dump_write,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2051: FILE: drivers/dump/dump_blockdev.c:320:
+        .dump_write^I= dev_dump_write,$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2060: FILE: drivers/dump/dump_blockdev.c:329:
+{        $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2064: FILE: drivers/dump/dump_blockdev.c:333:
+		printk("block device driver registration failed\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2067: FILE: drivers/dump/dump_blockdev.c:336:
+^I^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2068: FILE: drivers/dump/dump_blockdev.c:337:
+	printk("block device driver for LKCD unregistered\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2076: FILE: drivers/dump/dump_blockdev.c:345:
+	printk("block device driver for LKCD unregistered\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2097: FILE: drivers/dump/dump_gzip.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2131: FILE: drivers/dump/dump_gzip.c:35:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2133: FILE: drivers/dump/dump_gzip.c:37:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2134: FILE: drivers/dump/dump_gzip.c:38:
+	if ((err = zlib_deflateInit(&dump_stream, Z_BEST_COMPRESSION)) != Z_OK) {

CHECK:CAMELCASE: Avoid CamelCase: <zlib_deflateInit>
#2134: FILE: drivers/dump/dump_gzip.c:38:
+	if ((err = zlib_deflateInit(&dump_stream, Z_BEST_COMPRESSION)) != Z_OK) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2136: FILE: drivers/dump/dump_gzip.c:40:
+		printk("dump_compress_gzip(): zlib_deflateInit() "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dump_compress_gzip', this function's name, in a string
#2136: FILE: drivers/dump/dump_gzip.c:40:
+		printk("dump_compress_gzip(): zlib_deflateInit() "

WARNING:SPLIT_STRING: quoted string split across lines
#2137: FILE: drivers/dump/dump_gzip.c:41:
+		printk("dump_compress_gzip(): zlib_deflateInit() "
+			"failed (%d)!\n", err);

CHECK:CAMELCASE: Avoid CamelCase: <zlib_deflateEnd>
#2153: FILE: drivers/dump/dump_gzip.c:57:
+		(void)zlib_deflateEnd(&dump_stream);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2154: FILE: drivers/dump/dump_gzip.c:58:
+		printk("dump_compress_gzip(): zlib_deflate() failed (%d)!\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dump_compress_gzip', this function's name, in a string
#2154: FILE: drivers/dump/dump_gzip.c:58:
+		printk("dump_compress_gzip(): zlib_deflate() failed (%d)!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2155: FILE: drivers/dump/dump_gzip.c:59:
+		printk("dump_compress_gzip(): zlib_deflate() failed (%d)!\n",
+			err);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2160: FILE: drivers/dump/dump_gzip.c:64:
+	if ((err = zlib_deflateEnd(&dump_stream)) != Z_OK) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2161: FILE: drivers/dump/dump_gzip.c:65:
+		printk("dump_compress_gzip(): zlib_deflateEnd() "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dump_compress_gzip', this function's name, in a string
#2161: FILE: drivers/dump/dump_gzip.c:65:
+		printk("dump_compress_gzip(): zlib_deflateEnd() "

WARNING:SPLIT_STRING: quoted string split across lines
#2162: FILE: drivers/dump/dump_gzip.c:66:
+		printk("dump_compress_gzip(): zlib_deflateEnd() "
+			"failed (%d)!\n", err);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2166: FILE: drivers/dump/dump_gzip.c:70:
+	if (dump_stream.total_out >= oldsize) {
+		return oldsize;
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2187: FILE: drivers/dump/dump_gzip.c:91:
+		printk("dump_compress_gzip_init(): Failed to "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dump_compress_gzip_init', this function's name, in a string
#2187: FILE: drivers/dump/dump_gzip.c:91:
+		printk("dump_compress_gzip_init(): Failed to "

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#2187: FILE: drivers/dump/dump_gzip.c:91:
+	if (!deflate_workspace) {
+		printk("dump_compress_gzip_init(): Failed to "

WARNING:SPLIT_STRING: quoted string split across lines
#2188: FILE: drivers/dump/dump_gzip.c:92:
+		printk("dump_compress_gzip_init(): Failed to "
+			"alloc %d bytes for deflate workspace\n",

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2220: FILE: drivers/dump/dump_i386.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2229: FILE: drivers/dump/dump_i386.c:10:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#2248: FILE: drivers/dump/dump_i386.c:29:
+#include <asm/processor.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2256: FILE: drivers/dump/dump_i386.c:37:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2260: FILE: drivers/dump/dump_i386.c:41:
+       ^Iptr = vmalloc(THREAD_SIZE * num_online_cpus());$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2260: FILE: drivers/dump/dump_i386.c:41:
+       ^Iptr = vmalloc(THREAD_SIZE * num_online_cpus());$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2260: FILE: drivers/dump/dump_i386.c:41:
+       ^Iptr = vmalloc(THREAD_SIZE * num_online_cpus());$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2262: FILE: drivers/dump/dump_i386.c:43:
+		printk("vmalloc for dha_stacks failed\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#2262: FILE: drivers/dump/dump_i386.c:43:
+	if (!ptr) {
+		printk("vmalloc for dha_stacks failed\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2274: FILE: drivers/dump/dump_i386.c:55:
+free_dha_stack(void) $

CHECK:SPACING: No space is necessary after a cast
#2274: FILE: drivers/dump/dump_i386.c:55:
+free_dha_stack(void) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2277: FILE: drivers/dump/dump_i386.c:58:
+^I^Ivfree((void *)dump_header_asm.dha_stack[0]);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2289: FILE: drivers/dump/dump_i386.c:70:
+static inline void $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu == dump_header_asm.dha_dumping_cpu'
#2293: FILE: drivers/dump/dump_i386.c:74:
+		if ((cpu == dump_header_asm.dha_dumping_cpu) &&
+			(0xffff & regs->xss) == __KERNEL_DS) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2294: FILE: drivers/dump/dump_i386.c:75:
+^I^I^I(0xffff & regs->xss) == __KERNEL_DS) $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2294: FILE: drivers/dump/dump_i386.c:75:
+		if ((cpu == dump_header_asm.dha_dumping_cpu) &&
+			(0xffff & regs->xss) == __KERNEL_DS) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2296: FILE: drivers/dump/dump_i386.c:77:
+^I^Idump_header_asm.dha_smp_regs[cpu].esp = $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->esp
#2297: FILE: drivers/dump/dump_i386.c:78:
+				(unsigned long)&(regs->esp);

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#2299: FILE: drivers/dump/dump_i386.c:80:
+			:"=a"(dump_header_asm.dha_smp_regs[cpu].xss));
 			^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2312: FILE: drivers/dump/dump_i386.c:93:
+		memcpy((void *)dump_header_asm.dha_stack[cpu],
+				tsk->thread_info, THREAD_SIZE);

WARNING:RETURN_VOID: void function return statements are not generally useful
#2316: FILE: drivers/dump/dump_i386.c:97:
+	return;
+}

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2320: FILE: drivers/dump/dump_i386.c:101:
+extern irq_desc_t irq_desc[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2321: FILE: drivers/dump/dump_i386.c:102:
+extern void dump_send_ipi(void);

WARNING:REPEATED_WORD: Possible repeated word: 'to'
#2324: FILE: drivers/dump/dump_i386.c:105:
+static int wait_for_dump_ipi = 1; /* always wait for ipi to to be handled */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2329: FILE: drivers/dump/dump_i386.c:110:
+dump_ipi_handler(struct pt_regs *regs) $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2333: FILE: drivers/dump/dump_i386.c:114:
+	if (!dump_expect_ipi[cpu]) {
+		return 0;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2336: FILE: drivers/dump/dump_i386.c:117:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2349: FILE: drivers/dump/dump_i386.c:130:
+void $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2355: FILE: drivers/dump/dump_i386.c:136:
+		atomic_set(&waiting_for_dump_ipi, num_online_cpus()-1);
 		                                                   ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2356: FILE: drivers/dump/dump_i386.c:137:
+		for (i = 0; i < NR_CPUS; i++)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2358: FILE: drivers/dump/dump_i386.c:139:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2361: FILE: drivers/dump/dump_i386.c:142:
+^I^I/* may be we dont need to wait for NMI to be processed. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2362: FILE: drivers/dump/dump_i386.c:143:
+		/* may be we dont need to wait for NMI to be processed. 
+		   just write out the header at the end of dumping, if

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'untill' may be misspelled - perhaps 'until'?
#2363: FILE: drivers/dump/dump_i386.c:144:
+		   this IPI is not processed untill then, there probably
 		                             ^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2364: FILE: drivers/dump/dump_i386.c:145:
+^I^I   is a problem and we just fail to capture state of $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2365: FILE: drivers/dump/dump_i386.c:146:
+		   other cpus. */

ERROR:SPACING: space required before the open parenthesis '('
#2367: FILE: drivers/dump/dump_i386.c:148:
+			while(atomic_read(&waiting_for_dump_ipi))

WARNING:RETURN_VOID: void function return statements are not generally useful
#2373: FILE: drivers/dump/dump_i386.c:154:
+	return;
+}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!irq_desc[i].handler"
#2387: FILE: drivers/dump/dump_i386.c:168:
+		if (irq_desc[i].handler == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "irq_desc[i].handler->set_affinity"
#2390: FILE: drivers/dump/dump_i386.c:171:
+		if (irq_desc[i].handler->set_affinity != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!irq_desc[i].handler"
#2405: FILE: drivers/dump/dump_i386.c:186:
+		if (irq_desc[i].handler == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "irq_desc[i].handler->set_affinity"
#2407: FILE: drivers/dump/dump_i386.c:188:
+		if (irq_desc[i].handler->set_affinity != NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2412: FILE: drivers/dump/dump_i386.c:193:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2415: FILE: drivers/dump/dump_i386.c:196:
+ * We do this so that softirqs initiated for dump i/o $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2419: FILE: drivers/dump/dump_i386.c:200:
+ * This is not quite legal of course, as it has the side $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2420: FILE: drivers/dump/dump_i386.c:201:
+ * effect of making all interrupts & softirqs triggered $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2421: FILE: drivers/dump/dump_i386.c:202:
+ * while dump is in progress complete before currently $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2422: FILE: drivers/dump/dump_i386.c:203:
+ * pending softirqs and the currently executing interrupt $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2423: FILE: drivers/dump/dump_i386.c:204:
+ * code. $

CHECK:SPACING: No space is necessary after a cast
#2502: FILE: drivers/dump/dump_i386.c:283:
+	dump_mbank[0].end  = (((u64) max_mapnr) << PAGE_SHIFT) - 1;

WARNING:RETURN_VOID: void function return statements are not generally useful
#2505: FILE: drivers/dump/dump_i386.c:286:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#2517: FILE: drivers/dump/dump_i386.c:298:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#2529: FILE: drivers/dump/dump_i386.c:310:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#2541: FILE: drivers/dump/dump_i386.c:322:
+	return;
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2546: FILE: drivers/dump/dump_rle.c:1:
+/*

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2580: FILE: drivers/dump/dump_rle.c:35:
+	wi = ri = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2584: FILE: drivers/dump/dump_rle.c:39:
+			cur_byte = value = old[ri];

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2588: FILE: drivers/dump/dump_rle.c:43:
+				if (wi + 3 > oldsize) {
+					return oldsize;
+				}

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2594: FILE: drivers/dump/dump_rle.c:49:
+				value = cur_byte = old[ri];

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2596: FILE: drivers/dump/dump_rle.c:51:
+^I^I^I} else { $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2597: FILE: drivers/dump/dump_rle.c:52:
+				if ((cur_byte = old[ri]) == value) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2601: FILE: drivers/dump/dump_rle.c:56:
+						if (wi + 3 > oldsize) {

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2601: FILE: drivers/dump/dump_rle.c:56:
+						if (wi + 3 > oldsize) {
+							return oldsize;
+						}

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2608: FILE: drivers/dump/dump_rle.c:63:
+						if (value == 0) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2609: FILE: drivers/dump/dump_rle.c:64:
+							if (wi + 3 > oldsize) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2609: FILE: drivers/dump/dump_rle.c:64:
+							if (wi + 3 > oldsize) {
+								return oldsize;
+							}

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2615: FILE: drivers/dump/dump_rle.c:70:
+						} else {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2616: FILE: drivers/dump/dump_rle.c:71:
+							if (wi + 2 > oldsize) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2616: FILE: drivers/dump/dump_rle.c:71:
+							if (wi + 2 > oldsize) {
+								return oldsize;
+							}

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2623: FILE: drivers/dump/dump_rle.c:78:
+						if (value == 0) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2624: FILE: drivers/dump/dump_rle.c:79:
+							if (wi + 2 > oldsize) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2624: FILE: drivers/dump/dump_rle.c:79:
+							if (wi + 2 > oldsize) {
+								return oldsize;
+							}

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2629: FILE: drivers/dump/dump_rle.c:84:
+						} else {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2630: FILE: drivers/dump/dump_rle.c:85:
+							if (wi + 1 > oldsize) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2630: FILE: drivers/dump/dump_rle.c:85:
+							if (wi + 1 > oldsize) {
+								return oldsize;
+							}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2647: FILE: drivers/dump/dump_rle.c:102:
+
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2649: FILE: drivers/dump/dump_rle.c:104:
+		if (wi + 3 > oldsize) {
+			return oldsize;
+		}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2726: FILE: include/asm-i386/dump.h:1:
+/*

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#2784: FILE: include/asm-i386/dump.h:59:
+} __attribute__((packed));

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#2797: FILE: include/asm-i386/dump.h:72:
+	__asm__ __volatile__("movw %%ss, %%ax;" :"=a"(regs->xss));
 	                                        ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#2798: FILE: include/asm-i386/dump.h:73:
+	__asm__ __volatile__("movw %%cs, %%ax;" :"=a"(regs->xcs));
 	                                        ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#2799: FILE: include/asm-i386/dump.h:74:
+	__asm__ __volatile__("movw %%ds, %%ax;" :"=a"(regs->xds));
 	                                        ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#2800: FILE: include/asm-i386/dump.h:75:
+	__asm__ __volatile__("movw %%es, %%ax;" :"=a"(regs->xes));
 	                                        ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#2801: FILE: include/asm-i386/dump.h:76:
+	__asm__ __volatile__("pushfl; popl %0" :"=m"(regs->eflags));
 	                                       ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#2809: FILE: include/asm-i386/dump.h:84:
+extern int (*dump_ipi_function_ptr)(struct pt_regs *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2810: FILE: include/asm-i386/dump.h:85:
+extern void dump_send_ipi(void);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2816: FILE: include/asm-i386/dump.h:91:
+extern int page_is_ram (unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2816: FILE: include/asm-i386/dump.h:91:
+extern int page_is_ram (unsigned long);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2831: FILE: include/linux/dump.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2856: FILE: include/linux/dump.h:26:
+/* $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2863: FILE: include/linux/dump.h:33:
+#define DUMP_PAGE_SHIFT ^IPAGE_SHIFT$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2873: FILE: include/linux/dump.h:43:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2886: FILE: include/linux/dump.h:56:
+/* $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2913: FILE: include/linux/dump.h:83:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2951: FILE: include/linux/dump.h:121:
+#define DIOSDUMPMEM^I^I9^I/* set the dump buffer memory^I    */^I$

WARNING:SPACING: Unnecessary space before function pointer arguments
#2956: FILE: include/linux/dump.h:126:
+	loff_t (*dump_seek) (loff_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#2956: FILE: include/linux/dump.h:126:
+	loff_t (*dump_seek) (loff_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2956: FILE: include/linux/dump.h:126:
+	loff_t (*dump_seek) (loff_t, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2957: FILE: include/linux/dump.h:127:
+	ssize_t (*dump_write) (const char *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2957: FILE: include/linux/dump.h:127:
+	ssize_t (*dump_write) (const char *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#2957: FILE: include/linux/dump.h:127:
+	ssize_t (*dump_write) (const char *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#2957: FILE: include/linux/dump.h:127:
+	ssize_t (*dump_write) (const char *, size_t, loff_t *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2958: FILE: include/linux/dump.h:128:
+	int (*dump_ioctl) (unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#2958: FILE: include/linux/dump.h:128:
+	int (*dump_ioctl) (unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#2958: FILE: include/linux/dump.h:128:
+	int (*dump_ioctl) (unsigned int, unsigned long);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2959: FILE: include/linux/dump.h:129:
+	int (*dump_open) (unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#2959: FILE: include/linux/dump.h:129:
+	int (*dump_open) (unsigned long);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2960: FILE: include/linux/dump.h:130:
+	int (*dump_release) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2961: FILE: include/linux/dump.h:131:
+	int (*dump_start) (unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#2961: FILE: include/linux/dump.h:131:
+	int (*dump_start) (unsigned long);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2962: FILE: include/linux/dump.h:132:
+	int (*dump_end) (unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#2962: FILE: include/linux/dump.h:132:
+	int (*dump_end) (unsigned long);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2963: FILE: include/linux/dump.h:133:
+	int (*dump_ready) (unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#2963: FILE: include/linux/dump.h:133:
+	int (*dump_ready) (unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2966: FILE: include/linux/dump.h:136:
+extern int dump_register_device(struct dump_operations *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dump_operations *' should also have an identifier name
#2966: FILE: include/linux/dump.h:136:
+extern int dump_register_device(struct dump_operations *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2967: FILE: include/linux/dump.h:137:
+extern void dump_unregister_device(void);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2972: FILE: include/linux/dump.h:142:
+ *            dump.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2987: FILE: include/linux/dump.h:157:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2989: FILE: include/linux/dump.h:159:
+^I * Store here the configurable system page size (4K, 8K, 16K, etc.) $

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#3036: FILE: include/linux/dump.h:206:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#3058: FILE: include/linux/dump.h:228:
+} __attribute__((packed));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#3095: FILE: include/linux/dump.h:265:
+	u16 (*compress_func)(char *, u16, char *, u16);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u16' should also have an identifier name
#3095: FILE: include/linux/dump.h:265:
+	u16 (*compress_func)(char *, u16, char *, u16);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#3095: FILE: include/linux/dump.h:265:
+	u16 (*compress_func)(char *, u16, char *, u16);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u16' should also have an identifier name
#3095: FILE: include/linux/dump.h:265:
+	u16 (*compress_func)(char *, u16, char *, u16);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3099: FILE: include/linux/dump.h:269:
+extern void dump_register_compression(struct __dump_compress *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct __dump_compress *' should also have an identifier name
#3099: FILE: include/linux/dump.h:269:
+extern void dump_register_compression(struct __dump_compress *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3100: FILE: include/linux/dump.h:270:
+extern void dump_unregister_compression(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#3100: FILE: include/linux/dump.h:270:
+extern void dump_unregister_compression(int);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3112: FILE: include/linux/dump.h:282:
+^Iu64 ^Istart;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3113: FILE: include/linux/dump.h:283:
+^Iu64 ^Iend;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3127: FILE: include/linux/dump.h:297:
+extern int register_dump_notifier(struct notifier_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct notifier_block *' should also have an identifier name
#3127: FILE: include/linux/dump.h:297:
+extern int register_dump_notifier(struct notifier_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3128: FILE: include/linux/dump.h:298:
+extern int unregister_dump_notifier(struct notifier_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct notifier_block *' should also have an identifier name
#3128: FILE: include/linux/dump.h:298:
+extern int unregister_dump_notifier(struct notifier_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#3136: FILE: include/linux/dump.h:306:
+int dump_execute(char *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#3136: FILE: include/linux/dump.h:306:
+int dump_execute(char *, struct pt_regs *);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#3137: FILE: include/linux/dump.h:307:
+extern volatile int dump_in_progress;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#3138: FILE: include/linux/dump.h:308:
+extern volatile int dumping_cpu;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#3139: FILE: include/linux/dump.h:309:
+extern volatile int dump_started;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#3140: FILE: include/linux/dump.h:310:
+extern int (*dump_function_ptr)(char *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#3140: FILE: include/linux/dump.h:310:
+extern int (*dump_function_ptr)(char *, struct pt_regs *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3143: FILE: include/linux/dump.h:313:
+ * dump notifier callbacks to tune the dump driver for $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3152: FILE: include/linux/dump.h:322:
+extern void dump_scheduler_enable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3153: FILE: include/linux/dump.h:323:
+extern void dump_interrupts_disable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3154: FILE: include/linux/dump.h:324:
+extern void dump_nondisruptive_disable(void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3156: FILE: include/linux/dump.h:326:
+static inline void dump(char * str, struct pt_regs * regs)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3156: FILE: include/linux/dump.h:326:
+static inline void dump(char * str, struct pt_regs * regs)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#3158: FILE: include/linux/dump.h:328:
+	if (dump_function_ptr) {
+		dump_function_ptr((char *)str, regs);
+	}

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3167: FILE: include/linux/dump.h:337:
+extern void	__dump_open(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3168: FILE: include/linux/dump.h:338:
+extern void	__dump_cleanup(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3169: FILE: include/linux/dump.h:339:
+extern void	__dump_init(u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#3169: FILE: include/linux/dump.h:339:
+extern void	__dump_init(u64);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3170: FILE: include/linux/dump.h:340:
+extern int	__dump_configure_header(struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#3170: FILE: include/linux/dump.h:340:
+extern int	__dump_configure_header(struct pt_regs *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3171: FILE: include/linux/dump.h:341:
+extern u16	__dump_silence_system(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#3171: FILE: include/linux/dump.h:341:
+extern u16	__dump_silence_system(unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3172: FILE: include/linux/dump.h:342:
+extern u16	__dump_resume_system(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#3172: FILE: include/linux/dump.h:342:
+extern u16	__dump_resume_system(unsigned int);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000420427.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 155 errors, 268 warnings, 114 checks, 3109 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000420427.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
