WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#61: 
good faults such as the read scenario above match against the address space 

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#112: FILE: arch/ppc64/mm/fault.c:76:
=20

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#113: FILE: arch/ppc64/mm/fault.c:77:
 }
+int check_exception(struct pt_regs *regs);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'Unfortunatly' may be misspelled - perhaps 'Unfortunately'?
#126: FILE: arch/ppc64/mm/fault.c:118:
+	 * kernel and should generate an OOPS.  Unfortunatly, in the case of an
 	                                        ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'occuring' may be misspelled - perhaps 'occurring'?
#127: FILE: arch/ppc64/mm/fault.c:119:
+	 * erroneous fault occuring in a code path which already holds mmap_sem
 	                   ^^^^^^^^

WARNING:TYPO_SPELLING: 'possibilty' may be misspelled - perhaps 'possibility'?
#134: FILE: arch/ppc64/mm/fault.c:126:
+	 * the source reference check when there is a possibilty of a deadlock.
 	                                              ^^^^^^^^^^

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#153: FILE: arch/ppc64/mm/fault.c:226:
+bad_area_nosemaphore:
                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#167: FILE: arch/ppc64/mm/fault.c:293:
+	if ((entry =3D search_exception_tables(regs->nip)) !=3D NULL) {
 	           ^

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#167: FILE: arch/ppc64/mm/fault.c:293:
+	if ((entry =3D search_exception_tables(regs->nip)) !=3D NULL) {
 	                                                   ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#167: FILE: arch/ppc64/mm/fault.c:293:
+	if ((entry =3D search_exception_tables(regs->nip)) !=3D NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#167: FILE: arch/ppc64/mm/fault.c:293:
+	if ((entry =3D search_exception_tables(regs->nip)) !=3D NULL) {
+		return 1;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#204: FILE: arch/i386/mm/extable.c:43:
+	if (fixup) {
+		return 1;
+	}

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#217: FILE: arch/i386/mm/fault.c:201:
+int check_exception(struct pt_regs *regs);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'Unfortunatly' may be misspelled - perhaps 'Unfortunately'?
#228: FILE: arch/i386/mm/fault.c:268:
+	 * kernel and should generate an OOPS.  Unfortunatly, in the case of an
 	                                        ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'occuring' may be misspelled - perhaps 'occurring'?
#229: FILE: arch/i386/mm/fault.c:269:
+	 * erroneous fault occuring in a code path which already holds mmap_sem
 	                   ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#233: FILE: arch/i386/mm/fault.c:273:
+^I * exceptions table.  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'possibilty' may be misspelled - perhaps 'possibility'?
#236: FILE: arch/i386/mm/fault.c:276:
+	 * the source reference check when there is a possibilty of a deadlock.
 	                                              ^^^^^^^^^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000280897.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 10 warnings, 1 checks, 109 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000280897.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
