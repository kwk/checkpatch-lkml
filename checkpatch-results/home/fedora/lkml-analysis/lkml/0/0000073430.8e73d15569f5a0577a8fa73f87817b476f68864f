ERROR:CODE_INDENT: code indent should use tabs where possible
#64: FILE: include/linux/init_task.h:137:
+ ^IINIT_LOCKDEP^I^I^I^I^I^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#64: FILE: include/linux/init_task.h:137:
+ ^IINIT_LOCKDEP^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#64: FILE: include/linux/init_task.h:137:
+ ^IINIT_LOCKDEP^I^I^I^I^I^I^I\$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#73: FILE: include/linux/lockdep.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#94: FILE: include/linux/lockdep.h:22:
+enum lock_usage_bit
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#110: FILE: include/linux/lockdep.h:38:
+#define LOCKF_USED			(1 << LOCK_USED)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#111: FILE: include/linux/lockdep.h:39:
+#define LOCKF_USED_IN_HARDIRQ		(1 << LOCK_USED_IN_HARDIRQ)

CHECK:BIT_MACRO: Prefer using the BIT macro
#112: FILE: include/linux/lockdep.h:40:
+#define LOCKF_USED_IN_SOFTIRQ		(1 << LOCK_USED_IN_SOFTIRQ)

CHECK:BIT_MACRO: Prefer using the BIT macro
#113: FILE: include/linux/lockdep.h:41:
+#define LOCKF_ENABLED_HARDIRQS		(1 << LOCK_ENABLED_HARDIRQS)

CHECK:BIT_MACRO: Prefer using the BIT macro
#114: FILE: include/linux/lockdep.h:42:
+#define LOCKF_ENABLED_SOFTIRQS		(1 << LOCK_ENABLED_SOFTIRQS)

CHECK:BIT_MACRO: Prefer using the BIT macro
#119: FILE: include/linux/lockdep.h:47:
+#define LOCKF_USED_IN_HARDIRQ_READ	(1 << LOCK_USED_IN_HARDIRQ_READ)

CHECK:BIT_MACRO: Prefer using the BIT macro
#120: FILE: include/linux/lockdep.h:48:
+#define LOCKF_USED_IN_SOFTIRQ_READ	(1 << LOCK_USED_IN_SOFTIRQ_READ)

CHECK:BIT_MACRO: Prefer using the BIT macro
#121: FILE: include/linux/lockdep.h:49:
+#define LOCKF_ENABLED_HARDIRQS_READ	(1 << LOCK_ENABLED_HARDIRQS_READ)

CHECK:BIT_MACRO: Prefer using the BIT macro
#122: FILE: include/linux/lockdep.h:50:
+#define LOCKF_ENABLED_SOFTIRQS_READ	(1 << LOCK_ENABLED_SOFTIRQS_READ)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((__packed__))
#138: FILE: include/linux/lockdep.h:66:
+} __attribute__ ((__packed__));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#259: FILE: include/linux/lockdep.h:187:
+extern void lockdep_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#260: FILE: include/linux/lockdep.h:188:
+extern void lockdep_info(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#261: FILE: include/linux/lockdep.h:189:
+extern void lockdep_reset(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#262: FILE: include/linux/lockdep.h:190:
+extern void lockdep_reset_lock(struct lockdep_map *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#263: FILE: include/linux/lockdep.h:191:
+extern void lockdep_free_key_range(void *start, unsigned long size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#265: FILE: include/linux/lockdep.h:193:
+extern void print_lock_types(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#266: FILE: include/linux/lockdep.h:194:
+extern void lockdep_print_held_locks(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#274: FILE: include/linux/lockdep.h:202:
+extern void lockdep_init_map(struct lockdep_map *lock, const char *name,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#277: FILE: include/linux/lockdep.h:205:
+extern void lockdep_acquire(struct lockdep_map *lock, unsigned int subtype,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#280: FILE: include/linux/lockdep.h:208:
+extern void lockdep_release(struct lockdep_map *lock, int nested,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#285: FILE: include/linux/lockdep.h:213:
+extern void early_boot_irqs_off(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#286: FILE: include/linux/lockdep.h:214:
+extern void early_boot_irqs_on(void);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#292: FILE: include/linux/lockdep.h:220:
+# define lockdep_print_held_locks(task)		do { (void)(task); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#295: FILE: include/linux/lockdep.h:223:
+# define lockdep_reset()		do { debug_locks = 1; } while (0)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#423: FILE: init/main.c:84:
+extern void early_init_irq_lock_type(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#507: FILE: kernel/lockdep.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#508: FILE: kernel/lockdep.c:2:
+ * kernel/lockdep.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#573: FILE: kernel/lockdep.c:67:
+		printk("BUG: MAX_LOCKDEP_ENTRIES too low!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#574: FILE: kernel/lockdep.c:68:
+		printk("turning off the locking correctness validator.\n");

CHECK:BIT_MACRO: Prefer using the BIT macro
#600: FILE: kernel/lockdep.c:94:
+#define TYPEHASH_SIZE		(1UL << TYPEHASH_BITS)

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#602: FILE: kernel/lockdep.c:96:
+#define __typehashfn(key)	((((unsigned long)key >> TYPEHASH_BITS) + (unsigned long)key) & TYPEHASH_MASK)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'key' - possible side-effects?
#602: FILE: kernel/lockdep.c:96:
+#define __typehashfn(key)	((((unsigned long)key >> TYPEHASH_BITS) + (unsigned long)key) & TYPEHASH_MASK)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'key' may be better as '(key)' to avoid precedence issues
#602: FILE: kernel/lockdep.c:96:
+#define __typehashfn(key)	((((unsigned long)key >> TYPEHASH_BITS) + (unsigned long)key) & TYPEHASH_MASK)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#614: FILE: kernel/lockdep.c:108:
+#define CHAINHASH_BITS		(MAX_LOCKDEP_CHAINS_BITS-1)
                       		                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#615: FILE: kernel/lockdep.c:109:
+#define CHAINHASH_SIZE		(1UL << CHAINHASH_BITS)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chain' - possible side-effects?
#617: FILE: kernel/lockdep.c:111:
+#define __chainhashfn(chain) \
+		(((chain >> CHAINHASH_BITS) + chain) & CHAINHASH_MASK)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chain' may be better as '(chain)' to avoid precedence issues
#617: FILE: kernel/lockdep.c:111:
+#define __chainhashfn(chain) \
+		(((chain >> CHAINHASH_BITS) + chain) & CHAINHASH_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'key1' - possible side-effects?
#629: FILE: kernel/lockdep.c:123:
+#define iterate_chain_key(key1, key2) \
+	(((key1) << MAX_LOCKDEP_KEYS_BITS/2) ^ \
+	((key1) >> (64-MAX_LOCKDEP_KEYS_BITS/2)) ^ \
+	(key2))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#630: FILE: kernel/lockdep.c:124:
+	(((key1) << MAX_LOCKDEP_KEYS_BITS/2) ^ \
 	                                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#631: FILE: kernel/lockdep.c:125:
+	((key1) >> (64-MAX_LOCKDEP_KEYS_BITS/2)) ^ \
 	              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#631: FILE: kernel/lockdep.c:125:
+	((key1) >> (64-MAX_LOCKDEP_KEYS_BITS/2)) ^ \
 	                                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#656: FILE: kernel/lockdep.c:150:
+	if (type->name_version == 2 &&
+			!strcmp(type->name, "xfrm_state_afinfo_lock"))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#659: FILE: kernel/lockdep.c:153:
+	if ((type->name_version == 2 || type->name_version == 4) &&
+			!strcmp(type->name, "&mc->mca_lock"))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#713: FILE: kernel/lockdep.c:207:
+			printk("BUG: MAX_STACK_TRACE_ENTRIES too low!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#714: FILE: kernel/lockdep.c:208:
+			printk("turning off the locking correctness validator.\n");

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#778: FILE: kernel/lockdep.c:272:
+static const char *usage_str[] =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#779: FILE: kernel/lockdep.c:273:
+static const char *usage_str[] =
+{

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#793: FILE: kernel/lockdep.c:287:
+	printk(" [<%08lx>]", ip);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#797: FILE: kernel/lockdep.c:291:
+const char * __get_key_name(struct lockdep_subtype_key *key, char *str)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#849: FILE: kernel/lockdep.c:343:
+		printk(" (%s", name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#851: FILE: kernel/lockdep.c:345:
+		printk(" (%s", name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#853: FILE: kernel/lockdep.c:347:
+			printk("#%d", type->name_version);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#855: FILE: kernel/lockdep.c:349:
+			printk("/%d", type->subtype);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#857: FILE: kernel/lockdep.c:351:
+	printk("){%c%c%c%c}", c1, c2, c3, c4);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#868: FILE: kernel/lockdep.c:362:
+		printk("%30s", name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#870: FILE: kernel/lockdep.c:364:
+		printk("%30s", name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#872: FILE: kernel/lockdep.c:366:
+			printk("#%d", type->name_version);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#874: FILE: kernel/lockdep.c:368:
+			printk("/%d", type->subtype);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#887: FILE: kernel/lockdep.c:381:
+	printk("%s", name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#893: FILE: kernel/lockdep.c:387:
+	printk(", at:");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#902: FILE: kernel/lockdep.c:396:
+		printk("no locks held by %s/%d.\n", curr->comm, curr->pid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#905: FILE: kernel/lockdep.c:399:
+	printk("%d locks held by %s/%d:\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#906: FILE: kernel/lockdep.c:400:
+	printk("%d locks held by %s/%d:\n",
+		curr->lockdep_depth, curr->comm, curr->pid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#909: FILE: kernel/lockdep.c:403:
+		printk(" #%d: ", i);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#913: FILE: kernel/lockdep.c:407:
+}
+/*

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#921: FILE: kernel/lockdep.c:415:
+		printk("  ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#929: FILE: kernel/lockdep.c:423:
+	printk("->");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#931: FILE: kernel/lockdep.c:425:
+	printk(" ops: %lu", type->ops);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#932: FILE: kernel/lockdep.c:426:
+	printk(" {\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#939: FILE: kernel/lockdep.c:433:
+			len += printk("   %s", usage_str[bit]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#940: FILE: kernel/lockdep.c:434:
+			len += printk(" at:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#945: FILE: kernel/lockdep.c:439:
+	printk(" }\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#948: FILE: kernel/lockdep.c:442:
+	printk(" ... key      at:");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#969: FILE: kernel/lockdep.c:463:
+		printk(" ... acquired at:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#971: FILE: kernel/lockdep.c:465:
+		printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#983: FILE: kernel/lockdep.c:477:
+	printk(" {\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#987: FILE: kernel/lockdep.c:481:
+		printk("    -> ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#990: FILE: kernel/lockdep.c:484:
+			printk("/%d", entry->type->subtype);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#993: FILE: kernel/lockdep.c:487:
+	printk(" } [%d]", nr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1001: FILE: kernel/lockdep.c:495:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1010: FILE: kernel/lockdep.c:504:
+	printk("lock types:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1016: FILE: kernel/lockdep.c:510:
+		printk("\nhash-list at %d:\n", i);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1019: FILE: kernel/lockdep.c:513:
+			printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1076: FILE: kernel/lockdep.c:570:
+	printk("\n-> #%u", depth);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1078: FILE: kernel/lockdep.c:572:
+	printk(":\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1098: FILE: kernel/lockdep.c:592:
+	printk("\n=====================================================\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1099: FILE: kernel/lockdep.c:593:
+	printk(  "[ BUG: possible circular locking deadlock detected! ]\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#1099: FILE: kernel/lockdep.c:593:
+	printk(  "[ BUG: possible circular locking deadlock detected! ]\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1100: FILE: kernel/lockdep.c:594:
+	printk(  "-----------------------------------------------------\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#1100: FILE: kernel/lockdep.c:594:
+	printk(  "-----------------------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1101: FILE: kernel/lockdep.c:595:
+	printk("%s/%d is trying to acquire lock:\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1102: FILE: kernel/lockdep.c:596:
+	printk("%s/%d is trying to acquire lock:\n",
+		curr->comm, curr->pid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1104: FILE: kernel/lockdep.c:598:
+	printk("\nbut task is already holding lock:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1106: FILE: kernel/lockdep.c:600:
+	printk("\nwhich lock already depends on the new lock,\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1107: FILE: kernel/lockdep.c:601:
+	printk("which could lead to circular deadlocks!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1108: FILE: kernel/lockdep.c:602:
+	printk("\nthe existing dependency chain (in reverse order) is:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1127: FILE: kernel/lockdep.c:621:
+	printk("\nother info that might help us debug this:\n\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1130: FILE: kernel/lockdep.c:624:
+	printk("\nstack backtrace:\n");

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#1136: FILE: kernel/lockdep.c:630:
+static int noinline print_infinite_recursion_bug(void)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1163: FILE: kernel/lockdep.c:657:
+			return print_circular_bug_header(entry, depth+1);
 			                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1165: FILE: kernel/lockdep.c:659:
+		if (!check_noncircular(entry->type, depth+1))
 		                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1166: FILE: kernel/lockdep.c:660:
+			return print_circular_bug_entry(entry, depth+1);
 			                                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1213: FILE: kernel/lockdep.c:707:
+		ret = find_usage_forwards(entry->type, depth+1);
 		                                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1252: FILE: kernel/lockdep.c:746:
+		ret = find_usage_backwards(entry->type, depth+1);
 		                                             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1272: FILE: kernel/lockdep.c:766:
+	printk("\n======================================================\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1273: FILE: kernel/lockdep.c:767:
+	printk(  "[ BUG: %s-safe -> %s-unsafe lock order detected! ]\n",

ERROR:SPACING: space prohibited after that open parenthesis '('
#1273: FILE: kernel/lockdep.c:767:
+	printk(  "[ BUG: %s-safe -> %s-unsafe lock order detected! ]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1274: FILE: kernel/lockdep.c:768:
+	printk(  "[ BUG: %s-safe -> %s-unsafe lock order detected! ]\n",
+		irqtype, irqtype);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1275: FILE: kernel/lockdep.c:769:
+	printk(  "------------------------------------------------------\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#1275: FILE: kernel/lockdep.c:769:
+	printk(  "------------------------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1276: FILE: kernel/lockdep.c:770:
+	printk("%s/%d [HC%u[%lu]:SC%u[%lu]:HE%u:SE%u] is trying to acquire:\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1277: FILE: kernel/lockdep.c:771:
+	printk("%s/%d [HC%u[%lu]:SC%u[%lu]:HE%u:SE%u] is trying to acquire:\n",
+		curr->comm, curr->pid,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1284: FILE: kernel/lockdep.c:778:
+	printk("\nand this task is already holding:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1286: FILE: kernel/lockdep.c:780:
+	printk("which would create a new lock dependency:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1288: FILE: kernel/lockdep.c:782:
+	printk(" ->");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1290: FILE: kernel/lockdep.c:784:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1292: FILE: kernel/lockdep.c:786:
+	printk("\nbut this new dependency connects a %s-irq-safe lock:\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1293: FILE: kernel/lockdep.c:787:
+	printk("\nbut this new dependency connects a %s-irq-safe lock:\n",
+		irqtype);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1295: FILE: kernel/lockdep.c:789:
+	printk("\n... which became %s-irq-safe at:\n", irqtype);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1299: FILE: kernel/lockdep.c:793:
+	printk("\nto a %s-irq-unsafe lock:\n", irqtype);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1301: FILE: kernel/lockdep.c:795:
+	printk("\n... which became %s-irq-unsafe at:\n", irqtype);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1302: FILE: kernel/lockdep.c:796:
+	printk("...");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1306: FILE: kernel/lockdep.c:800:
+	printk("\nwhich could potentially lead to deadlocks!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1308: FILE: kernel/lockdep.c:802:
+	printk("\nother info that might help us debug this:\n\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1311: FILE: kernel/lockdep.c:805:
+	printk("\nthe %s-irq-safe lock's dependencies:\n", irqtype);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1314: FILE: kernel/lockdep.c:808:
+	printk("\nthe %s-irq-unsafe lock's dependencies:\n", irqtype);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1317: FILE: kernel/lockdep.c:811:
+	printk("\nstack backtrace:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1356: FILE: kernel/lockdep.c:850:
+	printk("\n====================================\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1357: FILE: kernel/lockdep.c:851:
+	printk(  "[ BUG: possible deadlock detected! ]\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#1357: FILE: kernel/lockdep.c:851:
+	printk(  "[ BUG: possible deadlock detected! ]\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1358: FILE: kernel/lockdep.c:852:
+	printk(  "------------------------------------\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#1358: FILE: kernel/lockdep.c:852:
+	printk(  "------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1359: FILE: kernel/lockdep.c:853:
+	printk("%s/%d is trying to acquire lock:\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1360: FILE: kernel/lockdep.c:854:
+	printk("%s/%d is trying to acquire lock:\n",
+		curr->comm, curr->pid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1362: FILE: kernel/lockdep.c:856:
+	printk("\nbut task is already holding lock:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1364: FILE: kernel/lockdep.c:858:
+	printk("\nwhich could potentially lead to deadlocks!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1366: FILE: kernel/lockdep.c:860:
+	printk("\nother info that might help us debug this:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1369: FILE: kernel/lockdep.c:863:
+	printk("\nstack backtrace:\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'read > 0'
#1398: FILE: kernel/lockdep.c:892:
+		if ((read > 0) && prev->read &&
+				(prev->instance == next_instance))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'prev->instance == next_instance'
#1398: FILE: kernel/lockdep.c:892:
+		if ((read > 0) && prev->read &&
+				(prev->instance == next_instance))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1399: FILE: kernel/lockdep.c:893:
+		if ((read > 0) && prev->read &&
+				(prev->instance == next_instance))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1457: FILE: kernel/lockdep.c:951:
+	if (!check_usage(curr, prev, next, LOCK_USED_IN_HARDIRQ,
+					LOCK_ENABLED_HARDIRQS, "hard"))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1467: FILE: kernel/lockdep.c:961:
+	if (!check_usage(curr, prev, next, LOCK_USED_IN_HARDIRQ_READ,
+					LOCK_ENABLED_HARDIRQS, "hard-read"))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1477: FILE: kernel/lockdep.c:971:
+	if (!check_usage(curr, prev, next, LOCK_USED_IN_SOFTIRQ,
+					LOCK_ENABLED_SOFTIRQS, "soft"))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1486: FILE: kernel/lockdep.c:980:
+	if (!check_usage(curr, prev, next, LOCK_USED_IN_SOFTIRQ_READ,
+					LOCK_ENABLED_SOFTIRQS, "soft"))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1535: FILE: kernel/lockdep.c:1029:
+		printk(" => ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1537: FILE: kernel/lockdep.c:1031:
+		printk("\n");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1568: FILE: kernel/lockdep.c:1062:
+			curr->held_locks[depth-1].irq_context)
 			                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1572: FILE: kernel/lockdep.c:1066:
+		hlock = curr->held_locks + depth-1;
 		                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1598: FILE: kernel/lockdep.c:1092:
+				curr->held_locks[depth-1].irq_context)
 				                      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1609: FILE: kernel/lockdep.c:1103:
+
+

CHECK:SPACING: No space is necessary after a cast
#1615: FILE: kernel/lockdep.c:1109:
+	unsigned long start = (unsigned long) &_stext,

CHECK:SPACING: No space is necessary after a cast
#1616: FILE: kernel/lockdep.c:1110:
+		      end   = (unsigned long) &_end,

CHECK:SPACING: No space is necessary after a cast
#1617: FILE: kernel/lockdep.c:1111:
+		      addr  = (unsigned long) obj;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr >= start'
#1623: FILE: kernel/lockdep.c:1117:
+	if ((addr >= start) && (addr < end))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr < end'
#1623: FILE: kernel/lockdep.c:1117:
+	if ((addr >= start) && (addr < end))

CHECK:SPACING: No space is necessary after a cast
#1631: FILE: kernel/lockdep.c:1125:
+		start = (unsigned long) &__per_cpu_start + per_cpu_offset(i);

CHECK:SPACING: No space is necessary after a cast
#1632: FILE: kernel/lockdep.c:1126:
+		end   = (unsigned long) &__per_cpu_end   + per_cpu_offset(i);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr >= start'
#1634: FILE: kernel/lockdep.c:1128:
+		if ((addr >= start) && (addr < end))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr < end'
#1634: FILE: kernel/lockdep.c:1128:
+		if ((addr >= start) && (addr < end))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1702: FILE: kernel/lockdep.c:1196:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1702: FILE: kernel/lockdep.c:1196:
+ ^I */$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1705: FILE: kernel/lockdep.c:1199:
+		printk("BUG: trying to register non-static key!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1706: FILE: kernel/lockdep.c:1200:
+		printk("turning off the locking correctness validator.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1747: FILE: kernel/lockdep.c:1241:
+		printk("BUG: MAX_LOCKDEP_KEYS too low!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1748: FILE: kernel/lockdep.c:1242:
+		printk("turning off the locking correctness validator.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1768: FILE: kernel/lockdep.c:1262:
+		printk("new type %p: %s", type->key, type->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1770: FILE: kernel/lockdep.c:1264:
+			printk("#%d", type->name_version);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1771: FILE: kernel/lockdep.c:1265:
+		printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1833: FILE: kernel/lockdep.c:1327:
+		printk("BUG: MAX_LOCKDEP_CHAINS too low!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1834: FILE: kernel/lockdep.c:1328:
+		printk("turning off the locking correctness validator.\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#1842: FILE: kernel/lockdep.c:1336:
+	if (current->hardirq_context)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1844: FILE: kernel/lockdep.c:1338:
+	else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1872: FILE: kernel/lockdep.c:1366:
+			printk("hm#1, depth: %u [%u], %016Lx != %016Lx\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1872: FILE: kernel/lockdep.c:1366:
+			printk("hm#1, depth: %u [%u], %016Lx != %016Lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1873: FILE: kernel/lockdep.c:1367:
+			printk("hm#1, depth: %u [%u], %016Lx != %016Lx\n",
+				curr->lockdep_depth, i, chain_key,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'prev_hlock->irq_context !=
 							hlock->irq_context'
#1880: FILE: kernel/lockdep.c:1374:
+		if (prev_hlock && (prev_hlock->irq_context !=
+							hlock->irq_context))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1888: FILE: kernel/lockdep.c:1382:
+		printk("hm#2, depth: %u [%u], %016Lx != %016Lx\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1888: FILE: kernel/lockdep.c:1382:
+		printk("hm#2, depth: %u [%u], %016Lx != %016Lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1889: FILE: kernel/lockdep.c:1383:
+		printk("hm#2, depth: %u [%u], %016Lx != %016Lx\n",
+			curr->lockdep_depth, i, chain_key,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1911: FILE: kernel/lockdep.c:1405:
+	printk("\n==================================================\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1912: FILE: kernel/lockdep.c:1406:
+	printk(  "[ BUG: possible irq lock inversion bug detected! ]\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#1912: FILE: kernel/lockdep.c:1406:
+	printk(  "[ BUG: possible irq lock inversion bug detected! ]\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1913: FILE: kernel/lockdep.c:1407:
+	printk(  "--------------------------------------------------\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#1913: FILE: kernel/lockdep.c:1407:
+	printk(  "--------------------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1914: FILE: kernel/lockdep.c:1408:
+	printk("%s/%d just changed the state of lock:\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1915: FILE: kernel/lockdep.c:1409:
+	printk("%s/%d just changed the state of lock:\n",
+		curr->comm, curr->pid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1918: FILE: kernel/lockdep.c:1412:
+		printk("but this lock took another, %s-irq-unsafe lock in the past:\n", irqtype);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1920: FILE: kernel/lockdep.c:1414:
+		printk("but this lock was taken by another, %s-irq-safe lock in the past:\n", irqtype);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1920: FILE: kernel/lockdep.c:1414:
+		printk("but this lock was taken by another, %s-irq-safe lock in the past:\n", irqtype);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1922: FILE: kernel/lockdep.c:1416:
+	printk("\n\nand interrupts could create inverse lock ordering between them,\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1924: FILE: kernel/lockdep.c:1418:
+	printk("which could potentially lead to deadlocks!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1926: FILE: kernel/lockdep.c:1420:
+	printk("\nother info that might help us debug this:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1929: FILE: kernel/lockdep.c:1423:
+	printk("\nthe first lock's dependencies:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1932: FILE: kernel/lockdep.c:1426:
+	printk("\nthe second lock's dependencies:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1935: FILE: kernel/lockdep.c:1429:
+	printk("\nstack backtrace:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1981: FILE: kernel/lockdep.c:1475:
+	printk("irq event stamp: %u\n", curr->irq_events);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1982: FILE: kernel/lockdep.c:1476:
+	printk("hardirqs last  enabled at (%u): [<%08lx>]",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1983: FILE: kernel/lockdep.c:1477:
+	printk("hardirqs last  enabled at (%u): [<%08lx>]",
+		curr->hardirq_enable_event, curr->hardirq_enable_ip);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1985: FILE: kernel/lockdep.c:1479:
+	printk("hardirqs last disabled at (%u): [<%08lx>]",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1986: FILE: kernel/lockdep.c:1480:
+	printk("hardirqs last disabled at (%u): [<%08lx>]",
+		curr->hardirq_disable_event, curr->hardirq_disable_ip);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1988: FILE: kernel/lockdep.c:1482:
+	printk("softirqs last  enabled at (%u): [<%08lx>]",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1989: FILE: kernel/lockdep.c:1483:
+	printk("softirqs last  enabled at (%u): [<%08lx>]",
+		curr->softirq_enable_event, curr->softirq_enable_ip);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1991: FILE: kernel/lockdep.c:1485:
+	printk("softirqs last disabled at (%u): [<%08lx>]",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1992: FILE: kernel/lockdep.c:1486:
+	printk("softirqs last disabled at (%u): [<%08lx>]",
+		curr->softirq_disable_event, curr->softirq_disable_ip);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2011: FILE: kernel/lockdep.c:1505:
+	printk("\n============================\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2012: FILE: kernel/lockdep.c:1506:
+	printk(  "[ BUG: illegal lock usage! ]\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#2012: FILE: kernel/lockdep.c:1506:
+	printk(  "[ BUG: illegal lock usage! ]\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2013: FILE: kernel/lockdep.c:1507:
+	printk(  "----------------------------\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#2013: FILE: kernel/lockdep.c:1507:
+	printk(  "----------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2015: FILE: kernel/lockdep.c:1509:
+	printk("illegal {%s} -> {%s} usage.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2016: FILE: kernel/lockdep.c:1510:
+	printk("illegal {%s} -> {%s} usage.\n",
+		usage_str[prev_bit], usage_str[new_bit]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2018: FILE: kernel/lockdep.c:1512:
+	printk("%s/%d [HC%u[%lu]:SC%u[%lu]:HE%u:SE%u] takes:\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2019: FILE: kernel/lockdep.c:1513:
+	printk("%s/%d [HC%u[%lu]:SC%u[%lu]:HE%u:SE%u] takes:\n",
+		curr->comm, curr->pid,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2026: FILE: kernel/lockdep.c:1520:
+	printk("{%s} state was registered at:\n", usage_str[prev_bit]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2030: FILE: kernel/lockdep.c:1524:
+	printk("\nother info that might help us debug this:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2033: FILE: kernel/lockdep.c:1527:
+	printk("\nstack backtrace:\n");

WARNING:TYPO_SPELLING: 'didnt' may be misspelled - perhaps 'didn't'?
#2070: FILE: kernel/lockdep.c:1564:
+	 * Make sure we didnt race:
 	                ^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2081: FILE: kernel/lockdep.c:1575:
+	if (new_bit == LOCK_ENABLED_HARDIRQS ||
+			new_bit == LOCK_ENABLED_HARDIRQS_READ)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2084: FILE: kernel/lockdep.c:1578:
+	else if (new_bit == LOCK_ENABLED_SOFTIRQS ||
+			new_bit == LOCK_ENABLED_SOFTIRQS_READ)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2111: FILE: kernel/lockdep.c:1605:
+		if (!check_usage_forwards(curr, this,
+				LOCK_ENABLED_HARDIRQS_READ, "hard-read"))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2137: FILE: kernel/lockdep.c:1631:
+		if (!check_usage_forwards(curr, this,
+				LOCK_ENABLED_SOFTIRQS_READ, "soft-read"))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2192: FILE: kernel/lockdep.c:1686:
+		if (!check_usage_backwards(curr, this,
+				   LOCK_USED_IN_HARDIRQ_READ, "hard-read"))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2219: FILE: kernel/lockdep.c:1713:
+		if (!check_usage_backwards(curr, this,
+				   LOCK_USED_IN_SOFTIRQ_READ, "soft-read"))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2278: FILE: kernel/lockdep.c:1772:
+		printk("\nmarked lock as {%s}:\n", usage_str[new_bit]);

CHECK:SPACING: No space is necessary after a cast
#2355: FILE: kernel/lockdep.c:1849:
+	ip = (unsigned long) __builtin_return_address(0);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2381: FILE: kernel/lockdep.c:1875:
+EXPORT_SYMBOL(trace_hardirqs_on);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:BRACES: braces {} should be used on all arms of this statement
#2396: FILE: kernel/lockdep.c:1890:
+	if (curr->hardirqs_enabled) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2404: FILE: kernel/lockdep.c:1898:
+	} else

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2408: FILE: kernel/lockdep.c:1902:
+EXPORT_SYMBOL(trace_hardirqs_off);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2457: FILE: kernel/lockdep.c:1951:
+	if (curr->softirqs_enabled) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2466: FILE: kernel/lockdep.c:1960:
+	} else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2488: FILE: kernel/lockdep.c:1982:
+		printk("BUG: key %p not in .data!\n", key);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2494: FILE: kernel/lockdep.c:1988:
+	memset(lock->type, 0, sizeof(lock->type[0])*MAX_LOCKDEP_SUBTYPES);
 	                                           ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2497: FILE: kernel/lockdep.c:1991:
+EXPORT_SYMBOL_GPL(lockdep_init_map);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2522: FILE: kernel/lockdep.c:2016:
+		printk("BUG: MAX_LOCKDEP_SUBTYPES too low!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2523: FILE: kernel/lockdep.c:2017:
+		printk("turning off the locking correctness validator.\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2563: FILE: kernel/lockdep.c:2057:
+				if (!mark_lock(curr, hlock,
+						LOCK_USED_IN_HARDIRQ_READ, ip))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2567: FILE: kernel/lockdep.c:2061:
+				if (!mark_lock(curr, hlock,
+						LOCK_USED_IN_SOFTIRQ_READ, ip))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2581: FILE: kernel/lockdep.c:2075:
+			if (!mark_lock(curr, hlock,
+					LOCK_ENABLED_HARDIRQS_READ, ip))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2585: FILE: kernel/lockdep.c:2079:
+				if (!mark_lock(curr, hlock,
+						LOCK_ENABLED_SOFTIRQS_READ, ip))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2589: FILE: kernel/lockdep.c:2083:
+			if (!mark_lock(curr, hlock,
+					LOCK_ENABLED_HARDIRQS, ip))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2593: FILE: kernel/lockdep.c:2087:
+				if (!mark_lock(curr, hlock,
+						LOCK_ENABLED_SOFTIRQS, ip))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2628: FILE: kernel/lockdep.c:2122:
+	hlock->irq_context = 2*(curr->hardirq_context ? 1 : 0) +
 	                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2633: FILE: kernel/lockdep.c:2127:
+		prev_hlock = curr->held_locks + depth-1;
 		                                     ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2695: FILE: kernel/lockdep.c:2189:
+		printk("BUG: MAX_LOCK_DEPTH too low!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2696: FILE: kernel/lockdep.c:2190:
+		printk("turning off the locking correctness validator.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2713: FILE: kernel/lockdep.c:2207:
+	printk("\n======================================\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2714: FILE: kernel/lockdep.c:2208:
+	printk(  "[ BUG: bad unlock ordering detected! ]\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#2714: FILE: kernel/lockdep.c:2208:
+	printk(  "[ BUG: bad unlock ordering detected! ]\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2715: FILE: kernel/lockdep.c:2209:
+	printk(  "--------------------------------------\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#2715: FILE: kernel/lockdep.c:2209:
+	printk(  "--------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2716: FILE: kernel/lockdep.c:2210:
+	printk("%s/%d is trying to release lock (",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2717: FILE: kernel/lockdep.c:2211:
+	printk("%s/%d is trying to release lock (",
+		curr->comm, curr->pid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2719: FILE: kernel/lockdep.c:2213:
+	printk(") at:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2721: FILE: kernel/lockdep.c:2215:
+	printk("but the next lock to release is:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2723: FILE: kernel/lockdep.c:2217:
+	printk("\nother info that might help us debug this:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2726: FILE: kernel/lockdep.c:2220:
+	printk("\nstack backtrace:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2740: FILE: kernel/lockdep.c:2234:
+	printk("\n=====================================\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2741: FILE: kernel/lockdep.c:2235:
+	printk(  "[ BUG: bad unlock balance detected! ]\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#2741: FILE: kernel/lockdep.c:2235:
+	printk(  "[ BUG: bad unlock balance detected! ]\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2742: FILE: kernel/lockdep.c:2236:
+	printk(  "-------------------------------------\n");

ERROR:SPACING: space prohibited after that open parenthesis '('
#2742: FILE: kernel/lockdep.c:2236:
+	printk(  "-------------------------------------\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2743: FILE: kernel/lockdep.c:2237:
+	printk("%s/%d is trying to release lock (",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2744: FILE: kernel/lockdep.c:2238:
+	printk("%s/%d is trying to release lock (",
+		curr->comm, curr->pid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2746: FILE: kernel/lockdep.c:2240:
+	printk(") at:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2748: FILE: kernel/lockdep.c:2242:
+	printk("but there are no more locks to release!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2749: FILE: kernel/lockdep.c:2243:
+	printk("\nother info that might help us debug this:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2752: FILE: kernel/lockdep.c:2246:
+	printk("\nstack backtrace:\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hlock->prev_chain_key != 0'
#2796: FILE: kernel/lockdep.c:2290:
+	if (DEBUG_WARN_ON(!depth && (hlock->prev_chain_key != 0)))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2833: FILE: kernel/lockdep.c:2327:
+	for (i = depth-1; i >= 0; i--) {
 	              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2858: FILE: kernel/lockdep.c:2352:
+		if (!__lockdep_acquire(hlock->instance,
+			hlock->type->subtype, hlock->trylock,

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2949: FILE: kernel/lockdep.c:2443:
+EXPORT_SYMBOL_GPL(lockdep_acquire);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2969: FILE: kernel/lockdep.c:2463:
+EXPORT_SYMBOL_GPL(lockdep_release);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2984: FILE: kernel/lockdep.c:2478:
+	memset(current->held_locks, 0, MAX_LOCK_DEPTH*sizeof(struct held_lock));
 	                                             ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#3010: FILE: kernel/lockdep.c:2504:
+
+}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3114: FILE: kernel/lockdep.c:2608:
+	printk("Lock dependency validator: Copyright (c) 2006 Red Hat, Inc., Ingo Molnar\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3116: FILE: kernel/lockdep.c:2610:
+	printk("... MAX_LOCKDEP_SUBTYPES:    %lu\n", MAX_LOCKDEP_SUBTYPES);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3117: FILE: kernel/lockdep.c:2611:
+	printk("... MAX_LOCK_DEPTH:          %lu\n", MAX_LOCK_DEPTH);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3118: FILE: kernel/lockdep.c:2612:
+	printk("... MAX_LOCKDEP_KEYS:        %lu\n", MAX_LOCKDEP_KEYS);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3119: FILE: kernel/lockdep.c:2613:
+	printk("... TYPEHASH_SIZE:           %lu\n", TYPEHASH_SIZE);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3120: FILE: kernel/lockdep.c:2614:
+	printk("... MAX_LOCKDEP_ENTRIES:     %lu\n", MAX_LOCKDEP_ENTRIES);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3121: FILE: kernel/lockdep.c:2615:
+	printk("... MAX_LOCKDEP_CHAINS:      %lu\n", MAX_LOCKDEP_CHAINS);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3122: FILE: kernel/lockdep.c:2616:
+	printk("... CHAINHASH_SIZE:          %lu\n", CHAINHASH_SIZE);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3124: FILE: kernel/lockdep.c:2618:
+	printk(" memory used by lock dependency info: %lu kB\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3125: FILE: kernel/lockdep.c:2619:
+	printk(" memory used by lock dependency info: %lu kB\n",
+		(sizeof(struct lock_type) * MAX_LOCKDEP_KEYS +

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3131: FILE: kernel/lockdep.c:2625:
+	printk(" per task-struct memory footprint: %lu bytes\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3132: FILE: kernel/lockdep.c:2626:
+	printk(" per task-struct memory footprint: %lu bytes\n",
+		sizeof(struct held_lock) * MAX_LOCK_DEPTH);

WARNING:TYPO_SPELLING: 'didnt' may be misspelled - perhaps 'didn't'?
#3136: FILE: kernel/lockdep.c:2630:
+		printk("WARNING: lockdep init error! Arch code didnt call lockdep_init() early enough?\n");
 		                                               ^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3136: FILE: kernel/lockdep.c:2630:
+		printk("WARNING: lockdep init error! Arch code didnt call lockdep_init() early enough?\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3145: FILE: kernel/lockdep_internals.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#3146: FILE: kernel/lockdep_internals.h:2:
+ * kernel/lockdep_internals.h

CHECK:BIT_MACRO: Prefer using the BIT macro
#3165: FILE: kernel/lockdep_internals.h:21:
+#define MAX_LOCKDEP_KEYS	(1UL << MAX_LOCKDEP_KEYS_BITS)

CHECK:BIT_MACRO: Prefer using the BIT macro
#3168: FILE: kernel/lockdep_internals.h:24:
+#define MAX_LOCKDEP_CHAINS	(1UL << MAX_LOCKDEP_CHAINS_BITS)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3181: FILE: kernel/lockdep_internals.h:37:
+extern const char * __get_key_name(struct lockdep_subtype_key *key, char *str);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3181: FILE: kernel/lockdep_internals.h:37:
+extern const char * __get_key_name(struct lockdep_subtype_key *key, char *str);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000073430.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 170 warnings, 110 checks, 3161 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000073430.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
