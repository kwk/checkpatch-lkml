WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#58: 
diff --new-file -u --recursive --exclude *~ linux-2.4.4-orig/arch/i386/kernel/apm.c linux-2.4.4-pmevent/arch/i386/kernel/apm.c

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#125: FILE: arch/i386/kernel/apm.c:945:
+	char*type = PME_NOTIFY;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#126: FILE: arch/i386/kernel/apm.c:946:
+	char*name;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#130: FILE: arch/i386/kernel/apm.c:950:
+	else	name = "unknown event";

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#131: FILE: arch/i386/kernel/apm.c:951:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#132: FILE: arch/i386/kernel/apm.c:952:
+	switch(event){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#132: FILE: arch/i386/kernel/apm.c:952:
+	switch(event){

ERROR:SPACING: space required after that ',' (ctx:VxV)
#157: FILE: arch/i386/kernel/apm.c:977:
+	pme_announce(type,"APM",name);
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#157: FILE: arch/i386/kernel/apm.c:977:
+	pme_announce(type,"APM",name);
 	                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#168: FILE: arch/i386/kernel/apm.c:1002:
+^I^I$

CHECK:BRACES: Unbalanced braces around else statement
#264: FILE: arch/i386/kernel/apm.c:1222:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#275: FILE: arch/i386/kernel/apm.c:1232:
+		} else

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#283: FILE: include/linux/pmevent.h:1:
+#ifndef _LINUX_PMEVENT_H_

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#302: FILE: include/linux/pmevent.h:20:
+void pme_announce(const char* event_type,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#303: FILE: include/linux/pmevent.h:21:
+		  const char* subsystem,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#304: FILE: include/linux/pmevent.h:22:
+		  const char* desc);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#306: FILE: include/linux/pmevent.h:24:
+static inline void  pme_announce(const char* event_type,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#307: FILE: include/linux/pmevent.h:25:
+				 const char* subsystem,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#308: FILE: include/linux/pmevent.h:26:
+^I^I^I^I const char* desc) $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#308: FILE: include/linux/pmevent.h:26:
+				 const char* desc) 

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#331: FILE: kernel/pmevent.c:1:
+#include <linux/config.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#341: FILE: kernel/pmevent.c:11:
+#include <asm/uaccess.h>

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#351: FILE: kernel/pmevent.c:21:
+static unsigned ring_next; /*=0*/

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#354: FILE: kernel/pmevent.c:24:
+struct fop_priv
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#356: FILE: kernel/pmevent.c:26:
+	unsigned fp_ringpos;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#357: FILE: kernel/pmevent.c:27:
+	unsigned fp_msgpos;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#358: FILE: kernel/pmevent.c:28:
+^I$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#361: FILE: kernel/pmevent.c:31:
+}
+;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#377: FILE: kernel/pmevent.c:47:
+void pme_announce(const char* event_type,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#378: FILE: kernel/pmevent.c:48:
+		  const char* subsystem,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#379: FILE: kernel/pmevent.c:49:
+		  const char* desc)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#381: FILE: kernel/pmevent.c:51:
+	unsigned ring_cur;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#382: FILE: kernel/pmevent.c:52:
+^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#384: FILE: kernel/pmevent.c:54:
+	if(strlen(event_type)+strlen(subsystem)+strlen(desc) + 5 >=
 	                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#384: FILE: kernel/pmevent.c:54:
+	if(strlen(event_type)+strlen(subsystem)+strlen(desc) + 5 >=
 	                                       ^

ERROR:SPACING: space required before the open parenthesis '('
#384: FILE: kernel/pmevent.c:54:
+	if(strlen(event_type)+strlen(subsystem)+strlen(desc) + 5 >=

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pme_announce', this function's name, in a string
#386: FILE: kernel/pmevent.c:56:
+		panic("pme_announce arguments too long\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#389: FILE: kernel/pmevent.c:59:
+	printk(KERN_DEBUG "pm event: %s %s %s\n",event_type,subsystem,desc);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#389: FILE: kernel/pmevent.c:59:
+	printk(KERN_DEBUG "pm event: %s %s %s\n",event_type,subsystem,desc);
 	                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#389: FILE: kernel/pmevent.c:59:
+	printk(KERN_DEBUG "pm event: %s %s %s\n",event_type,subsystem,desc);
 	                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#389: FILE: kernel/pmevent.c:59:
+	printk(KERN_DEBUG "pm event: %s %s %s\n",event_type,subsystem,desc);
 	                                                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#390: FILE: kernel/pmevent.c:60:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#394: FILE: kernel/pmevent.c:64:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#395: FILE: kernel/pmevent.c:65:
+	if(++ring_next >= N_MSGS)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#397: FILE: kernel/pmevent.c:67:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#400: FILE: kernel/pmevent.c:70:
+^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxO)
#401: FILE: kernel/pmevent.c:71:
+		list_for_each(i,&listeners) {
 		               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#401: FILE: kernel/pmevent.c:71:
+		list_for_each(i,&listeners) {
 		                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#403: FILE: kernel/pmevent.c:73:
+			struct fop_priv *priv = list_entry(i, struct fop_priv, fp_entry);
+			if(ring_next == priv->fp_ringpos) {

ERROR:SPACING: space required before the open parenthesis '('
#403: FILE: kernel/pmevent.c:73:
+			if(ring_next == priv->fp_ringpos) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#412: FILE: kernel/pmevent.c:82:
+^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#412: FILE: kernel/pmevent.c:82:
+
+		

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#413: FILE: kernel/pmevent.c:83:
+		
+	}

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#415: FILE: kernel/pmevent.c:85:
+	sprintf((char*)ring[ring_cur],"%s %s %s\n",event_type,subsystem,desc);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#415: FILE: kernel/pmevent.c:85:
+	sprintf((char*)ring[ring_cur],"%s %s %s\n",event_type,subsystem,desc);
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#415: FILE: kernel/pmevent.c:85:
+	sprintf((char*)ring[ring_cur],"%s %s %s\n",event_type,subsystem,desc);
 	                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#415: FILE: kernel/pmevent.c:85:
+	sprintf((char*)ring[ring_cur],"%s %s %s\n",event_type,subsystem,desc);
 	                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#415: FILE: kernel/pmevent.c:85:
+	sprintf((char*)ring[ring_cur],"%s %s %s\n",event_type,subsystem,desc);
 	                                                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#416: FILE: kernel/pmevent.c:86:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#418: FILE: kernel/pmevent.c:88:
+^I$

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#422: FILE: kernel/pmevent.c:92:
+static ssize_t do_read(struct fop_priv*priv,char*buf,size_t count)

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#422: FILE: kernel/pmevent.c:92:
+static ssize_t do_read(struct fop_priv*priv,char*buf,size_t count)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#422: FILE: kernel/pmevent.c:92:
+static ssize_t do_read(struct fop_priv*priv,char*buf,size_t count)
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#422: FILE: kernel/pmevent.c:92:
+static ssize_t do_read(struct fop_priv*priv,char*buf,size_t count)
                                                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#425: FILE: kernel/pmevent.c:95:
+^Ichar* msg; $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#425: FILE: kernel/pmevent.c:95:
+	char* msg; 

ERROR:SPACING: space required before the open parenthesis '('
#427: FILE: kernel/pmevent.c:97:
+	if(!priv->fp_overflow) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#427: FILE: kernel/pmevent.c:97:
+	if(!priv->fp_overflow) {
[...]
+	else
[...]

ERROR:SPACING: space required before the open parenthesis '('
#428: FILE: kernel/pmevent.c:98:
+		if(priv->fp_ringpos == ring_next) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#432: FILE: kernel/pmevent.c:102:
+		msg = (char*)ring[priv->fp_ringpos];

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#434: FILE: kernel/pmevent.c:104:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#435: FILE: kernel/pmevent.c:105:
+		msg = (char*)msg_overflow;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#436: FILE: kernel/pmevent.c:106:
+^I^I^I$

ERROR:SPACING: space required before the open brace '{'
#439: FILE: kernel/pmevent.c:109:
+	if(ret <= count){

ERROR:SPACING: space required before the open parenthesis '('
#439: FILE: kernel/pmevent.c:109:
+	if(ret <= count){

ERROR:SPACING: space required before the open brace '{'
#440: FILE: kernel/pmevent.c:110:
+		if(priv->fp_overflow){

ERROR:SPACING: space required before the open parenthesis '('
#440: FILE: kernel/pmevent.c:110:
+		if(priv->fp_overflow){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#453: FILE: kernel/pmevent.c:123:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#459: FILE: kernel/pmevent.c:129:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#466: FILE: kernel/pmevent.c:136:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#467: FILE: kernel/pmevent.c:137:
+	
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#468: FILE: kernel/pmevent.c:138:
+static ssize_t fop_read(struct file * file, char * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#468: FILE: kernel/pmevent.c:138:
+static ssize_t fop_read(struct file * file, char * buf,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#478: FILE: kernel/pmevent.c:148:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#479: FILE: kernel/pmevent.c:149:
+ retry:^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#482: FILE: kernel/pmevent.c:152:
+	ret = do_read(priv,buf,count);
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#482: FILE: kernel/pmevent.c:152:
+	ret = do_read(priv,buf,count);
 	                      ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#486: FILE: kernel/pmevent.c:156:
+	if((ret == -EAGAIN) && !(file->f_flags&O_NONBLOCK)) {
 	                                      ^

ERROR:SPACING: space required before the open parenthesis '('
#486: FILE: kernel/pmevent.c:156:
+	if((ret == -EAGAIN) && !(file->f_flags&O_NONBLOCK)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#488: FILE: kernel/pmevent.c:158:
+		if (wait_event_interruptible(waiters,
+		    priv->fp_overflow || priv->fp_ringpos != ring_next)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#499: FILE: kernel/pmevent.c:169:
+static int fop_open(struct inode * inode, struct file * file)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#499: FILE: kernel/pmevent.c:169:
+static int fop_open(struct inode * inode, struct file * file)

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#501: FILE: kernel/pmevent.c:171:
+	struct fop_priv*priv;

WARNING:LINE_SPACING: Missing a blank line after declarations
#502: FILE: kernel/pmevent.c:172:
+	struct fop_priv*priv;
+	priv = kmalloc(sizeof *priv,GFP_KERNEL);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#502: FILE: kernel/pmevent.c:172:
+	priv = kmalloc(sizeof *priv,GFP_KERNEL);
 	                           ^

WARNING:SIZEOF_PARENTHESIS: sizeof *priv should be sizeof(*priv)
#502: FILE: kernel/pmevent.c:172:
+	priv = kmalloc(sizeof *priv,GFP_KERNEL);

ERROR:SPACING: space required before the open parenthesis '('
#503: FILE: kernel/pmevent.c:173:
+	if(!priv)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#506: FILE: kernel/pmevent.c:176:
+	memset(priv,0,sizeof *priv);
 	           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#506: FILE: kernel/pmevent.c:176:
+	memset(priv,0,sizeof *priv);
 	             ^

WARNING:SIZEOF_PARENTHESIS: sizeof *priv should be sizeof(*priv)
#506: FILE: kernel/pmevent.c:176:
+	memset(priv,0,sizeof *priv);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#507: FILE: kernel/pmevent.c:177:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#524: FILE: kernel/pmevent.c:194:
+static int fop_release(struct inode * inode, struct file * file)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#524: FILE: kernel/pmevent.c:194:
+static int fop_release(struct inode * inode, struct file * file)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#531: FILE: kernel/pmevent.c:201:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#537: FILE: kernel/pmevent.c:207:
+static unsigned int fop_poll(struct file *file, poll_table * wait)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#540: FILE: kernel/pmevent.c:210:
+	unsigned ret = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#541: FILE: kernel/pmevent.c:211:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#545: FILE: kernel/pmevent.c:215:
+	if(priv->fp_overflow || priv->fp_ringpos != ring_next)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#552: FILE: kernel/pmevent.c:222:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#553: FILE: kernel/pmevent.c:223:
+static struct file_operations pme_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#554: FILE: kernel/pmevent.c:224:
+	read:		fop_read,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#555: FILE: kernel/pmevent.c:225:
+	poll:		fop_poll,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#555: FILE: kernel/pmevent.c:225:
+	poll:		fop_poll,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#556: FILE: kernel/pmevent.c:226:
+	open:		fop_open,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#556: FILE: kernel/pmevent.c:226:
+	open:		fop_open,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#557: FILE: kernel/pmevent.c:227:
+	release:        fop_release,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#557: FILE: kernel/pmevent.c:227:
+	release:        fop_release,

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#560: FILE: kernel/pmevent.c:230:
+static struct miscdevice pme_dev=
                                 ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#561: FILE: kernel/pmevent.c:231:
+static struct miscdevice pme_dev=
+{

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#570: FILE: kernel/pmevent.c:240:
+	printk(KERN_INFO "pm event: subsystem ready\n");

ERROR:SPACING: space required after that ',' (ctx:VxO)
#576: FILE: kernel/pmevent.c:246:
+	struct list_head *i,*j;
 	                   ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#576: FILE: kernel/pmevent.c:246:
+	struct list_head *i,*j;
 	                    ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#579: FILE: kernel/pmevent.c:249:
+	printk(KERN_INFO "pm event: subsystem closing\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#583: FILE: kernel/pmevent.c:253:
+	for(i=listeners.next;i!=&listeners;i=j){
 	     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#583: FILE: kernel/pmevent.c:253:
+	for(i=listeners.next;i!=&listeners;i=j){
 	                    ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxO)
#583: FILE: kernel/pmevent.c:253:
+	for(i=listeners.next;i!=&listeners;i=j){
 	                      ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#583: FILE: kernel/pmevent.c:253:
+	for(i=listeners.next;i!=&listeners;i=j){
 	                        ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#583: FILE: kernel/pmevent.c:253:
+	for(i=listeners.next;i!=&listeners;i=j){
 	                                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#583: FILE: kernel/pmevent.c:253:
+	for(i=listeners.next;i!=&listeners;i=j){
 	                                    ^

ERROR:SPACING: space required before the open brace '{'
#583: FILE: kernel/pmevent.c:253:
+	for(i=listeners.next;i!=&listeners;i=j){

ERROR:SPACING: space required before the open parenthesis '('
#583: FILE: kernel/pmevent.c:253:
+	for(i=listeners.next;i!=&listeners;i=j){

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#585: FILE: kernel/pmevent.c:255:
+		struct fop_priv *priv
+			= list_entry(i, struct fop_priv, fp_entry);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000537075.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 97 errors, 22 warnings, 13 checks, 509 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000537075.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
