WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#48: 
Documentation/vm_pps.txt is also updated to show the aboved two new features,

WARNING:TYPO_SPELLING: 'aboved' may be misspelled - perhaps 'above'?
#48: 
Documentation/vm_pps.txt is also updated to show the aboved two new features,
                                                     ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'catched' may be misspelled - perhaps 'caught'?
#56: 
A bug is catched in mm/memory.c:zap_pte_range -- if a PrivatePage is
         ^^^^^^^

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#104: FILE: Documentation/vm_pps.txt:45:
Note, it ISN'T perfect.

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#293: FILE: include/linux/mm.h:1067:
+};
+extern struct pps_info pps_info;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#306: FILE: include/linux/mm.h:1078:
 };
+extern struct delay_tlb_task delay_tlb_tasks[32];

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#358: FILE: mm/memory.c:693:
+			BUG_ON(page == ZERO_PAGE(addr));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: Unbalanced braces around else statement
#389: FILE: mm/memory.c:1542:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#412: FILE: mm/memory.c:2124:
+		else {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#503: FILE: mm/swapfile.c:552:
+	prev = mm = &init_mm;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#560: FILE: mm/vmscan.c:1529:
+};
+// pps end.

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#584: FILE: mm/vmscan.c:1607:
+static struct delay_tlb_task* delay_task = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#584: FILE: mm/vmscan.c:1607:
+static struct delay_tlb_task* delay_task = NULL;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#588: FILE: mm/vmscan.c:1610:
+static struct delay_tlb_task* search_free_tlb_tasks_slot(void)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#591: FILE: mm/vmscan.c:1612:
+	struct delay_tlb_task* ret = NULL;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#618: FILE: mm/vmscan.c:1680:
+	if (vma_index != 0 && delay_task->vma[vma_index - 1] == vma &&
+			delay_task->end[vma_index - 1] == addr) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#632: FILE: mm/vmscan.c:1700:
+static void shrink_pvma_scan_ptes(struct scan_control* sc, struct mm_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#633: FILE: mm/vmscan.c:1701:
+		mm, struct vm_area_struct* vma, pmd_t* pmd, unsigned long addr,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#633: FILE: mm/vmscan.c:1701:
+		mm, struct vm_area_struct* vma, pmd_t* pmd, unsigned long addr,

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#680: FILE: mm/vmscan.c:1831:
+					if (unlikely(!pte_same(*series.ptes[i], series.orig_ptes[i]))) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#707: FILE: mm/vmscan.c:1864:
+static void shrink_pvma_pmd_range(struct scan_control* sc, struct mm_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#708: FILE: mm/vmscan.c:1865:
+		mm, struct vm_area_struct* vma, pud_t* pud, unsigned long addr,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#708: FILE: mm/vmscan.c:1865:
+		mm, struct vm_area_struct* vma, pud_t* pud, unsigned long addr,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#721: FILE: mm/vmscan.c:1878:
+static void shrink_pvma_pud_range(struct scan_control* sc, struct mm_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#722: FILE: mm/vmscan.c:1879:
+		mm, struct vm_area_struct* vma, pgd_t* pgd, unsigned long addr,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#722: FILE: mm/vmscan.c:1879:
+		mm, struct vm_area_struct* vma, pgd_t* pgd, unsigned long addr,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#734: FILE: mm/vmscan.c:1892:
+static void shrink_pvma_pgd_range(struct scan_control* sc, struct mm_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#735: FILE: mm/vmscan.c:1893:
+		mm, struct vm_area_struct* vma)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#749: FILE: mm/vmscan.c:1913:
+	prev = mm = &init_mm;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#795: FILE: mm/vmscan.c:2125:
+static int kppsd(void* p)

WARNING:LINE_SPACING: Missing a blank line after declarations
#800: FILE: mm/vmscan.c:2130:
+	DEFINE_WAIT(wait);
+	daemonize("kppsd");

WARNING:LINE_SPACING: Missing a blank line after declarations
#803: FILE: mm/vmscan.c:2133:
+	struct scan_control default_sc;
+	default_sc.gfp_mask = GFP_KERNEL;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000004283.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 7 warnings, 8 checks, 689 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000004283.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
