CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type == READ'
#178: FILE: fs/compat.c:1236:
+	if ((ret + (type == READ)) > 0) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LINE_SPACING: Missing a blank line after declarations
#180: FILE: fs/compat.c:1238:
+		struct dentry *dentry = file->f_dentry;
+		if (type == READ)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#205: FILE: fs/file_table.c:126:
 
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#229: FILE: fs/inotify.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#230: FILE: fs/inotify.c:2:
+ * fs/inotify.c - inode-based file event notifications

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#306: FILE: fs/inotify.c:78:
+^Iwait_queue_head_t ^Iwq;^I^I/* wait queue for i/o */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#308: FILE: fs/inotify.c:80:
+^Istruct list_head ^Ievents;^I^I/* list of queued events */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#344: FILE: fs/inotify.c:116:
+^Istruct inode^I^I*inode;^I/* associated inode */^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#345: FILE: fs/inotify.c:117:
+^Is32 ^I^I^Iwd;^I/* watch descriptor */$

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#359: FILE: fs/inotify.c:131:
+	if (sscanf(buf, "%u", &max) > 0 && max > 0) {
+		max_queued_events = max;
+		return strlen(buf);
+	}

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#376: FILE: fs/inotify.c:148:
+	if (sscanf(buf, "%d", &max) > 0 && max > 0) {
+		max_user_devices = max;
+		return strlen(buf);
+	}

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#393: FILE: fs/inotify.c:165:
+	if (sscanf(buf, "%d", &max) > 0 && max > 0) {
+		max_user_watches = max;
+		return strlen(buf);
+	}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#400: FILE: fs/inotify.c:172:
+static CLASS_DEVICE_ATTR(max_queued_events, S_IRUGO | S_IWUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#402: FILE: fs/inotify.c:174:
+static CLASS_DEVICE_ATTR(max_user_devices, S_IRUGO | S_IWUSR,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#404: FILE: fs/inotify.c:176:
+static CLASS_DEVICE_ATTR(max_user_watches, S_IRUGO | S_IWUSR,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#416: FILE: fs/inotify.c:188:
+^I^Ifree_uid(dev->user);^I^I$

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#430: FILE: fs/inotify.c:202:
+		iput(watch->inode);		
 		^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#430: FILE: fs/inotify.c:202:
+^I^Iiput(watch->inode);^I^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#438: FILE: fs/inotify.c:210:
+static struct inotify_kernel_event * kernel_event(s32 wd, u32 mask, u32 cookie,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#518: FILE: fs/inotify.c:290:
+	if (dev->event_count && last->event.mask == mask &&
+			last->event.wd == watch->wd) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#561: FILE: fs/inotify.c:333:
+	BUG_ON(!dev);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#562: FILE: fs/inotify.c:334:
+	BUG_ON(!kevent);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#567: FILE: fs/inotify.c:339:
+^Idev->queue_size -= sizeof(struct inotify_event) + kevent->event.len;^I$

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#570: FILE: fs/inotify.c:342:
+	if (kevent->name)
+		kfree(kevent->name);

WARNING:LINE_SPACING: Missing a blank line after declarations
#583: FILE: fs/inotify.c:355:
+		struct inotify_kernel_event *kevent;
+		kevent = inotify_dev_get_event(dev);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#594: FILE: fs/inotify.c:366:
+static int inotify_dev_get_wd(struct inotify_device *dev,
+			     struct inotify_watch *watch)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#648: FILE: fs/inotify.c:420:
+^Iwatch->inode = inode;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#656: FILE: fs/inotify.c:428:
+^Iatomic_inc(&dev->user->inotify_watches);^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#703: FILE: fs/inotify.c:475:
+	BUG_ON(!dev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#704: FILE: fs/inotify.c:476:
+	BUG_ON(!watch);

WARNING:LINE_SPACING: Missing a blank line after declarations
#747: FILE: fs/inotify.c:519:
+			struct inotify_device *dev = watch->dev;
+			spin_lock(&dev->lock);

CHECK:BRACES: braces {} should be used on all arms of this statement
#772: FILE: fs/inotify.c:544:
+	if (!list_empty(&inode->inotify_watches)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#777: FILE: fs/inotify.c:549:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#815: FILE: fs/inotify.c:587:
+			struct inotify_device *dev = watch->dev;
+			spin_lock(&dev->lock);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#816: FILE: fs/inotify.c:588:
+			inotify_dev_queue_event(dev, watch, IN_UNMOUNT,0,NULL);
 			                                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#816: FILE: fs/inotify.c:588:
+			inotify_dev_queue_event(dev, watch, IN_UNMOUNT,0,NULL);
 			                                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#837: FILE: fs/inotify.c:609:
+		struct inotify_device *dev = watch->dev;
+		spin_lock(&dev->lock);

ERROR:CODE_INDENT: code indent should use tabs where possible
#849: FILE: fs/inotify.c:621:
+        struct inotify_device *dev;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#849: FILE: fs/inotify.c:621:
+        struct inotify_device *dev;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#852: FILE: fs/inotify.c:624:
+        dev = file->private_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#852: FILE: fs/inotify.c:624:
+        dev = file->private_data;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#857: FILE: fs/inotify.c:629:
+        if (inotify_dev_has_events(dev))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#857: FILE: fs/inotify.c:629:
+        if (inotify_dev_has_events(dev))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#858: FILE: fs/inotify.c:630:
+                ret = POLLIN | POLLRDNORM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#858: FILE: fs/inotify.c:630:
+                ret = POLLIN | POLLRDNORM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#862: FILE: fs/inotify.c:634:
+        return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#862: FILE: fs/inotify.c:634:
+        return ret;$

ERROR:SPACING: space required before the open brace '{'
#939: FILE: fs/inotify.c:711:
+			if (copy_to_user(buf, kevent->name, kevent->event.len)){

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dev)...) over kmalloc(sizeof(struct inotify_device)...)
#975: FILE: fs/inotify.c:747:
+	dev = kmalloc(sizeof(struct inotify_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1006: FILE: fs/inotify.c:778:
+^Istruct inotify_device *dev;^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1009: FILE: fs/inotify.c:781:
+	BUG_ON(!dev);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1018: FILE: fs/inotify.c:790:
+^I^Istruct inotify_watch *watch;^I^I$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1058: FILE: fs/inotify.c:830:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1061: FILE: fs/inotify.c:833:
+	ret = __user_walk(request->name, LOOKUP_FOLLOW, &nd);
 	                                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1066: FILE: fs/inotify.c:838:
+	ret = permission(nd.dentry->d_inode, MAY_READ, NULL);
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1070: FILE: fs/inotify.c:842:
+	/* inode is held in place by a reference on nd */
 	                                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1071: FILE: fs/inotify.c:843:
+	inode = nd.dentry->d_inode;
 	        ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1078: FILE: fs/inotify.c:850:
+^Ispin_lock(&dev->lock);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1083: FILE: fs/inotify.c:855:
+^I^Ispin_unlock(&dev->lock);^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1087: FILE: fs/inotify.c:859:
+^Ispin_unlock(&dev->lock);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1103: FILE: fs/inotify.c:875:
+^Ispin_lock(&dev->lock);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1115: FILE: fs/inotify.c:887:
+^Ispin_unlock(&dev->lock);^I$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1119: FILE: fs/inotify.c:891:
+	path_release(&nd);
 	              ^^

CHECK:SPACING: No space is necessary after a cast
#1160: FILE: fs/inotify.c:932:
+	p = (void __user *) arg;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1166: FILE: fs/inotify.c:938:
+		if (unlikely(copy_from_user(&request, p, sizeof (request)))) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1173: FILE: fs/inotify.c:945:
+		if (unlikely(copy_from_user(&wd, p, sizeof (wd)))) {

CHECK:SPACING: No space is necessary after a cast
#1180: FILE: fs/inotify.c:952:
+		ret = put_user(dev->queue_size, (int __user *) p);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1189: FILE: fs/inotify.c:961:
+static struct file_operations inotify_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'cannnot' may be misspelled - perhaps 'cannot'?
#1205: FILE: fs/inotify.c:977:
+ * inotify_init - Our initialization function.  Note that we cannnot return
                                                              ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1236: FILE: fs/inotify.c:1008:
+	printk(KERN_INFO "inotify device minor=%d\n", inotify_device.minor);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1249: FILE: fs/Kconfig:342:
+config INOTIFY
+	bool "Inotify file change notification support"
+	default y
+	---help---
+	  Say Y here to enable inotify support and the /dev/inotify character
+	  device.  Inotify is a file change notification system and a
+	  replacement for dnotify.  Inotify fixes numerous shortcomings in
+	  dnotify and introduces several new features.  It allows monitoring
+	  of both files and directories via a single open fd.  Multiple file
+	  events are supported.
+	  
+	  If unsure, say Y.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1259: FILE: fs/Kconfig:352:
+^I  $

WARNING:LINE_SPACING: Missing a blank line after declarations
#1386: FILE: fs/namei.c:2141:
+		const char *new_name = old_dentry->d_name.name;
+		fsnotify_move(old_dir, new_dir, old_name, new_name);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1425: FILE: fs/open.c:1006:
+	fsnotify_flush(filp, id);
 	               ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1448: FILE: fs/read_write.c:244:
+				struct inode *inode = dentry->d_inode;
+				fsnotify_access(dentry, inode,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1460: FILE: fs/read_write.c:295:
+				struct inode *inode = dentry->d_inode;
+				fsnotify_modify(dentry, inode,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type == READ'
#1472: FILE: fs/read_write.c:532:
+	if ((ret + (type == READ)) > 0) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1531: FILE: include/linux/fs.h:1374:
+extern void setattr_mask(unsigned int, int *, u32 *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1531: FILE: include/linux/fs.h:1374:
+extern void setattr_mask(unsigned int, int *, u32 *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1531: FILE: include/linux/fs.h:1374:
+extern void setattr_mask(unsigned int, int *, u32 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32 *' should also have an identifier name
#1531: FILE: include/linux/fs.h:1374:
+extern void setattr_mask(unsigned int, int *, u32 *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1539: FILE: include/linux/fsnotify.h:1:
+#ifndef _LINUX_FS_NOTIFY_H

CHECK:BRACES: braces {} should be used on all arms of this statement
#1565: FILE: include/linux/fsnotify.h:27:
+	if (old_dir == new_dir)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1567: FILE: include/linux/fsnotify.h:29:
+	else {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1599: FILE: include/linux/fsnotify.h:61:
+	inotify_inode_queue_event(dir, IN_DELETE_SUBDIR,0,dentry->d_name.name);
 	                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1599: FILE: include/linux/fsnotify.h:61:
+	inotify_inode_queue_event(dir, IN_DELETE_SUBDIR,0,dentry->d_name.name);
 	                                                 ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1692: FILE: include/linux/fsnotify.h:154:
+	if ((ia_valid & (ATTR_ATIME | ATTR_MTIME)) == (ATTR_ATIME | ATTR_MTIME))
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1728: FILE: include/linux/fsnotify.h:190:
+static inline void fsnotify_flush(struct file *filp, fl_owner_t id)
                                                ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1730: FILE: include/linux/fsnotify.h:192:
+	dnotify_flush(filp, id);
 	              ^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1778: FILE: include/linux/inotify.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1823: FILE: include/linux/inotify.h:46:
+#define IN_DELETE_SUBDIR^I0x00000100^I/* Subdir was deleted */ $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1839: FILE: include/linux/inotify.h:62:
+#define INOTIFY_WATCH  ^I^I_IOR(INOTIFY_IOCTL_MAGIC, 1, struct inotify_watch_request)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1840: FILE: include/linux/inotify.h:63:
+#define INOTIFY_IGNORE ^I^I_IOR(INOTIFY_IOCTL_MAGIC, 2, int)$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#1847: FILE: include/linux/inotify.h:70:
+#include <asm/atomic.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1851: FILE: include/linux/inotify.h:74:
+extern void inotify_inode_queue_event(struct inode *, __u32, __u32,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1853: FILE: include/linux/inotify.h:76:
+extern void inotify_dentry_parent_queue_event(struct dentry *, __u32, __u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#1853: FILE: include/linux/inotify.h:76:
+extern void inotify_dentry_parent_queue_event(struct dentry *, __u32, __u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument '__u32' should also have an identifier name
#1853: FILE: include/linux/inotify.h:76:
+extern void inotify_dentry_parent_queue_event(struct dentry *, __u32, __u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument '__u32' should also have an identifier name
#1853: FILE: include/linux/inotify.h:76:
+extern void inotify_dentry_parent_queue_event(struct dentry *, __u32, __u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1853: FILE: include/linux/inotify.h:76:
+extern void inotify_dentry_parent_queue_event(struct dentry *, __u32, __u32,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1855: FILE: include/linux/inotify.h:78:
+extern void inotify_super_block_umount(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#1855: FILE: include/linux/inotify.h:78:
+extern void inotify_super_block_umount(struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1856: FILE: include/linux/inotify.h:79:
+extern void inotify_inode_is_dead(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1856: FILE: include/linux/inotify.h:79:
+extern void inotify_inode_is_dead(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1857: FILE: include/linux/inotify.h:80:
+extern u32 inotify_get_cookie(void);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000202360.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 27 errors, 60 warnings, 18 checks, 1744 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000202360.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
