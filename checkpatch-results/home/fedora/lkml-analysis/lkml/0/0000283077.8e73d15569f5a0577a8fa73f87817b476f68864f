WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#70: FILE: crypto/Kconfig:142:
+config CRYPTO_AES_PADLOCK
+	bool "Support for AES in VIA PadLock"
+	depends on CRYPTO_AES && CRYPTO_VIA_PADLOCK
+	default y
+	help
+	  Use VIA PadLock for AES algorithm.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:LINE_SPACING: Missing a blank line after declarations
#109: FILE: crypto/aes.c:73:
+	static u8 use_padlock;
+	static inline int padlock_hw_extkey_available (u8 key_len);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#109: FILE: crypto/aes.c:73:
+	static inline int padlock_hw_extkey_available (u8 key_len);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#118: FILE: crypto/aes.c:106:
+	u32 e_data[AES_EXTENDED_KEY_SIZE+4];
 	                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#119: FILE: crypto/aes.c:107:
+	u32 d_data[AES_EXTENDED_KEY_SIZE+4];
 	                                ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#150: FILE: crypto/aes.c:307:
+			ctx->E += 4 - (((int)(ctx->e_data) & 0x0F) / sizeof (ctx->e_data[0]));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#153: FILE: crypto/aes.c:310:
+			ctx->D += 4 - (((int)(ctx->d_data) & 0x0F) / sizeof (ctx->d_data[0]));

WARNING:TYPO_SPELLING: 'interm' may be misspelled - perhaps 'interim'?
#233: FILE: crypto/aes.c:501:
+		int interm:1;
 		    ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#243: FILE: crypto/aes.c:511:
+/* Tells whether the ACE is capable to generate
+   the extended key for a given key_len. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#243: FILE: crypto/aes.c:511:
+   the extended key for a given key_len. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#247: FILE: crypto/aes.c:515:
+^I         as it's likely that the capability will be$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#247: FILE: crypto/aes.c:515:
+	/* TODO: We should check the actual CPU model/stepping
+	         as it's likely that the capability will be

ERROR:CODE_INDENT: code indent should use tabs where possible
#248: FILE: crypto/aes.c:516:
+^I         added in the next CPU revisions. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#248: FILE: crypto/aes.c:516:
+	         added in the next CPU revisions. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#295: FILE: crypto/aes.c:563:
+	/* Don't blindly modify this structure - the items must
+	   fit on 16-Bytes boundaries! */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#295: FILE: crypto/aes.c:563:
+	   fit on 16-Bytes boundaries! */

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#310: FILE: crypto/aes.c:578:
+		data = (void*)(bigbuf + 16 - ((long)bigbuf & 0x0F));

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#312: FILE: crypto/aes.c:580:
+		data = (void*)bigbuf;

CHECK:BRACES: braces {} should be used on all arms of this statement
#314: FILE: crypto/aes.c:582:
+	if (((long)in_arg) & 0x0F) {
[...]
+	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#318: FILE: crypto/aes.c:586:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#319: FILE: crypto/aes.c:587:
+		in = (u8*)in_arg;

CHECK:BRACES: braces {} should be used on all arms of this statement
#321: FILE: crypto/aes.c:589:
+	if (((long)out_arg) & 0x0F) {
[...]
+	else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#327: FILE: crypto/aes.c:595:
+	}
+	else

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#336: FILE: crypto/aes.c:604:
+	memset (&data->cword, 0, sizeof(union cword));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#346: FILE: crypto/aes.c:614:
+	/* ctx->E starts with a plain key - if the hardware is capable
+	   to generate the extended key itself we must supply

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#347: FILE: crypto/aes.c:615:
+	   the plain key for both Encryption and Decryption. */

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#353: FILE: crypto/aes.c:621:
+	(xcrypt_func)(in, out, key, iv, &data->cword, nbytes/16);
 	                                                    ^

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#360: FILE: crypto/aes.c:628:
+	if (index)
+		kfree(index);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#407: FILE: crypto/aes.c:675:
+		aes_padlock (ctx_arg, out, in, NULL, AES_BLOCK_SIZE,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#411: FILE: crypto/aes.c:679:
+		aes_decrypt_sw (ctx_arg, out, in);

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#421: FILE: crypto/aes.c:701:
+static int disable_via_padlock = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#425: FILE: crypto/aes.c:705:
+static int disable_multiblock = 0;

CHECK:BRACES: braces {} should be used on all arms of this statement
#436: FILE: crypto/aes.c:716:
+	if (use_padlock) {
[...]
+	} else if (cpu_has_xstore_enabled)
[...]
+	else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#445: FILE: crypto/aes.c:725:
+		printk(KERN_NOTICE PFX

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#449: FILE: crypto/aes.c:729:
+		printk(KERN_NOTICE PFX "VIA PadLock ACE is available but not used.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#451: FILE: crypto/aes.c:731:
+		printk(KERN_NOTICE PFX "Using software AES.\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000283077.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 21 warnings, 6 checks, 398 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000283077.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
