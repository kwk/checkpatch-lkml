WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#152: FILE: include/linux/pagg.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#169: FILE: include/linux/pagg.h:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#170: FILE: include/linux/pagg.h:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#203: FILE: include/linux/pagg.h:52:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_l' - possible side-effects?
#209: FILE: include/linux/pagg.h:58:
+#define INIT_PAGG_LIST(_l)						\
+do {									\
+	INIT_LIST_HEAD(&(_l)->pagg_list);					\
+	init_rwsem(&(_l)->pagg_sem);						\
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#213: FILE: include/linux/pagg.h:62:
+} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#215: FILE: include/linux/pagg.h:64:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#223: FILE: include/linux/pagg.h:72:
+ *     ^I^Iholds the name key and function pointers.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: include/linux/pagg.h:77:
+       struct pagg_hook^I*hook;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: include/linux/pagg.h:78:
+       void^I^I*data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: include/linux/pagg.h:79:
+       struct list_head^Ientry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: include/linux/pagg.h:118:
+       struct module^I*module;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: include/linux/pagg.h:119:
+       char^I^I*name;^I/* Name Key - restricted to 32 characters */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#271: FILE: include/linux/pagg.h:120:
+       void^I^I*data;^I/* Opaque module specific data */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#272: FILE: include/linux/pagg.h:121:
+       struct list_head^Ientry;^I/* List pointers */$

WARNING:TABSTOP: Statements should start on a tabstop
#273: FILE: include/linux/pagg.h:122:
+		 atomic_t refcnt; /* usage counter */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#274: FILE: include/linux/pagg.h:123:
+       int^I^I(*init)(struct task_struct *, struct pagg *);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#274: FILE: include/linux/pagg.h:123:
+       int		(*init)(struct task_struct *, struct pagg *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pagg *' should also have an identifier name
#274: FILE: include/linux/pagg.h:123:
+       int		(*init)(struct task_struct *, struct pagg *);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: include/linux/pagg.h:124:
+       int^I^I(*attach)(struct task_struct *, struct pagg *, void*);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#275: FILE: include/linux/pagg.h:124:
+       int		(*attach)(struct task_struct *, struct pagg *, void*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pagg *' should also have an identifier name
#275: FILE: include/linux/pagg.h:124:
+       int		(*attach)(struct task_struct *, struct pagg *, void*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void*' should also have an identifier name
#275: FILE: include/linux/pagg.h:124:
+       int		(*attach)(struct task_struct *, struct pagg *, void*);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#276: FILE: include/linux/pagg.h:125:
+       void^I^I(*detach)(struct task_struct *, struct pagg *);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#276: FILE: include/linux/pagg.h:125:
+       void		(*detach)(struct task_struct *, struct pagg *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pagg *' should also have an identifier name
#276: FILE: include/linux/pagg.h:125:
+       void		(*detach)(struct task_struct *, struct pagg *);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#277: FILE: include/linux/pagg.h:126:
+       void^I^I(*exec)(struct task_struct *, struct pagg *);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#277: FILE: include/linux/pagg.h:126:
+       void		(*exec)(struct task_struct *, struct pagg *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pagg *' should also have an identifier name
#277: FILE: include/linux/pagg.h:126:
+       void		(*exec)(struct task_struct *, struct pagg *);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#280: FILE: include/linux/pagg.h:129:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#282: FILE: include/linux/pagg.h:131:
+extern struct pagg *pagg_get(struct task_struct *task, char *key);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#283: FILE: include/linux/pagg.h:132:
+extern struct pagg *pagg_alloc(struct task_struct *task,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#285: FILE: include/linux/pagg.h:134:
+extern void pagg_free(struct pagg *pagg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#286: FILE: include/linux/pagg.h:135:
+extern int pagg_hook_register(struct pagg_hook *pt_new);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#287: FILE: include/linux/pagg.h:136:
+extern int pagg_hook_unregister(struct pagg_hook *pt_old);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#288: FILE: include/linux/pagg.h:137:
+extern int __pagg_attach(struct task_struct *to_task,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#290: FILE: include/linux/pagg.h:139:
+extern void __pagg_detach(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#291: FILE: include/linux/pagg.h:140:
+extern int __pagg_exec(struct task_struct *task);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#312: FILE: include/linux/pagg.h:161:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tsk' - possible side-effects?
#343: FILE: include/linux/pagg.h:192:
+#define INIT_TASK_PAGG(tsk) \
+	.pagg_list = LIST_HEAD_INIT(tsk.pagg_list),     \
+	.pagg_sem  = __RWSEM_INITIALIZER(tsk.pagg_sem),

ERROR:SPACING: space required before the open parenthesis '('
#354: FILE: include/linux/pagg.h:203:
+#define INIT_PAGG_LIST(l) do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#355: FILE: include/linux/pagg.h:204:
+#define pagg_attach(ct, pt)  do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#356: FILE: include/linux/pagg.h:205:
+#define pagg_detach(t)  do {  } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#357: FILE: include/linux/pagg.h:206:
+#define pagg_exec(t)  do {  } while(0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#443: FILE: kernel/fork.c:954:
+ ^I^Igoto bad_fork_cleanup_namespace;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#443: FILE: kernel/fork.c:954:
+ ^I^Igoto bad_fork_cleanup_namespace;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#443: FILE: kernel/fork.c:954:
+ ^I^Igoto bad_fork_cleanup_namespace;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#462: FILE: kernel/pagg.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#479: FILE: kernel/pagg.c:18:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#480: FILE: kernel/pagg.c:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#499: FILE: kernel/pagg.c:38:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#519: FILE: kernel/pagg.c:58:
+		if (!strcmp(pagg->hook->name,key))
 		                            ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#525: FILE: kernel/pagg.c:64:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*pagg)...) over kmalloc(sizeof(struct pagg)...)
#548: FILE: kernel/pagg.c:87:
+	pagg = kmalloc(sizeof(struct pagg), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:LINE_SPACING: Please don't use multiple blank lines
#559: FILE: kernel/pagg.c:98:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#584: FILE: kernel/pagg.c:123:
+
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#603: FILE: kernel/pagg.c:142:
+		if (!strcmp(pagg_hook->name, key)) {
+			return pagg_hook;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!php"
#626: FILE: kernel/pagg.c:165:
+	if (php == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'gaurantee' may be misspelled - perhaps 'guarantee'?
#629: FILE: kernel/pagg.c:168:
+	/* Because of internal race conditions we can't gaurantee
 	                                                ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "paggp"
#647: FILE: kernel/pagg.c:186:
+			if (paggp != NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#657: FILE: kernel/pagg.c:196:
+			 * again. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pagg_hook_new->name"
#698: FILE: kernel/pagg.c:237:
+	if (pagg_hook_new->name == NULL || strlen(pagg_hook_new->name) > PAGG_NAMELN)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#710: FILE: kernel/pagg.c:249:
+		printk(KERN_WARNING "Attempt to register duplicate"

WARNING:SPLIT_STRING: quoted string split across lines
#711: FILE: kernel/pagg.c:250:
+		printk(KERN_WARNING "Attempt to register duplicate"
+				" PAGG support (name=%s)\n", pagg_hook_new->name);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pagg_hook_new->init"
#721: FILE: kernel/pagg.c:260:
+	if (pagg_hook_new->init != NULL) {

WARNING:TYPO_SPELLING: 'unitialized' may be misspelled - perhaps 'uninitialized'?
#727: FILE: kernel/pagg.c:266:
+		 * until we don't find any unitialized tasks.  The inefficiency
 		                           ^^^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "paggp"
#743: FILE: kernel/pagg.c:282:
+				if (paggp != NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#753: FILE: kernel/pagg.c:292:
+			 * That's why we have the list_empty here */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#773: FILE: kernel/pagg.c:312:
+			printk(KERN_WARNING "Registering PAGG support for"

WARNING:SPLIT_STRING: quoted string split across lines
#774: FILE: kernel/pagg.c:313:
+			printk(KERN_WARNING "Registering PAGG support for"
+				" (name=%s) failed\n", pagg_hook_new->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#782: FILE: kernel/pagg.c:321:
+	printk(KERN_INFO "Registering PAGG support for (name=%s)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#783: FILE: kernel/pagg.c:322:
+	printk(KERN_INFO "Registering PAGG support for (name=%s)\n",
+			pagg_hook_new->name);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#787: FILE: kernel/pagg.c:326:
+
+}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pagg_hook_old->name"
#809: FILE: kernel/pagg.c:348:
+	if (pagg_hook_old->name == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#821: FILE: kernel/pagg.c:360:
+		printk(KERN_INFO "Unregistering PAGG support for"

WARNING:SPLIT_STRING: quoted string split across lines
#822: FILE: kernel/pagg.c:361:
+		printk(KERN_INFO "Unregistering PAGG support for"
+				" (name=%s)\n", pagg_hook_old->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#829: FILE: kernel/pagg.c:368:
+	printk(KERN_WARNING "Attempt to unregister PAGG support (name=%s)"

WARNING:SPLIT_STRING: quoted string split across lines
#830: FILE: kernel/pagg.c:369:
+	printk(KERN_WARNING "Attempt to unregister PAGG support (name=%s)"
+			" failed - not found\n", pagg_hook_old->name);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#835: FILE: kernel/pagg.c:374:
+
+

WARNING:TYPO_SPELLING: 'decription' may be misspelled - perhaps 'description'?
#847: FILE: kernel/pagg.c:386:
+ * See the attach decription in linux/include/linux/pagg.h for details on
                   ^^^^^^^^^^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#865: FILE: kernel/pagg.c:404:
+			ret=-ENOMEM;
 			   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#865: FILE: kernel/pagg.c:404:
+			ret=-ENOMEM;
 			    ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#874: FILE: kernel/pagg.c:413:
+		}
+		else if (ret > 0) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:INDENTED_LABEL: labels should not be indented
#884: FILE: kernel/pagg.c:423:
+  error_return:

CHECK:LINE_SPACING: Please don't use multiple blank lines
#920: FILE: kernel/pagg.c:459:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#947: FILE: kernel/pagg.c:486:
+
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#948: FILE: kernel/pagg.c:487:
+EXPORT_SYMBOL(pagg_get);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#949: FILE: kernel/pagg.c:488:
+EXPORT_SYMBOL(pagg_alloc);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#950: FILE: kernel/pagg.c:489:
+EXPORT_SYMBOL(pagg_free);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#951: FILE: kernel/pagg.c:490:
+EXPORT_SYMBOL(pagg_hook_register);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#952: FILE: kernel/pagg.c:491:
+EXPORT_SYMBOL(pagg_hook_unregister);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000216895.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 47 warnings, 30 checks, 849 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000216895.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
