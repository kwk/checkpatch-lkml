WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
It stills have some internal problems like /shm works in /sysfs/shm but won't in /sysfs/ipc/shm ; but if someone could tell me if 

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#43: FILE: ipc/shm.c:16:
+ * sysfs support (c) 2003 Fabian Frédérick<ffrederick@users.sourceforge.net>
                                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_ind' - possible side-effects?
#65: FILE: ipc/shm.c:65:
+#define SHM_ATTR(_ind, _name)\
+		shm_ids.entries[id].sysfs_attr[_ind].name=(char*)kmalloc(SYSFS_ATTR_MAX_LENGTH,GFP_KERNEL); \
+		sprintf(shm_ids.entries[id].sysfs_attr[_ind].name,__stringify(_name)); \
+		shm_ids.entries[id].sysfs_attr[_ind].mode=0644; \
+		sysfs_create_file(&shm_ids.entries[id].kobj, &shm_ids.entries[id].sysfs_attr[_ind]); 

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#65: FILE: ipc/shm.c:65:
+#define SHM_ATTR(_ind, _name)\
+		shm_ids.entries[id].sysfs_attr[_ind].name=(char*)kmalloc(SYSFS_ATTR_MAX_LENGTH,GFP_KERNEL); \
+		sprintf(shm_ids.entries[id].sysfs_attr[_ind].name,__stringify(_name)); \
+		shm_ids.entries[id].sysfs_attr[_ind].mode=0644; \
+		sysfs_create_file(&shm_ids.entries[id].kobj, &shm_ids.entries[id].sysfs_attr[_ind]); 

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#66: FILE: ipc/shm.c:66:
+		shm_ids.entries[id].sysfs_attr[_ind].name=(char*)kmalloc(SYSFS_ATTR_MAX_LENGTH,GFP_KERNEL); \

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#66: FILE: ipc/shm.c:66:
+		shm_ids.entries[id].sysfs_attr[_ind].name=(char*)kmalloc(SYSFS_ATTR_MAX_LENGTH,GFP_KERNEL); \

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#66: FILE: ipc/shm.c:66:
+		shm_ids.entries[id].sysfs_attr[_ind].name=(char*)kmalloc(SYSFS_ATTR_MAX_LENGTH,GFP_KERNEL); \
 		                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#66: FILE: ipc/shm.c:66:
+		shm_ids.entries[id].sysfs_attr[_ind].name=(char*)kmalloc(SYSFS_ATTR_MAX_LENGTH,GFP_KERNEL); \
 		                                                                              ^

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#66: FILE: ipc/shm.c:66:
+		shm_ids.entries[id].sysfs_attr[_ind].name=(char*)kmalloc(SYSFS_ATTR_MAX_LENGTH,GFP_KERNEL); \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#67: FILE: ipc/shm.c:67:
+		sprintf(shm_ids.entries[id].sysfs_attr[_ind].name,__stringify(_name)); \
 		                                                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#68: FILE: ipc/shm.c:68:
+		shm_ids.entries[id].sysfs_attr[_ind].mode=0644; \
 		                                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#69: FILE: ipc/shm.c:69:
+^I^Isysfs_create_file(&shm_ids.entries[id].kobj, &shm_ids.entries[id].sysfs_attr[_ind]); $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#69: FILE: ipc/shm.c:69:
+		sysfs_create_file(&shm_ids.entries[id].kobj, &shm_ids.entries[id].sysfs_attr[_ind]); 

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#71: FILE: ipc/shm.c:71:
+static ssize_t shm_attr_show(struct kobject *kobj, struct attribute *attr, char *buf){

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open brace '{'
#71: FILE: ipc/shm.c:71:
+static ssize_t shm_attr_show(struct kobject *kobj, struct attribute *attr, char *buf){

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#72: FILE: ipc/shm.c:72:
+	unsigned long key=simple_strtoul(kobj->name,NULL,10);
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#72: FILE: ipc/shm.c:72:
+	unsigned long key=simple_strtoul(kobj->name,NULL,10);
 	                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#72: FILE: ipc/shm.c:72:
+	unsigned long key=simple_strtoul(kobj->name,NULL,10);
 	                                                ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#72: FILE: ipc/shm.c:72:
+	unsigned long key=simple_strtoul(kobj->name,NULL,10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#73: FILE: ipc/shm.c:73:
+	unsigned int id=0;
 	               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#74: FILE: ipc/shm.c:74:
+	int found=0;
 	         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#76: FILE: ipc/shm.c:76:
+	struct shmid_kernel *shp;
+	for(id=0;id<=shm_ids.max_id&&!found;id++){

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#76: FILE: ipc/shm.c:76:
+	for(id=0;id<=shm_ids.max_id&&!found;id++){
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#76: FILE: ipc/shm.c:76:
+	for(id=0;id<=shm_ids.max_id&&!found;id++){
 	        ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#76: FILE: ipc/shm.c:76:
+	for(id=0;id<=shm_ids.max_id&&!found;id++){
 	           ^

ERROR:SPACING: spaces required around that '&&' (ctx:VxO)
#76: FILE: ipc/shm.c:76:
+	for(id=0;id<=shm_ids.max_id&&!found;id++){
 	                           ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#76: FILE: ipc/shm.c:76:
+	for(id=0;id<=shm_ids.max_id&&!found;id++){
 	                                   ^

ERROR:SPACING: space required before the open brace '{'
#76: FILE: ipc/shm.c:76:
+	for(id=0;id<=shm_ids.max_id&&!found;id++){

ERROR:SPACING: space required before the open parenthesis '('
#76: FILE: ipc/shm.c:76:
+	for(id=0;id<=shm_ids.max_id&&!found;id++){

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#78: FILE: ipc/shm.c:78:
+		if (shp->shm_perm.key==key){
 		                     ^

ERROR:SPACING: space required before the open brace '{'
#78: FILE: ipc/shm.c:78:
+		if (shp->shm_perm.key==key){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#78: FILE: ipc/shm.c:78:
+		if (shp->shm_perm.key==key){
+			found=1;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#79: FILE: ipc/shm.c:79:
+			found=1;
 			     ^

ERROR:SPACING: space required before the open brace '{'
#83: FILE: ipc/shm.c:83:
+	if(found){

ERROR:SPACING: space required before the open parenthesis '('
#83: FILE: ipc/shm.c:83:
+	if(found){

ERROR:SPACING: space required after that ',' (ctx:VxV)
#86: FILE: ipc/shm.c:86:
+		if(!strcmp(attr->name,"Id"))
 		                     ^

ERROR:SPACING: space required before the open parenthesis '('
#86: FILE: ipc/shm.c:86:
+		if(!strcmp(attr->name,"Id"))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#87: FILE: ipc/shm.c:87:
+			snprintf(buf, PAGE_SIZE, "%ld", shm_buildid(id,shp->shm_perm.seq));
 			                                              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#88: FILE: ipc/shm.c:88:
+^I ^I  else if(!strcmp(attr->name, "Owner"))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#88: FILE: ipc/shm.c:88:
+^I ^I  else if(!strcmp(attr->name, "Owner"))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (18, 29)
#88: FILE: ipc/shm.c:88:
+	 	  else if(!strcmp(attr->name, "Owner"))
+			     snprintf(buf, PAGE_SIZE, "___");

ERROR:SPACING: space required before the open parenthesis '('
#88: FILE: ipc/shm.c:88:
+	 	  else if(!strcmp(attr->name, "Owner"))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#90: FILE: ipc/shm.c:90:
+			else if(!strcmp(attr->name,"Perms"))
 			                          ^

ERROR:SPACING: space required before the open parenthesis '('
#90: FILE: ipc/shm.c:90:
+			else if(!strcmp(attr->name,"Perms"))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#92: FILE: ipc/shm.c:92:
+^I^I^I  else if(!strcmp(attr->name,"Bytes"))^I$

WARNING:TABSTOP: Statements should start on a tabstop
#92: FILE: ipc/shm.c:92:
+			  else if(!strcmp(attr->name,"Bytes"))	

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (26, 33)
#92: FILE: ipc/shm.c:92:
+			  else if(!strcmp(attr->name,"Bytes"))	
+				 snprintf(buf, PAGE_SIZE, "%d", shp->shm_segsz);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#92: FILE: ipc/shm.c:92:
+			  else if(!strcmp(attr->name,"Bytes"))	
 			                            ^

ERROR:SPACING: space required before the open parenthesis '('
#92: FILE: ipc/shm.c:92:
+			  else if(!strcmp(attr->name,"Bytes"))	

WARNING:TABSTOP: Statements should start on a tabstop
#94: FILE: ipc/shm.c:94:
+			    else if (!strcmp(attr->name, "NAttach"))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (28, 36)
#94: FILE: ipc/shm.c:94:
+			    else if (!strcmp(attr->name, "NAttach"))
+				    snprintf(buf, PAGE_SIZE, "%d", is_file_hugepages(shp->shm_file) ? (file_count(shp->shm_file)-1):shp->shm_nattch);

WARNING:LONG_LINE: line length of 149 exceeds 100 columns
#95: FILE: ipc/shm.c:95:
+				    snprintf(buf, PAGE_SIZE, "%d", is_file_hugepages(shp->shm_file) ? (file_count(shp->shm_file)-1):shp->shm_nattch);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#95: FILE: ipc/shm.c:95:
+				    snprintf(buf, PAGE_SIZE, "%d", is_file_hugepages(shp->shm_file) ? (file_count(shp->shm_file)-1):shp->shm_nattch);
 				                                                                                                ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#95: FILE: ipc/shm.c:95:
+				    snprintf(buf, PAGE_SIZE, "%d", is_file_hugepages(shp->shm_file) ? (file_count(shp->shm_file)-1):shp->shm_nattch);
 				                                                                                                   ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#102: FILE: ipc/shm.c:102:
+static ssize_t shm_attr_store(struct kobject *kobj, struct attribute *attr, char *buf){

ERROR:SPACING: space required before the open brace '{'
#102: FILE: ipc/shm.c:102:
+static ssize_t shm_attr_store(struct kobject *kobj, struct attribute *attr, char *buf){

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#106: FILE: ipc/shm.c:106:
+static struct sysfs_ops shm_sysfs_ops ={
                                       ^

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#106: FILE: ipc/shm.c:106:
+static struct sysfs_ops shm_sysfs_ops ={

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#111: FILE: ipc/shm.c:111:
+static struct kobj_type ktype_shm ={
                                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#121: FILE: ipc/shm.c:121:
+        strcpy(shm_ids.kobj.name, "shm");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: ipc/shm.c:121:
+        strcpy(shm_ids.kobj.name, "shm");$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#122: FILE: ipc/shm.c:122:
+        //shm_ids.kobj.parent = &ipc_kobj;^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#122: FILE: ipc/shm.c:122:
+        //shm_ids.kobj.parent = &ipc_kobj;^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#124: FILE: ipc/shm.c:124:
+        kobject_register(&shm_ids.kobj);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: ipc/shm.c:124:
+        kobject_register(&shm_ids.kobj);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#134: FILE: ipc/shm.c:142:
+	int id;
+	id=ipc_addid(&shm_ids, &shp->shm_perm, shm_ctlmni+1);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#134: FILE: ipc/shm.c:142:
+	id=ipc_addid(&shm_ids, &shp->shm_perm, shm_ctlmni+1);
 	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#134: FILE: ipc/shm.c:142:
+	id=ipc_addid(&shm_ids, &shp->shm_perm, shm_ctlmni+1);
 	                                                 ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxO)
#135: FILE: ipc/shm.c:143:
+	if(id!=-1){
 	     ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#135: FILE: ipc/shm.c:143:
+	if(id!=-1){
 	       ^

ERROR:SPACING: space required before the open brace '{'
#135: FILE: ipc/shm.c:143:
+	if(id!=-1){

ERROR:SPACING: space required before the open parenthesis '('
#135: FILE: ipc/shm.c:143:
+	if(id!=-1){

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#137: FILE: ipc/shm.c:145:
+		shm_ids.entries[id].kobj.parent=&shm_ids.kobj;
 		                               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#137: FILE: ipc/shm.c:145:
+		shm_ids.entries[id].kobj.parent=&shm_ids.kobj;
 		                                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#138: FILE: ipc/shm.c:146:
+		shm_ids.entries[id].kobj.ktype=&ktype_shm;
 		                              ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#138: FILE: ipc/shm.c:146:
+		shm_ids.entries[id].kobj.ktype=&ktype_shm;
 		                               ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around shm_ids.entries[id].kobj
#139: FILE: ipc/shm.c:147:
+		kobject_register(&(shm_ids.entries[id].kobj));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:CODE_INDENT: code indent should use tabs where possible
#141: FILE: ipc/shm.c:149:
+                /* Just setting attribute names */$

CHECK:CAMELCASE: Avoid CamelCase: <Key>
#142: FILE: ipc/shm.c:150:
+		SHM_ATTR(SYSFS_ATTR_KEY, Key);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Id>
#143: FILE: ipc/shm.c:151:
+		SHM_ATTR(SYSFS_ATTR_ID, Id);

CHECK:CAMELCASE: Avoid CamelCase: <Owner>
#144: FILE: ipc/shm.c:152:
+		SHM_ATTR(SYSFS_ATTR_OWNER, Owner);

CHECK:CAMELCASE: Avoid CamelCase: <Perms>
#145: FILE: ipc/shm.c:153:
+		SHM_ATTR(SYSFS_ATTR_PERMS, Perms);

CHECK:CAMELCASE: Avoid CamelCase: <Bytes>
#146: FILE: ipc/shm.c:154:
+		SHM_ATTR(SYSFS_ATTR_BYTES, Bytes);

CHECK:CAMELCASE: Avoid CamelCase: <Nattach>
#147: FILE: ipc/shm.c:155:
+		SHM_ATTR(SYSFS_ATTR_NATTACH, Nattach);

CHECK:CAMELCASE: Avoid CamelCase: <Status>
#148: FILE: ipc/shm.c:156:
+		SHM_ATTR(SYSFS_ATTR_STATUS, Status);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#215: FILE: ipc/util.c:47:
+	ipc_kobj.parent=ipc_kobj.dentry=ipc_kobj.ktype=ipc_kobj.kset=NULL;
 	               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#215: FILE: ipc/util.c:47:
+	ipc_kobj.parent=ipc_kobj.dentry=ipc_kobj.ktype=ipc_kobj.kset=NULL;
 	                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#215: FILE: ipc/util.c:47:
+	ipc_kobj.parent=ipc_kobj.dentry=ipc_kobj.ktype=ipc_kobj.kset=NULL;
 	                                              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#215: FILE: ipc/util.c:47:
+	ipc_kobj.parent=ipc_kobj.dentry=ipc_kobj.ktype=ipc_kobj.kset=NULL;
 	                                                            ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#215: FILE: ipc/util.c:47:
+	ipc_kobj.parent=ipc_kobj.dentry=ipc_kobj.ktype=ipc_kobj.kset=NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:CODE_INDENT: code indent should use tabs where possible
#216: FILE: ipc/util.c:48:
+        strcpy(ipc_kobj.name, "ipc");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: ipc/util.c:48:
+        strcpy(ipc_kobj.name, "ipc");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#217: FILE: ipc/util.c:49:
+        kobject_register(&ipc_kobj);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: ipc/util.c:49:
+        kobject_register(&ipc_kobj);$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ids->entries[id].kobj
#225: FILE: ipc/util.c:249:
+	kobject_unregister(&(ids->entries[id].kobj));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#242: FILE: ipc/util.c:445:
+ * barriers here to guarantee the writes in grow_ary() are seen in order $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#260: FILE: ipc/util.h:6:
+ * $

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#261: FILE: ipc/util.h:7:
+ * 07/2003 sysfs report by Fabian Frédérick <ffrederick@users.sourceforge.net>
                                     ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#273: FILE: ipc/util.h:28:
+#define SYSFS_ATTR_ID ^I    1$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#274: FILE: ipc/util.h:29:
+#define SYSFS_ATTR_OWNER    2 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#275: FILE: ipc/util.h:30:
+#define SYSFS_ATTR_PERMS    3 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#276: FILE: ipc/util.h:31:
+#define SYSFS_ATTR_BYTES    4 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#277: FILE: ipc/util.h:32:
+#define SYSFS_ATTR_NSEMS    5 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#278: FILE: ipc/util.h:33:
+#define SYSFS_ATTR_NATTACH  6 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#279: FILE: ipc/util.h:34:
+#define SYSFS_ATTR_MESSAGES 7 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#280: FILE: ipc/util.h:35:
+#define SYSFS_ATTR_STATUS   8 $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000354611.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 68 errors, 22 warnings, 16 checks, 232 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000354611.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
