WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
> > Also don't you agree with that it's possible (at least in theory) to hit that trylock/BUG in tasklet_action ?

WARNING:TYPO_SPELLING: 'prefectly' may be misspelled - perhaps 'perfectly'?
#49: 
Locked tasklet in the sched queue is prefectly fine, it just means that tasklet is still running on other cpu and we 
                                     ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#123: FILE: kernel/softirq.c:160:
+               if (tasklet_trylock(t)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: kernel/softirq.c:160:
+               if (tasklet_trylock(t)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#123: FILE: kernel/softirq.c:160:
+               if (tasklet_trylock(t)) {
+                       if (!atomic_read(&t->count)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#124: FILE: kernel/softirq.c:161:
+                       if (!atomic_read(&t->count)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: kernel/softirq.c:161:
+                       if (!atomic_read(&t->count)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#124: FILE: kernel/softirq.c:161:
+                       if (!atomic_read(&t->count)) {
+                               if (!test_and_clear_bit(TASKLET_STATE_SCHED, &t->state))

ERROR:CODE_INDENT: code indent should use tabs where possible
#125: FILE: kernel/softirq.c:162:
+                               if (!test_and_clear_bit(TASKLET_STATE_SCHED, &t->state))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: kernel/softirq.c:162:
+                               if (!test_and_clear_bit(TASKLET_STATE_SCHED, &t->state))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (31, 39)
#125: FILE: kernel/softirq.c:162:
+                               if (!test_and_clear_bit(TASKLET_STATE_SCHED, &t->state))
+                                       BUG();

ERROR:CODE_INDENT: code indent should use tabs where possible
#126: FILE: kernel/softirq.c:163:
+                                       BUG();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: kernel/softirq.c:163:
+                                       BUG();$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#126: FILE: kernel/softirq.c:163:
+                                       BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:CODE_INDENT: code indent should use tabs where possible
#127: FILE: kernel/softirq.c:164:
+                               t->func(t->data);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: kernel/softirq.c:164:
+                               t->func(t->data);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#128: FILE: kernel/softirq.c:165:
+                               tasklet_unlock(t);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: kernel/softirq.c:165:
+                               tasklet_unlock(t);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#129: FILE: kernel/softirq.c:166:
+                               continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: kernel/softirq.c:166:
+                               continue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#130: FILE: kernel/softirq.c:167:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: kernel/softirq.c:167:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#159: FILE: kernel/softirq.c:194:
+               if (tasklet_trylock(t)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: kernel/softirq.c:194:
+               if (tasklet_trylock(t)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#159: FILE: kernel/softirq.c:194:
+               if (tasklet_trylock(t)) {
+                       if (!atomic_read(&t->count)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#160: FILE: kernel/softirq.c:195:
+                       if (!atomic_read(&t->count)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: kernel/softirq.c:195:
+                       if (!atomic_read(&t->count)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#160: FILE: kernel/softirq.c:195:
+                       if (!atomic_read(&t->count)) {
+                               if (!test_and_clear_bit(TASKLET_STATE_SCHED, &t->state))

ERROR:CODE_INDENT: code indent should use tabs where possible
#161: FILE: kernel/softirq.c:196:
+                               if (!test_and_clear_bit(TASKLET_STATE_SCHED, &t->state))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: kernel/softirq.c:196:
+                               if (!test_and_clear_bit(TASKLET_STATE_SCHED, &t->state))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (31, 39)
#161: FILE: kernel/softirq.c:196:
+                               if (!test_and_clear_bit(TASKLET_STATE_SCHED, &t->state))
+                                       BUG();

ERROR:CODE_INDENT: code indent should use tabs where possible
#162: FILE: kernel/softirq.c:197:
+                                       BUG();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: kernel/softirq.c:197:
+                                       BUG();$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#162: FILE: kernel/softirq.c:197:
+                                       BUG();

ERROR:CODE_INDENT: code indent should use tabs where possible
#163: FILE: kernel/softirq.c:198:
+                               t->func(t->data);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: kernel/softirq.c:198:
+                               t->func(t->data);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#164: FILE: kernel/softirq.c:199:
+                               tasklet_unlock(t);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: kernel/softirq.c:199:
+                               tasklet_unlock(t);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: kernel/softirq.c:200:
+                               continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: kernel/softirq.c:200:
+                               continue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#166: FILE: kernel/softirq.c:201:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: kernel/softirq.c:201:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: include/linux/interrupt.h:121:
+       struct tasklet_struct *list;$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(SMP_CACHE_BYTES) over __attribute__((__aligned__(SMP_CACHE_BYTES)))
#194: FILE: include/linux/interrupt.h:122:
+} __attribute__ ((__aligned__(SMP_CACHE_BYTES)));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: include/linux/interrupt.h:130:
+       return !test_and_set_bit(TASKLET_STATE_RUN, &(t)->state);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#213: FILE: include/linux/interrupt.h:135:
+       smp_mb__before_clear_bit(); $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: include/linux/interrupt.h:135:
+       smp_mb__before_clear_bit(); $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: include/linux/interrupt.h:136:
+       clear_bit(TASKLET_STATE_RUN, &(t)->state);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: include/linux/interrupt.h:141:
+       while (test_bit(TASKLET_STATE_RUN, &(t)->state)) { barrier(); }$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#221: FILE: include/linux/interrupt.h:141:
+       while (test_bit(TASKLET_STATE_RUN, &(t)->state)) { barrier(); }

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#221: FILE: include/linux/interrupt.h:141:
+       while (test_bit(TASKLET_STATE_RUN, &(t)->state)) { barrier(); }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: include/linux/interrupt.h:151:
+       unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: include/linux/interrupt.h:152:
+       int cpu;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#234: FILE: include/linux/interrupt.h:154:
+       cpu = smp_processor_id();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: include/linux/interrupt.h:156:
+       if (!test_and_set_bit(TASKLET_STATE_SCHED, &t->state)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#236: FILE: include/linux/interrupt.h:156:
+       if (!test_and_set_bit(TASKLET_STATE_SCHED, &t->state)) {
+               local_irq_save(flags);

ERROR:CODE_INDENT: code indent should use tabs where possible
#237: FILE: include/linux/interrupt.h:157:
+               local_irq_save(flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: include/linux/interrupt.h:157:
+               local_irq_save(flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#238: FILE: include/linux/interrupt.h:158:
+               t->next = tasklet_vec[cpu].list;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: include/linux/interrupt.h:158:
+               t->next = tasklet_vec[cpu].list;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#239: FILE: include/linux/interrupt.h:159:
+               tasklet_vec[cpu].list = t;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: include/linux/interrupt.h:159:
+               tasklet_vec[cpu].list = t;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#240: FILE: include/linux/interrupt.h:160:
+               cpu_raise_softirq(cpu, TASKLET_SOFTIRQ);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: include/linux/interrupt.h:160:
+               cpu_raise_softirq(cpu, TASKLET_SOFTIRQ);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#241: FILE: include/linux/interrupt.h:161:
+               local_irq_restore(flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: include/linux/interrupt.h:161:
+               local_irq_restore(flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: include/linux/interrupt.h:162:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: include/linux/interrupt.h:167:
+       unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: include/linux/interrupt.h:168:
+       int cpu;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#253: FILE: include/linux/interrupt.h:170:
+       cpu = smp_processor_id();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#257: FILE: include/linux/interrupt.h:172:
+       if (!test_and_set_bit(TASKLET_STATE_SCHED, &t->state)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#257: FILE: include/linux/interrupt.h:172:
+       if (!test_and_set_bit(TASKLET_STATE_SCHED, &t->state)) {
+               local_irq_save(flags);

ERROR:CODE_INDENT: code indent should use tabs where possible
#258: FILE: include/linux/interrupt.h:173:
+               local_irq_save(flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: include/linux/interrupt.h:173:
+               local_irq_save(flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#259: FILE: include/linux/interrupt.h:174:
+               t->next = tasklet_hi_vec[cpu].list;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: include/linux/interrupt.h:174:
+               t->next = tasklet_hi_vec[cpu].list;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#260: FILE: include/linux/interrupt.h:175:
+               tasklet_hi_vec[cpu].list = t;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#260: FILE: include/linux/interrupt.h:175:
+               tasklet_hi_vec[cpu].list = t;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#261: FILE: include/linux/interrupt.h:176:
+               cpu_raise_softirq(cpu, HI_SOFTIRQ);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: include/linux/interrupt.h:176:
+               cpu_raise_softirq(cpu, HI_SOFTIRQ);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#262: FILE: include/linux/interrupt.h:177:
+               local_irq_restore(flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#262: FILE: include/linux/interrupt.h:177:
+               local_irq_restore(flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: include/linux/interrupt.h:178:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: include/linux/interrupt.h:184:
+       smp_mb__after_atomic_inc();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#276: FILE: include/linux/interrupt.h:191:
+       smp_mb();$

WARNING:MEMORY_BARRIER: memory barrier without comment
#276: FILE: include/linux/interrupt.h:191:
+       smp_mb();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: include/linux/interrupt.h:196:
+       smp_mb__before_atomic_dec();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#284: FILE: include/linux/interrupt.h:197:
+       atomic_dec(&t->count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: include/linux/interrupt.h:202:
+       smp_mb__before_atomic_dec();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: include/linux/interrupt.h:203:
+       atomic_dec(&t->count);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000522444.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 28 errors, 62 warnings, 0 checks, 220 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000522444.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
