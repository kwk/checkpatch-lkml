WARNING:TYPO_SPELLING: 'contians' may be misspelled - perhaps 'contains'?
#194: FILE: init/Kconfig:192:
+	  and the processes it contians.  The jid can also be used to send
 	                       ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#212: FILE: kernel/job.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#229: FILE: kernel/job.c:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#230: FILE: kernel/job.c:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#245: FILE: kernel/job.c:34:
+ * ^I^IFor further information about jobs, consult the file$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#246: FILE: kernel/job.c:35:
+ * ^I^IDocumentation/job.txt. Jobs are implemented using Process Notification$

WARNING:TYPO_SPELLING: 'sempahores' may be misspelled - perhaps 'semaphores'?
#260: FILE: kernel/job.c:49:
+ * Most of the locking used is read/write sempahores.  In  rare cases, a
                                           ^^^^^^^^^^

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#321: FILE: kernel/job.c:110:
+#include <asm/uaccess.h>	/* for get_user & put_user */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#352: FILE: kernel/job.c:141:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#353: FILE: kernel/job.c:142:
+#ifdef ^I__BIG_ENDIAN$

ERROR:SPACING: exactly one space required after that #ifdef
#353: FILE: kernel/job.c:142:
+#ifdef 	__BIG_ENDIAN

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#354: FILE: kernel/job.c:143:
+#define^I^Iiptr_hid(ll) ^I((u32 *)&(ll))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#355: FILE: kernel/job.c:144:
+#define^I^Iiptr_sid(ll) ^I(((u32 *)(&(ll) + 1)) - 1)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#357: FILE: kernel/job.c:146:
+#define^I^Iiptr_hid(ll) ^I(((u32 *)(&(ll) + 1)) - 1)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#358: FILE: kernel/job.c:147:
+#define^I^Iiptr_sid(ll) ^I((u32 *)&(ll))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#361: FILE: kernel/job.c:150:
+#define^I^Ijid_hash(ll) ^I(*(iptr_sid(ll)) % HASH_SIZE)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#363: FILE: kernel/job.c:152:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#369: FILE: kernel/job.c:158:
+^Istruct list_head^Ientry; ^I/* list stuff */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#385: FILE: kernel/job.c:174:
+^Iint^I    ^I    refcnt;^I/* Number of tasks attached to job */$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#399: FILE: kernel/job.c:188:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#402: FILE: kernel/job.c:191:
+static int^I    ^I job_table_refcnt = 0;$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#402: FILE: kernel/job.c:191:
+static int	    	 job_table_refcnt = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#403: FILE: kernel/job.c:192:
+static ^I^I^I DECLARE_RWSEM(job_table_sem);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#405: FILE: kernel/job.c:194:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#407: FILE: kernel/job.c:196:
+static struct job_acctmod ^I*acct_list[JOB_ACCT_COUNT];$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#408: FILE: kernel/job.c:197:
+static ^I^I^I^IDECLARE_RWSEM(acct_list_sem);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#410: FILE: kernel/job.c:199:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#414: FILE: kernel/job.c:203:
+static char ^I   *hid = NULL;$

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#414: FILE: kernel/job.c:203:
+static char 	   *hid = NULL;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#437: FILE: kernel/job.c:226:
+u64 job_getjid(struct task_struct *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#437: FILE: kernel/job.c:226:
+u64 job_getjid(struct task_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#439: FILE: kernel/job.c:228:
+int job_ioctl(struct inode *, struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#439: FILE: kernel/job.c:228:
+int job_ioctl(struct inode *, struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#439: FILE: kernel/job.c:228:
+int job_ioctl(struct inode *, struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#439: FILE: kernel/job.c:228:
+int job_ioctl(struct inode *, struct file *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#439: FILE: kernel/job.c:228:
+int job_ioctl(struct inode *, struct file *, unsigned int, unsigned long);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#455: FILE: kernel/job.c:244:
+static struct file_operations job_file_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#460: FILE: kernel/job.c:249:
+
+

ERROR:SPACING: space prohibited after that open square bracket '['
#478: FILE: kernel/job.c:267:
+	list_for_each(entry,  &job_table[ jid_hash(jid) ]) {

ERROR:SPACING: space prohibited before that close square bracket ']'
#478: FILE: kernel/job.c:267:
+	list_for_each(entry,  &job_table[ jid_hash(jid) ]) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#488: FILE: kernel/job.c:277:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#518: FILE: kernel/job.c:307:
+job_attach(struct task_struct *task, struct pnotify_subscriber *new_subscriber,
+		void  *old_data)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#534: FILE: kernel/job.c:323:
+		printk(KERN_WARNING "Attach task(pid=%d) to job"

WARNING:SPLIT_STRING: quoted string split across lines
#535: FILE: kernel/job.c:324:
+		printk(KERN_WARNING "Attach task(pid=%d) to job"
+				" failed - job is ZOMBIE\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#542: FILE: kernel/job.c:331:
+
+

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#545: FILE: kernel/job.c:334:
+	attached = (struct job_attach *)kmalloc(sizeof(struct job_attach),

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*attached)...) over kmalloc(sizeof(struct job_attach)...)
#545: FILE: kernel/job.c:334:
+	attached = (struct job_attach *)kmalloc(sizeof(struct job_attach),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#549: FILE: kernel/job.c:338:
+		printk(KERN_ERR "Attach task(pid=%d) to job"

WARNING:SPLIT_STRING: quoted string split across lines
#550: FILE: kernel/job.c:339:
+		printk(KERN_ERR "Attach task(pid=%d) to job"
+				" failed on memory error in kernel\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#557: FILE: kernel/job.c:346:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#574: FILE: kernel/job.c:363:
+
+

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#599: FILE: kernel/job.c:388:
+	 * Obtain the lock on the the job_table_sem and the job->sem for

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#610: FILE: kernel/job.c:399:
+				printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'job_detach', this function's name, in a string
#611: FILE: kernel/job.c:400:
+					"job_detach: Tried to get non-living acct module\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#672: FILE: kernel/job.c:461:
+					printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'job_detach', this function's name, in a string
#673: FILE: kernel/job.c:462:
+						"job_detach: Tried to get non-living acct module\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#689: FILE: kernel/job.c:478:
+					printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'job_detach', this function's name, in a string
#690: FILE: kernel/job.c:479:
+						"job_detach: CSA -"

WARNING:SPLIT_STRING: quoted string split across lines
#691: FILE: kernel/job.c:480:
+						"job_detach: CSA -"
+						" jobend failed.\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#699: FILE: kernel/job.c:488:
+^I         * detached and finished waiting, so now we can free the$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:RETURN_VOID: void function return statements are not generally useful
#715: FILE: kernel/job.c:504:
+	return;
+}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#727: FILE: kernel/job.c:516:
+^Istruct job_entry^I^I*job ^I      = NULL;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#732: FILE: kernel/job.c:521:
+^Istruct job_acctmod ^I*acct^I= NULL;$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#733: FILE: kernel/job.c:522:
+	static u32	jid_count = 0;

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#764: FILE: kernel/job.c:553:
+	attached = (struct job_attach *)kmalloc(sizeof(struct job_attach), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*attached)...) over kmalloc(sizeof(struct job_attach)...)
#764: FILE: kernel/job.c:553:
+	attached = (struct job_attach *)kmalloc(sizeof(struct job_attach), GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#771: FILE: kernel/job.c:560:
+	job = (struct job_entry *)kmalloc(sizeof(struct job_entry), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*job)...) over kmalloc(sizeof(struct job_entry)...)
#771: FILE: kernel/job.c:560:
+	job = (struct job_entry *)kmalloc(sizeof(struct job_entry), GFP_KERNEL);

WARNING:TYPO_SPELLING: 'refernce' may be misspelled - perhaps 'reference'?
#805: FILE: kernel/job.c:594:
+			/* we haven't allocated a new pnotify subscriber refernce yet so
 			                                                 ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#806: FILE: kernel/job.c:595:
+			 * error_return won't unlock this.  We'll unlock here */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#818: FILE: kernel/job.c:607:
+		while (((job->jid == 0) || (job_getjob(job->jid))) &&
+			jid_count != initial_jid_count) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#819: FILE: kernel/job.c:608:
+			jid_count != initial_jid_count) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#829: FILE: kernel/job.c:618:
+			 * this.  We'll unlock here */

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#836: FILE: kernel/job.c:625:
+
+	}

ERROR:SPACING: space prohibited after that open square bracket '['
#870: FILE: kernel/job.c:659:
+	list_add_tail(&job->entry, &job_table[ jid_hash(job->jid) ]);;

ERROR:SPACING: space prohibited before that close square bracket ']'
#870: FILE: kernel/job.c:659:
+	list_add_tail(&job->entry, &job_table[ jid_hash(job->jid) ]);;

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#870: FILE: kernel/job.c:659:
+	list_add_tail(&job->entry, &job_table[ jid_hash(job->jid) ]);;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#895: FILE: kernel/job.c:684:
+				printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'job_dispatch_create', this function's name, in a string
#896: FILE: kernel/job.c:685:
+					"job_dispatch_create: Tried to get non-living acct module\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#912: FILE: kernel/job.c:701:
+				printk(KERN_WARNING "job_dispatch_create: CSA -"

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'job_dispatch_create', this function's name, in a string
#912: FILE: kernel/job.c:701:
+				printk(KERN_WARNING "job_dispatch_create: CSA -"

WARNING:SPLIT_STRING: quoted string split across lines
#913: FILE: kernel/job.c:702:
+				printk(KERN_WARNING "job_dispatch_create: CSA -"
+						" jobstart failed.\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#920: FILE: kernel/job.c:709:
+
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#922: FILE: kernel/job.c:711:
+	if (copy_to_user(create_args, &create, sizeof(create))) {
+		return -EFAULT;
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#938: FILE: kernel/job.c:727:
+
+

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#958: FILE: kernel/job.c:747:
+	if (getjid.pid == current->pid) {
[...]
+	} else {
[...]

WARNING:BRACES: braces {} are not necessary for single statement blocks
#968: FILE: kernel/job.c:757:
+		if (getjid.r_jid == 0) {
+			errcode = -ENODATA;
+		}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#977: FILE: kernel/job.c:766:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#983: FILE: kernel/job.c:772:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#993: FILE: kernel/job.c:782:
+^Istruct job_waitjid ^Iwaitjid;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1000: FILE: kernel/job.c:789:
+	waitjid.r_jid = waitjid.stat = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1010: FILE: kernel/job.c:799:
+	if ((job = job_getjob(waitjid.jid)) == NULL ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1010: FILE: kernel/job.c:799:
+	if ((job = job_getjob(waitjid.jid)) == NULL ) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1028: FILE: kernel/job.c:817:
+	 * first notifying this current task */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1030: FILE: kernel/job.c:819:
+	retcode = wait_event_interruptible(job->wait,
+			job->refcnt == 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1068: FILE: kernel/job.c:857:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1110: FILE: kernel/job.c:899:
+         * Check capability to signal job.  The signaling user must be$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1134: FILE: kernel/job.c:923:
+		err = send_group_sig_info(killjid.sig, &info,
+				attached->task);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1145: FILE: kernel/job.c:934:
+			if (attached->entry.prev != &job->attached) {
+				retcode = err;
+			}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1150: FILE: kernel/job.c:939:
+
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1165: FILE: kernel/job.c:954:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1175: FILE: kernel/job.c:964:
+^Istruct job_jidcnt ^Ijidcnt;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1188: FILE: kernel/job.c:977:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1201: FILE: kernel/job.c:990:
+^Iint ^I^I count;$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1209: FILE: kernel/job.c:998:
+	jid = (u64 *)kmalloc(sizeof(u64)*jidlst.r_val, GFP_KERNEL);
 	                                ^

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1209: FILE: kernel/job.c:998:
+	jid = (u64 *)kmalloc(sizeof(u64)*jidlst.r_val, GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1209: FILE: kernel/job.c:998:
+	jid = (u64 *)kmalloc(sizeof(u64)*jidlst.r_val, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1223: FILE: kernel/job.c:1012:
+			if (count == jidlst.r_val) {
+				break;
+			}

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1233: FILE: kernel/job.c:1022:
+		if (copy_to_user(jidlst.jid+i, &jid[i], sizeof(u64)))
 		                           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1243: FILE: kernel/job.c:1032:
+
+

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#1283: FILE: kernel/job.c:1072:
+ * This function returns the the list of processes that are part of the job.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1308: FILE: kernel/job.c:1097:
+	pid = (pid_t *)kmalloc(sizeof(pid_t)*max, GFP_KERNEL);
 	                                    ^

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1308: FILE: kernel/job.c:1097:
+	pid = (pid_t *)kmalloc(sizeof(pid_t)*max, GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1308: FILE: kernel/job.c:1097:
+	pid = (pid_t *)kmalloc(sizeof(pid_t)*max, GFP_KERNEL);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1323: FILE: kernel/job.c:1112:
+		return -ENODATA;
+	} else {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1324: FILE: kernel/job.c:1113:
+	} else {
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1330: FILE: kernel/job.c:1119:
+			if (i == max) {
+				break;
+			}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1334: FILE: kernel/job.c:1123:
+			attached = list_entry(attached_entry, struct job_attach,
+					entry);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1343: FILE: kernel/job.c:1132:
+		if (copy_to_user(pidlst.pid+i, &pid[i], sizeof(pid_t)))
 		                           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1351: FILE: kernel/job.c:1140:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1387: FILE: kernel/job.c:1176:
+
+

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1427: FILE: kernel/job.c:1216:
+		if (!attached->task) {
[...]
+		} else {
[...]

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1440: FILE: kernel/job.c:1229:
+
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1471: FILE: kernel/job.c:1260:
+	sethid.r_hid = jid_hid = sethid.hid;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1481: FILE: kernel/job.c:1270:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1521: FILE: kernel/job.c:1310:
+	if (job) {
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1537: FILE: kernel/job.c:1326:
+
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1560: FILE: kernel/job.c:1349:
+
+		}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1586: FILE: kernel/job.c:1375:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1679: FILE: kernel/job.c:1468:
+		/* We need to unlock the tasklist here too or the lock is held f
+orever */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1679: FILE: kernel/job.c:1468:
+orever */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1700: FILE: kernel/job.c:1489:
+	if (subscriber) {
[...]
+	} else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1708: FILE: kernel/job.c:1497:
+		}
+		else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1708: FILE: kernel/job.c:1497:
+		else {

ERROR:SPACING: space required before the open parenthesis '('
#1710: FILE: kernel/job.c:1499:
+			if(attached) {

CHECK:BRACES: Unbalanced braces around else statement
#1718: FILE: kernel/job.c:1507:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1729: FILE: kernel/job.c:1518:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1741: FILE: kernel/job.c:1530:
+	if (am->type < 0 || am->type > (JOB_ACCT_COUNT-1))
 	                                              ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "acct_list[am->type]"
#1745: FILE: kernel/job.c:1534:
+	if (acct_list[am->type] != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1755: FILE: kernel/job.c:1544:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1767: FILE: kernel/job.c:1556:
+	if (am->type < 0 || am->type > (JOB_ACCT_COUNT-1))
 	                                              ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1808: FILE: kernel/job.c:1597:
+
+

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1842: FILE: kernel/job.c:1631:
+	switch (type) {
+		case JOB_ACCT_CSA:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#1858: FILE: kernel/job.c:1647:
+			return -EINVAL;
+			break;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1898: FILE: kernel/job.c:1687:
+	switch (type) {
+		case JOB_ACCT_CSA:
[...]
+		default:

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1903: FILE: kernel/job.c:1692:
+			if (subfield & JOB_CSA_ACCTFILE) {
+				job->csa.acctfile = csa->job_acctfile;
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1906: FILE: kernel/job.c:1695:
+			if (subfield & JOB_CSA_COREHIMEM) {
+				job->csa.corehimem = csa->job_corehimem;
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1909: FILE: kernel/job.c:1698:
+			if (subfield & JOB_CSA_VIRTHIMEM) {
+				job->csa.virthimem = csa->job_virthimem;
+			}

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#1917: FILE: kernel/job.c:1706:
+			return -EINVAL;
+			break;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1923: FILE: kernel/job.c:1712:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1935: FILE: kernel/job.c:1724:
+	int rc=0;
 	      ^

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1937: FILE: kernel/job.c:1726:
+	switch (request) {
+		case JOB_CREATE:
[...]
+		case JOB_ATTACH:
+		case JOB_DETACH:
[...]
+		case JOB_GETJID:
[...]
+		case JOB_WAITJID:
[...]
+		case JOB_KILLJID:
[...]
+		case JOB_GETJIDCNT:
[...]
+		case JOB_GETJIDLST:
[...]
+		case JOB_GETPIDCNT:
[...]
+		case JOB_GETPIDLST:
[...]
+		case JOB_GETUSER:
[...]
+		case JOB_GETPRIMEPID:
[...]
+		case JOB_SETHID:
[...]
+		case JOB_DETACHJID:
[...]
+		case JOB_DETACHPID:
[...]
+		case JOB_ATTACHPID:
[...]
+		case JOB_SETJLIMIT:
+		case JOB_GETJLIMIT:
+		case JOB_GETJUSAGE:
+		case JOB_FREE:
+		default:

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1997: FILE: kernel/job.c:1786:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2011: FILE: kernel/job.c:1800:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2024: FILE: kernel/job.c:1813:
+	int i,rc;
 	     ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2026: FILE: kernel/job.c:1815:
+
+

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2028: FILE: kernel/job.c:1817:
+	for (i = 0; i < HASH_SIZE; i++) {
+		INIT_LIST_HEAD(&job_table[i]);
+	}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2033: FILE: kernel/job.c:1822:
+	if (hid) {
[...]
+	} else {
[...]

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#2034: FILE: kernel/job.c:1823:
+		jid_hid = (int)simple_strtoul(hid, &hid, 16);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2040: FILE: kernel/job.c:1829:
+	if (rc < 0) {
+		return -1;
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2046: FILE: kernel/job.c:1835:
+	job_proc_entry = create_proc_entry(JOB_PROC_ENTRY,
+		S_IFREG | S_IRUGO, &proc_root);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2046: FILE: kernel/job.c:1835:
+		S_IFREG | S_IRUGO, &proc_root);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2056: FILE: kernel/job.c:1845:
+
+

WARNING:RETURN_VOID: void function return statements are not generally useful
#2075: FILE: kernel/job.c:1864:
+	return;
+}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2078: FILE: kernel/job.c:1867:
+EXPORT_SYMBOL(job_register_acct);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2079: FILE: kernel/job.c:1868:
+EXPORT_SYMBOL(job_unregister_acct);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2080: FILE: kernel/job.c:1869:
+EXPORT_SYMBOL(job_getjid);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2081: FILE: kernel/job.c:1870:
+EXPORT_SYMBOL(job_getacct);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2082: FILE: kernel/job.c:1871:
+EXPORT_SYMBOL(job_setacct);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2100: FILE: include/linux/jobctl.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2115: FILE: include/linux/jobctl.h:16:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2116: FILE: include/linux/jobctl.h:17:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#2129: FILE: include/linux/jobctl.h:30:
+ * Description:   This file, include/linux/jobctl.h, contains the data

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2144: FILE: include/linux/jobctl.h:45:
+#define PNOTIFY_NAMESTR PNOTIFY_NAMELN+1  /* PNOTIFY mod name string including
                                       ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2144: FILE: include/linux/jobctl.h:45:
+#define PNOTIFY_NAMESTR PNOTIFY_NAMELN+1  /* PNOTIFY mod name string including

WARNING:LONG_LINE: line length of 147 exceeds 100 columns
#2145: FILE: include/linux/jobctl.h:46:
+														 * room for end-of-string = '\0' */

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2145: FILE: include/linux/jobctl.h:46:
+														 * room for end-of-string = '\0' */

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2145: FILE: include/linux/jobctl.h:46:
+#define PNOTIFY_NAMESTR PNOTIFY_NAMELN+1  /* PNOTIFY mod name string including
+														 * room for end-of-string = '\0' */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2152: FILE: include/linux/jobctl.h:53:
+#define PNOTIFY_JOB ^I"job"^I/* PNOTIFY module identifier string */$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2154: FILE: include/linux/jobctl.h:55:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2164: FILE: include/linux/jobctl.h:65:
+
+

WARNING:TYPO_SPELLING: 'specificed' may be misspelled - perhaps 'specified'?
#2176: FILE: include/linux/jobctl.h:77:
+#define JOB_GETJID	_IOWR(JOB_IOCTL_NUM, 4, void *)	/* Get Job ID for specificed pid */
                   	                               	                  ^^^^^^^^^^

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#2193: FILE: include/linux/jobctl.h:94:
+#define JOB_OPT_MAX	_IOWR(JOB_IOCTL_NUM, 23 , void *)	/* Should always be highest number */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#2193: FILE: include/linux/jobctl.h:94:
+#define JOB_OPT_MAX	_IOWR(JOB_IOCTL_NUM, 23 , void *)	/* Should always be highest number */
                    	                        ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2195: FILE: include/linux/jobctl.h:96:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2201: FILE: include/linux/jobctl.h:102:
+^Iu64 ^Ir_jid;^I/* Return value of JID */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2202: FILE: include/linux/jobctl.h:103:
+^Iu64 ^Ijid;^I/* Jid value requested */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2203: FILE: include/linux/jobctl.h:104:
+^Iint ^Iuser;^I/* UID of user associated with job */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2204: FILE: include/linux/jobctl.h:105:
+^Iint ^Ioptions;/* creation options - unused */$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2207: FILE: include/linux/jobctl.h:108:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2209: FILE: include/linux/jobctl.h:110:
+^Iu64 ^Ir_jid;^I/* Returned value of JID */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2210: FILE: include/linux/jobctl.h:111:
+^Ipid_t ^Ipid;^I/* Info requested for PID */$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2213: FILE: include/linux/jobctl.h:114:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2215: FILE: include/linux/jobctl.h:116:
+^Iu64 ^Ir_jid;^I/* Returned value of JID */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2216: FILE: include/linux/jobctl.h:117:
+^Iu64 ^Ijid;^I/* Waiting on specified JID */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2217: FILE: include/linux/jobctl.h:118:
+^Iint ^Istat;^I/* Status information on JID */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2218: FILE: include/linux/jobctl.h:119:
+^Iint ^Ioptions;/* Waiting options */$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2221: FILE: include/linux/jobctl.h:122:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2228: FILE: include/linux/jobctl.h:129:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2233: FILE: include/linux/jobctl.h:134:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2239: FILE: include/linux/jobctl.h:140:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2245: FILE: include/linux/jobctl.h:146:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2252: FILE: include/linux/jobctl.h:153:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2268: FILE: include/linux/jobctl.h:169:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2290: FILE: include/linux/job_acct.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2307: FILE: include/linux/job_acct.h:18:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2308: FILE: include/linux/job_acct.h:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2323: FILE: include/linux/job_acct.h:34:
+ * ^I^I structure definitions and functions prototypes used$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2324: FILE: include/linux/job_acct.h:35:
+ * ^I^I by other kernel bits that communicate with the job$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2325: FILE: include/linux/job_acct.h:36:
+ * ^I^I module.  One such example is Comprehensive System$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2326: FILE: include/linux/job_acct.h:37:
+ * ^I^I Accounting  (CSA).$

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#2340: FILE: include/linux/job_acct.h:51:
+ * The job start/stop events: These will identify the
+ * the reason the jobstart and jobend callbacks are being

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2344: FILE: include/linux/job_acct.h:55:
+    JOB_EVENT_IGNORE =  0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2345: FILE: include/linux/job_acct.h:56:
+    JOB_EVENT_START =   1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2346: FILE: include/linux/job_acct.h:57:
+    JOB_EVENT_RESTART = 2,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2347: FILE: include/linux/job_acct.h:58:
+    JOB_EVENT_END =  3,$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2350: FILE: include/linux/job_acct.h:61:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2359: FILE: include/linux/job_acct.h:70:
+^Iint     ^Itype;   /* CSA or something else */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2360: FILE: include/linux/job_acct.h:71:
+^Iint     ^I(*jobstart)(int event, void *data);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2361: FILE: include/linux/job_acct.h:72:
+^Iint     ^I(*jobend)(int event, void *data);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2366: FILE: include/linux/job_acct.h:77:
+
+

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#2370: FILE: include/linux/job_acct.h:81:
+ * "subscriber" has to have a type.  This type will identify the
+ * the appropriate structs and macros to use when exchanging data.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2375: FILE: include/linux/job_acct.h:86:
+
+

WARNING:TYPO_SPELLING: 'betwee' may be misspelled - perhaps 'between'?
#2383: FILE: include/linux/job_acct.h:94:
+ * For data exchange betwee job and csa.  The embedded defines
                      ^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2401: FILE: include/linux/job_acct.h:112:
+
+

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct job_acctmod *' should also have an identifier name
#2407: FILE: include/linux/job_acct.h:118:
+int job_register_acct(struct job_acctmod *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct job_acctmod *' should also have an identifier name
#2408: FILE: include/linux/job_acct.h:119:
+int job_unregister_acct(struct job_acctmod *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#2409: FILE: include/linux/job_acct.h:120:
+u64 job_getjid(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#2410: FILE: include/linux/job_acct.h:121:
+int job_getacct(u64, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2410: FILE: include/linux/job_acct.h:121:
+int job_getacct(u64, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#2410: FILE: include/linux/job_acct.h:121:
+int job_getacct(u64, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#2411: FILE: include/linux/job_acct.h:122:
+int job_setacct(u64, int, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2411: FILE: include/linux/job_acct.h:122:
+int job_setacct(u64, int, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2411: FILE: include/linux/job_acct.h:122:
+int job_setacct(u64, int, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#2411: FILE: include/linux/job_acct.h:122:
+int job_setacct(u64, int, int, void *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000146135.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 27 errors, 132 warnings, 76 checks, 2333 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000146135.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
