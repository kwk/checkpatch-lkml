WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#165: FILE: arch/i386/kernel/core_ibmnumaq.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#170: FILE: arch/i386/kernel/core_ibmnumaq.c:6:
+ * All rights reserved.          $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#184: FILE: arch/i386/kernel/core_ibmnumaq.c:20:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#185: FILE: arch/i386/kernel/core_ibmnumaq.c:21:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

ERROR:SPACING: space required before the open parenthesis '('
#216: FILE: arch/i386/kernel/core_ibmnumaq.c:52:
+	for(node = 0; node < MAX_NUMNODES; node++) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#217: FILE: arch/i386/kernel/core_ibmnumaq.c:53:
+		if(scd->quads_present31_0 & (1 << node)) {

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#246: FILE: arch/i386/kernel/core_ibmnumaq.c:82:
+#define MB_TO_ELEMENT(x) (x >> ELEMENT_REPRESENTS)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#247: FILE: arch/i386/kernel/core_ibmnumaq.c:83:
+#define PA_TO_MB(pa) (pa >> 20) ^I/* assumption: a physical address is in $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#247: FILE: arch/i386/kernel/core_ibmnumaq.c:83:
+#define PA_TO_MB(pa) (pa >> 20) ^I/* assumption: a physical address is in $

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pa' may be better as '(pa)' to avoid precedence issues
#247: FILE: arch/i386/kernel/core_ibmnumaq.c:83:
+#define PA_TO_MB(pa) (pa >> 20) 	/* assumption: a physical address is in 

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#248: FILE: arch/i386/kernel/core_ibmnumaq.c:83:
bytes */

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#249: FILE: arch/i386/kernel/core_ibmnumaq.c:84:
+#define PA_TO_MB(pa) (pa >> 20) 	/* assumption: a physical address is in 
+

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: arch/i386/kernel/core_ibmnumaq.c:88:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#258: FILE: arch/i386/kernel/core_ibmnumaq.c:93:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#279: FILE: arch/i386/kernel/core_ibmnumaq.c:114:
+ * $

ERROR:CODE_INDENT: code indent should use tabs where possible
#286: FILE: arch/i386/kernel/core_ibmnumaq.c:121:
+ ^Istruct sys_cfg_data *scd =$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#286: FILE: arch/i386/kernel/core_ibmnumaq.c:121:
+ ^Istruct sys_cfg_data *scd =$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: arch/i386/kernel/core_ibmnumaq.c:121:
+ ^Istruct sys_cfg_data *scd =$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#289: FILE: arch/i386/kernel/core_ibmnumaq.c:124:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#289: FILE: arch/i386/kernel/core_ibmnumaq.c:124:
+
+	

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#290: FILE: arch/i386/kernel/core_ibmnumaq.c:125:
+	for(nid = 0; nid < numnodes; nid++) {

ERROR:SPACING: space required before the open parenthesis '('
#291: FILE: arch/i386/kernel/core_ibmnumaq.c:126:
+		if(scd->quads_present31_0 & (1 << nid)) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#312: FILE: arch/i386/kernel/numa.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#317: FILE: arch/i386/kernel/numa.c:6:
+ * All rights reserved.          $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#331: FILE: arch/i386/kernel/numa.c:20:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#332: FILE: arch/i386/kernel/numa.c:21:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#356: FILE: arch/i386/kernel/numa.c:45:
+extern unsigned long find_max_low_pfn(unsigned long *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#356: FILE: arch/i386/kernel/numa.c:45:
+extern unsigned long find_max_low_pfn(unsigned long *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#357: FILE: arch/i386/kernel/numa.c:46:
+extern unsigned long find_max_pfn(void);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#358: FILE: arch/i386/kernel/numa.c:47:
+extern void pagetable_init (void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#358: FILE: arch/i386/kernel/numa.c:47:
+extern void pagetable_init (void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#359: FILE: arch/i386/kernel/numa.c:48:
+extern void kmap_init(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#360: FILE: arch/i386/kernel/numa.c:49:
+extern void init_one_highpage(struct page *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#360: FILE: arch/i386/kernel/numa.c:49:
+extern void init_one_highpage(struct page *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#360: FILE: arch/i386/kernel/numa.c:49:
+extern void init_one_highpage(struct page *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#360: FILE: arch/i386/kernel/numa.c:49:
+extern void init_one_highpage(struct page *, int, int);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#361: FILE: arch/i386/kernel/numa.c:50:
+extern inline int page_is_ram (unsigned long);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#361: FILE: arch/i386/kernel/numa.c:50:
+extern inline int page_is_ram (unsigned long);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#363: FILE: arch/i386/kernel/numa.c:52:
+extern unsigned long long nodes_mem_start[], nodes_mem_size[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#364: FILE: arch/i386/kernel/numa.c:53:
+extern struct e820map e820;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#365: FILE: arch/i386/kernel/numa.c:54:
+extern char _end;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#366: FILE: arch/i386/kernel/numa.c:55:
+extern unsigned long highend_pfn, highstart_pfn;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#367: FILE: arch/i386/kernel/numa.c:56:
+extern unsigned long max_low_pfn;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#368: FILE: arch/i386/kernel/numa.c:57:
+extern unsigned long totalram_pages;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#369: FILE: arch/i386/kernel/numa.c:58:
+extern unsigned long totalhigh_pages;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#376: FILE: arch/i386/kernel/numa.c:65:
+	start = plat_node_bootpfns[nid].start_pfn = PFN_UP(nodes_mem_start[nid]);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#379: FILE: arch/i386/kernel/numa.c:68:
+	if (start >= end) {
+		BUG();
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#380: FILE: arch/i386/kernel/numa.c:69:
+		BUG();

WARNING:BRACES: braces {} are not necessary for single statement blocks
#382: FILE: arch/i386/kernel/numa.c:71:
+	if (end > system_max_pfn) {
+		end = system_max_pfn;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#392: FILE: arch/i386/kernel/numa.c:81:
+static void __init register_bootmem_low_pages(unsigned long $

ERROR:CODE_INDENT: code indent should use tabs where possible
#399: FILE: arch/i386/kernel/numa.c:87:
+ ^I^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#399: FILE: arch/i386/kernel/numa.c:87:
+ ^I^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#399: FILE: arch/i386/kernel/numa.c:87:
+ ^I^I/*$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#433: FILE: arch/i386/kernel/numa.c:121:
+^Iunsigned long bootmap_size, system_start_pfn, system_max_low_pfn, $

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#442: FILE: arch/i386/kernel/numa.c:129:
+	system_start_pfn = min_low_pfn = PFN_UP(__pa(&_end));

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#445: FILE: arch/i386/kernel/numa.c:132:
+	system_max_low_pfn = max_low_pfn = find_max_low_pfn(&system_max_pfn);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#448: FILE: arch/i386/kernel/numa.c:135:
+		highstart_pfn = highend_pfn = system_max_pfn;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#449: FILE: arch/i386/kernel/numa.c:136:
+		if (system_max_pfn > system_max_low_pfn) {
+			highstart_pfn = system_max_low_pfn;
+		}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#452: FILE: arch/i386/kernel/numa.c:139:
+		printk(KERN_NOTICE "%ldMB HIGHMEM available.\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#455: FILE: arch/i386/kernel/numa.c:142:
+	printk(KERN_NOTICE "%ldMB LOWMEM available.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#456: FILE: arch/i386/kernel/numa.c:143:
+	printk(KERN_NOTICE "%ldMB LOWMEM available.\n",
+			pages_to_mb(system_max_low_pfn));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#457: FILE: arch/i386/kernel/numa.c:144:
+^I$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#458: FILE: arch/i386/kernel/numa.c:145:
+	for (nid = 0; nid < numnodes; nid++)
+	{	

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#459: FILE: arch/i386/kernel/numa.c:146:
+^I{^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#462: FILE: arch/i386/kernel/numa.c:149:
+
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#469: FILE: arch/i386/kernel/numa.c:156:
+^Ibootmap_size = init_bootmem_node(NODE_DATA(0), min_low_pfn, 0, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#471: FILE: arch/i386/kernel/numa.c:157:
+	bootmap_size = init_bootmem_node(NODE_DATA(0), min_low_pfn, 0, 
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#481: FILE: arch/i386/kernel/numa.c:167:
+		 bootmap_size + PAGE_SIZE-1) - (HIGH_MEMORY));
 		                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#507: FILE: arch/i386/kernel/numa.c:193:
+			initrd_end = initrd_start+INITRD_SIZE;
 			                         ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#509: FILE: arch/i386/kernel/numa.c:195:
+		}
+		else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#509: FILE: arch/i386/kernel/numa.c:195:
+		else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#510: FILE: arch/i386/kernel/numa.c:196:
+			printk(KERN_ERR "initrd extends beyond end of memory "

WARNING:SPLIT_STRING: quoted string split across lines
#511: FILE: arch/i386/kernel/numa.c:197:
+			printk(KERN_ERR "initrd extends beyond end of memory "
+			    "(0x%08lx > 0x%08lx)\ndisabling initrd\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#531: FILE: arch/i386/kernel/numa.c:217:
+{
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#533: FILE: arch/i386/kernel/numa.c:219:
+^I$

ERROR:SPACING: space prohibited after that open parenthesis '('
#536: FILE: arch/i386/kernel/numa.c:222:
+	__asm__( "movl %%ecx,%%cr3\n" ::"c"(__pa(swapper_pg_dir)));

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#540: FILE: arch/i386/kernel/numa.c:226:
+	 * We will bail out later - printk doesnt work right now so
 	                                   ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#560: FILE: arch/i386/kernel/numa.c:246:
+^I^I$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#563: FILE: arch/i386/kernel/numa.c:249:
+		if (start > low) {
[...]
+		  zones_size[ZONE_HIGHMEM] = high - start;

CHECK:BRACES: braces {} should be used on all arms of this statement
#568: FILE: arch/i386/kernel/numa.c:254:
+			if (low < max_dma)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#570: FILE: arch/i386/kernel/numa.c:256:
+			else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#578: FILE: arch/i386/kernel/numa.c:264:
+^I^Ifree_area_init_node(nid, NODE_DATA(nid), 0, zones_size, start << $

WARNING:RETURN_VOID: void function return statements are not generally useful
#582: FILE: arch/i386/kernel/numa.c:267:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#584: FILE: arch/i386/kernel/numa.c:269:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#599: FILE: arch/i386/kernel/numa.c:284:
+		if (page_is_ram(pfn) && PageReserved(mem_map+pfn))
 		                                            ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#604: FILE: arch/i386/kernel/numa.c:289:
+		struct page * zone_mem_map;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#605: FILE: arch/i386/kernel/numa.c:290:
+^I^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#611: FILE: arch/i386/kernel/numa.c:295:
+		printk("Initializing highpages for node %d\n", nid);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#613: FILE: arch/i386/kernel/numa.c:297:
+^I^I^Iinit_one_highpage((struct page *) (zone_mem_map + node_pfn), $

CHECK:SPACING: No space is necessary after a cast
#613: FILE: arch/i386/kernel/numa.c:297:
+			init_one_highpage((struct page *) (zone_mem_map + node_pfn), 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#615: FILE: arch/i386/kernel/numa.c:298:
+			init_one_highpage((struct page *) (zone_mem_map + node_pfn), 
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#626: FILE: arch/i386/kernel/numa.c:309:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#635: FILE: arch/i386/kernel/numa.c:317:
+		if (lmax_mapnr > max_mapnr) {
+			max_mapnr = lmax_mapnr;
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#639: FILE: arch/i386/kernel/numa.c:321:
+^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#641: FILE: arch/i386/kernel/numa.c:323:
+	max_mapnr = num_mappedpages = num_physpages = max_low_pfn;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#663: FILE: arch/i386/mm/init.c:205:
+void __init pagetable_init (void)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#688: FILE: arch/i386/mm/init.c:420:
+inline int page_is_ram (unsigned long pagenr)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#728: FILE: arch/i386/mm/init.c:513:
+		BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#729: FILE: arch/i386/mm/init.c:514:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#731: FILE: arch/i386/mm/init.c:516:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#758: FILE: include/asm-i386/io.h:107:
+#define page_to_phys(page)^I(((u64)(page - page_zone(page)->zone_mem_map) << $

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#758: FILE: include/asm-i386/io.h:107:
+#define page_to_phys(page)	(((u64)(page - page_zone(page)->zone_mem_map) << 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#758: FILE: include/asm-i386/io.h:107:
+#define page_to_phys(page)	(((u64)(page - page_zone(page)->zone_mem_map) << 

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'page' may be better as '(page)' to avoid precedence issues
#758: FILE: include/asm-i386/io.h:107:
+#define page_to_phys(page)	(((u64)(page - page_zone(page)->zone_mem_map) << 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#768: FILE: include/asm-i386/io.h:115:
+#define page_to_phys(page)^I(((page - page_zone(page)->zone_mem_map) << $

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#768: FILE: include/asm-i386/io.h:115:
+#define page_to_phys(page)	(((page - page_zone(page)->zone_mem_map) << 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#768: FILE: include/asm-i386/io.h:115:
+#define page_to_phys(page)	(((page - page_zone(page)->zone_mem_map) << 

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'page' may be better as '(page)' to avoid precedence issues
#768: FILE: include/asm-i386/io.h:115:
+#define page_to_phys(page)	(((page - page_zone(page)->zone_mem_map) << 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#789: FILE: include/asm-i386/pgtable.h:303:
+#define mk_pte(page, pgprot)^I__mk_pte(((page) - page_zone(page)->zone_mem_map $

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#789: FILE: include/asm-i386/pgtable.h:303:
+#define mk_pte(page, pgprot)	__mk_pte(((page) - page_zone(page)->zone_mem_map 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#789: FILE: include/asm-i386/pgtable.h:303:
+#define mk_pte(page, pgprot)	__mk_pte(((page) - page_zone(page)->zone_mem_map 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#790: FILE: include/asm-i386/pgtable.h:304:
+ (page_zone(page)->zone_start_paddr >> PAGE_SHIFT)), (pgprot))$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#792: FILE: include/asm-i386/pgtable.h:306:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#792: FILE: include/asm-i386/pgtable.h:306:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#821: FILE: include/asm-i386/pgtable-2level.h:63:
+#define pte_page(x)^I^I(NODE_MEM_MAP(PHYSADDR_TO_NID((x).pte_low)) + $

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#821: FILE: include/asm-i386/pgtable-2level.h:63:
+#define pte_page(x)		(NODE_MEM_MAP(PHYSADDR_TO_NID((x).pte_low)) + 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#843: FILE: include/asm-i386/pgtable-3level.h:93:
+#define pte_pfn(x) ^I(((x).pte_low >> PAGE_SHIFT) | ((x).pte_high << (32 - $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#843: FILE: include/asm-i386/pgtable-3level.h:93:
+#define pte_pfn(x) ^I(((x).pte_low >> PAGE_SHIFT) | ((x).pte_high << (32 - $

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#843: FILE: include/asm-i386/pgtable-3level.h:93:
+#define pte_pfn(x) 	(((x).pte_low >> PAGE_SHIFT) | ((x).pte_high << (32 - 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#843: FILE: include/asm-i386/pgtable-3level.h:93:
+#define pte_pfn(x) 	(((x).pte_low >> PAGE_SHIFT) | ((x).pte_high << (32 - 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#845: FILE: include/asm-i386/pgtable-3level.h:94:
+#define pte_page(x)^I(NODE_MEM_MAP(PFN_TO_NID(pte_pfn(x))) + $

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#845: FILE: include/asm-i386/pgtable-3level.h:94:
+#define pte_page(x)	(NODE_MEM_MAP(PFN_TO_NID(pte_pfn(x))) + 

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#862: FILE: include/asm-i386/setup.h:4:
+#define PFN_UP(x)	(((x) + PAGE_SIZE-1) >> PAGE_SHIFT)
                  	                 ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#870: FILE: include/asm-i386/setup.h:12:
+#define MAX_NONPAE_PFN	(1 << 20)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#876: FILE: include/asm-i386/mmzone.h:1:
+/*

WARNING:NEW_TYPEDEFS: do not add new typedefs
#901: FILE: include/asm-i386/mmzone.h:26:
+typedef struct plat_pglist_data {

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#912: FILE: include/asm-i386/mmzone.h:37:
+#define alloc_bootmem(x) \
+	__alloc_bootmem_node(NODE_DATA(0), (x), SMP_CACHE_BYTES, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#913: FILE: include/asm-i386/mmzone.h:38:
+^I__alloc_bootmem_node(NODE_DATA(0), (x), SMP_CACHE_BYTES, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#915: FILE: include/asm-i386/mmzone.h:39:
+	__alloc_bootmem_node(NODE_DATA(0), (x), SMP_CACHE_BYTES, 
+#define alloc_bootmem_low(x) \

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#921: FILE: include/asm-i386/mmzone.h:45:
+#define alloc_bootmem_node(ignore, x) \
+	__alloc_bootmem_node(NODE_DATA(0), (x), SMP_CACHE_BYTES, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#922: FILE: include/asm-i386/mmzone.h:46:
+^I__alloc_bootmem_node(NODE_DATA(0), (x), SMP_CACHE_BYTES, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#924: FILE: include/asm-i386/mmzone.h:47:
+	__alloc_bootmem_node(NODE_DATA(0), (x), SMP_CACHE_BYTES, 
+#define alloc_bootmem_pages_node(ignore, x) \

WARNING:TYPO_SPELLING: 'implmentation' may be misspelled - perhaps 'implementation'?
#937: FILE: include/asm-i386/mmzone.h:60:
+ * Following are macros that each numa implmentation must define.
                                        ^^^^^^^^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#957: FILE: include/asm-i386/mmzone.h:80:
+ * and returns the the mem_map of that node.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#967: FILE: include/asm-i386/mmzone.h:90:
+#define LOCAL_BASE_ADDR(kaddr)	((unsigned long)__va(NODE_DATA(KVADDR_TO_NID(ka

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'kvaddr' - possible side-effects?
#970: FILE: include/asm-i386/mmzone.h:92:
+#define LOCAL_MAP_NR(kvaddr) \
+	(((unsigned long)(kvaddr)-LOCAL_BASE_ADDR(kvaddr)) >> PAGE_SHIFT)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#971: FILE: include/asm-i386/mmzone.h:93:
+	(((unsigned long)(kvaddr)-LOCAL_BASE_ADDR(kvaddr)) >> PAGE_SHIFT)
 	                         ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'kaddr' - possible side-effects?
#973: FILE: include/asm-i386/mmzone.h:95:
+#define kern_addr_valid(kaddr)	test_bit(LOCAL_MAP_NR(kaddr), \
+					 NODE_DATA(KVADDR_TO_NID(kaddr))->valid_addr_bitmap)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'kaddr' - possible side-effects?
#976: FILE: include/asm-i386/mmzone.h:98:
+#define virt_to_page(kaddr)	(ADDR_TO_MAPBASE(kaddr) + LOCAL_MAP_NR(kaddr))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#987: FILE: include/asm-i386/core_ibmnumaq.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#992: FILE: include/asm-i386/core_ibmnumaq.h:6:
+ * All rights reserved.          $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1006: FILE: include/asm-i386/core_ibmnumaq.h:20:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1007: FILE: include/asm-i386/core_ibmnumaq.h:21:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1033: FILE: include/asm-i386/core_ibmnumaq.h:47:
+extern int ibmnumaqpa_to_nid(unsigned long long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long' should also have an identifier name
#1033: FILE: include/asm-i386/core_ibmnumaq.h:47:
+extern int ibmnumaqpa_to_nid(unsigned long long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1034: FILE: include/asm-i386/core_ibmnumaq.h:48:
+extern int ibmnumaqpfn_to_nid(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1034: FILE: include/asm-i386/core_ibmnumaq.h:48:
+extern int ibmnumaqpfn_to_nid(unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1035: FILE: include/asm-i386/core_ibmnumaq.h:49:
+extern void get_memcfg_ibmnumaq(void);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1039: FILE: include/asm-i386/core_ibmnumaq.h:53:
+ * SYS_CFG_DATA_PRIV_ADDR, struct eachquadmem, and struct sys_cfg_data are $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1042: FILE: include/asm-i386/core_ibmnumaq.h:55:
+#define SYS_CFG_DATA_PRIV_ADDR^I^I0x0009d000 /* place for scd in private quad $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1044: FILE: include/asm-i386/core_ibmnumaq.h:56:
+#define SYS_CFG_DATA_PRIV_ADDR		0x0009d000 /* place for scd in private quad 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1149: FILE: include/asm-i386/core_ibmnumaq.h:161:
+^Iunsigned int^Isplit_mem_enbl; /* 0 for no low shared memory */ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1162: FILE: include/asm-i386/core_ibmnumaq.h:174:
+        struct^Ieachquadmem eq[MAX_NUMNODES];^I/* indexed by quad id */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1162: FILE: include/asm-i386/core_ibmnumaq.h:174:
+        struct^Ieachquadmem eq[MAX_NUMNODES];^I/* indexed by quad id */$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1180: FILE: include/linux/bootmem.h:37:
+extern void __init reserve_bootmem (unsigned long addr, unsigned long size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1180: FILE: include/linux/bootmem.h:37:
+extern void __init reserve_bootmem (unsigned long addr, unsigned long size);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000459754.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 60 errors, 57 warnings, 39 checks, 1084 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000459754.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
