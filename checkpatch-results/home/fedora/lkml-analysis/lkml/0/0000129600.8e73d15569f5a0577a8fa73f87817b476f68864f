WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
This is an updated version of SPI framework developed by Dmitry Pervushin and Vitaly Wool.

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#88: FILE: Documentation/spi.txt:1:
+Documentation/spi.txt

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'approproate' may be misspelled - perhaps 'appropriate'?
#250: FILE: Documentation/spi.txt:163:
+		device driver, if device driver provides approproate callback.
 		                                         ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#493: FILE: drivers/spi/Kconfig:6:
+config SPI
+	tristate "SPI (Serial Peripheral Interface) bus support"
+        default false
+	help
+	  Say Y if you need to enable SPI support on your kernel.
+ 	  Say M if you want to create the spi-core loadable module.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:DEPRECATED_VARIABLE: Use of EXTRA_CFLAGS is deprecated, please use `ccflags-y instead.
#535: FILE: drivers/spi/Makefile:13:
+EXTRA_CFLAGS += -DDEBUG

EXTRA_{A,C,CPP,LD}FLAGS are deprecated and should be replaced by the new
flags added via commit f77bf01425b1 ("kbuild: introduce ccflags-y,
asflags-y and ldflags-y").

The following conversion scheme maybe used::

  EXTRA_AFLAGS    ->  asflags-y
  EXTRA_CFLAGS    ->  ccflags-y
  EXTRA_CPPFLAGS  ->  cppflags-y
  EXTRA_LDFLAGS   ->  ldflags-y

See:

  1. https://lore.kernel.org/lkml/20070930191054.GA15876@uranus.ravnborg.org/
  2. https://lore.kernel.org/lkml/1313384834-24433-12-git-send-email-lacombar@gmail.com/
  3. https://www.kernel.org/doc/html/latest/kbuild/makefiles.html#compilation-flags

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#543: FILE: drivers/spi/spi-core.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#544: FILE: drivers/spi/spi-core.c:2:
+ *  drivers/spi/spi-core.c

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#566: FILE: drivers/spi/spi-core.c:24:
+#include <asm/atomic.h>

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#580: FILE: drivers/spi/spi-core.c:38:
+ * will be matched against any device
+**/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#593: FILE: drivers/spi/spi-core.c:51:
+ * This function set device on SPI bus to suspended state, just like platform_bus does
+**/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#594: FILE: drivers/spi/spi-core.c:52:
+static int spi_bus_suspend(struct device * dev, pm_message_t message)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#598: FILE: drivers/spi/spi-core.c:56:
+	if (dev && dev->driver && dev->driver->suspend ) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#599: FILE: drivers/spi/spi-core.c:57:
+		ret = TO_SPI_DRIVER(dev->driver)->suspend( TO_SPI_DEV(dev), message);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#600: FILE: drivers/spi/spi-core.c:58:
+		if (ret == 0 )

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#612: FILE: drivers/spi/spi-core.c:70:
+ * This function resumes device on SPI bus, just like platform_bus does
+**/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#613: FILE: drivers/spi/spi-core.c:71:
+static int spi_bus_resume(struct device * dev)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#617: FILE: drivers/spi/spi-core.c:75:
+	if (dev && dev->driver && dev->driver->suspend ) {

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#632: FILE: drivers/spi/spi-core.c:90:
+ * @resume: PM callback to resume device
+**/

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#650: FILE: drivers/spi/spi-core.c:108:
+ * device object is SPI master controller
+**/

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#713: FILE: drivers/spi/spi-core.c:171:
+ * each SPI device on the bus using call to __spi_device_free
+**/

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#729: FILE: drivers/spi/spi-core.c:187:
+ * This fus called as a part of device removing
+**/

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#732: FILE: drivers/spi/spi-core.c:190:
+	struct spi_device* sdev = TO_SPI_DEV(dev);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#746: FILE: drivers/spi/spi-core.c:204:
+ * somewhere from hardcoded structures, and prepare bus_data for its devices
+**/

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#747: FILE: drivers/spi/spi-core.c:205:
+struct spi_device* spi_device_add(struct device *parent, char *name, void *bus_data)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#749: FILE: drivers/spi/spi-core.c:207:
+	struct spi_device* dev;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#750: FILE: drivers/spi/spi-core.c:208:
+	static int minor = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dev)...) over kmalloc(sizeof(struct spi_device)...)
#755: FILE: drivers/spi/spi-core.c:213:
+	dev = kmalloc(sizeof(struct spi_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: space required before the open parenthesis '('
#756: FILE: drivers/spi/spi-core.c:214:
+	if(!dev)

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#767: FILE: drivers/spi/spi-core.c:225:
+	if (device_register(&dev->dev)<0) {
 	                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#784: FILE: drivers/spi/spi-core.c:242:
+	struct spi_device *spidev = TO_SPI_DEV(dev);
+	if (spidev->cdev) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#791: FILE: drivers/spi/spi-core.c:249:
+}
+/**

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#802: FILE: drivers/spi/spi-core.c:260:
+ * is provided, or transfer the message synchronously.
+**/

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#827: FILE: drivers/spi/spi-core.c:285:
+ *
+**/

WARNING:BRACES: braces {} are not necessary for single statement blocks
#881: FILE: drivers/spi/spi-core.c:339:
+	if (atomic_read(&bd->exiting)) {
+		return 1;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#894: FILE: drivers/spi/spi-core.c:352:
+	msg->status (msg, SPIMSG_OK);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#907: FILE: drivers/spi/spi-core.c:365:
+static struct spi_msg *spi_bus_fifo_retrieve (struct spi_bus_driver *this, struct spi_bus_data *data)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#907: FILE: drivers/spi/spi-core.c:365:
+static struct spi_msg *spi_bus_fifo_retrieve (struct spi_bus_driver *this, struct spi_bus_data *data)

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#913: FILE: drivers/spi/spi-core.c:371:
+ * spi_bus_simple_retrieve -- retrieve message from the queue with taking into account previous target

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#918: FILE: drivers/spi/spi-core.c:376:
+ * this function is more complex than spi_bus_fifo_retrieve; it takes into account the already selected

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#922: FILE: drivers/spi/spi-core.c:380:
+static struct spi_msg *spi_bus_simple_retrieve(struct spi_bus_driver *this, struct spi_bus_data *data)

ERROR:CODE_INDENT: code indent should use tabs where possible
#957: FILE: drivers/spi/spi-core.c:415:
+       ^I^Ireturn NULL;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#957: FILE: drivers/spi/spi-core.c:415:
+       ^I^Ireturn NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#957: FILE: drivers/spi/spi-core.c:415:
+       ^I^Ireturn NULL;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#959: FILE: drivers/spi/spi-core.c:417:
+		return this->retrieve (this, data);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#978: FILE: drivers/spi/spi-core.c:436:
+	wq = create_workqueue (bd->id);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#980: FILE: drivers/spi/spi-core.c:438:
+		pr_debug("%s: cannot create workqueue, async callbacks will be unavailable\n", bd->id);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#983: FILE: drivers/spi/spi-core.c:441:
+	while (!kthread_should_stop()) {
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1000: FILE: drivers/spi/spi-core.c:458:
+					bd->bus->deselect (bd->selected_device);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1003: FILE: drivers/spi/spi-core.c:461:
+					bd->bus->select (bd->selected_device);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1024: FILE: drivers/spi/spi-core.c:482:
+					queue_work (wq, &msg->wq_item);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1046: FILE: drivers/spi/spi-core.c:504:
+		destroy_workqueue (wq);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1058: FILE: drivers/spi/spi-core.c:516:
+ * Returns the number of bytes transferred, or negative error code.
+**/

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1077: FILE: drivers/spi/spi-core.c:535:
+ * Returns the number of bytes transferred, or negative error code.
+**/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1107: FILE: drivers/spi/spi-core.c:565:
+		     void (*callback) (struct device * bus,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1107: FILE: drivers/spi/spi-core.c:565:
+		     void (*callback) (struct device * bus,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1108: FILE: drivers/spi/spi-core.c:566:
+				       struct spi_device * new_dev))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1116: FILE: drivers/spi/spi-core.c:574:
+		if ((new_device = spi_device_add(parent, devices, NULL)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1127: FILE: drivers/spi/spi-core.c:585:
+int spi_bus_populate2(struct device *parent,
+			struct spi_device_desc* devices_s,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1127: FILE: drivers/spi/spi-core.c:585:
+			struct spi_device_desc* devices_s,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1128: FILE: drivers/spi/spi-core.c:586:
+			void (*callback) (struct device* bus,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1128: FILE: drivers/spi/spi-core.c:586:
+			void (*callback) (struct device* bus,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1130: FILE: drivers/spi/spi-core.c:588:
+					  void* params))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1137: FILE: drivers/spi/spi-core.c:595:
+		dev_dbg(parent, " discovered new SPI device, name '%s'\n",
+				devices_s->name);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1138: FILE: drivers/spi/spi-core.c:596:
+		if ((new_device = spi_device_add(parent, devices_s->name, devices_s->params)) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1138: FILE: drivers/spi/spi-core.c:596:
+		if ((new_device = spi_device_add(parent, devices_s->name, devices_s->params)) == NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1156: FILE: drivers/spi/spi-core.c:614:
+ *
+**/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1157: FILE: drivers/spi/spi-core.c:615:
+void spi_bus_reset (struct device *bus, u32 context)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1166: FILE: drivers/spi/spi-core.c:624:
+int spi_driver_probe (struct device *dev)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1174: FILE: drivers/spi/spi-core.c:632:
+int spi_driver_remove (struct device *dev)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1182: FILE: drivers/spi/spi-core.c:640:
+void spi_driver_shutdown (struct device *dev)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1191: FILE: drivers/spi/spi-core.c:649:
+int spi_driver_suspend (struct device *dev, pm_message_t pm)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1199: FILE: drivers/spi/spi-core.c:657:
+int spi_driver_resume (struct device *dev)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1229: FILE: drivers/spi/spi-core.c:687:
+EXPORT_SYMBOL_GPL(spi_bus_reset);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1230: FILE: drivers/spi/spi-core.c:688:
+EXPORT_SYMBOL_GPL(spi_queue);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1231: FILE: drivers/spi/spi-core.c:689:
+EXPORT_SYMBOL_GPL(spi_device_add);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1232: FILE: drivers/spi/spi-core.c:690:
+EXPORT_SYMBOL_GPL(spi_bus_driver_unregister);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1233: FILE: drivers/spi/spi-core.c:691:
+EXPORT_SYMBOL_GPL(spi_bus_populate);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1234: FILE: drivers/spi/spi-core.c:692:
+EXPORT_SYMBOL_GPL(spi_bus_populate2);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1235: FILE: drivers/spi/spi-core.c:693:
+EXPORT_SYMBOL_GPL(spi_transfer);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1236: FILE: drivers/spi/spi-core.c:694:
+EXPORT_SYMBOL_GPL(spi_write);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1237: FILE: drivers/spi/spi-core.c:695:
+EXPORT_SYMBOL_GPL(spi_read);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1238: FILE: drivers/spi/spi-core.c:696:
+EXPORT_SYMBOL_GPL(spi_bus);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1239: FILE: drivers/spi/spi-core.c:697:
+EXPORT_SYMBOL_GPL(spi_bus_driver_init);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1240: FILE: drivers/spi/spi-core.c:698:
+EXPORT_SYMBOL_GPL(spi_bus_fifo_retrieve);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1241: FILE: drivers/spi/spi-core.c:699:
+EXPORT_SYMBOL_GPL(spi_bus_simple_retrieve);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1248: FILE: drivers/spi/spi-dev.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1249: FILE: drivers/spi/spi-dev.c:2:
+/*
+    spi-dev.c - spi driver, char device interface

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1264: FILE: drivers/spi/spi-dev.c:17:
+    along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1265: FILE: drivers/spi/spi-dev.c:18:
+    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1279: FILE: drivers/spi/spi-dev.c:32:
+#include <asm/uaccess.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1287: FILE: drivers/spi/spi-dev.c:40:
+			   loff_t * offset);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1289: FILE: drivers/spi/spi-dev.c:42:
+			    loff_t * offset);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1300: FILE: drivers/spi/spi-dev.c:53:
+ *
+**/

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1303: FILE: drivers/spi/spi-dev.c:56:
+	return class_device_create(spidev_class, NULL, MKDEV(SPI_MAJOR, minor), device, "spi%d", minor);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1311: FILE: drivers/spi/spi-dev.c:64:
+ *
+**/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1317: FILE: drivers/spi/spi-dev.c:70:
+static struct file_operations spidev_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1327: FILE: drivers/spi/spi-dev.c:80:
+			   loff_t * offset)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1333: FILE: drivers/spi/spi-dev.c:86:
+	if (!kbuf)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1335: FILE: drivers/spi/spi-dev.c:88:
+	else {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1345: FILE: drivers/spi/spi-dev.c:98:
+			    loff_t * offset)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1351: FILE: drivers/spi/spi-dev.c:104:
+	if (!kbuf)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1353: FILE: drivers/spi/spi-dev.c:106:
+	else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1391: FILE: drivers/spi/spi-dev.c:144:
+	if (status == 0) {
+		status = -ENODEV;
+	}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1412: FILE: drivers/spi/spi-dev.c:165:
+	if ((res = register_chrdev(SPI_MAJOR, "spi", &spidev_fops)) != 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1412: FILE: drivers/spi/spi-dev.c:165:
+	if ((res = register_chrdev(SPI_MAJOR, "spi", &spidev_fops)) != 0) {
+		goto out;
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1418: FILE: drivers/spi/spi-dev.c:171:
+		printk(KERN_ERR "%s: error creating class\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1418: FILE: drivers/spi/spi-dev.c:171:
+		printk(KERN_ERR "%s: error creating class\n", __FUNCTION__);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1445: FILE: include/linux/spi.h:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1482: FILE: include/linux/spi.h:38:
+^Iint ^I(*xfer) (struct spi_msg * msg);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1482: FILE: include/linux/spi.h:38:
+	int 	(*xfer) (struct spi_msg * msg);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1482: FILE: include/linux/spi.h:38:
+	int 	(*xfer) (struct spi_msg * msg);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1483: FILE: include/linux/spi.h:39:
+^Ivoid ^I(*select) (struct spi_device * dev);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1483: FILE: include/linux/spi.h:39:
+	void 	(*select) (struct spi_device * dev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1483: FILE: include/linux/spi.h:39:
+	void 	(*select) (struct spi_device * dev);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1484: FILE: include/linux/spi.h:40:
+^Ivoid ^I(*deselect) (struct spi_device * dev);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1484: FILE: include/linux/spi.h:40:
+	void 	(*deselect) (struct spi_device * dev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1484: FILE: include/linux/spi.h:40:
+	void 	(*deselect) (struct spi_device * dev);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1485: FILE: include/linux/spi.h:41:
+^Ivoid ^I(*set_clock) (struct device * bus_device, u32 clock_hz);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1485: FILE: include/linux/spi.h:41:
+	void 	(*set_clock) (struct device * bus_device, u32 clock_hz);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1485: FILE: include/linux/spi.h:41:
+	void 	(*set_clock) (struct device * bus_device, u32 clock_hz);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1486: FILE: include/linux/spi.h:42:
+^Ivoid ^I(*reset) (struct device *bus_device, u32 context);$

WARNING:SPACING: Unnecessary space before function pointer arguments
#1486: FILE: include/linux/spi.h:42:
+	void 	(*reset) (struct device *bus_device, u32 context);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1491: FILE: include/linux/spi.h:47:
+^Ivoid ^I       *(*alloc) (size_t, int);$

WARNING:SPACING: Unnecessary space before function pointer arguments
#1491: FILE: include/linux/spi.h:47:
+	void 	       *(*alloc) (size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1491: FILE: include/linux/spi.h:47:
+	void 	       *(*alloc) (size_t, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1491: FILE: include/linux/spi.h:47:
+	void 	       *(*alloc) (size_t, int);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1492: FILE: include/linux/spi.h:48:
+^Ivoid ^I ^I(*free) (const void *);$

WARNING:SPACING: Unnecessary space before function pointer arguments
#1492: FILE: include/linux/spi.h:48:
+	void 	 	(*free) (const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#1492: FILE: include/linux/spi.h:48:
+	void 	 	(*free) (const void *);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1493: FILE: include/linux/spi.h:49:
+^Iu8  ^I       *(*get_buffer) (struct spi_device *, void *);$

WARNING:SPACING: Unnecessary space before function pointer arguments
#1493: FILE: include/linux/spi.h:49:
+	u8  	       *(*get_buffer) (struct spi_device *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_device *' should also have an identifier name
#1493: FILE: include/linux/spi.h:49:
+	u8  	       *(*get_buffer) (struct spi_device *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1493: FILE: include/linux/spi.h:49:
+	u8  	       *(*get_buffer) (struct spi_device *, void *);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1494: FILE: include/linux/spi.h:50:
+^Ivoid ^I^I(*release_buffer) (struct spi_device *, unsigned char *);$

WARNING:SPACING: Unnecessary space before function pointer arguments
#1494: FILE: include/linux/spi.h:50:
+	void 		(*release_buffer) (struct spi_device *, unsigned char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_device *' should also have an identifier name
#1494: FILE: include/linux/spi.h:50:
+	void 		(*release_buffer) (struct spi_device *, unsigned char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char *' should also have an identifier name
#1494: FILE: include/linux/spi.h:50:
+	void 		(*release_buffer) (struct spi_device *, unsigned char *);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1509: FILE: include/linux/spi.h:65:
+struct spi_driver {
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1510: FILE: include/linux/spi.h:66:
+^Ichar ^Iname [BUS_ID_SIZE];$

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1510: FILE: include/linux/spi.h:66:
+	char 	name [BUS_ID_SIZE];

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1512: FILE: include/linux/spi.h:68:
+	int     (*probe)        (struct spi_device * dev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1512: FILE: include/linux/spi.h:68:
+	int     (*probe)        (struct spi_device * dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1513: FILE: include/linux/spi.h:69:
+	int     (*remove)       (struct spi_device * dev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1513: FILE: include/linux/spi.h:69:
+	int     (*remove)       (struct spi_device * dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1514: FILE: include/linux/spi.h:70:
+	void    (*shutdown)     (struct spi_device * dev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1514: FILE: include/linux/spi.h:70:
+	void    (*shutdown)     (struct spi_device * dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1515: FILE: include/linux/spi.h:71:
+	int	(*suspend)	(struct spi_device * dev, pm_message_t pm);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1515: FILE: include/linux/spi.h:71:
+	int	(*suspend)	(struct spi_device * dev, pm_message_t pm);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1516: FILE: include/linux/spi.h:72:
+^Iint ^I(*resume)^I(struct spi_device * dev);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1516: FILE: include/linux/spi.h:72:
+	int 	(*resume)	(struct spi_device * dev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1516: FILE: include/linux/spi.h:72:
+	int 	(*resume)	(struct spi_device * dev);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1518: FILE: include/linux/spi.h:74:
+^Ivoid ^I^I(*control) (struct spi_device *, int mode, u32 ctl);$

WARNING:SPACING: Unnecessary space before function pointer arguments
#1518: FILE: include/linux/spi.h:74:
+	void 		(*control) (struct spi_device *, int mode, u32 ctl);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_device *' should also have an identifier name
#1518: FILE: include/linux/spi.h:74:
+	void 		(*control) (struct spi_device *, int mode, u32 ctl);

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#1554: FILE: include/linux/spi.h:110:
+#define SPI_M_CS	0x00000008	/**< CS active level at begining of frame  */
                 	          	                        ^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1557: FILE: include/linux/spi.h:113:
+#define SPI_M_EXTBUF^I0x80000000    ^I/** externally allocated buffers */$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1568: FILE: include/linux/spi.h:124:
+	void (*status) (struct spi_msg * msg, int code);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1568: FILE: include/linux/spi.h:124:
+	void (*status) (struct spi_msg * msg, int code);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1575: FILE: include/linux/spi.h:131:
+#if defined (CONFIG_SPI_CHARDEV)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1576: FILE: include/linux/spi.h:132:
+extern struct class_device *spi_class_device_create(int minor, struct device *device);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1577: FILE: include/linux/spi.h:133:
+extern void spi_class_device_destroy(struct class_device *cdev);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1583: FILE: include/linux/spi.h:139:
+}
+static inline void  spi_class_device_destroy(struct class_device *cdev)

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1596: FILE: include/linux/spi.h:152:
+ * @status: user-supplied callback function
+**/

WARNING:SPACING: Unnecessary space before function pointer arguments
#1601: FILE: include/linux/spi.h:157:
+					   void (*status) (struct spi_msg *,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1606: FILE: include/linux/spi.h:162:
+	int msgsize = sizeof (struct spi_msg);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1608: FILE: include/linux/spi.h:164:
+	if (drv->alloc || (flags & (SPI_M_RD|SPI_M_WR)) == (SPI_M_RD | SPI_M_WR)) {
 	                                    ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1609: FILE: include/linux/spi.h:165:
+		pr_debug ("%s: external buffers\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1609: FILE: include/linux/spi.h:165:
+		pr_debug ("%s: external buffers\n", __FUNCTION__);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1612: FILE: include/linux/spi.h:168:
+		pr_debug ("%s: no ext buffers, msgsize increased from %d by %d to %d\n", __FUNCTION__,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1612: FILE: include/linux/spi.h:168:
+		pr_debug ("%s: no ext buffers, msgsize increased from %d by %d to %d\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1612: FILE: include/linux/spi.h:168:
+		pr_debug ("%s: no ext buffers, msgsize increased from %d by %d to %d\n", __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1613: FILE: include/linux/spi.h:169:
+		pr_debug ("%s: no ext buffers, msgsize increased from %d by %d to %d\n", __FUNCTION__,
+				msgsize, len, msgsize + len);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1628: FILE: include/linux/spi.h:184:
+		msg->databuf_rd = msg->databuf_wr = buf;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1634: FILE: include/linux/spi.h:190:
+		msg->databuf_rd = msg->databuf_wr =

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1635: FILE: include/linux/spi.h:191:
+			(u8*)msg + sizeof (struct spi_msg);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1635: FILE: include/linux/spi.h:191:
+			(u8*)msg + sizeof (struct spi_msg);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1639: FILE: include/linux/spi.h:195:
+^I^I    ^I^Idrv->alloc(len, GFP_KERNEL) : kmalloc(len, GFP_KERNEL);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1639: FILE: include/linux/spi.h:195:
+^I^I    ^I^Idrv->alloc(len, GFP_KERNEL) : kmalloc(len, GFP_KERNEL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1643: FILE: include/linux/spi.h:199:
+^I^I    ^I^Idrv->alloc(len, GFP_KERNEL) : kmalloc(len, GFP_KERNEL);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1643: FILE: include/linux/spi.h:199:
+^I^I    ^I^Idrv->alloc(len, GFP_KERNEL) : kmalloc(len, GFP_KERNEL);$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1647: FILE: include/linux/spi.h:203:
+		 __FUNCTION__,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1663: FILE: include/linux/spi.h:219:
+	void (*do_free) (const void *) = kfree;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1667: FILE: include/linux/spi.h:223:
+	if (msg) {
+

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1684: FILE: include/linux/spi.h:240:
+	switch (msg->flags & (SPI_M_RD|SPI_M_WR)) {
 	                              ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1694: FILE: include/linux/spi.h:250:
+		printk(KERN_ERR "%s: what buffer do you really want ?\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1695: FILE: include/linux/spi.h:251:
+		       __FUNCTION__);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1704: FILE: include/linux/spi.h:260:
+	u8 *retbuf = NULL;
+	if (msg) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1716: FILE: include/linux/spi.h:272:
+	u8 *retbuf = NULL;
+	if (msg) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1744: FILE: include/linux/spi.h:300:
+		printk(KERN_ERR "%s: what buffer do you really want ?\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1745: FILE: include/linux/spi.h:301:
+		       __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1759: FILE: include/linux/spi.h:315:
+		printk(KERN_ERR "%s: what buffer do you really want ?\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1760: FILE: include/linux/spi.h:316:
+		       __FUNCTION__);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1769: FILE: include/linux/spi.h:325:
+static inline void spimsg_set_rd(struct spi_msg* msg, void* buf)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1769: FILE: include/linux/spi.h:325:
+static inline void spimsg_set_rd(struct spi_msg* msg, void* buf)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1774: FILE: include/linux/spi.h:330:
+static inline void spimsg_set_wr (struct spi_msg *msg, void *buf)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1779: FILE: include/linux/spi.h:335:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1780: FILE: include/linux/spi.h:336:
+#define SPIMSG_OK ^I0x01$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1781: FILE: include/linux/spi.h:337:
+#define SPIMSG_FAILED ^I0x80$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1790: FILE: include/linux/spi.h:346:
+#if defined (CONFIG_SPI_CHARDEV)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1791: FILE: include/linux/spi.h:347:
+extern int __init spidev_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1792: FILE: include/linux/spi.h:348:
+extern void __exit spidev_cleanup(void);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1798: FILE: include/linux/spi.h:354:
+}
+static inline void spidev_cleanup(void)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1803: FILE: include/linux/spi.h:359:
+static inline int spi_bus_driver_register (struct spi_bus_driver *bus_driver)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1805: FILE: include/linux/spi.h:361:
+	return driver_register (&bus_driver->driver);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1810: FILE: include/linux/spi.h:366:
+struct spi_device* spi_device_add(struct device *parent, char *name, void *private);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1811: FILE: include/linux/spi.h:367:
+int spi_driver_probe (struct device *dev);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1812: FILE: include/linux/spi.h:368:
+int spi_driver_remove (struct device *dev);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1813: FILE: include/linux/spi.h:369:
+void spi_driver_shutdown (struct device *dev);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1814: FILE: include/linux/spi.h:370:
+int spi_driver_suspend (struct device *dev, pm_message_t state);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1815: FILE: include/linux/spi.h:371:
+int spi_driver_resume (struct device *dev);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1828: FILE: include/linux/spi.h:384:
+}
+static inline void spi_driver_del(struct spi_driver *drv)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1833: FILE: include/linux/spi.h:389:
+extern void spi_bus_reset(struct device* bus, u32 context);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1833: FILE: include/linux/spi.h:389:
+extern void spi_bus_reset(struct device* bus, u32 context);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1834: FILE: include/linux/spi.h:390:
+extern int spi_write(struct spi_device *dev, u32 flags, char *buf, size_t len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1835: FILE: include/linux/spi.h:391:
+extern int spi_read(struct spi_device *dev, u32 flags, char *buf, size_t len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1837: FILE: include/linux/spi.h:393:
+extern int spi_queue(struct spi_msg *message);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1838: FILE: include/linux/spi.h:394:
+extern int spi_transfer(struct spi_msg *message,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1839: FILE: include/linux/spi.h:395:
+			void (*status) (struct spi_msg *, int));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1840: FILE: include/linux/spi.h:396:
+extern int spi_bus_populate(struct device *parent, char *device,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1841: FILE: include/linux/spi.h:397:
+			    void (*assign) (struct device *parent,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1844: FILE: include/linux/spi.h:400:
+	char* name;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1845: FILE: include/linux/spi.h:401:
+	void* params;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1848: FILE: include/linux/spi.h:404:
+static inline int spi_w8r8 (struct spi_device *dev, u8 wr)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1853: FILE: include/linux/spi.h:409:
+	rc = spi_write (dev, SPI_M_CS, &wr, 1);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1855: FILE: include/linux/spi.h:411:
+		rc = spi_read (dev, SPI_M_CSREL, &byte, 1);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1860: FILE: include/linux/spi.h:416:
+extern int spi_bus_populate2(struct device *parent,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1862: FILE: include/linux/spi.h:418:
+			     void (*assign) (struct device *parent,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1863: FILE: include/linux/spi.h:419:
+^I^I^I^I             struct spi_device *,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1863: FILE: include/linux/spi.h:419:
+			     void (*assign) (struct device *parent,
+				             struct spi_device *,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000129600.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 48 errors, 149 warnings, 32 checks, 1761 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000129600.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
