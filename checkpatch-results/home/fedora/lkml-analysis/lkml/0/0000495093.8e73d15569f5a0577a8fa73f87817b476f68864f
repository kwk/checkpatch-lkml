WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
The patch below (against 2.4.16) makes the ia64 port no longer use the (VERY

WARNING:TYPO_SPELLING: 'implemenation' may be misspelled - perhaps 'implementation'?
#27: 
PCI-unreachable memory. The implemenation is pretty simple; instead of
                            ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#88: FILE: arch/ia64/kernel/ia64_ksyms.c:153:
+EXPORT_SYMBOL(pci_free_consistent);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#93: FILE: arch/ia64/kernel/pci-dma.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#107: FILE: arch/ia64/kernel/pci-dma.c:15:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hwdev"
#115: FILE: arch/ia64/kernel/pci-dma.c:23:
+	if (hwdev == NULL || hwdev->dma_mask != 0xffffffff)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ret"
#119: FILE: arch/ia64/kernel/pci-dma.c:27:
+	if (ret != NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#139: FILE: arch/ia64/lib/Makefile:10:
+export-objs := io.o $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#186: FILE: arch/ia64/mm/init.c:355:
+	max_dma = virt_to_phys((void *) (MAX_DMA_ADDRESS)) >> PAGE_SHIFT;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#187: FILE: arch/ia64/mm/init.c:356:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#202: FILE: arch/ia64/mm/init.c:390:
+count_highmem_pages (u64 start, u64 end, void *arg)

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#209: FILE: arch/ia64/mm/init.c:397:
+		if (page_to_phys(pg)>(0xffffffff)) {
 		                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#212: FILE: arch/ia64/mm/init.c:400:
+ ^I^I^Ipg->virtual = __va(page_to_phys(pg));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#212: FILE: arch/ia64/mm/init.c:400:
+ ^I^I^Ipg->virtual = __va(page_to_phys(pg));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: arch/ia64/mm/init.c:400:
+ ^I^I^Ipg->virtual = __va(page_to_phys(pg));$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#253: FILE: include/asm-ia64/highmem.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#263: FILE: include/asm-ia64/highmem.h:11:
+ * Redesigned the x86 32-bit VM architecture to deal with $

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#279: FILE: include/asm-ia64/highmem.h:27:
+#include <asm/pgtable.h>

CHECK:SPACING: No space is necessary after a cast
#291: FILE: include/asm-ia64/highmem.h:39:
+#define kmap_init(void) do {} while (0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#310: FILE: include/asm-ia64/highmem.h:58:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#318: FILE: include/asm-ia64/kmap_types.h:1:
+#ifndef _ASM_KMAP_TYPES_H

CHECK:LINE_SPACING: Please don't use multiple blank lines
#392: FILE: include/asm-ia64/pci.h:42:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#403: FILE: include/asm-ia64/pci.h:53:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'guarenteed' may be misspelled - perhaps 'guaranteed'?
#412: FILE: include/asm-ia64/pci.h:62:
+ * After this call, reads by the cpu to the buffer are guarenteed to see
                                                        ^^^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#419: FILE: include/asm-ia64/pci.h:69:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#431: FILE: include/asm-ia64/pci.h:81:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#440: FILE: include/asm-ia64/pci.h:90:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#465: FILE: include/asm-ia64/pci.h:115:
+		BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#466: FILE: include/asm-ia64/pci.h:116:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#466: FILE: include/asm-ia64/pci.h:116:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#467: FILE: include/asm-ia64/pci.h:117:
+ ^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#467: FILE: include/asm-ia64/pci.h:117:
+ ^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#467: FILE: include/asm-ia64/pci.h:117:
+ ^I/*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#468: FILE: include/asm-ia64/pci.h:118:
+ ^I * temporary 2.4 hack$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#468: FILE: include/asm-ia64/pci.h:118:
+ ^I * temporary 2.4 hack$

ERROR:CODE_INDENT: code indent should use tabs where possible
#469: FILE: include/asm-ia64/pci.h:119:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#469: FILE: include/asm-ia64/pci.h:119:
+ ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#470: FILE: include/asm-ia64/pci.h:120:
+ ^Ifor (i = 0; i < nents; i++ ) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#470: FILE: include/asm-ia64/pci.h:120:
+ ^Ifor (i = 0; i < nents; i++ ) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#470: FILE: include/asm-ia64/pci.h:120:
+ ^Ifor (i = 0; i < nents; i++ ) {$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#470: FILE: include/asm-ia64/pci.h:120:
+ 	for (i = 0; i < nents; i++ ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#471: FILE: include/asm-ia64/pci.h:121:
+ ^I^Iif (sg[i].address && sg[i].page)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#471: FILE: include/asm-ia64/pci.h:121:
+ ^I^Iif (sg[i].address && sg[i].page)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#471: FILE: include/asm-ia64/pci.h:121:
+ ^I^Iif (sg[i].address && sg[i].page)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#472: FILE: include/asm-ia64/pci.h:122:
+ ^I^I^IBUG();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#472: FILE: include/asm-ia64/pci.h:122:
+ ^I^I^IBUG();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#472: FILE: include/asm-ia64/pci.h:122:
+ ^I^I^IBUG();$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#472: FILE: include/asm-ia64/pci.h:122:
+ 			BUG();

ERROR:CODE_INDENT: code indent should use tabs where possible
#473: FILE: include/asm-ia64/pci.h:123:
+ ^I^Ielse if (!sg[i].address && !sg[i].page)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#473: FILE: include/asm-ia64/pci.h:123:
+ ^I^Ielse if (!sg[i].address && !sg[i].page)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#473: FILE: include/asm-ia64/pci.h:123:
+ ^I^Ielse if (!sg[i].address && !sg[i].page)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#474: FILE: include/asm-ia64/pci.h:124:
+ ^I^I^IBUG();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#474: FILE: include/asm-ia64/pci.h:124:
+ ^I^I^IBUG();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#474: FILE: include/asm-ia64/pci.h:124:
+ ^I^I^IBUG();$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#474: FILE: include/asm-ia64/pci.h:124:
+ 			BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#475: FILE: include/asm-ia64/pci.h:125:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#475: FILE: include/asm-ia64/pci.h:125:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#476: FILE: include/asm-ia64/pci.h:126:
+ ^I^Iif (sg[i].address)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#476: FILE: include/asm-ia64/pci.h:126:
+ ^I^Iif (sg[i].address)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#476: FILE: include/asm-ia64/pci.h:126:
+ ^I^Iif (sg[i].address)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#477: FILE: include/asm-ia64/pci.h:127:
+ ^I^I^Isg[i].dma_address = virt_to_bus(sg[i].address);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#477: FILE: include/asm-ia64/pci.h:127:
+ ^I^I^Isg[i].dma_address = virt_to_bus(sg[i].address);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#477: FILE: include/asm-ia64/pci.h:127:
+ ^I^I^Isg[i].dma_address = virt_to_bus(sg[i].address);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#478: FILE: include/asm-ia64/pci.h:128:
+ ^I^Ielse$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#478: FILE: include/asm-ia64/pci.h:128:
+ ^I^Ielse$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#478: FILE: include/asm-ia64/pci.h:128:
+ ^I^Ielse$

ERROR:CODE_INDENT: code indent should use tabs where possible
#479: FILE: include/asm-ia64/pci.h:129:
+ ^I^I^Isg[i].dma_address = page_to_bus(sg[i].page) + sg[i].offset;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#479: FILE: include/asm-ia64/pci.h:129:
+ ^I^I^Isg[i].dma_address = page_to_bus(sg[i].page) + sg[i].offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#479: FILE: include/asm-ia64/pci.h:129:
+ ^I^I^Isg[i].dma_address = page_to_bus(sg[i].page) + sg[i].offset;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#480: FILE: include/asm-ia64/pci.h:130:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#480: FILE: include/asm-ia64/pci.h:130:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#480: FILE: include/asm-ia64/pci.h:130:
+ ^I}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#481: FILE: include/asm-ia64/pci.h:131:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#481: FILE: include/asm-ia64/pci.h:131:
+ $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#494: FILE: include/asm-ia64/pci.h:144:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#512: FILE: include/asm-ia64/pci.h:162:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#527: FILE: include/asm-ia64/pci.h:177:
+		BUG();

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#547: FILE: include/asm-ia64/pci.h:224:
+extern void *pci_alloc_consistent(struct pci_dev *hwdev, size_t size,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:CODE_INDENT: code indent should use tabs where possible
#548: FILE: include/asm-ia64/pci.h:225:
+                                  dma_addr_t *dma_handle);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#548: FILE: include/asm-ia64/pci.h:225:
+                                  dma_addr_t *dma_handle);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#558: FILE: include/asm-ia64/pci.h:235:
+extern void pci_free_consistent(struct pci_dev *hwdev, size_t size,

ERROR:CODE_INDENT: code indent should use tabs where possible
#559: FILE: include/asm-ia64/pci.h:236:
+                                void *vaddr, dma_addr_t dma_handle);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#559: FILE: include/asm-ia64/pci.h:236:
+                                void *vaddr, dma_addr_t dma_handle);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#610: FILE: mm/highmem.c:25:
 
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000495093.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 24 errors, 50 warnings, 10 checks, 515 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000495093.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
