WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#122: FILE: arch/i386/mm/mmap.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#123: FILE: arch/i386/mm/mmap.c:2:
+ *  linux/arch/i386/mm/mmap.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#141: FILE: arch/i386/mm/mmap.c:20:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#142: FILE: arch/i386/mm/mmap.c:21:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#157: FILE: arch/i386/mm/mmap.c:36:
+#define MIN_GAP (128*1024*1024)
                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#157: FILE: arch/i386/mm/mmap.c:36:
+#define MIN_GAP (128*1024*1024)
                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#158: FILE: arch/i386/mm/mmap.c:37:
+#define MAX_GAP (TASK_SIZE/6*5)
                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#158: FILE: arch/i386/mm/mmap.c:37:
+#define MAX_GAP (TASK_SIZE/6*5)
                             ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#206: FILE: include/linux/sched.h:198:
+get_unmapped_area_topdown(struct file *filp, unsigned long addr,
                                        ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#211: FILE: include/linux/sched.h:203:
+extern void arch_pick_mmap_layout(struct mm_struct *mm);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#224: FILE: include/linux/sched.h:216:
+	unsigned long (*get_unmapped_area) (struct file *filp,
 	                                                 ^^^^

WARNING:SPACING: Unnecessary space before function pointer arguments
#224: FILE: include/linux/sched.h:216:
+	unsigned long (*get_unmapped_area) (struct file *filp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#225: FILE: include/linux/sched.h:217:
+	unsigned long (*get_unmapped_area) (struct file *filp,
+				unsigned long addr, unsigned long len,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#344: FILE: mm/mmap.c:1056:
+get_unmapped_area_topdown(struct file *filp, unsigned long addr,
                                        ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#354: FILE: mm/mmap.c:1066:
+^Iif (len > TASK_SIZE) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#365: FILE: mm/mmap.c:1077:
+^I^Iif (TASK_SIZE - len >= addr && $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#366: FILE: mm/mmap.c:1078:
+		if (TASK_SIZE - len >= addr && 
+				(!vma || addr + len <= vma->vm_start))

WARNING:TYPO_SPELLING: 'cant' may be misspelled - perhaps 'can't'?
#374: FILE: mm/mmap.c:1086:
+	/* either no address requested or cant fit in requested address hole */
 	                                  ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#378: FILE: mm/mmap.c:1090:
+ ^I ^Iif (!(vma = find_vma_prev(mm, addr, &prev_vma)))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#378: FILE: mm/mmap.c:1090:
+ ^I ^Iif (!(vma = find_vma_prev(mm, addr, &prev_vma)))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#378: FILE: mm/mmap.c:1090:
+ ^I ^Iif (!(vma = find_vma_prev(mm, addr, &prev_vma)))$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#378: FILE: mm/mmap.c:1090:
+ 	 	if (!(vma = find_vma_prev(mm, addr, &prev_vma)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#385: FILE: mm/mmap.c:1097:
+		if (addr+len <= vma->vm_start &&
 		        ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr >= prev_vma->vm_end'
#385: FILE: mm/mmap.c:1097:
+		if (addr+len <= vma->vm_start &&
+				(!prev_vma || (addr >= prev_vma->vm_end)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#386: FILE: mm/mmap.c:1098:
+		if (addr+len <= vma->vm_start &&
+				(!prev_vma || (addr >= prev_vma->vm_end)))

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#389: FILE: mm/mmap.c:1101:
+			return (mm->free_area_cache = addr);
+		else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#392: FILE: mm/mmap.c:1104:
+^I^I^I^Imm->free_area_cache = vma->vm_start;^I$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#395: FILE: mm/mmap.c:1107:
+		addr = vma->vm_start-len;
 		                    ^

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#520: FILE: arch/i386/mm/init.c:159:
+				unsigned int address2 = (pfn + PTRS_PER_PTE - 1) * PAGE_SIZE + PAGE_OFFSET + PAGE_SIZE-1;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#520: FILE: arch/i386/mm/init.c:159:
+				unsigned int address2 = (pfn + PTRS_PER_PTE - 1) * PAGE_SIZE + PAGE_OFFSET + PAGE_SIZE-1;
 				                                                                                      ^

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#532: FILE: arch/i386/mm/init.c:169:
+				for (pte_ofs = 0; pte_ofs < PTRS_PER_PTE && pfn < max_low_pfn; pte++, pfn++, pte_ofs++) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (32, 48)
#532: FILE: arch/i386/mm/init.c:169:
+				for (pte_ofs = 0; pte_ofs < PTRS_PER_PTE && pfn < max_low_pfn; pte++, pfn++, pte_ofs++) {
+						if (is_kernel_text(address))

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#533: FILE: arch/i386/mm/init.c:170:
+						if (is_kernel_text(address))

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#534: FILE: arch/i386/mm/init.c:171:
+							set_pte(pte, pfn_pte(pfn, PAGE_KERNEL_EXEC));

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#535: FILE: arch/i386/mm/init.c:172:
+						else

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#567: FILE: arch/i386/mm/init.c:415:
+static int disable_nx __initdata = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#580: FILE: arch/i386/mm/init.c:428:
+	if (!strncmp(str, "on",2) && cpu_has_nx) {
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#583: FILE: arch/i386/mm/init.c:431:
+	} else if (!strncmp(str,"off",3)) {
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#583: FILE: arch/i386/mm/init.c:431:
+	} else if (!strncmp(str,"off",3)) {
 	                             ^

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#590: FILE: arch/i386/mm/init.c:438:
+__setup("noexec=", noexec_setup);

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#593: FILE: arch/i386/mm/init.c:441:
+static int use_nx = 0;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#623: FILE: arch/i386/mm/init.c:473:
+		printk("NX (Execute Disable) protection: active\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#640: FILE: arch/i386/mm/fault.c:414:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 138 exceeds 100 columns
#646: FILE: arch/i386/mm/fault.c:420:
+				printk(KERN_CRIT "kernel tried to access NX-protected page - exploit attempt? (uid: %d)\n", current->uid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#646: FILE: arch/i386/mm/fault.c:420:
+				printk(KERN_CRIT "kernel tried to access NX-protected page - exploit attempt? (uid: %d)\n", current->uid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#701: FILE: include/linux/vmalloc.h:26:
+extern void *vmalloc_exec(unsigned long size);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#712: FILE: include/asm-i386/msr.h:221:
+#define MSR_EFER ^I^I^I0xc0000080$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#718: FILE: include/asm-i386/msr.h:227:
+#define EFER_NX				(1<<_EFER_NX)
                				  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#718: FILE: include/asm-i386/msr.h:227:
+#define EFER_NX				(1<<_EFER_NX)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#729: FILE: include/asm-i386/cpufeature.h:50:
+#define X86_FEATURE_NX		(1*32+20) /* Execute Disable */
                       		  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#729: FILE: include/asm-i386/cpufeature.h:50:
+#define X86_FEATURE_NX		(1*32+20) /* Execute Disable */
                       		     ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#751: FILE: include/asm-i386/page.h:47:
+typedef struct { unsigned long long pgprot; } pgprot_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#758: FILE: include/asm-i386/page.h:54:
+typedef struct { unsigned long pgprot; } pgprot_t;

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#793: FILE: include/asm-i386/pgtable-3level.h:110:
+	pte.pte_high = (page_nr >> (32 - PAGE_SHIFT)) | \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#796: FILE: include/asm-i386/pgtable-3level.h:113:
+	pte.pte_low = ((page_nr << PAGE_SHIFT) | pgprot_val(pgprot)) & \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#804: FILE: include/asm-i386/pgtable-3level.h:120:
+	return __pmd((((unsigned long long)page_nr << PAGE_SHIFT) | \

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#824: FILE: include/asm-i386/pgtable.h:131:
+#define _PAGE_NX	(1ULL<<_PAGE_BIT_NX)
                 	     ^

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#824: FILE: include/asm-i386/pgtable.h:131:
+#define _PAGE_NX	(1ULL<<_PAGE_BIT_NX)

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#917: FILE: include/asm-i386/pgtable.h:277:
+	pte.pte_high |= (pgprot_val(newprot) >> 32) & \

WARNING:TYPO_SPELLING: 'cotrol' may be misspelled - perhaps 'control'?
#976: FILE: mm/vmalloc.c:467:
+ *	For tight cotrol over page level allocator and protection flags
   	          ^^^^^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000273887.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 27 warnings, 21 checks, 765 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000273887.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
