WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#50: FILE: net/ipv4/udplite.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#56: FILE: net/ipv4/udplite.c:7:
+ *  Version:    $Id: udplite.c,v 1.19 2006/06/30 07:09:51 gerrit Exp gerrit $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#73: FILE: net/ipv4/udplite.c:24:
+#include <asm/uaccess.h>

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#105: FILE: net/ipv4/udplite.c:56:
+/*
+ *   SNMP MIB for the UDP-Lite layer

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#129: FILE: net/ipv4/udplite.c:80:
+		best = result = udplite_port_rover;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:CODE_INDENT: code indent should use tabs where possible
#139: FILE: net/ipv4/udplite.c:90:
+^I^I^I^I^I^I         (UDP_HTABLE_SIZE - 1));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:INDENTED_LABEL: labels should not be indented
#148: FILE: net/ipv4/udplite.c:99:
+		next:;

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: net/ipv4/udplite.c:103:
+^I^I            i++, result += UDP_HTABLE_SIZE)  {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: net/ipv4/udplite.c:107:
+^I^I^I^I^I                 (UDP_HTABLE_SIZE - 1));$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#163: FILE: net/ipv4/udplite.c:114:
+		udplite_port_rover = snum = result;

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#184: FILE: net/ipv4/udplite.c:135:
+		struct hlist_head *h= &udplite_hash[snum & (UDP_HTABLE_SIZE-1)];
 		                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#184: FILE: net/ipv4/udplite.c:135:
+		struct hlist_head *h= &udplite_hash[snum & (UDP_HTABLE_SIZE-1)];
 		                                                           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#199: FILE: net/ipv4/udplite.c:150:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LINE_SPACING: Please don't use multiple blank lines
#212: FILE: net/ipv4/udplite.c:163:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#229: FILE: net/ipv4/udplite.c:180:
+			int score = (sk->sk_family == PF_INET ? 1 : 0);
+			if (inet->rcv_saddr) {

WARNING:INLINE: plain inline is preferred over __inline__
#261: FILE: net/ipv4/udplite.c:212:
+static __inline__ struct sock *udplite_v4_lookup(u32 saddr, u16 sport,

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#303: FILE: net/ipv4/udplite.c:254:
+/*
+ * This routine is called by the ICMP module when it gets some

ERROR:CODE_INDENT: code indent should use tabs where possible
#318: FILE: net/ipv4/udplite.c:269:
+^I                         (skb->data + (iph->ihl << 2));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#326: FILE: net/ipv4/udplite.c:277:
+^I                                   uh->source, skb->dev->ifindex);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#326: FILE: net/ipv4/udplite.c:277:
+	sk = udplite_v4_lookup(iph->daddr, uh->dest, iph->saddr,
+	                                   uh->source, skb->dev->ifindex);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sk"
#327: FILE: net/ipv4/udplite.c:278:
+	if (sk == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#329: FILE: net/ipv4/udplite.c:280:
+    ^I  ^Ireturn;^I/* No socket for error */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#329: FILE: net/ipv4/udplite.c:280:
+    ^I  ^Ireturn;^I/* No socket for error */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: net/ipv4/udplite.c:280:
+    ^I  ^Ireturn;^I/* No socket for error */$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#365: FILE: net/ipv4/udplite.c:316:
+	/*
+	 *      RFC1122: OK.  Passes ICMP errors back to application, as per

CHECK:SPACING: No space is necessary after a cast
#372: FILE: net/ipv4/udplite.c:323:
+		ip_icmp_error(sk, skb, err, uh->dest, info, (u8 *) (uh + 1));

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#381: FILE: net/ipv4/udplite.c:332:
+/*
+ * Throw away all pending data and cancel the corking. Socket is locked.

ERROR:CODE_INDENT: code indent should use tabs where possible
#409: FILE: net/ipv4/udplite.c:360:
+^I                   len;$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#413: FILE: net/ipv4/udplite.c:364:
+	if ((skb = skb_peek(&sk->sk_write_queue)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#417: FILE: net/ipv4/udplite.c:368:
+	/*
+	 * Create a UDP-Lite header

ERROR:CODE_INDENT: code indent should use tabs where possible
#425: FILE: net/ipv4/udplite.c:376:
+^I        /* Sender has requested partial coverage via sockopts. */$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 31)
#427: FILE: net/ipv4/udplite.c:378:
+			if (up->pcslen == 0)	 /* Full coverage (RFC 3828)  */
+			       cscov = up->len;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 31)
#429: FILE: net/ipv4/udplite.c:380:
+			else {	                 /* Genuine partial coverage  */
+			       cscov = up->pcslen;

CHECK:BRACES: Unbalanced braces around else statement
#429: FILE: net/ipv4/udplite.c:380:
+			else {	                 /* Genuine partial coverage  */

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#437: FILE: net/ipv4/udplite.c:388:
+			/*
+			 * Causes for up->pcslen > up->len (error):

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#459: FILE: net/ipv4/udplite.c:410:
+		/*
+		 * Only one fragment on the socket.

ERROR:CODE_INDENT: code indent should use tabs where possible
#480: FILE: net/ipv4/udplite.c:431:
+        /* RFC 3828: if computed checksum is 0, transmit it as all ones.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#481: FILE: net/ipv4/udplite.c:432:
+         * The transmitted checksum MUST NOT be all zeroes (sec. 3.1).    */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#481: FILE: net/ipv4/udplite.c:432:
+         * The transmitted checksum MUST NOT be all zeroes (sec. 3.1).    */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#493: FILE: net/ipv4/udplite.c:444:
+ * ^IUDP-Lite checksum computation is all in software, hence simpler getfrag$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#493: FILE: net/ipv4/udplite.c:444:
+/*
+ * 	UDP-Lite checksum computation is all in software, hence simpler getfrag

CHECK:SPACING: No space is necessary after a cast
#498: FILE: net/ipv4/udplite.c:449:
+	return memcpy_fromiovecend(to, (struct iovec *) from, offset, len);

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#515: FILE: net/ipv4/udplite.c:466:
+	int corkreq = up->corkflag || msg->msg_flags&MSG_MORE;
 	                                            ^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#521: FILE: net/ipv4/udplite.c:472:
+	/*
+	 *	Check the flags.

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#524: FILE: net/ipv4/udplite.c:475:
+	if (msg->msg_flags&MSG_OOB) /* Mirror BSD error message compatibility */
 	                  ^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#531: FILE: net/ipv4/udplite.c:482:
+		/*
+		 * There are pending frames.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#547: FILE: net/ipv4/udplite.c:498:
+	/*
+	 *	Get and verify the address.

WARNING:TYPO_SPELLING: 'usin' may be misspelled - perhaps 'using'?
#550: FILE: net/ipv4/udplite.c:501:
+		struct sockaddr_in *usin = (struct sockaddr_in *)msg->msg_name;
 		                    ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'usin' may be misspelled - perhaps 'using'?
#551: FILE: net/ipv4/udplite.c:502:
+		if (msg->msg_namelen < sizeof(*usin))
 		                               ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#551: FILE: net/ipv4/udplite.c:502:
+		struct sockaddr_in *usin = (struct sockaddr_in *)msg->msg_name;
+		if (msg->msg_namelen < sizeof(*usin))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#568: FILE: net/ipv4/udplite.c:519:
+		/* Open fast path for connected socket.
+		   Route will not be used, if at least one option is set.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#587: FILE: net/ipv4/udplite.c:538:
+	ipc.addr = faddr = daddr;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rt"
#614: FILE: net/ipv4/udplite.c:565:
+	if (rt == NULL) {

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#617: FILE: net/ipv4/udplite.c:568:
+				    .nl_u = { .ip4_u =
+					      { .daddr = faddr,

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#622: FILE: net/ipv4/udplite.c:573:
+				    .uli_u = { .ports =
+					       { .sport = inet->sport,

ERROR:CODE_INDENT: code indent should use tabs where possible
#625: FILE: net/ipv4/udplite.c:576:
+^I^I                           !(msg->msg_flags&MSG_DONTWAIT));$

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#625: FILE: net/ipv4/udplite.c:576:
+		                           !(msg->msg_flags&MSG_DONTWAIT));
 		                                           ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#637: FILE: net/ipv4/udplite.c:588:
+	if (msg->msg_flags&MSG_CONFIRM)
 	                  ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#643: FILE: net/ipv4/udplite.c:594:
+		daddr = ipc.addr = rt->rt_dst;

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#656: FILE: net/ipv4/udplite.c:607:
+	/*
+	 *	Now cork the socket to pend data.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#667: FILE: net/ipv4/udplite.c:618:
+	err = ip_append_data(sk, udplite_getfrag, msg->msg_iov, ulen,
+			sizeof(struct udplitehdr), &ipc, rt,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#668: FILE: net/ipv4/udplite.c:619:
+			corkreq ? msg->msg_flags|MSG_MORE : msg->msg_flags);
 			                        ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#687: FILE: net/ipv4/udplite.c:638:
+	if (!(msg->msg_flags&MSG_PROBE) || len)
 	                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#700: FILE: net/ipv4/udplite.c:651:
+		struct msghdr msg = {	.msg_flags = flags|MSG_MORE };
 		                     	                  ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#732: FILE: net/ipv4/udplite.c:683:
+	if (!(up->corkflag || (flags&MSG_MORE)))
 	                            ^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#742: FILE: net/ipv4/udplite.c:693:
+/*
+ *	IOCTL requests applicable to the UDP-Lite protocol

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#747: FILE: net/ipv4/udplite.c:698:
+	switch (cmd)
+	{

WARNING:LINE_SPACING: Missing a blank line after declarations
#752: FILE: net/ipv4/udplite.c:703:
+			int amount = atomic_read(&sk->sk_wmem_alloc);
+			return put_user(amount, (int __user *)arg);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "skb"
#763: FILE: net/ipv4/udplite.c:714:
+			if (skb != NULL) {

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#765: FILE: net/ipv4/udplite.c:716:
+				/*
+				 * We will only return the amount

CHECK:LINE_SPACING: Please don't use multiple blank lines
#781: FILE: net/ipv4/udplite.c:732:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#783: FILE: net/ipv4/udplite.c:734:
+ * ^IThis should be easy, if there is something there we$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#783: FILE: net/ipv4/udplite.c:734:
+/*
+ * 	This should be easy, if there is something there we

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#784: FILE: net/ipv4/udplite.c:735:
+ * ^Ireturn it, otherwise we block.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#788: FILE: net/ipv4/udplite.c:739:
+                           struct sock *sk, struct msghdr *msg,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#788: FILE: net/ipv4/udplite.c:739:
+                           struct sock *sk, struct msghdr *msg,$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#797: FILE: net/ipv4/udplite.c:748:
+	/*
+	 *	Check any passed addresses

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#819: FILE: net/ipv4/udplite.c:770:
+	 * of UDP-Lite variable-length checksums.    */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#834: FILE: net/ipv4/udplite.c:785:
+	 * data_ready handler.  */

ERROR:CODE_INDENT: code indent should use tabs where possible
#836: FILE: net/ipv4/udplite.c:787:
+        if(UDPLITE_SKB_CB(skb)->partial)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#836: FILE: net/ipv4/udplite.c:787:
+        if(UDPLITE_SKB_CB(skb)->partial)$

ERROR:SPACING: space required before the open parenthesis '('
#836: FILE: net/ipv4/udplite.c:787:
+        if(UDPLITE_SKB_CB(skb)->partial)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#840: FILE: net/ipv4/udplite.c:791:
+	if (sin)
+	{

ERROR:CODE_INDENT: code indent should use tabs where possible
#855: FILE: net/ipv4/udplite.c:806:
+  ^Iskb_free_datagram(sk, skb);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#855: FILE: net/ipv4/udplite.c:806:
+  ^Iskb_free_datagram(sk, skb);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#855: FILE: net/ipv4/udplite.c:806:
+  ^Iskb_free_datagram(sk, skb);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#857: FILE: net/ipv4/udplite.c:808:
+  ^Ireturn err;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#857: FILE: net/ipv4/udplite.c:808:
+  ^Ireturn err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#857: FILE: net/ipv4/udplite.c:808:
+  ^Ireturn err;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#861: FILE: net/ipv4/udplite.c:812:
+                "(%d.%d.%d.%d:%d -> %d.%d.%d.%d:%d)\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#861: FILE: net/ipv4/udplite.c:812:
+                "(%d.%d.%d.%d:%d -> %d.%d.%d.%d:%d)\n",$

WARNING:SPLIT_STRING: quoted string split across lines
#861: FILE: net/ipv4/udplite.c:812:
+	LIMIT_NETDEBUG(KERN_DEBUG "UDPLITE: csum error "
+                "(%d.%d.%d.%d:%d -> %d.%d.%d.%d:%d)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#874: FILE: net/ipv4/udplite.c:825:
+
+

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#879: FILE: net/ipv4/udplite.c:830:
+	/*
+	 *	1003.1g - break association.

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#903: FILE: net/ipv4/udplite.c:854:
+ * 	1  if the the UDP-Lite system should process it

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#903: FILE: net/ipv4/udplite.c:854:
+ * ^I1  if the the UDP-Lite system should process it$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#905: FILE: net/ipv4/udplite.c:856:
+ * ^I-1 if it should get processed by xfrm4_rcv_encap$

CHECK:SPACING: No space is necessary after a cast
#917: FILE: net/ipv4/udplite.c:868:
+	__u8  *udpdata  = (__u8 *) ulh + sizeof(struct udplitehdr);

CHECK:BRACES: braces {} should be used on all arms of this statement
#935: FILE: net/ipv4/udplite.c:886:
+		if (len == 1 && udpdata[0] == 0xff) {
[...]
+		} else if (   len > sizeof(struct ip_esp_hdr) &&
[...]
+		} else
[...]

ERROR:SPACING: space prohibited after that open parenthesis '('
#937: FILE: net/ipv4/udplite.c:888:
+		} else if (   len > sizeof(struct ip_esp_hdr) &&

ERROR:SPACING: space prohibited before that close parenthesis ')'
#938: FILE: net/ipv4/udplite.c:889:
+			      udpdata32[0] != 0                  )  {

CHECK:BRACES: Unbalanced braces around else statement
#941: FILE: net/ipv4/udplite.c:892:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#947: FILE: net/ipv4/udplite.c:898:
+		if (len == 1 && udpdata[0] == 0xff) {
[...]
+		} else if (len > 2 * sizeof(u32) + sizeof(struct ip_esp_hdr) &&
[...]
+		} else
[...]

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#951: FILE: net/ipv4/udplite.c:902:
+			   udpdata32[0] == 0 && udpdata32[1] == 0) {
+

CHECK:BRACES: Unbalanced braces around else statement
#954: FILE: net/ipv4/udplite.c:905:
+		} else

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1008: FILE: net/ipv4/udplite.c:959:
+	/*
+	 *    Charge it to the socket, dropping if the queue is full.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1015: FILE: net/ipv4/udplite.c:966:
+^I * ^IFIXME: The use of encapsulated packets has not yet been tested.$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1015: FILE: net/ipv4/udplite.c:966:
+	/*
+	 * 	FIXME: The use of encapsulated packets has not yet been tested.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1019: FILE: net/ipv4/udplite.c:970:
+		/*
+		 * This is an encapsulation socket, so let's see if this is

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1024: FILE: net/ipv4/udplite.c:975:
+		 * appropriately.  Otherwise, just fall through and

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1040: FILE: net/ipv4/udplite.c:991:
+		/* FALLTHROUGH -- it's a UDP-Lite Packet */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1043: FILE: net/ipv4/udplite.c:994:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1045: FILE: net/ipv4/udplite.c:996:
+	if ((up->pcflag & UDPLITE_RECV_CC) && UDPLITE_SKB_CB(skb)->partial) {
+

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1047: FILE: net/ipv4/udplite.c:998:
+		/*
+		 * MIB statistics other than incrementing the error count are

WARNING:SPLIT_STRING: quoted string split across lines
#1060: FILE: net/ipv4/udplite.c:1011:
+			LIMIT_NETDEBUG(KERN_WARNING "UDPLITE: partial coverage "
+				"%d while full coverage %d requested\n",

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1095: FILE: net/ipv4/udplite.c:1046:
+/*
+ *	Multicasts and broadcasts go to each listener.

CHECK:BRACES: braces {} should be used on all arms of this statement
#1110: FILE: net/ipv4/udplite.c:1061:
+	if (sk) {
[...]
+	} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#1124: FILE: net/ipv4/udplite.c:1075:
+				int ret = udplite_queue_rcv_skb(sk, skb1);
+				if (ret > 0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1126: FILE: net/ipv4/udplite.c:1077:
+					 * of dropping packets here. */

CHECK:BRACES: Unbalanced braces around else statement
#1131: FILE: net/ipv4/udplite.c:1082:
+	} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#1154: FILE: net/ipv4/udplite.c:1105:
+^I^I^I^I               IPPROTO_UDPLITE, 0);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1154: FILE: net/ipv4/udplite.c:1105:
+		skb->csum = csum_tcpudp_nofold(saddr, daddr, len,
+				               IPPROTO_UDPLITE, 0);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1165: FILE: net/ipv4/udplite.c:1116:
+  ^Istruct sock *sk;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1165: FILE: net/ipv4/udplite.c:1116:
+  ^Istruct sock *sk;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1165: FILE: net/ipv4/udplite.c:1116:
+  ^Istruct sock *sk;$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1167: FILE: net/ipv4/udplite.c:1118:
+	struct rtable *rt = (struct rtable*)skb->dst;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1171: FILE: net/ipv4/udplite.c:1122:
+^Iu16 cscov;    ^I        ^I  /* csum coverage length */$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1174: FILE: net/ipv4/udplite.c:1125:
+	/*
+	 *    Perform sanity checks on the UDP-Lite packet.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1182: FILE: net/ipv4/udplite.c:1133:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1183: FILE: net/ipv4/udplite.c:1134:
+        /* In UDPv4 a zero checksum means that the transmitter generated no$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1184: FILE: net/ipv4/udplite.c:1135:
+         * checksum. UDP-Lite (like IPv6) mandates checksums, hence packets$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1185: FILE: net/ipv4/udplite.c:1136:
+         * with a zero checksum field are illegal.                            */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1185: FILE: net/ipv4/udplite.c:1136:
+         * with a zero checksum field are illegal.                            */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1192: FILE: net/ipv4/udplite.c:1143:
+        UDPLITE_SKB_CB(skb)->cscov   = cscov;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1192: FILE: net/ipv4/udplite.c:1143:
+        UDPLITE_SKB_CB(skb)->cscov   = cscov;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1193: FILE: net/ipv4/udplite.c:1144:
+        UDPLITE_SKB_CB(skb)->partial = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1193: FILE: net/ipv4/udplite.c:1144:
+        UDPLITE_SKB_CB(skb)->partial = 0;$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1198: FILE: net/ipv4/udplite.c:1149:
+		 cscov > len  )	 /* Coverage length exceeds datagram length.  */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1201: FILE: net/ipv4/udplite.c:1152:
+        ^IUDPLITE_SKB_CB(skb)->partial = 1;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1201: FILE: net/ipv4/udplite.c:1152:
+        ^IUDPLITE_SKB_CB(skb)->partial = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1201: FILE: net/ipv4/udplite.c:1152:
+        ^IUDPLITE_SKB_CB(skb)->partial = 1;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1203: FILE: net/ipv4/udplite.c:1154:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1205: FILE: net/ipv4/udplite.c:1156:
+	 * Note the difference: udp.c uses ulen while UDP-Lite uses skb->len  */

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1208: FILE: net/ipv4/udplite.c:1159:
+	if (rt->rt_flags & (RTCF_BROADCAST|RTCF_MULTICAST))
 	                                  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1211: FILE: net/ipv4/udplite.c:1162:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1213: FILE: net/ipv4/udplite.c:1164:
+	sk = udplite_v4_lookup(saddr, ulh->source, daddr,
+				      ulh->dest, skb->dev->ifindex);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sk"
#1215: FILE: net/ipv4/udplite.c:1166:
+	if (sk != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1217: FILE: net/ipv4/udplite.c:1168:
+		int ret = udplite_queue_rcv_skb(sk, skb);
+		sock_put(sk);

WARNING:REPEATED_WORD: Possible repeated word: 'it'
#1220: FILE: net/ipv4/udplite.c:1171:
+		 * it it wants the return to be -protocol, or 0

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1239: FILE: net/ipv4/udplite.c:1190:
+	/*
+	 * Hmm.  We got a UDP-Lite packet to a port to which we

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1243: FILE: net/ipv4/udplite.c:1194:
+	return (0);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1247: FILE: net/ipv4/udplite.c:1198:
+               "(%u.%u.%u.%u:%u -> %u.%u.%u.%u:%u\n)\n", len, NIPQUAD(saddr),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1247: FILE: net/ipv4/udplite.c:1198:
+               "(%u.%u.%u.%u:%u -> %u.%u.%u.%u:%u\n)\n", len, NIPQUAD(saddr),$

WARNING:SPLIT_STRING: quoted string split across lines
#1247: FILE: net/ipv4/udplite.c:1198:
+	LIMIT_NETDEBUG(KERN_INFO "UDPLITE: short packet of %d bytes "
+               "(%u.%u.%u.%u:%u -> %u.%u.%u.%u:%u\n)\n", len, NIPQUAD(saddr),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1248: FILE: net/ipv4/udplite.c:1199:
+	       ntohs(ulh->source), NIPQUAD(daddr), ntohs(ulh->dest)          );

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1253: FILE: net/ipv4/udplite.c:1204:
+	/*
+	 * Coverage length violates RFC 3828: log and discard silently.

ERROR:CODE_INDENT: code indent should use tabs where possible
#1256: FILE: net/ipv4/udplite.c:1207:
+               "(%d.%d.%d.%d:%d -> %d.%d.%d.%d:%d)\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1256: FILE: net/ipv4/udplite.c:1207:
+               "(%d.%d.%d.%d:%d -> %d.%d.%d.%d:%d)\n",$

WARNING:SPLIT_STRING: quoted string split across lines
#1256: FILE: net/ipv4/udplite.c:1207:
+	LIMIT_NETDEBUG(KERN_DEBUG "UDPLITE: bad csum coverage %d/%d "
+               "(%d.%d.%d.%d:%d -> %d.%d.%d.%d:%d)\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#1258: FILE: net/ipv4/udplite.c:1209:
+                           NIPQUAD(daddr), ntohs(ulh->dest)   );$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1258: FILE: net/ipv4/udplite.c:1209:
+                           NIPQUAD(daddr), ntohs(ulh->dest)   );$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1258: FILE: net/ipv4/udplite.c:1209:
+                           NIPQUAD(daddr), ntohs(ulh->dest)   );

ERROR:CODE_INDENT: code indent should use tabs where possible
#1264: FILE: net/ipv4/udplite.c:1215:
+                "(%d.%d.%d.%d:%d -> %d.%d.%d.%d:%d)\n", NIPQUAD(saddr),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1264: FILE: net/ipv4/udplite.c:1215:
+                "(%d.%d.%d.%d:%d -> %d.%d.%d.%d:%d)\n", NIPQUAD(saddr),$

WARNING:SPLIT_STRING: quoted string split across lines
#1264: FILE: net/ipv4/udplite.c:1215:
+	LIMIT_NETDEBUG(KERN_DEBUG "UDPLITE: bad csum "
+                "(%d.%d.%d.%d:%d -> %d.%d.%d.%d:%d)\n", NIPQUAD(saddr),

ERROR:CODE_INDENT: code indent should use tabs where possible
#1265: FILE: net/ipv4/udplite.c:1216:
+                     ntohs(ulh->source), NIPQUAD(daddr), ntohs(ulh->dest));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1265: FILE: net/ipv4/udplite.c:1216:
+                     ntohs(ulh->source), NIPQUAD(daddr), ntohs(ulh->dest));$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1271: FILE: net/ipv4/udplite.c:1222:
+	return (0);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1283: FILE: net/ipv4/udplite.c:1234:
+/*
+ *	Socket option code for UDP-Lite

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1286: FILE: net/ipv4/udplite.c:1237:
+static int do_udplite_setsockopt(struct sock *sk, int level, int optname,
+			      char __user *optval, int optlen)

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1292: FILE: net/ipv4/udplite.c:1243:
+	if (optlen<sizeof(int))
 	          ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1323: FILE: net/ipv4/udplite.c:1274:
+	/* Sender sets actual checksum coverage length via this option.
+	   The case coverage > packet length is handled by send module. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1323: FILE: net/ipv4/udplite.c:1274:
+	   The case coverage > packet length is handled by send module. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1331: FILE: net/ipv4/udplite.c:1282:
+        /* The receiver specifies a minimum checksum coverage value. To make$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1332: FILE: net/ipv4/udplite.c:1283:
+         * sense, this should be set to at least 8 (as done below). If zero is$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1333: FILE: net/ipv4/udplite.c:1284:
+	 * used, this again means full checksum coverage.                     */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1368: FILE: net/ipv4/udplite.c:1319:
+^I^I  ^I         char __user *optval, int __user *optlen)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1368: FILE: net/ipv4/udplite.c:1319:
+^I^I  ^I         char __user *optval, int __user *optlen)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1368: FILE: net/ipv4/udplite.c:1319:
+static int do_udplite_getsockopt(struct sock *sk, int level, int optname,
+		  	         char __user *optval, int __user *optlen)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1373: FILE: net/ipv4/udplite.c:1324:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1411: FILE: net/ipv4/udplite.c:1362:
+^I^I   ^I      char __user *optval, int __user *optlen)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1411: FILE: net/ipv4/udplite.c:1362:
+^I^I   ^I      char __user *optval, int __user *optlen)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1411: FILE: net/ipv4/udplite.c:1362:
+static int udplite_getsockopt(struct sock *sk, int level, int optname,
+		   	      char __user *optval, int __user *optlen)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1428: FILE: net/ipv4/udplite.c:1379:
+ * ^Iudplite_poll - wait for a UDP-Lite event.$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skb"
#1468: FILE: net/ipv4/udplite.c:1419:
+		if (skb == NULL)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1474: FILE: net/ipv4/udplite.c:1425:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1476: FILE: net/ipv4/udplite.c:1427:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1487: FILE: net/ipv4/udplite.c:1438:
+^I.sendmsg ^I   = udplite_sendmsg,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1488: FILE: net/ipv4/udplite.c:1439:
+^I.recvmsg ^I   = udplite_recvmsg,$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1509: FILE: net/ipv4/udplite.c:1460:
+	for (state->bucket=0;state->bucket < UDP_HTABLE_SIZE; ++state->bucket) {
 	                  ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1509: FILE: net/ipv4/udplite.c:1460:
+	for (state->bucket=0;state->bucket < UDP_HTABLE_SIZE; ++state->bucket) {
 	                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1511: FILE: net/ipv4/udplite.c:1462:
+		struct hlist_node *node;
+		sk_for_each(sk, node, &udplite_hash[state->bucket]) {

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#1545: FILE: net/ipv4/udplite.c:1496:
+	return pos? NULL : sk;
 	          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1551: FILE: net/ipv4/udplite.c:1502:
+	return *pos ? udplite_get_idx(seq, *pos-1) : (void *)1;
 	                                       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1615: FILE: net/ipv4/udplite.c:1566:
+	p = proc_net_fops_create(afinfo->name, S_IRUGO, afinfo->seq_fops);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPLIT_STRING: quoted string split across lines
#1641: FILE: net/ipv4/udplite.c:1592:
+	sprintf(tmpbuf, "%4d: %08X:%04X %08X:%04X"
+		" %02X %08X:%08X %02X:%08lX %08X %5d %8d %lu %d %p",

WARNING:SPLIT_STRING: quoted string split across lines
#1654: FILE: net/ipv4/udplite.c:1605:
+			   "  sl  local_address rem_address   st tx_queue "
+			   "rx_queue tr tm->when retrnsmt   uid  timeout "

WARNING:SPLIT_STRING: quoted string split across lines
#1655: FILE: net/ipv4/udplite.c:1606:
+			   "rx_queue tr tm->when retrnsmt   uid  timeout "
+			   "inode");

CHECK:BRACES: Unbalanced braces around else statement
#1656: FILE: net/ipv4/udplite.c:1607:
+	else {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1667: FILE: net/ipv4/udplite.c:1618:
+static struct file_operations udplite4_seq_fops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1676: FILE: net/ipv4/udplite.c:1627:
+
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1688: FILE: net/ipv4/udplite.c:1639:
+EXPORT_SYMBOL(udplite_disconnect);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1689: FILE: net/ipv4/udplite.c:1640:
+EXPORT_SYMBOL(udplite_hash);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1690: FILE: net/ipv4/udplite.c:1641:
+EXPORT_SYMBOL(udplite_hash_lock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1691: FILE: net/ipv4/udplite.c:1642:
+EXPORT_SYMBOL(udplite_ioctl);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1692: FILE: net/ipv4/udplite.c:1643:
+EXPORT_SYMBOL(udplite_port_rover);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1693: FILE: net/ipv4/udplite.c:1644:
+EXPORT_SYMBOL(udplite_prot);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1694: FILE: net/ipv4/udplite.c:1645:
+EXPORT_SYMBOL(udplite_sendmsg);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1695: FILE: net/ipv4/udplite.c:1646:
+EXPORT_SYMBOL(udplite_poll);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1699: FILE: net/ipv4/udplite.c:1650:
+EXPORT_SYMBOL(udplite_proc_unregister);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1729: FILE: net/ipv4/af_inet.c:848:
+/*
+ * UDP-Lite (connectionless, unreliable, variable-coverage, RFC 3828)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1767: FILE: net/ipv4/af_inet.c:937:
+       {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1768: FILE: net/ipv4/af_inet.c:938:
+                .type       =  SOCK_DGRAM,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1768: FILE: net/ipv4/af_inet.c:938:
+                .type       =  SOCK_DGRAM,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1769: FILE: net/ipv4/af_inet.c:939:
+                .protocol   =  IPPROTO_UDPLITE,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1769: FILE: net/ipv4/af_inet.c:939:
+                .protocol   =  IPPROTO_UDPLITE,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1770: FILE: net/ipv4/af_inet.c:940:
+                .prot       =  &udplite_prot,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1770: FILE: net/ipv4/af_inet.c:940:
+                .prot       =  &udplite_prot,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1771: FILE: net/ipv4/af_inet.c:941:
+                .ops        =  &inet_ldgram_ops,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1771: FILE: net/ipv4/af_inet.c:941:
+                .ops        =  &inet_ldgram_ops,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1772: FILE: net/ipv4/af_inet.c:942:
+                .capability = -1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1772: FILE: net/ipv4/af_inet.c:942:
+                .capability = -1,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1773: FILE: net/ipv4/af_inet.c:943:
+                .no_check   =  0,               /* must checksum (RFC 3828) */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1773: FILE: net/ipv4/af_inet.c:943:
+                .no_check   =  0,               /* must checksum (RFC 3828) */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1774: FILE: net/ipv4/af_inet.c:944:
+                .flags      =  INET_PROTOSW_PERMANENT,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1774: FILE: net/ipv4/af_inet.c:944:
+                .flags      =  INET_PROTOSW_PERMANENT,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1775: FILE: net/ipv4/af_inet.c:945:
+       },$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#1802: FILE: net/ipv4/af_inet.c:1238:
+	if (! (  net_statistics[0]     && net_statistics[1]
[...]
+			return -ENOMEM;

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1802: FILE: net/ipv4/af_inet.c:1238:
+	if (! (  net_statistics[0]     && net_statistics[1]
 	    ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1802: FILE: net/ipv4/af_inet.c:1238:
+	if (! (  net_statistics[0]     && net_statistics[1]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1803: FILE: net/ipv4/af_inet.c:1239:
+	if (! (  net_statistics[0]     && net_statistics[1]
+	      && ip_statistics[0]      && ip_statistics[1]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1804: FILE: net/ipv4/af_inet.c:1240:
+	      && ip_statistics[0]      && ip_statistics[1]
+	      && tcp_statistics[0]     && tcp_statistics[1]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1805: FILE: net/ipv4/af_inet.c:1241:
+	      && tcp_statistics[0]     && tcp_statistics[1]
+	      && udp_statistics[0]     && udp_statistics[1]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1806: FILE: net/ipv4/af_inet.c:1242:
+	      && udp_statistics[0]     && udp_statistics[1]
+	      && udplite_statistics[0] && udplite_statistics[1]) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1806: FILE: net/ipv4/af_inet.c:1242:
+	      && udplite_statistics[0] && udplite_statistics[1]) )

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#1809: FILE: net/ipv4/af_inet.c:1245:
 	if (!
[...]
+			return -ENOMEM;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1838: FILE: net/ipv4/af_inet.c:1315:
+		printk(KERN_CRIT "inet_init: Cannot add UDP-Lite protocol\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'inet_init', this function's name, in a string
#1838: FILE: net/ipv4/af_inet.c:1315:
+		printk(KERN_CRIT "inet_init: Cannot add UDP-Lite protocol\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:CODE_INDENT: code indent should use tabs where possible
#1915: FILE: net/ipv4/proc.c:79:
+^I^I             atomic_read(&ip_frag_mem));$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1915: FILE: net/ipv4/proc.c:79:
+	seq_printf(seq, "FRAG: inuse %d memory %d\n", ip_frag_nqueues,
+		             atomic_read(&ip_frag_mem));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "snmp4_udplite_list[i].name"
#1946: FILE: net/ipv4/proc.c:329:
+	for (i = 0; snmp4_udplite_list[i].name != NULL; i++)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "snmp4_udplite_list[i].name"
#1950: FILE: net/ipv4/proc.c:333:
+	for (i = 0; snmp4_udplite_list[i].name != NULL; i++)

CHECK:SPACING: No space is necessary after a cast
#1952: FILE: net/ipv4/proc.c:335:
+			   fold_field((void **) udplite_statistics,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1967: FILE: net/core/sock.c:442:
+			 * hence user must not enable this option.   */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 28)
#1970: FILE: net/core/sock.c:445:
+			else
+ 			    sk->sk_no_check = valbool;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1971: FILE: net/core/sock.c:446:
+ ^I^I^I    sk->sk_no_check = valbool;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1971: FILE: net/core/sock.c:446:
+ ^I^I^I    sk->sk_no_check = valbool;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1971: FILE: net/core/sock.c:446:
+ ^I^I^I    sk->sk_no_check = valbool;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000062607.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 64 errors, 125 warnings, 59 checks, 1906 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000062607.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
