WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#70: 
Signed-Off-By: Muli Ben-Yehuda <mulix@mulix.org>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: arch/x86_64/kernel/pci-gart.c:109:
+static void $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#245: FILE: arch/x86_64/kernel/pci-gart.c:117:
+static void $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#246: FILE: arch/x86_64/kernel/pci-gart.c:118:
+gart_unmap_single(struct device *dev, dma_addr_t addr,size_t size,
                                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: arch/x86_64/kernel/pci-gart.c:121:
+static int $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: arch/x86_64/kernel/pci-gart.c:125:
+static void $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#258: FILE: arch/x86_64/kernel/pci-gart.c:130:
+void* $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#258: FILE: arch/x86_64/kernel/pci-gart.c:130:
+void* 

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#259: FILE: arch/x86_64/kernel/pci-gart.c:131:
+gart_alloc_coherent(struct device *dev, size_t size, $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#262: FILE: arch/x86_64/kernel/pci-gart.c:134:
+int gart_dma_supported(struct device *hwdev, u64 mask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#310: FILE: arch/x86_64/kernel/pci-gart.c:317:
+void gart_free_coherent(struct device *dev, size_t size,
 			 void *vaddr, dma_addr_t bus)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#380: FILE: arch/x86_64/kernel/pci-gart.c:612:
+void gart_unmap_single(struct device *dev, dma_addr_t dma_addr,
 		      size_t size, int direction)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#433: FILE: arch/x86_64/kernel/pci-gart.c:671:
+EXPORT_SYMBOL(gart_unmap_sg);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#435: FILE: arch/x86_64/kernel/pci-gart.c:673:
+EXPORT_SYMBOL(gart_map_single);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#436: FILE: arch/x86_64/kernel/pci-gart.c:674:
+EXPORT_SYMBOL(gart_unmap_single);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#437: FILE: arch/x86_64/kernel/pci-gart.c:675:
+EXPORT_SYMBOL(gart_dma_supported);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#447: FILE: arch/x86_64/kernel/pci-gart.c:679:
+EXPORT_SYMBOL(gart_free_coherent);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#449: FILE: arch/x86_64/kernel/pci-gart.c:681:
+static int no_agp; $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#465: FILE: arch/x86_64/kernel/pci-gart.c:896:
+	printk(KERN_DEBUG "%s: setting dma_ops to gart_dma_ops(%p)\n",

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#476: FILE: arch/x86_64/kernel/pci-gart.c:931:
+    iommu_merge = 1;$

WARNING:TABSTOP: Statements should start on a tabstop
#482: FILE: arch/x86_64/kernel/pci-gart.c:936:
+	    if (!strncmp(p,"off",3)) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 20)
#482: FILE: arch/x86_64/kernel/pci-gart.c:936:
+	    if (!strncmp(p,"off",3)) {
 		    no_iommu = 1;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#482: FILE: arch/x86_64/kernel/pci-gart.c:936:
+	    if (!strncmp(p,"off",3)) {
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#482: FILE: arch/x86_64/kernel/pci-gart.c:936:
+	    if (!strncmp(p,"off",3)) {
 	                        ^

WARNING:TABSTOP: Statements should start on a tabstop
#485: FILE: arch/x86_64/kernel/pci-gart.c:939:
+	    }

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#504: FILE: arch/x86_64/kernel/pci-nommu.c:18:
+/* This tells the BIO block layer to assume merging. Default to off
+   because we cannot guarantee merging later. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#504: FILE: arch/x86_64/kernel/pci-nommu.c:18:
+   because we cannot guarantee merging later. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#552: FILE: arch/x86_64/kernel/pci-nommu.c:81:
+int nommu_map_sg(struct device *hwdev, struct scatterlist *sg,
+	       int nents, int direction)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#568: FILE: arch/x86_64/kernel/pci-nommu.c:85:
+	BUG_ON(direction == DMA_NONE);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:CODE_INDENT: code indent should use tabs where possible
#569: FILE: arch/x86_64/kernel/pci-nommu.c:86:
+ ^Ifor (i = 0; i < nents; i++ ) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#569: FILE: arch/x86_64/kernel/pci-nommu.c:86:
+ ^Ifor (i = 0; i < nents; i++ ) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#569: FILE: arch/x86_64/kernel/pci-nommu.c:86:
+ ^Ifor (i = 0; i < nents; i++ ) {$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#569: FILE: arch/x86_64/kernel/pci-nommu.c:86:
+ 	for (i = 0; i < nents; i++ ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#571: FILE: arch/x86_64/kernel/pci-nommu.c:88:
+^I^IBUG_ON(!s->page); $

WARNING:LINE_SPACING: Missing a blank line after declarations
#571: FILE: arch/x86_64/kernel/pci-nommu.c:88:
+		struct scatterlist *s = &sg[i];
+		BUG_ON(!s->page); 

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#571: FILE: arch/x86_64/kernel/pci-nommu.c:88:
+		BUG_ON(!s->page); 

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#572: FILE: arch/x86_64/kernel/pci-nommu.c:89:
+		s->dma_address = virt_to_bus(page_address(s->page) +s->offset);
 		                                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#585: FILE: arch/x86_64/kernel/pci-nommu.c:101:
+void nommu_unmap_sg(struct device *dev, struct scatterlist *sg,
+		  int nents, int dir)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#589: FILE: arch/x86_64/kernel/pci-nommu.c:104:
+^Ifor (i = 0; i < nents; i++) { $

WARNING:LINE_SPACING: Missing a blank line after declarations
#589: FILE: arch/x86_64/kernel/pci-nommu.c:104:
+	int i;
+	for (i = 0; i < nents; i++) { 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#591: FILE: arch/x86_64/kernel/pci-nommu.c:106:
+^I^IBUG_ON(s->page == NULL); $

WARNING:LINE_SPACING: Missing a blank line after declarations
#591: FILE: arch/x86_64/kernel/pci-nommu.c:106:
+		struct scatterlist *s = &sg[i];
+		BUG_ON(s->page == NULL); 

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#591: FILE: arch/x86_64/kernel/pci-nommu.c:106:
+		BUG_ON(s->page == NULL); 

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!s->page"
#591: FILE: arch/x86_64/kernel/pci-nommu.c:106:
+		BUG_ON(s->page == NULL); 

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#592: FILE: arch/x86_64/kernel/pci-nommu.c:107:
+^I^IBUG_ON(s->dma_address == 0); $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#592: FILE: arch/x86_64/kernel/pci-nommu.c:107:
+		BUG_ON(s->dma_address == 0); 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#594: FILE: arch/x86_64/kernel/pci-nommu.c:109:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#600: FILE: arch/x86_64/kernel/pci-nommu.c:113:
+static void check_ram(void) $

CHECK:SPACING: No space is necessary after a cast
#600: FILE: arch/x86_64/kernel/pci-nommu.c:113:
+static void check_ram(void) 

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#618: FILE: arch/x86_64/kernel/pci-nommu.c:129:
+__initcall(nommu_init);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#644: FILE: arch/x86_64/kernel/setup.c:93:
+extern void* $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#644: FILE: arch/x86_64/kernel/setup.c:93:
+extern void* 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#645: FILE: arch/x86_64/kernel/setup.c:94:
+gart_alloc_coherent(struct device *dev, size_t size, $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#648: FILE: arch/x86_64/kernel/setup.c:97:
+extern int gart_dma_supported(struct device *hwdev, u64 mask);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#694: FILE: arch/x86_64/mm/init.c:50:
+struct dma_mapping_ops* dma_ops;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#709: FILE: arch/x86_64/mm/init.c:403:
+		printk(KERN_DEBUG "%s: setting dma_ops to swiotlb_dma_ops(%p)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#729: FILE: include/asm-x86_64/dma-mapping.h:21:
+	void (*free_coherent)(struct device *dev, size_t size,
+			     void *vaddr, dma_addr_t dma_handle);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#731: FILE: include/asm-x86_64/dma-mapping.h:23:
+	dma_addr_t (*map_single)(struct device *hwdev, void *ptr,
+				     size_t size, int direction);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#733: FILE: include/asm-x86_64/dma-mapping.h:25:
+	void (*unmap_single)(struct device *dev, dma_addr_t addr,
+				 size_t size, int direction);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#763: FILE: include/asm-x86_64/dma-mapping.h:53:
+extern struct dma_mapping_ops* dma_ops;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dma_ops"
#769: FILE: include/asm-x86_64/dma-mapping.h:55:
+#define have_iommu (unlikely(dma_ops != NULL))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#835: FILE: include/asm-x86_64/dma-mapping.h:98:
+dma_unmap_single(struct device *dev, dma_addr_t addr,size_t size,
                                                     ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1061: FILE: include/asm-x86_64/nommu-mapping.h:1:
+#ifndef _ASM_NOMMU_MAPPING_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'implemenation' may be misspelled - perhaps 'implementation'?
#1066: FILE: include/asm-x86_64/nommu-mapping.h:6:
+/* GART DMA mapping implemenation */
                     ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1067: FILE: include/asm-x86_64/nommu-mapping.h:7:
+extern void* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1068: FILE: include/asm-x86_64/nommu-mapping.h:8:
+nommu_alloc_coherent(struct device *dev, size_t size, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1071: FILE: include/asm-x86_64/nommu-mapping.h:11:
+extern void $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1075: FILE: include/asm-x86_64/nommu-mapping.h:15:
+static inline dma_addr_t $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1084: FILE: include/asm-x86_64/nommu-mapping.h:24:
+	if ((addr+size) & ~*hwdev->dma_mask)
 	         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1089: FILE: include/asm-x86_64/nommu-mapping.h:29:
+static inline void $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1090: FILE: include/asm-x86_64/nommu-mapping.h:30:
+nommu_unmap_single(struct device *dev, dma_addr_t addr,size_t size,
                                                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1098: FILE: include/asm-x86_64/nommu-mapping.h:38:
+extern int $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1102: FILE: include/asm-x86_64/nommu-mapping.h:42:
+extern void $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1106: FILE: include/asm-x86_64/nommu-mapping.h:46:
+static inline int $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1109: FILE: include/asm-x86_64/nommu-mapping.h:49:
+        /*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1110: FILE: include/asm-x86_64/nommu-mapping.h:50:
+         * we fall back to GFP_DMA when the mask isn't all 1s,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1111: FILE: include/asm-x86_64/nommu-mapping.h:51:
+         * so we can't guarantee allocations that must be$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1112: FILE: include/asm-x86_64/nommu-mapping.h:52:
+         * within a tighter range than GFP_DMA..$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1115: FILE: include/asm-x86_64/nommu-mapping.h:55:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1116: FILE: include/asm-x86_64/nommu-mapping.h:56:
+        if (mask < 0x00ffffff)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1116: FILE: include/asm-x86_64/nommu-mapping.h:56:
+        if (mask < 0x00ffffff)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1117: FILE: include/asm-x86_64/nommu-mapping.h:57:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1117: FILE: include/asm-x86_64/nommu-mapping.h:57:
+                return 0;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1175: FILE: include/asm-x86_64/swiotlb.h:43:
+extern int swiotlb_dma_supported(struct device *hwdev, u64 mask);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000137629.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 39 errors, 32 warnings, 13 checks, 965 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000137629.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
