WARNING:TYPO_SPELLING: 'persistant' may be misspelled - perhaps 'persistent'?
#32: 
persistant data for the apm driver (thus the apm_bios_info -> apm_info
^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#47: 
diff -ruN 2.4.0-test12pre3/arch/i386/kernel/apm.c 2.4.0-test12pre3-APM.1/arch/i386/kernel/apm.c

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#73: FILE: arch/i386/kernel/apm.c:351:
+static struct apm_user *	user_list;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#76: FILE: arch/i386/kernel/apm.c:353:
+static char			driver_version[] = "1.14";	/* no spaces */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'enable == 0'
#103: FILE: arch/i386/kernel/apm.c:677:
+	if ((enable == 0) && (apm_info.bios.flags & APM_BIOS_DISENGAGED))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#140: FILE: arch/i386/kernel/apm.c:743:
 	if ((enable == 0) && (device == APM_DEVICE_ALL)
+	    && (apm_info.bios.flags & APM_BIOS_DISABLED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'apm_info.connection_version > 0x100'
#184: FILE: arch/i386/kernel/apm.c:1073:
+		if ((apm_info.connection_version > 0x100) && (pending_count-- <= 0)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#251: FILE: arch/i386/kernel/apm.c:1456:
+		printk(KERN_INFO "apm: Connection version %d.%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#252: FILE: arch/i386/kernel/apm.c:1457:
+		printk(KERN_INFO "apm: Connection version %d.%d\n",
+			(apm_info.connection_version >> 8) & 0xff,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'apm_info.connection_version > 0x0100'
#276: FILE: arch/i386/kernel/apm.c:1475:
+	if ((apm_info.bios.flags & APM_BIOS_DISENGAGED)
+	    && (apm_info.connection_version > 0x0100)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#277: FILE: arch/i386/kernel/apm.c:1476:
+	if ((apm_info.bios.flags & APM_BIOS_DISENGAGED)
+	    && (apm_info.connection_version > 0x0100)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'smp_num_cpus == 1'
#289: FILE: arch/i386/kernel/apm.c:1484:
+	if (debug && (smp_num_cpus == 1)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#388: FILE: arch/i386/kernel/apm.c:1638:
+			printk(" cseg16 len %x", apm_info.bios.cseg_16_len);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'apm_info.connection_version > 0x0100'
#442: FILE: arch/i386/kernel/apm.c:1715:
+	if (((apm_info.bios.flags & APM_BIOS_DISENGAGED) == 0)
+	    && (apm_info.connection_version > 0x0100)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#443: FILE: arch/i386/kernel/apm.c:1716:
+	if (((apm_info.bios.flags & APM_BIOS_DISENGAGED) == 0)
+	    && (apm_info.connection_version > 0x0100)) {

WARNING:TYPO_SPELLING: 'persistant' may be misspelled - perhaps 'persistent'?
#500: FILE: include/linux/apm_bios.h:49:
+ * Data for APM that is persistant across module unload/load
                         ^^^^^^^^^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000563614.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 6 warnings, 9 checks, 446 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000563614.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
