WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#124: FILE: include/asm-i386/mach-default/mach_desc.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#142: FILE: include/asm-i386/mach-default/mach_desc.h:19:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#143: FILE: include/asm-i386/mach-default/mach_desc.h:20:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#150: FILE: include/asm-i386/mach-default/mach_desc.h:27:
+#define load_TR_desc() __asm__ __volatile__("ltr %w0"::"q" (GDT_ENTRY_TSS*8))
                                                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#150: FILE: include/asm-i386/mach-default/mach_desc.h:27:
+#define load_TR_desc() __asm__ __volatile__("ltr %w0"::"q" (GDT_ENTRY_TSS*8))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#151: FILE: include/asm-i386/mach-default/mach_desc.h:28:
+#define load_LDT_desc() __asm__ __volatile__("lldt %w0"::"q" (GDT_ENTRY_LDT*8))
                                                                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#151: FILE: include/asm-i386/mach-default/mach_desc.h:28:
+#define load_LDT_desc() __asm__ __volatile__("lldt %w0"::"q" (GDT_ENTRY_LDT*8))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#153: FILE: include/asm-i386/mach-default/mach_desc.h:30:
+#define load_gdt(dtr) __asm__ __volatile("lgdt %0"::"m" (*dtr))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dtr' may be better as '(dtr)' to avoid precedence issues
#153: FILE: include/asm-i386/mach-default/mach_desc.h:30:
+#define load_gdt(dtr) __asm__ __volatile("lgdt %0"::"m" (*dtr))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#154: FILE: include/asm-i386/mach-default/mach_desc.h:31:
+#define load_idt(dtr) __asm__ __volatile("lidt %0"::"m" (*dtr))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dtr' may be better as '(dtr)' to avoid precedence issues
#154: FILE: include/asm-i386/mach-default/mach_desc.h:31:
+#define load_idt(dtr) __asm__ __volatile("lidt %0"::"m" (*dtr))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#155: FILE: include/asm-i386/mach-default/mach_desc.h:32:
+#define load_tr(tr) __asm__ __volatile("ltr %0"::"mr" (tr))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#156: FILE: include/asm-i386/mach-default/mach_desc.h:33:
+#define load_ldt(ldt) __asm__ __volatile("lldt %0"::"mr" (ldt))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#158: FILE: include/asm-i386/mach-default/mach_desc.h:35:
+#define store_gdt(dtr) __asm__ ("sgdt %0":"=m" (*dtr))
                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#158: FILE: include/asm-i386/mach-default/mach_desc.h:35:
+#define store_gdt(dtr) __asm__ ("sgdt %0":"=m" (*dtr))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dtr' may be better as '(dtr)' to avoid precedence issues
#158: FILE: include/asm-i386/mach-default/mach_desc.h:35:
+#define store_gdt(dtr) __asm__ ("sgdt %0":"=m" (*dtr))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#159: FILE: include/asm-i386/mach-default/mach_desc.h:36:
+#define store_idt(dtr) __asm__ ("sidt %0":"=m" (*dtr))
                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#159: FILE: include/asm-i386/mach-default/mach_desc.h:36:
+#define store_idt(dtr) __asm__ ("sidt %0":"=m" (*dtr))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dtr' may be better as '(dtr)' to avoid precedence issues
#159: FILE: include/asm-i386/mach-default/mach_desc.h:36:
+#define store_idt(dtr) __asm__ ("sidt %0":"=m" (*dtr))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#160: FILE: include/asm-i386/mach-default/mach_desc.h:37:
+#define store_tr(tr) __asm__ ("str %0":"=mr" (tr))
                                       ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#160: FILE: include/asm-i386/mach-default/mach_desc.h:37:
+#define store_tr(tr) __asm__ ("str %0":"=mr" (tr))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#161: FILE: include/asm-i386/mach-default/mach_desc.h:38:
+#define store_ldt(ldt) __asm__ ("sldt %0":"=mr" (ldt))
                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#161: FILE: include/asm-i386/mach-default/mach_desc.h:38:
+#define store_ldt(ldt) __asm__ ("sldt %0":"=mr" (ldt))

WARNING:LINE_SPACING: Missing a blank line after declarations
#166: FILE: include/asm-i386/mach-default/mach_desc.h:43:
+	unsigned int tr;
+	__asm__ ("str %w0":"=q" (tr));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#166: FILE: include/asm-i386/mach-default/mach_desc.h:43:
+	__asm__ ("str %w0":"=q" (tr));
 	                  ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#173: FILE: include/asm-i386/mach-default/mach_desc.h:50:
+	unsigned int ldt;
+	__asm__ ("sldt %w0":"=q" (ldt));

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#173: FILE: include/asm-i386/mach-default/mach_desc.h:50:
+	__asm__ ("sldt %w0":"=q" (ldt));
 	                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#180: FILE: include/asm-i386/mach-default/mach_desc.h:57:
+	_set_tssldt_desc(&per_cpu(cpu_gdt_table, cpu)[entry], (int)addr,
+		offsetof(struct tss_struct, __cacheline_filler) - 1, 0x89);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#185: FILE: include/asm-i386/mach-default/mach_desc.h:62:
+	_set_tssldt_desc(&per_cpu(cpu_gdt_table, cpu)[GDT_ENTRY_LDT], (int)addr, ((size << 3)-1), 0x82);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#185: FILE: include/asm-i386/mach-default/mach_desc.h:62:
+	_set_tssldt_desc(&per_cpu(cpu_gdt_table, cpu)[GDT_ENTRY_LDT], (int)addr, ((size << 3)-1), 0x82);
 	                                                                                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#190: FILE: include/asm-i386/mach-default/mach_desc.h:67:
+	__u32 *lp = (__u32 *)((char *)ldt + entry*8);
 	                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#192: FILE: include/asm-i386/mach-default/mach_desc.h:69:
+	*(lp+1) = entry_b;
 	    ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#201: FILE: include/asm-i386/mach-default/mach_desc.h:78:
+#define C(i) per_cpu(cpu_gdt_table, cpu)[GDT_ENTRY_TLS_MIN + i] = t->tls_array[i]

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#201: FILE: include/asm-i386/mach-default/mach_desc.h:78:
+#define C(i) per_cpu(cpu_gdt_table, cpu)[GDT_ENTRY_TLS_MIN + i] = t->tls_array[i]

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'i' may be better as '(i)' to avoid precedence issues
#201: FILE: include/asm-i386/mach-default/mach_desc.h:78:
+#define C(i) per_cpu(cpu_gdt_table, cpu)[GDT_ENTRY_TLS_MIN + i] = t->tls_array[i]

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000161981.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 4 warnings, 18 checks, 146 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000161981.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
