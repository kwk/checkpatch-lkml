WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
> > > There just isn't enough content to justify a stacker specific filesystem IMHO.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#143: FILE: security/seclvl.c:157:
+static ssize_t seclvl_read_file(struct file *filp, char __user *buf,
                                              ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#144: FILE: security/seclvl.c:158:
+static ssize_t seclvl_read_file(struct file *filp, char __user *buf,
+					size_t count, loff_t *ppos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#160: FILE: security/seclvl.c:199:
+seclvl_write_file(struct file * file, const char __user * buf,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#160: FILE: security/seclvl.c:199:
+seclvl_write_file(struct file * file, const char __user * buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#161: FILE: security/seclvl.c:200:
+seclvl_write_file(struct file * file, const char __user * buf,
+			      size_t count, loff_t *ppos)

CHECK:SPACING: No space is necessary after a cast
#176: FILE: security/seclvl.c:211:
+	page = (char *) get_zeroed_page(GFP_KERNEL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#185: FILE: security/seclvl.c:220:
+	if (sscanf(page, "%d", &val) != 1) {
+		err = -EINVAL;
+		goto out;
 	}

WARNING:SPLIT_STRING: quoted string split across lines
#202: FILE: security/seclvl.c:234:
 		seclvl_printk(0, KERN_ERR, "Failure advancing security level "
+			      "to %d\n", val);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#216: FILE: security/seclvl.c:243:
+static struct file_operations seclvl_file_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#254: FILE: security/seclvl.c:294:
+passwd_write_file(struct file * file, const char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#254: FILE: security/seclvl.c:294:
+passwd_write_file(struct file * file, const char __user * buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#255: FILE: security/seclvl.c:295:
+passwd_write_file(struct file * file, const char __user * buf,
+				size_t count, loff_t *ppos)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#274: FILE: security/seclvl.c:316:
+	if (*ppos != 0) {
+		return -EINVAL;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#283: FILE: security/seclvl.c:325:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#292: FILE: security/seclvl.c:332:
+	if ((rc = plaintext_to_sha1(tmp, page, len))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#312: FILE: security/seclvl.c:352:
+static struct file_operations passwd_file_ops = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#341: FILE: security/seclvl.c:623:
+	seclvl_ino = securityfs_create_file("seclvl", S_IRUGO | S_IWUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#342: FILE: security/seclvl.c:624:
+	seclvl_ino = securityfs_create_file("seclvl", S_IRUGO | S_IWUSR,
+				dir_ino, NULL, &seclvl_file_ops);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#348: FILE: security/seclvl.c:628:
+		passwd_ino = securityfs_create_file("passwd", S_IRUGO | S_IWUSR,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#349: FILE: security/seclvl.c:629:
+		passwd_ino = securityfs_create_file("passwd", S_IRUGO | S_IWUSR,
+				dir_ino, NULL, &passwd_file_ops);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#378: FILE: security/seclvl.c:682:
+	if ((rc = seclvlfs_register())) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000170700.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 9 warnings, 6 checks, 321 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000170700.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
