WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: mm/cart.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#43: FILE: mm/cart.c:2:
+ * mm/cart.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'chello' may be misspelled - perhaps 'cello'?
#45: FILE: mm/cart.c:4:
+ * Written by Peter Zijlstra <a.p.zijlstra@chello.nl>
                                            ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <nr_Ns>
#112: FILE: mm/cart.c:71:
+#define nr_Ns ((zone)->nr_shortterm)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <nr_Nl>
#113: FILE: mm/cart.c:72:
+#define nr_Nl (size_T1 + size_T2 - nr_Ns)

WARNING:LINE_SPACING: Missing a blank line after declarations
#119: FILE: mm/cart.c:78:
+	struct zone *zone;
+	for_each_zone(zone) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#133: FILE: mm/cart.c:92:
+		cart_q = min(cart_q + dq, 2*cart_cB - T2B(size_T1));
 		                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#140: FILE: mm/cart.c:99:
+	unsigned long target = cart_cB - T2B(size_T1);
+	if (cart_q <= target)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#169: FILE: mm/cart.c:128:
+			if (likely(size_B1)) --size_B1;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#179: FILE: mm/cart.c:138:
+			if (likely(size_B2)) --size_B2;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#202: FILE: mm/cart.c:161:
+	BUG_ON(!PageLRU(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_page' - possible side-effects?
#209: FILE: mm/cart.c:168:
+#define prefetch_next_lru_page(_page, _base, _field)			\
+	do {								\
+		if ((_page)->lru.next != _base) {			\
+			struct page *next;				\
+			\
+			next = head_to_page(&(_page->lru));		\
+			prefetch(&next->_field);			\
+		}							\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_base' may be better as '(_base)' to avoid precedence issues
#209: FILE: mm/cart.c:168:
+#define prefetch_next_lru_page(_page, _base, _field)			\
+	do {								\
+		if ((_page)->lru.next != _base) {			\
+			struct page *next;				\
+			\
+			next = head_to_page(&(_page->lru));		\
+			prefetch(&next->_field);			\
+		}							\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_field' may be better as '(_field)' to avoid precedence issues
#209: FILE: mm/cart.c:168:
+#define prefetch_next_lru_page(_page, _base, _field)			\
+	do {								\
+		if ((_page)->lru.next != _base) {			\
+			struct page *next;				\
+			\
+			next = head_to_page(&(_page->lru));		\
+			prefetch(&next->_field);			\
+		}							\
+	} while (0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around _page->lru
#214: FILE: mm/cart.c:173:
+			next = head_to_page(&(_page->lru));		\

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_page' - possible side-effects?
#219: FILE: mm/cart.c:178:
+#define prefetch_prev_lru_page(_page, _base, _field)			\
+	do {								\
+		if ((_page)->lru.prev != _base) {			\
+			struct page *prev;				\
+			\
+			prev = tail_to_page(&(_page->lru));		\
+			prefetch(&prev->_field);			\
+		}							\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_base' may be better as '(_base)' to avoid precedence issues
#219: FILE: mm/cart.c:178:
+#define prefetch_prev_lru_page(_page, _base, _field)			\
+	do {								\
+		if ((_page)->lru.prev != _base) {			\
+			struct page *prev;				\
+			\
+			prev = tail_to_page(&(_page->lru));		\
+			prefetch(&prev->_field);			\
+		}							\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_field' may be better as '(_field)' to avoid precedence issues
#219: FILE: mm/cart.c:178:
+#define prefetch_prev_lru_page(_page, _base, _field)			\
+	do {								\
+		if ((_page)->lru.prev != _base) {			\
+			struct page *prev;				\
+			\
+			prev = tail_to_page(&(_page->lru));		\
+			prefetch(&prev->_field);			\
+		}							\
+	} while (0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around _page->lru
#224: FILE: mm/cart.c:183:
+			prev = tail_to_page(&(_page->lru));		\

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_page' - possible side-effects?
#234: FILE: mm/cart.c:193:
+#define prefetchw_next_lru_page(_page, _base, _field)			\
+	do {								\
+		if ((_page)->lru.next != _base) {			\
+			struct page *next;				\
+			\
+			next = head_to_page(&(_page->lru));		\
+			prefetchw(&next->_field);			\
+		}							\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_base' may be better as '(_base)' to avoid precedence issues
#234: FILE: mm/cart.c:193:
+#define prefetchw_next_lru_page(_page, _base, _field)			\
+	do {								\
+		if ((_page)->lru.next != _base) {			\
+			struct page *next;				\
+			\
+			next = head_to_page(&(_page->lru));		\
+			prefetchw(&next->_field);			\
+		}							\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_field' may be better as '(_field)' to avoid precedence issues
#234: FILE: mm/cart.c:193:
+#define prefetchw_next_lru_page(_page, _base, _field)			\
+	do {								\
+		if ((_page)->lru.next != _base) {			\
+			struct page *next;				\
+			\
+			next = head_to_page(&(_page->lru));		\
+			prefetchw(&next->_field);			\
+		}							\
+	} while (0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around _page->lru
#239: FILE: mm/cart.c:198:
+			next = head_to_page(&(_page->lru));		\

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_page' - possible side-effects?
#244: FILE: mm/cart.c:203:
+#define prefetchw_prev_lru_page(_page, _base, _field)			\
+	do {								\
+		if ((_page)->lru.prev != _base) {			\
+			struct page *prev;				\
+			\
+			prev = tail_to_page(&(_page->lru));		\
+			prefetchw(&prev->_field);			\
+		}							\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_base' may be better as '(_base)' to avoid precedence issues
#244: FILE: mm/cart.c:203:
+#define prefetchw_prev_lru_page(_page, _base, _field)			\
+	do {								\
+		if ((_page)->lru.prev != _base) {			\
+			struct page *prev;				\
+			\
+			prev = tail_to_page(&(_page->lru));		\
+			prefetchw(&prev->_field);			\
+		}							\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_field' may be better as '(_field)' to avoid precedence issues
#244: FILE: mm/cart.c:203:
+#define prefetchw_prev_lru_page(_page, _base, _field)			\
+	do {								\
+		if ((_page)->lru.prev != _base) {			\
+			struct page *prev;				\
+			\
+			prev = tail_to_page(&(_page->lru));		\
+			prefetchw(&prev->_field);			\
+		}							\
+	} while (0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around _page->lru
#249: FILE: mm/cart.c:208:
+			prev = tail_to_page(&(_page->lru));		\

WARNING:LINE_SPACING: Missing a blank line after declarations
#326: FILE: mm/cart.c:285:
+		struct page *page = head_to_page(list);
+		list_move_tail(&page->lru, head);

WARNING:LINE_SPACING: Missing a blank line after declarations
#336: FILE: mm/cart.c:295:
+		struct page *page = tail_to_page(list);
+		list_move(&page->lru, head);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#511: FILE: mm/cart.c:470:
+			wr2 = cart_rebalance_T2(zone, &l_t2, nr_dst/2, nr_scanned,
 			                                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#514: FILE: mm/cart.c:473:
+			wr1 = cart_rebalance_T1(zone, &l_t1, nr_dst/2, nr_scanned,
 			                                           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#527: FILE: mm/cart.c:486:
+				BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#529: FILE: mm/cart.c:488:
+				BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#541: FILE: mm/cart.c:500:
+				BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#543: FILE: mm/cart.c:502:
+				BUG();

WARNING:TYPO_SPELLING: 'agains' may be misspelled - perhaps 'against'?
#565: FILE: mm/cart.c:524:
+ * writeback has started agains them. Rotate as referenced to let the relaim
                          ^^^^^^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#580: FILE: mm/cart.c:539:
+	while (!list_empty(list))
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#583: FILE: mm/cart.c:542:
+		struct page *page = tail_to_page(list);
+		prefetchw_prev_lru_page(page, list, flags);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#586: FILE: mm/cart.c:545:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#589: FILE: mm/cart.c:548:
+				BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#632: FILE: mm/cart.c:591:
+			BUG();

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#671: FILE: mm/cart.c:630:
+	switch (listid_evict) {
+		case NR_b1:
[...]
+		case NR_b2:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#673: FILE: mm/cart.c:632:
+			if (likely(size_B1)) --size_B1;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#677: FILE: mm/cart.c:636:
+			if (likely(size_B2)) --size_B2;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#721: FILE: include/linux/mm_inline.h:5:
+	if (TestClearPageActive(page)) {
[...]
 	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#726: FILE: include/linux/mm_inline.h:10:
+	if (TestClearPageLongTerm(page)) {
[...]
+	} else {
[...]

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#743: FILE: include/linux/mmzone.h:146:
+	spinlock_t		lru_lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#750: FILE: include/linux/mmzone.h:153:
+^Iunsigned long ^I^Inr_evicted_active;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#751: FILE: include/linux/mmzone.h:154:
+^Iunsigned long ^I^Inr_evicted_inactive;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#752: FILE: include/linux/mmzone.h:155:
+^Iunsigned long ^I^Inr_shortterm;^I/* number of short term pages */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#754: FILE: include/linux/mmzone.h:157:
+^Iunsigned long ^I^Inr_q;^I^I/* q from the cart paper */$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#808: FILE: include/linux/swap.h:175:
+extern void cart_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#809: FILE: include/linux/swap.h:176:
+extern void __cart_insert(struct zone *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zone *' should also have an identifier name
#809: FILE: include/linux/swap.h:176:
+extern void __cart_insert(struct zone *, struct page *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#809: FILE: include/linux/swap.h:176:
+extern void __cart_insert(struct zone *, struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#810: FILE: include/linux/swap.h:177:
+extern unsigned long cart_replace(struct zone *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zone *' should also have an identifier name
#810: FILE: include/linux/swap.h:177:
+extern unsigned long cart_replace(struct zone *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#810: FILE: include/linux/swap.h:177:
+extern unsigned long cart_replace(struct zone *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#810: FILE: include/linux/swap.h:177:
+extern unsigned long cart_replace(struct zone *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#810: FILE: include/linux/swap.h:177:
+extern unsigned long cart_replace(struct zone *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#810: FILE: include/linux/swap.h:177:
+extern unsigned long cart_replace(struct zone *, struct list_head *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#813: FILE: include/linux/swap.h:180:
+extern void cart_reinsert(struct zone *, struct list_head *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zone *' should also have an identifier name
#813: FILE: include/linux/swap.h:180:
+extern void cart_reinsert(struct zone *, struct list_head *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#813: FILE: include/linux/swap.h:180:
+extern void cart_reinsert(struct zone *, struct list_head *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#814: FILE: include/linux/swap.h:181:
+extern void __cart_rotate_reclaimable(struct zone *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zone *' should also have an identifier name
#814: FILE: include/linux/swap.h:181:
+extern void __cart_rotate_reclaimable(struct zone *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#814: FILE: include/linux/swap.h:181:
+extern void __cart_rotate_reclaimable(struct zone *, struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#815: FILE: include/linux/swap.h:182:
+extern void __cart_remember(struct zone *, struct page*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zone *' should also have an identifier name
#815: FILE: include/linux/swap.h:182:
+extern void __cart_remember(struct zone *, struct page*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page*' should also have an identifier name
#815: FILE: include/linux/swap.h:182:
+extern void __cart_remember(struct zone *, struct page*);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000147187.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 36 warnings, 28 checks, 771 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000147187.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
