ERROR:SPACING: space required after that ',' (ctx:VxV)
#45: FILE: crypto/sha1.c:42:
+#define f1(x,y,z)   ( z ^ (x & (y^z)) )		/* Rounds  0-19: x ? y : z */
             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#45: FILE: crypto/sha1.c:42:
+#define f1(x,y,z)   ( z ^ (x & (y^z)) )		/* Rounds  0-19: x ? y : z */
               ^

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#45: FILE: crypto/sha1.c:42:
+#define f1(x,y,z)   ( z ^ (x & (y^z)) )		/* Rounds  0-19: x ? y : z */
                                  ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#45: FILE: crypto/sha1.c:42:
+#define f1(x,y,z)   ( z ^ (x & (y^z)) )		/* Rounds  0-19: x ? y : z */

ERROR:SPACING: space prohibited before that close parenthesis ')'
#45: FILE: crypto/sha1.c:42:
+#define f1(x,y,z)   ( z ^ (x & (y^z)) )		/* Rounds  0-19: x ? y : z */

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#45: FILE: crypto/sha1.c:42:
+#define f1(x,y,z)   ( z ^ (x & (y^z)) )		/* Rounds  0-19: x ? y : z */

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'y' may be better as '(y)' to avoid precedence issues
#45: FILE: crypto/sha1.c:42:
+#define f1(x,y,z)   ( z ^ (x & (y^z)) )		/* Rounds  0-19: x ? y : z */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'z' - possible side-effects?
#45: FILE: crypto/sha1.c:42:
+#define f1(x,y,z)   ( z ^ (x & (y^z)) )		/* Rounds  0-19: x ? y : z */

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'z' may be better as '(z)' to avoid precedence issues
#45: FILE: crypto/sha1.c:42:
+#define f1(x,y,z)   ( z ^ (x & (y^z)) )		/* Rounds  0-19: x ? y : z */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#46: FILE: crypto/sha1.c:43:
+#define f2(x,y,z)   (x ^ y ^ z)			/* Rounds 20-39: XOR */
             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#46: FILE: crypto/sha1.c:43:
+#define f2(x,y,z)   (x ^ y ^ z)			/* Rounds 20-39: XOR */
               ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#46: FILE: crypto/sha1.c:43:
+#define f2(x,y,z)   (x ^ y ^ z)			/* Rounds 20-39: XOR */

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'y' may be better as '(y)' to avoid precedence issues
#46: FILE: crypto/sha1.c:43:
+#define f2(x,y,z)   (x ^ y ^ z)			/* Rounds 20-39: XOR */

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'z' may be better as '(z)' to avoid precedence issues
#46: FILE: crypto/sha1.c:43:
+#define f2(x,y,z)   (x ^ y ^ z)			/* Rounds 20-39: XOR */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#47: FILE: crypto/sha1.c:44:
+#define f3(x,y,z)   ( (x & y) + (z & (x ^ y)) )	/* Rounds 40-59: majority */
             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#47: FILE: crypto/sha1.c:44:
+#define f3(x,y,z)   ( (x & y) + (z & (x ^ y)) )	/* Rounds 40-59: majority */
               ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#47: FILE: crypto/sha1.c:44:
+#define f3(x,y,z)   ( (x & y) + (z & (x ^ y)) )	/* Rounds 40-59: majority */

ERROR:SPACING: space prohibited before that close parenthesis ')'
#47: FILE: crypto/sha1.c:44:
+#define f3(x,y,z)   ( (x & y) + (z & (x ^ y)) )	/* Rounds 40-59: majority */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#47: FILE: crypto/sha1.c:44:
+#define f3(x,y,z)   ( (x & y) + (z & (x ^ y)) )	/* Rounds 40-59: majority */

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#47: FILE: crypto/sha1.c:44:
+#define f3(x,y,z)   ( (x & y) + (z & (x ^ y)) )	/* Rounds 40-59: majority */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#47: FILE: crypto/sha1.c:44:
+#define f3(x,y,z)   ( (x & y) + (z & (x ^ y)) )	/* Rounds 40-59: majority */

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'y' may be better as '(y)' to avoid precedence issues
#47: FILE: crypto/sha1.c:44:
+#define f3(x,y,z)   ( (x & y) + (z & (x ^ y)) )	/* Rounds 40-59: majority */

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'z' may be better as '(z)' to avoid precedence issues
#47: FILE: crypto/sha1.c:44:
+#define f3(x,y,z)   ( (x & y) + (z & (x ^ y)) )	/* Rounds 40-59: majority */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#48: FILE: crypto/sha1.c:45:
+#define f4(x,y,z)   (x ^ y ^ z)			/* Rounds 60-79: XOR */
             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#48: FILE: crypto/sha1.c:45:
+#define f4(x,y,z)   (x ^ y ^ z)			/* Rounds 60-79: XOR */
               ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#48: FILE: crypto/sha1.c:45:
+#define f4(x,y,z)   (x ^ y ^ z)			/* Rounds 60-79: XOR */

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'y' may be better as '(y)' to avoid precedence issues
#48: FILE: crypto/sha1.c:45:
+#define f4(x,y,z)   (x ^ y ^ z)			/* Rounds 60-79: XOR */

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'z' may be better as '(z)' to avoid precedence issues
#48: FILE: crypto/sha1.c:45:
+#define f4(x,y,z)   (x ^ y ^ z)			/* Rounds 60-79: XOR */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#65: FILE: crypto/sha1.c:55:
+#define R0(v,w,x,y,z,i) z+=f1(w,x,y)+blk0(i)+K1+rol(v,5); w=rol(w,30);
             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#65: FILE: crypto/sha1.c:55:
+#define R0(v,w,x,y,z,i) z+=f1(w,x,y)+blk0(i)+K1+rol(v,5); w=rol(w,30);
               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#65: FILE: crypto/sha1.c:55:
+#define R0(v,w,x,y,z,i) z+=f1(w,x,y)+blk0(i)+K1+rol(v,5); w=rol(w,30);
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#65: FILE: crypto/sha1.c:55:
+#define R0(v,w,x,y,z,i) z+=f1(w,x,y)+blk0(i)+K1+rol(v,5); w=rol(w,30);
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#65: FILE: crypto/sha1.c:55:
+#define R0(v,w,x,y,z,i) z+=f1(w,x,y)+blk0(i)+K1+rol(v,5); w=rol(w,30);
                     ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#65: FILE: crypto/sha1.c:55:
+#define R0(v,w,x,y,z,i) z+=f1(w,x,y)+blk0(i)+K1+rol(v,5); w=rol(w,30);
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#65: FILE: crypto/sha1.c:55:
+#define R0(v,w,x,y,z,i) z+=f1(w,x,y)+blk0(i)+K1+rol(v,5); w=rol(w,30);
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#65: FILE: crypto/sha1.c:55:
+#define R0(v,w,x,y,z,i) z+=f1(w,x,y)+blk0(i)+K1+rol(v,5); w=rol(w,30);
                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#65: FILE: crypto/sha1.c:55:
+#define R0(v,w,x,y,z,i) z+=f1(w,x,y)+blk0(i)+K1+rol(v,5); w=rol(w,30);
                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#65: FILE: crypto/sha1.c:55:
+#define R0(v,w,x,y,z,i) z+=f1(w,x,y)+blk0(i)+K1+rol(v,5); w=rol(w,30);
                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#65: FILE: crypto/sha1.c:55:
+#define R0(v,w,x,y,z,i) z+=f1(w,x,y)+blk0(i)+K1+rol(v,5); w=rol(w,30);
                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#65: FILE: crypto/sha1.c:55:
+#define R0(v,w,x,y,z,i) z+=f1(w,x,y)+blk0(i)+K1+rol(v,5); w=rol(w,30);
                                                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#65: FILE: crypto/sha1.c:55:
+#define R0(v,w,x,y,z,i) z+=f1(w,x,y)+blk0(i)+K1+rol(v,5); w=rol(w,30);
                                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#65: FILE: crypto/sha1.c:55:
+#define R0(v,w,x,y,z,i) z+=f1(w,x,y)+blk0(i)+K1+rol(v,5); w=rol(w,30);
                                                                  ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#65: FILE: crypto/sha1.c:55:
+#define R0(v,w,x,y,z,i) z+=f1(w,x,y)+blk0(i)+K1+rol(v,5); w=rol(w,30);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'w' - possible side-effects?
#65: FILE: crypto/sha1.c:55:
+#define R0(v,w,x,y,z,i) z+=f1(w,x,y)+blk0(i)+K1+rol(v,5); w=rol(w,30);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'z' may be better as '(z)' to avoid precedence issues
#65: FILE: crypto/sha1.c:55:
+#define R0(v,w,x,y,z,i) z+=f1(w,x,y)+blk0(i)+K1+rol(v,5); w=rol(w,30);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#65: FILE: crypto/sha1.c:55:
+#define R0(v,w,x,y,z,i) z+=f1(w,x,y)+blk0(i)+K1+rol(v,5); w=rol(w,30);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#66: FILE: crypto/sha1.c:56:
+#define R1(v,w,x,y,z,i) z+=f1(w,x,y) +blk(i)+K1+rol(v,5); w=rol(w,30);
             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#66: FILE: crypto/sha1.c:56:
+#define R1(v,w,x,y,z,i) z+=f1(w,x,y) +blk(i)+K1+rol(v,5); w=rol(w,30);
               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#66: FILE: crypto/sha1.c:56:
+#define R1(v,w,x,y,z,i) z+=f1(w,x,y) +blk(i)+K1+rol(v,5); w=rol(w,30);
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#66: FILE: crypto/sha1.c:56:
+#define R1(v,w,x,y,z,i) z+=f1(w,x,y) +blk(i)+K1+rol(v,5); w=rol(w,30);
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#66: FILE: crypto/sha1.c:56:
+#define R1(v,w,x,y,z,i) z+=f1(w,x,y) +blk(i)+K1+rol(v,5); w=rol(w,30);
                     ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#66: FILE: crypto/sha1.c:56:
+#define R1(v,w,x,y,z,i) z+=f1(w,x,y) +blk(i)+K1+rol(v,5); w=rol(w,30);
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#66: FILE: crypto/sha1.c:56:
+#define R1(v,w,x,y,z,i) z+=f1(w,x,y) +blk(i)+K1+rol(v,5); w=rol(w,30);
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#66: FILE: crypto/sha1.c:56:
+#define R1(v,w,x,y,z,i) z+=f1(w,x,y) +blk(i)+K1+rol(v,5); w=rol(w,30);
                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#66: FILE: crypto/sha1.c:56:
+#define R1(v,w,x,y,z,i) z+=f1(w,x,y) +blk(i)+K1+rol(v,5); w=rol(w,30);
                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#66: FILE: crypto/sha1.c:56:
+#define R1(v,w,x,y,z,i) z+=f1(w,x,y) +blk(i)+K1+rol(v,5); w=rol(w,30);
                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#66: FILE: crypto/sha1.c:56:
+#define R1(v,w,x,y,z,i) z+=f1(w,x,y) +blk(i)+K1+rol(v,5); w=rol(w,30);
                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#66: FILE: crypto/sha1.c:56:
+#define R1(v,w,x,y,z,i) z+=f1(w,x,y) +blk(i)+K1+rol(v,5); w=rol(w,30);
                                                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#66: FILE: crypto/sha1.c:56:
+#define R1(v,w,x,y,z,i) z+=f1(w,x,y) +blk(i)+K1+rol(v,5); w=rol(w,30);
                                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#66: FILE: crypto/sha1.c:56:
+#define R1(v,w,x,y,z,i) z+=f1(w,x,y) +blk(i)+K1+rol(v,5); w=rol(w,30);
                                                                  ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#66: FILE: crypto/sha1.c:56:
+#define R1(v,w,x,y,z,i) z+=f1(w,x,y) +blk(i)+K1+rol(v,5); w=rol(w,30);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'w' - possible side-effects?
#66: FILE: crypto/sha1.c:56:
+#define R1(v,w,x,y,z,i) z+=f1(w,x,y) +blk(i)+K1+rol(v,5); w=rol(w,30);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'z' may be better as '(z)' to avoid precedence issues
#66: FILE: crypto/sha1.c:56:
+#define R1(v,w,x,y,z,i) z+=f1(w,x,y) +blk(i)+K1+rol(v,5); w=rol(w,30);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#66: FILE: crypto/sha1.c:56:
+#define R1(v,w,x,y,z,i) z+=f1(w,x,y) +blk(i)+K1+rol(v,5); w=rol(w,30);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#67: FILE: crypto/sha1.c:57:
+#define R2(v,w,x,y,z,i) z+=f2(w,x,y) +blk(i)+K2+rol(v,5); w=rol(w,30);
             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#67: FILE: crypto/sha1.c:57:
+#define R2(v,w,x,y,z,i) z+=f2(w,x,y) +blk(i)+K2+rol(v,5); w=rol(w,30);
               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#67: FILE: crypto/sha1.c:57:
+#define R2(v,w,x,y,z,i) z+=f2(w,x,y) +blk(i)+K2+rol(v,5); w=rol(w,30);
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#67: FILE: crypto/sha1.c:57:
+#define R2(v,w,x,y,z,i) z+=f2(w,x,y) +blk(i)+K2+rol(v,5); w=rol(w,30);
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#67: FILE: crypto/sha1.c:57:
+#define R2(v,w,x,y,z,i) z+=f2(w,x,y) +blk(i)+K2+rol(v,5); w=rol(w,30);
                     ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#67: FILE: crypto/sha1.c:57:
+#define R2(v,w,x,y,z,i) z+=f2(w,x,y) +blk(i)+K2+rol(v,5); w=rol(w,30);
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#67: FILE: crypto/sha1.c:57:
+#define R2(v,w,x,y,z,i) z+=f2(w,x,y) +blk(i)+K2+rol(v,5); w=rol(w,30);
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#67: FILE: crypto/sha1.c:57:
+#define R2(v,w,x,y,z,i) z+=f2(w,x,y) +blk(i)+K2+rol(v,5); w=rol(w,30);
                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#67: FILE: crypto/sha1.c:57:
+#define R2(v,w,x,y,z,i) z+=f2(w,x,y) +blk(i)+K2+rol(v,5); w=rol(w,30);
                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#67: FILE: crypto/sha1.c:57:
+#define R2(v,w,x,y,z,i) z+=f2(w,x,y) +blk(i)+K2+rol(v,5); w=rol(w,30);
                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#67: FILE: crypto/sha1.c:57:
+#define R2(v,w,x,y,z,i) z+=f2(w,x,y) +blk(i)+K2+rol(v,5); w=rol(w,30);
                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#67: FILE: crypto/sha1.c:57:
+#define R2(v,w,x,y,z,i) z+=f2(w,x,y) +blk(i)+K2+rol(v,5); w=rol(w,30);
                                                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#67: FILE: crypto/sha1.c:57:
+#define R2(v,w,x,y,z,i) z+=f2(w,x,y) +blk(i)+K2+rol(v,5); w=rol(w,30);
                                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#67: FILE: crypto/sha1.c:57:
+#define R2(v,w,x,y,z,i) z+=f2(w,x,y) +blk(i)+K2+rol(v,5); w=rol(w,30);
                                                                  ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#67: FILE: crypto/sha1.c:57:
+#define R2(v,w,x,y,z,i) z+=f2(w,x,y) +blk(i)+K2+rol(v,5); w=rol(w,30);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'w' - possible side-effects?
#67: FILE: crypto/sha1.c:57:
+#define R2(v,w,x,y,z,i) z+=f2(w,x,y) +blk(i)+K2+rol(v,5); w=rol(w,30);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'z' may be better as '(z)' to avoid precedence issues
#67: FILE: crypto/sha1.c:57:
+#define R2(v,w,x,y,z,i) z+=f2(w,x,y) +blk(i)+K2+rol(v,5); w=rol(w,30);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#67: FILE: crypto/sha1.c:57:
+#define R2(v,w,x,y,z,i) z+=f2(w,x,y) +blk(i)+K2+rol(v,5); w=rol(w,30);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#68: FILE: crypto/sha1.c:58:
+#define R3(v,w,x,y,z,i) z+=f3(w,x,y) +blk(i)+K3+rol(v,5); w=rol(w,30);
             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#68: FILE: crypto/sha1.c:58:
+#define R3(v,w,x,y,z,i) z+=f3(w,x,y) +blk(i)+K3+rol(v,5); w=rol(w,30);
               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#68: FILE: crypto/sha1.c:58:
+#define R3(v,w,x,y,z,i) z+=f3(w,x,y) +blk(i)+K3+rol(v,5); w=rol(w,30);
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#68: FILE: crypto/sha1.c:58:
+#define R3(v,w,x,y,z,i) z+=f3(w,x,y) +blk(i)+K3+rol(v,5); w=rol(w,30);
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#68: FILE: crypto/sha1.c:58:
+#define R3(v,w,x,y,z,i) z+=f3(w,x,y) +blk(i)+K3+rol(v,5); w=rol(w,30);
                     ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#68: FILE: crypto/sha1.c:58:
+#define R3(v,w,x,y,z,i) z+=f3(w,x,y) +blk(i)+K3+rol(v,5); w=rol(w,30);
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#68: FILE: crypto/sha1.c:58:
+#define R3(v,w,x,y,z,i) z+=f3(w,x,y) +blk(i)+K3+rol(v,5); w=rol(w,30);
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#68: FILE: crypto/sha1.c:58:
+#define R3(v,w,x,y,z,i) z+=f3(w,x,y) +blk(i)+K3+rol(v,5); w=rol(w,30);
                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#68: FILE: crypto/sha1.c:58:
+#define R3(v,w,x,y,z,i) z+=f3(w,x,y) +blk(i)+K3+rol(v,5); w=rol(w,30);
                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#68: FILE: crypto/sha1.c:58:
+#define R3(v,w,x,y,z,i) z+=f3(w,x,y) +blk(i)+K3+rol(v,5); w=rol(w,30);
                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#68: FILE: crypto/sha1.c:58:
+#define R3(v,w,x,y,z,i) z+=f3(w,x,y) +blk(i)+K3+rol(v,5); w=rol(w,30);
                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#68: FILE: crypto/sha1.c:58:
+#define R3(v,w,x,y,z,i) z+=f3(w,x,y) +blk(i)+K3+rol(v,5); w=rol(w,30);
                                                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#68: FILE: crypto/sha1.c:58:
+#define R3(v,w,x,y,z,i) z+=f3(w,x,y) +blk(i)+K3+rol(v,5); w=rol(w,30);
                                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#68: FILE: crypto/sha1.c:58:
+#define R3(v,w,x,y,z,i) z+=f3(w,x,y) +blk(i)+K3+rol(v,5); w=rol(w,30);
                                                                  ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#68: FILE: crypto/sha1.c:58:
+#define R3(v,w,x,y,z,i) z+=f3(w,x,y) +blk(i)+K3+rol(v,5); w=rol(w,30);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'w' - possible side-effects?
#68: FILE: crypto/sha1.c:58:
+#define R3(v,w,x,y,z,i) z+=f3(w,x,y) +blk(i)+K3+rol(v,5); w=rol(w,30);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'z' may be better as '(z)' to avoid precedence issues
#68: FILE: crypto/sha1.c:58:
+#define R3(v,w,x,y,z,i) z+=f3(w,x,y) +blk(i)+K3+rol(v,5); w=rol(w,30);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#68: FILE: crypto/sha1.c:58:
+#define R3(v,w,x,y,z,i) z+=f3(w,x,y) +blk(i)+K3+rol(v,5); w=rol(w,30);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#69: FILE: crypto/sha1.c:59:
+#define R4(v,w,x,y,z,i) z+=f4(w,x,y) +blk(i)+K4+rol(v,5); w=rol(w,30);
             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#69: FILE: crypto/sha1.c:59:
+#define R4(v,w,x,y,z,i) z+=f4(w,x,y) +blk(i)+K4+rol(v,5); w=rol(w,30);
               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#69: FILE: crypto/sha1.c:59:
+#define R4(v,w,x,y,z,i) z+=f4(w,x,y) +blk(i)+K4+rol(v,5); w=rol(w,30);
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#69: FILE: crypto/sha1.c:59:
+#define R4(v,w,x,y,z,i) z+=f4(w,x,y) +blk(i)+K4+rol(v,5); w=rol(w,30);
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#69: FILE: crypto/sha1.c:59:
+#define R4(v,w,x,y,z,i) z+=f4(w,x,y) +blk(i)+K4+rol(v,5); w=rol(w,30);
                     ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#69: FILE: crypto/sha1.c:59:
+#define R4(v,w,x,y,z,i) z+=f4(w,x,y) +blk(i)+K4+rol(v,5); w=rol(w,30);
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#69: FILE: crypto/sha1.c:59:
+#define R4(v,w,x,y,z,i) z+=f4(w,x,y) +blk(i)+K4+rol(v,5); w=rol(w,30);
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#69: FILE: crypto/sha1.c:59:
+#define R4(v,w,x,y,z,i) z+=f4(w,x,y) +blk(i)+K4+rol(v,5); w=rol(w,30);
                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#69: FILE: crypto/sha1.c:59:
+#define R4(v,w,x,y,z,i) z+=f4(w,x,y) +blk(i)+K4+rol(v,5); w=rol(w,30);
                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#69: FILE: crypto/sha1.c:59:
+#define R4(v,w,x,y,z,i) z+=f4(w,x,y) +blk(i)+K4+rol(v,5); w=rol(w,30);
                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#69: FILE: crypto/sha1.c:59:
+#define R4(v,w,x,y,z,i) z+=f4(w,x,y) +blk(i)+K4+rol(v,5); w=rol(w,30);
                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#69: FILE: crypto/sha1.c:59:
+#define R4(v,w,x,y,z,i) z+=f4(w,x,y) +blk(i)+K4+rol(v,5); w=rol(w,30);
                                                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#69: FILE: crypto/sha1.c:59:
+#define R4(v,w,x,y,z,i) z+=f4(w,x,y) +blk(i)+K4+rol(v,5); w=rol(w,30);
                                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#69: FILE: crypto/sha1.c:59:
+#define R4(v,w,x,y,z,i) z+=f4(w,x,y) +blk(i)+K4+rol(v,5); w=rol(w,30);
                                                                  ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#69: FILE: crypto/sha1.c:59:
+#define R4(v,w,x,y,z,i) z+=f4(w,x,y) +blk(i)+K4+rol(v,5); w=rol(w,30);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'w' - possible side-effects?
#69: FILE: crypto/sha1.c:59:
+#define R4(v,w,x,y,z,i) z+=f4(w,x,y) +blk(i)+K4+rol(v,5); w=rol(w,30);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'z' may be better as '(z)' to avoid precedence issues
#69: FILE: crypto/sha1.c:59:
+#define R4(v,w,x,y,z,i) z+=f4(w,x,y) +blk(i)+K4+rol(v,5); w=rol(w,30);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#69: FILE: crypto/sha1.c:59:
+#define R4(v,w,x,y,z,i) z+=f4(w,x,y) +blk(i)+K4+rol(v,5); w=rol(w,30);

WARNING:IF_1: Consider removing the #if 1 and its #endif
#77: FILE: crypto/sha1.c:67:
+#if 1

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#85: FILE: crypto/sha1.c:75:
+	for (a = 0; a < 16; a++)
+	  buf[a] = be32_to_cpu (((const u32 *)in)[a]);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#86: FILE: crypto/sha1.c:76:
+	  buf[a] = be32_to_cpu (((const u32 *)in)[a]);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#91: FILE: crypto/sha1.c:81:
+		a = buf[i] ^ buf[i+2] ^ buf[i+8] ^ buf[i+13];
 		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#91: FILE: crypto/sha1.c:81:
+		a = buf[i] ^ buf[i+2] ^ buf[i+8] ^ buf[i+13];
 		                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#91: FILE: crypto/sha1.c:81:
+		a = buf[i] ^ buf[i+2] ^ buf[i+8] ^ buf[i+13];
 		                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#92: FILE: crypto/sha1.c:82:
+		buf[i+16] = rol(a, 1);
 		     ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#128: FILE: crypto/sha1.c:118:
+	a = b = c = d = e = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#129: FILE: crypto/sha1.c:119:
+	memset (buf, 0x00, sizeof buf);

WARNING:SIZEOF_PARENTHESIS: sizeof buf should be sizeof(buf)
#129: FILE: crypto/sha1.c:119:
+	memset (buf, 0x00, sizeof buf);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000345572.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 72 errors, 10 warnings, 46 checks, 105 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000345572.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
