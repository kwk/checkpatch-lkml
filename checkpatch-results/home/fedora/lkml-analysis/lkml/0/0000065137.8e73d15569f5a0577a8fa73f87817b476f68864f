WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#45: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#50: FILE: usr/include/arch/ppc/klibc/archconfig.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#70: FILE: usr/include/arch/ppc/klibc/archsetjmp.h:1:
+/*

WARNING:NEW_TYPEDEFS: do not add new typedefs
#103: FILE: usr/include/arch/ppc/klibc/archsetjmp.h:34:
+typedef struct __jmp_buf jmp_buf[1];

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#112: FILE: usr/include/arch/ppc/klibc/archsignal.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#132: FILE: usr/include/arch/ppc/klibc/archstat.h:1:
+#ifndef _KLIBC_ARCHSTAT_H

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#142: FILE: usr/include/arch/ppc/klibc/archstat.h:11:
+	__stdev64 (st_dev);		/* Device. */

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#148: FILE: usr/include/arch/ppc/klibc/archstat.h:17:
+^I__stdev64 (st_rdev); ^I^I/* Device number, if device.  */$

WARNING:LINE_SPACING: Missing a blank line after declarations
#148: FILE: usr/include/arch/ppc/klibc/archstat.h:17:
+	unsigned int st_gid;		/* Group ID of the file's group. */
+	__stdev64 (st_rdev); 		/* Device number, if device.  */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#148: FILE: usr/include/arch/ppc/klibc/archstat.h:17:
+	__stdev64 (st_rdev); 		/* Device number, if device.  */

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#157: FILE: usr/include/arch/ppc/klibc/archstat.h:26:
+	unsigned long int __unused4;

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#158: FILE: usr/include/arch/ppc/klibc/archstat.h:27:
+	unsigned long int __unused5;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#168: FILE: usr/include/arch/ppc/klibc/archsys.h:1:
+/*

ERROR:SPACING: space required after that ',' (ctx:VxV)
#182: FILE: usr/include/arch/ppc/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#182: FILE: usr/include/arch/ppc/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#182: FILE: usr/include/arch/ppc/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#182: FILE: usr/include/arch/ppc/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#182: FILE: usr/include/arch/ppc/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#182: FILE: usr/include/arch/ppc/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#182: FILE: usr/include/arch/ppc/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
                                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#182: FILE: usr/include/arch/ppc/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
                                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#182: FILE: usr/include/arch/ppc/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
                                                                   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#182: FILE: usr/include/arch/ppc/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
+          type5,arg5,type6,arg6) \
+type name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5,type6 arg6) \
+{ \
+        unsigned long __sc_ret, __sc_err;                               \
+        {                                                               \
+                register unsigned long __sc_0 __asm__ ("r0");           \
+                register unsigned long __sc_3 __asm__ ("r3");           \
+                register unsigned long __sc_4 __asm__ ("r4");           \
+                register unsigned long __sc_5 __asm__ ("r5");           \
+                register unsigned long __sc_6 __asm__ ("r6");           \
+                register unsigned long __sc_7 __asm__ ("r7");           \
+                register unsigned long __sc_8 __asm__ ("r8");           \
+                                                                        \
+                __sc_3 = (unsigned long) (arg1);                        \
+                __sc_4 = (unsigned long) (arg2);                        \
+                __sc_5 = (unsigned long) (arg3);                        \
+                __sc_6 = (unsigned long) (arg4);                        \
+                __sc_7 = (unsigned long) (arg5);                        \
+                __sc_8 = (unsigned long) (arg6);                        \
+                __sc_0 = __NR_##name;                                   \
+                __asm__ __volatile__                                    \
+                        ("sc           \n\t"                            \
+                         "mfcr %1      "                                \
+                        : "+r"   (__sc_3),				\
+			  "+r"   (__sc_0),             			\
+                          "+r"   (__sc_4),                              \
+                          "+r"   (__sc_5),                              \
+                          "+r"   (__sc_6),                              \
+                          "+r"   (__sc_7),                              \
+                          "+r"   (__sc_8)                               \
+                        : : "cr0", "ctr", "memory",                     \
+                            "r9", "r10", "r11", "r12");		        \
+                __sc_ret = __sc_3;                                      \
+                __sc_err = __sc_0;                                      \
+        }                                                               \
+        if (__sc_err & 0x10000000)                                      \
+        {                                                               \
+                errno = (int)__sc_ret;                                  \
+                __sc_ret = -1;                                          \
+        }                                                               \
+        return (type)__sc_ret;                                          \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg1' - possible side-effects?
#182: FILE: usr/include/arch/ppc/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
+          type5,arg5,type6,arg6) \
+type name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5,type6 arg6) \
+{ \
+        unsigned long __sc_ret, __sc_err;                               \
+        {                                                               \
+                register unsigned long __sc_0 __asm__ ("r0");           \
+                register unsigned long __sc_3 __asm__ ("r3");           \
+                register unsigned long __sc_4 __asm__ ("r4");           \
+                register unsigned long __sc_5 __asm__ ("r5");           \
+                register unsigned long __sc_6 __asm__ ("r6");           \
+                register unsigned long __sc_7 __asm__ ("r7");           \
+                register unsigned long __sc_8 __asm__ ("r8");           \
+                                                                        \
+                __sc_3 = (unsigned long) (arg1);                        \
+                __sc_4 = (unsigned long) (arg2);                        \
+                __sc_5 = (unsigned long) (arg3);                        \
+                __sc_6 = (unsigned long) (arg4);                        \
+                __sc_7 = (unsigned long) (arg5);                        \
+                __sc_8 = (unsigned long) (arg6);                        \
+                __sc_0 = __NR_##name;                                   \
+                __asm__ __volatile__                                    \
+                        ("sc           \n\t"                            \
+                         "mfcr %1      "                                \
+                        : "+r"   (__sc_3),				\
+			  "+r"   (__sc_0),             			\
+                          "+r"   (__sc_4),                              \
+                          "+r"   (__sc_5),                              \
+                          "+r"   (__sc_6),                              \
+                          "+r"   (__sc_7),                              \
+                          "+r"   (__sc_8)                               \
+                        : : "cr0", "ctr", "memory",                     \
+                            "r9", "r10", "r11", "r12");		        \
+                __sc_ret = __sc_3;                                      \
+                __sc_err = __sc_0;                                      \
+        }                                                               \
+        if (__sc_err & 0x10000000)                                      \
+        {                                                               \
+                errno = (int)__sc_ret;                                  \
+                __sc_ret = -1;                                          \
+        }                                                               \
+        return (type)__sc_ret;                                          \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg2' - possible side-effects?
#182: FILE: usr/include/arch/ppc/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
+          type5,arg5,type6,arg6) \
+type name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5,type6 arg6) \
+{ \
+        unsigned long __sc_ret, __sc_err;                               \
+        {                                                               \
+                register unsigned long __sc_0 __asm__ ("r0");           \
+                register unsigned long __sc_3 __asm__ ("r3");           \
+                register unsigned long __sc_4 __asm__ ("r4");           \
+                register unsigned long __sc_5 __asm__ ("r5");           \
+                register unsigned long __sc_6 __asm__ ("r6");           \
+                register unsigned long __sc_7 __asm__ ("r7");           \
+                register unsigned long __sc_8 __asm__ ("r8");           \
+                                                                        \
+                __sc_3 = (unsigned long) (arg1);                        \
+                __sc_4 = (unsigned long) (arg2);                        \
+                __sc_5 = (unsigned long) (arg3);                        \
+                __sc_6 = (unsigned long) (arg4);                        \
+                __sc_7 = (unsigned long) (arg5);                        \
+                __sc_8 = (unsigned long) (arg6);                        \
+                __sc_0 = __NR_##name;                                   \
+                __asm__ __volatile__                                    \
+                        ("sc           \n\t"                            \
+                         "mfcr %1      "                                \
+                        : "+r"   (__sc_3),				\
+			  "+r"   (__sc_0),             			\
+                          "+r"   (__sc_4),                              \
+                          "+r"   (__sc_5),                              \
+                          "+r"   (__sc_6),                              \
+                          "+r"   (__sc_7),                              \
+                          "+r"   (__sc_8)                               \
+                        : : "cr0", "ctr", "memory",                     \
+                            "r9", "r10", "r11", "r12");		        \
+                __sc_ret = __sc_3;                                      \
+                __sc_err = __sc_0;                                      \
+        }                                                               \
+        if (__sc_err & 0x10000000)                                      \
+        {                                                               \
+                errno = (int)__sc_ret;                                  \
+                __sc_ret = -1;                                          \
+        }                                                               \
+        return (type)__sc_ret;                                          \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg3' - possible side-effects?
#182: FILE: usr/include/arch/ppc/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
+          type5,arg5,type6,arg6) \
+type name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5,type6 arg6) \
+{ \
+        unsigned long __sc_ret, __sc_err;                               \
+        {                                                               \
+                register unsigned long __sc_0 __asm__ ("r0");           \
+                register unsigned long __sc_3 __asm__ ("r3");           \
+                register unsigned long __sc_4 __asm__ ("r4");           \
+                register unsigned long __sc_5 __asm__ ("r5");           \
+                register unsigned long __sc_6 __asm__ ("r6");           \
+                register unsigned long __sc_7 __asm__ ("r7");           \
+                register unsigned long __sc_8 __asm__ ("r8");           \
+                                                                        \
+                __sc_3 = (unsigned long) (arg1);                        \
+                __sc_4 = (unsigned long) (arg2);                        \
+                __sc_5 = (unsigned long) (arg3);                        \
+                __sc_6 = (unsigned long) (arg4);                        \
+                __sc_7 = (unsigned long) (arg5);                        \
+                __sc_8 = (unsigned long) (arg6);                        \
+                __sc_0 = __NR_##name;                                   \
+                __asm__ __volatile__                                    \
+                        ("sc           \n\t"                            \
+                         "mfcr %1      "                                \
+                        : "+r"   (__sc_3),				\
+			  "+r"   (__sc_0),             			\
+                          "+r"   (__sc_4),                              \
+                          "+r"   (__sc_5),                              \
+                          "+r"   (__sc_6),                              \
+                          "+r"   (__sc_7),                              \
+                          "+r"   (__sc_8)                               \
+                        : : "cr0", "ctr", "memory",                     \
+                            "r9", "r10", "r11", "r12");		        \
+                __sc_ret = __sc_3;                                      \
+                __sc_err = __sc_0;                                      \
+        }                                                               \
+        if (__sc_err & 0x10000000)                                      \
+        {                                                               \
+                errno = (int)__sc_ret;                                  \
+                __sc_ret = -1;                                          \
+        }                                                               \
+        return (type)__sc_ret;                                          \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg4' - possible side-effects?
#182: FILE: usr/include/arch/ppc/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
+          type5,arg5,type6,arg6) \
+type name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5,type6 arg6) \
+{ \
+        unsigned long __sc_ret, __sc_err;                               \
+        {                                                               \
+                register unsigned long __sc_0 __asm__ ("r0");           \
+                register unsigned long __sc_3 __asm__ ("r3");           \
+                register unsigned long __sc_4 __asm__ ("r4");           \
+                register unsigned long __sc_5 __asm__ ("r5");           \
+                register unsigned long __sc_6 __asm__ ("r6");           \
+                register unsigned long __sc_7 __asm__ ("r7");           \
+                register unsigned long __sc_8 __asm__ ("r8");           \
+                                                                        \
+                __sc_3 = (unsigned long) (arg1);                        \
+                __sc_4 = (unsigned long) (arg2);                        \
+                __sc_5 = (unsigned long) (arg3);                        \
+                __sc_6 = (unsigned long) (arg4);                        \
+                __sc_7 = (unsigned long) (arg5);                        \
+                __sc_8 = (unsigned long) (arg6);                        \
+                __sc_0 = __NR_##name;                                   \
+                __asm__ __volatile__                                    \
+                        ("sc           \n\t"                            \
+                         "mfcr %1      "                                \
+                        : "+r"   (__sc_3),				\
+			  "+r"   (__sc_0),             			\
+                          "+r"   (__sc_4),                              \
+                          "+r"   (__sc_5),                              \
+                          "+r"   (__sc_6),                              \
+                          "+r"   (__sc_7),                              \
+                          "+r"   (__sc_8)                               \
+                        : : "cr0", "ctr", "memory",                     \
+                            "r9", "r10", "r11", "r12");		        \
+                __sc_ret = __sc_3;                                      \
+                __sc_err = __sc_0;                                      \
+        }                                                               \
+        if (__sc_err & 0x10000000)                                      \
+        {                                                               \
+                errno = (int)__sc_ret;                                  \
+                __sc_ret = -1;                                          \
+        }                                                               \
+        return (type)__sc_ret;                                          \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg5' - possible side-effects?
#182: FILE: usr/include/arch/ppc/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
+          type5,arg5,type6,arg6) \
+type name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5,type6 arg6) \
+{ \
+        unsigned long __sc_ret, __sc_err;                               \
+        {                                                               \
+                register unsigned long __sc_0 __asm__ ("r0");           \
+                register unsigned long __sc_3 __asm__ ("r3");           \
+                register unsigned long __sc_4 __asm__ ("r4");           \
+                register unsigned long __sc_5 __asm__ ("r5");           \
+                register unsigned long __sc_6 __asm__ ("r6");           \
+                register unsigned long __sc_7 __asm__ ("r7");           \
+                register unsigned long __sc_8 __asm__ ("r8");           \
+                                                                        \
+                __sc_3 = (unsigned long) (arg1);                        \
+                __sc_4 = (unsigned long) (arg2);                        \
+                __sc_5 = (unsigned long) (arg3);                        \
+                __sc_6 = (unsigned long) (arg4);                        \
+                __sc_7 = (unsigned long) (arg5);                        \
+                __sc_8 = (unsigned long) (arg6);                        \
+                __sc_0 = __NR_##name;                                   \
+                __asm__ __volatile__                                    \
+                        ("sc           \n\t"                            \
+                         "mfcr %1      "                                \
+                        : "+r"   (__sc_3),				\
+			  "+r"   (__sc_0),             			\
+                          "+r"   (__sc_4),                              \
+                          "+r"   (__sc_5),                              \
+                          "+r"   (__sc_6),                              \
+                          "+r"   (__sc_7),                              \
+                          "+r"   (__sc_8)                               \
+                        : : "cr0", "ctr", "memory",                     \
+                            "r9", "r10", "r11", "r12");		        \
+                __sc_ret = __sc_3;                                      \
+                __sc_err = __sc_0;                                      \
+        }                                                               \
+        if (__sc_err & 0x10000000)                                      \
+        {                                                               \
+                errno = (int)__sc_ret;                                  \
+                __sc_ret = -1;                                          \
+        }                                                               \
+        return (type)__sc_ret;                                          \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg6' - possible side-effects?
#182: FILE: usr/include/arch/ppc/klibc/archsys.h:15:
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
+          type5,arg5,type6,arg6) \
+type name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5,type6 arg6) \
+{ \
+        unsigned long __sc_ret, __sc_err;                               \
+        {                                                               \
+                register unsigned long __sc_0 __asm__ ("r0");           \
+                register unsigned long __sc_3 __asm__ ("r3");           \
+                register unsigned long __sc_4 __asm__ ("r4");           \
+                register unsigned long __sc_5 __asm__ ("r5");           \
+                register unsigned long __sc_6 __asm__ ("r6");           \
+                register unsigned long __sc_7 __asm__ ("r7");           \
+                register unsigned long __sc_8 __asm__ ("r8");           \
+                                                                        \
+                __sc_3 = (unsigned long) (arg1);                        \
+                __sc_4 = (unsigned long) (arg2);                        \
+                __sc_5 = (unsigned long) (arg3);                        \
+                __sc_6 = (unsigned long) (arg4);                        \
+                __sc_7 = (unsigned long) (arg5);                        \
+                __sc_8 = (unsigned long) (arg6);                        \
+                __sc_0 = __NR_##name;                                   \
+                __asm__ __volatile__                                    \
+                        ("sc           \n\t"                            \
+                         "mfcr %1      "                                \
+                        : "+r"   (__sc_3),				\
+			  "+r"   (__sc_0),             			\
+                          "+r"   (__sc_4),                              \
+                          "+r"   (__sc_5),                              \
+                          "+r"   (__sc_6),                              \
+                          "+r"   (__sc_7),                              \
+                          "+r"   (__sc_8)                               \
+                        : : "cr0", "ctr", "memory",                     \
+                            "r9", "r10", "r11", "r12");		        \
+                __sc_ret = __sc_3;                                      \
+                __sc_err = __sc_0;                                      \
+        }                                                               \
+        if (__sc_err & 0x10000000)                                      \
+        {                                                               \
+                errno = (int)__sc_ret;                                  \
+                __sc_ret = -1;                                          \
+        }                                                               \
+        return (type)__sc_ret;                                          \
+}

ERROR:CODE_INDENT: code indent should use tabs where possible
#183: FILE: usr/include/arch/ppc/klibc/archsys.h:16:
+          type5,arg5,type6,arg6) \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: usr/include/arch/ppc/klibc/archsys.h:16:
+          type5,arg5,type6,arg6) \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#183: FILE: usr/include/arch/ppc/klibc/archsys.h:16:
+          type5,arg5,type6,arg6) \
                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#183: FILE: usr/include/arch/ppc/klibc/archsys.h:16:
+          type5,arg5,type6,arg6) \
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#183: FILE: usr/include/arch/ppc/klibc/archsys.h:16:
+          type5,arg5,type6,arg6) \
                           ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#184: FILE: usr/include/arch/ppc/klibc/archsys.h:17:
+type name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5,type6 arg6) \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#184: FILE: usr/include/arch/ppc/klibc/archsys.h:17:
+type name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5,type6 arg6) \
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#184: FILE: usr/include/arch/ppc/klibc/archsys.h:17:
+type name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5,type6 arg6) \
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#184: FILE: usr/include/arch/ppc/klibc/archsys.h:17:
+type name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5,type6 arg6) \
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#184: FILE: usr/include/arch/ppc/klibc/archsys.h:17:
+type name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5,type6 arg6) \
                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#184: FILE: usr/include/arch/ppc/klibc/archsys.h:17:
+type name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5,type6 arg6) \
                                                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#186: FILE: usr/include/arch/ppc/klibc/archsys.h:19:
+        unsigned long __sc_ret, __sc_err;                               \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: usr/include/arch/ppc/klibc/archsys.h:19:
+        unsigned long __sc_ret, __sc_err;                               \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#187: FILE: usr/include/arch/ppc/klibc/archsys.h:20:
+        {                                                               \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: usr/include/arch/ppc/klibc/archsys.h:20:
+        {                                                               \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#188: FILE: usr/include/arch/ppc/klibc/archsys.h:21:
+                register unsigned long __sc_0 __asm__ ("r0");           \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: usr/include/arch/ppc/klibc/archsys.h:21:
+                register unsigned long __sc_0 __asm__ ("r0");           \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#189: FILE: usr/include/arch/ppc/klibc/archsys.h:22:
+                register unsigned long __sc_3 __asm__ ("r3");           \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: usr/include/arch/ppc/klibc/archsys.h:22:
+                register unsigned long __sc_3 __asm__ ("r3");           \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#190: FILE: usr/include/arch/ppc/klibc/archsys.h:23:
+                register unsigned long __sc_4 __asm__ ("r4");           \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: usr/include/arch/ppc/klibc/archsys.h:23:
+                register unsigned long __sc_4 __asm__ ("r4");           \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#191: FILE: usr/include/arch/ppc/klibc/archsys.h:24:
+                register unsigned long __sc_5 __asm__ ("r5");           \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: usr/include/arch/ppc/klibc/archsys.h:24:
+                register unsigned long __sc_5 __asm__ ("r5");           \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#192: FILE: usr/include/arch/ppc/klibc/archsys.h:25:
+                register unsigned long __sc_6 __asm__ ("r6");           \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: usr/include/arch/ppc/klibc/archsys.h:25:
+                register unsigned long __sc_6 __asm__ ("r6");           \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: usr/include/arch/ppc/klibc/archsys.h:26:
+                register unsigned long __sc_7 __asm__ ("r7");           \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: usr/include/arch/ppc/klibc/archsys.h:26:
+                register unsigned long __sc_7 __asm__ ("r7");           \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#194: FILE: usr/include/arch/ppc/klibc/archsys.h:27:
+                register unsigned long __sc_8 __asm__ ("r8");           \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: usr/include/arch/ppc/klibc/archsys.h:27:
+                register unsigned long __sc_8 __asm__ ("r8");           \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#195: FILE: usr/include/arch/ppc/klibc/archsys.h:28:
+                                                                        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: usr/include/arch/ppc/klibc/archsys.h:28:
+                                                                        \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: usr/include/arch/ppc/klibc/archsys.h:29:
+                __sc_3 = (unsigned long) (arg1);                        \$

CHECK:SPACING: No space is necessary after a cast
#196: FILE: usr/include/arch/ppc/klibc/archsys.h:29:
+                __sc_3 = (unsigned long) (arg1);                        \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: usr/include/arch/ppc/klibc/archsys.h:29:
+                __sc_3 = (unsigned long) (arg1);                        \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: usr/include/arch/ppc/klibc/archsys.h:30:
+                __sc_4 = (unsigned long) (arg2);                        \$

CHECK:SPACING: No space is necessary after a cast
#197: FILE: usr/include/arch/ppc/klibc/archsys.h:30:
+                __sc_4 = (unsigned long) (arg2);                        \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: usr/include/arch/ppc/klibc/archsys.h:30:
+                __sc_4 = (unsigned long) (arg2);                        \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: usr/include/arch/ppc/klibc/archsys.h:31:
+                __sc_5 = (unsigned long) (arg3);                        \$

CHECK:SPACING: No space is necessary after a cast
#198: FILE: usr/include/arch/ppc/klibc/archsys.h:31:
+                __sc_5 = (unsigned long) (arg3);                        \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: usr/include/arch/ppc/klibc/archsys.h:31:
+                __sc_5 = (unsigned long) (arg3);                        \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: usr/include/arch/ppc/klibc/archsys.h:32:
+                __sc_6 = (unsigned long) (arg4);                        \$

CHECK:SPACING: No space is necessary after a cast
#199: FILE: usr/include/arch/ppc/klibc/archsys.h:32:
+                __sc_6 = (unsigned long) (arg4);                        \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: usr/include/arch/ppc/klibc/archsys.h:32:
+                __sc_6 = (unsigned long) (arg4);                        \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: usr/include/arch/ppc/klibc/archsys.h:33:
+                __sc_7 = (unsigned long) (arg5);                        \$

CHECK:SPACING: No space is necessary after a cast
#200: FILE: usr/include/arch/ppc/klibc/archsys.h:33:
+                __sc_7 = (unsigned long) (arg5);                        \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: usr/include/arch/ppc/klibc/archsys.h:33:
+                __sc_7 = (unsigned long) (arg5);                        \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#201: FILE: usr/include/arch/ppc/klibc/archsys.h:34:
+                __sc_8 = (unsigned long) (arg6);                        \$

CHECK:SPACING: No space is necessary after a cast
#201: FILE: usr/include/arch/ppc/klibc/archsys.h:34:
+                __sc_8 = (unsigned long) (arg6);                        \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: usr/include/arch/ppc/klibc/archsys.h:34:
+                __sc_8 = (unsigned long) (arg6);                        \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: usr/include/arch/ppc/klibc/archsys.h:35:
+                __sc_0 = __NR_##name;                                   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: usr/include/arch/ppc/klibc/archsys.h:35:
+                __sc_0 = __NR_##name;                                   \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#203: FILE: usr/include/arch/ppc/klibc/archsys.h:36:
+                __asm__ __volatile__                                    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: usr/include/arch/ppc/klibc/archsys.h:36:
+                __asm__ __volatile__                                    \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#204: FILE: usr/include/arch/ppc/klibc/archsys.h:37:
+                        ("sc           \n\t"                            \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: usr/include/arch/ppc/klibc/archsys.h:37:
+                        ("sc           \n\t"                            \$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#204: FILE: usr/include/arch/ppc/klibc/archsys.h:37:
+                        ("sc           \n\t"                            \

ERROR:CODE_INDENT: code indent should use tabs where possible
#205: FILE: usr/include/arch/ppc/klibc/archsys.h:38:
+                         "mfcr %1      "                                \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: usr/include/arch/ppc/klibc/archsys.h:38:
+                         "mfcr %1      "                                \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#206: FILE: usr/include/arch/ppc/klibc/archsys.h:39:
+                        : "+r"   (__sc_3),^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: usr/include/arch/ppc/klibc/archsys.h:39:
+                        : "+r"   (__sc_3),^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#207: FILE: usr/include/arch/ppc/klibc/archsys.h:40:
+^I^I^I  "+r"   (__sc_0),             ^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#208: FILE: usr/include/arch/ppc/klibc/archsys.h:41:
+                          "+r"   (__sc_4),                              \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: usr/include/arch/ppc/klibc/archsys.h:41:
+                          "+r"   (__sc_4),                              \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#209: FILE: usr/include/arch/ppc/klibc/archsys.h:42:
+                          "+r"   (__sc_5),                              \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: usr/include/arch/ppc/klibc/archsys.h:42:
+                          "+r"   (__sc_5),                              \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#210: FILE: usr/include/arch/ppc/klibc/archsys.h:43:
+                          "+r"   (__sc_6),                              \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: usr/include/arch/ppc/klibc/archsys.h:43:
+                          "+r"   (__sc_6),                              \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#211: FILE: usr/include/arch/ppc/klibc/archsys.h:44:
+                          "+r"   (__sc_7),                              \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: usr/include/arch/ppc/klibc/archsys.h:44:
+                          "+r"   (__sc_7),                              \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#212: FILE: usr/include/arch/ppc/klibc/archsys.h:45:
+                          "+r"   (__sc_8)                               \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: usr/include/arch/ppc/klibc/archsys.h:45:
+                          "+r"   (__sc_8)                               \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#213: FILE: usr/include/arch/ppc/klibc/archsys.h:46:
+                        : : "cr0", "ctr", "memory",                     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: usr/include/arch/ppc/klibc/archsys.h:46:
+                        : : "cr0", "ctr", "memory",                     \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#214: FILE: usr/include/arch/ppc/klibc/archsys.h:47:
+                            "r9", "r10", "r11", "r12");^I^I        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: usr/include/arch/ppc/klibc/archsys.h:47:
+                            "r9", "r10", "r11", "r12");^I^I        \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#215: FILE: usr/include/arch/ppc/klibc/archsys.h:48:
+                __sc_ret = __sc_3;                                      \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: usr/include/arch/ppc/klibc/archsys.h:48:
+                __sc_ret = __sc_3;                                      \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#216: FILE: usr/include/arch/ppc/klibc/archsys.h:49:
+                __sc_err = __sc_0;                                      \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: usr/include/arch/ppc/klibc/archsys.h:49:
+                __sc_err = __sc_0;                                      \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#217: FILE: usr/include/arch/ppc/klibc/archsys.h:50:
+        }                                                               \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: usr/include/arch/ppc/klibc/archsys.h:50:
+        }                                                               \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#218: FILE: usr/include/arch/ppc/klibc/archsys.h:51:
+        if (__sc_err & 0x10000000)                                      \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: usr/include/arch/ppc/klibc/archsys.h:51:
+        if (__sc_err & 0x10000000)                                      \$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#218: FILE: usr/include/arch/ppc/klibc/archsys.h:51:
+        if (__sc_err & 0x10000000)                                      \
+        {                                                               \

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#219: FILE: usr/include/arch/ppc/klibc/archsys.h:52:
+        {                                                               \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: usr/include/arch/ppc/klibc/archsys.h:52:
+        {                                                               \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#220: FILE: usr/include/arch/ppc/klibc/archsys.h:53:
+                errno = (int)__sc_ret;                                  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: usr/include/arch/ppc/klibc/archsys.h:53:
+                errno = (int)__sc_ret;                                  \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: usr/include/arch/ppc/klibc/archsys.h:54:
+                __sc_ret = -1;                                          \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: usr/include/arch/ppc/klibc/archsys.h:54:
+                __sc_ret = -1;                                          \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#222: FILE: usr/include/arch/ppc/klibc/archsys.h:55:
+        }                                                               \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: usr/include/arch/ppc/klibc/archsys.h:55:
+        }                                                               \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#223: FILE: usr/include/arch/ppc/klibc/archsys.h:56:
+        return (type)__sc_ret;                                          \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: usr/include/arch/ppc/klibc/archsys.h:56:
+        return (type)__sc_ret;                                          \$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#298: FILE: usr/klibc/arch/ppc/crt0.S:1:
+#

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#327: FILE: usr/klibc/arch/ppc/setjmp.S:1:
+#

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#367: FILE: usr/klibc/arch/ppc/syscall.S:1:
+/*

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000065137.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 57 errors, 57 warnings, 12 checks, 304 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000065137.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
