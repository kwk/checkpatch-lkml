CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#82: FILE: include/linux/mm.h:514:
+extern struct vm_area_struct *copy_vma(struct vm_area_struct *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#82: FILE: include/linux/mm.h:514:
+extern struct vm_area_struct *copy_vma(struct vm_area_struct *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#83: FILE: include/linux/mm.h:515:
+extern struct vm_area_struct *copy_vma(struct vm_area_struct *,
+	unsigned long addr, unsigned long len, unsigned long pgoff);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#84: FILE: include/linux/mm.h:516:
+extern void vma_relink_file(struct vm_area_struct *, struct vm_area_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#84: FILE: include/linux/mm.h:516:
+extern void vma_relink_file(struct vm_area_struct *, struct vm_area_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#84: FILE: include/linux/mm.h:516:
+extern void vma_relink_file(struct vm_area_struct *, struct vm_area_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#94: FILE: include/linux/swap.h:217:
+extern struct swap_info_struct *swap_info_get(swp_entry_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'swp_entry_t' should also have an identifier name
#94: FILE: include/linux/swap.h:217:
+extern struct swap_info_struct *swap_info_get(swp_entry_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#95: FILE: include/linux/swap.h:218:
+extern void swap_info_put(struct swap_info_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct swap_info_struct *' should also have an identifier name
#95: FILE: include/linux/swap.h:218:
+extern void swap_info_put(struct swap_info_struct *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#143: FILE: mm/mmap.c:387:
+static struct vm_area_struct *vma_merge(struct mm_struct *mm,
+			struct vm_area_struct *prev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#214: FILE: mm/mmap.c:1494:
+struct vm_area_struct *copy_vma(struct vm_area_struct *vma,
+	unsigned long addr, unsigned long len, unsigned long pgoff)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#222: FILE: mm/mmap.c:1502:
+	new_vma = vma_merge(mm, prev, rb_parent, addr, addr + len,
+			vma->vm_flags, vma->vm_file, pgoff);

WARNING:MEMORY_BARRIER: memory barrier without comment
#329: FILE: mm/mremap.c:119:
+		smp_rmb();

CHECK:BRACES: braces {} should be used on all arms of this statement
#344: FILE: mm/mremap.c:134:
+		if (si) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#348: FILE: mm/mremap.c:138:
+		} else

WARNING:TYPO_SPELLING: 'enthusiam' may be misspelled - perhaps 'enthusiasm'?
#385: FILE: mm/mremap.c:175:
+ * But no enthusiam for peppering the code with #ifdefs right now.
           ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: braces {} should be used on all arms of this statement
#400: FILE: mm/mremap.c:209:
+			if (!dst)
[...]
+			else if (rmap_needs_broken_cow(src, new_addr))
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#404: FILE: mm/mremap.c:213:
+			else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#406: FILE: mm/mremap.c:215:
+				pte_t pte;
+				pte = ptep_clear_flush(vma, old_addr, src);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#431: FILE: mm/mremap.c:240:
+		ret = move_one_page(vma, old_addr+offset, new_addr+offset);
 		                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#431: FILE: mm/mremap.c:240:
+		ret = move_one_page(vma, old_addr+offset, new_addr+offset);
 		                                                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#440: FILE: mm/mremap.c:249:
+^I^I * if the page (or swap entry) is exclusive to this mm. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#448: FILE: mm/mremap.c:257:
+		ret = handle_mm_fault(vma->vm_mm, vma, old_addr+offset, 1);
 		                                               ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#691: FILE: mm/swapfile.c:161:
+struct swap_info_struct * swap_info_get(swp_entry_t entry)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#700: FILE: mm/swapfile.c:200:
+void swap_info_put(struct swap_info_struct * p)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000294026.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 8 warnings, 15 checks, 595 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000294026.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
