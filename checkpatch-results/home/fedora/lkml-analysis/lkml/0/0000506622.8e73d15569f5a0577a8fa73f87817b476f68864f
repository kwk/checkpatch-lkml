ERROR:SPACING: spaces required around that '==' (ctx:VxO)
#126: FILE: fs/namespace.c:183:
+	return p==&vfsmntlist ? NULL : list_entry(p, struct vfsmount, mnt_list);
 	        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '&' (ctx:OxV)
#126: FILE: fs/namespace.c:183:
+	return p==&vfsmntlist ? NULL : list_entry(p, struct vfsmount, mnt_list);
 	          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#267: FILE: fs/namespace.c:219:
+	if (nfss->acregmin != 3*HZ)
 	                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#268: FILE: fs/namespace.c:220:
+		seq_printf(m, ",acregmin=%d", nfss->acregmin/HZ);
 		                                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#269: FILE: fs/namespace.c:221:
+	if (nfss->acregmax != 60*HZ)
 	                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#270: FILE: fs/namespace.c:222:
+		seq_printf(m, ",acregmax=%d", nfss->acregmax/HZ);
 		                                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#271: FILE: fs/namespace.c:223:
+	if (nfss->acdirmin != 30*HZ)
 	                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#272: FILE: fs/namespace.c:224:
+		seq_printf(m, ",acdirmin=%d", nfss->acdirmin/HZ);
 		                                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#273: FILE: fs/namespace.c:225:
+	if (nfss->acdirmax != 60*HZ)
 	                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#274: FILE: fs/namespace.c:226:
+		seq_printf(m, ",acdirmax=%d", nfss->acdirmax/HZ);
 		                                            ^

CHECK:SPACING: No space is necessary after a cast
#311: FILE: fs/namespace.c:259:
+	path_buf = (char *) __get_free_page(GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#319: FILE: fs/namespace.c:267:
+	free_page((unsigned long) path_buf);

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#337: FILE: fs/namespace.c:285:
+struct seq_operations mounts_op = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#338: FILE: fs/namespace.c:286:
+	start:	m_start,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#339: FILE: fs/namespace.c:287:
+	next:	m_next,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#339: FILE: fs/namespace.c:287:
+	next:	m_next,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#340: FILE: fs/namespace.c:288:
+	stop:	m_stop,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#340: FILE: fs/namespace.c:288:
+	stop:	m_stop,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#341: FILE: fs/namespace.c:289:
+	show:	show_vfsmnt
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#341: FILE: fs/namespace.c:289:
+	show:	show_vfsmnt

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#386: FILE: fs/proc/proc_misc.c:253:
+extern struct seq_operations ksyms_op;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#394: FILE: fs/proc/proc_misc.c:258:
 }
+static struct file_operations proc_ksyms_operations = {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#394: FILE: fs/proc/proc_misc.c:258:
+static struct file_operations proc_ksyms_operations = {

WARNING:INDENTED_LABEL: labels should not be indented
#395: FILE: fs/proc/proc_misc.c:259:
+	open:		ksyms_open,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#396: FILE: fs/proc/proc_misc.c:260:
+	read:		seq_read,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#396: FILE: fs/proc/proc_misc.c:260:
+	read:		seq_read,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#397: FILE: fs/proc/proc_misc.c:261:
+	llseek:		seq_lseek,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#397: FILE: fs/proc/proc_misc.c:261:
+	llseek:		seq_lseek,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#398: FILE: fs/proc/proc_misc.c:262:
+	release:	seq_release,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#398: FILE: fs/proc/proc_misc.c:262:
+	release:	seq_release,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#421: FILE: fs/proc/proc_misc.c:504:
+extern struct seq_operations mounts_op;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#421: FILE: fs/proc/proc_misc.c:504:
+extern struct seq_operations mounts_op;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#426: FILE: fs/proc/proc_misc.c:509:
+}
+static struct file_operations proc_mounts_operations = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#426: FILE: fs/proc/proc_misc.c:509:
+static struct file_operations proc_mounts_operations = {

WARNING:INDENTED_LABEL: labels should not be indented
#427: FILE: fs/proc/proc_misc.c:510:
+	open:		mounts_open,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#428: FILE: fs/proc/proc_misc.c:511:
+	read:		seq_read,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#428: FILE: fs/proc/proc_misc.c:511:
+	read:		seq_read,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#429: FILE: fs/proc/proc_misc.c:512:
+	llseek:		seq_lseek,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#429: FILE: fs/proc/proc_misc.c:512:
+	llseek:		seq_lseek,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#430: FILE: fs/proc/proc_misc.c:513:
+	release:	seq_release,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#430: FILE: fs/proc/proc_misc.c:513:
+	release:	seq_release,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#469: FILE: fs/seq_file.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#470: FILE: fs/seq_file.c:2:
+ * linux/fs/seq_file.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'syntetic' may be misspelled - perhaps 'synthetic'?
#472: FILE: fs/seq_file.c:4:
+ * helper functions for making syntetic files from sequences of records.
                                ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#479: FILE: fs/seq_file.c:11:
+#include <asm/uaccess.h>

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#494: FILE: fs/seq_file.c:26:
+int seq_open(struct file *file, struct seq_operations *op)

WARNING:LINE_SPACING: Missing a blank line after declarations
#497: FILE: fs/seq_file.c:29:
+	struct seq_file *p = kmalloc(sizeof(*p), GFP_KERNEL);
+	if (!p)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#517: FILE: fs/seq_file.c:49:
+	unsigned n, eaten = 0;

CHECK:CAMELCASE: Avoid CamelCase: <Enomem>
#526: FILE: fs/seq_file.c:58:
+			goto Enomem;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Efault>
#533: FILE: fs/seq_file.c:65:
+			goto Efault;

CHECK:CAMELCASE: Avoid CamelCase: <Done>
#544: FILE: fs/seq_file.c:76:
+			goto Done;

WARNING:LINE_SPACING: Missing a blank line after declarations
#549: FILE: fs/seq_file.c:81:
+		int i;
+		for (p=m->op->start(m), i=0; i<pos; p=m->op->next(m, p), i++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#549: FILE: fs/seq_file.c:81:
+		for (p=m->op->start(m), i=0; i<pos; p=m->op->next(m, p), i++) {
 		      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#549: FILE: fs/seq_file.c:81:
+		for (p=m->op->start(m), i=0; i<pos; p=m->op->next(m, p), i++) {
 		                         ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#549: FILE: fs/seq_file.c:81:
+		for (p=m->op->start(m), i=0; i<pos; p=m->op->next(m, p), i++) {
 		                              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#549: FILE: fs/seq_file.c:81:
+		for (p=m->op->start(m), i=0; i<pos; p=m->op->next(m, p), i++) {
 		                                     ^

CHECK:CAMELCASE: Avoid CamelCase: <Fill>
#560: FILE: fs/seq_file.c:92:
+			goto Fill;

WARNING:LINE_SPACING: Missing a blank line after declarations
#572: FILE: fs/seq_file.c:104:
+		size_t offs = m->count;
+		p = m->op->next(m, p);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#624: FILE: fs/seq_file.c:156:
+	switch (origin) {
+		case 1:
[...]
+		case 0:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#632: FILE: fs/seq_file.c:164:
+				m->count = m->from = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LINE_SPACING: Missing a blank line after declarations
#651: FILE: fs/seq_file.c:183:
+	struct seq_file *m = (struct seq_file *)file->private_data;
+	kfree(m->buf);

WARNING:TYPO_SPELLING: 'occurence' may be misspelled - perhaps 'occurrence'?
#662: FILE: fs/seq_file.c:194:
+ *	Puts string into buffer, replacing each occurence of character from
   	                                        ^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#669: FILE: fs/seq_file.c:201:
+        char *p;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#669: FILE: fs/seq_file.c:201:
+        char *p;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#672: FILE: fs/seq_file.c:204:
+        for (p = m->buf + m->count; (c = *s) != '\0' && p < end; s++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#672: FILE: fs/seq_file.c:204:
+        for (p = m->buf + m->count; (c = *s) != '\0' && p < end; s++) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#686: FILE: fs/seq_file.c:218:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#686: FILE: fs/seq_file.c:218:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#688: FILE: fs/seq_file.c:220:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#688: FILE: fs/seq_file.c:220:
+        return 0;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#712: FILE: include/linux/seq_file.h:1:
+#ifndef _LINUX_SEQ_FILE_H

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#716: FILE: include/linux/seq_file.h:5:
+struct seq_operations;

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#724: FILE: include/linux/seq_file.h:13:
+	struct seq_operations *op;

WARNING:SPACING: Unnecessary space before function pointer arguments
#728: FILE: include/linux/seq_file.h:17:
+	void * (*start) (struct seq_file *m);

WARNING:SPACING: Unnecessary space before function pointer arguments
#729: FILE: include/linux/seq_file.h:18:
+	void (*stop) (struct seq_file *m, void *v);

WARNING:SPACING: Unnecessary space before function pointer arguments
#730: FILE: include/linux/seq_file.h:19:
+	void * (*next) (struct seq_file *m, void *v);

WARNING:SPACING: Unnecessary space before function pointer arguments
#731: FILE: include/linux/seq_file.h:20:
+	int (*show) (struct seq_file *m, void *v);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#734: FILE: include/linux/seq_file.h:23:
+int seq_open(struct file *, struct seq_operations *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seq_operations *' should also have an identifier name
#734: FILE: include/linux/seq_file.h:23:
+int seq_open(struct file *, struct seq_operations *);

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#734: FILE: include/linux/seq_file.h:23:
+int seq_open(struct file *, struct seq_operations *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#735: FILE: include/linux/seq_file.h:24:
+ssize_t seq_read(struct file *, char *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#735: FILE: include/linux/seq_file.h:24:
+ssize_t seq_read(struct file *, char *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#735: FILE: include/linux/seq_file.h:24:
+ssize_t seq_read(struct file *, char *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#735: FILE: include/linux/seq_file.h:24:
+ssize_t seq_read(struct file *, char *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#736: FILE: include/linux/seq_file.h:25:
+loff_t seq_lseek(struct file *, loff_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#736: FILE: include/linux/seq_file.h:25:
+loff_t seq_lseek(struct file *, loff_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#736: FILE: include/linux/seq_file.h:25:
+loff_t seq_lseek(struct file *, loff_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#737: FILE: include/linux/seq_file.h:26:
+int seq_release(struct inode *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#737: FILE: include/linux/seq_file.h:26:
+int seq_release(struct inode *, struct file *);

WARNING:LINE_SPACING: Missing a blank line after declarations
#763: FILE: include/linux/seq_file.h:52:
+	int len = strlen(s);
+	if (m->count + len < m->size) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#773: FILE: include/linux/seq_file.h:62:
+	__attribute__ ((format (printf,2,3)));
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#773: FILE: include/linux/seq_file.h:62:
+	__attribute__ ((format (printf,2,3)));
 	                                ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2,3) over __attribute__((format(printf,2,3)))
#773: FILE: include/linux/seq_file.h:62:
+	__attribute__ ((format (printf,2,3)));

WARNING:LINE_SPACING: Missing a blank line after declarations
#835: FILE: kernel/module.c:1170:
+	struct mod_sym *p = kmalloc(sizeof(*p), GFP_KERNEL);
+	if (!p)

WARNING:LINE_SPACING: Missing a blank line after declarations
#846: FILE: kernel/module.c:1181:
+	struct mod_sym *v = p;
+	if (++v->index < v->mod->nsyms)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#847: FILE: kernel/module.c:1182:
+^I^Ireturn p; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#883: FILE: kernel/module.c:1212:
+		seq_printf(m, "%0*lx %s\t[%s]\n", (int)(2*sizeof(void*)),

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#883: FILE: kernel/module.c:1212:
+		seq_printf(m, "%0*lx %s\t[%s]\n", (int)(2*sizeof(void*)),
 		                                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#884: FILE: kernel/module.c:1213:
+		seq_printf(m, "%0*lx %s\t[%s]\n", (int)(2*sizeof(void*)),
+			       sym->value, sym->name, v->mod->name);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#886: FILE: kernel/module.c:1215:
+		seq_printf(m, "%0*lx %s\n", (int)(2*sizeof(void*)),

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#886: FILE: kernel/module.c:1215:
+		seq_printf(m, "%0*lx %s\n", (int)(2*sizeof(void*)),
 		                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#887: FILE: kernel/module.c:1216:
+		seq_printf(m, "%0*lx %s\n", (int)(2*sizeof(void*)),
+			       sym->value, sym->name);

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#891: FILE: kernel/module.c:1220:
+struct seq_operations ksyms_op = {

WARNING:INDENTED_LABEL: labels should not be indented
#892: FILE: kernel/module.c:1221:
+	start:	s_start,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#893: FILE: kernel/module.c:1222:
+	next:	s_next,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#893: FILE: kernel/module.c:1222:
+	next:	s_next,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#894: FILE: kernel/module.c:1223:
+	stop:	s_stop,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#894: FILE: kernel/module.c:1223:
+	stop:	s_stop,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#895: FILE: kernel/module.c:1224:
+	show:	s_show
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#895: FILE: kernel/module.c:1224:
+	show:	s_show

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#908: FILE: mm/filemap.c:2315:
+	struct address_space * as = vma->vm_file->f_dentry->d_inode->i_mapping;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000506622.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 61 warnings, 21 checks, 830 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000506622.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
