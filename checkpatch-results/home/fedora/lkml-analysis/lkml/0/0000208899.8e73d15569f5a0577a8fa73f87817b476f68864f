WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
> > > Hm, that class_simple interface is looking like the way we should move

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cls)...) over kmalloc(sizeof(struct class)...)
#91: FILE: drivers/base/class.c:180:
+	cls = kmalloc(sizeof(struct class), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cls == NULL'
#116: FILE: drivers/base/class.c:205:
+	if ((cls == NULL) || (IS_ERR(cls)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cls"
#116: FILE: drivers/base/class.c:205:
+	if ((cls == NULL) || (IS_ERR(cls)))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cls"
#136: FILE: drivers/base/class.c:525:
+	if (cls == NULL || IS_ERR(cls))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*class_dev)...) over kmalloc(sizeof(struct class_device)...)
#139: FILE: drivers/base/class.c:528:
+	class_dev = kmalloc(sizeof(struct class_device), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#279: FILE: drivers/input/evdev.c:432:
+	class_device_create(input_class,
+			MKDEV(INPUT_MAJOR, EVDEV_MINOR_BASE + minor),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#290: FILE: drivers/input/evdev.c:443:
+	class_device_destroy(input_class,
+			MKDEV(INPUT_MAJOR, EVDEV_MINOR_BASE + evdev->minor));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#351: FILE: drivers/input/joydev.c:457:
+	class_device_create(input_class,
+			MKDEV(INPUT_MAJOR, JOYDEV_MINOR_BASE + minor),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#376: FILE: drivers/input/mousedev.c:637:
+	class_device_create(input_class,
+			MKDEV(INPUT_MAJOR, MOUSEDEV_MINOR_BASE + minor),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#387: FILE: drivers/input/mousedev.c:648:
+	class_device_destroy(input_class,
+			MKDEV(INPUT_MAJOR, MOUSEDEV_MINOR_BASE + mousedev->minor));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#398: FILE: drivers/input/mousedev.c:722:
+	class_device_create(input_class,
+			MKDEV(INPUT_MAJOR, MOUSEDEV_MINOR_BASE + MOUSEDEV_MIX), NULL, "mice");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#408: FILE: drivers/input/mousedev.c:742:
+	class_device_destroy(input_class,
+			MKDEV(INPUT_MAJOR, MOUSEDEV_MINOR_BASE + MOUSEDEV_MIX));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#423: FILE: drivers/input/tsdev.c:420:
+	class_device_create(input_class,
+			MKDEV(INPUT_MAJOR, TSDEV_MINOR_BASE + minor),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#434: FILE: drivers/input/tsdev.c:431:
+	class_device_destroy(input_class,
+			MKDEV(INPUT_MAJOR, TSDEV_MINOR_BASE + tsdev->minor));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#445: FILE: include/linux/device.h:248:
+extern struct class *class_create(char *name);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#446: FILE: include/linux/device.h:249:
+extern void class_destroy(struct class *cls);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#447: FILE: include/linux/device.h:250:
+extern struct class_device *class_device_create(struct class *cls, dev_t devt,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#449: FILE: include/linux/device.h:252:
+extern void class_device_destroy(struct class *cls, dev_t devt);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000208899.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 1 warnings, 18 checks, 351 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000208899.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
