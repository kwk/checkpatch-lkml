WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#90: FILE: include/linux/gfp.h:59:
+			__GFP_NOMEMALLOC|__GFP_HARDWALL|__GFP_THISNODE| \
 			                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#90: FILE: include/linux/gfp.h:59:
+			__GFP_NOMEMALLOC|__GFP_HARDWALL|__GFP_THISNODE| \
 			                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#90: FILE: include/linux/gfp.h:59:
+			__GFP_NOMEMALLOC|__GFP_HARDWALL|__GFP_THISNODE| \
 			                                              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#91: FILE: include/linux/gfp.h:60:
+			__GFP_BC|__GFP_BC_LIMIT)
 			        ^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#146: FILE: include/linux/vmalloc.h:39:
+extern void *vmalloc_bc(unsigned long size);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#166: FILE: include/bc/kmem.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#167: FILE: include/bc/kmem.h:2:
+ *  include/bc/kmem.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#228: FILE: kernel/bc/kmem.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#229: FILE: kernel/bc/kmem.c:2:
+ *  kernel/bc/kmem.c

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bc"
#254: FILE: kernel/bc/kmem.c:27:
+	if (bc == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#259: FILE: kernel/bc/kmem.c:32:
+	if (bc_charge(bc, BC_KMEMSIZE, size,
+			(flags & __GFP_BC_LIMIT ? BC_LIMIT : BC_BARRIER)))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!slab_bcp"
#273: FILE: kernel/bc/kmem.c:46:
+	if (*slab_bcp == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#291: FILE: kernel/bc/kmem.c:64:
+	BUG_ON(page_bc(page) != NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page_bc"
#291: FILE: kernel/bc/kmem.c:64:
+	BUG_ON(page_bc(page) != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bc"
#294: FILE: kernel/bc/kmem.c:67:
+	if (bc == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#298: FILE: kernel/bc/kmem.c:71:
+	if (bc_charge(bc, BC_KMEMSIZE, PAGE_SIZE << order,
+			(flags & __GFP_BC_LIMIT ? BC_LIMIT : BC_BARRIER)))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bc"
#310: FILE: kernel/bc/kmem.c:83:
+	if (bc == NULL)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: mm/page_alloc.c:1066:
+	if ((gfp_mask & __GFP_BC) &&
+			bc_page_charge(page, order, gfp_mask)) {

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#450: FILE: mm/slab.c:859:
+		if (slab_mgmt_size(flags, nr_objs, align) + nr_objs*buffer_size
 		                                                   ^

CHECK:SPACING: No space is necessary after a cast
#533: FILE: mm/slab.c:2471:
+	return (kmem_bufctl_t *) (slabp + 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#538: FILE: mm/slab.c:2476:
+static inline struct beancounter **slab_bc_ptrs(kmem_cache_t *cachep,
+		struct slab *slabp)

CHECK:SPACING: No space is necessary after a cast
#540: FILE: mm/slab.c:2478:
+	return (struct beancounter **) ALIGN((unsigned long)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#575: FILE: mm/slab.c:2518:
+		memset(slab_bc_ptrs(cachep, slabp), 0,
+				cachep->num * BC_EXTRASIZE);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000044888.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 18 warnings, 18 checks, 520 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000044888.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
