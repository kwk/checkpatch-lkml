WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:LINE_SPACING: Please don't use multiple blank lines
#57: FILE: include/linux/sunrpc/svc.h:20:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#69: FILE: include/linux/sunrpc/svc.h:32:
+^Iunsigned int^I^Isp_id;^I    ^I/* pool id; also node id on NUMA */$

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#93: FILE: include/linux/sunrpc/svc.h:65:
+	struct svc_pool *	sv_pools;	/* array of thread pools */

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#102: FILE: include/linux/sunrpc/svc.h:144:
+	struct svc_pool *	rq_pool;	/* thread pool */

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#114: FILE: include/linux/sunrpc/svcsock.h:23:
+	struct svc_pool *	sk_pool;	/* current pool iff queued */

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:ALLOC_ARRAY_ARGS: kcalloc uses number as first arg, sizeof is generally wrong
#143: FILE: net/sunrpc/svc.c:66:
+		kcalloc(sizeof(struct svc_pool), serv->sv_nrpools,

The first argument for kcalloc or kmalloc_array should be the
number of elements.  sizeof() as the first argument is generally
wrong.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: net/sunrpc/svc.c:77:
+		dprintk("initialising pool %u for %s\n",
+				i, serv->sv_name);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#162: FILE: net/sunrpc/svc.c:85:
+
+

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#224: FILE: net/sunrpc/svc.c:232:
+/*
+ * Called from a server thread as it's exiting.  Caller must hold BKL.

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#254: FILE: net/sunrpc/svcsock.c:50:
+ * ^Isvc_serv->sv_lock protects sv_tempsocks, sv_permsocks, sv_tmpcnt.$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#315: FILE: net/sunrpc/svcsock.c:186:
+	BUG_ON(svsk->sk_pool != NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "svsk->sk_pool"
#315: FILE: net/sunrpc/svcsock.c:186:
+	BUG_ON(svsk->sk_pool != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#348: FILE: net/sunrpc/svcsock.c:220:
+		BUG_ON(svsk->sk_pool != pool);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#354: FILE: net/sunrpc/svcsock.c:225:
+		BUG_ON(svsk->sk_pool != pool);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#424: FILE: net/sunrpc/svcsock.c:355:
+			/*
+			svc_thread_dequeue(pool, rqstp);

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#484: FILE: net/sunrpc/svcsock.c:1262:
+	if ((svsk = svc_sock_dequeue(pool)) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#526: FILE: net/sunrpc/svcsock.c:1296:
+	dprintk("svc: server %p, pool %u, socket %p, inuse=%d\n",
+		 rqstp, pool->sp_id, svsk, atomic_read(&svsk->sk_inuse));

ERROR:CODE_INDENT: code indent should use tabs where possible
#535: FILE: net/sunrpc/svcsock.c:1597:
+    ^I/*$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#535: FILE: net/sunrpc/svcsock.c:1597:
+    ^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#535: FILE: net/sunrpc/svcsock.c:1597:
+    ^I/*$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#536: FILE: net/sunrpc/svcsock.c:1598:
+    	/*
+	 * We used to delete the svc_sock from whichever list

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000053189.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 15 warnings, 5 checks, 453 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000053189.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
