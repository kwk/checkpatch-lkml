WARNING:TYPO_SPELLING: 'trasfer' may be misspelled - perhaps 'transfer'?
#30: 
	   running out of memory even when the maximum trasfer size for
	                                               ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'accomodated' may be misspelled - perhaps 'accommodated'?
#37: 
	   being queued immediately.  I have not yet accomodated bio_copy
	                                             ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'Accomodate' may be misspelled - perhaps 'Accommodate'?
#84: 
	2. Accomodate bio_copy failures by reserving one page (or
	   ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#126: FILE: include/linux/loop.h:31:
+#define LO_IV_MODE_SECTOR  1 /* calculate IV based on relative $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#127: FILE: include/linux/loop.h:32:
+#define LO_IV_MODE_SECTOR  1 /* calculate IV based on relative 
+				512 byte sectors */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#127: FILE: include/linux/loop.h:32:
+				512 byte sectors */

CHECK:BIT_MACRO: Prefer using the BIT macro
#129: FILE: include/linux/loop.h:34:
+#define LO_IV_SECTOR_SIZE (1 << LO_IV_SECTOR_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#287: FILE: drivers/block/loop.c:215:
+	if (aops->prepare_write(file, page, offset, offset+size))
 	                                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#297: FILE: drivers/block/loop.c:225:
+		printk(KERN_ERR "loop: transfer error block %ld\n", index);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#305: FILE: drivers/block/loop.c:229:
+	if (aops->commit_write(file, page, offset, offset+size) == 0 &&
 	                                                 ^

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#366: FILE: drivers/block/loop.c:341:
+	switch (lo->lo_iv_mode) {
+		case LO_IV_MODE_SECTOR:
[...]
+		default:
[...]
+		case LO_IV_MODE_DEFAULT:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#372: FILE: drivers/block/loop.c:347:
+			printk (KERN_WARNING "loop: unexpected lo_iv_mode\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#372: FILE: drivers/block/loop.c:347:
+			printk (KERN_WARNING "loop: unexpected lo_iv_mode\n");

CHECK:SPACING: No space is necessary after a cast
#389: FILE: drivers/block/loop.c:362:
+	const loff_t pos = ((loff_t) bio->bi_sector << 9) + lo->lo_offset;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!lo"
#463: FILE: drivers/block/loop.c:503:
+	if (lo == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#513: FILE: drivers/block/loop.c:607:
+			printk(KERN_WARNING "loop: missing bio\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*lo)...) over kmalloc(sizeof(struct loop_device)...)
#559: FILE: drivers/block/loop.c:678:
+	lo = kmalloc(sizeof(struct loop_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!lo"
#560: FILE: drivers/block/loop.c:679:
+	if (lo == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#631: FILE: drivers/block/loop.c:769:
+	if (bdev->bd_openers != 2)	/* one for this fd being open plus
+					   one incremented by loop_set_fd */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#631: FILE: drivers/block/loop.c:769:
+					   one incremented by loop_set_fd */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bdev->bd_queue"
#740: FILE: drivers/block/loop.c:876:
+	lo = (bdev->bd_queue != NULL) ? bdev->bd_queue->queuedata : NULL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "lo"
#746: FILE: drivers/block/loop.c:882:
+	if (lo != NULL) {

CHECK:SPACING: No space is necessary after a cast
#766: FILE: drivers/block/loop.c:899:
+		err = loop_set_status(lo, bdev, (struct loop_info *) arg);

CHECK:SPACING: No space is necessary after a cast
#777: FILE: drivers/block/loop.c:905:
+		err = put_user((unsigned long) compute_loop_sectors(lo),

CHECK:SPACING: No space is necessary after a cast
#778: FILE: drivers/block/loop.c:906:
+			       (unsigned long *) arg);

CHECK:SPACING: No space is necessary after a cast
#786: FILE: drivers/block/loop.c:909:
+		err = put_user((u64) compute_loop_sectors(lo),

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#787: FILE: drivers/block/loop.c:910:
+			       (u64*)arg);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#888: FILE: drivers/block/loop.c:983:
+		printk(KERN_WARNING "loop: invalid max_loop (must be between"

WARNING:SPLIT_STRING: quoted string split across lines
#889: FILE: drivers/block/loop.c:984:
+		printk(KERN_WARNING "loop: invalid max_loop (must be between"
+				    " 1 and 256), using default (%d)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000441915.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 13 warnings, 13 checks, 799 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000441915.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
