WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#55: 
http://www.stinkycat.com/patches/patch-kprobes_sample_with_sysfs-2.5.48.diff

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#69: FILE: arch/i386/kernel/i386_ksyms.c:62:
+extern int valid_kernel_address(unsigned long addr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#110: FILE: drivers/char/Kconfig:1273:
+config NOISY
+	tristate "Noisy Interface Support"
+	---help---
+	  If you say Y here and create a character special file /dev/noisy with
+	  major number 10 and minor number 221 using mknod ("man mknod"), you
+	  will get access to an interface for inserting arbitrary printk's
+	  into executing kernel code.
+
+	  This driver is also available as a module ( = code which can be
+	  inserted in and removed from the running kernel whenever you want).
+	  The module is called noisy.o. If you want to compile it as a module,
+	  say M here and read <file:Documentation/modules.txt>.
+
+	  If unsure, say N.
+
 endmenu

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#148: FILE: drivers/char/noisy.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#164: FILE: drivers/char/noisy.c:17:
+#include <asm/uaccess.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#197: FILE: drivers/char/noisy.c:50:
+	struct nprobe *c = container_of(p, struct nprobe, probe);
+	printk(KERN_CRIT "%s: %s\n", __FUNCTION__, c->message);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#197: FILE: drivers/char/noisy.c:50:
+	printk(KERN_CRIT "%s: %s\n", __FUNCTION__, c->message);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#197: FILE: drivers/char/noisy.c:50:
+	printk(KERN_CRIT "%s: %s\n", __FUNCTION__, c->message);

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#213: FILE: drivers/char/noisy.c:65:
trapnr)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:CONST_STRUCT: struct file_operations should normally be const
#227: FILE: drivers/char/noisy.c:79:
+static struct file_operations noisy_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#240: FILE: drivers/char/noisy.c:92:
+static struct miscdevice noisy_dev =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#247: FILE: drivers/char/noisy.c:99:
+static ssize_t noisy_read(struct file *file, char *buf,
+			size_t count, loff_t *ppos)

WARNING:LINE_SPACING: Missing a blank line after declarations
#250: FILE: drivers/char/noisy.c:102:
+	struct nprobe *p;
+	list_for_each_entry(p, &probe_list, list) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#251: FILE: drivers/char/noisy.c:103:
+		printk(KERN_CRIT "%p: %s\n", (p->probe).addr, p->message);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#286: FILE: drivers/char/noisy.c:135:
+		printk(KERN_CRIT

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*n)...) over kmalloc(sizeof(struct nprobe)...)
#299: FILE: drivers/char/noisy.c:148:
+	n = kmalloc(sizeof(struct nprobe), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around n->probe
#312: FILE: drivers/char/noisy.c:161:
+	if (2 != sscanf(tmp, "0x%x %s", &(n->probe).addr, n->message)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#312: FILE: drivers/char/noisy.c:161:
+	if (2 != sscanf(tmp, "0x%x %s", &(n->probe).addr, n->message)) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#320: FILE: drivers/char/noisy.c:169:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'n->probe'
#321: FILE: drivers/char/noisy.c:170:
+	if (!valid_kernel_address((unsigned long)(n->probe).addr)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around n->kobj
#328: FILE: drivers/char/noisy.c:177:
+	kobject_init(&(n->kobj));

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#334: FILE: drivers/char/noisy.c:183:
+	(n->attr).mode = S_IRUGO;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around n->probe
#336: FILE: drivers/char/noisy.c:185:
+	if (register_kprobe(&(n->probe))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#337: FILE: drivers/char/noisy.c:186:
+		printk(KERN_CRIT "Unable to register probe at %p\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around n->kobj
#345: FILE: drivers/char/noisy.c:194:
+	if (kobject_register(&(n->kobj))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#346: FILE: drivers/char/noisy.c:195:
+		printk(KERN_CRIT "Unable to add probe kobject!\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around n->probe
#347: FILE: drivers/char/noisy.c:196:
+		unregister_kprobe(&(n->probe));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around n->kobj
#354: FILE: drivers/char/noisy.c:203:
+	if (sysfs_create_file(&(n->kobj), &(n->attr))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around n->attr
#354: FILE: drivers/char/noisy.c:203:
+	if (sysfs_create_file(&(n->kobj), &(n->attr))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#355: FILE: drivers/char/noisy.c:204:
+		printk(KERN_CRIT "Unable to add probe attr file!\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around n->probe
#356: FILE: drivers/char/noisy.c:205:
+		unregister_kprobe(&(n->probe));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around n->kobj
#357: FILE: drivers/char/noisy.c:206:
+		kobject_unregister(&(n->kobj));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around n->list
#364: FILE: drivers/char/noisy.c:213:
+	list_add(&(n->list), &probe_list);

ERROR:CODE_INDENT: code indent should use tabs where possible
#369: FILE: drivers/char/noisy.c:218:
+        return ret;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#369: FILE: drivers/char/noisy.c:218:
+        return ret;$

ERROR:SPACING: space required before the open parenthesis '('
#379: FILE: drivers/char/noisy.c:228:
+	while(!list_empty(&probe_list)) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#383: FILE: drivers/char/noisy.c:232:
+		printk("Releasing probe %p: %s\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around p->kobj
#385: FILE: drivers/char/noisy.c:234:
+		sysfs_remove_file(&(p->kobj), &(p->attr));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around p->attr
#385: FILE: drivers/char/noisy.c:234:
+		sysfs_remove_file(&(p->kobj), &(p->attr));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around p->kobj
#386: FILE: drivers/char/noisy.c:235:
+		kobject_unregister(&(p->kobj));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around p->probe
#387: FILE: drivers/char/noisy.c:236:
+		unregister_kprobe(&(p->probe));

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#397: FILE: drivers/char/noisy.c:246:
+	if (misc_register(&noisy_dev))
+	{

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#406: FILE: drivers/char/noisy.c:255:
+static void __exit noisy_exit (void)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000411799.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 20 warnings, 18 checks, 329 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000411799.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
