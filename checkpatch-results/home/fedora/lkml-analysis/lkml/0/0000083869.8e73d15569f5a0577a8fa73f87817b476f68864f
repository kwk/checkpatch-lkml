WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#29: 
Signed-Off-By: Chandra Seetharaman <sekharan@us.ibm.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#30: 
Signed-Off-By: Matt Helsley <matthltc@us.ibm.com>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#59: FILE: kernel/ckrm/ckrm_task.c:1:
+/* ckrm_task.c - Class-based Kernel Resource Management (CKRM)

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#101: FILE: kernel/ckrm/ckrm_task.c:43:
+static void move_to_new_class(struct task_struct *tsk,
+				struct ckrm_class *newclass)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#103: FILE: kernel/ckrm/ckrm_task.c:45:
+	BUG_ON(!list_empty(&tsk->member_list));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#104: FILE: kernel/ckrm/ckrm_task.c:46:
+	BUG_ON(tsk->class != CKRM_NO_CLASS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#113: FILE: kernel/ckrm/ckrm_task.c:55:
+static void notify_res_ctlrs(struct task_struct *tsk,
+		struct ckrm_class *oldclass, struct ckrm_class *newclass)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctlr"
#121: FILE: kernel/ckrm/ckrm_task.c:63:
+		if (ctlr == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#146: FILE: kernel/ckrm/ckrm_task.c:88:
+static void ckrm_setclass_internal(struct task_struct *tsk,
+				struct ckrm_class *newclass)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tsk"
#184: FILE: kernel/ckrm/ckrm_task.c:126:
+	if (tsk == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->user != tsk->user'
#192: FILE: kernel/ckrm/ckrm_task.c:134:
+	if ((!capable(CAP_SYS_NICE)) &&
+		(!capable(CAP_SYS_RESOURCE)) && (current->user != tsk->user))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: kernel/ckrm/ckrm_task.c:135:
+	if ((!capable(CAP_SYS_NICE)) &&
+		(!capable(CAP_SYS_RESOURCE)) && (current->user != tsk->user))

CHECK:BRACES: Unbalanced braces around else statement
#195: FILE: kernel/ckrm/ckrm_task.c:137:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#225: FILE: kernel/ckrm/ckrm.c:261:
+static void move_tasks(struct ckrm_class *class, struct ckrm_controller *ctlr,
+		struct ckrm_shares *from, struct ckrm_shares *to)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#246: FILE: kernel/ckrm/ckrm.c:311:
+		move_tasks(class, ctlr, CKRM_NO_SHARE,
+					class->shares[ctlr->ctlr_id]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#255: FILE: kernel/ckrm/ckrm.c:359:
+		move_tasks(class, ctlr, class->shares[ctlr->ctlr_id],
+							CKRM_NO_SHARE);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#267: FILE: kernel/ckrm/ckrm_local.h:20:
+extern int ckrm_setclass(pid_t, struct ckrm_class *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pid_t' should also have an identifier name
#267: FILE: kernel/ckrm/ckrm_local.h:20:
+extern int ckrm_setclass(pid_t, struct ckrm_class *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ckrm_class *' should also have an identifier name
#267: FILE: kernel/ckrm/ckrm_local.h:20:
+extern int ckrm_setclass(pid_t, struct ckrm_class *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000083869.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 7 warnings, 12 checks, 202 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000083869.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
