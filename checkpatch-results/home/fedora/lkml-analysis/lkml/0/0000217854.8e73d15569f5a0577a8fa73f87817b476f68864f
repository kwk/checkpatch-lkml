CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*bprmp)...) over kmalloc(sizeof(struct linux_binprm)...)
#120: FILE: fs/exec.c:1065:
+	bprmp = kmalloc(sizeof(struct linux_binprm), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#125: FILE: fs/exec.c:1070:
+	bprmp->p = PAGE_SIZE*MAX_ARG_PAGES-sizeof(void *);
 	                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#125: FILE: fs/exec.c:1070:
+	bprmp->p = PAGE_SIZE*MAX_ARG_PAGES-sizeof(void *);
 	                                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#126: FILE: fs/exec.c:1071:
+^Imemset(bprmp->page, 0, MAX_ARG_PAGES*sizeof(bprmp->page[0])); $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#126: FILE: fs/exec.c:1071:
+	memset(bprmp->page, 0, MAX_ARG_PAGES*sizeof(bprmp->page[0])); 
 	                                    ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#141: FILE: fs/exec.c:1079:
+	if ((bprmp->argc = count(argv, bprmp->p / sizeof(void *))) < 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#150: FILE: fs/exec.c:1086:
+	if ((bprmp->envc = count(envp, bprmp->p / sizeof(void *))) < 0) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#181: FILE: fs/exec.c:1110:
+	retval = search_binary_handler(bprmp,regs);
 	                                    ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#198: FILE: fs/exec.c:1122:
+		struct page * page = bprmp->page[i];

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*fhandle)...) over kmalloc(sizeof(struct nfs_fh)...)
#226: FILE: fs/nfs/dir.c:651:
+	fhandle = kmalloc(sizeof(struct nfs_fh), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*fattr)...) over kmalloc(sizeof(struct nfs_fattr)...)
#229: FILE: fs/nfs/dir.c:654:
+	fattr = kmalloc(sizeof(struct nfs_fattr), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*entry)...) over kmalloc(sizeof(struct nfs_entry)...)
#292: FILE: fs/nfs/dir.c:739:
+	entry = kmalloc(sizeof(struct nfs_entry), GFP_KERNEL);

ERROR:SPACING: space required after that ';' (ctx:BxV)
#314: FILE: fs/nfs/dir.c:754:
+	for(;(page = find_get_page(dir->i_mapping, desc->page_index)); desc->page_index++) {
 	    ^

ERROR:SPACING: space required before the open parenthesis '('
#314: FILE: fs/nfs/dir.c:754:
+	for(;(page = find_get_page(dir->i_mapping, desc->page_index)); desc->page_index++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#341: FILE: fs/nfs/dir.c:773:
+ ^Ikfree(entry);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#341: FILE: fs/nfs/dir.c:773:
+ ^Ikfree(entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: fs/nfs/dir.c:773:
+ ^Ikfree(entry);$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*fattr)...) over kmalloc(sizeof(struct nfs_fattr)...)
#361: FILE: fs/nfs/inode.c:1034:
+	fattr = kmalloc(sizeof(struct nfs_fattr), GFP_KERNEL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#362: FILE: fs/nfs/inode.c:1035:
+^Iif (!fattr) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#403: FILE: lib/vsprintf.c:130:
+/* Move these off of the stack for number().  This way we reduce the $

WARNING:STATIC_CONST_CHAR_ARRAY: const array should probably be static const
#406: FILE: lib/vsprintf.c:133:
+const char small_digits[] = "0123456789abcdefghijklmnopqrstuvwxyz";

WARNING:STATIC_CONST_CHAR_ARRAY: const array should probably be static const
#407: FILE: lib/vsprintf.c:134:
+const char large_digits[] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

ERROR:CODE_INDENT: code indent should use tabs where possible
#434: FILE: net/sunrpc/clnt.c:256:
+        task = kmalloc(sizeof(struct rpc_task), GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#434: FILE: net/sunrpc/clnt.c:256:
+        task = kmalloc(sizeof(struct rpc_task), GFP_KERNEL);$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*task)...) over kmalloc(sizeof(struct rpc_task)...)
#434: FILE: net/sunrpc/clnt.c:256:
+        task = kmalloc(sizeof(struct rpc_task), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*msg)...) over kmalloc(sizeof(struct msghdr)...)
#468: FILE: net/sunrpc/xprt.c:228:
+	msg = kmalloc(sizeof(struct msghdr), GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#471: FILE: net/sunrpc/xprt.c:231:
+	niv = kmalloc(sizeof(struct iovec)*MAX_IOVEC, GFP_KERNEL);
 	                                  ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*niv)...) over kmalloc(sizeof(struct iovec)...)
#471: FILE: net/sunrpc/xprt.c:231:
+	niv = kmalloc(sizeof(struct iovec)*MAX_IOVEC, GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#490: FILE: net/sunrpc/xprt.c:253:
+		msg->msg_flags   = MSG_DONTWAIT|MSG_NOSIGNAL;
 		                               ^

CHECK:SPACING: No space is necessary after a cast
#493: FILE: net/sunrpc/xprt.c:256:
+		msg->msg_name	= (struct sockaddr *) &xprt->addr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#547: FILE: net/sunrpc/xprt.c:293:
+			printk(KERN_NOTICE "RPC: sendmsg returned error %d\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#548: FILE: net/sunrpc/xprt.c:294:
+^I^I^I        -result);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#548: FILE: net/sunrpc/xprt.c:294:
+			printk(KERN_NOTICE "RPC: sendmsg returned error %d\n",
+			        -result);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000217854.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 6 warnings, 15 checks, 417 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000217854.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
