WARNING:NEW_TYPEDEFS: do not add new typedefs
#158: FILE: include/linux/cpumask.h:76:
+typedef struct { DECLARE_BITMAP(bits, NR_CPUS); } cpumask_t;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#158: FILE: include/linux/cpumask.h:76:
+typedef struct { DECLARE_BITMAP(bits, NR_CPUS); } cpumask_t;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#166: FILE: include/linux/cpumask.h:80:
+static inline void __cpu_set(int cpu, volatile cpumask_t *dstp)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#172: FILE: include/linux/cpumask.h:86:
+static inline void __cpu_clear(int cpu, volatile cpumask_t *dstp)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#200: FILE: include/linux/cpumask.h:114:
+static inline void __cpus_and(cpumask_t *dstp, cpumask_t *src1p,
+					cpumask_t *src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: include/linux/cpumask.h:121:
+static inline void __cpus_or(cpumask_t *dstp, cpumask_t *src1p,
+					cpumask_t *src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#214: FILE: include/linux/cpumask.h:128:
+static inline void __cpus_xor(cpumask_t *dstp, cpumask_t *src1p,
+					cpumask_t *src2p, int nbits)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#220: FILE: include/linux/cpumask.h:134:
+				__cpus_andnot(&(dst), &(src1), &(src2), NR_CPUS)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#222: FILE: include/linux/cpumask.h:136:
+static inline void __cpus_andnot(cpumask_t *dstp, cpumask_t *src1p,
+					cpumask_t *src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#229: FILE: include/linux/cpumask.h:143:
+static inline void __cpus_complement(cpumask_t *dstp,
+					cpumask_t *srcp, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#236: FILE: include/linux/cpumask.h:150:
+static inline int __cpus_equal(cpumask_t *src1p,
+					cpumask_t *src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#243: FILE: include/linux/cpumask.h:157:
+static inline int __cpus_intersects(cpumask_t *src1p,
+					cpumask_t *src2p, int nbits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: include/linux/cpumask.h:164:
+static inline int __cpus_subset(cpumask_t *src1p,
+					cpumask_t *src2p, int nbits)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#274: FILE: include/linux/cpumask.h:188:
+			__cpus_shift_right(&(dst), &(src), (n), NR_CPUS)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#276: FILE: include/linux/cpumask.h:190:
+static inline void __cpus_shift_right(cpumask_t *dstp,
+					cpumask_t *srcp, int n, int nbits)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#282: FILE: include/linux/cpumask.h:196:
+			__cpus_shift_left(&(dst), &(src), (n), NR_CPUS)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#284: FILE: include/linux/cpumask.h:198:
+static inline void __cpus_shift_left(cpumask_t *dstp,
+					cpumask_t *srcp, int n, int nbits)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#298: FILE: include/linux/cpumask.h:212:
+	return find_next_bit(srcp->bits, nbits, n+1);
 	                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#301: FILE: include/linux/cpumask.h:215:
+#define cpumask_of_cpu(cpu)						\
+({									\
+	typeof(_unused_cpumask_arg_) m;					\
+	if (sizeof(m) == sizeof(unsigned long)) {			\
+		m.bits[0] = 1UL<<(cpu);					\
+	} else {							\
+		cpus_clear(m);						\
+		cpu_set((cpu), m);					\
+	}								\
+	m;								\
+})

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#305: FILE: include/linux/cpumask.h:219:
+		m.bits[0] = 1UL<<(cpu);					\
 		               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#319: FILE: include/linux/cpumask.h:233:
+	[BITS_TO_LONGS(NR_CPUS)-1] = CPU_MASK_LAST_WORD			\
 	                       ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#319: FILE: include/linux/cpumask.h:233:
+	[BITS_TO_LONGS(NR_CPUS)-1] = CPU_MASK_LAST_WORD			\

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#332: FILE: include/linux/cpumask.h:240:
+	[0 ... BITS_TO_LONGS(NR_CPUS)-2] = ~0UL,			\
 	                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#333: FILE: include/linux/cpumask.h:241:
+	[BITS_TO_LONGS(NR_CPUS)-1] = CPU_MASK_LAST_WORD			\
 	                       ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#333: FILE: include/linux/cpumask.h:241:
+	[BITS_TO_LONGS(NR_CPUS)-1] = CPU_MASK_LAST_WORD			\

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#345: FILE: include/linux/cpumask.h:248:
+	[0 ... BITS_TO_LONGS(NR_CPUS)-1] =  0UL				\
 	                             ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#351: FILE: include/linux/cpumask.h:254:
+			__cpumask_scnprintf((buf), (len), &(src), NR_CPUS)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#353: FILE: include/linux/cpumask.h:256:
+static inline int __cpumask_scnprintf(char *buf, int len,
+					cpumask_t *srcp, int nbits)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#359: FILE: include/linux/cpumask.h:262:
+			__cpumask_parse((ubuf), (ulen), &(src), NR_CPUS)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#361: FILE: include/linux/cpumask.h:264:
+static inline int __cpumask_parse(const char __user *buf, int len,
+					cpumask_t *srcp, int nbits)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#367: FILE: include/linux/cpumask.h:270:
+#define for_each_cpu_mask(cpu, mask)		\
+	for ((cpu) = first_cpu(mask);		\
+		(cpu) < NR_CPUS;		\
+		(cpu) = next_cpu((cpu), (mask)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mask' - possible side-effects?
#367: FILE: include/linux/cpumask.h:270:
+#define for_each_cpu_mask(cpu, mask)		\
+	for ((cpu) = first_cpu(mask);		\
+		(cpu) < NR_CPUS;		\
+		(cpu) = next_cpu((cpu), (mask)))

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#369: FILE: include/linux/cpumask.h:272:
+		(cpu) < NR_CPUS;		\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#372: FILE: include/linux/cpumask.h:275:
+#define for_each_cpu_mask(cpu, mask) for ((cpu) = 0; (cpu) < 1; (cpu)++)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#472: FILE: include/linux/cpumask.h:368:
+#define cpu_isset_const(a,b) cpu_isset(a,b)
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#472: FILE: include/linux/cpumask.h:368:
+#define cpu_isset_const(a,b) cpu_isset(a,b)
                                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#548: FILE: kernel/rcupdate.c:140:
+		cpus_andnot(rcu_state.rcu_cpu_mask, cpu_online_map,
+							nohz_cpu_mask);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000277465.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 12 warnings, 23 checks, 464 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000277465.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
