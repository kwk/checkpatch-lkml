CHECK:SPACING: No space is necessary after a cast
#94: FILE: drivers/block/ll_rw_blk.c:1706:
+	current->bwtime += (unsigned long) jiffies - start_wait;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#145: FILE: fs/read_write.c:549:
+	if (ret > 0) {
+		current->rchar += ret;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#156: FILE: fs/read_write.c:571:
+	if (ret > 0) {
+		current->wchar += ret;
+	}

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#185: FILE: kernel/fork.c:969:
+	p->rchar = p->wchar = p->rblk = p->wblk = p->syscr = p->syscw = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: include/linux/sched.h:527:
+        unsigned long rchar, wchar, rblk, wblk, syscr, syscw, bwtime;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: include/linux/sched.h:527:
+        unsigned long rchar, wchar, rblk, wblk, syscr, syscw, bwtime;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#229: FILE: fs/exec.c:1150:
+                csa_update_integrals();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: fs/exec.c:1150:
+                csa_update_integrals();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: fs/exec.c:1151:
+                update_mem_hiwater();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: fs/exec.c:1151:
+                update_mem_hiwater();$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#239: FILE: include/linux/csa_internal.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#254: FILE: include/linux/csa_internal.h:16:
+ * with this program; if not, write to the Free Software Foundation, Inc.,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#255: FILE: include/linux/csa_internal.h:17:
+ * 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#276: FILE: include/linux/csa_internal.h:38:
+#if defined (CONFIG_CSA) || defined (CONFIG_CSA_MODULE)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#276: FILE: include/linux/csa_internal.h:38:
+#if defined (CONFIG_CSA) || defined (CONFIG_CSA_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#276: FILE: include/linux/csa_internal.h:38:
+#if defined (CONFIG_CSA) || defined (CONFIG_CSA_MODULE)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#299: FILE: include/linux/csa_internal.h:61:
+^I}^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#304: FILE: include/linux/csa_internal.h:66:
+#define csa_update_integrals()		do { } while (0);

do {} while(0) macros should not have a trailing semicolon.

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#305: FILE: include/linux/csa_internal.h:67:
+#define csa_clear_integrals(task)	do { } while (0);

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#326: FILE: include/linux/sched.h:530:
+#if defined(CONFIG_CSA) || defined(CONFIG_CSA_MODULE)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#341: FILE: include/linux/sched.h:886:
+		if (current->mm->hiwater_rss < current->mm->rss) {
+			current->mm->hiwater_rss = current->mm->rss;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#344: FILE: include/linux/sched.h:889:
+		if (current->mm->hiwater_vm < current->mm->total_vm) {
+			current->mm->hiwater_vm = current->mm->total_vm;
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#393: FILE: kernel/fork.c:582:
+^Imm->hiwater_vm = mm->total_vm;^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#424: FILE: mm/memory.c:610:
+        csa_update_integrals();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#424: FILE: mm/memory.c:610:
+        csa_update_integrals();$

CHECK:BRACES: braces {} should be used on all arms of this statement
#433: FILE: mm/memory.c:1101:
+		if (PageReserved(old_page)) {
[...]
+			update_mem_hiwater();
[...]

CHECK:BRACES: Unbalanced braces around else statement
#439: FILE: mm/memory.c:1106:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#450: FILE: mm/memory.c:1390:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#450: FILE: mm/memory.c:1390:
+  $

WARNING:SPACING: Unnecessary space before function pointer arguments
#618: FILE: kernel/exit.c:35:
+void (*do_eop_acct) (int, struct task_struct *) = NULL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "do_eop_acct"
#628: FILE: kernel/exit.c:831:
+	if (do_eop_acct != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#638: FILE: include/linux/acct_eop.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#652: FILE: include/linux/acct_eop.h:15:
+ * with this program; if not, write to the Free Software Foundation, Inc.,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#653: FILE: include/linux/acct_eop.h:16:
+ * 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#664: FILE: include/linux/acct_eop.h:27:
+ *  This header file contains the hook needed for processing of $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#672: FILE: include/linux/acct_eop.h:35:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#673: FILE: include/linux/acct_eop.h:36:
+extern void (*do_eop_acct) (int, struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#673: FILE: include/linux/acct_eop.h:36:
+extern void (*do_eop_acct) (int, struct task_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#673: FILE: include/linux/acct_eop.h:36:
+extern void (*do_eop_acct) (int, struct task_struct *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#689: FILE: include/linux/csa.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#694: FILE: include/linux/csa.h:6:
+ * it under the terms of the GNU General Public License as $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#697: FILE: include/linux/csa.h:9:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#698: FILE: include/linux/csa.h:10:
+ * This program is distributed in the hope that it would be useful, but $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#699: FILE: include/linux/csa.h:11:
+ * WITHOUT ANY WARRANTY; without even the implied warranty of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#701: FILE: include/linux/csa.h:13:
+ * GNU General Public License for more details. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#703: FILE: include/linux/csa.h:15:
+ * You should have received a copy of the GNU General Public License along $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#704: FILE: include/linux/csa.h:16:
+ * with this program; if not, write to the Free Software Foundation, Inc.,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#705: FILE: include/linux/csa.h:17:
+ * 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#709: FILE: include/linux/csa.h:21:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#710: FILE: include/linux/csa.h:22:
+ * http://www.sgi.com $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#718: FILE: include/linux/csa.h:30:
+ *  user-level programs that try to write or process the binary job $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#737: FILE: include/linux/csa.h:49:
+#define ACKPT   ^I0x04^I/* process has been checkpointed */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#763: FILE: include/linux/csa.h:75:
+#define^IACCT_KERNEL_MT ^I^I0006^I/* Kernel: multi-tasking record */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#773: FILE: include/linux/csa.h:85:
+#define^IACCT_DAEMON_WKMG      ^I0122^I/* Daemon: workload management record,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#774: FILE: include/linux/csa.h:86:
+^I^I^I^I^I           i.e., LSF */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#774: FILE: include/linux/csa.h:86:
+#define	ACCT_DAEMON_WKMG      	0122	/* Daemon: workload management record,
+					           i.e., LSF */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#774: FILE: include/linux/csa.h:86:
+					           i.e., LSF */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#787: FILE: include/linux/csa.h:99:
+#define	ACCT_MEM	1<<0	/* Process generated memory record */
        	        	 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#787: FILE: include/linux/csa.h:99:
+#define	ACCT_MEM	1<<0	/* Process generated memory record */

CHECK:BIT_MACRO: Prefer using the BIT macro
#787: FILE: include/linux/csa.h:99:
+#define	ACCT_MEM	1<<0	/* Process generated memory record */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#788: FILE: include/linux/csa.h:100:
+#define	ACCT_IO		1<<1	/* Process generated I/O record */
        	       		 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#788: FILE: include/linux/csa.h:100:
+#define	ACCT_IO		1<<1	/* Process generated I/O record */

CHECK:BIT_MACRO: Prefer using the BIT macro
#788: FILE: include/linux/csa.h:100:
+#define	ACCT_IO		1<<1	/* Process generated I/O record */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#789: FILE: include/linux/csa.h:101:
+#define	ACCT_MT		1<<2	/* Process used multi-tasking */
        	       		 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#789: FILE: include/linux/csa.h:101:
+#define	ACCT_MT		1<<2	/* Process used multi-tasking */

CHECK:BIT_MACRO: Prefer using the BIT macro
#789: FILE: include/linux/csa.h:101:
+#define	ACCT_MT		1<<2	/* Process used multi-tasking */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#790: FILE: include/linux/csa.h:102:
+#define	ACCT_MPP	1<<3	/* Process used multi-PE */
        	        	 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#790: FILE: include/linux/csa.h:102:
+#define	ACCT_MPP	1<<3	/* Process used multi-PE */

CHECK:BIT_MACRO: Prefer using the BIT macro
#790: FILE: include/linux/csa.h:102:
+#define	ACCT_MPP	1<<3	/* Process used multi-PE */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#801: FILE: include/linux/csa.h:113:
+#define^IREV_MT ^I^I02400^I/* Kernel: multi-tasking record */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#807: FILE: include/linux/csa.h:119:
+#define REV_NQS^I^I02400 ^I/* Daemon: NQS record */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#808: FILE: include/linux/csa.h:120:
+#define REV_WKMG^I02400 ^I/* Daemon: workload management (i.e., LSF)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#809: FILE: include/linux/csa.h:121:
+^I^I^I^I           record */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#809: FILE: include/linux/csa.h:121:
+#define REV_WKMG	02400 	/* Daemon: workload management (i.e., LSF)
+				           record */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#809: FILE: include/linux/csa.h:121:
+				           record */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#822: FILE: include/linux/csa.h:134:
+struct achead
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#834: FILE: include/linux/csa.h:146:
+ *  vary (i.e. uint_32_t instead of uid_t).
+*/

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#840: FILE: include/linux/csa.h:152:
+struct acctcsa
+{

ERROR:TRAILING_WHITESPACE: trailing whitespace
#842: FILE: include/linux/csa.h:154:
+^Istruct achead^Iac_hdr2;^I/* 2nd header for continued records */ $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#843: FILE: include/linux/csa.h:155:
+^Idouble ^I^Iac_sbu;^I^I/* System billing units */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#848: FILE: include/linux/csa.h:160:
+	uint32_t	ac_uid;		/* User ID */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#849: FILE: include/linux/csa.h:161:
+	uint32_t	ac_gid;		/* Group ID */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#850: FILE: include/linux/csa.h:162:
+	uint64_t	ac_ash;		/* Array session handle */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#851: FILE: include/linux/csa.h:163:
+	uint64_t	ac_jid;		/* Job ID */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#852: FILE: include/linux/csa.h:164:
+	uint64_t	ac_prid;	/* Project ID -> account ID */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#853: FILE: include/linux/csa.h:165:
+	uint32_t	ac_pid;		/* Process ID */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#854: FILE: include/linux/csa.h:166:
+	uint32_t	ac_ppid;	/* Parent process ID */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#858: FILE: include/linux/csa.h:170:
+	uint64_t	ac_etime;	/* Elapsed time [usecs] */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#859: FILE: include/linux/csa.h:171:
+	uint64_t	ac_utime;	/* User CPU time [usec] */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#860: FILE: include/linux/csa.h:172:
+	uint64_t	ac_stime;	/* System CPU time [usec] */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#861: FILE: include/linux/csa.h:173:
+	uint64_t	ac_spare;	/* Spare field */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#862: FILE: include/linux/csa.h:174:
+	uint64_t        ac_spare1;	/* Spare field */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#870: FILE: include/linux/csa.h:182:
+struct memint
+{

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#871: FILE: include/linux/csa.h:183:
+	uint64_t	himem;	/* Hiwater memory usage [Kbytes] */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#872: FILE: include/linux/csa.h:184:
+	uint64_t	mem1;	/* Memory integral 1 [Mbytes/uSec] */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#873: FILE: include/linux/csa.h:185:
+	uint64_t	mem2;	/* Memory integral 2 - not used */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#874: FILE: include/linux/csa.h:186:
+	uint64_t	mem3;	/* Memory integral 3 - not used */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#881: FILE: include/linux/csa.h:193:
+struct acctmem
+{

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#883: FILE: include/linux/csa.h:195:
+^Idouble ^I^Iac_sbu;^I^I/* System billing units */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#886: FILE: include/linux/csa.h:198:
+	uint64_t	ac_pgswap;	/* # of pages swapped  */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#887: FILE: include/linux/csa.h:199:
+	uint64_t	ac_minflt;	/* # of minor page faults */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#888: FILE: include/linux/csa.h:200:
+	uint64_t	ac_majflt;	/* # of major page faults */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#889: FILE: include/linux/csa.h:201:
+	uint64_t	ac_spare;	/* Spare field */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#896: FILE: include/linux/csa.h:208:
+struct acctio
+{

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#898: FILE: include/linux/csa.h:210:
+^Idouble ^I^I^Iac_sbu;^I   /* System billing units */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#899: FILE: include/linux/csa.h:211:
+	uint64_t	ac_bwtime; /* Block I/O wait time [usecs] */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#900: FILE: include/linux/csa.h:212:
+	uint64_t	ac_rwtime; /* Raw I/O wait time [usecs] */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#901: FILE: include/linux/csa.h:213:
+	uint64_t	ac_chr;    /* Number of chars (bytes) read */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#902: FILE: include/linux/csa.h:214:
+	uint64_t	ac_chw;	   /* Number of chars (bytes) written */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#903: FILE: include/linux/csa.h:215:
+	uint64_t	ac_bkr;	   /* Number of blocks read */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#904: FILE: include/linux/csa.h:216:
+	uint64_t	ac_bkw;	   /* Number of blocks written */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#905: FILE: include/linux/csa.h:217:
+	uint64_t	ac_scr;	   /* Number of read system calls */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#906: FILE: include/linux/csa.h:218:
+	uint64_t	ac_scw;	   /* Number of write system calls */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#907: FILE: include/linux/csa.h:219:
+	uint64_t	ac_spare;  /* Spare field */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#915: FILE: include/linux/csa.h:227:
+struct mtask
+{

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#916: FILE: include/linux/csa.h:228:
+	uint64_t	mt;		/* CPU+1 connect time [usecs] */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#917: FILE: include/linux/csa.h:229:
+	uint64_t	spare1;		/* Spare field */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#918: FILE: include/linux/csa.h:230:
+	uint64_t	spare2;		/* Spare field */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#927: FILE: include/linux/csa.h:239:
+struct acctmt
+{

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#929: FILE: include/linux/csa.h:241:
+^Idouble ^I^Iac_sbu;^I^I/* System billing units */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#933: FILE: include/linux/csa.h:245:
+	int64_t		ac_smwtime;	/* Semaphore wait time [usec] */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#935: FILE: include/linux/csa.h:247:
+	struct mtask	ac_mttime[ACCT_MAXCPUS]; /* Time connected to (i+1)
+						    CPUs [usec] */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#935: FILE: include/linux/csa.h:247:
+						    CPUs [usec] */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#943: FILE: include/linux/csa.h:255:
+struct acctpe
+{

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#944: FILE: include/linux/csa.h:256:
+	uint64_t	utime;	 /* User CPU time [usecs] */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#945: FILE: include/linux/csa.h:257:
+	uint64_t	srtime;	 /* System & remote CPU time [usecs] */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#946: FILE: include/linux/csa.h:258:
+	uint64_t	io;	 /* Number of chars transferred */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#955: FILE: include/linux/csa.h:267:
+struct acctmpp
+{

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#956: FILE: include/linux/csa.h:268:
+^Istruct achead ^Iac_hdr;^I^I/* Header */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#957: FILE: include/linux/csa.h:269:
+^Idouble ^I^Iac_sbu;^I^I/* System billing units */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#960: FILE: include/linux/csa.h:272:
+	uint64_t	ac_himem; /* Maximum memory hiwater [Mbytes] */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#969: FILE: include/linux/csa.h:281:
+struct acctdpe
+{

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#970: FILE: include/linux/csa.h:282:
+^Istruct achead ^Iac_hdr;^I^I/* Header */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#972: FILE: include/linux/csa.h:284:
+	uint64_t	utime;		/* User CPU time [usecs] */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#973: FILE: include/linux/csa.h:285:
+	uint64_t	stime;		/* System CPU time [usecs] */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#974: FILE: include/linux/csa.h:286:
+	uint64_t	rtime;		/* Remote CPU time [usecs] */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#976: FILE: include/linux/csa.h:288:
+	uint64_t	ctime;		/* Connect CPU time [usecs] */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#977: FILE: include/linux/csa.h:289:
+	uint64_t	io;		/* Number of chars transferred */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#978: FILE: include/linux/csa.h:290:
+	uint64_t	spare;		/* Spare field */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#986: FILE: include/linux/csa.h:298:
+typedef enum

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#987: FILE: include/linux/csa.h:299:
+typedef enum
+{

ERROR:CODE_INDENT: code indent should use tabs where possible
#988: FILE: include/linux/csa.h:300:
+        AC_INIT_LOGIN,          /* Initiated by login */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#988: FILE: include/linux/csa.h:300:
+        AC_INIT_LOGIN,          /* Initiated by login */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#989: FILE: include/linux/csa.h:301:
+        AC_INIT_NQS,            /* Initiated by NQS */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#989: FILE: include/linux/csa.h:301:
+        AC_INIT_NQS,            /* Initiated by NQS */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#990: FILE: include/linux/csa.h:302:
+        AC_INIT_LSF,            /* Initiated by LSF */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#990: FILE: include/linux/csa.h:302:
+        AC_INIT_LSF,            /* Initiated by LSF */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#991: FILE: include/linux/csa.h:303:
+        AC_INIT_CROND,          /* Initiated by crond */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#991: FILE: include/linux/csa.h:303:
+        AC_INIT_CROND,          /* Initiated by crond */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#992: FILE: include/linux/csa.h:304:
+        AC_INIT_FTPD,           /* Initiated by ftpd */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#992: FILE: include/linux/csa.h:304:
+        AC_INIT_FTPD,           /* Initiated by ftpd */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#993: FILE: include/linux/csa.h:305:
+        AC_INIT_INETD,          /* Initiated by inetd */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#993: FILE: include/linux/csa.h:305:
+        AC_INIT_INETD,          /* Initiated by inetd */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#994: FILE: include/linux/csa.h:306:
+        AC_INIT_TELNETD,        /* Initiated by telnetd */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#994: FILE: include/linux/csa.h:306:
+        AC_INIT_TELNETD,        /* Initiated by telnetd */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#995: FILE: include/linux/csa.h:307:
+        AC_INIT_MAX$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#995: FILE: include/linux/csa.h:307:
+        AC_INIT_MAX$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#998: FILE: include/linux/csa.h:310:
+
+

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1003: FILE: include/linux/csa.h:315:
+struct acctsoj
+{

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1004: FILE: include/linux/csa.h:316:
+^Istruct achead ^Iac_hdr;^I^I/* Header */$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1006: FILE: include/linux/csa.h:318:
+	unsigned int	ac_type:8;	/* Record type (AC_SOJ, AC_ROJ) */
+	ac_inittype	ac_init:8;	/* Initiator - currently not used */

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1006: FILE: include/linux/csa.h:318:
+	ac_inittype	ac_init:8;	/* Initiator - currently not used */
 	           	       ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1008: FILE: include/linux/csa.h:320:
+	uint32_t	ac_uid;		/* User ID */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1009: FILE: include/linux/csa.h:321:
+	uint64_t	ac_jid;		/* Job ID */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1010: FILE: include/linux/csa.h:322:
+^Itime_t^I ^Iac_btime;^I/* Start time [secs since 1970] */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1011: FILE: include/linux/csa.h:323:
+^Itime_t^I ^Iac_rstime;^I/* Restart time [secs since 1970] */$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1019: FILE: include/linux/csa.h:331:
+struct accteoj
+{

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1020: FILE: include/linux/csa.h:332:
+^Istruct achead^Iac_hdr1;^I/* Header */ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1021: FILE: include/linux/csa.h:333:
+^Istruct achead^Iac_hdr2;^I/* 2nd header for continued records */ $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1022: FILE: include/linux/csa.h:334:
+^Idouble ^I^Iac_sbu;^I^I/* System billing units */$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1023: FILE: include/linux/csa.h:335:
+	double 		ac_sbu;		/* System billing units */
+	ac_inittype	ac_init:8;	/* Initiator - currently not used */

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1023: FILE: include/linux/csa.h:335:
+	ac_inittype	ac_init:8;	/* Initiator - currently not used */
 	           	       ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1026: FILE: include/linux/csa.h:338:
+	uint32_t	ac_uid;		/* User ID */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1027: FILE: include/linux/csa.h:339:
+	uint32_t	ac_gid;		/* Group ID */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1028: FILE: include/linux/csa.h:340:
+	uint64_t	ac_ash;		/* Array session handle; not used */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1029: FILE: include/linux/csa.h:341:
+	uint64_t	ac_jid;		/* Job ID */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1030: FILE: include/linux/csa.h:342:
+	uint64_t	ac_prid;	/* Project ID; not used */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1031: FILE: include/linux/csa.h:343:
+^Itime_t^I ^Iac_btime;^I/* Job start time [secs since 1970] */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1032: FILE: include/linux/csa.h:344:
+^Itime_t  ^Iac_etime;^I/* Job end time   [secs since 1970] */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1033: FILE: include/linux/csa.h:345:
+	uint64_t	ac_corehimem;	/* Hiwater core mem [Kbytes] */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1034: FILE: include/linux/csa.h:346:
+	uint64_t	ac_virthimem;	/* Hiwater virt mem [Kbytes] */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1036: FILE: include/linux/csa.h:348:
+	uint64_t	ac_utime;  /* User CPU time [usec]  */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1037: FILE: include/linux/csa.h:349:
+	uint64_t	ac_stime; /* System CPU time [usec] */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1038: FILE: include/linux/csa.h:350:
+^Iuint32_t^Iac_spare;^I$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1038: FILE: include/linux/csa.h:350:
+	uint32_t	ac_spare;	

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1046: FILE: include/linux/csa.h:358:
+struct ac_utsname
+{

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1058: FILE: include/linux/csa.h:370:
+typedef enum

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#1059: FILE: include/linux/csa.h:371:
+typedef enum
+{

ERROR:CODE_INDENT: code indent should use tabs where possible
#1060: FILE: include/linux/csa.h:372:
+        AC_CONFCHG_BOOT,        /* Boot time (always first) */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1060: FILE: include/linux/csa.h:372:
+        AC_CONFCHG_BOOT,        /* Boot time (always first) */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1061: FILE: include/linux/csa.h:373:
+        AC_CONFCHG_FILE,        /* Reporting pacct file change */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1061: FILE: include/linux/csa.h:373:
+        AC_CONFCHG_FILE,        /* Reporting pacct file change */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1062: FILE: include/linux/csa.h:374:
+        AC_CONFCHG_ON,          /* Reporting xxx ON */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1062: FILE: include/linux/csa.h:374:
+        AC_CONFCHG_ON,          /* Reporting xxx ON */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1063: FILE: include/linux/csa.h:375:
+        AC_CONFCHG_OFF,         /* Reporting xxx OFF */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1063: FILE: include/linux/csa.h:375:
+        AC_CONFCHG_OFF,         /* Reporting xxx OFF */$

WARNING:LONG_LINE: line length of 153 exceeds 100 columns
#1064: FILE: include/linux/csa.h:376:
+        AC_CONFCHG_INC_DELTA,   /* Report incremental acct clock delta change */        AC_CONFCHG_INC_EVENT,   /* Report incremental accounting event */

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:CODE_INDENT: code indent should use tabs where possible
#1064: FILE: include/linux/csa.h:376:
+        AC_CONFCHG_INC_DELTA,   /* Report incremental acct clock delta change */        AC_CONFCHG_INC_EVENT,   /* Report incremental accounting event */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1064: FILE: include/linux/csa.h:376:
+        AC_CONFCHG_INC_DELTA,   /* Report incremental acct clock delta change */        AC_CONFCHG_INC_EVENT,   /* Report incremental accounting event */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1065: FILE: include/linux/csa.h:377:
+        AC_CONFCHG_MAX$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1065: FILE: include/linux/csa.h:377:
+        AC_CONFCHG_MAX$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1069: FILE: include/linux/csa.h:381:
+struct acctcfg
+{

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#1073: FILE: include/linux/csa.h:385:
+	int64_t		ac_uptimelen;	/* Bytes from the end of the boot

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1074: FILE: include/linux/csa.h:386:
+	int64_t		ac_uptimelen;	/* Bytes from the end of the boot
+					   record to the next boot record */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1074: FILE: include/linux/csa.h:386:
+					   record to the next boot record */

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1075: FILE: include/linux/csa.h:387:
+	ac_eventtype	ac_event:8;	/* Accounting configuration event */
 	            	        ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1082: FILE: include/linux/csa.h:394:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1086: FILE: include/linux/csa.h:398:
+typedef	enum

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#1087: FILE: include/linux/csa.h:399:
+typedef	enum
+{

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1096: FILE: include/linux/csa.h:408:
+typedef	enum

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#1097: FILE: include/linux/csa.h:409:
+typedef	enum
+{

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1115: FILE: include/linux/csa.h:427:
+typedef	enum

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#1116: FILE: include/linux/csa.h:428:
+typedef	enum
+{

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1120: FILE: include/linux/csa.h:432:
+^IACCT_DMD_NQS, ^I^I/* Daemon NQS accounting */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1121: FILE: include/linux/csa.h:433:
+^IACCT_DMD_WKMG, ^I^I/* Daemon workload management (i.e. LSF) acct */$

WARNING:TYPO_SPELLING: 'threshhold' may be misspelled - perhaps 'threshold'?
#1134: FILE: include/linux/csa.h:446:
+	ACCT_THD_MEM,		/* Record acct for memory size threshhold */
 	             		                               ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'threshhold' may be misspelled - perhaps 'threshold'?
#1135: FILE: include/linux/csa.h:447:
+	ACCT_THD_TIME,		/* Record acct for CPU time threshhold */
 	              		                            ^^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1148: FILE: include/linux/csa.h:460:
+
+

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1157: FILE: include/linux/csa.h:469:
+struct actstat
+{

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#1160: FILE: include/linux/csa.h:472:
+	int64_t		ac_param;	/* Entry parameter */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1169: FILE: include/linux/csa.h:481:
+struct actctl
+{

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1178: FILE: include/linux/csa.h:490:
+typedef	enum

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#1179: FILE: include/linux/csa.h:491:
+typedef	enum
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1190: FILE: include/linux/csa.h:502:
+struct actinc
+{

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#1193: FILE: include/linux/csa.h:505:
+	int64_t		ac_param;	/* Entry parameter */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1202: FILE: include/linux/csa.h:514:
+struct actwra
+{

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1205: FILE: include/linux/csa.h:517:
+	uint64_t ac_jid;		/* Job ID */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1213: FILE: include/linux/csa.h:525:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1232: FILE: kernel/csa.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1247: FILE: kernel/csa.c:16:
+ * with this program; if not, write to the Free Software Foundation, Inc.,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1248: FILE: kernel/csa.c:17:
+ * 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1275: FILE: kernel/csa.c:44:
+ *^Irecord was being written to disk with 2.4.0 (didn't happen with $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1287: FILE: kernel/csa.c:56:
+
+

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#1290: FILE: kernel/csa.c:59:
+#if defined(CONFIG_CSA) || defined(CONFIG_CSA_MODULE)

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1301: FILE: kernel/csa.c:70:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1309: FILE: kernel/csa.c:78:
+
+

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1310: FILE: kernel/csa.c:79:
+static int csa_registered = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1320: FILE: kernel/csa.c:89:
+static int	csa_modify_buf(char *, struct acctcsa *, struct acctmem *,
+			struct acctio *, int, int);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1323: FILE: kernel/csa.c:92:
+static int	csa_config_write(ac_eventtype,struct file *);
           	                             ^

WARNING:UNNECESSARY_INT: Prefer 'long' over 'long int' as the int is unnecessary
#1325: FILE: kernel/csa.c:94:
+static long int sc_CLK(long int);

WARNING:UNNECESSARY_INT: Prefer 'long' over 'long int' as the int is unnecessary
#1325: FILE: kernel/csa.c:94:
+static long int sc_CLK(long int);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1335: FILE: kernel/csa.c:104:
+#define PRINTK(args...) printk(args)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1342: FILE: kernel/csa.c:111:
+#define USEC_PER_TICK	(USEC_PER_SEC/HZ)
                      	             ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1343: FILE: kernel/csa.c:112:
+#define NBPC^I^IPAGE_SIZE ^I/* Number of bytes per click */$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1344: FILE: kernel/csa.c:113:
+#define ctob(x) ((uint64_t)(x)*NBPC)
                               ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1346: FILE: kernel/csa.c:115:
+
+

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1348: FILE: kernel/csa.c:117:
+static time_t boottime = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1355: FILE: kernel/csa.c:124:
+static int     csa_flag = 0;		/* accounting start state flag */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1359: FILE: kernel/csa.c:128:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1367: FILE: kernel/csa.c:136:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1368: FILE: kernel/csa.c:137:
+/* modify this when changes are made to ac_kdrcd in csa.h */ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1369: FILE: kernel/csa.c:138:
+char *acct_dmd_name[ACCT_MAXKDS] = $

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1370: FILE: kernel/csa.c:139:
+char *acct_dmd_name[ACCT_MAXKDS] = 
+		{"CSA",

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1381: FILE: kernel/csa.c:150:
+typedef enum {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1382: FILE: kernel/csa.c:151:
+        A_SYS,          /* system accounting action     (0) */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1382: FILE: kernel/csa.c:151:
+        A_SYS,          /* system accounting action     (0) */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1383: FILE: kernel/csa.c:152:
+        A_CJA,          /* Job accounting action        (1) */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1383: FILE: kernel/csa.c:152:
+        A_CJA,          /* Job accounting action        (1) */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1384: FILE: kernel/csa.c:153:
+        A_DMD,          /* daemon accounting action     (2) */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1384: FILE: kernel/csa.c:153:
+        A_DMD,          /* daemon accounting action     (2) */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1385: FILE: kernel/csa.c:154:
+        A_MAX} a_fnc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1385: FILE: kernel/csa.c:154:
+        A_MAX} a_fnc;$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1388: FILE: kernel/csa.c:157:
+struct  actstat acct_rcd[ACCT_MAXRCDS-ACCT_RCDS][A_MAX];
                                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 't' - possible side-effects?
#1391: FILE: kernel/csa.c:160:
+#define INIT_DMD(t, i, s, p)    acct_dmd[i][t].ac_ind = i;              \
+                                acct_dmd[i][t].ac_state = s;            \
+                                acct_dmd[i][t].ac_param = p;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#1391: FILE: kernel/csa.c:160:
+#define INIT_DMD(t, i, s, p)    acct_dmd[i][t].ac_ind = i;              \
+                                acct_dmd[i][t].ac_state = s;            \
+                                acct_dmd[i][t].ac_param = p;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1391: FILE: kernel/csa.c:160:
+#define INIT_DMD(t, i, s, p)    acct_dmd[i][t].ac_ind = i;              \
+                                acct_dmd[i][t].ac_state = s;            \
+                                acct_dmd[i][t].ac_param = p;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:CODE_INDENT: code indent should use tabs where possible
#1392: FILE: kernel/csa.c:161:
+                                acct_dmd[i][t].ac_state = s;            \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1392: FILE: kernel/csa.c:161:
+                                acct_dmd[i][t].ac_state = s;            \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1393: FILE: kernel/csa.c:162:
+                                acct_dmd[i][t].ac_param = p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1393: FILE: kernel/csa.c:162:
+                                acct_dmd[i][t].ac_param = p;$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1394: FILE: kernel/csa.c:163:
+#define INIT_RCD(t, i, s, p)    acct_rcd[i-ACCT_RCDS][t].ac_ind = i;    \
                                           ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 't' - possible side-effects?
#1394: FILE: kernel/csa.c:163:
+#define INIT_RCD(t, i, s, p)    acct_rcd[i-ACCT_RCDS][t].ac_ind = i;    \
+                                acct_rcd[i-ACCT_RCDS][t].ac_state = s;  \
+                                acct_rcd[i-ACCT_RCDS][t].ac_param = p;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#1394: FILE: kernel/csa.c:163:
+#define INIT_RCD(t, i, s, p)    acct_rcd[i-ACCT_RCDS][t].ac_ind = i;    \
+                                acct_rcd[i-ACCT_RCDS][t].ac_state = s;  \
+                                acct_rcd[i-ACCT_RCDS][t].ac_param = p;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'i' may be better as '(i)' to avoid precedence issues
#1394: FILE: kernel/csa.c:163:
+#define INIT_RCD(t, i, s, p)    acct_rcd[i-ACCT_RCDS][t].ac_ind = i;    \
+                                acct_rcd[i-ACCT_RCDS][t].ac_state = s;  \
+                                acct_rcd[i-ACCT_RCDS][t].ac_param = p;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1394: FILE: kernel/csa.c:163:
+#define INIT_RCD(t, i, s, p)    acct_rcd[i-ACCT_RCDS][t].ac_ind = i;    \
+                                acct_rcd[i-ACCT_RCDS][t].ac_state = s;  \
+                                acct_rcd[i-ACCT_RCDS][t].ac_param = p;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1395: FILE: kernel/csa.c:164:
+                                acct_rcd[i-ACCT_RCDS][t].ac_state = s;  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1395: FILE: kernel/csa.c:164:
+                                acct_rcd[i-ACCT_RCDS][t].ac_state = s;  \$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1395: FILE: kernel/csa.c:164:
+                                acct_rcd[i-ACCT_RCDS][t].ac_state = s;  \
                                           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1396: FILE: kernel/csa.c:165:
+                                acct_rcd[i-ACCT_RCDS][t].ac_param = p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1396: FILE: kernel/csa.c:165:
+                                acct_rcd[i-ACCT_RCDS][t].ac_param = p;$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1396: FILE: kernel/csa.c:165:
+                                acct_rcd[i-ACCT_RCDS][t].ac_param = p;
                                           ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1398: FILE: kernel/csa.c:167:
+static int csa_ioctl( struct inode *, struct file *, unsigned int,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1399: FILE: kernel/csa.c:168:
+static int csa_ioctl( struct inode *, struct file *, unsigned int,
+		unsigned long);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1404: FILE: kernel/csa.c:173:
+static struct file_operations csa_file_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#1405: FILE: kernel/csa.c:174:
+	owner: THIS_MODULE,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1406: FILE: kernel/csa.c:175:
+	ioctl: csa_ioctl
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#1406: FILE: kernel/csa.c:175:
+	ioctl: csa_ioctl

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1412: FILE: kernel/csa.c:181:
+^Ichar *dbg_fname = s^I^I$

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1414: FILE: kernel/csa.c:183:
+#define DBG_PRINTENTRY()					\
+do {								\
+	printk(KERN_DEBUG __FILE__ ": %s: entry\n", dbg_fname);	\
+} while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1416: FILE: kernel/csa.c:185:
+	printk(KERN_DEBUG __FILE__ ": %s: entry\n", dbg_fname);	\

ERROR:SPACING: space required before the open parenthesis '('
#1417: FILE: kernel/csa.c:186:
+} while(0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1419: FILE: kernel/csa.c:188:
+#define DBG_PRINTEXIT(c)^I^I^I^I ^I^I\$

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1419: FILE: kernel/csa.c:188:
+#define DBG_PRINTEXIT(c)				 		\
+do {							 		\
+	printk(KERN_DEBUG __FILE__ ": %s: exit, code = %d\n", dbg_fname, c);	\
+} while(0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1420: FILE: kernel/csa.c:189:
+do {^I^I^I^I^I^I^I ^I^I\$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1421: FILE: kernel/csa.c:190:
+	printk(KERN_DEBUG __FILE__ ": %s: exit, code = %d\n", dbg_fname, c);	\

ERROR:SPACING: space required before the open parenthesis '('
#1422: FILE: kernel/csa.c:191:
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#1425: FILE: kernel/csa.c:194:
+#define JOB_WLOCK(l)					\
+do {							\
+	printk(KERN_DEBUG __FILE__ ": wlock = %p\n", l);	\
+	down_write(l);					\
+} while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#1425: FILE: kernel/csa.c:194:
+#define JOB_WLOCK(l)					\
+do {							\
+	printk(KERN_DEBUG __FILE__ ": wlock = %p\n", l);	\
+	down_write(l);					\
+} while(0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1427: FILE: kernel/csa.c:196:
+	printk(KERN_DEBUG __FILE__ ": wlock = %p\n", l);	\

ERROR:SPACING: space required before the open parenthesis '('
#1429: FILE: kernel/csa.c:198:
+} while(0);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#1432: FILE: kernel/csa.c:201:
+#define JOB_WUNLOCK(l)					\
+do {							\
+	printk(KERN_DEBUG __FILE__ ": wunlock = %p\n", l);	\
+	up_write(l);					\
+} while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#1432: FILE: kernel/csa.c:201:
+#define JOB_WUNLOCK(l)					\
+do {							\
+	printk(KERN_DEBUG __FILE__ ": wunlock = %p\n", l);	\
+	up_write(l);					\
+} while(0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1434: FILE: kernel/csa.c:203:
+	printk(KERN_DEBUG __FILE__ ": wunlock = %p\n", l);	\

ERROR:SPACING: space required before the open parenthesis '('
#1436: FILE: kernel/csa.c:205:
+} while(0);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#1439: FILE: kernel/csa.c:208:
+#define JOB_RLOCK(l)					\
+do {							\
+	printk(KERN_DEBUG __FILE__ ": rlock = %p\n", l);	\
+	down_read(l);					\
+} while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#1439: FILE: kernel/csa.c:208:
+#define JOB_RLOCK(l)					\
+do {							\
+	printk(KERN_DEBUG __FILE__ ": rlock = %p\n", l);	\
+	down_read(l);					\
+} while(0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1441: FILE: kernel/csa.c:210:
+	printk(KERN_DEBUG __FILE__ ": rlock = %p\n", l);	\

ERROR:SPACING: space required before the open parenthesis '('
#1443: FILE: kernel/csa.c:212:
+} while(0);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#1446: FILE: kernel/csa.c:215:
+#define JOB_RUNLOCK(l)					\
+do {							\
+	printk(KERN_DEBUG __FILE__ ": runlock = %p\n", l);	\
+	up_read(l);					\
+} while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#1446: FILE: kernel/csa.c:215:
+#define JOB_RUNLOCK(l)					\
+do {							\
+	printk(KERN_DEBUG __FILE__ ": runlock = %p\n", l);	\
+	up_read(l);					\
+} while(0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1448: FILE: kernel/csa.c:217:
+	printk(KERN_DEBUG __FILE__ ": runlock = %p\n", l);	\

ERROR:SPACING: space required before the open parenthesis '('
#1450: FILE: kernel/csa.c:219:
+} while(0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1452: FILE: kernel/csa.c:221:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1455: FILE: kernel/csa.c:224:
+#define DBG_PRINTINIT(s)^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1457: FILE: kernel/csa.c:226:
+#define DBG_PRINTENTRY() ^I\$

ERROR:SPACING: space required before the open parenthesis '('
#1459: FILE: kernel/csa.c:228:
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1463: FILE: kernel/csa.c:232:
+} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1466: FILE: kernel/csa.c:235:
+#define JOB_WLOCK(l)	\
+do {			\
+	down_write(l);	\
+} while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#1466: FILE: kernel/csa.c:235:
+#define JOB_WLOCK(l)	\
+do {			\
+	down_write(l);	\
+} while(0);

ERROR:SPACING: space required before the open parenthesis '('
#1469: FILE: kernel/csa.c:238:
+} while(0);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1472: FILE: kernel/csa.c:241:
+#define JOB_WUNLOCK(l)	\
+do {			\
+	up_write(l);	\
+} while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#1472: FILE: kernel/csa.c:241:
+#define JOB_WUNLOCK(l)	\
+do {			\
+	up_write(l);	\
+} while(0);

ERROR:SPACING: space required before the open parenthesis '('
#1475: FILE: kernel/csa.c:244:
+} while(0);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1478: FILE: kernel/csa.c:247:
+#define JOB_RLOCK(l)	\
+do {			\
+	down_read(l);	\
+} while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#1478: FILE: kernel/csa.c:247:
+#define JOB_RLOCK(l)	\
+do {			\
+	down_read(l);	\
+} while(0);

ERROR:SPACING: space required before the open parenthesis '('
#1481: FILE: kernel/csa.c:250:
+} while(0);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1484: FILE: kernel/csa.c:253:
+#define JOB_RUNLOCK(l)	\
+do {			\
+	up_read(l);	\
+} while(0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#1484: FILE: kernel/csa.c:253:
+#define JOB_RUNLOCK(l)	\
+do {			\
+	up_read(l);	\
+} while(0);

ERROR:SPACING: space required before the open parenthesis '('
#1487: FILE: kernel/csa.c:256:
+} while(0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1489: FILE: kernel/csa.c:258:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1492: FILE: kernel/csa.c:261:
+
+

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1495: FILE: kernel/csa.c:264:
+ *	register procedure callbacks with the kernel/csa.c CSA

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#1503: FILE: kernel/csa.c:272:
+	if (csa_registered) {
[...]
+		 printk(KERN_WARNING "init_csa: %s\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1508: FILE: kernel/csa.c:277:
+^I^I */     $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1509: FILE: kernel/csa.c:278:
+		 printk(KERN_WARNING "init_csa: %s\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'init_csa', this function's name, in a string
#1509: FILE: kernel/csa.c:278:
+		 printk(KERN_WARNING "init_csa: %s\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1512: FILE: kernel/csa.c:281:
+		return -EBUSY;
+	} else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1517: FILE: kernel/csa.c:286:
+^I * register callbacks with the PAGG job code to process $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1525: FILE: kernel/csa.c:294:
+		printk(KERN_INFO "CSA: failed to register job\n");

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1530: FILE: kernel/csa.c:299:
+	csa_proc_entry = create_proc_entry(CSA_PROC, S_IFREG|S_IRUGO,
 	                                                    ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1530: FILE: kernel/csa.c:299:
+	csa_proc_entry = create_proc_entry(CSA_PROC, S_IFREG|S_IRUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1531: FILE: kernel/csa.c:300:
+	csa_proc_entry = create_proc_entry(CSA_PROC, S_IFREG|S_IRUGO,
+				&proc_root);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1543: FILE: kernel/csa.c:312:
+	printk(KERN_INFO "CSA: initialized\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1548: FILE: kernel/csa.c:317:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1564: FILE: kernel/csa.c:333:
+		printk(KERN_ERR "CSA module can't unregister with job module."

WARNING:SPLIT_STRING: quoted string split across lines
#1565: FILE: kernel/csa.c:334:
+		printk(KERN_ERR "CSA module can't unregister with job module."
+		       "Continuing with CSA module cleanup.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1566: FILE: kernel/csa.c:335:
+^I} $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1568: FILE: kernel/csa.c:337:
+	printk(KERN_INFO "CSA removed\n");

WARNING:RETURN_VOID: void function return statements are not generally useful
#1570: FILE: kernel/csa.c:339:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1575: FILE: kernel/csa.c:344:
+ *^I$

WARNING:RETURN_VOID: void function return statements are not generally useful
#1609: FILE: kernel/csa.c:378:
+	return;
+}

WARNING:UNNECESSARY_INT: Prefer 'long' over 'long int' as the int is unnecessary
#1615: FILE: kernel/csa.c:384:
+static long int

WARNING:UNNECESSARY_INT: Prefer 'long' over 'long int' as the int is unnecessary
#1616: FILE: kernel/csa.c:385:
+sc_CLK(long int clock)

WARNING:UNNECESSARY_INT: Prefer 'long' over 'long int' as the int is unnecessary
#1618: FILE: kernel/csa.c:387:
+	long int sec, split;

WARNING:RETURN_VOID: void function return statements are not generally useful
#1637: FILE: kernel/csa.c:406:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1640: FILE: kernel/csa.c:409:
+ *  Create a CSA end-of-process accounting record and write it to $

ERROR:SPACING: space prohibited before that close square bracket ']'
#1648: FILE: kernel/csa.c:417:
+			sizeof(struct acctio) ];

ERROR:SPACING: space prohibited before that close square bracket ']'
#1651: FILE: kernel/csa.c:420:
+			   sizeof(struct acctio) ];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1658: FILE: kernel/csa.c:427:
+	uint64_t jid = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1665: FILE: kernel/csa.c:434:
+	uint64_t memtime;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#1667: FILE: kernel/csa.c:436:
+	if (p == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1668: FILE: kernel/csa.c:437:
+		printk(KERN_ERR "do_eop_acct: CSA null task pointer\n");

CHECK:SPACING: No space is necessary after a cast
#1680: FILE: kernel/csa.c:449:
+		printk(KERN_WARNING JID_ERR1, (unsigned long long) jid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1680: FILE: kernel/csa.c:449:
+		printk(KERN_WARNING JID_ERR1, (unsigned long long) jid);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1691: FILE: kernel/csa.c:460:
+	if (job_acctbuf.job_acctfile != (struct file *)NULL) {
+		ja_enabled = 1;
+	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#1694: FILE: kernel/csa.c:463:
+        if (acct_dmd[ACCT_KERN_CSA][A_SYS].ac_state == ACS_ON) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1694: FILE: kernel/csa.c:463:
+        if (acct_dmd[ACCT_KERN_CSA][A_SYS].ac_state == ACS_ON) {$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1694: FILE: kernel/csa.c:463:
+        if (acct_dmd[ACCT_KERN_CSA][A_SYS].ac_state == ACS_ON) {
+		csa_enabled = 1;
+	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#1697: FILE: kernel/csa.c:466:
+        if (acct_rcd[ACCT_RCD_IO-ACCT_RCDS][A_SYS].ac_state == ACS_ON) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1697: FILE: kernel/csa.c:466:
+        if (acct_rcd[ACCT_RCD_IO-ACCT_RCDS][A_SYS].ac_state == ACS_ON) {$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1697: FILE: kernel/csa.c:466:
+        if (acct_rcd[ACCT_RCD_IO-ACCT_RCDS][A_SYS].ac_state == ACS_ON) {
                                 ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1697: FILE: kernel/csa.c:466:
+        if (acct_rcd[ACCT_RCD_IO-ACCT_RCDS][A_SYS].ac_state == ACS_ON) {
+		io_enabled = 1;
+	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#1700: FILE: kernel/csa.c:469:
+        if (acct_rcd[ACCT_RCD_MEM-ACCT_RCDS][A_SYS].ac_state == ACS_ON) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1700: FILE: kernel/csa.c:469:
+        if (acct_rcd[ACCT_RCD_MEM-ACCT_RCDS][A_SYS].ac_state == ACS_ON) {$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1700: FILE: kernel/csa.c:469:
+        if (acct_rcd[ACCT_RCD_MEM-ACCT_RCDS][A_SYS].ac_state == ACS_ON) {
                                  ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1700: FILE: kernel/csa.c:469:
+        if (acct_rcd[ACCT_RCD_MEM-ACCT_RCDS][A_SYS].ac_state == ACS_ON) {
+		mem_enabled = 1;
+	}

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1714: FILE: kernel/csa.c:483:
+	csa_header(hdr1, REV_CSA, ACCT_KERNEL_CSA, sizeof(struct acctcsa) );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1716: FILE: kernel/csa.c:485:
+	csa_header(hdr2, REV_CSA, ACCT_KERNEL_CSA, 0 );

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1718: FILE: kernel/csa.c:487:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1718: FILE: kernel/csa.c:487:
+ $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1733: FILE: kernel/csa.c:502:
+	if (p->flags & PF_FORKNOEXEC) {
+		csa->ac_hdr1.ah_flag |= AFORK;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1736: FILE: kernel/csa.c:505:
+	if (p->flags & PF_SUPERPRIV) {
+		csa->ac_hdr1.ah_flag |= ASU;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1739: FILE: kernel/csa.c:508:
+	if (p->flags & PF_DUMPCORE) {
+		csa->ac_hdr1.ah_flag |= ACORE;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1742: FILE: kernel/csa.c:511:
+	if (p->flags & PF_SIGNALED) {
+		csa->ac_hdr1.ah_flag |= AXSIG;
+	}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1749: FILE: kernel/csa.c:518:
+/*	csa->ac_btime = CT_TO_SECS(p->start_time) + (xtime.tv_sec -
+		(jiffies / HZ)); */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1749: FILE: kernel/csa.c:518:
+		(jiffies / HZ)); */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1750: FILE: kernel/csa.c:519:
+        csa->ac_btime = do_div(p->start_time, HZ) + (xtime.tv_sec -  (jiffies / HZ));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1750: FILE: kernel/csa.c:519:
+        csa->ac_btime = do_div(p->start_time, HZ) + (xtime.tv_sec -  (jiffies / HZ));$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1753: FILE: kernel/csa.c:522:
+^I * cpu usage is accumulated by the kernel in ticks. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1757: FILE: kernel/csa.c:526:
+^I * then these zero cpu and elapsed time modifications should be $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1760: FILE: kernel/csa.c:529:
+^Icsa->ac_etime = (jiffies - p->start_time == 0) ? (USEC_PER_TICK) : $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'csa->ac_utime == 0'
#1770: FILE: kernel/csa.c:539:
+	if ((csa->ac_utime == 0) && (csa->ac_stime == 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'csa->ac_stime == 0'
#1770: FILE: kernel/csa.c:539:
+	if ((csa->ac_utime == 0) && (csa->ac_stime == 0)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1770: FILE: kernel/csa.c:539:
+	if ((csa->ac_utime == 0) && (csa->ac_stime == 0)) {
+		csa->ac_stime = USEC_PER_TICK/2;
+	}

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1771: FILE: kernel/csa.c:540:
+		csa->ac_stime = USEC_PER_TICK/2;
 		                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1782: FILE: kernel/csa.c:551:
+		csa_header(hdr1, REV_MEM, ACCT_KERNEL_MEM,
+			sizeof(struct acctmem) );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1782: FILE: kernel/csa.c:551:
+			sizeof(struct acctmem) );

WARNING:UNNECESSARY_INT: Prefer 'long' over 'long int' as the int is unnecessary
#1785: FILE: kernel/csa.c:554:
+		memtime = sc_CLK((long int)p->csa_rss_mem1);

WARNING:UNNECESSARY_INT: Prefer 'long' over 'long int' as the int is unnecessary
#1787: FILE: kernel/csa.c:556:
+		memtime = sc_CLK((long int)p->csa_vm_mem1);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#1791: FILE: kernel/csa.c:560:
+		if (p->mm) {
+		    mem->ac_virt.himem = p->mm->hiwater_vm * (PAGE_SIZE / 1024);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1793: FILE: kernel/csa.c:562:
+		    mem->ac_core.himem = p->mm->hiwater_rss * (PAGE_SIZE/1024);
 		                                                        ^

WARNING:TABSTOP: Statements should start on a tabstop
#1798: FILE: kernel/csa.c:567:
+		    if (mem->ac_core.mem1 == 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1798: FILE: kernel/csa.c:567:
+		    if (mem->ac_core.mem1 == 0) {
+			mem->ac_core.mem1 = mem->ac_core.himem / 1024;
+		    }

WARNING:TABSTOP: Statements should start on a tabstop
#1800: FILE: kernel/csa.c:569:
+		    }

WARNING:TABSTOP: Statements should start on a tabstop
#1801: FILE: kernel/csa.c:570:
+		    if (mem->ac_virt.mem1 == 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1801: FILE: kernel/csa.c:570:
+		    if (mem->ac_virt.mem1 == 0) {
+			mem->ac_virt.mem1 = mem->ac_virt.himem / 1024;
+		    }

WARNING:TABSTOP: Statements should start on a tabstop
#1803: FILE: kernel/csa.c:572:
+		    }

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1816: FILE: kernel/csa.c:585:
+^I^Imemset(io, 0, sizeof(struct acctio));^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1821: FILE: kernel/csa.c:590:
+		csa_header(hdr1, REV_IO, ACCT_KERNEL_IO,
+			sizeof(struct acctio) );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1821: FILE: kernel/csa.c:590:
+			sizeof(struct acctio) );

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#1825: FILE: kernel/csa.c:594:
+		PRINTK(KERN_INFO "CSA: block wait time %lu\n",(unsigned long int)p->bwtime);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1825: FILE: kernel/csa.c:594:
+		PRINTK(KERN_INFO "CSA: block wait time %lu\n",(unsigned long int)p->bwtime);
 		                                             ^

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'unsigned long int' as the int is unnecessary
#1826: FILE: kernel/csa.c:595:
+		io->ac_bwtime = CT_TO_USECS((unsigned long int)p->bwtime);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1827: FILE: kernel/csa.c:596:
+		PRINTK(KERN_INFO "CSA: converted bwtime %lu\n",io->ac_bwtime);
 		                                              ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1846: FILE: kernel/csa.c:615:
+	if ((len > 0) && (job_acctbuf.job_acctfile != (struct file *)NULL) ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len > 0'
#1846: FILE: kernel/csa.c:615:
+	if ((len > 0) && (job_acctbuf.job_acctfile != (struct file *)NULL) ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1848: FILE: kernel/csa.c:617:
+		csa_write((caddr_t)&acctent, ACCT_KERN_CSA,
+			len, jid, A_CJA, &job_acctbuf);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1854: FILE: kernel/csa.c:623:
+	if ((acct_rcd[ACCT_THD_MEM-ACCT_RCDS][A_SYS].ac_state == ACS_ON) &&
 	                          ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'acct_rcd[ACCT_THD_MEM-ACCT_RCDS][A_SYS].ac_state == ACS_ON'
#1854: FILE: kernel/csa.c:623:
+	if ((acct_rcd[ACCT_THD_MEM-ACCT_RCDS][A_SYS].ac_state == ACS_ON) &&
+	    (ja_enabled || mem_enabled)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1856: FILE: kernel/csa.c:625:
+^I^Iif (mem->ac_virt.himem < $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1857: FILE: kernel/csa.c:626:
+^I            acct_rcd[ACCT_THD_MEM-ACCT_RCDS][A_SYS].ac_param) {$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1857: FILE: kernel/csa.c:626:
+	            acct_rcd[ACCT_THD_MEM-ACCT_RCDS][A_SYS].ac_param) {
 	                                 ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 13)
#1862: FILE: kernel/csa.c:631:
+	if ((acct_rcd[ACCT_THD_TIME-ACCT_RCDS][A_SYS].ac_state == ACS_ON)) {
+	     if ((csa->ac_utime + csa->ac_stime) <

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1862: FILE: kernel/csa.c:631:
+	if ((acct_rcd[ACCT_THD_TIME-ACCT_RCDS][A_SYS].ac_state == ACS_ON)) {
 	                           ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'acct_rcd[ACCT_THD_TIME-ACCT_RCDS][A_SYS].ac_state == ACS_ON'
#1862: FILE: kernel/csa.c:631:
+	if ((acct_rcd[ACCT_THD_TIME-ACCT_RCDS][A_SYS].ac_state == ACS_ON)) {

WARNING:UNNECESSARY_PARENTHESES: Unnecessary parentheses - maybe == should be = ?
#1862: FILE: kernel/csa.c:631:
+	if ((acct_rcd[ACCT_THD_TIME-ACCT_RCDS][A_SYS].ac_state == ACS_ON)) {

WARNING:TABSTOP: Statements should start on a tabstop
#1863: FILE: kernel/csa.c:632:
+	     if ((csa->ac_utime + csa->ac_stime) <

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (13, 24)
#1863: FILE: kernel/csa.c:632:
+	     if ((csa->ac_utime + csa->ac_stime) <
[...]
+			return;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1864: FILE: kernel/csa.c:633:
+^I          acct_rcd[ACCT_THD_TIME-ACCT_RCDS][A_SYS].ac_param) {$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1864: FILE: kernel/csa.c:633:
+	          acct_rcd[ACCT_THD_TIME-ACCT_RCDS][A_SYS].ac_param) {
 	                                ^

WARNING:TABSTOP: Statements should start on a tabstop
#1867: FILE: kernel/csa.c:636:
+	     }

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1869: FILE: kernel/csa.c:638:
+^I^I^I^I$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1870: FILE: kernel/csa.c:639:
+	if ((len > 0) && (csa_acctvp != (struct file *)NULL) && csa_enabled ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len > 0'
#1870: FILE: kernel/csa.c:639:
+	if ((len > 0) && (csa_acctvp != (struct file *)NULL) && csa_enabled ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1874: FILE: kernel/csa.c:643:
+			csa_write((caddr_t)&acctent, ACCT_KERN_CSA,
+				len, jid, A_SYS, &job_acctbuf);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1878: FILE: kernel/csa.c:647:
+			len = csa_modify_buf(modacctent, csa, mem, io,
+				io_enabled, mem_enabled);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1880: FILE: kernel/csa.c:649:
+			csa_write((caddr_t)&modacctent, ACCT_KERN_CSA,
+				len, jid, A_SYS, &job_acctbuf);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1884: FILE: kernel/csa.c:653:
+	return;
+}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1891: FILE: kernel/csa.c:660:
+ * ^Ifirst header flags.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1928: FILE: kernel/csa.c:697:
+^I}^I$

ERROR:SPACING: space required before the open parenthesis '('
#1938: FILE: kernel/csa.c:707:
+	if(io_enabled) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1946: FILE: kernel/csa.c:715:
+
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1952: FILE: kernel/csa.c:721:
+csa_ioctl(

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'csa_ioctl', this function's name, in a string
#1970: FILE: kernel/csa.c:739:
+	PRINTK(KERN_INFO "CSA: csa_ioctl\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1972: FILE: kernel/csa.c:741:
+	if (!csa_flag) {
+		csa_init_acct(flag++);
+	}

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1977: FILE: kernel/csa.c:746:
+	if ((req < 0) || (req >= AC_MREQ) ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'req < 0'
#1977: FILE: kernel/csa.c:746:
+	if ((req < 0) || (req >= AC_MREQ) ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'req >= AC_MREQ'
#1977: FILE: kernel/csa.c:746:
+	if ((req < 0) || (req >= AC_MREQ) ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1977: FILE: kernel/csa.c:746:
+	if ((req < 0) || (req >= AC_MREQ) ) {
+		return -EINVAL;
+	}

WARNING:TABSTOP: Statements should start on a tabstop
#1989: FILE: kernel/csa.c:758:
+	    {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1994: FILE: kernel/csa.c:763:
+		if (!capable(CAP_SYS_PACCT) ) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1999: FILE: kernel/csa.c:768:
+		if (copy_from_user(&actctl, (void*)data, sizeof(int)) ) {

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1999: FILE: kernel/csa.c:768:
+		if (copy_from_user(&actctl, (void*)data, sizeof(int)) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2005: FILE: kernel/csa.c:774:
+		if ((num < 0) || (num > NUM_KDRCDS) ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'num < 0'
#2005: FILE: kernel/csa.c:774:
+		if ((num < 0) || (num > NUM_KDRCDS) ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'num > NUM_KDRCDS'
#2005: FILE: kernel/csa.c:774:
+		if ((num < 0) || (num > NUM_KDRCDS) ) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2009: FILE: kernel/csa.c:778:
+
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2012: FILE: kernel/csa.c:781:
+^I^I    sizeof(struct actstat) * NUM_KDRCDS + $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2014: FILE: kernel/csa.c:783:
+		if (copy_from_user(&actctl, (void*)data, len)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#2020: FILE: kernel/csa.c:789:
+^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2020: FILE: kernel/csa.c:789:
+^I ^I */$

ERROR:SPACING: space required before the open parenthesis '('
#2021: FILE: kernel/csa.c:790:
+		for(ind = 0; ind < num; ind++) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2023: FILE: kernel/csa.c:792:
+			if ((id < 0) || (id >= ACCT_MAXRCDS) ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id < 0'
#2023: FILE: kernel/csa.c:792:
+			if ((id < 0) || (id >= ACCT_MAXRCDS) ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id >= ACCT_MAXRCDS'
#2023: FILE: kernel/csa.c:792:
+			if ((id < 0) || (id >= ACCT_MAXRCDS) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2038: FILE: kernel/csa.c:807:
+		if (strlen(actctl.ac_path) ) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2040: FILE: kernel/csa.c:809:
+			newvp = filp_open(new_path,O_WRONLY|O_APPEND, 0);
 			                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2040: FILE: kernel/csa.c:809:
+			newvp = filp_open(new_path,O_WRONLY|O_APPEND, 0);
 			                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2057: FILE: kernel/csa.c:826:
+			if ((csa_acctvp != (struct file *)NULL) &&
+					csa_acctvp == newvp) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2075: FILE: kernel/csa.c:844:
+				error = csa_config_write(AC_CONFCHG_FILE,NULL);
 				                                        ^

ERROR:SPACING: space required before the open parenthesis '('
#2097: FILE: kernel/csa.c:866:
+		for(ind = 0; ind < num; ind++) {

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#2109: FILE: kernel/csa.c:878:
+				int	tid = id -ACCT_RCDS;
 				   	         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2123: FILE: kernel/csa.c:892:
+^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2123: FILE: kernel/csa.c:892:
+^I ^I */$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2124: FILE: kernel/csa.c:893:
+		if (copy_to_user((void*)data, &actctl, len)) {

WARNING:TABSTOP: Statements should start on a tabstop
#2128: FILE: kernel/csa.c:897:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#2129: FILE: kernel/csa.c:898:
+	    break;

WARNING:TABSTOP: Statements should start on a tabstop
#2135: FILE: kernel/csa.c:904:
+	    {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2139: FILE: kernel/csa.c:908:
+		if (!capable(CAP_SYS_PACCT) ) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2144: FILE: kernel/csa.c:913:
+		if (copy_from_user(&actctl, (void*)data, sizeof(int)) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2144: FILE: kernel/csa.c:913:
+		if (copy_from_user(&actctl, (void*)data, sizeof(int)) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2150: FILE: kernel/csa.c:919:
+		if ((num <= 0) || (num > NUM_KDRCDS) ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'num <= 0'
#2150: FILE: kernel/csa.c:919:
+		if ((num <= 0) || (num > NUM_KDRCDS) ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'num > NUM_KDRCDS'
#2150: FILE: kernel/csa.c:919:
+		if ((num <= 0) || (num > NUM_KDRCDS) ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2156: FILE: kernel/csa.c:925:
+^I^I    sizeof(struct actstat) * NUM_KDRCDS + $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2158: FILE: kernel/csa.c:927:
+		if (copy_from_user(&actctl, (void*)data, len)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#2165: FILE: kernel/csa.c:934:
+^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2165: FILE: kernel/csa.c:934:
+^I ^I */$

ERROR:SPACING: space required before the open parenthesis '('
#2166: FILE: kernel/csa.c:935:
+		for(ind = 0; ind < num; ind++) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2168: FILE: kernel/csa.c:937:
+			if ((id < 0) || (id >= NUM_KDRCDS) ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id < 0'
#2168: FILE: kernel/csa.c:937:
+			if ((id < 0) || (id >= NUM_KDRCDS) ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id >= NUM_KDRCDS'
#2168: FILE: kernel/csa.c:937:
+			if ((id < 0) || (id >= NUM_KDRCDS) ) {

ERROR:SPACING: space required before the open parenthesis '('
#2181: FILE: kernel/csa.c:950:
+		for(ind = 0; ind < num; ind++) {

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#2191: FILE: kernel/csa.c:960:
+				int	tid = id -ACCT_RCDS;
 				   	         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2197: FILE: kernel/csa.c:966:
+^I^I^I^Iactctl.ac_stat[ind].ac_param = $

ERROR:CODE_INDENT: code indent should use tabs where possible
#2203: FILE: kernel/csa.c:972:
+^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2203: FILE: kernel/csa.c:972:
+^I ^I */$

ERROR:SPACING: space required before the open parenthesis '('
#2204: FILE: kernel/csa.c:973:
+		for(ind = 0; ind < ACCT_MAXKDS; ind++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2205: FILE: kernel/csa.c:974:
+			if (acct_dmd[ind][A_SYS].ac_state == ACS_ON) {
+				daemon += 1<<ind;
+			}

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2206: FILE: kernel/csa.c:975:
+				daemon += 1<<ind;
 				           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2213: FILE: kernel/csa.c:982:
+^I ^I*/$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2213: FILE: kernel/csa.c:982:
+^I ^I*/$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2213: FILE: kernel/csa.c:982:
+		 *	stop writing to it.
+	 	*/

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2214: FILE: kernel/csa.c:983:
+		if (!daemon && (csa_acctvp != (struct file *)NULL) ) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2215: FILE: kernel/csa.c:984:
+			error = csa_config_write(AC_CONFCHG_OFF,NULL);
 			                                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2225: FILE: kernel/csa.c:994:
+^I ^I*/$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2225: FILE: kernel/csa.c:994:
+^I ^I*/$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2225: FILE: kernel/csa.c:994:
+		 *  Return the accounting states to the user.
+	 	*/

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2226: FILE: kernel/csa.c:995:
+		if (copy_to_user((void*)data, &actctl, len)) {

WARNING:TABSTOP: Statements should start on a tabstop
#2230: FILE: kernel/csa.c:999:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#2231: FILE: kernel/csa.c:1000:
+	    break;

WARNING:TABSTOP: Statements should start on a tabstop
#2237: FILE: kernel/csa.c:1006:
+	    {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2241: FILE: kernel/csa.c:1010:
+		if (!capable(CAP_SYS_PACCT) ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#2246: FILE: kernel/csa.c:1015:
+^I ^I/*  Turn off all accounting if any is on. */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2246: FILE: kernel/csa.c:1015:
+^I ^I/*  Turn off all accounting if any is on. */$

ERROR:SPACING: spaces required around that '<' (ctx:WxV)
#2247: FILE: kernel/csa.c:1016:
+		for(ind = 0; ind <ACCT_MAXKDS; ind++) {
 		                 ^

ERROR:SPACING: space required before the open parenthesis '('
#2247: FILE: kernel/csa.c:1016:
+		for(ind = 0; ind <ACCT_MAXKDS; ind++) {

ERROR:SPACING: space required before the open parenthesis '('
#2252: FILE: kernel/csa.c:1021:
+		for(ind = ACCT_RCDS; ind < ACCT_MAXRCDS; ind++) {

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#2253: FILE: kernel/csa.c:1022:
+			int	tid = ind -ACCT_RCDS;
 			   	          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2258: FILE: kernel/csa.c:1027:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2258: FILE: kernel/csa.c:1027:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#2260: FILE: kernel/csa.c:1029:
+^I ^I/*  If there's an old accounting file, stop writing to it. */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2260: FILE: kernel/csa.c:1029:
+^I ^I/*  If there's an old accounting file, stop writing to it. */$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2262: FILE: kernel/csa.c:1031:
+			error = csa_config_write(AC_CONFCHG_OFF,NULL);
 			                                       ^

WARNING:TABSTOP: Statements should start on a tabstop
#2268: FILE: kernel/csa.c:1037:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#2269: FILE: kernel/csa.c:1038:
+	    break;

WARNING:TABSTOP: Statements should start on a tabstop
#2275: FILE: kernel/csa.c:1044:
+	    {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2277: FILE: kernel/csa.c:1046:
+		if (copy_from_user(&actstat, (void*)data, sizeof(struct actstat)) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2277: FILE: kernel/csa.c:1046:
+		if (copy_from_user(&actstat, (void*)data, sizeof(struct actstat)) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2282: FILE: kernel/csa.c:1051:
+		if ((id >= 0) && (id < ACCT_MAXKDS) ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id >= 0'
#2282: FILE: kernel/csa.c:1051:
+		if ((id >= 0) && (id < ACCT_MAXKDS) ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id < ACCT_MAXKDS'
#2282: FILE: kernel/csa.c:1051:
+		if ((id >= 0) && (id < ACCT_MAXKDS) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2286: FILE: kernel/csa.c:1055:
+		} else if ((id >= ACCT_RCDS) && (id < ACCT_MAXRCDS) ) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2287: FILE: kernel/csa.c:1056:
+			int	tid = id-ACCT_RCDS;
 			   	        ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2296: FILE: kernel/csa.c:1065:
+		if (copy_to_user((void*)data, &actstat, sizeof(struct actstat)) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2296: FILE: kernel/csa.c:1065:
+		if (copy_to_user((void*)data, &actstat, sizeof(struct actstat)) ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2296: FILE: kernel/csa.c:1065:
+		if (copy_to_user((void*)data, &actstat, sizeof(struct actstat)) ) {
+			error = -EFAULT;
+		}

WARNING:TABSTOP: Statements should start on a tabstop
#2299: FILE: kernel/csa.c:1068:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#2306: FILE: kernel/csa.c:1075:
+	    {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2308: FILE: kernel/csa.c:1077:
+		if (copy_from_user(&actctl, (void*)data, sizeof(int)) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2308: FILE: kernel/csa.c:1077:
+		if (copy_from_user(&actctl, (void*)data, sizeof(int)) ) {

ERROR:SPACING: space required before the open parenthesis '('
#2321: FILE: kernel/csa.c:1090:
+		for(ind = 0; ind < num; ind++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2333: FILE: kernel/csa.c:1102:
+^I^I    sizeof(struct actstat) * NUM_KDRCDS + $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2335: FILE: kernel/csa.c:1104:
+		if (copy_to_user((void*)data, &actctl, len)) {

WARNING:TABSTOP: Statements should start on a tabstop
#2339: FILE: kernel/csa.c:1108:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#2340: FILE: kernel/csa.c:1109:
+	    break;

WARNING:TABSTOP: Statements should start on a tabstop
#2346: FILE: kernel/csa.c:1115:
+	    {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2348: FILE: kernel/csa.c:1117:
+		if (copy_from_user(&actctl, (void*)data, sizeof(int)) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2348: FILE: kernel/csa.c:1117:
+		if (copy_from_user(&actctl, (void*)data, sizeof(int)) ) {

ERROR:SPACING: space required before the open parenthesis '('
#2360: FILE: kernel/csa.c:1129:
+		for(ind = 0; ind < num; ind++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2371: FILE: kernel/csa.c:1140:
+^I^I    sizeof(struct actstat) * NUM_KDRCDS + $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2373: FILE: kernel/csa.c:1142:
+		if (copy_to_user((void*)data, &actctl, len)) {

WARNING:TABSTOP: Statements should start on a tabstop
#2377: FILE: kernel/csa.c:1146:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#2378: FILE: kernel/csa.c:1147:
+	    break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2384: FILE: kernel/csa.c:1153:
+^Icase AC_JASTOP:^I$

WARNING:TABSTOP: Statements should start on a tabstop
#2385: FILE: kernel/csa.c:1154:
+	    {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2389: FILE: kernel/csa.c:1158:
+		uint64_t	jid;

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#2398: FILE: kernel/csa.c:1167:
+		    sizeof(struct actstat) * (NUM_KDRCDS -1);
 		                                         ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2399: FILE: kernel/csa.c:1168:
+		if (copy_from_user(&actctl, (void*)data, len)) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2409: FILE: kernel/csa.c:1178:
+			newvp = filp_open(localpath,O_WRONLY|O_APPEND,0);
 			                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2409: FILE: kernel/csa.c:1178:
+			newvp = filp_open(localpath,O_WRONLY|O_APPEND,0);
 			                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2409: FILE: kernel/csa.c:1178:
+			newvp = filp_open(localpath,O_WRONLY|O_APPEND,0);
 			                                             ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2426: FILE: kernel/csa.c:1195:
+		if (req == AC_JASTOP) {
+			newvp = (struct file *)NULL;
+		}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2446: FILE: kernel/csa.c:1215:
+		if ((oldvp = job_acctbuf.job_acctfile) != (struct file *)NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#2451: FILE: kernel/csa.c:1220:
+^I ^I/* Establish new job accounting file or stop job accounting */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2451: FILE: kernel/csa.c:1220:
+^I ^I/* Establish new job accounting file or stop job accounting */$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2455: FILE: kernel/csa.c:1224:
+		retval = job_setacct(jid, JOB_ACCT_CSA, JOB_CSA_ACCTFILE,
+			&job_acctbuf);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2466: FILE: kernel/csa.c:1235:
+			error = csa_config_write(AC_CONFCHG_ON,
+				 job_acctbuf.job_acctfile);

WARNING:TABSTOP: Statements should start on a tabstop
#2468: FILE: kernel/csa.c:1237:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#2469: FILE: kernel/csa.c:1238:
+	    break;

WARNING:TABSTOP: Statements should start on a tabstop
#2475: FILE: kernel/csa.c:1244:
+	    {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2478: FILE: kernel/csa.c:1247:
+		uint64_t	jid;

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2483: FILE: kernel/csa.c:1252:
+		if (!capable(CAP_SYS_PACCT) ) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2487: FILE: kernel/csa.c:1256:
+		if (copy_from_user(&actwra, (void*)data, sizeof(struct actwra))) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#2491: FILE: kernel/csa.c:1260:
+^I ^I/*  Verify the parameters. */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2491: FILE: kernel/csa.c:1260:
+^I ^I/*  Verify the parameters. */$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2499: FILE: kernel/csa.c:1268:
+		if ((id < 0) || (id >= ACCT_MAXKDS) ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id < 0'
#2499: FILE: kernel/csa.c:1268:
+		if ((id < 0) || (id >= ACCT_MAXKDS) ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id >= ACCT_MAXKDS'
#2499: FILE: kernel/csa.c:1268:
+		if ((id < 0) || (id >= ACCT_MAXKDS) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2505: FILE: kernel/csa.c:1274:
+		if ((len <= 0) || (len > MAX_WRACCT) ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len <= 0'
#2505: FILE: kernel/csa.c:1274:
+		if ((len <= 0) || (len > MAX_WRACCT) ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len > MAX_WRACCT'
#2505: FILE: kernel/csa.c:1274:
+		if ((len <= 0) || (len > MAX_WRACCT) ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'acct_dmd[id][A_SYS].ac_state == ACS_ON'
#2516: FILE: kernel/csa.c:1285:
+		if ((acct_dmd[id][A_SYS].ac_state == ACS_ON) &&
+				(csa_acctvp != (struct file *)NULL) ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2517: FILE: kernel/csa.c:1286:
+		if ((acct_dmd[id][A_SYS].ac_state == ACS_ON) &&
+				(csa_acctvp != (struct file *)NULL) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2517: FILE: kernel/csa.c:1286:
+				(csa_acctvp != (struct file *)NULL) ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2519: FILE: kernel/csa.c:1288:
+			error = csa_write(actwra.ac_buf, id, len,
+				jid, A_DMD, NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "job_acctbuf.job_acctfile"
#2532: FILE: kernel/csa.c:1301:
+		if (job_acctbuf.job_acctfile != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2534: FILE: kernel/csa.c:1303:
+			error = csa_write(actwra.ac_buf, id, len, jid, A_CJA,
+					&job_acctbuf);

WARNING:TABSTOP: Statements should start on a tabstop
#2536: FILE: kernel/csa.c:1305:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#2537: FILE: kernel/csa.c:1306:
+	    break;

WARNING:TABSTOP: Statements should start on a tabstop
#2543: FILE: kernel/csa.c:1312:
+	    {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2545: FILE: kernel/csa.c:1314:
+		if (!capable(CAP_SYS_PACCT) ) {

WARNING:TABSTOP: Statements should start on a tabstop
#2553: FILE: kernel/csa.c:1322:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#2554: FILE: kernel/csa.c:1323:
+	    break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2561: FILE: kernel/csa.c:1330:
+                error = -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2561: FILE: kernel/csa.c:1330:
+                error = -EINVAL;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2573: FILE: kernel/csa.c:1342:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2588: FILE: kernel/csa.c:1357:
+	csa_header(&cfg->ac_hdr, REV_CFG, ACCT_KERNEL_CFG,
+		sizeof(struct acctcfg) );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2588: FILE: kernel/csa.c:1357:
+		sizeof(struct acctcfg) );

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2590: FILE: kernel/csa.c:1359:
+	if (!boottime) {
+		boottime = xtime.tv_sec - (jiffies / HZ);
+	}

ERROR:SPACING: space required before the open parenthesis '('
#2599: FILE: kernel/csa.c:1368:
+	for(ind = 0; ind < ACCT_MAXKDS; ind++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2600: FILE: kernel/csa.c:1369:
+		if (acct_dmd[ind][A_SYS].ac_state == ACS_ON) {
+			daemon += 1<<ind;
+		}

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2601: FILE: kernel/csa.c:1370:
+			daemon += 1<<ind;
 			           ^

ERROR:SPACING: space required before the open parenthesis '('
#2604: FILE: kernel/csa.c:1373:
+	for(ind = ACCT_RCDS; ind < ACCT_MAXRCDS; ind++) {

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#2605: FILE: kernel/csa.c:1374:
+		int	tid = ind -ACCT_RCDS;
 		   	          ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2607: FILE: kernel/csa.c:1376:
+		if (acct_rcd[tid][A_SYS].ac_state == ACS_ON) {
+			record += 1<<tid;
+		}

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2608: FILE: kernel/csa.c:1377:
+			record += 1<<tid;
 			           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2615: FILE: kernel/csa.c:1384:
+	memcpy(cfg->ac_uname.sysname, system_utsname.sysname, nmsize-1);
 	                                                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2616: FILE: kernel/csa.c:1385:
+	cfg->ac_uname.sysname[nmsize-1] = '\0';
 	                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2618: FILE: kernel/csa.c:1387:
+	memcpy(cfg->ac_uname.nodename, system_utsname.nodename, nmsize-1);
 	                                                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2619: FILE: kernel/csa.c:1388:
+	cfg->ac_uname.nodename[nmsize-1] = '\0';
 	                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2621: FILE: kernel/csa.c:1390:
+	memcpy(cfg->ac_uname.release, system_utsname.release, nmsize-1);
 	                                                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2622: FILE: kernel/csa.c:1391:
+	cfg->ac_uname.release[nmsize-1] = '\0';
 	                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2624: FILE: kernel/csa.c:1393:
+	memcpy(cfg->ac_uname.version, system_utsname.version, nmsize-1);
 	                                                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2625: FILE: kernel/csa.c:1394:
+	cfg->ac_uname.version[nmsize-1] = '\0';
 	                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2627: FILE: kernel/csa.c:1396:
+	memcpy(cfg->ac_uname.machine, system_utsname.machine, nmsize-1);
 	                                                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2628: FILE: kernel/csa.c:1397:
+	cfg->ac_uname.machine[nmsize-1] = '\0';
 	                            ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#2631: FILE: kernel/csa.c:1400:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2633: FILE: kernel/csa.c:1402:
+
+

WARNING:REPEATED_WORD: Possible repeated word: 'acctcfg'
#2641: FILE: kernel/csa.c:1410:
+        struct  acctcfg acctcfg;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2641: FILE: kernel/csa.c:1410:
+        struct  acctcfg acctcfg;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2641: FILE: kernel/csa.c:1410:
+        struct  acctcfg acctcfg;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2644: FILE: kernel/csa.c:1413:
+        /* write record to process accounting file. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2645: FILE: kernel/csa.c:1414:
+        csa_config_make(event, &acctcfg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2645: FILE: kernel/csa.c:1414:
+        csa_config_make(event, &acctcfg);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2654: FILE: kernel/csa.c:1423:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2654: FILE: kernel/csa.c:1423:
+        }$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2658: FILE: kernel/csa.c:1427:
+		error = job_acctfile->f_op->write(job_acctfile,(char *)&acctcfg,
 		                                              ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2662: FILE: kernel/csa.c:1431:
+	if (error >= 0) {
+		error = 0;
+	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#2666: FILE: kernel/csa.c:1435:
+        return(error);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2666: FILE: kernel/csa.c:1435:
+        return(error);$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2666: FILE: kernel/csa.c:1435:
+        return(error);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2669: FILE: kernel/csa.c:1438:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#2679: FILE: kernel/csa.c:1448:
+	struct acctsoj	acctsoj;	/* start of job record */
+	DBG_PRINTINIT(__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2679: FILE: kernel/csa.c:1448:
+	DBG_PRINTINIT(__FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2691: FILE: kernel/csa.c:1460:
+		printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'csa_jstart', this function's name, in a string
#2692: FILE: kernel/csa.c:1461:
+		    "csa_jstart: Received bad soj pointer, pid %d.\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2697: FILE: kernel/csa.c:1466:
+^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2701: FILE: kernel/csa.c:1470:
+	csa_header(&acctsoj.ac_hdr, REV_SOJ, ACCT_KERNEL_SOJ,
+		sizeof(struct acctsoj));

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#2707: FILE: kernel/csa.c:1476:
+	if (event == JOB_EVENT_START) {
+	DBG_PRINTEXIT(__LINE__);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2711: FILE: kernel/csa.c:1480:
+			(xtime.tv_sec - (jiffies / HZ) );

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#2712: FILE: kernel/csa.c:1481:
+	} else if (event == JOB_EVENT_RESTART) {
+	DBG_PRINTEXIT(__LINE__);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2716: FILE: kernel/csa.c:1485:
+			(xtime.tv_sec - (jiffies / HZ) );

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#2717: FILE: kernel/csa.c:1486:
+	} else {
+	DBG_PRINTEXIT(__LINE__);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2726: FILE: kernel/csa.c:1495:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2726: FILE: kernel/csa.c:1495:
+ ^I */$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#2728: FILE: kernel/csa.c:1497:
+	if (csa_acctvp != (struct file *)NULL) {
+	DBG_PRINTEXIT(__LINE__);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2750: FILE: kernel/csa.c:1519:
+	if (csa_acctvp == (struct file *)NULL) {
+		return 0;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2756: FILE: kernel/csa.c:1525:
+^I^Iprintk(KERN_ERR $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2756: FILE: kernel/csa.c:1525:
+		printk(KERN_ERR 

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'csa_jexit', this function's name, in a string
#2757: FILE: kernel/csa.c:1526:
+		    "csa_jexit: Received bad eoj pointer, pid %d.\n",

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2766: FILE: kernel/csa.c:1535:
+	csa_header(hdr1, REV_EOJ, ACCT_KERNEL_EOJ, sizeof(struct accteoj) );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2768: FILE: kernel/csa.c:1537:
+	csa_header(hdr2, REV_EOJ, ACCT_KERNEL_EOJ, 0 );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2778: FILE: kernel/csa.c:1547:
+		(xtime.tv_sec - (jiffies / HZ) );

ERROR:CODE_INDENT: code indent should use tabs where possible
#2791: FILE: kernel/csa.c:1560:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2791: FILE: kernel/csa.c:1560:
+ ^I */$

CHECK:SPACING: No space is necessary after a cast
#2793: FILE: kernel/csa.c:1562:
+		(void) csa_write((caddr_t)&eoj, ACCT_KERN_CSA,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2807: FILE: kernel/csa.c:1576:
+csa_write(char *buf, int did, int nbyte, uint64_t jid, int type,
+	struct job_csa *jp)

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2824: FILE: kernel/csa.c:1593:
+		if (jp != (struct job_csa *)NULL) {
[...]
+		} else {
[...]

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2848: FILE: kernel/csa.c:1617:
+	error = vp->f_op->write(vp,buf, nbyte, &vp->f_pos);
 	                          ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2852: FILE: kernel/csa.c:1621:
+	if (error >= 0) {
+		error = 0;
+	}

ERROR:SPACING: space required before the open parenthesis '('
#2857: FILE: kernel/csa.c:1626:
+		switch(type) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2858: FILE: kernel/csa.c:1627:
+		switch(type) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#2864: FILE: kernel/csa.c:1633:
+			printk(KERN_ALERT

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2872: FILE: kernel/csa.c:1641:
+			retval = job_setacct(jid, JOB_ACCT_CSA,
+				JOB_CSA_ACCTFILE, jp);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2873: FILE: kernel/csa.c:1642:
+			printk(KERN_WARNING JID_ERR2, error,

CHECK:SPACING: No space is necessary after a cast
#2874: FILE: kernel/csa.c:1643:
+			       (unsigned long long) jid);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 28)
#2875: FILE: kernel/csa.c:1644:
+			if (retval != 0) {
+			    printk(KERN_WARNING JID_ERR3,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2876: FILE: kernel/csa.c:1645:
+			    printk(KERN_WARNING JID_ERR3,

CHECK:SPACING: No space is necessary after a cast
#2877: FILE: kernel/csa.c:1646:
+				   (unsigned long long) jid);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 28)
#2878: FILE: kernel/csa.c:1647:
+			} else {
+			    printk(KERN_WARNING JID_ERR4,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2879: FILE: kernel/csa.c:1648:
+			    printk(KERN_WARNING JID_ERR4,

CHECK:SPACING: No space is necessary after a cast
#2880: FILE: kernel/csa.c:1649:
+				   (unsigned long long) jid);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2886: FILE: kernel/csa.c:1655:
+		return(error);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2887: FILE: kernel/csa.c:1656:
+^I} $

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2889: FILE: kernel/csa.c:1658:
+	return(error);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2892: FILE: kernel/csa.c:1661:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2922: FILE: init/Kconfig:178:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000256809.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 232 errors, 251 warnings, 195 checks, 2704 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000256809.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
