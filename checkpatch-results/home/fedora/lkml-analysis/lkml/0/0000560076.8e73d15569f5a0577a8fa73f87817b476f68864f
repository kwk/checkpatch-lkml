WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#66: FILE: fs/buffer.c:102:
+static struct address_space_operations anon_space_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#67: FILE: fs/buffer.c:103:
+	writepage: block_write_anon_page,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#68: FILE: fs/buffer.c:104:
+	sync_page: block_sync_page,
 	         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#68: FILE: fs/buffer.c:104:
+	sync_page: block_sync_page,

WARNING:SPACING: space prohibited before semicolon
#69: FILE: fs/buffer.c:105:
+} ;

WARNING:INDENTED_LABEL: labels should not be indented
#71: FILE: fs/buffer.c:107:
+	pages: { &anon_space_mapping.pages, &anon_space_mapping.pages },

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#72: FILE: fs/buffer.c:108:
+	a_ops: &anon_space_ops,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#72: FILE: fs/buffer.c:108:
+	a_ops: &anon_space_ops,

WARNING:SPACING: space prohibited before semicolon
#73: FILE: fs/buffer.c:109:
+} ;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#82: FILE: fs/buffer.c:175:
+/*
+** util function for sync_buffers and flush_dirty_buffers

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#86: FILE: fs/buffer.c:179:
+static int dirty_list_writepage(struct page *page) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#87: FILE: fs/buffer.c:180:
+	int (*writepage)(struct page *)  ;

WARNING:SPACING: space prohibited before semicolon
#87: FILE: fs/buffer.c:180:
+	int (*writepage)(struct page *)  ;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#87: FILE: fs/buffer.c:180:
+	int (*writepage)(struct page *)  ;

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: space prohibited before semicolon
#88: FILE: fs/buffer.c:181:
+	int ret ;

WARNING:SPACING: space prohibited before semicolon
#90: FILE: fs/buffer.c:183:
+	writepage = page->mapping->a_ops->writepage ;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#92: FILE: fs/buffer.c:185:
+	if (!writepage) {
+		writepage = anon_space_ops.writepage ;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited before semicolon
#93: FILE: fs/buffer.c:186:
+		writepage = anon_space_ops.writepage ;

WARNING:SPACING: space prohibited before semicolon
#96: FILE: fs/buffer.c:189:
+	ClearPageDirty(page) ;

WARNING:SPACING: space prohibited before semicolon
#97: FILE: fs/buffer.c:190:
+	ret = writepage(page) ;

WARNING:SPACING: space prohibited before semicolon
#99: FILE: fs/buffer.c:192:
+		SetPageDirty(page) ;

WARNING:SPACING: space prohibited before semicolon
#100: FILE: fs/buffer.c:193:
+		UnlockPage(page) ;

CHECK:CAMELCASE: Avoid CamelCase: <UnlockPage>
#100: FILE: fs/buffer.c:193:
+		UnlockPage(page) ;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACING: space prohibited before semicolon
#102: FILE: fs/buffer.c:195:
+	return ret ;

WARNING:SPACING: space prohibited before semicolon
#112: FILE: fs/buffer.c:212:
+	struct page *page ;

WARNING:SPACING: space prohibited before semicolon
#121: FILE: fs/buffer.c:268:
+			page = bh->b_page ;

WARNING:SPACING: space prohibited before semicolon
#122: FILE: fs/buffer.c:269:
+			page_cache_get(page) ;

CHECK:CAMELCASE: Avoid CamelCase: <TryLockPage>
#123: FILE: fs/buffer.c:270:
+			if (TryLockPage(page)) {

WARNING:SPACING: space prohibited before semicolon
#125: FILE: fs/buffer.c:272:
+					retry = 1 ;

WARNING:SPACING: space prohibited before semicolon
#126: FILE: fs/buffer.c:273:
+					continue ;

WARNING:SPACING: space prohibited before semicolon
#129: FILE: fs/buffer.c:276:
+				wait_on_page(page) ;

WARNING:SPACING: space prohibited before semicolon
#130: FILE: fs/buffer.c:277:
+				page_cache_release(page) ;

WARNING:SPACING: space prohibited before semicolon
#131: FILE: fs/buffer.c:278:
+				goto repeat ;

WARNING:SPACING: space prohibited before semicolon
#137: FILE: fs/buffer.c:282:
+			dirty_list_writepage(page) ;

WARNING:SPACING: space prohibited before semicolon
#138: FILE: fs/buffer.c:283:
+			page_cache_release(page) ;

WARNING:SPACING: space prohibited before semicolon
#149: FILE: fs/buffer.c:1153:
+		SetPageDirty(bh->b_page) ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#158: FILE: fs/buffer.c:1530:
+static int block_write_anon_page(struct page *page) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited before semicolon
#161: FILE: fs/buffer.c:1533:
+	int i, nr = 0 ;

WARNING:SPACING: space prohibited before semicolon
#162: FILE: fs/buffer.c:1534:
+	int partial = 0 ;

WARNING:SPACING: space prohibited before semicolon
#163: FILE: fs/buffer.c:1535:
+	int ret = 0 ;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#166: FILE: fs/buffer.c:1538:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#169: FILE: fs/buffer.c:1541:
+		BUG() ;

WARNING:SPACING: space prohibited before semicolon
#169: FILE: fs/buffer.c:1541:
+		BUG() ;

WARNING:SPACING: space prohibited before semicolon
#179: FILE: fs/buffer.c:1551:
+				clear_bit(BH_Dirty, &bh->b_state) ;

WARNING:SPACING: space prohibited before semicolon
#181: FILE: fs/buffer.c:1553:
+				arr[nr++] = bh ;

WARNING:SPACING: space prohibited before semicolon
#183: FILE: fs/buffer.c:1555:
+				partial = 1 ;

WARNING:SPACING: space prohibited before semicolon
#184: FILE: fs/buffer.c:1556:
+				unlock_buffer(bh) ;

WARNING:SPACING: space prohibited before semicolon
#187: FILE: fs/buffer.c:1559:
+			partial = 1 ;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#193: FILE: fs/buffer.c:1565:
+	for (i = 0 ; i < nr ; i++) {
+		submit_bh(WRITE, arr[i]) ;
+	}

WARNING:SPACING: space prohibited before semicolon
#194: FILE: fs/buffer.c:1566:
+		submit_bh(WRITE, arr[i]) ;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#199: FILE: fs/buffer.c:1571:
+	if (nr == 0) {
+		UnlockPage(page) ;
+	}

WARNING:SPACING: space prohibited before semicolon
#200: FILE: fs/buffer.c:1572:
+		UnlockPage(page) ;

WARNING:SPACING: space prohibited before semicolon
#202: FILE: fs/buffer.c:1574:
+	return ret ;

WARNING:SPACING: space prohibited before semicolon
#212: FILE: fs/buffer.c:1586:
+	int nr = 0 ;

WARNING:SPACING: space prohibited before semicolon
#213: FILE: fs/buffer.c:1587:
+	struct buffer_head *arr[MAX_BUF_PER_PAGE] ;

WARNING:SPACING: space prohibited before semicolon
#214: FILE: fs/buffer.c:1588:
+	int page_ok = Page_Uptodate(page) ;

CHECK:CAMELCASE: Avoid CamelCase: <Page_Uptodate>
#214: FILE: fs/buffer.c:1588:
+	int page_ok = Page_Uptodate(page) ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#241: FILE: fs/buffer.c:1624:
+^I^I^Iarr[nr++] = bh ; $

WARNING:SPACING: space prohibited before semicolon
#241: FILE: fs/buffer.c:1624:
+			arr[nr++] = bh ; 

WARNING:SPACING: space prohibited before semicolon
#243: FILE: fs/buffer.c:1626:
+			partial = 1 ;

WARNING:SPACING: space prohibited before semicolon
#252: FILE: fs/buffer.c:1634:
+		bh = arr[i] ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#260: FILE: fs/buffer.c:1640:
+^I} $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#267: FILE: fs/buffer.c:1642:
+	for (i = 0 ; i < nr ; i++) {
+		submit_bh(WRITE, arr[i]) ;
+	}

WARNING:SPACING: space prohibited before semicolon
#268: FILE: fs/buffer.c:1643:
+		submit_bh(WRITE, arr[i]) ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#271: FILE: fs/buffer.c:1646:
+^Iif (nr == 0) $

WARNING:SPACING: space prohibited before semicolon
#272: FILE: fs/buffer.c:1647:
+		UnlockPage(page) ;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#289: FILE: fs/buffer.c:1775:
+static int __block_dirty_range(struct inode *inode, struct page *page,
+		unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#289: FILE: fs/buffer.c:1775:
+		unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#289: FILE: fs/buffer.c:1775:
+		unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#291: FILE: fs/buffer.c:1777:
+	unsigned block_start, block_end;

WARNING:SPACING: space prohibited before semicolon
#292: FILE: fs/buffer.c:1778:
+	int partial = 0 ;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#293: FILE: fs/buffer.c:1779:
+	unsigned blocksize;

ERROR:SPACING: space required before the open parenthesis '('
#298: FILE: fs/buffer.c:1784:
+	for(bh = head = page->buffers, block_start = 0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#300: FILE: fs/buffer.c:1786:
+	    block_start=block_end, bh = bh->b_this_page) {
 	               ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#307: FILE: fs/buffer.c:1793:
+			if (!atomic_set_buffer_dirty(bh)) {
+				buffer_insert_inode_queue(bh, inode);
+			}

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#314: FILE: fs/buffer.c:1800:
+	 * uptodate then we can optimize away a bogus readpage() for
 	   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'wether' may be misspelled - perhaps 'weather'?
#315: FILE: fs/buffer.c:1801:
+	 * the next read(). Here we 'discover' wether the page went
 	                                       ^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#316: FILE: fs/buffer.c:1802:
+	 * uptodate as a result of this (potentially partial) write.
 	   ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#334: FILE: fs/buffer.c:2101:
+		/* this will just set the dirty bits for block_write_full_page
+		** it is only safe because we have the page locked and

ERROR:SPACING: space required after that ',' (ctx:VxV)
#340: FILE: fs/buffer.c:2107:
+		__block_dirty_range(inode,page,0,offset);
 		                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#340: FILE: fs/buffer.c:2107:
+		__block_dirty_range(inode,page,0,offset);
 		                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#340: FILE: fs/buffer.c:2107:
+		__block_dirty_range(inode,page,0,offset);
 		                                ^

WARNING:SPACING: space prohibited before semicolon
#342: FILE: fs/buffer.c:2109:
+		err = __block_write_full_page(inode, page, get_block) ;

WARNING:SPACING: space prohibited before semicolon
#358: FILE: fs/buffer.c:2406:
+	unsigned long index ;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#367: FILE: fs/buffer.c:2423:
+	/* don't put this buffer head on the free list until the
+	** page is setup.  Is there a better index to use?  Would 0

WARNING:SPACING: space prohibited before semicolon
#371: FILE: fs/buffer.c:2427:
+	index = atomic_read(&buffermem_pages) ;

WARNING:SPACING: space prohibited before semicolon
#373: FILE: fs/buffer.c:2429:
+	add_to_page_cache_locked(page, &anon_space_mapping, index) ;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#408: FILE: fs/buffer.c:2486:
+		if (buffer_locked(p) && wait > 1) {
+			__wait_on_buffer(p);
+		} 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#410: FILE: fs/buffer.c:2488:
+^I^I} $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&anon_space_mapping'
#418: FILE: fs/buffer.c:2551:
+	if (page->mapping == (&anon_space_mapping)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BRACES: braces {} are not necessary for single statement blocks
#418: FILE: fs/buffer.c:2551:
+	if (page->mapping == (&anon_space_mapping)) {
+		atomic_dec(&buffermem_pages) ;
+	}

WARNING:SPACING: space prohibited before semicolon
#419: FILE: fs/buffer.c:2552:
+		atomic_dec(&buffermem_pages) ;

WARNING:SPACING: space prohibited before semicolon
#428: FILE: fs/buffer.c:2732:
+	struct page *page ;

WARNING:SPACING: space prohibited before semicolon
#437: FILE: fs/buffer.c:2750:
+			continue ;

WARNING:SPACING: space prohibited before semicolon
#452: FILE: fs/buffer.c:2763:
+		page = bh->b_page ;

WARNING:SPACING: space prohibited before semicolon
#453: FILE: fs/buffer.c:2764:
+		page_cache_get(page) ;

WARNING:SPACING: space prohibited before semicolon
#455: FILE: fs/buffer.c:2766:
+			page_cache_release(page) ;

WARNING:SPACING: space prohibited before semicolon
#456: FILE: fs/buffer.c:2767:
+			continue ;

WARNING:SPACING: space prohibited before semicolon
#458: FILE: fs/buffer.c:2769:
+		spin_unlock(&lru_list_lock) ;

WARNING:SPACING: space prohibited before semicolon
#459: FILE: fs/buffer.c:2770:
+		dirty_list_writepage(page) ;

WARNING:SPACING: space prohibited before semicolon
#460: FILE: fs/buffer.c:2771:
+		page_cache_release(page) ;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000560076.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 82 warnings, 6 checks, 423 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000560076.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
