WARNING:TYPO_SPELLING: 'coverting' may be misspelled - perhaps 'converting'?
#31: 
It is a WIP because this patch covers the EASY part: coverting the
                                                     ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#56: 
 drivers/scsi/libata-core.c  |  467 +++++++++++++++-----------------------------

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#81: FILE: drivers/scsi/ahci.c:308:
+static inline void __iomem *ahci_port_base (void __iomem *base,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#680: FILE: drivers/scsi/libata-core.c:1797:
+	udelay(20);	/* FIXME: flush */

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#682: FILE: drivers/scsi/libata-core.c:1799:
+	udelay(20);	/* FIXME: flush */

CHECK:BRACES: Unbalanced braces around else statement
#829: FILE: drivers/scsi/libata-core.c:3056:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#847: FILE: drivers/scsi/libata-core.c:3695:
+void ata_bmdma_setup (struct ata_queued_cmd *qc)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#882: FILE: drivers/scsi/libata-core.c:3724:
+void ata_bmdma_start (struct ata_queued_cmd *qc)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1006: FILE: drivers/scsi/libata-core.c:3763:
+	void __iomem *mmio = ap->ioaddr.bmdma_addr + ATA_DMA_STATUS;
+	iowrite8(ioread8(mmio), mmio);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1053: FILE: drivers/scsi/libata-core.c:4341:
+		printk(KERN_INFO "ata%u: %cATA max %s cmd %p ctl %p "

WARNING:SPLIT_STRING: quoted string split across lines
#1054: FILE: drivers/scsi/libata-core.c:4342:
+		printk(KERN_INFO "ata%u: %cATA max %s cmd %p ctl %p "
+				 "bmdma %p irq %lu\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'map->addr[i]'
#1126: FILE: drivers/scsi/libata-core.c:4656:
+		if ((map->bar_mask & (1 << i)) && (map->addr[i]))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!probe_ent->mmio_base"
#1307: FILE: drivers/scsi/sata_nv.c:418:
+	if (probe_ent->mmio_base == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1347: FILE: drivers/scsi/sata_nv.c:462:
+	iowrite8(NV_INT_STATUS_HOTPLUG,
 		probe_ent->port[0].scr_addr + NV_INT_STATUS);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1742: FILE: drivers/scsi/sata_sis.c:233:
+			iowrite32(val, ap->ioaddr.scr_addr + (sc_reg * 4)+0x10);
 			                                                 ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1834: FILE: drivers/scsi/sata_sx4.c:1410:
+	base = mmio_base = pci_iomap(pdev, 3, 0);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1906: FILE: drivers/scsi/sata_vsc.c:293:
+static void __devinit vsc_sata_setup_port(struct ata_ioports *port,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1991: FILE: include/linux/libata.h:723:
+			printk(KERN_WARNING "ATA: abnormal status 0x%X on port %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1992: FILE: include/linux/libata.h:724:
+			printk(KERN_WARNING "ATA: abnormal status 0x%X on port %p\n",
 				status, l);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000098075.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 10 warnings, 9 checks, 1801 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000098075.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
