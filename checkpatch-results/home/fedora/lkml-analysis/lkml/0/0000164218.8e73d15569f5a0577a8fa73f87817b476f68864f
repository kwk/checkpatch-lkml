WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
KGDB files and Makefile/related is that for support early on we must set some

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#51: FILE: arch/i386/kernel/kgdb.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'Origianl' may be misspelled - perhaps 'Original'?
#74: FILE: arch/i386/kernel/kgdb.c:24:
+ *  Origianl kgdb, compatibility with 2.1.xx kernel by
     ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/kdebug.h> instead of <asm/kdebug.h>
#92: FILE: arch/i386/kernel/kgdb.c:42:
+#include <asm/kdebug.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#99: FILE: arch/i386/kernel/kgdb.c:49:
+/* Likewise, the vector number here (since GDB only gets the signal
+   number through the usual means, and that's not very specific).  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#99: FILE: arch/i386/kernel/kgdb.c:49:
+   number through the usual means, and that's not very specific).  */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#102: FILE: arch/i386/kernel/kgdb.c:52:
+extern atomic_t cpu_doing_single_step;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#168: FILE: arch/i386/kernel/kgdb.c:118:
+	unsigned enabled;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#169: FILE: arch/i386/kernel/kgdb.c:119:
+	unsigned type;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#170: FILE: arch/i386/kernel/kgdb.c:120:
+	unsigned len;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#171: FILE: arch/i386/kernel/kgdb.c:121:
+	unsigned addr;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#184: FILE: arch/i386/kernel/kgdb.c:134:
+	unsigned dr7;

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#186: FILE: arch/i386/kernel/kgdb.c:136:
+	asm volatile ("movl %%db7, %0\n":"=r" (dr7)
 	                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#189: FILE: arch/i386/kernel/kgdb.c:139:
+		unsigned addr0, addr1, addr2, addr3;

WARNING:LINE_SPACING: Missing a blank line after declarations
#190: FILE: arch/i386/kernel/kgdb.c:140:
+		unsigned addr0, addr1, addr2, addr3;
+		asm volatile ("movl %%db0, %0\n"

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#193: FILE: arch/i386/kernel/kgdb.c:143:
+			      "movl %%db3, %3\n":"=r" (addr0), "=r"(addr1),
 			                        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxB)
#194: FILE: arch/i386/kernel/kgdb.c:144:
+			      "=r"(addr2), "=r"(addr3):);
 			                              ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#240: FILE: arch/i386/kernel/kgdb.c:190:
+	asm volatile ("movl %0,%%db7": /* no output */ :"r" (0));
 	                             ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#240: FILE: arch/i386/kernel/kgdb.c:190:
+	asm volatile ("movl %0,%%db7": /* no output */ :"r" (0));
 	                                               ^

CHECK:CAMELCASE: Avoid CamelCase: <newPC>
#262: FILE: arch/i386/kernel/kgdb.c:212:
+	int newPC, dr6;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#267: FILE: arch/i386/kernel/kgdb.c:217:
+		/* try to read optional parameter, pc unchanged if no parm */
 		                                                      ^^^^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#286: FILE: arch/i386/kernel/kgdb.c:236:
+		asm volatile ("movl %%db6, %0\n":"=r" (dr6));
 		                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#289: FILE: arch/i386/kernel/kgdb.c:239:
+			long breakno;
+			for (breakno = 0; breakno < 4; ++breakno) {

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#301: FILE: arch/i386/kernel/kgdb.c:251:
+		return (0);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#308: FILE: arch/i386/kernel/kgdb.c:258:
+ * spots. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#331: FILE: arch/i386/kernel/kgdb.c:281:
+		 * debug exception, ignore. */

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#349: FILE: arch/i386/kernel/kgdb.c:299:
+struct kgdb_arch arch_kgdb_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#356: FILE: arch/i386/kernel/kgdb-jmp.S:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#357: FILE: arch/i386/kernel/kgdb-jmp.S:2:
+ * arch/i386/kernel/kgdb-jmp.S

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'PARMS' may be misspelled - perhaps 'PARAMS'?
#378: FILE: arch/i386/kernel/kgdb-jmp.S:23:
+#define PARMS		LINKAGE		/* no space for saved regs */
         ^^^^^

WARNING:TYPO_SPELLING: 'PARMS' may be misspelled - perhaps 'PARAMS'?
#379: FILE: arch/i386/kernel/kgdb-jmp.S:24:
+#define JMPBUF		PARMS
               		^^^^^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#448: FILE: arch/i386/kernel/setup.c:150:
+extern void early_trap_init(void);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#501: FILE: arch/i386/kernel/traps.c:1064:
+void __init early_trap_init(void) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#502: FILE: arch/i386/kernel/traps.c:1065:
+	set_intr_gate(1,&debug);
 	               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#502: FILE: arch/i386/kernel/traps.c:1065:
+	set_intr_gate(1,&debug);
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#504: FILE: arch/i386/kernel/traps.c:1067:
+	set_intr_gate(14,&page_fault);
 	                ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#504: FILE: arch/i386/kernel/traps.c:1067:
+	set_intr_gate(14,&page_fault);
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#517: FILE: arch/i386/kernel/traps.c:1086:
+	set_system_gate(4,&overflow); /* int4/5 can be called from all */
 	                 ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#517: FILE: arch/i386/kernel/traps.c:1086:
+	set_system_gate(4,&overflow); /* int4/5 can be called from all */
 	                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#537: FILE: arch/i386/mm/fault.c:428:
+	if (notify_die(DIE_PAGE_FAULT, "no context", regs, error_code, 14,
+				SIGSEGV) == NOTIFY_STOP)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#547: FILE: include/asm-i386/kgdb.h:1:
+#ifdef __KERNEL__

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#591: FILE: include/asm-i386/kgdb.h:45:
+#define BREAKPOINT()		asm("   int $3");

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#605: FILE: include/asm-i386/system.h:16:
+ * any of the following */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000164218.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 26 warnings, 6 checks, 547 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000164218.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
