WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#50: FILE: fs/block_dev.c:229:
+	struct block_device_operations *bdops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#93: FILE: fs/block_dev.c:369:
+	struct list_head *p;
+	while ( (p = bdev->bd_inodes.next) != &bdev->bd_inodes ) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#93: FILE: fs/block_dev.c:369:
+	while ( (p = bdev->bd_inodes.next) != &bdev->bd_inodes ) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#93: FILE: fs/block_dev.c:369:
+	while ( (p = bdev->bd_inodes.next) != &bdev->bd_inodes ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#93: FILE: fs/block_dev.c:369:
+	while ( (p = bdev->bd_inodes.next) != &bdev->bd_inodes ) {
+		__bd_forget(list_entry(p, struct inode, i_devices));
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#100: FILE: fs/block_dev.c:376:
+	iput(bdev->bd_inode);
 	^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space prohibited after that open parenthesis '('
#235: FILE: fs/block_dev.c:499:
+	while ( (p = blkdevs[major].bdevs.next) != &blkdevs[major].bdevs ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#235: FILE: fs/block_dev.c:499:
+	while ( (p = blkdevs[major].bdevs.next) != &blkdevs[major].bdevs ) {

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#251: FILE: fs/block_dev.c:515:
+static struct block_device_operations *get_bdops(int major)

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#253: FILE: fs/block_dev.c:517:
+	struct block_device_operations *ops = NULL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#254: FILE: fs/block_dev.c:518:
+	struct block_device_operations *ops = NULL;
+	spin_lock(&bdev_lock);

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#264: FILE: fs/block_dev.c:528:
+static void put_bdops(struct block_device_operations *ops)

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#272: FILE: fs/block_dev.c:536:
+	struct block_device_operations *ops;

WARNING:LINE_SPACING: Missing a blank line after declarations
#274: FILE: fs/block_dev.c:538:
+	int major = MAJOR(to_kdev_t(bdev->bd_dev));
+	spin_lock(&bdev_lock);

WARNING:LINE_SPACING: Missing a blank line after declarations
#289: FILE: fs/block_dev.c:553:
+		char name[20];
+		sprintf(name, "block-major-%d", major);

CHECK:BRACES: braces {} should be used on all arms of this statement
#297: FILE: fs/block_dev.c:561:
+	if (!bdev->bd_op) {
[...]
+	} else if (bdev->bd_op != ops)
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#301: FILE: fs/block_dev.c:565:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#315: FILE: fs/block_dev.c:581:
+	struct block_device_operations * bdops = get_bdops(MAJOR(dev));

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#315: FILE: fs/block_dev.c:581:
+	struct block_device_operations * bdops = get_bdops(MAJOR(dev));

CHECK:BRACES: braces {} should be used on all arms of this statement
#386: FILE: fs/block_dev.c:631:
+	if (!ret) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#390: FILE: fs/block_dev.c:635:
+	} else

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#411: FILE: fs/block_dev.c:672:
+	return do_open(inode->i_bdev, inode, filp);
 	                                     ^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#444: FILE: fs/devfs/base.c:1299:
+    if (ops == NULL && !S_ISBLK (mode) )$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#444: FILE: fs/devfs/base.c:1299:
+    if (ops == NULL && !S_ISBLK (mode) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#444: FILE: fs/devfs/base.c:1299:
+    if (ops == NULL && !S_ISBLK (mode) )

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ops"
#444: FILE: fs/devfs/base.c:1299:
+    if (ops == NULL && !S_ISBLK (mode) )

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#455: FILE: fs/devfs/base.c:1301:
+	printk ("%s: devfs_register(%s): NULL ops pointer\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#455: FILE: fs/devfs/base.c:1301:
+	printk ("%s: devfs_register(%s): NULL ops pointer\n",

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#481: FILE: fs/devfs/base.c:2168:
+    int res;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#498: FILE: fs/devfs/base.c:2176:
+    res = check_disk_change(dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#501: FILE: fs/devfs/base.c:2178:
+    return res;$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#516: FILE: fs/devfs/base.c:2355:
+		printk ("%s: get_vfs_inode(%d): no block device from bdget()\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#516: FILE: fs/devfs/base.c:2355:
+		printk ("%s: get_vfs_inode(%d): no block device from bdget()\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#517: FILE: fs/devfs/base.c:2356:
+		printk ("%s: get_vfs_inode(%d): no block device from bdget()\n",
 		     DEVFS_NAME, (int) inode->i_ino);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#577: FILE: include/linux/fs.h:1080:
+extern int bd_activate(struct block_device *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#577: FILE: include/linux/fs.h:1080:
+extern int bd_activate(struct block_device *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#591: FILE: mm/filemap.c:250:
+	struct page * page;

CHECK:CAMELCASE: Avoid CamelCase: <TryLockPage>
#605: FILE: mm/filemap.c:264:
+			if (TryLockPage(page)) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <UnlockPage>
#617: FILE: mm/filemap.c:276:
+				UnlockPage(page);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000500850.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 24 warnings, 8 checks, 590 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000500850.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
