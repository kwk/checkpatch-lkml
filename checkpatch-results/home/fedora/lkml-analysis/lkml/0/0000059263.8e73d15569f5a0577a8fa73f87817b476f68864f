ERROR:TRAILING_WHITESPACE: trailing whitespace
#50: FILE: include/linux/skbuff.h:1272:
+extern int^I       skb_copy_datagram(const struct sk_buff *from, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#50: FILE: include/linux/skbuff.h:1272:
+extern int	       skb_copy_datagram(const struct sk_buff *from, 

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: include/net/sock.h:565:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#111: FILE: include/net/sock.h:566:
+^Iint^I^I^I(*async_recv) (struct sock *sk, $

WARNING:SPACING: Unnecessary space before function pointer arguments
#111: FILE: include/net/sock.h:566:
+	int			(*async_recv) (struct sock *sk, 

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#112: FILE: include/net/sock.h:567:
+	int			(*async_recv) (struct sock *sk, 
+						void *dst, size_t size);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#113: FILE: include/net/sock.h:568:
+^Iint^I^I^I(*async_send) (struct sock *sk, $

WARNING:SPACING: Unnecessary space before function pointer arguments
#113: FILE: include/net/sock.h:568:
+	int			(*async_send) (struct sock *sk, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#114: FILE: include/net/sock.h:569:
+^I^I^I^I^I^Istruct page **pages, unsigned int poffset, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: include/net/sock.h:569:
+	int			(*async_send) (struct sock *sk, 
+						struct page **pages, unsigned int poffset, 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#149: FILE: include/net/tcp.h:367:
+extern int			tcp_async_recv(struct sock *sk, void *dst, size_t size);

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#150: FILE: include/net/tcp.h:368:
+extern int			tcp_async_send(struct sock *sk, struct page **pages, unsigned int poffset, size_t size);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#150: FILE: include/net/tcp.h:368:
+extern int			tcp_async_send(struct sock *sk, struct page **pages, unsigned int poffset, size_t size);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#158: FILE: include/net/tcp.h:862:
+			kevent_socket_notify(sk, KEVENT_SOCKET_RECV|KEVENT_SOCKET_SEND);
 			                                           ^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#163: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#168: FILE: kernel/kevent/kevent_naio.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#169: FILE: kernel/kevent/kevent_naio.c:2:
+ * ^Ikevent_naio.c$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#170: FILE: kernel/kevent/kevent_naio.c:3:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#173: FILE: kernel/kevent/kevent_naio.c:6:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#185: FILE: kernel/kevent/kevent_naio.c:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#186: FILE: kernel/kevent/kevent_naio.c:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: kernel/kevent/kevent_naio.c:37:
+static int kevent_naio_setup_aio(int ctl_fd, int s, void __user *buf, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: kernel/kevent/kevent_naio.c:38:
+static int kevent_naio_setup_aio(int ctl_fd, int s, void __user *buf, 
+		size_t size, u32 event)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: kernel/kevent/kevent_naio.c:70:
+asmlinkage long sys_aio_recv(int ctl_fd, int s, void __user *buf, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#238: FILE: kernel/kevent/kevent_naio.c:71:
+asmlinkage long sys_aio_recv(int ctl_fd, int s, void __user *buf, 
+		size_t size, unsigned flags)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#238: FILE: kernel/kevent/kevent_naio.c:71:
+		size_t size, unsigned flags)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#243: FILE: kernel/kevent/kevent_naio.c:76:
+asmlinkage long sys_aio_send(int ctl_fd, int s, void __user *buf, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#244: FILE: kernel/kevent/kevent_naio.c:77:
+asmlinkage long sys_aio_send(int ctl_fd, int s, void __user *buf, 
+		size_t size, unsigned flags)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#244: FILE: kernel/kevent/kevent_naio.c:77:
+		size_t size, unsigned flags)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#255: FILE: kernel/kevent/kevent_naio.c:88:
+	int num = size/PAGE_SIZE;
 	              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#271: FILE: kernel/kevent/kevent_naio.c:104:
+^Iif (!sk || !sk->sk_prot->async_recv || !sk->sk_prot->async_send || $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#272: FILE: kernel/kevent/kevent_naio.c:105:
+	if (!sk || !sk->sk_prot->async_recv || !sk->sk_prot->async_send || 
+		!sock_flag(sk, SOCK_ASYNC))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#274: FILE: kernel/kevent/kevent_naio.c:107:
+^I$

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#279: FILE: kernel/kevent/kevent_naio.c:112:
+	page = kmalloc(sizeof(struct page *) * num, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#284: FILE: kernel/kevent/kevent_naio.c:117:
+^Ierr = get_user_pages(current, current->mm, (unsigned long)addr, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#285: FILE: kernel/kevent/kevent_naio.c:118:
+	err = get_user_pages(current, current->mm, (unsigned long)addr, 
+			num, 1, 0, page, NULL);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#308: FILE: kernel/kevent/kevent_naio.c:141:
+	for (i=0; i<num; ++i)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#308: FILE: kernel/kevent/kevent_naio.c:141:
+	for (i=0; i<num; ++i)
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#327: FILE: kernel/kevent/kevent_naio.c:160:
+	for (i=0; i<num; ++i)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#327: FILE: kernel/kevent/kevent_naio.c:160:
+	for (i=0; i<num; ++i)
 	           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#343: FILE: kernel/kevent/kevent_naio.c:176:
+	int ready = 0, num = off/PAGE_SIZE, err = 0, send = 0;
 	                        ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#363: FILE: kernel/kevent/kevent_naio.c:196:
+		optr = ptr = kmap_atomic(page, KM_IRQ0);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#392: FILE: kernel/kevent/kevent_naio.c:225:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#393: FILE: kernel/kevent/kevent_naio.c:226:
+	printk("%s: sk=%p, k=%p, size=%4u, off=%4u, err=%3d, ready=%1d.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: kernel/kevent/kevent_naio.c:227:
+	printk("%s: sk=%p, k=%p, size=%4u, off=%4u, err=%3d, ready=%1d.\n",
+			__func__, sk, k, size, off, err, ready);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#413: FILE: kernel/kevent/kevent_socket.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#414: FILE: kernel/kevent/kevent_socket.c:2:
+ * ^Ikevent_socket.c$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#415: FILE: kernel/kevent/kevent_socket.c:3:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#418: FILE: kernel/kevent/kevent_socket.c:6:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#430: FILE: kernel/kevent/kevent_socket.c:18:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#431: FILE: kernel/kevent/kevent_socket.c:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#453: FILE: kernel/kevent/kevent_socket.c:41:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#456: FILE: kernel/kevent/kevent_socket.c:44:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#457: FILE: kernel/kevent/kevent_socket.c:45:
+^I^Iif ((rmem = atomic_read(&sk->sk_rmem_alloc)) > 0 || $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#457: FILE: kernel/kevent/kevent_socket.c:45:
+		if ((rmem = atomic_read(&sk->sk_rmem_alloc)) > 0 || 

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#458: FILE: kernel/kevent/kevent_socket.c:46:
+		if ((rmem = atomic_read(&sk->sk_rmem_alloc)) > 0 || 
+				!skb_queue_empty(&sk->sk_receive_queue))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#465: FILE: kernel/kevent/kevent_socket.c:53:
+^Iif ((k->event.event & KEVENT_SOCKET_ACCEPT) && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#466: FILE: kernel/kevent/kevent_socket.c:54:
+^I^I(!reqsk_queue_empty(&inet_csk(sk)->icsk_accept_queue) || $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#466: FILE: kernel/kevent/kevent_socket.c:54:
+	if ((k->event.event & KEVENT_SOCKET_ACCEPT) && 
+		(!reqsk_queue_empty(&inet_csk(sk)->icsk_accept_queue) || 

ERROR:CODE_INDENT: code indent should use tabs where possible
#467: FILE: kernel/kevent/kevent_socket.c:55:
+^I^I ^Ireqsk_queue_len_young(&inet_csk(sk)->icsk_accept_queue))) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#467: FILE: kernel/kevent/kevent_socket.c:55:
+^I^I ^Ireqsk_queue_len_young(&inet_csk(sk)->icsk_accept_queue))) {$

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#507: FILE: kernel/kevent/kevent_socket.c:95:
+	iput(inode);
 	^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#518: FILE: kernel/kevent/kevent_socket.c:106:
+	iput(inode);
 	^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#553: FILE: net/core/datagram.c:246:
+int skb_copy_datagram(const struct sk_buff *skb, int offset,
+			    void *to, int len)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#568: FILE: net/core/datagram.c:261:
+		if ((end += fraglen) > offset) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#573: FILE: net/core/datagram.c:266:
+			if (i == -1)
[...]
+			else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#575: FILE: net/core/datagram.c:268:
+			else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#579: FILE: net/core/datagram.c:272:
+				void *p = kmap(page) + frag->page_offset + o;
+				memcpy(to, p, copy);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#582: FILE: net/core/datagram.c:275:
+			if (!(len -= copy))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#592: FILE: net/core/datagram.c:285:
+		BUG_ON(skb_shinfo(skb)->frag_list);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#636: FILE: net/core/sock.c:1326:
+	kevent_socket_notify(sk, KEVENT_SOCKET_RECV|KEVENT_SOCKET_SEND);
 	                                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#644: FILE: net/core/sock.c:1336:
+	kevent_socket_notify(sk, KEVENT_SOCKET_RECV|KEVENT_SOCKET_SEND);
 	                                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#652: FILE: net/core/sock.c:1346:
+	kevent_socket_notify(sk, KEVENT_SOCKET_RECV|KEVENT_SOCKET_SEND);
 	                                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#660: FILE: net/core/sock.c:1366:
+	kevent_socket_notify(sk, KEVENT_SOCKET_SEND|KEVENT_SOCKET_RECV);
 	                                           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#669: FILE: net/core/sock.c:1471:
+        if (waitqueue_active(&(sk->sk_lock.wq))) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#669: FILE: net/core/sock.c:1471:
+        if (waitqueue_active(&(sk->sk_lock.wq))) {$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around sk->sk_lock.wq
#669: FILE: net/core/sock.c:1471:
+        if (waitqueue_active(&(sk->sk_lock.wq))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#669: FILE: net/core/sock.c:1471:
+        if (waitqueue_active(&(sk->sk_lock.wq))) {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#671: FILE: net/core/sock.c:1473:
+		kevent_socket_notify(sk, KEVENT_SOCKET_RECV|KEVENT_SOCKET_SEND);
 		                                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#684: FILE: net/core/stream.c:39:
+		kevent_socket_notify(sk, KEVENT_SOCKET_SEND|KEVENT_SOCKET_RECV);
 		                                           ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sk->sk_state == TCP_CLOSE'
#724: FILE: net/ipv4/tcp.c:1109:
+	if (sk->sk_err || (sk->sk_shutdown & SEND_SHUTDOWN) || sock_flag(sk, SOCK_DONE) ||
+			(sk->sk_state == TCP_CLOSE) || (atomic_read(&sk->sk_refcnt) == 1))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#725: FILE: net/ipv4/tcp.c:1110:
+	if (sk->sk_err || (sk->sk_shutdown & SEND_SHUTDOWN) || sock_flag(sk, SOCK_DONE) ||
+			(sk->sk_state == TCP_CLOSE) || (atomic_read(&sk->sk_refcnt) == 1))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#735: FILE: net/ipv4/tcp.c:1120:
+		if (!sk->sk_send_head || (copy = size_goal - skb->len) <= 0) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#760: FILE: net/ipv4/tcp.c:1145:
+^I^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#783: FILE: net/ipv4/tcp.c:1168:
+		if (!(len -= copy))

CHECK:BRACES: braces {} should be used on all arms of this statement
#789: FILE: net/ipv4/tcp.c:1174:
+		if (forced_push(tp)) {
[...]
+		} else if (skb == sk->sk_send_head)
[...]

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#819: FILE: net/ipv4/tcp.c:1204:
+/*
+ * Must be called with locked sock.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#861: FILE: net/ipv4/tcp.c:1246:
+				printk(KERN_INFO "async_recv bug: copied %X "

WARNING:SPLIT_STRING: quoted string split across lines
#862: FILE: net/ipv4/tcp.c:1247:
+				printk(KERN_INFO "async_recv bug: copied %X "
+				       "seq %X\n", *seq, TCP_SKB_CB(skb)->seq);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:INDENTED_LABEL: labels should not be indented
#903: FILE: net/ipv4/tcp.c:1288:
+	found_ok_skb:

WARNING:LINE_SPACING: Missing a blank line after declarations
#912: FILE: net/ipv4/tcp.c:1297:
+			u32 urg_offset = tp->urg_seq - *seq;
+			if (urg_offset < used) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#913: FILE: net/ipv4/tcp.c:1298:
+				if (!urg_offset) {
[...]
+				} else
[...]

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#918: FILE: net/ipv4/tcp.c:1303:
+						if (!used)

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

CHECK:BRACES: Unbalanced braces around else statement
#921: FILE: net/ipv4/tcp.c:1306:
+				} else

WARNING:INDENTED_LABEL: labels should not be indented
#954: FILE: net/ipv4/tcp.c:1339:
+	found_fin_ok:

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#981: FILE: net/ipv4/tcp.c:2533:
+EXPORT_SYMBOL(tcp_async_send);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:BRACES: braces {} should be used on all arms of this statement
#1040: FILE: net/ipv4/tcp_ipv4.c:1101:
+		if (!sock_owned_by_user(sk)) {
[...]
+			else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#1049: FILE: net/ipv4/tcp_ipv4.c:1104:
+			struct tcp_sock *tp = tcp_sk(sk);
+			if (!tp->ucopy.dma_chan && tp->ucopy.pinned_list)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (32, 32)
#1063: FILE: net/ipv4/tcp_ipv4.c:1111:
+				if (!tcp_prequeue(sk, skb))
+				ret = tcp_v4_do_rcv(sk, skb);

CHECK:BRACES: Unbalanced braces around else statement
#1066: FILE: net/ipv4/tcp_ipv4.c:1114:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1100: FILE: net/ipv6/tcp_ipv6.c:1225:
+		if (!sock_owned_by_user(sk)) {
[...]
 				ret = tcp_v6_do_rcv(sk, skb);
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#1110: FILE: net/ipv6/tcp_ipv6.c:1228:
+			struct tcp_sock *tp = tcp_sk(sk);
+			if (tp->ucopy.dma_chan)

CHECK:BRACES: Unbalanced braces around else statement
#1122: FILE: net/ipv6/tcp_ipv6.c:1236:
+		} else

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000059263.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 36 errors, 31 warnings, 36 checks, 1020 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000059263.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
