WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#51: 
# /etc/acpi/events/hotkey

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#52: 
# This script handles hotkey events on Panasonic notebooks

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#59: 
#!/bin/bash

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#60: 
# Handles hotkey events for Panasonic notebooks

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#116: 
diff -Nru lb-2.6.8.1/drivers/acpi/Kconfig linux-2.6.8.1/drivers/acpi/Kconfig

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#123: FILE: drivers/acpi/Kconfig:207:
+config ACPI_PCC
+	tristate "Panasonic Laptop Extras"
+	depends on X86
+	default m
+	---help---
+	  This driver adds support for hotkeys and screen brightness setting
+	  on Panasonic Let's Note laptops. 
+
+          For CRT/LCD switching, see the userspace utility i810switch.
+
+	  More information about this driver is available at
+	  <http://www.da-cha.org/letsnote/>
+
+	  Note: In order to effectively use this driver, you must set up your 
+	  acpid to handle 'hotkey' events. See the website for more details.
+
+	  If you have a panasonic lets note laptop (such as the CF-T2, Y2,
+	  R1, R2, W2, R3), say Y.
+
 config ACPI_DEBUG
 	bool "Debug Statements"
 	depends on ACPI_INTERPRETER

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#129: FILE: drivers/acpi/Kconfig:213:
+^I  on Panasonic Let's Note laptops. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#136: FILE: drivers/acpi/Kconfig:220:
+^I  Note: In order to effectively use this driver, you must set up your $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#158: FILE: drivers/acpi/pcc_acpi.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#166: FILE: drivers/acpi/pcc_acpi.c:9:
+ *  it under the terms of the GNU General Public License version 2 as $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#174: FILE: drivers/acpi/pcc_acpi.c:17:
+ *  along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#175: FILE: drivers/acpi/pcc_acpi.c:18:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:TYPO_SPELLING: 'retrive' may be misspelled - perhaps 'retrieve'?
#190: FILE: drivers/acpi/pcc_acpi.c:33:
+ *		-       add debug function to retrive SIFR
   		                              ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#199: FILE: drivers/acpi/pcc_acpi.c:42:
+ *^I^I- v0.1  Based on the toshiba_acpi.c video driver by $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#214: FILE: drivers/acpi/pcc_acpi.c:57:
+#include <asm/uaccess.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#226: FILE: drivers/acpi/pcc_acpi.c:69:
+ * Define ACPI PATHs $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#231: FILE: drivers/acpi/pcc_acpi.c:74:
+#define DEVICE_NAME_HKEY ^I"\\_SB_.HKEY"$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#289: FILE: drivers/acpi/pcc_acpi.c:132:
+static __inline__ void _set_bit(u32 * word, u32 mask, int value)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INLINE: plain inline is preferred over __inline__
#289: FILE: drivers/acpi/pcc_acpi.c:132:
+static __inline__ void _set_bit(u32 * word, u32 mask, int value)

CHECK:CAMELCASE: Avoid CamelCase: <methodName>
#296: FILE: drivers/acpi/pcc_acpi.c:139:
+static int is_valid_acpi_path(const char *methodName)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <pVal>
#305: FILE: drivers/acpi/pcc_acpi.c:148:
+static int read_acpi_int(acpi_handle handle, const char *methodName, int *pVal)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#316: FILE: drivers/acpi/pcc_acpi.c:159:
+		printk(KERN_INFO "acpi evaluate error on %s\n", methodName);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#323: FILE: drivers/acpi/pcc_acpi.c:166:
+		printk(KERN_INFO "return value is not int\n");

WARNING:NEW_TYPEDEFS: do not add new typedefs
#332: FILE: drivers/acpi/pcc_acpi.c:175:
+typedef struct _ProcItem {

CHECK:CAMELCASE: Avoid CamelCase: <_ProcItem>
#332: FILE: drivers/acpi/pcc_acpi.c:175:
+typedef struct _ProcItem {

WARNING:SPACING: Unnecessary space before function pointer arguments
#334: FILE: drivers/acpi/pcc_acpi.c:177:
+	char *(*read_func) (char *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#334: FILE: drivers/acpi/pcc_acpi.c:177:
+	char *(*read_func) (char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: Unnecessary space before function pointer arguments
#335: FILE: drivers/acpi/pcc_acpi.c:178:
+	unsigned long (*write_func) (const char *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#335: FILE: drivers/acpi/pcc_acpi.c:178:
+	unsigned long (*write_func) (const char *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#335: FILE: drivers/acpi/pcc_acpi.c:178:
+	unsigned long (*write_func) (const char *, unsigned long);

CHECK:CAMELCASE: Avoid CamelCase: <ProcItem>
#336: FILE: drivers/acpi/pcc_acpi.c:179:
+} ProcItem;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#340: FILE: drivers/acpi/pcc_acpi.c:183:
+			 int *eof, ProcItem * item)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#345: FILE: drivers/acpi/pcc_acpi.c:188:
+	if (off == 0) {
+		p = item->read_func(p);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#351: FILE: drivers/acpi/pcc_acpi.c:194:
+	if (len <= off + count) {
+		*eof = 1;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#356: FILE: drivers/acpi/pcc_acpi.c:199:
+	if (len > count) {
+		len = count;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#359: FILE: drivers/acpi/pcc_acpi.c:202:
+	if (len < 0) {
+		len = 0;
+	}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#366: FILE: drivers/acpi/pcc_acpi.c:209:
+			  unsigned long count, ProcItem * item)

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#395: FILE: drivers/acpi/pcc_acpi.c:238:
+	if (sscanf(buffer, "%i", &value) == 1 && value >= 0 && value < 2) {
+		if (value == 0) {
+			/* do nothing */
+			status = AE_OK;
+		} else {
+			status = acpi_evaluate_object(0, METHOD_CHGD, 0, 0);
+		}
+		if (ACPI_FAILURE(status)) {
+			printk(KERN_INFO LOGPREFIX "fail evaluate CHGD()\n");
+			return -EFAULT;
+		}
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#403: FILE: drivers/acpi/pcc_acpi.c:246:
+			printk(KERN_INFO LOGPREFIX "fail evaluate CHGD()\n");

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#409: FILE: drivers/acpi/pcc_acpi.c:252:
+
+}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#427: FILE: drivers/acpi/pcc_acpi.c:270:
+		printk(KERN_INFO LOGPREFIX "evaluation error HKEY.SQTY\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#435: FILE: drivers/acpi/pcc_acpi.c:278:
+		printk(KERN_INFO LOGPREFIX "evaluation error HEKY.SINF\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hkey->type != ACPI_TYPE_PACKAGE'
#439: FILE: drivers/acpi/pcc_acpi.c:282:
+	if (!hkey || (hkey->type != ACPI_TYPE_PACKAGE)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#440: FILE: drivers/acpi/pcc_acpi.c:283:
+		printk(KERN_INFO LOGPREFIX "Invalid HKEY.SINF\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#445: FILE: drivers/acpi/pcc_acpi.c:288:
+		printk(KERN_INFO LOGPREFIX

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around hkey->package.elements[i]
#451: FILE: drivers/acpi/pcc_acpi.c:294:
+		union acpi_object *element = &(hkey->package.elements[i]);

WARNING:LINE_SPACING: Missing a blank line after declarations
#452: FILE: drivers/acpi/pcc_acpi.c:295:
+		union acpi_object *element = &(hkey->package.elements[i]);
+		if (likely(element->type == ACPI_TYPE_INTEGER)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#452: FILE: drivers/acpi/pcc_acpi.c:295:
+		if (likely(element->type == ACPI_TYPE_INTEGER)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#455: FILE: drivers/acpi/pcc_acpi.c:298:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#456: FILE: drivers/acpi/pcc_acpi.c:299:
+			printk(KERN_INFO LOGPREFIX "Invalid HKEY.SINF value\n");

WARNING:INDENTED_LABEL: labels should not be indented
#458: FILE: drivers/acpi/pcc_acpi.c:301:
+      end:

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#473: FILE: drivers/acpi/pcc_acpi.c:316:
+	uint32_t brightness;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#482: FILE: drivers/acpi/pcc_acpi.c:325:
+		printk(KERN_INFO "Could not get SINF\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#488: FILE: drivers/acpi/pcc_acpi.c:331:
+		printk(KERN_INFO "Could not read display brightness\n");

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#490: FILE: drivers/acpi/pcc_acpi.c:333:
+		return p;
+	} else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around resource->package.elements[SINF_LCD_BRIGHTNESS]
#492: FILE: drivers/acpi/pcc_acpi.c:335:
+		    &(resource->package.elements[SINF_LCD_BRIGHTNESS]);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#503: FILE: drivers/acpi/pcc_acpi.c:346:
+	int brightness = simple_strtol(p, NULL, 10) * LCD_BRIGHTNESS_INCREMENT;

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#506: FILE: drivers/acpi/pcc_acpi.c:349:
+	uint32_t status;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#509: FILE: drivers/acpi/pcc_acpi.c:352:
+	if (brightness > LCD_MAX_BRIGHTNESS) {
[...]
+	} else if (brightness < 0) {
[...]

WARNING:BRACES: braces {} are not necessary for single statement blocks
#526: FILE: drivers/acpi/pcc_acpi.c:369:
+	if (ACPI_FAILURE(status)) {
+		printk(KERN_INFO "Could not write display brightness");
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#527: FILE: drivers/acpi/pcc_acpi.c:370:
+		printk(KERN_INFO "Could not write display brightness");

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#540: FILE: drivers/acpi/pcc_acpi.c:383:
+	if (!status) {
[...]
+	} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#541: FILE: drivers/acpi/pcc_acpi.c:384:
+		printk(KERN_INFO LOGPREFIX "error getting hotkey status\n");

CHECK:BRACES: Unbalanced braces around else statement
#542: FILE: drivers/acpi/pcc_acpi.c:385:
+	} else

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#545: FILE: drivers/acpi/pcc_acpi.c:388:
+	return (status);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:RETURN_VOID: void function return statements are not generally useful
#567: FILE: drivers/acpi/pcc_acpi.c:410:
+	return;
+}

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*hotkey)...) over kmalloc(sizeof(struct acpi_hotkey)...)
#578: FILE: drivers/acpi/pcc_acpi.c:421:
+	hotkey = kmalloc(sizeof(struct acpi_hotkey), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#599: FILE: drivers/acpi/pcc_acpi.c:442:
+	return (result);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#615: FILE: drivers/acpi/pcc_acpi.c:458:
+		printk(KERN_INFO LOGPREFIX "Error removing notify handler\n");

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#619: FILE: drivers/acpi/pcc_acpi.c:462:
+	return (0);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#624: FILE: drivers/acpi/pcc_acpi.c:467:
+ * proc and module init
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#642: FILE: drivers/acpi/pcc_acpi.c:485:
+add_device(ProcItem * proc_items, struct proc_dir_entry *proc_entry)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#649: FILE: drivers/acpi/pcc_acpi.c:492:
+					      S_IFREG | S_IRUGO | S_IWUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: No space is necessary after a cast
#651: FILE: drivers/acpi/pcc_acpi.c:494:
+					      (read_proc_t *) dispatch_read,

CHECK:SPACING: No space is necessary after a cast
#656: FILE: drivers/acpi/pcc_acpi.c:499:
+			proc->write_proc = (write_proc_t *) dispatch_write;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#666: FILE: drivers/acpi/pcc_acpi.c:509:
+	if (unlikely(!(acpi_pcc_dir = proc_mkdir(PROC_PCC, acpi_root_dir))))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#680: FILE: drivers/acpi/pcc_acpi.c:523:
+remove_device(ProcItem * proc_items, struct proc_dir_entry *proc_entry)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#686: FILE: drivers/acpi/pcc_acpi.c:529:
+	return (AE_OK);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#703: FILE: drivers/acpi/pcc_acpi.c:546:
+		printk(KERN_INFO LOGPREFIX "Error registering hotkey driver\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#705: FILE: drivers/acpi/pcc_acpi.c:548:
+	printk(KERN_INFO LOGPREFIX "ACPI PCC HotKey driver version %s\n",

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#708: FILE: drivers/acpi/pcc_acpi.c:551:
+	return (pcc_proc_init());

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#710: FILE: drivers/acpi/pcc_acpi.c:553:
+
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#720: FILE: drivers/acpi/pcc_acpi.c:563:
+	return;
+}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000258997.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 48 warnings, 17 checks, 596 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000258997.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
