WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
> I applied all these to the ppc64 kernel (you missed ppc64 btw) and it dies.

WARNING:IF_1: Consider removing the #if 1 and its #endif
#62: FILE: mm/percpu.c:248:
+#if 1

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#75: FILE: mm/percpu.c:261:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#79: FILE: mm/percpu.c:265:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#92: FILE: mm/percpu.c:278:
+	printk("Total blocks = %u\n", count);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#105: FILE: mm/percpu.c:291:
+			printk("Block %p has %u subs at %s\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#109: FILE: mm/percpu.c:295:
+}^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#114: FILE: mm/percpu.c:300:
+	unsigned char *p = ptr;
+	while (len > 0) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#119: FILE: mm/percpu.c:305:
+}^I^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#136: FILE: mm/percpu.c:322:
+	allocs = frees = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#138: FILE: mm/percpu.c:324:
+	printk("This cpu = %p (%u)\n",

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#140: FILE: mm/percpu.c:326:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#141: FILE: mm/percpu.c:327:
+		printk("&ptr[i] == %p (%u)\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#147: FILE: mm/percpu.c:333:
+	BUG_ON(allocs != frees);

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#149: FILE: mm/percpu.c:335:
+	for (i = 4; i < PERCPU_MAX; i+=27) {
 	                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#151: FILE: mm/percpu.c:337:
+		unsigned int j;
+		ptrs[i] = __alloc_percpu(i, 4); allocs++;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#152: FILE: mm/percpu.c:338:
+		for (j = 0; j < NR_CPUS; j++) {

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#158: FILE: mm/percpu.c:344:
+	for (i = 4; i < PERCPU_MAX; i+=27) {
 	                             ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#160: FILE: mm/percpu.c:346:
+		unsigned int j;
+		for (j = 0; j < NR_CPUS; j++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#160: FILE: mm/percpu.c:346:
+		for (j = 0; j < NR_CPUS; j++)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#162: FILE: mm/percpu.c:348:
+				BUG();

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#164: FILE: mm/percpu.c:350:
+	for (i = 4; i < PERCPU_MAX; i+=27) {
 	                             ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#169: FILE: mm/percpu.c:355:
+	BUG_ON(allocs != frees);

WARNING:LINE_SPACING: Missing a blank line after declarations
#174: FILE: mm/percpu.c:360:
+		unsigned int j = random() % PERCPU_MAX;
+		if (!ptrs[j]) {

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#180: FILE: mm/percpu.c:366:
+			ptrs[j] = __alloc_percpu(sizes[j], 1<<(random()%L1_CACHE_SHIFT));
 			                                    ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#180: FILE: mm/percpu.c:366:
+			ptrs[j] = __alloc_percpu(sizes[j], 1<<(random()%L1_CACHE_SHIFT));
 			                                               ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#183: FILE: mm/percpu.c:369:
+			for (cpu = 0; cpu < NR_CPUS; cpu++)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#184: FILE: mm/percpu.c:370:
+				memset(per_cpu_ptr(ptrs[j], cpu), j+cpu,
 				                                   ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#188: FILE: mm/percpu.c:374:
+				printk("c\n");

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#197: FILE: mm/percpu.c:383:
+		if (i % (10000/10) == 0)
 		              ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#198: FILE: mm/percpu.c:384:
+			printk(".\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#208: FILE: mm/percpu.c:394:
+	BUG_ON(allocs != frees);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000368613.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 22 warnings, 5 checks, 159 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000368613.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
