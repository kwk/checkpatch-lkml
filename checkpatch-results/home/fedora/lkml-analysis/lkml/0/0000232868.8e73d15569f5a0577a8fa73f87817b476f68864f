WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#26: 
Signed-Off-By: dhowells@redhat.com

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#41: FILE: arch/frv/kernel/break.S:1:
+/* break.S: Break interrupt handling (kept separate from entry.S)

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#215: FILE: arch/frv/kernel/break.S:175:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#389: FILE: arch/frv/kernel/break.S:349:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#416: FILE: arch/frv/kernel/break.S:376:
+^I$

WARNING:TYPO_SPELLING: 'exeception' may be misspelled - perhaps 'exception'?
#735: FILE: arch/frv/kernel/break.S:695:
+	# transfer kernel exeception to GDB for handling
 	                  ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#758: FILE: arch/frv/kernel/cmode.S:1:
+/* cmode.S: clock mode management

ERROR:TRAILING_WHITESPACE: trailing whitespace
#779: FILE: arch/frv/kernel/cmode.S:22:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#789: FILE: arch/frv/kernel/cmode.S:32:
+#define __addr_LEDS^I0xe1200004^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#799: FILE: arch/frv/kernel/cmode.S:42:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#816: FILE: arch/frv/kernel/cmode.S:59:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#817: FILE: arch/frv/kernel/cmode.S:60:
+frv_change_cmode:^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#827: FILE: arch/frv/kernel/cmode.S:70:
+^I# (1) Set '0' in the PSR.ET bit, and prohibit interrupts. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#833: FILE: arch/frv/kernel/cmode.S:76:
+^I# (2) Set '0' to all bits of the MASK register of the interrupt $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#834: FILE: arch/frv/kernel/cmode.S:77:
+^I#     controller, and mask interrupts. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#840: FILE: arch/frv/kernel/cmode.S:83:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#841: FILE: arch/frv/kernel/cmode.S:84:
+^I# (3) Stop the transfer function of DMAC. Stop all the bus masters $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#845: FILE: arch/frv/kernel/cmode.S:88:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#847: FILE: arch/frv/kernel/cmode.S:90:
+^I#     cache. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#863: FILE: arch/frv/kernel/cmode.S:106:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#867: FILE: arch/frv/kernel/cmode.S:110:
+__cmode_icache_lock_start:^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#869: FILE: arch/frv/kernel/cmode.S:112:
+^I# (5) Flush the content of all caches by the DCEF instruction. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#875: FILE: arch/frv/kernel/cmode.S:118:
+^I# (7) Set '1' to the DRCN.SR bit, and change SDRAM to the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#883: FILE: arch/frv/kernel/cmode.S:126:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#884: FILE: arch/frv/kernel/cmode.S:127:
+^I# (9) Read the DSTS register repeatedly until '1' stands in the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#892: FILE: arch/frv/kernel/cmode.S:135:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#894: FILE: arch/frv/kernel/cmode.S:137:
+^I# (11) Set the value of CMODE that you want to change to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#898: FILE: arch/frv/kernel/cmode.S:141:
+^I# (12) Set '1' to the CLKC.SWEN bit. In that case, do not change $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#902: FILE: arch/frv/kernel/cmode.S:145:
+^I# (13) Execute the instruction just after the memory barrier $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#904: FILE: arch/frv/kernel/cmode.S:147:
+^I# the CMODE switch is done.) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#910: FILE: arch/frv/kernel/cmode.S:153:
+^ILEDS^I0x36^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#927: FILE: arch/frv/kernel/cmode.S:170:
+__cmode_icache_lock_end:^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#938: FILE: arch/frv/kernel/cmode.S:181:
+^I# (15) Release the interrupt mask setting of the MASK register of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#941: FILE: arch/frv/kernel/cmode.S:184:
+#endif^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#946: FILE: arch/frv/kernel/cmode.S:189:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#952: FILE: arch/frv/kernel/debug-stub.c:1:
+/* debug-stub.c: debug-mode stub

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#978: FILE: arch/frv/kernel/debug-stub.c:27:
+#define __UART0(X) (*(volatile uint8_t *)(UART0_BASE + (UART_##X)))

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#985: FILE: arch/frv/kernel/debug-stub.c:34:
+#define FLOWCTL_CLEAR0(LINE)	do { __UART0(MCR) &= ~UART_MCR_##LINE; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#986: FILE: arch/frv/kernel/debug-stub.c:35:
+#define FLOWCTL_SET0(LINE)	do { __UART0(MCR) |= UART_MCR_##LINE; } while (0)

ERROR:SPACING: space required before the open parenthesis '('
#991: FILE: arch/frv/kernel/debug-stub.c:40:
+} while(!FLOWCTL_QUERY(LINE))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#995: FILE: arch/frv/kernel/debug-stub.c:44:
+extern asmlinkage void __break_hijack_kernel_event(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#996: FILE: arch/frv/kernel/debug-stub.c:45:
+extern asmlinkage void __break_hijack_kernel_event_breaks_here(void);

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1009: FILE: arch/frv/kernel/debug-stub.c:58:
+	static u8 inited = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:LINE_SPACING: Missing a blank line after declarations
#1010: FILE: arch/frv/kernel/debug-stub.c:59:
+	static u8 inited = 0;
+	if (!inited) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1024: FILE: arch/frv/kernel/debug-stub.c:73:
+	 * location */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: No space is necessary after a cast
#1025: FILE: arch/frv/kernel/debug-stub.c:74:
+	if (__debug_frame->pc == (unsigned long) __break_hijack_kernel_event_breaks_here) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1027: FILE: arch/frv/kernel/debug-stub.c:76:
+		 * the top kernel context */

CHECK:SPACING: No space is necessary after a cast
#1034: FILE: arch/frv/kernel/debug-stub.c:83:
+	if (__debug_frame->pc == (unsigned long) __debug_bug_trap + 4) {

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1057: FILE: arch/frv/kernel/debug-stub.c:106:
+	asm volatile("	movgs	gr0,ibar0	\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1058: FILE: arch/frv/kernel/debug-stub.c:107:
+		     "	movgs	gr0,ibar1	\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1059: FILE: arch/frv/kernel/debug-stub.c:108:
+		     "	movgs	gr0,ibar2	\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1060: FILE: arch/frv/kernel/debug-stub.c:109:
+		     "	movgs	gr0,ibar3	\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1061: FILE: arch/frv/kernel/debug-stub.c:110:
+		     "	movgs	gr0,dbar0	\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1062: FILE: arch/frv/kernel/debug-stub.c:111:
+		     "	movgs	gr0,dbmr00	\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1063: FILE: arch/frv/kernel/debug-stub.c:112:
+		     "	movgs	gr0,dbmr01	\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1064: FILE: arch/frv/kernel/debug-stub.c:113:
+		     "	movgs	gr0,dbdr00	\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1065: FILE: arch/frv/kernel/debug-stub.c:114:
+		     "	movgs	gr0,dbdr01	\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1066: FILE: arch/frv/kernel/debug-stub.c:115:
+		     "	movgs	gr0,dbar1	\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1067: FILE: arch/frv/kernel/debug-stub.c:116:
+		     "	movgs	gr0,dbmr10	\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1068: FILE: arch/frv/kernel/debug-stub.c:117:
+		     "	movgs	gr0,dbmr11	\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1069: FILE: arch/frv/kernel/debug-stub.c:118:
+		     "	movgs	gr0,dbdr10	\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1070: FILE: arch/frv/kernel/debug-stub.c:119:
+		     "	movgs	gr0,dbdr11	\n"

CHECK:SPACING: No space is necessary after a cast
#1074: FILE: arch/frv/kernel/debug-stub.c:123:
+	if (__debug_frame->pc == (unsigned long) __debug_stub_init_break)

CHECK:SPACING: No space is necessary after a cast
#1075: FILE: arch/frv/kernel/debug-stub.c:124:
+		__debug_frame->pc = (unsigned long) start_kernel;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1096: FILE: arch/frv/kernel/debug-stub.c:145:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'THRE' may be misspelled - perhaps 'THREE'?
#1114: FILE: arch/frv/kernel/debug-stub.c:163:
+		LSR_WAIT_FOR0(THRE);
 		              ^^^^

WARNING:MEMORY_BARRIER: memory barrier without comment
#1119: FILE: arch/frv/kernel/debug-stub.c:168:
+			mb();

WARNING:TYPO_SPELLING: 'THRE' may be misspelled - perhaps 'THREE'?
#1120: FILE: arch/frv/kernel/debug-stub.c:169:
+			LSR_WAIT_FOR0(THRE);
 			              ^^^^

WARNING:MEMORY_BARRIER: memory barrier without comment
#1124: FILE: arch/frv/kernel/debug-stub.c:173:
+		mb();

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1153: FILE: arch/frv/kernel/debug-stub.c:202:
+void __init console_set_baud(unsigned baud)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1155: FILE: arch/frv/kernel/debug-stub.c:204:
+	unsigned value, high, low;

WARNING:MEMORY_BARRIER: memory barrier without comment
#1171: FILE: arch/frv/kernel/debug-stub.c:220:
+	mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#1174: FILE: arch/frv/kernel/debug-stub.c:223:
+	mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#1176: FILE: arch/frv/kernel/debug-stub.c:225:
+	mb();

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1186: FILE: arch/frv/kernel/debug-stub.c:235:
+	unsigned value;

WARNING:MEMORY_BARRIER: memory barrier without comment
#1191: FILE: arch/frv/kernel/debug-stub.c:240:
+	mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#1195: FILE: arch/frv/kernel/debug-stub.c:244:
+	mb();

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1205: FILE: arch/frv/kernel/debug-stub.c:254:
+void __debug_bug_printk(const char *file, unsigned line)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1207: FILE: arch/frv/kernel/debug-stub.c:256:
+	printk("kernel BUG at %s:%d!\n", file, line);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1215: FILE: arch/frv/kernel/dma.c:1:
+/* dma.c: DMA controller management on FR401 and the like

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1237: FILE: arch/frv/kernel/dma.c:23:
+	uint8_t			flags;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1241: FILE: arch/frv/kernel/dma.c:27:
+	uint8_t			cap;		/* capabilities available */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1243: FILE: arch/frv/kernel/dma.c:29:
+	uint32_t		dreqbit;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1244: FILE: arch/frv/kernel/dma.c:30:
+	uint32_t		dackbit;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1245: FILE: arch/frv/kernel/dma.c:31:
+	uint32_t		donebit;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1252: FILE: arch/frv/kernel/dma.c:38:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1253: FILE: arch/frv/kernel/dma.c:39:
+#define __get_DMAC(IO,X)	({ *(volatile unsigned long *)((IO) + DMAC_##X##x); })
                      ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1253: FILE: arch/frv/kernel/dma.c:39:
+#define __get_DMAC(IO,X)	({ *(volatile unsigned long *)((IO) + DMAC_##X##x); })

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1255: FILE: arch/frv/kernel/dma.c:41:
+#define __set_DMAC(IO,X,V)					\
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1255: FILE: arch/frv/kernel/dma.c:41:
+#define __set_DMAC(IO,X,V)					\
                        ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1257: FILE: arch/frv/kernel/dma.c:43:
+	*(volatile unsigned long *)((IO) + DMAC_##X##x) = (V);	\

WARNING:MEMORY_BARRIER: memory barrier without comment
#1258: FILE: arch/frv/kernel/dma.c:44:
+	mb();							\

ERROR:SPACING: space required before the open parenthesis '('
#1259: FILE: arch/frv/kernel/dma.c:45:
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1261: FILE: arch/frv/kernel/dma.c:47:
+#define ___set_DMAC(IO,X,V)					\
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1261: FILE: arch/frv/kernel/dma.c:47:
+#define ___set_DMAC(IO,X,V)					\
                         ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1261: FILE: arch/frv/kernel/dma.c:47:
+#define ___set_DMAC(IO,X,V)					\
+do {								\
+	*(volatile unsigned long *)((IO) + DMAC_##X##x) = (V);	\
+} while(0)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1263: FILE: arch/frv/kernel/dma.c:49:
+	*(volatile unsigned long *)((IO) + DMAC_##X##x) = (V);	\

ERROR:SPACING: space required before the open parenthesis '('
#1264: FILE: arch/frv/kernel/dma.c:50:
+} while(0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1266: FILE: arch/frv/kernel/dma.c:52:
+
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1328: FILE: arch/frv/kernel/dma.c:114:
+#define frv_clear_dma_inprogress(channel) \
+	atomic_clear_mask(1 << (channel), &frv_dma_inprogress);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1331: FILE: arch/frv/kernel/dma.c:117:
+#define frv_set_dma_inprogress(channel) \
+	atomic_set_mask(1 << (channel), &frv_dma_inprogress);

ERROR:SPACING: space required before the open parenthesis '('
#1375: FILE: arch/frv/kernel/dma.c:161:
+	for(i = num_dma; i < FRV_DMA_NCHANS; i++)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1393: FILE: arch/frv/kernel/dma.c:179:
+	uint32_t val;

ERROR:SPACING: space required before the open parenthesis '('
#1432: FILE: arch/frv/kernel/dma.c:218:
+	if(dmacap & FRV_DMA_CAP_DACK)

ERROR:SPACING: space required before the open parenthesis '('
#1436: FILE: arch/frv/kernel/dma.c:222:
+	if(dmacap & FRV_DMA_CAP_DONE)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1448: FILE: arch/frv/kernel/dma.c:234:
+EXPORT_SYMBOL(frv_dma_open);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1469: FILE: arch/frv/kernel/dma.c:255:
+EXPORT_SYMBOL(frv_dma_close);

WARNING:MEMORY_BARRIER: memory barrier without comment
#1482: FILE: arch/frv/kernel/dma.c:268:
+	mb();

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1486: FILE: arch/frv/kernel/dma.c:272:
+EXPORT_SYMBOL(frv_dma_config);

WARNING:MEMORY_BARRIER: memory barrier without comment
#1504: FILE: arch/frv/kernel/dma.c:290:
+	mb();

CHECK:CAMELCASE: Avoid CamelCase: <DMAC_CCTRx_ACT>
#1506: FILE: arch/frv/kernel/dma.c:292:
+	__set_DMAC(ioaddr, CCTR, __get_DMAC(ioaddr, CCTR) | DMAC_CCTRx_ACT);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1511: FILE: arch/frv/kernel/dma.c:297:
+EXPORT_SYMBOL(frv_dma_start);

CHECK:CAMELCASE: Avoid CamelCase: <DMAC_CSTRx_CE>
#1522: FILE: arch/frv/kernel/dma.c:308:
+	___set_DMAC(ioaddr, CSTR, __get_DMAC(ioaddr, CSTR) & ~DMAC_CSTRx_CE);

WARNING:MEMORY_BARRIER: memory barrier without comment
#1523: FILE: arch/frv/kernel/dma.c:309:
+	mb();

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1530: FILE: arch/frv/kernel/dma.c:316:
+EXPORT_SYMBOL(frv_dma_restart_circular);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1539: FILE: arch/frv/kernel/dma.c:325:
+	uint32_t cctr;

CHECK:CAMELCASE: Avoid CamelCase: <DMAC_CCTRx_IE>
#1543: FILE: arch/frv/kernel/dma.c:329:
+	cctr &= ~(DMAC_CCTRx_IE | DMAC_CCTRx_ACT);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1544: FILE: arch/frv/kernel/dma.c:330:
+^Icctr |= DMAC_CCTRx_FC; ^I/* fifo clear */$

CHECK:CAMELCASE: Avoid CamelCase: <DMAC_CCTRx_FC>
#1544: FILE: arch/frv/kernel/dma.c:330:
+	cctr |= DMAC_CCTRx_FC; 	/* fifo clear */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1550: FILE: arch/frv/kernel/dma.c:336:
+EXPORT_SYMBOL(frv_dma_stop);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1564: FILE: arch/frv/kernel/dma.c:350:
+EXPORT_SYMBOL(is_frv_dma_interrupting);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1580: FILE: arch/frv/kernel/dma.c:366:
+	printk("DMA[%d] cstr=%lx pix=%lx six=%lx bcl=%lx\n", dma, cstr, pix, six, bcl);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1584: FILE: arch/frv/kernel/dma.c:370:
+EXPORT_SYMBOL(frv_dma_dump);

CHECK:CAMELCASE: Avoid CamelCase: <DMAC_CSTRx_BUSY>
#1615: FILE: arch/frv/kernel/dma.c:401:
+			} while (cstr & DMAC_CSTRx_BUSY);

CHECK:CAMELCASE: Avoid CamelCase: <DMAC_CSTRx_FED>
#1617: FILE: arch/frv/kernel/dma.c:403:
+			if (cstr & DMAC_CSTRx_FED)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1625: FILE: arch/frv/kernel/dma.c:411:
+EXPORT_SYMBOL(frv_dma_pause_all);

CHECK:CAMELCASE: Avoid CamelCase: <DMAC_CSTRx_INT>
#1648: FILE: arch/frv/kernel/dma.c:434:
+		cstr &= ~(DMAC_CSTRx_FED | DMAC_CSTRx_INT);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1663: FILE: arch/frv/kernel/dma.c:449:
+EXPORT_SYMBOL(frv_dma_resume_all);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1672: FILE: arch/frv/kernel/dma.c:458:
+	uint32_t cctr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1673: FILE: arch/frv/kernel/dma.c:459:
+	uint32_t cctr;
+	___set_DMAC(ioaddr, CSTR, 0);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1678: FILE: arch/frv/kernel/dma.c:464:
+EXPORT_SYMBOL(frv_dma_status_clear);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1683: FILE: arch/frv/kernel/entry.S:1:
+/* entry.S: FR-V entry

WARNING:TYPO_SPELLING: 'Progam' may be misspelled - perhaps 'Program'?
#1979: FILE: arch/frv/kernel/entry.S:297:
+# entry point for Software and Progam interrupts generated whilst executing userspace code
                                ^^^^^^

WARNING:TYPO_SPELLING: 'Progam' may be misspelled - perhaps 'Program'?
#2041: FILE: arch/frv/kernel/entry.S:359:
+# entry point for Software and Progam interrupts generated whilst executing kernel code
                                ^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'old'
#2875: FILE: arch/frv/kernel/entry.S:1193:
+	.long sys_ni_syscall			/* old old uname syscall */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3107: FILE: arch/frv/kernel/entry-table.S:1:
+/* entry-table.S: main trap vector tables and exception jump table

WARNING:TYPO_SPELLING: 'sofware' may be misspelled - perhaps 'software'?
#3178: FILE: arch/frv/kernel/entry-table.S:72:
+	# handler declaration for a sofware or program interrupt
 	                            ^^^^^^^

WARNING:TYPO_SPELLING: 'sofware' may be misspelled - perhaps 'software'?
#3235: FILE: arch/frv/kernel/entry-table.S:129:
+	# handler declaration for an MMU only sofware or program interrupt
 	                                      ^^^^^^^

WARNING:TYPO_SPELLING: 'PTD' may be misspelled - perhaps 'PDF'?
#3270: FILE: arch/frv/kernel/entry-table.S:164:
+	movsg		scr0,gr31			/* get mapped PTD coverage start address */
 	     		         			              ^^^

WARNING:TYPO_SPELLING: 'PTD' may be misspelled - perhaps 'PDF'?
#3278: FILE: arch/frv/kernel/entry-table.S:172:
+	movsg		scr1,gr31			/* get mapped PTD coverage start address */
 	     		         			              ^^^

WARNING:TYPO_SPELLING: 'PTD' may be misspelled - perhaps 'PDF'?
#3287: FILE: arch/frv/kernel/entry-table.S:181:
+	movsg		scr0,gr31			/* get mapped PTD coverage start address */
 	     		         			              ^^^

WARNING:TYPO_SPELLING: 'PTD' may be misspelled - perhaps 'PDF'?
#3295: FILE: arch/frv/kernel/entry-table.S:189:
+	movsg		scr1,gr31			/* get mapped PTD coverage start address */
 	     		         			              ^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3318: FILE: arch/frv/kernel/entry-table.S:212:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000232868.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 44 errors, 77 warnings, 22 checks, 3323 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000232868.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
