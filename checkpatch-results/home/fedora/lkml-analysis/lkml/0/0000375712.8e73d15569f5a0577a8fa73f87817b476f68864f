WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#86: 
diff -urN linux-2.4.20-no-pcsp/arch/i386/kernel/i386_ksyms.c linux/arch/i386/kernel/i386_ksyms.c

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#137: FILE: arch/i386/kernel/time.c:87:
+volatile int pit_counter0_offset = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#137: FILE: arch/i386/kernel/time.c:87:
+volatile int pit_counter0_offset = 0;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#138: FILE: arch/i386/kernel/time.c:88:
+volatile int handle_timer_irq = 1;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#139: FILE: arch/i386/kernel/time.c:89:
+EXPORT_SYMBOL(pit_counter0_offset);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#140: FILE: arch/i386/kernel/time.c:90:
+EXPORT_SYMBOL(handle_timer_irq);

ERROR:CODE_INDENT: code indent should use tabs where possible
#161: FILE: arch/i386/kernel/time.c:141:
+        /* VIA686a test code... reset the latch if count > max + 1 */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#162: FILE: arch/i386/kernel/time.c:142:
+        if (count > LATCH) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: arch/i386/kernel/time.c:142:
+        if (count > LATCH) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#163: FILE: arch/i386/kernel/time.c:143:
+                outb_p(0x34, 0x43);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: arch/i386/kernel/time.c:143:
+                outb_p(0x34, 0x43);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#164: FILE: arch/i386/kernel/time.c:144:
+                outb_p(LATCH & 0xff, 0x40);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: arch/i386/kernel/time.c:144:
+                outb_p(LATCH & 0xff, 0x40);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: arch/i386/kernel/time.c:145:
+                outb(LATCH >> 8, 0x40);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: arch/i386/kernel/time.c:145:
+                outb(LATCH >> 8, 0x40);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#166: FILE: arch/i386/kernel/time.c:146:
+                count = LATCH - 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: arch/i386/kernel/time.c:146:
+                count = LATCH - 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#167: FILE: arch/i386/kernel/time.c:147:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: arch/i386/kernel/time.c:147:
+        }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#168: FILE: arch/i386/kernel/time.c:148:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#172: FILE: arch/i386/kernel/time.c:152:
+        * when using PCSP, we must add the accumulated$

ERROR:CODE_INDENT: code indent should use tabs where possible
#173: FILE: arch/i386/kernel/time.c:153:
+        * clockticks from the PCSP driver$

ERROR:CODE_INDENT: code indent should use tabs where possible
#174: FILE: arch/i386/kernel/time.c:154:
+        */$

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#234: FILE: arch/i386/kernel/time.c:581:
+static struct irqaction irq0  = { timer_interrupt, SA_INTERRUPT | SA_SHIRQ, 0, "timer", &dev_id, NULL};

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#246: FILE: drivers/char/joystick/analog.c:140:
+#define GET_TIME(x)	do { if (cpu_has_tsc) rdtscl(x); else { x = read_pit_counter0(); } } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#246: FILE: drivers/char/joystick/analog.c:140:
+#define GET_TIME(x)	do { if (cpu_has_tsc) rdtscl(x); else { x = read_pit_counter0(); } } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#266: FILE: drivers/char/joystick/gameport.c:68:
+#define GET_TIME(x)     do { x = read_pit_counter0(); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#277: FILE: drivers/char/vt.c:41:
+int volatile use_speaker_beep = 1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: drivers/char/vt.c:102:
+       if (!use_speaker_beep)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#285: FILE: drivers/char/vt.c:102:
+       if (!use_speaker_beep)
+               return;

ERROR:CODE_INDENT: code indent should use tabs where possible
#286: FILE: drivers/char/vt.c:103:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: drivers/char/vt.c:103:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: drivers/char/vt.c:117:
+       if (!use_speaker_beep)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#295: FILE: drivers/char/vt.c:117:
+       if (!use_speaker_beep)
+               return;

ERROR:CODE_INDENT: code indent should use tabs where possible
#296: FILE: drivers/char/vt.c:118:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: drivers/char/vt.c:118:
+               return;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#319: FILE: include/asm-i386/timex.h:53:
+extern int read_pit_counter0(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#323: FILE: include/asm-i386/timex.h:57:
+extern volatile int pit_counter0_offset;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#324: FILE: include/asm-i386/timex.h:58:
+extern volatile int handle_timer_irq;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#336: FILE: include/linux/kd.h:25:
+extern volatile int use_speaker_beep;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000375712.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 24 warnings, 2 checks, 210 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000375712.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
