WARNING:TYPO_SPELLING: 'neccessary' may be misspelled - perhaps 'necessary'?
#36: 
>>2.5/testing directory, which contain some neccessary fixes regarding
                                            ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'appearantly' may be misspelled - perhaps 'apparently'?
#53: 
appearantly relies on newer modutils (I'm a bit out of touch with 
^^^^^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#62: 
> It looks like i386 replaced the loop through module_list by a walk through

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

ERROR:TRAILING_WHITESPACE: trailing whitespace
#100: FILE: alpha/vmlinux.lds.S:60:
+^I*(__param); $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#115: FILE: asm-alpha/module.h:5:
+struct mod_arch_specific
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#118: FILE: asm-alpha/module.h:8:
+#define Elf_Shdr Elf64_Shdr

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Shdr>
#118: FILE: asm-alpha/module.h:8:
+#define Elf_Shdr Elf64_Shdr

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Sym>
#119: FILE: asm-alpha/module.h:9:
+#define Elf_Sym Elf64_Sym

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Sym>
#119: FILE: asm-alpha/module.h:9:
+#define Elf_Sym Elf64_Sym

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Ehdr>
#120: FILE: asm-alpha/module.h:10:
+#define Elf_Ehdr Elf64_Ehdr

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Ehdr>
#120: FILE: asm-alpha/module.h:10:
+#define Elf_Ehdr Elf64_Ehdr

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#125: FILE: alpha/kernel/module.c:1:
+/* Kernel module help for Alpha.

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#126: FILE: alpha/kernel/module.c:2:
+/* Kernel module help for Alpha.
+   Copyright (C) 2002  Richard Henderson.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#139: FILE: alpha/kernel/module.c:15:
+   with this program; if not, write to the Free Software Foundation, Inc.,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#140: FILE: alpha/kernel/module.c:16:
+   59 Temple Place, Suite 330, Boston, MA  02111-1307  USA  */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#140: FILE: alpha/kernel/module.c:16:
+   59 Temple Place, Suite 330, Boston, MA  02111-1307  USA  */

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#149: FILE: alpha/kernel/module.c:25:
+#if 0

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#152: FILE: alpha/kernel/module.c:28:
+#define DEBUGP(fmt , ...)
                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: alpha/kernel/module.c:33:
+       if (size == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#157: FILE: alpha/kernel/module.c:33:
+       if (size == 0)
+               return NULL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: alpha/kernel/module.c:34:
+               return NULL;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: alpha/kernel/module.c:34:
+               return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: alpha/kernel/module.c:35:
+       return vmalloc(size);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: alpha/kernel/module.c:41:
+        vfree(module_region);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: alpha/kernel/module.c:41:
+        vfree(module_region);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#167: FILE: alpha/kernel/module.c:43:
+           table entries. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#167: FILE: alpha/kernel/module.c:43:
+	/* FIXME: If module_region == mod->init_region, trim exception
+           table entries. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#167: FILE: alpha/kernel/module.c:43:
+           table entries. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: alpha/kernel/module.c:69:
+       return -ENOEXEC;$

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Rela>
#202: FILE: alpha/kernel/module.c:78:
+	Elf64_Rela *rela = (void *)sechdrs[relsec].sh_offset;

ERROR:CODE_INDENT: code indent should use tabs where possible
#208: FILE: alpha/kernel/module.c:84:
+                unsigned long r_type = ELF64_R_TYPE(rela[i].r_info);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: alpha/kernel/module.c:84:
+                unsigned long r_type = ELF64_R_TYPE(rela[i].r_info);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#209: FILE: alpha/kernel/module.c:85:
+                unsigned long value = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: alpha/kernel/module.c:85:
+                unsigned long value = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#215: FILE: alpha/kernel/module.c:91:
+                if (r_type == R_ALPHA_RELATIVE) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: alpha/kernel/module.c:91:
+                if (r_type == R_ALPHA_RELATIVE) {$

WARNING:TYPO_SPELLING: 'borken' may be misspelled - perhaps 'broken'?
#216: FILE: alpha/kernel/module.c:92:
+                        /* Binutils before 2.12 or so are borken.  We should
                                                           ^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#216: FILE: alpha/kernel/module.c:92:
+                        /* Binutils before 2.12 or so are borken.  We should$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: alpha/kernel/module.c:93:
+                           have the RELATIVE offset as the addend of the $

ERROR:CODE_INDENT: code indent should use tabs where possible
#217: FILE: alpha/kernel/module.c:93:
+                           have the RELATIVE offset as the addend of the $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#217: FILE: alpha/kernel/module.c:93:
+                        /* Binutils before 2.12 or so are borken.  We should
+                           have the RELATIVE offset as the addend of the 

ERROR:CODE_INDENT: code indent should use tabs where possible
#218: FILE: alpha/kernel/module.c:94:
+                           relocation.  If it's not present, fall back to the$

ERROR:CODE_INDENT: code indent should use tabs where possible
#219: FILE: alpha/kernel/module.c:95:
+                           value at the relocation address.  */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#219: FILE: alpha/kernel/module.c:95:
+                           value at the relocation address.  */

ERROR:CODE_INDENT: code indent should use tabs where possible
#220: FILE: alpha/kernel/module.c:96:
+                        u64 addend = rela[i].r_addend;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: alpha/kernel/module.c:96:
+                        u64 addend = rela[i].r_addend;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: alpha/kernel/module.c:97:
+                        if (addend == 0)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#221: FILE: alpha/kernel/module.c:97:
+                        u64 addend = rela[i].r_addend;
+                        if (addend == 0)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: alpha/kernel/module.c:97:
+                        if (addend == 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#222: FILE: alpha/kernel/module.c:98:
+                                addend = *(u64 *)location;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: alpha/kernel/module.c:98:
+                                addend = *(u64 *)location;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: alpha/kernel/module.c:100:
+                        *(u64 *)location = (u64)me->module_core + addend;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: alpha/kernel/module.c:100:
+                        *(u64 *)location = (u64)me->module_core + addend;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#225: FILE: alpha/kernel/module.c:101:
+                        continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: alpha/kernel/module.c:101:
+                        continue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#226: FILE: alpha/kernel/module.c:102:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: alpha/kernel/module.c:102:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#228: FILE: alpha/kernel/module.c:104:
+                /* This is the symbol it is referring to.  */$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#232: FILE: alpha/kernel/module.c:108:
+			printk(KERN_WARNING "%s: Unknown symbol %s\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#236: FILE: alpha/kernel/module.c:112:
+                value += rela[i].r_addend;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: alpha/kernel/module.c:112:
+                value += rela[i].r_addend;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#238: FILE: alpha/kernel/module.c:114:
+                switch (r_type) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: alpha/kernel/module.c:114:
+                switch (r_type) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#239: FILE: alpha/kernel/module.c:115:
+                case R_ALPHA_GLOB_DAT:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: alpha/kernel/module.c:115:
+                case R_ALPHA_GLOB_DAT:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#240: FILE: alpha/kernel/module.c:116:
+                case R_ALPHA_JMP_SLOT:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: alpha/kernel/module.c:116:
+                case R_ALPHA_JMP_SLOT:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#241: FILE: alpha/kernel/module.c:117:
+                case R_ALPHA_REFQUAD:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: alpha/kernel/module.c:117:
+                case R_ALPHA_REFQUAD:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#242: FILE: alpha/kernel/module.c:118:
+                        *(u64 *)location = value;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: alpha/kernel/module.c:118:
+                        *(u64 *)location = value;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#243: FILE: alpha/kernel/module.c:119:
+                        break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#243: FILE: alpha/kernel/module.c:119:
+                        break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#244: FILE: alpha/kernel/module.c:120:
+                default:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#245: FILE: alpha/kernel/module.c:121:
+                        printk(KERN_ERR "module %s: Unknown relocation: %lu\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#245: FILE: alpha/kernel/module.c:121:
+                        printk(KERN_ERR "module %s: Unknown relocation: %lu\n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#245: FILE: alpha/kernel/module.c:121:
+                        printk(KERN_ERR "module %s: Unknown relocation: %lu\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#246: FILE: alpha/kernel/module.c:122:
+                               me->name, r_type);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: alpha/kernel/module.c:122:
+                               me->name, r_type);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#247: FILE: alpha/kernel/module.c:123:
+                        return -ENOEXEC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: alpha/kernel/module.c:123:
+                        return -ENOEXEC;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#248: FILE: alpha/kernel/module.c:124:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: alpha/kernel/module.c:124:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#249: FILE: alpha/kernel/module.c:125:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: alpha/kernel/module.c:125:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#251: FILE: alpha/kernel/module.c:127:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: alpha/kernel/module.c:127:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: alpha/kernel/module.c:134:
+       return 0;$

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#267: FILE: alpha/mm/extable.c:36:
+	unsigned ret = 0;

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#285: FILE: alpha/mm/extable.c:49:
+		struct exception_table *ex
+			= list_entry(i, struct exception_table, list);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000405578.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 37 errors, 50 warnings, 8 checks, 198 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000405578.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
