WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#84: 
# 

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#85: 
# Linux driver for /dev/crypto (aka CryptoDev)

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#86: 
# See http://www.logix.cz/michal/devel/cryptodev for details.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#87: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#88: 
# Signed-off-by: Michal Ludvig <mludvig@suse.cz>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#89: 
# 

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#98: FILE: crypto/Kconfig:12:
+config CRYPTO_CRYPTODEV
+	tristate "Cryptodev (/dev/crypto) interface"
+	depends on CRYPTO
+	help
+	  Device /dev/crypto gives userspace programs access to 
+	  kernel crypto algorithms.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#102: FILE: crypto/Kconfig:16:
+^I  Device /dev/crypto gives userspace programs access to $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#125: FILE: crypto/cryptodev.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#130: FILE: crypto/cryptodev.c:6:
+ * Device /dev/crypto provides an interface for $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#152: FILE: crypto/cryptodev.c:28:
+#include <asm/uaccess.h>

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#166: FILE: crypto/cryptodev.c:42:
+static int verbosity = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#171: FILE: crypto/cryptodev.c:47:
+static int enable_stats = 0;

WARNING:TYPO_SPELLING: 'statictics' may be misspelled - perhaps 'statistics'?
#173: FILE: crypto/cryptodev.c:49:
+MODULE_PARM_DESC(enable_stats, "collect statictics about cryptodev usage");
                                         ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#179: FILE: crypto/cryptodev.c:55:
+#define dprintk(level,severity,format,a...)			\
                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#179: FILE: crypto/cryptodev.c:55:
+#define dprintk(level,severity,format,a...)			\
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#179: FILE: crypto/cryptodev.c:55:
+#define dprintk(level,severity,format,a...)			\
                                      ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'level' may be better as '(level)' to avoid precedence issues
#179: FILE: crypto/cryptodev.c:55:
+#define dprintk(level,severity,format,a...)			\
+	do { 							\
+		if (level <= verbosity)				\
+			printk(severity PFX "%s[%u]: " format,	\
+			       current->comm, current->pid,	\
+			       ##a);				\
+	} while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#180: FILE: crypto/cryptodev.c:56:
+^Ido { ^I^I^I^I^I^I^I\$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#182: FILE: crypto/cryptodev.c:58:
+			printk(severity PFX "%s[%u]: " format,	\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#189: FILE: crypto/cryptodev.c:65:
+#define FILL_SG(sg,ptr,len)					\
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#189: FILE: crypto/cryptodev.c:65:
+#define FILL_SG(sg,ptr,len)					\
                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sg' - possible side-effects?
#189: FILE: crypto/cryptodev.c:65:
+#define FILL_SG(sg,ptr,len)					\
+	do {							\
+		(sg)->page = virt_to_page(ptr);			\
+		(sg)->offset = offset_in_page(ptr);		\
+		(sg)->length = len;				\
+		(sg)->dma_address = 0;				\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#189: FILE: crypto/cryptodev.c:65:
+#define FILL_SG(sg,ptr,len)					\
+	do {							\
+		(sg)->page = virt_to_page(ptr);			\
+		(sg)->offset = offset_in_page(ptr);		\
+		(sg)->length = len;				\
+		(sg)->dma_address = 0;				\
+	} while (0)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#202: FILE: crypto/cryptodev.c:78:
+#if 0

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#211: FILE: crypto/cryptodev.c:87:
+	uint32_t sid;

ERROR:SPACING: space prohibited after that '!' (ctx:WxW)
#213: FILE: crypto/cryptodev.c:89:
+#if ! ((COP_ENCRYPT < 2) && (COP_DECRYPT < 2))
     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#233: FILE: crypto/cryptodev.c:109:
+	char alg_name[MAX_ALG_NAME_LEN+1];
 	                              ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#245: FILE: crypto/cryptodev.c:121:
+		/* Hmm, compatibility with OpenBSD CRYPTO_* constants...
+		   Should we support it? */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#245: FILE: crypto/cryptodev.c:121:
+		   Should we support it? */

ERROR:SPACING: space required before the open parenthesis '('
#250: FILE: crypto/cryptodev.c:126:
+	if(sop->alg_namelen > MAX_ALG_NAME_LEN) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#252: FILE: crypto/cryptodev.c:128:
+		dprintk(1, KERN_DEBUG, "Algorithm name too long (%zu > %u)\n",
+		       sop->alg_namelen, MAX_ALG_NAME_LEN);

ERROR:SPACING: space required before the open parenthesis '('
#259: FILE: crypto/cryptodev.c:135:
+	if(!sop->cipher) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#263: FILE: crypto/cryptodev.c:139:
+^I$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#264: FILE: crypto/cryptodev.c:140:
+	switch (sop->cipher & CRYPTO_FLAG_MASK) {
+		case CRYPTO_FLAG_ECB:	mode = CRYPTO_TFM_MODE_ECB; break;
+		case CRYPTO_FLAG_CBC:	mode = CRYPTO_TFM_MODE_CBC; break;
+		case CRYPTO_FLAG_CFB:	mode = CRYPTO_TFM_MODE_CFB; break;
+		case CRYPTO_FLAG_CTR:	mode = CRYPTO_TFM_MODE_CTR; break;
[...]
+		case CRYPTO_FLAG_OFB:	mode = CRYPTO_TFM_MODE_OFB; break;
[...]
+		default:		return -EINVAL;

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#265: FILE: crypto/cryptodev.c:141:
+		case CRYPTO_FLAG_ECB:	mode = CRYPTO_TFM_MODE_ECB; break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#266: FILE: crypto/cryptodev.c:142:
+		case CRYPTO_FLAG_CBC:	mode = CRYPTO_TFM_MODE_CBC; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#267: FILE: crypto/cryptodev.c:143:
+		case CRYPTO_FLAG_CFB:	mode = CRYPTO_TFM_MODE_CFB; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#268: FILE: crypto/cryptodev.c:144:
+		case CRYPTO_FLAG_CTR:	mode = CRYPTO_TFM_MODE_CTR; break;

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#269: FILE: crypto/cryptodev.c:145:
+#if 0

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#271: FILE: crypto/cryptodev.c:147:
+		case CRYPTO_FLAG_OFB:	mode = CRYPTO_TFM_MODE_OFB; break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#280: FILE: crypto/cryptodev.c:156:
+		dprintk(1, KERN_DEBUG, "Failed to load transform for %s %s\n",
+		       alg_name, crypto_cipher_modes[mode]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sop->keylen < crypto_tfm_alg_min_keysize(tfm)'
#285: FILE: crypto/cryptodev.c:161:
+	if ((sop->keylen < crypto_tfm_alg_min_keysize(tfm)) ||
+	    (sop->keylen > crypto_tfm_alg_max_keysize(tfm))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sop->keylen > crypto_tfm_alg_max_keysize(tfm)'
#285: FILE: crypto/cryptodev.c:161:
+	if ((sop->keylen < crypto_tfm_alg_min_keysize(tfm)) ||
+	    (sop->keylen > crypto_tfm_alg_max_keysize(tfm))) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#289: FILE: crypto/cryptodev.c:165:
+^I^I       sop->keylen, alg_name, crypto_tfm_alg_min_keysize(tfm), $

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#303: FILE: crypto/cryptodev.c:179:
+			alg_name, sop->keylen*8, crypto_cipher_modes[mode],
 			                     ^

ERROR:SPACING: space required before the open parenthesis '('
#313: FILE: crypto/cryptodev.c:189:
+	if(!ses_new)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#327: FILE: crypto/cryptodev.c:203:
+^I^I^I/* Unless we have a broken RNG this $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#328: FILE: crypto/cryptodev.c:204:
+			/* Unless we have a broken RNG this 
+			   shouldn't loop forever... ;-) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#328: FILE: crypto/cryptodev.c:204:
+			   shouldn't loop forever... ;-) */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#337: FILE: crypto/cryptodev.c:213:
+		ses_new->sid, alg_name, sop->keylen*8, crypto_cipher_modes[mode]);
 		                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#338: FILE: crypto/cryptodev.c:214:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#350: FILE: crypto/cryptodev.c:226:
+	if(down_trylock(&ses_ptr->sem)) {

ERROR:SPACING: space required before the open parenthesis '('
#357: FILE: crypto/cryptodev.c:233:
+	if(enable_stats)

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#362: FILE: crypto/cryptodev.c:238:
+				? ((unsigned long)(ses_ptr->stat[COP_ENCRYPT]+
 				                                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#363: FILE: crypto/cryptodev.c:239:
+^I^I^I^I^I^I   ses_ptr->stat[COP_DECRYPT]) / $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#380: FILE: crypto/cryptodev.c:256:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#384: FILE: crypto/cryptodev.c:260:
+		if(ses_ptr->sid == sid) {

ERROR:SPACING: space required before the open parenthesis '('
#424: FILE: crypto/cryptodev.c:300:
+		if(ses_ptr->sid == sid) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#434: FILE: crypto/cryptodev.c:310:
+/* This is the main crypto function - feed it with plaintext $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#435: FILE: crypto/cryptodev.c:311:
+/* This is the main crypto function - feed it with plaintext 
+   and get a ciphertext (or vice versa :-) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#435: FILE: crypto/cryptodev.c:311:
+   and get a ciphertext (or vice versa :-) */

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#468: FILE: crypto/cryptodev.c:344:
+	bufsize = PAGE_SIZE < nbytes ? PAGE_SIZE : nbytes;

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#469: FILE: crypto/cryptodev.c:345:
+	data = (char*)__get_free_page(GFP_KERNEL);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#493: FILE: crypto/cryptodev.c:369:
+	while(nbytes > 0) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#542: FILE: crypto/cryptodev.c:418:
+cryptodev_open(struct inode *inode, struct file *filp)
                                                  ^^^^

ERROR:SPACING: space required before the open parenthesis '('
#547: FILE: crypto/cryptodev.c:423:
+	if(!fcr)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#559: FILE: crypto/cryptodev.c:435:
+cryptodev_release(struct inode *inode, struct file *filp)
                                                     ^^^^

ERROR:SPACING: space required before the open parenthesis '('
#563: FILE: crypto/cryptodev.c:439:
+	if(fcr) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#572: FILE: crypto/cryptodev.c:448:
+clonefd(struct file *filp)
                      ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#574: FILE: crypto/cryptodev.c:450:
+	struct files_struct * files = current->files;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#579: FILE: crypto/cryptodev.c:455:
+		get_file(filp);
 		         ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#581: FILE: crypto/cryptodev.c:457:
+		fd_install(fd, filp);
 		               ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#588: FILE: crypto/cryptodev.c:464:
+cryptodev_ioctl(struct inode *inode, struct file *filp,
                                                   ^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#594: FILE: crypto/cryptodev.c:470:
+	uint32_t ses;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#598: FILE: crypto/cryptodev.c:474:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#600: FILE: crypto/cryptodev.c:476:
+	switch (cmd) {
+		case CRIOGET:
[...]
+		case CIOCGSESSION:
[...]
+		case CIOCFSESSION:
[...]
+		case CIOCCRYPT:
[...]
+		default:

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#602: FILE: crypto/cryptodev.c:478:
+			fd = clonefd(filp);
 			             ^^^^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#603: FILE: crypto/cryptodev.c:479:
+			put_user(fd, (int*)arg);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#605: FILE: crypto/cryptodev.c:481:
+^I^I^I$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#607: FILE: crypto/cryptodev.c:483:
+			copy_from_user(&sop, (void*)arg, sizeof(sop));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#611: FILE: crypto/cryptodev.c:487:
+			copy_to_user((void*)arg, &sop, sizeof(sop));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#615: FILE: crypto/cryptodev.c:491:
+			get_user(ses, (uint32_t*)arg);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#620: FILE: crypto/cryptodev.c:496:
+			copy_from_user(&cop, (void*)arg, sizeof(cop));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#622: FILE: crypto/cryptodev.c:498:
+			copy_to_user((void*)arg, &cop, sizeof(cop));

WARNING:CONST_STRUCT: struct file_operations should normally be const
#630: FILE: crypto/cryptodev.c:506:
+struct file_operations cryptodev_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#648: FILE: crypto/cryptodev.c:524:
+	rc = misc_register (&cryptodev);

WARNING:TYPO_SPELLING: 'registeration' may be misspelled - perhaps 'registration'?
#650: FILE: crypto/cryptodev.c:526:
+		printk(KERN_ERR PFX "registeration of /dev/crypto failed\n");
 		                     ^^^^^^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#650: FILE: crypto/cryptodev.c:526:
+		printk(KERN_ERR PFX "registeration of /dev/crypto failed\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#669: FILE: crypto/cryptodev.c:545:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#674: FILE: crypto/cryptodev.c:550:
+	printk(KERN_INFO PFX "driver loaded.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#683: FILE: crypto/cryptodev.c:559:
+	printk(KERN_INFO PFX "driver unloaded.\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#693: FILE: include/linux/cryptodev.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#730: FILE: include/linux/cryptodev.h:38:
+	char		*alg_name;	/* set cipher=CRYPTO_CIPHER_NAME
+					   or  mac=CRYPTO_HASH_NAME */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#730: FILE: include/linux/cryptodev.h:38:
+					   or  mac=CRYPTO_HASH_NAME */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#741: FILE: include/linux/cryptodev.h:49:
+	uint32_t	ses;		/* session ID */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#746: FILE: include/linux/cryptodev.h:54:
+	uint32_t	ses;		/* from session_op->ses */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#749: FILE: include/linux/cryptodev.h:57:
+	uint32_t	op;		/* ie. COP_ENCRYPT */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#750: FILE: include/linux/cryptodev.h:58:
+	uint32_t	flags;		/* unused */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000257199.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 44 errors, 38 warnings, 17 checks, 665 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000257199.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
