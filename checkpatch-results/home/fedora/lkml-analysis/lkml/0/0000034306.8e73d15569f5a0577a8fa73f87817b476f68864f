WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#52: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#57: FILE: arch/ia64/kernel/msi_ia64.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/smp.h> instead of <asm/smp.h>
#64: FILE: arch/ia64/kernel/msi_ia64.c:8:
+#include <asm/smp.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:BIT_MACRO: Prefer using the BIT macro
#75: FILE: arch/ia64/kernel/msi_ia64.c:19:
+#define     MSI_DATA_DELIVERY_LOWPRI	(1 << MSI_DATA_DELIVERY_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#79: FILE: arch/ia64/kernel/msi_ia64.c:23:
+#define     MSI_DATA_LEVEL_ASSERT	(1 << MSI_DATA_LEVEL_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#83: FILE: arch/ia64/kernel/msi_ia64.c:27:
+#define     MSI_DATA_TRIGGER_LEVEL	(1 << MSI_DATA_TRIGGER_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#97: FILE: arch/ia64/kernel/msi_ia64.c:41:
+#define	    MSI_ADDR_DESTMODE_LOGIC	(1 << MSI_ADDR_DESTMODE_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#101: FILE: arch/ia64/kernel/msi_ia64.c:45:
+#define     MSI_ADDR_REDIRECTION_LOWPRI	(1 << MSI_ADDR_REDIRECTION_SHIFT)

WARNING:LINE_SPACING: Missing a blank line after declarations
#165: FILE: arch/ia64/kernel/msi_ia64.c:109:
+	unsigned int vector = irq;
+	ia64_resend_irq(vector);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#166: FILE: arch/ia64/kernel/msi_ia64.c:110:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#184: FILE: arch/ia64/kernel/msi_ia64.c:128:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#215: FILE: arch/ia64/sn/kernel/msi_sn.c:1:
+/*

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sn_irq_info"
#254: FILE: arch/ia64/sn/kernel/msi_sn.c:40:
+	if (sn_irq_info == NULL || sn_irq_info->irq_int_bit >= 0)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:RETURN_VOID: void function return statements are not generally useful
#276: FILE: arch/ia64/sn/kernel/msi_sn.c:62:
+	return;
+}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bussoft"
#294: FILE: arch/ia64/sn/kernel/msi_sn.c:80:
+	if (bussoft == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!provider"
#297: FILE: arch/ia64/sn/kernel/msi_sn.c:83:
+	if (provider == NULL || provider->dma_map_consistent == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!provider->dma_map_consistent"
#297: FILE: arch/ia64/sn/kernel/msi_sn.c:83:
+	if (provider == NULL || provider->dma_map_consistent == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sn_irq_info)...) over kzalloc(sizeof(struct sn_irq_info)...)
#310: FILE: arch/ia64/sn/kernel/msi_sn.c:96:
+	sn_irq_info = kzalloc(sizeof(struct sn_irq_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#311: FILE: arch/ia64/sn/kernel/msi_sn.c:97:
+	if (! sn_irq_info)
 	    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#333: FILE: arch/ia64/sn/kernel/msi_sn.c:119:
+					SN_DMA_MSI|SN_DMA_ADDR_XIO);
 					          ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#334: FILE: arch/ia64/sn/kernel/msi_sn.c:120:
+	if (! bus_addr) {
 	    ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sn_irq_info"
#378: FILE: arch/ia64/sn/kernel/msi_sn.c:164:
+	if (sn_irq_info == NULL || sn_irq_info->irq_int_bit >= 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#386: FILE: arch/ia64/sn/kernel/msi_sn.c:172:
+        sn_pdev = (struct pcidev_info *)sn_irq_info->irq_pciioinfo;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#386: FILE: arch/ia64/sn/kernel/msi_sn.c:172:
+        sn_pdev = (struct pcidev_info *)sn_irq_info->irq_pciioinfo;$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_irq_info"
#399: FILE: arch/ia64/sn/kernel/msi_sn.c:185:
+	if (new_irq_info == NULL)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#409: FILE: arch/ia64/sn/kernel/msi_sn.c:195:
+					SN_DMA_MSI|SN_DMA_ADDR_XIO);
 					          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#429: FILE: arch/ia64/sn/kernel/msi_sn.c:215:
+	unsigned int vector = irq;
+	ia64_resend_irq(vector);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000034306.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 7 warnings, 16 checks, 404 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000034306.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
