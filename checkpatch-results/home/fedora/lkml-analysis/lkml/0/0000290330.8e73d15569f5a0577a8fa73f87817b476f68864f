WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#63: FILE: arch/i386/mm/discontig.c:119:
+	printk("NUMA - single node, flat memory mode, but broken in several blocks\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#69: FILE: arch/i386/mm/discontig.c:125:
+		printk("Rounding down maxpfn %ld -> %d\n", max_pfn, pfn);

ERROR:SPACING: space required before the open parenthesis '('
#72: FILE: arch/i386/mm/discontig.c:128:
+	for(i = 0; i < MAX_NUMNODES; i++) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#75: FILE: arch/i386/mm/discontig.c:131:
+		printk("node %d start %d\n", i, pfn);

CHECK:BRACES: braces {} should be used on all arms of this statement
#77: FILE: arch/i386/mm/discontig.c:133:
+		if (pfn < max_pfn)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#79: FILE: arch/i386/mm/discontig.c:135:
+		else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#82: FILE: arch/i386/mm/discontig.c:138:
+			printk("total %d blocks, max %ld\n", i, max_pfn);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#87: FILE: arch/i386/mm/discontig.c:143:
+	printk("physnode_map");

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#89: FILE: arch/i386/mm/discontig.c:145:
+	for (pfn = node_start_pfn[0]; pfn <= max_pfn;
+	       pfn += PAGES_PER_ELEMENT)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#94: FILE: arch/i386/mm/discontig.c:150:
+		printk(" %d", physnode_map[pfn / PAGES_PER_ELEMENT]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#96: FILE: arch/i386/mm/discontig.c:152:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#198: FILE: arch/i386/mm/discontig.c:342:
+		printk ("node %d will remap to vaddr %08lx - \n", nid,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#198: FILE: arch/i386/mm/discontig.c:342:
+		printk ("node %d will remap to vaddr %08lx - \n", nid,

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#198: FILE: arch/i386/mm/discontig.c:342:
+		printk ("node %d will remap to vaddr %08lx - \n", nid,

CHECK:SPACING: No space is necessary after a cast
#199: FILE: arch/i386/mm/discontig.c:343:
+			(ulong) node_remap_start_vaddr[nid]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: arch/i386/mm/discontig.c:356:
+	bootmap_size = init_bootmem_node(NODE_DATA(0), min_low_pfn, 0,
+	    (system_max_low_pfn > node_end_pfn[0]) ?

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#258: FILE: arch/i386/mm/discontig.c:469:
+				BUG_ON(max_dma > low);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!NODE_DATA"
#279: FILE: arch/i386/mm/discontig.c:529:
+		if (NODE_DATA(i) == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "highmem_start_page"
#283: FILE: arch/i386/mm/discontig.c:533:
+		if (highmem_start_page != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!highmem_start_page"
#286: FILE: arch/i386/mm/discontig.c:536:
+	if (highmem_start_page == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#312: FILE: arch/i386/mm/discontig.c:562:
+	BUG_ON(nid == 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#319: FILE: arch/i386/mm/discontig.c:569:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#321: FILE: arch/i386/mm/discontig.c:571:
+	/* shrink size,
+	   which is done in calculate_numa_remap_pages() if normal NUMA */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#321: FILE: arch/i386/mm/discontig.c:571:
+	   which is done in calculate_numa_remap_pages() if normal NUMA */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#323: FILE: arch/i386/mm/discontig.c:573:
+	BUG_ON(start > high);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mm"
#328: FILE: arch/i386/mm/discontig.c:578:
+		if (mm == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#331: FILE: arch/i386/mm/discontig.c:581:
+		for(pfn = 0; pfn < remapsize; pfn += PTRS_PER_PTE) {

ERROR:SPACING: space required before the open parenthesis '('
#342: FILE: arch/i386/mm/discontig.c:592:
+	for(pfn = 0; pfn < remapsize; pfn += PTRS_PER_PTE)

ERROR:CODE_INDENT: code indent should use tabs where possible
#343: FILE: arch/i386/mm/discontig.c:593:
+                set_pmd_pfn(addr + (pfn << PAGE_SHIFT), high + pfn,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: arch/i386/mm/discontig.c:593:
+                set_pmd_pfn(addr + (pfn << PAGE_SHIFT), high + pfn,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#344: FILE: arch/i386/mm/discontig.c:594:
+                    PAGE_KERNEL_LARGE);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#344: FILE: arch/i386/mm/discontig.c:594:
+                set_pmd_pfn(addr + (pfn << PAGE_SHIFT), high + pfn,
+                    PAGE_KERNEL_LARGE);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#344: FILE: arch/i386/mm/discontig.c:594:
+                    PAGE_KERNEL_LARGE);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#352: FILE: arch/i386/mm/discontig.c:602:
+	printk("plug_node: %p %p\n", NODE_DATA(nid), node_mem_map);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'plug_node', this function's name, in a string
#352: FILE: arch/i386/mm/discontig.c:602:
+	printk("plug_node: %p %p\n", NODE_DATA(nid), node_mem_map);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#354: FILE: arch/i386/mm/discontig.c:604:
+	printk("zeroed nodedata\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#356: FILE: arch/i386/mm/discontig.c:606:
+^I/* XXX defaults to hotremovable */ $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#359: FILE: arch/i386/mm/discontig.c:609:
+	BUG_ON(virt_to_phys((char *)MAX_DMA_ADDRESS) >> PAGE_SHIFT > start);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#371: FILE: arch/i386/mm/discontig.c:621:
+	free_area_init_node(nid, NODE_DATA(nid), node_mem_map, zones_size,
+	    start, zholes_size);

ERROR:SPACING: space required before the open parenthesis '('
#374: FILE: arch/i386/mm/discontig.c:624:
+	for(pgdat = &pgdat_list; *pgdat; pgdat = &(*pgdat)->pgdat_next)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pgdat"
#380: FILE: arch/i386/mm/discontig.c:630:
+	if (*pgdat == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#384: FILE: arch/i386/mm/discontig.c:634:
+		struct zone *z;
+		for_each_zone (z)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#384: FILE: arch/i386/mm/discontig.c:634:
+		for_each_zone (z)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#385: FILE: arch/i386/mm/discontig.c:635:
+			printk("%p ", z);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#386: FILE: arch/i386/mm/discontig.c:636:
+		printk("\n");

ERROR:SPACING: space required before the open parenthesis '('
#390: FILE: arch/i386/mm/discontig.c:640:
+	for(i = 0; i < MAX_NR_ZONES; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#396: FILE: arch/i386/mm/discontig.c:646:
+		for(j = 0; j < z->spanned_pages; j++) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#414: FILE: arch/i386/mm/discontig.c:664:
+{
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#422: FILE: arch/i386/mm/discontig.c:672:
+{
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#426: FILE: arch/i386/mm/discontig.c:676:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#430: FILE: arch/i386/mm/discontig.c:680:
+{
+

ERROR:SPACING: space required before the open parenthesis '('
#444: FILE: arch/i386/mm/discontig.c:694:
+	for(i = 0; i < MAX_NR_ZONES; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#451: FILE: arch/i386/mm/discontig.c:701:
+	for(pgdat = pgdat_list; pgdat; pgdat = pgdat->pgdat_next)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#456: FILE: arch/i386/mm/discontig.c:706:
+	BUG_ON(pgdat == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pgdat"
#456: FILE: arch/i386/mm/discontig.c:706:
+	BUG_ON(pgdat == NULL);

ERROR:SPACING: space required before the open parenthesis '('
#458: FILE: arch/i386/mm/discontig.c:708:
+	for(i = 0; i < MAX_NR_ZONES; i++)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#483: FILE: arch/i386/mm/init.c:46:
+extern unsigned long node_end_pfn[MAX_NUMNODES];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#517: FILE: include/asm-i386/mmzone.h:46:
+#if defined(CONFIG_NUMA) || defined (CONFIG_MEMHOTPLUG)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#526: FILE: include/asm-i386/mmzone.h:138:
+extern int get_memcfg_numa_blks(void);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#569: FILE: mm/page_alloc.c:1186:
+calculate_zone_totalpages(struct pglist_data *pgdat,
 		unsigned long *zones_size, unsigned long *zholes_size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#584: FILE: mm/page_alloc.c:1245:
+free_area_init_core(struct pglist_data *pgdat,
+	unsigned long *zones_size, unsigned long *zholes_size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#599: FILE: mm/page_alloc.c:1390:
+free_area_init_node(int nid, struct pglist_data *pgdat,
 		struct page *node_mem_map, unsigned long *zones_size,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000290330.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 28 warnings, 19 checks, 525 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000290330.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
