WARNING:TYPO_SPELLING: 'acessing' may be misspelled - perhaps 'accessing'?
#71: FILE: Documentation/vm_pps.txt:31:
+1) SwapDaemon can collect the statistic of process acessing pages and by it
                                                    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#85: FILE: Documentation/vm_pps.txt:44:
Note, it ISN'T perfect.

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:TYPO_SPELLING: 'scaning' may be misspelled - perhaps 'scanning'?
#164: FILE: Documentation/vm_pps.txt:122:
+mm_struct instances, during the process of scaning and reclaiming process, it
                                            ^^^^^^^

WARNING:TYPO_SPELLING: 'aboved' may be misspelled - perhaps 'above'?
#216: FILE: Documentation/vm_pps.txt:174:
+   aboved hyperlink of Linux kernel mail list. So it's a compromise to use
    ^^^^^^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#274: FILE: include/asm-i386/pgtable-2level.h:55:
+	((((pte).pte_low >> 1) & 0xf ) + (((pte).pte_low >> 8) << 4 ))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#286: FILE: include/asm-i386/pgtable-2level.h:63:
+#define __swp_entry(type, offset)	((swp_entry_t) { ((type & 0xf) <<

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#303: FILE: include/asm-i386/pgtable.h:125:
+#define _PAGE_UNMAPPED	0x020	/* a special PTE type, hold its page reference
+								   even it's unmapped, see more from

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#304: FILE: include/asm-i386/pgtable.h:126:
+								   Documentation/vm_pps.txt. */

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#315: FILE: include/asm-i386/pgtable.h:235:
+static inline int pte_unmapped(pte_t pte)	{ return ((pte).pte_low &

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#317: FILE: include/asm-i386/pgtable.h:236:
+static inline int pte_swapped(pte_t pte)	{ return ((pte).pte_low &

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#319: FILE: include/asm-i386/pgtable.h:237:
+static inline int pte_file(pte_t pte)		{ return ((pte).pte_low &

WARNING:LONG_LINE_COMMENT: line length of 116 exceeds 100 columns
#336: FILE: include/linux/mm.h:170:
+									   see more from Documentation/vm_pps.txt */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#336: FILE: include/linux/mm.h:170:
+#define VM_PURE_PRIVATE	0x04000000	/* Is the vma is only belonging to a mm,
+									   see more from Documentation/vm_pps.txt */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#336: FILE: include/linux/mm.h:170:
+									   see more from Documentation/vm_pps.txt */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#346: FILE: include/linux/mm.h:1063:
+struct delay_tlb_task_t
+{

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#347: FILE: include/linux/mm.h:1064:
+	struct mm_struct* mm;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#349: FILE: include/linux/mm.h:1066:
+	struct vm_area_struct* vma[32];

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#353: FILE: include/linux/mm.h:1070:
+};
+extern struct delay_tlb_task_t delay_tlb_tasks[32];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#358: FILE: include/linux/mm.h:1075:
+void timer_flush_tlb_tasks(void* data /* = NULL */);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#360: FILE: include/linux/mm.h:1077:
+void enter_pps(struct mm_struct* mm, struct vm_area_struct* vma);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#360: FILE: include/linux/mm.h:1077:
+void enter_pps(struct mm_struct* mm, struct vm_area_struct* vma);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#361: FILE: include/linux/mm.h:1078:
+void leave_pps(struct vm_area_struct* vma, int migrate_flag);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#376: FILE: include/linux/swapops.h:53:
+	BUG_ON(!pte_swapped(pte));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#385: FILE: include/linux/swapops.h:67:
+	BUG_ON(!pte_swapped(__swp_entry_to_pte(arch_entry)));

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#444: FILE: mm/memory.c:662:
+^I^I^I// ^Ilru_cache_add_active(page);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#455: FILE: mm/memory.c:684:
+			struct page *page;
+			page = pfn_to_page(pte_pfn(ptent));

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#485: FILE: mm/memory.c:1883:
+	struct page* page;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#488: FILE: mm/memory.c:1886:
+	spinlock_t* ptl = pte_lockptr(vma->vm_mm, pmd);

CHECK:CAMELCASE: Avoid CamelCase: <swapType>
#489: FILE: mm/memory.c:1887:
+	int swapType = swp_type(entry);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <swapOffset>
#490: FILE: mm/memory.c:1888:
+	int swapOffset = swp_offset(entry);

CHECK:SPACING: No space is necessary after a cast
#506: FILE: mm/memory.c:1904:
+		if (next - (pte_t*) pmd >= PTRS_PER_PTE)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#506: FILE: mm/memory.c:1904:
+		if (next - (pte_t*) pmd >= PTRS_PER_PTE)

ERROR:CODE_INDENT: code indent should use tabs where possible
#509: FILE: mm/memory.c:1907:
+        if (!(!pte_present(*next) && pte_swapped(*next))) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#509: FILE: mm/memory.c:1907:
+        if (!(!pte_present(*next) && pte_swapped(*next))) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#509: FILE: mm/memory.c:1907:
+        if (!(!pte_present(*next) && pte_swapped(*next))) {
+			spin_unlock(ptl);

CHECK:SPACING: No space is necessary after a cast
#533: FILE: mm/memory.c:1931:
+		if (prev - (pte_t*) pmd < 0)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#533: FILE: mm/memory.c:1931:
+		if (prev - (pte_t*) pmd < 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#536: FILE: mm/memory.c:1934:
+        if (!(!pte_present(*prev) && pte_swapped(*prev))) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#536: FILE: mm/memory.c:1934:
+        if (!(!pte_present(*prev) && pte_swapped(*prev))) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#536: FILE: mm/memory.c:1934:
+        if (!(!pte_present(*prev) && pte_swapped(*prev))) {
+			spin_unlock(ptl);

ERROR:CODE_INDENT: code indent should use tabs where possible
#567: FILE: mm/memory.c:1978:
+ ^I^Ipps_swapin_readahead(entry, address, vma, page_table, pmd);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#567: FILE: mm/memory.c:1978:
+ ^I^Ipps_swapin_readahead(entry, address, vma, page_table, pmd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#567: FILE: mm/memory.c:1978:
+ ^I^Ipps_swapin_readahead(entry, address, vma, page_table, pmd);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#615: FILE: mm/memory.c:2313:
+			BUG_ON(!(vma->vm_flags & VM_PURE_PRIVATE));

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#616: FILE: mm/memory.c:2314:
+			struct page* page = pte_page(entry);

WARNING:LINE_SPACING: Missing a blank line after declarations
#618: FILE: mm/memory.c:2316:
+			pte_t temp_pte = mk_pte(page, vma->vm_page_prot);
+			pte = pte_offset_map_lock(mm, pmd, address, &ptl);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#636: FILE: mm/memory.c:2563:
+static void migrate_back_pte_range(struct mm_struct* mm, pmd_t *pmd, struct

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#637: FILE: mm/memory.c:2564:
+		vm_area_struct *vma, unsigned long addr, unsigned long end)
 		               ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#639: FILE: mm/memory.c:2566:
+	struct page* page;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#641: FILE: mm/memory.c:2568:
+	pte_t* pte;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#642: FILE: mm/memory.c:2569:
+	spinlock_t* ptl;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#651: FILE: mm/memory.c:2578:
+			BUG_ON(page == ZERO_PAGE(addr));

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#665: FILE: mm/memory.c:2592:
+static void migrate_back_pmd_range(struct mm_struct* mm, pud_t *pud, struct

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#666: FILE: mm/memory.c:2593:
+		vm_area_struct *vma, unsigned long addr, unsigned long end)
 		               ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#680: FILE: mm/memory.c:2607:
+static void migrate_back_pud_range(struct mm_struct* mm, pgd_t *pgd, struct

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#681: FILE: mm/memory.c:2608:
+		vm_area_struct *vma, unsigned long addr, unsigned long end)
 		               ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#697: FILE: mm/memory.c:2623:
+static void migrate_back_legacy_linux(struct mm_struct* mm, struct

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#700: FILE: mm/memory.c:2625:
+	pgd_t* pgd;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#719: FILE: mm/memory.c:2644:
+void enter_pps(struct mm_struct* mm, struct vm_area_struct* vma)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#719: FILE: mm/memory.c:2644:
+void enter_pps(struct mm_struct* mm, struct vm_area_struct* vma)

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#721: FILE: mm/memory.c:2646:
+	int condition = VM_READ | VM_WRITE | VM_EXEC | \

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma->vm_file"
#725: FILE: mm/memory.c:2650:
+	if (!(vma->vm_flags & ~condition) && vma->vm_file == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#736: FILE: mm/memory.c:2661:
+void leave_pps(struct vm_area_struct* vma, int migrate_flag)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#738: FILE: mm/memory.c:2663:
+	struct mm_struct* mm = vma->vm_mm;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#830: FILE: mm/rmap.c:636:
+		BUG_ON(!pte_swapped(*pte));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma"
#843: FILE: mm/swap_state.c:357:
+			if (vma == NULL || !(vma->vm_flags & VM_PURE_PRIVATE))

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#864: FILE: mm/swapfile.c:421:
+static int pps_test_swap_type(struct mm_struct* mm, pmd_t* pmd, pte_t* pte, int

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#864: FILE: mm/swapfile.c:421:
+static int pps_test_swap_type(struct mm_struct* mm, pmd_t* pmd, pte_t* pte, int

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#864: FILE: mm/swapfile.c:421:
+static int pps_test_swap_type(struct mm_struct* mm, pmd_t* pmd, pte_t* pte, int

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#865: FILE: mm/swapfile.c:422:
+		type, struct page** ret_page)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#867: FILE: mm/swapfile.c:424:
+	spinlock_t* ptl = pte_lockptr(mm, pmd);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#869: FILE: mm/swapfile.c:426:
+	struct page* page;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#895: FILE: mm/swapfile.c:452:
+static int pps_swapoff_scan_ptes(struct mm_struct* mm, struct vm_area_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#896: FILE: mm/swapfile.c:453:
+		vma, pmd_t* pmd, unsigned long addr, unsigned long end, int type)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#899: FILE: mm/swapfile.c:456:
+	struct page* page;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#904: FILE: mm/swapfile.c:461:
+			if (page == NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#913: FILE: mm/swapfile.c:470:
+					BUG();

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#935: FILE: mm/swapfile.c:492:
+static int pps_swapoff_pmd_range(struct mm_struct* mm, struct vm_area_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#936: FILE: mm/swapfile.c:493:
+		vma, pud_t* pud, unsigned long addr, unsigned long end, int type)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#940: FILE: mm/swapfile.c:497:
+	pmd_t* pmd = pmd_offset(pud, addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#941: FILE: mm/swapfile.c:498:
+	pmd_t* pmd = pmd_offset(pud, addr);
+	do {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#952: FILE: mm/swapfile.c:509:
+static int pps_swapoff_pud_range(struct mm_struct* mm, struct vm_area_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#953: FILE: mm/swapfile.c:510:
+		vma, pgd_t* pgd, unsigned long addr, unsigned long end, int type)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#957: FILE: mm/swapfile.c:514:
+	pud_t* pud = pud_offset(pgd, addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#958: FILE: mm/swapfile.c:515:
+	pud_t* pud = pud_offset(pgd, addr);
+	do {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#969: FILE: mm/swapfile.c:526:
+static int pps_swapoff_pgd_range(struct mm_struct* mm, struct vm_area_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#976: FILE: mm/swapfile.c:533:
+	pgd_t* pgd = pgd_offset(mm, addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#977: FILE: mm/swapfile.c:534:
+	pgd_t* pgd = pgd_offset(mm, addr);
+	do {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#990: FILE: mm/swapfile.c:547:
+	struct mm_struct* mm;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#991: FILE: mm/swapfile.c:548:
+	struct vm_area_struct* vma;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "vma"
#1004: FILE: mm/swapfile.c:561:
+		for (vma = mm->mmap; vma != NULL; vma = vma->vm_next) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1069: FILE: mm/vmscan.c:1519:
+	pte_t* ptes[MAX_SERIES_LENGTH];

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1070: FILE: mm/vmscan.c:1520:
+	struct page* pages[MAX_SERIES_LENGTH];

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1075: FILE: mm/vmscan.c:1525:
+static int get_series_stage(pte_t* pte, int index)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1080: FILE: mm/vmscan.c:1530:
+		struct page* page = pfn_to_page(pte_pfn(series.orig_ptes[index]));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1081: FILE: mm/vmscan.c:1531:
+		struct page* page = pfn_to_page(pte_pfn(series.orig_ptes[index]));
+		series.pages[index] = page;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1084: FILE: mm/vmscan.c:1534:
+		if (pte_young(series.orig_ptes[index])) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1086: FILE: mm/vmscan.c:1536:
+		} else

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1089: FILE: mm/vmscan.c:1539:
+		struct page* page = pfn_to_page(pte_pfn(series.orig_ptes[index]));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1090: FILE: mm/vmscan.c:1540:
+		struct page* page = pfn_to_page(pte_pfn(series.orig_ptes[index]));
+		series.pages[index] = page;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1091: FILE: mm/vmscan.c:1541:
+		if (!PageSwapCache(page))
[...]
+		else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1093: FILE: mm/vmscan.c:1543:
+			return 3;
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#1093: FILE: mm/vmscan.c:1543:
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#1099: FILE: mm/vmscan.c:1549:
+	} else // pte_swapped -- SwappedPTE

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#1103: FILE: mm/vmscan.c:1553:
+static void find_series(pte_t** start, unsigned long* addr, unsigned long end)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1103: FILE: mm/vmscan.c:1553:
+static void find_series(pte_t** start, unsigned long* addr, unsigned long end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1111: FILE: mm/vmscan.c:1560:
+	for (i = 1; i < MAX_SERIES_LENGTH && *addr < end; i++, (*start)++,
+		if (series_stage != get_series_stage(*start, i))

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1120: FILE: mm/vmscan.c:1569:
+void timer_flush_tlb_tasks(void* data)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "delay_tlb_tasks[i].mm"
#1129: FILE: mm/vmscan.c:1577:
+		if (delay_tlb_tasks[i].mm != NULL &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1130: FILE: mm/vmscan.c:1578:
+		if (delay_tlb_tasks[i].mm != NULL &&
+				cpu_isset(smp_processor_id(), delay_tlb_tasks[i].mm->cpu_vm_mask) &&

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#1146: FILE: mm/vmscan.c:1594:
+static struct delay_tlb_task_t* delay_task = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1146: FILE: mm/vmscan.c:1594:
+static struct delay_tlb_task_t* delay_task = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1147: FILE: mm/vmscan.c:1595:
+static int vma_index = 0;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1149: FILE: mm/vmscan.c:1597:
+static struct delay_tlb_task_t* search_free_tlb_tasks_slot(void)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1151: FILE: mm/vmscan.c:1599:
+	struct delay_tlb_task_t* ret = NULL;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1155: FILE: mm/vmscan.c:1603:
+		if (delay_tlb_tasks[i].mm != NULL) {
[...]
+		} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "delay_tlb_tasks[i].mm"
#1155: FILE: mm/vmscan.c:1603:
+		if (delay_tlb_tasks[i].mm != NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#1161: FILE: mm/vmscan.c:1609:
+		} else

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1171: FILE: mm/vmscan.c:1619:
+static void init_delay_task(struct mm_struct* mm)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1181: FILE: mm/vmscan.c:1629:
+static void start_tlb_tasks(struct mm_struct* mm)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1187: FILE: mm/vmscan.c:1635:
+			if (cpus_empty(delay_tlb_tasks[i].cpu_mask)) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1190: FILE: mm/vmscan.c:1638:
+			} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1198: FILE: mm/vmscan.c:1646:
+	BUG_ON(delay_task != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "delay_task"
#1198: FILE: mm/vmscan.c:1646:
+	BUG_ON(delay_task != NULL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1205: FILE: mm/vmscan.c:1653:
+	if (!cpus_empty(delay_task->cpu_mask)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1208: FILE: mm/vmscan.c:1656:
+	} else

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1213: FILE: mm/vmscan.c:1661:
+static void fill_in_tlb_tasks(struct vm_area_struct* vma, unsigned long addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1214: FILE: mm/vmscan.c:1662:
+static void fill_in_tlb_tasks(struct vm_area_struct* vma, unsigned long addr,
+		unsigned long end)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1216: FILE: mm/vmscan.c:1664:
+	struct mm_struct* mm;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1233: FILE: mm/vmscan.c:1681:
+static void shrink_pvma_scan_ptes(struct scan_control* sc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1234: FILE: mm/vmscan.c:1682:
+static void shrink_pvma_scan_ptes(struct scan_control* sc,
+		struct mm_struct* mm, struct vm_area_struct* vma, pmd_t* pmd,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1234: FILE: mm/vmscan.c:1682:
+		struct mm_struct* mm, struct vm_area_struct* vma, pmd_t* pmd,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1234: FILE: mm/vmscan.c:1682:
+		struct mm_struct* mm, struct vm_area_struct* vma, pmd_t* pmd,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1234: FILE: mm/vmscan.c:1682:
+		struct mm_struct* mm, struct vm_area_struct* vma, pmd_t* pmd,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1238: FILE: mm/vmscan.c:1686:
+	spinlock_t* ptl = pte_lockptr(mm, pmd);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1239: FILE: mm/vmscan.c:1687:
+	pte_t* pte = pte_offset_map(pmd, addr);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1243: FILE: mm/vmscan.c:1691:
+	struct address_space* mapping = &swapper_space;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1249: FILE: mm/vmscan.c:1697:
+		switch (series.series_stage) {
+			case 1: // PTE -- untouched PTE.
[...]
+			case 2: // untouched PTE -- UnmappedPTE.
[...]
+			case 3: // Attach SwapPage to PrivatePage.
[...]
+			case 4: // SwapPage isn't consistent with PrivatePage.
[...]
+			case 5: // UnmappedPTE -- SwappedPTE, reclaim PrivatePage.
[...]
+			case 6:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1252: FILE: mm/vmscan.c:1700:
+					struct page* page = series.pages[i];

WARNING:LINE_SPACING: Missing a blank line after declarations
#1253: FILE: mm/vmscan.c:1701:
+					struct page* page = series.pages[i];
+					lock_page(page);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1255: FILE: mm/vmscan.c:1703:
+					if (unlikely(pte_same(*series.ptes[i], series.orig_ptes[i]))) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1256: FILE: mm/vmscan.c:1704:
+						if (pte_dirty(*series.ptes[i]))

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1259: FILE: mm/vmscan.c:1707:
+								pte_mkold(pte_mkclean(*series.ptes[i])));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1259: FILE: mm/vmscan.c:1707:
+						set_pte_at(mm, addr + i * PAGE_SIZE, series.ptes[i],
+								pte_mkold(pte_mkclean(*series.ptes[i])));

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1264: FILE: mm/vmscan.c:1712:
+				fill_in_tlb_tasks(vma, addr, addr + (PAGE_SIZE * series.series_length));

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1278: FILE: mm/vmscan.c:1726:
+					if (unlikely(pte_same(*series.ptes[i], series.orig_ptes[i]))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1280: FILE: mm/vmscan.c:1728:
+						pte_t pte_unmapped = series.orig_ptes[i];
+						pte_unmapped.pte_low &= ~_PAGE_PRESENT;

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1282: FILE: mm/vmscan.c:1730:
+						if (cmpxchg(&series.ptes[i]->pte_low,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1283: FILE: mm/vmscan.c:1731:
+						if (cmpxchg(&series.ptes[i]->pte_low,
+									series.orig_ptes[i].pte_low,

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1302: FILE: mm/vmscan.c:1750:
+						if (!PageSwapCache(series.pages[i])) {

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1303: FILE: mm/vmscan.c:1751:
+							if (!add_to_swap(series.pages[i], GFP_ATOMIC)) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1303: FILE: mm/vmscan.c:1751:
+							if (!add_to_swap(series.pages[i], GFP_ATOMIC)) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1320: FILE: mm/vmscan.c:1768:
+						struct page* page = series.pages[i];

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1323: FILE: mm/vmscan.c:1771:
+						if (!may_write_to_queue(mapping->backing_dev_info))

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1326: FILE: mm/vmscan.c:1774:
+						if (!PageDirty(page) || PageWriteback(page)) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1340: FILE: mm/vmscan.c:1788:
+						if (res < 0) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1346: FILE: mm/vmscan.c:1794:
+						if (!PageWriteback(page))

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1354: FILE: mm/vmscan.c:1802:
+					struct page* page = series.pages[i];

WARNING:LINE_SPACING: Missing a blank line after declarations
#1355: FILE: mm/vmscan.c:1803:
+					struct page* page = series.pages[i];
+					lock_page(page);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1357: FILE: mm/vmscan.c:1805:
+					if (unlikely(pte_same(*series.ptes[i], series.orig_ptes[i]))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1363: FILE: mm/vmscan.c:1811:
+					swp_entry_t entry = { .val = page_private(page) };
+					swap_duplicate(entry);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1365: FILE: mm/vmscan.c:1813:
+					set_pte_at(mm, addr + i * PAGE_SIZE, series.ptes[i], pte_swp);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1365: FILE: mm/vmscan.c:1813:
+					pte_t pte_swp = swp_entry_to_pte(entry);
+					set_pte_at(mm, addr + i * PAGE_SIZE, series.ptes[i], pte_swp);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1386: FILE: mm/vmscan.c:1834:
+static void shrink_pvma_pmd_range(struct scan_control* sc, struct

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1388: FILE: mm/vmscan.c:1835:
+		struct vm_area_struct* vma, pud_t* pud,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1388: FILE: mm/vmscan.c:1835:
+		struct vm_area_struct* vma, pud_t* pud,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1392: FILE: mm/vmscan.c:1839:
+	pmd_t* pmd = pmd_offset(pud, addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1393: FILE: mm/vmscan.c:1840:
+	pmd_t* pmd = pmd_offset(pud, addr);
+	do {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1401: FILE: mm/vmscan.c:1848:
+static void shrink_pvma_pud_range(struct scan_control* sc, struct

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1403: FILE: mm/vmscan.c:1849:
+		struct vm_area_struct* vma, pgd_t* pgd,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1403: FILE: mm/vmscan.c:1849:
+		struct vm_area_struct* vma, pgd_t* pgd,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1407: FILE: mm/vmscan.c:1853:
+	pud_t* pud = pud_offset(pgd, addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1408: FILE: mm/vmscan.c:1854:
+	pud_t* pud = pud_offset(pgd, addr);
+	do {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1416: FILE: mm/vmscan.c:1862:
+static void shrink_pvma_pgd_range(struct scan_control* sc, struct

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1418: FILE: mm/vmscan.c:1863:
+		struct vm_area_struct* vma)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1423: FILE: mm/vmscan.c:1868:
+	pgd_t* pgd = pgd_offset(mm, addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1424: FILE: mm/vmscan.c:1869:
+	pgd_t* pgd = pgd_offset(mm, addr);
+	do {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1432: FILE: mm/vmscan.c:1877:
+static void shrink_private_vma(struct scan_control* sc)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1434: FILE: mm/vmscan.c:1879:
+	struct mm_struct* mm;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1435: FILE: mm/vmscan.c:1880:
+	struct vm_area_struct* vma;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "vma"
#1448: FILE: mm/vmscan.c:1893:
+			for (vma = mm->mmap; vma != NULL; vma = vma->vm_next) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000005929.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 94 errors, 55 warnings, 32 checks, 1333 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000005929.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
