WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
> > +	kbuild_modname = kmalloc(sizeof(char) * (MAX_KBUILD_MODNAME + 1), GFP_KERNEL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#126: FILE: include/linux/moduleparam.h:151:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#131: FILE: include/linux/moduleparam.h:156:
+extern int module_param_sysfs_setup(struct module *mod, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#131: FILE: include/linux/moduleparam.h:156:
+extern int module_param_sysfs_setup(struct module *mod, 

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#135: FILE: include/linux/moduleparam.h:160:
+extern void module_param_sysfs_remove(struct module *mod);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#137: FILE: include/linux/moduleparam.h:162:
+extern int __init param_sysfs_init(void);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#195: FILE: kernel/params.c:344:
 
+

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#204: FILE: kernel/params.c:353:
+struct param_attribute
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#210: FILE: kernel/params.c:359:
+struct param_kobject
+{

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#217: FILE: kernel/params.c:366:
+#define to_param_attr(n) container_of(n, struct param_attribute, attr);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#254: FILE: kernel/params.c:403:
+
+

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#255: FILE: kernel/params.c:404:
+static struct sysfs_ops param_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:RETURN_VOID: void function return statements are not generally useful
#264: FILE: kernel/params.c:413:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#273: FILE: kernel/params.c:422:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#275: FILE: kernel/params.c:424:
+#define __modinit $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#289: FILE: kernel/params.c:438:
+static __modinit int param_add_attribute(struct module *mod, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#290: FILE: kernel/params.c:439:
+^I^I^I^I^I struct param_kobject *pk, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#291: FILE: kernel/params.c:440:
+^I^I^I^I^I struct kernel_param *kp, $

CHECK:SPACING: No space is necessary after a cast
#298: FILE: kernel/params.c:447:
+	a->attr.name = (char *) &kp->name[skip];

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#308: FILE: kernel/params.c:457:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#316: FILE: kernel/params.c:465:
+static __modinit void param_sysfs_remove(struct param_kobject *pk, $

WARNING:LINE_SPACING: Missing a blank line after declarations
#320: FILE: kernel/params.c:469:
+	unsigned int i;
+	for (i = 0; i < pk->num_attributes; i++)

ERROR:SPACING: space required after that ',' (ctx:VxO)
#321: FILE: kernel/params.c:470:
+		sysfs_remove_file(&pk->kobj,&pk->attr[i].attr);
 		                           ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#321: FILE: kernel/params.c:470:
+		sysfs_remove_file(&pk->kobj,&pk->attr[i].attr);
 		                            ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#330: FILE: kernel/params.c:479:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#342: FILE: kernel/params.c:491:
+static __modinit int param_sysfs_setup(char *name, $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#354: FILE: kernel/params.c:503:
+	for (i=0; i<num_params; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#354: FILE: kernel/params.c:503:
+	for (i=0; i<num_params; i++) {
 	           ^

WARNING:USE_NEGATIVE_ERRNO: return of an errno should typically be negative (ie: return -ENODEV)
#360: FILE: kernel/params.c:509:
+		return ENODEV;

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#362: FILE: kernel/params.c:511:
+	pk = kmalloc(sizeof(struct param_kobject) + sizeof(struct param_attribute) * valid_attrs, GFP_KERNEL);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*pk)...) over kmalloc(sizeof(struct param_kobject)...)
#362: FILE: kernel/params.c:511:
+	pk = kmalloc(sizeof(struct param_kobject) + sizeof(struct param_attribute) * valid_attrs, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:LINE_SPACING: Please don't use multiple blank lines
#398: FILE: kernel/params.c:547:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#410: FILE: kernel/params.c:559:
+int module_param_sysfs_setup(struct module *mod, $

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#432: FILE: kernel/params.c:581:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#434: FILE: kernel/params.c:583:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#442: FILE: kernel/params.c:591:
+void module_param_sysfs_remove(struct module *mod) $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#457: FILE: kernel/params.c:606:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#461: FILE: kernel/params.c:610:
+static int __init kernel_param_sysfs_setup(char *name, $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#469: FILE: kernel/params.c:618:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#495: FILE: kernel/params.c:644:
+	for (i=0; i<num_param; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#495: FILE: kernel/params.c:644:
+	for (i=0; i<num_param; i++) {
 	           ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#500: FILE: kernel/params.c:649:
+		for (j=0; j <= MAX_KBUILD_MODNAME; j++)
+		{

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#500: FILE: kernel/params.c:649:
+		for (j=0; j <= MAX_KBUILD_MODNAME; j++)
 		      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#516: FILE: kernel/params.c:665:
+^I^I/* add a new kobject for previous kernel_params if a new $

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#519: FILE: kernel/params.c:668:
+		if (kp_begin && strncmp(kbuild_modname, kp->name, stop_point))
+		{

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#540: FILE: kernel/params.c:689:
+	return (err);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#543: FILE: kernel/params.c:692:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#560: FILE: kernel/params.c:709:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000264038.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 23 errors, 7 warnings, 18 checks, 445 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000264038.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
