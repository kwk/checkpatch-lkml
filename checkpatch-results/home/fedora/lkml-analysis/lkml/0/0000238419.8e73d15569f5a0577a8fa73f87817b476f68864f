CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#67: FILE: include/linux/moduleparam.h:58:
     __attribute__ ((unused,__section__ ("__param"),aligned(sizeof(void *)))) \
+	= { __param_str_##name, perm, set, get, arg, min, max }

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#84: FILE: include/linux/moduleparam.h:70:
+#define module_param_named_ranged(name, value, type, min, max, perm)	\
+	param_check_##type(name, &(value));				\
+	module_param_call_ranged(name, param_set_##type, param_get_##type, \
+				 &value, min, max, perm)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#84: FILE: include/linux/moduleparam.h:70:
+#define module_param_named_ranged(name, value, type, min, max, perm)	\
+	param_check_##type(name, &(value));				\
+	module_param_call_ranged(name, param_set_##type, param_get_##type, \
+				 &value, min, max, perm)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'value' - possible side-effects?
#84: FILE: include/linux/moduleparam.h:70:
+#define module_param_named_ranged(name, value, type, min, max, perm)	\
+	param_check_##type(name, &(value));				\
+	module_param_call_ranged(name, param_set_##type, param_get_##type, \
+				 &value, min, max, perm)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#89: FILE: include/linux/moduleparam.h:75:
+#define module_param_ranged(name, type, min, max, perm)			\
+	module_param_named_ranged(name, name, type, min, max, perm)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#96: FILE: include/linux/moduleparam.h:81:
+#define module_param(name, type, perm)					\
 	module_param_named(name, name, type, perm)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'array' - possible side-effects?
#115: FILE: include/linux/moduleparam.h:157:
+#define module_param_array_named_ranged(name, array, type, nump, min, max, perm)\
 	static struct kparam_array __param_arr_##name			\
 	= { ARRAY_SIZE(array), nump, param_set_##type, param_get_##type,\
 	    sizeof(array[0]), array };					\
+	module_param_call_ranged(name, param_array_set, param_array_get,\
+				 &__param_arr_##name, min, max, perm)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#124: FILE: include/linux/moduleparam.h:164:
+#define module_param_array_ranged(name, type, nump, min, max, perm)	\
+	module_param_array_named_ranged(name, name, type, nump, min, max, perm)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#131: FILE: include/linux/moduleparam.h:170:
+#define module_param_array(name, type, nump, perm)			\
 	module_param_array_named(name, name, type, nump, perm)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#194: FILE: kernel/params.c:142:
+			printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#236: FILE: kernel/params.c:210:
+		printk(KERN_ERR "%s: string parameter too %s\n",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#283: FILE: kernel/params.c:354:
+	if (strlen(val)+1 > kp->max) {
 	               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#284: FILE: kernel/params.c:355:
+		printk(KERN_ERR "%s: string doesn't fit in %lu chars.\n",

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#297: FILE: kernel/params.c:365:
+	return strlcpy(buffer, kp->arg, kp->max);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000238419.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 4 warnings, 9 checks, 238 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000238419.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
