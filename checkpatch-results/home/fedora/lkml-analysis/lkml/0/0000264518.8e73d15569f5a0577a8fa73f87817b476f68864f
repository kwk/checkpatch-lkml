ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#240: FILE: include/linux/sysctl.h:137:
+	KERN_INTERACTIVE=67,	/* interactive tasks can have cpu bursts */
 	                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#241: FILE: include/linux/sysctl.h:138:
+	KERN_COMPUTE=68,	/* adjust timeslices for a compute server */
 	            ^

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#401: FILE: kernel/sched.c:73:
+int sched_compute = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#402: FILE: kernel/sched.c:74:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#450: FILE: kernel/sched.c:114:
+	unsigned long bitmap[BITS_TO_LONGS(MAX_PRIO+1)];
 	                                           ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#566: FILE: kernel/sched.c:249:
+	if (likely(!rt_task(p))) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#568: FILE: kernel/sched.c:251:
+		unsigned int task_user_prio = TASK_USER_PRIO(p);
+		return 39 - task_user_prio;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#569: FILE: kernel/sched.c:252:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#580: FILE: kernel/sched.c:259:
+	unsigned int best_burst;
+	best_burst = burst(p);

WARNING:LINE_SPACING: Missing a blank line after declarations
#624: FILE: kernel/sched.c:277:
+	unsigned int slice = RR_INTERVAL();
+	if (likely(!rt_task(p)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#668: FILE: kernel/sched.c:298:
+	unsigned int best_burst;
+	if (rt_task(p))

WARNING:LINE_SPACING: Missing a blank line after declarations
#703: FILE: kernel/sched.c:329:
+	unsigned long total_run = NS_TO_JIFFIES(ns_totalrun);
+	if (p->flags & PF_FORKED || ((!(NS_TO_JIFFIES(p->runtime)) ||

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#703: FILE: kernel/sched.c:329:
+	if (p->flags & PF_FORKED || ((!(NS_TO_JIFFIES(p->runtime)) ||
[...]
+			p->flags &= ~PF_FORKED;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#704: FILE: kernel/sched.c:330:
+^I^I!sched_interactive || sched_compute) && $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#704: FILE: kernel/sched.c:330:
+	if (p->flags & PF_FORKED || ((!(NS_TO_JIFFIES(p->runtime)) ||
+		!sched_interactive || sched_compute) && 

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#825: FILE: kernel/sched.c:593:
+	if (p->prio == rq->curr->prio && (p->slice < slice(p) ||
[...]
+			return 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#826: FILE: kernel/sched.c:594:
+	if (p->prio == rq->curr->prio && (p->slice < slice(p) ||
+		p->time_slice <= rq->curr->time_slice ||

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#829: FILE: kernel/sched.c:597:
+	if (!sched_compute || rq->cache_ticks >= cache_delay ||
[...]
+			return 1;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#830: FILE: kernel/sched.c:598:
+	if (!sched_compute || rq->cache_ticks >= cache_delay ||
+		!p->mm || rt_task(p))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#934: FILE: kernel/sched.c:799:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1029: FILE: kernel/sched.c:1125:
+static inline $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1030: FILE: kernel/sched.c:1126:
+void pull_task(runqueue_t *src_rq, task_t *p, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1031: FILE: kernel/sched.c:1127:
+void pull_task(runqueue_t *src_rq, task_t *p, 
+		runqueue_t *this_rq, int this_cpu)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1093: FILE: kernel/sched.c:1197:
+^Iif (idx >= MAX_PRIO) $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#1245: FILE: kernel/sched.c:1822:
+		if (((smt_curr->slice * (100 - sd->per_cpu_gain) / 100) >
[...]
 				ret = 1;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1256: FILE: kernel/sched.c:1832:
+^I^Iif ((((p->slice * (100 - sd->per_cpu_gain) / 100) > $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#1256: FILE: kernel/sched.c:1832:
+		if ((((p->slice * (100 - sd->per_cpu_gain) / 100) > 
[...]
 				resched_task(smt_curr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1257: FILE: kernel/sched.c:1833:
+^I^I^Islice(smt_curr) || rt_task(p)) && $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1393: FILE: kernel/sched.c:2217:
+	if ((queued = task_queued(p)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1414: FILE: kernel/sched.c:2339:
+	BUG_ON(task_queued(p));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1434: FILE: kernel/sched.c:2415:
+	if ((queued = task_queued(p)))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1579: FILE: kernel/sched.c:3657:
+		memset(rq->bitmap, 0, BITS_TO_LONGS(MAX_PRIO+1)*sizeof(long));
 		                                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1579: FILE: kernel/sched.c:3657:
+		memset(rq->bitmap, 0, BITS_TO_LONGS(MAX_PRIO+1)*sizeof(long));
 		                                               ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1599: FILE: kernel/sysctl.c:922:
+		.maxlen		= sizeof (int),

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1607: FILE: kernel/sysctl.c:930:
+		.maxlen		= sizeof (int),

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000264518.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 13 warnings, 9 checks, 1375 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000264518.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
