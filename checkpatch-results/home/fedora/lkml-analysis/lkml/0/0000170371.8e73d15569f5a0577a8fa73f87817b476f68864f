WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
diff -ruNp 610-extent.patch-old/kernel/power/suspend2_core/extent.c 610-extent.patch-new/kernel/power/suspend2_core/extent.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#31: FILE: kernel/power/suspend2_core/extent.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#32: FILE: kernel/power/suspend2_core/extent.c:2:
+ * kernel/power/suspend2_core/extent.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#33: FILE: kernel/power/suspend2_core/extent.c:3:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#39: FILE: kernel/power/suspend2_core/extent.c:9:
+ * $

WARNING:TYPO_SPELLING: 'continguous' may be misspelled - perhaps 'contiguous'?
#43: FILE: kernel/power/suspend2_core/extent.c:13:
+ * A lot of the data that suspend saves involves continguous extents of memory
                                                  ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#49: FILE: kernel/power/suspend2_core/extent.c:19:
+ * ^Iunsigned long min;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#50: FILE: kernel/power/suspend2_core/extent.c:20:
+ * ^Iunsigned long max;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#51: FILE: kernel/power/suspend2_core/extent.c:21:
+ * ^Istruct extent * next;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#79: FILE: kernel/power/suspend2_core/extent.c:49:
+static struct extent * get_extent(void)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#81: FILE: kernel/power/suspend2_core/extent.c:51:
+	struct extent * result;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#82: FILE: kernel/power/suspend2_core/extent.c:52:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#83: FILE: kernel/power/suspend2_core/extent.c:53:
+	if (!(result = kmalloc(sizeof(struct extent), GFP_ATOMIC)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*result)...) over kmalloc(sizeof(struct extent)...)
#83: FILE: kernel/power/suspend2_core/extent.c:53:
+	if (!(result = kmalloc(sizeof(struct extent), GFP_ATOMIC)))

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#89: FILE: kernel/power/suspend2_core/extent.c:59:
+	result->minimum = result->maximum = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#101: FILE: kernel/power/suspend2_core/extent.c:71:
+void put_extent(struct extent * extent)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#104: FILE: kernel/power/suspend2_core/extent.c:74:
+		printk("Error! put_extent called with NULL extent.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'put_extent', this function's name, in a string
#104: FILE: kernel/power/suspend2_core/extent.c:74:
+		printk("Error! put_extent called with NULL extent.\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#116: FILE: kernel/power/suspend2_core/extent.c:86:
+void put_extent_chain(struct extentchain * chain)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#118: FILE: kernel/power/suspend2_core/extent.c:88:
+	struct extent * this;

ERROR:SPACING: space required before the open parenthesis '('
#125: FILE: kernel/power/suspend2_core/extent.c:95:
+	while(this) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#126: FILE: kernel/power/suspend2_core/extent.c:96:
+		struct extent * next = this->next;

WARNING:LINE_SPACING: Missing a blank line after declarations
#127: FILE: kernel/power/suspend2_core/extent.c:97:
+		struct extent * next = this->next;
+		kfree(this);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that '--' (ctx:WxO)
#129: FILE: kernel/power/suspend2_core/extent.c:99:
+		extents_allocated --;
 		                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#132: FILE: kernel/power/suspend2_core/extent.c:102:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#133: FILE: kernel/power/suspend2_core/extent.c:103:
+	BUG_ON(chain->frees != chain->allocs);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#134: FILE: kernel/power/suspend2_core/extent.c:104:
+	chain->first = chain->last = NULL;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#135: FILE: kernel/power/suspend2_core/extent.c:105:
+	chain->size = chain->allocs = chain->frees = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#138: FILE: kernel/power/suspend2_core/extent.c:108:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#145: FILE: kernel/power/suspend2_core/extent.c:115:
+int append_extent_to_extent_chain(struct extentchain * chain, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#145: FILE: kernel/power/suspend2_core/extent.c:115:
+int append_extent_to_extent_chain(struct extentchain * chain, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#146: FILE: kernel/power/suspend2_core/extent.c:116:
+int append_extent_to_extent_chain(struct extentchain * chain, 
+		unsigned long minimum, unsigned long maximum)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#148: FILE: kernel/power/suspend2_core/extent.c:118:
+	struct extent * newextent = NULL;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#152: FILE: kernel/power/suspend2_core/extent.c:122:
+		printk("Error unable to append a new extent to the chain.\n");

ERROR:SPACING: spaces required around that '+=' (ctx:VxW)
#157: FILE: kernel/power/suspend2_core/extent.c:127:
+	chain->size+= (maximum - minimum + 1);
 	           ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#162: FILE: kernel/power/suspend2_core/extent.c:132:
+	if (chain->last) {
[...]
+	} else 
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#165: FILE: kernel/power/suspend2_core/extent.c:135:
+^I} else $

CHECK:BRACES: Unbalanced braces around else statement
#165: FILE: kernel/power/suspend2_core/extent.c:135:
+	} else 

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#166: FILE: kernel/power/suspend2_core/extent.c:136:
+		chain->last = chain->first = newextent;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#172: FILE: kernel/power/suspend2_core/extent.c:142:
+/* $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#177: FILE: kernel/power/suspend2_core/extent.c:147:
+int serialise_extent_chain(struct extentchain * chain)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#179: FILE: kernel/power/suspend2_core/extent.c:149:
+	struct extent * this;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#181: FILE: kernel/power/suspend2_core/extent.c:151:
+^I$

CHECK:SPACING: No space is necessary after a cast
#182: FILE: kernel/power/suspend2_core/extent.c:152:
+	if ((ret = active_writer->ops.writer.write_header_chunk((char *) chain,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#182: FILE: kernel/power/suspend2_core/extent.c:152:
+	if ((ret = active_writer->ops.writer.write_header_chunk((char *) chain,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#183: FILE: kernel/power/suspend2_core/extent.c:153:
+	if ((ret = active_writer->ops.writer.write_header_chunk((char *) chain,
+		sizeof(struct extentchain) - 2 * sizeof(struct extent *)))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#184: FILE: kernel/power/suspend2_core/extent.c:154:
+		printk("Write header chunk returned %d - aborting serialising chain.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#185: FILE: kernel/power/suspend2_core/extent.c:155:
+		printk("Write header chunk returned %d - aborting serialising chain.\n",
+				ret);

CHECK:SPACING: No space is necessary after a cast
#191: FILE: kernel/power/suspend2_core/extent.c:161:
+		if ((ret = active_writer->ops.writer.write_header_chunk((char *) this,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#191: FILE: kernel/power/suspend2_core/extent.c:161:
+		if ((ret = active_writer->ops.writer.write_header_chunk((char *) this,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#192: FILE: kernel/power/suspend2_core/extent.c:162:
+		if ((ret = active_writer->ops.writer.write_header_chunk((char *) this,
+				2 * sizeof(unsigned long)))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#193: FILE: kernel/power/suspend2_core/extent.c:163:
+			printk("Failed to write extent.\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#202: FILE: kernel/power/suspend2_core/extent.c:172:
+/* $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#207: FILE: kernel/power/suspend2_core/extent.c:177:
+int load_extent_chain(struct extentchain * chain)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#209: FILE: kernel/power/suspend2_core/extent.c:179:
+	struct extent * this, * last = NULL;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#209: FILE: kernel/power/suspend2_core/extent.c:179:
+	struct extent * this, * last = NULL;
 	                      ^

CHECK:SPACING: No space is necessary after a cast
#212: FILE: kernel/power/suspend2_core/extent.c:182:
+	if (!(ret = active_writer->ops.writer.read_header_chunk((char *) chain,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#212: FILE: kernel/power/suspend2_core/extent.c:182:
+	if (!(ret = active_writer->ops.writer.read_header_chunk((char *) chain,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#213: FILE: kernel/power/suspend2_core/extent.c:183:
+	if (!(ret = active_writer->ops.writer.read_header_chunk((char *) chain,
+		sizeof(struct extentchain) - 2 * sizeof(struct extent *)))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#214: FILE: kernel/power/suspend2_core/extent.c:184:
+		printk("Read header chunk returned %d - aborting serialising chain.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#215: FILE: kernel/power/suspend2_core/extent.c:185:
+		printk("Read header chunk returned %d - aborting serialising chain.\n",
+				ret);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*this)...) over kmalloc(sizeof(struct extent)...)
#220: FILE: kernel/power/suspend2_core/extent.c:190:
+		this = kmalloc(sizeof(struct extent), GFP_ATOMIC);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#221: FILE: kernel/power/suspend2_core/extent.c:191:
+		BUG_ON(!this); /* Shouldn't run out of memory trying this! */

CHECK:SPACING: No space is necessary after a cast
#223: FILE: kernel/power/suspend2_core/extent.c:193:
+		if (!(ret = active_writer->ops.writer.read_header_chunk((char *) this,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#223: FILE: kernel/power/suspend2_core/extent.c:193:
+		if (!(ret = active_writer->ops.writer.read_header_chunk((char *) this,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: kernel/power/suspend2_core/extent.c:194:
+		if (!(ret = active_writer->ops.writer.read_header_chunk((char *) this,
+				2 * sizeof(unsigned long)))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#225: FILE: kernel/power/suspend2_core/extent.c:195:
+			printk("Failed to read extent.\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#241: FILE: kernel/power/suspend2_core/extent.h:1:
+/*

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#262: FILE: kernel/power/suspend2_core/extent.h:22:
+	char * name;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#263: FILE: kernel/power/suspend2_core/extent.h:23:
+	struct extent * first;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#264: FILE: kernel/power/suspend2_core/extent.h:24:
+	struct extent * last;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#275: FILE: kernel/power/suspend2_core/extent.h:35:
+	struct extent * next;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#278: FILE: kernel/power/suspend2_core/extent.h:38:
+
+

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#279: FILE: kernel/power/suspend2_core/extent.h:39:
+#define extent_for_each(extentchain, extentpointer, value) \
+if ((extentchain)->first) \
+	for ((extentpointer) = (extentchain)->first, (value) = \
+			(extentpointer)->minimum; \
+	     ((extentpointer) && ((extentpointer)->next || (value) <= \
+				 (extentpointer)->maximum)); \
+	     (((value) == (extentpointer)->maximum) ? \
+		((extentpointer) = (extentpointer)->next, (value) = \
+		 ((extentpointer) ? (extentpointer)->minimum : 0)) : \
+			(value)++))

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'extentchain' - possible side-effects?
#279: FILE: kernel/power/suspend2_core/extent.h:39:
+#define extent_for_each(extentchain, extentpointer, value) \
+if ((extentchain)->first) \
+	for ((extentpointer) = (extentchain)->first, (value) = \
+			(extentpointer)->minimum; \
+	     ((extentpointer) && ((extentpointer)->next || (value) <= \
+				 (extentpointer)->maximum)); \
+	     (((value) == (extentpointer)->maximum) ? \
+		((extentpointer) = (extentpointer)->next, (value) = \
+		 ((extentpointer) ? (extentpointer)->minimum : 0)) : \
+			(value)++))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'extentpointer' - possible side-effects?
#279: FILE: kernel/power/suspend2_core/extent.h:39:
+#define extent_for_each(extentchain, extentpointer, value) \
+if ((extentchain)->first) \
+	for ((extentpointer) = (extentchain)->first, (value) = \
+			(extentpointer)->minimum; \
+	     ((extentpointer) && ((extentpointer)->next || (value) <= \
+				 (extentpointer)->maximum)); \
+	     (((value) == (extentpointer)->maximum) ? \
+		((extentpointer) = (extentpointer)->next, (value) = \
+		 ((extentpointer) ? (extentpointer)->minimum : 0)) : \
+			(value)++))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'value' - possible side-effects?
#279: FILE: kernel/power/suspend2_core/extent.h:39:
+#define extent_for_each(extentchain, extentpointer, value) \
+if ((extentchain)->first) \
+	for ((extentpointer) = (extentchain)->first, (value) = \
+			(extentpointer)->minimum; \
+	     ((extentpointer) && ((extentpointer)->next || (value) <= \
+				 (extentpointer)->maximum)); \
+	     (((value) == (extentpointer)->maximum) ? \
+		((extentpointer) = (extentpointer)->next, (value) = \
+		 ((extentpointer) ? (extentpointer)->minimum : 0)) : \
+			(value)++))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'currentextent' - possible side-effects?
#295: FILE: kernel/power/suspend2_core/extent.h:55:
+#define GET_EXTENT_NEXT(currentextent, currentval) \
+{ \
+	if (currentextent) { \
+		if ((currentval) == (currentextent)->maximum) { \
+			if ((currentextent)->next) { \
+				(currentextent) = (currentextent)->next; \
+				(currentval) = (currentextent)->minimum; \
+			} else { \
+				(currentextent) = NULL; \
+				(currentval) = 0; \
+			} \
+		} else \
+			currentval++; \
+	} \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'currentval' - possible side-effects?
#295: FILE: kernel/power/suspend2_core/extent.h:55:
+#define GET_EXTENT_NEXT(currentextent, currentval) \
+{ \
+	if (currentextent) { \
+		if ((currentval) == (currentextent)->maximum) { \
+			if ((currentextent)->next) { \
+				(currentextent) = (currentextent)->next; \
+				(currentval) = (currentextent)->minimum; \
+			} else { \
+				(currentextent) = NULL; \
+				(currentval) = 0; \
+			} \
+		} else \
+			currentval++; \
+	} \
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#312: FILE: kernel/power/suspend2_core/extent.h:72:
+void put_extent(struct extent * extent);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#313: FILE: kernel/power/suspend2_core/extent.h:73:
+void put_extent_chain(struct extentchain * chain);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#314: FILE: kernel/power/suspend2_core/extent.h:74:
+int append_extent_to_extent_chain(struct extentchain * chain, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#314: FILE: kernel/power/suspend2_core/extent.h:74:
+int append_extent_to_extent_chain(struct extentchain * chain, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#315: FILE: kernel/power/suspend2_core/extent.h:75:
+int append_extent_to_extent_chain(struct extentchain * chain, 
+		unsigned long minimum, unsigned long maximum);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#316: FILE: kernel/power/suspend2_core/extent.h:76:
+int serialise_extent_chain(struct extentchain * chain);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#317: FILE: kernel/power/suspend2_core/extent.h:77:
+int load_extent_chain(struct extentchain * chain);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#319: FILE: kernel/power/suspend2_core/extent.h:79:
+/* swap_entry_to_extent_val & extent_val_to_swap_entry: $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#321: FILE: kernel/power/suspend2_core/extent.h:81:
+ * make consecutive extent values */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#323: FILE: kernel/power/suspend2_core/extent.h:83:
+#define extent_val_to_swap_entry(val) (swp_entry_t) { (val) }

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000170371.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 44 errors, 19 warnings, 26 checks, 290 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000170371.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
