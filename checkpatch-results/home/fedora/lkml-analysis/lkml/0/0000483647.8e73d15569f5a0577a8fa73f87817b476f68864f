ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#53: FILE: include/linux/sysctl.h:292:
+	NET_IPV4_ICMP_RATEMASK=90,
 	                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#54: FILE: include/linux/sysctl.h:293:
+        NET_IPV4_DEFAULT_BIND=91$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#54: FILE: include/linux/sysctl.h:293:
+        NET_IPV4_DEFAULT_BIND=91$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#54: FILE: include/linux/sysctl.h:293:
+        NET_IPV4_DEFAULT_BIND=91
                              ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#63: FILE: include/linux/sysctl.h:646:
+extern int proc_doinaddr(ctl_table *, int, struct file *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ctl_table *' should also have an identifier name
#63: FILE: include/linux/sysctl.h:646:
+extern int proc_doinaddr(ctl_table *, int, struct file *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#63: FILE: include/linux/sysctl.h:646:
+extern int proc_doinaddr(ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#63: FILE: include/linux/sysctl.h:646:
+extern int proc_doinaddr(ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#63: FILE: include/linux/sysctl.h:646:
+extern int proc_doinaddr(ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t *' should also have an identifier name
#63: FILE: include/linux/sysctl.h:646:
+extern int proc_doinaddr(ctl_table *, int, struct file *,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#76: FILE: kernel/sysctl.c:811:
+static int proc_inet_aton (char const *c, int blen, struct in_addr *addr)

ERROR:CODE_INDENT: code indent should use tabs where possible
#78: FILE: kernel/sysctl.c:813:
+        unsigned int _n[4] = {0};$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: kernel/sysctl.c:813:
+        unsigned int _n[4] = {0};$

ERROR:CODE_INDENT: code indent should use tabs where possible
#79: FILE: kernel/sysctl.c:814:
+        unsigned int *n = _n;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: kernel/sysctl.c:814:
+        unsigned int *n = _n;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#81: FILE: kernel/sysctl.c:816:
+        while (blen && isspace (*c)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: kernel/sysctl.c:816:
+        while (blen && isspace (*c)) {$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#81: FILE: kernel/sysctl.c:816:
+        while (blen && isspace (*c)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#82: FILE: kernel/sysctl.c:817:
+                ++c;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: kernel/sysctl.c:817:
+                ++c;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#83: FILE: kernel/sysctl.c:818:
+                --blen;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#83: FILE: kernel/sysctl.c:818:
+                --blen;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#84: FILE: kernel/sysctl.c:819:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: kernel/sysctl.c:819:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#85: FILE: kernel/sysctl.c:820:
+        while (blen) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: kernel/sysctl.c:820:
+        while (blen) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#86: FILE: kernel/sysctl.c:821:
+                if (!isdigit (*c))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: kernel/sysctl.c:821:
+                if (!isdigit (*c))$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#86: FILE: kernel/sysctl.c:821:
+                if (!isdigit (*c))

ERROR:CODE_INDENT: code indent should use tabs where possible
#87: FILE: kernel/sysctl.c:822:
+                        return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#87: FILE: kernel/sysctl.c:822:
+                        return 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#88: FILE: kernel/sysctl.c:823:
+                while (blen && isdigit (*c)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: kernel/sysctl.c:823:
+                while (blen && isdigit (*c)) {$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#88: FILE: kernel/sysctl.c:823:
+                while (blen && isdigit (*c)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#89: FILE: kernel/sysctl.c:824:
+                        *n = *n * 10 + *c++ - '0';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: kernel/sysctl.c:824:
+                        *n = *n * 10 + *c++ - '0';$

ERROR:CODE_INDENT: code indent should use tabs where possible
#90: FILE: kernel/sysctl.c:825:
+                        --blen;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: kernel/sysctl.c:825:
+                        --blen;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#91: FILE: kernel/sysctl.c:826:
+                        if (*n > 255) /* error: stop */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: kernel/sysctl.c:826:
+                        if (*n > 255) /* error: stop */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#92: FILE: kernel/sysctl.c:827:
+                                return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: kernel/sysctl.c:827:
+                                return 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#93: FILE: kernel/sysctl.c:828:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: kernel/sysctl.c:828:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#94: FILE: kernel/sysctl.c:829:
+                if (blen && '.' == *c) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: kernel/sysctl.c:829:
+                if (blen && '.' == *c) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#95: FILE: kernel/sysctl.c:830:
+                        ++c;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: kernel/sysctl.c:830:
+                        ++c;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#96: FILE: kernel/sysctl.c:831:
+                        --blen;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: kernel/sysctl.c:831:
+                        --blen;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#97: FILE: kernel/sysctl.c:832:
+                        if (!blen) /* error: need more digits */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: kernel/sysctl.c:832:
+                        if (!blen) /* error: need more digits */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#98: FILE: kernel/sysctl.c:833:
+                                return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: kernel/sysctl.c:833:
+                                return 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#99: FILE: kernel/sysctl.c:834:
+                        if (n == &_n[3]) /* error: don't inc n */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: kernel/sysctl.c:834:
+                        if (n == &_n[3]) /* error: don't inc n */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#100: FILE: kernel/sysctl.c:835:
+                                return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: kernel/sysctl.c:835:
+                                return 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#101: FILE: kernel/sysctl.c:836:
+                        ++n;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: kernel/sysctl.c:836:
+                        ++n;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#102: FILE: kernel/sysctl.c:837:
+                        continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: kernel/sysctl.c:837:
+                        continue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#103: FILE: kernel/sysctl.c:838:
+                } else { /* should have been last char */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: kernel/sysctl.c:838:
+                } else { /* should have been last char */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#104: FILE: kernel/sysctl.c:839:
+                        if (blen && !isspace (*c))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: kernel/sysctl.c:839:
+                        if (blen && !isspace (*c))$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#104: FILE: kernel/sysctl.c:839:
+                        if (blen && !isspace (*c))

ERROR:CODE_INDENT: code indent should use tabs where possible
#105: FILE: kernel/sysctl.c:840:
+                                return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: kernel/sysctl.c:840:
+                                return 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#106: FILE: kernel/sysctl.c:841:
+                        else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: kernel/sysctl.c:841:
+                        else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#107: FILE: kernel/sysctl.c:842:
+                                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: kernel/sysctl.c:842:
+                                break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#108: FILE: kernel/sysctl.c:843:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: kernel/sysctl.c:843:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#109: FILE: kernel/sysctl.c:844:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: kernel/sysctl.c:844:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#110: FILE: kernel/sysctl.c:845:
+        if (n != &_n[3])$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: kernel/sysctl.c:845:
+        if (n != &_n[3])$

ERROR:CODE_INDENT: code indent should use tabs where possible
#111: FILE: kernel/sysctl.c:846:
+                return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: kernel/sysctl.c:846:
+                return 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#113: FILE: kernel/sysctl.c:848:
+        addr->s_addr = htonl (_n[0]<<24 | _n[1]<<16 | _n[2]<<8 | _n[3]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: kernel/sysctl.c:848:
+        addr->s_addr = htonl (_n[0]<<24 | _n[1]<<16 | _n[2]<<8 | _n[3]);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#113: FILE: kernel/sysctl.c:848:
+        addr->s_addr = htonl (_n[0]<<24 | _n[1]<<16 | _n[2]<<8 | _n[3]);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#113: FILE: kernel/sysctl.c:848:
+        addr->s_addr = htonl (_n[0]<<24 | _n[1]<<16 | _n[2]<<8 | _n[3]);
                                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#113: FILE: kernel/sysctl.c:848:
+        addr->s_addr = htonl (_n[0]<<24 | _n[1]<<16 | _n[2]<<8 | _n[3]);
                                                ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#113: FILE: kernel/sysctl.c:848:
+        addr->s_addr = htonl (_n[0]<<24 | _n[1]<<16 | _n[2]<<8 | _n[3]);
                                                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#114: FILE: kernel/sysctl.c:849:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: kernel/sysctl.c:849:
+        return 0;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#117: FILE: kernel/sysctl.c:852:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#122: FILE: kernel/sysctl.c:857:
+ * @filp: the file structure
     ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#131: FILE: kernel/sysctl.c:866:
+int proc_doinaddr (ctl_table *table, int write, struct file *filp,
                                                              ^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#131: FILE: kernel/sysctl.c:866:
+int proc_doinaddr (ctl_table *table, int write, struct file *filp,

ERROR:CODE_INDENT: code indent should use tabs where possible
#132: FILE: kernel/sysctl.c:867:
+                    void *buffer, size_t *lenp)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#132: FILE: kernel/sysctl.c:867:
+int proc_doinaddr (ctl_table *table, int write, struct file *filp,
+                    void *buffer, size_t *lenp)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: kernel/sysctl.c:867:
+                    void *buffer, size_t *lenp)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#134: FILE: kernel/sysctl.c:869:
+        #define TMPBUFLEN 20$

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: kernel/sysctl.c:870:
+        char buf[TMPBUFLEN];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: kernel/sysctl.c:870:
+        char buf[TMPBUFLEN];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#136: FILE: kernel/sysctl.c:871:
+        size_t len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: kernel/sysctl.c:871:
+        size_t len;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#138: FILE: kernel/sysctl.c:873:
+        if (!table->data || table->maxlen != sizeof (struct in_addr) || !*lenp$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: kernel/sysctl.c:873:
+        if (!table->data || table->maxlen != sizeof (struct in_addr) || !*lenp$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#138: FILE: kernel/sysctl.c:873:
+        if (!table->data || table->maxlen != sizeof (struct in_addr) || !*lenp

ERROR:CODE_INDENT: code indent should use tabs where possible
#139: FILE: kernel/sysctl.c:874:
+                        || (filp->f_pos && !write)) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#139: FILE: kernel/sysctl.c:874:
+        if (!table->data || table->maxlen != sizeof (struct in_addr) || !*lenp
+                        || (filp->f_pos && !write)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: kernel/sysctl.c:874:
+                        || (filp->f_pos && !write)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#140: FILE: kernel/sysctl.c:875:
+                *lenp = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: kernel/sysctl.c:875:
+                *lenp = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#141: FILE: kernel/sysctl.c:876:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: kernel/sysctl.c:876:
+                return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#142: FILE: kernel/sysctl.c:877:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: kernel/sysctl.c:877:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#144: FILE: kernel/sysctl.c:879:
+        if (write) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: kernel/sysctl.c:879:
+        if (write) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#145: FILE: kernel/sysctl.c:880:
+                struct in_addr addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: kernel/sysctl.c:880:
+                struct in_addr addr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#146: FILE: kernel/sysctl.c:881:
+                if (*lenp > TMPBUFLEN - 2)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#146: FILE: kernel/sysctl.c:881:
+                struct in_addr addr;
+                if (*lenp > TMPBUFLEN - 2)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: kernel/sysctl.c:881:
+                if (*lenp > TMPBUFLEN - 2)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#147: FILE: kernel/sysctl.c:882:
+                        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: kernel/sysctl.c:882:
+                        return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#148: FILE: kernel/sysctl.c:883:
+                len = *lenp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: kernel/sysctl.c:883:
+                len = *lenp;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#149: FILE: kernel/sysctl.c:884:
+                if (copy_from_user (buf, buffer, len))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: kernel/sysctl.c:884:
+                if (copy_from_user (buf, buffer, len))$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#149: FILE: kernel/sysctl.c:884:
+                if (copy_from_user (buf, buffer, len))

ERROR:CODE_INDENT: code indent should use tabs where possible
#150: FILE: kernel/sysctl.c:885:
+                        return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: kernel/sysctl.c:885:
+                        return -EFAULT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: kernel/sysctl.c:886:
+                buf[len] = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: kernel/sysctl.c:886:
+                buf[len] = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: kernel/sysctl.c:887:
+                if (! proc_inet_aton (buf, len, &addr))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: kernel/sysctl.c:887:
+                if (! proc_inet_aton (buf, len, &addr))$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#152: FILE: kernel/sysctl.c:887:
+                if (! proc_inet_aton (buf, len, &addr))

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#152: FILE: kernel/sysctl.c:887:
+                if (! proc_inet_aton (buf, len, &addr))
                     ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: kernel/sysctl.c:888:
+                        ((struct in_addr*)table->data)->s_addr = addr.s_addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: kernel/sysctl.c:888:
+                        ((struct in_addr*)table->data)->s_addr = addr.s_addr;$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#153: FILE: kernel/sysctl.c:888:
+                        ((struct in_addr*)table->data)->s_addr = addr.s_addr;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: kernel/sysctl.c:889:
+                filp->f_pos += len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: kernel/sysctl.c:889:
+                filp->f_pos += len;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: kernel/sysctl.c:890:
+        } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: kernel/sysctl.c:890:
+        } else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: kernel/sysctl.c:891:
+                uint32_t addr = ntohl (((struct in_addr*)table->data)->s_addr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: kernel/sysctl.c:891:
+                uint32_t addr = ntohl (((struct in_addr*)table->data)->s_addr);$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#156: FILE: kernel/sysctl.c:891:
+                uint32_t addr = ntohl (((struct in_addr*)table->data)->s_addr);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#156: FILE: kernel/sysctl.c:891:
+                uint32_t addr = ntohl (((struct in_addr*)table->data)->s_addr);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#156: FILE: kernel/sysctl.c:891:
+                uint32_t addr = ntohl (((struct in_addr*)table->data)->s_addr);

ERROR:CODE_INDENT: code indent should use tabs where possible
#157: FILE: kernel/sysctl.c:892:
+                len = snprintf (buf, TMPBUFLEN - 2, "%d.%d.%d.%d\n",$

WARNING:LINE_SPACING: Missing a blank line after declarations
#157: FILE: kernel/sysctl.c:892:
+                uint32_t addr = ntohl (((struct in_addr*)table->data)->s_addr);
+                len = snprintf (buf, TMPBUFLEN - 2, "%d.%d.%d.%d\n",

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: kernel/sysctl.c:892:
+                len = snprintf (buf, TMPBUFLEN - 2, "%d.%d.%d.%d\n",$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#157: FILE: kernel/sysctl.c:892:
+                len = snprintf (buf, TMPBUFLEN - 2, "%d.%d.%d.%d\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: kernel/sysctl.c:893:
+                                (addr >> 24) & 0xff, (addr >> 16) & 0xff,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: kernel/sysctl.c:893:
+                                (addr >> 24) & 0xff, (addr >> 16) & 0xff,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#159: FILE: kernel/sysctl.c:894:
+                                (addr >> 8) & 0xff, (addr) & 0xff);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: kernel/sysctl.c:894:
+                                (addr >> 8) & 0xff, (addr) & 0xff);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#160: FILE: kernel/sysctl.c:895:
+                buf[len] = 0;  /* kernel snprintf never returns -1 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: kernel/sysctl.c:895:
+                buf[len] = 0;  /* kernel snprintf never returns -1 */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#161: FILE: kernel/sysctl.c:896:
+                if (len > *lenp)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: kernel/sysctl.c:896:
+                if (len > *lenp)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#162: FILE: kernel/sysctl.c:897:
+                        len = *lenp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: kernel/sysctl.c:897:
+                        len = *lenp;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#163: FILE: kernel/sysctl.c:898:
+                if (copy_to_user (buffer, buf, len))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: kernel/sysctl.c:898:
+                if (copy_to_user (buffer, buf, len))$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#163: FILE: kernel/sysctl.c:898:
+                if (copy_to_user (buffer, buf, len))

ERROR:CODE_INDENT: code indent should use tabs where possible
#164: FILE: kernel/sysctl.c:899:
+                        return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: kernel/sysctl.c:899:
+                        return -EFAULT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: kernel/sysctl.c:900:
+                *lenp = len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: kernel/sysctl.c:900:
+                *lenp = len;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#166: FILE: kernel/sysctl.c:901:
+                filp->f_pos += len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: kernel/sysctl.c:901:
+                filp->f_pos += len;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#167: FILE: kernel/sysctl.c:902:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: kernel/sysctl.c:902:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#169: FILE: kernel/sysctl.c:904:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: kernel/sysctl.c:904:
+        return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#192: FILE: net/ipv4/af_inet.c:490:
+        /* this will catch UDP sockets not bound before connect() */$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#193: FILE: net/ipv4/af_inet.c:491:
+	if (addr->sin_addr.s_addr == INADDR_ANY) {
+		addr->sin_addr.s_addr = sysctl_ip_default_bind.s_addr;
+        }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#195: FILE: net/ipv4/af_inet.c:493:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: net/ipv4/af_inet.c:493:
+        }$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#206: FILE: net/ipv4/sysctl_net_ipv4.c:20:
+extern struct in_addr sysctl_ip_default_bind;

ERROR:CODE_INDENT: code indent should use tabs where possible
#236: FILE: net/ipv4/tcp_ipv4.c:670:
+        /* This will catch TCP sockets not bound before connect */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#237: FILE: net/ipv4/tcp_ipv4.c:671:
+        if (sk->saddr == INADDR_ANY) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: net/ipv4/tcp_ipv4.c:671:
+        if (sk->saddr == INADDR_ANY) {$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#237: FILE: net/ipv4/tcp_ipv4.c:671:
+        if (sk->saddr == INADDR_ANY) {
+                sk->saddr = sysctl_ip_default_bind.s_addr;
+        }

ERROR:CODE_INDENT: code indent should use tabs where possible
#238: FILE: net/ipv4/tcp_ipv4.c:672:
+                sk->saddr = sysctl_ip_default_bind.s_addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: net/ipv4/tcp_ipv4.c:672:
+                sk->saddr = sysctl_ip_default_bind.s_addr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#239: FILE: net/ipv4/tcp_ipv4.c:673:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: net/ipv4/tcp_ipv4.c:673:
+        }$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000483647.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 81 errors, 98 warnings, 8 checks, 174 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000483647.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
