WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
[Net/IPv4]: Modifications to the UDP module and generic UDP/-Lite processing.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#67: FILE: include/net/udp.h:46:
+#if defined(CONFIG_IPV6) || defined (CONFIG_IPV6_MODULE)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#74: FILE: include/net/udp.h:53:
+};
+#define UDP_SKB_CB(__skb)	((struct udp_skb_cb *)((__skb)->cb))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#81: FILE: include/net/udp.h:60:
+	if (! UDP_SKB_CB(skb)->partial_cov)
 	    ^

WARNING:INLINE: plain inline is preferred over __inline__
#87: FILE: include/net/udp.h:66:
+static __inline__ int udp_checksum_complete(struct sk_buff *skb)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#103: FILE: include/net/udp.h:84:
+ * is almost fully identical with UDPv4's. ^I-grrtrr$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#116: FILE: include/net/udp.h:96:
 }
+static __inline__ int udp_lport_inuse(u16 num)

WARNING:INLINE: plain inline is preferred over __inline__
#116: FILE: include/net/udp.h:96:
+static __inline__ int udp_lport_inuse(u16 num)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#131: FILE: include/net/udp.h:127:
+ * ^ISNMP statistics for UDP and UDP-Lite$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#133: FILE: include/net/udp.h:129:
+#define UDP_INC_STATS(field, is_udplite)				\
+	if (is_udplite) SNMP_INC_STATS(udplite_statistics, field);	\
+	else		SNMP_INC_STATS(udp_statistics,     field);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#133: FILE: include/net/udp.h:129:
+#define UDP_INC_STATS(field, is_udplite)				\
+	if (is_udplite) SNMP_INC_STATS(udplite_statistics, field);	\
+	else		SNMP_INC_STATS(udp_statistics,     field);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#133: FILE: include/net/udp.h:129:
+#define UDP_INC_STATS(field, is_udplite)				\
+	if (is_udplite) SNMP_INC_STATS(udplite_statistics, field);	\
+	else		SNMP_INC_STATS(udp_statistics,     field);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#134: FILE: include/net/udp.h:130:
+	if (is_udplite) SNMP_INC_STATS(udplite_statistics, field);	\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#135: FILE: include/net/udp.h:131:
+	else		SNMP_INC_STATS(udp_statistics,     field);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#136: FILE: include/net/udp.h:132:
+#define UDP_INC_STATS_USER(field, is_udplite)				\
+	if (is_udplite) SNMP_INC_STATS_USER(udplite_statistics, field);	\
+	else		SNMP_INC_STATS_USER(udp_statistics,     field);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#136: FILE: include/net/udp.h:132:
+#define UDP_INC_STATS_USER(field, is_udplite)				\
+	if (is_udplite) SNMP_INC_STATS_USER(udplite_statistics, field);	\
+	else		SNMP_INC_STATS_USER(udp_statistics,     field);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#136: FILE: include/net/udp.h:132:
+#define UDP_INC_STATS_USER(field, is_udplite)				\
+	if (is_udplite) SNMP_INC_STATS_USER(udplite_statistics, field);	\
+	else		SNMP_INC_STATS_USER(udp_statistics,     field);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#137: FILE: include/net/udp.h:133:
+	if (is_udplite) SNMP_INC_STATS_USER(udplite_statistics, field);	\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#138: FILE: include/net/udp.h:134:
+	else		SNMP_INC_STATS_USER(udp_statistics,     field);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#139: FILE: include/net/udp.h:135:
+#define UDP_INC_STATS_BH(field, is_udplite)				\
+	if (is_udplite) SNMP_INC_STATS_BH(udplite_statistics, field);	\
+	else		SNMP_INC_STATS_BH(udp_statistics,     field);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#139: FILE: include/net/udp.h:135:
+#define UDP_INC_STATS_BH(field, is_udplite)				\
+	if (is_udplite) SNMP_INC_STATS_BH(udplite_statistics, field);	\
+	else		SNMP_INC_STATS_BH(udp_statistics,     field);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#139: FILE: include/net/udp.h:135:
+#define UDP_INC_STATS_BH(field, is_udplite)				\
+	if (is_udplite) SNMP_INC_STATS_BH(udplite_statistics, field);	\
+	else		SNMP_INC_STATS_BH(udp_statistics,     field);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#140: FILE: include/net/udp.h:136:
+	if (is_udplite) SNMP_INC_STATS_BH(udplite_statistics, field);	\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#141: FILE: include/net/udp.h:137:
+	else		SNMP_INC_STATS_BH(udp_statistics,     field);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#142: FILE: include/net/udp.h:138:
+#define UDP_DEC_STATS_BH(field, is_udplite)				\
+	if (is_udplite) SNMP_DEC_STATS_BH(udplite_statistics, field);	\
+	else		SNMP_DEC_STATS_BH(udp_statistics,     field);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#142: FILE: include/net/udp.h:138:
+#define UDP_DEC_STATS_BH(field, is_udplite)				\
+	if (is_udplite) SNMP_DEC_STATS_BH(udplite_statistics, field);	\
+	else		SNMP_DEC_STATS_BH(udp_statistics,     field);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#142: FILE: include/net/udp.h:138:
+#define UDP_DEC_STATS_BH(field, is_udplite)				\
+	if (is_udplite) SNMP_DEC_STATS_BH(udplite_statistics, field);	\
+	else		SNMP_DEC_STATS_BH(udp_statistics,     field);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#143: FILE: include/net/udp.h:139:
+	if (is_udplite) SNMP_DEC_STATS_BH(udplite_statistics, field);	\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#144: FILE: include/net/udp.h:140:
+	else		SNMP_DEC_STATS_BH(udp_statistics,     field);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#186: FILE: net/ipv4/udp.c:126:
+ * ^I__udp_get_port  -  find an unbound UDP(-Lite) port$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#188: FILE: net/ipv4/udp.c:128:
+ * ^I@sk:         udp_sock$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#189: FILE: net/ipv4/udp.c:129:
+ * ^I@snum:       port number to look up$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#190: FILE: net/ipv4/udp.c:130:
+ * ^I@udptable:   hash list table, must be of UDP_HTABLE_SIZE$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#191: FILE: net/ipv4/udp.c:131:
+ * ^I@port_rover: pointer to record of last unallocated port$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#194: FILE: net/ipv4/udp.c:134:
+int __udp_get_port(struct sock *sk, unsigned short snum,
+		  struct hlist_head udptable[], int *port_rover)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#210: FILE: net/ipv4/udp.c:148:
+		best = result = *port_rover;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#225: FILE: net/ipv4/udp.c:175:
+			if (! __udp_lport_inuse(result, udptable))
 			    ^

WARNING:INLINE: plain inline is preferred over __inline__
#253: FILE: net/ipv4/udp.c:215:
+static __inline__ int udp_v4_get_port(struct sock *sk, unsigned short snum)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#268: FILE: net/ipv4/udp.c:236:
+ * ^I__udp_lookup  -  find UDP(-Lite) socket$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#270: FILE: net/ipv4/udp.c:238:
+ * ^I@udptable:   hash list table, must be of UDP_HTABLE_SIZE$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#272: FILE: net/ipv4/udp.c:240:
+ * ^IUDP nearly always wildcards out the wazoo, it makes no sense to try$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#273: FILE: net/ipv4/udp.c:241:
+ * ^Iharder than this. -DaveM$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#278: FILE: net/ipv4/udp.c:244:
+			  struct hlist_head udptable[]                        )

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#323: FILE: net/ipv4/udp.c:328:
+ * ^I__udp_err  -  generic UDP/-Lite error routine$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#325: FILE: net/ipv4/udp.c:330:
+ * ^I@udptable:   hash list table, must be of UDP_HTABLE_SIZE$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#346: FILE: net/ipv4/udp.c:353:
+			  skb->dev->ifindex, udptable                   );

WARNING:INLINE: plain inline is preferred over __inline__
#354: FILE: net/ipv4/udp.c:407:
+__inline__ void udp_err(struct sk_buff *skb, u32 info)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#371: FILE: net/ipv4/udp.c:427:
+			      int totlen, u32 src, u32 dst         )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#408: FILE: net/ipv4/udp.c:446:
+						       IPPROTO_UDP, 0   );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#418: FILE: net/ipv4/udp.c:450:
+					    skb->csum                        );

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#438: FILE: net/ipv4/udp.c:465:
+			skb->csum = csum_partial(skb->h.raw,
 					sizeof(struct udphdr), skb->csum);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#456: FILE: net/ipv4/udp.c:478:
+
+

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#458: FILE: net/ipv4/udp.c:480:
+/*
+ * Push out all pending data as one UDP/-Lite datagram. Socket is locked.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#470: FILE: net/ipv4/udp.c:492:
+	if ((skb = skb_peek(&sk->sk_write_queue)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#474: FILE: net/ipv4/udp.c:496:
+	/*
+	 * Create a UDP header

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#482: FILE: net/ipv4/udp.c:504:
+^I * ^IIf sender has set `partial coverage' socket option on a$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#482: FILE: net/ipv4/udp.c:504:
+	/*
+	 * 	If sender has set `partial coverage' socket option on a

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#483: FILE: net/ipv4/udp.c:505:
+^I * ^IUDP-Lite socket, adjust coverage length accordingly.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#484: FILE: net/ipv4/udp.c:506:
+^I * ^IAll other cases default to traditional UDP checksum mode.$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#489: FILE: net/ipv4/udp.c:511:
+			 * partial coverage only if  0 < up->pcslen < up->len */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 31)
#490: FILE: net/ipv4/udp.c:512:
+			if (0 < up->pcslen) {
+			       cscov = up->pcslen;

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#490: FILE: net/ipv4/udp.c:512:
+			if (0 < up->pcslen) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#490: FILE: net/ipv4/udp.c:512:
+			if (0 < up->pcslen) {
+			       cscov = up->pcslen;
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#496: FILE: net/ipv4/udp.c:518:
+		/*
+		 * NOTE: Causes for the error case  `up->pcslen > up->len':

ERROR:SPACING: space required before the open parenthesis '('
#507: FILE: net/ipv4/udp.c:529:
+	if(up->pcflag)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#527: FILE: net/ipv4/udp.c:543:
+ * ^Iudp_sendmsg  -  generic UDP/-Lite send routine$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#529: FILE: net/ipv4/udp.c:545:
+ * ^IThis function is udplite-aware and works for both protocols.$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#541: FILE: net/ipv4/udp.c:562:
+	int (*getfrag)(void *, char *, int, int, int, struct sk_buff *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#541: FILE: net/ipv4/udp.c:562:
+	int (*getfrag)(void *, char *, int, int, int, struct sk_buff *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#541: FILE: net/ipv4/udp.c:562:
+	int (*getfrag)(void *, char *, int, int, int, struct sk_buff *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#541: FILE: net/ipv4/udp.c:562:
+	int (*getfrag)(void *, char *, int, int, int, struct sk_buff *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#541: FILE: net/ipv4/udp.c:562:
+	int (*getfrag)(void *, char *, int, int, int, struct sk_buff *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sk_buff *' should also have an identifier name
#541: FILE: net/ipv4/udp.c:562:
+	int (*getfrag)(void *, char *, int, int, int, struct sk_buff *);

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#560: FILE: net/ipv4/udp.c:712:
+	getfrag  =  is_udplite?  udplite_getfrag : ip_generic_getfrag;
 	                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#562: FILE: net/ipv4/udp.c:714:
+	err = ip_append_data(sk, getfrag, msg->msg_iov, ulen,
+			sizeof(struct udphdr), &ipc, rt,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#582: FILE: net/ipv4/udp.c:741:
+ * ^Iudp_sendpage  -  generic UDP/-Lite sendpage routine$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#584: FILE: net/ipv4/udp.c:743:
+ * ^IThis function is udplite-aware and can be used on both sockets.$

ERROR:SPACING: space required before the open parenthesis '('
#603: FILE: net/ipv4/udp.c:799:
+	switch(cmd)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#626: FILE: net/ipv4/udp.c:835:
+ * ^Iudp_recvmsg  -  generic UDP/-Lite receive processing$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#628: FILE: net/ipv4/udp.c:837:
+ * ^IThis routine is udplite-aware and works for both protocols.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#629: FILE: net/ipv4/udp.c:838:
+ * ^IPrinciple: if there is something there we return it, otherwise we block.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#635: FILE: net/ipv4/udp.c:842:
+^I        size_t len, int noblock, int flags, int *addr_len)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#635: FILE: net/ipv4/udp.c:842:
+int udp_recvmsg(struct kiocb *iocb, struct sock *sk, struct msghdr *msg,
+	        size_t len, int noblock, int flags, int *addr_len)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#654: FILE: net/ipv4/udp.c:870:
+^I * ^IDecide whether to checksum and/or copy data.$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#654: FILE: net/ipv4/udp.c:870:
+	/*
+	 * 	Decide whether to checksum and/or copy data.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#656: FILE: net/ipv4/udp.c:872:
+^I * ^IUDP:      checksum may have been computed in HW,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#657: FILE: net/ipv4/udp.c:873:
+^I * ^I          (re-)compute it if message is truncated.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#658: FILE: net/ipv4/udp.c:874:
+^I * ^IUDP-Lite: always needs to checksum, no HW support.$

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#662: FILE: net/ipv4/udp.c:878:
+	if (is_udplite  ||  (!copy_only  &&  msg->msg_flags&MSG_TRUNC)) {
 	                                                   ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#674: FILE: net/ipv4/udp.c:886:
+					      msg->msg_iov, copied       );

CHECK:BRACES: Unbalanced braces around else statement
#675: FILE: net/ipv4/udp.c:887:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#677: FILE: net/ipv4/udp.c:889:
+		err = skb_copy_and_csum_datagram_iovec(skb,
+					   sizeof(struct udphdr), msg->msg_iov);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#710: FILE: net/ipv4/udp.c:957:
+ * ^Iudp_encap_rcv  -  handle encapsulated packets$

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#714: FILE: net/ipv4/udp.c:961:
+ * 	1  if the the UDP(-Lite) system should process it

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#714: FILE: net/ipv4/udp.c:961:
+ * ^I1  if the the UDP(-Lite) system should process it$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#724: FILE: net/ipv4/udp.c:1049:
+ * ^Iudp_queue_rcv_skb  -  receive queue processing$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#736: FILE: net/ipv4/udp.c:1060:
+int udp_queue_rcv_skb(struct sock * sk, struct sk_buff *skb)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#770: FILE: net/ipv4/udp.c:1095:
+		/* FALLTHROUGH -- it's a UDP/-Lite Packet */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#779: FILE: net/ipv4/udp.c:1099:
+^I * ^IUDP-Lite specific tests, ignored on UDP sockets$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#779: FILE: net/ipv4/udp.c:1099:
+	/*
+	 * 	UDP-Lite specific tests, ignored on UDP sockets

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#782: FILE: net/ipv4/udp.c:1102:
+	if ((up->pcflag & UDPLITE_RECV_CC)  &&  UDP_SKB_CB(skb)->partial_cov) {
+

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#784: FILE: net/ipv4/udp.c:1104:
+		/*
+		 * MIB statistics other than incrementing the error count are

WARNING:SPLIT_STRING: quoted string split across lines
#797: FILE: net/ipv4/udp.c:1117:
+			LIMIT_NETDEBUG(KERN_WARNING "UDPLITE: partial coverage "
+				"%d while full coverage %d requested\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#827: FILE: net/ipv4/udp.c:1141:
+	if (sock_queue_rcv_skb(sk,skb) < 0)
 	                         ^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#831: FILE: net/ipv4/udp.c:1145:
+	/*
+	 * XXX Incrementing this counter when the datagram is later taken off

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#850: FILE: net/ipv4/udp.c:1162:
+ * ^I__udp_mcast_deliver  -   generic multicast delivery$

ERROR:CODE_INDENT: code indent should use tabs where possible
#859: FILE: net/ipv4/udp.c:1169:
+^I^I        u32 saddr, u32 daddr, struct hlist_head udptable[])$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#859: FILE: net/ipv4/udp.c:1169:
+int __udp_mcast_deliver(struct sk_buff *skb, struct udphdr *uh,
+		        u32 saddr, u32 daddr, struct hlist_head udptable[])

WARNING:INLINE: plain inline is preferred over __inline__
#878: FILE: net/ipv4/udp.c:1204:
+static __inline__ int udp_v4_mcast_deliver(struct sk_buff *skb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#879: FILE: net/ipv4/udp.c:1205:
+static __inline__ int udp_v4_mcast_deliver(struct sk_buff *skb,
+					struct udphdr *uh, u32 saddr, u32 daddr)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 15)
#895: FILE: net/ipv4/udp.c:1220:
 	} else if (skb->ip_summed == CHECKSUM_HW) {
+	       if (!csum_tcpudp_magic(saddr,daddr,ulen, IPPROTO_UDP, skb->csum))

WARNING:TABSTOP: Statements should start on a tabstop
#897: FILE: net/ipv4/udp.c:1221:
+	       if (!csum_tcpudp_magic(saddr,daddr,ulen, IPPROTO_UDP, skb->csum))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 24)
#897: FILE: net/ipv4/udp.c:1221:
+	       if (!csum_tcpudp_magic(saddr,daddr,ulen, IPPROTO_UDP, skb->csum))
 			skb->ip_summed = CHECKSUM_UNNECESSARY;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#897: FILE: net/ipv4/udp.c:1221:
+	       if (!csum_tcpudp_magic(saddr,daddr,ulen, IPPROTO_UDP, skb->csum))
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#897: FILE: net/ipv4/udp.c:1221:
+	       if (!csum_tcpudp_magic(saddr,daddr,ulen, IPPROTO_UDP, skb->csum))
 	                                         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#920: FILE: net/ipv4/udp.c:1240:
+  ^Istruct udphdr *uh = skb->h.uh;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#920: FILE: net/ipv4/udp.c:1240:
+  ^Istruct udphdr *uh = skb->h.uh;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#920: FILE: net/ipv4/udp.c:1240:
+  ^Istruct udphdr *uh = skb->h.uh;$

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#926: FILE: net/ipv4/udp.c:1246:
+	struct hlist_head *ht = is_udplite? udplite_hash : udp_hash;
 	                                  ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#942: FILE: net/ipv4/udp.c:1256:
+	if (! is_udplite) {
 	    ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#958: FILE: net/ipv4/udp.c:1269:
+		if (! udplite_checksum_init(skb, uh, len, saddr, daddr))
 		    ^

WARNING:LONG_LINE_STRING: line length of 103 exceeds 100 columns
#993: FILE: net/ipv4/udp.c:1309:
+	LIMIT_NETDEBUG(KERN_DEBUG "UDP%s: short packet: From %u.%u.%u.%u:%u %d/%d to %u.%u.%u.%u:%u\n",

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#994: FILE: net/ipv4/udp.c:1310:
+		       is_udplite? "-Lite" : "",
 		                 ^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1012: FILE: net/ipv4/udp.c:1321:
+	/*
+	 * RFC1122: OK.  Discards the bad packet silently (as far as

WARNING:LONG_LINE_STRING: line length of 105 exceeds 100 columns
#1016: FILE: net/ipv4/udp.c:1324:
+	LIMIT_NETDEBUG(KERN_DEBUG "UDP%s: bad checksum. From %d.%d.%d.%d:%d to %d.%d.%d.%d:%d ulen %d\n",

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#1017: FILE: net/ipv4/udp.c:1325:
+		       is_udplite? "-Lite" : "",
 		                 ^

WARNING:INLINE: plain inline is preferred over __inline__
#1030: FILE: net/ipv4/udp.c:1337:
+__inline__ int udp_rcv(struct sk_buff *skb)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1052: FILE: net/ipv4/udp.c:1392:
+^I * ^IUDP-Lite's partial checksum coverage (RFC 3828).$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1052: FILE: net/ipv4/udp.c:1392:
+	/*
+	 * 	UDP-Lite's partial checksum coverage (RFC 3828).

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1055: FILE: net/ipv4/udp.c:1395:
+	 * The case coverage > packet length is handled by send module. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1065: FILE: net/ipv4/udp.c:1405:
+        /* The receiver specifies a minimum checksum coverage value. To make$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1066: FILE: net/ipv4/udp.c:1406:
+         * sense, this should be set to at least 8 (as done below). If zero is$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1067: FILE: net/ipv4/udp.c:1407:
+	 * used, this again means full checksum coverage.                     */

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1135: FILE: net/ipv4/udp.c:1487:
+		   char __user *optval, int __user *optlen )

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1161: FILE: net/ipv4/udp.c:1504:
+ * ^Iudp_poll  -  wait for a UDP(-Lite) event.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1176: FILE: net/ipv4/udp.c:1522:
+^Iint ^Iis_lite = IS_UDPLITE(sk);$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1187: FILE: net/ipv4/udp.c:1536:
+				 * Update count of really received datagrams. */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1197: FILE: net/ipv4/udp.c:1581:
+struct proto ^Iudplite_prot = {$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000044904.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 39 errors, 81 warnings, 18 checks, 1168 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000044904.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
