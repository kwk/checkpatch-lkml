WARNING:TYPO_SPELLING: 'usefull' may be misspelled - perhaps 'useful'?
#32: 
certainly be usefull for mainline.  Any reason not to include it?
             ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
--- kernel-source-2.6.6/arch/i386/Kconfig	2004-05-10 19:47:45.000000000 +1000

WARNING:TYPO_SPELLING: 'guaranted' may be misspelled - perhaps 'guaranteed'?
#58: FILE: arch/i386/Kconfig:350:
+          atomicity can't be guaranted!
                              ^^^^^^^^^

WARNING:TYPO_SPELLING: 'targetted' may be misspelled - perhaps 'targeted'?
#61: FILE: arch/i386/Kconfig:353:
+          targetted for your CPU, it may happen that, consecutively to a
           ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#69: FILE: arch/i386/Kconfig:361:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'targetted' may be misspelled - perhaps 'targeted'?
#71: FILE: arch/i386/Kconfig:363:
+          you execute a program not targetted for your CPU.  You should
                                     ^^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#100: FILE: arch/i386/kernel/emu.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#113: FILE: arch/i386/kernel/emu.c:14:
+#include <asm/uaccess.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:CODE_INDENT: code indent should use tabs where possible
#159: FILE: arch/i386/kernel/emu.c:60:
+                           int bit32, int modrm)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: arch/i386/kernel/emu.c:60:
+                           int bit32, int modrm)$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#172: FILE: arch/i386/kernel/emu.c:73:
+			return (void *)*((u32*)*from)++;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#173: FILE: arch/i386/kernel/emu.c:74:
+^I^I$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#184: FILE: arch/i386/kernel/emu.c:85:
+				return (void *)offset + *((u32*)*from)++;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#189: FILE: arch/i386/kernel/emu.c:90:
+^I$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#192: FILE: arch/i386/kernel/emu.c:93:
+				offset += *((u32*)*from)++;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#194: FILE: arch/i386/kernel/emu.c:95:
+				offset += *((s8*)*from)++;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#202: FILE: arch/i386/kernel/emu.c:103:
+			return (void *)(u32)*((u16*)*from)++;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#216: FILE: arch/i386/kernel/emu.c:117:
+				offset += *((u16*)*from)++;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#218: FILE: arch/i386/kernel/emu.c:119:
+				offset += *((s8*)*from)++;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#224: FILE: arch/i386/kernel/emu.c:125:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#233: FILE: arch/i386/kernel/emu.c:134:
+    ^Iu8 mod,rm;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#233: FILE: arch/i386/kernel/emu.c:134:
+    ^Iu8 mod,rm;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: arch/i386/kernel/emu.c:134:
+    ^Iu8 mod,rm;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#233: FILE: arch/i386/kernel/emu.c:134:
+    	u8 mod,rm;
     	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#255: FILE: arch/i386/kernel/emu.c:156:
+	}
+	else { /* 16 bits mode */

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#255: FILE: arch/i386/kernel/emu.c:156:
+	else { /* 16 bits mode */

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#270: FILE: arch/i386/kernel/emu.c:171:
+
+

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#281: FILE: arch/i386/kernel/emu.c:182:
+		return REG_PTR(regs, reg & 7);
+	else

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#283: FILE: arch/i386/kernel/emu.c:184:
+		return ((reg & 4) >> 2) + (u8*)REG_PTR(regs, reg & 3);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#317: FILE: arch/i386/kernel/emu.c:218:
+	eip = (u8*)regs->eip;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#324: FILE: arch/i386/kernel/emu.c:225:
+	/* we'll first read all known opcode prefixes, and discard obviously
+	   invalid combinations.*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#324: FILE: arch/i386/kernel/emu.c:225:
+	   invalid combinations.*/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#336: FILE: arch/i386/kernel/emu.c:237:
+^I^I^I^I$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#337: FILE: arch/i386/kernel/emu.c:238:
+				__asm__ __volatile__ (

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#341: FILE: arch/i386/kernel/emu.c:242:
+						      : "=a" (*(u32*)src)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#342: FILE: arch/i386/kernel/emu.c:243:
+						      : "a" (*(u32*)src));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#347: FILE: arch/i386/kernel/emu.c:248:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#349: FILE: arch/i386/kernel/emu.c:250:
+			/* we'll also try to emulate the CMPXCHG instruction (used in mutex locks).
+			   This instruction is often locked, but it's not possible to put a lock

ERROR:TRAILING_WHITESPACE: trailing whitespace
#361: FILE: arch/i386/kernel/emu.c:262:
+^I^I^I^I$

CHECK:BRACES: Unbalanced braces around else statement
#365: FILE: arch/i386/kernel/emu.c:266:
+				else {

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#366: FILE: arch/i386/kernel/emu.c:267:
+					src = modrm_address(regs, &eip, !(prefixes & PREFIX_A32), modrm);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#369: FILE: arch/i386/kernel/emu.c:270:
+					    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#369: FILE: arch/i386/kernel/emu.c:270:
+					    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {
 					                                             ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#369: FILE: arch/i386/kernel/emu.c:270:
+					    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {
 					                                                                      ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#369: FILE: arch/i386/kernel/emu.c:270:
+					    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {
 					                                                                        ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#369: FILE: arch/i386/kernel/emu.c:270:
+					    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {
 					                                                                           ^

WARNING:TABSTOP: Statements should start on a tabstop
#371: FILE: arch/i386/kernel/emu.c:272:
+					    goto out;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#374: FILE: arch/i386/kernel/emu.c:275:
+^I^I^I^I$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#376: FILE: arch/i386/kernel/emu.c:277:
+					if ((u8)regs->eax == *(u8*)src) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#377: FILE: arch/i386/kernel/emu.c:278:
+						*(u8*)src = *(u8*)dst;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#377: FILE: arch/i386/kernel/emu.c:278:
+						*(u8*)src = *(u8*)dst;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#380: FILE: arch/i386/kernel/emu.c:281:
+					}
+					else {

CHECK:BRACES: Unbalanced braces around else statement
#380: FILE: arch/i386/kernel/emu.c:281:
+					else {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#381: FILE: arch/i386/kernel/emu.c:282:
+						*(u8*)&(regs->eax) = *(u8*)src;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#381: FILE: arch/i386/kernel/emu.c:282:
+						*(u8*)&(regs->eax) = *(u8*)src;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around regs->eax
#381: FILE: arch/i386/kernel/emu.c:282:
+						*(u8*)&(regs->eax) = *(u8*)src;

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#382: FILE: arch/i386/kernel/emu.c:283:
+						regs->eflags &= ~X86_EFLAGS_ZF;  /* clear Zero Flag */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#385: FILE: arch/i386/kernel/emu.c:286:
+				}
+				else if (!(prefixes & PREFIX_D32)) { /* 32 bits operands */

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#386: FILE: arch/i386/kernel/emu.c:287:
+					if ((u32)regs->eax == *(u32*)src) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#387: FILE: arch/i386/kernel/emu.c:288:
+						*(u32*)src = *(u32*)dst;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#387: FILE: arch/i386/kernel/emu.c:288:
+						*(u32*)src = *(u32*)dst;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#390: FILE: arch/i386/kernel/emu.c:291:
+					}
+					else {

CHECK:BRACES: Unbalanced braces around else statement
#390: FILE: arch/i386/kernel/emu.c:291:
+					else {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#391: FILE: arch/i386/kernel/emu.c:292:
+						regs->eax = *(u32*)src;

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#392: FILE: arch/i386/kernel/emu.c:293:
+						regs->eflags &= ~X86_EFLAGS_ZF;  /* clear Zero Flag */

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#395: FILE: arch/i386/kernel/emu.c:296:
+				}
+				else { /* 16 bits operands */

CHECK:BRACES: Unbalanced braces around else statement
#395: FILE: arch/i386/kernel/emu.c:296:
+				else { /* 16 bits operands */

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#396: FILE: arch/i386/kernel/emu.c:297:
+					if ((u16)regs->eax == *(u16*)src) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#397: FILE: arch/i386/kernel/emu.c:298:
+						*(u16*)src = *(u16*)dst;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#397: FILE: arch/i386/kernel/emu.c:298:
+						*(u16*)src = *(u16*)dst;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#400: FILE: arch/i386/kernel/emu.c:301:
+					}
+					else {

CHECK:BRACES: Unbalanced braces around else statement
#400: FILE: arch/i386/kernel/emu.c:301:
+					else {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#401: FILE: arch/i386/kernel/emu.c:302:
+						*(u16*)&regs->eax = *(u16*)src;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#401: FILE: arch/i386/kernel/emu.c:302:
+						*(u16*)&regs->eax = *(u16*)src;

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#402: FILE: arch/i386/kernel/emu.c:303:
+						regs->eflags &= ~X86_EFLAGS_ZF;  /* clear Zero Flag */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#419: FILE: arch/i386/kernel/emu.c:320:
+^I^I^I^I$

CHECK:BRACES: Unbalanced braces around else statement
#423: FILE: arch/i386/kernel/emu.c:324:
+				else {

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#424: FILE: arch/i386/kernel/emu.c:325:
+					src = modrm_address(regs, &eip, !(prefixes & PREFIX_A32), modrm);

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#427: FILE: arch/i386/kernel/emu.c:328:
+					    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#427: FILE: arch/i386/kernel/emu.c:328:
+					    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {
 					                                             ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#427: FILE: arch/i386/kernel/emu.c:328:
+					    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {
 					                                                                      ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#427: FILE: arch/i386/kernel/emu.c:328:
+					    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {
 					                                                                        ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#427: FILE: arch/i386/kernel/emu.c:328:
+					    verify_area(VERIFY_WRITE, (void *)src, (w?((prefixes & PREFIX_D32)?2:4):1))) {
 					                                                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#432: FILE: arch/i386/kernel/emu.c:333:
+^I^I^I^I$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#434: FILE: arch/i386/kernel/emu.c:335:
+					op1 = *(u8*)src;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#435: FILE: arch/i386/kernel/emu.c:336:
+					op2 = *(u8*)dst;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#436: FILE: arch/i386/kernel/emu.c:337:
+					*(u8*)src = op1 + op2;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#437: FILE: arch/i386/kernel/emu.c:338:
+					*(u8*)dst = op1;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#439: FILE: arch/i386/kernel/emu.c:340:
+				}
+				else if (!(prefixes & PREFIX_D32)) { /* 32 bits operands */

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#440: FILE: arch/i386/kernel/emu.c:341:
+					op1 = *(u32*)src;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#441: FILE: arch/i386/kernel/emu.c:342:
+					op2 = *(u32*)dst;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#442: FILE: arch/i386/kernel/emu.c:343:
+					*(u32*)src = op1 + op2;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#443: FILE: arch/i386/kernel/emu.c:344:
+					*(u32*)dst = op1;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#445: FILE: arch/i386/kernel/emu.c:346:
+				}
+				else { /* 16 bits operands */

CHECK:BRACES: Unbalanced braces around else statement
#445: FILE: arch/i386/kernel/emu.c:346:
+				else { /* 16 bits operands */

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#446: FILE: arch/i386/kernel/emu.c:347:
+					op1 = *(u16*)src;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#447: FILE: arch/i386/kernel/emu.c:348:
+					op2 = *(u16*)dst;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#448: FILE: arch/i386/kernel/emu.c:349:
+					*(u16*)src = op1 + op2;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#449: FILE: arch/i386/kernel/emu.c:350:
+					*(u16*)dst = op1;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#483: FILE: arch/i386/kernel/emu.c:384:
+		}
+		else if (*eip == 0xf0) { /* lock */

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#490: FILE: arch/i386/kernel/emu.c:391:
+		}
+		else if ((*eip & 0xe7) == 0x26) {

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#526: FILE: arch/i386/kernel/emu.c:427:
+	printk(KERN_DEBUG "do_emu() : invalid opcode detected @%p : %02x %02x ...\n", eip, eip[0], eip[1]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#526: FILE: arch/i386/kernel/emu.c:427:
+	printk(KERN_DEBUG "do_emu() : invalid opcode detected @%p : %02x %02x ...\n", eip, eip[0], eip[1]);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_emu', this function's name, in a string
#526: FILE: arch/i386/kernel/emu.c:427:
+	printk(KERN_DEBUG "do_emu() : invalid opcode detected @%p : %02x %02x ...\n", eip, eip[0], eip[1]);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000280245.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 58 errors, 24 warnings, 22 checks, 500 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000280245.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
