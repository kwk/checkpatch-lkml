WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
--------------------------------------------------------------------------------

CHECK:SPACING: No space is necessary after a cast
#64: FILE: ipc/msg.c:96:
+	msq  = (struct msg_queue *) ipc_rcu_alloc (sizeof (*msq));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#64: FILE: ipc/msg.c:96:
+	msq  = (struct msg_queue *) ipc_rcu_alloc (sizeof (*msq));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#64: FILE: ipc/msg.c:96:
+	msq  = (struct msg_queue *) ipc_rcu_alloc (sizeof (*msq));

CHECK:SPACING: No space is necessary after a cast
#76: FILE: ipc/sem.c:129:
+	sma = (struct sem_array *) ipc_rcu_alloc(size);

CHECK:SPACING: No space is necessary after a cast
#105: FILE: ipc/shm.c:183:
+	shp = (struct shmid_kernel *) ipc_rcu_alloc (sizeof (*shp));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#105: FILE: ipc/shm.c:183:
+	shp = (struct shmid_kernel *) ipc_rcu_alloc (sizeof (*shp));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#105: FILE: ipc/shm.c:183:
+	shp = (struct shmid_kernel *) ipc_rcu_alloc (sizeof (*shp));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#144: FILE: ipc/util.c:74:
+	ids->entries = ipc_rcu_alloc(sizeof(struct ipc_id)*size);
 	                                                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#182: FILE: ipc/util.c:131:
+	new = ipc_rcu_alloc(sizeof(struct ipc_id)*newsize);
 	                                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#213: FILE: ipc/util.c:264:
+ *^Iipc_rcu_alloc^I-^Iallocate ipc and rcu space $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#218: FILE: ipc/util.c:269:
+ *^INULL is returned if the allocation fails. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#228: FILE: ipc/util.c:271:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: ipc/util.c:271:
+ $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#229: FILE: ipc/util.c:272:
+void* ipc_rcu_alloc(int size)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#232: FILE: ipc/util.c:274:
+	void* out;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#236: FILE: ipc/util.c:277:
+^I * workqueue if necessary (for vmalloc). $

CHECK:ALLOC_SIZEOF_STRUCT: Prefer vmalloc(sizeof(*out)...) over vmalloc(sizeof(struct ipc_rcu_vmalloc)...)
#242: FILE: ipc/util.c:280:
+		out = vmalloc(sizeof(struct ipc_rcu_vmalloc) + size);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#243: FILE: ipc/util.c:281:
+		if (out) out += sizeof(struct ipc_rcu_vmalloc);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#247: FILE: ipc/util.c:283:
+		out = kmalloc(sizeof(struct ipc_rcu_kmalloc)+size, GFP_KERNEL);
 		                                            ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*out)...) over kmalloc(sizeof(struct ipc_rcu_kmalloc)...)
#247: FILE: ipc/util.c:283:
+		out = kmalloc(sizeof(struct ipc_rcu_kmalloc)+size, GFP_KERNEL);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#248: FILE: ipc/util.c:284:
+		if (out) out += sizeof(struct ipc_rcu_kmalloc);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#256: FILE: ipc/util.c:292:
+ * $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#260: FILE: ipc/util.c:296:
+static void ipc_schedule_free(void* arg)

WARNING:LINE_SPACING: Missing a blank line after declarations
#273: FILE: ipc/util.c:308:
+		struct ipc_rcu_vmalloc *free;
+		free = ptr - sizeof(*free);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#277: FILE: ipc/util.c:312:
+		struct ipc_rcu_kmalloc *free;
+		free = ptr - sizeof(*free);

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#307: FILE: ipc/util.h:18:
+struct ipc_rcu_kmalloc
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#314: FILE: ipc/util.h:25:
+struct ipc_rcu_vmalloc
+{

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#329: FILE: ipc/util.h:65:
+void* ipc_rcu_alloc(int size);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000418899.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 8 warnings, 8 checks, 249 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000418899.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
