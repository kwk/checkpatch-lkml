WARNING:TYPO_SPELLING: 'convertion' may be misspelled - perhaps 'conversion'?
#20: 
Subject: [PATCH]: scsi: in2000 scsi_cmnd convertion
                                         ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
Changes the obsolete Scsi_Cmnd to struct scsi_cmnd and replace some whitespaces.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#44: FILE: drivers/scsi/in2000.c:258:
+static int is_dir_out(struct scsi_cmnd * cmd)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#54: FILE: drivers/scsi/in2000.c:338:
+static int in2000_queuecommand(struct scsi_cmnd *cmd,
+		void (*done) (struct scsi_cmnd *))

WARNING:SPACING: Unnecessary space before function pointer arguments
#54: FILE: drivers/scsi/in2000.c:338:
+		void (*done) (struct scsi_cmnd *))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 134 exceeds 100 columns
#82: FILE: drivers/scsi/in2000.c:421:
+		for (tmp = (struct scsi_cmnd *) hostdata->input_Q; tmp->host_scribble; tmp = (struct scsi_cmnd *) tmp->host_scribble);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#82: FILE: drivers/scsi/in2000.c:421:
+		for (tmp = (struct scsi_cmnd *) hostdata->input_Q; tmp->host_scribble; tmp = (struct scsi_cmnd *) tmp->host_scribble);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#82: FILE: drivers/scsi/in2000.c:421:
+		for (tmp = (struct scsi_cmnd *) hostdata->input_Q; tmp->host_scribble; tmp = (struct scsi_cmnd *) tmp->host_scribble);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: No space is necessary after a cast
#100: FILE: drivers/scsi/in2000.c:471:
+	cmd = (struct scsi_cmnd *) hostdata->input_Q;

CHECK:SPACING: No space is necessary after a cast
#107: FILE: drivers/scsi/in2000.c:477:
+		cmd = (struct scsi_cmnd *) cmd->host_scribble;

CHECK:SPACING: No space is necessary after a cast
#116: FILE: drivers/scsi/in2000.c:494:
+		hostdata->input_Q = (struct scsi_cmnd *) cmd->host_scribble;

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#125: FILE: drivers/scsi/in2000.c:543:
+	for (prev = (struct scsi_cmnd *) hostdata->input_Q; prev; prev = (struct scsi_cmnd *) prev->host_scribble) {

CHECK:SPACING: No space is necessary after a cast
#125: FILE: drivers/scsi/in2000.c:543:
+	for (prev = (struct scsi_cmnd *) hostdata->input_Q; prev; prev = (struct scsi_cmnd *) prev->host_scribble) {

WARNING:LONG_LINE: line length of 130 exceeds 100 columns
#128: FILE: drivers/scsi/in2000.c:545:
+			for (prev = (struct scsi_cmnd *) hostdata->input_Q; prev; prev = (struct scsi_cmnd *) prev->host_scribble)

CHECK:SPACING: No space is necessary after a cast
#128: FILE: drivers/scsi/in2000.c:545:
+			for (prev = (struct scsi_cmnd *) hostdata->input_Q; prev; prev = (struct scsi_cmnd *) prev->host_scribble)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#137: FILE: drivers/scsi/in2000.c:747:
+static void transfer_bytes(struct scsi_cmnd * cmd, int data_in_dir)

CHECK:SPACING: No space is necessary after a cast
#155: FILE: drivers/scsi/in2000.c:913:
+		cmd = (struct scsi_cmnd *) hostdata->connected;	/* assume we're connected */

CHECK:SPACING: No space is necessary after a cast
#164: FILE: drivers/scsi/in2000.c:995:
+	cmd = (struct scsi_cmnd *) hostdata->connected;	/* assume we're connected */

CHECK:SPACING: No space is necessary after a cast
#173: FILE: drivers/scsi/in2000.c:1072:
+			cmd = (struct scsi_cmnd *) hostdata->selecting;	/* get a valid cmd */

CHECK:SPACING: No space is necessary after a cast
#182: FILE: drivers/scsi/in2000.c:1094:
+		    hostdata->connected = cmd = (struct scsi_cmnd *) hostdata->selecting;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#182: FILE: drivers/scsi/in2000.c:1094:
+		    hostdata->connected = cmd = (struct scsi_cmnd *) hostdata->selecting;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: No space is necessary after a cast
#191: FILE: drivers/scsi/in2000.c:1495:
+				cmd = (struct scsi_cmnd *) hostdata->selecting;

CHECK:SPACING: No space is necessary after a cast
#200: FILE: drivers/scsi/in2000.c:1536:
+		cmd = (struct scsi_cmnd *) hostdata->disconnected_Q;

CHECK:SPACING: No space is necessary after a cast
#207: FILE: drivers/scsi/in2000.c:1542:
+			cmd = (struct scsi_cmnd *) cmd->host_scribble;

CHECK:SPACING: No space is necessary after a cast
#216: FILE: drivers/scsi/in2000.c:1557:
+			hostdata->disconnected_Q = (struct scsi_cmnd *) cmd->host_scribble;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#234: FILE: drivers/scsi/in2000.c:1679:
+static int __in2000_abort(struct scsi_cmnd * cmd)

CHECK:SPACING: No space is necessary after a cast
#248: FILE: drivers/scsi/in2000.c:1698:
+	tmp = (struct scsi_cmnd *) hostdata->input_Q;

CHECK:SPACING: No space is necessary after a cast
#257: FILE: drivers/scsi/in2000.c:1711:
+		tmp = (struct scsi_cmnd *) tmp->host_scribble;

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#266: FILE: drivers/scsi/in2000.c:1778:
+	for (tmp = (struct scsi_cmnd *) hostdata->disconnected_Q; tmp; tmp = (struct scsi_cmnd *) tmp->host_scribble)

CHECK:SPACING: No space is necessary after a cast
#266: FILE: drivers/scsi/in2000.c:1778:
+	for (tmp = (struct scsi_cmnd *) hostdata->disconnected_Q; tmp; tmp = (struct scsi_cmnd *) tmp->host_scribble)

CHECK:SPACING: No space is necessary after a cast
#293: FILE: drivers/scsi/in2000.c:2271:
+			cmd = (struct scsi_cmnd *) hd->connected;

CHECK:SPACING: No space is necessary after a cast
#301: FILE: drivers/scsi/in2000.c:2278:
+		cmd = (struct scsi_cmnd *) hd->input_Q;

CHECK:SPACING: No space is necessary after a cast
#306: FILE: drivers/scsi/in2000.c:2282:
+			cmd = (struct scsi_cmnd *) cmd->host_scribble;

CHECK:SPACING: No space is necessary after a cast
#312: FILE: drivers/scsi/in2000.c:2287:
+		cmd = (struct scsi_cmnd *) hd->disconnected_Q;

CHECK:SPACING: No space is necessary after a cast
#317: FILE: drivers/scsi/in2000.c:2291:
+			cmd = (struct scsi_cmnd *) cmd->host_scribble;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#367: FILE: drivers/scsi/in2000.h:286:
+	volatile struct scsi_cmnd *input_Q;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#369: FILE: drivers/scsi/in2000.h:288:
+	volatile struct scsi_cmnd *selecting;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#371: FILE: drivers/scsi/in2000.h:290:
+	volatile struct scsi_cmnd *connected;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#373: FILE: drivers/scsi/in2000.h:292:
+	volatile struct scsi_cmnd *disconnected_Q;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#385: FILE: drivers/scsi/in2000.h:404:
+static int in2000_queuecommand(struct scsi_cmnd *,
+		void (*done)(struct scsi_cmnd *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_cmnd *' should also have an identifier name
#385: FILE: drivers/scsi/in2000.h:404:
+		void (*done)(struct scsi_cmnd *));

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000015646.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 12 warnings, 25 checks, 325 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000015646.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
