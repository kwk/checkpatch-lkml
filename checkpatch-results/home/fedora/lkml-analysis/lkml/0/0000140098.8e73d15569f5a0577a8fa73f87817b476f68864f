WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
This patch implements fallback logic. In the event there is no 2^(MAX_ORDER-1)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#100: FILE: mm/page_alloc.c:60:
+int fallback_allocs[RCLM_TYPES-1][RCLM_TYPES+1] = {
                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#100: FILE: mm/page_alloc.c:60:
+int fallback_allocs[RCLM_TYPES-1][RCLM_TYPES+1] = {
                                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#141: FILE: mm/page_alloc.c:670:
+fallback_buddy_reserve(int start_alloctype, struct zone *zone,
+			unsigned int current_order, struct page *page,

WARNING:LINE_SPACING: Missing a blank line after declarations
#152: FILE: mm/page_alloc.c:681:
+		int reserve_type = RCLM_NORCLM;
+		if (!min_fallback_reserved(zone))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#155: FILE: mm/page_alloc.c:684:
+		dec_reserve_count(zone, get_pageblock_type(zone,page));
 		                                               ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#173: FILE: mm/page_alloc.c:702:
+	BUG_ON(alloctype >= RCLM_TYPES);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#185: FILE: mm/page_alloc.c:714:
+		area = &zone->free_area_lists[alloctype][MAX_ORDER-1];
 		                                                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#192: FILE: mm/page_alloc.c:721:
+			page = list_entry(area->free_list.next,
+						struct page, lru);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: mm/page_alloc.c:724:
+			area = fallback_buddy_reserve(start_alloctype, zone,
+					current_order, page, area);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#199: FILE: mm/page_alloc.c:728:
+
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000140098.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 3 warnings, 7 checks, 171 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000140098.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
