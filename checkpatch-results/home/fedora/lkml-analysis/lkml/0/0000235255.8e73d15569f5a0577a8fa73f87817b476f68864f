WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#40: FILE: drivers/dio/dio-driver.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#56: FILE: drivers/dio/dio-driver.c:17:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#70: FILE: drivers/dio/dio-driver.c:31:
+dio_match_device(const struct dio_device_id *ids,
+		   const struct dio_dev *d)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#107: FILE: drivers/dio/dio-driver.c:68:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#132: FILE: drivers/dio/dio-driver.c:93:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#148: FILE: drivers/dio/dio-driver.c:109:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#184: FILE: drivers/dio/dio-driver.c:145:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#190: FILE: drivers/dio/dio-driver.c:151:
+
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#198: FILE: drivers/dio/dio-driver.c:159:
+EXPORT_SYMBOL(dio_match_device);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#199: FILE: drivers/dio/dio-driver.c:160:
+EXPORT_SYMBOL(dio_register_driver);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#200: FILE: drivers/dio/dio-driver.c:161:
+EXPORT_SYMBOL(dio_unregister_driver);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#201: FILE: drivers/dio/dio-driver.c:162:
+EXPORT_SYMBOL(dio_dev_driver);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#202: FILE: drivers/dio/dio-driver.c:163:
+EXPORT_SYMBOL(dio_bus_type);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#206: FILE: drivers/dio/dio-sysfs.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#218: FILE: drivers/dio/dio-sysfs.c:13:
+
+

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'dio_show_id' to 'id_show'
#231: FILE: drivers/dio/dio-sysfs.c:26:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#232: FILE: drivers/dio/dio-sysfs.c:27:
+static DEVICE_ATTR(id, S_IRUGO, dio_show_id, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'dio_show_ipl' to 'ipl_show'
#240: FILE: drivers/dio/dio-sysfs.c:35:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#241: FILE: drivers/dio/dio-sysfs.c:36:
+static DEVICE_ATTR(ipl, S_IRUGO, dio_show_ipl, NULL);

CHECK:SPACING: spaces preferred around that '&' (ctx:VxW)
#248: FILE: drivers/dio/dio-sysfs.c:43:
+	return sprintf(buf, "0x%02x\n", ((d->id >> 8)& 0xff));
 	                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'dio_show_secid' to 'secid_show'
#249: FILE: drivers/dio/dio-sysfs.c:44:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#250: FILE: drivers/dio/dio-sysfs.c:45:
+static DEVICE_ATTR(secid, S_IRUGO, dio_show_secid, NULL);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'dio_show_name' to 'name_show'
#258: FILE: drivers/dio/dio-sysfs.c:53:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#259: FILE: drivers/dio/dio-sysfs.c:54:
+static DEVICE_ATTR(name, S_IRUGO, dio_show_name, NULL);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'dio_show_resource' to 'resource_show'
#268: FILE: drivers/dio/dio-sysfs.c:63:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#269: FILE: drivers/dio/dio-sysfs.c:64:
+static DEVICE_ATTR(resource, S_IRUGO, dio_show_resource, NULL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#363: FILE: drivers/dio/dio.c:143:
+                if (get_user(i, (unsigned char *)va + DIO_IDOFF)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#363: FILE: drivers/dio/dio.c:143:
+                if (get_user(i, (unsigned char *)va + DIO_IDOFF)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#373: FILE: drivers/dio/dio.c:153:
+                if (DIO_NEEDSSECID(prid)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#373: FILE: drivers/dio/dio.c:153:
+                if (DIO_NEEDSSECID(prid)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#378: FILE: drivers/dio/dio.c:156:
+                } else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#378: FILE: drivers/dio/dio.c:156:
+                } else$

CHECK:BRACES: Unbalanced braces around else statement
#378: FILE: drivers/dio/dio.c:156:
+                } else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#427: FILE: drivers/dio/dio.c:184:
+^I/* Initialize the DIO bus */ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#447: FILE: drivers/dio/dio.c:217:
+                if (get_user(i, (unsigned char *)va + DIO_IDOFF)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: drivers/dio/dio.c:217:
+                if (get_user(i, (unsigned char *)va + DIO_IDOFF)) {$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dev)...) over kmalloc(sizeof(struct dio_dev)...)
#456: FILE: drivers/dio/dio.c:227:
+		dev = kmalloc(sizeof(struct dio_dev), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: space required after that ',' (ctx:VxV)
#467: FILE: drivers/dio/dio.c:238:
+		sprintf(dev->dev.bus_id,"%02x", scode);
 		                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#474: FILE: drivers/dio/dio.c:243:
+                if (DIO_NEEDSSECID(prid)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#474: FILE: drivers/dio/dio.c:243:
+                if (DIO_NEEDSSECID(prid)) {$

CHECK:BRACES: braces {} should be used on all arms of this statement
#474: FILE: drivers/dio/dio.c:243:
+                if (DIO_NEEDSSECID(prid)) {
[...]
-                }
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#486: FILE: drivers/dio/dio.c:245:
+                        dev->id = DIO_ENCODE_ID(prid, secid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#486: FILE: drivers/dio/dio.c:245:
+                        dev->id = DIO_ENCODE_ID(prid, secid);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#487: FILE: drivers/dio/dio.c:246:
+                } else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#487: FILE: drivers/dio/dio.c:246:
+                } else$

CHECK:BRACES: Unbalanced braces around else statement
#487: FILE: drivers/dio/dio.c:246:
+                } else

ERROR:CODE_INDENT: code indent should use tabs where possible
#488: FILE: drivers/dio/dio.c:247:
+                        dev->id = prid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#488: FILE: drivers/dio/dio.c:247:
+                        dev->id = prid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#490: FILE: drivers/dio/dio.c:249:
+                dev->ipl = DIO_IPL(va);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#490: FILE: drivers/dio/dio.c:249:
+                dev->ipl = DIO_IPL(va);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#491: FILE: drivers/dio/dio.c:250:
+                strcpy(dev->name,dio_getname(dev->id));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#491: FILE: drivers/dio/dio.c:250:
+                strcpy(dev->name,dio_getname(dev->id));$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#491: FILE: drivers/dio/dio.c:250:
+                strcpy(dev->name,dio_getname(dev->id));
                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#492: FILE: drivers/dio/dio.c:251:
+                printk(KERN_INFO "select code %3d: ipl %d: ID %02X", dev->scode, dev->ipl, prid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#492: FILE: drivers/dio/dio.c:251:
+                printk(KERN_INFO "select code %3d: ipl %d: ID %02X", dev->scode, dev->ipl, prid);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#492: FILE: drivers/dio/dio.c:251:
+                printk(KERN_INFO "select code %3d: ipl %d: ID %02X", dev->scode, dev->ipl, prid);

ERROR:CODE_INDENT: code indent should use tabs where possible
#496: FILE: drivers/dio/dio.c:254:
+                printk(": %s\n", dev->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#496: FILE: drivers/dio/dio.c:254:
+                printk(": %s\n", dev->name);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#496: FILE: drivers/dio/dio.c:254:
+                printk(": %s\n", dev->name);

ERROR:CODE_INDENT: code indent should use tabs where possible
#521: FILE: drivers/dio/dio.c:271:
+        if (scode >= DIOII_SCBASE) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#521: FILE: drivers/dio/dio.c:271:
+        if (scode >= DIOII_SCBASE) {$

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#521: FILE: drivers/dio/dio.c:271:
+        if (scode >= DIOII_SCBASE) {
[...]
-        }
[...]
+        } else if (scode > DIO_SCMAX || scode < 0)
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#525: FILE: drivers/dio/dio.c:273:
+        } else if (scode > DIO_SCMAX || scode < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#525: FILE: drivers/dio/dio.c:273:
+        } else if (scode > DIO_SCMAX || scode < 0)$

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#626: FILE: drivers/net/hplance.c:51:
+static int __devinit hplance_init_one(struct dio_dev *d,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#627: FILE: drivers/net/hplance.c:52:
+static int __devinit hplance_init_one(struct dio_dev *d,
+				const struct dio_device_id *ent);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#628: FILE: drivers/net/hplance.c:53:
+static void __devinit hplance_init(struct net_device *dev, $

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#628: FILE: drivers/net/hplance.c:53:
+static void __devinit hplance_init(struct net_device *dev, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#629: FILE: drivers/net/hplance.c:54:
+static void __devinit hplance_init(struct net_device *dev, 
+				struct dio_dev *d);

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#630: FILE: drivers/net/hplance.c:55:
+static void __devexit hplance_remove_one(struct dio_dev *d);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#659: FILE: drivers/net/hplance.c:75:
+static int __devinit hplance_init_one(struct dio_dev *d,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#660: FILE: drivers/net/hplance.c:76:
+static int __devinit hplance_init_one(struct dio_dev *d,
+				const struct dio_device_id *ent)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#677: FILE: drivers/net/hplance.c:85:
+	if (!request_mem_region(d->resource.start, d->resource.end-d->resource.start, d->name))
 	                                                          ^

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#712: FILE: drivers/net/hplance.c:100:
+static void __devexit hplance_remove_one(struct dio_dev *d)

ERROR:CODE_INDENT: code indent should use tabs where possible
#729: FILE: drivers/net/hplance.c:111:
+        unsigned long va = (d->resource.start + DIO_VIRADDRBASE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#729: FILE: drivers/net/hplance.c:111:
+        unsigned long va = (d->resource.start + DIO_VIRADDRBASE);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#734: FILE: drivers/net/hplance.c:115:
+        printk(KERN_INFO "%s: %s; select code %d, addr", dev->name, d->name, d->scode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#734: FILE: drivers/net/hplance.c:115:
+        printk(KERN_INFO "%s: %s; select code %d, addr", dev->name, d->name, d->scode);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#734: FILE: drivers/net/hplance.c:115:
+        printk(KERN_INFO "%s: %s; select code %d, addr", dev->name, d->name, d->scode);

ERROR:CODE_INDENT: code indent should use tabs where possible
#744: FILE: drivers/net/hplance.c:133:
+        for (i=0; i<6; i++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#744: FILE: drivers/net/hplance.c:133:
+        for (i=0; i<6; i++) {$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#744: FILE: drivers/net/hplance.c:133:
+        for (i=0; i<6; i++) {
               ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#744: FILE: drivers/net/hplance.c:133:
+        for (i=0; i<6; i++) {
                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#753: FILE: drivers/net/hplance.c:143:
+        lp->lance.name = (char*)d->name;                /* discards const, shut up gcc */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#753: FILE: drivers/net/hplance.c:143:
+        lp->lance.name = (char*)d->name;                /* discards const, shut up gcc */$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#753: FILE: drivers/net/hplance.c:143:
+        lp->lance.name = (char*)d->name;                /* discards const, shut up gcc */

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#759: FILE: drivers/net/hplance.c:148:
+        lp->lance.irq = d->ipl;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#759: FILE: drivers/net/hplance.c:148:
+        lp->lance.irq = d->ipl;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#799: FILE: drivers/net/hplance.c:218:
+        dio_unregister_driver(&hplance_driver);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#799: FILE: drivers/net/hplance.c:218:
+        dio_unregister_driver(&hplance_driver);$

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#829: FILE: drivers/serial/8250_hp300.c:37:
+static int __devinit hpdca_init_one(struct dio_dev *d,

ERROR:CODE_INDENT: code indent should use tabs where possible
#830: FILE: drivers/serial/8250_hp300.c:38:
+                                const struct dio_device_id *ent);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#830: FILE: drivers/serial/8250_hp300.c:38:
+static int __devinit hpdca_init_one(struct dio_dev *d,
+                                const struct dio_device_id *ent);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#830: FILE: drivers/serial/8250_hp300.c:38:
+                                const struct dio_device_id *ent);$

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#831: FILE: drivers/serial/8250_hp300.c:39:
+static void __devexit hpdca_remove_one(struct dio_dev *d);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#882: FILE: drivers/serial/8250_hp300.c:127:
 	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#882: FILE: drivers/serial/8250_hp300.c:127:
+	else {

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#891: FILE: drivers/serial/8250_hp300.c:163:
+static int __devinit hpdca_init_one(struct dio_dev *d,

ERROR:CODE_INDENT: code indent should use tabs where possible
#892: FILE: drivers/serial/8250_hp300.c:164:
+                                const struct dio_device_id *ent)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#892: FILE: drivers/serial/8250_hp300.c:164:
+static int __devinit hpdca_init_one(struct dio_dev *d,
+                                const struct dio_device_id *ent)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#892: FILE: drivers/serial/8250_hp300.c:164:
+                                const struct dio_device_id *ent)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#916: FILE: drivers/serial/8250_hp300.c:188:
+		printk(KERN_NOTICE "8250_hp300: register_serial() DCA scode %d"

WARNING:SPLIT_STRING: quoted string split across lines
#917: FILE: drivers/serial/8250_hp300.c:189:
+		printk(KERN_NOTICE "8250_hp300: register_serial() DCA scode %d"
+		       " irq %d failed\n", d->scode, serial_req.irq);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#927: FILE: drivers/serial/8250_hp300.c:199:
+	udelay(100);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

WARNING:BRACES: braces {} are not necessary for single statement blocks
#999: FILE: drivers/serial/8250_hp300.c:244:
+		if (i == 1) {
 			continue;
 		}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1045: FILE: drivers/serial/8250_hp300.c:271:
+			printk(KERN_NOTICE "8250_hp300: register_serial() APCI %d"

WARNING:SPLIT_STRING: quoted string split across lines
#1046: FILE: drivers/serial/8250_hp300.c:272:
+			printk(KERN_NOTICE "8250_hp300: register_serial() APCI %d"
+			       " irq %d failed\n", i, serial_req.irq);

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#1126: FILE: drivers/serial/8250_hp300.c:293:
+static void __devexit hpdca_remove_one(struct dio_dev *d)

CHECK:SPACING: No space is necessary after a cast
#1130: FILE: drivers/serial/8250_hp300.c:297:
+	line = (int) dio_get_drvdata(d);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1218: FILE: drivers/video/hpfb.c:320:
+static int __devinit hpfb_dio_probe(struct dio_dev * d, const struct dio_device_id * ent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1218: FILE: drivers/video/hpfb.c:320:
+static int __devinit hpfb_dio_probe(struct dio_dev * d, const struct dio_device_id * ent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1218: FILE: drivers/video/hpfb.c:320:
+static int __devinit hpfb_dio_probe(struct dio_dev * d, const struct dio_device_id * ent)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1224: FILE: drivers/video/hpfb.c:326:
+                return -EBUSY;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1224: FILE: drivers/video/hpfb.c:326:
+                return -EBUSY;$

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1226: FILE: drivers/video/hpfb.c:328:
+	if (d->scode >= DIOII_SCBASE) {
[...]
+	} else {
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1231: FILE: drivers/video/hpfb.c:333:
+	printk(KERN_INFO "Topcat found at DIO select code %d "

WARNING:SPLIT_STRING: quoted string split across lines
#1232: FILE: drivers/video/hpfb.c:334:
+	printk(KERN_INFO "Topcat found at DIO select code %d "
+	       "(secondary id %02x)\n", d->scode, (d->id >> 8) & 0xff);

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#1241: FILE: drivers/video/hpfb.c:343:
+static void __devexit hpfb_remove_one(struct dio_dev *d)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1246: FILE: drivers/video/hpfb.c:348:
+        release_mem_region(d->resource.start, d->resource.end - d->resource.start);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1246: FILE: drivers/video/hpfb.c:348:
+        release_mem_region(d->resource.start, d->resource.end - d->resource.start);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1250: FILE: drivers/video/hpfb.c:352:
+    { DIO_ENCODE_ID(DIO_ID_FBUFFER, DIO_ID2_LRCATSEYE) },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1251: FILE: drivers/video/hpfb.c:353:
+    { DIO_ENCODE_ID(DIO_ID_FBUFFER, DIO_ID2_HRCCATSEYE) },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1252: FILE: drivers/video/hpfb.c:354:
+    { DIO_ENCODE_ID(DIO_ID_FBUFFER, DIO_ID2_HRMCATSEYE) },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1253: FILE: drivers/video/hpfb.c:355:
+    { DIO_ENCODE_ID(DIO_ID_FBUFFER, DIO_ID2_TOPCAT) },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1254: FILE: drivers/video/hpfb.c:356:
+    { 0 }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1258: FILE: drivers/video/hpfb.c:360:
+    .name      = "hpfb",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1259: FILE: drivers/video/hpfb.c:361:
+    .id_table  = hpfb_dio_tbl,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1260: FILE: drivers/video/hpfb.c:362:
+    .probe     = hpfb_dio_probe,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1261: FILE: drivers/video/hpfb.c:363:
+    .remove    = __devexit_p(hpfb_remove_one),$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i == DIO_ID_FBUFFER'
#1279: FILE: drivers/video/hpfb.c:397:
+	if (!err && (i == DIO_ID_FBUFFER) && topcat_sid_ok(sid = DIO_SECID(INTFBVADDR))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1279: FILE: drivers/video/hpfb.c:397:
+	if (!err && (i == DIO_ID_FBUFFER) && topcat_sid_ok(sid = DIO_SECID(INTFBVADDR))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1285: FILE: drivers/video/hpfb.c:401:
+		if (hpfb_init_one(INTFBPADDR, INTFBVADDR)) {
 			return -ENOMEM;
 		}

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#1423: FILE: include/linux/dio.h:91:
+	void (*remove)(struct dio_dev *z);        /* Device removed (NULL if not a hot-plug capable driver) */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1461: FILE: include/linux/dio.h:244:
+extern void dio_create_sysfs_dev_files(struct dio_dev *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dio_dev *' should also have an identifier name
#1461: FILE: include/linux/dio.h:244:
+extern void dio_create_sysfs_dev_files(struct dio_dev *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1464: FILE: include/linux/dio.h:247:
+extern int dio_register_driver(struct dio_driver *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dio_driver *' should also have an identifier name
#1464: FILE: include/linux/dio.h:247:
+extern int dio_register_driver(struct dio_driver *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1465: FILE: include/linux/dio.h:248:
+extern void dio_unregister_driver(struct dio_driver *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dio_driver *' should also have an identifier name
#1465: FILE: include/linux/dio.h:248:
+extern void dio_unregister_driver(struct dio_driver *);

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#1466: FILE: include/linux/dio.h:249:
+extern const struct dio_device_id *dio_match_device(const struct dio_device_id *ids, const struct dio_dev *z);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1466: FILE: include/linux/dio.h:249:
+extern const struct dio_device_id *dio_match_device(const struct dio_device_id *ids, const struct dio_dev *z);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1469: FILE: include/linux/dio.h:252:
+    return d->driver;$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1474: FILE: include/linux/dio.h:257:
+#define dio_resource_len(d)   ((d)->resource.end-(z)->resource.start+1)
                                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1474: FILE: include/linux/dio.h:257:
+#define dio_resource_len(d)   ((d)->resource.end-(z)->resource.start+1)
                                                                     ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#1477: FILE: include/linux/dio.h:260:
+#define dio_request_device(d, name) \
+    request_mem_region(dio_resource_start(d), dio_resource_len(d), name)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1478: FILE: include/linux/dio.h:261:
+    request_mem_region(dio_resource_start(d), dio_resource_len(d), name)$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#1479: FILE: include/linux/dio.h:262:
+#define dio_release_device(d) \
+    release_mem_region(dio_resource_start(d), dio_resource_len(d))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1480: FILE: include/linux/dio.h:263:
+    release_mem_region(dio_resource_start(d), dio_resource_len(d))$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1486: FILE: include/linux/dio.h:269:
+static inline void *dio_get_drvdata (struct dio_dev *d)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1491: FILE: include/linux/dio.h:274:
+static inline void dio_set_drvdata (struct dio_dev *d, void *data)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1512: FILE: include/linux/dio.h:295:
+	 * should load a module in response to an insert event. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1522: FILE: include/linux/dio.h:305:
+	 * and return some sort of error */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000235255.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 35 errors, 86 warnings, 31 checks, 1385 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000235255.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
