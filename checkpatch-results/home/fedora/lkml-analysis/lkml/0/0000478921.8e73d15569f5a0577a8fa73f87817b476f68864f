WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
diff -urN kernel-source-2.5.4-pre1-orig/include/linux/zconf.h kernel-source-2.5.4-pre1-new/include/linux/zconf.h

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#33: FILE: include/linux/zconf.h:1:
+/* zconf.h -- configuration of the zlib compression library

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#35: FILE: include/linux/zconf.h:3:
+ * For conditions of distribution and use, see copyright notice in zlib.h $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#38: FILE: include/linux/zconf.h:6:
+/* @(#) $Id$ */

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

ERROR:CODE_INDENT: code indent should use tabs where possible
#56: FILE: include/linux/zconf.h:24:
+            (1 << (windowBits+2)) +  (1 << (memLevel+9))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#56: FILE: include/linux/zconf.h:24:
+/* The memory requirements for deflate are (in bytes):
+            (1 << (windowBits+2)) +  (1 << (memLevel+9))

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#82: FILE: include/linux/zconf.h:50:
+                        /* Type declarations */$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#105: FILE: include/linux/zconf.h:73:
+typedef unsigned char  Byte;  /* 8 bits */

CHECK:CAMELCASE: Avoid CamelCase: <Byte>
#105: FILE: include/linux/zconf.h:73:
+typedef unsigned char  Byte;  /* 8 bits */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:NEW_TYPEDEFS: do not add new typedefs
#106: FILE: include/linux/zconf.h:74:
+typedef unsigned int   uInt;  /* 16 bits or more */

CHECK:CAMELCASE: Avoid CamelCase: <uInt>
#106: FILE: include/linux/zconf.h:74:
+typedef unsigned int   uInt;  /* 16 bits or more */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#107: FILE: include/linux/zconf.h:75:
+typedef unsigned long  uLong; /* 32 bits or more */

CHECK:CAMELCASE: Avoid CamelCase: <uLong>
#107: FILE: include/linux/zconf.h:75:
+typedef unsigned long  uLong; /* 32 bits or more */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#109: FILE: include/linux/zconf.h:77:
+typedef Byte  FAR Bytef;

CHECK:CAMELCASE: Avoid CamelCase: <Bytef>
#109: FILE: include/linux/zconf.h:77:
+typedef Byte  FAR Bytef;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#110: FILE: include/linux/zconf.h:78:
+typedef char  FAR charf;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#111: FILE: include/linux/zconf.h:79:
+typedef int   FAR intf;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#112: FILE: include/linux/zconf.h:80:
+typedef uInt  FAR uIntf;

CHECK:CAMELCASE: Avoid CamelCase: <uIntf>
#112: FILE: include/linux/zconf.h:80:
+typedef uInt  FAR uIntf;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#113: FILE: include/linux/zconf.h:81:
+typedef uLong FAR uLongf;

CHECK:CAMELCASE: Avoid CamelCase: <uLongf>
#113: FILE: include/linux/zconf.h:81:
+typedef uLong FAR uLongf;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#115: FILE: include/linux/zconf.h:83:
+typedef void FAR *voidpf;

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#115: FILE: include/linux/zconf.h:83:
+typedef void FAR *voidpf;
                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#116: FILE: include/linux/zconf.h:84:
+typedef void     *voidp;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#127: FILE: include/linux/zutil.h:1:
+/* zutil.h -- internal interface and configuration of the compression library

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#133: FILE: include/linux/zutil.h:7:
+/* WARNING: this file should *not* be used by applications. It is
+   part of the implementation of the compression library and is

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#137: FILE: include/linux/zutil.h:11:
+/* @(#) $Id: zutil.h,v 1.1 2000/01/01 03:32:23 davem Exp $ */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#152: FILE: include/linux/zutil.h:26:
+typedef unsigned char  uch;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#153: FILE: include/linux/zutil.h:27:
+typedef uch FAR uchf;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#154: FILE: include/linux/zutil.h:28:
+typedef unsigned short ush;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#155: FILE: include/linux/zutil.h:29:
+typedef ush FAR ushf;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#156: FILE: include/linux/zutil.h:30:
+typedef unsigned long  ulg;

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: include/linux/zutil.h:32:
+        /* common constants */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#183: FILE: include/linux/zutil.h:57:
+        /* target dependencies */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#185: FILE: include/linux/zutil.h:59:
+        /* Common defaults */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#191: FILE: include/linux/zutil.h:65:
+         /* functions */$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#193: FILE: include/linux/zutil.h:67:
+typedef uLong (ZEXPORT *check_func) OF((uLong check, const Bytef *buf,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#193: FILE: include/linux/zutil.h:67:
+typedef uLong (ZEXPORT *check_func) OF((uLong check, const Bytef *buf,

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#193: FILE: include/linux/zutil.h:67:
+typedef uLong (ZEXPORT *check_func) OF((uLong check, const Bytef *buf,
                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#193: FILE: include/linux/zutil.h:67:
+typedef uLong (ZEXPORT *check_func) OF((uLong check, const Bytef *buf,
                                                                  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#196: FILE: include/linux/zutil.h:70:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: include/linux/zutil.h:71:
+                        /* checksum functions */$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#203: FILE: include/linux/zutil.h:77:
+#define DO1(buf,i)  {s1 += buf[i]; s2 += s1;}
                ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#203: FILE: include/linux/zutil.h:77:
+#define DO1(buf,i)  {s1 += buf[i]; s2 += s1;}
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#204: FILE: include/linux/zutil.h:78:
+#define DO2(buf,i)  DO1(buf,i); DO1(buf,i+1);
                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#204: FILE: include/linux/zutil.h:78:
+#define DO2(buf,i)  DO1(buf,i); DO1(buf,i+1);
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#204: FILE: include/linux/zutil.h:78:
+#define DO2(buf,i)  DO1(buf,i); DO1(buf,i+1);
                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#204: FILE: include/linux/zutil.h:78:
+#define DO2(buf,i)  DO1(buf,i); DO1(buf,i+1);
                                          ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#204: FILE: include/linux/zutil.h:78:
+#define DO2(buf,i)  DO1(buf,i); DO1(buf,i+1);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'buf' - possible side-effects?
#204: FILE: include/linux/zutil.h:78:
+#define DO2(buf,i)  DO1(buf,i); DO1(buf,i+1);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#204: FILE: include/linux/zutil.h:78:
+#define DO2(buf,i)  DO1(buf,i); DO1(buf,i+1);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#204: FILE: include/linux/zutil.h:78:
+#define DO2(buf,i)  DO1(buf,i); DO1(buf,i+1);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#205: FILE: include/linux/zutil.h:79:
+#define DO4(buf,i)  DO2(buf,i); DO2(buf,i+2);
                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#205: FILE: include/linux/zutil.h:79:
+#define DO4(buf,i)  DO2(buf,i); DO2(buf,i+2);
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#205: FILE: include/linux/zutil.h:79:
+#define DO4(buf,i)  DO2(buf,i); DO2(buf,i+2);
                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#205: FILE: include/linux/zutil.h:79:
+#define DO4(buf,i)  DO2(buf,i); DO2(buf,i+2);
                                          ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#205: FILE: include/linux/zutil.h:79:
+#define DO4(buf,i)  DO2(buf,i); DO2(buf,i+2);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'buf' - possible side-effects?
#205: FILE: include/linux/zutil.h:79:
+#define DO4(buf,i)  DO2(buf,i); DO2(buf,i+2);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#205: FILE: include/linux/zutil.h:79:
+#define DO4(buf,i)  DO2(buf,i); DO2(buf,i+2);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#205: FILE: include/linux/zutil.h:79:
+#define DO4(buf,i)  DO2(buf,i); DO2(buf,i+2);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#206: FILE: include/linux/zutil.h:80:
+#define DO8(buf,i)  DO4(buf,i); DO4(buf,i+4);
                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#206: FILE: include/linux/zutil.h:80:
+#define DO8(buf,i)  DO4(buf,i); DO4(buf,i+4);
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#206: FILE: include/linux/zutil.h:80:
+#define DO8(buf,i)  DO4(buf,i); DO4(buf,i+4);
                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#206: FILE: include/linux/zutil.h:80:
+#define DO8(buf,i)  DO4(buf,i); DO4(buf,i+4);
                                          ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#206: FILE: include/linux/zutil.h:80:
+#define DO8(buf,i)  DO4(buf,i); DO4(buf,i+4);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'buf' - possible side-effects?
#206: FILE: include/linux/zutil.h:80:
+#define DO8(buf,i)  DO4(buf,i); DO4(buf,i+4);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#206: FILE: include/linux/zutil.h:80:
+#define DO8(buf,i)  DO4(buf,i); DO4(buf,i+4);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#206: FILE: include/linux/zutil.h:80:
+#define DO8(buf,i)  DO4(buf,i); DO4(buf,i+4);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#207: FILE: include/linux/zutil.h:81:
+#define DO16(buf)   DO8(buf,0); DO8(buf,8);
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#207: FILE: include/linux/zutil.h:81:
+#define DO16(buf)   DO8(buf,0); DO8(buf,8);
                                        ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#207: FILE: include/linux/zutil.h:81:
+#define DO16(buf)   DO8(buf,0); DO8(buf,8);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'buf' - possible side-effects?
#207: FILE: include/linux/zutil.h:81:
+#define DO16(buf)   DO8(buf,0); DO8(buf,8);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#207: FILE: include/linux/zutil.h:81:
+#define DO16(buf)   DO8(buf,0); DO8(buf,8);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#211: FILE: include/linux/zutil.h:85:
+/*
+     Update a running Adler-32 checksum with the bytes buf[0..len-1] and

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: include/linux/zutil.h:102:
+    unsigned long s1 = adler & 0xffff;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: include/linux/zutil.h:103:
+    unsigned long s2 = (adler >> 16) & 0xffff;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: include/linux/zutil.h:104:
+    int k;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: include/linux/zutil.h:106:
+    if (buf == Z_NULL) return 1L;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#232: FILE: include/linux/zutil.h:106:
+    if (buf == Z_NULL) return 1L;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#234: FILE: include/linux/zutil.h:108:
+    while (len > 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#235: FILE: include/linux/zutil.h:109:
+        k = len < NMAX ? len : NMAX;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#235: FILE: include/linux/zutil.h:109:
+        k = len < NMAX ? len : NMAX;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#236: FILE: include/linux/zutil.h:110:
+        len -= k;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: include/linux/zutil.h:110:
+        len -= k;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#237: FILE: include/linux/zutil.h:111:
+        while (k >= 16) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: include/linux/zutil.h:111:
+        while (k >= 16) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#237: FILE: include/linux/zutil.h:111:
+        while (k >= 16) {
+            DO16(buf);

ERROR:CODE_INDENT: code indent should use tabs where possible
#238: FILE: include/linux/zutil.h:112:
+            DO16(buf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: include/linux/zutil.h:112:
+            DO16(buf);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#240: FILE: include/linux/zutil.h:114:
+            k -= 16;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: include/linux/zutil.h:114:
+            k -= 16;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#241: FILE: include/linux/zutil.h:115:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: include/linux/zutil.h:115:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#242: FILE: include/linux/zutil.h:116:
+        if (k != 0) do {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: include/linux/zutil.h:116:
+        if (k != 0) do {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#242: FILE: include/linux/zutil.h:116:
+        if (k != 0) do {
+            s1 += *buf++;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#242: FILE: include/linux/zutil.h:116:
+        if (k != 0) do {

ERROR:CODE_INDENT: code indent should use tabs where possible
#243: FILE: include/linux/zutil.h:117:
+            s1 += *buf++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#243: FILE: include/linux/zutil.h:117:
+            s1 += *buf++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#245: FILE: include/linux/zutil.h:119:
+        } while (--k);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#245: FILE: include/linux/zutil.h:119:
+        } while (--k);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#246: FILE: include/linux/zutil.h:120:
+        s1 %= BASE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: include/linux/zutil.h:120:
+        s1 %= BASE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#247: FILE: include/linux/zutil.h:121:
+        s2 %= BASE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: include/linux/zutil.h:121:
+        s2 %= BASE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: include/linux/zutil.h:122:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: include/linux/zutil.h:123:
+    return (s2 << 16) | s1;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000478921.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 38 errors, 49 warnings, 20 checks, 216 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000478921.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
