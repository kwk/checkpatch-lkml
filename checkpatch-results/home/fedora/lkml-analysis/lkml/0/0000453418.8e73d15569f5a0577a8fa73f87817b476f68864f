ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#196: FILE: drivers/ide/ide.c:877:
+				struct ata_device * drive = &tmp->drives[j];

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#197: FILE: drivers/ide/ide.c:878:
+				struct ata_device * drive = &tmp->drives[j];
+				if (drive->present)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#214: FILE: drivers/ide/ide.c:893:
+				printk(KERN_ERR "%s: error: not busy while queueing!\n", drive->name);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#214: FILE: drivers/ide/ide.c:893:
+				printk(KERN_ERR "%s: error: not busy while queueing!\n", drive->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#229: FILE: drivers/ide/ide.c:908:
+				printk(KERN_ERR "%s: error: DMA in progress...\n", drive->name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#240: FILE: drivers/ide/ide.c:919:
+				BUG_ON(!drive->using_tcq);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#244: FILE: drivers/ide/ide.c:923:
+			if (!(rq = elv_next_request(&drive->queue))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#338: FILE: drivers/ide/ide-disk.c:371:
+static ide_startstop_t idedisk_do_request(struct ata_device *drive, struct request *rq, sector_t block)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'idedisk_do_request', this function's name, in a string
#355: FILE: drivers/ide/ide-disk.c:388:
+			blk_dump_rq_flags(rq, "idedisk_do_request - bad command");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#362: FILE: drivers/ide/ide-disk.c:395:
+			extern ide_startstop_t promise_do_request(struct ata_device *, struct request *, sector_t);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#362: FILE: drivers/ide/ide-disk.c:395:
+			extern ide_startstop_t promise_do_request(struct ata_device *, struct request *, sector_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#362: FILE: drivers/ide/ide-disk.c:395:
+			extern ide_startstop_t promise_do_request(struct ata_device *, struct request *, sector_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#362: FILE: drivers/ide/ide-disk.c:395:
+			extern ide_startstop_t promise_do_request(struct ata_device *, struct request *, sector_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t' should also have an identifier name
#362: FILE: drivers/ide/ide-disk.c:395:
+			extern ide_startstop_t promise_do_request(struct ata_device *, struct request *, sector_t);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#379: FILE: drivers/ide/ide-disk.c:412:
+				BUG_ON(!ata_pending_commands(drive));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'drive->addressing'
#389: FILE: drivers/ide/ide-disk.c:422:
+		if ((drive->id->cfs_enable_2 & 0x0400) && (drive->addressing)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#421: FILE: drivers/ide/ide-disk.c:454:
+			if (blk_rq_tagged(rq)) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#424: FILE: drivers/ide/ide-disk.c:457:
+			} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#441: FILE: drivers/ide/ide-disk.c:474:
+			if (blk_rq_tagged(rq)) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#444: FILE: drivers/ide/ide-disk.c:477:
+			} else

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#449: FILE: drivers/ide/ide-disk.c:482:
+			args.taskfile.high_cylinder = (cyl>>8);
 			                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#515: FILE: drivers/ide/ide-disk.c:548:
+		printk("%s: %sing: ", drive->name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#516: FILE: drivers/ide/ide-disk.c:549:
+		printk("%s: %sing: ", drive->name,
+				(rq_data_dir(rq)==READ) ? "read" : "writ");

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#516: FILE: drivers/ide/ide-disk.c:549:
+				(rq_data_dir(rq)==READ) ? "read" : "writ");
 				                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#517: FILE: drivers/ide/ide-disk.c:550:
+		if (lba)	printk("LBAsect=%lld, ", block);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#517: FILE: drivers/ide/ide-disk.c:550:
+		if (lba)	printk("LBAsect=%lld, ", block);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#518: FILE: drivers/ide/ide-disk.c:551:
+		else		printk("CHS=%d/%d/%d, ", cyl, head, sect);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#518: FILE: drivers/ide/ide-disk.c:551:
+		else		printk("CHS=%d/%d/%d, ", cyl, head, sect);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#519: FILE: drivers/ide/ide-disk.c:552:
+		printk("sectors=%ld, ", rq->nr_sectors);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#520: FILE: drivers/ide/ide-disk.c:553:
+		printk("buffer=%p\n", rq->buffer);

WARNING:TYPO_SPELLING: 'distingushing' may be misspelled - perhaps 'distinguishing'?
#543: FILE: drivers/ide/ide-disk.c:579:
+	/* FIXME: this is actually distingushing between PIO and DMA requests.
 	                           ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'compleatly' may be misspelled - perhaps 'completely'?
#596: FILE: drivers/ide/ide-disk.c:647:
+					/* We are compleatly missing an error
 					          ^^^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#628: FILE: drivers/ide/ide-disk.c:685:
+			printk(KERN_ERR "%s: unknown command %x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#629: FILE: drivers/ide/ide-disk.c:686:
+			printk(KERN_ERR "%s: unknown command %x\n",
+					__FUNCTION__, cmd);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#629: FILE: drivers/ide/ide-disk.c:686:
+					__FUNCTION__, cmd);

ERROR:CODE_INDENT: code indent should use tabs where possible
#913: FILE: drivers/ide/ide-disk.c:988:
+        ide_raw_taskfile(drive, &args, NULL);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#913: FILE: drivers/ide/ide-disk.c:988:
+        ide_raw_taskfile(drive, &args, NULL);$

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#1249: FILE: drivers/ide/ide-floppy.c:484:
+	floppy->progress_indication= result->sksv ?
 	                           ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1250: FILE: drivers/ide/ide-floppy.c:485:
+		(unsigned short)get_unaligned((u16 *)(result->sk_specific)):0x10000;
 		                                                           ^

CHECK:SPACING: No space is necessary after a cast
#1259: FILE: drivers/ide/ide-floppy.c:502:
+		idefloppy_analyze_error(drive,(atapi_request_sense_result_t *) floppy->pc->buffer);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1259: FILE: drivers/ide/ide-floppy.c:502:
+		idefloppy_analyze_error(drive,(atapi_request_sense_result_t *) floppy->pc->buffer);
 		                             ^

CHECK:SPACING: No space is necessary after a cast
#1558: FILE: drivers/ide/ide-tape.c:1730:
+		idetape_analyze_error (drive, (atapi_request_sense_result_t *) tape->pc->buffer);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1558: FILE: drivers/ide/ide-tape.c:1730:
+		idetape_analyze_error (drive, (atapi_request_sense_result_t *) tape->pc->buffer);

CHECK:SPACING: No space is necessary after a cast
#1642: FILE: drivers/ide/ide-tape.c:5641:
+	inquiry = (atapi_inquiry_result_t *) pc.buffer;

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1663: FILE: drivers/ide/ide-taskfile.c:245:
+static ide_startstop_t special_intr(struct ata_device *drive, struct
 		request *rq) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1776: FILE: include/linux/atapi.h:85:
 
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1780: FILE: include/linux/atapi.h:89:
+typedef union {

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#1790: FILE: include/linux/atapi.h:99:
+		u8 drdy		: 1;	/* Ignored for ATAPI commands (ready to accept ATA command) */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1810: FILE: include/linux/atapi.h:119:
+typedef union {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1835: FILE: include/linux/atapi.h:144:
+typedef union {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1857: FILE: include/linux/atapi.h:166:
+typedef union {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1875: FILE: include/linux/atapi.h:184:
+typedef union {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1896: FILE: include/linux/atapi.h:205:
+typedef union {

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#1902: FILE: include/linux/atapi.h:211:
+		u8 drv		:1;	/* The responding drive will be drive 0 (0) or drive 1 (1) */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1923: FILE: include/linux/atapi.h:232:
+typedef union {

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#1929: FILE: include/linux/atapi.h:238:
+		u8 srst		: 1;	/* ATA software reset. ATAPI devices should use the new ATAPI srst. */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1973: FILE: include/linux/atapi.h:282:
+typedef struct {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2014: FILE: include/linux/atapi.h:323:
+typedef struct atapi_request_sense {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#2036: FILE: include/linux/atapi.h:345:
+	u32	information __attribute__ ((packed));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2086: FILE: include/linux/ide.h:661:
+extern int ide_raw_taskfile(struct ata_device *, struct ata_taskfile *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#2086: FILE: include/linux/ide.h:661:
+extern int ide_raw_taskfile(struct ata_device *, struct ata_taskfile *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_taskfile *' should also have an identifier name
#2086: FILE: include/linux/ide.h:661:
+extern int ide_raw_taskfile(struct ata_device *, struct ata_taskfile *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#2086: FILE: include/linux/ide.h:661:
+extern int ide_raw_taskfile(struct ata_device *, struct ata_taskfile *, char *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000453418.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 40 warnings, 14 checks, 1961 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000453418.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
