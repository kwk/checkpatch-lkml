WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#67: 
diff -uNr linux-2.5.69/arch/i386/kernel/apic.c linux-2.5.69.reboot_on_bsp/arch/i386/kernel/apic.c

CHECK:LINE_SPACING: Please don't use multiple blank lines
#92: FILE: arch/i386/kernel/apic.c:1121:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#102: FILE: arch/i386/kernel/apic.c:1131:
+	struct stop_apics *arg = ptr;
+	if (smp_processor_id() != arg->reboot_cpu_id) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#112: FILE: arch/i386/kernel/apic.c:1141:
+	if (smp_found_config) {
+		disable_IO_APIC();
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#123: FILE: arch/i386/kernel/apic.c:1152:
+	extern int reboot_cpu;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#125: FILE: arch/i386/kernel/apic.c:1154:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#126: FILE: arch/i386/kernel/apic.c:1155:
+ ^I/* The boot cpu is always logical cpu 0 */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#126: FILE: arch/i386/kernel/apic.c:1155:
+ ^I/* The boot cpu is always logical cpu 0 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: arch/i386/kernel/apic.c:1155:
+ ^I/* The boot cpu is always logical cpu 0 */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#130: FILE: arch/i386/kernel/apic.c:1159:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#133: FILE: arch/i386/kernel/apic.c:1162:
+	if ((reboot_cpu != -1) && cpu_possible(reboot_cpu)) {
+		arg.reboot_cpu_id = reboot_cpu;
+	}

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#137: FILE: arch/i386/kernel/apic.c:1166:
+	/* Make certain the the cpu I'm rebooting on is online */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#138: FILE: arch/i386/kernel/apic.c:1167:
+	if (!cpu_online(arg.reboot_cpu_id)) {
+		arg.reboot_cpu_id = smp_processor_id();
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#144: FILE: arch/i386/kernel/apic.c:1173:
+	if (!in_interrupt()) {
+		set_cpus_allowed(current, 1 << arg.reboot_cpu_id);
+	}

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#212: FILE: arch/i386/kernel/dmi_scan.c:532:
+	{ set_bios_reboot, "Dell PowerEdge 1300", {	/* Handle problems with rebooting on Dell 1300's */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reboot_cpu >= NR_CPUS'
#260: FILE: arch/i386/kernel/reboot.c:51:
+			if ((reboot_cpu < -1) || (reboot_cpu >= NR_CPUS)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BRACES: braces {} are not necessary for single statement blocks
#260: FILE: arch/i386/kernel/reboot.c:51:
+			if ((reboot_cpu < -1) || (reboot_cpu >= NR_CPUS)) {
+				reboot_cpu = -1;
+			}

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#260: FILE: arch/i386/kernel/reboot.c:51:
+			if ((reboot_cpu < -1) || (reboot_cpu >= NR_CPUS)) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#270: FILE: arch/i386/kernel/reboot.c:70:
 
+

ERROR:SPACING: space required before the open parenthesis '('
#280: FILE: arch/i386/kernel/reboot.c:80:
+		for(;;) __asm__("hlt");

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#280: FILE: arch/i386/kernel/reboot.c:80:
+		for(;;) __asm__("hlt");

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#281: FILE: arch/i386/kernel/reboot.c:81:
+	for (;;);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#292: FILE: arch/i386/kernel/reboot.c:232:
+static void machine_restart_1(void * __unused)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#338: FILE: arch/i386/kernel/reboot.c:247:
 }
+void machine_restart(char * __unused)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#338: FILE: arch/i386/kernel/reboot.c:247:
+void machine_restart(char * __unused)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#343: FILE: arch/i386/kernel/reboot.c:252:
+static void machine_halt_1(void * __unused)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#353: FILE: arch/i386/kernel/reboot.c:261:
+static void machine_power_off_1(void * __unused)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#359: FILE: arch/i386/kernel/reboot.c:267:
+}
+void machine_power_off(void)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#415: FILE: include/asm-i386/apic.h:103:
+extern NORET_TYPE void $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#416: FILE: include/asm-i386/apic.h:104:
+stop_apics(NORET_TYPE void (*rest)(void *info) ATTRIB_NORET, void *info) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#419: FILE: include/asm-i386/apic.h:107:
+static inline NORET_TYPE void $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#422: FILE: include/asm-i386/apic.h:110:
+static inline void $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#425: FILE: include/asm-i386/apic.h:113:
+^Irest(info); $

CHECK:SPACING: No space is necessary after a cast
#459: FILE: include/linux/reboot.h:49:
+NORET_TYPE void machine_halt(void) ATTRIB_NORET;

CHECK:SPACING: No space is necessary after a cast
#460: FILE: include/linux/reboot.h:50:
+NORET_TYPE void machine_power_off(void) ATTRIB_NORET;

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#472: FILE: kernel/panic.c:66:
+#if defined(CONFIG_SMP) && !defined(__i386__)

Architecture specific defines should be avoided wherever
possible.

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#509: FILE: arch/i386/kernel/apic.c:174:
 	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#509: FILE: arch/i386/kernel/apic.c:174:
+	else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#515: FILE: arch/i386/kernel/apic.c:180:
+^I^Ivalue &= ~APIC_VECTOR_MASK; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#522: FILE: arch/i386/kernel/apic.c:187:
+^I^Ivalue &= ~(APIC_MODE_MASK | APIC_SEND_PENDING | $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#523: FILE: arch/i386/kernel/apic.c:188:
+^I^I^IAPIC_INPUT_POLARITY | APIC_LVT_REMOTE_IRR | $

ERROR:SPACING: space prohibited before that close parenthesis ')'
#524: FILE: arch/i386/kernel/apic.c:189:
+			APIC_LVT_LEVEL_TRIGGER | APIC_LVT_MASKED );

ERROR:TRAILING_WHITESPACE: trailing whitespace
#528: FILE: arch/i386/kernel/apic.c:193:
+^I^I$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#531: FILE: arch/i386/kernel/apic.c:196:
+		value &= ~(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#532: FILE: arch/i386/kernel/apic.c:197:
+^I^I^IAPIC_MODE_MASK | APIC_SEND_PENDING | $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#533: FILE: arch/i386/kernel/apic.c:198:
+^I^I^IAPIC_INPUT_POLARITY | APIC_LVT_REMOTE_IRR | $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#566: FILE: arch/i386/kernel/i8259.c:249:
+{   $

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#597: FILE: MAINTAINERS:1067:
+P:	Eric Biederman
+M:	ebiederm@xmission.com

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'L:' before 'W:'
#600: FILE: MAINTAINERS:1070:
+W:	http://www.xmission.com/~ebiederm/files/kexec/
+L:	linux-kernel@vger.kernel.org

WARNING:TYPO_SPELLING: 'indepedent' may be misspelled - perhaps 'independent'?
#619: FILE: arch/i386/Kconfig:776:
+	  but it is indepedent of the system firmware.   And like a reboot
 	            ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#620: FILE: arch/i386/Kconfig:777:
+^I  you can start any kernel with it not just Linux.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#621: FILE: arch/i386/Kconfig:778:
+^I$

WARNING:TYPO_SPELLING: 'similiarity' may be misspelled - perhaps 'similarity'?
#622: FILE: arch/i386/Kconfig:779:
+	  The name comes from the similiarity to the exec system call. 
 	                          ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#622: FILE: arch/i386/Kconfig:779:
+^I  The name comes from the similiarity to the exec system call. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#623: FILE: arch/i386/Kconfig:780:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#659: FILE: arch/i386/kernel/machine_kexec.c:1:
+#include <linux/config.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#663: FILE: arch/i386/kernel/machine_kexec.c:5:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#666: FILE: arch/i386/kernel/machine_kexec.c:8:
+#include <asm/mmu_context.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#667: FILE: arch/i386/kernel/machine_kexec.c:9:
+#include <asm/io.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#670: FILE: arch/i386/kernel/machine_kexec.c:12:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#676: FILE: arch/i386/kernel/machine_kexec.c:18:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#683: FILE: arch/i386/kernel/machine_kexec.c:25:
+	(*(__u32 *)(curidt +2)) = (unsigned long)(newidt);
 	                   ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#685: FILE: arch/i386/kernel/machine_kexec.c:27:
+	__asm__ __volatile__ (

ERROR:TRAILING_WHITESPACE: trailing whitespace
#686: FILE: arch/i386/kernel/machine_kexec.c:28:
+^I^I"lidt %0\n" $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#691: FILE: arch/i386/kernel/machine_kexec.c:33:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#698: FILE: arch/i386/kernel/machine_kexec.c:40:
+	(*(__u32 *)(curgdt +2)) = (unsigned long)(newgdt);
 	                   ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#700: FILE: arch/i386/kernel/machine_kexec.c:42:
+	__asm__ __volatile__ (

ERROR:TRAILING_WHITESPACE: trailing whitespace
#701: FILE: arch/i386/kernel/machine_kexec.c:43:
+^I^I"lgdt %0\n" $

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#711: FILE: arch/i386/kernel/machine_kexec.c:53:
+	__asm__ __volatile__ (

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#712: FILE: arch/i386/kernel/machine_kexec.c:54:
+		"\tljmp $"STR(__KERNEL_CS)",$1f\n"

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#714: FILE: arch/i386/kernel/machine_kexec.c:56:
+		"\tmovl $"STR(__KERNEL_DS)",%eax\n"

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#725: FILE: arch/i386/kernel/machine_kexec.c:67:
+typedef void (*relocate_new_kernel_t)(

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#730: FILE: arch/i386/kernel/machine_kexec.c:72:
+extern void relocate_new_kernel_end(void);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#776: FILE: arch/i386/kernel/machine_kexec.c:118:
+	set_gdt(phys_to_virt(0),0);
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#777: FILE: arch/i386/kernel/machine_kexec.c:119:
+	set_idt(phys_to_virt(0),0);
 	                       ^

CHECK:SPACING: No space is necessary after a cast
#780: FILE: arch/i386/kernel/machine_kexec.c:122:
+	rnk = (relocate_new_kernel_t) reboot_code_buffer;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#792: FILE: arch/i386/kernel/relocate_kernel.S:1:
+#include <linux/config.h>

WARNING:TYPO_SPELLING: 'Proctected' may be misspelled - perhaps 'Protected'?
#822: FILE: arch/i386/kernel/relocate_kernel.S:31:
+	 * 0  1 == Proctected mode enabled
 	           ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#828: FILE: arch/i386/kernel/relocate_kernel.S:37:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#835: FILE: arch/i386/kernel/relocate_kernel.S:44:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#837: FILE: arch/i386/kernel/relocate_kernel.S:46:
+1:^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#882: FILE: arch/i386/kernel/relocate_kernel.S:91:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#885: FILE: arch/i386/kernel/relocate_kernel.S:94:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#897: FILE: arch/i386/kernel/relocate_kernel.S:106:
+relocate_new_kernel_size:^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#903: FILE: include/asm-i386/kexec.h:1:
+#ifndef _I386_KEXEC_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#944: FILE: include/linux/kexec.h:1:
+#ifndef LINUX_KEXEC_H

ERROR:TRAILING_WHITESPACE: trailing whitespace
#952: FILE: include/linux/kexec.h:9:
+/* $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#957: FILE: include/linux/kexec.h:14:
+typedef unsigned long kimage_entry_t;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#983: FILE: include/linux/kexec.h:40:
+	struct kexec_segment segment[KEXEC_SEGMENT_MAX+1];
 	                                              ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#989: FILE: include/linux/kexec.h:46:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#991: FILE: include/linux/kexec.h:48:
+extern void machine_kexec(struct kimage *image);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#992: FILE: include/linux/kexec.h:49:
+extern asmlinkage long sys_kexec(unsigned long entry, long nr_segments, $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1032: FILE: kernel/kexec.c:1:
+#include <linux/mm.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1044: FILE: kernel/kexec.c:13:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#1045: FILE: kernel/kexec.c:14:
+#include <asm/io.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1061: FILE: kernel/kexec.c:30:
+ * The code for the transition from the current kernel to the $

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#1062: FILE: kernel/kexec.c:31:
+ * The code for the transition from the current kernel to the 
+ * the new kernel is placed in the reboot_code_buffer, whose size

WARNING:TYPO_SPELLING: 'modifyable' may be misspelled - perhaps 'modifiable'?
#1068: FILE: kernel/kexec.c:37:
+ * modifyable.
    ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1077: FILE: kernel/kexec.c:46:
+ * destination page in it's final resting place (if it happens $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1084: FILE: kernel/kexec.c:53:
+ *    reliable.  $

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1094: FILE: kernel/kexec.c:63:
+static int kimage_is_destination_range(

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1097: FILE: kernel/kexec.c:66:
+static struct page *kimage_alloc_page(struct kimage *image, unsigned int gfp_mask, unsigned long dest);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1099: FILE: kernel/kexec.c:68:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1100: FILE: kernel/kexec.c:69:
+static int kimage_alloc(struct kimage **rimage, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1101: FILE: kernel/kexec.c:70:
+static int kimage_alloc(struct kimage **rimage, 
+	unsigned long nr_segments, struct kexec_segment *segments)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1112: FILE: kernel/kexec.c:81:
+	if (!image) {
+		goto out;
+	}

WARNING:TYPO_SPELLING: 'unuseable' may be misspelled - perhaps 'unusable'?
#1123: FILE: kernel/kexec.c:92:
+	/* Initialize the list of unuseable pages */
 	                          ^^^^^^^^^

ERROR:SPACING: space required before that '*' (ctx:VxV)
#1128: FILE: kernel/kexec.c:97:
+	segment_bytes = nr_segments * sizeof*segments;
 	                                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1130: FILE: kernel/kexec.c:99:
+^Iif (result) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1136: FILE: kernel/kexec.c:105:
+^I * just verifies it is an address we can use. $

ERROR:SPACING: space required before the open parenthesis '('
#1139: FILE: kernel/kexec.c:108:
+	for(i = 0; i < nr_segments; i++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1141: FILE: kernel/kexec.c:110:
+^I^Imend = ((unsigned long)(image->segment[i].mem)) + $

WARNING:LINE_SPACING: Missing a blank line after declarations
#1141: FILE: kernel/kexec.c:110:
+		unsigned long mend;
+		mend = ((unsigned long)(image->segment[i].mem)) + 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1149: FILE: kernel/kexec.c:118:
+^I * counted as destination pages.  $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1154: FILE: kernel/kexec.c:123:
+		printk(KERN_ERR "Could not allocate reboot_code_buffer\n");

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1166: FILE: kernel/kexec.c:135:
+	if (result == 0) {
[...]
+	} else {
[...]

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1174: FILE: kernel/kexec.c:143:
+static int kimage_is_destination_range(

WARNING:LINE_SPACING: Missing a blank line after declarations
#1178: FILE: kernel/kexec.c:147:
+	unsigned long i;
+	for(i = 0; i < image->nr_segments; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#1178: FILE: kernel/kexec.c:147:
+	for(i = 0; i < image->nr_segments; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1180: FILE: kernel/kexec.c:149:
+		unsigned long mstart, mend;
+		mstart = (unsigned long)image->segment[i].mem;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'end > mstart'
#1182: FILE: kernel/kexec.c:151:
+		if ((end > mstart) && (start < mend)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start < mend'
#1182: FILE: kernel/kexec.c:151:
+		if ((end > mstart) && (start < mend)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1182: FILE: kernel/kexec.c:151:
+		if ((end > mstart) && (start < mend)) {
+			return 1;
+		}

WARNING:LINE_SPACING: Missing a blank line after declarations
#1195: FILE: kernel/kexec.c:164:
+	int error;
+	mm = &init_mm;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1201: FILE: kernel/kexec.c:170:
+	if (!vma) {
+		goto out;
+	}

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1210: FILE: kernel/kexec.c:179:
+	vma->vm_flags = VM_SHARED \

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1219: FILE: kernel/kexec.c:188:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1221: FILE: kernel/kexec.c:190:
+	error = remap_page_range(vma, vma->vm_start, vma->vm_start,
+		vma->vm_end - vma->vm_start, vma->vm_page_prot);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1222: FILE: kernel/kexec.c:191:
+	if (error) {
+		goto out;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1245: FILE: kernel/kexec.c:214:
+^I * pick. $

WARNING:LINE_SPACING: Missing a blank line after declarations
#1253: FILE: kernel/kexec.c:222:
+	int order, count;
+	order = get_order(KEXEC_REBOOT_CODE_SIZE);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1258: FILE: kernel/kexec.c:227:
+		int i;
+		pages = alloc_pages(GFP_HIGHUSER, order);

ERROR:SPACING: space required before the open parenthesis '('
#1261: FILE: kernel/kexec.c:230:
+		for(i = 0; i < count; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1261: FILE: kernel/kexec.c:230:
+		for(i = 0; i < count; i++) {
+			SetPageReserved(pages +i);
+		}

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#1262: FILE: kernel/kexec.c:231:
+			SetPageReserved(pages +i);
 			                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1266: FILE: kernel/kexec.c:235:
+		if ((page_to_pfn(pages) >= (TASK_SIZE >> PAGE_SHIFT)) ||
+			kimage_is_destination_range(image, addr, addr + KEXEC_REBOOT_CODE_SIZE)) {

ERROR:SPACING: space required before the open parenthesis '('
#1270: FILE: kernel/kexec.c:239:
+	} while(!pages);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1273: FILE: kernel/kexec.c:242:
+		int result;
+		result = identity_map_pages(pages, order);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1287: FILE: kernel/kexec.c:256:
+		int i;
+		page = list_entry(pos, struct page, list);

ERROR:SPACING: space required before the open parenthesis '('
#1288: FILE: kernel/kexec.c:257:
+		for(i = 0; i < count; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1288: FILE: kernel/kexec.c:257:
+		for(i = 0; i < count; i++) {
+			ClearPageReserved(pages +i);
+		}

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#1289: FILE: kernel/kexec.c:258:
+			ClearPageReserved(pages +i);
 			                        ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1299: FILE: kernel/kexec.c:268:
+	if (image->offset != 0) {
+		image->entry++;
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#1305: FILE: kernel/kexec.c:274:
+		struct page *page;
+		page = kimage_alloc_page(image, GFP_KERNEL, KIMAGE_NO_DEST);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1306: FILE: kernel/kexec.c:275:
+		if (!page) {
+			return -ENOMEM;
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1312: FILE: kernel/kexec.c:281:
+^I^Iimage->last_entry = $

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1313: FILE: kernel/kexec.c:282:
+			ind_page + ((PAGE_SIZE/sizeof(kimage_entry_t)) - 1);
 			                      ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1321: FILE: kernel/kexec.c:290:
+static int kimage_set_destination(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1322: FILE: kernel/kexec.c:291:
+^Istruct kimage *image, unsigned long destination) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#1325: FILE: kernel/kexec.c:294:
+	int result;
+	destination &= PAGE_MASK;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1327: FILE: kernel/kexec.c:296:
+	if (result == 0) {
+		image->destination = destination;
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1333: FILE: kernel/kexec.c:302:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1337: FILE: kernel/kexec.c:306:
+	int result;
+	page &= PAGE_MASK;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1339: FILE: kernel/kexec.c:308:
+	if (result == 0) {
+		image->destination += PAGE_SIZE;
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1345: FILE: kernel/kexec.c:314:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1350: FILE: kernel/kexec.c:319:
+	struct list_head *pos, *next;
+	list_for_each_safe(pos, next, &image->dest_pages) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1352: FILE: kernel/kexec.c:321:
+		struct page *page;
+		page = list_entry(pos, struct page, list);

WARNING:TYPO_SPELLING: 'unuseable' may be misspelled - perhaps 'unusable'?
#1357: FILE: kernel/kexec.c:326:
+	/* Walk through and free any unuseable pages I have cached */
 	                             ^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1360: FILE: kernel/kexec.c:329:
+		struct page *page;
+		page = list_entry(pos, struct page, list);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1366: FILE: kernel/kexec.c:335:
+
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1367: FILE: kernel/kexec.c:336:
+}
+static int kimage_terminate(struct kimage *image)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1370: FILE: kernel/kexec.c:339:
+	int result;
+	result = kimage_add_entry(image, IND_DONE);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'image' may be better as '(image)' to avoid precedence issues
#1379: FILE: kernel/kexec.c:348:
+#define for_each_kimage_entry(image, ptr, entry) \
+	for (ptr = &image->head; (entry = *ptr) && !(entry & IND_DONE); \
+		ptr = (entry & IND_INDIRECTION)? \
+			phys_to_virt((entry & PAGE_MASK)): ptr +1)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#1379: FILE: kernel/kexec.c:348:
+#define for_each_kimage_entry(image, ptr, entry) \
+	for (ptr = &image->head; (entry = *ptr) && !(entry & IND_DONE); \
+		ptr = (entry & IND_INDIRECTION)? \
+			phys_to_virt((entry & PAGE_MASK)): ptr +1)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'entry' - possible side-effects?
#1379: FILE: kernel/kexec.c:348:
+#define for_each_kimage_entry(image, ptr, entry) \
+	for (ptr = &image->head; (entry = *ptr) && !(entry & IND_DONE); \
+		ptr = (entry & IND_INDIRECTION)? \
+			phys_to_virt((entry & PAGE_MASK)): ptr +1)

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#1381: FILE: kernel/kexec.c:350:
+		ptr = (entry & IND_INDIRECTION)? \
 		                               ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1382: FILE: kernel/kexec.c:351:
+			phys_to_virt((entry & PAGE_MASK)): ptr +1)
 			                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#1382: FILE: kernel/kexec.c:351:
+			phys_to_virt((entry & PAGE_MASK)): ptr +1)
 			                                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1389: FILE: kernel/kexec.c:358:
+	int i, count, order;
+	if (!image)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1395: FILE: kernel/kexec.c:364:
+			if (ind & IND_INDIRECTION) {
+				free_page((unsigned long)phys_to_virt(ind & PAGE_MASK));
+			}

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1403: FILE: kernel/kexec.c:372:
+		}
+		else if (entry & IND_SOURCE) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1409: FILE: kernel/kexec.c:378:
+^Ido_munmap(&init_mm, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1410: FILE: kernel/kexec.c:379:
+^I^Ipage_to_pfn(image->reboot_code_pages) << PAGE_SHIFT, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1410: FILE: kernel/kexec.c:379:
+	do_munmap(&init_mm, 
+		page_to_pfn(image->reboot_code_pages) << PAGE_SHIFT, 

ERROR:SPACING: space required before the open parenthesis '('
#1412: FILE: kernel/kexec.c:381:
+	for(i = 0; i < count; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1412: FILE: kernel/kexec.c:381:
+	for(i = 0; i < count; i++) {
+		ClearPageReserved(image->reboot_code_pages + i);
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#1423: FILE: kernel/kexec.c:392:
+	unsigned long destination = 0;
+	for_each_kimage_entry(image, ptr, entry) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1427: FILE: kernel/kexec.c:396:
+		}
+		else if (entry & IND_SOURCE) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1428: FILE: kernel/kexec.c:397:
+			if (page == destination) {
+				return ptr;
+			}

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#1437: FILE: kernel/kexec.c:406:
+static struct page *kimage_alloc_page(struct kimage *image, unsigned int gfp_mask, unsigned long destination)

WARNING:TYPO_SPELLING: 'implment' may be misspelled - perhaps 'implement'?
#1439: FILE: kernel/kexec.c:408:
+	/* Here we implment safe guards to ensure that a source page
 	           ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1445: FILE: kernel/kexec.c:414:
+^I * destination page at all.  $

WARNING:TYPO_SPELLING: 'implemenation' may be misspelled - perhaps 'implementation'?
#1449: FILE: kernel/kexec.c:418:
+	 * implemenation is simply to verify.
 	   ^^^^^^^^^^^^^

ERROR:SPACING: space required before the open parenthesis '('
#1470: FILE: kernel/kexec.c:439:
+	while(1) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1474: FILE: kernel/kexec.c:443:
+		if (!page) {
+			return 0;
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1502: FILE: kernel/kexec.c:471:
+^I^I^I$

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1515: FILE: kernel/kexec.c:484:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#1515: FILE: kernel/kexec.c:484:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1526: FILE: kernel/kexec.c:495:
+static int kimage_load_segment(struct kimage *image,
+	struct kexec_segment *segment)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1527: FILE: kernel/kexec.c:496:
+{^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1541: FILE: kernel/kexec.c:510:
+	if (result < 0) {
+		goto out;
+	}

ERROR:SPACING: space required before the open parenthesis '('
#1544: FILE: kernel/kexec.c:513:
+	for(offset = 0;  offset < segment->memsz; offset += PAGE_SIZE) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1548: FILE: kernel/kexec.c:517:
+		size_t size, leader;
+		page = kimage_alloc_page(image, GFP_HIGHUSER, mstart + offset);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1554: FILE: kernel/kexec.c:523:
+		if (result < 0) {
+			goto out;
+		}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'offset == 0'
#1566: FILE: kernel/kexec.c:535:
+		if ((offset == 0)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1566: FILE: kernel/kexec.c:535:
+		if ((offset == 0)) {
+			leader = mstart & ~PAGE_MASK;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1575: FILE: kernel/kexec.c:544:
+		if (size > (segment->bufsz - offset)) {
+			size = segment->bufsz - offset;
+		}

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#1585: FILE: kernel/kexec.c:554:
+			result = (result < 0)?result : -EIO;
 			                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1595: FILE: kernel/kexec.c:564:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1596: FILE: kernel/kexec.c:565:
+ * This call breaks up into three pieces.  $

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1613: FILE: kernel/kexec.c:582:
+struct kimage *kexec_image = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1615: FILE: kernel/kexec.c:584:
+asmlinkage long sys_kexec_load(unsigned long entry, unsigned long nr_segments, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1616: FILE: kernel/kexec.c:585:
+asmlinkage long sys_kexec_load(unsigned long entry, unsigned long nr_segments, 
+	struct kexec_segment *segments, unsigned long flags)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1620: FILE: kernel/kexec.c:589:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1626: FILE: kernel/kexec.c:595:
+^I * reboot on panic $

WARNING:LINE_SPACING: Missing a blank line after declarations
#1638: FILE: kernel/kexec.c:607:
+		unsigned long i;
+		result = kimage_alloc(&image, nr_segments, segments);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1639: FILE: kernel/kexec.c:608:
+		if (result) {
+			goto out;
+		}

ERROR:SPACING: space required before the open parenthesis '('
#1643: FILE: kernel/kexec.c:612:
+		for(i = 0; i < nr_segments; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1645: FILE: kernel/kexec.c:614:
+			if (result) {
+				goto out;
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1650: FILE: kernel/kexec.c:619:
+		if (result) {
+			goto out;
+		}

WARNING:LINE_SPACING: Missing a blank line after declarations
#1688: FILE: kernel/sys.c:448:
+		struct kimage *image;
+		if (arg) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1700: FILE: kernel/sys.c:460:
+		printk(KERN_EMERG "Starting new kernel\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000371193.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 78 errors, 80 warnings, 54 checks, 1503 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000371193.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
