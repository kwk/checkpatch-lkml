WARNING:TYPO_SPELLING: 'curently' may be misspelled - perhaps 'currently'?
#33: 
          needed for the page cache.  NOTE that this curently breaks
                                                     ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#44: 
--- a/drivers/block/rd.c	Sun Dec 23 23:58:21 2001

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#115: FILE: include/linux/mm.h:229:
+ * in memory if present. The tree is rooted at mapping->root.  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#125: FILE: include/linux/mm.h:508:
+static inline void add_page_to_inode_queue(struct address_space *mapping, struct page * page)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#134: FILE: include/linux/mm.h:517:
+static inline void remove_page_from_inode_queue(struct page * page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#136: FILE: include/linux/mm.h:519:
+	struct address_space * mapping = page->mapping;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#154: FILE: include/linux/pagemap.h:44:
+extern void page_cache_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#204: FILE: include/linux/pagemap.h:63:
+extern int add_to_page_cache(struct page * page, struct address_space *mapping, unsigned long index);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#204: FILE: include/linux/pagemap.h:63:
+extern int add_to_page_cache(struct page * page, struct address_space *mapping, unsigned long index);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#204: FILE: include/linux/pagemap.h:63:
+extern int add_to_page_cache(struct page * page, struct address_space *mapping, unsigned long index);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#205: FILE: include/linux/pagemap.h:64:
+extern int add_to_page_cache_locked(struct page * page, struct address_space *mapping, unsigned long index);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#205: FILE: include/linux/pagemap.h:64:
+extern int add_to_page_cache_locked(struct page * page, struct address_space *mapping, unsigned long index);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#205: FILE: include/linux/pagemap.h:64:
+extern int add_to_page_cache_locked(struct page * page, struct address_space *mapping, unsigned long index);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#206: FILE: include/linux/pagemap.h:65:
+extern int add_to_page_cache_unique(struct page * page, struct address_space *mapping, unsigned long index);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#206: FILE: include/linux/pagemap.h:65:
+extern int add_to_page_cache_unique(struct page * page, struct address_space *mapping, unsigned long index);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#206: FILE: include/linux/pagemap.h:65:
+extern int add_to_page_cache_unique(struct page * page, struct address_space *mapping, unsigned long index);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#214: FILE: include/linux/rat.h:1:
+/* Radix tree declarations.  $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#214: FILE: include/linux/rat.h:1:
+/* Radix tree declarations.  

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#222: FILE: include/linux/rat.h:9:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#227: FILE: include/linux/rat.h:14:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#229: FILE: include/linux/rat.h:16:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#230: FILE: include/linux/rat.h:17:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:BIT_MACRO: Prefer using the BIT macro
#239: FILE: include/linux/rat.h:26:
+#define RAT_MAP_SIZE (1UL << RAT_MAP_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#241: FILE: include/linux/rat.h:28:
+#define RAT_INDEX_BITS (8 /* CHAR_BIT */ * sizeof (unsigned long))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#251: FILE: include/linux/rat.h:38:
+struct rat_node
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#253: FILE: include/linux/rat.h:40:
+	void *slots [RAT_MAP_SIZE];

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#255: FILE: include/linux/rat.h:42:
+};
+typedef struct rat_node rat_node_t;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#255: FILE: include/linux/rat.h:42:
+typedef struct rat_node rat_node_t;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#261: FILE: include/linux/rat.h:48:
+/* Return the maximum key, which can be store into a radix tree with
+   height HEIGHT.  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#261: FILE: include/linux/rat.h:48:
+   height HEIGHT.  */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#263: FILE: include/linux/rat.h:50:
+rat_index_max (unsigned int height)

WARNING:LINE_SPACING: Missing a blank line after declarations
#267: FILE: include/linux/rat.h:54:
+	unsigned long index = (~0UL >> (RAT_INDEX_BITS - tmp - 1)) >> 1;
+	if (tmp >= RAT_INDEX_BITS)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#273: FILE: include/linux/rat.h:60:
+extern int rat_reserve (struct address_space *mapping, unsigned long index, struct page ***pslot);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#273: FILE: include/linux/rat.h:60:
+extern int rat_reserve (struct address_space *mapping, unsigned long index, struct page ***pslot);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#277: FILE: include/linux/rat.h:64:
+rat_insert (struct address_space *mapping, unsigned long index, struct page *page)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#282: FILE: include/linux/rat.h:69:
+	err = rat_reserve (mapping, index, &slot);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#289: FILE: include/linux/rat.h:76:
+extern struct page *rat_lookup (struct address_space *mapping, unsigned long index);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#289: FILE: include/linux/rat.h:76:
+extern struct page *rat_lookup (struct address_space *mapping, unsigned long index);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#292: FILE: include/linux/rat.h:79:
+extern int rat_delete (struct address_space *mapping, unsigned long index);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#292: FILE: include/linux/rat.h:79:
+extern int rat_delete (struct address_space *mapping, unsigned long index);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#311: FILE: include/linux/swap.h:130:
+extern int move_to_swap_cache (struct page *page, swp_entry_t entry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#311: FILE: include/linux/swap.h:130:
+extern int move_to_swap_cache (struct page *page, swp_entry_t entry);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#312: FILE: include/linux/swap.h:131:
+extern int move_from_swap_cache (struct page *page, unsigned long index, struct address_space *mapping);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#312: FILE: include/linux/swap.h:131:
+extern int move_from_swap_cache (struct page *page, unsigned long index, struct address_space *mapping);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#312: FILE: include/linux/swap.h:131:
+extern int move_from_swap_cache (struct page *page, unsigned long index, struct address_space *mapping);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#324: FILE: init/main.c:602:
+	page_cache_init ();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#445: FILE: mm/filemap.c:76:
+	rat_delete (page->mapping, page->index);

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#508: FILE: mm/filemap.c:208:
+static int FASTCALL(truncate_list_pages(struct address_space *, struct list_head *, unsigned long, unsigned *));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#508: FILE: mm/filemap.c:208:
+static int FASTCALL(truncate_list_pages(struct address_space *, struct list_head *, unsigned long, unsigned *));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#510: FILE: mm/filemap.c:210:
+static int truncate_list_pages(struct address_space *mapping,
+	struct list_head *head, unsigned long start, unsigned *partial)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#510: FILE: mm/filemap.c:210:
+	struct list_head *head, unsigned long start, unsigned *partial)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#553: FILE: mm/filemap.c:295:
+					struct page * page,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#665: FILE: mm/filemap.c:431:
+static int do_buffer_fdatasync(struct address_space *mapping,
+	struct list_head *head, unsigned long start, unsigned long end, int (*fn)(struct page *))

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#710: FILE: mm/filemap.c:477:
+	retval = do_buffer_fdatasync(mapping, &mapping->dirty_pages, start_idx, end_idx, writeout_one_page);

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#711: FILE: mm/filemap.c:478:
+	retval |= do_buffer_fdatasync(mapping, &mapping->clean_pages, start_idx, end_idx, writeout_one_page);

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#712: FILE: mm/filemap.c:479:
+	retval |= do_buffer_fdatasync(mapping, &mapping->locked_pages, start_idx, end_idx, writeout_one_page);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#718: FILE: mm/filemap.c:482:
+	retval |= do_buffer_fdatasync(mapping, &mapping->dirty_pages, start_idx, end_idx, waitfor_one_page);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#719: FILE: mm/filemap.c:483:
+	retval |= do_buffer_fdatasync(mapping, &mapping->clean_pages, start_idx, end_idx, waitfor_one_page);

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#720: FILE: mm/filemap.c:484:
+	retval |= do_buffer_fdatasync(mapping, &mapping->locked_pages, start_idx, end_idx, waitfor_one_page);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#786: FILE: mm/filemap.c:594:
+int add_to_page_cache_locked(struct page * page, struct address_space *mapping, unsigned long index)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#794: FILE: mm/filemap.c:601:
+	spin_lock (&mapping->i_shared_lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#795: FILE: mm/filemap.c:602:
+	if (rat_insert (mapping, index, page) < 0)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#806: FILE: mm/filemap.c:611:
+	spin_unlock (&mapping->i_shared_lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#807: FILE: mm/filemap.c:612:
+	page_cache_release (page);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#818: FILE: mm/filemap.c:620:
+static inline int __add_to_page_cache(struct page * page, struct address_space *mapping,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#827: FILE: mm/filemap.c:629:
+	if (rat_insert (mapping, offset, page) < 0)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#835: FILE: mm/filemap.c:636:
+	page_cache_release (page);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#840: FILE: mm/filemap.c:640:
+int add_to_page_cache(struct page * page, struct address_space * mapping, unsigned long offset)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#840: FILE: mm/filemap.c:640:
+int add_to_page_cache(struct page * page, struct address_space * mapping, unsigned long offset)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#852: FILE: mm/filemap.c:649:
+	spin_unlock (&mapping->i_shared_lock);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#859: FILE: mm/filemap.c:653:
+int add_to_page_cache_unique(struct page * page, struct address_space *mapping,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#868: FILE: mm/filemap.c:660:
+	alias = rat_lookup (mapping, offset);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#877: FILE: mm/filemap.c:664:
+		err = __add_to_page_cache(page,mapping,offset);
 		                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#877: FILE: mm/filemap.c:664:
+		err = __add_to_page_cache(page,mapping,offset);
 		                                      ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#896: FILE: mm/filemap.c:684:
+	page = rat_lookup (mapping, offset);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#907: FILE: mm/filemap.c:693:
+	error = add_to_page_cache_unique (page, mapping, offset);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#908: FILE: mm/filemap.c:694:
+^Iwhile (error == -ENOMEM) {  $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#913: FILE: mm/filemap.c:699:
+		error = add_to_page_cache_unique (page, mapping, offset);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#925: FILE: mm/filemap.c:710:
+^I * or we are out of memory.  $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#939: FILE: mm/filemap.c:811:
+struct page * __find_get_page(struct address_space *mapping, unsigned long offset)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#950: FILE: mm/filemap.c:820:
+	page = rat_lookup (mapping, offset);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#967: FILE: mm/filemap.c:835:
+	page = rat_lookup (mapping, offset);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#982: FILE: mm/filemap.c:849:
+static struct page * FASTCALL(__find_lock_page_helper(struct address_space *, unsigned long));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#994: FILE: mm/filemap.c:860:
+	page = rat_lookup (mapping, offset);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1048: FILE: mm/filemap.c:910:
+				if (__add_to_page_cache (newpage, mapping, index) == 0) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#1076: FILE: mm/filemap.c:969:
+	if ( unlikely(add_to_page_cache_unique(page, mapping, index)) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1076: FILE: mm/filemap.c:969:
+	if ( unlikely(add_to_page_cache_unique(page, mapping, index)) ) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1098: FILE: mm/filemap.c:1315:
+		page = rat_lookup (mapping, index);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1124: FILE: mm/filemap.c:1426:
+			page = rat_lookup (mapping, index);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1132: FILE: mm/filemap.c:1434:
+		if (__add_to_page_cache (cached_page, mapping, index) < 0) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1133: FILE: mm/filemap.c:1435:
+			spin_unlock (&mapping->i_shared_lock);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1169: FILE: mm/filemap.c:2548:
+	struct page * page;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1174: FILE: mm/filemap.c:2551:
+	page = rat_lookup (as, pgoff);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1200: FILE: mm/filemap.c:2707:
+		err = add_to_page_cache_unique (cached_page, mapping, index);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1229: FILE: mm/filemap.c:2779:
+		err = add_to_page_cache_unique (*cached_page, mapping, index);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1245: FILE: mm/filemap.c:3046:
+static void rat_node_ctor (void *node, kmem_cache_t *cachep, unsigned long flags)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1256: FILE: mm/filemap.c:3048:
+	memset (node, 0, sizeof (rat_node_t));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1256: FILE: mm/filemap.c:3048:
+	memset (node, 0, sizeof (rat_node_t));

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void __init page_cache_init() should probably be void __init page_cache_init(void)
#1272: FILE: mm/filemap.c:3051:
+void __init page_cache_init()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1274: FILE: mm/filemap.c:3053:
+	rat_node_cachep = kmem_cache_create ("rat node cache", sizeof (rat_node_t), 0,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1274: FILE: mm/filemap.c:3053:
+	rat_node_cachep = kmem_cache_create ("rat node cache", sizeof (rat_node_t), 0,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1277: FILE: mm/filemap.c:3056:
+		panic ("Failed to create pagecache cache\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1283: FILE: mm/rat.c:1:
+/* Page cache radix tree.  $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1283: FILE: mm/rat.c:1:
+/* Page cache radix tree.  

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1291: FILE: mm/rat.c:9:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1296: FILE: mm/rat.c:14:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1298: FILE: mm/rat.c:16:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1299: FILE: mm/rat.c:17:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1308: FILE: mm/rat.c:26:
+#if 0

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - rat_node_t *rat_node_alloc() should probably be rat_node_t *rat_node_alloc(void)
#1310: FILE: mm/rat.c:28:
+rat_node_t *rat_node_alloc ()

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1310: FILE: mm/rat.c:28:
+rat_node_t *rat_node_alloc ()

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1312: FILE: mm/rat.c:30:
+	return kmem_cache_alloc (rat_node_cachep, GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1315: FILE: mm/rat.c:33:
+void rat_node_free (rat_node_t *node)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1317: FILE: mm/rat.c:35:
+	kmem_cache_free (rat_node_cachep, node);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1323: FILE: mm/rat.c:41:
+rat_extend (struct address_space *mapping, unsigned long index)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1330: FILE: mm/rat.c:48:
+	while (index > rat_index_max (height))

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#1331: FILE: mm/rat.c:49:
+		height ++;
 		       ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mapping->root"
#1333: FILE: mm/rat.c:51:
+	if (mapping->root == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'addtional' may be misspelled - perhaps 'additional'?
#1339: FILE: mm/rat.c:57:
+		/* Allocate addtional node.  */
 		            ^^^^^^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1340: FILE: mm/rat.c:58:
+		node = kmem_cache_alloc (rat_node_cachep, GFP_ATOMIC);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node"
#1341: FILE: mm/rat.c:59:
+		if (node == NULL)

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1345: FILE: mm/rat.c:63:
+		node->slots [0] = mapping->root;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1357: FILE: mm/rat.c:75:
+rat_reserve (struct address_space *mapping, unsigned long index, struct page ***pslot)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1363: FILE: mm/rat.c:81:
+	if (index > rat_index_max (mapping->height) && rat_extend (mapping, index))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1363: FILE: mm/rat.c:81:
+	if (index > rat_index_max (mapping->height) && rat_extend (mapping, index))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mapping->height'
#1363: FILE: mm/rat.c:81:
+	if (index > rat_index_max (mapping->height) && rat_extend (mapping, index))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1365: FILE: mm/rat.c:83:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1365: FILE: mm/rat.c:83:
+    $

CHECK:SPACING: No space is necessary after a cast
#1369: FILE: mm/rat.c:87:
+	slot = (rat_node_t **) &mapping->root;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!slot"
#1372: FILE: mm/rat.c:90:
+		if (*slot == NULL) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1374: FILE: mm/rat.c:92:
+			tmp = kmem_cache_alloc (rat_node_cachep, GFP_ATOMIC);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp"
#1375: FILE: mm/rat.c:93:
+			if (tmp == NULL)

CHECK:SPACING: No space is necessary after a cast
#1385: FILE: mm/rat.c:103:
+		slot = (rat_node_t **) (node->slots + ((index >> shift) & RAT_MAP_MASK));

ERROR:SPACING: space prohibited before that '--' (ctx:WxO)
#1387: FILE: mm/rat.c:105:
+		height --;
 		       ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "slot"
#1390: FILE: mm/rat.c:108:
+	if (*slot != NULL)

CHECK:SPACING: No space is necessary after a cast
#1396: FILE: mm/rat.c:114:
+	*pslot = (struct page **) slot;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1403: FILE: mm/rat.c:121:
+rat_lookup (struct address_space *mapping, unsigned long index)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1409: FILE: mm/rat.c:127:
+	if (index > rat_index_max (height))

CHECK:SPACING: No space is necessary after a cast
#1413: FILE: mm/rat.c:131:
+	slot = (rat_node_t **) &mapping->root;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!slot"
#1416: FILE: mm/rat.c:134:
+		if (*slot == NULL)

CHECK:SPACING: No space is necessary after a cast
#1419: FILE: mm/rat.c:137:
+		slot = (rat_node_t **) ((*slot)->slots + ((index >> shift) & RAT_MAP_MASK));

ERROR:SPACING: space prohibited before that '--' (ctx:WxO)
#1421: FILE: mm/rat.c:139:
+		height --;
 		       ^

CHECK:SPACING: No space is necessary after a cast
#1424: FILE: mm/rat.c:142:
+	return (struct page *) *slot;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1429: FILE: mm/rat.c:147:
+rat_delete (struct address_space *mapping, unsigned long index)

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1435: FILE: mm/rat.c:153:
+	} path [ RAT_INDEX_BITS / RAT_MAP_SHIFT + 2], *pathp = path;

ERROR:SPACING: space prohibited after that open square bracket '['
#1435: FILE: mm/rat.c:153:
+	} path [ RAT_INDEX_BITS / RAT_MAP_SHIFT + 2], *pathp = path;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1438: FILE: mm/rat.c:156:
+	if (index > rat_index_max (height))

CHECK:SPACING: No space is necessary after a cast
#1443: FILE: mm/rat.c:161:
+	pathp->slot = (rat_node_t **) &mapping->root;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pathp->slot"
#1446: FILE: mm/rat.c:164:
+		if (*pathp->slot == NULL)

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1449: FILE: mm/rat.c:167:
+		pathp [1].node = *pathp [0].slot;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1449: FILE: mm/rat.c:167:
+		pathp [1].node = *pathp [0].slot;

CHECK:SPACING: No space is necessary after a cast
#1450: FILE: mm/rat.c:168:
+		pathp [1].slot = (rat_node_t **) (pathp [1].node->slots

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1450: FILE: mm/rat.c:168:
+		pathp [1].slot = (rat_node_t **) (pathp [1].node->slots

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1450: FILE: mm/rat.c:168:
+		pathp [1].slot = (rat_node_t **) (pathp [1].node->slots

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#1452: FILE: mm/rat.c:170:
+		pathp ++;
 		      ^

ERROR:SPACING: space prohibited before that '--' (ctx:WxO)
#1454: FILE: mm/rat.c:172:
+		height --;
 		       ^

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1457: FILE: mm/rat.c:175:
+	if (*pathp [0].slot == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!slot"
#1457: FILE: mm/rat.c:175:
+	if (*pathp [0].slot == NULL)

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1460: FILE: mm/rat.c:178:
+	*pathp [0].slot = NULL;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1462: FILE: mm/rat.c:180:
+	while (pathp [0].node && --pathp [0].node->count == 0) {

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1462: FILE: mm/rat.c:180:
+	while (pathp [0].node && --pathp [0].node->count == 0) {

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1465: FILE: mm/rat.c:183:
+		kmem_cache_free (rat_node_cachep, pathp [1].node);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1465: FILE: mm/rat.c:183:
+		kmem_cache_free (rat_node_cachep, pathp [1].node);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1499: FILE: mm/shmem.c:388:
+	if (!move_from_swap_cache (page, offset + idx, info->inode->i_mapping))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1527: FILE: mm/shmem.c:452:
+	err = move_to_swap_cache (page, swap);

CHECK:CAMELCASE: Avoid CamelCase: <UnlockPage>
#1536: FILE: mm/shmem.c:459:
+		UnlockPage(page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1547: FILE: mm/shmem.c:463:
+	spin_unlock (&info->lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1548: FILE: mm/shmem.c:464:
+	swap_free (swap);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1549: FILE: mm/shmem.c:465:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1570: FILE: mm/shmem.c:550:
+		if (move_from_swap_cache (page, idx, mapping))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1586: FILE: mm/shmem.c:576:
+		while (add_to_page_cache (page, mapping, idx) < 0) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1605: FILE: mm/shmem.c:600:
+	spin_unlock (&info->lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1606: FILE: mm/shmem.c:601:
+	UnlockPage (page);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1607: FILE: mm/shmem.c:602:
+	page_cache_release (page);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1665: FILE: mm/swap_state.c:136:
+int move_to_swap_cache (struct page *page, swp_entry_t entry)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1672: FILE: mm/swap_state.c:143:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1674: FILE: mm/swap_state.c:145:
+	if (!swap_duplicate (entry)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1675: FILE: mm/swap_state.c:146:
+		INC_CACHE_INFO (noent_race);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1679: FILE: mm/swap_state.c:150:
+	spin_lock (&swapper_space.i_shared_lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1680: FILE: mm/swap_state.c:151:
+	spin_lock (&mapping->i_shared_lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1682: FILE: mm/swap_state.c:153:
+	err = rat_reserve (&swapper_space, entry.val, &pslot);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1685: FILE: mm/swap_state.c:156:
+		__remove_inode_page (page);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1698: FILE: mm/swap_state.c:169:
+	spin_unlock (&mapping->i_shared_lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1699: FILE: mm/swap_state.c:170:
+	spin_unlock (&swapper_space.i_shared_lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1702: FILE: mm/swap_state.c:173:
+		INC_CACHE_INFO (add_total);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1706: FILE: mm/swap_state.c:177:
+	swap_free (entry);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1709: FILE: mm/swap_state.c:180:
+		INC_CACHE_INFO (exist_race);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1714: FILE: mm/swap_state.c:185:
+int move_from_swap_cache (struct page *page, unsigned long index, struct address_space *mapping)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1720: FILE: mm/swap_state.c:191:
+		BUG();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1722: FILE: mm/swap_state.c:193:
+	spin_lock (&swapper_space.i_shared_lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1723: FILE: mm/swap_state.c:194:
+	spin_lock (&mapping->i_shared_lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1725: FILE: mm/swap_state.c:196:
+	err = rat_reserve (mapping, index, &pslot);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1729: FILE: mm/swap_state.c:200:
+		block_flushpage (page, 0);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1731: FILE: mm/swap_state.c:202:
+		__delete_from_swap_cache (page);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1732: FILE: mm/swap_state.c:203:
+		swap_free (entry);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1740: FILE: mm/swap_state.c:211:
+		add_page_to_inode_queue (mapping, page);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1741: FILE: mm/swap_state.c:212:
+		atomic_inc (&page_cache_size);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1744: FILE: mm/swap_state.c:215:
+	spin_lock (&mapping->i_shared_lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1745: FILE: mm/swap_state.c:216:
+	spin_lock (&swapper_space.i_shared_lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1791: FILE: mm/vmscan.c:139:
+		switch (add_to_swap_cache (page, entry)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1797: FILE: mm/vmscan.c:145:
+			swap_free (entry);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1851: FILE: mm/vmscan.c:483:
+			UnlockPage (page);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000490211.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 56 errors, 115 warnings, 31 checks, 1714 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000490211.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
