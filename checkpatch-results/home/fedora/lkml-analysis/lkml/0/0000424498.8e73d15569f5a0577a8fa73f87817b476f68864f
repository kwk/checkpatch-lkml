WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
diff -Naur linux-2.5.41/drivers/evms/core/discover.c linux-2.5.41-evms/drivers/evms/core/discover.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: drivers/evms/core/discover.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#56: FILE: drivers/evms/core/discover.c:15:
+ *   along with this program;  if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#57: FILE: drivers/evms/core/discover.c:16:
+ *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

WARNING:LINE_SPACING: Missing a blank line after declarations
#83: FILE: drivers/evms/core/discover.c:42:
+	struct evms_plugin_header *plugin;
+	LOG_EXTRA("discovering logical disks...\n");

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <GetPluginType>
#86: FILE: drivers/evms/core/discover.c:45:
+		if (GetPluginType(plugin->id) == EVMS_DEVICE_MANAGER) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LINE_SPACING: Missing a blank line after declarations
#125: FILE: drivers/evms/core/discover.c:84:
+	struct evms_plugin_header *plugin;
+	LOG_EXTRA("discovering segments...\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#184: FILE: drivers/evms/core/discover.c:143:
+	struct evms_plugin_header *plugin;
+	LOG_EXTRA("discovering regions...\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#273: FILE: drivers/evms/core/discover.c:232:
+	if (node->feature_header) {
+		return 0;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#277: FILE: drivers/evms/core/discover.c:236:
+	size_in_sectors = evms_cs_size_in_vsectors(sizeof (*fh));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#280: FILE: drivers/evms/core/discover.c:239:
+	if (!fh1) {
+		return -ENOMEM;
+	}

WARNING:SPLIT_STRING: quoted string split across lines
#303: FILE: drivers/evms/core/discover.c:262:
+			LOG_ERROR("error(%d) probing for %s feature header "
+				  "(at "PFU64") on '%s'.\n", rc, location_name,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#303: FILE: drivers/evms/core/discover.c:262:
+				  "(at "PFU64") on '%s'.\n", rc, location_name,

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:LINE_SPACING: Missing a blank line after declarations
#316: FILE: drivers/evms/core/discover.c:275:
+			u32 org_crc, final_crc;
+			org_crc = cpu_to_le32(fh->crc);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#320: FILE: drivers/evms/core/discover.c:279:
+						  sizeof (*fh));

WARNING:SPLIT_STRING: quoted string split across lines
#323: FILE: drivers/evms/core/discover.c:282:
+				LOG_ERROR("CRC mismatch error [stored(%x), "
+					  "computed(%x)] in %s feature header "

WARNING:SPLIT_STRING: quoted string split across lines
#324: FILE: drivers/evms/core/discover.c:283:
+					  "computed(%x)] in %s feature header "
+					  "(at "PFU64") on '%s'.\n",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#324: FILE: drivers/evms/core/discover.c:283:
+					  "(at "PFU64") on '%s'.\n",

WARNING:SPLIT_STRING: quoted string split across lines
#332: FILE: drivers/evms/core/discover.c:291:
+			LOG_WARNING("CRC disabled in %s feature header "
+				    "(at "PFU64") on '%s'.\n", location_name,

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#332: FILE: drivers/evms/core/discover.c:291:
+				    "(at "PFU64") on '%s'.\n", location_name,

WARNING:SPLIT_STRING: quoted string split across lines
#344: FILE: drivers/evms/core/discover.c:303:
+			LOG_ERROR("error: obsolete version(%d,%d,%d) in %s "
+				  "feature header on '%s'.\n",

WARNING:SPLIT_STRING: quoted string split across lines
#365: FILE: drivers/evms/core/discover.c:324:
+				LOG_WARNING("%s feature header sequence number"
+					    "("PFU64") mismatches %s feature "

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#365: FILE: drivers/evms/core/discover.c:324:
+					    "("PFU64") mismatches %s feature "

WARNING:SPLIT_STRING: quoted string split across lines
#366: FILE: drivers/evms/core/discover.c:325:
+					    "("PFU64") mismatches %s feature "
+					    "header sequence number("PFU64") "

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#366: FILE: drivers/evms/core/discover.c:325:
+					    "header sequence number("PFU64") "

WARNING:SPLIT_STRING: quoted string split across lines
#367: FILE: drivers/evms/core/discover.c:326:
+					    "header sequence number("PFU64") "
+					    "on '%s'!\n", EVMS_PRIMARY_STRING,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#384: FILE: drivers/evms/core/discover.c:343:
+	} else			/* getting different return codes for each copy */
[...]
+	 */ if ((rc_array[0] == 0) || (rc_array[1] == 0)) {

CHECK:BRACES: Unbalanced braces around else statement
#384: FILE: drivers/evms/core/discover.c:343:
+	} else			/* getting different return codes for each copy */

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#386: FILE: drivers/evms/core/discover.c:345:
+	/* if either primary or secondary copy is
+	   * valid, use the valid copy.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TABSTOP: Statements should start on a tabstop
#387: FILE: drivers/evms/core/discover.c:346:
+	 */ if ((rc_array[0] == 0) || (rc_array[1] == 0)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#387: FILE: drivers/evms/core/discover.c:346:
+	   * valid, use the valid copy.
+	 */ if ((rc_array[0] == 0) || (rc_array[1] == 0)) {

WARNING:SPLIT_STRING: quoted string split across lines
#406: FILE: drivers/evms/core/discover.c:365:
+		LOG_WARNING("warning: error(%d) probing/verifying the %s "
+			    "feature header on '%s'.\n",

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#408: FILE: drivers/evms/core/discover.c:367:
+	} else
[...]
+	if ((rc_array[0] == -EINVAL) || (rc_array[1] == -EINVAL)) {

CHECK:BRACES: Unbalanced braces around else statement
#408: FILE: drivers/evms/core/discover.c:367:
+	} else

WARNING:BRACES: braces {} are not necessary for single statement blocks
#413: FILE: drivers/evms/core/discover.c:372:
+	if ((rc_array[0] == -EINVAL) || (rc_array[1] == -EINVAL)) {
+		rc = -EINVAL;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#417: FILE: drivers/evms/core/discover.c:376:
+	if (rc) {
+		fh = NULL;
+	}

WARNING:TYPO_SPELLING: 'persistant' may be misspelled - perhaps 'persistent'?
#450: FILE: drivers/evms/core/discover.c:409:
+ * which keeps track of the persistant EVMS volume data (Serial #, minor #, name). this
                             ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#452: FILE: drivers/evms/core/discover.c:411:
+ * object. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#453: FILE: drivers/evms/core/discover.c:412:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#455: FILE: drivers/evms/core/discover.c:414:
+ * exported. if we detect these flags here, we purge the storage object from memory. $

WARNING:SPLIT_STRING: quoted string split across lines
#511: FILE: drivers/evms/core/discover.c:470:
+				LOG_DEFAULT("stop data detected, deleting "
+					    "'%s'.\n", node->name);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#517: FILE: drivers/evms/core/discover.c:476:
+			/* we have a valid feature header.
+			   * initialize appropriate node fields

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#519: FILE: drivers/evms/core/discover.c:478:
+			   * to indicate this.
+			 */

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#523: FILE: drivers/evms/core/discover.c:482:
+			node->volume_info
+			    = kmalloc(sizeof (struct evms_volume_info),

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#523: FILE: drivers/evms/core/discover.c:482:
+			    = kmalloc(sizeof (struct evms_volume_info),

WARNING:SPLIT_STRING: quoted string split across lines
#527: FILE: drivers/evms/core/discover.c:486:
+				LOG_ERROR("error(%d): allocating volume info "
+					  "struct, deleting '%s'.\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#534: FILE: drivers/evms/core/discover.c:493:
+			/* set up volume
+			   * info struct

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#535: FILE: drivers/evms/core/discover.c:494:
+			   * info struct
+			 */

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'node->volume_info->volume_sn'
#537: FILE: drivers/evms/core/discover.c:496:
+			node->volume_info->
+			    volume_sn =

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'node->volume_info->volume_minor'
#540: FILE: drivers/evms/core/discover.c:499:
+			node->volume_info->
+			    volume_minor =

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'node->volume_info->volume_name'
#543: FILE: drivers/evms/core/discover.c:502:
+			strcpy(node->volume_info->
+			       volume_name, node->feature_header->volume_name);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#553: FILE: drivers/evms/core/discover.c:512:
+ * @type:     ^I^Itype of node to move (see defines below)$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#597: FILE: drivers/evms/core/discover.c:556:
+			if (!(node->flags & EVMS_VOLUME_FLAG)) {
+				found_node = 1;
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#602: FILE: drivers/evms/core/discover.c:561:
+			if (node->flags & EVMS_VOLUME_FLAG) {
+				found_node = 1;
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#608: FILE: drivers/evms/core/discover.c:567:
+			if (node->volume_info->volume_sn == compare64) {
+				found_node = 1;
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#615: FILE: drivers/evms/core/discover.c:574:
+					if (fh->feature_id == compare32) {
+						found_node = 1;
+					}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#631: FILE: drivers/evms/core/discover.c:590:
+ * edef_apply_feature - apply a feature to a list of objects $

WARNING:LINE_SPACING: Missing a blank line after declarations
#646: FILE: drivers/evms/core/discover.c:605:
+	struct evms_plugin_header *plugin;
+	spin_lock(&plugin_lock);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#659: FILE: drivers/evms/core/discover.c:618:
+ * @id:^I       ^Ithe feature or plugin ID$

WARNING:LINE_SPACING: Missing a blank line after declarations
#671: FILE: drivers/evms/core/discover.c:630:
+	struct evms_plugin_header *plugin;
+	spin_lock(&plugin_lock);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#731: FILE: drivers/evms/core/discover.c:690:
+	    vbi->associative_feature_count = vbi->max_depth = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#738: FILE: drivers/evms/core/discover.c:697:
+	if (rc) {
+		return rc;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#745: FILE: drivers/evms/core/discover.c:704:
+			if (rc) {
+				return rc;
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#763: FILE: drivers/evms/core/discover.c:722:
+		if (!fh) {
+			continue;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#773: FILE: drivers/evms/core/discover.c:732:
+			if (rc) {
+				return rc;
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#783: FILE: drivers/evms/core/discover.c:742:
+		if (GetPluginType(vbi->plugin->id) == EVMS_ASSOCIATIVE_FEATURE) {
+			vbi->associative_feature_count++;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#792: FILE: drivers/evms/core/discover.c:751:
+		if (rc) {
+			return rc;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#795: FILE: drivers/evms/core/discover.c:754:
+		if (!vbi->plugin) {
+			return -ENODATA;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#798: FILE: drivers/evms/core/discover.c:757:
+		if (list_empty(&vbi->feature_node_list)) {
+			return -ENODATA;
+		}

WARNING:SPLIT_STRING: quoted string split across lines
#818: FILE: drivers/evms/core/discover.c:777:
+			LOG_ERROR("associative ERROR: > 1 nodes(%d) remaining "
+				  "to be processed!\n", vbi->node_count);

WARNING:SPLIT_STRING: quoted string split across lines
#823: FILE: drivers/evms/core/discover.c:782:
+			LOG_ERROR("associative ERROR: associative feature "
+				  "found at node depth("PFU64") != 1!\n",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#823: FILE: drivers/evms/core/discover.c:782:
+				  "found at node depth("PFU64") != 1!\n",

WARNING:SPLIT_STRING: quoted string split across lines
#832: FILE: drivers/evms/core/discover.c:791:
+			LOG_ERROR("max depth ERROR: > 1 nodes(%d) remaining "
+				  "to be processed!\n", vbi->node_count);

WARNING:SPLIT_STRING: quoted string split across lines
#839: FILE: drivers/evms/core/discover.c:798:
+			LOG_ERROR("max depth 1 ERROR: > 1 features remaining "
+				  "to be processed!\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#871: FILE: drivers/evms/core/discover.c:830:
+		if (!vbi.plugin) {
+			rc = -ENODATA;
+		}

WARNING:SPLIT_STRING: quoted string split across lines
#894: FILE: drivers/evms/core/discover.c:853:
+					LOG_ERROR("ERROR: detected > 1 node at "
+						  "volume completion!\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#900: FILE: drivers/evms/core/discover.c:859:
+					LOG_ERROR("ERROR: depth("PFU64"): "

WARNING:SPLIT_STRING: quoted string split across lines
#901: FILE: drivers/evms/core/discover.c:860:
+					LOG_ERROR("ERROR: depth("PFU64"): "
+						  "expected another feature!\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#916: FILE: drivers/evms/core/discover.c:875:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPLIT_STRING: quoted string split across lines
#954: FILE: drivers/evms/core/discover.c:913:
+		LOG_WARNING("%s error(%d): node gone, assumed deleted by "
+			    "plugin.\n", log_text, return_code);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1003: FILE: drivers/evms/core/discover.c:962:
+		if (rc) {
+			break;
+		}

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1011: FILE: drivers/evms/core/discover.c:970:
+			node = list_entry(volume_node_list.next, struct evms_logical_node, discover);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#1025: FILE: drivers/evms/core/discover.c:984:
+				node = list_entry(volume_node_list.next, struct evms_logical_node, discover);

WARNING:SPLIT_STRING: quoted string split across lines
#1027: FILE: drivers/evms/core/discover.c:986:
+				LOG_ERROR("encountered fatal error building "
+					  "volume '%s'\n",

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#1031: FILE: drivers/evms/core/discover.c:990:
+				node = list_entry(volume_node_list.next, struct evms_logical_node, discover);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1038: FILE: drivers/evms/core/discover.c:997:
+		if (rc) {
+			break;
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1049: FILE: drivers/evms/core/discover.c:1008:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1054: FILE: drivers/evms/core/discover.c:1013:
+ * $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1121: FILE: drivers/evms/core/discover.c:1080:
+	if (rc) {
+		return rc;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1126: FILE: drivers/evms/core/discover.c:1085:
+	if (rc) {
+		return rc;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1131: FILE: drivers/evms/core/discover.c:1090:
+	if (rc) {
+		return rc;
+	}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1152: FILE: drivers/evms/core/discover.c:1111:
+		BUG_ON(!gd);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1164: FILE: drivers/evms/core/discover.c:1123:
+	if (lv->flags & EVMS_DEVICE_REMOVABLE) {
+		gd->flags |= GENHD_FL_REMOVABLE;
+	}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUGO' are not preferred. Consider using octal permissions '0666'.
#1171: FILE: drivers/evms/core/discover.c:1130:
+				S_IFBLK | S_IRUGO | S_IWUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LINE_SPACING: Missing a blank line after declarations
#1192: FILE: drivers/evms/core/discover.c:1151:
+		struct evms_logical_volume *tmpvol;
+		list_for_each_entry(tmpvol, &evms_logical_volumes, volumes) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1193: FILE: drivers/evms/core/discover.c:1152:
+			BUG_ON(tmpvol->minor == lv->minor);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1194: FILE: drivers/evms/core/discover.c:1153:
+			if (tmpvol->minor > lv->minor) {
+				break;
+			}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1207: FILE: drivers/evms/core/discover.c:1166:
+evms_do_request_fn(request_queue_t * q)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1214: FILE: drivers/evms/core/discover.c:1173:
+ * @node: ^Ivolume object to process$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*lv)...) over kmalloc(sizeof(struct evms_logical_volume)...)
#1228: FILE: drivers/evms/core/discover.c:1187:
+		lv = kmalloc(sizeof(struct evms_logical_volume), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1229: FILE: drivers/evms/core/discover.c:1188:
+		BUG_ON(!lv);

CHECK:SPACING: No space is necessary after a cast
#1231: FILE: drivers/evms/core/discover.c:1190:
+		lv->requests_in_progress = (atomic_t) ATOMIC_INIT(0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1235: FILE: drivers/evms/core/discover.c:1194:
+	BUG_ON(!lv->name);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1239: FILE: drivers/evms/core/discover.c:1198:
+	if (lv->flags & EVMS_VOLUME_READ_ONLY) {
+		set_device_ro(mk_kdev(EVMS_MAJOR, minor), 1);
+	}

CHECK:SPACING: No space is necessary after a cast
#1250: FILE: drivers/evms/core/discover.c:1209:
+	lv->requests_in_progress = (atomic_t) ATOMIC_INIT(0);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1269: FILE: drivers/evms/core/discover.c:1228:
+ * @discover_list: ^Ilist of potential volume objects to export$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1284: FILE: drivers/evms/core/discover.c:1243:
+		int is_dup = 0;
+		while ((lv = find_next_volume(lv))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1287: FILE: drivers/evms/core/discover.c:1246:
+			if (!lv->node) {
+				continue;
+			}

WARNING:SPLIT_STRING: quoted string split across lines
#1301: FILE: drivers/evms/core/discover.c:1260:
+				LOG_DETAILS("deleting duplicate %s to EVMS "
+					    "volume(%u,%u,%s)...\n",

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1314: FILE: drivers/evms/core/discover.c:1273:
+ * @discover_list: ^Ilist of volume objects to export$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1326: FILE: drivers/evms/core/discover.c:1285:
+		struct evms_logical_volume *lv = NULL;
+		while ((lv = find_next_volume(lv))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1330: FILE: drivers/evms/core/discover.c:1289:
+			if (!(lv->flags & EVMS_VOLUME_SOFT_DELETED)) {
+				continue;
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1333: FILE: drivers/evms/core/discover.c:1292:
+			if (strcmp(EVMS_GET_NODE_NAME(node), lv->name)) {
+				continue;
+			}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1352: FILE: drivers/evms/core/discover.c:1311:
+ * @discover_list: ^Ilist of volume objects to export$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1367: FILE: drivers/evms/core/discover.c:1326:
+		if (!(node->flags & EVMS_VOLUME_FLAG)) {
+			continue;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1372: FILE: drivers/evms/core/discover.c:1331:
+		if (!requested_minor) {
+			continue;
+		}

WARNING:LINE_SPACING: Missing a blank line after declarations
#1381: FILE: drivers/evms/core/discover.c:1340:
+			struct evms_logical_volume *lv;
+			lv_node = NULL;

WARNING:SPLIT_STRING: quoted string split across lines
#1391: FILE: drivers/evms/core/discover.c:1350:
+			LOG_WARNING("EVMS volume(%s) requesting invalid/in-use "
+				    "minor(%d), assigning next available!\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1422: FILE: drivers/evms/core/discover.c:1381:
+	int i;
+	if (!dir) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1424: FILE: drivers/evms/core/discover.c:1383:
+			if (!lookup_volume(i)) {
+				return i;
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1430: FILE: drivers/evms/core/discover.c:1389:
+			if (!lookup_volume(i)) {
+				return i;
+			}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1440: FILE: drivers/evms/core/discover.c:1399:
+ * @discover_list: ^Ilist of volume objects to export$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1463: FILE: drivers/evms/core/discover.c:1422:
+		if (!(node->flags & EVMS_VOLUME_FLAG)) {
+			continue;
+		}

WARNING:SPLIT_STRING: quoted string split across lines
#1472: FILE: drivers/evms/core/discover.c:1431:
+			LOG_CRITICAL("no more minor numbers available for "
+				     "evms volumes!!!!\n");

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1483: FILE: drivers/evms/core/discover.c:1442:
+ * @discover_list: ^Ilist of volume objects to export$

WARNING:SPLIT_STRING: quoted string split across lines
#1501: FILE: drivers/evms/core/discover.c:1460:
+			LOG_CRITICAL("no more minor numbers available for "
+				     "compatibility volumes!!!!\n");

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1512: FILE: drivers/evms/core/discover.c:1471:
+ * @discover_list: ^Ilist of volume objects to export$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1528: FILE: drivers/evms/core/discover.c:1487:
+		if (!(lv->flags & EVMS_VOLUME_SOFT_DELETED)) {
+			continue;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1531: FILE: drivers/evms/core/discover.c:1490:
+		if (is_busy(mk_kdev(EVMS_MAJOR, lv->minor))) {
+			lv->flags |= EVMS_VOLUME_CORRUPT;
+		}

WARNING:SPLIT_STRING: quoted string split across lines
#1535: FILE: drivers/evms/core/discover.c:1494:
+		LOG_ERROR("error: rediscovery failed to find %smounted "
+			  "'soft deleted' volume(%u,%u,%s)...\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1543: FILE: drivers/evms/core/discover.c:1502:
+			LOG_ERROR("    releasing minor(%d) used by "
+				  "volume(%s)!\n", lv->minor, lv->name);

ERROR:SPACING: space required before the open parenthesis '('
#1566: FILE: drivers/evms/core/discover.c:1525:
+	while((lv = find_next_volume(lv))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1568: FILE: drivers/evms/core/discover.c:1527:
+		if (!lv->quiesced) {
+			continue;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1571: FILE: drivers/evms/core/discover.c:1530:
+		if (!lv->node) {
+			continue;
+		}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'discover_parms == NULL'
#1627: FILE: drivers/evms/core/discover.c:1586:
+	if ((discover_parms == NULL) ||
+	    (discover_parms->drive_count == REDISCOVER_ALL_DEVICES))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'discover_parms->drive_count == REDISCOVER_ALL_DEVICES'
#1627: FILE: drivers/evms/core/discover.c:1586:
+	if ((discover_parms == NULL) ||
+	    (discover_parms->drive_count == REDISCOVER_ALL_DEVICES))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!discover_parms"
#1627: FILE: drivers/evms/core/discover.c:1586:
+	if ((discover_parms == NULL) ||

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#1636: FILE: drivers/evms/core/discover.c:1595:
+		int move_node;
+		move_node = use_all_disks;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1640: FILE: drivers/evms/core/discover.c:1599:
+^I^I^I^Istruct evms_logical_node *disk_node = $

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'discover_parms->drive_array[i]'
#1642: FILE: drivers/evms/core/discover.c:1601:
+				    DEV_HANDLE_TO_NODE(discover_parms->
+						       drive_array[i]);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1650: FILE: drivers/evms/core/discover.c:1609:
+			if (list_empty(&node->discover)) {
+				list_add_tail(&node->discover, trg_list);
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1682: FILE: drivers/evms/core/discover.c:1641:
+	if (!list_empty(&discover_list)) {
+		evms_discover_segments(&discover_list);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1685: FILE: drivers/evms/core/discover.c:1644:
+	if (!list_empty(&discover_list)) {
+		evms_discover_regions(&discover_list);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1688: FILE: drivers/evms/core/discover.c:1647:
+	if (!list_empty(&discover_list)) {
+		evms_discover_evms_features(&discover_list);
+	}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1695: FILE: drivers/evms/core/discover.c:1654:
+	BUG_ON(!list_empty(&discover_list));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1722: FILE: drivers/evms/core/discover.c:1681:
+^I^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1748: FILE: drivers/evms/core/discover.c:1707:
+	if (MAJOR(ROOT_DEV) == EVMS_MAJOR) {
+		find_root_fs_dev();
+	}

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#1754: FILE: drivers/evms/core/discover.c:1713:
+__initcall(evms_init_discover);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000424498.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 118 warnings, 18 checks, 1714 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000424498.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
