WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
This merges two sets of files which had no business being split apart in the

ERROR:TRAILING_WHITESPACE: trailing whitespace
#34: FILE: arch/um/include/syscall.h:1:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#34: FILE: arch/um/include/syscall.h:1:
+/* 

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#42: FILE: arch/um/include/syscall.h:9:
+extern int record_syscall_start(int syscall);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#43: FILE: arch/um/include/syscall.h:10:
+extern void record_syscall_end(int index, long result);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#131: FILE: arch/um/kernel/skas/syscall.c:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#131: FILE: arch/um/kernel/skas/syscall.c:1:
+/* 

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: arch/um/kernel/skas/syscall.c:22:
+  ^Iint index;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#152: FILE: arch/um/kernel/skas/syscall.c:22:
+  ^Iint index;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: arch/um/kernel/skas/syscall.c:22:
+  ^Iint index;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: arch/um/kernel/skas/syscall.c:24:
+  ^Iindex = record_syscall_start(UPT_SYSCALL_NR(r));$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#154: FILE: arch/um/kernel/skas/syscall.c:24:
+  ^Iindex = record_syscall_start(UPT_SYSCALL_NR(r));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: arch/um/kernel/skas/syscall.c:24:
+  ^Iindex = record_syscall_start(UPT_SYSCALL_NR(r));$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#162: FILE: arch/um/kernel/skas/syscall.c:32:
+^I * strace -f -c bash -c 'ls ; ls' breaks, sometimes not tracing $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#165: FILE: arch/um/kernel/skas/syscall.c:35:
+^I * The assembly looks functionally the same to me.  This is $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'syscall >= NR_syscalls'
#170: FILE: arch/um/kernel/skas/syscall.c:40:
+	if((syscall >= NR_syscalls) || (syscall < 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'syscall < 0'
#170: FILE: arch/um/kernel/skas/syscall.c:40:
+	if((syscall >= NR_syscalls) || (syscall < 0))

ERROR:SPACING: space required before the open parenthesis '('
#170: FILE: arch/um/kernel/skas/syscall.c:40:
+	if((syscall >= NR_syscalls) || (syscall < 0))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#171: FILE: arch/um/kernel/skas/syscall.c:41:
+		result = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#172: FILE: arch/um/kernel/skas/syscall.c:42:
+	else result = EXECUTE_SYSCALL(syscall, regs);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#178: FILE: arch/um/kernel/skas/syscall.c:48:
+  ^Irecord_syscall_end(index, result);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#178: FILE: arch/um/kernel/skas/syscall.c:48:
+  ^Irecord_syscall_end(index, result);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: arch/um/kernel/skas/syscall.c:48:
+  ^Irecord_syscall_end(index, result);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#283: FILE: arch/um/kernel/syscall.c:1:
+/* $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#283: FILE: arch/um/kernel/syscall.c:1:
+/* 

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(syscall_record)
#304: FILE: arch/um/kernel/syscall.c:22:
+	max = sizeof(syscall_record)/sizeof(syscall_record[0]);

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#304: FILE: arch/um/kernel/syscall.c:22:
+	max = sizeof(syscall_record)/sizeof(syscall_record[0]);
 	                            ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#311: FILE: arch/um/kernel/syscall.c:29:
+	return(index);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:CODE_INDENT: code indent should use tabs where possible
#397: FILE: arch/um/kernel/tt/syscall_kern.c:26:
+  ^Iindex = record_syscall_start(syscall);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#397: FILE: arch/um/kernel/tt/syscall_kern.c:26:
+  ^Iindex = record_syscall_start(syscall);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#397: FILE: arch/um/kernel/tt/syscall_kern.c:26:
+  ^Iindex = record_syscall_start(syscall);$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#412: FILE: arch/um/kernel/tt/syscall_kern.c:38:
+		result = -ENOSYS;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#413: FILE: arch/um/kernel/tt/syscall_kern.c:39:
+	else result = EXECUTE_SYSCALL(syscall, regs);

ERROR:CODE_INDENT: code indent should use tabs where possible
#436: FILE: arch/um/kernel/tt/syscall_kern.c:50:
+  ^Irecord_syscall_end(index, result);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#436: FILE: arch/um/kernel/tt/syscall_kern.c:50:
+  ^Irecord_syscall_end(index, result);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#436: FILE: arch/um/kernel/tt/syscall_kern.c:50:
+  ^Irecord_syscall_end(index, result);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000155215.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 17 warnings, 5 checks, 235 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000155215.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
