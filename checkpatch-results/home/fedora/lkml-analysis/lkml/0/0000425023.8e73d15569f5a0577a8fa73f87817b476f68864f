WARNING:TYPO_SPELLING: 'meaningfull' may be misspelled - perhaps 'meaningful'?
#54: 
we need more measurements to get something meaningfull.
                                           ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#90: 
Content-Disposition: attachment; filename="01-numa_sched_core7-2.5.39.patch"

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#93: 
--- a/arch/i386/kernel/smpboot.c	Fri Sep 27 23:49:54 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#130: FILE: arch/ia64/kernel/smpboot.c:518:
 int __devinit

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#144: FILE: include/asm-i386/atomic.h:120:
+static inline int atomic_inc_return(atomic_t *v){

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open brace '{'
#144: FILE: include/asm-i386/atomic.h:120:
+static inline int atomic_inc_return(atomic_t *v){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INCLUDE_LINUX: Use #include <linux/topology.h> instead of <asm/topology.h>
#160: FILE: include/linux/sched.h:25:
+#include <asm/topology.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#177: FILE: include/linux/sched.h:461:
+extern void pooldata_lock(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#178: FILE: include/linux/sched.h:462:
+extern void pooldata_unlock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#180: FILE: include/linux/sched.h:464:
+extern void sched_migrate_task(task_t *p, int cpu);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#219: FILE: kernel/sched.c:197:
+int numpools, pool_ptr[MAX_NUMNODES+1], pool_cpus[NR_CPUS], pool_nr_cpus[MAX_NUMNODES];
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#229: FILE: kernel/sched.c:207:
+#define loop_over_node(i,n) for(i=pool_ptr[n]; i<pool_ptr[n+1]; i++)
                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#229: FILE: kernel/sched.c:207:
+#define loop_over_node(i,n) for(i=pool_ptr[n]; i<pool_ptr[n+1]; i++)
                                  ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#229: FILE: kernel/sched.c:207:
+#define loop_over_node(i,n) for(i=pool_ptr[n]; i<pool_ptr[n+1]; i++)
                                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#229: FILE: kernel/sched.c:207:
+#define loop_over_node(i,n) for(i=pool_ptr[n]; i<pool_ptr[n+1]; i++)
                                                            ^

ERROR:SPACING: space required before the open parenthesis '('
#229: FILE: kernel/sched.c:207:
+#define loop_over_node(i,n) for(i=pool_ptr[n]; i<pool_ptr[n+1]; i++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#229: FILE: kernel/sched.c:207:
+#define loop_over_node(i,n) for(i=pool_ptr[n]; i<pool_ptr[n+1]; i++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#229: FILE: kernel/sched.c:207:
+#define loop_over_node(i,n) for(i=pool_ptr[n]; i<pool_ptr[n+1]; i++)

WARNING:LINE_SPACING: Missing a blank line after declarations
#235: FILE: kernel/sched.c:213:
+	int i;
+	spin_lock(&pool_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#236: FILE: kernel/sched.c:214:
+^I/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#241: FILE: kernel/sched.c:219:
+	for (i=0; i<100; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#241: FILE: kernel/sched.c:219:
+	for (i=0; i<100; i++)
 	           ^

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#242: FILE: kernel/sched.c:220:
+		udelay(1000);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#259: FILE: kernel/sched.c:237:
+	ptr=0;
 	   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#260: FILE: kernel/sched.c:238:
+	for (n=0; n<numnodes; n++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#260: FILE: kernel/sched.c:238:
+	for (n=0; n<numnodes; n++) {
 	           ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#261: FILE: kernel/sched.c:239:
+		mask = pool_mask[n] = __node_to_cpu_mask(n) & cpu_online_map;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#263: FILE: kernel/sched.c:241:
+		for (cpu=0; cpu<NR_CPUS; cpu++)
 		        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#263: FILE: kernel/sched.c:241:
+		for (cpu=0; cpu<NR_CPUS; cpu++)
 		               ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#263: FILE: kernel/sched.c:241:
+		for (cpu=0; cpu<NR_CPUS; cpu++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#268: FILE: kernel/sched.c:246:
+	numpools=numnodes;
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#269: FILE: kernel/sched.c:247:
+	pool_ptr[numpools]=ptr;
 	                  ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#270: FILE: kernel/sched.c:248:
+	printk("CPU pools : %d\n",numpools);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#270: FILE: kernel/sched.c:248:
+	printk("CPU pools : %d\n",numpools);
 	                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#271: FILE: kernel/sched.c:249:
+	for (n=0;n<numpools;n++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#271: FILE: kernel/sched.c:249:
+	for (n=0;n<numpools;n++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#271: FILE: kernel/sched.c:249:
+	for (n=0;n<numpools;n++) {
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#271: FILE: kernel/sched.c:249:
+	for (n=0;n<numpools;n++) {
 	                   ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#272: FILE: kernel/sched.c:250:
+		printk("pool %d :",n);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#272: FILE: kernel/sched.c:250:
+		printk("pool %d :",n);
 		                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#273: FILE: kernel/sched.c:251:
+		loop_over_node(i,n)
 		                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#274: FILE: kernel/sched.c:252:
+			printk("%d ",pool_cpu(i));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#274: FILE: kernel/sched.c:252:
+			printk("%d ",pool_cpu(i));
 			            ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#275: FILE: kernel/sched.c:253:
+		printk("\n");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#281: FILE: kernel/sched.c:259:
+#define loop_over_node(i,n) for(i=0; i<NR_CPUS; i++)
                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#281: FILE: kernel/sched.c:259:
+#define loop_over_node(i,n) for(i=0; i<NR_CPUS; i++)
                                  ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#281: FILE: kernel/sched.c:259:
+#define loop_over_node(i,n) for(i=0; i<NR_CPUS; i++)
                                       ^

ERROR:SPACING: space required before the open parenthesis '('
#281: FILE: kernel/sched.c:259:
+#define loop_over_node(i,n) for(i=0; i<NR_CPUS; i++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#281: FILE: kernel/sched.c:259:
+#define loop_over_node(i,n) for(i=0; i<NR_CPUS; i++)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#285: FILE: kernel/sched.c:263:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#304: FILE: kernel/sched.c:729:
+	int i, ii, idx=-1, refload, load;
 	              ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#304: FILE: kernel/sched.c:729:
+	int i, ii, idx=-1, refload, load;
 	               ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#343: FILE: kernel/sched.c:736:
+		if (!cpu_online(i)) continue;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:TYPO_SPELLING: 'easilly' may be misspelled - perhaps 'easily'?
#380: FILE: kernel/sched.c:767:
+ * This concept can be extended easilly to more than two levels (multi-level
                                 ^^^^^^^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#390: FILE: kernel/sched.c:777:
+	int avg_load=-1, this_pool = cpu_to_node(this_cpu);
 	            ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#390: FILE: kernel/sched.c:777:
+	int avg_load=-1, this_pool = cpu_to_node(this_cpu);
 	             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#393: FILE: kernel/sched.c:780:
+#define BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))
                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#393: FILE: kernel/sched.c:780:
+#define BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))
                                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#393: FILE: kernel/sched.c:780:
+#define BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))
                                                                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#393: FILE: kernel/sched.c:780:
+#define BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))
                                                                          ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm' - possible side-effects?
#393: FILE: kernel/sched.c:780:
+#define BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 't' - possible side-effects?
#393: FILE: kernel/sched.c:780:
+#define BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'this_rq->nr_running > this_rq->prev_nr_running[this_cpu]'
#395: FILE: kernel/sched.c:782:
+	if (idle || (this_rq->nr_running > this_rq->prev_nr_running[this_cpu]))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_WHITESPACE: trailing whitespace
#402: FILE: kernel/sched.c:788:
+^I$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#417: FILE: kernel/sched.c:800:
+		avg_load += this_rq->load[1][pool]*pool_nr_cpus[pool];
 		                                  ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'best_cpu < 0'
#425: FILE: kernel/sched.c:808:
+	if ((best_cpu < 0) ||
+	    BALANCED(max_pool_load,this_rq->load[1][this_pool])) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#426: FILE: kernel/sched.c:809:
+	    BALANCED(max_pool_load,this_rq->load[1][this_pool])) {
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#432: FILE: kernel/sched.c:815:
+	if (BALANCED(avg_load,this_rq->load[1][this_pool]))
 	                     ^

CHECK:BRACES: Unbalanced braces around else statement
#453: FILE: kernel/sched.c:824:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#476: FILE: kernel/sched.c:830:
+	if (!BALANCED(this_rq->load[0][best_cpu],*nr_running)) {
 	                                        ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#476: FILE: kernel/sched.c:830:
+	if (!BALANCED(this_rq->load[0][best_cpu],*nr_running)) {
 	                                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#494: FILE: kernel/sched.c:842:
+ * while calling this routine. $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#506: FILE: kernel/sched.c:850:
+	int weight, maxweight=0;
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#517: FILE: kernel/sched.c:858:
+#define CAN_MIGRATE_TASK(p,rq,this_cpu)	\
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#517: FILE: kernel/sched.c:858:
+#define CAN_MIGRATE_TASK(p,rq,this_cpu)	\
                              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#517: FILE: kernel/sched.c:858:
+#define CAN_MIGRATE_TASK(p,rq,this_cpu)	\
+		((jiffies - (p)->sleep_timestamp > cache_decay_ticks) && \
+		p != rq->curr && \
+		 ((p)->cpus_allowed & (1UL<<(this_cpu))))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'rq' may be better as '(rq)' to avoid precedence issues
#517: FILE: kernel/sched.c:858:
+#define CAN_MIGRATE_TASK(p,rq,this_cpu)	\
+		((jiffies - (p)->sleep_timestamp > cache_decay_ticks) && \
+		p != rq->curr && \
+		 ((p)->cpus_allowed & (1UL<<(this_cpu))))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#520: FILE: kernel/sched.c:861:
+		 ((p)->cpus_allowed & (1UL<<(this_cpu))))
 		                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#538: FILE: kernel/sched.c:896:
+		weight = (jiffies - tmp->sleep_timestamp)/cache_decay_ticks;
 		                                         ^

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#558: FILE: kernel/sched.c:916:
+static inline void pull_task(runqueue_t *src_rq, prio_array_t *src_array, task_t *p, runqueue_t *this_rq, int this_cpu)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:TYPO_SPELLING: 'inbalance' may be misspelled - perhaps 'imbalance'?
#599: FILE: kernel/sched.c:933:
+ * inbalance (current runqueue is too short) then pull from
    ^^^^^^^^^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#612: FILE: kernel/sched.c:946:
+	if (spin_is_locked(&pool_lock)) return;

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#612: FILE: kernel/sched.c:946:
+	if (spin_is_locked(&pool_lock)) return;

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#641: FILE: kernel/sched.c:978:
+#define BUSY_REBALANCE_TICK (HZ/5 ?: 1)
                                ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#698: FILE: kernel/sched.c:2197:
+		if (sync)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#700: FILE: kernel/sched.c:2199:
+		else {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#725: FILE: kernel/sched.c:2310:
+	pool_ptr[1] = NR_CPUS;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#729: FILE: kernel/sched.c:2314:
+	pool_nr_cpus[0] = NR_CPUS;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#761: FILE: include/linux/sched.h:463:
+extern void sched_balance_exec(void);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#776: FILE: kernel/sched.c:2139:
+static atomic_t sched_node=ATOMIC_INIT(0);
                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#784: FILE: kernel/sched.c:2147:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#786: FILE: kernel/sched.c:2149:
+	loop_over_node(n,node) {
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#803: FILE: kernel/sched.c:2166:
+	int i, n, best_node=0, min_load, pool_load, min_pool=numa_node_id();
 	                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#803: FILE: kernel/sched.c:2166:
+	int i, n, best_node=0, min_load, pool_load, min_pool=numa_node_id();
 	                                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#816: FILE: kernel/sched.c:2179:
+			cpu=pool_cpu(i);
 			   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#817: FILE: kernel/sched.c:2180:
+			if (!cpu_online(cpu)) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#820: FILE: kernel/sched.c:2183:
+		if (pool == numa_node_id()) load--;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#821: FILE: kernel/sched.c:2184:
+		pool_load = 100*load/pool_nr_cpus[pool];
 		               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#821: FILE: kernel/sched.c:2184:
+		pool_load = 100*load/pool_nr_cpus[pool];
 		                    ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pool_load < min_load'
#822: FILE: kernel/sched.c:2185:
+		if ((pool_load < min_load) && (pool_mask[pool] & mask)) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#833: FILE: kernel/sched.c:2196:
+	int new_cpu, new_node=0;
 	                     ^

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#835: FILE: kernel/sched.c:2198:
+	while (spin_is_locked(&pool_lock))

WARNING:BRACES: braces {} are not necessary for single statement blocks
#837: FILE: kernel/sched.c:2200:
+	if (numpools > 1) {
+		new_node = sched_best_node(current);
+	} 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#839: FILE: kernel/sched.c:2202:
+^I} $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000425023.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 55 errors, 18 warnings, 31 checks, 702 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000425023.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
