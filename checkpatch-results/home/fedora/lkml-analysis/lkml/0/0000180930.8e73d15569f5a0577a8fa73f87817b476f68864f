WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
--- f5c58b6b0cfd2a92fb3b1d1f4cbfdfb3df6f45d6/drivers/scsi/ahci.c  (mode:100644)

CHECK:SPACING: No space is necessary after a cast
#182: FILE: drivers/scsi/ahci.c:511:
+	void *port_mmio = (void *) qc->ap->ioaddr.cmd_addr;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#246: FILE: drivers/scsi/ahci.c:620:
+	printk("LOG 0x10: nq=%d, tag=%d\n", p[0] >> 7, p[0] & 0x1f);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#249: FILE: drivers/scsi/ahci.c:623:
+		printk("%d:%d ", i, p[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#251: FILE: drivers/scsi/ahci.c:625:
+	printk("\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#262: FILE: drivers/scsi/ahci.c:636:
+	printk(KERN_ERR "ata%u: ncq interrupt error\n", ap->id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#285: FILE: drivers/scsi/ahci.c:659:
+		printk(KERN_ERR "ata%u: unable to allocate memory for error\n", ap->id);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#285: FILE: drivers/scsi/ahci.c:659:
+	if (!buffer) {
+		printk(KERN_ERR "ata%u: unable to allocate memory for error\n", ap->id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#290: FILE: drivers/scsi/ahci.c:664:
+		printk(KERN_ERR "ata%u: unable to read log page\n", ap->id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#362: FILE: drivers/scsi/ahci.c:751:
+			printk(KERN_ERR "ahci: missing tag %d\n", tag);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#505: FILE: drivers/scsi/libata-core.c:1160:
+		printk(KERN_INFO "ata%u: dev %u ATA, max %s, %Lu sectors:%s %s\n",

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#505: FILE: drivers/scsi/libata-core.c:1160:
+		printk(KERN_INFO "ata%u: dev %u ATA, max %s, %Lu sectors:%s %s\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#551: FILE: drivers/scsi/libata-core.c:1231:
+	BUG_ON(qc == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qc"
#551: FILE: drivers/scsi/libata-core.c:1231:
+	BUG_ON(qc == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#566: FILE: drivers/scsi/libata-core.c:1246:
+	printk("RLP issue\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#570: FILE: drivers/scsi/libata-core.c:1250:
+	printk("RLP issue done\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#577: FILE: drivers/scsi/libata-core.c:1257:
+	printk("RLP wait done\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#817: FILE: drivers/scsi/libata-scsi.c:604:
+		if (ncq) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#820: FILE: drivers/scsi/libata-scsi.c:607:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#871: FILE: drivers/scsi/libata-scsi.c:741:
+	if (ret == ATA_QC_ISSUE_FATAL)
[...]
+	else if (ret == ATA_QC_ISSUE_DEFER) {
[...]

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#919: FILE: drivers/scsi/scsi_sysfs.c:317:
+sdev_rd_attr (device_busy, "%d\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#926: FILE: drivers/scsi/scsi_sysfs.c:324:
+	return snprintf (buf, 20, "%d\n", sdev->queue_depth);

WARNING:NAKED_SSCANF: unchecked sscanf return value
#935: FILE: drivers/scsi/scsi_sysfs.c:333:
+	sscanf(buf, "%d\n", &depth);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'sdev_show_queue_depth' to 'queue_depth_show' 'sdev_store_queue_depth' to 'queue_depth_store'
#941: FILE: drivers/scsi/scsi_sysfs.c:339:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#942: FILE: drivers/scsi/scsi_sysfs.c:340:
+static DEVICE_ATTR(queue_depth, S_IRUGO | S_IWUSR, sdev_show_queue_depth, sdev_store_queue_depth);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#963: FILE: include/linux/ata.h:82:
+^IATA_DEVICE_OBS^I^I= (1 << 5), ^I/* obs bits in dev reg */$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1046: FILE: include/linux/libata.h:450:
+extern int ata_read_log_page(struct ata_port *, unsigned int, char, char *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_port *' should also have an identifier name
#1046: FILE: include/linux/libata.h:450:
+extern int ata_read_log_page(struct ata_port *, unsigned int, char, char *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1046: FILE: include/linux/libata.h:450:
+extern int ata_read_log_page(struct ata_port *, unsigned int, char, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char' should also have an identifier name
#1046: FILE: include/linux/libata.h:450:
+extern int ata_read_log_page(struct ata_port *, unsigned int, char, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1046: FILE: include/linux/libata.h:450:
+extern int ata_read_log_page(struct ata_port *, unsigned int, char, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1046: FILE: include/linux/libata.h:450:
+extern int ata_read_log_page(struct ata_port *, unsigned int, char, char *,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000180930.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 26 warnings, 6 checks, 925 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000180930.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
