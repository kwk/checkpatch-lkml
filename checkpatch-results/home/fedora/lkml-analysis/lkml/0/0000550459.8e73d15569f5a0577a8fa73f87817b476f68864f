WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#57: FILE: linux/module.h:169:
+extern void inter_module_register(const char *, struct module *, const void *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#58: FILE: linux/module.h:170:
+extern void inter_module_unregister(const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#58: FILE: linux/module.h:170:
+extern void inter_module_unregister(const char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#59: FILE: linux/module.h:171:
+extern const void *inter_module_get(const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#59: FILE: linux/module.h:171:
+extern const void *inter_module_get(const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#60: FILE: linux/module.h:172:
+extern const void *inter_module_get_request(const char *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#60: FILE: linux/module.h:172:
+extern const void *inter_module_get_request(const char *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#60: FILE: linux/module.h:172:
+extern const void *inter_module_get_request(const char *, const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#61: FILE: linux/module.h:173:
+extern void inter_module_put(const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#61: FILE: linux/module.h:173:
+extern void inter_module_put(const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#70: FILE: linux/module.h:182:
+extern int try_inc_mod_count(struct module *mod);

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#82: FILE: ksyms.c:96:
+EXPORT_SYMBOL(inter_module_register);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#83: FILE: ksyms.c:97:
+EXPORT_SYMBOL(inter_module_unregister);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#84: FILE: ksyms.c:98:
+EXPORT_SYMBOL(inter_module_get);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#85: FILE: ksyms.c:99:
+EXPORT_SYMBOL(inter_module_get_request);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#86: FILE: ksyms.c:100:
+EXPORT_SYMBOL(inter_module_put);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#87: FILE: ksyms.c:101:
+EXPORT_SYMBOL(try_inc_mod_count);

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#136: FILE: module.c:84:
+	if (!(ime_new = kmalloc(sizeof(*ime), GFP_KERNEL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#138: FILE: module.c:86:
+		printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'inter_module_register', this function's name, in a string
#139: FILE: module.c:87:
+			"Aiee, inter_module_register: cannot kmalloc entry for '%s'\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#156: FILE: module.c:104:
+			printk(KERN_ERR "inter_module_register: duplicate im_name '%s'", im_name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'inter_module_register', this function's name, in a string
#156: FILE: module.c:104:
+			printk(KERN_ERR "inter_module_register: duplicate im_name '%s'", im_name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#157: FILE: module.c:105:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ime_new->list
#160: FILE: module.c:108:
+	list_add(&(ime_new->list), &ime_list);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ime->list
#181: FILE: module.c:129:
+			list_del(&(ime->list));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#189: FILE: module.c:137:
+		printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'inter_module_unregister', this function's name, in a string
#190: FILE: module.c:138:
+			"inter_module_unregister: no entry for '%s', "

WARNING:SPLIT_STRING: quoted string split across lines
#191: FILE: module.c:139:
+			"inter_module_unregister: no entry for '%s', "
+			"probably caused by previous kmalloc failure\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#195: FILE: module.c:143:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#195: FILE: module.c:143:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#197: FILE: module.c:145:
+		printk(KERN_ERR "inter_module_unregister: no entry for '%s'", im_name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'inter_module_unregister', this function's name, in a string
#197: FILE: module.c:145:
+		printk(KERN_ERR "inter_module_unregister: no entry for '%s'", im_name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#198: FILE: module.c:146:
+		BUG();

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#226: FILE: module.c:174:
+	return(result);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:LINE_SPACING: Missing a blank line after declarations
#239: FILE: module.c:187:
+	const void *result = inter_module_get(im_name);
+	if (!result) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#269: FILE: module.c:217:
+	printk(KERN_ERR "inter_module_put: no entry for '%s'", im_name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'inter_module_put', this function's name, in a string
#269: FILE: module.c:217:
+	printk(KERN_ERR "inter_module_put: no entry for '%s'", im_name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#270: FILE: module.c:218:
+	BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#273: FILE: module.c:221:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#285: FILE: module.c:544:
+	int res = 1;
+	if (mod) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000550459.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 30 warnings, 10 checks, 263 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000550459.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
