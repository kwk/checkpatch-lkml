WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
This patch introduces a new fault handler that replaces ->nopage and ->populate

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#72: FILE: include/linux/mm.h:202:
+ * fault_data is filled in the the pagefault handler and passed to the

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#92: FILE: include/linux/mm.h:224:
+	struct page * (*fault)(struct fault_data * data);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#103: FILE: include/linux/mm.h:1050:
+extern struct page *filemap_fault(struct fault_data *data);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#116: FILE: mm/memory.c:2125:
+static int __do_fault(struct mm_struct *mm, struct vm_area_struct *vma,
+		unsigned long address, pte_t *page_table, pmd_t *pmd,

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#119: FILE: mm/memory.c:2128:
+	spinlock_t *ptl;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#133: FILE: mm/memory.c:2142:
+	BUG_ON(vma->vm_flags & VM_PFNMAP);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#147: FILE: mm/memory.c:2156:
+		BUG_ON(!PageLocked(faulted_page));

CHECK:BRACES: braces {} should be used on all arms of this statement
#215: FILE: mm/memory.c:2224:
+	if (anon)
[...]
+	else if (dirty_page) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#226: FILE: mm/memory.c:2235:
+static int do_linear_fault(struct mm_struct *mm, struct vm_area_struct *vma,
+		unsigned long address, pte_t *page_table, pmd_t *pmd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#237: FILE: mm/memory.c:2246:
+static int do_nonlinear_fault(struct mm_struct *mm, struct vm_area_struct *vma,
+		unsigned long address, pte_t *page_table, pmd_t *pmd,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#323: FILE: mm/filemap.c:1365:
+	BUG_ON(!(data->vma->vm_flags & VM_CAN_INVALIDATE));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#659: FILE: mm/fremap.c:133:
+static int populate_range(struct mm_struct *mm, struct vm_area_struct *vma,
+			unsigned long addr, unsigned long size, pgoff_t pgoff)

ERROR:CODE_INDENT: code indent should use tabs where possible
#673: FILE: mm/fremap.c:147:
+        return 0;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#673: FILE: mm/fremap.c:147:
+        return 0;$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#675: FILE: mm/fremap.c:149:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#714: FILE: mm/fremap.c:215:
+	if ((!vma->vm_ops || !vma->vm_ops->populate) &&
+					!(vma->vm_flags & VM_CAN_NONLINEAR))

ERROR:CODE_INDENT: code indent should use tabs where possible
#757: FILE: mm/fremap.c:249:
+^I^I^I^I^I    ^Ipgoff, flags & MAP_NONBLOCK);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#757: FILE: mm/fremap.c:249:
+^I^I^I^I^I    ^Ipgoff, flags & MAP_NONBLOCK);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000030509.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 7 warnings, 9 checks, 687 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000030509.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
