CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#50: FILE: mm/page_alloc.c:1956:
+static int mhtest_read(char *page, char **start, off_t off, int count,
+    int *eof, void *data)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#50: FILE: mm/page_alloc.c:1956:
+    int *eof, void *data)$

ERROR:SPACING: space required before the open parenthesis '('
#58: FILE: mm/page_alloc.c:1964:
+	for(i = 0; i < numnodes; i++) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pgdat"
#60: FILE: mm/page_alloc.c:1966:
+		if (pgdat == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#63: FILE: mm/page_alloc.c:1969:
+		len = sprintf(p, "Node %d %sabled %shotremovable\n", i,
+		    pgdat->enabled ? "en" : "dis",

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#68: FILE: mm/page_alloc.c:1974:
+			if (! z->present_pages)
 			    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#72: FILE: mm/page_alloc.c:1978:
+			len = sprintf(p,
+			    "\t%s[%d]: free %ld, active %ld, present %ld\n",

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#103: FILE: mm/page_alloc.c:2009:
+	void (*func)(int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#116: FILE: mm/page_alloc.c:2022:
+static void
+mhtest_disable(int idx) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#120: FILE: mm/page_alloc.c:2026:
+	printk("disable %d\n", idx);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#123: FILE: mm/page_alloc.c:2029:
+		for (i = 0; i < NR_CPUS; i++) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#127: FILE: mm/page_alloc.c:2033:
+			pcp->low = pcp->high = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#130: FILE: mm/page_alloc.c:2036:
+			pcp->low = pcp->high = 0;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#137: FILE: mm/page_alloc.c:2043:
+}
+static void

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#137: FILE: mm/page_alloc.c:2043:
+static void
+mhtest_enable(int idx) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#141: FILE: mm/page_alloc.c:2047:
+	printk("enable %d\n", idx);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#143: FILE: mm/page_alloc.c:2049:
+^I^Izone_table[NODEZONE(idx, z)]->pages_high = $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#146: FILE: mm/page_alloc.c:2052:
+		for (i = 0; i < NR_CPUS; i++) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#160: FILE: mm/page_alloc.c:2066:
+static void
+mhtest_plug(int idx) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#162: FILE: mm/page_alloc.c:2068:
+mhtest_plug(int idx) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "NODE_DATA"
#163: FILE: mm/page_alloc.c:2069:
+	if (NODE_DATA(idx) != NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#164: FILE: mm/page_alloc.c:2070:
+		printk("Already plugged\n");

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#170: FILE: mm/page_alloc.c:2076:
+static void
+mhtest_unplug(int idx) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#172: FILE: mm/page_alloc.c:2078:
+mhtest_unplug(int idx) {
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#179: FILE: mm/page_alloc.c:2085:
+	printk("purge %d\n", idx);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#185: FILE: mm/page_alloc.c:2091:
+static void
+mhtest_remap(int idx) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#187: FILE: mm/page_alloc.c:2093:
+mhtest_remap(int idx) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!zone_table[idx]"
#198: FILE: mm/page_alloc.c:2104:
+	if (zone_table[idx] == NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#203: FILE: mm/page_alloc.c:2109:
+		printk(" %lx", (unsigned long)list_entry(l, struct page, lru));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#209: FILE: mm/page_alloc.c:2115:
+	printk("\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!zone_table[idx]"
#217: FILE: mm/page_alloc.c:2123:
+	if (zone_table[idx] == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#219: FILE: mm/page_alloc.c:2125:
+	for(i = 0; i < zone_table[idx]->spanned_pages; i++)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#221: FILE: mm/page_alloc.c:2127:
+			printk(" %p", &zone_table[idx]->zone_mem_map[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#222: FILE: mm/page_alloc.c:2128:
+	printk("\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#226: FILE: mm/page_alloc.c:2132:
+static int mhtest_write(struct file *file, const char *buffer,
+    unsigned long count, void *data)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: mm/page_alloc.c:2132:
+    unsigned long count, void *data)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#240: FILE: mm/page_alloc.c:2146:
+	if (p == NULL)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#244: FILE: mm/page_alloc.c:2150:
+	idx = (int)simple_strtoul(p, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#246: FILE: mm/page_alloc.c:2152:
+	if (idx > MAX_NR_ZONES*MAX_NUMNODES) {
 	                      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#247: FILE: mm/page_alloc.c:2153:
+		printk("Argument out of range\n");

ERROR:SPACING: space required before the open parenthesis '('
#251: FILE: mm/page_alloc.c:2157:
+	for(i = 0; ; i++) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mhtest_cmds[i].cmd"
#252: FILE: mm/page_alloc.c:2158:
+		if (mhtest_cmds[i].cmd == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!zone_table[idx]"
#256: FILE: mm/page_alloc.c:2162:
+				if (zone_table[idx] == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#257: FILE: mm/page_alloc.c:2163:
+					printk("Zone %d not plugged\n", idx);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!NODE_DATA"
#261: FILE: mm/page_alloc.c:2167:
+			    NODE_DATA(idx) == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#262: FILE: mm/page_alloc.c:2168:
+				printk("Node %d not plugged\n", idx);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (mhtest_cmds[i].func)
#265: FILE: mm/page_alloc.c:2171:
+			(mhtest_cmds[i].func)(idx);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#278: FILE: mm/page_alloc.c:2184:
+	if (entry == NULL)

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#285: FILE: mm/page_alloc.c:2191:
+__initcall(procmhtest_init);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000290328.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 18 warnings, 21 checks, 250 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000290328.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
