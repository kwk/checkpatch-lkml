WARNING:TYPO_SPELLING: 'pont' may be misspelled - perhaps 'point'?
#41: 
> pont to me if you have some code already written.
  ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'seperately' may be misspelled - perhaps 'separately'?
#44: 
> seperately for SDIO and do it the SD way. But i am not sure how to
  ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'seperately' may be misspelled - perhaps 'separately'?
#45: 
> maintain the list of SDIO cards seperately.Also some hardware as our
                                  ^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#127: FILE: drivers/mmc/mmc.c:372:
+		if (mmc_card_sdmem(card) &&
 			(card->scr.bus_widths & SD_SCR_BUS_WIDTH_4)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#134: FILE: drivers/mmc/mmc.c:470:
+		BUG_ON(!mmc_card_sdmem(card));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#142: FILE: drivers/mmc/mmc.c:547:
+		BUG_ON(!mmc_card_sdmem(card));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#152: FILE: drivers/mmc/mmc.c:625:
+	BUG_ON(!mmc_card_sdmem(card));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#162: FILE: drivers/mmc/mmc.c:661:
+mmc_alloc_card(struct mmc_host *host, u32 *raw_cid, unsigned int *frca,
+	unsigned int funcs)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*card->functions)...) over kmalloc(sizeof(struct mmc_function)...)
#175: FILE: drivers/mmc/mmc.c:672:
+	card->functions = kmalloc(sizeof(struct mmc_function) * funcs, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#175: FILE: drivers/mmc/mmc.c:672:
+	card->functions = kmalloc(sizeof(struct mmc_function) * funcs, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

ERROR:SPACING: space required after that ';' (ctx:VxV)
#183: FILE: drivers/mmc/mmc.c:680:
+	for (i = 0;i < card->n_functions;i++)
 	          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ';' (ctx:VxV)
#183: FILE: drivers/mmc/mmc.c:680:
+	for (i = 0;i < card->n_functions;i++)
 	                                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#282: FILE: drivers/mmc/mmc.c:904:
+			BUG_ON(list_empty(&host->cards));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#307: FILE: drivers/mmc/mmc.c:924:
+				card = mmc_alloc_card(host, cmd.resp,
+					&first_rca, 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#328: FILE: drivers/mmc/mmc.c:947:
+		BUG_ON(list_empty(&host->cards));

CHECK:BRACES: braces {} should be used on all arms of this statement
#377: FILE: drivers/mmc/mmc.c:1132:
+	if (err == MMC_ERR_NONE) {
[...]
+				mmc_hostname(host));
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#391: FILE: drivers/mmc/mmc.c:1143:
+				printk(KERN_ERR "%s: error requesting "

WARNING:SPLIT_STRING: quoted string split across lines
#392: FILE: drivers/mmc/mmc.c:1144:
+				printk(KERN_ERR "%s: error requesting "
+					"memory OCR: %d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: braces {} should be used on all arms of this statement
#398: FILE: drivers/mmc/mmc.c:1150:
+		if (memocr & ocr)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#400: FILE: drivers/mmc/mmc.c:1152:
+		else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#401: FILE: drivers/mmc/mmc.c:1153:
+			printk(KERN_WARNING "%s: memory and IO OCR do "

WARNING:SPLIT_STRING: quoted string split across lines
#402: FILE: drivers/mmc/mmc.c:1154:
+			printk(KERN_WARNING "%s: memory and IO OCR do "
+				"not overlap. choosing IO.\n",

CHECK:BRACES: Unbalanced braces around else statement
#406: FILE: drivers/mmc/mmc.c:1158:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#441: FILE: drivers/mmc/mmc.c:1193:
+		if (is_sdio) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#445: FILE: drivers/mmc/mmc.c:1197:
+		} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#457: FILE: drivers/mmc/mmc.c:1209:
+		BUG_ON(!list_empty(&host->cards));

ERROR:CODE_INDENT: code indent should use tabs where possible
#593: FILE: drivers/mmc/mmc_block.c:379:
+ ^Iif ((rq_data_dir(req) == WRITE) && mmc_card_sdmem(card)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#593: FILE: drivers/mmc/mmc_block.c:379:
+ ^Iif ((rq_data_dir(req) == WRITE) && mmc_card_sdmem(card)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#593: FILE: drivers/mmc/mmc_block.c:379:
+ ^Iif ((rq_data_dir(req) == WRITE) && mmc_card_sdmem(card)) {$

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#606: FILE: drivers/mmc/mmc_sysfs.c:69:
+	if (card->functions)
+		kfree(card->functions);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#643: FILE: drivers/mmc/mmc_sysfs.c:257:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#648: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#653: FILE: drivers/mmc/sdio.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#654: FILE: drivers/mmc/sdio.c:2:
+ *  linux/drivers/mmc/sdio.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#671: FILE: drivers/mmc/sdio.c:19:
+static unsigned char __sdio_readb(const struct mmc_card *card,
+	unsigned int func, unsigned int addr)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#676: FILE: drivers/mmc/sdio.c:24:
+	BUG_ON(addr & ~SDIO_ADDR_MASK);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#677: FILE: drivers/mmc/sdio.c:25:
+	BUG_ON(func > 7);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#694: FILE: drivers/mmc/sdio.c:42:
+static void __sdio_writeb(const struct mmc_card *card, unsigned int func,
+	unsigned int addr, unsigned char data)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#698: FILE: drivers/mmc/sdio.c:46:
+	BUG_ON(addr & ~SDIO_ADDR_MASK);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#699: FILE: drivers/mmc/sdio.c:47:
+	BUG_ON(func > 7);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#702: FILE: drivers/mmc/sdio.c:50:
+	cmd.arg = (1<<31) || (func << 28) || (addr << 9) || data;
 	            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#714: FILE: drivers/mmc/sdio.c:62:
+void sdio_writeb(const struct mmc_function *func,
+	unsigned int addr, unsigned char data)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#719: FILE: drivers/mmc/sdio.c:67:
+EXPORT_SYMBOL_GPL(sdio_readb);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#720: FILE: drivers/mmc/sdio.c:68:
+EXPORT_SYMBOL_GPL(sdio_writeb);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#735: FILE: drivers/mmc/sdio.c:83:
+^I^Ilast_func--; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#738: FILE: drivers/mmc/sdio.c:86:
+	printk(KERN_INFO "SDIO: First byte: 0x%02x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#739: FILE: drivers/mmc/sdio.c:87:
+	printk(KERN_INFO "SDIO: First byte: 0x%02x\n",
+		(int)__sdio_readb(card, 0, 0));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#741: FILE: drivers/mmc/sdio.c:89:
+/*	while (cur_func <= last_func) {
+	}*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#741: FILE: drivers/mmc/sdio.c:89:
+	}*/

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#769: FILE: include/linux/mmc/card.h:72:
+#define MMC_STATE_READONLY	(1<<3)		/* card is read-only */
                           	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#769: FILE: include/linux/mmc/card.h:72:
+#define MMC_STATE_READONLY	(1<<3)		/* card is read-only */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#770: FILE: include/linux/mmc/card.h:73:
+#define MMC_STATE_SDMEM		(1<<4)		/* is an SD memory card */
                        		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#770: FILE: include/linux/mmc/card.h:73:
+#define MMC_STATE_SDMEM		(1<<4)		/* is an SD memory card */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#771: FILE: include/linux/mmc/card.h:74:
+#define MMC_STATE_SDIO		(1<<5)		/* is an SDIO card */
                       		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#771: FILE: include/linux/mmc/card.h:74:
+#define MMC_STATE_SDIO		(1<<5)		/* is an SDIO card */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#791: FILE: include/linux/mmc/card.h:93:
+#define mmc_card_sd(c)		(mmc_card_sdmem(c) || mmc_card_sdio(c))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#825: FILE: include/linux/mmc/ids.h:1:
+/*

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#848: FILE: include/linux/mmc/mmc.h:46:
+#define MMC_RSP_R5	(MMC_RSP_PRESENT|MMC_RSP_CRC|MMC_RSP_OPCODE|MMC_RSP_BUSY)
                   	                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#848: FILE: include/linux/mmc/mmc.h:46:
+#define MMC_RSP_R5	(MMC_RSP_PRESENT|MMC_RSP_CRC|MMC_RSP_OPCODE|MMC_RSP_BUSY)
                   	                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#848: FILE: include/linux/mmc/mmc.h:46:
+#define MMC_RSP_R5	(MMC_RSP_PRESENT|MMC_RSP_CRC|MMC_RSP_OPCODE|MMC_RSP_BUSY)
                   	                                           ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#874: FILE: include/linux/mmc/protocol.h:136:
+/*
+  SDIO status in R5

CHECK:BIT_MACRO: Prefer using the BIT macro
#877: FILE: include/linux/mmc/protocol.h:139:
+#define R5_COM_CRC_ERROR	(1 << 15)	/* er, b */

CHECK:BIT_MACRO: Prefer using the BIT macro
#878: FILE: include/linux/mmc/protocol.h:140:
+#define R5_ILLEGAL_COMMAND	(1 << 15)	/* er, b */

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#879: FILE: include/linux/mmc/protocol.h:141:
+#define R5_IO_CURRENT_STATE(x)	((x & 0x00003000) >> 12) /* s, b (2 bits) */

CHECK:BIT_MACRO: Prefer using the BIT macro
#880: FILE: include/linux/mmc/protocol.h:142:
+#define R5_ERROR		(1 << 11)	/* erx, c */

CHECK:BIT_MACRO: Prefer using the BIT macro
#881: FILE: include/linux/mmc/protocol.h:143:
+#define R5_FUNCTION_NUMBER	(1 << 9)	/* er, c */

CHECK:BIT_MACRO: Prefer using the BIT macro
#882: FILE: include/linux/mmc/protocol.h:144:
+#define R5_OUT_OF_RANGE		(1 << 8)	/* er, c */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#902: FILE: include/linux/mmc/sdio.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#903: FILE: include/linux/mmc/sdio.h:2:
+ *  linux/include/linux/mmc/sdio.h

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#912: FILE: include/linux/mmc/sdio.h:11:
+void sdio_writeb(const struct mmc_function *func,
+	unsigned int addr, unsigned char data);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000040813.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 33 warnings, 33 checks, 753 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000040813.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
