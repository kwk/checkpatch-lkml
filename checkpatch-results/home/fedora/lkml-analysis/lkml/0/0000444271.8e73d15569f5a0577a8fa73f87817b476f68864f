WARNING:TYPO_SPELLING: 'Attemt' may be misspelled - perhaps 'Attempt'?
#106: 
o READ fifo_expire. Attemt to start a READ before this time. Set to 1
                    ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'changable' may be misspelled - perhaps 'changeable'?
#113: 
I was too lazy to make them run time changable in this version, so you
                                     ^^^^^^^^^

WARNING:TYPO_SPELLING: 'loosing' may be misspelled - perhaps 'losing'?
#133: 
On to the patches (I'm loosing track of this email). Both are attached.
                       ^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#150: 
diff -urN -X /home/axboe/cdrom/exclude /opt/kernel/linux-2.5.28/drivers/block/elevator.c linux/drivers/block/elevator.c

WARNING:USE_RELATIVE_PATH: use relative pathname instead of absolute in changelog text
#150: 
diff -urN -X /home/axboe/cdrom/exclude /opt/kernel/linux-2.5.28/drivers/block/elevator.c linux/drivers/block/elevator.c

WARNING:USE_RELATIVE_PATH: use relative pathname instead of absolute in changelog text
#151: 
--- /opt/kernel/linux-2.5.28/drivers/block/elevator.c	Wed Jul 24 23:03:30 2002

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#351: FILE: include/linux/elevator.h:50:
+extern int elv_queue_empty(request_queue_t *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#351: FILE: include/linux/elevator.h:50:
+extern int elv_queue_empty(request_queue_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#387: FILE: drivers/block/deadline-iosched.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#388: FILE: drivers/block/deadline-iosched.c:2:
+ *  linux/drivers/block/deadline-iosched.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:BIT_MACRO: Prefer using the BIT macro
#419: FILE: drivers/block/deadline-iosched.c:33:
+#define DL_HASH_ENTRIES	(1 << deadline_hash_shift)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: No space is necessary after a cast
#438: FILE: drivers/block/deadline-iosched.c:52:
+#define RQ_DATA(rq)		((struct deadline_rq *) (rq)->elevator_private)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#480: FILE: drivers/block/deadline-iosched.c:94:
+	BUG_ON(ON_HASH(drq));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#482: FILE: drivers/block/deadline-iosched.c:96:
+	list_add(&drq->hash, &dd->hash[DL_HASH_FN(rq->sector +rq->nr_sectors)]);
 	                                                     ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#495: FILE: drivers/block/deadline-iosched.c:109:
+	if ((__rq = deadline_find_hash(dd, bio->bi_sector))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#508: FILE: drivers/block/deadline-iosched.c:122:
+		BUG_ON(__rq->flags & REQ_STARTED);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#509: FILE: drivers/block/deadline-iosched.c:123:
+		BUG_ON(__rq->flags & REQ_BARRIER);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#547: FILE: drivers/block/deadline-iosched.c:161:
+	BUG_ON(!drq);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#548: FILE: drivers/block/deadline-iosched.c:162:
+	BUG_ON(!dnext);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#686: FILE: drivers/block/deadline-iosched.c:300:
+	BUG_ON(!list_empty(&dd->fifo_list[READ]));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#687: FILE: drivers/block/deadline-iosched.c:301:
+	BUG_ON(!list_empty(&dd->fifo_list[WRITE]));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#705: FILE: drivers/block/deadline-iosched.c:319:
+	BUG_ON(!list_empty(&dd->fifo_list[READ]));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#706: FILE: drivers/block/deadline-iosched.c:320:
+	BUG_ON(!list_empty(&dd->fifo_list[WRITE]));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#707: FILE: drivers/block/deadline-iosched.c:321:
+	BUG_ON(!list_empty(&dd->sort_list));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#715: FILE: drivers/block/deadline-iosched.c:329:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#719: FILE: drivers/block/deadline-iosched.c:333:
+			if ((drq = RQ_DATA(rq)) == NULL)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#746: FILE: drivers/block/deadline-iosched.c:360:
+	dd->hash = kmalloc(sizeof(struct list_head)*DL_HASH_ENTRIES,GFP_KERNEL);
 	                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#746: FILE: drivers/block/deadline-iosched.c:360:
+	dd->hash = kmalloc(sizeof(struct list_head)*DL_HASH_ENTRIES,GFP_KERNEL);
 	                                                           ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dd->hash)...) over kmalloc(sizeof(struct list_head)...)
#746: FILE: drivers/block/deadline-iosched.c:360:
+	dd->hash = kmalloc(sizeof(struct list_head)*DL_HASH_ENTRIES,GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#769: FILE: drivers/block/deadline-iosched.c:383:
+^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#807: FILE: drivers/block/deadline-iosched.c:421:
+^I.elevator_merge_fn = ^I^Ideadline_merge,$

WARNING:IF_1: Consider removing the #if 1 and its #endif
#824: FILE: drivers/block/ll_rw_blk.c:1117:
+#if 1

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#825: FILE: drivers/block/ll_rw_blk.c:1118:
+	if ((ret = elevator_init(q, &q->elevator, iosched_deadline))) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000444271.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 21 warnings, 6 checks, 661 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000444271.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
