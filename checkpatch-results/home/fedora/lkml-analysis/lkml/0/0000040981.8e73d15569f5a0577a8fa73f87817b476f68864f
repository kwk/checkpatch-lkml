WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#44: 
Signed-Off-By: Pavel Emelianov <xemul@sw.ru>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#45: 
Signed-Off-By: Kirill Korotaev <dev@sw.ru>

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#76: FILE: include/bc/vmpages.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#77: FILE: include/bc/vmpages.h:2:
+ *  include/bc/vmpages.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#95: FILE: include/bc/vmpages.h:20:
+int __must_check bc_memory_charge(struct mm_struct *mm, unsigned long size,
+		unsigned long vm_flags, struct file *vm_file, int strict);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#97: FILE: include/bc/vmpages.h:22:
+void bc_memory_uncharge(struct mm_struct *mm, unsigned long size,
+		unsigned long vm_flags, struct file *vm_file);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#103: FILE: include/bc/vmpages.h:28:
+int __must_check bc_locked_shm_charge(struct shmem_inode_info *info,
+		unsigned long size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#105: FILE: include/bc/vmpages.h:30:
+void bc_locked_shm_uncharge(struct shmem_inode_info *info,
+		unsigned long size);

WARNING:TYPO_SPELLING: 'taks' may be misspelled - perhaps 'task'?
#109: FILE: include/bc/vmpages.h:34:
+ * of taks using this mm. thus we have two cases of its
       ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#114: FILE: include/bc/vmpages.h:39:
+#define mm_init_bc(mm, t)	do {					\
+		(mm)->mm_bc = get_beancounter((t)->task_bc.exec_bc);	\
+	} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#117: FILE: include/bc/vmpages.h:42:
+#define mm_free_bc(mm)		do {					\
+		put_beancounter((mm)->mm_bc);				\
+	} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#121: FILE: include/bc/vmpages.h:46:
+#define shmi_init_bc(info)	do {					\
+		(info)->shm_bc = get_beancounter(get_exec_bc());	\
+	} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#124: FILE: include/bc/vmpages.h:49:
+#define shmi_free_bc(info)	do {					\
+		put_beancounter((info)->shm_bc);			\
+	} while (0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#131: FILE: include/bc/vmpages.h:56:
+static inline int __must_check bc_memory_charge(struct mm_struct *mm,
+		unsigned long size, unsigned long vm_flags,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#138: FILE: include/bc/vmpages.h:63:
+static inline void bc_memory_uncharge(struct mm_struct *mm, unsigned long size,
+		unsigned long vm_flags, struct file *vm_file)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#143: FILE: include/bc/vmpages.h:68:
+static inline int __must_check bc_locked_charge(struct mm_struct *mm,
+		unsigned long size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: include/bc/vmpages.h:78:
+static inline int __must_check bc_locked_shm_charge(struct shmem_inode_info *i,
+		unsigned long size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#159: FILE: include/bc/vmpages.h:84:
+static inline void bc_locked_shm_uncharge(struct shmem_inode_info *i,
+		unsigned long size)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#232: FILE: kernel/bc/vmpages.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#233: FILE: kernel/bc/vmpages.c:2:
+ *  kernel/bc/vmpages.c

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#249: FILE: kernel/bc/vmpages.c:18:
+int bc_memory_charge(struct mm_struct *mm, unsigned long size,
+		unsigned long vm_flags, struct file *vm_file, int strict)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#263: FILE: kernel/bc/vmpages.c:32:
+void bc_memory_uncharge(struct mm_struct *mm, unsigned long size,
+		unsigned long vm_flags, struct file *vm_file)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#275: FILE: kernel/bc/vmpages.c:44:
+static inline int locked_charge(struct beancounter *bc,
+		unsigned long size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: kernel/bc/vmpages.c:51:
+static inline void locked_uncharge(struct beancounter *bc,
+		unsigned long size)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#322: FILE: kernel/fork.c:326:
+static struct mm_struct * mm_init(struct mm_struct * mm,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#322: FILE: kernel/fork.c:326:
+static struct mm_struct * mm_init(struct mm_struct * mm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#323: FILE: kernel/fork.c:327:
+static struct mm_struct * mm_init(struct mm_struct * mm,
+		struct task_struct *tsk)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000040981.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 20 warnings, 14 checks, 299 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000040981.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
