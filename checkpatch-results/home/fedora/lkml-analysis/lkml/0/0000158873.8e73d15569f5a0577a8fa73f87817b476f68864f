WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#122: FILE: drivers/dlm/config.c:70:
+static ssize_t node_nodeid_read(struct node *nd, char *buf);
                                              ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#123: FILE: drivers/dlm/config.c:71:
+static ssize_t node_nodeid_write(struct node *nd, const char *buf, size_t len);
                                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#124: FILE: drivers/dlm/config.c:72:
+static ssize_t node_weight_read(struct node *nd, char *buf);
                                              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#125: FILE: drivers/dlm/config.c:73:
+static ssize_t node_weight_write(struct node *nd, const char *buf, size_t len);
                                               ^^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct comm *' should also have an identifier name
#135: FILE: drivers/dlm/config.c:83:
+	ssize_t (*show)(struct comm *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#135: FILE: drivers/dlm/config.c:83:
+	ssize_t (*show)(struct comm *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct comm *' should also have an identifier name
#136: FILE: drivers/dlm/config.c:84:
+	ssize_t (*store)(struct comm *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#136: FILE: drivers/dlm/config.c:84:
+	ssize_t (*store)(struct comm *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#136: FILE: drivers/dlm/config.c:84:
+	ssize_t (*store)(struct comm *, const char *, size_t);

ERROR:CODE_INDENT: code indent should use tabs where possible
#141: FILE: drivers/dlm/config.c:89:
+                    .ca_name = "nodeid",$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: drivers/dlm/config.c:89:
+                    .ca_name = "nodeid",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#142: FILE: drivers/dlm/config.c:90:
+                    .ca_mode = S_IRUGO | S_IWUSR },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: drivers/dlm/config.c:90:
+                    .ca_mode = S_IRUGO | S_IWUSR },$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#142: FILE: drivers/dlm/config.c:90:
+                    .ca_mode = S_IRUGO | S_IWUSR },

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:CODE_INDENT: code indent should use tabs where possible
#149: FILE: drivers/dlm/config.c:97:
+                    .ca_name = "local",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: drivers/dlm/config.c:97:
+                    .ca_name = "local",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#150: FILE: drivers/dlm/config.c:98:
+                    .ca_mode = S_IRUGO | S_IWUSR },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: drivers/dlm/config.c:98:
+                    .ca_mode = S_IRUGO | S_IWUSR },$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#150: FILE: drivers/dlm/config.c:98:
+                    .ca_mode = S_IRUGO | S_IWUSR },

ERROR:CODE_INDENT: code indent should use tabs where possible
#157: FILE: drivers/dlm/config.c:105:
+                    .ca_name = "addr",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: drivers/dlm/config.c:105:
+                    .ca_name = "addr",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: drivers/dlm/config.c:106:
+                    .ca_mode = S_IRUGO | S_IWUSR },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: drivers/dlm/config.c:106:
+                    .ca_mode = S_IRUGO | S_IWUSR },$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#158: FILE: drivers/dlm/config.c:106:
+                    .ca_mode = S_IRUGO | S_IWUSR },

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct node *' should also have an identifier name
#176: FILE: drivers/dlm/config.c:124:
+	ssize_t (*show)(struct node *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#176: FILE: drivers/dlm/config.c:124:
+	ssize_t (*show)(struct node *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct node *' should also have an identifier name
#177: FILE: drivers/dlm/config.c:125:
+	ssize_t (*store)(struct node *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#177: FILE: drivers/dlm/config.c:125:
+	ssize_t (*store)(struct node *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#177: FILE: drivers/dlm/config.c:125:
+	ssize_t (*store)(struct node *, const char *, size_t);

ERROR:CODE_INDENT: code indent should use tabs where possible
#182: FILE: drivers/dlm/config.c:130:
+                    .ca_name = "nodeid",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: drivers/dlm/config.c:130:
+                    .ca_name = "nodeid",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#183: FILE: drivers/dlm/config.c:131:
+                    .ca_mode = S_IRUGO | S_IWUSR },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: drivers/dlm/config.c:131:
+                    .ca_mode = S_IRUGO | S_IWUSR },$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#183: FILE: drivers/dlm/config.c:131:
+                    .ca_mode = S_IRUGO | S_IWUSR },

ERROR:CODE_INDENT: code indent should use tabs where possible
#190: FILE: drivers/dlm/config.c:138:
+                    .ca_name = "weight",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: drivers/dlm/config.c:138:
+                    .ca_name = "weight",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#191: FILE: drivers/dlm/config.c:139:
+                    .ca_mode = S_IRUGO | S_IWUSR },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: drivers/dlm/config.c:139:
+                    .ca_mode = S_IRUGO | S_IWUSR },$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#191: FILE: drivers/dlm/config.c:139:
+                    .ca_mode = S_IRUGO | S_IWUSR },

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#328: FILE: drivers/dlm/config.c:276:
+	return i ? container_of(to_config_group(i), struct cluster, group):NULL;
 	                                                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*cl)...) over kzalloc(sizeof(struct cluster)...)
#354: FILE: drivers/dlm/config.c:302:
+	cl = kzalloc(sizeof(struct cluster), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sps)...) over kzalloc(sizeof(struct spaces)...)
#356: FILE: drivers/dlm/config.c:304:
+	sps = kzalloc(sizeof(struct spaces), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*cms)...) over kzalloc(sizeof(struct comms)...)
#357: FILE: drivers/dlm/config.c:305:
+	cms = kzalloc(sizeof(struct comms), GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#404: FILE: drivers/dlm/config.c:352:
+	struct cluster *cl = to_cluster(i);
+	kfree(cl->group.default_groups);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sp)...) over kzalloc(sizeof(struct space)...)
#414: FILE: drivers/dlm/config.c:362:
+	sp = kzalloc(sizeof(struct space), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*nds)...) over kzalloc(sizeof(struct nodes)...)
#416: FILE: drivers/dlm/config.c:364:
+	nds = kzalloc(sizeof(struct nodes), GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#460: FILE: drivers/dlm/config.c:408:
+	struct space *sp = to_space(i);
+	kfree(sp->group.default_groups);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*cm)...) over kzalloc(sizeof(struct comm)...)
#468: FILE: drivers/dlm/config.c:416:
+	cm = kzalloc(sizeof(struct comm), GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#482: FILE: drivers/dlm/config.c:430:
+	struct comm *cm = to_comm(i);
+	if (local_comm == cm)

WARNING:LINE_SPACING: Missing a blank line after declarations
#492: FILE: drivers/dlm/config.c:440:
+	struct comm *cm = to_comm(i);
+	kfree(cm);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#498: FILE: drivers/dlm/config.c:446:
+	struct node *nd;
 	             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#500: FILE: drivers/dlm/config.c:448:
+	nd = kzalloc(sizeof(struct node), GFP_KERNEL);
 	^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*nd)...) over kzalloc(sizeof(struct node)...)
#500: FILE: drivers/dlm/config.c:448:
+	nd = kzalloc(sizeof(struct node), GFP_KERNEL);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#501: FILE: drivers/dlm/config.c:449:
+	if (!nd)
 	     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#519: FILE: drivers/dlm/config.c:467:
+	struct node *nd = to_node(i);
 	             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#531: FILE: drivers/dlm/config.c:479:
+	struct node *nd = to_node(i);
 	             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#532: FILE: drivers/dlm/config.c:480:
+	kfree(nd);
 	      ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#532: FILE: drivers/dlm/config.c:480:
+	struct node *nd = to_node(i);
+	kfree(nd);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#587: FILE: drivers/dlm/config.c:535:
+	cm->nodeid = simple_strtol(buf, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#598: FILE: drivers/dlm/config.c:546:
+	cm->local= simple_strtol(buf, NULL, 0);
 	         ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#598: FILE: drivers/dlm/config.c:546:
+	cm->local= simple_strtol(buf, NULL, 0);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#626: FILE: drivers/dlm/config.c:574:
+	struct node *nd = to_node(i);
 	             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#629: FILE: drivers/dlm/config.c:577:
+	return nda->show ? nda->show(nd, buf) : 0;
 	                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#635: FILE: drivers/dlm/config.c:583:
+	struct node *nd = to_node(i);
 	             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#638: FILE: drivers/dlm/config.c:586:
+	return nda->store ? nda->store(nd, buf, len) : -EINVAL;
 	                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#641: FILE: drivers/dlm/config.c:589:
+static ssize_t node_nodeid_read(struct node *nd, char *buf)
                                              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#646: FILE: drivers/dlm/config.c:594:
+static ssize_t node_nodeid_write(struct node *nd, const char *buf, size_t len)
                                               ^^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#648: FILE: drivers/dlm/config.c:596:
+	nd->nodeid = simple_strtol(buf, NULL, 0);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#652: FILE: drivers/dlm/config.c:600:
+static ssize_t node_weight_read(struct node *nd, char *buf)
                                              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#657: FILE: drivers/dlm/config.c:605:
+static ssize_t node_weight_write(struct node *nd, const char *buf, size_t len)
                                               ^^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#659: FILE: drivers/dlm/config.c:607:
+	nd->weight = simple_strtol(buf, NULL, 0);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#696: FILE: drivers/dlm/config.c:644:
+			break;
+		} else {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#721: FILE: drivers/dlm/config.c:669:
+	struct node *nd;
 	             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#742: FILE: drivers/dlm/config.c:690:
+	list_for_each_entry(nd, &sp->members, list)
 	                    ^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#746: FILE: drivers/dlm/config.c:694:
+		printk("bad nodeid count %d %d\n", rv, i);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#758: FILE: drivers/dlm/config.c:706:
+	struct node *nd;
 	             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#766: FILE: drivers/dlm/config.c:714:
+	list_for_each_entry(nd, &sp->members, list) {
 	                    ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#781: FILE: drivers/dlm/config.c:729:
+	struct comm *cm = get_comm(nodeid, NULL);
+	if (!cm)

WARNING:LINE_SPACING: Missing a blank line after declarations
#793: FILE: drivers/dlm/config.c:741:
+	struct comm *cm = get_comm(0, addr);
+	if (!cm)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1020: FILE: drivers/dlm/lowcomms.c:164:
+^I        struct sockaddr_in *in4  = (struct sockaddr_in *) &addr;$

CHECK:SPACING: No space is necessary after a cast
#1020: FILE: drivers/dlm/lowcomms.c:164:
+	        struct sockaddr_in *in4  = (struct sockaddr_in *) &addr;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1025: FILE: drivers/dlm/lowcomms.c:168:
+^I        struct sockaddr_in6 *in6  = (struct sockaddr_in6 *) &addr;$

CHECK:SPACING: No space is necessary after a cast
#1025: FILE: drivers/dlm/lowcomms.c:168:
+	        struct sockaddr_in6 *in6  = (struct sockaddr_in6 *) &addr;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1304: FILE: drivers/dlm/member.c:279:
+	error = count = dlm_nodeid_list(ls->ls_name, &ids);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1358: FILE: drivers/dlm/member_sysfs.c:50:
+	ls->ls_global_id = simple_strtoul(buf, NULL, 0);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000158873.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 61 warnings, 11 checks, 1343 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000158873.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
