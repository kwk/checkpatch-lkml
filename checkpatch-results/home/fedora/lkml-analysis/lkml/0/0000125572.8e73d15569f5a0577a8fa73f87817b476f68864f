WARNING:FUNCTION_ARGUMENTS: function definition argument 'substring_t *' should also have an identifier name
#45: FILE: include/linux/parser.h:34:
+int match_u64(substring_t *, u64 *result, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#45: FILE: include/linux/parser.h:34:
+int match_u64(substring_t *, u64 *result, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'substring_t *' should also have an identifier name
#46: FILE: include/linux/parser.h:35:
+int match_s64(substring_t *, s64 *result, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#46: FILE: include/linux/parser.h:35:
+int match_s64(substring_t *, s64 *result, int);

ERROR:CODE_INDENT: code indent should use tabs where possible
#65: FILE: lib/parser.c:154:
+        char *endp;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#65: FILE: lib/parser.c:154:
+        char *endp;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#66: FILE: lib/parser.c:155:
+        char *buf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#66: FILE: lib/parser.c:155:
+        char *buf;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#67: FILE: lib/parser.c:156:
+        int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#67: FILE: lib/parser.c:156:
+        int ret;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#69: FILE: lib/parser.c:158:
+        buf = kmalloc(s->to - s->from + 1, GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#69: FILE: lib/parser.c:158:
+        buf = kmalloc(s->to - s->from + 1, GFP_KERNEL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#70: FILE: lib/parser.c:159:
+        if (!buf)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#70: FILE: lib/parser.c:159:
+        if (!buf)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#71: FILE: lib/parser.c:160:
+                return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#71: FILE: lib/parser.c:160:
+                return -ENOMEM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#72: FILE: lib/parser.c:161:
+        memcpy(buf, s->from, s->to - s->from);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: lib/parser.c:161:
+        memcpy(buf, s->from, s->to - s->from);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#73: FILE: lib/parser.c:162:
+        buf[s->to - s->from] = '\0';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#73: FILE: lib/parser.c:162:
+        buf[s->to - s->from] = '\0';$

ERROR:CODE_INDENT: code indent should use tabs where possible
#74: FILE: lib/parser.c:163:
+        *result = simple_strtoull(buf, &endp, base);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: lib/parser.c:163:
+        *result = simple_strtoull(buf, &endp, base);$

WARNING:CONSIDER_KSTRTO: simple_strtoull is obsolete, use kstrtoull instead
#74: FILE: lib/parser.c:163:
+        *result = simple_strtoull(buf, &endp, base);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:CODE_INDENT: code indent should use tabs where possible
#75: FILE: lib/parser.c:164:
+        ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#75: FILE: lib/parser.c:164:
+        ret = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#76: FILE: lib/parser.c:165:
+        if (endp == buf)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: lib/parser.c:165:
+        if (endp == buf)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#77: FILE: lib/parser.c:166:
+                ret = -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: lib/parser.c:166:
+                ret = -EINVAL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#78: FILE: lib/parser.c:167:
+        kfree(buf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: lib/parser.c:167:
+        kfree(buf);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#79: FILE: lib/parser.c:168:
+        return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: lib/parser.c:168:
+        return ret;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#94: FILE: lib/parser.c:183:
+        char *endp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: lib/parser.c:183:
+        char *endp;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#95: FILE: lib/parser.c:184:
+        char *buf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: lib/parser.c:184:
+        char *buf;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#96: FILE: lib/parser.c:185:
+        int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: lib/parser.c:185:
+        int ret;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#98: FILE: lib/parser.c:187:
+        buf = kmalloc(s->to - s->from + 1, GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: lib/parser.c:187:
+        buf = kmalloc(s->to - s->from + 1, GFP_KERNEL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#99: FILE: lib/parser.c:188:
+        if (!buf)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: lib/parser.c:188:
+        if (!buf)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#100: FILE: lib/parser.c:189:
+                return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: lib/parser.c:189:
+                return -ENOMEM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#101: FILE: lib/parser.c:190:
+        memcpy(buf, s->from, s->to - s->from);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: lib/parser.c:190:
+        memcpy(buf, s->from, s->to - s->from);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#102: FILE: lib/parser.c:191:
+        buf[s->to - s->from] = '\0';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: lib/parser.c:191:
+        buf[s->to - s->from] = '\0';$

ERROR:CODE_INDENT: code indent should use tabs where possible
#103: FILE: lib/parser.c:192:
+        *result = simple_strtoll(buf, &endp, base);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: lib/parser.c:192:
+        *result = simple_strtoll(buf, &endp, base);$

WARNING:CONSIDER_KSTRTO: simple_strtoll is obsolete, use kstrtoll instead
#103: FILE: lib/parser.c:192:
+        *result = simple_strtoll(buf, &endp, base);

ERROR:CODE_INDENT: code indent should use tabs where possible
#104: FILE: lib/parser.c:193:
+        ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: lib/parser.c:193:
+        ret = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#105: FILE: lib/parser.c:194:
+        if (endp == buf)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: lib/parser.c:194:
+        if (endp == buf)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#106: FILE: lib/parser.c:195:
+                ret = -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: lib/parser.c:195:
+                ret = -EINVAL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#107: FILE: lib/parser.c:196:
+        kfree(buf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: lib/parser.c:196:
+        kfree(buf);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#108: FILE: lib/parser.c:197:
+        return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: lib/parser.c:197:
+        return ret;$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#120: FILE: lib/parser.c:280:
+EXPORT_SYMBOL(match_s64);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000125572.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 28 errors, 35 warnings, 0 checks, 74 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000125572.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
