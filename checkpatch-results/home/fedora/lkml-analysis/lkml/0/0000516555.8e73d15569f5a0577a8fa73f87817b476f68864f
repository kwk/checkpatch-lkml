WARNING:TYPO_SPELLING: 'shure' may be misspelled - perhaps 'sure'?
#23: 
I am not shure, wether any one else could use a patch like this.
         ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'wether' may be misspelled - perhaps 'weather'?
#23: 
I am not shure, wether any one else could use a patch like this.
                ^^^^^^

WARNING:TYPO_SPELLING: 'shure' may be misspelled - perhaps 'sure'?
#50: 
PSS: the important parts of the patch LocalWords:  not shure wether
                                                       ^^^^^

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#51: 
#

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#52: 
# SafeFork kernel patch

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#53: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#54: 
# additionel ifo in /proc/$PID/status

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#63: FILE: fs/proc/array.c:84:
+static inline char * task_safefork(struct task_struct *p, char *buffer)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#65: FILE: fs/proc/array.c:86:
+^Istruct task_struct *list_p;        $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#66: FILE: fs/proc/array.c:87:
+        read_lock(&tasklist_lock);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#66: FILE: fs/proc/array.c:87:
+        read_lock(&tasklist_lock);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#74: FILE: fs/proc/array.c:95:
+	buffer += sprintf(buffer,"\nsf_parent:\t%d", p->sf_parent);
 	                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#75: FILE: fs/proc/array.c:96:
+	if (p->sf_parent==p->pid)
 	                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#78: FILE: fs/proc/array.c:99:
+^I^Ibuffer += sprintf(buffer, "\n");^I    $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#79: FILE: fs/proc/array.c:100:
+	buffer += sprintf(buffer,"\sf_children:");
 	                        ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#81: FILE: fs/proc/array.c:102:
+		if (list_p->sf_parent==p->pid && list_p->pid!=p->pid) {
 		                     ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#81: FILE: fs/proc/array.c:102:
+		if (list_p->sf_parent==p->pid && list_p->pid!=p->pid) {
 		                                            ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#81: FILE: fs/proc/array.c:102:
+		if (list_p->sf_parent==p->pid && list_p->pid!=p->pid) {
+			buffer += sprintf(buffer," %d",list_p->pid);	    
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#82: FILE: fs/proc/array.c:103:
+^I^I^Ibuffer += sprintf(buffer," %d",list_p->pid);^I    $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#82: FILE: fs/proc/array.c:103:
+			buffer += sprintf(buffer," %d",list_p->pid);	    
 			                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#82: FILE: fs/proc/array.c:103:
+			buffer += sprintf(buffer," %d",list_p->pid);	    
 			                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#85: FILE: fs/proc/array.c:106:
+	buffer += sprintf(buffer,"\n");
 	                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#86: FILE: fs/proc/array.c:107:
+^Iread_unlock(&tasklist_lock);^I  $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#103: FILE: fs/proc/base.c:280:
+static ssize_t status_safefork_write(struct file * file, const char * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#103: FILE: fs/proc/base.c:280:
+static ssize_t status_safefork_write(struct file * file, const char * buf,

ERROR:CODE_INDENT: code indent should use tabs where possible
#106: FILE: fs/proc/base.c:283:
+  ^Ichar * buffer;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#106: FILE: fs/proc/base.c:283:
+  ^Ichar * buffer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: fs/proc/base.c:283:
+  ^Ichar * buffer;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#106: FILE: fs/proc/base.c:283:
+  	char * buffer;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#109: FILE: fs/proc/base.c:286:
+	struct inode * inode = file->f_dentry->d_inode;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#114: FILE: fs/proc/base.c:291:
+	printk(KERN_DEBUG "%i wants to write to /proc/%i/status\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#118: FILE: fs/proc/base.c:295:
+	printk(KERN_DEBUG "%i owns /proc/%i/status\n",

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#122: FILE: fs/proc/base.c:299:
+	if ( o_uid!=w_uid && w_uid!=0)
 	          ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#122: FILE: fs/proc/base.c:299:
+	if ( o_uid!=w_uid && w_uid!=0)
 	                          ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#122: FILE: fs/proc/base.c:299:
+	if ( o_uid!=w_uid && w_uid!=0)

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#126: FILE: fs/proc/base.c:303:
+	if (!buf || count>PAGE_SIZE)
 	                 ^

CHECK:SPACING: No space is necessary after a cast
#129: FILE: fs/proc/base.c:306:
+	if (!(buffer = (char *) __get_free_page(GFP_KERNEL)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#129: FILE: fs/proc/base.c:306:
+	if (!(buffer = (char *) __get_free_page(GFP_KERNEL)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#137: FILE: fs/proc/base.c:314:
+^Iif (0==strncmp(SF_KILL, buffer, strlen(SF_KILL))) {^I    $

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#137: FILE: fs/proc/base.c:314:
+	if (0==strncmp(SF_KILL, buffer, strlen(SF_KILL))) {	    
 	     ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#137: FILE: fs/proc/base.c:314:
+	if (0==strncmp(SF_KILL, buffer, strlen(SF_KILL))) {	    

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#141: FILE: fs/proc/base.c:318:
+			/* set the flags
+			// take care of me

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#156: FILE: fs/proc/base.c:333:
+^I^I^I^Ip->sf_watchme=1; $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#156: FILE: fs/proc/base.c:333:
+				p->sf_watchme=1; 
 				             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#158: FILE: fs/proc/base.c:335:
+				p->sf_killchildren=0;
 				                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#160: FILE: fs/proc/base.c:337:
+				p->sf_parent=p->pid;
 				            ^

CHECK:SPACING: No space is necessary after a cast
#164: FILE: fs/proc/base.c:341:
+	free_page((unsigned long) buffer);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#184: FILE: fs/proc/proc_misc.c:385:
+	int len,zombie=0,watchme=0,killchildren=0;
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#184: FILE: fs/proc/proc_misc.c:385:
+	int len,zombie=0,watchme=0,killchildren=0;
 	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#184: FILE: fs/proc/proc_misc.c:385:
+	int len,zombie=0,watchme=0,killchildren=0;
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#184: FILE: fs/proc/proc_misc.c:385:
+	int len,zombie=0,watchme=0,killchildren=0;
 	                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#184: FILE: fs/proc/proc_misc.c:385:
+	int len,zombie=0,watchme=0,killchildren=0;
 	                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#184: FILE: fs/proc/proc_misc.c:385:
+	int len,zombie=0,watchme=0,killchildren=0;
 	                                       ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#185: FILE: fs/proc/proc_misc.c:386:
+	char* buffer=page;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#185: FILE: fs/proc/proc_misc.c:386:
+	char* buffer=page;
 	            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#186: FILE: fs/proc/proc_misc.c:387:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#187: FILE: fs/proc/proc_misc.c:388:
+^Istruct task_struct *list_p;        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#188: FILE: fs/proc/proc_misc.c:389:
+        read_lock(&tasklist_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: fs/proc/proc_misc.c:389:
+        read_lock(&tasklist_lock);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#189: FILE: fs/proc/proc_misc.c:390:
+^I$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#192: FILE: fs/proc/proc_misc.c:393:
+		if (list_p->sf_watchme) watchme++;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#193: FILE: fs/proc/proc_misc.c:394:
+		if (list_p->sf_killchildren) killchildren++;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#194: FILE: fs/proc/proc_misc.c:395:
+		if (list_p->sf_zombie) zombie++;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#196: FILE: fs/proc/proc_misc.c:397:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#197: FILE: fs/proc/proc_misc.c:398:
+	buffer += sprintf(buffer, "watchme [%i]:",watchme);
 	                                         ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#199: FILE: fs/proc/proc_misc.c:400:
+		if (list_p->sf_watchme) {
+			buffer += sprintf(buffer," %d",list_p->pid);	    
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#200: FILE: fs/proc/proc_misc.c:401:
+^I^I^Ibuffer += sprintf(buffer," %d",list_p->pid);^I    $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#200: FILE: fs/proc/proc_misc.c:401:
+			buffer += sprintf(buffer," %d",list_p->pid);	    
 			                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#200: FILE: fs/proc/proc_misc.c:401:
+			buffer += sprintf(buffer," %d",list_p->pid);	    
 			                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#203: FILE: fs/proc/proc_misc.c:404:
+	buffer += sprintf(buffer,"\n");
 	                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: fs/proc/proc_misc.c:405:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#205: FILE: fs/proc/proc_misc.c:406:
+	buffer += sprintf(buffer, "killchildren [%i]:",killchildren);
 	                                              ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#207: FILE: fs/proc/proc_misc.c:408:
+		if (list_p->sf_killchildren) {
+			buffer += sprintf(buffer," %d",list_p->pid);	    
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#208: FILE: fs/proc/proc_misc.c:409:
+^I^I^Ibuffer += sprintf(buffer," %d",list_p->pid);^I    $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#208: FILE: fs/proc/proc_misc.c:409:
+			buffer += sprintf(buffer," %d",list_p->pid);	    
 			                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#208: FILE: fs/proc/proc_misc.c:409:
+			buffer += sprintf(buffer," %d",list_p->pid);	    
 			                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#211: FILE: fs/proc/proc_misc.c:412:
+	buffer += sprintf(buffer,"\n");
 	                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#212: FILE: fs/proc/proc_misc.c:413:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#213: FILE: fs/proc/proc_misc.c:414:
+	buffer += sprintf(buffer, "zombie [%i]:",zombie);
 	                                        ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#215: FILE: fs/proc/proc_misc.c:416:
+		if (list_p->sf_zombie) {
+			buffer += sprintf(buffer," %d",list_p->pid);	    
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: fs/proc/proc_misc.c:417:
+^I^I^Ibuffer += sprintf(buffer," %d",list_p->pid);^I    $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#216: FILE: fs/proc/proc_misc.c:417:
+			buffer += sprintf(buffer," %d",list_p->pid);	    
 			                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#216: FILE: fs/proc/proc_misc.c:417:
+			buffer += sprintf(buffer," %d",list_p->pid);	    
 			                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#219: FILE: fs/proc/proc_misc.c:420:
+	buffer += sprintf(buffer,"\n");
 	                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#220: FILE: fs/proc/proc_misc.c:421:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#221: FILE: fs/proc/proc_misc.c:422:
+^Iread_unlock(&tasklist_lock);^I  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#222: FILE: fs/proc/proc_misc.c:423:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#242: FILE: include/linux/sched.h:327:
+        /* -- flags needed by safefork -- */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#243: FILE: include/linux/sched.h:328:
+        int sf_killchildren:1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#243: FILE: include/linux/sched.h:328:
+        int sf_killchildren:1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#244: FILE: include/linux/sched.h:329:
+        int sf_watchme:1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#244: FILE: include/linux/sched.h:329:
+        int sf_watchme:1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#245: FILE: include/linux/sched.h:330:
+        int sf_zombie:1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#245: FILE: include/linux/sched.h:330:
+        int sf_zombie:1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#246: FILE: include/linux/sched.h:331:
+        pid_t sf_parent; /* the master parent */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: include/linux/sched.h:331:
+        pid_t sf_parent; /* the master parent */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#247: FILE: include/linux/sched.h:332:
+        /* -- end safefork -- */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: include/linux/sched.h:334:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: include/linux/sched.h:334:
+  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#250: FILE: include/linux/sched.h:335:
+        int dumpable:1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: include/linux/sched.h:335:
+        int dumpable:1;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#269: FILE: kernel/exit.c:438:
+^Istruct task_struct *list_p;        $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#270: FILE: kernel/exit.c:439:
+	int priv=1; // kernel privileges
 	        ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#279: FILE: kernel/exit.c:448:
+		if (list_p->sf_parent==tsk->pid && list_p->pid!=tsk->pid) {
 		                     ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#279: FILE: kernel/exit.c:448:
+		if (list_p->sf_parent==tsk->pid && list_p->pid!=tsk->pid) {
 		                                              ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#283: FILE: kernel/exit.c:452:
+				      (void*)(long)(priv != 0), list_p);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#285: FILE: kernel/exit.c:454:
+				      (void*)(long)(priv != 0), list_p);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#286: FILE: kernel/exit.c:455:
+			printk(KERN_INFO

WARNING:SPLIT_STRING: quoted string split across lines
#288: FILE: kernel/exit.c:457:
+			       "safefork: Sending process %i"
+			       "SIGTERM and SIGKILL\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:MISSING_SPACE: break quoted strings at a space character
#288: FILE: kernel/exit.c:457:
+			       "safefork: Sending process %i"
+			       "SIGTERM and SIGKILL\n",

ERROR:SPACING: space prohibited before that close parenthesis ')'
#289: FILE: kernel/exit.c:458:
+			       list_p->pid );

ERROR:TRAILING_WHITESPACE: trailing whitespace
#294: FILE: kernel/exit.c:463:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#300: FILE: kernel/exit.c:469:
+^Istruct task_struct *list_p;        $

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#303: FILE: kernel/exit.c:472:
+	if (tsk->sf_parent!=tsk->pid)
 	                  ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#309: FILE: kernel/exit.c:478:
+		if (list_p->sf_parent==tsk->pid && list_p->pid!=tsk->pid)
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#309: FILE: kernel/exit.c:478:
+		if (list_p->sf_parent==tsk->pid && list_p->pid!=tsk->pid)
 		                     ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#309: FILE: kernel/exit.c:478:
+		if (list_p->sf_parent==tsk->pid && list_p->pid!=tsk->pid)
 		                                              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#312: FILE: kernel/exit.c:481:
+			list_p->sf_zombie=1;
 			                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#314: FILE: kernel/exit.c:483:
+			list_p->sf_killchildren=tsk->sf_killchildren;
 			                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#315: FILE: kernel/exit.c:484:
+			list_p->sf_parent=list_p->pid;
 			                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#335: FILE: kernel/exit.c:522:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#363: FILE: kernel/fork.c:613:
+	p->sf_killchildren=0; // this flag must be set by the user
 	                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#366: FILE: kernel/fork.c:616:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000516555.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 93 errors, 28 warnings, 2 checks, 282 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000516555.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
