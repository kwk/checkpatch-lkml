WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
diff -urN -I \$.*\$ --exclude TAGS -X /home/rusty/devel/kernel/kernel-patches/current-dontdiff --minimal linux-2.5.14.23963/include/linux/smp.h linux-2.5.14.23963.updated/include/linux/smp.h

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: drivers/video/fbcon.c:2180:
+    for (x = 0; x < num_online_cpus() * (LOGO_W + 8) &&$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#122: FILE: drivers/video/fbcon.c:2181:
+    for (x = 0; x < num_online_cpus() * (LOGO_W + 8) &&
     	 x < p->var.xres - (LOGO_W + 8); x += (LOGO_W + 8)) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#133: FILE: fs/proc/array.c:696:
+	for (i = 0 ; i < NR_CPUS; i++) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#134: FILE: fs/proc/array.c:697:
+		if (cpu_online(i))
 		len += sprintf(buffer + len, "cpu%d %lu %lu\n",

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#142: FILE: fs/proc/array.c:703:
 
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#155: FILE: fs/proc/proc_misc.c:268:
+	for (i = 0 ; i < NR_CPUS; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#161: FILE: fs/proc/proc_misc.c:271:
+		if(!cpu_online(i)) continue;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#161: FILE: fs/proc/proc_misc.c:271:
+		if(!cpu_online(i)) continue;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required before the open brace '{'
#176: FILE: fs/proc/proc_misc.c:283:
+	for (i = 0 ; i < NR_CPUS; i++){

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#176: FILE: fs/proc/proc_misc.c:283:
+	for (i = 0 ; i < NR_CPUS; i++){

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#177: FILE: fs/proc/proc_misc.c:284:
+		if (!cpu_online(i)) continue;

ERROR:SPACING: space prohibited after that open parenthesis '('
#189: FILE: fs/proc/proc_misc.c:290:
+			jif - (  kstat.per_cpu_user[i] \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#189: FILE: fs/proc/proc_misc.c:290:
+			jif - (  kstat.per_cpu_user[i] \

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#205: FILE: include/linux/kernel_stat.h:46:
+	for (i = 0 ; i < NR_CPUS ; i++)

ERROR:SPACING: space required before the open parenthesis '('
#220: FILE: kernel/fork.c:704:
+		for(i = 0; i < NR_CPUS; i++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#220: FILE: kernel/fork.c:704:
+		for(i = 0; i < NR_CPUS; i++)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#221: FILE: kernel/fork.c:705:
+			p->per_cpu_utime[i] = p->per_cpu_stime[i] = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#234: FILE: kernel/sched.c:440:
+	for (i = 0; i < NR_CPUS; i++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#245: FILE: kernel/sched.c:450:
+	for (i = 0; i < NR_CPUS; i++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#256: FILE: kernel/sched.c:526:
+	for (i = 0; i < NR_CPUS; i++) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rq_src->nr_running < this_rq->prev_nr_running[i]'
#263: FILE: kernel/sched.c:531:
+		if (idle || (rq_src->nr_running < this_rq->prev_nr_running[i]))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: No space is necessary after a cast
#278: FILE: kernel/sched.c:1695:
+	int cpu = (int) (long) bind_cpu;

ERROR:CODE_INDENT: code indent should use tabs where possible
#288: FILE: kernel/sched.c:1705:
+           vanishes with hotplug cpu patch anyway. --RR */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#288: FILE: kernel/sched.c:1705:
+	/* FIXME: First CPU may not be zero, but this crap code
+           vanishes with hotplug cpu patch anyway. --RR */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#288: FILE: kernel/sched.c:1705:
+           vanishes with hotplug cpu patch anyway. --RR */

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#306: FILE: kernel/sched.c:1776:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#316: FILE: kernel/sched.c:1785:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

CHECK:SPACING: No space is necessary after a cast
#333: FILE: kernel/softirq.c:363:
+	int cpu = (int) (long) __bind_cpu;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#356: FILE: kernel/softirq.c:400:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#379: FILE: lib/brlock.c:27:
+	for (i = 0; i < NR_CPUS; i++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#389: FILE: lib/brlock.c:35:
+	for (i = 0; i < NR_CPUS; i++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#400: FILE: lib/brlock.c:53:
+	for (i = 0; i < NR_CPUS; i++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#413: FILE: mm/page_alloc.c:593:
+	for (pcpu = 0; pcpu < NR_CPUS; pcpu++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#430: FILE: mm/slab.c:940:
+	for (i = 0; i < NR_CPUS; i++) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#431: FILE: mm/slab.c:941:
+		cpucache_t* ccold = new.new[i];

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#440: FILE: mm/slab.c:1674:
+		for (i = 0; i < NR_CPUS; i++) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#448: FILE: mm/slab.c:1680:
+				for (i--; i >= 0; i--) kfree(new.new[i]);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#464: FILE: mm/slab.c:1695:
+	for (i = 0; i < NR_CPUS; i++) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#465: FILE: mm/slab.c:1696:
+		cpucache_t* ccold = new.new[i];

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#493: FILE: net/core/dev.c:1821:
+	for (i=0; i<NR_CPUS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#493: FILE: net/core/dev.c:1821:
+	for (i=0; i<NR_CPUS; i++) {
 	           ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#493: FILE: net/core/dev.c:1821:
+	for (i=0; i<NR_CPUS; i++) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#494: FILE: net/core/dev.c:1822:
+		if (cpu_online(i)) {
 		len += sprintf(buffer+len, "%08x %08x %08x %08x %08x %08x %08x %08x %08x\n",

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#523: FILE: net/ipv4/netfilter/arp_tables.c:708:
+	for (i = 1; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#532: FILE: net/ipv4/netfilter/arp_tables.c:759:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#541: FILE: net/ipv4/netfilter/arp_tables.c:877:
+			  + SMP_ALIGN(tmp.size) * NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#550: FILE: net/ipv4/netfilter/arp_tables.c:1146:
+			  + SMP_ALIGN(table->table->size) * NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#572: FILE: net/ipv4/netfilter/ip_tables.c:867:
+	for (i = 1; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#581: FILE: net/ipv4/netfilter/ip_tables.c:889:
+		for (i = 0; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#590: FILE: net/ipv4/netfilter/ip_tables.c:936:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#599: FILE: net/ipv4/netfilter/ip_tables.c:1074:
+			  + SMP_ALIGN(tmp.size) * NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#608: FILE: net/ipv4/netfilter/ip_tables.c:1387:
+			  + SMP_ALIGN(table->table->size) * NR_CPUS);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#631: FILE: net/ipv4/netfilter/ipchains_core.c:154:
+#define SLOT_NUMBER() (smp_processor_id()*2 + !in_interrupt())
                                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#636: FILE: net/ipv4/netfilter/ipchains_core.c:158:
+#define NUM_SLOTS (NR_CPUS*2)
                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#658: FILE: net/ipv4/proc.c:58:
+	for (cpu=0; cpu<NR_CPUS; cpu++)
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#658: FILE: net/ipv4/proc.c:58:
+	for (cpu=0; cpu<NR_CPUS; cpu++)
 	               ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#658: FILE: net/ipv4/proc.c:58:
+	for (cpu=0; cpu<NR_CPUS; cpu++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#670: FILE: net/ipv4/proc.c:106:
+	for (i=0; i<NR_CPUS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#670: FILE: net/ipv4/proc.c:106:
+	for (i=0; i<NR_CPUS; i++) {
 	           ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#670: FILE: net/ipv4/proc.c:106:
+	for (i=0; i<NR_CPUS; i++) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#671: FILE: net/ipv4/proc.c:107:
+		res += begin[2*i*sz + nr];
 		              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#671: FILE: net/ipv4/proc.c:107:
+		res += begin[2*i*sz + nr];
 		                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#672: FILE: net/ipv4/proc.c:108:
+		res += begin[(2*i+1)*sz + nr];
 		               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#672: FILE: net/ipv4/proc.c:108:
+		res += begin[(2*i+1)*sz + nr];
 		                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#672: FILE: net/ipv4/proc.c:108:
+		res += begin[(2*i+1)*sz + nr];
 		                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#690: FILE: net/ipv4/route.c:286:
+        for (i = 0; i < NR_CPUS; i++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#690: FILE: net/ipv4/route.c:286:
+        for (i = 0; i < NR_CPUS; i++) {$

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#690: FILE: net/ipv4/route.c:286:
+        for (i = 0; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#706: FILE: net/ipv4/route.c:2429:
+			for (i = 1; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#726: FILE: net/ipv6/netfilter/ip6_tables.c:916:
+	for (i = 1; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#735: FILE: net/ipv6/netfilter/ip6_tables.c:938:
+		for (i = 0; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#744: FILE: net/ipv6/netfilter/ip6_tables.c:985:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#753: FILE: net/ipv6/netfilter/ip6_tables.c:1119:
+			  + SMP_ALIGN(tmp.size) * NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#762: FILE: net/ipv6/netfilter/ip6_tables.c:1432:
+			  + SMP_ALIGN(table->table->size) * NR_CPUS);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#775: FILE: net/ipv6/proc.c:34:
+	for (cpu=0; cpu<NR_CPUS; cpu++)
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#775: FILE: net/ipv6/proc.c:34:
+	for (cpu=0; cpu<NR_CPUS; cpu++)
 	               ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#775: FILE: net/ipv6/proc.c:34:
+	for (cpu=0; cpu<NR_CPUS; cpu++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#787: FILE: net/ipv6/proc.c:143:
+	for (i=0; i<NR_CPUS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#787: FILE: net/ipv6/proc.c:143:
+	for (i=0; i<NR_CPUS; i++) {
 	           ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#787: FILE: net/ipv6/proc.c:143:
+	for (i=0; i<NR_CPUS; i++) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#788: FILE: net/ipv6/proc.c:144:
+		res += ptr[2*i*size];
 		            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#788: FILE: net/ipv6/proc.c:144:
+		res += ptr[2*i*size];
 		              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#789: FILE: net/ipv6/proc.c:145:
+		res += ptr[(2*i+1)*size];
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#789: FILE: net/ipv6/proc.c:145:
+		res += ptr[(2*i+1)*size];
 		               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#789: FILE: net/ipv6/proc.c:145:
+		res += ptr[(2*i+1)*size];
 		                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#802: FILE: net/socket.c:1776:
+	for (cpu=0; cpu<NR_CPUS; cpu++)
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#802: FILE: net/socket.c:1776:
+	for (cpu=0; cpu<NR_CPUS; cpu++)
 	               ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#802: FILE: net/socket.c:1776:
+	for (cpu=0; cpu<NR_CPUS; cpu++)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000459720.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 23 errors, 48 warnings, 18 checks, 647 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000459720.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
