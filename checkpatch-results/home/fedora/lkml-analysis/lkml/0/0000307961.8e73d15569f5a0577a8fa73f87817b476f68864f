WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#69: FILE: arch/i386/Kconfig:1023:
+config PCI_EXPRESS
+	bool "PCI_EXPRESS (EXPERIMENTAL)" 
+	depends on EXPERIMENTAL && PCI
+	select ACPI_BOOT
+	help
+	  PCI Express is the next generation PCI architecture that

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#70: FILE: arch/i386/Kconfig:1024:
+^Ibool "PCI_EXPRESS (EXPERIMENTAL)" $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#75: FILE: arch/i386/Kconfig:1028:
supports

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#76: FILE: arch/i386/Kconfig:1029:
+^I  the configuration space size of 4K bytes. With this option, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#79: FILE: arch/i386/Kconfig:1031:
+^I  enhanced config access mechanism (will work only on $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#80: FILE: arch/i386/Kconfig:1032:
+^I  PCI Express based system) otherwise other standard PCI access $

CHECK:SPACING: No space is necessary after a cast
#105: FILE: arch/i386/kernel/acpi/boot.c:105:
+	mcfg = (struct acpi_table_mcfg *) __acpi_map_table

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#108: FILE: arch/i386/kernel/acpi/boot.c:108:
+		printk(KERN_WARNING PREFIX "Unable to map MCFG\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#127: FILE: arch/i386/kernel/acpi/boot.c:535:
+		printk(KERN_WARNING PREFIX "MCFG not present\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#130: FILE: arch/i386/kernel/acpi/boot.c:538:
+		printk(KERN_ERR PREFIX "Error parsing MCFG\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#133: FILE: arch/i386/kernel/acpi/boot.c:541:
+		printk(KERN_WARNING PREFIX

ERROR:TRAILING_WHITESPACE: trailing whitespace
#189: FILE: arch/i386/pci/direct.c:175:
+ * the OS would have scanned for MCFG table and set this variable to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#190: FILE: arch/i386/pci/direct.c:176:
+ * appropriate value. If PCI Express not supported the variable will $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#208: FILE: arch/i386/pci/direct.c:193:
+static int pci_express_conf_read(int seg, int bus,
+		int devfn, int reg, int len, u32 *value)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bus > 255'
#210: FILE: arch/i386/pci/direct.c:195:
+	if (!value || (bus > 255) || (devfn > 255) || (reg > 4095)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'devfn > 255'
#210: FILE: arch/i386/pci/direct.c:195:
+	if (!value || (bus > 255) || (devfn > 255) || (reg > 4095)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg > 4095'
#210: FILE: arch/i386/pci/direct.c:195:
+	if (!value || (bus > 255) || (devfn > 255) || (reg > 4095)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#211: FILE: arch/i386/pci/direct.c:196:
+		printk(KERN_ERR "%s: Invalid Parameter\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#212: FILE: arch/i386/pci/direct.c:197:
+		printk(KERN_ERR "%s: Invalid Parameter\n",
+				__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#212: FILE: arch/i386/pci/direct.c:197:
+				__FUNCTION__);

ERROR:CODE_INDENT: code indent should use tabs where possible
#213: FILE: arch/i386/pci/direct.c:198:
+  ^I^Ireturn -EINVAL;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#213: FILE: arch/i386/pci/direct.c:198:
+  ^I^Ireturn -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: arch/i386/pci/direct.c:198:
+  ^I^Ireturn -EINVAL;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#219: FILE: arch/i386/pci/direct.c:204:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: arch/i386/pci/direct.c:204:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#220: FILE: arch/i386/pci/direct.c:205:
+static int pci_express_conf_write(int seg, int bus, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#221: FILE: arch/i386/pci/direct.c:206:
+static int pci_express_conf_write(int seg, int bus, 
+			int devfn, int reg, int len, u32 value)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bus > 255'
#223: FILE: arch/i386/pci/direct.c:208:
+	if ((bus > 255) || (devfn > 255) || (reg > 4095)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'devfn > 255'
#223: FILE: arch/i386/pci/direct.c:208:
+	if ((bus > 255) || (devfn > 255) || (reg > 4095)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg > 4095'
#223: FILE: arch/i386/pci/direct.c:208:
+	if ((bus > 255) || (devfn > 255) || (reg > 4095)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#224: FILE: arch/i386/pci/direct.c:209:
+		printk(KERN_ERR "%s: Invalid Parameter\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#225: FILE: arch/i386/pci/direct.c:210:
+		printk(KERN_ERR "%s: Invalid Parameter\n",
+				__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#225: FILE: arch/i386/pci/direct.c:210:
+				__FUNCTION__);

WARNING:CONST_STRUCT: struct pci_raw_ops should normally be const
#233: FILE: arch/i386/pci/direct.c:218:
+static struct pci_raw_ops pci_express_conf = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#248: FILE: arch/i386/pci/direct.c:301:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#253: FILE: arch/i386/pci/direct.c:306:
+ ^I * Check if platform we are running is PCI Express capable$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#253: FILE: arch/i386/pci/direct.c:306:
+ ^I * Check if platform we are running is PCI Express capable$

ERROR:CODE_INDENT: code indent should use tabs where possible
#254: FILE: arch/i386/pci/direct.c:307:
+  ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#254: FILE: arch/i386/pci/direct.c:307:
+  ^I */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#256: FILE: arch/i386/pci/direct.c:309:
+^I^Iprintk(KERN_INFO $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#256: FILE: arch/i386/pci/direct.c:309:
+		printk(KERN_INFO 

CHECK:CAMELCASE: Avoid CamelCase: <Not>
#259: FILE: arch/i386/pci/direct.c:311:
+		      "Not enabling Enhanced Configuration....\n");

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Enhanced>
#259: FILE: arch/i386/pci/direct.c:311:
+		      "Not enabling Enhanced Configuration....\n");

CHECK:CAMELCASE: Avoid CamelCase: <Configuration>
#259: FILE: arch/i386/pci/direct.c:311:
+		      "Not enabling Enhanced Configuration....\n");

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#267: FILE: arch/i386/pci/direct.c:319:
+		printk(KERN_INFO "PCI: Using config type PCIExp\n");
 		                     ^

CHECK:CAMELCASE: Avoid CamelCase: <Using>
#267: FILE: arch/i386/pci/direct.c:319:
+		printk(KERN_INFO "PCI: Using config type PCIExp\n");

CHECK:CAMELCASE: Avoid CamelCase: <PCIExp>
#267: FILE: arch/i386/pci/direct.c:319:
+		printk(KERN_INFO "PCI: Using config type PCIExp\n");

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#303: FILE: arch/i386/pci/pci.h:21:
+#define PCI_PROBE_ENHANCED ^I0x0$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#355: FILE: drivers/pci/probe.c:484:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#363: FILE: drivers/pci/probe.c:491:
+^Iint is_pci_express_dev = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#368: FILE: drivers/pci/probe.c:496:
+^Ireturn PCI_CFG_SPACE_SIZE; $

ERROR:CODE_INDENT: code indent should use tabs where possible
#425: FILE: drivers/pci/proc.c:63:
+ ^I^Isize = dev->cfg_size;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#425: FILE: drivers/pci/proc.c:63:
+ ^I^Isize = dev->cfg_size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#425: FILE: drivers/pci/proc.c:63:
+ ^I^Isize = dev->cfg_size;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#507: FILE: include/asm-i386/pci.h:120:
+^Iu32 dev_base = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#515: FILE: include/asm-i386/pci.h:128:
+static inline void pci_express_read(int bus, int devfn, int reg, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#516: FILE: include/asm-i386/pci.h:129:
+static inline void pci_express_read(int bus, int devfn, int reg, 
+		int len, u32 *value)

ERROR:CODE_INDENT: code indent should use tabs where possible
#519: FILE: include/asm-i386/pci.h:132:
+ ^Iswitch (len) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#519: FILE: include/asm-i386/pci.h:132:
+ ^Iswitch (len) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#519: FILE: include/asm-i386/pci.h:132:
+ ^Iswitch (len) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#520: FILE: include/asm-i386/pci.h:133:
+        case 1:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#520: FILE: include/asm-i386/pci.h:133:
+        case 1:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#523: FILE: include/asm-i386/pci.h:136:
+        case 2:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#523: FILE: include/asm-i386/pci.h:136:
+        case 2:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#526: FILE: include/asm-i386/pci.h:139:
+        case 4:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#526: FILE: include/asm-i386/pci.h:139:
+        case 4:$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#532: FILE: include/asm-i386/pci.h:145:
+static inline void pci_express_write(int bus, int devfn, int reg, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#533: FILE: include/asm-i386/pci.h:146:
+static inline void pci_express_write(int bus, int devfn, int reg, 
+	int len, u32 value)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#536: FILE: include/asm-i386/pci.h:149:
+	switch (len) {
+		case 1:
[...]
+		case 2:
[...]
+	        case 4:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#543: FILE: include/asm-i386/pci.h:156:
+^I        case 4:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#545: FILE: include/asm-i386/pci.h:158:
+^I                break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#546: FILE: include/asm-i386/pci.h:159:
+     ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#546: FILE: include/asm-i386/pci.h:159:
+     ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#546: FILE: include/asm-i386/pci.h:159:
+     ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#563: FILE: include/linux/acpi.h:321:
+^Istruct acpi_table_header ^Iheader;$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#567: FILE: include/linux/acpi.h:325:
+} __attribute__ ((packed));

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#599: FILE: include/linux/pci.h:201:
+#define  PCI_CAP_ID_EXP ^I0x10^I/* PCI-EXPANDED */$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000307961.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 30 errors, 29 warnings, 18 checks, 445 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000307961.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
