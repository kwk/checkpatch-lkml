WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
This is a patch to perform block device plugging explicitly in the submitting

WARNING:TYPO_SPELLING: 'occuring' may be misspelled - perhaps 'occurring'?
#43: 
  advantages are lost if there is parallel IO occuring. Not so with
                                              ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#136: FILE: fs/buffer.c:67:
+	wait_on_bit_lock(&bh->b_state, BH_Lock, sleep_on_buffer,
 							TASK_UNINTERRUPTIBLE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: mm/filemap.c:490:
+		__wait_on_bit(page_waitqueue(page), &wait, sleep_on_page,
 							TASK_UNINTERRUPTIBLE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#243: FILE: mm/filemap.c:542:
+	__wait_on_bit_lock(page_waitqueue(page), &wait, sleep_on_page,
 							TASK_UNINTERRUPTIBLE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#591: FILE: block/ll_rw_blk.c:1603:
+	BUG_ON(test_bit(QUEUE_FLAG_STOPPED, &q->queue_flags));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#682: FILE: block/ll_rw_blk.c:2693:
+static int bio_attempt_back_merge(request_queue_t *q, struct request *req,
+					int nr_sectors, struct bio *bio)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#687: FILE: block/ll_rw_blk.c:2695:
+	BUG_ON(!rq_mergeable(req));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#702: FILE: block/ll_rw_blk.c:2710:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#704: FILE: block/ll_rw_blk.c:2712:
+static int bio_attempt_front_merge(request_queue_t *q, struct request *req,
+					int nr_sectors, struct bio *bio)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#709: FILE: block/ll_rw_blk.c:2717:
+	BUG_ON(!rq_mergeable(req));

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#732: FILE: block/ll_rw_blk.c:2738:
+	req->sector = req->hard_sector = sector;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LINE_SPACING: Missing a blank line after declarations
#767: FILE: block/ll_rw_blk.c:2775:
+		struct request *rq;
+		rq = list_entry_rq(ioc->plugged_list.prev);

WARNING:LINE_SPACING: Missing a blank line after declarations
#884: FILE: block/ll_rw_blk.c:3494:
+	struct io_context *ioc = current_io_context(GFP_NOIO);
+	if (ioc)

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#893: FILE: block/ll_rw_blk.c:3503:
+	static int batches = 0, requests = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#918: FILE: block/ll_rw_blk.c:3528:
+		printk(KERN_INFO "batches: %d, requests: %d\n", batches, requests);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1136: FILE: include/linux/elevator.h:91:
+extern void elv_add_request(request_queue_t *, struct request *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#1136: FILE: include/linux/elevator.h:91:
+extern void elv_add_request(request_queue_t *, struct request *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#1136: FILE: include/linux/elevator.h:91:
+extern void elv_add_request(request_queue_t *, struct request *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1136: FILE: include/linux/elevator.h:91:
+extern void elv_add_request(request_queue_t *, struct request *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1137: FILE: include/linux/elevator.h:92:
+extern void __elv_add_request(request_queue_t *, struct request *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#1137: FILE: include/linux/elevator.h:92:
+extern void __elv_add_request(request_queue_t *, struct request *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#1137: FILE: include/linux/elevator.h:92:
+extern void __elv_add_request(request_queue_t *, struct request *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1137: FILE: include/linux/elevator.h:92:
+extern void __elv_add_request(request_queue_t *, struct request *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1140: FILE: include/linux/elevator.h:95:
+extern int elv_try_merge(struct request *, struct bio *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#1140: FILE: include/linux/elevator.h:95:
+extern int elv_try_merge(struct request *, struct bio *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#1140: FILE: include/linux/elevator.h:95:
+extern int elv_try_merge(struct request *, struct bio *);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1269: FILE: drivers/scsi/scsi_lib.c:120:
+#if 0

ERROR:CODE_INDENT: code indent should use tabs where possible
#1306: FILE: drivers/scsi/scsi_lib.c:1227:
+ ^Iif (sdev->device_busy == 0)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1306: FILE: drivers/scsi/scsi_lib.c:1227:
+ ^Iif (sdev->device_busy == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1306: FILE: drivers/scsi/scsi_lib.c:1227:
+ ^Iif (sdev->device_busy == 0)$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000037678.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 19 warnings, 10 checks, 1472 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000037678.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
