WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
grouping related allocation types together. The idea is that large groups of

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#39: FILE: include/linux/mmzone.h:32:
+#define for_each_rclmtype_order(type, order) \
+	for (order = 0; order < MAX_ORDER; order++) \
+		for (type = 0; type < RCLM_TYPES; type++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'order' - possible side-effects?
#39: FILE: include/linux/mmzone.h:32:
+#define for_each_rclmtype_order(type, order) \
+	for (order = 0; order < MAX_ORDER; order++) \
+		for (type = 0; type < RCLM_TYPES; type++)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#77: FILE: mm/page_alloc.c:283:
+static inline struct free_area *__page_find_freelist(struct zone *zone,
+							struct page *page,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#135: FILE: mm/page_alloc.c:529:
+static struct page *__rmqueue_fallback(struct zone *zone, int order,
+							int alloctype)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#137: FILE: mm/page_alloc.c:531:
+	struct free_area * area;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#143: FILE: mm/page_alloc.c:537:
+	for (current_order = MAX_ORDER-1; current_order >= order;
 	                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_lists[alloctype][current_order]
#145: FILE: mm/page_alloc.c:539:
+		area = &(zone->free_area_lists[alloctype][current_order]);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:CODE_INDENT: code indent should use tabs where possible
#146: FILE: mm/page_alloc.c:540:
+ ^I^Iif (list_empty(&area->free_list))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#146: FILE: mm/page_alloc.c:540:
+ ^I^Iif (list_empty(&area->free_list))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: mm/page_alloc.c:540:
+ ^I^Iif (list_empty(&area->free_list))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#147: FILE: mm/page_alloc.c:541:
+ ^I^I^Icontinue;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#147: FILE: mm/page_alloc.c:541:
+ ^I^I^Icontinue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: mm/page_alloc.c:541:
+ ^I^I^Icontinue;$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#167: FILE: mm/page_alloc.c:561:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#178: FILE: mm/page_alloc.c:571:
+static struct page *__rmqueue(struct zone *zone, unsigned int order,
+					int alloctype)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_lists[alloctype][current_order]
#187: FILE: mm/page_alloc.c:579:
+		area = &(zone->free_area_lists[alloctype][current_order]);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#199: FILE: mm/page_alloc.c:594:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#237: FILE: mm/page_alloc.c:688:
+		list_for_each(curr,&zone->free_area_lists[t][order].free_list) {
 		                  ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#237: FILE: mm/page_alloc.c:688:
+		list_for_each(curr,&zone->free_area_lists[t][order].free_list) {
 		                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#283: FILE: mm/page_alloc.c:847:
+	int o,t;
 	     ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#333: FILE: mm/page_alloc.c:1531:
+ ^I^Iunsigned long nr = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#333: FILE: mm/page_alloc.c:1531:
+ ^I^Iunsigned long nr = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#333: FILE: mm/page_alloc.c:1531:
+ ^I^Iunsigned long nr = 0;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#335: FILE: mm/page_alloc.c:1533:
+		unsigned long flags,order;
 		                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#354: FILE: mm/page_alloc.c:1551:
+			if (type == RCLM_TYPES-1) {
 			                      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#355: FILE: mm/page_alloc.c:1552:
+				printk("%lu*%lukB ", nr, K(1UL) << order);

WARNING:TYPO_SPELLING: 'Initialse' may be misspelled - perhaps 'Initialise'?
#371: FILE: mm/page_alloc.c:1867:
+	/* Initialse the three size ordered lists of free_areas */
 	   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_lists[type][order]
#373: FILE: mm/page_alloc.c:1869:
+		area = &(zone->free_area_lists[type][order]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_lists[t][order]
#398: FILE: mm/page_alloc.c:2297:
+			area = &(zone->free_area_lists[t][order]);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#401: FILE: mm/page_alloc.c:2300:
+			if (t == RCLM_TYPES-1) {
 			                   ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000134469.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 9 warnings, 13 checks, 353 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000134469.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
