WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
> I really think you should update the "simple_xxx()" functions instead, and 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#76: FILE: fs/libfs.c:244:
+	struct inode * inode = new_inode(sb);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#86: FILE: fs/libfs.c:254:
+	inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LINE_SPACING: Missing a blank line after declarations
#97: FILE: fs/libfs.c:265:
+		int error = init(inode, arg);
+		if (error) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#98: FILE: fs/libfs.c:266:
+			iput(inode);
 			^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#109: FILE: fs/libfs.c:277:
+	struct inode * inode;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#124: FILE: fs/libfs.c:292:
+	dir->i_mtime = dir->i_ctime = CURRENT_TIME;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#136: FILE: fs/libfs.c:303:
+	inode->i_ctime = dir->i_mtime = dir->i_ctime = CURRENT_TIME;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#165: FILE: fs/libfs.c:695:
+EXPORT_SYMBOL(simple_mknod_init);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#177: FILE: include/linux/fs.h:1627:
+extern struct inode *simple_get_inode(struct super_block *, int ,
                                                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#177: FILE: include/linux/fs.h:1627:
+extern struct inode *simple_get_inode(struct super_block *, int ,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#177: FILE: include/linux/fs.h:1627:
+extern struct inode *simple_get_inode(struct super_block *, int ,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#177: FILE: include/linux/fs.h:1627:
+extern struct inode *simple_get_inode(struct super_block *, int ,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#177: FILE: include/linux/fs.h:1627:
+extern struct inode *simple_get_inode(struct super_block *, int ,

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#180: FILE: include/linux/fs.h:1630:
+extern int simple_mknod_init(struct inode *, struct dentry *, int ,
                                                                   ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#180: FILE: include/linux/fs.h:1630:
+extern int simple_mknod_init(struct inode *, struct dentry *, int ,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#180: FILE: include/linux/fs.h:1630:
+extern int simple_mknod_init(struct inode *, struct dentry *, int ,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#180: FILE: include/linux/fs.h:1630:
+extern int simple_mknod_init(struct inode *, struct dentry *, int ,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#180: FILE: include/linux/fs.h:1630:
+extern int simple_mknod_init(struct inode *, struct dentry *, int ,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#180: FILE: include/linux/fs.h:1630:
+extern int simple_mknod_init(struct inode *, struct dentry *, int ,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#181: FILE: include/linux/fs.h:1631:
+extern int simple_mknod_init(struct inode *, struct dentry *, int ,
+			    int (*init)(struct inode *, void *), void *);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#270: FILE: fs/ramfs/inode.c:78:
+		len = strlen(arg->symname)+1;
 		                          ^

CHECK:SPACING: No space is necessary after a cast
#303: FILE: fs/ramfs/inode.c:99:
+				 ramfs_inode_init, (void *) &args);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#312: FILE: fs/ramfs/inode.c:104:
+	return simple_mknod_init(dir, dentry, mode|S_IFDIR,
 	                                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#319: FILE: fs/ramfs/inode.c:110:
+	return simple_mknod_init(dir, dentry, mode|S_IFREG,
 	                                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#344: FILE: fs/ramfs/inode.c:119:
+	return simple_mknod_init(dir, dentry, S_IFLNK|S_IRWXUGO,
 	                                             ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#344: FILE: fs/ramfs/inode.c:119:
+	return simple_mknod_init(dir, dentry, S_IFLNK|S_IRWXUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: No space is necessary after a cast
#345: FILE: fs/ramfs/inode.c:120:
+				 ramfs_inode_init, (void *) &args);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#356: FILE: fs/ramfs/inode.c:170:
+	inode = simple_get_inode(sb, S_IFDIR|0755, ramfs_inode_init, NULL);
 	                                    ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000166809.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 12 warnings, 13 checks, 265 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000166809.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
