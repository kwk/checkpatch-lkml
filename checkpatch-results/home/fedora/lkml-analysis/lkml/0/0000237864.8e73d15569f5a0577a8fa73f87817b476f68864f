WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
with pml4_offset()/pml4_offset_k() and pml4_pgd_offset()/pml4_pgd_offset_k()

ERROR:TRAILING_WHITESPACE: trailing whitespace
#65: FILE: fs/exec.c:315:
+^Iif (!pgd) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#78: FILE: include/linux/init_task.h:37:
+^I.pml4^I^I= swapper_pml4, ^I^I^I\$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#98: FILE: include/linux/mm.h:583:
+extern pgd_t fastcall *__pgd_alloc(struct mm_struct *mm, pml4_t *pgd, unsigned long address);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#109: FILE: include/linux/mm.h:642:
+^I^Ireturn __pgd_alloc(mm, pml4, address); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: include/linux/mm.h:643:
+^Ireturn pml4_pgd_offset(pml4, address); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#116: FILE: include/linux/mm.h:649:
+^I^Ireturn __pgd_alloc(mm, pml4, address); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#117: FILE: include/linux/mm.h:650:
+^Ireturn pml4_pgd_offset_k(pml4, address); $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#131: FILE: include/linux/sched.h:214:
+	pml4_t * pml4;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#167: FILE: mm/fremap.c:68:
+^Ipgd = pgd_alloc(mm, pml4_offset(mm, addr), addr); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#168: FILE: mm/fremap.c:69:
+^Iif (!pgd) $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#168: FILE: mm/fremap.c:69:
+	if (!pgd) 
+	    goto err_unlock;

WARNING:TABSTOP: Statements should start on a tabstop
#169: FILE: mm/fremap.c:70:
+	    goto err_unlock;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#170: FILE: mm/fremap.c:71:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#186: FILE: mm/fremap.c:122:
+^Ipml4 = pml4_offset(mm, addr); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#188: FILE: mm/fremap.c:124:
+^Ispin_lock(&mm->page_table_lock);  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#189: FILE: mm/fremap.c:125:
+^Ipgd = pgd_alloc(mm, pml4, addr); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#190: FILE: mm/fremap.c:126:
+^Iif (!pgd) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#203: FILE: mm/memory.c:38:
+ * Aug/Sep 2004 Changed to four level page tables (Andi Kleen) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#212: FILE: mm/memory.c:143:
+^I^I^I^I unsigned long addr, unsigned long end) $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#224: FILE: mm/memory.c:155:
+	BUG_ON(addr & ~PGDIR_MASK);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#225: FILE: mm/memory.c:156:
+	BUG_ON(end & ~PGDIR_MASK);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#229: FILE: mm/memory.c:160:
+^Ido { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#233: FILE: mm/memory.c:164:
+^I^Iif (pgd - pgd_start >= PTRS_PER_PGD) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#236: FILE: mm/memory.c:167:
+^I} while (addr && addr < end); $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#238: FILE: mm/memory.c:169:
+	/* Could keep a counter in the struct page here too to handle
+	   partials unmaps better. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#238: FILE: mm/memory.c:169:
+	   partials unmaps better. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#251: FILE: mm/memory.c:180:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#268: FILE: mm/memory.c:190:
+^Ifor (i = pml4_index(addr); i <= pml4_index(end-1); i++) { $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#268: FILE: mm/memory.c:190:
+	for (i = pml4_index(addr); i <= pml4_index(end-1); i++) { 
 	                                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#270: FILE: mm/memory.c:192:
+^I^Iif (next > end || next <= addr) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#271: FILE: mm/memory.c:193:
+^I^I^Inext = end; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#273: FILE: mm/memory.c:195:
+^I^I^Ifree_one_pml4(tlb, pml4 + i, addr, next);  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#302: FILE: mm/memory.c:256:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#321: FILE: mm/memory.c:261:
+static inline void $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#322: FILE: mm/memory.c:262:
+copy_swap_pte(struct mm_struct *dst_mm, struct mm_struct *src_mm, pte_t pte) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#327: FILE: mm/memory.c:267:
+^Iif (list_empty(&dst_mm->mmlist)) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#331: FILE: mm/memory.c:271:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#333: FILE: mm/memory.c:273:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#334: FILE: mm/memory.c:274:
+static inline void $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#342: FILE: mm/memory.c:282:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#347: FILE: mm/memory.c:287:
+^I^Ireturn; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#356: FILE: mm/memory.c:296:
+^Iif (pfn_valid(pfn)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#357: FILE: mm/memory.c:297:
+^I^Ipage = pfn_to_page(pfn); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#358: FILE: mm/memory.c:298:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#363: FILE: mm/memory.c:303:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#372: FILE: mm/memory.c:312:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#387: FILE: mm/memory.c:327:
+static int copy_pte_range(struct mm_struct *dst_mm,  struct mm_struct *src_mm,
+			   pmd_t *dst_pmd, pmd_t *src_pmd, struct vm_area_struct *vma,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#390: FILE: mm/memory.c:330:
+	pte_t * src_pte, * dst_pte;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#390: FILE: mm/memory.c:330:
+	pte_t * src_pte, * dst_pte;
 	                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#398: FILE: mm/memory.c:338:
+^Isrc_pte = pte_offset_map_nested(src_pmd, addr);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#399: FILE: mm/memory.c:339:
+^Ifor (; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#400: FILE: mm/memory.c:340:
+^I     addr < end; $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#416: FILE: mm/memory.c:354:
+static int copy_pmd_range(struct mm_struct *dst_mm,  struct mm_struct *src_mm,
+			   pgd_t *dst_pgd, pgd_t *src_pgd, struct vm_area_struct *vma,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#427: FILE: mm/memory.c:365:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#430: FILE: mm/memory.c:368:
+^I^Iif (next > end) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#431: FILE: mm/memory.c:369:
+^I^I^Inext = end; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#434: FILE: mm/memory.c:372:
+^I^Iif (pmd_bad(*src_pmd)) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#438: FILE: mm/memory.c:376:
+^I^I}^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#451: FILE: mm/memory.c:385:
+static int copy_pgd_range(struct mm_struct *dst_mm,  struct mm_struct *src_mm,
+			   pml4_t *dst, pml4_t *src, struct vm_area_struct *vma,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#465: FILE: mm/memory.c:399:
+^I^Iif (next > end) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#471: FILE: mm/memory.c:403:
+^I^Iif (pgd_bad(*src_pgd)) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#479: FILE: mm/memory.c:408:
+^I^Ierr = copy_pmd_range(dst_mm, src_mm, dst_pgd, src_pgd, vma, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#568: FILE: mm/memory.c:426:
+^Istart = vma->vm_start; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#569: FILE: mm/memory.c:427:
+^Isrc_pml4 = pml4_offset(src, start); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#573: FILE: mm/memory.c:431:
+^Iaddr = start; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#575: FILE: mm/memory.c:433:
+^Ifor (i = pml4_index(addr); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#576: FILE: mm/memory.c:434:
+^I     i <= pml4_index(end-1); $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#576: FILE: mm/memory.c:434:
+	     i <= pml4_index(end-1); 
 	                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#577: FILE: mm/memory.c:435:
+^I     i++, addr = next, src_pml4++, dst_pml4++) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#579: FILE: mm/memory.c:437:
+^I^Iif (next > end || next <= addr) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#581: FILE: mm/memory.c:439:
+^I^Iif (pml4_none(*src_pml4)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#582: FILE: mm/memory.c:440:
+^I^I^Icontinue; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#583: FILE: mm/memory.c:441:
+^I^Iif (pml4_bad(*src_pml4)) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#584: FILE: mm/memory.c:442:
+^I^I^Ipml4_ERROR(*src_pml4); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#586: FILE: mm/memory.c:444:
+^I^I^Icontinue; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#587: FILE: mm/memory.c:445:
+^I^I}^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#588: FILE: mm/memory.c:446:
+^I^Ierr = copy_pgd_range(dst, src, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#589: FILE: mm/memory.c:447:
+^I^I^I^I     dst_pml4, src_pml4, vma, addr, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#590: FILE: mm/memory.c:448:
+^I^I^I^I     next); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#591: FILE: mm/memory.c:449:
+^I^Iif (err) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#592: FILE: mm/memory.c:450:
+^I^I^Ibreak; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#593: FILE: mm/memory.c:451:
+^I}^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#633: FILE: mm/memory.c:454:
+} $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#642: FILE: mm/memory.c:563:
+static void zap_pgd_range(struct mmu_gather *tlb,
+		pml4_t *pml4, unsigned long address,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#645: FILE: mm/memory.c:566:
+	pgd_t * pgd;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#657: FILE: mm/memory.c:578:
+^I^Iaddress = (address + PGDIR_SIZE) & PGDIR_MASK; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#680: FILE: mm/memory.c:594:
+^Ifor (i = pml4_index(address); i <= pml4_index(end-1); i++) { $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#680: FILE: mm/memory.c:594:
+	for (i = pml4_index(address); i <= pml4_index(end-1); i++) { 
 	                                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#682: FILE: mm/memory.c:596:
+^I^Iif (next <= address || next > end) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#683: FILE: mm/memory.c:597:
+^I^I^Inext = end; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#705: FILE: mm/memory.c:754:
+^Iif (pml4_bad(*pml4)) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#707: FILE: mm/memory.c:756:
+^I^Ipml4_clear(pml4); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#709: FILE: mm/memory.c:758:
+^I}^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#711: FILE: mm/memory.c:760:
+^I^Igoto out; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#731: FILE: mm/memory.c:825:
+^Iif (pml4_bad(*pml4)) { $

WARNING:TYPO_SPELLING: 'appropiate' may be misspelled - perhaps 'appropriate'?
#753: FILE: mm/memory.c:876:
+			/* AK: BUG_ON would be more appropiate for the
 			                            ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#754: FILE: mm/memory.c:877:
+			/* AK: BUG_ON would be more appropiate for the
+			   _none checks below. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#754: FILE: mm/memory.c:877:
+			   _none checks below. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#774: FILE: mm/memory.c:1022:
+static inline int zeromap_pgd_range(struct mm_struct *mm, pgd_t * pgd, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#774: FILE: mm/memory.c:1022:
+static inline int zeromap_pgd_range(struct mm_struct *mm, pgd_t * pgd, 

ERROR:CODE_INDENT: code indent should use tabs where possible
#776: FILE: mm/memory.c:1024:
+                                    unsigned long size, pgprot_t prot)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#776: FILE: mm/memory.c:1024:
+                                    unsigned long size, pgprot_t prot)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#784: FILE: mm/memory.c:1032:
+		pmd_t * pmd = pmd_alloc(mm, pgd, base + address);

WARNING:LINE_SPACING: Missing a blank line after declarations
#785: FILE: mm/memory.c:1033:
+		pmd_t * pmd = pmd_alloc(mm, pgd, base + address);
+		if (!pgd)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#810: FILE: mm/memory.c:1054:
+	BUG_ON(address >= end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#811: FILE: mm/memory.c:1055:
+	BUG_ON(end > vma->vm_end);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#816: FILE: mm/memory.c:1058:
+^Ifor (i = pml4_index(address); i <= pml4_index(end-1); i++) { $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#816: FILE: mm/memory.c:1058:
+	for (i = pml4_index(address); i <= pml4_index(end-1); i++) { 
 	                                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#824: FILE: mm/memory.c:1064:
+^I^Iif (next <= beg || next > end) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#844: FILE: mm/memory.c:1085:
+static inline void $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#845: FILE: mm/memory.c:1086:
+remap_pte_range(pte_t * pte, unsigned long address, unsigned long size,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#856: FILE: mm/memory.c:1105:
+static inline int $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#857: FILE: mm/memory.c:1106:
+remap_pmd_range(struct mm_struct *mm, pmd_t * pmd, unsigned long address, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#857: FILE: mm/memory.c:1106:
+remap_pmd_range(struct mm_struct *mm, pmd_t * pmd, unsigned long address, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#873: FILE: mm/memory.c:1121:
+^I^Iremap_pte_range(pte, base + address, end - address, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#882: FILE: mm/memory.c:1130:
+static inline int remap_pgd_range(struct mm_struct *mm, pgd_t * pgd, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#882: FILE: mm/memory.c:1130:
+static inline int remap_pgd_range(struct mm_struct *mm, pgd_t * pgd, 

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#893: FILE: mm/memory.c:1141:
+		pmd_t *pmd = pmd_alloc(mm, pgd, base+address);
 		                                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#894: FILE: mm/memory.c:1142:
+		pmd_t *pmd = pmd_alloc(mm, pgd, base+address);
+		if (!pmd)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#896: FILE: mm/memory.c:1144:
+^I^Iremap_pmd_range(mm, pmd, base + address, end - address, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#906: FILE: mm/memory.c:1153:
+int remap_pfn_range(struct vm_area_struct *vma, unsigned long from, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#907: FILE: mm/memory.c:1154:
+^I^I    unsigned long pfn, unsigned long size, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#933: FILE: mm/memory.c:1182:
+^Ifor (i = pml4_index(beg); i <= pml4_index(end-1); i++) { $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#933: FILE: mm/memory.c:1182:
+	for (i = pml4_index(beg); i <= pml4_index(end-1); i++) { 
 	                                             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#943: FILE: mm/memory.c:1190:
+^I^Ierror = remap_pgd_range(mm, pgd, from, end - from, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#988: FILE: mm/memory.c:1917:
+^I^Igoto oom; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#997: FILE: mm/memory.c:1926:
+ oom: $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1066: FILE: mm/mempolicy.c:245:
+^I^Ipml4 = pml4_offset(mm, addr); $

WARNING:LINE_SPACING: Missing a blank line after declarations
#1066: FILE: mm/mempolicy.c:245:
+		pml4_t *pml4;
+		pml4 = pml4_offset(mm, addr); 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1067: FILE: mm/mempolicy.c:246:
+^I^Iif (pml4_none(*pml4)) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1068: FILE: mm/mempolicy.c:247:
+^I^I^Iunsigned long next = (addr + PML4_SIZE) & PML4_MASK; $

WARNING:LINE_SPACING: Missing a blank line after declarations
#1069: FILE: mm/mempolicy.c:248:
+			unsigned long next = (addr + PML4_SIZE) & PML4_MASK; 
+			if (next > addr)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1073: FILE: mm/mempolicy.c:252:
+^I^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1083: FILE: mm/mempolicy.c:296:
+^I^I^Ierr = verify_pages(vma->vm_mm, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1117: FILE: mm/mmap.c:1500:
+^I^I^Iif (first < prev->vm_end) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1139: FILE: mm/mmap.c:1510:
+^Iif (start_pml4_index == 0 && start_pgd_index < FIRST_USER_PGD_NR) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1143: FILE: mm/mmap.c:1514:
+^Iif (pml4_index(last) > start_pml4_index || $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1155: FILE: mm/mmap.c:1846:
+^Iclear_page_range(tlb, FIRST_USER_PGD_NR * PGDIR_SIZE, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1169: FILE: mm/mprotect.c:92:
+change_pgd_range(pml4_t *pml4, unsigned long address,
+		unsigned long size, pgprot_t newprot)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1171: FILE: mm/mprotect.c:94:
+	pgd_t * pgd;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1197: FILE: mm/mprotect.c:118:
+^Ipml4_t *pml4; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1212: FILE: mm/mprotect.c:127:
+^Ifor (i = pml4_index(start); i <= pml4_index(end-1); i++) { $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1212: FILE: mm/mprotect.c:127:
+	for (i = pml4_index(start); i <= pml4_index(end-1); i++) { 
 	                                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1238: FILE: mm/mremap.c:34:
+^I^Igoto end;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1256: FILE: mm/mremap.c:72:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1265: FILE: mm/mremap.c:84:
+^Ipgd_t *pgd; $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1270: FILE: mm/mremap.c:88:
+	pgd = pgd_alloc(mm, pml4_offset(mm,addr), addr);
 	                                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1271: FILE: mm/mremap.c:89:
+^Iif (!pgd) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1286: FILE: mm/msync.c:97:
+^Iunsigned long address, unsigned long end, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1286: FILE: mm/msync.c:97:
+static inline int filemap_sync_pgd_range(pml4_t *pml4,
+	unsigned long address, unsigned long end, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1325: FILE: mm/msync.c:134:
+^Ipml4 = pml4_offset(vma->vm_mm, address); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1338: FILE: mm/msync.c:145:
+^Ifor (i = pml4_index(address); i <= pml4_index(end-1); i++) { $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1338: FILE: mm/msync.c:145:
+	for (i = pml4_index(address); i <= pml4_index(end-1); i++) { 
 	                                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1340: FILE: mm/msync.c:147:
+^I^Iif (next <= address || next > end) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1367: FILE: mm/rmap.c:277:
+^I^Igoto out_unlock; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1388: FILE: mm/rmap.c:525:
+^I^Igoto out_unlock; $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1423: FILE: mm/swapfile.c:490:
+        unsigned long address, unsigned long size, unsigned long offset,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1423: FILE: mm/swapfile.c:490:
+        unsigned long address, unsigned long size, unsigned long offset,$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1445: FILE: mm/swapfile.c:524:
+static unsigned long unuse_pml4(struct vm_area_struct * vma, pml4_t *pml4,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1446: FILE: mm/swapfile.c:525:
+static unsigned long unuse_pml4(struct vm_area_struct * vma, pml4_t *pml4,
+	unsigned long address, unsigned long size,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1449: FILE: mm/swapfile.c:528:
+	pgd_t * pgd;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1465: FILE: mm/swapfile.c:544:
+	BUG_ON (address >= end);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1465: FILE: mm/swapfile.c:544:
+	BUG_ON (address >= end);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1468: FILE: mm/swapfile.c:547:
+^I^I^I^I^I        offset, entry, page);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1468: FILE: mm/swapfile.c:547:
+		foundaddr = unuse_pgd(vma, pgd, address, end - address,
+					        offset, entry, page);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1499: FILE: mm/swapfile.c:576:
+^Ifor (i = pml4_index(start); i <= pml4_index(end-1); i++) { $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1499: FILE: mm/swapfile.c:576:
+	for (i = pml4_index(start); i <= pml4_index(end-1); i++) { 
 	                                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1509: FILE: mm/swapfile.c:583:
+^I^Istart = next; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1510: FILE: mm/swapfile.c:584:
+^I^Ii++; $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1564: FILE: mm/vmalloc.c:162:
+static int map_area_pgd(pgd_t *pgd, unsigned long address,
+			       unsigned long end, pgprot_t prot,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1569: FILE: mm/vmalloc.c:167:
+		pmd_t *pmd = pmd_alloc(&init_mm, pgd, address);
+		if (!pmd)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1597: FILE: mm/vmalloc.c:188:
+^Ifor (i = pml4_index(address); i <= pml4_index(end-1); i++) { $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1597: FILE: mm/vmalloc.c:188:
+	for (i = pml4_index(address); i <= pml4_index(end-1); i++) { 
 	                                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1603: FILE: mm/vmalloc.c:194:
+^I        pml4++;$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1624: FILE: mm/vmalloc.c:210:
+	for (i = pml4_index(address); i <= pml4_index(end-1); i++) {
 	                                                 ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1626: FILE: mm/vmalloc.c:212:
+		pgd_t *pgd = pgd_alloc_k(&init_mm, pml4, address);
+		if (!pgd) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000237864.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 133 errors, 23 warnings, 21 checks, 1501 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000237864.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
