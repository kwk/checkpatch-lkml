WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
the required position/timing info. This kind of estimation is more conservative

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#89: 
# diffprofile oprofile.50.stateful oprofile.50.stateless

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#147: 
# diffprofile oprofile.50.stateful2 oprofile.50.stateless2

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#235: FILE: mm/readahead.c:1368:
+ * ^Il: the number of pages read by the stream$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#237: FILE: mm/readahead.c:1370:
+ * ^IL: the number of pages pushed into inactive_list in the mean time$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#239: FILE: mm/readahead.c:1372:
+ * ^If(l01) <= L0$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#240: FILE: mm/readahead.c:1373:
+ * ^If(l11 + l12) = L1$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#241: FILE: mm/readahead.c:1374:
+ * ^If(l21 + l22) = L2$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#242: FILE: mm/readahead.c:1375:
+ * ^I...$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#243: FILE: mm/readahead.c:1376:
+ * ^If(l01 + l11 + ...) <= Sum(L0 + L1 + ...)$

CHECK:BIT_MACRO: Prefer using the BIT macro
#251: FILE: mm/readahead.c:1384:
+#define PAGE_REFCNT_1           (1 << PG_referenced)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#252: FILE: mm/readahead.c:1385:
+#define PAGE_REFCNT_2           (1 << PG_active)

ERROR:CODE_INDENT: code indent should use tabs where possible
#267: FILE: mm/readahead.c:1400:
+        return page->flags & PAGE_REFCNT_MASK;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: mm/readahead.c:1400:
+        return page->flags & PAGE_REFCNT_MASK;$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#292: FILE: mm/readahead.c:1425:
+	switch (page_refcnt(page)) {
+		case 0:
[...]
+		case PAGE_REFCNT_1:
[...]
+		case PAGE_REFCNT_2:
[...]
+		case PAGE_REFCNT_3:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#311: FILE: mm/readahead.c:1444:
+static int count_cache_hit(struct address_space *mapping,
+				pgoff_t first_index, pgoff_t last_index)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#343: FILE: mm/readahead.c:1476:
+static unsigned long query_page_cache_segment(struct address_space *mapping,
+				struct file_ra_state *ra,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#359: FILE: mm/readahead.c:1492:
+	index = radix_tree_scan_hole_backward(&mapping->page_tree,
+							offset, ra_max);

WARNING:LINE_SPACING: Missing a blank line after declarations
#393: FILE: mm/readahead.c:1526:
+		struct radix_tree_node *node;
+		node = radix_tree_cache_lookup_node(&mapping->page_tree,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: mm/readahead.c:1527:
+		node = radix_tree_cache_lookup_node(&mapping->page_tree,
+						&cache, offset - count, 1);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'query_page_cache_segment', this function's name, in a string
#411: FILE: mm/readahead.c:1544:
+	ddprintk("query_page_cache_segment: "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#412: FILE: mm/readahead.c:1545:
+	ddprintk("query_page_cache_segment: "
+			"ino=%lu, idx=%lu, count=%lu, remain=%lu\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#422: FILE: mm/readahead.c:1555:
+static inline pgoff_t find_segtail_backward(struct address_space *mapping,
+					pgoff_t index, unsigned long max_scan)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#437: FILE: mm/readahead.c:1570:
+		page = radix_tree_cache_lookup(&mapping->page_tree,
+							&cache, --index);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#452: FILE: mm/readahead.c:1585:
+static inline pgoff_t find_segtail(struct address_space *mapping,
+					pgoff_t index, unsigned long max_scan)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#480: FILE: mm/readahead.c:1613:
+static inline int adjust_rala_aggressive(unsigned long ra_max,
+				unsigned long *ra_size, unsigned long *la_size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#502: FILE: mm/readahead.c:1635:
+try_context_based_readahead(struct address_space *mapping,
+			struct file_ra_state *ra, struct page *prev_page,

CHECK:BRACES: braces {} should be used on all arms of this statement
#516: FILE: mm/readahead.c:1649:
+	if (page) {
[...]
+	} else if (prev_page || find_page(mapping, index - 1)) {
[...]
+	} else if (readahead_hit_rate > 1) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#524: FILE: mm/readahead.c:1657:
+		ra_index = find_segtail_backward(mapping, index,
+						readahead_hit_rate + ra_min);

CHECK:BRACES: Unbalanced braces around else statement
#529: FILE: mm/readahead.c:1662:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#533: FILE: mm/readahead.c:1666:
+	ra_size = query_page_cache_segment(mapping, ra, &remain_pages,
+							index, ra_min, ra_max);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#537: FILE: mm/readahead.c:1670:
+	if (page && remain_pages <= la_size &&
+			remain_pages < index && la_size > 1) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000093362.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 14 warnings, 16 checks, 349 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000093362.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
