WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#98: FILE: include/linux/tty_driver.h:122:
+#define SET_TTY_OWNER(driver)	\
+	do { (driver)->owner = THIS_MODULE; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#100: FILE: include/linux/tty_driver.h:124:
+#define SET_LDISC_OWNER(ldisc)	\
+	do { (ldisc)->owner = THIS_MODULE; } while (0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#204: FILE: drivers/char/tty_io.c:235:
+		int uc;
+		__MOD_DEC_USE_COUNT(ldisc->owner);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ldisc->owner
#205: FILE: drivers/char/tty_io.c:236:
+		uc = atomic_read(&(ldisc->owner)->uc.usecount);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#207: FILE: drivers/char/tty_io.c:238:
+			printk("tty_ldisc_put: count=%d.  This is not good\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'tty_ldisc_put', this function's name, in a string
#207: FILE: drivers/char/tty_io.c:238:
+			printk("tty_ldisc_put: count=%d.  This is not good\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#208: FILE: drivers/char/tty_io.c:239:
+			printk("tty_ldisc_put: count=%d.  This is not good\n",
+				atomic_read(&(ldisc->owner)->uc.usecount));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ldisc->owner
#208: FILE: drivers/char/tty_io.c:239:
+				atomic_read(&(ldisc->owner)->uc.usecount));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ldisc < N_TTY'
#230: FILE: drivers/char/tty_io.c:339:
+	if ((ldisc < N_TTY) || (ldisc >= NR_LDISCS)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ldisc >= NR_LDISCS'
#230: FILE: drivers/char/tty_io.c:339:
+	if ((ldisc < N_TTY) || (ldisc >= NR_LDISCS)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#457: FILE: drivers/char/serial.c:3151:
+^I^ITTY_MOD_DEC;^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#513: FILE: drivers/char/serial.c:5508:
+	if ((e1 = tty_unregister_driver(&serial_driver))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#517: FILE: drivers/char/serial.c:5511:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#519: FILE: drivers/char/serial.c:5513:
+	if ((e2 = tty_unregister_driver(&callout_driver))) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#522: FILE: drivers/char/serial.c:5516:
+		BUG();

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#558: FILE: drivers/net/ppp_async.c:311:
+	owner: THIS_MODULE,
 	     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#558: FILE: drivers/net/ppp_async.c:311:
+	owner: THIS_MODULE,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000544034.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 8 warnings, 5 checks, 426 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000544034.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
