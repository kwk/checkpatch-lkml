WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
On Wed, Sep 08, 2004 at 11:09:47AM +0100, Luke Kenneth Casson Leighton wrote:

WARNING:PATCH_PREFIX: patch prefix 'fs' exists, appears to be a -p0 patch

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#60: FILE: proc/base.c:209:
+extern int proc_task_dentry_lookup(struct task_struct *task, struct dentry **dentry, struct vfsmount **mnt);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PATCH_PREFIX: patch prefix 'fs' exists, appears to be a -p0 patch

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#93: FILE: proc/root.c:150:
+extern int proc_task_dentry_lookup(struct task_struct *task, struct dentry **dentry, struct vfsmount **mnt);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#93: FILE: proc/root.c:150:
+extern int proc_task_dentry_lookup(struct task_struct *task, struct dentry **dentry, struct vfsmount **mnt);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'unambigous' may be misspelled - perhaps 'unambiguous'?
#126: FILE: linux/netfilter_ipv4/ipt_owner.h:22:
+	/* it's the only simple (and unambigous) way to reference a program */
 	                             ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: linux/netfilter_ipv4/ipt_owner.h:24:
+    unsigned long ino;$

WARNING:PATCH_PREFIX: patch prefix 'net' exists, appears to be a -p0 patch

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#156: FILE: ipv4/netfilter/ipt_owner.c:28:
+extern int proc_task_dentry_lookup(struct task_struct *task, struct dentry **dentry, struct vfsmount **mnt);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#156: FILE: ipv4/netfilter/ipt_owner.c:28:
+extern int proc_task_dentry_lookup(struct task_struct *task, struct dentry **dentry, struct vfsmount **mnt);

ERROR:CODE_INDENT: code indent should use tabs where possible
#159: FILE: ipv4/netfilter/ipt_owner.c:31:
+^I^I                  const char *devname, unsigned long i_num)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#159: FILE: ipv4/netfilter/ipt_owner.c:31:
+static int proc_exe_check(struct task_struct *task,
+		                  const char *devname, unsigned long i_num)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: ipv4/netfilter/ipt_owner.c:33:
+    int result = -ENOENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: ipv4/netfilter/ipt_owner.c:35:
+    struct dentry *dentry;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#171: FILE: ipv4/netfilter/ipt_owner.c:43:
+	if (dentry->d_inode->i_ino == i_num &&
+			strncmp(mnt->mnt_devname, devname, IPT_DEVNAME_SZ) == 0)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#176: FILE: ipv4/netfilter/ipt_owner.c:48:
+#if 0

ERROR:CODE_INDENT: code indent should use tabs where possible
#178: FILE: ipv4/netfilter/ipt_owner.c:50:
+^I^I                  const char *devname, unsigned long i_num)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#178: FILE: ipv4/netfilter/ipt_owner.c:50:
+static int proc_exe_check(struct task_struct *task,
+		                  const char *devname, unsigned long i_num)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: ipv4/netfilter/ipt_owner.c:52:
+    struct vm_area_struct * vma;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#180: FILE: ipv4/netfilter/ipt_owner.c:52:
+    struct vm_area_struct * vma;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#181: FILE: ipv4/netfilter/ipt_owner.c:53:
+    int result = -ENOENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: ipv4/netfilter/ipt_owner.c:54:
+    struct mm_struct * mm = get_task_mm(task);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#182: FILE: ipv4/netfilter/ipt_owner.c:54:
+    struct mm_struct * mm = get_task_mm(task);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: ipv4/netfilter/ipt_owner.c:56:
+    if (!mm)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#185: FILE: ipv4/netfilter/ipt_owner.c:57:
+        goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: ipv4/netfilter/ipt_owner.c:57:
+        goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: ipv4/netfilter/ipt_owner.c:58:
+    down_read(&mm->mmap_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: ipv4/netfilter/ipt_owner.c:59:
+    vma = mm->mmap;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: ipv4/netfilter/ipt_owner.c:60:
+    while (vma) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#189: FILE: ipv4/netfilter/ipt_owner.c:61:
+        if ((vma->vm_flags & VM_EXECUTABLE) &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: ipv4/netfilter/ipt_owner.c:61:
+        if ((vma->vm_flags & VM_EXECUTABLE) &&$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#189: FILE: ipv4/netfilter/ipt_owner.c:61:
+        if ((vma->vm_flags & VM_EXECUTABLE) &&
[...]
+            struct vfsmount *mnt = mntget(vma->vm_file->f_vfsmnt);

ERROR:CODE_INDENT: code indent should use tabs where possible
#190: FILE: ipv4/netfilter/ipt_owner.c:62:
+            vma->vm_file) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: ipv4/netfilter/ipt_owner.c:62:
+            vma->vm_file) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#191: FILE: ipv4/netfilter/ipt_owner.c:63:
+            struct vfsmount *mnt = mntget(vma->vm_file->f_vfsmnt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: ipv4/netfilter/ipt_owner.c:63:
+            struct vfsmount *mnt = mntget(vma->vm_file->f_vfsmnt);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#192: FILE: ipv4/netfilter/ipt_owner.c:64:
+            struct dentry *dentry = dget(vma->vm_file->f_dentry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: ipv4/netfilter/ipt_owner.c:64:
+            struct dentry *dentry = dget(vma->vm_file->f_dentry);$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#195: FILE: ipv4/netfilter/ipt_owner.c:67:
+			if (dentry->d_inode->i_ino == i_num &&
+					strncmp(mnt->mnt_devname, devname, IPT_DEVNAME_SZ) == 0)
+				{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 40)
#195: FILE: ipv4/netfilter/ipt_owner.c:67:
+			if (dentry->d_inode->i_ino == i_num &&
[...]
+				{

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#196: FILE: ipv4/netfilter/ipt_owner.c:68:
+			if (dentry->d_inode->i_ino == i_num &&
+					strncmp(mnt->mnt_devname, devname, IPT_DEVNAME_SZ) == 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#201: FILE: ipv4/netfilter/ipt_owner.c:73:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: ipv4/netfilter/ipt_owner.c:73:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: ipv4/netfilter/ipt_owner.c:74:
+        vma = vma->vm_next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: ipv4/netfilter/ipt_owner.c:74:
+        vma = vma->vm_next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: ipv4/netfilter/ipt_owner.c:75:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: ipv4/netfilter/ipt_owner.c:76:
+    up_read(&mm->mmap_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: ipv4/netfilter/ipt_owner.c:77:
+    mmput(mm);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: ipv4/netfilter/ipt_owner.c:79:
+    return result;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#217: FILE: ipv4/netfilter/ipt_owner.c:89:
+	/*
+	struct inode *inode;

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#222: FILE: ipv4/netfilter/ipt_owner.c:94:
+	int i;
+	read_lock(&tasklist_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#242: FILE: ipv4/netfilter/ipt_owner.c:114:
+	do_each_thread(g, p) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#248: FILE: ipv4/netfilter/ipt_owner.c:120:
+		if(files) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#250: FILE: ipv4/netfilter/ipt_owner.c:122:
+			for (i=0; i < files->max_fds; i++) {
 			      ^

ERROR:SPACING: space required before the open parenthesis '('
#274: FILE: ipv4/netfilter/ipt_owner.c:282:
+	if(info->match & IPT_OWNER_INO) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000252046.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 37 warnings, 5 checks, 198 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000252046.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
