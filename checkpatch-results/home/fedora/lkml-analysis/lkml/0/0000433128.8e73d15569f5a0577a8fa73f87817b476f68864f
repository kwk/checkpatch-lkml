WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#44: 
# This changeset provides a partial port of Ben LaHaise's asynchronous

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
# I/O patch for 2.4 kernel to 2.5. The port conforms to the aio API

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#46: 
# included in 2.5.32 and uses the design, data structures and functions

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#47: 
# of the aio-20020619.diff.txt patch.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
# What this patch does

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#49: 
# - implements aio read/write for raw devices

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#50: 
# - provides the kvec data structure and helper functions

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#51: 
# - conforms to the kiocb data structure provided in the 2.5.32 aio API

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#52: 
# What this patch doesn't do

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#53: 
# - support read/write for regular files (including those opened with

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#54: 
# O_DIRECT), pipes, sockets.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#55: 
# - use the dio related functions providing O_DIRECT support.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#56: 
# - change any of the synchronous read/write functions.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#57: 
# - allow large transfers (> 128 KB) which were done in 2.4 using the

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#58: 
# generic_aio_next_chunk function and kiocb->u task queue.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#59: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#60: 
# The intent of providing this patch is to allow a performance

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#61: 
# comparison of the aio design provided in 2.4 with any forthcoming

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#62: 
# design in 2.5. Hopefully it will lead to an estimate of the

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#63: 
# performance impact of keeping the async and sync I/O paths separate.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#64: 
# To have a fair comparison, its probably necessary for this code to

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#65: 
# use bios directly rather than buffer heads, allow large I/O's etc.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#66: 
# The comparison will also be more complete if the missing 2.4

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#67: 
# functionality (regular files, pipes....) is ported over too.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#68: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#69: 
# It is NOT intended to fork aio kernel code development or to suggest

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#70: 
# an alternate design for 2.5 aio kernel support.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#71: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#72: 
# Comments, suggestion for changes welcome.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#73: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#74: 
# - Shailabh Nagar (nagar@watson.ibm.com)

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#106: 
# This is a BitKeeper generated patch for the following project:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#107: 
# Project Name: Linux Kernel 2.5

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#108: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#108: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#109: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#110: 
#	           ChangeSet	1.2     -> 1.4    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#111: 
#	 include/linux/aio.h	1.1     -> 1.3    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#112: 
#	            Makefile	1.1     -> 1.2    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#113: 
#	         fs/buffer.c	1.1     -> 1.3    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#114: 
#	include/linux/types.h	1.1     -> 1.2    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#115: 
#	         mm/memory.c	1.1     -> 1.3    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#116: 
#	  include/linux/fs.h	1.1     -> 1.3    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#117: 
#	            fs/aio.c	1.1     -> 1.3    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#118: 
#	  drivers/char/raw.c	1.1     -> 1.3    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#119: 
#	               (new)	        -> 1.2     include/linux/kiovec.h

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#120: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#121: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#122: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#123: 
# 02/09/11	nagar@elinux04.watson.ibm.com	1.3

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#124: 
# This changeset provides a partial port of Ben LaHaise's asynchronous 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#125: 
# I/O patch for 2.4 kernel to 2.5. The port conforms to the aio API 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#126: 
# included in 2.5.32 and uses the design, data structures and functions

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#127: 
# of the aio-20020619.diff.txt patch. 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#128: 
# What this patch does

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#129: 
# - implements aio read/write for raw devices

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#130: 
# - provides the kvec data structure and helper functions

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#131: 
# - conforms to the kiocb data structure provided in the 2.5.32 aio API

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#132: 
# What this patch doesn't do

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#133: 
# - support read/write for regular files (including those opened with 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#134: 
# O_DIRECT), pipes, sockets. 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#135: 
# - use the dio related functions providing O_DIRECT support. 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#136: 
# - change any of the synchronous read/write functions. 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#137: 
# - allow large transfers (> 128 KB) which were done in 2.4 using the

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#138: 
# generic_aio_next_chunk function and kiocb->u task queue.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#139: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#140: 
# The intent of providing this patch is to allow a performance 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#141: 
# comparison of the aio design provided in 2.4 with any forthcoming 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#142: 
# design in 2.5. Hopefully it will lead to an estimate of the 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#143: 
# performance impact of keeping the async and sync I/O paths separate.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#144: 
# To have a fair comparison, its probably necessary for this code to 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#145: 
# use bios directly rather than buffer heads, allow large I/O's etc. 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#146: 
# The comparison will also be more complete if the missing 2.4 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#147: 
# functionality (regular files, pipes....) is ported over too. 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#148: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#149: 
# It is NOT intended to fork aio kernel code development or to suggest

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#150: 
# an alternate design for 2.5 aio kernel support. 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#151: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#152: 
# Comments, suggestion for changes welcome.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#153: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#154: 
# - Shailabh Nagar (nagar@watson.ibm.com)

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#155: 
#   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#156: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#157: 
# 02/09/11	nagar@elinux04.watson.ibm.com	1.4

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#158: 
# compilefixes

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#159: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#160: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#162: 
--- a/Makefile	Wed Sep 11 14:00:00 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#169: FILE: Makefile:4:
+EXTRAVERSION = -aioportraw
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#188: FILE: drivers/char/raw.c:242:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#189: FILE: drivers/char/raw.c:243:
+int	raw_kvec_rw(struct file *filp, int rw, kvec_cb_t cb, size_t size, loff_t pos)
    	                         ^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#192: FILE: drivers/char/raw.c:246:
+	unsigned	minor;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#196: FILE: drivers/char/raw.c:250:
+	unsigned	sector_size, sector_bits, sector_mask;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#197: FILE: drivers/char/raw.c:251:
+	unsigned	max_sectors;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#198: FILE: drivers/char/raw.c:252:
+	unsigned	i;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxW)
#204: FILE: drivers/char/raw.c:258:
+	sector_mask = sector_size- 1;
 	                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: drivers/char/raw.c:260:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#208: FILE: drivers/char/raw.c:262:
+		limit = (((loff_t) blk_size[major(dev)][minor(dev)]) << BLOCK_SIZE_BITS) >> sector_bits;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#208: FILE: drivers/char/raw.c:262:
+		limit = (((loff_t) blk_size[major(dev)][minor(dev)]) << BLOCK_SIZE_BITS) >> sector_bits;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'raw_kvec_rw', this function's name, in a string
#215: FILE: drivers/char/raw.c:269:
+		pr_debug("raw_kvec_rw: %Lu > %lu, %d\n", pos >> sector_bits, limit, sector_bits);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#215: FILE: drivers/char/raw.c:269:
+		pr_debug("raw_kvec_rw: %Lu > %lu, %d\n", pos >> sector_bits, limit, sector_bits);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'raw_kvec_rw', this function's name, in a string
#223: FILE: drivers/char/raw.c:277:
+		pr_debug("raw_kvec_rw: %Lu > %lu, %d\n", pos >> sector_bits, limit, sector_bits);

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#223: FILE: drivers/char/raw.c:277:
+		pr_debug("raw_kvec_rw: %Lu > %lu, %d\n", pos >> sector_bits, limit, sector_bits);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pos < 0'
#228: FILE: drivers/char/raw.c:282:
+	if ((pos < 0) || (pos & sector_mask) || (size & sector_mask)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#229: FILE: drivers/char/raw.c:283:
+		pr_debug("pos(%Ld)/size(%lu) wrong(%d)\n", pos, size, sector_mask);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#234: FILE: drivers/char/raw.c:288:
+	for (i=0; i<cb.vec->nr; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#234: FILE: drivers/char/raw.c:288:
+	for (i=0; i<cb.vec->nr; i++)
 	           ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#256: FILE: drivers/char/raw.c:310:
+		printk(KERN_DEBUG "raw_kvec_rw: ret is %d\n", err);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'raw_kvec_rw', this function's name, in a string
#256: FILE: drivers/char/raw.c:310:
+		printk(KERN_DEBUG "raw_kvec_rw: ret is %d\n", err);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#258: FILE: drivers/char/raw.c:312:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#259: FILE: drivers/char/raw.c:313:
+	
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#260: FILE: drivers/char/raw.c:314:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#261: FILE: drivers/char/raw.c:315:
+}
+int raw_kvec_read(struct file *file, kvec_cb_t cb, size_t size, loff_t pos)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#291: FILE: fs/aio.c:47:
+unsigned aio_max_size = 0x20000;        /* 128KB per chunk */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#292: FILE: fs/aio.c:48:
+unsigned aio_max_pinned;                /* set to mem/4 in aio_setup */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#305: FILE: fs/aio.c:68:
+
+

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#313: FILE: fs/aio.c:85:
+	aio_max_pinned = num_physpages/4;
 	                              ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#315: FILE: fs/aio.c:87:
+	printk(KERN_NOTICE "aio_setup: num_physpages = %u\n", aio_max_pinned);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#323: FILE: fs/aio.c:1124:
 
+

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#326: FILE: fs/aio.c:1127:
+	int (*kvec_op)(struct file *, kvec_cb_t, size_t, loff_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kvec_cb_t' should also have an identifier name
#326: FILE: fs/aio.c:1127:
+	int (*kvec_op)(struct file *, kvec_cb_t, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#326: FILE: fs/aio.c:1127:
+	int (*kvec_op)(struct file *, kvec_cb_t, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#326: FILE: fs/aio.c:1127:
+	int (*kvec_op)(struct file *, kvec_cb_t, size_t, loff_t);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#331: FILE: fs/aio.c:1132:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#331: FILE: fs/aio.c:1132:
+
+	

CHECK:SPACING: No space is necessary after a cast
#335: FILE: fs/aio.c:1136:
+	cb.vec = map_user_kvec(rw, (unsigned long) buf, size);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#344: FILE: fs/aio.c:1145:
+//		/* If the first chunk was successful, we have to run
+//		 * the callback to attempt the rest of the io.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#345: FILE: fs/aio.c:1146:
+//		 */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#354: FILE: fs/aio.c:1155:
+}^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#358: FILE: fs/aio.c:1159:
+^Ireturn generic_aio_rw(READ, req, buf, size, pos);  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#363: FILE: fs/aio.c:1164:
+^Ireturn generic_aio_rw(WRITE, req, buf, size, pos);  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#365: FILE: fs/aio.c:1166:
+^I$

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#373: FILE: fs/aio.c:1174:
+#if 0

ERROR:TRAILING_WHITESPACE: trailing whitespace
#379: FILE: fs/aio.c:1180:
+^I^I/* We may be in irq context, so queue processing in $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#404: FILE: fs/aio.c:1205:
+
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#410: FILE: fs/aio.c:1211:
+EXPORT_SYMBOL_GPL(generic_file_aio_write);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#419: FILE: fs/buffer.c:2590:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#437: FILE: fs/buffer.c:2608:
+		for (nr=0; nr < brw_cb->nr; nr++) {
 		       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#439: FILE: fs/buffer.c:2610:
+			struct buffer_head *bh = brw_cb->bh[nr];
+			if (!err && buffer_uptodate(bh))

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#455: FILE: fs/buffer.c:2626:
+static void end_buffer_io_kiobuf_async(struct buffer_head *bh, int uptodate)
                                                                    ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#458: FILE: fs/buffer.c:2629:
+^I$

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#459: FILE: fs/buffer.c:2630:
+	if (uptodate)
 	    ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#461: FILE: fs/buffer.c:2632:
+^Ielse $

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#470: FILE: fs/buffer.c:2641:
+int brw_kvec_async(int rw, kvec_cb_t cb, struct block_device *bdev, unsigned blocks, unsigned long blknr, int sector_shift)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#470: FILE: fs/buffer.c:2641:
+int brw_kvec_async(int rw, kvec_cb_t cb, struct block_device *bdev, unsigned blocks, unsigned long blknr, int sector_shift)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#476: FILE: fs/buffer.c:2647:
+	unsigned	sector_size = 1 << sector_shift;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#482: FILE: fs/buffer.c:2653:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#484: FILE: fs/buffer.c:2655:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#485: FILE: fs/buffer.c:2656:
+^I * First, do some alignment and validity checks $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#488: FILE: fs/buffer.c:2659:
+	for (veclet=vec->veclet, i=0; i < vec->nr; i++,veclet++) {
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#488: FILE: fs/buffer.c:2659:
+	for (veclet=vec->veclet, i=0; i < vec->nr; i++,veclet++) {
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#488: FILE: fs/buffer.c:2659:
+	for (veclet=vec->veclet, i=0; i < vec->nr; i++,veclet++) {
 	                                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#490: FILE: fs/buffer.c:2661:
+		if ((veclet->offset & (sector_size-1)) ||
 		                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#491: FILE: fs/buffer.c:2662:
+		    (veclet->length & (sector_size-1))) {
 		                                  ^

WARNING:LONG_LINE: line length of 155 exceeds 100 columns
#492: FILE: fs/buffer.c:2663:
+			printk("brw_kiovec_async: tuple[%d]->offset=0x%x length=0x%x sector_size: 0x%x\n", i, veclet->offset, veclet->length, sector_size);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#492: FILE: fs/buffer.c:2663:
+			printk("brw_kiovec_async: tuple[%d]->offset=0x%x length=0x%x sector_size: 0x%x\n", i, veclet->offset, veclet->length, sector_size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#498: FILE: fs/buffer.c:2669:
+		BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#500: FILE: fs/buffer.c:2671:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#501: FILE: fs/buffer.c:2672:
+^I * OK to walk down the iovec doing page IO on each page we find. $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#506: FILE: fs/buffer.c:2677:
+		printk("brw_kiovec_async: !i\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#519: FILE: fs/buffer.c:2690:
+	for (i=0, veclet=vec->veclet; i<vec->nr; i++,veclet++) {
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#519: FILE: fs/buffer.c:2690:
+	for (i=0, veclet=vec->veclet; i<vec->nr; i++,veclet++) {
 	                ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#519: FILE: fs/buffer.c:2690:
+	for (i=0, veclet=vec->veclet; i<vec->nr; i++,veclet++) {
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#519: FILE: fs/buffer.c:2690:
+	for (i=0, veclet=vec->veclet; i<vec->nr; i++,veclet++) {
 	                                            ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#521: FILE: fs/buffer.c:2692:
+		unsigned offset = veclet->offset;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#522: FILE: fs/buffer.c:2693:
+		unsigned length = veclet->length;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#525: FILE: fs/buffer.c:2696:
+			BUG();

WARNING:LINE_SPACING: Missing a blank line after declarations
#529: FILE: fs/buffer.c:2700:
+			struct buffer_head *tmp;
+			tmp = kmem_cache_alloc(bh_cachep, GFP_NOIO);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#563: FILE: fs/buffer.c:2734:
+^I} /* End of page loop */^I^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#566: FILE: fs/buffer.c:2737:
+	atomic_set(&brw_cb->io_count, brw_cb->nr+1);
 	                                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#568: FILE: fs/buffer.c:2739:
+^Ifor (i=0; i<brw_cb->nr; i++) $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#568: FILE: fs/buffer.c:2739:
+	for (i=0; i<brw_cb->nr; i++) 
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#568: FILE: fs/buffer.c:2739:
+	for (i=0; i<brw_cb->nr; i++) 
 	           ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#578: FILE: fs/buffer.c:2749:
+		/* We got an error allocating the bh'es.  Just free the current
+		   buffer_heads and exit. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#578: FILE: fs/buffer.c:2749:
+		   buffer_heads and exit. */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#579: FILE: fs/buffer.c:2750:
+		for (i=0; i<brw_cb->nr; i++)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#579: FILE: fs/buffer.c:2750:
+		for (i=0; i<brw_cb->nr; i++)
 		           ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#602: FILE: include/linux/aio.h:125:
+extern ssize_t generic_file_aio_read(struct kiocb *req, char *buf, size_t size, loff_t pos);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#603: FILE: include/linux/aio.h:126:
+extern ssize_t generic_file_aio_write(struct kiocb *req, char *buf, size_t size, loff_t pos);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#626: FILE: include/linux/fs.h:772:
+	int (*kvec_read)(struct file *, kvec_cb_t, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kvec_cb_t' should also have an identifier name
#626: FILE: include/linux/fs.h:772:
+	int (*kvec_read)(struct file *, kvec_cb_t, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#626: FILE: include/linux/fs.h:772:
+	int (*kvec_read)(struct file *, kvec_cb_t, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#626: FILE: include/linux/fs.h:772:
+	int (*kvec_read)(struct file *, kvec_cb_t, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#627: FILE: include/linux/fs.h:773:
+	int (*kvec_write)(struct file *, kvec_cb_t, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kvec_cb_t' should also have an identifier name
#627: FILE: include/linux/fs.h:773:
+	int (*kvec_write)(struct file *, kvec_cb_t, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#627: FILE: include/linux/fs.h:773:
+	int (*kvec_write)(struct file *, kvec_cb_t, size_t, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#627: FILE: include/linux/fs.h:773:
+	int (*kvec_write)(struct file *, kvec_cb_t, size_t, loff_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#635: FILE: include/linux/fs.h:1258:
+extern int generic_file_kvec_read(struct file *file, kvec_cb_t cb, size_t size, loff_t pos);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#636: FILE: include/linux/fs.h:1259:
+extern int generic_file_kvec_write(struct file *file, kvec_cb_t cb, size_t size, loff_t pos);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#645: FILE: include/linux/kiovec.h:1:
+#ifndef __LINUX__KIOVEC_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#654: FILE: include/linux/kiovec.h:10:
+	unsigned	offset;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#655: FILE: include/linux/kiovec.h:11:
+	unsigned	length;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#659: FILE: include/linux/kiovec.h:15:
+	unsigned	max_nr;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#660: FILE: include/linux/kiovec.h:16:
+	unsigned	nr;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#685: FILE: include/linux/kiovec.h:41:
+extern struct kvec *FASTCALL(map_user_kvec(int rw, unsigned long va, size_t len));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#686: FILE: include/linux/kiovec.h:42:
+extern struct kvec *FASTCALL(mm_map_user_kvec(struct mm_struct *, int rw,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#686: FILE: include/linux/kiovec.h:42:
+extern struct kvec *FASTCALL(mm_map_user_kvec(struct mm_struct *, int rw,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#687: FILE: include/linux/kiovec.h:43:
+extern struct kvec *FASTCALL(mm_map_user_kvec(struct mm_struct *, int rw,
+				     unsigned long va, size_t len));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#688: FILE: include/linux/kiovec.h:44:
+extern void FASTCALL(unmap_kvec(struct kvec *, int dirtied));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kvec *' should also have an identifier name
#688: FILE: include/linux/kiovec.h:44:
+extern void FASTCALL(unmap_kvec(struct kvec *, int dirtied));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#689: FILE: include/linux/kiovec.h:45:
+extern void FASTCALL(free_kvec(struct kvec *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kvec *' should also have an identifier name
#689: FILE: include/linux/kiovec.h:45:
+extern void FASTCALL(free_kvec(struct kvec *));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#695: FILE: include/linux/kiovec.h:51:
+ *^Isize) in log2.  blknr is the starting sector offset on device $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#698: FILE: include/linux/kiovec.h:54:
+extern int brw_kvec_async(int rw, kvec_cb_t cb, struct block_device *bdev, $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#698: FILE: include/linux/kiovec.h:54:
+extern int brw_kvec_async(int rw, kvec_cb_t cb, struct block_device *bdev, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#699: FILE: include/linux/kiovec.h:55:
+^I^I^I  unsigned count, unsigned long blknr, $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#699: FILE: include/linux/kiovec.h:55:
+			  unsigned count, unsigned long blknr, 

CHECK:LINE_SPACING: Please don't use multiple blank lines
#702: FILE: include/linux/kiovec.h:58:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#713: FILE: include/linux/types.h:154:
+typedef struct kvec_cb kvec_cb_t;

WARNING:LINE_SPACING: Missing a blank line after declarations
#734: FILE: mm/memory.c:461:
+		struct page *page = pte_page(pte);
+		prefetch(page);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#744: FILE: mm/memory.c:1521:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#747: FILE: mm/memory.c:1524:
+ * and pin them in physical memory.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#748: FILE: mm/memory.c:1525:
+ * FIXME: some architectures need to flush the cache based on user addresses $

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#767: FILE: mm/memory.c:1544:
+	struct vm_area_struct *	vma = 0;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#770: FILE: mm/memory.c:1547:
+	unsigned		nr_pages;

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#778: FILE: mm/memory.c:1555:
+	nr_pages ++;
 	         ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*vec)...) over kmalloc(sizeof(struct kvec)...)
#785: FILE: mm/memory.c:1562:
+	vec = kmalloc(sizeof(struct kvec) + nr_pages * sizeof(struct kveclet),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#786: FILE: mm/memory.c:1563:
+	vec = kmalloc(sizeof(struct kvec) + nr_pages * sizeof(struct kveclet),
+			GFP_KERNEL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#794: FILE: mm/memory.c:1571:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#798: FILE: mm/memory.c:1575:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#801: FILE: mm/memory.c:1578:
+^I/* $

WARNING:LINE_SPACING: Missing a blank line after declarations
#806: FILE: mm/memory.c:1583:
+		struct page *map;
+		veclet->offset = ptr & ~PAGE_MASK;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#824: FILE: mm/memory.c:1601:
+			if (unlikely(((datain) && (!(vma->vm_flags & VM_WRITE))) ||
+					(!(vma->vm_flags & VM_READ)))) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#836: FILE: mm/memory.c:1613:
+				if (!ret)
[...]
+				else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#838: FILE: mm/memory.c:1615:
+				else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#844: FILE: mm/memory.c:1621:
+^I^I}^I^I^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#846: FILE: mm/memory.c:1623:
+		if (likely(map != NULL)) {
[...]
+		} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "map"
#846: FILE: mm/memory.c:1623:
+		if (likely(map != NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Unbalanced braces around else statement
#849: FILE: mm/memory.c:1626:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#850: FILE: mm/memory.c:1627:
+			printk (KERN_INFO "Mapped page missing [%d]\n", i);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#850: FILE: mm/memory.c:1627:
+			printk (KERN_INFO "Mapped page missing [%d]\n", i);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#863: FILE: mm/memory.c:1640:
+	dprintk ("map_user_kiobuf: end OK\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#881: FILE: mm/memory.c:1658:
+ * and unlock them if they were locked. $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#884: FILE: mm/memory.c:1661:
+void unmap_kvec (struct kvec *vec, int dirtied)

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#891: FILE: mm/memory.c:1668:
+	for (; veclet<end; map = (++veclet)->page) {
 	             ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "map"
#893: FILE: mm/memory.c:1670:
+		if (likely(map != NULL) && !PageReserved(map)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#909: FILE: mm/memory.c:1686:
+		BUG();

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000433128.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 44 errors, 155 warnings, 38 checks, 706 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000433128.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
