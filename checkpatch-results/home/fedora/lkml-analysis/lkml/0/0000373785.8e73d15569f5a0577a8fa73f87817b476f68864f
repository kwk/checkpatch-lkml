WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#83: FILE: asm-h8300/bitops.h:356:
+extern __inline__ int ext2_set_bit(int nr, volatile void * addr)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#83: FILE: asm-h8300/bitops.h:356:
+extern __inline__ int ext2_set_bit(int nr, volatile void * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#83: FILE: asm-h8300/bitops.h:356:
+extern __inline__ int ext2_set_bit(int nr, volatile void * addr)

CHECK:SPACING: No space is necessary after a cast
#101: FILE: asm-h8300/bitops.h:360:
+	volatile unsigned char	*ADDR = (unsigned char *) addr;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#101: FILE: asm-h8300/bitops.h:360:
+	volatile unsigned char	*ADDR = (unsigned char *) addr;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#113: FILE: asm-h8300/bitops.h:371:
+extern __inline__ int ext2_clear_bit(int nr, volatile void * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#113: FILE: asm-h8300/bitops.h:371:
+extern __inline__ int ext2_clear_bit(int nr, volatile void * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#113: FILE: asm-h8300/bitops.h:371:
+extern __inline__ int ext2_clear_bit(int nr, volatile void * addr)

CHECK:SPACING: No space is necessary after a cast
#131: FILE: asm-h8300/bitops.h:375:
+	volatile unsigned char	*ADDR = (unsigned char *) addr;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#131: FILE: asm-h8300/bitops.h:375:
+	volatile unsigned char	*ADDR = (unsigned char *) addr;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#143: FILE: asm-h8300/bitops.h:386:
+extern __inline__ int ext2_test_bit(int nr, const volatile void * addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#143: FILE: asm-h8300/bitops.h:386:
+extern __inline__ int ext2_test_bit(int nr, const volatile void * addr)

WARNING:INLINE: plain inline is preferred over __inline__
#143: FILE: asm-h8300/bitops.h:386:
+extern __inline__ int ext2_test_bit(int nr, const volatile void * addr)

CHECK:SPACING: No space is necessary after a cast
#158: FILE: asm-h8300/bitops.h:389:
+	const volatile unsigned char	*ADDR = (const unsigned char *) addr;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#158: FILE: asm-h8300/bitops.h:389:
+	const volatile unsigned char	*ADDR = (const unsigned char *) addr;

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

ERROR:SPACING: space required after that ',' (ctx:VxV)
#296: FILE: asm-h8300/system.h:39:
+#define switch_to(prev,next,last) {                         \
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#296: FILE: asm-h8300/system.h:39:
+#define switch_to(prev,next,last) {                         \
                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'prev' - possible side-effects?
#296: FILE: asm-h8300/system.h:39:
+#define switch_to(prev,next,last) {                         \
+  void *_last;						    \
+  __asm__ __volatile__(					    \
+  			"mov.l	%1, er0\n\t"		    \
+			"mov.l	%2, er1\n\t"		    \
+                        "mov.l  %3, er2\n\t"                \
+			"jsr @_resume\n\t"                  \
+                        "mov.l  er2,%0\n\t"                 \
+		       : "=r" (_last)			    \
+		       : "r" (&(prev->thread)),		    \
+			 "r" (&(next->thread)),		    \
+                         "g" (prev)                         \
+		       : "cc", "er0", "er1", "er2", "er3"); \
+  (last) = _last; 					    \
 }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'prev' may be better as '(prev)' to avoid precedence issues
#296: FILE: asm-h8300/system.h:39:
+#define switch_to(prev,next,last) {                         \
+  void *_last;						    \
+  __asm__ __volatile__(					    \
+  			"mov.l	%1, er0\n\t"		    \
+			"mov.l	%2, er1\n\t"		    \
+                        "mov.l  %3, er2\n\t"                \
+			"jsr @_resume\n\t"                  \
+                        "mov.l  er2,%0\n\t"                 \
+		       : "=r" (_last)			    \
+		       : "r" (&(prev->thread)),		    \
+			 "r" (&(next->thread)),		    \
+                         "g" (prev)                         \
+		       : "cc", "er0", "er1", "er2", "er3"); \
+  (last) = _last; 					    \
 }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'next' may be better as '(next)' to avoid precedence issues
#296: FILE: asm-h8300/system.h:39:
+#define switch_to(prev,next,last) {                         \
+  void *_last;						    \
+  __asm__ __volatile__(					    \
+  			"mov.l	%1, er0\n\t"		    \
+			"mov.l	%2, er1\n\t"		    \
+                        "mov.l  %3, er2\n\t"                \
+			"jsr @_resume\n\t"                  \
+                        "mov.l  er2,%0\n\t"                 \
+		       : "=r" (_last)			    \
+		       : "r" (&(prev->thread)),		    \
+			 "r" (&(next->thread)),		    \
+                         "g" (prev)                         \
+		       : "cc", "er0", "er1", "er2", "er3"); \
+  (last) = _last; 					    \
 }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#297: FILE: asm-h8300/system.h:40:
+  void *_last;^I^I^I^I^I^I    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#298: FILE: asm-h8300/system.h:41:
+  __asm__ __volatile__(^I^I^I^I^I    \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#299: FILE: asm-h8300/system.h:42:
+  ^I^I^I"mov.l^I%1, er0\n\t"^I^I    \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#299: FILE: asm-h8300/system.h:42:
+  ^I^I^I"mov.l^I%1, er0\n\t"^I^I    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: asm-h8300/system.h:42:
+  ^I^I^I"mov.l^I%1, er0\n\t"^I^I    \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#301: FILE: asm-h8300/system.h:44:
+                        "mov.l  %3, er2\n\t"                \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#301: FILE: asm-h8300/system.h:44:
+                        "mov.l  %3, er2\n\t"                \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#303: FILE: asm-h8300/system.h:46:
+                        "mov.l  er2,%0\n\t"                 \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: asm-h8300/system.h:46:
+                        "mov.l  er2,%0\n\t"                 \$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around prev->thread
#305: FILE: asm-h8300/system.h:48:
+		       : "r" (&(prev->thread)),		    \

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around next->thread
#306: FILE: asm-h8300/system.h:49:
+			 "r" (&(next->thread)),		    \

ERROR:CODE_INDENT: code indent should use tabs where possible
#307: FILE: asm-h8300/system.h:50:
+                         "g" (prev)                         \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#307: FILE: asm-h8300/system.h:50:
+                         "g" (prev)                         \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#309: FILE: asm-h8300/system.h:52:
+  (last) = _last; ^I^I^I^I^I    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#309: FILE: asm-h8300/system.h:52:
+  (last) = _last; ^I^I^I^I^I    \$

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#348: FILE: asm-h8300/unistd.h:410:
+  if ((unsigned long)(__res) >= (unsigned long)(-125)) {^I^I       ^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#348: FILE: asm-h8300/unistd.h:410:
+  if ((unsigned long)(__res) >= (unsigned long)(-125)) {^I^I       ^I\$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#348: FILE: asm-h8300/unistd.h:410:
+  if ((unsigned long)(__res) >= (unsigned long)(-125)) {		       	\
+    errno = -__res;								\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#349: FILE: asm-h8300/unistd.h:411:
+    errno = -__res;^I^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#350: FILE: asm-h8300/unistd.h:412:
+    __res = -1;^I^I^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#351: FILE: asm-h8300/unistd.h:413:
+  }^I^I^I^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#352: FILE: asm-h8300/unistd.h:414:
+  return (type)__res;^I^I^I^I^I^I^I^I\$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#354: FILE: asm-h8300/unistd.h:416:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#355: FILE: asm-h8300/unistd.h:417:
+#define _syscall6(type, name, atype, a, btype, b, ctype, c, dtype, d,           \
+                              etype, e, ftype, f)	                        \
+type name(atype a, btype b, ctype c, dtype d, etype e, ftype f)			\
+{										\
+  register long __res __asm__("er0");						\
+  __asm__ __volatile__ ("mov.l	er6,@-sp\n\t"					\
+                        "mov.l	%7, er6\n\t"					\
+                        "mov.l	%6, er5\n\t"					\
+			"mov.l	%5, er4\n\t"					\
+			"mov.l	%4, er3\n\t"					\
+			"mov.l	%3, er2\n\t"					\
+  			"mov.l	%2, er1\n\t"					\
+			"mov.l	%1, er0\n\t"					\
+  			"trapa	#0\n\t"						\
+  			"mov.l	@sp+,er6"					\
+			: "=r" (__res)						\
+			: "ir" (__NR_##name),					\
+			  "g" ((long)a),					\
+			  "g" ((long)b),					\
+			  "g" ((long)c),					\
+			  "g" ((long)d),					\
+			  "m" ((long)e),					\
+			  "m" ((long)e)						\
+			: "cc", "er1", "er2", "er3", "er4", "er5");		\
   if ((unsigned long)(__res) >= (unsigned long)(-125)) {		       	\
     errno = -__res;								\
     __res = -1;									\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#355: FILE: asm-h8300/unistd.h:417:
+#define _syscall6(type, name, atype, a, btype, b, ctype, c, dtype, d,           \
+                              etype, e, ftype, f)	                        \
+type name(atype a, btype b, ctype c, dtype d, etype e, ftype f)			\
+{										\
+  register long __res __asm__("er0");						\
+  __asm__ __volatile__ ("mov.l	er6,@-sp\n\t"					\
+                        "mov.l	%7, er6\n\t"					\
+                        "mov.l	%6, er5\n\t"					\
+			"mov.l	%5, er4\n\t"					\
+			"mov.l	%4, er3\n\t"					\
+			"mov.l	%3, er2\n\t"					\
+  			"mov.l	%2, er1\n\t"					\
+			"mov.l	%1, er0\n\t"					\
+  			"trapa	#0\n\t"						\
+  			"mov.l	@sp+,er6"					\
+			: "=r" (__res)						\
+			: "ir" (__NR_##name),					\
+			  "g" ((long)a),					\
+			  "g" ((long)b),					\
+			  "g" ((long)c),					\
+			  "g" ((long)d),					\
+			  "m" ((long)e),					\
+			  "m" ((long)e)						\
+			: "cc", "er1", "er2", "er3", "er4", "er5");		\
   if ((unsigned long)(__res) >= (unsigned long)(-125)) {		       	\
     errno = -__res;								\
     __res = -1;									\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#355: FILE: asm-h8300/unistd.h:417:
+#define _syscall6(type, name, atype, a, btype, b, ctype, c, dtype, d,           \
+                              etype, e, ftype, f)	                        \
+type name(atype a, btype b, ctype c, dtype d, etype e, ftype f)			\
+{										\
+  register long __res __asm__("er0");						\
+  __asm__ __volatile__ ("mov.l	er6,@-sp\n\t"					\
+                        "mov.l	%7, er6\n\t"					\
+                        "mov.l	%6, er5\n\t"					\
+			"mov.l	%5, er4\n\t"					\
+			"mov.l	%4, er3\n\t"					\
+			"mov.l	%3, er2\n\t"					\
+  			"mov.l	%2, er1\n\t"					\
+			"mov.l	%1, er0\n\t"					\
+  			"trapa	#0\n\t"						\
+  			"mov.l	@sp+,er6"					\
+			: "=r" (__res)						\
+			: "ir" (__NR_##name),					\
+			  "g" ((long)a),					\
+			  "g" ((long)b),					\
+			  "g" ((long)c),					\
+			  "g" ((long)d),					\
+			  "m" ((long)e),					\
+			  "m" ((long)e)						\
+			: "cc", "er1", "er2", "er3", "er4", "er5");		\
   if ((unsigned long)(__res) >= (unsigned long)(-125)) {		       	\
     errno = -__res;								\
     __res = -1;									\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#355: FILE: asm-h8300/unistd.h:417:
+#define _syscall6(type, name, atype, a, btype, b, ctype, c, dtype, d,           \
+                              etype, e, ftype, f)	                        \
+type name(atype a, btype b, ctype c, dtype d, etype e, ftype f)			\
+{										\
+  register long __res __asm__("er0");						\
+  __asm__ __volatile__ ("mov.l	er6,@-sp\n\t"					\
+                        "mov.l	%7, er6\n\t"					\
+                        "mov.l	%6, er5\n\t"					\
+			"mov.l	%5, er4\n\t"					\
+			"mov.l	%4, er3\n\t"					\
+			"mov.l	%3, er2\n\t"					\
+  			"mov.l	%2, er1\n\t"					\
+			"mov.l	%1, er0\n\t"					\
+  			"trapa	#0\n\t"						\
+  			"mov.l	@sp+,er6"					\
+			: "=r" (__res)						\
+			: "ir" (__NR_##name),					\
+			  "g" ((long)a),					\
+			  "g" ((long)b),					\
+			  "g" ((long)c),					\
+			  "g" ((long)d),					\
+			  "m" ((long)e),					\
+			  "m" ((long)e)						\
+			: "cc", "er1", "er2", "er3", "er4", "er5");		\
   if ((unsigned long)(__res) >= (unsigned long)(-125)) {		       	\
     errno = -__res;								\
     __res = -1;									\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'e' - possible side-effects?
#355: FILE: asm-h8300/unistd.h:417:
+#define _syscall6(type, name, atype, a, btype, b, ctype, c, dtype, d,           \
+                              etype, e, ftype, f)	                        \
+type name(atype a, btype b, ctype c, dtype d, etype e, ftype f)			\
+{										\
+  register long __res __asm__("er0");						\
+  __asm__ __volatile__ ("mov.l	er6,@-sp\n\t"					\
+                        "mov.l	%7, er6\n\t"					\
+                        "mov.l	%6, er5\n\t"					\
+			"mov.l	%5, er4\n\t"					\
+			"mov.l	%4, er3\n\t"					\
+			"mov.l	%3, er2\n\t"					\
+  			"mov.l	%2, er1\n\t"					\
+			"mov.l	%1, er0\n\t"					\
+  			"trapa	#0\n\t"						\
+  			"mov.l	@sp+,er6"					\
+			: "=r" (__res)						\
+			: "ir" (__NR_##name),					\
+			  "g" ((long)a),					\
+			  "g" ((long)b),					\
+			  "g" ((long)c),					\
+			  "g" ((long)d),					\
+			  "m" ((long)e),					\
+			  "m" ((long)e)						\
+			: "cc", "er1", "er2", "er3", "er4", "er5");		\
   if ((unsigned long)(__res) >= (unsigned long)(-125)) {		       	\
     errno = -__res;								\
     __res = -1;									\

ERROR:CODE_INDENT: code indent should use tabs where possible
#356: FILE: asm-h8300/unistd.h:418:
+                              etype, e, ftype, f)^I                        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: asm-h8300/unistd.h:418:
+                              etype, e, ftype, f)^I                        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#359: FILE: asm-h8300/unistd.h:421:
+  register long __res __asm__("er0");^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#360: FILE: asm-h8300/unistd.h:422:
+  __asm__ __volatile__ ("mov.l^Ier6,@-sp\n\t"^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#361: FILE: asm-h8300/unistd.h:423:
+                        "mov.l^I%7, er6\n\t"^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#361: FILE: asm-h8300/unistd.h:423:
+                        "mov.l^I%7, er6\n\t"^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#362: FILE: asm-h8300/unistd.h:424:
+                        "mov.l^I%6, er5\n\t"^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#362: FILE: asm-h8300/unistd.h:424:
+                        "mov.l^I%6, er5\n\t"^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#366: FILE: asm-h8300/unistd.h:428:
+  ^I^I^I"mov.l^I%2, er1\n\t"^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#366: FILE: asm-h8300/unistd.h:428:
+  ^I^I^I"mov.l^I%2, er1\n\t"^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#366: FILE: asm-h8300/unistd.h:428:
+  ^I^I^I"mov.l^I%2, er1\n\t"^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#368: FILE: asm-h8300/unistd.h:430:
+  ^I^I^I"trapa^I#0\n\t"^I^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#368: FILE: asm-h8300/unistd.h:430:
+  ^I^I^I"trapa^I#0\n\t"^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#368: FILE: asm-h8300/unistd.h:430:
+  ^I^I^I"trapa^I#0\n\t"^I^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#369: FILE: asm-h8300/unistd.h:431:
+  ^I^I^I"mov.l^I@sp+,er6"^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#369: FILE: asm-h8300/unistd.h:431:
+  ^I^I^I"mov.l^I@sp+,er6"^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#369: FILE: asm-h8300/unistd.h:431:
+  ^I^I^I"mov.l^I@sp+,er6"^I^I^I^I^I\$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000373785.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 43 warnings, 13 checks, 269 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000373785.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
