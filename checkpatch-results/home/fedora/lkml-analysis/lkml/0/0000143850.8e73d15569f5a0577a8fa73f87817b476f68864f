WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#61: 
with the kobj->dev devices I got from the misc_device class could have gotten 

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#118: FILE: drivers/char/tlclk.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#137: FILE: drivers/char/tlclk.c:20:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#138: FILE: drivers/char/tlclk.c:21:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#163: FILE: drivers/char/tlclk.c:46:
+#include <asm/io.h>		/* inb/outb */

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#164: FILE: drivers/char/tlclk.c:47:
+#include <asm/uaccess.h>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#174: FILE: drivers/char/tlclk.c:57:
+#define NORMAL_MODE ^I0x00$

CHECK:CAMELCASE: Avoid CamelCase: <REF_CLK1_8kHz>
#183: FILE: drivers/char/tlclk.c:66:
+#define REF_CLK1_8kHz		0x00

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <REF_CLK2_19_44MHz>
#184: FILE: drivers/char/tlclk.c:67:
+#define REF_CLK2_19_44MHz	0x02

CHECK:CAMELCASE: Avoid CamelCase: <CLK_8kHz>
#191: FILE: drivers/char/tlclk.c:74:
+#define CLK_8kHz	0xff

CHECK:CAMELCASE: Avoid CamelCase: <CLK_16_384MHz>
#192: FILE: drivers/char/tlclk.c:75:
+#define CLK_16_384MHz	0xfb

CHECK:CAMELCASE: Avoid CamelCase: <CLK_1_544MHz>
#194: FILE: drivers/char/tlclk.c:77:
+#define CLK_1_544MHz	0x00

CHECK:CAMELCASE: Avoid CamelCase: <CLK_2_048MHz>
#195: FILE: drivers/char/tlclk.c:78:
+#define CLK_2_048MHz	0x01

CHECK:CAMELCASE: Avoid CamelCase: <CLK_4_096MHz>
#196: FILE: drivers/char/tlclk.c:79:
+#define CLK_4_096MHz	0x02

CHECK:CAMELCASE: Avoid CamelCase: <CLK_6_312MHz>
#197: FILE: drivers/char/tlclk.c:80:
+#define CLK_6_312MHz	0x03

CHECK:CAMELCASE: Avoid CamelCase: <CLK_8_192MHz>
#198: FILE: drivers/char/tlclk.c:81:
+#define CLK_8_192MHz	0x04

CHECK:CAMELCASE: Avoid CamelCase: <CLK_19_440MHz>
#199: FILE: drivers/char/tlclk.c:82:
+#define CLK_19_440MHz	0x06

CHECK:CAMELCASE: Avoid CamelCase: <CLK_8_592MHz>
#201: FILE: drivers/char/tlclk.c:84:
+#define CLK_8_592MHz	0x08

CHECK:CAMELCASE: Avoid CamelCase: <CLK_11_184MHz>
#202: FILE: drivers/char/tlclk.c:85:
+#define CLK_11_184MHz	0x09

CHECK:CAMELCASE: Avoid CamelCase: <CLK_34_368MHz>
#203: FILE: drivers/char/tlclk.c:86:
+#define CLK_34_368MHz	0x0b

CHECK:CAMELCASE: Avoid CamelCase: <CLK_44_736MHz>
#204: FILE: drivers/char/tlclk.c:87:
+#define CLK_44_736MHz	0x0a

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#251: FILE: drivers/char/tlclk.c:134:
+};
+/* Telecom clock I/O register definition */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#254: FILE: drivers/char/tlclk.c:137:
+#define TLCLK_REG1 (TLCLK_BASE+1)
                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#255: FILE: drivers/char/tlclk.c:138:
+#define TLCLK_REG2 (TLCLK_BASE+2)
                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#256: FILE: drivers/char/tlclk.c:139:
+#define TLCLK_REG3 (TLCLK_BASE+3)
                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#257: FILE: drivers/char/tlclk.c:140:
+#define TLCLK_REG4 (TLCLK_BASE+4)
                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#258: FILE: drivers/char/tlclk.c:141:
+#define TLCLK_REG5 (TLCLK_BASE+5)
                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#259: FILE: drivers/char/tlclk.c:142:
+#define TLCLK_REG6 (TLCLK_BASE+6)
                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#260: FILE: drivers/char/tlclk.c:143:
+#define TLCLK_REG7 (TLCLK_BASE+7)
                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'port' - possible side-effects?
#262: FILE: drivers/char/tlclk.c:145:
+#define SET_PORT_BITS(port, mask, val) outb(((inb(port) & mask) | val), port)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mask' may be better as '(mask)' to avoid precedence issues
#262: FILE: drivers/char/tlclk.c:145:
+#define SET_PORT_BITS(port, mask, val) outb(((inb(port) & mask) | val), port)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'val' may be better as '(val)' to avoid precedence issues
#262: FILE: drivers/char/tlclk.c:145:
+#define SET_PORT_BITS(port, mask, val) outb(((inb(port) & mask) | val), port)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#268: FILE: drivers/char/tlclk.c:151:
+/* sysfs interface definition:
+Upon loading the driver will create a sysfs directory under

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#305: FILE: drivers/char/tlclk.c:188:
+	TIMER_INITIALIZER(switchover_timeout , 0, 0);
 	                                     ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#317: FILE: drivers/char/tlclk.c:200:
+static int tlclk_open(struct inode *inode, struct file *filp)
                                                         ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#322: FILE: drivers/char/tlclk.c:205:
+	 * initialising interrupt handler */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#326: FILE: drivers/char/tlclk.c:209:
+	 * we can't share this IRQ */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#330: FILE: drivers/char/tlclk.c:213:
+		printk(KERN_ERR "telco_clock: Interrupt can't be reserved!\n");

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#338: FILE: drivers/char/tlclk.c:221:
+static int tlclk_release(struct inode *inode, struct file *filp)
                                                            ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#345: FILE: drivers/char/tlclk.c:228:
+ssize_t tlclk_read(struct file *filp, char __user *buf, size_t count,
                                 ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#346: FILE: drivers/char/tlclk.c:229:
+ssize_t tlclk_read(struct file *filp, char __user *buf, size_t count,
+		loff_t *f_pos)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#361: FILE: drivers/char/tlclk.c:244:
+ssize_t tlclk_write(struct file *filp, const char __user *buf, size_t count,
                                  ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#362: FILE: drivers/char/tlclk.c:245:
+ssize_t tlclk_write(struct file *filp, const char __user *buf, size_t count,
+	    loff_t *f_pos)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#367: FILE: drivers/char/tlclk.c:250:
+static struct file_operations tlclk_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#382: FILE: drivers/char/tlclk.c:265:
+static ssize_t show_current_ref(struct device *d,
+		struct device_attribute *attr, char *buf)

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_current_ref' to 'current_ref_show'
#392: FILE: drivers/char/tlclk.c:275:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#394: FILE: drivers/char/tlclk.c:277:
+static DEVICE_ATTR(current_ref, S_IRUGO, show_current_ref, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#396: FILE: drivers/char/tlclk.c:279:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#398: FILE: drivers/char/tlclk.c:281:
+static ssize_t show_interrupt_switch(struct device *d,
+		struct device_attribute *attr, char *buf)

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_interrupt_switch' to 'interrupt_switch_show'
#408: FILE: drivers/char/tlclk.c:291:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#410: FILE: drivers/char/tlclk.c:293:
+static DEVICE_ATTR(interrupt_switch, S_IRUGO,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#414: FILE: drivers/char/tlclk.c:297:
+static ssize_t show_alarms(struct device *d,
+		struct device_attribute *attr,  char *buf)

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_alarms' to 'alarms_show'
#424: FILE: drivers/char/tlclk.c:307:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#426: FILE: drivers/char/tlclk.c:309:
+static DEVICE_ATTR(alarms, S_IRUGO, show_alarms, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#429: FILE: drivers/char/tlclk.c:312:
+static ssize_t store_enable_clk3b_output(struct device *d,
+		 struct device_attribute *attr, const char *buf, size_t count)

WARNING:NAKED_SSCANF: unchecked sscanf return value
#435: FILE: drivers/char/tlclk.c:318:
+	sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#435: FILE: drivers/char/tlclk.c:318:
+	sscanf(buf, "%lX", &tmp);

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IWUGO' used
#444: FILE: drivers/char/tlclk.c:327:
+}

The permissions used in DEVICE_ATTR are unusual.
Typically only three permissions are used - 0644 (RW), 0444 (RO)
and 0200 (WO).

See: https://www.kernel.org/doc/html/latest/filesystems/sysfs.html#attributes

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#446: FILE: drivers/char/tlclk.c:329:
+static DEVICE_ATTR(enable_clk3b_output, S_IWUGO, NULL,

Exporting world writable sysfs/debugfs files is usually a bad thing.
When done arbitrarily they can introduce serious security bugs.
In the past, some of the debugfs vulnerabilities would seemingly allow
any local user to write arbitrary values into device registers - a
situation from which little good can be expected to emerge.

See: https://lore.kernel.org/linux-arm-kernel/cover.1296818921.git.segoon@openwall.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#446: FILE: drivers/char/tlclk.c:329:
+static DEVICE_ATTR(enable_clk3b_output, S_IWUGO, NULL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#450: FILE: drivers/char/tlclk.c:333:
+static ssize_t store_enable_clk3a_output(struct device *d,
+		 struct device_attribute *attr, const char *buf, size_t count)

WARNING:NAKED_SSCANF: unchecked sscanf return value
#456: FILE: drivers/char/tlclk.c:339:
+	sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#456: FILE: drivers/char/tlclk.c:339:
+	sscanf(buf, "%lX", &tmp);

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IWUGO' used
#465: FILE: drivers/char/tlclk.c:348:
+}

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#467: FILE: drivers/char/tlclk.c:350:
+static DEVICE_ATTR(enable_clk3a_output, S_IWUGO, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#467: FILE: drivers/char/tlclk.c:350:
+static DEVICE_ATTR(enable_clk3a_output, S_IWUGO, NULL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#471: FILE: drivers/char/tlclk.c:354:
+static ssize_t store_enable_clkb1_output(struct device *d,
+		 struct device_attribute *attr, const char *buf, size_t count)

WARNING:NAKED_SSCANF: unchecked sscanf return value
#477: FILE: drivers/char/tlclk.c:360:
+	sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#477: FILE: drivers/char/tlclk.c:360:
+	sscanf(buf, "%lX", &tmp);

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IWUGO' used
#486: FILE: drivers/char/tlclk.c:369:
+}

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#488: FILE: drivers/char/tlclk.c:371:
+static DEVICE_ATTR(enable_clkb1_output, S_IWUGO, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#488: FILE: drivers/char/tlclk.c:371:
+static DEVICE_ATTR(enable_clkb1_output, S_IWUGO, NULL,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#491: FILE: drivers/char/tlclk.c:374:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#493: FILE: drivers/char/tlclk.c:376:
+static ssize_t store_enable_clka1_output(struct device *d,
+		 struct device_attribute *attr, const char *buf, size_t count)

WARNING:NAKED_SSCANF: unchecked sscanf return value
#499: FILE: drivers/char/tlclk.c:382:
+	sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#499: FILE: drivers/char/tlclk.c:382:
+	sscanf(buf, "%lX", &tmp);

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IWUGO' used
#508: FILE: drivers/char/tlclk.c:391:
+}

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#510: FILE: drivers/char/tlclk.c:393:
+static DEVICE_ATTR(enable_clka1_output, S_IWUGO, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#510: FILE: drivers/char/tlclk.c:393:
+static DEVICE_ATTR(enable_clka1_output, S_IWUGO, NULL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#514: FILE: drivers/char/tlclk.c:397:
+static ssize_t store_enable_clkb0_output(struct device *d,
+		 struct device_attribute *attr, const char *buf, size_t count)

WARNING:NAKED_SSCANF: unchecked sscanf return value
#520: FILE: drivers/char/tlclk.c:403:
+	sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#520: FILE: drivers/char/tlclk.c:403:
+	sscanf(buf, "%lX", &tmp);

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IWUGO' used
#529: FILE: drivers/char/tlclk.c:412:
+}

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#531: FILE: drivers/char/tlclk.c:414:
+static DEVICE_ATTR(enable_clkb0_output, S_IWUGO, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#531: FILE: drivers/char/tlclk.c:414:
+static DEVICE_ATTR(enable_clkb0_output, S_IWUGO, NULL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#535: FILE: drivers/char/tlclk.c:418:
+static ssize_t store_enable_clka0_output(struct device *d,
+		 struct device_attribute *attr, const char *buf, size_t count)

WARNING:NAKED_SSCANF: unchecked sscanf return value
#541: FILE: drivers/char/tlclk.c:424:
+	sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#541: FILE: drivers/char/tlclk.c:424:
+	sscanf(buf, "%lX", &tmp);

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IWUGO' used
#550: FILE: drivers/char/tlclk.c:433:
+}

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#552: FILE: drivers/char/tlclk.c:435:
+static DEVICE_ATTR(enable_clka0_output, S_IWUGO, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#552: FILE: drivers/char/tlclk.c:435:
+static DEVICE_ATTR(enable_clka0_output, S_IWUGO, NULL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#556: FILE: drivers/char/tlclk.c:439:
+static ssize_t store_test_mode(struct device *d,
+		struct device_attribute *attr,  const char *buf, size_t count)

WARNING:NAKED_SSCANF: unchecked sscanf return value
#562: FILE: drivers/char/tlclk.c:445:
+	sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#562: FILE: drivers/char/tlclk.c:445:
+	sscanf(buf, "%lX", &tmp);

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IWUGO' used
#571: FILE: drivers/char/tlclk.c:454:
+}

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#573: FILE: drivers/char/tlclk.c:456:
+static DEVICE_ATTR(test_mode, S_IWUGO, NULL, store_test_mode);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#573: FILE: drivers/char/tlclk.c:456:
+static DEVICE_ATTR(test_mode, S_IWUGO, NULL, store_test_mode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#576: FILE: drivers/char/tlclk.c:459:
+static ssize_t store_select_amcb2_transmit_clock(struct device *d,
+		struct device_attribute *attr, const char *buf, size_t count)

WARNING:NAKED_SSCANF: unchecked sscanf return value
#582: FILE: drivers/char/tlclk.c:465:
+	sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#582: FILE: drivers/char/tlclk.c:465:
+	sscanf(buf, "%lX", &tmp);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val == CLK_8kHz'
#587: FILE: drivers/char/tlclk.c:470:
+		if ((val == CLK_8kHz) || (val == CLK_16_384MHz)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val == CLK_16_384MHz'
#587: FILE: drivers/char/tlclk.c:470:
+		if ((val == CLK_8kHz) || (val == CLK_16_384MHz)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#587: FILE: drivers/char/tlclk.c:470:
+		if ((val == CLK_8kHz) || (val == CLK_16_384MHz)) {
[...]
+		} else if (val >= CLK_8_592MHz) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#606: FILE: drivers/char/tlclk.c:489:
+		} else

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IWUGO' used
#612: FILE: drivers/char/tlclk.c:495:
+}

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#614: FILE: drivers/char/tlclk.c:497:
+static DEVICE_ATTR(select_amcb2_transmit_clock, S_IWUGO, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#614: FILE: drivers/char/tlclk.c:497:
+static DEVICE_ATTR(select_amcb2_transmit_clock, S_IWUGO, NULL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#618: FILE: drivers/char/tlclk.c:501:
+static ssize_t store_select_amcb1_transmit_clock(struct device *d,
+		 struct device_attribute *attr, const char *buf, size_t count)

WARNING:NAKED_SSCANF: unchecked sscanf return value
#624: FILE: drivers/char/tlclk.c:507:
+	sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#624: FILE: drivers/char/tlclk.c:507:
+	sscanf(buf, "%lX", &tmp);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val == CLK_8kHz'
#629: FILE: drivers/char/tlclk.c:512:
+		if ((val == CLK_8kHz) || (val == CLK_16_384MHz)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val == CLK_16_384MHz'
#629: FILE: drivers/char/tlclk.c:512:
+		if ((val == CLK_8kHz) || (val == CLK_16_384MHz)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#629: FILE: drivers/char/tlclk.c:512:
+		if ((val == CLK_8kHz) || (val == CLK_16_384MHz)) {
[...]
+		} else if (val >= CLK_8_592MHz) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#648: FILE: drivers/char/tlclk.c:531:
+		} else

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IWUGO' used
#653: FILE: drivers/char/tlclk.c:536:
+}

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#655: FILE: drivers/char/tlclk.c:538:
+static DEVICE_ATTR(select_amcb1_transmit_clock, S_IWUGO, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#655: FILE: drivers/char/tlclk.c:538:
+static DEVICE_ATTR(select_amcb1_transmit_clock, S_IWUGO, NULL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#659: FILE: drivers/char/tlclk.c:542:
+static ssize_t store_select_redundant_clock(struct device *d,
+		 struct device_attribute *attr, const char *buf, size_t count)

WARNING:NAKED_SSCANF: unchecked sscanf return value
#665: FILE: drivers/char/tlclk.c:548:
+	sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#665: FILE: drivers/char/tlclk.c:548:
+	sscanf(buf, "%lX", &tmp);

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IWUGO' used
#674: FILE: drivers/char/tlclk.c:557:
+}

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#676: FILE: drivers/char/tlclk.c:559:
+static DEVICE_ATTR(select_redundant_clock, S_IWUGO, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#676: FILE: drivers/char/tlclk.c:559:
+static DEVICE_ATTR(select_redundant_clock, S_IWUGO, NULL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#680: FILE: drivers/char/tlclk.c:563:
+static ssize_t store_select_ref_frequency(struct device *d,
+		 struct device_attribute *attr, const char *buf, size_t count)

WARNING:NAKED_SSCANF: unchecked sscanf return value
#686: FILE: drivers/char/tlclk.c:569:
+	sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#686: FILE: drivers/char/tlclk.c:569:
+	sscanf(buf, "%lX", &tmp);

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IWUGO' used
#695: FILE: drivers/char/tlclk.c:578:
+}

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#697: FILE: drivers/char/tlclk.c:580:
+static DEVICE_ATTR(select_ref_frequency, S_IWUGO, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#697: FILE: drivers/char/tlclk.c:580:
+static DEVICE_ATTR(select_ref_frequency, S_IWUGO, NULL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#701: FILE: drivers/char/tlclk.c:584:
+static ssize_t store_filter_select(struct device *d,
+		 struct device_attribute *attr, const char *buf, size_t count)

WARNING:NAKED_SSCANF: unchecked sscanf return value
#707: FILE: drivers/char/tlclk.c:590:
+	sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#707: FILE: drivers/char/tlclk.c:590:
+	sscanf(buf, "%lX", &tmp);

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IWUGO' used
#716: FILE: drivers/char/tlclk.c:599:
+}

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#718: FILE: drivers/char/tlclk.c:601:
+static DEVICE_ATTR(filter_select, S_IWUGO, NULL, store_filter_select);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#718: FILE: drivers/char/tlclk.c:601:
+static DEVICE_ATTR(filter_select, S_IWUGO, NULL, store_filter_select);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#721: FILE: drivers/char/tlclk.c:604:
+static ssize_t store_hardware_switching_mode(struct device *d,
+		 struct device_attribute *attr, const char *buf, size_t count)

WARNING:NAKED_SSCANF: unchecked sscanf return value
#727: FILE: drivers/char/tlclk.c:610:
+	sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#727: FILE: drivers/char/tlclk.c:610:
+	sscanf(buf, "%lX", &tmp);

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IWUGO' used
#736: FILE: drivers/char/tlclk.c:619:
+}

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#738: FILE: drivers/char/tlclk.c:621:
+static DEVICE_ATTR(hardware_switching_mode, S_IWUGO, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#738: FILE: drivers/char/tlclk.c:621:
+static DEVICE_ATTR(hardware_switching_mode, S_IWUGO, NULL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#742: FILE: drivers/char/tlclk.c:625:
+static ssize_t store_hardware_switching(struct device *d,
+		 struct device_attribute *attr, const char *buf, size_t count)

WARNING:NAKED_SSCANF: unchecked sscanf return value
#748: FILE: drivers/char/tlclk.c:631:
+	sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#748: FILE: drivers/char/tlclk.c:631:
+	sscanf(buf, "%lX", &tmp);

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IWUGO' used
#757: FILE: drivers/char/tlclk.c:640:
+}

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#759: FILE: drivers/char/tlclk.c:642:
+static DEVICE_ATTR(hardware_switching, S_IWUGO, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#759: FILE: drivers/char/tlclk.c:642:
+static DEVICE_ATTR(hardware_switching, S_IWUGO, NULL,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#762: FILE: drivers/char/tlclk.c:645:
+static ssize_t store_refalign (struct device *d,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#763: FILE: drivers/char/tlclk.c:646:
+static ssize_t store_refalign (struct device *d,
+		 struct device_attribute *attr, const char *buf, size_t count)

WARNING:NAKED_SSCANF: unchecked sscanf return value
#768: FILE: drivers/char/tlclk.c:651:
+	sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#768: FILE: drivers/char/tlclk.c:651:
+	sscanf(buf, "%lX", &tmp);

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IWUGO' used
#779: FILE: drivers/char/tlclk.c:662:
+}

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#781: FILE: drivers/char/tlclk.c:664:
+static DEVICE_ATTR(refalign, S_IWUGO, NULL, store_refalign);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#781: FILE: drivers/char/tlclk.c:664:
+static DEVICE_ATTR(refalign, S_IWUGO, NULL, store_refalign);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#783: FILE: drivers/char/tlclk.c:666:
+static ssize_t store_mode_select (struct device *d,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#784: FILE: drivers/char/tlclk.c:667:
+static ssize_t store_mode_select (struct device *d,
+		 struct device_attribute *attr, const char *buf, size_t count)

WARNING:NAKED_SSCANF: unchecked sscanf return value
#790: FILE: drivers/char/tlclk.c:673:
+	sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#790: FILE: drivers/char/tlclk.c:673:
+	sscanf(buf, "%lX", &tmp);

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IWUGO' used
#799: FILE: drivers/char/tlclk.c:682:
+}

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#801: FILE: drivers/char/tlclk.c:684:
+static DEVICE_ATTR(mode_select, S_IWUGO, NULL, store_mode_select);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#801: FILE: drivers/char/tlclk.c:684:
+static DEVICE_ATTR(mode_select, S_IWUGO, NULL, store_mode_select);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#803: FILE: drivers/char/tlclk.c:686:
+static ssize_t store_reset (struct device *d,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#804: FILE: drivers/char/tlclk.c:687:
+static ssize_t store_reset (struct device *d,
+		 struct device_attribute *attr, const char *buf, size_t count)

WARNING:NAKED_SSCANF: unchecked sscanf return value
#810: FILE: drivers/char/tlclk.c:693:
+	sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#810: FILE: drivers/char/tlclk.c:693:
+	sscanf(buf, "%lX", &tmp);

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IWUGO' used
#819: FILE: drivers/char/tlclk.c:702:
+}

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#821: FILE: drivers/char/tlclk.c:704:
+static DEVICE_ATTR(reset, S_IWUGO, NULL, store_reset);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#821: FILE: drivers/char/tlclk.c:704:
+static DEVICE_ATTR(reset, S_IWUGO, NULL, store_reset);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#860: FILE: drivers/char/tlclk.c:743:
+		printk(KERN_ERR "telco_clock: can't get major! %d\n", tlclk_major);

ERROR:SPACING: space prohibited after that open parenthesis '('
#863: FILE: drivers/char/tlclk.c:746:
+	alarm_events = kzalloc( sizeof(struct tlclk_alarms), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*alarm_events)...) over kzalloc(sizeof(struct tlclk_alarms)...)
#863: FILE: drivers/char/tlclk.c:746:
+	alarm_events = kzalloc( sizeof(struct tlclk_alarms), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#869: FILE: drivers/char/tlclk.c:752:
+		printk(KERN_ERR "tlclk: request_region failed! 0x%X\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#870: FILE: drivers/char/tlclk.c:753:
+		printk(KERN_ERR "tlclk: request_region failed! 0x%X\n",
+			TLCLK_BASE);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#876: FILE: drivers/char/tlclk.c:759:
+	if (0x0F == telclk_interrupt ) { /* not MCPBL0010 ? */

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#876: FILE: drivers/char/tlclk.c:759:
+	if (0x0F == telclk_interrupt ) { /* not MCPBL0010 ? */

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#877: FILE: drivers/char/tlclk.c:760:
+		printk(KERN_ERR "telclk_interrup = 0x%x non-mcpbl0010 hw\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#878: FILE: drivers/char/tlclk.c:761:
+		printk(KERN_ERR "telclk_interrup = 0x%x non-mcpbl0010 hw\n",
+			telclk_interrupt);

WARNING:TYPO_SPELLING: 'retruns' may be misspelled - perhaps 'returns'?
#887: FILE: drivers/char/tlclk.c:770:
+		printk(KERN_ERR " misc_register retruns %d\n", ret);
 		                                ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#887: FILE: drivers/char/tlclk.c:770:
+		printk(KERN_ERR " misc_register retruns %d\n", ret);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#893: FILE: drivers/char/tlclk.c:776:
+	tlclk_device = platform_device_register_simple("telco_clock",
+				-1, NULL, 0);

WARNING:TYPO_SPELLING: 'retruns' may be misspelled - perhaps 'returns'?
#895: FILE: drivers/char/tlclk.c:778:
+		printk(KERN_ERR " platform_device_register retruns 0x%X\n",
 		                                           ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#895: FILE: drivers/char/tlclk.c:778:
+		printk(KERN_ERR " platform_device_register retruns 0x%X\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#896: FILE: drivers/char/tlclk.c:779:
+		printk(KERN_ERR " platform_device_register retruns 0x%X\n",
+			(unsigned int) tlclk_device);

CHECK:SPACING: No space is necessary after a cast
#896: FILE: drivers/char/tlclk.c:779:
+			(unsigned int) tlclk_device);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#900: FILE: drivers/char/tlclk.c:783:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#902: FILE: drivers/char/tlclk.c:785:
+	ret = sysfs_create_group(&tlclk_device->dev.kobj,
+			&tlclk_attribute_group);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#904: FILE: drivers/char/tlclk.c:787:
+		printk(KERN_ERR "failed to create sysfs device attributes\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#906: FILE: drivers/char/tlclk.c:789:
+		sysfs_remove_group(&tlclk_device->dev.kobj,
+			&tlclk_attribute_group);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#935: FILE: drivers/char/tlclk.c:818:
+
+}

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#1022: FILE: MAINTAINERS:2323:
+P: Mark Gross

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#1023: FILE: MAINTAINERS:2324:
+M: mark.gross@intel.com

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#1023: FILE: MAINTAINERS:2324:
+P: Mark Gross
+M: mark.gross@intel.com

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#1024: FILE: MAINTAINERS:2325:
+S: Supported

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000143850.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 121 warnings, 66 checks, 931 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000143850.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
