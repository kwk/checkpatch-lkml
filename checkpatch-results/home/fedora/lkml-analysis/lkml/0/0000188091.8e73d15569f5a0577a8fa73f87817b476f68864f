WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#31: 
Signed-Off-By: Dave Teigland <teigland@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#32: 
Signed-Off-By: Patrick Caulfield <pcaulfie@redhat.com>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#45: FILE: drivers/dlm/lowcomms.c:1:
+/******************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#46: FILE: drivers/dlm/lowcomms.c:2:
+/******************************************************************************
+*******************************************************************************

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#105: FILE: drivers/dlm/lowcomms.c:61:
+static struct sockaddr_storage * local_addr[DLM_MAX_ADDR_COUNT];

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#127: FILE: drivers/dlm/lowcomms.c:83:
+	spinlock_t		lock;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#141: FILE: drivers/dlm/lowcomms.c:97:
+	unsigned		base;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#142: FILE: drivers/dlm/lowcomms.c:98:
+	unsigned		len;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#143: FILE: drivers/dlm/lowcomms.c:99:
+	unsigned		mask;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#147: FILE: drivers/dlm/lowcomms.c:103:
+/* Just the one of these, now. But this struct keeps
+   the connection-specific variables together */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#147: FILE: drivers/dlm/lowcomms.c:103:
+   the connection-specific variables together */

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#152: FILE: drivers/dlm/lowcomms.c:108:
+	struct socket *		sock;

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#154: FILE: drivers/dlm/lowcomms.c:110:
+	struct page *		rx_page;

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#163: FILE: drivers/dlm/lowcomms.c:119:
+	struct page *		page;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#168: FILE: drivers/dlm/lowcomms.c:124:
+	struct nodeinfo *	ni;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#171: FILE: drivers/dlm/lowcomms.c:127:
+#define CBUF_INIT(cb, size) do { (cb)->base = (cb)->len = 0; (cb)->mask = ((size)-1); } while(0)
                                                                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#171: FILE: drivers/dlm/lowcomms.c:127:
+#define CBUF_INIT(cb, size) do { (cb)->base = (cb)->len = 0; (cb)->mask = ((size)-1); } while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cb' - possible side-effects?
#171: FILE: drivers/dlm/lowcomms.c:127:
+#define CBUF_INIT(cb, size) do { (cb)->base = (cb)->len = 0; (cb)->mask = ((size)-1); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#173: FILE: drivers/dlm/lowcomms.c:129:
+#define CBUF_ADD(cb, n) do { (cb)->len += n; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#173: FILE: drivers/dlm/lowcomms.c:129:
+#define CBUF_ADD(cb, n) do { (cb)->len += n; } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cb' - possible side-effects?
#175: FILE: drivers/dlm/lowcomms.c:131:
+#define CBUF_MAY_ADD(cb, n) (((cb)->len + (n)) < ((cb)->mask + 1))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cb' - possible side-effects?
#176: FILE: drivers/dlm/lowcomms.c:132:
+#define CBUF_EAT(cb, n) do { (cb)->len  -= (n); \
+                             (cb)->base += (n); (cb)->base &= (cb)->mask; } while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#176: FILE: drivers/dlm/lowcomms.c:132:
+#define CBUF_EAT(cb, n) do { (cb)->len  -= (n); \
+                             (cb)->base += (n); (cb)->base &= (cb)->mask; } while(0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#177: FILE: drivers/dlm/lowcomms.c:133:
+                             (cb)->base += (n); (cb)->base &= (cb)->mask; } while(0)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: drivers/dlm/lowcomms.c:133:
+                             (cb)->base += (n); (cb)->base &= (cb)->mask; } while(0)$

ERROR:SPACING: space required before the open parenthesis '('
#177: FILE: drivers/dlm/lowcomms.c:133:
+                             (cb)->base += (n); (cb)->base &= (cb)->mask; } while(0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#177: FILE: drivers/dlm/lowcomms.c:133:
+                             (cb)->base += (n); (cb)->base &= (cb)->mask; } while(0)

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cb' - possible side-effects?
#178: FILE: drivers/dlm/lowcomms.c:134:
+#define CBUF_DATA(cb) (((cb)->base + (cb)->len) & (cb)->mask)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#202: FILE: drivers/dlm/lowcomms.c:158:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*node)...) over kmalloc(sizeof(struct dlm_node)...)
#238: FILE: drivers/dlm/lowcomms.c:194:
+	node = kmalloc(sizeof(struct dlm_node), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:CODE_INDENT: code indent should use tabs where possible
#281: FILE: drivers/dlm/lowcomms.c:237:
+^I        struct sockaddr_in *in4  = (struct sockaddr_in *) addr;$

CHECK:SPACING: No space is necessary after a cast
#281: FILE: drivers/dlm/lowcomms.c:237:
+	        struct sockaddr_in *in4  = (struct sockaddr_in *) addr;

CHECK:SPACING: No space is necessary after a cast
#282: FILE: drivers/dlm/lowcomms.c:238:
+		struct sockaddr_in *ret4 = (struct sockaddr_in *) retaddr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#283: FILE: drivers/dlm/lowcomms.c:239:
+		struct sockaddr_in *ret4 = (struct sockaddr_in *) retaddr;
+		ret4->sin_addr.s_addr = in4->sin_addr.s_addr;

ERROR:CODE_INDENT: code indent should use tabs where possible
#285: FILE: drivers/dlm/lowcomms.c:241:
+^I        struct sockaddr_in6 *in6  = (struct sockaddr_in6 *) addr;$

CHECK:SPACING: No space is necessary after a cast
#285: FILE: drivers/dlm/lowcomms.c:241:
+	        struct sockaddr_in6 *in6  = (struct sockaddr_in6 *) addr;

CHECK:SPACING: No space is necessary after a cast
#286: FILE: drivers/dlm/lowcomms.c:242:
+		struct sockaddr_in6 *ret6 = (struct sockaddr_in6 *) retaddr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#287: FILE: drivers/dlm/lowcomms.c:243:
+		struct sockaddr_in6 *ret6 = (struct sockaddr_in6 *) retaddr;
+		memcpy(&ret6->sin6_addr, &in6->sin6_addr,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ni)...) over kmalloc(sizeof(struct nodeinfo)...)
#354: FILE: drivers/dlm/lowcomms.c:310:
+		ni = kmalloc(sizeof(struct nodeinfo), alloc);

WARNING:INDENTED_LABEL: labels should not be indented
#378: FILE: drivers/dlm/lowcomms.c:334:
+	out_up:

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#391: FILE: drivers/dlm/lowcomms.c:347:
+	for (i=1; i<=max_nodeid; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#391: FILE: drivers/dlm/lowcomms.c:347:
+	for (i=1; i<=max_nodeid; i++) {
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#414: FILE: drivers/dlm/lowcomms.c:370:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#416: FILE: drivers/dlm/lowcomms.c:372:
+/* Add the port number to an IP6 or 4 sockaddr and return the address length.
+   Also padd out the struct with zeros to make comparisons meaningful */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#416: FILE: drivers/dlm/lowcomms.c:372:
+   Also padd out the struct with zeros to make comparisons meaningful */

WARNING:LINE_SPACING: Missing a blank line after declarations
#441: FILE: drivers/dlm/lowcomms.c:397:
+		struct sockaddr_in *in4_addr = (struct sockaddr_in *)saddr;
+		in4_addr->sin_port = cpu_to_be16(port);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#443: FILE: drivers/dlm/lowcomms.c:399:
+		memset(in4_addr+1, 0, sizeof(struct sockaddr_storage) -
 		               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#448: FILE: drivers/dlm/lowcomms.c:404:
+		struct sockaddr_in6 *in6_addr = (struct sockaddr_in6 *)saddr;
+		in6_addr->sin6_port = cpu_to_be16(port);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#449: FILE: drivers/dlm/lowcomms.c:405:
+		memset(in6_addr+1, 0, sizeof(struct sockaddr_storage) -
 		               ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#498: FILE: drivers/dlm/lowcomms.c:454:
+		printk(KERN_WARNING "dlm: send EOF to node failed: %d\n", ret);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#501: FILE: drivers/dlm/lowcomms.c:457:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#503: FILE: drivers/dlm/lowcomms.c:459:
+/* INIT failed but we don't know which node...
+   restart INIT on all pending nodes */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#503: FILE: drivers/dlm/lowcomms.c:459:
+   restart INIT on all pending nodes */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#509: FILE: drivers/dlm/lowcomms.c:465:
+	for (i=1; i<=max_nodeid; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#509: FILE: drivers/dlm/lowcomms.c:465:
+	for (i=1; i<=max_nodeid; i++) {
 	           ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#533: FILE: drivers/dlm/lowcomms.c:489:
+		switch (sn->sn_assoc_change.sac_state) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#545: FILE: drivers/dlm/lowcomms.c:501:
+			/* This seems to happen when we received a connection too early... or something...

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 113 exceeds 100 columns
#546: FILE: drivers/dlm/lowcomms.c:502:
+			   anyway, it happens but we always seem to get a real message too, see receive_from_sock

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#546: FILE: drivers/dlm/lowcomms.c:502:
+			/* This seems to happen when we received a connection too early... or something...
+			   anyway, it happens but we always seem to get a real message too, see receive_from_sock

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#549: FILE: drivers/dlm/lowcomms.c:505:
+				printk(KERN_WARNING "dlm: got COMM_UP for invalid assoc ID %d\n",

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#560: FILE: drivers/dlm/lowcomms.c:516:
+			ret = sctp_con.sock->ops->getsockopt(sctp_con.sock, IPPROTO_SCTP, SCTP_PRIMARY_ADDR,

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#561: FILE: drivers/dlm/lowcomms.c:517:
+							     (char*)&prim, &prim_len);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#566: FILE: drivers/dlm/lowcomms.c:522:
+				printk(KERN_ERR "dlm: getsockopt/sctp_primary_addr on new assoc %d failed : %d\n",

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#577: FILE: drivers/dlm/lowcomms.c:533:
+			if (addr_to_nodeid(&prim.ssp_addr, &nodeid)) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#578: FILE: drivers/dlm/lowcomms.c:534:
+				printk(KERN_WARNING "dlm: got connection from non-cluster node, rejecting\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#592: FILE: drivers/dlm/lowcomms.c:548:
+			printk(KERN_DEBUG "dlm: got new/restarted association %d for nodeid %d\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#621: FILE: drivers/dlm/lowcomms.c:577:
+		/* We don't know which INIT failed, so clear the PENDING flags on them all.
+		   if assoc_id is zero then it will then try again */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#621: FILE: drivers/dlm/lowcomms.c:577:
+		   if assoc_id is zero then it will then try again */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#624: FILE: drivers/dlm/lowcomms.c:580:
+			printk(KERN_WARNING "dlm: Can't start SCTP association - retrying\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#630: FILE: drivers/dlm/lowcomms.c:586:
+			printk(KERN_DEBUG "dlm: got unexpected SCTP assoc change, id=%d, state=%d\n",

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#631: FILE: drivers/dlm/lowcomms.c:587:
+			       (int)sn->sn_assoc_change.sac_assoc_id, sn->sn_assoc_change.sac_state);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#633: FILE: drivers/dlm/lowcomms.c:589:
+
+		}

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#643: FILE: drivers/dlm/lowcomms.c:599:
+	unsigned len;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sctp_con.sock"
#656: FILE: drivers/dlm/lowcomms.c:612:
+	if (sctp_con.sock == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sctp_con.rx_page"
#659: FILE: drivers/dlm/lowcomms.c:615:
+	if (sctp_con.rx_page == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sctp_con.rx_page"
#665: FILE: drivers/dlm/lowcomms.c:621:
+		if (sctp_con.rx_page == NULL)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#708: FILE: drivers/dlm/lowcomms.c:664:
+	r = ret = kernel_recvmsg(sctp_con.sock, &msg, iov, 1, len,

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#728: FILE: drivers/dlm/lowcomms.c:684:
+		if (test_and_clear_bit(NI_INIT_PENDING, &ni->flags)) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#749: FILE: drivers/dlm/lowcomms.c:705:
+		printk(KERN_INFO "dlm: lowcomms: addr=%p, len=%u, "

WARNING:SPLIT_STRING: quoted string split across lines
#750: FILE: drivers/dlm/lowcomms.c:706:
+		printk(KERN_INFO "dlm: lowcomms: addr=%p, len=%u, "
+		       "iov_len=%u, iov_base[0]=%p, read=%d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:INDENTED_LABEL: labels should not be indented
#758: FILE: drivers/dlm/lowcomms.c:714:
+      out:

WARNING:INDENTED_LABEL: labels should not be indented
#762: FILE: drivers/dlm/lowcomms.c:718:
+      out_resched:

WARNING:INDENTED_LABEL: labels should not be indented
#768: FILE: drivers/dlm/lowcomms.c:724:
+      out_close:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#771: FILE: drivers/dlm/lowcomms.c:727:
+		printk(KERN_INFO "dlm: Error reading from sctp socket: %d\n",

WARNING:INDENTED_LABEL: labels should not be indented
#774: FILE: drivers/dlm/lowcomms.c:730:
+      out_ret:

CHECK:SPACING: No space is necessary after a cast
#788: FILE: drivers/dlm/lowcomms.c:744:
+					(struct sockaddr *) addr, addr_len);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#795: FILE: drivers/dlm/lowcomms.c:751:
+		printk(KERN_ERR "dlm: Can't bind to port %d addr number %d\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#801: FILE: drivers/dlm/lowcomms.c:757:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#812: FILE: drivers/dlm/lowcomms.c:768:
+		printk(KERN_ERR "dlm: no local IP address has been set\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#819: FILE: drivers/dlm/lowcomms.c:775:
+		printk(KERN_ERR "dlm: Can't create comms socket, check SCTP "

WARNING:SPLIT_STRING: quoted string split across lines
#820: FILE: drivers/dlm/lowcomms.c:776:
+		printk(KERN_ERR "dlm: Can't create comms socket, check SCTP "
+		       "is loaded\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#839: FILE: drivers/dlm/lowcomms.c:795:
+		printk(KERN_ERR "dlm: Failed to set SCTP_EVENTS on socket: "

WARNING:SPLIT_STRING: quoted string split across lines
#840: FILE: drivers/dlm/lowcomms.c:796:
+		printk(KERN_ERR "dlm: Failed to set SCTP_EVENTS on socket: "
+		       "result=%d\n", result);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#863: FILE: drivers/dlm/lowcomms.c:819:
+		printk(KERN_ERR "dlm: Can't set socket listening\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#876: FILE: drivers/dlm/lowcomms.c:832:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*entry)...) over kmalloc(sizeof(struct writequeue_entry)...)
#881: FILE: drivers/dlm/lowcomms.c:837:
+	entry = kmalloc(sizeof(struct writequeue_entry), allocation);

CHECK:SPACING: No space is necessary after a cast
#915: FILE: drivers/dlm/lowcomms.c:871:
+	if (((struct list_head *) e == &ni->writequeue) ||

WARNING:INDENTED_LABEL: labels should not be indented
#926: FILE: drivers/dlm/lowcomms.c:882:
+	      got_one:

CHECK:SPACING: No space is necessary after a cast
#949: FILE: drivers/dlm/lowcomms.c:905:
+	struct writequeue_entry *e = (struct writequeue_entry *) arg;

WARNING:INDENTED_LABEL: labels should not be indented
#972: FILE: drivers/dlm/lowcomms.c:928:
+      out:

WARNING:RETURN_VOID: void function return statements are not generally useful
#975: FILE: drivers/dlm/lowcomms.c:931:
+	return;
+}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#984: FILE: drivers/dlm/lowcomms.c:940:
+/* Initiate an SCTP association. In theory we could just use sendmsg() on
+   the first IP address and it should work, but this allows us to set up the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#986: FILE: drivers/dlm/lowcomms.c:942:
+   It also keeps the send path clean as it can now always use the association ID */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1000: FILE: drivers/dlm/lowcomms.c:956:
+	printk(KERN_DEBUG "dlm: Initiating association with node %d\n", nodeid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1007: FILE: drivers/dlm/lowcomms.c:963:
+		printk(KERN_WARNING "dlm: no address for nodeid %d\n", nodeid);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1023: FILE: drivers/dlm/lowcomms.c:979:
+	/* Real INIT messages seem to cause trouble. Just send a 1 byte message
+	   we can afford to lose */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1023: FILE: drivers/dlm/lowcomms.c:979:
+	   we can afford to lose */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1035: FILE: drivers/dlm/lowcomms.c:991:
+		printk(KERN_WARNING "dlm: send INIT to node failed: %d\n", ret);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1054: FILE: drivers/dlm/lowcomms.c:1010:
+	/* See if we need to init an association before we start
+	   sending precious messages */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1054: FILE: drivers/dlm/lowcomms.c:1010:
+	   sending precious messages */

CHECK:SPACING: No space is necessary after a cast
#1083: FILE: drivers/dlm/lowcomms.c:1039:
+		if ((struct list_head *) e == &ni->writequeue)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1089: FILE: drivers/dlm/lowcomms.c:1045:
+		BUG_ON(len == 0 && e->users == 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1094: FILE: drivers/dlm/lowcomms.c:1050:
+			iov.iov_base = page_address(e->page)+offset;
 			                                    ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1123: FILE: drivers/dlm/lowcomms.c:1079:
+	printk(KERN_INFO "dlm: Error sending to node %d %d\n", ni->nodeid, ret);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1125: FILE: drivers/dlm/lowcomms.c:1081:
+	if (!test_and_set_bit(NI_INIT_PENDING, &ni->flags)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1129: FILE: drivers/dlm/lowcomms.c:1085:
+	} else

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1153: FILE: drivers/dlm/lowcomms.c:1109:
+		if (ret < 0) {
+		}

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1179: FILE: drivers/dlm/lowcomms.c:1135:
+	for (i=1; i<=max_nodeid; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#1179: FILE: drivers/dlm/lowcomms.c:1135:
+	for (i=1; i<=max_nodeid; i++) {
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1181: FILE: drivers/dlm/lowcomms.c:1137:
+		struct nodeinfo *ni = nodeid2nodeinfo(i, 0);
+		if (ni)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1190: FILE: drivers/dlm/lowcomms.c:1146:
+	for (i=1; i<=max_nodeid; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#1190: FILE: drivers/dlm/lowcomms.c:1146:
+	for (i=1; i<=max_nodeid; i++) {
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1192: FILE: drivers/dlm/lowcomms.c:1148:
+		struct nodeinfo *ni = nodeid2nodeinfo(i, 0);
+		if (ni) {

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1199: FILE: drivers/dlm/lowcomms.c:1155:
+#if 0

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1212: FILE: drivers/dlm/lowcomms.c:1168:
+		/* Don't send shutdown here, sctp will just queue it
+		   till the node comes back up! */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1212: FILE: drivers/dlm/lowcomms.c:1168:
+		   till the node comes back up! */

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#1263: FILE: drivers/dlm/lowcomms.c:1219:
+				 !kthread_should_stop() && ret >=0);
 				                               ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1302: FILE: drivers/dlm/lowcomms.c:1258:
+       ^Iif (error) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1302: FILE: drivers/dlm/lowcomms.c:1258:
+       ^Iif (error) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1302: FILE: drivers/dlm/lowcomms.c:1258:
+       ^Iif (error) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1310: FILE: drivers/dlm/lowcomms.c:1266:
+       ^Iif (error) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1310: FILE: drivers/dlm/lowcomms.c:1266:
+       ^Iif (error) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1310: FILE: drivers/dlm/lowcomms.c:1266:
+       ^Iif (error) {$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1389: FILE: drivers/dlm/lowcomms.h:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1390: FILE: drivers/dlm/lowcomms.h:2:
+/******************************************************************************
+*******************************************************************************

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1394: FILE: drivers/dlm/lowcomms.h:6:
+**  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1419: FILE: drivers/dlm/midcomms.c:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1420: FILE: drivers/dlm/midcomms.c:2:
+/******************************************************************************
+*******************************************************************************

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1451: FILE: drivers/dlm/midcomms.c:33:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1452: FILE: drivers/dlm/midcomms.c:34:
+static void copy_from_cb(void *dst, const void *base, unsigned offset,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1453: FILE: drivers/dlm/midcomms.c:35:
+			 unsigned len, unsigned limit)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1453: FILE: drivers/dlm/midcomms.c:35:
+			 unsigned len, unsigned limit)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1455: FILE: drivers/dlm/midcomms.c:37:
+	unsigned copy = len;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1477: FILE: drivers/dlm/midcomms.c:59:
+				unsigned offset, unsigned len, unsigned limit)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1477: FILE: drivers/dlm/midcomms.c:59:
+				unsigned offset, unsigned len, unsigned limit)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1477: FILE: drivers/dlm/midcomms.c:59:
+				unsigned offset, unsigned len, unsigned limit)

CHECK:SPACING: No space is necessary after a cast
#1480: FILE: drivers/dlm/midcomms.c:62:
+	struct dlm_header *msg = (struct dlm_header *) __tmp;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1483: FILE: drivers/dlm/midcomms.c:65:
+	unsigned msglen;

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1500: FILE: drivers/dlm/midcomms.c:82:
+			printk("dlm: message size from %d too big %d(pkt len=%d)\n", nodeid, msglen, len);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1500: FILE: drivers/dlm/midcomms.c:82:
+			printk("dlm: message size from %d too big %d(pkt len=%d)\n", nodeid, msglen, len);

CHECK:SPACING: No space is necessary after a cast
#1511: FILE: drivers/dlm/midcomms.c:93:
+		    msg == (struct dlm_header *) __tmp) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msg"
#1513: FILE: drivers/dlm/midcomms.c:95:
+			if (msg == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1518: FILE: drivers/dlm/midcomms.c:100:
+		BUG_ON(space != msg->h_lockspace);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1534: FILE: drivers/dlm/midcomms.c:116:
+			printk("dlm: msg error cmd %u len %u\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1537: FILE: drivers/dlm/midcomms.c:119:
+			printk("dlm: comms: base=%p, offset=%u, len=%u, "

WARNING:SPLIT_STRING: quoted string split across lines
#1538: FILE: drivers/dlm/midcomms.c:120:
+			printk("dlm: comms: base=%p, offset=%u, len=%u, "
+			       "ret=%u, limit=%08x newbuf=%d\n",

CHECK:SPACING: No space is necessary after a cast
#1540: FILE: drivers/dlm/midcomms.c:122:
+			       ((struct dlm_header *) __tmp == msg));

CHECK:SPACING: No space is necessary after a cast
#1544: FILE: drivers/dlm/midcomms.c:126:
+	if (msg != (struct dlm_header *) __tmp)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1550: FILE: drivers/dlm/midcomms.c:132:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1554: FILE: drivers/dlm/midcomms.h:1:
+/******************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1555: FILE: drivers/dlm/midcomms.h:2:
+/******************************************************************************
+*******************************************************************************

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1559: FILE: drivers/dlm/midcomms.h:6:
+**  $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1570: FILE: drivers/dlm/midcomms.h:17:
+int dlm_process_incoming_buffer(int nodeid, const void *base, unsigned offset,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1571: FILE: drivers/dlm/midcomms.h:18:
+				unsigned len, unsigned limit);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1571: FILE: drivers/dlm/midcomms.h:18:
+				unsigned len, unsigned limit);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000188091.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 26 errors, 96 warnings, 43 checks, 1520 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000188091.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
