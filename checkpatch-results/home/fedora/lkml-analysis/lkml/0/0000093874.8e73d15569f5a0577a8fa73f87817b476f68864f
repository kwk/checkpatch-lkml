WARNING:TYPO_SPELLING: 'noticable' may be misspelled - perhaps 'noticeable'?
#49: 
that may not be noticable (for PREEMPT, it appears to be spending
                ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#93: FILE: mm/memory.c:131:
+		struct page *page = pmd_page(*pmd);
+		pmd_clear(pmd);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#194: FILE: mm/memory.c:231:
+void free_pgd_range(struct mmu_gather *tlb,
 			unsigned long addr, unsigned long end,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#233: FILE: mm/memory.c:302:
+void unmap_pgtables(struct mmu_gather *tlb, struct vm_area_struct *vma,
+		unsigned long floor, unsigned long ceiling, int free)

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#268: FILE: mm/memory.c:335:
+				floor, next? next->vm_start: ceiling, free);
 				           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#268: FILE: mm/memory.c:335:
+				floor, next? next->vm_start: ceiling, free);
 				                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#275: FILE: mm/memory.c:342:
+static void tlb_free_pte_range(struct mmu_gather *tlb,
+				struct vm_area_struct *vma, pmd_t *pmd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: mm/memory.c:366:
+static inline void tlb_free_pmd_range(struct mmu_gather *tlb,
+				struct vm_area_struct *vma, pud_t *pud,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#315: FILE: mm/memory.c:382:
+static inline void tlb_free_pud_range(struct mmu_gather *tlb,
+				struct vm_area_struct *vma, pgd_t *pgd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: mm/memory.c:398:
+static void tlb_free_pgd_range(struct mmu_gather *tlb,
+				struct vm_area_struct *vma,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#337: FILE: mm/memory.c:404:
+	BUG_ON(addr >= end);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: mm/memory.c:415:
+void tlb_free_page_range(struct mmu_gather *tlb,
+		struct vm_area_struct *vma, unsigned long start_addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#379: FILE: mm/memory.c:744:
+static void zap_pte_range(struct mmu_gather *tlb,
 				struct vm_area_struct *vma, pmd_t *pmd,

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#411: FILE: mm/memory.c:786:
+#if 0

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#420: FILE: mm/memory.c:794:
+			BUG_ON(details && details->nonlinear_vma);

WARNING:IF_1: Consider removing the #if 1 and its #endif
#441: FILE: mm/memory.c:818:
+#if 1

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#443: FILE: mm/memory.c:820:
+			BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#456: FILE: mm/memory.c:830:
+static inline void zap_pmd_range(struct mmu_gather *tlb,
 				struct vm_area_struct *vma, pud_t *pud,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#483: FILE: mm/memory.c:847:
+static inline void zap_pud_range(struct mmu_gather *tlb,
 				struct vm_area_struct *vma, pgd_t *pgd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#510: FILE: mm/memory.c:864:
+static void unmap_page_range(struct mmu_gather *tlb,
 				struct vm_area_struct *vma,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#563: FILE: mm/memory.c:909:
+unsigned long unmap_vmas(struct mmu_gather *tlb,
 		struct vm_area_struct *vma, unsigned long start_addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#624: FILE: mm/memory.c:934:
+		if (need_resched() ||
+			(i_mmap_lock && need_lockbreak(i_mmap_lock))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#715: FILE: include/asm-generic/tlb.h:39:
+tlb_init_mmu(struct mmu_gather *tlb, struct mm_struct *mm,
+				unsigned int full_mm_flush)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#747: FILE: include/asm-generic/tlb.h:62:
+	BUG_ON(tlb->need_flush);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tlb' - possible side-effects?
#778: FILE: include/asm-generic/tlb.h:75:
+#define tlb_remove_pte_entry(tlb, ptep, address)		\
 	do {							\
 		tlb->need_flush = 1;				\
+		__tlb_remove_pte_entry(tlb, ptep, address);	\
 	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tlb' may be better as '(tlb)' to avoid precedence issues
#778: FILE: include/asm-generic/tlb.h:75:
+#define tlb_remove_pte_entry(tlb, ptep, address)		\
 	do {							\
 		tlb->need_flush = 1;				\
+		__tlb_remove_pte_entry(tlb, ptep, address);	\
 	} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#786: FILE: include/asm-generic/tlb.h:81:
+#define tlb_remove_pmd_entry(tlb, pmdp)				\
 	do {							\
+		__tlb_remove_pmd_entry(tlb, pmdp);		\
 	} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#795: FILE: include/asm-generic/tlb.h:87:
+#define tlb_remove_pgd_entry(tlb, pgdp)				\
 	do {							\
+		__tlb_remove_pgd_entry(tlb, pgdp);		\
 	} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#804: FILE: include/asm-generic/tlb.h:93:
+#define tlb_remove_pud_entry(tlb, pudp)				\
 	do {							\
+		__tlb_remove_pud_entry(tlb, pudp);		\
 	} while (0)

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#840: FILE: include/asm-i386/pgtable.h:214:
+#define pmd_unmap(xp)	do { set_pmd(xp, __pmd(pmd_val(*xp)&(~_PAGE_PRESENT))); } while (0)
                      	                                   ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'xp' - possible side-effects?
#840: FILE: include/asm-i386/pgtable.h:214:
+#define pmd_unmap(xp)	do { set_pmd(xp, __pmd(pmd_val(*xp)&(~_PAGE_PRESENT))); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#840: FILE: include/asm-i386/pgtable.h:214:
+#define pmd_unmap(xp)	do { set_pmd(xp, __pmd(pmd_val(*xp)&(~_PAGE_PRESENT))); } while (0)

WARNING:LONG_LINE: line length of 152 exceeds 100 columns
#856: FILE: include/asm-i386/pgtable.h:236:
+static inline int pte_gather(pte_t pte)		{ return (((pte).pte_low & (_PAGE_FILE|_PAGE_PROTNONE|_PAGE_PRESENT)) == (_PAGE_FILE|_PAGE_PROTNONE)); }

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#856: FILE: include/asm-i386/pgtable.h:236:
+static inline int pte_gather(pte_t pte)		{ return (((pte).pte_low & (_PAGE_FILE|_PAGE_PROTNONE|_PAGE_PRESENT)) == (_PAGE_FILE|_PAGE_PROTNONE)); }
                                        		                                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#856: FILE: include/asm-i386/pgtable.h:236:
+static inline int pte_gather(pte_t pte)		{ return (((pte).pte_low & (_PAGE_FILE|_PAGE_PROTNONE|_PAGE_PRESENT)) == (_PAGE_FILE|_PAGE_PROTNONE)); }
                                        		                                                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#856: FILE: include/asm-i386/pgtable.h:236:
+static inline int pte_gather(pte_t pte)		{ return (((pte).pte_low & (_PAGE_FILE|_PAGE_PROTNONE|_PAGE_PRESENT)) == (_PAGE_FILE|_PAGE_PROTNONE)); }
                                        		                                                                                    ^

WARNING:LONG_LINE: line length of 142 exceeds 100 columns
#866: FILE: include/asm-i386/pgtable.h:250:
+static inline pte_t pte_mkgather(pte_t pte)	{ (pte).pte_low |= (_PAGE_FILE|_PAGE_PROTNONE); (pte).pte_low &= ~_PAGE_PRESENT; return pte; }

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#866: FILE: include/asm-i386/pgtable.h:250:
+static inline pte_t pte_mkgather(pte_t pte)	{ (pte).pte_low |= (_PAGE_FILE|_PAGE_PROTNONE); (pte).pte_low &= ~_PAGE_PRESENT; return pte; }
                                            	                              ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#887: FILE: mm/mmap.c:1663:
+	unmap_pgtables(&tlb, vma, prev? prev->vm_end: FIRST_USER_ADDRESS,
 	                              ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#887: FILE: mm/mmap.c:1663:
+	unmap_pgtables(&tlb, vma, prev? prev->vm_end: FIRST_USER_ADDRESS,
 	                                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#888: FILE: mm/mmap.c:1664:
+	unmap_pgtables(&tlb, vma, prev? prev->vm_end: FIRST_USER_ADDRESS,
+				 next? next->vm_start: 0, 0);

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#888: FILE: mm/mmap.c:1664:
+				 next? next->vm_start: 0, 0);
 				     ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#888: FILE: mm/mmap.c:1664:
+				 next? next->vm_start: 0, 0);
 				                     ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#891: FILE: mm/mmap.c:1667:
+	unmap_pgtables(&tlb, vma, prev? prev->vm_end: FIRST_USER_ADDRESS,
 	                              ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#891: FILE: mm/mmap.c:1667:
+	unmap_pgtables(&tlb, vma, prev? prev->vm_end: FIRST_USER_ADDRESS,
 	                                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#892: FILE: mm/mmap.c:1668:
+	unmap_pgtables(&tlb, vma, prev? prev->vm_end: FIRST_USER_ADDRESS,
+				 next? next->vm_start: 0, 1);

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#892: FILE: mm/mmap.c:1668:
+				 next? next->vm_start: 0, 1);
 				     ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#892: FILE: mm/mmap.c:1668:
+				 next? next->vm_start: 0, 1);
 				                     ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zap_details *' should also have an identifier name
#953: FILE: include/linux/mm.h:700:
+unsigned long unmap_vmas(struct mmu_gather *tlb,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#954: FILE: include/linux/mm.h:701:
+unsigned long unmap_vmas(struct mmu_gather *tlb,
 		struct vm_area_struct *start_vma, unsigned long start_addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#962: FILE: include/linux/mm.h:705:
+void free_pgd_range(struct mmu_gather *tlb, unsigned long addr,
+		unsigned long end, unsigned long floor, unsigned long ceiling,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#965: FILE: include/linux/mm.h:708:
+void unmap_pgtables(struct mmu_gather *tlb, struct vm_area_struct *start_vma,
+		unsigned long floor, unsigned long ceiling, int free);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#967: FILE: include/linux/mm.h:710:
+void tlb_free_page_range(struct mmu_gather *tlb,
+		struct vm_area_struct *start_vma, unsigned long start_addr,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#994: FILE: include/linux/swap.h:233:
+extern void free_swap_cache(struct page *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#994: FILE: include/linux/swap.h:233:
+extern void free_swap_cache(struct page *);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1026: FILE: mm/swap.c:293:
+		struct page *page = list_entry(pages->next, struct page, lru);
+		list_del(&page->lru);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1049: FILE: mm/swap.c:328:
+	int i;
+	for (i = 0; i < pagevec_count(pvec); i++)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1198: FILE: include/asm-i386/pgtable-3level.h:76:
+static inline void pud_unmap (pud_t * pud) { }

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1198: FILE: include/asm-i386/pgtable-3level.h:76:
+static inline void pud_unmap (pud_t * pud) { }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tlb' may be better as '(tlb)' to avoid precedence issues
#1220: FILE: include/asm-i386/tlb.h:11:
+#define __tlb_remove_pgd_entry(tlb, pgdp)		\
+do {							\
+	tlb->need_flush = 1;				\
+} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1220: FILE: include/asm-i386/tlb.h:11:
+#define __tlb_remove_pgd_entry(tlb, pgdp)		\
+do {							\
+	tlb->need_flush = 1;				\
+} while (0)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000093874.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 20 warnings, 30 checks, 1064 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000093874.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
