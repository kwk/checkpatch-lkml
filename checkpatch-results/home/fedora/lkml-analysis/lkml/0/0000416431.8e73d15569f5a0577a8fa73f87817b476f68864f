WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#56: 
diff -urpN --exclude TAGS -X /home/rusty/devel/kernel/kernel-patches/current-dontdiff --minimal .7287-linux-2.5.46/Makefile .7287-linux-2.5.46.updated/Makefile

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#92: FILE: arch/i386/Kconfig:1608:
+config KALLSYMS
+	bool "Load all symbols for debugging/kksymoops"
+	depends on DEBUG_KERNEL
+	help
+	  Say Y here to let the kernel print out symbolic crash information and
+	  symbolic stack backtraces. This increases the size of the kernel
+	  somewhat, as all symbols have to be loaded into the kernel image.
 

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#116: FILE: arch/ia64/Kconfig:816:
+config KALLSYMS
+	bool "Load all symbols for debugging/kksymoops"
+	depends on DEBUG_KERNEL
+	help
+	  Say Y here to let the kernel print out symbolic crash information and
+	  symbolic stack backtraces. This increases the size of the kernel
+	  somewhat, as all symbols have to be loaded into the kernel image.
 

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#136: FILE: arch/ppc/Kconfig:1787:
+config KALLSYMS
+	bool "Load all symbols for debugging/kksymoops"
+	depends on DEBUG_KERNEL
 

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#167: FILE: arch/x86_64/Kconfig:742:
+config KALLSYMS
+	bool "Load all symbols for debugging/kksymoops"
+	depends on DEBUG_KERNEL
+	help
+	  Say Y here to let the kernel print out symbolic crash information and
+	  symbolic stack backtraces. This increases the size of the kernel
+	  somewhat, as all symbols have to be loaded into the kernel image.
 

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#248: FILE: include/linux/kallsyms.h:1:
+/* Rewritten and vastly simplified by Rusty Russell for in-kernel

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#343: FILE: include/linux/kallsyms.h:18:
+extern void __print_symbol(const char *fmt, unsigned long address);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#395: FILE: include/linux/kallsyms.h:36:
+__attribute__((format(printf,1,2)));
                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#395: FILE: include/linux/kallsyms.h:36:
+__attribute__((format(printf,1,2)));
                               ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1,2) over __attribute__((format(printf,1,2)))
#395: FILE: include/linux/kallsyms.h:36:
+__attribute__((format(printf,1,2)));

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fmt' - possible side-effects?
#402: FILE: include/linux/kallsyms.h:41:
+#define print_symbol(fmt, addr)			\
+do {						\
+	__check_printsym_format(fmt, "");	\
+	__print_symbol(fmt, addr);		\
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#406: FILE: include/linux/kallsyms.h:45:
+} while(0)

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#428: FILE: include/linux/module.h:139:
+	Elf_Sym *symtab;
 	        ^

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Sym>
#428: FILE: include/linux/module.h:139:
+	Elf_Sym *symtab;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#504: FILE: kernel/kallsyms.c:14:
+extern unsigned long kallsyms_addresses[1]

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __alias("kallsyms_dummy") over __attribute__((alias("kallsyms_dummy")))
#505: FILE: kernel/kallsyms.c:15:
+	__attribute__((alias("kallsyms_dummy"), weak));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#505: FILE: kernel/kallsyms.c:15:
+	__attribute__((alias("kallsyms_dummy"), weak));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#506: FILE: kernel/kallsyms.c:16:
+extern unsigned long kallsyms_num_syms

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __alias("kallsyms_dummy") over __attribute__((alias("kallsyms_dummy")))
#507: FILE: kernel/kallsyms.c:17:
+	__attribute__((alias("kallsyms_dummy"), weak));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#507: FILE: kernel/kallsyms.c:17:
+	__attribute__((alias("kallsyms_dummy"), weak));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#508: FILE: kernel/kallsyms.c:18:
+extern char kallsyms_names[1]

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __alias("kallsyms_dummy") over __attribute__((alias("kallsyms_dummy")))
#509: FILE: kernel/kallsyms.c:19:
+	__attribute__((alias("kallsyms_dummy"), weak));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#509: FILE: kernel/kallsyms.c:19:
+	__attribute__((alias("kallsyms_dummy"), weak));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#513: FILE: kernel/kallsyms.c:22:
+extern char _stext[], _etext[];

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#532: FILE: kernel/kallsyms.c:34:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#591: FILE: kernel/kallsyms.c:49:
+			name += strlen(name)+1;
 			                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#595: FILE: kernel/kallsyms.c:53:
+		for (i = best+1; i < kallsyms_num_syms; i++) {
 		             ^

ERROR:SPACING: space required before the open brace '{'
#596: FILE: kernel/kallsyms.c:54:
+			if (kallsyms_addresses[i] != kallsyms_addresses[best]){

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#710: FILE: kernel/kallsyms.c:79:
+		char addrstr[sizeof("0x%lx") + (BITS_PER_LONG*3/10)];
 		                                             ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#710: FILE: kernel/kallsyms.c:79:
+		char addrstr[sizeof("0x%lx") + (BITS_PER_LONG*3/10)];
 		                                               ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#732: FILE: kernel/kallsyms.c:82:
+		printk(fmt, addrstr);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#752: FILE: kernel/kallsyms.c:89:
+			   + strlen(name) + 2*(BITS_PER_LONG*3/10)
 			                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#752: FILE: kernel/kallsyms.c:89:
+			   + strlen(name) + 2*(BITS_PER_LONG*3/10)
 			                                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#752: FILE: kernel/kallsyms.c:89:
+			   + strlen(name) + 2*(BITS_PER_LONG*3/10)
 			                                      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#775: FILE: kernel/kallsyms.c:94:
+		printk(fmt, buffer);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#778: FILE: kernel/kallsyms.c:97:
+			   + strlen(name) + 2*(BITS_PER_LONG*3/10)];
 			                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#778: FILE: kernel/kallsyms.c:97:
+			   + strlen(name) + 2*(BITS_PER_LONG*3/10)];
 			                                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#778: FILE: kernel/kallsyms.c:97:
+			   + strlen(name) + 2*(BITS_PER_LONG*3/10)];
 			                                      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#781: FILE: kernel/kallsyms.c:100:
+		printk(fmt, buffer);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#791: FILE: kernel/kallsyms.c:104:
+EXPORT_SYMBOL(kallsyms_lookup);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#831: FILE: kernel/module.c:1269:
+	if (mod->module_init
+	    && (unsigned long)mod->module_init <= addr

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#832: FILE: kernel/module.c:1270:
+	    && (unsigned long)mod->module_init <= addr
+	    && (unsigned long)mod->module_init + mod->init_size > addr)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#840: FILE: kernel/module.c:1278:
+	if ((unsigned long)mod->module_core <= addr
+	    && (unsigned long)mod->module_core + mod->core_size > addr)

WARNING:TYPO_SPELLING: 'preceeding' may be misspelled - perhaps 'preceding'?
#852: FILE: kernel/module.c:1290:
+	/* Scan for closest preceeding symbol, and next symbol. (ELF
 	                    ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#853: FILE: kernel/module.c:1291:
+           starts real symbols at 1). */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#853: FILE: kernel/module.c:1291:
+	/* Scan for closest preceeding symbol, and next symbol. (ELF
+           starts real symbols at 1). */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#853: FILE: kernel/module.c:1291:
+           starts real symbols at 1). */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#859: FILE: kernel/module.c:1297:
+		if (mod->symtab[i].st_value <= addr
+		    && mod->symtab[i].st_value > mod->symtab[best].st_value)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#862: FILE: kernel/module.c:1300:
+		if (mod->symtab[i].st_value > addr
+		    && mod->symtab[i].st_value < mod->symtab[next].st_value)

CHECK:BRACES: braces {} should be used on all arms of this statement
#869: FILE: kernel/module.c:1307:
+	if (!next) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#872: FILE: kernel/module.c:1310:
+			*size = mod->module_core+mod->core_size - (void*)addr;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#872: FILE: kernel/module.c:1310:
+			*size = mod->module_core+mod->core_size - (void*)addr;
 			                        ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#874: FILE: kernel/module.c:1312:
+			*size = mod->module_init+mod->init_size - (void*)addr;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#874: FILE: kernel/module.c:1312:
+			*size = mod->module_init+mod->init_size - (void*)addr;
 			                        ^

CHECK:BRACES: Unbalanced braces around else statement
#875: FILE: kernel/module.c:1313:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#883: FILE: kernel/module.c:1321:
+/* For kallsyms to ask for address resolution.  NULL means not found.
+   We don't lock, as this is used for oops resolution and races are a

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#884: FILE: kernel/module.c:1322:
+   lesser concern. */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#911: FILE: scripts/kallsyms:2:
+# Written by Rusty Russell <rusty@rustcorp.com.au> 2002.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000416431.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 28 warnings, 23 checks, 836 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000416431.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
