WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
Patch that help bind/rbind a mount tree. The tree can contain any combination of

WARNING:LINE_SPACING: Missing a blank line after declarations
#90: FILE: fs/namespace.c:143:
+	struct vfsmount *parent = mnt->mnt_parent;
+	BUG_ON(parent == mnt);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#90: FILE: fs/namespace.c:143:
+	BUG_ON(parent == mnt);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#134: FILE: fs/namespace.c:191:
+	struct list_head *prev = p->mnt_mounts.prev;
+	while (prev != &p->mnt_mounts) {

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#165: FILE: fs/namespace.c:223:
+static void inline clean_propagation_reference(struct vfsmount *mnt)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

WARNING:LINE_SPACING: Missing a blank line after declarations
#168: FILE: fs/namespace.c:226:
+	struct vfsmount *p;
+	for (p = mnt; p; p = next_mnt(p, mnt))

WARNING:LINE_SPACING: Missing a blank line after declarations
#222: FILE: fs/namespace.c:646:
+	struct vfsmount *p, *tmp;
+	for (p = mnt; p; p = next_mnt(p, mnt)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#223: FILE: fs/namespace.c:647:
+		if (!(tmp = p->mnt_master))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:TYPO_SPELLING: 'propogation' may be misspelled - perhaps 'propagation'?
#245: FILE: fs/namespace.c:669:
+		 * note: mount 'm' heads all its propogation peers through the
 		                                 ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'delink' may be misspelled - perhaps 'unlink'?
#248: FILE: fs/namespace.c:672:
+		 * temporarily delink the propogation peers and accumulate them
 		               ^^^^^^

WARNING:TYPO_SPELLING: 'propogation' may be misspelled - perhaps 'propagation'?
#248: FILE: fs/namespace.c:672:
+		 * temporarily delink the propogation peers and accumulate them
 		                          ^^^^^^^^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#279: FILE: fs/namespace.c:703:
+		if ((master = m->mnt_master)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#281: FILE: fs/namespace.c:705:
+			if (IS_MNT_SHARED(master))
[...]
+			else if (IS_MNT_SLAVE(master)) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#284: FILE: fs/namespace.c:708:
+				BUG_ON(!master->mnt_master);

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#304: FILE: fs/namespace.c:728:
+				       vfsmount *last, struct list_head *head)
 				                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#309: FILE: fs/namespace.c:733:
+	LIST_HEAD(nextmnt_list_head);
+	if (!last)

WARNING:RETURN_VOID: void function return statements are not generally useful
#342: FILE: fs/namespace.c:766:
+	return;
+}

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#346: FILE: fs/namespace.c:770:
+ *  @nd                : place the mount tree @source_mnt is attached
      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#390: FILE: fs/namespace.c:814:
+				struct nameidata *nd)
 				                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#404: FILE: fs/namespace.c:828:
+		attach_mnt(source_mnt, nd);
 		                       ^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#417: FILE: fs/namespace.c:841:
+	for (m = source_mnt; m; m = next_mnt(m, source_mnt)) {
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#418: FILE: fs/namespace.c:842:
+		BUG_ON(IS_MNT_UNCLONABLE(m));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#434: FILE: fs/namespace.c:858:
+		if ((ret = propagate_prepare_mount(dest_mnt, dest_dentry, m)))

WARNING:INDENTED_LABEL: labels should not be indented
#438: FILE: fs/namespace.c:862:
+      out:

WARNING:INDENTED_LABEL: labels should not be indented
#441: FILE: fs/namespace.c:865:
+      error:

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#474: FILE: fs/namespace.c:896:
+		err = attach_recursive_mnt(mnt, nd);
 		                                ^^

WARNING:INDENTED_LABEL: labels should not be indented
#513: FILE: fs/namespace.c:999:
+      path_release:

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#542: FILE: fs/pnode.c:52:
+	while ((peer_mnt = next_shared(peer_mnt)) != mnt &&
+	       peer_mnt->mnt_root != mnt->mnt_root) ;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SPACING: space prohibited before semicolon
#543: FILE: fs/pnode.c:53:
+	       peer_mnt->mnt_root != mnt->mnt_root) ;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#564: FILE: fs/pnode.c:81:
+	list_for_each_entry_safe(slave_mnt, t_mnt,
[...]
 	    make_slave_of(slave_mnt, master);

WARNING:LINE_SPACING: Missing a blank line after declarations
#631: FILE: fs/pnode.c:159:
+	LIST_HEAD(mnt_list_head);
+	spin_lock(&vfspnode_lock);

WARNING:LINE_SPACING: Missing a blank line after declarations
#655: FILE: fs/pnode.c:183:
+	struct vfsmount *m = start;
+	do {

WARNING:LINE_SPACING: Missing a blank line after declarations
#704: FILE: fs/pnode.c:232:
+	struct list_head *prev = m->mnt_slave_list.prev;
+	while (prev != &m->mnt_slave_list) {

WARNING:TYPO_SPELLING: 'propogation' may be misspelled - perhaps 'propagation'?
#716: FILE: fs/pnode.c:244:
+ * propogation tree is local to the caller.
    ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'propogation' may be misspelled - perhaps 'propagation'?
#742: FILE: fs/pnode.c:270:
+ * propogation tree is local to the caller.
    ^^^^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#754: FILE: fs/pnode.c:282:
+		BUG_ON(atomic_read(&m->mnt_count) != 1);

WARNING:LINE_SPACING: Missing a blank line after declarations
#772: FILE: fs/pnode.c:300:
+	struct vfsmount *m;
+	if (use_propagation_tree) {

WARNING:TYPO_SPELLING: 'comitted' may be misspelled - perhaps 'committed'?
#779: FILE: fs/pnode.c:307:
+		 * mounts that are yet to be comitted. Hence their
 		                             ^^^^^^^^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#783: FILE: fs/pnode.c:311:
+		list_for_each_entry(m, &mnt_list_head, mnt_list)
+		    i++;

WARNING:LINE_SPACING: Missing a blank line after declarations
#813: FILE: fs/pnode.c:341:
+		struct vfsmount *child = clone_mnt(mnt, mnt->mnt_root);
+		if (!child)

WARNING:INDENTED_LABEL: labels should not be indented
#825: FILE: fs/pnode.c:353:
+      child_error:

WARNING:LINE_SPACING: Missing a blank line after declarations
#840: FILE: fs/pnode.c:368:
+	struct vfsmount *m;
+	INIT_LIST_HEAD(&source_mnt->mnt_list);

WARNING:LINE_SPACING: Missing a blank line after declarations
#851: FILE: fs/pnode.c:379:
+	struct vfsmount *child;
+	if (list_empty(child_list_head))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'm != root_mnt'
#895: FILE: fs/pnode.c:423:
+	if ((m != root_mnt) || (child == child->mnt_parent)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'child == child->mnt_parent'
#895: FILE: fs/pnode.c:423:
+	if ((m != root_mnt) || (child == child->mnt_parent)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'm == root_mnt'
#902: FILE: fs/pnode.c:430:
+	if ((m == root_mnt) || m->mnt_master) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#906: FILE: fs/pnode.c:434:
+			BUG_ON(!pivot);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#937: FILE: fs/pnode.c:465:
+ * ^I^Ithe vfspnode_lock).$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#939: FILE: fs/pnode.c:467:
+ * ^Ia) attach a newly allocated struct vfsmount (mount C)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#940: FILE: fs/pnode.c:468:
+ * ^Ib) i)   if the mount P is shared and the shared list is pivoted at P'$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#941: FILE: fs/pnode.c:469:
+ * ^I^Iput C in the ->mnt_share of C' where C' is the$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#944: FILE: fs/pnode.c:472:
+ *   ^I^Ipivoted at P', put C in the ->mnt_slave_list of C'$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#945: FILE: fs/pnode.c:473:
+ *   ^I^Iwhere C' is the child mount of P'$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#955: FILE: fs/pnode.c:483:
+					 * mounts */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#986: FILE: fs/pnode.c:514:
+			if (m != dest_mnt && m != source_mnt
+			    && list_empty(&m->mnt_child)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#990: FILE: fs/pnode.c:518:
+			if (!(child = get_allocated_child(&child_list_head)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#997: FILE: fs/pnode.c:525:
+				BUG_ON(child == source_mnt);

WARNING:TYPO_SPELLING: 'comitted' may be misspelled - perhaps 'committed'?
#1018: FILE: fs/pnode.c:546:
+		 * mounts that are yet to be comitted. Hence their
 		                             ^^^^^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1023: FILE: fs/pnode.c:551:
+			if (!(child = get_allocated_child(&child_list_head)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1030: FILE: fs/pnode.c:558:
+				BUG_ON(child == source_mnt);

WARNING:INDENTED_LABEL: labels should not be indented
#1042: FILE: fs/pnode.c:570:
+      error:

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#1076: FILE: include/linux/pnode.h:59:
+void pnode_merge_mount(struct vfsmount *, struct vfsmount *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#1076: FILE: include/linux/pnode.h:59:
+void pnode_merge_mount(struct vfsmount *, struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#1077: FILE: include/linux/pnode.h:60:
+void pnode_slave_mount(struct vfsmount *, struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#1077: FILE: include/linux/pnode.h:60:
+void pnode_slave_mount(struct vfsmount *, struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#1078: FILE: include/linux/pnode.h:61:
+int propagate_commit_mount(struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#1079: FILE: include/linux/pnode.h:62:
+int propagate_abort_mount(struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#1080: FILE: include/linux/pnode.h:63:
+int propagate_prepare_mount(struct vfsmount *, struct dentry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#1080: FILE: include/linux/pnode.h:63:
+int propagate_prepare_mount(struct vfsmount *, struct dentry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#1080: FILE: include/linux/pnode.h:63:
+int propagate_prepare_mount(struct vfsmount *, struct dentry *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1093: FILE: include/linux/fs.h:1249:
+extern struct vfsmount *clone_mnt(struct vfsmount *, struct dentry *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#1093: FILE: include/linux/fs.h:1249:
+extern struct vfsmount *clone_mnt(struct vfsmount *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#1093: FILE: include/linux/fs.h:1249:
+extern struct vfsmount *clone_mnt(struct vfsmount *, struct dentry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1094: FILE: include/linux/fs.h:1250:
+extern void do_attach_prepare_mnt(struct vfsmount *, struct dentry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#1094: FILE: include/linux/fs.h:1250:
+extern void do_attach_prepare_mnt(struct vfsmount *, struct dentry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#1094: FILE: include/linux/fs.h:1250:
+extern void do_attach_prepare_mnt(struct vfsmount *, struct dentry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#1094: FILE: include/linux/fs.h:1250:
+extern void do_attach_prepare_mnt(struct vfsmount *, struct dentry *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1096: FILE: include/linux/fs.h:1252:
+extern void do_attach_commit_mnt(struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#1096: FILE: include/linux/fs.h:1252:
+extern void do_attach_commit_mnt(struct vfsmount *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1097: FILE: include/linux/fs.h:1253:
+extern void do_detach_prepare_mnt(struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#1097: FILE: include/linux/fs.h:1253:
+extern void do_detach_prepare_mnt(struct vfsmount *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1098: FILE: include/linux/fs.h:1254:
+extern void do_detach_mount(struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#1098: FILE: include/linux/fs.h:1254:
+extern void do_detach_mount(struct vfsmount *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000150526.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 64 warnings, 12 checks, 1001 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000150526.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
