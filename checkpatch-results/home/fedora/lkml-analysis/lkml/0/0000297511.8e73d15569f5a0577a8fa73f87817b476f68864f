WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#60: 
 - cpu.c: minor bugfix: grab the cpucontrol sem around notifier registration.

WARNING:TYPO_SPELLING: 'wierd' may be misspelled - perhaps 'weird'?
#131: 
     Simpler than recoding do_softirq() for this wierd case.
                                                 ^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required before the open parenthesis '('
#268: FILE: drivers/scsi/scsi.c:1141:
+	switch(action) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#283: FILE: drivers/scsi/scsi.c:1156:
+static struct notifier_block __devinitdata scsi_cpu_nb = {

WARNING:MISPLACED_INIT: __devinitdata should be placed after scsi_cpu_nb
#283: FILE: drivers/scsi/scsi.c:1156:
+static struct notifier_block __devinitdata scsi_cpu_nb = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#333: FILE: fs/buffer.c:3040:
+static int buffer_cpu_notify(struct notifier_block *self,
+			      unsigned long action, void *hcpu)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#358: FILE: include/linux/cpu.h:66:
 }
+int cpu_down(unsigned int cpu);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#369: FILE: include/linux/interrupt.h:214:
+extern void tasklet_kill_immediate(struct tasklet_struct *t, unsigned int cpu);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#403: FILE: include/linux/sched.h:551:
+extern void migrate_all_tasks(void);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#441: FILE: kernel/cpu.c:29:
+	if ((ret = down_interruptible(&cpucontrol)) != 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#466: FILE: kernel/cpu.c:53:
+			printk(KERN_WARNING "Task %s is on cpu %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#467: FILE: kernel/cpu.c:54:
+			printk(KERN_WARNING "Task %s is on cpu %d\n",
+				p->comm, cpu);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#473: FILE: kernel/cpu.c:60:
+ * cpu' with certain environment variables set.  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#490: FILE: kernel/cpu.c:77:
+	envp [i++] = "HOME=/";

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#491: FILE: kernel/cpu.c:78:
+	envp [i++] = "PATH=/sbin:/bin:/usr/sbin:/usr/bin";

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#492: FILE: kernel/cpu.c:79:
+	envp [i++] = cpu_str;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#493: FILE: kernel/cpu.c:80:
+	envp [i++] = action_str;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#494: FILE: kernel/cpu.c:81:
+	envp [i] = NULL;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#523: FILE: kernel/cpu.c:110:
+	if ((err = lock_cpu_hotplug_interruptible()) != 0)

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#549: FILE: kernel/cpu.c:136:
+		yield();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#560: FILE: kernel/cpu.c:147:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#577: FILE: kernel/cpu.c:164:
 int __devinit cpu_up(unsigned int cpu)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#583: FILE: kernel/cpu.c:169:
+	if ((ret = lock_cpu_hotplug_interruptible()) != 0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#792: FILE: kernel/sched.c:2810:
+ * cpu via set_cpus_allowed.  Machine is stopped.  */

WARNING:LINE_SPACING: Missing a blank line after declarations
#810: FILE: kernel/sched.c:2828:
+		cpumask_t mask;
+		if (tsk == current)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#819: FILE: kernel/sched.c:2837:
+		 * one online cpu will be migrated. */

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#823: FILE: kernel/sched.c:2841:
+		if (dest_cpu == NR_CPUS)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#825: FILE: kernel/sched.c:2843:
+		if (dest_cpu == NR_CPUS) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#831: FILE: kernel/sched.c:2849:
+			/* Don't tell them about moving exiting tasks
+			   or kernel threads (both mm NULL), since

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#832: FILE: kernel/sched.c:2850:
+			   they never leave kernel. */

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#833: FILE: kernel/sched.c:2851:
+			if (tsk->mm && printk_ratelimit())

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#834: FILE: kernel/sched.c:2852:
+				printk(KERN_INFO "process %d (%s) no "

WARNING:SPLIT_STRING: quoted string split across lines
#835: FILE: kernel/sched.c:2853:
+				printk(KERN_INFO "process %d (%s) no "
+				       "longer affine to cpu%d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#855: FILE: kernel/sched.c:2887:
+			yield();

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#859: FILE: kernel/sched.c:2891:
+		/* Unbind it from offline cpu so it can run.  Fall thru. */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#860: FILE: kernel/sched.c:2892:
+		kthread_bind(cpu_rq(cpu)->migration_thread,smp_processor_id());
 		                                          ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#864: FILE: kernel/sched.c:2896:
+ ^I^IBUG_ON(cpu_rq(cpu)->nr_running != 0);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#864: FILE: kernel/sched.c:2896:
+ ^I^IBUG_ON(cpu_rq(cpu)->nr_running != 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#864: FILE: kernel/sched.c:2896:
+ ^I^IBUG_ON(cpu_rq(cpu)->nr_running != 0);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#864: FILE: kernel/sched.c:2896:
+ 		BUG_ON(cpu_rq(cpu)->nr_running != 0);

ERROR:CODE_INDENT: code indent should use tabs where possible
#865: FILE: kernel/sched.c:2897:
+ ^I^Ibreak;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#865: FILE: kernel/sched.c:2897:
+ ^I^Ibreak;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#865: FILE: kernel/sched.c:2897:
+ ^I^Ibreak;$

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#875: FILE: kernel/sched.c:2903:
 static struct notifier_block __devinitdata migration_notifier = {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#903: FILE: kernel/softirq.c:324:
+			/* Preempt disable stops cpu going offline.
+			   If already offline, we'll be on wrong CPU:

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#904: FILE: kernel/softirq.c:325:
+			   don't process */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#943: FILE: kernel/softirq.c:364:
+	BUG_ON(cpu_online(cpu));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#944: FILE: kernel/softirq.c:365:
+	BUG_ON(test_bit(TASKLET_STATE_RUN, &t->state));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#956: FILE: kernel/softirq.c:377:
+	BUG();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#967: FILE: kernel/softirq.c:388:
+	for (i = &__get_cpu_var(tasklet_vec).list; *i; i = &(*i)->next);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#972: FILE: kernel/softirq.c:393:
+	for (i = &__get_cpu_var(tasklet_hi_vec).list; *i; i = &(*i)->next);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#981: FILE: kernel/softirq.c:402:
 static int __devinit cpu_callback(struct notifier_block *nfb,

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#997: FILE: kernel/softirq.c:426:
+		/* Unbind so it can run.  Fall thru. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1026: FILE: kernel/timer.c:1235:
+		/* We're locking backwards from __mod_timer order here,
+		   beware deadlock. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1026: FILE: kernel/timer.c:1235:
+		   beware deadlock. */

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1037: FILE: kernel/timer.c:1246:
+static void __devinit migrate_timers(int cpu)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1043: FILE: kernel/timer.c:1252:
+	BUG_ON(cpu_online(cpu));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1059: FILE: kernel/timer.c:1268:
+		BUG();

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1065: FILE: kernel/timer.c:1274:
+		if (!migrate_timer_list(new_base, old_base->tv2.vec + i)
+		    || !migrate_timer_list(new_base, old_base->tv3.vec + i)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1066: FILE: kernel/timer.c:1275:
+		    || !migrate_timer_list(new_base, old_base->tv3.vec + i)
+		    || !migrate_timer_list(new_base, old_base->tv4.vec + i)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1067: FILE: kernel/timer.c:1276:
+		    || !migrate_timer_list(new_base, old_base->tv4.vec + i)
+		    || !migrate_timer_list(new_base, old_base->tv5.vec + i))

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1084: FILE: kernel/timer.c:1293:
 static int __devinit timer_cpu_notify(struct notifier_block *self, 

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1121: FILE: kernel/workqueue.c:66:
+/* All the workqueues on the system, for hotplug cpu to add/remove
+   threads to each one as cpus come/go.  Protected by cpucontrol

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1122: FILE: kernel/workqueue.c:67:
+   sem. */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1259: FILE: kernel/workqueue.c:390:
+		printk("Taking work for %s\n", wq->name);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1260: FILE: kernel/workqueue.c:391:
+		work = list_entry(list.next,struct work_struct,entry);
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1260: FILE: kernel/workqueue.c:391:
+		work = list_entry(list.next,struct work_struct,entry);
 		                                              ^

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1268: FILE: kernel/workqueue.c:399:
+static int __devinit workqueue_cpu_callback(struct notifier_block *nfb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1269: FILE: kernel/workqueue.c:400:
+static int __devinit workqueue_cpu_callback(struct notifier_block *nfb,
+				  unsigned long action,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1280: FILE: kernel/workqueue.c:411:
+				printk("workqueue for %i failed\n", hotcpu);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1337: FILE: lib/radix-tree.c:427:
+                            unsigned long action,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1337: FILE: lib/radix-tree.c:427:
+static int radix_tree_callback(struct notifier_block *nfb,
+                            unsigned long action,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1337: FILE: lib/radix-tree.c:427:
+                            unsigned long action,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1338: FILE: lib/radix-tree.c:428:
+                            void *hcpu)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1338: FILE: lib/radix-tree.c:428:
+                            void *hcpu)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1340: FILE: lib/radix-tree.c:430:
+       int cpu = (long)hcpu;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1341: FILE: lib/radix-tree.c:431:
+       struct radix_tree_preload *rtp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1344: FILE: lib/radix-tree.c:434:
+       if (action == CPU_DEAD) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1344: FILE: lib/radix-tree.c:434:
+       if (action == CPU_DEAD) {
+               rtp = &per_cpu(radix_tree_preloads, cpu);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1345: FILE: lib/radix-tree.c:435:
+               rtp = &per_cpu(radix_tree_preloads, cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1345: FILE: lib/radix-tree.c:435:
+               rtp = &per_cpu(radix_tree_preloads, cpu);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1346: FILE: lib/radix-tree.c:436:
+               while (rtp->nr) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1346: FILE: lib/radix-tree.c:436:
+               while (rtp->nr) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#1346: FILE: lib/radix-tree.c:436:
+               while (rtp->nr) {
+                       kmem_cache_free(radix_tree_node_cachep,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1347: FILE: lib/radix-tree.c:437:
+                       kmem_cache_free(radix_tree_node_cachep,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1347: FILE: lib/radix-tree.c:437:
+                       kmem_cache_free(radix_tree_node_cachep,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1348: FILE: lib/radix-tree.c:438:
+                                       rtp->nodes[rtp->nr-1]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1348: FILE: lib/radix-tree.c:438:
+                                       rtp->nodes[rtp->nr-1]);$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1348: FILE: lib/radix-tree.c:438:
+                                       rtp->nodes[rtp->nr-1]);
                                                          ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1349: FILE: lib/radix-tree.c:439:
+                       rtp->nodes[rtp->nr-1] = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1349: FILE: lib/radix-tree.c:439:
+                       rtp->nodes[rtp->nr-1] = NULL;$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1349: FILE: lib/radix-tree.c:439:
+                       rtp->nodes[rtp->nr-1] = NULL;
                                          ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1350: FILE: lib/radix-tree.c:440:
+                       rtp->nr--;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1350: FILE: lib/radix-tree.c:440:
+                       rtp->nr--;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1351: FILE: lib/radix-tree.c:441:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1351: FILE: lib/radix-tree.c:441:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1352: FILE: lib/radix-tree.c:442:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1353: FILE: lib/radix-tree.c:443:
+       return NOTIFY_OK;$

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1425: FILE: mm/slab.c:605:
 static int __devinit cpuup_callback(struct notifier_block *nfb,

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1435: FILE: mm/slab.c:643:
+		/* fall thru */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1543: FILE: mm/vmscan.c:1092:
+/* It's optimal to keep kswapds on the same CPUs as their memory, but
+   not required for correctness.  So if the last cpu in a node goes

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1545: FILE: mm/vmscan.c:1094:
+   restore their cpu bindings. */

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1546: FILE: mm/vmscan.c:1095:
+static int __devinit cpu_callback(struct notifier_block *nfb,

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1556: FILE: mm/vmscan.c:1105:
+			if (any_online_cpu(mask) != NR_CPUS)

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1572: FILE: mm/vmscan.c:1120:
+		pgdat->kswapd
+		= find_task_by_pid(kernel_thread(kswapd, pgdat, CLONE_KERNEL));

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000297511.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 67 warnings, 13 checks, 1373 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000297511.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
