WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#70: FILE: kernel/kprobes.c:153:
+	char *module, namebuf[KSYM_NAME_LEN+1];
 	                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#74: FILE: kernel/kprobes.c:157:
+	if(k->pre_handler) {

ERROR:SPACING: space required before the open parenthesis '('
#83: FILE: kernel/kprobes.c:166:
+	if(k->post_handler) {

ERROR:SPACING: space required before the open parenthesis '('
#92: FILE: kernel/kprobes.c:175:
+	if(k->fault_handler) {

ERROR:SPACING: space required before the open parenthesis '('
#101: FILE: kernel/kprobes.c:184:
+	if(k->break_handler) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#113: FILE: kernel/kprobes.c:196:
+ssize_t kprobes_read(struct file *file, char __user *buf,
+			 size_t size, loff_t *off)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#121: FILE: kernel/kprobes.c:204:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#123: FILE: kernel/kprobes.c:206:
+	for(i = 0; i < KPROBE_TABLE_SIZE; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#126: FILE: kernel/kprobes.c:209:
+			if((k = hlist_entry(node, struct kprobe, hlist))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#126: FILE: kernel/kprobes.c:209:
+			if((k = hlist_entry(node, struct kprobe, hlist))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#137: FILE: kernel/kprobes.c:220:
+struct file_operations kprobes_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:SPACING: space required before the open parenthesis '('
#152: FILE: kernel/kprobes.c:237:
+	if(!(kprobes_dir = debugfs_create_dir("kprobes", NULL)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#152: FILE: kernel/kprobes.c:237:
+	if(!(kprobes_dir = debugfs_create_dir("kprobes", NULL)))

ERROR:SPACING: space required before the open parenthesis '('
#154: FILE: kernel/kprobes.c:239:
+	if(!(kprobes_list = debugfs_create_file("list", S_IRUGO, kprobes_dir,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#154: FILE: kernel/kprobes.c:239:
+	if(!(kprobes_list = debugfs_create_file("list", S_IRUGO, kprobes_dir,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#154: FILE: kernel/kprobes.c:239:
+	if(!(kprobes_list = debugfs_create_file("list", S_IRUGO, kprobes_dir,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: kernel/kprobes.c:240:
+^I^I^I^I^I  ^INULL, &kprobes_fops))) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#155: FILE: kernel/kprobes.c:240:
+^I^I^I^I^I  ^INULL, &kprobes_fops))) {$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#155: FILE: kernel/kprobes.c:240:
+	if(!(kprobes_list = debugfs_create_file("list", S_IRUGO, kprobes_dir,
+					  	NULL, &kprobes_fops))) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000215722.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 4 warnings, 3 checks, 121 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000215722.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
