WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#37: 
# mount -o loop -t bfs /bfs.img /mnt

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#38: 
# df -i /mnt

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#41: 
# df -k /mnt

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#44: 
# cp 60k-archive.zip /mnt/mt.zip

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
# df -k /mnt

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
# df -i /mnt

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#51: 
# rm /mnt/mt.zip

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#52: 
# echo $?

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#57: 
# df -i /mnt

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#60: 
# df -k /mnt

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#99: FILE: fs/bfs/dir.c:24:
+static int bfs_add_entry(struct inode * dir, const unsigned char * name, int namelen, int ino);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#99: FILE: fs/bfs/dir.c:24:
+static int bfs_add_entry(struct inode * dir, const unsigned char * name, int namelen, int ino);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#102: FILE: fs/bfs/dir.c:26:
+	const unsigned char * name, int namelen, struct bfs_dirent ** res_dir);

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#102: FILE: fs/bfs/dir.c:26:
+	const unsigned char * name, int namelen, struct bfs_dirent ** res_dir);

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#111: FILE: fs/bfs/dir.c:57:
+				if (filldir(dirent, de->name, size, f->f_pos, le16_to_cpu(de->ino), DT_UNKNOWN) < 0) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#138: FILE: fs/bfs/dir.c:187:
+^Iif (!bh || le16_to_cpu(de->ino) != inode->i_ino) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#156: FILE: fs/bfs/dir.c:274:
+static int bfs_add_entry(struct inode * dir, const unsigned char * name, int namelen, int ino)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#156: FILE: fs/bfs/dir.c:274:
+static int bfs_add_entry(struct inode * dir, const unsigned char * name, int namelen, int ino)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#174: FILE: fs/bfs/dir.c:321:
+static inline int bfs_namecmp(int len, const unsigned char * name, const char * buffer)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#174: FILE: fs/bfs/dir.c:321:
+static inline int bfs_namecmp(int len, const unsigned char * name, const char * buffer)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#183: FILE: fs/bfs/dir.c:329:
+	const unsigned char * name, int namelen, struct bfs_dirent ** res_dir)

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#183: FILE: fs/bfs/dir.c:329:
+	const unsigned char * name, int namelen, struct bfs_dirent ** res_dir)

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

ERROR:CODE_INDENT: code indent should use tabs where possible
#205: FILE: fs/bfs/file.c:44:
+                           unsigned long end, unsigned long where)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: fs/bfs/file.c:44:
+                           unsigned long end, unsigned long where)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: fs/bfs/file.c:74:
+                                create, (unsigned long)block, phys);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#230: FILE: fs/bfs/file.c:74:
+			dprintf("c=%d, b=%08lx, phys=%09lx (granted)\n",
+                                create, (unsigned long)block, phys);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: fs/bfs/file.c:74:
+                                create, (unsigned long)block, phys);$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#250: FILE: fs/bfs/file.c:93:
+	/* if the last data block for this file is the last allocated
+	   block, we can extend the file trivially, without moving it

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#251: FILE: fs/bfs/file.c:94:
+	   anywhere */

ERROR:CODE_INDENT: code indent should use tabs where possible
#265: FILE: fs/bfs/file.c:120:
+                create, (unsigned long)block, phys);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#265: FILE: fs/bfs/file.c:120:
+	dprintf("c=%d, b=%08lx, phys=%08lx (moved)\n",
+                create, (unsigned long)block, phys);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: fs/bfs/file.c:120:
+                create, (unsigned long)block, phys);$

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:LONG_LINE: line length of 135 exceeds 100 columns
#309: FILE: fs/bfs/inode.c:78:
+        if (inode->i_size || inode->i_blocks) dprintf("Registered inode with %lld size, %ld blocks\n", inode->i_size, inode->i_blocks);

ERROR:CODE_INDENT: code indent should use tabs where possible
#309: FILE: fs/bfs/inode.c:78:
+        if (inode->i_size || inode->i_blocks) dprintf("Registered inode with %lld size, %ld blocks\n", inode->i_size, inode->i_blocks);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#309: FILE: fs/bfs/inode.c:78:
+        if (inode->i_size || inode->i_blocks) dprintf("Registered inode with %lld size, %ld blocks\n", inode->i_size, inode->i_blocks);$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#309: FILE: fs/bfs/inode.c:78:
+        if (inode->i_size || inode->i_blocks) dprintf("Registered inode with %lld size, %ld blocks\n", inode->i_size, inode->i_blocks);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#332: FILE: fs/bfs/inode.c:94:
+        unsigned long i_sblock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: fs/bfs/inode.c:94:
+        unsigned long i_sblock;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#337: FILE: fs/bfs/inode.c:99:
+        dprintf("ino=%08x\n", ino);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#337: FILE: fs/bfs/inode.c:99:
+        dprintf("ino=%08x\n", ino);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#338: FILE: fs/bfs/inode.c:100:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#338: FILE: fs/bfs/inode.c:100:
+        $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#338: FILE: fs/bfs/inode.c:100:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#385: FILE: fs/bfs/inode.c:131:
+        i_sblock = BFS_I(inode)->i_sblock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#385: FILE: fs/bfs/inode.c:131:
+        i_sblock = BFS_I(inode)->i_sblock;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#391: FILE: fs/bfs/inode.c:137:
+        dprintf("Written ino=%d into %d:%d\n",le16_to_cpu(di->i_ino),block,off);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#391: FILE: fs/bfs/inode.c:137:
+        dprintf("Written ino=%d into %d:%d\n",le16_to_cpu(di->i_ino),block,off);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#391: FILE: fs/bfs/inode.c:137:
+        dprintf("Written ino=%d into %d:%d\n",le16_to_cpu(di->i_ino),block,off);
                                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#391: FILE: fs/bfs/inode.c:137:
+        dprintf("Written ino=%d into %d:%d\n",le16_to_cpu(di->i_ino),block,off);
                                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#391: FILE: fs/bfs/inode.c:137:
+        dprintf("Written ino=%d into %d:%d\n",le16_to_cpu(di->i_ino),block,off);
                                                                           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#399: FILE: fs/bfs/inode.c:151:
+        struct bfs_inode_info * bi = BFS_I(inode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#399: FILE: fs/bfs/inode.c:151:
+        struct bfs_inode_info * bi = BFS_I(inode);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#399: FILE: fs/bfs/inode.c:151:
+        struct bfs_inode_info * bi = BFS_I(inode);

CHECK:SPACING: No space is necessary after a cast
#418: FILE: fs/bfs/inode.c:172:
+	di = (struct bfs_inode *) bh->b_data + off;

ERROR:CODE_INDENT: code indent should use tabs where possible
#419: FILE: fs/bfs/inode.c:173:
+        if (bi->i_dsk_ino) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#419: FILE: fs/bfs/inode.c:173:
+        if (bi->i_dsk_ino) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#426: FILE: fs/bfs/inode.c:178:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#426: FILE: fs/bfs/inode.c:178:
+        }$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#443: FILE: fs/bfs/inode.c:291:
+		if (i > PAGE_SIZE-100) break;
 		                 ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#443: FILE: fs/bfs/inode.c:291:
+		if (i > PAGE_SIZE-100) break;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#452: FILE: fs/bfs/inode.c:307:
+	unsigned i, imap_len;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#475: FILE: fs/bfs/inode.c:333:
+^Iinfo->si_lasti = (le32_to_cpu(bfs_sb->s_start) - BFS_BSIZE)/sizeof(struct bfs_inode) $

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#475: FILE: fs/bfs/inode.c:333:
+	info->si_lasti = (le32_to_cpu(bfs_sb->s_start) - BFS_BSIZE)/sizeof(struct bfs_inode) 
 	                                                           ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#485: FILE: fs/bfs/inode.c:357:
+	info->si_blocks = (le32_to_cpu(bfs_sb->s_end) + 1)>>BFS_BSIZE_BITS; /* for statfs(2) */
 	                                                  ^

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#486: FILE: fs/bfs/inode.c:358:
+	info->si_freeb = (le32_to_cpu(bfs_sb->s_end) + 1 -  cpu_to_le32(bfs_sb->s_start))>>BFS_BSIZE_BITS;

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#486: FILE: fs/bfs/inode.c:358:
+	info->si_freeb = (le32_to_cpu(bfs_sb->s_end) + 1 -  cpu_to_le32(bfs_sb->s_start))>>BFS_BSIZE_BITS;
 	                                                                                 ^

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ip' - possible side-effects?
#522: FILE: include/linux/bfs_fs.h:68:
+#define BFS_NZFILESIZE(ip) \
+        ((cpu_to_le32((ip)->i_eoffset) + 1) -  cpu_to_le32((ip)->i_sblock) * BFS_BSIZE)

ERROR:CODE_INDENT: code indent should use tabs where possible
#523: FILE: include/linux/bfs_fs.h:69:
+        ((cpu_to_le32((ip)->i_eoffset) + 1) -  cpu_to_le32((ip)->i_sblock) * BFS_BSIZE)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#523: FILE: include/linux/bfs_fs.h:69:
+        ((cpu_to_le32((ip)->i_eoffset) + 1) -  cpu_to_le32((ip)->i_sblock) * BFS_BSIZE)$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ip' - possible side-effects?
#525: FILE: include/linux/bfs_fs.h:71:
+#define BFS_FILESIZE(ip) \
+        ((ip)->i_sblock == 0 ? 0 : BFS_NZFILESIZE(ip))

ERROR:CODE_INDENT: code indent should use tabs where possible
#526: FILE: include/linux/bfs_fs.h:72:
+        ((ip)->i_sblock == 0 ? 0 : BFS_NZFILESIZE(ip))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#526: FILE: include/linux/bfs_fs.h:72:
+        ((ip)->i_sblock == 0 ? 0 : BFS_NZFILESIZE(ip))$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ip' - possible side-effects?
#528: FILE: include/linux/bfs_fs.h:74:
+#define BFS_FILEBLOCKS(ip) \
+        ((ip)->i_sblock == 0 ? 0 : (cpu_to_le32((ip)->i_eblock) + 1) -  cpu_to_le32((ip)->i_sblock))

ERROR:CODE_INDENT: code indent should use tabs where possible
#529: FILE: include/linux/bfs_fs.h:75:
+        ((ip)->i_sblock == 0 ? 0 : (cpu_to_le32((ip)->i_eblock) + 1) -  cpu_to_le32((ip)->i_sblock))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#529: FILE: include/linux/bfs_fs.h:75:
+        ((ip)->i_sblock == 0 ? 0 : (cpu_to_le32((ip)->i_eblock) + 1) -  cpu_to_le32((ip)->i_sblock))$

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#532: FILE: include/linux/bfs_fs.h:77:
+	((cpu_to_le32(bfs_sb->s_from) != -1) && (cpu_to_le32(bfs_sb->s_to) != -1) && !(sb->s_flags & MS_RDONLY))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000153859.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 34 errors, 37 warnings, 10 checks, 422 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000153859.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
