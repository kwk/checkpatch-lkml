WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#74: FILE: arch/s390/kernel/sgrb.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#75: FILE: arch/s390/kernel/sgrb.c:2:
+ * arch/s390/kernel/sgrb.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#95: FILE: arch/s390/kernel/sgrb.c:22:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#96: FILE: arch/s390/kernel/sgrb.c:23:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#99: FILE: arch/s390/kernel/sgrb.c:26:
+#define SGRB_C_REVISION "$Revision: 1.3 $"

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*seg)...) over kmalloc(sizeof(struct sgrb_seg)...)
#110: FILE: arch/s390/kernel/sgrb.c:37:
+	seg = kmalloc(sizeof(struct sgrb_seg), gfp);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#165: FILE: arch/s390/kernel/sgrb.c:92:
+sgrb_ptr_identical(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#210: FILE: arch/s390/kernel/sgrb.c:137:
+sgrb_alloc(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#251: FILE: arch/s390/kernel/sgrb.c:178:
+sgrb_next_entry(

WARNING:TYPO_SPELLING: 'whithout' may be misspelled - perhaps 'without'?
#295: FILE: arch/s390/kernel/sgrb.c:222:
+ *     if there is room whithout the need to overwrite the oldest
                         ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#361: FILE: arch/s390/kernel/sgrb.c:288:
+sgrb_consume_nodelete(

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#381: FILE: arch/s390/kernel/statistic.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#382: FILE: arch/s390/kernel/statistic.c:2:
+ *  arch/s390/kernel/statistic.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#404: FILE: arch/s390/kernel/statistic.c:24:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#405: FILE: arch/s390/kernel/statistic.c:25:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#413: FILE: arch/s390/kernel/statistic.c:33:
+ *	  as well (e.g. seperate statistic for read/write/no-data commands);
   	                ^^^^^^^^

WARNING:TYPO_SPELLING: 'reformating' may be misspelled - perhaps 'reformatting'?
#419: FILE: arch/s390/kernel/statistic.c:39:
+ *	- provide a (perl?) script for automatic reformating and processing of
   	                                         ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'occurences' may be misspelled - perhaps 'occurrences'?
#452: FILE: arch/s390/kernel/statistic.c:72:
+ *	  (e.g. a matrix of occurences for latencies of requests of
   	                    ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'statitics' may be misspelled - perhaps 'statistics'?
#456: FILE: arch/s390/kernel/statistic.c:76:
+ *	  statitics update when the user reads the data file; would be useful
   	  ^^^^^^^^^

WARNING:TYPO_SPELLING: 'statitics' may be misspelled - perhaps 'statistics'?
#460: FILE: arch/s390/kernel/statistic.c:80:
+ *	  flexibility, and have the statitics user interface handle any
   	                            ^^^^^^^^^

WARNING:TYPO_SPELLING: 'unaccesible' may be misspelled - perhaps 'unaccessible'?
#476: FILE: arch/s390/kernel/statistic.c:96:
+ *	  data as well its data is accessible (unaccesible during redefinition),
   	                                       ^^^^^^^^^^^

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#493: FILE: arch/s390/kernel/statistic.c:113:
+#define STATISTIC_C_REVISION "$Revision: 1.16 $"

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/bug.h> instead of <asm/bug.h>
#504: FILE: arch/s390/kernel/statistic.c:124:
+#include <asm/bug.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#505: FILE: arch/s390/kernel/statistic.c:125:
+#include <asm/uaccess.h>

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#517: FILE: arch/s390/kernel/statistic.c:137:
+static ssize_t statistic_interface_generic_write(struct file *, const char __user *, size_t, loff_t *);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:CONST_STRUCT: struct file_operations should normally be const
#524: FILE: arch/s390/kernel/statistic.c:144:
+struct file_operations statistic_def_file_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#532: FILE: arch/s390/kernel/statistic.c:152:
+struct file_operations statistic_data_file_ops = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#540: FILE: arch/s390/kernel/statistic.c:160:
+static char * statistic_strings[] = {

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#623: FILE: arch/s390/kernel/statistic.c:243:
+        sec = nsec;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#623: FILE: arch/s390/kernel/statistic.c:243:
+        sec = nsec;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#624: FILE: arch/s390/kernel/statistic.c:244:
+        do_div(sec, 1000000000);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#624: FILE: arch/s390/kernel/statistic.c:244:
+        do_div(sec, 1000000000);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#625: FILE: arch/s390/kernel/statistic.c:245:
+        xtime->tv_sec = sec;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#625: FILE: arch/s390/kernel/statistic.c:245:
+        xtime->tv_sec = sec;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#626: FILE: arch/s390/kernel/statistic.c:246:
+        xtime->tv_nsec = nsec - sec * 1000000000;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#626: FILE: arch/s390/kernel/statistic.c:246:
+        xtime->tv_nsec = nsec - sec * 1000000000;$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#832: FILE: arch/s390/kernel/statistic.c:452:
+statistic_create(

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*stat)...) over kmalloc(sizeof(struct statistic)...)
#843: FILE: arch/s390/kernel/statistic.c:463:
+	stat = kmalloc(sizeof(struct statistic), GFP_KERNEL);

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#849: FILE: arch/s390/kernel/statistic.c:469:
+	strlcpy(stat->name, name, sizeof(stat->name));

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#850: FILE: arch/s390/kernel/statistic.c:470:
+	strlcpy(stat->units, units, sizeof(stat->units));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#852: FILE: arch/s390/kernel/statistic.c:472:
+	statistic_define_value(stat, STATISTIC_RANGE_MIN, STATISTIC_RANGE_MAX,
+				STATISTIC_DEF_MODE_INC);

WARNING:MISORDERED_TYPE: type 'long long signed' should be specified in [[un]signed] [short|int|long|long long] order
#908: FILE: arch/s390/kernel/statistic.c:528:
+				(long long signed)stat->range_min,

WARNING:MISORDERED_TYPE: type 'long long signed' should be specified in [[un]signed] [short|int|long|long long] order
#910: FILE: arch/s390/kernel/statistic.c:530:
+				(long long signed)stat->range_max);

WARNING:MISORDERED_TYPE: type 'long long unsigned' should be specified in [[un]signed] [short|int|long|long long] order
#919: FILE: arch/s390/kernel/statistic.c:539:
+				(long long unsigned)stat->hits_out_of_range,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#944: FILE: arch/s390/kernel/statistic.c:564:
+_statistic_format_data_value(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#954: FILE: arch/s390/kernel/statistic.c:574:
+statistic_format_data_value(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#994: FILE: arch/s390/kernel/statistic.c:614:
+	return _statistic_add_value_increments(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1005: FILE: arch/s390/kernel/statistic.c:625:
+	return _statistic_add_value_products(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1042: FILE: arch/s390/kernel/statistic.c:662:
+int statistic_define_value(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1080: FILE: arch/s390/kernel/statistic.c:700:
+_statistic_alloc_range(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1092: FILE: arch/s390/kernel/statistic.c:712:
+	_statistic_alloc_range(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1098: FILE: arch/s390/kernel/statistic.c:718:
+_statistic_format_data_range(

WARNING:MISORDERED_TYPE: type 'long long unsigned' should be specified in [[un]signed] [short|int|long|long long] order
#1102: FILE: arch/s390/kernel/statistic.c:722:
+	long long unsigned whole = 0;

WARNING:MISORDERED_TYPE: type 'long long signed' should be specified in [[un]signed] [short|int|long|long long] order
#1103: FILE: arch/s390/kernel/statistic.c:723:
+	long long signed min = 0, max = 0, decimal = 0, last_digit;

WARNING:MISORDERED_TYPE: type 'long long unsigned' should be specified in [[un]signed] [short|int|long|long long] order
#1126: FILE: arch/s390/kernel/statistic.c:746:
+				(long long unsigned)range->num,

WARNING:MISORDERED_TYPE: type 'long long signed' should be specified in [[un]signed] [short|int|long|long long] order
#1127: FILE: arch/s390/kernel/statistic.c:747:
+				(long long signed)min,

WARNING:MISORDERED_TYPE: type 'long long signed' should be specified in [[un]signed] [short|int|long|long long] order
#1129: FILE: arch/s390/kernel/statistic.c:749:
+				(long long signed)max);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1133: FILE: arch/s390/kernel/statistic.c:753:
+statistic_format_data_range(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1142: FILE: arch/s390/kernel/statistic.c:762:
+	_statistic_format_data_range(

WARNING:TYPO_SPELLING: 'occurences' may be misspelled - perhaps 'occurrences'?
#1179: FILE: arch/s390/kernel/statistic.c:799:
+ * as multiple occurences of a particular discrimintator with regard to
                ^^^^^^^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1200: FILE: arch/s390/kernel/statistic.c:820:
+int statistic_define_range(

WARNING:LINE_SPACING: Missing a blank line after declarations
#1255: FILE: arch/s390/kernel/statistic.c:875:
+	unsigned long long index = value - stat->range_min;
+	do_div(index, stat->data.array.base_interval);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1264: FILE: arch/s390/kernel/statistic.c:884:
+	for (index = 0;
[...]
+	     index++);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1285: FILE: arch/s390/kernel/statistic.c:905:
+	for (i = 0;
[...]
+	     i++);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1309: FILE: arch/s390/kernel/statistic.c:929:
+statistic_format_data_array_line(

WARNING:MISORDERED_TYPE: type 'long long signed' should be specified in [[un]signed] [short|int|long|long long] order
#1321: FILE: arch/s390/kernel/statistic.c:941:
+				prefix, (long long signed)value,

WARNING:MISORDERED_TYPE: type 'long long unsigned' should be specified in [[un]signed] [short|int|long|long long] order
#1322: FILE: arch/s390/kernel/statistic.c:942:
+				(long long unsigned)stat->data.array.hits[i]);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1327: FILE: arch/s390/kernel/statistic.c:947:
+statistic_format_data_array(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1334: FILE: arch/s390/kernel/statistic.c:954:
+		retval = statistic_format_data_array_line(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1340: FILE: arch/s390/kernel/statistic.c:960:
+	retval = statistic_format_data_array_line(

WARNING:MISORDERED_TYPE: type 'long long unsigned' should be specified in [[un]signed] [short|int|long|long long] order
#1352: FILE: arch/s390/kernel/statistic.c:972:
+			(long long unsigned)stat->data.array.base_interval,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1360: FILE: arch/s390/kernel/statistic.c:980:
+	int index = statistic_array_calc_index_lin(stat, value);
+	return (stat->data.array.hits[index] += incr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1367: FILE: arch/s390/kernel/statistic.c:987:
+	int index = statistic_array_calc_index_log2(stat, value);
+	return (stat->data.array.hits[index] += incr);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1415: FILE: arch/s390/kernel/statistic.c:1035:
+int statistic_define_array(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1479: FILE: arch/s390/kernel/statistic.c:1099:
+statistic_format_data_list(

WARNING:MISORDERED_TYPE: type 'long long signed' should be specified in [[un]signed] [short|int|long|long long] order
#1492: FILE: arch/s390/kernel/statistic.c:1112:
+					(long long signed)entry->value,

WARNING:MISORDERED_TYPE: type 'long long unsigned' should be specified in [[un]signed] [short|int|long|long long] order
#1493: FILE: arch/s390/kernel/statistic.c:1113:
+					(long long unsigned)entry->hits);

WARNING:MISORDERED_TYPE: type 'long long unsigned' should be specified in [[un]signed] [short|int|long|long long] order
#1506: FILE: arch/s390/kernel/statistic.c:1126:
+			(long long unsigned)stat->data.list.hits_missed);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1510: FILE: arch/s390/kernel/statistic.c:1130:
+statistic_add_list_sort(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1526: FILE: arch/s390/kernel/statistic.c:1146:
+statistic_add_list_new(

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*entry)...) over kmalloc(sizeof(struct statistic_entry_list)...)
#1536: FILE: arch/s390/kernel/statistic.c:1156:
+	entry = kmalloc(sizeof(struct statistic_entry_list), GFP_ATOMIC);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1537: FILE: arch/s390/kernel/statistic.c:1157:
+	if (entry) {
[...]
+	} else	return -ENOMEM;
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1543: FILE: arch/s390/kernel/statistic.c:1163:
+	} else	return -ENOMEM;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1564: FILE: arch/s390/kernel/statistic.c:1184:
+	if (statistic_add_list_new(stat, value, incr)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1567: FILE: arch/s390/kernel/statistic.c:1187:
+	} else

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1611: FILE: arch/s390/kernel/statistic.c:1231:
+statistic_define_list(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1646: FILE: arch/s390/kernel/statistic.c:1266:
+	return sgrb_alloc(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1659: FILE: arch/s390/kernel/statistic.c:1279:
+statistic_format_data_raw(

WARNING:MISORDERED_TYPE: type 'long long unsigned' should be specified in [[un]signed] [short|int|long|long long] order
#1677: FILE: arch/s390/kernel/statistic.c:1297:
+					(long long unsigned)entry->serial,

WARNING:MISORDERED_TYPE: type 'long long signed' should be specified in [[un]signed] [short|int|long|long long] order
#1678: FILE: arch/s390/kernel/statistic.c:1298:
+					(long long signed)entry->value,

WARNING:MISORDERED_TYPE: type 'long long unsigned' should be specified in [[un]signed] [short|int|long|long long] order
#1679: FILE: arch/s390/kernel/statistic.c:1299:
+					(long long unsigned)entry->incr);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1746: FILE: arch/s390/kernel/statistic.c:1366:
+int statistic_define_raw(

WARNING:SPACING: space prohibited before semicolon
#1782: FILE: arch/s390/kernel/statistic.c:1402:
+				sizeof(s64)) ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#1811: FILE: arch/s390/kernel/statistic.c:1431:
+	if (now <= checkp)
[...]
+	else	{
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1813: FILE: arch/s390/kernel/statistic.c:1433:
+	else	{

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1821: FILE: arch/s390/kernel/statistic.c:1441:
+#if 0

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1827: FILE: arch/s390/kernel/statistic.c:1447:
+			for (; then < now - 2 * window; then += window);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1828: FILE: arch/s390/kernel/statistic.c:1448:
+			for (; then < now - window; then += period);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1835: FILE: arch/s390/kernel/statistic.c:1455:
+			_statistic_alloc_range(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1845: FILE: arch/s390/kernel/statistic.c:1465:
+statistic_format_data_history(

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#1867: FILE: arch/s390/kernel/statistic.c:1487:
+		case STATISTIC_DEF_MODE_INC :
 		                            ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#1868: FILE: arch/s390/kernel/statistic.c:1488:
+		case STATISTIC_DEF_MODE_PROD :
 		                             ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1869: FILE: arch/s390/kernel/statistic.c:1489:
+			_statistic_format_data_value(

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1870: FILE: arch/s390/kernel/statistic.c:1490:
+				stat, seg, t, *(u64*)entry);

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#1872: FILE: arch/s390/kernel/statistic.c:1492:
+		case STATISTIC_DEF_MODE_RANGE :
 		                              ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1873: FILE: arch/s390/kernel/statistic.c:1493:
+			_statistic_format_data_range(

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#1877: FILE: arch/s390/kernel/statistic.c:1497:
+		default :
 		        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1895: FILE: arch/s390/kernel/statistic.c:1515:
+^I    ^I^Istatistic_strings[stat->data.history.mode],$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1895: FILE: arch/s390/kernel/statistic.c:1515:
+^I    ^I^Istatistic_strings[stat->data.history.mode],$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1907: FILE: arch/s390/kernel/statistic.c:1527:
+	return _statistic_add_value_increments(

CHECK:SPACING: No space is necessary after a cast
#1908: FILE: arch/s390/kernel/statistic.c:1528:
+			(s64*) statistic_add_history_entry(stat), value, incr);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1908: FILE: arch/s390/kernel/statistic.c:1528:
+			(s64*) statistic_add_history_entry(stat), value, incr);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1918: FILE: arch/s390/kernel/statistic.c:1538:
+	return _statistic_add_value_products(

CHECK:SPACING: No space is necessary after a cast
#1919: FILE: arch/s390/kernel/statistic.c:1539:
+			(s64*) statistic_add_history_entry(stat), value, incr);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1919: FILE: arch/s390/kernel/statistic.c:1539:
+			(s64*) statistic_add_history_entry(stat), value, incr);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1929: FILE: arch/s390/kernel/statistic.c:1549:
+	return _statistic_add_range(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1979: FILE: arch/s390/kernel/statistic.c:1599:
+int statistic_define_history(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2046: FILE: arch/s390/kernel/statistic.c:1666:
+statistic_interface_create(

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*interface)...) over kmalloc(sizeof(struct statistic_interface)...)
#2056: FILE: arch/s390/kernel/statistic.c:1676:
+	interface = kmalloc(sizeof(struct statistic_interface), GFP_KERNEL);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2065: FILE: arch/s390/kernel/statistic.c:1685:
+	interface->debugfs_dir = debugfs_create_dir(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2072: FILE: arch/s390/kernel/statistic.c:1692:
+	interface->data_file = debugfs_create_file(

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#2074: FILE: arch/s390/kernel/statistic.c:1694:
+					S_IFREG | S_IRUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: No space is necessary after a cast
#2076: FILE: arch/s390/kernel/statistic.c:1696:
+					(void*) interface,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2076: FILE: arch/s390/kernel/statistic.c:1696:
+					(void*) interface,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2083: FILE: arch/s390/kernel/statistic.c:1703:
+	interface->def_file = debugfs_create_file(

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#2085: FILE: arch/s390/kernel/statistic.c:1705:
+					S_IFREG | S_IRUSR | S_IWUSR,

CHECK:SPACING: No space is necessary after a cast
#2087: FILE: arch/s390/kernel/statistic.c:1707:
+					(void*) interface,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2087: FILE: arch/s390/kernel/statistic.c:1707:
+					(void*) interface,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2156: FILE: arch/s390/kernel/statistic.c:1776:
+statistic_interface_generic_open(

CHECK:SPACING: No space is necessary after a cast
#2161: FILE: arch/s390/kernel/statistic.c:1781:
+	*interface = (struct statistic_interface *) inode->u.generic_ip;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2162: FILE: arch/s390/kernel/statistic.c:1782:
+	BUG_ON(!interface);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*private)...) over kmalloc(sizeof(struct statistic_file_private)...)
#2164: FILE: arch/s390/kernel/statistic.c:1784:
+	*private = kmalloc(sizeof(struct statistic_file_private), GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#2180: FILE: arch/s390/kernel/statistic.c:1800:
+	private = (struct statistic_file_private *) file->private_data;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2181: FILE: arch/s390/kernel/statistic.c:1801:
+	BUG_ON(!private);

WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#2196: FILE: arch/s390/kernel/statistic.c:1816:
+	size_t transfered = 0;
 	       ^^^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#2199: FILE: arch/s390/kernel/statistic.c:1819:
+	private = (struct statistic_file_private *) file->private_data;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2200: FILE: arch/s390/kernel/statistic.c:1820:
+	BUG_ON(!private);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2205: FILE: arch/s390/kernel/statistic.c:1825:
+		if (*offset >= pos  &&
[...]
+		} else
[...]

WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#2210: FILE: arch/s390/kernel/statistic.c:1830:
+			if (copy_to_user(buf + transfered,
 			                       ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#2214: FILE: arch/s390/kernel/statistic.c:1834:
+			transfered += seg_transfer;
 			^^^^^^^^^^

CHECK:BRACES: Unbalanced braces around else statement
#2218: FILE: arch/s390/kernel/statistic.c:1838:
+		} else

WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#2221: FILE: arch/s390/kernel/statistic.c:1841:
+	return transfered;
 	       ^^^^^^^^^^

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#2225: FILE: arch/s390/kernel/statistic.c:1845:
+statistic_interface_generic_write(struct file *file, const char __user *buf, size_t len, loff_t *offset)

WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#2230: FILE: arch/s390/kernel/statistic.c:1850:
+	size_t transfered = 0;
 	       ^^^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#2232: FILE: arch/s390/kernel/statistic.c:1852:
+	private = (struct statistic_file_private *) file->private_data;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2233: FILE: arch/s390/kernel/statistic.c:1853:
+	BUG_ON(!private);

WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#2245: FILE: arch/s390/kernel/statistic.c:1865:
+				   buf + transfered,
 				         ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#2250: FILE: arch/s390/kernel/statistic.c:1870:
+		transfered += seg_transfer;
 		^^^^^^^^^^

WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#2254: FILE: arch/s390/kernel/statistic.c:1874:
+	return transfered;
 	       ^^^^^^^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2266: FILE: arch/s390/kernel/statistic.c:1886:
+	retval = statistic_interface_generic_open(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2284: FILE: arch/s390/kernel/statistic.c:1904:
+statistic_parse_definitions_line(

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2288: FILE: arch/s390/kernel/statistic.c:1908:
+	char * p;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2301: FILE: arch/s390/kernel/statistic.c:1921:
+	    got_on = 0, got_off = 0,redefinition = 0, new_type = 0,
 	                           ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2307: FILE: arch/s390/kernel/statistic.c:1927:
+	while ((p = strsep (&def, " ")) != NULL) {

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2310: FILE: arch/s390/kernel/statistic.c:1930:
+		case STATISTIC_DEF_NAME :
 		                        ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2314: FILE: arch/s390/kernel/statistic.c:1934:
+		case STATISTIC_DEF_TYPE_VALUE :
 		                              ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2315: FILE: arch/s390/kernel/statistic.c:1935:
+		case STATISTIC_DEF_TYPE_RANGE :
 		                              ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2316: FILE: arch/s390/kernel/statistic.c:1936:
+		case STATISTIC_DEF_TYPE_ARRAY :
 		                              ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2317: FILE: arch/s390/kernel/statistic.c:1937:
+		case STATISTIC_DEF_TYPE_LIST :
 		                             ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2318: FILE: arch/s390/kernel/statistic.c:1938:
+		case STATISTIC_DEF_TYPE_RAW :
 		                            ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2319: FILE: arch/s390/kernel/statistic.c:1939:
+		case STATISTIC_DEF_TYPE_HISTORY :
 		                                ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2323: FILE: arch/s390/kernel/statistic.c:1943:
+		case STATISTIC_DEF_ON :
 		                      ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2326: FILE: arch/s390/kernel/statistic.c:1946:
+		case STATISTIC_DEF_OFF :
 		                       ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2329: FILE: arch/s390/kernel/statistic.c:1949:
+		case STATISTIC_DEF_SCALE_LIN :
 		                             ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2330: FILE: arch/s390/kernel/statistic.c:1950:
+		case STATISTIC_DEF_SCALE_LOG2 :
 		                              ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2334: FILE: arch/s390/kernel/statistic.c:1954:
+		case STATISTIC_DEF_ENTRIESMAX :
 		                              ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2338: FILE: arch/s390/kernel/statistic.c:1958:
+		case STATISTIC_DEF_RANGEMIN :
 		                            ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2342: FILE: arch/s390/kernel/statistic.c:1962:
+		case STATISTIC_DEF_RANGEMAX :
 		                            ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2346: FILE: arch/s390/kernel/statistic.c:1966:
+		case STATISTIC_DEF_BASEINT :
 		                           ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2350: FILE: arch/s390/kernel/statistic.c:1970:
+		case STATISTIC_DEF_PERIOD :
 		                          ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2354: FILE: arch/s390/kernel/statistic.c:1974:
+		case STATISTIC_DEF_MODE_INC :
 		                            ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2355: FILE: arch/s390/kernel/statistic.c:1975:
+		case STATISTIC_DEF_MODE_PROD :
 		                             ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2356: FILE: arch/s390/kernel/statistic.c:1976:
+		case STATISTIC_DEF_MODE_RANGE :
 		                              ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2360: FILE: arch/s390/kernel/statistic.c:1980:
+		case STATISTIC_DEF_RESET :
 		                         ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2363: FILE: arch/s390/kernel/statistic.c:1983:
+		default :
 		        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2422: FILE: arch/s390/kernel/statistic.c:2042:
+        switch (type) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2422: FILE: arch/s390/kernel/statistic.c:2042:
+        switch (type) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2423: FILE: arch/s390/kernel/statistic.c:2043:
+        case STATISTIC_DEF_TYPE_VALUE :$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2423: FILE: arch/s390/kernel/statistic.c:2043:
+        case STATISTIC_DEF_TYPE_VALUE :$

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2423: FILE: arch/s390/kernel/statistic.c:2043:
+        case STATISTIC_DEF_TYPE_VALUE :
                                       ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2430: FILE: arch/s390/kernel/statistic.c:2050:
+		retval = statistic_define_value(

ERROR:CODE_INDENT: code indent should use tabs where possible
#2433: FILE: arch/s390/kernel/statistic.c:2053:
+        case STATISTIC_DEF_TYPE_RANGE :$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2433: FILE: arch/s390/kernel/statistic.c:2053:
+        case STATISTIC_DEF_TYPE_RANGE :$

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2433: FILE: arch/s390/kernel/statistic.c:2053:
+        case STATISTIC_DEF_TYPE_RANGE :
                                       ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2434: FILE: arch/s390/kernel/statistic.c:2054:
+		retval = statistic_define_range(

ERROR:CODE_INDENT: code indent should use tabs where possible
#2437: FILE: arch/s390/kernel/statistic.c:2057:
+        case STATISTIC_DEF_TYPE_ARRAY :$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2437: FILE: arch/s390/kernel/statistic.c:2057:
+        case STATISTIC_DEF_TYPE_ARRAY :$

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2437: FILE: arch/s390/kernel/statistic.c:2057:
+        case STATISTIC_DEF_TYPE_ARRAY :
                                       ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2446: FILE: arch/s390/kernel/statistic.c:2066:
+		retval = statistic_define_array(

ERROR:CODE_INDENT: code indent should use tabs where possible
#2449: FILE: arch/s390/kernel/statistic.c:2069:
+        case STATISTIC_DEF_TYPE_LIST :$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2449: FILE: arch/s390/kernel/statistic.c:2069:
+        case STATISTIC_DEF_TYPE_LIST :$

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2449: FILE: arch/s390/kernel/statistic.c:2069:
+        case STATISTIC_DEF_TYPE_LIST :
                                      ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2456: FILE: arch/s390/kernel/statistic.c:2076:
+		retval = statistic_define_list(

ERROR:CODE_INDENT: code indent should use tabs where possible
#2459: FILE: arch/s390/kernel/statistic.c:2079:
+        case STATISTIC_DEF_TYPE_RAW :$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2459: FILE: arch/s390/kernel/statistic.c:2079:
+        case STATISTIC_DEF_TYPE_RAW :$

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2459: FILE: arch/s390/kernel/statistic.c:2079:
+        case STATISTIC_DEF_TYPE_RAW :
                                     ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2466: FILE: arch/s390/kernel/statistic.c:2086:
+		retval = statistic_define_raw(

ERROR:CODE_INDENT: code indent should use tabs where possible
#2469: FILE: arch/s390/kernel/statistic.c:2089:
+        case STATISTIC_DEF_TYPE_HISTORY :$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2469: FILE: arch/s390/kernel/statistic.c:2089:
+        case STATISTIC_DEF_TYPE_HISTORY :$

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2469: FILE: arch/s390/kernel/statistic.c:2089:
+        case STATISTIC_DEF_TYPE_HISTORY :
                                         ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2481: FILE: arch/s390/kernel/statistic.c:2101:
+		retval = statistic_define_history(

ERROR:CODE_INDENT: code indent should use tabs where possible
#2485: FILE: arch/s390/kernel/statistic.c:2105:
+        default :$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2485: FILE: arch/s390/kernel/statistic.c:2105:
+        default :$

ERROR:SPACING: space prohibited before that ':' (ctx:WxE)
#2485: FILE: arch/s390/kernel/statistic.c:2105:
+        default :
                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2486: FILE: arch/s390/kernel/statistic.c:2106:
+                retval = -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2486: FILE: arch/s390/kernel/statistic.c:2106:
+                retval = -EINVAL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2487: FILE: arch/s390/kernel/statistic.c:2107:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2487: FILE: arch/s390/kernel/statistic.c:2107:
+        }$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2498: FILE: arch/s390/kernel/statistic.c:2118:
+statistic_interface_def_close_parse(

CHECK:SPACING: No space is necessary after a cast
#2540: FILE: arch/s390/kernel/statistic.c:2160:
+	interface = (struct statistic_interface *) inode->u.generic_ip;

CHECK:SPACING: No space is necessary after a cast
#2541: FILE: arch/s390/kernel/statistic.c:2161:
+	private = (struct statistic_file_private *) file->private_data;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*seg_nl)...) over kmalloc(sizeof(struct sgrb_seg)...)
#2545: FILE: arch/s390/kernel/statistic.c:2165:
+			seg_nl = kmalloc(sizeof(struct sgrb_seg),

CHECK:BRACES: braces {} should be used on all arms of this statement
#2550: FILE: arch/s390/kernel/statistic.c:2170:
+			if (nl) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2554: FILE: arch/s390/kernel/statistic.c:2174:
+			} else

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2560: FILE: arch/s390/kernel/statistic.c:2180:
+				statistic_interface_def_close_parse(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2565: FILE: arch/s390/kernel/statistic.c:2185:
+		statistic_interface_def_close_parse(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2580: FILE: arch/s390/kernel/statistic.c:2200:
+	retval = statistic_interface_generic_open(

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2604: FILE: arch/s390/kernel/statistic.c:2224:
+EXPORT_SYMBOL(statistic_interface_create);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2605: FILE: arch/s390/kernel/statistic.c:2225:
+EXPORT_SYMBOL(statistic_interface_remove);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2606: FILE: arch/s390/kernel/statistic.c:2226:
+EXPORT_SYMBOL(statistic_create);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2607: FILE: arch/s390/kernel/statistic.c:2227:
+EXPORT_SYMBOL(statistic_remove);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2608: FILE: arch/s390/kernel/statistic.c:2228:
+EXPORT_SYMBOL(statistic_define_value);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2609: FILE: arch/s390/kernel/statistic.c:2229:
+EXPORT_SYMBOL(statistic_define_range);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2610: FILE: arch/s390/kernel/statistic.c:2230:
+EXPORT_SYMBOL(statistic_define_array);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2611: FILE: arch/s390/kernel/statistic.c:2231:
+EXPORT_SYMBOL(statistic_define_list);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2612: FILE: arch/s390/kernel/statistic.c:2232:
+EXPORT_SYMBOL(statistic_define_raw);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2613: FILE: arch/s390/kernel/statistic.c:2233:
+EXPORT_SYMBOL(statistic_define_history);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2614: FILE: arch/s390/kernel/statistic.c:2234:
+EXPORT_SYMBOL(statistic_start);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2615: FILE: arch/s390/kernel/statistic.c:2235:
+EXPORT_SYMBOL(statistic_stop);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2616: FILE: arch/s390/kernel/statistic.c:2236:
+EXPORT_SYMBOL(statistic_reset);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2621: FILE: include/asm-s390/sgrb.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2642: FILE: include/asm-s390/sgrb.h:22:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2643: FILE: include/asm-s390/sgrb.h:23:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#2649: FILE: include/asm-s390/sgrb.h:29:
+#define SGRB_H_REVISION "$Revision: 1.2 $"

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2685: FILE: include/asm-s390/sgrb.h:65:
+sgrb_ptr_copy(

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2703: FILE: include/asm-s390/sgrb.h:83:
+struct sgrb_seg * sgrb_seg_find(struct list_head *, int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#2704: FILE: include/asm-s390/sgrb.h:84:
+void sgrb_seg_release_all(struct list_head *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sgrb *' should also have an identifier name
#2706: FILE: include/asm-s390/sgrb.h:86:
+int sgrb_alloc(struct sgrb *, int, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2706: FILE: include/asm-s390/sgrb.h:86:
+int sgrb_alloc(struct sgrb *, int, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2706: FILE: include/asm-s390/sgrb.h:86:
+int sgrb_alloc(struct sgrb *, int, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2706: FILE: include/asm-s390/sgrb.h:86:
+int sgrb_alloc(struct sgrb *, int, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2706: FILE: include/asm-s390/sgrb.h:86:
+int sgrb_alloc(struct sgrb *, int, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sgrb *' should also have an identifier name
#2707: FILE: include/asm-s390/sgrb.h:87:
+void sgrb_release(struct sgrb *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2709: FILE: include/asm-s390/sgrb.h:89:
+void * sgrb_produce_overwrite(struct sgrb *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sgrb *' should also have an identifier name
#2709: FILE: include/asm-s390/sgrb.h:89:
+void * sgrb_produce_overwrite(struct sgrb *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2710: FILE: include/asm-s390/sgrb.h:90:
+void * sgrb_produce_nooverwrite(struct sgrb *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sgrb *' should also have an identifier name
#2710: FILE: include/asm-s390/sgrb.h:90:
+void * sgrb_produce_nooverwrite(struct sgrb *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2711: FILE: include/asm-s390/sgrb.h:91:
+void * sgrb_consume_delete(struct sgrb *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sgrb *' should also have an identifier name
#2711: FILE: include/asm-s390/sgrb.h:91:
+void * sgrb_consume_delete(struct sgrb *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2712: FILE: include/asm-s390/sgrb.h:92:
+void * sgrb_consume_nodelete(struct sgrb *, struct sgrb_ptr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sgrb *' should also have an identifier name
#2712: FILE: include/asm-s390/sgrb.h:92:
+void * sgrb_consume_nodelete(struct sgrb *, struct sgrb_ptr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sgrb_ptr *' should also have an identifier name
#2712: FILE: include/asm-s390/sgrb.h:92:
+void * sgrb_consume_nodelete(struct sgrb *, struct sgrb_ptr *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2719: FILE: include/asm-s390/statistic.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2739: FILE: include/asm-s390/statistic.h:21:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2740: FILE: include/asm-s390/statistic.h:22:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#2746: FILE: include/asm-s390/statistic.h:28:
+#define STATISTIC_H_REVISION "$Revision: 1.12 $"

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2798: FILE: include/asm-s390/statistic.h:80:
+typedef int (statistic_format_data_fn)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2840: FILE: include/asm-s390/statistic.h:122:
+^Is64 ^Irange_min;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2841: FILE: include/asm-s390/statistic.h:123:
+^Is64 ^Irange_max;$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#2903: FILE: include/asm-s390/statistic.h:185:
+	spinlock_t		lock;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic_interface **' should also have an identifier name
#2918: FILE: include/asm-s390/statistic.h:200:
+int statistic_interface_create(struct statistic_interface **, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2918: FILE: include/asm-s390/statistic.h:200:
+int statistic_interface_create(struct statistic_interface **, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic_interface **' should also have an identifier name
#2919: FILE: include/asm-s390/statistic.h:201:
+int statistic_interface_remove(struct statistic_interface **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic **' should also have an identifier name
#2921: FILE: include/asm-s390/statistic.h:203:
+int statistic_create(struct statistic **, struct statistic_interface *, const char *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic_interface *' should also have an identifier name
#2921: FILE: include/asm-s390/statistic.h:203:
+int statistic_create(struct statistic **, struct statistic_interface *, const char *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2921: FILE: include/asm-s390/statistic.h:203:
+int statistic_create(struct statistic **, struct statistic_interface *, const char *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2921: FILE: include/asm-s390/statistic.h:203:
+int statistic_create(struct statistic **, struct statistic_interface *, const char *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic **' should also have an identifier name
#2922: FILE: include/asm-s390/statistic.h:204:
+int statistic_remove(struct statistic **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic *' should also have an identifier name
#2924: FILE: include/asm-s390/statistic.h:206:
+int statistic_define_value(struct statistic *, s64, s64, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 's64' should also have an identifier name
#2924: FILE: include/asm-s390/statistic.h:206:
+int statistic_define_value(struct statistic *, s64, s64, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 's64' should also have an identifier name
#2924: FILE: include/asm-s390/statistic.h:206:
+int statistic_define_value(struct statistic *, s64, s64, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2924: FILE: include/asm-s390/statistic.h:206:
+int statistic_define_value(struct statistic *, s64, s64, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic *' should also have an identifier name
#2925: FILE: include/asm-s390/statistic.h:207:
+int statistic_define_range(struct statistic *, s64, s64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 's64' should also have an identifier name
#2925: FILE: include/asm-s390/statistic.h:207:
+int statistic_define_range(struct statistic *, s64, s64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 's64' should also have an identifier name
#2925: FILE: include/asm-s390/statistic.h:207:
+int statistic_define_range(struct statistic *, s64, s64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic *' should also have an identifier name
#2926: FILE: include/asm-s390/statistic.h:208:
+int statistic_define_array(struct statistic *, s64, s64, u32, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 's64' should also have an identifier name
#2926: FILE: include/asm-s390/statistic.h:208:
+int statistic_define_array(struct statistic *, s64, s64, u32, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 's64' should also have an identifier name
#2926: FILE: include/asm-s390/statistic.h:208:
+int statistic_define_array(struct statistic *, s64, s64, u32, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#2926: FILE: include/asm-s390/statistic.h:208:
+int statistic_define_array(struct statistic *, s64, s64, u32, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#2926: FILE: include/asm-s390/statistic.h:208:
+int statistic_define_array(struct statistic *, s64, s64, u32, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic *' should also have an identifier name
#2927: FILE: include/asm-s390/statistic.h:209:
+int statistic_define_list(struct statistic *, s64, s64, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 's64' should also have an identifier name
#2927: FILE: include/asm-s390/statistic.h:209:
+int statistic_define_list(struct statistic *, s64, s64, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 's64' should also have an identifier name
#2927: FILE: include/asm-s390/statistic.h:209:
+int statistic_define_list(struct statistic *, s64, s64, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#2927: FILE: include/asm-s390/statistic.h:209:
+int statistic_define_list(struct statistic *, s64, s64, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic *' should also have an identifier name
#2928: FILE: include/asm-s390/statistic.h:210:
+int statistic_define_raw(struct statistic *, s64, s64, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 's64' should also have an identifier name
#2928: FILE: include/asm-s390/statistic.h:210:
+int statistic_define_raw(struct statistic *, s64, s64, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 's64' should also have an identifier name
#2928: FILE: include/asm-s390/statistic.h:210:
+int statistic_define_raw(struct statistic *, s64, s64, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#2928: FILE: include/asm-s390/statistic.h:210:
+int statistic_define_raw(struct statistic *, s64, s64, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic *' should also have an identifier name
#2929: FILE: include/asm-s390/statistic.h:211:
+int statistic_define_history(struct statistic *, s64, s64, u32, u64, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 's64' should also have an identifier name
#2929: FILE: include/asm-s390/statistic.h:211:
+int statistic_define_history(struct statistic *, s64, s64, u32, u64, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 's64' should also have an identifier name
#2929: FILE: include/asm-s390/statistic.h:211:
+int statistic_define_history(struct statistic *, s64, s64, u32, u64, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#2929: FILE: include/asm-s390/statistic.h:211:
+int statistic_define_history(struct statistic *, s64, s64, u32, u64, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#2929: FILE: include/asm-s390/statistic.h:211:
+int statistic_define_history(struct statistic *, s64, s64, u32, u64, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2929: FILE: include/asm-s390/statistic.h:211:
+int statistic_define_history(struct statistic *, s64, s64, u32, u64, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic *' should also have an identifier name
#2931: FILE: include/asm-s390/statistic.h:213:
+int statistic_start(struct statistic *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic *' should also have an identifier name
#2932: FILE: include/asm-s390/statistic.h:214:
+int statistic_stop(struct statistic *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct statistic *' should also have an identifier name
#2933: FILE: include/asm-s390/statistic.h:215:
+int statistic_reset(struct statistic *);

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#2942: FILE: include/asm-s390/statistic.h:224:
+ * The actual processing of (discriminator, increment) is determined by the
+ * the definition applied to the statistic. See the statistic_define_*()

WARNING:TYPO_SPELLING: 'desciption' may be misspelled - perhaps 'description'?
#2943: FILE: include/asm-s390/statistic.h:225:
+ * routine desciption for details.
            ^^^^^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'to'
#2946: FILE: include/asm-s390/statistic.h:228:
+ * This variant grabs a lock to ensure a) data integrity with regard to
+ * to potentially concurrent data gathering, and b) data consistency across

WARNING:TYPO_SPELLING: 'dependend' may be misspelled - perhaps 'dependent'?
#2950: FILE: include/asm-s390/statistic.h:232:
+ * On success, the return value is dependend on which type of accumulation
                                    ^^^^^^^^^

WARNING:TYPO_SPELLING: 'failes' may be misspelled - perhaps 'fails'?
#2961: FILE: include/asm-s390/statistic.h:243:
+ * If the discriminator is not valid (out of range), this routine failes,
                                                                   ^^^^^^

WARNING:TYPO_SPELLING: 'behavious' may be misspelled - perhaps 'behaviour'?
#2986: FILE: include/asm-s390/statistic.h:268:
+ * Same purpose and behavious as statistic_add(). See there for details.
                     ^^^^^^^^^

WARNING:TYPO_SPELLING: 'behavious' may be misspelled - perhaps 'behaviour'?
#3012: FILE: include/asm-s390/statistic.h:294:
+ * Same purpose and behavious as statistic_add(). See there for details.
                     ^^^^^^^^^

WARNING:TYPO_SPELLING: 'behavious' may be misspelled - perhaps 'behaviour'?
#3036: FILE: include/asm-s390/statistic.h:318:
+ * Same purpose and behavious as statistic_add_nolock(). See there for details.
                     ^^^^^^^^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#3066: FILE: include/linux/list.h:415:
+#define list_for_each_entry_continue_reverse(pos, head, member)                 \
+        for (pos = list_entry(pos->member.prev, typeof(*pos), member);  \
+             prefetch(pos->member.prev), &pos->member != (head);        \
+             pos = list_entry(pos->member.prev, typeof(*pos), member))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#3066: FILE: include/linux/list.h:415:
+#define list_for_each_entry_continue_reverse(pos, head, member)                 \
+        for (pos = list_entry(pos->member.prev, typeof(*pos), member);  \
+             prefetch(pos->member.prev), &pos->member != (head);        \
+             pos = list_entry(pos->member.prev, typeof(*pos), member))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#3066: FILE: include/linux/list.h:415:
+#define list_for_each_entry_continue_reverse(pos, head, member)                 \
+        for (pos = list_entry(pos->member.prev, typeof(*pos), member);  \
+             prefetch(pos->member.prev), &pos->member != (head);        \
+             pos = list_entry(pos->member.prev, typeof(*pos), member))

ERROR:CODE_INDENT: code indent should use tabs where possible
#3067: FILE: include/linux/list.h:416:
+        for (pos = list_entry(pos->member.prev, typeof(*pos), member);  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3067: FILE: include/linux/list.h:416:
+        for (pos = list_entry(pos->member.prev, typeof(*pos), member);  \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3068: FILE: include/linux/list.h:417:
+             prefetch(pos->member.prev), &pos->member != (head);        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3068: FILE: include/linux/list.h:417:
+             prefetch(pos->member.prev), &pos->member != (head);        \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3069: FILE: include/linux/list.h:418:
+             pos = list_entry(pos->member.prev, typeof(*pos), member))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3069: FILE: include/linux/list.h:418:
+             pos = list_entry(pos->member.prev, typeof(*pos), member))$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'substring_t *' should also have an identifier name
#3082: FILE: include/linux/parser.h:34:
+int match_u64(substring_t *, u64 *result, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#3082: FILE: include/linux/parser.h:34:
+int match_u64(substring_t *, u64 *result, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'substring_t *' should also have an identifier name
#3083: FILE: include/linux/parser.h:35:
+int match_s64(substring_t *, s64 *result, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#3083: FILE: include/linux/parser.h:35:
+int match_s64(substring_t *, s64 *result, int);

ERROR:CODE_INDENT: code indent should use tabs where possible
#3102: FILE: lib/parser.c:154:
+        char *endp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3102: FILE: lib/parser.c:154:
+        char *endp;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3103: FILE: lib/parser.c:155:
+        char *buf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3103: FILE: lib/parser.c:155:
+        char *buf;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3104: FILE: lib/parser.c:156:
+        int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3104: FILE: lib/parser.c:156:
+        int ret;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3106: FILE: lib/parser.c:158:
+        buf = kmalloc(s->to - s->from + 1, GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3106: FILE: lib/parser.c:158:
+        buf = kmalloc(s->to - s->from + 1, GFP_KERNEL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3107: FILE: lib/parser.c:159:
+        if (!buf)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3107: FILE: lib/parser.c:159:
+        if (!buf)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3108: FILE: lib/parser.c:160:
+                return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3108: FILE: lib/parser.c:160:
+                return -ENOMEM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3109: FILE: lib/parser.c:161:
+        memcpy(buf, s->from, s->to - s->from);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3109: FILE: lib/parser.c:161:
+        memcpy(buf, s->from, s->to - s->from);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3110: FILE: lib/parser.c:162:
+        buf[s->to - s->from] = '\0';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3110: FILE: lib/parser.c:162:
+        buf[s->to - s->from] = '\0';$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3111: FILE: lib/parser.c:163:
+        *result = simple_strtoull(buf, &endp, base);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3111: FILE: lib/parser.c:163:
+        *result = simple_strtoull(buf, &endp, base);$

WARNING:CONSIDER_KSTRTO: simple_strtoull is obsolete, use kstrtoull instead
#3111: FILE: lib/parser.c:163:
+        *result = simple_strtoull(buf, &endp, base);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:CODE_INDENT: code indent should use tabs where possible
#3112: FILE: lib/parser.c:164:
+        ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3112: FILE: lib/parser.c:164:
+        ret = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3113: FILE: lib/parser.c:165:
+        if (endp == buf)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3113: FILE: lib/parser.c:165:
+        if (endp == buf)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3114: FILE: lib/parser.c:166:
+                ret = -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3114: FILE: lib/parser.c:166:
+                ret = -EINVAL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3115: FILE: lib/parser.c:167:
+        kfree(buf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3115: FILE: lib/parser.c:167:
+        kfree(buf);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3116: FILE: lib/parser.c:168:
+        return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3116: FILE: lib/parser.c:168:
+        return ret;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3131: FILE: lib/parser.c:183:
+        char *endp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3131: FILE: lib/parser.c:183:
+        char *endp;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3132: FILE: lib/parser.c:184:
+        char *buf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3132: FILE: lib/parser.c:184:
+        char *buf;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3133: FILE: lib/parser.c:185:
+        int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3133: FILE: lib/parser.c:185:
+        int ret;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3135: FILE: lib/parser.c:187:
+        buf = kmalloc(s->to - s->from + 1, GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3135: FILE: lib/parser.c:187:
+        buf = kmalloc(s->to - s->from + 1, GFP_KERNEL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3136: FILE: lib/parser.c:188:
+        if (!buf)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3136: FILE: lib/parser.c:188:
+        if (!buf)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3137: FILE: lib/parser.c:189:
+                return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3137: FILE: lib/parser.c:189:
+                return -ENOMEM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3138: FILE: lib/parser.c:190:
+        memcpy(buf, s->from, s->to - s->from);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3138: FILE: lib/parser.c:190:
+        memcpy(buf, s->from, s->to - s->from);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3139: FILE: lib/parser.c:191:
+        buf[s->to - s->from] = '\0';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3139: FILE: lib/parser.c:191:
+        buf[s->to - s->from] = '\0';$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3140: FILE: lib/parser.c:192:
+        *result = simple_strtoll(buf, &endp, base);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3140: FILE: lib/parser.c:192:
+        *result = simple_strtoll(buf, &endp, base);$

WARNING:CONSIDER_KSTRTO: simple_strtoll is obsolete, use kstrtoll instead
#3140: FILE: lib/parser.c:192:
+        *result = simple_strtoll(buf, &endp, base);

ERROR:CODE_INDENT: code indent should use tabs where possible
#3141: FILE: lib/parser.c:193:
+        ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3141: FILE: lib/parser.c:193:
+        ret = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3142: FILE: lib/parser.c:194:
+        if (endp == buf)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3142: FILE: lib/parser.c:194:
+        if (endp == buf)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3143: FILE: lib/parser.c:195:
+                ret = -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3143: FILE: lib/parser.c:195:
+                ret = -EINVAL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3144: FILE: lib/parser.c:196:
+        kfree(buf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3144: FILE: lib/parser.c:196:
+        kfree(buf);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3145: FILE: lib/parser.c:197:
+        return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3145: FILE: lib/parser.c:197:
+        return ret;$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#3157: FILE: lib/parser.c:280:
+EXPORT_SYMBOL(match_s64);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000140705.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 104 errors, 187 warnings, 86 checks, 3068 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000140705.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
