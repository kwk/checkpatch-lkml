WARNING:TYPO_SPELLING: 'mofified' may be misspelled - perhaps 'modified'?
#35: 
* /dev/mem of the i386 version should be mofified. but not yet.
                                         ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#38: 
# cat /proc/cpumem

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#42: 
#

WARNING:TYPO_SPELLING: 'recomendations' may be misspelled - perhaps 'recommendations'?
#45: 
Any comments, recomendations and suggestions are welcom.
              ^^^^^^^^^^^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#91: FILE: drivers/char/mem.c:785:
+	if (p->addr >= end) {
+		return NULL;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#111: FILE: drivers/char/mem.c:805:
+			if (found) {
+				return p;
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#130: FILE: drivers/char/mem.c:824:
+		if (!cpumem_next(m, NULL, &n)) {
+			return NULL;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#147: FILE: drivers/char/mem.c:841:
+	if (p->addr < end) {
+		seq_printf(m, "%016llx %016llx\n", p->addr, p->size);
+	}

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#153: FILE: drivers/char/mem.c:847:
+struct seq_operations cpumem_op = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#163: FILE: drivers/char/mem.c:857:
+	int res = seq_open(file, &cpumem_op);
+	if (!res) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#165: FILE: drivers/char/mem.c:859:
+		struct seq_file *m = file->private_data;
+		m->private = kmalloc(sizeof(struct cpumem_info), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*m->private)...) over kmalloc(sizeof(struct cpumem_info)...)
#165: FILE: drivers/char/mem.c:859:
+		m->private = kmalloc(sizeof(struct cpumem_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:CONST_STRUCT: struct file_operations should normally be const
#174: FILE: drivers/char/mem.c:868:
+static struct file_operations proc_cpumem_operations = {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#186: FILE: drivers/char/mem.c:880:
+	if (entry) {
+		entry->proc_fops = &proc_cpumem_operations;
+	}

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#191: FILE: drivers/char/mem.c:885:
+__initcall(cpumem_init);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#210: FILE: arch/i386/mm/init.c:260:
+			if (!is_available_memory(md)) {
+				continue;
+			}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'phys_addr >= addr'
#215: FILE: arch/i386/mm/init.c:265:
+			if ((phys_addr >= addr) && (phys_addr < end)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'phys_addr < end'
#215: FILE: arch/i386/mm/init.c:265:
+			if ((phys_addr >= addr) && (phys_addr < end)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#216: FILE: arch/i386/mm/init.c:266:
+				if (*size > end - phys_addr) {
+					*size = end - phys_addr;
+				}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#226: FILE: arch/i386/mm/init.c:276:
+		if (e820.map[i].type != E820_RAM) {
+			continue;
+		}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'phys_addr >= addr'
#231: FILE: arch/i386/mm/init.c:281:
+		if ((phys_addr >= addr) && (phys_addr < end)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'phys_addr < end'
#231: FILE: arch/i386/mm/init.c:281:
+		if ((phys_addr >= addr) && (phys_addr < end)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#232: FILE: arch/i386/mm/init.c:282:
+			if (*size > end - phys_addr) {
+				*size = end - phys_addr;
+			}

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_VALID_PHYS_ADDR_RANGE' is wrong - use Kconfig variables or standard guards instead
#256: FILE: include/asm-i386/io.h:96:
+#define ARCH_HAS_VALID_PHYS_ADDR_RANGE

The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong.

For big conceptual features use Kconfig symbols instead.  And for
smaller things where we have compatibility fallback functions but
want architectures able to override them with optimized ones, we
should either use weak functions (appropriate for some cases), or
the symbol that protects them should be the same symbol we use.

See: https://lore.kernel.org/lkml/CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#257: FILE: include/asm-i386/io.h:97:
+extern int valid_phys_addr_range(unsigned long long, size_t *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#284: FILE: arch/x86_64/mm/init.c:405:
+		if (e820.map[i].type != E820_RAM) {
+			continue;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#289: FILE: arch/x86_64/mm/init.c:410:
+			if (*size > end - phys_addr) {
+				*size = end - phys_addr;
+			}

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_VALID_PHYS_ADDR_RANGE' is wrong - use Kconfig variables or standard guards instead
#311: FILE: include/asm-x86_64/io.h:127:
+#define ARCH_HAS_VALID_PHYS_ADDR_RANGE

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#312: FILE: include/asm-x86_64/io.h:128:
+extern int valid_phys_addr_range(unsigned long, size_t *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000206665.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 20 warnings, 7 checks, 236 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000206665.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
