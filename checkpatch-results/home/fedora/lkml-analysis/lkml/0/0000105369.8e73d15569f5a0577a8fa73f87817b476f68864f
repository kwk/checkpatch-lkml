WARNING:REPEATED_WORD: Possible repeated word: 'that'
#40: 
> > not that that means there aren't any of course. 

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#52: 
--- linux-2.6.16-rc1/include/linux/sched.h.org	2006-02-12 21:28:28.000000000 +0100

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#92: FILE: include/linux/sysctl.h:149:
+	KERN_SCHED_THROTTLE1=71,  /* int: throttling grace period 1 in secs */
 	                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#93: FILE: include/linux/sysctl.h:150:
+	KERN_SCHED_THROTTLE2=72,  /* int: throttling grace period 2 in secs */
 	                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#138: FILE: kernel/sched.c:184:
+#define grace_expired(p, grace) ((p)->throttle_stamp && \
+	time_after_eq(jiffies, (p)->throttle_stamp + (grace)))

WARNING:TYPO_SPELLING: 'miniscule' may be misspelled - perhaps 'minuscule'?
#146: FILE: kernel/sched.c:192:
+ * only sleeps a miniscule amount of time, but must to be able to preempt
                  ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#172: FILE: kernel/sched.c:218:
+#define SLICE_SPA_SHIFT   (SLICE_LTS_SHIFT + SLICE_LTS_BITS) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#176: FILE: kernel/sched.c:222:
+#define INFO_MASK(x)      ((1U << (x))-1)
                                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#194: FILE: kernel/sched.c:240:
+#define set_last_slice(p, n) ((p)->slice_info = (((p)->slice_info & \
+	~SLICE_LTS_MASK) | (((n) << SLICE_LTS_SHIFT) & SLICE_LTS_MASK))) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#195: FILE: kernel/sched.c:241:
+^I~SLICE_LTS_MASK) | (((n) << SLICE_LTS_SHIFT) & SLICE_LTS_MASK))) $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#200: FILE: kernel/sched.c:246:
+#define set_slice_avg(p, n) ((p)->slice_info = (((p)->slice_info & \
+	~SLICE_AVG_MASK) | ((((n) / NS_MAX_SLEEP_AVG_PCNT) \
+	<< SLICE_AVG_SHIFT) & SLICE_AVG_MASK))) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#202: FILE: kernel/sched.c:248:
+^I<< SLICE_AVG_SHIFT) & SLICE_AVG_MASK))) $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#205: FILE: kernel/sched.c:251:
+#define set_slice_avg_raw(p, n) ((p)->slice_info = (((p)->slice_info & \
+	~SLICE_AVG_MASK) | (((n) << SLICE_AVG_SHIFT) & SLICE_AVG_MASK))) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: kernel/sched.c:252:
+^I~SLICE_AVG_MASK) | (((n) << SLICE_AVG_SHIFT) & SLICE_AVG_MASK))) $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#211: FILE: kernel/sched.c:257:
+#define slice_time_avg(p) \
+	(100 * last_slice(p) / max((unsigned)cpu_avg(p), 1U))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#212: FILE: kernel/sched.c:258:
+	(100 * last_slice(p) / max((unsigned)cpu_avg(p), 1U))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#217: FILE: kernel/sched.c:263:
+#define cpu_this_slice(p) \
+	(100 * last_slice(p) / max((unsigned)time_this_slice(p), \
+	(unsigned)last_slice(p)))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#218: FILE: kernel/sched.c:264:
+	(100 * last_slice(p) / max((unsigned)time_this_slice(p), \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#219: FILE: kernel/sched.c:265:
+	(unsigned)last_slice(p)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#229: FILE: kernel/sched.c:275:
+ * we safely pull our 'tranquilizer dart'. $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#231: FILE: kernel/sched.c:277:
+#define conditional_tag(p) ((!(p)->throttle_stamp && ^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#231: FILE: kernel/sched.c:277:
+#define conditional_tag(p) ((!(p)->throttle_stamp && 			\
+	(p)->sleep_avg > slice_avg(p) + THROTTLE_THRESHOLD) ?		\
+({									\
+	((p)->throttle_stamp = jiffies) ? : 1;				\
+}) : 0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#243: FILE: kernel/sched.c:289:
+#define conditional_release(p) (((p)->throttle_stamp &&			\
+	(p)->sched_time >= (G2 ? JIFFIES_TO_NS(HZ) : ~0ULL) &&		\
+	((20 + cpu_this_slice(p) < cpu_avg(p) && (p)->sleep_avg < 	\
+	slice_avg(p) + THROTTLE_THRESHOLD) || cpu_avg(p) <= 5)) ?	\
+({									\
+	int __ret = 0;							\
+	int delay = slice_time_avg(p) - last_slice(p);			\
+	if (delay > 0) {						\
+		delay *= SLICE_AVG_MULTIPLIER(p);			\
+		(p)->throttle_stamp += delay;				\
+	}								\
+	if (time_before(jiffies, (p)->throttle_stamp)) {		\
+		(p)->throttle_stamp = 0;				\
+		__ret++;						\
+		if (!((p)->state & TASK_NONINTERACTIVE))		\
+			(p)->sleep_type = SLEEP_NORMAL;			\
+	}								\
+	__ret;								\
+}) : 0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#245: FILE: kernel/sched.c:291:
+^I((20 + cpu_this_slice(p) < cpu_avg(p) && (p)->sleep_avg < ^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#266: FILE: kernel/sched.c:312:
+#define ADJUSTED_BONUS(p, grace)				\
+({								\
+	unsigned long sleep_avg = (p)->sleep_avg;		\
+	if (grace_expired(p, (grace)))				\
+		sleep_avg = min((unsigned long)(p)->sleep_avg,	\
+		(unsigned long)slice_avg(p));			\
+	NS_TO_JIFFIES(sleep_avg) * MAX_BONUS / MAX_SLEEP_AVG;	\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#275: FILE: kernel/sched.c:321:
+#define BONUS_MULTIPLIER(p) \
+	(grace_expired(p, G1) ? : SLICE_AVG_MULTIPLIER(p))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#278: FILE: kernel/sched.c:324:
+#define BONUS_DIVISOR(p) \
+	(grace_expired(p, G2) ? : (1 + ADJUSTED_BONUS(p, G1)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#289: FILE: kernel/sched.c:335:
+#define INTERACTIVE_SLEEP_NS(p, ns) \
+	(BONUS_MULTIPLIER(p) * (ns) >= INTERACTIVE_SLEEP_AVG(p)	|| \
+	((p)->sleep_avg < INTERACTIVE_SLEEP_AVG(p) && BONUS_MULTIPLIER(p) * \
+	(ns) + (p)->sleep_avg >= INTERACTIVE_SLEEP_AVG(p))      || \
+	((p)->sleep_avg >= INTERACTIVE_SLEEP_AVG(p) && BONUS_MULTIPLIER(p) * \
+	(ns) + ((p)->sleep_avg % NEXT_PRIO) >= NEXT_PRIO))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ns' - possible side-effects?
#289: FILE: kernel/sched.c:335:
+#define INTERACTIVE_SLEEP_NS(p, ns) \
+	(BONUS_MULTIPLIER(p) * (ns) >= INTERACTIVE_SLEEP_AVG(p)	|| \
+	((p)->sleep_avg < INTERACTIVE_SLEEP_AVG(p) && BONUS_MULTIPLIER(p) * \
+	(ns) + (p)->sleep_avg >= INTERACTIVE_SLEEP_AVG(p))      || \
+	((p)->sleep_avg >= INTERACTIVE_SLEEP_AVG(p) && BONUS_MULTIPLIER(p) * \
+	(ns) + ((p)->sleep_avg % NEXT_PRIO) >= NEXT_PRIO))

WARNING:TYPO_SPELLING: 'boundry' may be misspelled - perhaps 'boundary'?
#320: FILE: kernel/sched.c:953:
+		 * TASK_INTERACTIVE boundry before moving on so that no
 		                    ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#337: FILE: kernel/sched.c:966:
+			else if (p->sleep_avg >= INTERACTIVE_SLEEP_AVG(p) &&
+					!grace_expired(p, G2)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#338: FILE: kernel/sched.c:967:
+					!grace_expired(p, G2)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#428: FILE: kernel/sched.c:1584:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#445: FILE: kernel/sched.c:1594:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#521: FILE: kernel/sched.c:2908:
+	if(!rt_task(p) && !conditional_release(p))

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#660: FILE: kernel/sysctl.c:74:
+extern int sched_g1;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#661: FILE: kernel/sysctl.c:75:
+extern int sched_g2;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#670: FILE: kernel/sysctl.c:232:
+ * kern_table.  We use these as one-element integer vectors. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#685: FILE: kernel/sysctl.c:672:
+		.maxlen		= sizeof (int),

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'zero', consider using the shared one in include/linux/sysctl.h
#689: FILE: kernel/sysctl.c:676:
+		.extra1		= &zero,

Commit d91bff3011cf ("proc/sysctl: add shared variables for range
check") added some shared const variables to be used instead of a local
copy in each source file.

Consider replacing the sysctl range checking value with the shared
one in include/linux/sysctl.h.  The following conversion scheme may
be used::

  &zero     ->  SYSCTL_ZERO
  &one      ->  SYSCTL_ONE
  &int_max  ->  SYSCTL_INT_MAX

See:

  1. https://lore.kernel.org/lkml/20190430180111.10688-1-mcroce@redhat.com/
  2. https://lore.kernel.org/lkml/20190531131422.14970-1-mcroce@redhat.com/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#695: FILE: kernel/sysctl.c:682:
+		.maxlen		= sizeof (int),

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'zero', consider using the shared one in include/linux/sysctl.h
#699: FILE: kernel/sysctl.c:686:
+		.extra1		= &zero,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000105369.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 16 warnings, 18 checks, 643 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000105369.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
