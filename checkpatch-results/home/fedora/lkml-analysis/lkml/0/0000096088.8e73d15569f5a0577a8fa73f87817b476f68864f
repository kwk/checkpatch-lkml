WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
protocol specific parts to their place and avoid  huge universal net/compat.c 

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#61: FILE: include/linux/net.h:153:
+	int		(*compat_setsockopt)(struct socket *sock, int level,
+				      int optname, char __user *optval, int optlen);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#63: FILE: include/linux/net.h:155:
+	int		(*compat_getsockopt)(struct socket *sock, int level,
+				      int optname, char __user *optval, int __user *optlen);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#74: FILE: include/linux/netfilter.h:84:
+	int (*compat_set)(struct sock *sk, int optval,
+			void __user *user, unsigned int len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#80: FILE: include/linux/netfilter.h:90:
+	int (*compat_get)(struct sock *sk, int optval,
+			void __user *user, int *len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#89: FILE: include/linux/netfilter.h:254:
+int compat_nf_setsockopt(struct sock *sk, int pf, int optval,
+		char __user *opt, int len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#91: FILE: include/linux/netfilter.h:256:
+int compat_nf_getsockopt(struct sock *sk, int pf, int optval,
+		char __user *opt, int *len);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#103: FILE: include/net/inet_connection_sock.h:54:
+	int	    (*compat_setsockopt)(struct sock *sk,
+				int level, int optname,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#106: FILE: include/net/inet_connection_sock.h:57:
+	int	    (*compat_getsockopt)(struct sock *sk,
+				int level, int optname,

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#117: FILE: include/net/ip.h:359:
+extern int	compat_ip_setsockopt(struct sock *sk, int level,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#118: FILE: include/net/ip.h:360:
+extern int	compat_ip_setsockopt(struct sock *sk, int level,
+			int optname, char __user *optval, int optlen);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#119: FILE: include/net/ip.h:361:
+extern int	compat_ip_getsockopt(struct sock *sk, int level,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#120: FILE: include/net/ip.h:362:
+extern int	compat_ip_getsockopt(struct sock *sk, int level,
+			int optname, char __user *optval, int __user *optlen);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#130: FILE: include/net/ipv6.h:523:
+extern int			compat_ipv6_setsockopt(struct sock *sk,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#131: FILE: include/net/ipv6.h:524:
+extern int			compat_ipv6_setsockopt(struct sock *sk,
+						int level,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#135: FILE: include/net/ipv6.h:528:
+extern int			compat_ipv6_getsockopt(struct sock *sk,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#136: FILE: include/net/ipv6.h:529:
+extern int			compat_ipv6_getsockopt(struct sock *sk,
+						int level,

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPACING: Unnecessary space before function pointer arguments
#149: FILE: include/net/sctp/structs.h:517:
+	int		(*compat_setsockopt)	(struct sock *sk,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: include/net/sctp/structs.h:518:
+	int		(*compat_setsockopt)	(struct sock *sk,
+					 int level,

WARNING:SPACING: Unnecessary space before function pointer arguments
#154: FILE: include/net/sctp/structs.h:522:
+	int		(*compat_getsockopt)	(struct sock *sk,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#155: FILE: include/net/sctp/structs.h:523:
+	int		(*compat_getsockopt)	(struct sock *sk,
+					 int level,

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#169: FILE: include/net/sock.h:524:
+	int			(*compat_setsockopt)(struct sock *sk,
+					int level,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#173: FILE: include/net/sock.h:528:
+	int			(*compat_getsockopt)(struct sock *sk,
+					int level,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#183: FILE: include/net/sock.h:827:
+extern int compat_sock_common_getsockopt(struct socket *sock, int level,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#184: FILE: include/net/sock.h:828:
+extern int compat_sock_common_getsockopt(struct socket *sock, int level,
+		int optname, char __user *optval, int __user *optlen);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#185: FILE: include/net/sock.h:829:
+extern int compat_sock_common_setsockopt(struct socket *sock, int level,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#186: FILE: include/net/sock.h:830:
+extern int compat_sock_common_setsockopt(struct socket *sock, int level,
+		int optname, char __user *optval, int optlen);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#196: FILE: include/net/tcp.h:355:
+extern int			compat_tcp_getsockopt(struct sock *sk,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#197: FILE: include/net/tcp.h:356:
+extern int			compat_tcp_getsockopt(struct sock *sk,
+					int level, int optname,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#199: FILE: include/net/tcp.h:358:
+extern int			compat_tcp_setsockopt(struct sock *sk,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#200: FILE: include/net/tcp.h:359:
+extern int			compat_tcp_setsockopt(struct sock *sk,
+					int level, int optname,

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#227: FILE: net/compat.c:440:
+static int do_set_sock_timeout(struct socket *sock, int level,
+		int optname, char __user *optval, int optlen)

CHECK:SPACING: No space is necessary after a cast
#236: FILE: net/compat.c:455:
+	err = sock_setsockopt(sock, level, optname, (char *) &ktime, sizeof(ktime));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#243: FILE: net/compat.c:462:
+static int compat_sock_setsockopt(struct socket *sock, int level, int optname,
+				char __user *optval, int optlen)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#275: FILE: net/compat.c:487:
+	if ((sock = sockfd_lookup(fd, &err))!=NULL)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#275: FILE: net/compat.c:487:
+	if ((sock = sockfd_lookup(fd, &err))!=NULL)
 	                                    ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#275: FILE: net/compat.c:487:
+	if ((sock = sockfd_lookup(fd, &err))!=NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#277: FILE: net/compat.c:489:
+		err = security_socket_setsockopt(sock,level,optname);
 		                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#277: FILE: net/compat.c:489:
+		err = security_socket_setsockopt(sock,level,optname);
 		                                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#285: FILE: net/compat.c:497:
+			err = compat_sock_setsockopt(sock, level,
+					optname, optval, optlen);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: net/compat.c:510:
+static int do_get_sock_timeout(struct socket *sock, int level, int optname,
 		char __user *optval, int __user *optlen)

CHECK:SPACING: No space is necessary after a cast
#307: FILE: net/compat.c:525:
+	err = sock_getsockopt(sock, level, optname, (char *) &ktime, &len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#317: FILE: net/compat.c:539:
+static int compat_sock_getsockopt(struct socket *sock, int level, int optname,
 				char __user *optval, int __user *optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#329: FILE: net/compat.c:547:
+asmlinkage long compat_sys_getsockopt(int fd, int level, int optname,
+				char __user *optval, int __user *optlen)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#334: FILE: net/compat.c:552:
+	if ((sock = sockfd_lookup(fd, &err))!=NULL)
+	{

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#334: FILE: net/compat.c:552:
+	if ((sock = sockfd_lookup(fd, &err))!=NULL)
 	                                    ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#334: FILE: net/compat.c:552:
+	if ((sock = sockfd_lookup(fd, &err))!=NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#337: FILE: net/compat.c:555:
+		err = security_socket_getsockopt(sock, level,
+							   optname);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#345: FILE: net/compat.c:563:
+			err = compat_sock_getsockopt(sock, level,
+					optname, optval, optlen);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#367: FILE: net/core/sock.c:1390:
+int compat_sock_common_getsockopt(struct socket *sock, int level,
+		int optname, char __user *optval, int __user *optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#388: FILE: net/core/sock.c:1433:
+int compat_sock_common_setsockopt(struct socket *sock,
+		int level, int optname, char __user *optval, int optlen)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#410: FILE: net/dccp/dccp.h:196:
+extern int	   compat_dccp_getsockopt(struct sock *sk,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#411: FILE: net/dccp/dccp.h:197:
+extern int	   compat_dccp_getsockopt(struct sock *sk,
+				int level, int optname,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#413: FILE: net/dccp/dccp.h:199:
+extern int	   compat_dccp_setsockopt(struct sock *sk,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#414: FILE: net/dccp/dccp.h:200:
+extern int	   compat_dccp_setsockopt(struct sock *sk,
+				int level, int optname,

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#510: FILE: net/dccp/proto.c:459:
+static int do_dccp_setsockopt(struct sock *sk, int level, int optname,
+		char __user *optval, int optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#541: FILE: net/dccp/proto.c:523:
+int compat_dccp_setsockopt(struct sock *sk, int level, int optname,
+		    char __user *optval, int optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#565: FILE: net/dccp/proto.c:570:
+static int do_dccp_getsockopt(struct sock *sk, int level, int optname,
 		    char __user *optval, int __user *optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#594: FILE: net/dccp/proto.c:620:
+int compat_dccp_getsockopt(struct sock *sk, int level, int optname,
+		    char __user *optval, int __user *optlen)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#655: FILE: net/ipv4/ip_sockglue.c:384:
+static int do_ip_setsockopt(struct sock *sk, int level,
+		int optname, char __user *optval, int optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#684: FILE: net/ipv4/ip_sockglue.c:862:
+int ip_setsockopt(struct sock *sk, int level,
+		int optname, char __user *optval, int optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#695: FILE: net/ipv4/ip_sockglue.c:873:
+	if (err == -ENOPROTOOPT && optname != IP_HDRINCL &&
+		optname != IP_IPSEC_POLICY && optname != IP_XFRM_POLICY

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#697: FILE: net/ipv4/ip_sockglue.c:875:
+#ifdef CONFIG_IP_MROUTE
+		&& (optname < MRT_BASE || optname > (MRT_BASE + 10))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#710: FILE: net/ipv4/ip_sockglue.c:888:
+int compat_ip_setsockopt(struct sock *sk, int level,
+		int optname, char __user *optval, int optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#721: FILE: net/ipv4/ip_sockglue.c:899:
+	if (err == -ENOPROTOOPT && optname != IP_HDRINCL &&
+		optname != IP_IPSEC_POLICY && optname != IP_XFRM_POLICY

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#723: FILE: net/ipv4/ip_sockglue.c:901:
+#ifdef CONFIG_IP_MROUTE
+		&& (optname < MRT_BASE || optname > (MRT_BASE + 10))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#728: FILE: net/ipv4/ip_sockglue.c:906:
+		err = compat_nf_setsockopt(sk, PF_INET,
+				optname, optval, optlen);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#743: FILE: net/ipv4/ip_sockglue.c:920:
+static int do_ip_getsockopt(struct sock *sk, int level, int optname,
+		char __user *optval, int __user *optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#770: FILE: net/ipv4/ip_sockglue.c:1124:
+int ip_getsockopt(struct sock *sk, int level,
+		int optname, char __user *optval, int __user *optlen)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#779: FILE: net/ipv4/ip_sockglue.c:1133:
+#ifdef CONFIG_IP_MROUTE
+		&& (optname < MRT_BASE || optname > MRT_BASE+10)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#779: FILE: net/ipv4/ip_sockglue.c:1133:
+		&& (optname < MRT_BASE || optname > MRT_BASE+10)
 		                                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#782: FILE: net/ipv4/ip_sockglue.c:1136:
+^I   ^Iint len;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#782: FILE: net/ipv4/ip_sockglue.c:1136:
+^I   ^Iint len;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#784: FILE: net/ipv4/ip_sockglue.c:1138:
+		if(get_user(len,optlen))
 		               ^

ERROR:SPACING: space required before the open parenthesis '('
#784: FILE: net/ipv4/ip_sockglue.c:1138:
+		if(get_user(len,optlen))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#789: FILE: net/ipv4/ip_sockglue.c:1143:
+		err = nf_getsockopt(sk, PF_INET, optname, optval,
+				&len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#801: FILE: net/ipv4/ip_sockglue.c:1155:
+int compat_ip_getsockopt(struct sock *sk, int level,
+		int optname, char __user *optval, int __user *optlen)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#810: FILE: net/ipv4/ip_sockglue.c:1164:
+#ifdef CONFIG_IP_MROUTE
+		&& (optname < MRT_BASE || optname > MRT_BASE+10)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#810: FILE: net/ipv4/ip_sockglue.c:1164:
+		&& (optname < MRT_BASE || optname > MRT_BASE+10)
 		                                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#813: FILE: net/ipv4/ip_sockglue.c:1167:
+^I   ^Iint len;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#813: FILE: net/ipv4/ip_sockglue.c:1167:
+^I   ^Iint len;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#815: FILE: net/ipv4/ip_sockglue.c:1169:
+		if(get_user(len,optlen))
 		               ^

ERROR:SPACING: space required before the open parenthesis '('
#815: FILE: net/ipv4/ip_sockglue.c:1169:
+		if(get_user(len,optlen))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#820: FILE: net/ipv4/ip_sockglue.c:1174:
+		err = compat_nf_getsockopt(sk, PF_INET,
+				optname, optval, &len);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#837: FILE: net/ipv4/ip_sockglue.c:1191:
+EXPORT_SYMBOL(compat_ip_setsockopt);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#847: FILE: net/ipv4/raw.c:664:
+static int do_raw_setsockopt(struct sock *sk, int level, int optname,
 			  char __user *optval, int optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#872: FILE: net/ipv4/raw.c:685:
+static int compat_raw_setsockopt(struct sock *sk, int level, int optname,
+			  char __user *optval, int optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#882: FILE: net/ipv4/raw.c:695:
+static int do_raw_getsockopt(struct sock *sk, int level, int optname,
+			  char __user *optval, int __user *optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#901: FILE: net/ipv4/raw.c:716:
+static int compat_raw_getsockopt(struct sock *sk, int level, int optname,
+			  char __user *optval, int __user *optlen)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#933: FILE: net/ipv4/tcp.c:1691:
+static int do_tcp_setsockopt(struct sock *sk, int level,
+		int optname, char __user *optval, int optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#964: FILE: net/ipv4/tcp.c:1883:
+int compat_tcp_setsockopt(struct sock *sk, int level,
+		int optname, char __user *optval, int optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#990: FILE: net/ipv4/tcp.c:1960:
+static int do_tcp_getsockopt(struct sock *sk, int level,
+		int optname, char __user *optval, int __user *optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1020: FILE: net/ipv4/tcp.c:2062:
+int compat_tcp_getsockopt(struct sock *sk, int level,
+		int optname, char __user *optval, int __user *optlen)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1044: FILE: net/ipv4/tcp.c:2196:
+EXPORT_SYMBOL(compat_tcp_getsockopt);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1078: FILE: net/ipv4/udp.c:1211:
+static int do_udp_setsockopt(struct sock *sk, int level, int optname,
 			  char __user *optval, int optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1105: FILE: net/ipv4/udp.c:1266:
+static int compat_udp_setsockopt(struct sock *sk, int level, int optname,
+		char __user *optval, int optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1115: FILE: net/ipv4/udp.c:1276:
+static int do_udp_getsockopt(struct sock *sk, int level, int optname,
 			  char __user *optval, int __user *optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1140: FILE: net/ipv4/udp.c:1319:
+static int compat_udp_getsockopt(struct sock *sk, int level, int optname,
+			  char __user *optval, int __user *optlen)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1205: FILE: net/ipv6/ipv6_sockglue.c:113:
+static int do_ipv6_setsockopt(struct sock *sk, int level, int optname,
 		    char __user *optval, int optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1257: FILE: net/ipv6/ipv6_sockglue.c:635:
+	if (err == -ENOPROTOOPT && optname != IPV6_IPSEC_POLICY &&
+			optname != IPV6_XFRM_POLICY) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1260: FILE: net/ipv6/ipv6_sockglue.c:638:
+		err = nf_setsockopt(sk, PF_INET6, optname, optval,
+				optlen);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1267: FILE: net/ipv6/ipv6_sockglue.c:645:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1270: FILE: net/ipv6/ipv6_sockglue.c:648:
+int compat_ipv6_setsockopt(struct sock *sk, int level, int optname,
+		    char __user *optval, int optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1290: FILE: net/ipv6/ipv6_sockglue.c:668:
+	if (err == -ENOPROTOOPT && optname != IPV6_IPSEC_POLICY &&
+			optname != IPV6_XFRM_POLICY) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1293: FILE: net/ipv6/ipv6_sockglue.c:671:
+		err = compat_nf_setsockopt(sk, PF_INET6, optname, optval,
+				optlen);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1310: FILE: net/ipv6/ipv6_sockglue.c:691:
+static int do_ipv6_getsockopt(struct sock *sk, int level, int optname,
 		    char __user *optval, int __user *optlen)

ERROR:SPACING: space required before the open parenthesis '('
#1353: FILE: net/ipv6/ipv6_sockglue.c:904:
+	if(level != SOL_IPV6)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1360: FILE: net/ipv6/ipv6_sockglue.c:911:
+	if (err == -ENOPROTOOPT && optname != IPV6_ADDRFORM &&
+			optname != MCAST_MSFILTER) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1368: FILE: net/ipv6/ipv6_sockglue.c:919:
+		err = nf_getsockopt(sk, PF_INET6, optname, optval,
+				&len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1379: FILE: net/ipv6/ipv6_sockglue.c:930:
+int compat_ipv6_getsockopt(struct sock *sk, int level, int optname,
+		    char __user *optval, int __user *optlen)

ERROR:SPACING: space required before the open parenthesis '('
#1392: FILE: net/ipv6/ipv6_sockglue.c:943:
+	if(level != SOL_IPV6)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1399: FILE: net/ipv6/ipv6_sockglue.c:950:
+	if (err == -ENOPROTOOPT && optname != IPV6_ADDRFORM &&
+			optname != MCAST_MSFILTER) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1407: FILE: net/ipv6/ipv6_sockglue.c:958:
+		err = compat_nf_getsockopt(sk, PF_INET6, optname, optval,
+				&len);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1428: FILE: net/ipv6/ipv6_syms.c:23:
+EXPORT_SYMBOL(compat_ipv6_getsockopt);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1441: FILE: net/ipv6/raw.c:863:
+static int do_rawv6_setsockopt(struct sock *sk, int level, int optname,
 			    char __user *optval, int optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1473: FILE: net/ipv6/raw.c:893:
+static int rawv6_setsockopt(struct sock *sk, int level, int optname,
+			  char __user *optval, int optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1501: FILE: net/ipv6/raw.c:916:
+static int compat_rawv6_setsockopt(struct sock *sk, int level, int optname,
+			  char __user *optval, int optlen)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1503: FILE: net/ipv6/raw.c:918:
+	switch(level) {
+		case SOL_RAW:
[...]
+		case SOL_ICMPV6:
[...]
+		case SOL_IPV6:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#1503: FILE: net/ipv6/raw.c:918:
+	switch(level) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1524: FILE: net/ipv6/raw.c:939:
+static int do_rawv6_getsockopt(struct sock *sk, int level, int optname,
+			    char __user *optval, int __user *optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1536: FILE: net/ipv6/raw.c:969:
+static int rawv6_getsockopt(struct sock *sk, int level, int optname,
+			  char __user *optval, int __user *optlen)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1538: FILE: net/ipv6/raw.c:971:
+	switch(level) {
+		case SOL_RAW:
[...]
+		case SOL_ICMPV6:
[...]
+		case SOL_IPV6:
[...]
+		default:

ERROR:SPACING: space required before the open parenthesis '('
#1538: FILE: net/ipv6/raw.c:971:
+	switch(level) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1559: FILE: net/ipv6/raw.c:992:
+static int compat_rawv6_getsockopt(struct sock *sk, int level, int optname,
+			  char __user *optval, int __user *optlen)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1561: FILE: net/ipv6/raw.c:994:
+	switch(level) {
+		case SOL_RAW:
[...]
+		case SOL_ICMPV6:
[...]
+		case SOL_IPV6:
[...]
+		default:

ERROR:SPACING: space required before the open parenthesis '('
#1561: FILE: net/ipv6/raw.c:994:
+	switch(level) {

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1638: FILE: net/ipv6/udp.c:884:
+static int do_udpv6_setsockopt(struct sock *sk, int level, int optname,
 			  char __user *optval, int optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1656: FILE: net/ipv6/udp.c:928:
+static int udpv6_setsockopt(struct sock *sk, int level, int optname,
+			  char __user *optval, int optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1665: FILE: net/ipv6/udp.c:937:
+static int compat_udpv6_setsockopt(struct sock *sk, int level, int optname,
+		char __user *optval, int optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1675: FILE: net/ipv6/udp.c:947:
+static int do_udpv6_getsockopt(struct sock *sk, int level, int optname,
 			  char __user *optval, int __user *optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1691: FILE: net/ipv6/udp.c:981:
+static int udpv6_getsockopt(struct sock *sk, int level, int optname,
+			  char __user *optval, int __user *optlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1700: FILE: net/ipv6/udp.c:990:
+static int compat_udpv6_getsockopt(struct sock *sk, int level, int optname,
+			  char __user *optval, int __user *optlen)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1731: FILE: net/netfilter/nf_sockopt.c:136:
+static int compat_nf_sockopt(struct sock *sk, int pf, int val,
+		      char __user *opt, int *len, int get)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1745: FILE: net/netfilter/nf_sockopt.c:150:
+				if (val >= ops->get_optmin
+				    && val < ops->get_optmax) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1758: FILE: net/netfilter/nf_sockopt.c:163:
+				if (val >= ops->set_optmin
+				    && val < ops->set_optmax) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1785: FILE: net/netfilter/nf_sockopt.c:190:
+int compat_nf_setsockopt(struct sock *sk, int pf,
+		int val, char __user *opt, int len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1792: FILE: net/netfilter/nf_sockopt.c:197:
+int compat_nf_getsockopt(struct sock *sk, int pf,
+		int val, char __user *opt, int *len)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000096088.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 37 warnings, 107 checks, 1655 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000096088.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
