WARNING:TYPO_SPELLING: 'Filessytem' may be misspelled - perhaps 'Filesystem'?
#19: 
Subject: RE: [2.6.16 PATCH] Filessytem Events Reporter V2
                            ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
  Now, kernel is growing bigger and bigger continuously and performance is becoming slower. So, if possible, please consider to add a 

ERROR:BAD_SIGN_OFF: Unrecognized email address: 'LKML'
#44: 
To: LKML

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Andrew Morton; Evgeniy Polyakov; Matt Helsley'
#45: 
Cc: Andrew Morton; Evgeniy Polyakov; Matt Helsley

WARNING:TYPO_SPELLING: 'Filessytem' may be misspelled - perhaps 'Filesystem'?
#46: 
Subject: [2.6.16 PATCH] Filessytem Events Reporter V2
                        ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'uniqe' may be misspelled - perhaps 'unique'?
#54: 
  - Ensure fsevent sequence number is uniqe
                                      ^^^^^

WARNING:TYPO_SPELLING: 'filsystem' may be misspelled - perhaps 'filesystem'?
#56: 
This patch implements a filsystem events report facitily, Filesystem Events
                        ^^^^^^^^^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#130: FILE: include/linux/fsnotify.h:50:
+			   FSEVENT_MOVE | (isdir?FSEVENT_ISDIR:0));
 			                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#130: FILE: include/linux/fsnotify.h:50:
+			   FSEVENT_MOVE | (isdir?FSEVENT_ISDIR:0));
 			                                      ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#139: FILE: include/linux/fsnotify.h:63:
+		      FSEVENT_DELETE | (isdir?FSEVENT_ISDIR:0));
 		                             ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#139: FILE: include/linux/fsnotify.h:63:
+		      FSEVENT_DELETE | (isdir?FSEVENT_ISDIR:0));
 		                                           ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#165: FILE: include/linux/fsnotify.h:111:
+				((S_ISDIR(inode->i_mode))?FSEVENT_ISDIR:0));
 				                         ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#165: FILE: include/linux/fsnotify.h:111:
+				((S_ISDIR(inode->i_mode))?FSEVENT_ISDIR:0));
 				                                       ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#174: FILE: include/linux/fsnotify.h:129:
+				((S_ISDIR(inode->i_mode))?FSEVENT_ISDIR:0));
 				                         ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#174: FILE: include/linux/fsnotify.h:129:
+				((S_ISDIR(inode->i_mode))?FSEVENT_ISDIR:0));
 				                                       ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#183: FILE: include/linux/fsnotify.h:146:
+				((S_ISDIR(inode->i_mode))?FSEVENT_ISDIR:0));
 				                         ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#183: FILE: include/linux/fsnotify.h:146:
+				((S_ISDIR(inode->i_mode))?FSEVENT_ISDIR:0));
 				                                       ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#193: FILE: include/linux/fsnotify.h:167:
+				((S_ISDIR(inode->i_mode))?FSEVENT_ISDIR:0));
 				                         ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#193: FILE: include/linux/fsnotify.h:167:
+				((S_ISDIR(inode->i_mode))?FSEVENT_ISDIR:0));
 				                                       ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#202: FILE: include/linux/fsnotify.h:184:
+				((S_ISDIR(inode->i_mode))?FSEVENT_ISDIR:0));
 				                         ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#202: FILE: include/linux/fsnotify.h:184:
+				((S_ISDIR(inode->i_mode))?FSEVENT_ISDIR:0));
 				                                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#214: FILE: include/linux/fsnotify.h:239:
+	u32 fsevent_mask = 0;
+	if (ia_valid & (ATTR_UID | ATTR_GID | ATTR_MODE))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#247: FILE: fs/namespace.c:618:
+		char * tmp = getname(name);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#248: FILE: fs/namespace.c:619:
+		char * tmp = getname(name);
+		raise_fsevent_umount(tmp);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#272: FILE: fs/Kconfig:408:
+config FS_EVENTS
+	tristate "Report filesystem events to userspace"
+	---help---
+	  Provide a facility that reports filesystem events to userspace. The
+	  reported event include access, write, utime, chmod, chown, chgrp,
+	  close, open, create, rename, unlink, mkdir, rmdir, mount, umount.
+
+	  The user can set filesystem events filter to filter its events, so
+	  that he just get those events he concerns.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#298: FILE: include/linux/fsevent.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#315: FILE: include/linux/fsevent.h:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#316: FILE: include/linux/fsevent.h:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#327: FILE: include/linux/fsevent.h:30:
+^IFSEVENT_ACCESS = ^I0x00000001,^I/* File was accessed */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#328: FILE: include/linux/fsevent.h:31:
+^IFSEVENT_MODIFY = ^I0x00000002,^I/* File was modified */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#330: FILE: include/linux/fsevent.h:33:
+^IFSEVENT_CLOSE = ^I0x00000008,^I/* File was closed */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#331: FILE: include/linux/fsevent.h:34:
+^IFSEVENT_OPEN = ^I^I0x00000010,^I/* File was opened */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#332: FILE: include/linux/fsevent.h:35:
+^IFSEVENT_MOVE = ^I^I0x00000020,^I/* File was moved */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#333: FILE: include/linux/fsevent.h:36:
+^IFSEVENT_CREATE = ^I0x00000040,^I/* File was created */$

WARNING:TYPO_SPELLING: 'acknowlege' may be misspelled - perhaps 'acknowledge'?
#339: FILE: include/linux/fsevent.h:42:
+	 * or acknowlege types of the corresponding commands
 	      ^^^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#341: FILE: include/linux/fsevent.h:44:
+^IFSEVENT_FILTER_ALL = ^I0x08000000,^I/* For all events */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#342: FILE: include/linux/fsevent.h:45:
+^IFSEVENT_FILTER_PID = ^I0x10000000,^I/* For some process ID */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#343: FILE: include/linux/fsevent.h:46:
+^IFSEVENT_FILTER_UID = ^I0x20000000,^I/* For some user ID */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#346: FILE: include/linux/fsevent.h:49:
+^IFSEVENT_ISDIR = ^I0x80000000^I/* It is set for a dir */$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#351: FILE: include/linux/fsevent.h:54:
+typedef unsigned long fsevent_mask_t;

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#355: FILE: include/linux/fsevent.h:58:
+	FSEVENT_FILTER_IGNORE ,		/* Ignore fsevents mask defines*/
 	                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#357: FILE: include/linux/fsevent.h:60:
+};^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#371: FILE: include/linux/fsevent.h:74:
+^I */ $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#402: FILE: include/linux/fsevent.h:105:
+extern void raise_fsevent(struct dentry * dentryp, u32 mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#402: FILE: include/linux/fsevent.h:105:
+extern void raise_fsevent(struct dentry * dentryp, u32 mask);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#403: FILE: include/linux/fsevent.h:106:
+extern void raise_fsevent_move(struct inode * olddir, const char * oldname, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#403: FILE: include/linux/fsevent.h:106:
+extern void raise_fsevent_move(struct inode * olddir, const char * oldname, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#403: FILE: include/linux/fsevent.h:106:
+extern void raise_fsevent_move(struct inode * olddir, const char * oldname, 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#403: FILE: include/linux/fsevent.h:106:
+extern void raise_fsevent_move(struct inode * olddir, const char * oldname, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#404: FILE: include/linux/fsevent.h:107:
+extern void raise_fsevent_move(struct inode * olddir, const char * oldname, 
+		struct inode * newdir, const char * newname, u32 mask);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#404: FILE: include/linux/fsevent.h:107:
+		struct inode * newdir, const char * newname, u32 mask);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#404: FILE: include/linux/fsevent.h:107:
+		struct inode * newdir, const char * newname, u32 mask);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#405: FILE: include/linux/fsevent.h:108:
+extern void raise_fsevent_create(struct inode * inode, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#405: FILE: include/linux/fsevent.h:108:
+extern void raise_fsevent_create(struct inode * inode, 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#405: FILE: include/linux/fsevent.h:108:
+extern void raise_fsevent_create(struct inode * inode, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#406: FILE: include/linux/fsevent.h:109:
+extern void raise_fsevent_create(struct inode * inode, 
+		const char * name, u32 mask);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#406: FILE: include/linux/fsevent.h:109:
+		const char * name, u32 mask);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#407: FILE: include/linux/fsevent.h:110:
+extern void raise_fsevent_mount(const char * devname, const char * mountpoint);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#407: FILE: include/linux/fsevent.h:110:
+extern void raise_fsevent_mount(const char * devname, const char * mountpoint);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#407: FILE: include/linux/fsevent.h:110:
+extern void raise_fsevent_mount(const char * devname, const char * mountpoint);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#408: FILE: include/linux/fsevent.h:111:
+extern void raise_fsevent_umount(const char * mountpoint);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#408: FILE: include/linux/fsevent.h:111:
+extern void raise_fsevent_umount(const char * mountpoint);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#410: FILE: include/linux/fsevent.h:113:
+static void raise_fsevent(struct dentry * dentryp,  u32 mask)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#413: FILE: include/linux/fsevent.h:116:
+static void raise_fsevent_move(struct inode * olddir, const char * oldname, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#413: FILE: include/linux/fsevent.h:116:
+static void raise_fsevent_move(struct inode * olddir, const char * oldname, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#413: FILE: include/linux/fsevent.h:116:
+static void raise_fsevent_move(struct inode * olddir, const char * oldname, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#414: FILE: include/linux/fsevent.h:117:
+static void raise_fsevent_move(struct inode * olddir, const char * oldname, 
+		struct inode * newdir, const char * newname, u32 mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#414: FILE: include/linux/fsevent.h:117:
+		struct inode * newdir, const char * newname, u32 mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#414: FILE: include/linux/fsevent.h:117:
+		struct inode * newdir, const char * newname, u32 mask)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#417: FILE: include/linux/fsevent.h:120:
+static void raise_fsevent_create(struct inode * inode, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#417: FILE: include/linux/fsevent.h:120:
+static void raise_fsevent_create(struct inode * inode, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#418: FILE: include/linux/fsevent.h:121:
+static void raise_fsevent_create(struct inode * inode, 
+		const char * name, u32 mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#418: FILE: include/linux/fsevent.h:121:
+		const char * name, u32 mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#421: FILE: include/linux/fsevent.h:124:
+static void raise_fsevent_mount(const char * devname, const char * mountpoint)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#421: FILE: include/linux/fsevent.h:124:
+static void raise_fsevent_mount(const char * devname, const char * mountpoint)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#424: FILE: include/linux/fsevent.h:127:
+static void raise_fsevent_umount(const char * mountpoint)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#432: FILE: fs/fsevent.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#433: FILE: fs/fsevent.c:2:
+ * ^Ifsevent.c$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#434: FILE: fs/fsevent.c:3:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#437: FILE: fs/fsevent.c:6:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#449: FILE: fs/fsevent.c:18:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#450: FILE: fs/fsevent.c:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#475: FILE: fs/fsevent.c:44:
+typedef struct pid_filter {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#481: FILE: fs/fsevent.c:50:
+typedef struct uid_filter {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#487: FILE: fs/fsevent.c:56:
+typedef struct gid_filter {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#493: FILE: fs/fsevent.c:62:
+typedef struct fsevent_listener {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#502: FILE: fs/fsevent.c:71:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#502: FILE: fs/fsevent.c:71:
+
+	

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#504: FILE: fs/fsevent.c:73:
+static struct sock * fsevent_sock = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#504: FILE: fs/fsevent.c:73:
+static struct sock * fsevent_sock = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#511: FILE: fs/fsevent.c:80:
+static unsigned long last = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#512: FILE: fs/fsevent.c:81:
+static int fsevent_sum = 0;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#533: FILE: fs/fsevent.c:102:
+	if (event_mask == 0) {
+		return -1;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#539: FILE: fs/fsevent.c:108:
+static int filter_fsevent_all(u32 * mask)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#546: FILE: fs/fsevent.c:115:
+	if ((((*mask) & FSEVENT_ISDIR) == FSEVENT_ISDIR)
+		 && ((fsevents_mask & FSEVENT_ISDIR) == 0)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#552: FILE: fs/fsevent.c:121:
+	if ((*mask) == 0) {
+		ret = -5;
+	}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#560: FILE: fs/fsevent.c:129:
+static void fsevent_send(struct sk_buff * skb)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#562: FILE: fs/fsevent.c:131:
+	struct sk_buff_head * head = &get_cpu_var(fsevent_send_queue);

WARNING:LINE_SPACING: Missing a blank line after declarations
#563: FILE: fs/fsevent.c:132:
+	struct sk_buff_head * head = &get_cpu_var(fsevent_send_queue);
+	skb_queue_tail(head, skb);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#568: FILE: fs/fsevent.c:137:
+int __raise_fsevent(const char * oldname, const char * newname, u32 mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#568: FILE: fs/fsevent.c:137:
+int __raise_fsevent(const char * oldname, const char * newname, u32 mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#572: FILE: fs/fsevent.c:141:
+	char * nameptr = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#574: FILE: fs/fsevent.c:143:
+	struct nlmsghdr * nlhdr;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#575: FILE: fs/fsevent.c:144:
+	struct sk_buff * skb = NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#597: FILE: fs/fsevent.c:166:
+^I                                                                                                                                       $

WARNING:LONG_LINE: line length of 143 exceeds 100 columns
#597: FILE: fs/fsevent.c:166:
+	                                                                                                                                       

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:CODE_INDENT: code indent should use tabs where possible
#597: FILE: fs/fsevent.c:166:
+^I                                                                                                                                       $

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#600: FILE: fs/fsevent.c:169:
+^I        return -ENOMEM;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#601: FILE: fs/fsevent.c:170:
+^I                                                                                                                                       $

WARNING:LONG_LINE: line length of 143 exceeds 100 columns
#601: FILE: fs/fsevent.c:170:
+	                                                                                                                                       

ERROR:CODE_INDENT: code indent should use tabs where possible
#601: FILE: fs/fsevent.c:170:
+^I                                                                                                                                       $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around nlhdr->nlmsg_seq
#605: FILE: fs/fsevent.c:174:
+	get_seq(&(nlhdr->nlmsg_seq), &event->cpu);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#631: FILE: fs/fsevent.c:200:
+void raise_fsevent(struct dentry * dentryp, u32 mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#639: FILE: fs/fsevent.c:208:
+void raise_fsevent_create(struct inode * inode, const char * name, u32 mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#639: FILE: fs/fsevent.c:208:
+void raise_fsevent_create(struct inode * inode, const char * name, u32 mask)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#645: FILE: fs/fsevent.c:214:
+void raise_fsevent_move(struct inode * olddir, const char * oldname, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#645: FILE: fs/fsevent.c:214:
+void raise_fsevent_move(struct inode * olddir, const char * oldname, 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#645: FILE: fs/fsevent.c:214:
+void raise_fsevent_move(struct inode * olddir, const char * oldname, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#646: FILE: fs/fsevent.c:215:
+void raise_fsevent_move(struct inode * olddir, const char * oldname, 
+		struct inode * newdir, const char * newname, u32 mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#646: FILE: fs/fsevent.c:215:
+		struct inode * newdir, const char * newname, u32 mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#646: FILE: fs/fsevent.c:215:
+		struct inode * newdir, const char * newname, u32 mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#652: FILE: fs/fsevent.c:221:
+void raise_fsevent_mount(const char * devname, const char * mountpoint)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#652: FILE: fs/fsevent.c:221:
+void raise_fsevent_mount(const char * devname, const char * mountpoint)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#657: FILE: fs/fsevent.c:226:
+void raise_fsevent_umount(const char * mountpoint)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#666: FILE: fs/fsevent.c:235:
+	struct sk_buff * skb = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#667: FILE: fs/fsevent.c:236:
+	struct nlmsghdr * nlhdr = NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#670: FILE: fs/fsevent.c:239:
+^I                                                                                                                                       $

WARNING:LONG_LINE: line length of 143 exceeds 100 columns
#670: FILE: fs/fsevent.c:239:
+	                                                                                                                                       

ERROR:CODE_INDENT: code indent should use tabs where possible
#670: FILE: fs/fsevent.c:239:
+^I                                                                                                                                       $

ERROR:CODE_INDENT: code indent should use tabs where possible
#673: FILE: fs/fsevent.c:242:
+^I        return -ENOMEM;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#674: FILE: fs/fsevent.c:243:
+^I                                                                                                                                       $

WARNING:LONG_LINE: line length of 143 exceeds 100 columns
#674: FILE: fs/fsevent.c:243:
+	                                                                                                                                       

ERROR:CODE_INDENT: code indent should use tabs where possible
#674: FILE: fs/fsevent.c:243:
+^I                                                                                                                                       $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#680: FILE: fs/fsevent.c:249:
+^Ievent->type = type; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#689: FILE: fs/fsevent.c:258:
+^I                                                                                                                                       $

WARNING:LONG_LINE: line length of 143 exceeds 100 columns
#689: FILE: fs/fsevent.c:258:
+	                                                                                                                                       

ERROR:CODE_INDENT: code indent should use tabs where possible
#689: FILE: fs/fsevent.c:258:
+^I                                                                                                                                       $

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#694: FILE: fs/fsevent.c:263:
+	return (netlink_unicast(fsevent_sock, skb, pid, MSG_DONTWAIT));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#701: FILE: fs/fsevent.c:270:
+static void set_fsevent_mask(u32 * to_mask, u32 from_mask, int mode)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#709: FILE: fs/fsevent.c:278:
+#define DEFINE_FILTER_FIND_FUNC(type, key) ^I^I^I^I\$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#709: FILE: fs/fsevent.c:278:
+#define DEFINE_FILTER_FIND_FUNC(type, key) 				\
+	type * find_##type(struct list_head * head, key##_t id)		\
+	{								\
+		int alloc_flag = 1;					\
+		type * entry = NULL;					\
+									\
+		list_for_each_entry(entry, head, list) {		\
+			if (entry->key == id) {				\
+				alloc_flag = 0;				\
+				break;					\
+			}						\
+		}							\
+									\
+		if (alloc_flag == 1) {					\
+			entry  = (type *)kmalloc(sizeof(type), GFP_ATOMIC); \
+			if (entry == NULL) 				\
+				return NULL;				\
+			memset(entry, 0, sizeof(type));			\
+			entry->key = id;				\
+			list_add_tail(&(entry->list), head);		\
+		}							\
+		return entry;						\
+	}								\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'key' - possible side-effects?
#709: FILE: fs/fsevent.c:278:
+#define DEFINE_FILTER_FIND_FUNC(type, key) 				\
+	type * find_##type(struct list_head * head, key##_t id)		\
+	{								\
+		int alloc_flag = 1;					\
+		type * entry = NULL;					\
+									\
+		list_for_each_entry(entry, head, list) {		\
+			if (entry->key == id) {				\
+				alloc_flag = 0;				\
+				break;					\
+			}						\
+		}							\
+									\
+		if (alloc_flag == 1) {					\
+			entry  = (type *)kmalloc(sizeof(type), GFP_ATOMIC); \
+			if (entry == NULL) 				\
+				return NULL;				\
+			memset(entry, 0, sizeof(type));			\
+			entry->key = id;				\
+			list_add_tail(&(entry->list), head);		\
+		}							\
+		return entry;						\
+	}								\
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'key' may be better as '(key)' to avoid precedence issues
#709: FILE: fs/fsevent.c:278:
+#define DEFINE_FILTER_FIND_FUNC(type, key) 				\
+	type * find_##type(struct list_head * head, key##_t id)		\
+	{								\
+		int alloc_flag = 1;					\
+		type * entry = NULL;					\
+									\
+		list_for_each_entry(entry, head, list) {		\
+			if (entry->key == id) {				\
+				alloc_flag = 0;				\
+				break;					\
+			}						\
+		}							\
+									\
+		if (alloc_flag == 1) {					\
+			entry  = (type *)kmalloc(sizeof(type), GFP_ATOMIC); \
+			if (entry == NULL) 				\
+				return NULL;				\
+			memset(entry, 0, sizeof(type));			\
+			entry->key = id;				\
+			list_add_tail(&(entry->list), head);		\
+		}							\
+		return entry;						\
+	}								\
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#710: FILE: fs/fsevent.c:279:
+	type * find_##type(struct list_head * head, key##_t id)		\

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#713: FILE: fs/fsevent.c:282:
+		type * entry = NULL;					\

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#723: FILE: fs/fsevent.c:292:
+			entry  = (type *)kmalloc(sizeof(type), GFP_ATOMIC); \

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#724: FILE: fs/fsevent.c:293:
+^I^I^Iif (entry == NULL) ^I^I^I^I\$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#724: FILE: fs/fsevent.c:293:
+			if (entry == NULL) 				\

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around entry->list
#728: FILE: fs/fsevent.c:297:
+			list_add_tail(&(entry->list), head);		\

ERROR:TRAILING_WHITESPACE: trailing whitespace
#738: FILE: fs/fsevent.c:307:
+^I^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#741: FILE: fs/fsevent.c:310:
+static void set_fsevent_filter(struct fsevent_filter * filter, pid_t pid)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#746: FILE: fs/fsevent.c:315:
+	listener * listenerp = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#747: FILE: fs/fsevent.c:316:
+	pid_filter * pfilter = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#748: FILE: fs/fsevent.c:317:
+	uid_filter * ufilter = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#749: FILE: fs/fsevent.c:318:
+	gid_filter * gfilter = NULL;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#751: FILE: fs/fsevent.c:320:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!listenerp"
#761: FILE: fs/fsevent.c:330:
+	if (unlikely(listenerp == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around listenerp->pid_filter_list_head
#767: FILE: fs/fsevent.c:336:
+		INIT_LIST_HEAD(&(listenerp->pid_filter_list_head));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around listenerp->uid_filter_list_head
#768: FILE: fs/fsevent.c:337:
+		INIT_LIST_HEAD(&(listenerp->uid_filter_list_head));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around listenerp->gid_filter_list_head
#769: FILE: fs/fsevent.c:338:
+		INIT_LIST_HEAD(&(listenerp->gid_filter_list_head));

CHECK:BRACES: braces {} should be used on all arms of this statement
#773: FILE: fs/fsevent.c:342:
+		if (control == FSEVENT_FILTER_REMOVE) {
[...]
+		} else
[...]

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around listenerp->list
#775: FILE: fs/fsevent.c:344:
+			list_del(&(listenerp->list));

CHECK:BRACES: Unbalanced braces around else statement
#777: FILE: fs/fsevent.c:346:
+		} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around listenerp->mask
#778: FILE: fs/fsevent.c:347:
+			set_fsevent_mask(&(listenerp->mask), mask, control);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around listenerp->pid_filter_list_head
#780: FILE: fs/fsevent.c:349:
+		pfilter = find_pid_filter(&(listenerp->pid_filter_list_head),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#781: FILE: fs/fsevent.c:350:
+		pfilter = find_pid_filter(&(listenerp->pid_filter_list_head),
+				filter->id.pid);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pfilter"
#782: FILE: fs/fsevent.c:351:
+		if (unlikely(pfilter == NULL))

CHECK:BRACES: braces {} should be used on all arms of this statement
#785: FILE: fs/fsevent.c:354:
+		if (control == FSEVENT_FILTER_REMOVE) {
[...]
+		} else
[...]

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around pfilter->list
#786: FILE: fs/fsevent.c:355:
+			list_del(&(pfilter->list));

CHECK:BRACES: Unbalanced braces around else statement
#788: FILE: fs/fsevent.c:357:
+		} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around pfilter->mask
#789: FILE: fs/fsevent.c:358:
+			set_fsevent_mask(&(pfilter->mask), mask, control);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around listenerp->uid_filter_list_head
#791: FILE: fs/fsevent.c:360:
+		ufilter = find_uid_filter(&(listenerp->uid_filter_list_head),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#792: FILE: fs/fsevent.c:361:
+		ufilter = find_uid_filter(&(listenerp->uid_filter_list_head),
+						filter->id.uid);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ufilter"
#793: FILE: fs/fsevent.c:362:
+		if (unlikely(ufilter == NULL))

CHECK:BRACES: braces {} should be used on all arms of this statement
#796: FILE: fs/fsevent.c:365:
+		if (control == FSEVENT_FILTER_REMOVE) {
[...]
+		} else
[...]

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ufilter->list
#797: FILE: fs/fsevent.c:366:
+			list_del(&(ufilter->list));

CHECK:BRACES: Unbalanced braces around else statement
#799: FILE: fs/fsevent.c:368:
+		} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ufilter->mask
#800: FILE: fs/fsevent.c:369:
+			set_fsevent_mask(&(ufilter->mask), mask, control);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around listenerp->gid_filter_list_head
#802: FILE: fs/fsevent.c:371:
+		gfilter = find_gid_filter(&(listenerp->gid_filter_list_head),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#803: FILE: fs/fsevent.c:372:
+		gfilter = find_gid_filter(&(listenerp->gid_filter_list_head),
+						filter->id.gid);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!gfilter"
#804: FILE: fs/fsevent.c:373:
+		if (unlikely(gfilter == NULL))

CHECK:BRACES: braces {} should be used on all arms of this statement
#807: FILE: fs/fsevent.c:376:
+		if (control == FSEVENT_FILTER_REMOVE) {
[...]
+		} else
[...]

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around gfilter->list
#808: FILE: fs/fsevent.c:377:
+			list_del(&(gfilter->list));

CHECK:BRACES: Unbalanced braces around else statement
#810: FILE: fs/fsevent.c:379:
+		} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around gfilter->mask
#811: FILE: fs/fsevent.c:380:
+			set_fsevent_mask(&(gfilter->mask), mask, control);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#819: FILE: fs/fsevent.c:388:
+static listener * find_fsevent_listener(pid_t pid)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#821: FILE: fs/fsevent.c:390:
+	listener * listenerp = NULL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#822: FILE: fs/fsevent.c:391:
+	listener * listenerp = NULL;
+	spin_lock(&listener_list_lock);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#833: FILE: fs/fsevent.c:402:
+static void cleanup_dead_listener(listener * x)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#835: FILE: fs/fsevent.c:404:
+	pid_filter * p = NULL, * pq = NULL;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#835: FILE: fs/fsevent.c:404:
+	pid_filter * p = NULL, * pq = NULL;
 	                       ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#836: FILE: fs/fsevent.c:405:
+	uid_filter * u = NULL, * uq = NULL;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#836: FILE: fs/fsevent.c:405:
+	uid_filter * u = NULL, * uq = NULL;
 	                       ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#837: FILE: fs/fsevent.c:406:
+	gid_filter * g = NULL, * gq = NULL;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#837: FILE: fs/fsevent.c:406:
+	gid_filter * g = NULL, * gq = NULL;
 	                       ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#839: FILE: fs/fsevent.c:408:
+	if (p == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around x->list
#842: FILE: fs/fsevent.c:411:
+	list_del(&(x->list));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around x->pid_filter_list_head
#844: FILE: fs/fsevent.c:413:
+	list_for_each_entry_safe(p, pq, &(x->pid_filter_list_head), list) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around p->list
#845: FILE: fs/fsevent.c:414:
+		list_del(&(p->list));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around x->uid_filter_list_head
#849: FILE: fs/fsevent.c:418:
+	list_for_each_entry_safe(u, uq, &(x->uid_filter_list_head), list) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around u->list
#850: FILE: fs/fsevent.c:419:
+		list_del(&(u->list));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around x->gid_filter_list_head
#854: FILE: fs/fsevent.c:423:
+	list_for_each_entry_safe(g, gq, &(x->gid_filter_list_head), list) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around g->list
#855: FILE: fs/fsevent.c:424:
+		list_del(&(g->list));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#858: FILE: fs/fsevent.c:427:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#866: FILE: fs/fsevent.c:435:
+	struct fsevent_filter * filter = NULL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!find_fsevent_listener"
#875: FILE: fs/fsevent.c:444:
+			if (find_fsevent_listener(pid) == NULL)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#883: FILE: fs/fsevent.c:452:
+#define DEFINE_FILTER_MATCH_FUNC(filtertype, key) ^I^I^I\$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'filtertype' may be better as '(filtertype)' to avoid precedence issues
#883: FILE: fs/fsevent.c:452:
+#define DEFINE_FILTER_MATCH_FUNC(filtertype, key) 			\
+	static int match_##filtertype(listener * p,			\
+				struct fsevent * event,			\
+				struct sk_buff * skb)			\
+	{								\
+		int ret = 0;						\
+		filtertype * xfilter = NULL;				\
+		struct sk_buff * skb2 = NULL;				\
+		struct list_head *  head = &(p->key##_filter_list_head);  \
+		list_for_each_entry(xfilter, head, list) {		\
+			if (xfilter->key != event->key)			\
+				continue;				\
+			ret = filter_fsevent(xfilter->mask, event->type); \
+			if ( ret != 0)					\
+				return -1;				\
+			skb2 = skb_clone(skb, GFP_KERNEL);		\
+       			if (skb2 == NULL)				\
+				return -ENOMEM;				\
+			NETLINK_CB(skb2).dst_group = 0;			\
+			NETLINK_CB(skb2).dst_pid = p->pid;		\
+			NETLINK_CB(skb2).pid = 0;			\
+			return (netlink_unicast(fsevent_sock, skb2,	\
+					p->pid, MSG_DONTWAIT));		\
+		}							\
+		return -ENODEV;						\
+	}								\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'key' - possible side-effects?
#883: FILE: fs/fsevent.c:452:
+#define DEFINE_FILTER_MATCH_FUNC(filtertype, key) 			\
+	static int match_##filtertype(listener * p,			\
+				struct fsevent * event,			\
+				struct sk_buff * skb)			\
+	{								\
+		int ret = 0;						\
+		filtertype * xfilter = NULL;				\
+		struct sk_buff * skb2 = NULL;				\
+		struct list_head *  head = &(p->key##_filter_list_head);  \
+		list_for_each_entry(xfilter, head, list) {		\
+			if (xfilter->key != event->key)			\
+				continue;				\
+			ret = filter_fsevent(xfilter->mask, event->type); \
+			if ( ret != 0)					\
+				return -1;				\
+			skb2 = skb_clone(skb, GFP_KERNEL);		\
+       			if (skb2 == NULL)				\
+				return -ENOMEM;				\
+			NETLINK_CB(skb2).dst_group = 0;			\
+			NETLINK_CB(skb2).dst_pid = p->pid;		\
+			NETLINK_CB(skb2).pid = 0;			\
+			return (netlink_unicast(fsevent_sock, skb2,	\
+					p->pid, MSG_DONTWAIT));		\
+		}							\
+		return -ENODEV;						\
+	}								\
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'key' may be better as '(key)' to avoid precedence issues
#883: FILE: fs/fsevent.c:452:
+#define DEFINE_FILTER_MATCH_FUNC(filtertype, key) 			\
+	static int match_##filtertype(listener * p,			\
+				struct fsevent * event,			\
+				struct sk_buff * skb)			\
+	{								\
+		int ret = 0;						\
+		filtertype * xfilter = NULL;				\
+		struct sk_buff * skb2 = NULL;				\
+		struct list_head *  head = &(p->key##_filter_list_head);  \
+		list_for_each_entry(xfilter, head, list) {		\
+			if (xfilter->key != event->key)			\
+				continue;				\
+			ret = filter_fsevent(xfilter->mask, event->type); \
+			if ( ret != 0)					\
+				return -1;				\
+			skb2 = skb_clone(skb, GFP_KERNEL);		\
+       			if (skb2 == NULL)				\
+				return -ENOMEM;				\
+			NETLINK_CB(skb2).dst_group = 0;			\
+			NETLINK_CB(skb2).dst_pid = p->pid;		\
+			NETLINK_CB(skb2).pid = 0;			\
+			return (netlink_unicast(fsevent_sock, skb2,	\
+					p->pid, MSG_DONTWAIT));		\
+		}							\
+		return -ENODEV;						\
+	}								\
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#884: FILE: fs/fsevent.c:453:
+	static int match_##filtertype(listener * p,			\

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#885: FILE: fs/fsevent.c:454:
+				struct fsevent * event,			\

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#886: FILE: fs/fsevent.c:455:
+				struct sk_buff * skb)			\

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#889: FILE: fs/fsevent.c:458:
+		filtertype * xfilter = NULL;				\

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#890: FILE: fs/fsevent.c:459:
+		struct sk_buff * skb2 = NULL;				\

ERROR:POINTER_LOCATION: "foo *  bar" should be "foo *bar"
#891: FILE: fs/fsevent.c:460:
+		struct list_head *  head = &(p->key##_filter_list_head);  \

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around p->key##_filter_list_head
#891: FILE: fs/fsevent.c:460:
+		struct list_head *  head = &(p->key##_filter_list_head);  \

ERROR:SPACING: space prohibited after that open parenthesis '('
#896: FILE: fs/fsevent.c:465:
+			if ( ret != 0)					\

ERROR:CODE_INDENT: code indent should use tabs where possible
#899: FILE: fs/fsevent.c:468:
+       ^I^I^Iif (skb2 == NULL)^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#899: FILE: fs/fsevent.c:468:
+       ^I^I^Iif (skb2 == NULL)^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#899: FILE: fs/fsevent.c:468:
+       ^I^I^Iif (skb2 == NULL)^I^I^I^I\$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skb2"
#899: FILE: fs/fsevent.c:468:
+       			if (skb2 == NULL)				\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#916: FILE: fs/fsevent.c:485:
+#define MATCH_XID(key, listenerp, event, skb) ^I^I^I\$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#916: FILE: fs/fsevent.c:485:
+#define MATCH_XID(key, listenerp, event, skb) 			\
+	ret = match_##key##_filter(listenerp, event, skb); 	\
+	if (ret == 0) {					 	\
+		kfree_skb(skb);				 	\
+	        continue;				 	\
+	}						 	\
+	do {} while (0)					 	\
+

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'skb' - possible side-effects?
#916: FILE: fs/fsevent.c:485:
+#define MATCH_XID(key, listenerp, event, skb) 			\
+	ret = match_##key##_filter(listenerp, event, skb); 	\
+	if (ret == 0) {					 	\
+		kfree_skb(skb);				 	\
+	        continue;				 	\
+	}						 	\
+	do {} while (0)					 	\
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#917: FILE: fs/fsevent.c:486:
+^Iret = match_##key##_filter(listenerp, event, skb); ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#918: FILE: fs/fsevent.c:487:
+^Iif (ret == 0) {^I^I^I^I^I ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#919: FILE: fs/fsevent.c:488:
+^I^Ikfree_skb(skb);^I^I^I^I ^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#920: FILE: fs/fsevent.c:489:
+^I        continue;^I^I^I^I ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#920: FILE: fs/fsevent.c:489:
+^I        continue;^I^I^I^I ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#921: FILE: fs/fsevent.c:490:
+^I}^I^I^I^I^I^I ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#922: FILE: fs/fsevent.c:491:
+^Ido {} while (0)^I^I^I^I^I ^I\$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#924: FILE: fs/fsevent.c:493:
+static int fsevent_send_to_process(struct sk_buff * skb)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#926: FILE: fs/fsevent.c:495:
+	listener * p  = NULL, * q = NULL;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#926: FILE: fs/fsevent.c:495:
+	listener * p  = NULL, * q = NULL;
 	                      ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#927: FILE: fs/fsevent.c:496:
+	struct fsevent * event = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#928: FILE: fs/fsevent.c:497:
+	struct sk_buff * skb2 = NULL;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 25)
#938: FILE: fs/fsevent.c:507:
+		if (filter_fsevent(p->mask, event->type) == 0) {
+			 skb2 = skb_clone(skb, GFP_KERNEL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#940: FILE: fs/fsevent.c:509:
+^I                 if (skb2 == NULL)$

WARNING:TABSTOP: Statements should start on a tabstop
#940: FILE: fs/fsevent.c:509:
+	                 if (skb2 == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skb2"
#940: FILE: fs/fsevent.c:509:
+	                 if (skb2 == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#941: FILE: fs/fsevent.c:510:
+^I                 ^Ireturn -ENOMEM;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#941: FILE: fs/fsevent.c:510:
+^I                 ^Ireturn -ENOMEM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#942: FILE: fs/fsevent.c:511:
+^I                 NETLINK_CB(skb2).dst_group = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#943: FILE: fs/fsevent.c:512:
+^I                 NETLINK_CB(skb2).dst_pid = p->pid;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#944: FILE: fs/fsevent.c:513:
+^I                 NETLINK_CB(skb2).pid = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#945: FILE: fs/fsevent.c:514:
+^I                 ret = netlink_unicast(fsevent_sock, skb2,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#946: FILE: fs/fsevent.c:515:
+^I                                p->pid, MSG_DONTWAIT);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#946: FILE: fs/fsevent.c:515:
+	                 ret = netlink_unicast(fsevent_sock, skb2,
+	                                p->pid, MSG_DONTWAIT);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#957: FILE: fs/fsevent.c:526:
+static void fsevent_commit(void * unused)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#959: FILE: fs/fsevent.c:528:
+	struct sk_buff * skb = NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#960: FILE: fs/fsevent.c:529:
+^I^I$

ERROR:SPACING: space required before the open parenthesis '('
#961: FILE: fs/fsevent.c:530:
+	while((skb = skb_dequeue(&get_cpu_var(fsevent_send_queue)))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#993: FILE: fs/fsevent.c:562:
+	struct sk_buff_head * listptr;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#994: FILE: fs/fsevent.c:563:
+	struct work_struct * workptr;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#997: FILE: fs/fsevent.c:566:
+	fsevent_sock = netlink_kernel_create(NETLINK_FSEVENT, 0,
+					 fsevent_recv, THIS_MODULE);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!register_sysctl_table"
#1007: FILE: fs/fsevent.c:576:
+	if (register_sysctl_table(fs_root_sysctl, 0) == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1008: FILE: fs/fsevent.c:577:
+                return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1008: FILE: fs/fsevent.c:577:
+                return -ENOMEM;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1015: FILE: fs/fsevent.c:584:
+	listener * p = NULL, * q = NULL;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#1015: FILE: fs/fsevent.c:584:
+	listener * p = NULL, * q = NULL;
 	                     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1016: FILE: fs/fsevent.c:585:
+	listener * p = NULL, * q = NULL;
+	sock_release(fsevent_sock->sk_socket);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000087505.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 128 errors, 54 warnings, 80 checks, 892 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000087505.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
