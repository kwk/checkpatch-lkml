WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
diff -urN linux-2.6/include/asm-s390/percpu.h linux-2.6-s390/include/asm-s390/percpu.h

ERROR:SPACING: space required after that ',' (ctx:VxV)
#69: FILE: include/asm-s390/percpu.h:18:
+#define __reloc_hide(var,offset) \
                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: include/asm-s390/percpu.h:20:
+       asm ( "larl %0,per_cpu__"#var"@GOTENT" \$

ERROR:SPACING: space prohibited after that open parenthesis '('
#78: FILE: include/asm-s390/percpu.h:20:
+       asm ( "larl %0,per_cpu__"#var"@GOTENT" \

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#78: FILE: include/asm-s390/percpu.h:20:
+       asm ( "larl %0,per_cpu__"#var"@GOTENT" \

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:CODE_INDENT: code indent should use tabs where possible
#79: FILE: include/asm-s390/percpu.h:21:
+             : "=a" (__ptr) : "X" (per_cpu__##var) ); \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: include/asm-s390/percpu.h:21:
+             : "=a" (__ptr) : "X" (per_cpu__##var) ); \$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#79: FILE: include/asm-s390/percpu.h:21:
+             : "=a" (__ptr) : "X" (per_cpu__##var) ); \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: include/asm-s390/percpu.h:22:
+       (typeof(&per_cpu__##var))((*__ptr) + (offset)); }))$

CHECK:SPACING: spaces preferred around that '&' (ctx:BxV)
#80: FILE: include/asm-s390/percpu.h:22:
+       (typeof(&per_cpu__##var))((*__ptr) + (offset)); }))
                ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#87: FILE: include/asm-s390/percpu.h:27:
+  (*({ unsigned long __ptr; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: include/asm-s390/percpu.h:28:
+       asm ( "" : "=a" (__ptr) : "0" (&per_cpu__##var) ); \$

ERROR:SPACING: space prohibited after that open parenthesis '('
#88: FILE: include/asm-s390/percpu.h:28:
+       asm ( "" : "=a" (__ptr) : "0" (&per_cpu__##var) ); \

ERROR:SPACING: space prohibited before that close parenthesis ')'
#88: FILE: include/asm-s390/percpu.h:28:
+       asm ( "" : "=a" (__ptr) : "0" (&per_cpu__##var) ); \

CHECK:SPACING: No space is necessary after a cast
#89: FILE: include/asm-s390/percpu.h:29:
+       (typeof(&per_cpu__##var)) (__ptr + (offset)); }))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: include/asm-s390/percpu.h:29:
+       (typeof(&per_cpu__##var)) (__ptr + (offset)); }))$

CHECK:SPACING: spaces preferred around that '&' (ctx:BxV)
#89: FILE: include/asm-s390/percpu.h:29:
+       (typeof(&per_cpu__##var)) (__ptr + (offset)); }))
                ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#98: FILE: include/asm-s390/percpu.h:38:
+#define DEFINE_PER_CPU(type, name) \
+    __attribute__((__section__(".data.percpu"))) \
+    __typeof__(type) per_cpu__##name

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: include/asm-s390/percpu.h:39:
+    __attribute__((__section__(".data.percpu"))) \$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.percpu") over __attribute__((__section__(".data.percpu")))
#99: FILE: include/asm-s390/percpu.h:39:
+    __attribute__((__section__(".data.percpu"))) \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: include/asm-s390/percpu.h:40:
+    __typeof__(type) per_cpu__##name$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#102: FILE: include/asm-s390/percpu.h:42:
+#define __get_cpu_var(var) __reloc_hide(var,S390_lowcore.percpu_offset)
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#103: FILE: include/asm-s390/percpu.h:43:
+#define per_cpu(var,cpu) __reloc_hide(var,__per_cpu_offset[cpu])
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#103: FILE: include/asm-s390/percpu.h:43:
+#define per_cpu(var,cpu) __reloc_hide(var,__per_cpu_offset[cpu])
                                          ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#109: FILE: include/asm-s390/percpu.h:49:
+	for (__i = 0; __i < NR_CPUS; __i++)			\

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#111: FILE: include/asm-s390/percpu.h:51:
+			memcpy((pcpudst)+__per_cpu_offset[__i],	\
 			                ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#117: FILE: include/asm-s390/percpu.h:57:
+#define DEFINE_PER_CPU(type, name) \
+    __typeof__(type) per_cpu__##name

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: include/asm-s390/percpu.h:58:
+    __typeof__(type) per_cpu__##name$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#120: FILE: include/asm-s390/percpu.h:60:
+#define __get_cpu_var(var) __reloc_hide(var,0)
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#121: FILE: include/asm-s390/percpu.h:61:
+#define per_cpu(var,cpu) __reloc_hide(var,0)
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#121: FILE: include/asm-s390/percpu.h:61:
+#define per_cpu(var,cpu) __reloc_hide(var,0)
                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#125: FILE: include/asm-s390/percpu.h:65:
+#define DECLARE_PER_CPU(type, name) extern __typeof__(type) per_cpu__##name

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#127: FILE: include/asm-s390/percpu.h:67:
+#define EXPORT_PER_CPU_SYMBOL(var) EXPORT_SYMBOL(per_cpu__##var)

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#128: FILE: include/asm-s390/percpu.h:68:
+#define EXPORT_PER_CPU_SYMBOL_GPL(var) EXPORT_SYMBOL_GPL(per_cpu__##var)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000271045.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 14 warnings, 5 checks, 84 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000271045.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
