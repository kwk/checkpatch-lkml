WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#46: FILE: linux/lzf.h:1:
+#ifndef _LZF_H_

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#49: FILE: linux/lzf.h:4:
+unsigned int lzf_decompress (const void *const in_data,  unsigned int in_len, void *out_data, unsigned int out_len);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#49: FILE: linux/lzf.h:4:
+unsigned int lzf_decompress (const void *const in_data,  unsigned int in_len, void *out_data, unsigned int out_len);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#50: FILE: linux/lzf.h:5:
+unsigned int lzf_compress (const void *const in_data, unsigned int in_len, void *out_data, unsigned int out_len, void *hbuf);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#50: FILE: linux/lzf.h:5:
+unsigned int lzf_compress (const void *const in_data, unsigned int in_len, void *out_data, unsigned int out_len, void *hbuf);

WARNING:PATCH_PREFIX: patch prefix 'lib' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#58: FILE: lzf_d.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#60: FILE: lzf_d.c:3:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#63: FILE: lzf_d.c:6:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#66: FILE: lzf_d.c:9:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#70: FILE: lzf_d.c:13:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#73: FILE: lzf_d.c:16:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#96: FILE: lzf_d.c:39:
+unsigned int $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#97: FILE: lzf_d.c:40:
+lzf_decompress (const void *const in_data,  unsigned int in_len,

ERROR:CODE_INDENT: code indent should use tabs where possible
#98: FILE: lzf_d.c:41:
+                void             *out_data, unsigned int out_len)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: lzf_d.c:41:
+                void             *out_data, unsigned int out_len)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: lzf_d.c:43:
+  u8 const *ip = in_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: lzf_d.c:44:
+  u8       *op = out_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: lzf_d.c:45:
+  u8 const *const in_end  = ip + in_len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: lzf_d.c:46:
+  u8       *const out_end = op + out_len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: lzf_d.c:48:
+  do$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#105: FILE: lzf_d.c:48:
+  do
+    {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#105: FILE: lzf_d.c:48:
+  do
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: lzf_d.c:49:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: lzf_d.c:50:
+      unsigned int ctrl = *ip++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: lzf_d.c:52:
+      if (ctrl < (1 << 5)) /* literal run */$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#109: FILE: lzf_d.c:52:
+      if (ctrl < (1 << 5)) /* literal run */
+        {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#109: FILE: lzf_d.c:52:
+      if (ctrl < (1 << 5)) /* literal run */
+        {

ERROR:CODE_INDENT: code indent should use tabs where possible
#110: FILE: lzf_d.c:53:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: lzf_d.c:53:
+        {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#111: FILE: lzf_d.c:54:
+          ctrl++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: lzf_d.c:54:
+          ctrl++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#113: FILE: lzf_d.c:56:
+          if (op + ctrl > out_end)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: lzf_d.c:56:
+          if (op + ctrl > out_end)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#113: FILE: lzf_d.c:56:
+          if (op + ctrl > out_end)
+            return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#114: FILE: lzf_d.c:57:
+            return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: lzf_d.c:57:
+            return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#117: FILE: lzf_d.c:60:
+          memcpy (op, ip, ctrl);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: lzf_d.c:60:
+          memcpy (op, ip, ctrl);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#117: FILE: lzf_d.c:60:
+          memcpy (op, ip, ctrl);

ERROR:CODE_INDENT: code indent should use tabs where possible
#118: FILE: lzf_d.c:61:
+          op += ctrl;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: lzf_d.c:61:
+          op += ctrl;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#119: FILE: lzf_d.c:62:
+          ip += ctrl;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: lzf_d.c:62:
+          ip += ctrl;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#121: FILE: lzf_d.c:64:
+          do$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: lzf_d.c:64:
+          do$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#121: FILE: lzf_d.c:64:
+          do
+            *op++ = *ip++;

ERROR:CODE_INDENT: code indent should use tabs where possible
#122: FILE: lzf_d.c:65:
+            *op++ = *ip++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: lzf_d.c:65:
+            *op++ = *ip++;$

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#122: FILE: lzf_d.c:65:
+            *op++ = *ip++;
             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#123: FILE: lzf_d.c:66:
+          while (--ctrl);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: lzf_d.c:66:
+          while (--ctrl);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#125: FILE: lzf_d.c:68:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: lzf_d.c:68:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: lzf_d.c:69:
+      else /* back reference */$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#126: FILE: lzf_d.c:69:
+      else /* back reference */
+        {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#126: FILE: lzf_d.c:69:
+      else /* back reference */
+        {

ERROR:CODE_INDENT: code indent should use tabs where possible
#127: FILE: lzf_d.c:70:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: lzf_d.c:70:
+        {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#128: FILE: lzf_d.c:71:
+          unsigned int len = ctrl >> 5;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: lzf_d.c:71:
+          unsigned int len = ctrl >> 5;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#130: FILE: lzf_d.c:73:
+          u8 *ref = op - ((ctrl & 0x1f) << 8) - 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: lzf_d.c:73:
+          u8 *ref = op - ((ctrl & 0x1f) << 8) - 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#132: FILE: lzf_d.c:75:
+          if (len == 7)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: lzf_d.c:75:
+          if (len == 7)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#132: FILE: lzf_d.c:75:
+          if (len == 7)
+            len += *ip++;

ERROR:CODE_INDENT: code indent should use tabs where possible
#133: FILE: lzf_d.c:76:
+            len += *ip++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: lzf_d.c:76:
+            len += *ip++;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#134: FILE: lzf_d.c:77:
+          $

ERROR:CODE_INDENT: code indent should use tabs where possible
#134: FILE: lzf_d.c:77:
+          $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: lzf_d.c:77:
+          $

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: lzf_d.c:78:
+          ref -= *ip++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: lzf_d.c:78:
+          ref -= *ip++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#137: FILE: lzf_d.c:80:
+          if (op + len + 2 > out_end)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: lzf_d.c:80:
+          if (op + len + 2 > out_end)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#137: FILE: lzf_d.c:80:
+          if (op + len + 2 > out_end)
+            return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#138: FILE: lzf_d.c:81:
+            return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: lzf_d.c:81:
+            return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#140: FILE: lzf_d.c:83:
+          if (ref < (u8 *)out_data)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: lzf_d.c:83:
+          if (ref < (u8 *)out_data)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#140: FILE: lzf_d.c:83:
+          if (ref < (u8 *)out_data)
+            return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#141: FILE: lzf_d.c:84:
+            return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: lzf_d.c:84:
+            return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#143: FILE: lzf_d.c:86:
+          *op++ = *ref++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#143: FILE: lzf_d.c:86:
+          *op++ = *ref++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#144: FILE: lzf_d.c:87:
+          *op++ = *ref++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: lzf_d.c:87:
+          *op++ = *ref++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#146: FILE: lzf_d.c:89:
+          do$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: lzf_d.c:89:
+          do$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#146: FILE: lzf_d.c:89:
+          do
+            *op++ = *ref++;

ERROR:CODE_INDENT: code indent should use tabs where possible
#147: FILE: lzf_d.c:90:
+            *op++ = *ref++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: lzf_d.c:90:
+            *op++ = *ref++;$

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#147: FILE: lzf_d.c:90:
+            *op++ = *ref++;
             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#148: FILE: lzf_d.c:91:
+          while (--len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: lzf_d.c:91:
+          while (--len);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#149: FILE: lzf_d.c:92:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: lzf_d.c:92:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: lzf_d.c:93:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: lzf_d.c:94:
+  while (op < out_end && ip < in_end);$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#151: FILE: lzf_d.c:94:
+  while (op < out_end && ip < in_end);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: lzf_d.c:96:
+  return op - (u8 *)out_data;$

WARNING:PATCH_PREFIX: patch prefix 'lib' exists, appears to be a -p0 patch

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#164: FILE: Kconfig:33:
+config LZF
+	tristate "LZF Compress/Decompress Support"
+
 #
 # compression support is select'ed if needed
 #

Kconfig symbols should have a help text which fully describes
it.

WARNING:PATCH_PREFIX: patch prefix 'lib' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#175: FILE: lzf.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#176: FILE: lzf.c:2:
+ * lib/lzf.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#218: FILE: lzf.c:44:
+EXPORT_SYMBOL_GPL(lzf_compress);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#219: FILE: lzf.c:45:
+EXPORT_SYMBOL_GPL(lzf_decompress);

WARNING:PATCH_PREFIX: patch prefix 'lib' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'lib' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#247: FILE: lzf_c.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: lzf_c.c:3:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#252: FILE: lzf_c.c:6:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#255: FILE: lzf_c.c:9:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#259: FILE: lzf_c.c:13:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#262: FILE: lzf_c.c:16:
+ * $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#293: FILE: lzf_c.c:47:
+#define FRST(p) (((p[0]) << 8) + p[1])

ERROR:SPACING: space required after that ',' (ctx:VxV)
#294: FILE: lzf_c.c:48:
+#define NEXT(v,p) (((v) << 8) + p[2])
               ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#294: FILE: lzf_c.c:48:
+#define NEXT(v,p) (((v) << 8) + p[2])

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#295: FILE: lzf_c.c:49:
+#define IDX(h) ((((h ^ (h << 5)) >> (3*8 - HLOG)) + h*3) & (HSIZE - 1))
                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#295: FILE: lzf_c.c:49:
+#define IDX(h) ((((h ^ (h << 5)) >> (3*8 - HLOG)) + h*3) & (HSIZE - 1))
                                                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'h' - possible side-effects?
#295: FILE: lzf_c.c:49:
+#define IDX(h) ((((h ^ (h << 5)) >> (3*8 - HLOG)) + h*3) & (HSIZE - 1))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'h' may be better as '(h)' to avoid precedence issues
#295: FILE: lzf_c.c:49:
+#define IDX(h) ((((h ^ (h << 5)) >> (3*8 - HLOG)) + h*3) & (HSIZE - 1))

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#303: FILE: lzf_c.c:57:
+#if 0

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#305: FILE: lzf_c.c:59:
+# define FRST(p) (p[0] << 5) ^ p[1]

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#305: FILE: lzf_c.c:59:
+# define FRST(p) (p[0] << 5) ^ p[1]

ERROR:SPACING: space required after that ',' (ctx:VxV)
#306: FILE: lzf_c.c:60:
+# define NEXT(v,p) ((v) << 5) ^ p[2]
                ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#306: FILE: lzf_c.c:60:
+# define NEXT(v,p) ((v) << 5) ^ p[2]

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#306: FILE: lzf_c.c:60:
+# define NEXT(v,p) ((v) << 5) ^ p[2]

CHECK:BIT_MACRO: Prefer using the BIT macro
#310: FILE: lzf_c.c:64:
+#define        MAX_LIT        (1 <<  5)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#311: FILE: lzf_c.c:65:
+#define        MAX_OFF        (1 << 13)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#324: FILE: lzf_c.c:78:
+lzf_compress (const void *const in_data, unsigned int in_len,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#327: FILE: lzf_c.c:81:
+  const u8 **htab = hbuf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#328: FILE: lzf_c.c:82:
+  const u8 **hslot;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: lzf_c.c:83:
+  const u8 *ip = (const u8 *)in_data;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#330: FILE: lzf_c.c:84:
+        u8 *op = (u8 *)out_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: lzf_c.c:84:
+        u8 *op = (u8 *)out_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: lzf_c.c:85:
+  const u8 *in_end  = ip + in_len;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#332: FILE: lzf_c.c:86:
+        u8 *out_end = op + out_len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: lzf_c.c:86:
+        u8 *out_end = op + out_len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#333: FILE: lzf_c.c:87:
+  const u8 *ref;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#335: FILE: lzf_c.c:89:
+  unsigned int hval = FRST (ip);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#335: FILE: lzf_c.c:89:
+  unsigned int hval = FRST (ip);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#336: FILE: lzf_c.c:90:
+  unsigned long off;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#337: FILE: lzf_c.c:91:
+           int lit = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#337: FILE: lzf_c.c:91:
+           int lit = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: lzf_c.c:95:
+    memset (htab, 0, sizeof (htab));$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#341: FILE: lzf_c.c:95:
+    memset (htab, 0, sizeof (htab));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#341: FILE: lzf_c.c:95:
+    memset (htab, 0, sizeof (htab));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: lzf_c.c:97:
+    for (hslot = htab; hslot < htab + HSIZE; hslot++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#343: FILE: lzf_c.c:97:
+    for (hslot = htab; hslot < htab + HSIZE; hslot++)
+      *hslot++ = ip;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#344: FILE: lzf_c.c:98:
+      *hslot++ = ip;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#348: FILE: lzf_c.c:102:
+  for (;;)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#348: FILE: lzf_c.c:102:
+  for (;;)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#348: FILE: lzf_c.c:102:
+  for (;;)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#349: FILE: lzf_c.c:103:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#350: FILE: lzf_c.c:104:
+      if (ip < in_end - 2)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#350: FILE: lzf_c.c:104:
+      if (ip < in_end - 2)
+        {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#350: FILE: lzf_c.c:104:
+      if (ip < in_end - 2)
+        {

ERROR:CODE_INDENT: code indent should use tabs where possible
#351: FILE: lzf_c.c:105:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#351: FILE: lzf_c.c:105:
+        {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#352: FILE: lzf_c.c:106:
+          hval = NEXT (hval, ip);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#352: FILE: lzf_c.c:106:
+          hval = NEXT (hval, ip);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#352: FILE: lzf_c.c:106:
+          hval = NEXT (hval, ip);

ERROR:CODE_INDENT: code indent should use tabs where possible
#353: FILE: lzf_c.c:107:
+          hslot = htab + IDX (hval);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#353: FILE: lzf_c.c:107:
+          hslot = htab + IDX (hval);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#353: FILE: lzf_c.c:107:
+          hslot = htab + IDX (hval);

ERROR:CODE_INDENT: code indent should use tabs where possible
#354: FILE: lzf_c.c:108:
+          ref = *hslot; *hslot = ip;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: lzf_c.c:108:
+          ref = *hslot; *hslot = ip;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#356: FILE: lzf_c.c:110:
+          if (1$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: lzf_c.c:110:
+          if (1$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#356: FILE: lzf_c.c:110:
+          if (1

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#356: FILE: lzf_c.c:110:
+          if (1
[...]
+              && *(u16 *)ref == *(u16 *)ip

ERROR:CODE_INDENT: code indent should use tabs where possible
#358: FILE: lzf_c.c:112:
+              && ref < ip /* the next test will actually take care of this, but this is faster */$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#358: FILE: lzf_c.c:112:
+#if INIT_HTAB && !USE_MEMCPY
+              && ref < ip /* the next test will actually take care of this, but this is faster */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#358: FILE: lzf_c.c:112:
+              && ref < ip /* the next test will actually take care of this, but this is faster */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#360: FILE: lzf_c.c:114:
+              && (off = ip - ref - 1) < MAX_OFF$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#360: FILE: lzf_c.c:114:
+#endif
+              && (off = ip - ref - 1) < MAX_OFF

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#360: FILE: lzf_c.c:114:
+              && (off = ip - ref - 1) < MAX_OFF$

ERROR:CODE_INDENT: code indent should use tabs where possible
#361: FILE: lzf_c.c:115:
+              && ip + 4 < in_end$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#361: FILE: lzf_c.c:115:
+              && (off = ip - ref - 1) < MAX_OFF
+              && ip + 4 < in_end

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#361: FILE: lzf_c.c:115:
+              && ip + 4 < in_end$

ERROR:CODE_INDENT: code indent should use tabs where possible
#362: FILE: lzf_c.c:116:
+              && ref > (u8 *)in_data$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#362: FILE: lzf_c.c:116:
+              && ip + 4 < in_end
+              && ref > (u8 *)in_data

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#362: FILE: lzf_c.c:116:
+              && ref > (u8 *)in_data$

ERROR:CODE_INDENT: code indent should use tabs where possible
#364: FILE: lzf_c.c:118:
+              && ref[0] == ip[0]$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#364: FILE: lzf_c.c:118:
+#if STRICT_ALIGN
+              && ref[0] == ip[0]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#364: FILE: lzf_c.c:118:
+              && ref[0] == ip[0]$

ERROR:CODE_INDENT: code indent should use tabs where possible
#365: FILE: lzf_c.c:119:
+              && ref[1] == ip[1]$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#365: FILE: lzf_c.c:119:
+              && ref[0] == ip[0]
+              && ref[1] == ip[1]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#365: FILE: lzf_c.c:119:
+              && ref[1] == ip[1]$

ERROR:CODE_INDENT: code indent should use tabs where possible
#366: FILE: lzf_c.c:120:
+              && ref[2] == ip[2]$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#366: FILE: lzf_c.c:120:
+              && ref[1] == ip[1]
+              && ref[2] == ip[2]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#366: FILE: lzf_c.c:120:
+              && ref[2] == ip[2]$

ERROR:CODE_INDENT: code indent should use tabs where possible
#368: FILE: lzf_c.c:122:
+              && *(u16 *)ref == *(u16 *)ip$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#368: FILE: lzf_c.c:122:
+#else
+              && *(u16 *)ref == *(u16 *)ip

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#368: FILE: lzf_c.c:122:
+              && *(u16 *)ref == *(u16 *)ip$

ERROR:CODE_INDENT: code indent should use tabs where possible
#369: FILE: lzf_c.c:123:
+              && ref[2] == ip[2]$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#369: FILE: lzf_c.c:123:
+              && *(u16 *)ref == *(u16 *)ip
+              && ref[2] == ip[2]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#369: FILE: lzf_c.c:123:
+              && ref[2] == ip[2]$

ERROR:CODE_INDENT: code indent should use tabs where possible
#371: FILE: lzf_c.c:125:
+            )$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#371: FILE: lzf_c.c:125:
+            )$

ERROR:CODE_INDENT: code indent should use tabs where possible
#372: FILE: lzf_c.c:126:
+            {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#372: FILE: lzf_c.c:126:
+            {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#373: FILE: lzf_c.c:127:
+              /* match found at *ref++ */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#374: FILE: lzf_c.c:128:
+              unsigned int len = 2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#374: FILE: lzf_c.c:128:
+              unsigned int len = 2;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#375: FILE: lzf_c.c:129:
+              unsigned int maxlen = in_end - ip - len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#375: FILE: lzf_c.c:129:
+              unsigned int maxlen = in_end - ip - len;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#376: FILE: lzf_c.c:130:
+              maxlen = maxlen > MAX_REF ? MAX_REF : maxlen;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#376: FILE: lzf_c.c:130:
+              unsigned int maxlen = in_end - ip - len;
+              maxlen = maxlen > MAX_REF ? MAX_REF : maxlen;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#376: FILE: lzf_c.c:130:
+              maxlen = maxlen > MAX_REF ? MAX_REF : maxlen;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#378: FILE: lzf_c.c:132:
+              do$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#378: FILE: lzf_c.c:132:
+              do$

ERROR:CODE_INDENT: code indent should use tabs where possible
#379: FILE: lzf_c.c:133:
+                len++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#379: FILE: lzf_c.c:133:
+                len++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#380: FILE: lzf_c.c:134:
+              while (len < maxlen && ref[len] == ip[len]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#380: FILE: lzf_c.c:134:
+              while (len < maxlen && ref[len] == ip[len]);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#382: FILE: lzf_c.c:136:
+              if (op + lit + 1 + 3 >= out_end)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#382: FILE: lzf_c.c:136:
+              if (op + lit + 1 + 3 >= out_end)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#383: FILE: lzf_c.c:137:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#383: FILE: lzf_c.c:137:
+                return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#385: FILE: lzf_c.c:139:
+              if (lit)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#385: FILE: lzf_c.c:139:
+              if (lit)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#385: FILE: lzf_c.c:139:
+              if (lit)
+                {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (14, 18)
#385: FILE: lzf_c.c:139:
+              if (lit)
+                {

ERROR:CODE_INDENT: code indent should use tabs where possible
#386: FILE: lzf_c.c:140:
+                {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#386: FILE: lzf_c.c:140:
+                {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#387: FILE: lzf_c.c:141:
+                  *op++ = lit - 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#387: FILE: lzf_c.c:141:
+                  *op++ = lit - 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#388: FILE: lzf_c.c:142:
+                  lit = -lit;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#388: FILE: lzf_c.c:142:
+                  lit = -lit;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#389: FILE: lzf_c.c:143:
+                  do$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#389: FILE: lzf_c.c:143:
+                  do$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (18, 20)
#389: FILE: lzf_c.c:143:
+                  do
+                    *op++ = ip[lit];

ERROR:CODE_INDENT: code indent should use tabs where possible
#390: FILE: lzf_c.c:144:
+                    *op++ = ip[lit];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#390: FILE: lzf_c.c:144:
+                    *op++ = ip[lit];$

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#390: FILE: lzf_c.c:144:
+                    *op++ = ip[lit];
                     ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#391: FILE: lzf_c.c:145:
+                  while (++lit);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#391: FILE: lzf_c.c:145:
+                  while (++lit);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#392: FILE: lzf_c.c:146:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#392: FILE: lzf_c.c:146:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#394: FILE: lzf_c.c:148:
+              len -= 2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#394: FILE: lzf_c.c:148:
+              len -= 2;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#395: FILE: lzf_c.c:149:
+              ip++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#395: FILE: lzf_c.c:149:
+              ip++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#397: FILE: lzf_c.c:151:
+              if (len < 7)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#397: FILE: lzf_c.c:151:
+              if (len < 7)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#397: FILE: lzf_c.c:151:
+              if (len < 7)
+                {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (14, 18)
#397: FILE: lzf_c.c:151:
+              if (len < 7)
+                {

ERROR:CODE_INDENT: code indent should use tabs where possible
#398: FILE: lzf_c.c:152:
+                {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#398: FILE: lzf_c.c:152:
+                {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#399: FILE: lzf_c.c:153:
+                  *op++ = (off >> 8) + (len << 5);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#399: FILE: lzf_c.c:153:
+                  *op++ = (off >> 8) + (len << 5);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#400: FILE: lzf_c.c:154:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#400: FILE: lzf_c.c:154:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#401: FILE: lzf_c.c:155:
+              else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#401: FILE: lzf_c.c:155:
+              else$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#401: FILE: lzf_c.c:155:
+              else
+                {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (14, 18)
#401: FILE: lzf_c.c:155:
+              else
+                {

ERROR:CODE_INDENT: code indent should use tabs where possible
#402: FILE: lzf_c.c:156:
+                {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#402: FILE: lzf_c.c:156:
+                {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#403: FILE: lzf_c.c:157:
+                  *op++ = (off >> 8) + (  7 << 5);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#403: FILE: lzf_c.c:157:
+                  *op++ = (off >> 8) + (  7 << 5);$

ERROR:SPACING: space prohibited after that open parenthesis '('
#403: FILE: lzf_c.c:157:
+                  *op++ = (off >> 8) + (  7 << 5);

ERROR:CODE_INDENT: code indent should use tabs where possible
#404: FILE: lzf_c.c:158:
+                  *op++ = len - 7;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#404: FILE: lzf_c.c:158:
+                  *op++ = len - 7;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#405: FILE: lzf_c.c:159:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#405: FILE: lzf_c.c:159:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#407: FILE: lzf_c.c:161:
+              *op++ = off;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#407: FILE: lzf_c.c:161:
+              *op++ = off;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#410: FILE: lzf_c.c:164:
+              ip += len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#410: FILE: lzf_c.c:164:
+              ip += len;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#411: FILE: lzf_c.c:165:
+              hval = FRST (ip);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#411: FILE: lzf_c.c:165:
+              hval = FRST (ip);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#411: FILE: lzf_c.c:165:
+              hval = FRST (ip);

ERROR:CODE_INDENT: code indent should use tabs where possible
#412: FILE: lzf_c.c:166:
+              hval = NEXT (hval, ip);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#412: FILE: lzf_c.c:166:
+              hval = NEXT (hval, ip);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#412: FILE: lzf_c.c:166:
+              hval = NEXT (hval, ip);

ERROR:CODE_INDENT: code indent should use tabs where possible
#413: FILE: lzf_c.c:167:
+              htab[IDX (hval)] = ip;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#413: FILE: lzf_c.c:167:
+              htab[IDX (hval)] = ip;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#413: FILE: lzf_c.c:167:
+              htab[IDX (hval)] = ip;

ERROR:CODE_INDENT: code indent should use tabs where possible
#414: FILE: lzf_c.c:168:
+              ip++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#414: FILE: lzf_c.c:168:
+              ip++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#416: FILE: lzf_c.c:170:
+              do$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#416: FILE: lzf_c.c:170:
+              do$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#416: FILE: lzf_c.c:170:
+              do
+                {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (14, 18)
#416: FILE: lzf_c.c:170:
+              do
+                {

ERROR:CODE_INDENT: code indent should use tabs where possible
#417: FILE: lzf_c.c:171:
+                {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#417: FILE: lzf_c.c:171:
+                {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#418: FILE: lzf_c.c:172:
+                  hval = NEXT (hval, ip);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#418: FILE: lzf_c.c:172:
+                  hval = NEXT (hval, ip);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#418: FILE: lzf_c.c:172:
+                  hval = NEXT (hval, ip);

ERROR:CODE_INDENT: code indent should use tabs where possible
#419: FILE: lzf_c.c:173:
+                  htab[IDX (hval)] = ip;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#419: FILE: lzf_c.c:173:
+                  htab[IDX (hval)] = ip;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#419: FILE: lzf_c.c:173:
+                  htab[IDX (hval)] = ip;

ERROR:CODE_INDENT: code indent should use tabs where possible
#420: FILE: lzf_c.c:174:
+                  ip++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#420: FILE: lzf_c.c:174:
+                  ip++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#421: FILE: lzf_c.c:175:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#421: FILE: lzf_c.c:175:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#422: FILE: lzf_c.c:176:
+              while (len--);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#422: FILE: lzf_c.c:176:
+              while (len--);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#424: FILE: lzf_c.c:178:
+              continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#424: FILE: lzf_c.c:178:
+              continue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#425: FILE: lzf_c.c:179:
+            }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#425: FILE: lzf_c.c:179:
+            }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#426: FILE: lzf_c.c:180:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#426: FILE: lzf_c.c:180:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#427: FILE: lzf_c.c:181:
+      else if (ip == in_end)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#428: FILE: lzf_c.c:182:
+        break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#428: FILE: lzf_c.c:182:
+        break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#431: FILE: lzf_c.c:185:
+      lit++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#432: FILE: lzf_c.c:186:
+      ip++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#434: FILE: lzf_c.c:188:
+      if (lit == MAX_LIT)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#434: FILE: lzf_c.c:188:
+      if (lit == MAX_LIT)
+        {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#434: FILE: lzf_c.c:188:
+      if (lit == MAX_LIT)
+        {

ERROR:CODE_INDENT: code indent should use tabs where possible
#435: FILE: lzf_c.c:189:
+        {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#435: FILE: lzf_c.c:189:
+        {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#436: FILE: lzf_c.c:190:
+          if (op + 1 + MAX_LIT >= out_end)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#436: FILE: lzf_c.c:190:
+          if (op + 1 + MAX_LIT >= out_end)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#436: FILE: lzf_c.c:190:
+          if (op + 1 + MAX_LIT >= out_end)
+            return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#437: FILE: lzf_c.c:191:
+            return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#437: FILE: lzf_c.c:191:
+            return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#439: FILE: lzf_c.c:193:
+          *op++ = MAX_LIT - 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#439: FILE: lzf_c.c:193:
+          *op++ = MAX_LIT - 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#441: FILE: lzf_c.c:195:
+          memcpy (op, ip - MAX_LIT, MAX_LIT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#441: FILE: lzf_c.c:195:
+          memcpy (op, ip - MAX_LIT, MAX_LIT);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#441: FILE: lzf_c.c:195:
+          memcpy (op, ip - MAX_LIT, MAX_LIT);

ERROR:CODE_INDENT: code indent should use tabs where possible
#442: FILE: lzf_c.c:196:
+          op += MAX_LIT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#442: FILE: lzf_c.c:196:
+          op += MAX_LIT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#443: FILE: lzf_c.c:197:
+          lit = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#443: FILE: lzf_c.c:197:
+          lit = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#445: FILE: lzf_c.c:199:
+          lit = -lit;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#445: FILE: lzf_c.c:199:
+          lit = -lit;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#446: FILE: lzf_c.c:200:
+          do$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#446: FILE: lzf_c.c:200:
+          do$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#446: FILE: lzf_c.c:200:
+          do
+            *op++ = ip[lit];

ERROR:CODE_INDENT: code indent should use tabs where possible
#447: FILE: lzf_c.c:201:
+            *op++ = ip[lit];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: lzf_c.c:201:
+            *op++ = ip[lit];$

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#447: FILE: lzf_c.c:201:
+            *op++ = ip[lit];
             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#448: FILE: lzf_c.c:202:
+          while (++lit);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#448: FILE: lzf_c.c:202:
+          while (++lit);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#450: FILE: lzf_c.c:204:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#450: FILE: lzf_c.c:204:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#451: FILE: lzf_c.c:205:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#453: FILE: lzf_c.c:207:
+  if (lit)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#453: FILE: lzf_c.c:207:
+  if (lit)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#453: FILE: lzf_c.c:207:
+  if (lit)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#454: FILE: lzf_c.c:208:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#455: FILE: lzf_c.c:209:
+      if (op + lit + 1 >= out_end)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#458: FILE: lzf_c.c:212:
+      *op++ = lit - 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#459: FILE: lzf_c.c:213:
+      lit = -lit;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#460: FILE: lzf_c.c:214:
+      do$

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#461: FILE: lzf_c.c:215:
+	*op++ = ip[lit];
 	^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#462: FILE: lzf_c.c:216:
+      while (++lit);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#463: FILE: lzf_c.c:217:
+    }$

CHECK:SPACING: No space is necessary after a cast
#465: FILE: lzf_c.c:219:
+  return op - (u8 *) out_data;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#465: FILE: lzf_c.c:219:
+  return op - (u8 *) out_data;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000227666.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 136 errors, 198 warnings, 25 checks, 395 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000227666.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
