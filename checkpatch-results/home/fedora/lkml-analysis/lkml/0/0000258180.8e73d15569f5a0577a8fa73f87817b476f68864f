WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#49: 
--- linux-cvs/drivers/oprofile/buffer_sync.c	30 Jun 2004 22:51:07 -0000	1.23

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#67: FILE: drivers/oprofile/buffer_sync.c:39:
+void process_task_mortuary(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#68: FILE: drivers/oprofile/buffer_sync.c:40:
+  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#68: FILE: drivers/oprofile/buffer_sync.c:40:
+  $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#82: FILE: drivers/oprofile/buffer_sync.c:47:
+static int task_free_notify(struct notifier_block * self, unsigned long val, void * data)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#82: FILE: drivers/oprofile/buffer_sync.c:47:
+static int task_free_notify(struct notifier_block * self, unsigned long val, void * data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#86: FILE: drivers/oprofile/buffer_sync.c:49:
+	struct task_struct * task = (struct task_struct *)data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#87: FILE: drivers/oprofile/buffer_sync.c:50:
+	struct task_struct * task = (struct task_struct *)data;
+	spin_lock(&task_mortuary);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#99: FILE: drivers/oprofile/buffer_sync.c:55:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: drivers/oprofile/buffer_sync.c:55:
+   $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#100: FILE: drivers/oprofile/buffer_sync.c:56:
+   
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#105: FILE: drivers/oprofile/buffer_sync.c:60:
+static int task_exit_notify(struct notifier_block * self, unsigned long val, void * data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#105: FILE: drivers/oprofile/buffer_sync.c:60:
+static int task_exit_notify(struct notifier_block * self, unsigned long val, void * data)

ERROR:CODE_INDENT: code indent should use tabs where possible
#113: FILE: drivers/oprofile/buffer_sync.c:66:
+  ^Ireturn 0;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#113: FILE: drivers/oprofile/buffer_sync.c:66:
+  ^Ireturn 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: drivers/oprofile/buffer_sync.c:66:
+  ^Ireturn 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#120: FILE: drivers/oprofile/buffer_sync.c:68:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: drivers/oprofile/buffer_sync.c:68:
+  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#121: FILE: drivers/oprofile/buffer_sync.c:69:
+  $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#121: FILE: drivers/oprofile/buffer_sync.c:69:
+  
+  

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: drivers/oprofile/buffer_sync.c:69:
+  $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#143: FILE: drivers/oprofile/buffer_sync.c:78:
+	struct mm_struct * mm = current->mm;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#144: FILE: drivers/oprofile/buffer_sync.c:79:
+	struct vm_area_struct * mpnt;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#162: FILE: drivers/oprofile/buffer_sync.c:96:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: drivers/oprofile/buffer_sync.c:96:
+  $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#283: FILE: drivers/oprofile/buffer_sync.c:430:
+	struct list_head * pos;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#284: FILE: drivers/oprofile/buffer_sync.c:431:
+	struct list_head * pos2;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#285: FILE: drivers/oprofile/buffer_sync.c:432:
+	struct task_struct * task;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#300: FILE: drivers/oprofile/buffer_sync.c:447:
+^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#304: FILE: drivers/oprofile/buffer_sync.c:451:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#324: FILE: drivers/oprofile/buffer_sync.c:471:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#334: FILE: drivers/oprofile/buffer_sync.c:480:
+	struct oprofile_cpu_buffer * cpu_buf = &cpu_buffer[cpu];

ERROR:TRAILING_WHITESPACE: trailing whitespace
#341: FILE: drivers/oprofile/buffer_sync.c:487:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: drivers/oprofile/buffer_sync.c:487:
+ $

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#460: FILE: drivers/oprofile/cpu_buffer.c:39:
+	for (i = 0; i < NR_CPUS; ++i) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#474: FILE: drivers/oprofile/cpu_buffer.c:53:
+	for (i = 0; i < NR_CPUS; ++i) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#509: FILE: drivers/oprofile/cpu_buffer.c:94:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#509: FILE: drivers/oprofile/cpu_buffer.c:94:
+ $

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#512: FILE: drivers/oprofile/cpu_buffer.c:97:
+	for (i = 0; i < NR_CPUS; ++i) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#513: FILE: drivers/oprofile/cpu_buffer.c:98:
+		struct oprofile_cpu_buffer * b = &cpu_buffer[i];

ERROR:TRAILING_WHITESPACE: trailing whitespace
#514: FILE: drivers/oprofile/cpu_buffer.c:99:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#514: FILE: drivers/oprofile/cpu_buffer.c:99:
+ $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#522: FILE: drivers/oprofile/cpu_buffer.c:107:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#526: FILE: drivers/oprofile/cpu_buffer.c:111:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#526: FILE: drivers/oprofile/cpu_buffer.c:111:
+ $

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#529: FILE: drivers/oprofile/cpu_buffer.c:114:
+	for (i = 0; i < NR_CPUS; ++i) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#530: FILE: drivers/oprofile/cpu_buffer.c:115:
+		struct oprofile_cpu_buffer * b = &cpu_buffer[i];

ERROR:TRAILING_WHITESPACE: trailing whitespace
#531: FILE: drivers/oprofile/cpu_buffer.c:116:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#531: FILE: drivers/oprofile/cpu_buffer.c:116:
+ $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#541: FILE: drivers/oprofile/cpu_buffer.c:126:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#576: FILE: drivers/oprofile/cpu_buffer.c:215:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#578: FILE: drivers/oprofile/cpu_buffer.c:217:
+static void wq_sync_buffer(void * data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#580: FILE: drivers/oprofile/cpu_buffer.c:219:
+	struct oprofile_cpu_buffer * b = (struct oprofile_cpu_buffer *)data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#581: FILE: drivers/oprofile/cpu_buffer.c:220:
+	struct oprofile_cpu_buffer * b = (struct oprofile_cpu_buffer *)data;
+	if (b->cpu != smp_processor_id()) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#582: FILE: drivers/oprofile/cpu_buffer.c:221:
+		printk("WQ on CPU%d, prefer CPU%d\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#593: FILE: drivers/oprofile/cpu_buffer.c:232:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#593: FILE: drivers/oprofile/cpu_buffer.c:232:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#594: FILE: drivers/oprofile/cpu_buffer.c:233:
+ $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#594: FILE: drivers/oprofile/cpu_buffer.c:233:
+ 
+ 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#594: FILE: drivers/oprofile/cpu_buffer.c:233:
+ $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#600: FILE: drivers/oprofile/cpu_buffer.c:239:
+	struct oprofile_cpu_buffer * b = &cpu_buffer[data];

WARNING:LINE_SPACING: Missing a blank line after declarations
#601: FILE: drivers/oprofile/cpu_buffer.c:240:
+	struct oprofile_cpu_buffer * b = &cpu_buffer[data];
+	if (b->cpu != smp_processor_id()) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#602: FILE: drivers/oprofile/cpu_buffer.c:241:
+		printk("Timer on CPU%d, prefer CPU%d\n",

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#649: FILE: drivers/oprofile/cpu_buffer.h:51:
+void cpu_buffer_reset(struct oprofile_cpu_buffer * cpu_buf);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#700: FILE: include/linux/profile.h:35:
+void profile_task_exit(struct task_struct * task);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#707: FILE: include/linux/profile.h:40:
+int profile_handoff_task(struct task_struct * task);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#715: FILE: include/linux/profile.h:45:
+int task_handoff_register(struct notifier_block * n);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#716: FILE: include/linux/profile.h:46:
+int task_handoff_unregister(struct notifier_block * n);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#718: FILE: include/linux/profile.h:48:
+int profile_event_register(enum profile_type, struct notifier_block * n);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#726: FILE: include/linux/profile.h:61:
+static inline int task_handoff_register(struct notifier_block * n)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#728: FILE: include/linux/profile.h:63:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#731: FILE: include/linux/profile.h:66:
+static inline int task_handoff_unregister(struct notifier_block * n)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#733: FILE: include/linux/profile.h:68:
+	return -ENOSYS;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#763: FILE: include/linux/sched.h:537:
+extern void free_task(struct task_struct *tsk);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#847: FILE: kernel/profile.c:51:
+static struct notifier_block * task_exit_notifier;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#848: FILE: kernel/profile.c:52:
+static struct notifier_block * task_free_notifier;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#849: FILE: kernel/profile.c:53:
+static struct notifier_block * munmap_notifier;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#852: FILE: kernel/profile.c:55:
+void profile_task_exit(struct task_struct * task)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#861: FILE: kernel/profile.c:62:
+int profile_handoff_task(struct task_struct * task)

WARNING:LINE_SPACING: Missing a blank line after declarations
#867: FILE: kernel/profile.c:65:
+	int ret;
+	read_lock(&handoff_lock);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#882: FILE: kernel/profile.c:78:
+int task_handoff_register(struct notifier_block * n)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#892: FILE: kernel/profile.c:88:
+int task_handoff_unregister(struct notifier_block * n)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#908: FILE: kernel/profile.c:104:
 	switch (type) {
+		case PROFILE_TASK_EXIT:
[...]
+		case PROFILE_MUNMAP:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#927: FILE: kernel/profile.c:125:
 	switch (type) {
+		case PROFILE_TASK_EXIT:
[...]
+		case PROFILE_MUNMAP:

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#948: FILE: kernel/profile.c:171:
+EXPORT_SYMBOL_GPL(task_handoff_unregister);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#963: FILE: kernel/timer.c:236:
+EXPORT_SYMBOL(add_timer_on);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000258180.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 47 errors, 30 warnings, 9 checks, 837 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000258180.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
