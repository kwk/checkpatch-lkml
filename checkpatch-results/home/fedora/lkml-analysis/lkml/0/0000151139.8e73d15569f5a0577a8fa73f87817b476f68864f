WARNING:TYPO_SPELLING: 'ammount' may be misspelled - perhaps 'amount'?
#31: 
without excessive ammount of code.
                  ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#50: FILE: drivers/char/mem.c:470:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#61: FILE: drivers/char/mem.c:573:
+        int retval = 0;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#61: FILE: drivers/char/mem.c:573:
+        int retval = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#63: FILE: drivers/char/mem.c:575:
+        switch (cmd) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#63: FILE: drivers/char/mem.c:575:
+        switch (cmd) {$

CHECK:SPACING: No space is necessary after a cast
#77: FILE: drivers/char/mem.c:589:
+			get_user(pages, (long *) arg);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#77: FILE: drivers/char/mem.c:589:
+			void *pgdir;
+			get_user(pages, (long *) arg);

CHECK:SPACING: No space is necessary after a cast
#78: FILE: drivers/char/mem.c:590:
+			get_user(pgdir, (long *) (arg + 4));

ERROR:CODE_INDENT: code indent should use tabs where possible
#88: FILE: drivers/char/mem.c:600:
+        default:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#89: FILE: drivers/char/mem.c:601:
+                retval = -ENOTTY;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: drivers/char/mem.c:601:
+                retval = -ENOTTY;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#90: FILE: drivers/char/mem.c:602:
+                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: drivers/char/mem.c:602:
+                break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#91: FILE: drivers/char/mem.c:603:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: drivers/char/mem.c:603:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#93: FILE: drivers/char/mem.c:605:
+        return retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: drivers/char/mem.c:605:
+        return retval;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#96: FILE: drivers/char/mem.c:608:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#160: FILE: include/linux/suspend.h:87:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#194: FILE: kernel/power/disk.c:155:
 
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#216: FILE: kernel/power/disk.c:265:
+	/* Prepare processes only after swsusp_check; we could do it before,
+	   but it would mean an ugly console switch even in case of normal boot.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#249: FILE: kernel/power/swsusp.c:278:
 }
+/* FIXME: we have data_write but write_pgdir */

WARNING:TYPO_SPELLING: 'thats' may be misspelled - perhaps 'that's'?
#258: FILE: kernel/power/swsusp.c:377:
+		   if we write around 768000 pages, thats ~4GB. */
 		                                    ^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#258: FILE: kernel/power/swsusp.c:377:
+		/* FIXME: pagedir only has 768 entries. We may overflow it,
+		   if we write around 768000 pages, thats ~4GB. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#258: FILE: kernel/power/swsusp.c:377:
+		   if we write around 768000 pages, thats ~4GB. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#267: FILE: kernel/power/swsusp.c:412:
+	/* FIXME: proc se tady uvolnuje?! Aha, ono neni potreba
+	   uvolnovat pri uspesnym resume, takze se uvolnuje tady. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#267: FILE: kernel/power/swsusp.c:412:
+	   uvolnovat pri uspesnym resume, takze se uvolnuje tady. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#276: FILE: kernel/power/swsusp.c:589:
+		printk(KERN_CRIT "Too many free slots prepared\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#293: FILE: kernel/power/swsusp.c:611:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#306: FILE: kernel/power/swsusp.c:687:
+^I^ISetPageNosave(virt_to_page(pbe->next)); $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'alocated' may be misspelled - perhaps 'allocated'?
#314: FILE: kernel/power/swsusp.c:730:
+/* Free pages we allocated for suspend. Suspend pages are alocated
                                                           ^^^^^^^^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#324: FILE: kernel/power/swsusp.c:795:
+#if 0

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#336: FILE: kernel/power/swsusp.c:880:
+static int suspend_count __nosavedata = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#345: FILE: kernel/power/swsusp.c:902:
+#if 0

CHECK:LINE_SPACING: Please don't use multiple blank lines
#352: FILE: kernel/power/swsusp.c:909:
 
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#357: FILE: kernel/power/swsusp.c:914:
+	printk("back in swsusp_suspend\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'swsusp_suspend', this function's name, in a string
#357: FILE: kernel/power/swsusp.c:914:
+	printk("back in swsusp_suspend\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#360: FILE: kernel/power/swsusp.c:916:
+	WARN_ON (nr_copy_pages_check != nr_copy_pages);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#364: FILE: kernel/power/swsusp.c:920:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#374: FILE: kernel/power/swsusp.c:930:
+	printk("swsusp_resume: kill devices ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#380: FILE: kernel/power/swsusp.c:936:
+	printk("ignore processor: ");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#381: FILE: kernel/power/swsusp.c:937:
+^I/* swsusp_arch_resume takes pagedir_nosave as the only parameter */ $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#383: FILE: kernel/power/swsusp.c:939:
+	printk("hope for the best: ");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#385: FILE: kernel/power/swsusp.c:941:
+^I/* Takes pagedir_nosave as an argument. Does not need nr_copy_pages */ $

WARNING:LINE_SPACING: Missing a blank line after declarations
#389: FILE: kernel/power/swsusp.c:945:
+		int i = 0;
+		for_each_pbe (p, pagedir_nosave)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#389: FILE: kernel/power/swsusp.c:945:
+		for_each_pbe (p, pagedir_nosave)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#391: FILE: kernel/power/swsusp.c:947:
+		printk("[%d pages]", i);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#403: FILE: kernel/power/swsusp.c:1110:
+^I^I/* Is this even worth handling? It should never ever happen, and we $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#404: FILE: kernel/power/swsusp.c:1111:
+		/* Is this even worth handling? It should never ever happen, and we 
+		   have just lost user's state, anyway... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#404: FILE: kernel/power/swsusp.c:1111:
+		   have just lost user's state, anyway... */

CHECK:BRACES: Unbalanced braces around else statement
#405: FILE: kernel/power/swsusp.c:1112:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#431: FILE: kernel/power/swsusp.c:1440:
+static int in_suspend __nosavedata = 0;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#437: FILE: kernel/power/swsusp.c:1446:
+	printk(KERN_CRIT "Freezing devices\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#442: FILE: kernel/power/swsusp.c:1451:
+	printk(KERN_CRIT "Devices frozen\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#451: FILE: kernel/power/swsusp.c:1460:
+		int i = 0;
+		for_each_pbe (p, pagedir_nosave)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#451: FILE: kernel/power/swsusp.c:1460:
+		for_each_pbe (p, pagedir_nosave)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#453: FILE: kernel/power/swsusp.c:1462:
+		printk("Got image: [%d pages, pgdir at %lx]", i, pagedir_nosave);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#459: FILE: kernel/power/swsusp.c:1468:
+		printk("This was actually an resume!\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#471: FILE: kernel/power/swsusp.c:1480:
+	/* FIXME: we'll probably overwrite pagedir with itself in inconsistent state...
+	 ...no, pagedir is NOSAVE.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#479: FILE: kernel/power/swsusp.c:1488:
+	printk("Should restore from: [%d pages, pgdir at %lx]", pages, pgdir);

WARNING:LINE_SPACING: Missing a blank line after declarations
#484: FILE: kernel/power/swsusp.c:1493:
+	int error = swsusp_resume();
+	printk(KERN_CRIT "This should never return\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#484: FILE: kernel/power/swsusp.c:1493:
+	printk(KERN_CRIT "This should never return\n");

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#488: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#492: FILE: usr/swsusp.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#499: FILE: usr/swsusp.c:8:
+gcc -g -Wall usr/swsusp.c -o /tmp/swsusp

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#513: FILE: usr/swsusp.c:22:
+extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence) __THROW;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#515: FILE: usr/swsusp.c:24:
+typedef long swp_entry_t;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#519: FILE: usr/swsusp.c:28:
+char forbidden_pages[(0xffffffff / PAGE_SIZE)+1];
                                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#529: FILE: usr/swsusp.c:38:
+^Iswp_entry_t swap_address;^I$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#534: FILE: usr/swsusp.c:43:
+	char data[4096-16];
 	              ^

WARNING:TYPO_SPELLING: 'intial' may be misspelled - perhaps 'initial'?
#543: FILE: usr/swsusp.c:52:
+		fprintf(stderr, "Could not do intial seek to %lx: %m\n", dest);
 		                              ^^^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'seek', this function's name, in a string
#543: FILE: usr/swsusp.c:52:
+		fprintf(stderr, "Could not do intial seek to %lx: %m\n", dest);

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#544: FILE: usr/swsusp.c:53:
+		fprintf(stderr, "lseek64(%d) returned: %lx\n", kmem, (long) lseek64(kmem, dest, SEEK_SET));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#544: FILE: usr/swsusp.c:53:
+		fprintf(stderr, "lseek64(%d) returned: %lx\n", kmem, (long) lseek64(kmem, dest, SEEK_SET));

CHECK:SPACING: No space is necessary after a cast
#559: FILE: usr/swsusp.c:68:
+	seek(pos = (long) r->pagedir);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "w"
#565: FILE: usr/swsusp.c:74:
+		if (w != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#576: FILE: usr/swsusp.c:85:
+		seek(pos = (long) p.next);

CHECK:SPACING: No space is necessary after a cast
#588: FILE: usr/swsusp.c:97:
+	seek(pos = (long) r->pagedir);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'w != NULL'
#594: FILE: usr/swsusp.c:103:
+		if ((w != NULL) && !(pos & 0xfff)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "w"
#594: FILE: usr/swsusp.c:103:
+		if ((w != NULL) && !(pos & 0xfff)) {

CHECK:SPACING: No space is necessary after a cast
#603: FILE: usr/swsusp.c:112:
+		seek(pos = (long) p.next);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#607: FILE: usr/swsusp.c:116:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#610: FILE: usr/swsusp.c:119:
+static int write_page(unsigned long addr, swp_entry_t * loc)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#619: FILE: usr/swsusp.c:128:
+		char buf[4096];
+		seek(addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#642: FILE: usr/swsusp.c:151:
+	int error;
+	if (!(i%mod))

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#642: FILE: usr/swsusp.c:151:
+	if (!(i%mod))
 	       ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#643: FILE: usr/swsusp.c:152:
+		printf( "\b\b\b\b%3d%%", i / mod );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#643: FILE: usr/swsusp.c:152:
+		printf( "\b\b\b\b%3d%%", i / mod );

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around p->swap_address
#644: FILE: usr/swsusp.c:153:
+	if ((error = write_page(p->address, &(p->swap_address))))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#644: FILE: usr/swsusp.c:153:
+	if ((error = write_page(p->address, &(p->swap_address))))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#649: FILE: usr/swsusp.c:158:
+
+

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4096) over __attribute__((aligned(4096)))
#655: FILE: usr/swsusp.c:164:
+} __attribute__((aligned(4096)));

WARNING:LINE_SPACING: Missing a blank line after declarations
#665: FILE: usr/swsusp.c:174:
+	int error = 0;
+	mod = resume.nr_copy_pages / 100;

ERROR:SPACING: space prohibited after that open parenthesis '('
#670: FILE: usr/swsusp.c:179:
+	printf( "Writing data to swap (%d pages)...     ", resume.nr_copy_pages );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#670: FILE: usr/swsusp.c:179:
+	printf( "Writing data to swap (%d pages)...     ", resume.nr_copy_pages );

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#676: FILE: usr/swsusp.c:185:
+unsigned n = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#676: FILE: usr/swsusp.c:185:
+unsigned n = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:LINE_SPACING: Missing a blank line after declarations
#681: FILE: usr/swsusp.c:190:
+	int error;
+	if ((error = write_page((unsigned long)pbe, &swsusp_info.pagedir[n++])))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#681: FILE: usr/swsusp.c:190:
+	if ((error = write_page((unsigned long)pbe, &swsusp_info.pagedir[n++])))

ERROR:SPACING: space prohibited after that open parenthesis '('
#695: FILE: usr/swsusp.c:204:
+	printf( "Writing pagedir...");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#703: FILE: usr/swsusp.c:212:
+
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#712: FILE: usr/swsusp.c:221:
+	if ((error = data_write()))

CHECK:CAMELCASE: Avoid CamelCase: <Done>
#713: FILE: usr/swsusp.c:222:
+		goto Done;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#715: FILE: usr/swsusp.c:224:
+	if ((error = write_pagedir()))

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#760: FILE: usr/swsusp.c:269:
+	printf("Snapshotted, have %d pages, pagedir at %lx\n", resume.nr_copy_pages, (long) resume.pagedir);

CHECK:SPACING: No space is necessary after a cast
#760: FILE: usr/swsusp.c:269:
+	printf("Snapshotted, have %d pages, pagedir at %lx\n", resume.nr_copy_pages, (long) resume.pagedir);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#771: FILE: usr/swsusp.c:280:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#773: FILE: usr/swsusp.c:282:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#796: FILE: usr/swsusp.c:305:
+^I} while(forbidden_pages[ret/PAGE_SIZE]);^I$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#796: FILE: usr/swsusp.c:305:
+	} while(forbidden_pages[ret/PAGE_SIZE]);	
 	                           ^

ERROR:SPACING: space required before the open parenthesis '('
#796: FILE: usr/swsusp.c:305:
+	} while(forbidden_pages[ret/PAGE_SIZE]);	

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#814: FILE: usr/swsusp.c:323:
+static struct pbe * alloc_pagedir(unsigned nr_pages)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#814: FILE: usr/swsusp.c:323:
+static struct pbe * alloc_pagedir(unsigned nr_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#816: FILE: usr/swsusp.c:325:
+	unsigned num;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'alloc_pagedir', this function's name, in a string
#821: FILE: usr/swsusp.c:330:
+	printf("alloc_pagedir(): nr_pages = %d\n", nr_pages);

CHECK:SPACING: No space is necessary after a cast
#822: FILE: usr/swsusp.c:331:
+	resume.pagedir = pblist = (struct pbe *) get_page();

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#822: FILE: usr/swsusp.c:331:
+	resume.pagedir = pblist = (struct pbe *) get_page();

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:CODE_INDENT: code indent should use tabs where possible
#824: FILE: usr/swsusp.c:333:
+        ^I^Inr_pages -= PBES_PER_PAGE) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#824: FILE: usr/swsusp.c:333:
+        ^I^Inr_pages -= PBES_PER_PAGE) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#824: FILE: usr/swsusp.c:333:
+        ^I^Inr_pages -= PBES_PER_PAGE) {$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#825: FILE: usr/swsusp.c:334:
+        		nr_pages -= PBES_PER_PAGE) {
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#826: FILE: usr/swsusp.c:335:
+		for (i=0; i<PBES_PER_PAGE-1; i++)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#826: FILE: usr/swsusp.c:335:
+		for (i=0; i<PBES_PER_PAGE-1; i++)
 		           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#826: FILE: usr/swsusp.c:335:
+		for (i=0; i<PBES_PER_PAGE-1; i++)
 		                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#827: FILE: usr/swsusp.c:336:
+			buf[i].next = &pblist[i+1];
 			                       ^

CHECK:SPACING: No space is necessary after a cast
#828: FILE: usr/swsusp.c:337:
+		buf[PBES_PER_PAGE-1].next = (struct pbe *) get_page();

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#828: FILE: usr/swsusp.c:337:
+		buf[PBES_PER_PAGE-1].next = (struct pbe *) get_page();
 		                 ^

CHECK:SPACING: No space is necessary after a cast
#830: FILE: usr/swsusp.c:339:
+		seek((long) pblist);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#832: FILE: usr/swsusp.c:341:
+		pblist = buf[PBES_PER_PAGE-1].next;
 		                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#835: FILE: usr/swsusp.c:344:
+	for (i=0; i<nr_pages-1; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#835: FILE: usr/swsusp.c:344:
+	for (i=0; i<nr_pages-1; i++)
 	           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#835: FILE: usr/swsusp.c:344:
+	for (i=0; i<nr_pages-1; i++)
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#836: FILE: usr/swsusp.c:345:
+		buf[i].next = &pblist[i+1];
 		                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#837: FILE: usr/swsusp.c:346:
+	buf[nr_pages-1].next = 0;
 	            ^

CHECK:SPACING: No space is necessary after a cast
#839: FILE: usr/swsusp.c:348:
+	seek((long) pblist);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#844: FILE: usr/swsusp.c:353:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#846: FILE: usr/swsusp.c:355:
+
+

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#856: FILE: usr/swsusp.c:365:
+	unsigned long offset = swsusp_info.pagedir[pos/PBES_PER_PAGE];
 	                                              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#865: FILE: usr/swsusp.c:374:
+	for (i=0; i<PBES_PER_PAGE; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#865: FILE: usr/swsusp.c:374:
+	for (i=0; i<PBES_PER_PAGE; i++) {
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#875: FILE: usr/swsusp.c:384:
+
+

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#913: FILE: usr/swsusp.c:422:
+	printf("Got image, %d pages, signature [%s]\n", resume.nr_copy_pages, swsusp_info.signature);

CHECK:SPACING: No space is necessary after a cast
#918: FILE: usr/swsusp.c:427:
+	walk_pages_chain(&resume, (void *) read_pagedir_one);

CHECK:SPACING: No space is necessary after a cast
#925: FILE: usr/swsusp.c:434:
+	walk_pages_chain(&resume, (void *) read_pagedir_one);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#935: FILE: usr/swsusp.c:444:
+	printf("swsusp: Reading image data (%d pages):     ",
+			swsusp_info.nr_copy_pages);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#944: FILE: usr/swsusp.c:453:
+	if (ioctl(kmem, IOCTL_ATOMIC_RESTORE, &resume)) {
+		fprintf(stderr, "Could not restore system: %m\n");
+	}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000151139.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 35 errors, 63 warnings, 49 checks, 888 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000151139.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
