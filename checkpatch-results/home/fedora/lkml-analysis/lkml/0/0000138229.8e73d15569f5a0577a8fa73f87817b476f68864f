WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
Old glibc implementations (e.g. glibc-2.2.5) are lseeking after every call to

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#61: 
D-90409 Nürnberg                                      http://www.suse.de
         ^

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#67: 
#include <stdio.h>

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#68: 
#include <unistd.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#69: 
#include <dirent.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#116: FILE: fs/libfs.c:75:
+loff_t dcache_dir_lseek(struct file * file, loff_t offset, int origin)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#118: FILE: fs/libfs.c:77:
+	struct dentry * dentry = file->f_dentry;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'offset == 0'
#146: FILE: fs/libfs.c:90:
+		if ((offset == 0)
+		    || (offset == full_name_hash(".", 1))
+		    || (offset == full_name_hash("..", 2))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'offset == full_name_hash("X", 1)'
#146: FILE: fs/libfs.c:90:
+		if ((offset == 0)
+		    || (offset == full_name_hash(".", 1))
+		    || (offset == full_name_hash("..", 2))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'offset == full_name_hash("XX", 2)'
#146: FILE: fs/libfs.c:90:
+		if ((offset == 0)
+		    || (offset == full_name_hash(".", 1))
+		    || (offset == full_name_hash("..", 2))) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#147: FILE: fs/libfs.c:91:
+		if ((offset == 0)
+		    || (offset == full_name_hash(".", 1))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#148: FILE: fs/libfs.c:92:
+		    || (offset == full_name_hash(".", 1))
+		    || (offset == full_name_hash("..", 2))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#170: FILE: fs/libfs.c:107:
+			struct dentry *next;
+			next = list_entry(p, struct dentry, d_child);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'offset == full_name_hash(next->d_name.name,
 							 next->d_name.len)'
#171: FILE: fs/libfs.c:108:
+			if (!d_unhashed(next) && next->d_inode
+			    && (offset == full_name_hash(next->d_name.name,
+							 next->d_name.len))) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#172: FILE: fs/libfs.c:109:
+			if (!d_unhashed(next) && next->d_inode
+			    && (offset == full_name_hash(next->d_name.name,

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#190: FILE: fs/libfs.c:125:
+	return (found ? offset : -EINVAL);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#254: FILE: fs/libfs.c:163:
+	for (p=q->next; p != &dentry->d_subdirs; p=p->next) {
 	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#254: FILE: fs/libfs.c:163:
+	for (p=q->next; p != &dentry->d_subdirs; p=p->next) {
 	                                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#256: FILE: fs/libfs.c:165:
+		struct dentry *next;
+		next = list_entry(p, struct dentry, d_child);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000138229.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 6 warnings, 8 checks, 165 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000138229.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
