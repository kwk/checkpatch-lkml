WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#50: 
If the exiting task belongs to a thread group (with more members than itself)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#92: FILE: include/linux/delayacct.h:31:
+extern int delayacct_add_tsk(struct taskstats_reply *, struct task_struct *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct taskstats_reply *' should also have an identifier name
#92: FILE: include/linux/delayacct.h:31:
+extern int delayacct_add_tsk(struct taskstats_reply *, struct task_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#92: FILE: include/linux/delayacct.h:31:
+extern int delayacct_add_tsk(struct taskstats_reply *, struct task_struct *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#101: FILE: include/linux/taskstats.h:1:
+/* taskstats.h - exporting per-task statistics

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#133: FILE: include/linux/taskstats.h:33:
+struct taskstats {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#152: FILE: include/linux/taskstats.h:52:
+					 * no count available/provided */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#155: FILE: include/linux/taskstats.h:55:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#166: FILE: include/linux/taskstats.h:66:
+					 * Marks data sent on task/tgid exit */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#196: FILE: include/linux/taskstats.h:96:
+						 * (sent on each tid's exit) */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#218: FILE: include/linux/taskstats.h:118:
+extern void taskstats_exit_pid(struct task_struct *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#243: FILE: kernel/taskstats.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#265: FILE: kernel/taskstats.c:23:
+#include <asm/atomic.h>

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'genlhdr' may be better as '(genlhdr)' to avoid precedence issues
#280: FILE: kernel/taskstats.c:38:
+#define genlmsg_data(genlhdr)	((char *)genlhdr + GENL_HDRLEN)

WARNING:LINE_SPACING: Missing a blank line after declarations
#308: FILE: kernel/taskstats.c:66:
+		int seq = get_cpu_var(taskstats_seqnum)++;
+		put_cpu_var(taskstats_seqnum);

CHECK:BRACES: Unbalanced braces around else statement
#313: FILE: kernel/taskstats.c:71:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!reply"
#317: FILE: kernel/taskstats.c:75:
+	if (reply == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#349: FILE: kernel/taskstats.c:107:
+	if (!pidtsk) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#359: FILE: kernel/taskstats.c:117:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#363: FILE: kernel/taskstats.c:121:
+	if (!rc) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#366: FILE: kernel/taskstats.c:124:
+	} else

WARNING:SPACING: space prohibited before semicolon
#367: FILE: kernel/taskstats.c:125:
+		reply->err = (rc < 0) ? -rc : rc ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#377: FILE: kernel/taskstats.c:135:
+	struct taskstats_cmd_param *param= info->userhdr;
 	                                 ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#412: FILE: kernel/taskstats.c:170:
+	if (!rc) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#415: FILE: kernel/taskstats.c:173:
+	} else

WARNING:SPACING: space prohibited before semicolon
#416: FILE: kernel/taskstats.c:174:
+		reply->err = (rc < 0) ? -rc : rc ;

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#424: FILE: kernel/taskstats.c:182:
+	struct taskstats_cmd_param *param= info->userhdr;
 	                                 ^

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#483: FILE: kernel/taskstats.c:241:
+static int family_registered = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:CODE_INDENT: code indent should use tabs where possible
#487: FILE: kernel/taskstats.c:245:
+        if (genl_register_family(&family))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#487: FILE: kernel/taskstats.c:245:
+        if (genl_register_family(&family))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#488: FILE: kernel/taskstats.c:246:
+                return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#488: FILE: kernel/taskstats.c:246:
+                return -EFAULT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#489: FILE: kernel/taskstats.c:247:
+        family_registered = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#489: FILE: kernel/taskstats.c:247:
+        family_registered = 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#491: FILE: kernel/taskstats.c:249:
+        if (genl_register_ops(&family, &listen_ops))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#491: FILE: kernel/taskstats.c:249:
+        if (genl_register_ops(&family, &listen_ops))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 15)
#491: FILE: kernel/taskstats.c:249:
+        if (genl_register_ops(&family, &listen_ops))
+               goto err;

ERROR:CODE_INDENT: code indent should use tabs where possible
#492: FILE: kernel/taskstats.c:250:
+               goto err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#492: FILE: kernel/taskstats.c:250:
+               goto err;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#493: FILE: kernel/taskstats.c:251:
+        if (genl_register_ops(&family, &ignore_ops))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#493: FILE: kernel/taskstats.c:251:
+        if (genl_register_ops(&family, &ignore_ops))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#494: FILE: kernel/taskstats.c:252:
+                goto err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#494: FILE: kernel/taskstats.c:252:
+                goto err;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#495: FILE: kernel/taskstats.c:253:
+        if (genl_register_ops(&family, &pid_ops))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#495: FILE: kernel/taskstats.c:253:
+        if (genl_register_ops(&family, &pid_ops))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#497: FILE: kernel/taskstats.c:255:
+        if (genl_register_ops(&family, &tgid_ops))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#497: FILE: kernel/taskstats.c:255:
+        if (genl_register_ops(&family, &tgid_ops))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#498: FILE: kernel/taskstats.c:256:
+                goto err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#498: FILE: kernel/taskstats.c:256:
+                goto err;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#500: FILE: kernel/taskstats.c:258:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#500: FILE: kernel/taskstats.c:258:
+        return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#502: FILE: kernel/taskstats.c:260:
+        genl_unregister_family(&family);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#502: FILE: kernel/taskstats.c:260:
+        genl_unregister_family(&family);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#503: FILE: kernel/taskstats.c:261:
+        family_registered = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#503: FILE: kernel/taskstats.c:261:
+        family_registered = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#504: FILE: kernel/taskstats.c:262:
+        return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#504: FILE: kernel/taskstats.c:262:
+        return -EFAULT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#554: FILE: kernel/delayacct.c:65:
+ ^Itaskstats_exit_pid(tsk);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#554: FILE: kernel/delayacct.c:65:
+ ^Itaskstats_exit_pid(tsk);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#554: FILE: kernel/delayacct.c:65:
+ ^Itaskstats_exit_pid(tsk);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#570: FILE: kernel/delayacct.c:222:
+	unsigned long t1,t2;
 	                ^

WARNING:SPACING: space prohibited before semicolon
#578: FILE: kernel/delayacct.c:230:
+	tmp = (nsec_t)d->cpu_run_total ;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#579: FILE: kernel/delayacct.c:231:
+	tmp += (u64)(tsk->utime+tsk->stime)*TICK_NSEC;
 	                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#579: FILE: kernel/delayacct.c:231:
+	tmp += (u64)(tsk->utime+tsk->stime)*TICK_NSEC;
 	                                   ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#580: FILE: kernel/delayacct.c:232:
+	d->cpu_run_total = (tmp < (nsec_t)d->cpu_run_total)? 0:tmp;
 	                                                   ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#580: FILE: kernel/delayacct.c:232:
+	d->cpu_run_total = (tmp < (nsec_t)d->cpu_run_total)? 0:tmp;
 	                                                      ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#590: FILE: kernel/delayacct.c:242:
+	d->cpu_delay_total = (tmp < (nsec_t)d->cpu_delay_total)? 0:tmp;
 	                                                       ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#590: FILE: kernel/delayacct.c:242:
+	d->cpu_delay_total = (tmp < (nsec_t)d->cpu_delay_total)? 0:tmp;
 	                                                          ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#594: FILE: kernel/delayacct.c:246:
+	d->cpu_run_total = d->cpu_delay_total = TASKSTATS_NOCPUSTATS;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#598: FILE: kernel/delayacct.c:250:
+	d->blkio_delay_total = (tmp < d->blkio_delay_total)? 0:tmp;
 	                                                   ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#598: FILE: kernel/delayacct.c:250:
+	d->blkio_delay_total = (tmp < d->blkio_delay_total)? 0:tmp;
 	                                                      ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#600: FILE: kernel/delayacct.c:252:
+	d->swapin_delay_total = (tmp < d->swapin_delay_total)? 0:tmp;
 	                                                     ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#600: FILE: kernel/delayacct.c:252:
+	d->swapin_delay_total = (tmp < d->swapin_delay_total)? 0:tmp;
 	                                                        ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000100128.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 23 errors, 30 warnings, 20 checks, 500 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000100128.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
