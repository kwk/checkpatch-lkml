ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Christoph Lameter <clameter@sgi.com'
#44: 
Signed-off-by: Christoph Lameter <clameter@sgi.com

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#153: FILE: mm/memory.c:1471:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#174: FILE: mm/memory.c:1494:
+        pmd_t *pmd, pte_t orig_entry)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#174: FILE: mm/memory.c:1494:
+        pmd_t *pmd, pte_t orig_entry)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#305: FILE: mm/memory.c:1707:
+		pmd_t *new = pmd_alloc_one(mm, address);
+		if (!new)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#352: FILE: include/asm-generic/pgtable.h:33:
+#define get_pte_atomic(__x)	*(__x)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__vma' - possible side-effects?
#371: FILE: include/asm-generic/pgtable.h:151:
+#define ptep_cmpxchg(__vma, __addr, __ptep, __oldval, __newval)		\
+({									\
+	int __rc;							\
+	spin_lock(&__vma->vm_mm->page_table_lock);			\
+	__rc = pte_same(*(__ptep), __oldval);				\
+	if (__rc) { set_pte(__ptep, __newval);				\
+		update_mmu_cache(__vma, __addr, __newval); }		\
+	spin_unlock(&__vma->vm_mm->page_table_lock);			\
+	__rc;								\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '__vma' may be better as '(__vma)' to avoid precedence issues
#371: FILE: include/asm-generic/pgtable.h:151:
+#define ptep_cmpxchg(__vma, __addr, __ptep, __oldval, __newval)		\
+({									\
+	int __rc;							\
+	spin_lock(&__vma->vm_mm->page_table_lock);			\
+	__rc = pte_same(*(__ptep), __oldval);				\
+	if (__rc) { set_pte(__ptep, __newval);				\
+		update_mmu_cache(__vma, __addr, __newval); }		\
+	spin_unlock(&__vma->vm_mm->page_table_lock);			\
+	__rc;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__ptep' - possible side-effects?
#371: FILE: include/asm-generic/pgtable.h:151:
+#define ptep_cmpxchg(__vma, __addr, __ptep, __oldval, __newval)		\
+({									\
+	int __rc;							\
+	spin_lock(&__vma->vm_mm->page_table_lock);			\
+	__rc = pte_same(*(__ptep), __oldval);				\
+	if (__rc) { set_pte(__ptep, __newval);				\
+		update_mmu_cache(__vma, __addr, __newval); }		\
+	spin_unlock(&__vma->vm_mm->page_table_lock);			\
+	__rc;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__newval' - possible side-effects?
#371: FILE: include/asm-generic/pgtable.h:151:
+#define ptep_cmpxchg(__vma, __addr, __ptep, __oldval, __newval)		\
+({									\
+	int __rc;							\
+	spin_lock(&__vma->vm_mm->page_table_lock);			\
+	__rc = pte_same(*(__ptep), __oldval);				\
+	if (__rc) { set_pte(__ptep, __newval);				\
+		update_mmu_cache(__vma, __addr, __newval); }		\
+	spin_unlock(&__vma->vm_mm->page_table_lock);			\
+	__rc;								\
+})

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#376: FILE: include/asm-generic/pgtable.h:156:
+	if (__rc) { set_pte(__ptep, __newval);				\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__mm' - possible side-effects?
#384: FILE: include/asm-generic/pgtable.h:164:
+#define pgd_test_and_populate(__mm, __pgd, __pmd)			\
+({									\
+	int __rc;							\
+	spin_lock(&__mm->page_table_lock);				\
+	__rc = !pgd_present(*(__pgd));					\
+	if (__rc) pgd_populate(__mm, __pgd, __pmd);			\
+	spin_unlock(&__mm->page_table_lock);				\
+	__rc;								\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '__mm' may be better as '(__mm)' to avoid precedence issues
#384: FILE: include/asm-generic/pgtable.h:164:
+#define pgd_test_and_populate(__mm, __pgd, __pmd)			\
+({									\
+	int __rc;							\
+	spin_lock(&__mm->page_table_lock);				\
+	__rc = !pgd_present(*(__pgd));					\
+	if (__rc) pgd_populate(__mm, __pgd, __pmd);			\
+	spin_unlock(&__mm->page_table_lock);				\
+	__rc;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__pgd' - possible side-effects?
#384: FILE: include/asm-generic/pgtable.h:164:
+#define pgd_test_and_populate(__mm, __pgd, __pmd)			\
+({									\
+	int __rc;							\
+	spin_lock(&__mm->page_table_lock);				\
+	__rc = !pgd_present(*(__pgd));					\
+	if (__rc) pgd_populate(__mm, __pgd, __pmd);			\
+	spin_unlock(&__mm->page_table_lock);				\
+	__rc;								\
+})

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#389: FILE: include/asm-generic/pgtable.h:169:
+	if (__rc) pgd_populate(__mm, __pgd, __pmd);			\

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__mm' - possible side-effects?
#396: FILE: include/asm-generic/pgtable.h:176:
+#define pmd_test_and_populate(__mm, __pmd, __page)			\
+({									\
+	int __rc;							\
+	spin_lock(&__mm->page_table_lock);				\
+	__rc = !pmd_present(*(__pmd));					\
+	if (__rc) pmd_populate(__mm, __pmd, __page);			\
+	spin_unlock(&__mm->page_table_lock);				\
+	__rc;								\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '__mm' may be better as '(__mm)' to avoid precedence issues
#396: FILE: include/asm-generic/pgtable.h:176:
+#define pmd_test_and_populate(__mm, __pmd, __page)			\
+({									\
+	int __rc;							\
+	spin_lock(&__mm->page_table_lock);				\
+	__rc = !pmd_present(*(__pmd));					\
+	if (__rc) pmd_populate(__mm, __pmd, __page);			\
+	spin_unlock(&__mm->page_table_lock);				\
+	__rc;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__pmd' - possible side-effects?
#396: FILE: include/asm-generic/pgtable.h:176:
+#define pmd_test_and_populate(__mm, __pmd, __page)			\
+({									\
+	int __rc;							\
+	spin_lock(&__mm->page_table_lock);				\
+	__rc = !pmd_present(*(__pmd));					\
+	if (__rc) pmd_populate(__mm, __pmd, __page);			\
+	spin_unlock(&__mm->page_table_lock);				\
+	__rc;								\
+})

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#401: FILE: include/asm-generic/pgtable.h:181:
+	if (__rc) pmd_populate(__mm, __pmd, __page);			\

CHECK:BRACES: Unbalanced braces around else statement
#457: FILE: mm/rmap.c:591:
+	} else

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000222406.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 2 warnings, 12 checks, 416 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000222406.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
