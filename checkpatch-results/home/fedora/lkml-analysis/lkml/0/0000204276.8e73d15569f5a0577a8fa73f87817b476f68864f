WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
o Fixed up a miscalculation in the bitmap size as pointed out by Mike Kravetz

ERROR:TRAILING_WHITESPACE: trailing whitespace
#171: FILE: fs/buffer.c:1137:
+^Ipage = find_or_create_page(inode->i_mapping, index, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#172: FILE: fs/buffer.c:1138:
+	page = find_or_create_page(inode->i_mapping, index, 
+					GFP_NOFS | __GFP_USERRCLM);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#181: FILE: fs/buffer.c:3001:
+^Istruct buffer_head *ret = kmem_cache_alloc(bh_cachep, $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#182: FILE: fs/buffer.c:3002:
+						gfp_flags|__GFP_KERNRCLM);
 						         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#194: FILE: fs/dcache.c:718:
+^Identry = kmem_cache_alloc(dentry_cache, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#195: FILE: fs/dcache.c:719:
+^I^I^I^IGFP_KERNEL|__GFP_KERNRCLM); $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: fs/dcache.c:719:
+	dentry = kmem_cache_alloc(dentry_cache, 
+				GFP_KERNEL|__GFP_KERNRCLM); 

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#195: FILE: fs/dcache.c:719:
+				GFP_KERNEL|__GFP_KERNRCLM); 
 				          ^

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#207: FILE: fs/ext2/super.c:140:
+	ei = (struct ext2_inode_info *)kmem_cache_alloc(ext2_inode_cachep, SLAB_KERNEL|__GFP_KERNRCLM);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#207: FILE: fs/ext2/super.c:140:
+	ei = (struct ext2_inode_info *)kmem_cache_alloc(ext2_inode_cachep, SLAB_KERNEL|__GFP_KERNRCLM);
 	                                                                              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#219: FILE: fs/ext3/super.c:437:
+	ei = kmem_cache_alloc(ext3_inode_cachep, SLAB_NOFS|__GFP_KERNRCLM);
 	                                                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#231: FILE: fs/ntfs/inode.c:321:
+			SLAB_NOFS|__GFP_KERNRCLM);
 			         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#240: FILE: fs/ntfs/inode.c:346:
+^Ini = (ntfs_inode *)kmem_cache_alloc(ntfs_inode_cache, $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#241: FILE: fs/ntfs/inode.c:347:
+					SLAB_NOFS|__GFP_KERNRCLM);
 					         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#263: FILE: include/linux/gfp.h:50:
+			__GFP_NOFAIL|__GFP_NORETRY|__GFP_NO_GROW|__GFP_COMP| \
 			            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#263: FILE: include/linux/gfp.h:50:
+			__GFP_NOFAIL|__GFP_NORETRY|__GFP_NO_GROW|__GFP_COMP| \
 			                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#263: FILE: include/linux/gfp.h:50:
+			__GFP_NOFAIL|__GFP_NORETRY|__GFP_NO_GROW|__GFP_COMP| \
 			                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#263: FILE: include/linux/gfp.h:50:
+			__GFP_NOFAIL|__GFP_NORETRY|__GFP_NO_GROW|__GFP_COMP| \
 			                                                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#264: FILE: include/linux/gfp.h:51:
+			__GFP_USERRCLM|__GFP_KERNRCLM)
 			              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#301: FILE: include/linux/mmzone.h:139:
+^I * There are ALLOC_TYPE number of MAX_ORDER free lists. Once a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#305: FILE: include/linux/mmzone.h:143:
+^I * Non-reclaimable. The objective is to reduce fragmentation $

ERROR:CODE_INDENT: code indent should use tabs where possible
#308: FILE: include/linux/mmzone.h:146:
+ ^Istruct free_area^Ifree_area_lists[ALLOC_TYPES][MAX_ORDER];$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#308: FILE: include/linux/mmzone.h:146:
+ ^Istruct free_area^Ifree_area_lists[ALLOC_TYPES][MAX_ORDER];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#308: FILE: include/linux/mmzone.h:146:
+ ^Istruct free_area^Ifree_area_lists[ALLOC_TYPES][MAX_ORDER];$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#337: FILE: include/linux/mmzone.h:175:
+^I/* $

ERROR:CODE_INDENT: code indent should use tabs where possible
#343: FILE: include/linux/mmzone.h:181:
+ ^Istruct free_area^Ifree_area_global;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#343: FILE: include/linux/mmzone.h:181:
+ ^Istruct free_area^Ifree_area_global;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: include/linux/mmzone.h:181:
+ ^Istruct free_area^Ifree_area_global;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#344: FILE: include/linux/mmzone.h:182:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#344: FILE: include/linux/mmzone.h:182:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#345: FILE: include/linux/mmzone.h:183:
+ ^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#345: FILE: include/linux/mmzone.h:183:
+ ^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#345: FILE: include/linux/mmzone.h:183:
+ ^I/*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#346: FILE: include/linux/mmzone.h:184:
+ ^I * This map tracks what each 2^MAX_ORDER sized block has been used for.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#346: FILE: include/linux/mmzone.h:184:
+ ^I * This map tracks what each 2^MAX_ORDER sized block has been used for.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#348: FILE: include/linux/mmzone.h:186:
+^I * what the block is for. When a page is freed, it's index within this $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#349: FILE: include/linux/mmzone.h:187:
+^I * bitmap is calculated using (address >> MAX_ORDER) * 2 . This means $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#350: FILE: include/linux/mmzone.h:188:
+^I * that pages will always be freed into the correct list in $

ERROR:CODE_INDENT: code indent should use tabs where possible
#354: FILE: include/linux/mmzone.h:192:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#354: FILE: include/linux/mmzone.h:192:
+ ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#356: FILE: include/linux/mmzone.h:194:
+ ^Iunsigned long^I^I*free_area_usemap;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#356: FILE: include/linux/mmzone.h:194:
+ ^Iunsigned long^I^I*free_area_usemap;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: include/linux/mmzone.h:194:
+ ^Iunsigned long^I^I*free_area_usemap;$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#364: FILE: include/linux/mmzone.h:277:
+#define inc_globalrefill_count(zone) zone->global_refill++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#364: FILE: include/linux/mmzone.h:277:
+#define inc_globalrefill_count(zone) zone->global_refill++

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#365: FILE: include/linux/mmzone.h:278:
+#define inc_globalsteal_count(zone) zone->global_steal++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#365: FILE: include/linux/mmzone.h:278:
+#define inc_globalsteal_count(zone) zone->global_steal++

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#367: FILE: include/linux/mmzone.h:280:
+#define inc_fallback_count(zone, type) zone->fallback_count[type]++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#367: FILE: include/linux/mmzone.h:280:
+#define inc_fallback_count(zone, type) zone->fallback_count[type]++

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#368: FILE: include/linux/mmzone.h:281:
+#define inc_alloc_count(zone, type) zone->alloc_count[type]++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#368: FILE: include/linux/mmzone.h:281:
+#define inc_alloc_count(zone, type) zone->alloc_count[type]++

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#369: FILE: include/linux/mmzone.h:282:
+#define inc_kernnorclm_partial_steal(zone) zone->kernnorclm_partial_steal++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#369: FILE: include/linux/mmzone.h:282:
+#define inc_kernnorclm_partial_steal(zone) zone->kernnorclm_partial_steal++

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#370: FILE: include/linux/mmzone.h:283:
+#define inc_kernnorclm_full_steal(zone) zone->kernnorclm_full_steal++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#370: FILE: include/linux/mmzone.h:283:
+#define inc_kernnorclm_full_steal(zone) zone->kernnorclm_full_steal++

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#371: FILE: include/linux/mmzone.h:284:
+static inline void inc_reserve_count(struct zone *zone, int type) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#372: FILE: include/linux/mmzone.h:285:
+	if (type == ALLOC_FALLBACK) zone->fallback_reserve++;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#376: FILE: include/linux/mmzone.h:289:
+static inline void dec_reserve_count(struct zone *zone, int type) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#377: FILE: include/linux/mmzone.h:290:
+^Iif (type == ALLOC_FALLBACK && zone->fallback_reserve) $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#379: FILE: include/linux/mmzone.h:292:
+	if (zone->reserve_count[type]) zone->reserve_count[type]--;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#384: FILE: include/linux/mmzone.h:297:
+#define inc_reserve_count(zone, type) \
+	type == ALLOC_FALLBACK ? zone->fallback_reserve : 0

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#384: FILE: include/linux/mmzone.h:297:
+#define inc_reserve_count(zone, type) \
+	type == ALLOC_FALLBACK ? zone->fallback_reserve : 0

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#386: FILE: include/linux/mmzone.h:299:
+#define dec_reserve_count(zone, type) \
+	(type == ALLOC_FALLBACK && zone->fallback_reserve) ? \
+		zone->fallback_reserve-- : 0

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'zone' - possible side-effects?
#386: FILE: include/linux/mmzone.h:299:
+#define dec_reserve_count(zone, type) \
+	(type == ALLOC_FALLBACK && zone->fallback_reserve) ? \
+		zone->fallback_reserve-- : 0

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#386: FILE: include/linux/mmzone.h:299:
+#define dec_reserve_count(zone, type) \
+	(type == ALLOC_FALLBACK && zone->fallback_reserve) ? \
+		zone->fallback_reserve-- : 0

ERROR:TRAILING_WHITESPACE: trailing whitespace
#414: FILE: mm/page_alloc.c:72:
+int fallback_allocs[ALLOC_TYPES][ALLOC_TYPES] = { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#428: FILE: mm/page_alloc.c:87:
+static char *type_names[ALLOC_TYPES] = { "KernNoRclm", "KernRclm", $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#441: FILE: mm/page_alloc.c:139:
+static inline int get_pageblock_type(struct page *page) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#443: FILE: mm/page_alloc.c:141:
+^Iint bitidx = ((page - zone->zone_mem_map) >> (MAX_ORDER-1)) * $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#443: FILE: mm/page_alloc.c:141:
+	int bitidx = ((page - zone->zone_mem_map) >> (MAX_ORDER-1)) * 
 	                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#447: FILE: mm/page_alloc.c:145:
+	if (test_bit(bitidx,zone->free_area_usemap)) return ALLOC_KERNRCLM;
 	                   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#447: FILE: mm/page_alloc.c:145:
+	if (test_bit(bitidx,zone->free_area_usemap)) return ALLOC_KERNRCLM;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#450: FILE: mm/page_alloc.c:148:
+	if (test_bit(bitidx+1, zone->free_area_usemap)) return ALLOC_USERRCLM;
 	                   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#450: FILE: mm/page_alloc.c:148:
+	if (test_bit(bitidx+1, zone->free_area_usemap)) return ALLOC_USERRCLM;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#453: FILE: mm/page_alloc.c:151:
+	if (test_bit(bitidx+2, zone->free_area_usemap)) return ALLOC_FALLBACK;
 	                   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#453: FILE: mm/page_alloc.c:151:
+	if (test_bit(bitidx+2, zone->free_area_usemap)) return ALLOC_FALLBACK;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#461: FILE: mm/page_alloc.c:159:
+static inline void set_pageblock_type(struct page *page, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#462: FILE: mm/page_alloc.c:160:
+static inline void set_pageblock_type(struct page *page, 
+					struct zone *zone, int type) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#464: FILE: mm/page_alloc.c:162:
+^Iint bitidx = ((page - zone->zone_mem_map) >> (MAX_ORDER-1)) * $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#464: FILE: mm/page_alloc.c:162:
+	int bitidx = ((page - zone->zone_mem_map) >> (MAX_ORDER-1)) * 
 	                                                       ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#466: FILE: mm/page_alloc.c:164:
+	bit1 = bit2 = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#470: FILE: mm/page_alloc.c:168:
+		clear_bit(bitidx+1, zone->free_area_usemap);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#471: FILE: mm/page_alloc.c:169:
+		clear_bit(bitidx+2, zone->free_area_usemap);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#477: FILE: mm/page_alloc.c:175:
+		set_bit(bitidx+1, zone->free_area_usemap);
 		              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#478: FILE: mm/page_alloc.c:176:
+		clear_bit(bitidx+2, zone->free_area_usemap);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#484: FILE: mm/page_alloc.c:182:
+		clear_bit(bitidx+1, zone->free_area_usemap);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#485: FILE: mm/page_alloc.c:183:
+		set_bit(bitidx+2, zone->free_area_usemap);
 		              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#489: FILE: mm/page_alloc.c:187:
+	clear_bit(bitidx+1, zone->free_area_usemap);
 	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#490: FILE: mm/page_alloc.c:188:
+	clear_bit(bitidx+2, zone->free_area_usemap);
 	                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#491: FILE: mm/page_alloc.c:189:
+^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#492: FILE: mm/page_alloc.c:190:
+	
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#496: FILE: mm/page_alloc.c:194:
+ * calculates how many 2**(MAX_ORDER-1) blocks of pages represent 10% of $

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#500: FILE: mm/page_alloc.c:198:
+#define min_fallback_reserve(zone) \
+	((zone->present_pages / (1 << (MAX_ORDER-1))) / 10)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#501: FILE: mm/page_alloc.c:199:
+	((zone->present_pages / (1 << (MAX_ORDER-1))) / 10)
 	                                        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'zone' - possible side-effects?
#502: FILE: mm/page_alloc.c:200:
+#define need_min_fallback_reserve(zone) \
+	(zone->global_refill - zone->global_steal <= min_fallback_reserve(zone))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#502: FILE: mm/page_alloc.c:200:
+#define need_min_fallback_reserve(zone) \
+	(zone->global_refill - zone->global_steal <= min_fallback_reserve(zone))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'zone' - possible side-effects?
#504: FILE: mm/page_alloc.c:202:
+#define is_min_fallback_reserved(zone) \
+	(zone->fallback_reserve >= min_fallback_reserve(zone))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#504: FILE: mm/page_alloc.c:202:
+#define is_min_fallback_reserved(zone) \
+	(zone->fallback_reserve >= min_fallback_reserve(zone))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#551: FILE: mm/page_alloc.c:374:
+	if (order >= MAX_ORDER-1) {
 	                      ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_global
#552: FILE: mm/page_alloc.c:375:
+		area = &(zone->free_area_global);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#578: FILE: mm/page_alloc.c:547:
+	int global_split=0;
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#586: FILE: mm/page_alloc.c:552:
+	int retry_count=0;
 	               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#588: FILE: mm/page_alloc.c:554:
+	int startorder = order;
+	if (flags & __GFP_USERRCLM) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#588: FILE: mm/page_alloc.c:554:
+	if (flags & __GFP_USERRCLM) {
[...]
+	else if (flags & __GFP_KERNRCLM) {
[...]
+	} else {
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#591: FILE: mm/page_alloc.c:557:
+	}
+	else if (flags & __GFP_KERNRCLM) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#605: FILE: mm/page_alloc.c:571:
+^Ifor (current_order = startorder; $

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#607: FILE: mm/page_alloc.c:573:
+			current_order < MAX_ORDER; ++current_order) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#628: FILE: mm/page_alloc.c:594:
+^I^I^Iarea = zone->free_area_lists[ALLOC_KERNNORCLM] + $

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#637: FILE: mm/page_alloc.c:603:
+			if (current_order >= MAX_ORDER/2) {
 			                              ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#637: FILE: mm/page_alloc.c:603:
+			if (current_order >= MAX_ORDER/2) {
[...]
+			} else inc_kernnorclm_partial_steal(zone);
[...]

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#638: FILE: mm/page_alloc.c:604:
+				int reserve_type=ALLOC_KERNNORCLM;
 				                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#639: FILE: mm/page_alloc.c:605:
+^I^I^I^Idec_reserve_count(zone, $

WARNING:LINE_SPACING: Missing a blank line after declarations
#639: FILE: mm/page_alloc.c:605:
+				int reserve_type=ALLOC_KERNNORCLM;
+				dec_reserve_count(zone, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#640: FILE: mm/page_alloc.c:606:
+				dec_reserve_count(zone, 
+						get_pageblock_type(page));

WARNING:BRACES: braces {} are not necessary for single statement blocks
#648: FILE: mm/page_alloc.c:614:
+				if (!is_min_fallback_reserved(zone)) {
+					reserve_type=ALLOC_FALLBACK;
+				}

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#649: FILE: mm/page_alloc.c:615:
+					reserve_type=ALLOC_FALLBACK;
 					            ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#655: FILE: mm/page_alloc.c:621:
+			} else inc_kernnorclm_partial_steal(zone);

ERROR:SPACING: space required before the open brace '{'
#662: FILE: mm/page_alloc.c:628:
+	if (!global_split && !list_empty(&(zone->free_area_global.free_list))){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_global.free_list
#662: FILE: mm/page_alloc.c:628:
+	if (!global_split && !list_empty(&(zone->free_area_global.free_list))){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#668: FILE: mm/page_alloc.c:634:
+		page = list_entry(zone->free_area_global.free_list.next,
+				struct page, lru);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#670: FILE: mm/page_alloc.c:636:
+^I^Ilist_add(&page->lru, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#671: FILE: mm/page_alloc.c:637:
+		list_add(&page->lru, 
+			&(zone->free_area_lists[alloctype][MAX_ORDER-1].free_list));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#671: FILE: mm/page_alloc.c:637:
+			&(zone->free_area_lists[alloctype][MAX_ORDER-1].free_list));
 			                                            ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_lists[alloctype][MAX_ORDER-1].free_list
#671: FILE: mm/page_alloc.c:637:
+			&(zone->free_area_lists[alloctype][MAX_ORDER-1].free_list));

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#673: FILE: mm/page_alloc.c:639:
+		global_split=1;
 		            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#675: FILE: mm/page_alloc.c:641:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#680: FILE: mm/page_alloc.c:646:
+^I^I * means that the first 10% of allocations will keep $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#692: FILE: mm/page_alloc.c:658:
+		startorder = MAX_ORDER-1;
 		                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#696: FILE: mm/page_alloc.c:662:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#703: FILE: mm/page_alloc.c:669:
+	while (++retry_count != ALLOC_TYPES) {
+

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#709: FILE: mm/page_alloc.c:675:
+		if (retry_count == 2) inc_fallback_count(zone, start_alloctype);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#711: FILE: mm/page_alloc.c:677:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#713: FILE: mm/page_alloc.c:679:
+		area = zone->free_area_lists[alloctype] + (MAX_ORDER-1);
 		                                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#714: FILE: mm/page_alloc.c:680:
+		current_order=MAX_ORDER;
 		             ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#722: FILE: mm/page_alloc.c:688:
+^I^I^I^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#765: FILE: mm/page_alloc.c:758:
+	for (type=0; type < ALLOC_TYPES; type++) {
 	         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#771: FILE: mm/page_alloc.c:763:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#776: FILE: mm/page_alloc.c:766:
+				for (i=0; i < (1<<order); i++)
 				      ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#776: FILE: mm/page_alloc.c:766:
+				for (i=0; i < (1<<order); i++)
 				                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#777: FILE: mm/page_alloc.c:767:
+					SetPageNosaveFree(pfn_to_page(start_pfn+i));
 					                                       ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#827: FILE: mm/page_alloc.c:932:
+		free_pages -= (

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#838: FILE: mm/page_alloc.c:961:
+	int retry_count=0;
 	               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#847: FILE: mm/page_alloc.c:1078:
+		if (order < MAX_ORDER/2) out_of_memory(gfp_mask);
 		                     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#847: FILE: mm/page_alloc.c:1078:
+		if (order < MAX_ORDER/2) out_of_memory(gfp_mask);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#881: FILE: mm/page_alloc.c:1516:
+			for (type=0; type < ALLOC_TYPES; type++) {
 			         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#895: FILE: mm/page_alloc.c:1817:
+ ^Iint type;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#895: FILE: mm/page_alloc.c:1817:
+ ^Iint type;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#895: FILE: mm/page_alloc.c:1817:
+ ^Iint type;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#896: FILE: mm/page_alloc.c:1818:
+ ^Istruct free_area *area;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#896: FILE: mm/page_alloc.c:1818:
+ ^Istruct free_area *area;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#896: FILE: mm/page_alloc.c:1818:
+ ^Istruct free_area *area;$

WARNING:TYPO_SPELLING: 'Initialse' may be misspelled - perhaps 'Initialise'?
#898: FILE: mm/page_alloc.c:1820:
+ 	/* Initialse the three size ordered lists of free_areas */
  	   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#898: FILE: mm/page_alloc.c:1820:
+ ^I/* Initialse the three size ordered lists of free_areas */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#898: FILE: mm/page_alloc.c:1820:
+ ^I/* Initialse the three size ordered lists of free_areas */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#898: FILE: mm/page_alloc.c:1820:
+ ^I/* Initialse the three size ordered lists of free_areas */$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#899: FILE: mm/page_alloc.c:1821:
+	for (type=0; type < ALLOC_TYPES; type++) {
 	         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#902: FILE: mm/page_alloc.c:1824:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#902: FILE: mm/page_alloc.c:1824:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#907: FILE: mm/page_alloc.c:1829:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#907: FILE: mm/page_alloc.c:1829:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#908: FILE: mm/page_alloc.c:1830:
+ ^I/* Initialise the global pool of 2^size pages */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#908: FILE: mm/page_alloc.c:1830:
+ ^I/* Initialise the global pool of 2^size pages */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#908: FILE: mm/page_alloc.c:1830:
+ ^I/* Initialise the global pool of 2^size pages */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#909: FILE: mm/page_alloc.c:1831:
+ ^IINIT_LIST_HEAD(&zone->free_area_global.free_list);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#909: FILE: mm/page_alloc.c:1831:
+ ^IINIT_LIST_HEAD(&zone->free_area_global.free_list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#909: FILE: mm/page_alloc.c:1831:
+ ^IINIT_LIST_HEAD(&zone->free_area_global.free_list);$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#910: FILE: mm/page_alloc.c:1832:
+	zone->free_area_global.nr_free=0;
 	                              ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#920: FILE: mm/page_alloc.c:1843:
+static unsigned long __init usemap_size(unsigned long zonesize) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#924: FILE: mm/page_alloc.c:1847:
+	usemapsize = (zonesize + (1 << (MAX_ORDER-1))) >> (MAX_ORDER-1);
 	                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#924: FILE: mm/page_alloc.c:1847:
+	usemapsize = (zonesize + (1 << (MAX_ORDER-1))) >> (MAX_ORDER-1);
 	                                                            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#950: FILE: mm/page_alloc.c:1969:
+		zone->global_steal=0;
 		                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#951: FILE: mm/page_alloc.c:1970:
+		zone->global_refill=0;
 		                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#953: FILE: mm/page_alloc.c:1972:
+^I^Imemset((unsigned long *)zone->fallback_count, 0, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#954: FILE: mm/page_alloc.c:1973:
+		memset((unsigned long *)zone->fallback_count, 0, 
+					sizeof(zone->fallback_count));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#955: FILE: mm/page_alloc.c:1974:
+^I^Imemset((unsigned long *)zone->alloc_count, 0, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#956: FILE: mm/page_alloc.c:1975:
+		memset((unsigned long *)zone->alloc_count, 0, 
+					sizeof(zone->alloc_count));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#957: FILE: mm/page_alloc.c:1976:
+^I^Imemset((unsigned long *)zone->alloc_count, 0, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#958: FILE: mm/page_alloc.c:1977:
+		memset((unsigned long *)zone->alloc_count, 0, 
+					sizeof(zone->alloc_count));

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#959: FILE: mm/page_alloc.c:1978:
+		zone->kernnorclm_partial_steal=0;
 		                              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#960: FILE: mm/page_alloc.c:1979:
+		zone->kernnorclm_full_steal=0;
 		                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#963: FILE: mm/page_alloc.c:1982:
+^I^Izone->free_area_usemap = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#964: FILE: mm/page_alloc.c:1983:
+^I^I^I(unsigned long *)alloc_bootmem_node(pgdat, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#968: FILE: mm/page_alloc.c:1987:
+		memset((unsigned long *)zone->free_area_usemap,
+				ALLOC_KERNNORCLM, usemapsize);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#970: FILE: mm/page_alloc.c:1989:
+		printk(KERN_DEBUG "  %s zone: %lu pages, %lu real pages, usemap size:%lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#971: FILE: mm/page_alloc.c:1990:
+		printk(KERN_DEBUG "  %s zone: %lu pages, %lu real pages, usemap size:%lu\n",
+				zone_names[j], size, realsize, usemapsize);

ERROR:CODE_INDENT: code indent should use tabs where possible
#982: FILE: mm/page_alloc.c:2070:
+ ^Iunsigned long nr_bufs = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#982: FILE: mm/page_alloc.c:2070:
+ ^Iunsigned long nr_bufs = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#982: FILE: mm/page_alloc.c:2070:
+ ^Iunsigned long nr_bufs = 0;$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#985: FILE: mm/page_alloc.c:2073:
+	unsigned long global_refill=0;
 	                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#986: FILE: mm/page_alloc.c:2074:
+	unsigned long global_steal=0;
 	                          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#987: FILE: mm/page_alloc.c:2075:
+	unsigned long kernnorclm_full_steal=0;
 	                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#988: FILE: mm/page_alloc.c:2076:
+	unsigned long kernnorclm_partial_steal=0;
 	                                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#996: FILE: mm/page_alloc.c:2084:
+^I^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#999: FILE: mm/page_alloc.c:2087:
+ ^I/* Show global fragmentation statistics */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#999: FILE: mm/page_alloc.c:2087:
+ ^I/* Show global fragmentation statistics */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#999: FILE: mm/page_alloc.c:2087:
+ ^I/* Show global fragmentation statistics */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1008: FILE: mm/page_alloc.c:2093:
+ ^I^Iseq_printf(m, "Node %d, zone %8s", pgdat->node_id, zone->name);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1008: FILE: mm/page_alloc.c:2093:
+ ^I^Iseq_printf(m, "Node %d, zone %8s", pgdat->node_id, zone->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1008: FILE: mm/page_alloc.c:2093:
+ ^I^Iseq_printf(m, "Node %d, zone %8s", pgdat->node_id, zone->name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1009: FILE: mm/page_alloc.c:2094:
+ ^I^Ifor (order = 0; order < MAX_ORDER-1; ++order) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1009: FILE: mm/page_alloc.c:2094:
+ ^I^Ifor (order = 0; order < MAX_ORDER-1; ++order) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1009: FILE: mm/page_alloc.c:2094:
+ ^I^Ifor (order = 0; order < MAX_ORDER-1; ++order) {$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1009: FILE: mm/page_alloc.c:2094:
+ 		for (order = 0; order < MAX_ORDER-1; ++order) {
  		                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1010: FILE: mm/page_alloc.c:2095:
+ ^I^I^Inr_bufs = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1010: FILE: mm/page_alloc.c:2095:
+ ^I^I^Inr_bufs = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1010: FILE: mm/page_alloc.c:2095:
+ ^I^I^Inr_bufs = 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1011: FILE: mm/page_alloc.c:2096:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1011: FILE: mm/page_alloc.c:2096:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1012: FILE: mm/page_alloc.c:2097:
+ ^I^I^Ifor (type=0; type < ALLOC_TYPES; type++) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1012: FILE: mm/page_alloc.c:2097:
+ ^I^I^Ifor (type=0; type < ALLOC_TYPES; type++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1012: FILE: mm/page_alloc.c:2097:
+ ^I^I^Ifor (type=0; type < ALLOC_TYPES; type++) {$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1012: FILE: mm/page_alloc.c:2097:
+ 			for (type=0; type < ALLOC_TYPES; type++) {
  			         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1013: FILE: mm/page_alloc.c:2098:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1013: FILE: mm/page_alloc.c:2098:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1013: FILE: mm/page_alloc.c:2098:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_lists[type][order].free_list
#1013: FILE: mm/page_alloc.c:2098:
+ 				list_for_each(elem, &(zone->free_area_lists[type][order].free_list))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1014: FILE: mm/page_alloc.c:2099:
+ ^I^I^I^I^I++nr_bufs;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1014: FILE: mm/page_alloc.c:2099:
+ ^I^I^I^I^I++nr_bufs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1014: FILE: mm/page_alloc.c:2099:
+ ^I^I^I^I^I++nr_bufs;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1015: FILE: mm/page_alloc.c:2100:
+ ^I^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1015: FILE: mm/page_alloc.c:2100:
+ ^I^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1015: FILE: mm/page_alloc.c:2100:
+ ^I^I^I}$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1016: FILE: mm/page_alloc.c:2101:
+ ^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1016: FILE: mm/page_alloc.c:2101:
+ ^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1016: FILE: mm/page_alloc.c:2101:
+ ^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1017: FILE: mm/page_alloc.c:2102:
+ ^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1017: FILE: mm/page_alloc.c:2102:
+ ^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1017: FILE: mm/page_alloc.c:2102:
+ ^I^I}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1018: FILE: mm/page_alloc.c:2103:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1018: FILE: mm/page_alloc.c:2103:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1019: FILE: mm/page_alloc.c:2104:
+ ^I^I/* Scan global list */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1019: FILE: mm/page_alloc.c:2104:
+ ^I^I/* Scan global list */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1019: FILE: mm/page_alloc.c:2104:
+ ^I^I/* Scan global list */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1020: FILE: mm/page_alloc.c:2105:
+ ^I^Inr_bufs = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1020: FILE: mm/page_alloc.c:2105:
+ ^I^Inr_bufs = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1020: FILE: mm/page_alloc.c:2105:
+ ^I^Inr_bufs = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1021: FILE: mm/page_alloc.c:2106:
+ ^I^Ilist_for_each(elem, &(zone->free_area_global.free_list))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1021: FILE: mm/page_alloc.c:2106:
+ ^I^Ilist_for_each(elem, &(zone->free_area_global.free_list))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1021: FILE: mm/page_alloc.c:2106:
+ ^I^Ilist_for_each(elem, &(zone->free_area_global.free_list))$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_global.free_list
#1021: FILE: mm/page_alloc.c:2106:
+ 		list_for_each(elem, &(zone->free_area_global.free_list))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1022: FILE: mm/page_alloc.c:2107:
+ ^I^I^I++nr_bufs;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1022: FILE: mm/page_alloc.c:2107:
+ ^I^I^I++nr_bufs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1022: FILE: mm/page_alloc.c:2107:
+ ^I^I^I++nr_bufs;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1023: FILE: mm/page_alloc.c:2108:
+ ^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1023: FILE: mm/page_alloc.c:2108:
+ ^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1023: FILE: mm/page_alloc.c:2108:
+ ^I^Iseq_printf(m, "%6lu ", nr_bufs);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1024: FILE: mm/page_alloc.c:2109:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1024: FILE: mm/page_alloc.c:2109:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1025: FILE: mm/page_alloc.c:2110:
+ ^I^Ispin_unlock_irqrestore(&zone->lock, flags);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1025: FILE: mm/page_alloc.c:2110:
+ ^I^Ispin_unlock_irqrestore(&zone->lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1025: FILE: mm/page_alloc.c:2110:
+ ^I^Ispin_unlock_irqrestore(&zone->lock, flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1026: FILE: mm/page_alloc.c:2111:
+ ^I^Iseq_putc(m, '\n');$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1026: FILE: mm/page_alloc.c:2111:
+ ^I^Iseq_putc(m, '\n');$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1026: FILE: mm/page_alloc.c:2111:
+ ^I^Iseq_putc(m, '\n');$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1027: FILE: mm/page_alloc.c:2112:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1027: FILE: mm/page_alloc.c:2112:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1027: FILE: mm/page_alloc.c:2112:
+ ^I}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1028: FILE: mm/page_alloc.c:2113:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1028: FILE: mm/page_alloc.c:2113:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1029: FILE: mm/page_alloc.c:2114:
+ ^I/* Show statistics for each allocation type */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1029: FILE: mm/page_alloc.c:2114:
+ ^I/* Show statistics for each allocation type */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1029: FILE: mm/page_alloc.c:2114:
+ ^I/* Show statistics for each allocation type */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1030: FILE: mm/page_alloc.c:2115:
+ ^Iseq_printf(m, "\nPer-allocation-type statistics");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1030: FILE: mm/page_alloc.c:2115:
+ ^Iseq_printf(m, "\nPer-allocation-type statistics");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1030: FILE: mm/page_alloc.c:2115:
+ ^Iseq_printf(m, "\nPer-allocation-type statistics");$

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1030: FILE: mm/page_alloc.c:2115:
+ 	seq_printf(m, "\nPer-allocation-type statistics");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1031: FILE: mm/page_alloc.c:2116:
+ ^Ifor (zone = node_zones; zone - node_zones < MAX_NR_ZONES; ++zone) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1031: FILE: mm/page_alloc.c:2116:
+ ^Ifor (zone = node_zones; zone - node_zones < MAX_NR_ZONES; ++zone) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1031: FILE: mm/page_alloc.c:2116:
+ ^Ifor (zone = node_zones; zone - node_zones < MAX_NR_ZONES; ++zone) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1032: FILE: mm/page_alloc.c:2117:
+ ^I^Iif (!zone->present_pages)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1032: FILE: mm/page_alloc.c:2117:
+ ^I^Iif (!zone->present_pages)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1032: FILE: mm/page_alloc.c:2117:
+ ^I^Iif (!zone->present_pages)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1033: FILE: mm/page_alloc.c:2118:
+ ^I^I^Icontinue;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1033: FILE: mm/page_alloc.c:2118:
+ ^I^I^Icontinue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1033: FILE: mm/page_alloc.c:2118:
+ ^I^I^Icontinue;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1034: FILE: mm/page_alloc.c:2119:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1034: FILE: mm/page_alloc.c:2119:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1035: FILE: mm/page_alloc.c:2120:
+ ^I^Ispin_lock_irqsave(&zone->lock, flags);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1035: FILE: mm/page_alloc.c:2120:
+ ^I^Ispin_lock_irqsave(&zone->lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1035: FILE: mm/page_alloc.c:2120:
+ ^I^Ispin_lock_irqsave(&zone->lock, flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1036: FILE: mm/page_alloc.c:2121:
+ ^I^Ifor (type=0; type < ALLOC_TYPES; type++) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1036: FILE: mm/page_alloc.c:2121:
+ ^I^Ifor (type=0; type < ALLOC_TYPES; type++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1036: FILE: mm/page_alloc.c:2121:
+ ^I^Ifor (type=0; type < ALLOC_TYPES; type++) {$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1036: FILE: mm/page_alloc.c:2121:
+ 		for (type=0; type < ALLOC_TYPES; type++) {
  		         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1038: FILE: mm/page_alloc.c:2123:
+ ^I^I^Iseq_printf(m, "\nNode %d, zone %8s, type %10s", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1038: FILE: mm/page_alloc.c:2123:
+ ^I^I^Iseq_printf(m, "\nNode %d, zone %8s, type %10s", $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1038: FILE: mm/page_alloc.c:2123:
+ ^I^I^Iseq_printf(m, "\nNode %d, zone %8s, type %10s", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1038: FILE: mm/page_alloc.c:2123:
+ ^I^I^Iseq_printf(m, "\nNode %d, zone %8s, type %10s", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1039: FILE: mm/page_alloc.c:2124:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1039: FILE: mm/page_alloc.c:2124:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1039: FILE: mm/page_alloc.c:2124:
+ 			seq_printf(m, "\nNode %d, zone %8s, type %10s", 
+ 					pgdat->node_id, zone->name,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1039: FILE: mm/page_alloc.c:2124:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1040: FILE: mm/page_alloc.c:2125:
+ ^I^I^I^I^Itype_names[type]);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1040: FILE: mm/page_alloc.c:2125:
+ ^I^I^I^I^Itype_names[type]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1040: FILE: mm/page_alloc.c:2125:
+ ^I^I^I^I^Itype_names[type]);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1041: FILE: mm/page_alloc.c:2126:
+ ^I^I^Ifor (order = 0; order < MAX_ORDER; ++order) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1041: FILE: mm/page_alloc.c:2126:
+ ^I^I^Ifor (order = 0; order < MAX_ORDER; ++order) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1041: FILE: mm/page_alloc.c:2126:
+ ^I^I^Ifor (order = 0; order < MAX_ORDER; ++order) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1042: FILE: mm/page_alloc.c:2127:
+ ^I^I^I^Inr_bufs = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1042: FILE: mm/page_alloc.c:2127:
+ ^I^I^I^Inr_bufs = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1042: FILE: mm/page_alloc.c:2127:
+ ^I^I^I^Inr_bufs = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1044: FILE: mm/page_alloc.c:2129:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1044: FILE: mm/page_alloc.c:2129:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1044: FILE: mm/page_alloc.c:2129:
+ ^I^I^I^Ilist_for_each(elem, &(zone->free_area_lists[type][order].free_list))$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_lists[type][order].free_list
#1044: FILE: mm/page_alloc.c:2129:
+ 				list_for_each(elem, &(zone->free_area_lists[type][order].free_list))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1045: FILE: mm/page_alloc.c:2130:
+ ^I^I^I^I^I++nr_bufs;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1045: FILE: mm/page_alloc.c:2130:
+ ^I^I^I^I^I++nr_bufs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1045: FILE: mm/page_alloc.c:2130:
+ ^I^I^I^I^I++nr_bufs;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1046: FILE: mm/page_alloc.c:2131:
+ ^I^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1046: FILE: mm/page_alloc.c:2131:
+ ^I^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1046: FILE: mm/page_alloc.c:2131:
+ ^I^I^I^Iseq_printf(m, "%6lu ", nr_bufs);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1047: FILE: mm/page_alloc.c:2132:
+ ^I^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1047: FILE: mm/page_alloc.c:2132:
+ ^I^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1047: FILE: mm/page_alloc.c:2132:
+ ^I^I^I}$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1049: FILE: mm/page_alloc.c:2134:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1049: FILE: mm/page_alloc.c:2134:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1050: FILE: mm/page_alloc.c:2135:
+ ^I^I/* Scan global list */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1050: FILE: mm/page_alloc.c:2135:
+ ^I^I/* Scan global list */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1050: FILE: mm/page_alloc.c:2135:
+ ^I^I/* Scan global list */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1051: FILE: mm/page_alloc.c:2136:
+ ^I^Iseq_printf(m, "\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1051: FILE: mm/page_alloc.c:2136:
+ ^I^Iseq_printf(m, "\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1051: FILE: mm/page_alloc.c:2136:
+ ^I^Iseq_printf(m, "\n");$

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1051: FILE: mm/page_alloc.c:2136:
+ 		seq_printf(m, "\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1052: FILE: mm/page_alloc.c:2137:
+ ^I^Iseq_printf(m, "Node %d, zone %8s, type %10s", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1052: FILE: mm/page_alloc.c:2137:
+ ^I^Iseq_printf(m, "Node %d, zone %8s, type %10s", $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1052: FILE: mm/page_alloc.c:2137:
+ ^I^Iseq_printf(m, "Node %d, zone %8s, type %10s", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1052: FILE: mm/page_alloc.c:2137:
+ ^I^Iseq_printf(m, "Node %d, zone %8s, type %10s", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1053: FILE: mm/page_alloc.c:2138:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1053: FILE: mm/page_alloc.c:2138:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1053: FILE: mm/page_alloc.c:2138:
+ 		seq_printf(m, "Node %d, zone %8s, type %10s", 
+ 					pgdat->node_id, zone->name,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1053: FILE: mm/page_alloc.c:2138:
+ ^I^I^I^I^Ipgdat->node_id, zone->name,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1054: FILE: mm/page_alloc.c:2139:
+ ^I^I^I^I^I"MAX_ORDER");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1054: FILE: mm/page_alloc.c:2139:
+ ^I^I^I^I^I"MAX_ORDER");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1054: FILE: mm/page_alloc.c:2139:
+ ^I^I^I^I^I"MAX_ORDER");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1055: FILE: mm/page_alloc.c:2140:
+ ^I^Inr_bufs = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1055: FILE: mm/page_alloc.c:2140:
+ ^I^Inr_bufs = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1055: FILE: mm/page_alloc.c:2140:
+ ^I^Inr_bufs = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1056: FILE: mm/page_alloc.c:2141:
+ ^I^Ilist_for_each(elem, &(zone->free_area_global.free_list))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1056: FILE: mm/page_alloc.c:2141:
+ ^I^Ilist_for_each(elem, &(zone->free_area_global.free_list))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1056: FILE: mm/page_alloc.c:2141:
+ ^I^Ilist_for_each(elem, &(zone->free_area_global.free_list))$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area_global.free_list
#1056: FILE: mm/page_alloc.c:2141:
+ 		list_for_each(elem, &(zone->free_area_global.free_list))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1057: FILE: mm/page_alloc.c:2142:
+ ^I^I^I++nr_bufs;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1057: FILE: mm/page_alloc.c:2142:
+ ^I^I^I++nr_bufs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1057: FILE: mm/page_alloc.c:2142:
+ ^I^I^I++nr_bufs;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1058: FILE: mm/page_alloc.c:2143:
+ ^I^Iseq_printf(m, "%6lu \n", nr_bufs);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1058: FILE: mm/page_alloc.c:2143:
+ ^I^Iseq_printf(m, "%6lu \n", nr_bufs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1058: FILE: mm/page_alloc.c:2143:
+ ^I^Iseq_printf(m, "%6lu \n", nr_bufs);$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1058: FILE: mm/page_alloc.c:2143:
+ 		seq_printf(m, "%6lu \n", nr_bufs);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1061: FILE: mm/page_alloc.c:2146:
+ ^I^Iseq_printf(m, "\nZone beancounters\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1061: FILE: mm/page_alloc.c:2146:
+ ^I^Iseq_printf(m, "\nZone beancounters\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1061: FILE: mm/page_alloc.c:2146:
+ ^I^Iseq_printf(m, "\nZone beancounters\n");$

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1061: FILE: mm/page_alloc.c:2146:
+ 		seq_printf(m, "\nZone beancounters\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1062: FILE: mm/page_alloc.c:2147:
+ ^I^Iseq_printf(m, "Global steal:     %lu\n", zone->global_steal);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1062: FILE: mm/page_alloc.c:2147:
+ ^I^Iseq_printf(m, "Global steal:     %lu\n", zone->global_steal);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1062: FILE: mm/page_alloc.c:2147:
+ ^I^Iseq_printf(m, "Global steal:     %lu\n", zone->global_steal);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1063: FILE: mm/page_alloc.c:2148:
+ ^I^Iseq_printf(m, "Global refills:   %lu\n", zone->global_refill);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1063: FILE: mm/page_alloc.c:2148:
+ ^I^Iseq_printf(m, "Global refills:   %lu\n", zone->global_refill);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1063: FILE: mm/page_alloc.c:2148:
+ ^I^Iseq_printf(m, "Global refills:   %lu\n", zone->global_refill);$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1072: FILE: mm/page_alloc.c:2157:
+		for (i=0; i< ALLOC_TYPES; i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#1072: FILE: mm/page_alloc.c:2157:
+		for (i=0; i< ALLOC_TYPES; i++) {
 		           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1073: FILE: mm/page_alloc.c:2158:
+ ^I^I^Iseq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1073: FILE: mm/page_alloc.c:2158:
+ ^I^I^Iseq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1073: FILE: mm/page_alloc.c:2158:
+ ^I^I^Iseq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1073: FILE: mm/page_alloc.c:2158:
+ ^I^I^Iseq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1074: FILE: mm/page_alloc.c:2159:
+^I^I^I^I^Itype_names[i], $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1074: FILE: mm/page_alloc.c:2159:
+ 			seq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", 
+					type_names[i], 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1082: FILE: mm/page_alloc.c:2167:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1082: FILE: mm/page_alloc.c:2167:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1087: FILE: mm/page_alloc.c:2171:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1087: FILE: mm/page_alloc.c:2171:
+ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1088: FILE: mm/page_alloc.c:2172:
+ ^I/* Show bean counters */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1088: FILE: mm/page_alloc.c:2172:
+ ^I/* Show bean counters */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1088: FILE: mm/page_alloc.c:2172:
+ ^I/* Show bean counters */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1090: FILE: mm/page_alloc.c:2174:
+ ^Iseq_printf(m, "\nGlobal beancounters\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1090: FILE: mm/page_alloc.c:2174:
+ ^Iseq_printf(m, "\nGlobal beancounters\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1090: FILE: mm/page_alloc.c:2174:
+ ^Iseq_printf(m, "\nGlobal beancounters\n");$

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1090: FILE: mm/page_alloc.c:2174:
+ 	seq_printf(m, "\nGlobal beancounters\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1091: FILE: mm/page_alloc.c:2175:
+ ^Iseq_printf(m, "Global steal:     %lu\n", global_steal);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1091: FILE: mm/page_alloc.c:2175:
+ ^Iseq_printf(m, "Global steal:     %lu\n", global_steal);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1091: FILE: mm/page_alloc.c:2175:
+ ^Iseq_printf(m, "Global steal:     %lu\n", global_steal);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1092: FILE: mm/page_alloc.c:2176:
+ ^Iseq_printf(m, "Global refills:   %lu\n", global_refill);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1092: FILE: mm/page_alloc.c:2176:
+ ^Iseq_printf(m, "Global refills:   %lu\n", global_refill);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1092: FILE: mm/page_alloc.c:2176:
+ ^Iseq_printf(m, "Global refills:   %lu\n", global_refill);$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1096: FILE: mm/page_alloc.c:2180:
+	for (i=0; i< ALLOC_TYPES; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#1096: FILE: mm/page_alloc.c:2180:
+	for (i=0; i< ALLOC_TYPES; i++) {
 	           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1097: FILE: mm/page_alloc.c:2181:
+ ^I^Iseq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1097: FILE: mm/page_alloc.c:2181:
+ ^I^Iseq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1097: FILE: mm/page_alloc.c:2181:
+ ^I^Iseq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1097: FILE: mm/page_alloc.c:2181:
+ ^I^Iseq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1098: FILE: mm/page_alloc.c:2182:
+^I^I^I^Itype_names[i], $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1098: FILE: mm/page_alloc.c:2182:
+ 		seq_printf(m, "%-10s Allocs: %-10lu Reserve: %-10lu Fallbacks: %-10lu\n", 
+				type_names[i], 

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000204276.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 164 errors, 150 warnings, 78 checks, 885 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000204276.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
