WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#33: FILE: cmpci.c:1:
+/*****************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#69: FILE: cmpci.c:87:
+ * ^I- better mixer stuff$

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#95: FILE: cmpci.c:123:
+#if 0

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#265: FILE: cmpci.c:204:
+#define CM_CH0_RESET^I ^I0x04$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#266: FILE: cmpci.c:205:
+#define CM_CH1_RESET^I  ^I0x08$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#267: FILE: cmpci.c:206:
+#define CM_EXTENT_CODEC^I  ^I0x100$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#268: FILE: cmpci.c:207:
+#define CM_EXTENT_MIDI^I  ^I0x2$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#269: FILE: cmpci.c:208:
+#define CM_EXTENT_SYNTH^I  ^I0x4$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#270: FILE: cmpci.c:209:
+#define CM_INT_CH0^I  ^I1$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#271: FILE: cmpci.c:210:
+#define CM_INT_CH1^I  ^I2$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#273: FILE: cmpci.c:212:
+#define CM_CFMT_STEREO     ^I0x01$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#274: FILE: cmpci.c:213:
+#define CM_CFMT_16BIT      ^I0x02$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#275: FILE: cmpci.c:214:
+#define CM_CFMT_MASK       ^I0x03$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#276: FILE: cmpci.c:215:
+#define CM_CFMT_DACSHIFT   ^I2$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#277: FILE: cmpci.c:216:
+#define CM_CFMT_ADCSHIFT   ^I0$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#279: FILE: cmpci.c:218:
+static const unsigned sample_shift[] = { 0, 1, 1, 2 };

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#281: FILE: cmpci.c:220:
+#define CM_ENABLE_CH1      ^I0x2$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#282: FILE: cmpci.c:221:
+#define CM_ENABLE_CH0      ^I0x1$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#286: FILE: cmpci.c:225:
+#define MIDIINBUF  ^I^I256$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#287: FILE: cmpci.c:226:
+#define MIDIOUTBUF ^I^I256$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#289: FILE: cmpci.c:228:
+#define FMODE_MIDI_SHIFT ^I2$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#290: FILE: cmpci.c:229:
+#define FMODE_MIDI_READ  ^I(FMODE_READ << FMODE_MIDI_SHIFT)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#291: FILE: cmpci.c:230:
+#define FMODE_MIDI_WRITE ^I(FMODE_WRITE << FMODE_MIDI_SHIFT)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#294: FILE: cmpci.c:232:
+#define FMODE_DMFM ^I^I0x10$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#297: FILE: cmpci.c:234:
+#define SND_DEV_DSP16   ^I5 $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#297: FILE: cmpci.c:234:
+#define SND_DEV_DSP16   ^I5 $

ERROR:CODE_INDENT: code indent should use tabs where possible
#326: FILE: cmpci.c:255:
+        /* mixer stuff */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#327: FILE: cmpci.c:256:
+        struct {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#327: FILE: cmpci.c:256:
+        struct {$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#343: FILE: cmpci.c:279:
+		unsigned error; /* over/underrun */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#349: FILE: cmpci.c:283:
+		unsigned fragsize;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#435: FILE: cmpci.c:348:
+static struct cm_state *devs = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#436: FILE: cmpci.c:349:
+static unsigned long wavetable_mem = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#441: FILE: cmpci.c:353:
+extern __inline__ unsigned ld2(unsigned int x)

WARNING:INLINE: plain inline is preferred over __inline__
#441: FILE: cmpci.c:353:
+extern __inline__ unsigned ld2(unsigned int x)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#441: FILE: cmpci.c:353:
+extern __inline__ unsigned ld2(unsigned int x)

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#449: FILE: cmpci.c:358:
+	/* num: 2, 4, 16, 256, 65536
+	   exp: 1, 2,  4,   8,    16 */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#449: FILE: cmpci.c:358:
+	   exp: 1, 2,  4,   8,    16 */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#503: FILE: cmpci.c:415:
+static void __set_countadc(struct cm_state *s, unsigned count)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#509: FILE: cmpci.c:420:
+static void __set_countdac(struct cm_state *s, unsigned count)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#512: FILE: cmpci.c:423:
 	if (s->status & DO_DUAL_DAC)
+	    __set_countadc(s, count);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#518: FILE: cmpci.c:427:
+extern __inline__ unsigned get_dmadac(struct cm_state *s)

WARNING:INLINE: plain inline is preferred over __inline__
#518: FILE: cmpci.c:427:
+extern __inline__ unsigned get_dmadac(struct cm_state *s)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#518: FILE: cmpci.c:427:
+extern __inline__ unsigned get_dmadac(struct cm_state *s)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#530: FILE: cmpci.c:437:
+extern __inline__ unsigned get_dmaadc(struct cm_state *s)

WARNING:INLINE: plain inline is preferred over __inline__
#530: FILE: cmpci.c:437:
+extern __inline__ unsigned get_dmaadc(struct cm_state *s)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#530: FILE: cmpci.c:437:
+extern __inline__ unsigned get_dmaadc(struct cm_state *s)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#564: FILE: cmpci.c:470:
+^I^Ipseudo >>= 1;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#638: FILE: cmpci.c:542:
+^I__set_fmt(s,mask,data);^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#638: FILE: cmpci.c:542:
+	__set_fmt(s,mask,data);	
 	           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#638: FILE: cmpci.c:542:
+	__set_fmt(s,mask,data);	
 	                ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#647: FILE: cmpci.c:571:
+static void __set_spdifout(struct cm_state *s, unsigned rate)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#665: FILE: cmpci.c:618:
+static void __set_ac3(struct cm_state *s, unsigned rate)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#694: FILE: cmpci.c:698:
+static void __set_adc_rate(struct cm_state *s, unsigned rate)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#726: FILE: cmpci.c:722:
+^I$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#734: FILE: cmpci.c:728:
+static void __set_dac_rate(struct cm_state *s, unsigned rate)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#758: FILE: cmpci.c:754:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#766: FILE: cmpci.c:762:
+	udelay(10);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#773: FILE: cmpci.c:769:
+	udelay(10);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#775: FILE: cmpci.c:771:
+	udelay(10);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#784: FILE: cmpci.c:788:
+extern inline void disable_adc(struct cm_state *s)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#793: FILE: cmpci.c:796:
+extern inline void __disable_dac(struct cm_state *s)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#802: FILE: cmpci.c:806:
+extern inline void __enable_adc(struct cm_state *s)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#811: FILE: cmpci.c:816:
+extern inline void __enable_dac(struct cm_state *s)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#835: FILE: cmpci.c:828:
+extern inline void __stop_adc(struct cm_state *s)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#844: FILE: cmpci.c:837:
+extern inline void stop_adc(struct cm_state *s)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#856: FILE: cmpci.c:846:
+extern inline void __stop_dac(struct cm_state *s)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#870: FILE: cmpci.c:857:
+extern inline void stop_dac(struct cm_state *s)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#892: FILE: cmpci.c:875:
+}^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#892: FILE: cmpci.c:875:
+
+}	

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#943: FILE: cmpci.c:916:
+static int __prog_dmabuf(struct cm_state *s, unsigned rec);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#951: FILE: cmpci.c:920:
 	if ((channels > 2) && (channels <= s->max_channels)
[...]
+	    __set_spdifout(s, 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1006: FILE: cmpci.c:985:
+}^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1015: FILE: cmpci.c:1007:
 
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1019: FILE: cmpci.c:1010:
+static int __prog_dmabuf(struct cm_state *s, unsigned rec)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1048: FILE: cmpci.c:1072:
+^I ^Iwhile (db->fragsize < 4096 && db->numfrag >= 4) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1048: FILE: cmpci.c:1072:
+^I ^Iwhile (db->fragsize < 4096 && db->numfrag >= 4) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1049: FILE: cmpci.c:1073:
+ ^I^I^Idb->fragsize *= 2;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1049: FILE: cmpci.c:1073:
+ ^I^I^Idb->fragsize *= 2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1049: FILE: cmpci.c:1073:
+ ^I^I^Idb->fragsize *= 2;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1050: FILE: cmpci.c:1074:
+ ^I^I^Idb->fragshift++;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1050: FILE: cmpci.c:1074:
+ ^I^I^Idb->fragshift++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1050: FILE: cmpci.c:1074:
+ ^I^I^Idb->fragshift++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1051: FILE: cmpci.c:1075:
+ ^I^I^Idb->numfrag /= 2;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1051: FILE: cmpci.c:1075:
+ ^I^I^Idb->numfrag /= 2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1051: FILE: cmpci.c:1075:
+ ^I^I^Idb->numfrag /= 2;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1052: FILE: cmpci.c:1076:
+ ^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1052: FILE: cmpci.c:1076:
+ ^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1052: FILE: cmpci.c:1076:
+ ^I^I}$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#1060: FILE: cmpci.c:1083:
 		if (s->status & DO_DUAL_DAC)
+		    __set_dmadac1(s, db->rawphys, db->dmasize >> sample_shift[fmt]);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#1063: FILE: cmpci.c:1085:
 		else
+		    __set_dmaadc(s, db->rawphys, db->dmasize >> sample_shift[fmt]);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1082: FILE: cmpci.c:1098:
+static int prog_dmabuf(struct cm_state *s, unsigned rec)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1091: FILE: cmpci.c:1107:
+}^I$

WARNING:INLINE: plain inline is preferred over __inline__
#1093: FILE: cmpci.c:1109:
+extern __inline__ void clear_advance(struct cm_state *s)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1093: FILE: cmpci.c:1109:
+extern __inline__ void clear_advance(struct cm_state *s)

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#1102: FILE: cmpci.c:1310:
+	[SOUND_MIXER_LINE1]  = { DSP_MIX_AUXVOL_L,       DSP_MIX_AUXVOL_R,       MT_5MUTE,     0x80, 0x20 },

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#1103: FILE: cmpci.c:1311:
+	[SOUND_MIXER_SPEAKER]= { DSP_MIX_SPKRVOLIDX,	 DSP_MIX_SPKRVOLIDX,	 MT_5MUTEMONO, 0x00, 0x01 },

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#1103: FILE: cmpci.c:1311:
+	[SOUND_MIXER_SPEAKER]= { DSP_MIX_SPKRVOLIDX,	 DSP_MIX_SPKRVOLIDX,	 MT_5MUTEMONO, 0x00, 0x01 },
 	                     ^

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#1104: FILE: cmpci.c:1312:
+	[SOUND_MIXER_TREBLE] = { DSP_MIX_TREBLEIDX_L,	 DSP_MIX_TREBLEIDX_R,	 MT_5MUTE,     0x00, 0x01 },

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#1105: FILE: cmpci.c:1313:
+	[SOUND_MIXER_BASS]   = { DSP_MIX_BASSIDX_L,	 DSP_MIX_BASSIDX_L,	 MT_5MUTE,     0x00, 0x01 }

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#1115: FILE: cmpci.c:1325:
+	[SOUND_MIXER_SPEAKER]= 8,
 	                     ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1120: FILE: cmpci.c:1330:
+static unsigned mixer_outmask(struct cm_state *s)

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1160: FILE: cmpci.c:1449:
+		wrmixer(s, DSP_MIX_ADCMIXIDX_R, (j & 1) | (j>>1) | (j & 0x80));
 		                                            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1200: FILE: cmpci.c:1574:
+	llseek:		cm_llseek,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#1200: FILE: cmpci.c:1574:
+	llseek:		cm_llseek,

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1214: FILE: cmpci.c:1649:
+			udelay(10);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1281: FILE: cmpci.c:1866:
+^Iunlock_kernel();    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1314: FILE: cmpci.c:1932:
+^I^I^Ispin_unlock_irqrestore(&s->lock, flags);^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1325: FILE: cmpci.c:2015:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1329: FILE: cmpci.c:2019:
+^I^I^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1388: FILE: cmpci.c:2303:
+        case SNDCTL_SPDIF_PROTECT:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1388: FILE: cmpci.c:2303:
+        case SNDCTL_SPDIF_PROTECT:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1391: FILE: cmpci.c:2306:
+^I        maskb(s->iobase + CODEC_CMI_LEGACY_CTRL + 2, ~0x40, val ? 0x40 : 0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1392: FILE: cmpci.c:2307:
+                return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1392: FILE: cmpci.c:2307:
+                return 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1401: FILE: cmpci.c:2346:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1429: FILE: cmpci.c:2381:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1446: FILE: cmpci.c:2395:
+^I^I$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1456: FILE: cmpci.c:2411:
+	llseek:		cm_llseek,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#1456: FILE: cmpci.c:2411:
+	llseek:		cm_llseek,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1481: FILE: cmpci.c:2690:
+	llseek:		cm_llseek,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#1481: FILE: cmpci.c:2690:
+	llseek:		cm_llseek,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1502: FILE: cmpci.c:2859:
+	llseek:		cm_llseek,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#1502: FILE: cmpci.c:2859:
+	llseek:		cm_llseek,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1540: FILE: cmpci.c:2997:
+^I{ PCI_VENDOR_ID_CMEDIA, PCI_DEVICE_ID_CMEDIA_CM8738, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1541: FILE: cmpci.c:2998:
+^I  PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0 },^I  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1542: FILE: cmpci.c:2999:
+^I{ PCI_VENDOR_ID_CMEDIA, PCI_DEVICE_ID_CMEDIA_CM8738B, $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1566: FILE: cmpci.c:3030:
+		if (!(s = kmalloc(sizeof(struct cm_state), GFP_KERNEL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*s)...) over kmalloc(sizeof(struct cm_state)...)
#1566: FILE: cmpci.c:3030:
+		if (!(s = kmalloc(sizeof(struct cm_state), GFP_KERNEL))) {

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1583: FILE: cmpci.c:3154:
+		printk(KERN_INFO "cmpci: found %s adapter at io %#06x irq %u ",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1609: FILE: cmpci.c:3189:
+			printk(KERN_INFO ", chip version = 0%d\n", s->chip_version);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1614: FILE: cmpci.c:3194:
+				printk(KERN_INFO "cmpci: modem function supported\n");

WARNING:LONG_LINE_STRING: line length of 106 exceeds 100 columns
#1624: FILE: cmpci.c:3282:
+	printk(KERN_INFO "cmpci: version $Revision: " __CMVERSION__ " $time " __TIME__ " " __DATE__ "\n");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#1624: FILE: cmpci.c:3282:
+	printk(KERN_INFO "cmpci: version $Revision: " __CMVERSION__ " $time " __TIME__ " " __DATE__ "\n");

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1624: FILE: cmpci.c:3282:
+	printk(KERN_INFO "cmpci: version $Revision: " __CMVERSION__ " $time " __TIME__ " " __DATE__ "\n");

ERROR:DATE_TIME: Use of the '__TIME__' macro makes the build non-deterministic
#1624: FILE: cmpci.c:3282:
+	printk(KERN_INFO "cmpci: version $Revision: " __CMVERSION__ " $time " __TIME__ " " __DATE__ "\n");

It is generally desirable that building the same source code with
the same set of tools is reproducible, i.e. the output is always
exactly the same.

The kernel does *not* use the ``__DATE__`` and ``__TIME__`` macros,
and enables warnings if they are used as they can lead to
non-deterministic builds.

See: https://www.kernel.org/doc/html/latest/kbuild/reproducible-builds.html#timestamps

ERROR:DATE_TIME: Use of the '__DATE__' macro makes the build non-deterministic
#1624: FILE: cmpci.c:3282:
+	printk(KERN_INFO "cmpci: version $Revision: " __CMVERSION__ " $time " __TIME__ " " __DATE__ "\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000481861.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 40 errors, 88 warnings, 9 checks, 1536 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000481861.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
