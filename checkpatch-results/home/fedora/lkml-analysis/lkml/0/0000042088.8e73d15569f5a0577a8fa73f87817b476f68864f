WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#45: FILE: fs/unionfs/dirhelper.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#68: FILE: fs/unionfs/dirhelper.c:24:
+int do_delete_whiteouts(struct dentry *dentry, int bindex,
+		     struct unionfs_dir_state *namelist)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#82: FILE: fs/unionfs/dirhelper.c:38:
+	BUG_ON(!S_ISDIR(hidden_dir_dentry->d_inode->i_mode));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#84: FILE: fs/unionfs/dirhelper.c:40:
+	BUG_ON(!S_ISDIR(hidden_dir->i_mode));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#142: FILE: fs/unionfs/dirhelper.c:98:
+	BUG_ON(!S_ISDIR(dentry->d_inode->i_mode));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#143: FILE: fs/unionfs/dirhelper.c:99:
+	BUG_ON(bindex < dbstart(dentry));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#144: FILE: fs/unionfs/dirhelper.c:100:
+	BUG_ON(bindex > dbend(dentry));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#150: FILE: fs/unionfs/dirhelper.c:106:
+	BUG_ON(!S_ISDIR(hidden_dir_dentry->d_inode->i_mode));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#152: FILE: fs/unionfs/dirhelper.c:108:
+	BUG_ON(!S_ISDIR(hidden_dir->i_mode));

CHECK:BRACES: braces {} should be used on all arms of this statement
#155: FILE: fs/unionfs/dirhelper.c:111:
+	if (!permission(hidden_dir, MAY_WRITE | MAY_EXEC, NULL))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#157: FILE: fs/unionfs/dirhelper.c:113:
+	else {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#194: FILE: fs/unionfs/dirhelper.c:150:
+	if (name[0] == '.'
+	    && (namelen == 1 || (name[1] == '.' && namelen == 2)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'namelen > UNIONFS_WHLEN'
#197: FILE: fs/unionfs/dirhelper.c:153:
+	if ((namelen > UNIONFS_WHLEN) && !strncmp(name, UNIONFS_WHPFX, UNIONFS_WHLEN)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'buf->mode == RD_CHECK_EMPTY'
#210: FILE: fs/unionfs/dirhelper.c:166:
+	if ((buf->mode == RD_CHECK_EMPTY) && !whiteout)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#235: FILE: fs/unionfs/dirhelper.c:191:
+	BUG_ON(!S_ISDIR(dentry->d_inode->i_mode));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#237: FILE: fs/unionfs/dirhelper.c:193:
+	if ((err = unionfs_partial_lookup(dentry)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#243: FILE: fs/unionfs/dirhelper.c:199:
+	if (0 <= bopaque && bopaque < bend)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*buf)...) over kmalloc(sizeof(struct unionfs_rdutil_callback)...)
#246: FILE: fs/unionfs/dirhelper.c:202:
+	buf = kmalloc(sizeof(struct unionfs_rdutil_callback), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000042088.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 10 warnings, 7 checks, 268 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000042088.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
