ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#59: FILE: include/asm-generic/rmap.h:42:
+	struct page * page = kmap_to_page(ptep);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#66: FILE: include/asm-generic/rmap.h:48:
+	struct page * page = kmap_to_page(ptep);

WARNING:LINE_SPACING: Missing a blank line after declarations
#76: FILE: include/asm-generic/rmap.h:58:
+	pte_addr_t paddr;
+	paddr = ((pte_addr_t)page_to_pfn(kmap_to_page(ptep))) << PAGE_SHIFT;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#106: FILE: include/asm-i386/fixmap.h:134:
+	BUG_ON(vaddr >= FIXADDR_TOP || vaddr < FIXADDR_START);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pte_paddr' - possible side-effects?
#156: FILE: include/asm-i386/pgtable.h:270:
+#define rmap_ptep_map(pte_paddr)					\
+({									\
+	unsigned long pfn = (unsigned long)(pte_paddr >> PAGE_SHIFT);	\
+	unsigned long idx = __pte_offset(((unsigned long)pte_paddr));	\
+	(pte_t *)kmap_atomic(pfn_to_page(pfn), KM_PTE2) + idx;		\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pte_paddr' may be better as '(pte_paddr)' to avoid precedence issues
#156: FILE: include/asm-i386/pgtable.h:270:
+#define rmap_ptep_map(pte_paddr)					\
+({									\
+	unsigned long pfn = (unsigned long)(pte_paddr >> PAGE_SHIFT);	\
+	unsigned long idx = __pte_offset(((unsigned long)pte_paddr));	\
+	(pte_t *)kmap_atomic(pfn_to_page(pfn), KM_PTE2) + idx;		\
+})

WARNING:RETURN_VOID: void function return statements are not generally useful
#173: FILE: include/asm-i386/pgtable.h:287:
+	return;
+}

WARNING:NEW_TYPEDEFS: do not add new typedefs
#200: FILE: include/linux/types.h:17:
+typedef pte_t *pte_addr_t;

WARNING:LINE_SPACING: Missing a blank line after declarations
#224: FILE: mm/rmap.c:78:
+		pte_t *pte = rmap_ptep_map(page->pte.direct);
+		if (ptep_test_and_clear_young(pte))

WARNING:LINE_SPACING: Missing a blank line after declarations
#232: FILE: mm/rmap.c:85:
+			pte_t *pte = rmap_ptep_map(pc->ptep);
+			if (ptep_test_and_clear_young(pte))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#315: FILE: mm/rmap.c:243:
+static int try_to_unmap_one(struct page * page, pte_addr_t paddr)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000441385.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 6 warnings, 2 checks, 258 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000441385.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
