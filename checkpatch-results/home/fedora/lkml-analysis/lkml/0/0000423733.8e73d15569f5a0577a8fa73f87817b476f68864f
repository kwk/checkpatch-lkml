WARNING:TYPO_SPELLING: 'Meaningfull' may be misspelled - perhaps 'Meaningful'?
#75: 
Meaningfull combinations of patches are:
^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#104: 
Content-Disposition: attachment; filename="01-numa_sched_core-2.5.39-10.patch"

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#107: 
--- a/arch/i386/kernel/smpboot.c	Fri Sep 27 23:49:54 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#140: FILE: arch/ia64/kernel/smpboot.c:516:
 int __devinit

WARNING:INCLUDE_LINUX: Use #include <linux/topology.h> instead of <asm/topology.h>
#148: FILE: include/linux/sched.h:25:
+#include <asm/topology.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#165: FILE: include/linux/sched.h:461:
+extern void build_pools(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#166: FILE: include/linux/sched.h:462:
+extern void pooldata_lock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#167: FILE: include/linux/sched.h:463:
+extern void pooldata_unlock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#169: FILE: include/linux/sched.h:465:
+extern void sched_migrate_task(task_t *p, int cpu);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#208: FILE: kernel/sched.c:197:
+int numpools, pool_ptr[MAX_NUMNODES+1], pool_nr_cpus[MAX_NUMNODES];
                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#218: FILE: kernel/sched.c:207:
+#define POOL_DELAY_IDLE  (1*HZ/1000)
                            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#218: FILE: kernel/sched.c:207:
+#define POOL_DELAY_IDLE  (1*HZ/1000)
                               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#219: FILE: kernel/sched.c:208:
+#define POOL_DELAY_BUSY  (20*HZ/1000)
                             ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#219: FILE: kernel/sched.c:208:
+#define POOL_DELAY_BUSY  (20*HZ/1000)
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#220: FILE: kernel/sched.c:209:
+#define loop_over_node(i,cpu,n) \
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#220: FILE: kernel/sched.c:209:
+#define loop_over_node(i,cpu,n) \
                             ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#220: FILE: kernel/sched.c:209:
+#define loop_over_node(i,cpu,n) \
+	for(i=pool_ptr[n], cpu=pool_cpus[i]; i<pool_ptr[n+1]; i++, cpu=pool_cpus[i])

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#220: FILE: kernel/sched.c:209:
+#define loop_over_node(i,cpu,n) \
+	for(i=pool_ptr[n], cpu=pool_cpus[i]; i<pool_ptr[n+1]; i++, cpu=pool_cpus[i])

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#220: FILE: kernel/sched.c:209:
+#define loop_over_node(i,cpu,n) \
+	for(i=pool_ptr[n], cpu=pool_cpus[i]; i<pool_ptr[n+1]; i++, cpu=pool_cpus[i])

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#221: FILE: kernel/sched.c:210:
+	for(i=pool_ptr[n], cpu=pool_cpus[i]; i<pool_ptr[n+1]; i++, cpu=pool_cpus[i])
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#221: FILE: kernel/sched.c:210:
+	for(i=pool_ptr[n], cpu=pool_cpus[i]; i<pool_ptr[n+1]; i++, cpu=pool_cpus[i])
 	                      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#221: FILE: kernel/sched.c:210:
+	for(i=pool_ptr[n], cpu=pool_cpus[i]; i<pool_ptr[n+1]; i++, cpu=pool_cpus[i])
 	                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#221: FILE: kernel/sched.c:210:
+	for(i=pool_ptr[n], cpu=pool_cpus[i]; i<pool_ptr[n+1]; i++, cpu=pool_cpus[i])
 	                                                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#221: FILE: kernel/sched.c:210:
+	for(i=pool_ptr[n], cpu=pool_cpus[i]; i<pool_ptr[n+1]; i++, cpu=pool_cpus[i])
 	                                                              ^

ERROR:SPACING: space required before the open parenthesis '('
#221: FILE: kernel/sched.c:210:
+	for(i=pool_ptr[n], cpu=pool_cpus[i]; i<pool_ptr[n+1]; i++, cpu=pool_cpus[i])

WARNING:LINE_SPACING: Missing a blank line after declarations
#226: FILE: kernel/sched.c:215:
+	int i;
+	spin_lock(&pool_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#227: FILE: kernel/sched.c:216:
+^I/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#232: FILE: kernel/sched.c:221:
+	for (i=0; i<100; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#232: FILE: kernel/sched.c:221:
+	for (i=0; i<100; i++)
 	           ^

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#233: FILE: kernel/sched.c:222:
+		udelay(1000);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#241: FILE: kernel/sched.c:230:
+#define pooldata_is_locked() spin_is_locked(&pool_lock)

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#253: FILE: kernel/sched.c:242:
+	ptr=0;
 	   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#254: FILE: kernel/sched.c:243:
+	for (n=0; n<numnodes; n++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#254: FILE: kernel/sched.c:243:
+	for (n=0; n<numnodes; n++) {
 	           ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#255: FILE: kernel/sched.c:244:
+		mask = pool_mask[n] = __node_to_cpu_mask(n) & cpu_online_map;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#257: FILE: kernel/sched.c:246:
+		for (cpu=0; cpu<NR_CPUS; cpu++)
 		        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#257: FILE: kernel/sched.c:246:
+		for (cpu=0; cpu<NR_CPUS; cpu++)
 		               ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#257: FILE: kernel/sched.c:246:
+		for (cpu=0; cpu<NR_CPUS; cpu++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#262: FILE: kernel/sched.c:251:
+	numpools=numnodes;
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#263: FILE: kernel/sched.c:252:
+	pool_ptr[numpools]=ptr;
 	                  ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#264: FILE: kernel/sched.c:253:
+	printk("CPU pools : %d\n",numpools);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#264: FILE: kernel/sched.c:253:
+	printk("CPU pools : %d\n",numpools);
 	                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#265: FILE: kernel/sched.c:254:
+	for (n=0;n<numpools;n++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#265: FILE: kernel/sched.c:254:
+	for (n=0;n<numpools;n++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#265: FILE: kernel/sched.c:254:
+	for (n=0;n<numpools;n++) {
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#265: FILE: kernel/sched.c:254:
+	for (n=0;n<numpools;n++) {
 	                   ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#266: FILE: kernel/sched.c:255:
+		printk("pool %d :",n);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#266: FILE: kernel/sched.c:255:
+		printk("pool %d :",n);
 		                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#267: FILE: kernel/sched.c:256:
+		loop_over_node(i,cpu,n)
 		                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#267: FILE: kernel/sched.c:256:
+		loop_over_node(i,cpu,n)
 		                    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#268: FILE: kernel/sched.c:257:
+			printk("%d ",cpu);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#268: FILE: kernel/sched.c:257:
+			printk("%d ",cpu);
 			            ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#269: FILE: kernel/sched.c:258:
+		printk("\n");

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#271: FILE: kernel/sched.c:260:
+	if (cache_decay_ticks==1)
 	                     ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#272: FILE: kernel/sched.c:261:
+		printk("WARNING: cache_decay_ticks=1, probably unset by platform. Running with poor CPU affinity!\n");

WARNING:TYPO_SPELLING: 'temporarilly' may be misspelled - perhaps 'temporarily'?
#274: FILE: kernel/sched.c:263:
+	/* temporarilly set this to a reasonable value for NUMAQ */
 	   ^^^^^^^^^^^^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#275: FILE: kernel/sched.c:264:
+	cache_decay_ticks=8;
 	                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#283: FILE: kernel/sched.c:272:
+#define loop_over_node(i,cpu,n) for(cpu=0; cpu<NR_CPUS; cpu++)
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#283: FILE: kernel/sched.c:272:
+#define loop_over_node(i,cpu,n) for(cpu=0; cpu<NR_CPUS; cpu++)
                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#283: FILE: kernel/sched.c:272:
+#define loop_over_node(i,cpu,n) for(cpu=0; cpu<NR_CPUS; cpu++)
                                        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#283: FILE: kernel/sched.c:272:
+#define loop_over_node(i,cpu,n) for(cpu=0; cpu<NR_CPUS; cpu++)
                                               ^

ERROR:SPACING: space required before the open parenthesis '('
#283: FILE: kernel/sched.c:272:
+#define loop_over_node(i,cpu,n) for(cpu=0; cpu<NR_CPUS; cpu++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#283: FILE: kernel/sched.c:272:
+#define loop_over_node(i,cpu,n) for(cpu=0; cpu<NR_CPUS; cpu++)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#286: FILE: kernel/sched.c:275:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#344: FILE: kernel/sched.c:742:
+	int i, cpu, idx=-1, refload, load;
 	               ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#344: FILE: kernel/sched.c:742:
+	int i, cpu, idx=-1, refload, load;
 	                ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#349: FILE: kernel/sched.c:747:
+		if (!cpu_online(i)) continue;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rq_src->nr_running < this_rq->prev_nr_running[cpu]'
#351: FILE: kernel/sched.c:749:
+		if (idle || (rq_src->nr_running < this_rq->prev_nr_running[cpu]))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_WHITESPACE: trailing whitespace
#383: FILE: kernel/sched.c:776:
+ * node is unloaded) if the most loaded node didn't change. This gives less $

WARNING:TYPO_SPELLING: 'easilly' may be misspelled - perhaps 'easily'?
#387: FILE: kernel/sched.c:780:
+ * This concept can be extended easilly to more than two levels (multi-level
                                 ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#392: FILE: kernel/sched.c:785:
+static inline $

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#396: FILE: kernel/sched.c:789:
+	int i, imax, max_pool_load, max_pool_idx, best_cpu=-1;
 	                                                  ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#396: FILE: kernel/sched.c:789:
+	int i, imax, max_pool_load, max_pool_idx, best_cpu=-1;
 	                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#400: FILE: kernel/sched.c:793:
+#define POOLS_BALANCED(comp,this) (((comp) -(this)) < 50)
                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#400: FILE: kernel/sched.c:793:
+#define POOLS_BALANCED(comp,this) (((comp) -(this)) < 50)
                                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#408: FILE: kernel/sched.c:801:
+		avg_load += pool_load*pool_nr_cpus[pool];
 		                     ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'best_cpu < 0'
#417: FILE: kernel/sched.c:810:
+	if ((best_cpu < 0) || (max_pool_load <= 100) ||
+	    POOLS_BALANCED(max_pool_load,this_pool_load)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'max_pool_load <= 100'
#417: FILE: kernel/sched.c:810:
+	if ((best_cpu < 0) || (max_pool_load <= 100) ||
+	    POOLS_BALANCED(max_pool_load,this_pool_load)) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#418: FILE: kernel/sched.c:811:
+	    POOLS_BALANCED(max_pool_load,this_pool_load)) {
 	                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#424: FILE: kernel/sched.c:817:
+	if (POOLS_BALANCED(avg_load,this_pool_load))
 	                           ^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#433: FILE: kernel/sched.c:826:
+		return -1;
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#433: FILE: kernel/sched.c:826:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#461: FILE: kernel/sched.c:851:
+#define CPUS_BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))
                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#461: FILE: kernel/sched.c:851:
+#define CPUS_BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))
                                                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#461: FILE: kernel/sched.c:851:
+#define CPUS_BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))
                                                                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#461: FILE: kernel/sched.c:851:
+#define CPUS_BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))
                                                                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm' - possible side-effects?
#461: FILE: kernel/sched.c:851:
+#define CPUS_BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 't' - possible side-effects?
#461: FILE: kernel/sched.c:851:
+#define CPUS_BALANCED(m,t) (((m) <= 1) || (((m) - (t))/2 < (((m) + (t))/2 + 3)/4))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'this_rq->nr_running > this_rq->prev_nr_running[this_cpu]'
#468: FILE: kernel/sched.c:853:
+	if (idle || (this_rq->nr_running > this_rq->prev_nr_running[this_cpu]))

ERROR:SPACING: space required after that ',' (ctx:VxO)
#484: FILE: kernel/sched.c:861:
+		if (!CPUS_BALANCED(max_cpu_load,*nr_running)) {
 		                               ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#484: FILE: kernel/sched.c:861:
+		if (!CPUS_BALANCED(max_cpu_load,*nr_running)) {
 		                                ^

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#491: FILE: kernel/sched.c:868:
+		best_cpu = scan_other_pools(&max_cpu_load, this_pool_load, this_pool, this_cpu, idle);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'best_cpu >= 0'
#492: FILE: kernel/sched.c:869:
+		if ((best_cpu >= 0) &&
+		    (!CPUS_BALANCED(max_cpu_load,*nr_running))) {

ERROR:SPACING: space required after that ',' (ctx:VxO)
#493: FILE: kernel/sched.c:870:
+		    (!CPUS_BALANCED(max_cpu_load,*nr_running))) {
 		                                ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#493: FILE: kernel/sched.c:870:
+		    (!CPUS_BALANCED(max_cpu_load,*nr_running))) {
 		                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#508: FILE: kernel/sched.c:882:
+ * while calling this routine. $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#543: FILE: kernel/sched.c:890:
+	int weight, maxweight=0;
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#554: FILE: kernel/sched.c:898:
+#define CAN_MIGRATE_TASK(p,rq,this_cpu)	\
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#554: FILE: kernel/sched.c:898:
+#define CAN_MIGRATE_TASK(p,rq,this_cpu)	\
                              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#554: FILE: kernel/sched.c:898:
+#define CAN_MIGRATE_TASK(p,rq,this_cpu)	\
+		((jiffies - (p)->sleep_timestamp > cache_decay_ticks) && \
+		p != rq->curr && \
+		 ((p)->cpus_allowed & (1UL<<(this_cpu))))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'rq' may be better as '(rq)' to avoid precedence issues
#554: FILE: kernel/sched.c:898:
+#define CAN_MIGRATE_TASK(p,rq,this_cpu)	\
+		((jiffies - (p)->sleep_timestamp > cache_decay_ticks) && \
+		p != rq->curr && \
+		 ((p)->cpus_allowed & (1UL<<(this_cpu))))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#557: FILE: kernel/sched.c:901:
+		 ((p)->cpus_allowed & (1UL<<(this_cpu))))
 		                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#575: FILE: kernel/sched.c:936:
+		weight = (jiffies - tmp->sleep_timestamp)/cache_decay_ticks;
 		                                         ^

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#595: FILE: kernel/sched.c:956:
+static inline void pull_task(runqueue_t *src_rq, prio_array_t *src_array, task_t *p, runqueue_t *this_rq, int this_cpu)

WARNING:TYPO_SPELLING: 'inbalance' may be misspelled - perhaps 'imbalance'?
#636: FILE: kernel/sched.c:973:
+ * inbalance (current runqueue is too short) then pull from
    ^^^^^^^^^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#649: FILE: kernel/sched.c:986:
+	if (pooldata_is_locked()) return;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#678: FILE: kernel/sched.c:1018:
+#define BUSY_REBALANCE_TICK (HZ/5 ?: 1)
                                ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#735: FILE: kernel/sched.c:2237:
+		if (sync)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#737: FILE: kernel/sched.c:2239:
+		else {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#766: FILE: kernel/sched.c:2353:
+	pool_ptr[1] = NR_CPUS;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#768: FILE: kernel/sched.c:2355:
+	pool_nr_cpus[0] = NR_CPUS;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#770: FILE: kernel/sched.c:2357:
+		cache_decay_ticks=1;
 		                 ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000423733.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 55 errors, 20 warnings, 37 checks, 637 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000423733.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
