WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#54: 
 25-akpm/include/asm-mips/unistd.h      |   55 +++++++++++----------------------

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#77: FILE: include/asm-i386/unistd.h:297:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#77: FILE: include/asm-i386/unistd.h:297:
+#define __syscall_return(type, res) return ((type)(res))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#98: FILE: include/asm-alpha/unistd.h:371:
+#define _syscall_return(type)	return ((type) _sc_ret)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#98: FILE: include/asm-alpha/unistd.h:371:
+#define _syscall_return(type)	return ((type) _sc_ret)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#114: FILE: include/asm-arm26/unistd.h:281:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#114: FILE: include/asm-arm26/unistd.h:281:
+#define __syscall_return(type, res) return ((type)(res))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#135: FILE: include/asm-arm/unistd.h:328:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#135: FILE: include/asm-arm/unistd.h:328:
+#define __syscall_return(type, res) return ((type)(res))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#157: FILE: include/asm-h8300/unistd.h:280:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#157: FILE: include/asm-h8300/unistd.h:280:
+#define __syscall_return(type, res) return ((type)(res))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#179: FILE: include/asm-m68knommu/unistd.h:230:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#179: FILE: include/asm-m68knommu/unistd.h:230:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: include/asm-m68knommu/unistd.h:252:
+  __syscall_return(type, __res);^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: include/asm-m68knommu/unistd.h:267:
+  __syscall_return(type, __res);^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: include/asm-m68knommu/unistd.h:284:
+  __syscall_return(type, __res);^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#245: FILE: include/asm-m68knommu/unistd.h:303:
+  __syscall_return(type, __res);^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: include/asm-m68knommu/unistd.h:325:
+  __syscall_return(type, __res);^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#271: FILE: include/asm-m68knommu/unistd.h:349:
+  __syscall_return(type, __res);^I^I^I^I^I^I\$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#283: FILE: include/asm-m68k/unistd.h:248:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#283: FILE: include/asm-m68k/unistd.h:248:
+#define __syscall_return(type, res) return ((type)(res))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#304: FILE: include/asm-mips/unistd.h:824:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#304: FILE: include/asm-mips/unistd.h:824:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#306: FILE: include/asm-mips/unistd.h:826:
+do { \

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#434: FILE: include/asm-parisc/unistd.h:745:
+#define __syscall_return					\
+        if (__sys_res >= (unsigned long)-4095) {		\
+		errno = -__sys_res;				\
+                __sys_res = (unsigned long)-1;			\
+        }							\
+        __sys_res;						\
+#endif
+
 /* The system call number MUST ALWAYS be loaded in the delay slot of
    the ble instruction, or restarting system calls WILL NOT WORK.  See
    arch/parisc/kernel/signal.c - dhd, 2000-07-26 */

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

ERROR:CODE_INDENT: code indent should use tabs where possible
#435: FILE: include/asm-parisc/unistd.h:746:
+        if (__sys_res >= (unsigned long)-4095) {^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#435: FILE: include/asm-parisc/unistd.h:746:
+        if (__sys_res >= (unsigned long)-4095) {^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#437: FILE: include/asm-parisc/unistd.h:748:
+                __sys_res = (unsigned long)-1;^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#437: FILE: include/asm-parisc/unistd.h:748:
+                __sys_res = (unsigned long)-1;^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#438: FILE: include/asm-parisc/unistd.h:749:
+        }^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#438: FILE: include/asm-parisc/unistd.h:749:
+        }^I^I^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#439: FILE: include/asm-parisc/unistd.h:750:
+        __sys_res;^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#439: FILE: include/asm-parisc/unistd.h:750:
+        __sys_res;^I^I^I^I^I^I\$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#468: FILE: include/asm-ppc64/unistd.h:292:
+#define __syscall_return						\
+	if (__sc_err & 0x10000000)					\
+	{								\
+		errno = __sc_ret;					\
+		__sc_ret = -1;						\
+	}								\
+#endif
+
 /* On powerpc a system call basically clobbers the same registers like a
  * function call, with the exception of LR (which is needed for the
  * "sc; bnslr" sequence) and CR (where only CR0.SO is clobbered to signal

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#469: FILE: include/asm-ppc64/unistd.h:293:
+	if (__sc_err & 0x10000000)					\
+	{								\

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#502: FILE: include/asm-ppc/unistd.h:283:
+#define __syscall_return						\
+	if (__sc_err & 0x10000000)					\
+	{								\
+		errno = __sc_ret;					\
+		__sc_ret = -1;						\
+	}								\
+#endif
+
 /* On powerpc a system call basically clobbers the same registers like a
  * function call, with the exception of LR (which is needed for the
  * "sc; bnslr" sequence) and CR (where only CR0.SO is clobbered to signal

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#503: FILE: include/asm-ppc/unistd.h:284:
+	if (__sc_err & 0x10000000)					\
+	{								\

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#534: FILE: include/asm-s390/unistd.h:364:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#534: FILE: include/asm-s390/unistd.h:364:
+#define __syscall_return(type, res) return ((type)(res))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#555: FILE: include/asm-sh/unistd.h:290:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#555: FILE: include/asm-sh/unistd.h:290:
+#define __syscall_return(type, res) return ((type)(res))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#576: FILE: include/asm-sparc64/unistd.h:307:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#576: FILE: include/asm-sparc64/unistd.h:307:
+#define __syscall_return(type, res) return ((type)(res))

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#578: FILE: include/asm-sparc64/unistd.h:309:
+#define __syscall_return(type, res)		\
+	if (res >= 0)				\
+		return (type)res;		\
+	errno = -res;				\
+	return -1;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'res' - possible side-effects?
#578: FILE: include/asm-sparc64/unistd.h:309:
+#define __syscall_return(type, res)		\
+	if (res >= 0)				\
+		return (type)res;		\
+	errno = -res;				\
+	return -1;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'res' may be better as '(res)' to avoid precedence issues
#578: FILE: include/asm-sparc64/unistd.h:309:
+#define __syscall_return(type, res)		\
+	if (res >= 0)				\
+		return (type)res;		\
+	errno = -res;				\
+	return -1;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#578: FILE: include/asm-sparc64/unistd.h:309:
+#define __syscall_return(type, res)		\
+	if (res >= 0)				\
+		return (type)res;		\
+	errno = -res;				\
+	return -1;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#578: FILE: include/asm-sparc64/unistd.h:309:
+#define __syscall_return(type, res)		\
+	if (res >= 0)				\
+		return (type)res;		\
+	errno = -res;				\
+	return -1;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#668: FILE: include/asm-sparc/unistd.h:306:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#668: FILE: include/asm-sparc/unistd.h:306:
+#define __syscall_return(type, res) return ((type)(res))

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#670: FILE: include/asm-sparc/unistd.h:308:
+#define __syscall_return(type, res)		\
+	if (res < -255 || res >= 0)		\
+		return (type)res;		\
+	errno = -res;				\
+	return -1;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'res' - possible side-effects?
#670: FILE: include/asm-sparc/unistd.h:308:
+#define __syscall_return(type, res)		\
+	if (res < -255 || res >= 0)		\
+		return (type)res;		\
+	errno = -res;				\
+	return -1;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'res' may be better as '(res)' to avoid precedence issues
#670: FILE: include/asm-sparc/unistd.h:308:
+#define __syscall_return(type, res)		\
+	if (res < -255 || res >= 0)		\
+		return (type)res;		\
+	errno = -res;				\
+	return -1;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#670: FILE: include/asm-sparc/unistd.h:308:
+#define __syscall_return(type, res)		\
+	if (res < -255 || res >= 0)		\
+		return (type)res;		\
+	errno = -res;				\
+	return -1;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#670: FILE: include/asm-sparc/unistd.h:308:
+#define __syscall_return(type, res)		\
+	if (res < -255 || res >= 0)		\
+		return (type)res;		\
+	errno = -res;				\
+	return -1;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#761: FILE: include/asm-v850/unistd.h:249:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#761: FILE: include/asm-v850/unistd.h:249:
+#define __syscall_return(type, res) return ((type)(res))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#783: FILE: include/asm-x86_64/unistd.h:564:
+#define __syscall_return(type, res) return ((type)(res))

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#783: FILE: include/asm-x86_64/unistd.h:564:
+#define __syscall_return(type, res) return ((type)(res))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000284630.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 30 warnings, 4 checks, 617 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000284630.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
