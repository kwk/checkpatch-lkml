WARNING:TYPO_SPELLING: 'infact' may be misspelled - perhaps 'in fact'?
#30: 
> pageattr right now.  More likely ioremap stuff is still buggy (infact an
                                                                 ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#64: FILE: arch/x86_64/mm/ioremap.c:101:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#65: FILE: arch/x86_64/mm/ioremap.c:102:
+ * Fix up the linear direct mapping of the kernel to avoid cache attribute $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#67: FILE: arch/x86_64/mm/ioremap.c:104:
+ */  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#68: FILE: arch/x86_64/mm/ioremap.c:105:
+static int $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#69: FILE: arch/x86_64/mm/ioremap.c:106:
+ioremap_change_attr(unsigned long phys_addr, unsigned long size, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#70: FILE: arch/x86_64/mm/ioremap.c:107:
+ioremap_change_attr(unsigned long phys_addr, unsigned long size, 
+					unsigned long flags)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#73: FILE: arch/x86_64/mm/ioremap.c:110:
+^Iif (flags && phys_addr + size - 1 < (end_pfn_map << PAGE_SHIFT)) { $

WARNING:LINE_SPACING: Missing a blank line after declarations
#73: FILE: arch/x86_64/mm/ioremap.c:110:
+	int err = 0;
+	if (flags && phys_addr + size - 1 < (end_pfn_map << PAGE_SHIFT)) { 

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#75: FILE: arch/x86_64/mm/ioremap.c:112:
+		unsigned long vaddr = (unsigned long) __va(phys_addr);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#76: FILE: arch/x86_64/mm/ioremap.c:113:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#77: FILE: arch/x86_64/mm/ioremap.c:114:
+^I^I/* $

ERROR:CODE_INDENT: code indent should use tabs where possible
#78: FILE: arch/x86_64/mm/ioremap.c:115:
+ ^I^I * Must use a address here and not struct page because the phys addr$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#78: FILE: arch/x86_64/mm/ioremap.c:115:
+ ^I^I * Must use a address here and not struct page because the phys addr$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#79: FILE: arch/x86_64/mm/ioremap.c:116:
+^I^I * can be a in hole between nodes and not have an memmap entry. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#84: FILE: arch/x86_64/mm/ioremap.c:121:
+^I} $

CHECK:SPACING: No space is necessary after a cast
#105: FILE: arch/x86_64/mm/ioremap.c:188:
+		remove_vm_area((void *)(PAGE_MASK & (unsigned long) addr));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#108: FILE: arch/x86_64/mm/ioremap.c:191:
+^Iif (ioremap_change_attr(phys_addr, size, flags) < 0) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#143: FILE: arch/x86_64/mm/ioremap.c:229:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#149: FILE: arch/x86_64/mm/ioremap.c:234:
+	for (p = vmlist, pprev = &vmlist; p != NULL; pprev = &p->next, p = *pprev)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#150: FILE: arch/x86_64/mm/ioremap.c:235:
+^I^Iif (p->addr == (void *)(PAGE_MASK & (unsigned long)addr)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#151: FILE: arch/x86_64/mm/ioremap.c:236:
+^I^I^Ibreak; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#159: FILE: arch/x86_64/mm/ioremap.c:240:
+^I}^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#162: FILE: arch/x86_64/mm/ioremap.c:243:
+^Iif ((p->flags >> 24) && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#163: FILE: arch/x86_64/mm/ioremap.c:244:
+^I^Ip->phys_addr + p->size - 1 < virt_to_phys(high_memory)) { $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#163: FILE: arch/x86_64/mm/ioremap.c:244:
+	if ((p->flags >> 24) && 
+		p->phys_addr + p->size - 1 < virt_to_phys(high_memory)) { 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#169: FILE: arch/x86_64/mm/ioremap.c:250:
+out_unlock:^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#194: FILE: arch/x86_64/mm/pageattr.c:114:
+__change_page_attr(unsigned long address, unsigned long pfn, pgprot_t prot, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: arch/x86_64/mm/pageattr.c:115:
+__change_page_attr(unsigned long address, unsigned long pfn, pgprot_t prot, 
+				   pgprot_t ref_prot)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#209: FILE: arch/x86_64/mm/pageattr.c:127:
+^I^I^Ipte_t standard = pfn_pte(pfn, ref_prot); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#212: FILE: arch/x86_64/mm/pageattr.c:129:
+^I^I^Iset_pte(kpte, pfn_pte(pfn, prot)); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#243: FILE: arch/x86_64/mm/pageattr.c:170:
+^Ifor (i = 0; i < numpages; i++, address += PAGE_SIZE) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#245: FILE: arch/x86_64/mm/pageattr.c:172:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#246: FILE: arch/x86_64/mm/pageattr.c:173:
+^I^Ierr = __change_page_attr(address, pfn, prot, PAGE_KERNEL); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: arch/x86_64/mm/pageattr.c:179:
+^I^Iif (0 && __pa(address) < KERNEL_TEXT_SIZE) {^I^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#270: FILE: arch/x86_64/mm/pageattr.c:193:
+	unsigned long addr = (unsigned long)page_address(page);
+	return change_page_attr_addr(addr, numpages, prot);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000233566.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 26 errors, 4 warnings, 6 checks, 209 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000233566.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
