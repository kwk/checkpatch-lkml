CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#37: 
Andi Kleen a écrit :
             ^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#50: 
The problem of dynamically allocating the readahead state data is that the allocation can fail and should not be fatal.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#108: FILE: include/linux/fs.h:1516:
+extern struct file_ra_state *file_ra_state_init(struct file *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#108: FILE: include/linux/fs.h:1516:
+extern struct file_ra_state *file_ra_state_init(struct file *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!filp->f_rap"
#116: FILE: include/linux/fs.h:1550:
+	if (filp->f_rap == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#117: FILE: include/linux/fs.h:1551:
+		file_ra_state_init(filp);
 		                   ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ra"
#153: FILE: mm/readahead.c:39:
+	if (ra != NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#181: FILE: mm/filemap.c:732:
+	if (likely(_rap != NULL))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "_rap"
#181: FILE: mm/filemap.c:732:
+	if (likely(_rap != NULL))

CHECK:BRACES: Unbalanced braces around else statement
#183: FILE: mm/filemap.c:734:
+	else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "_rap"
#196: FILE: mm/filemap.c:918:
+	if (_rap != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ra"
#212: FILE: mm/filemap.c:1204:
+	if (ra == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ra"
#223: FILE: mm/filemap.c:1239:
+		if (ra != NULL) {

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#247: FILE: mm/filemap.c:1259:
+		ra_pages = max_sane_readahead(ra != NULL ? ra->ra_pages : default_backing_dev_info.ra_pages);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ra"
#247: FILE: mm/filemap.c:1259:
+		ra_pages = max_sane_readahead(ra != NULL ? ra->ra_pages : default_backing_dev_info.ra_pages);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ra"
#256: FILE: mm/filemap.c:1272:
+	if (!did_readaround && ra != NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#274: FILE: mm/fadvise.c:58:
+	if ((ra = file->f_rap) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ra"
#279: FILE: mm/fadvise.c:62:
+		if (ra != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ra"
#284: FILE: mm/fadvise.c:66:
+		if (ra != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ra"
#289: FILE: mm/fadvise.c:70:
+		if (ra != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "f->f_rap"
#311: FILE: fs/file_table.c:58:
+	if (f->f_rap != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#332: FILE: fs/dcache.c:1739:
+	ra_cachep = kmem_cache_create("file_ra", sizeof(struct file_ra_state), 0,
+			SLAB_PANIC, NULL, NULL);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000158919.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 4 warnings, 17 checks, 226 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000158919.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
