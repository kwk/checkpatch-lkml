WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
Following this huge discussion thread, I tried to come with a marker mechanism

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#61: 
--- a/arch/i386/Kconfig

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#75: FILE: include/asm-i386/marker.h:1:
+/*****************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#85: FILE: include/asm-i386/marker.h:11:
+#define JPROBE_TARGET \
+	__asm__ ( GENERIC_NOP5 )

ERROR:SPACING: space prohibited after that open parenthesis '('
#86: FILE: include/asm-i386/marker.h:12:
+	__asm__ ( GENERIC_NOP5 )

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#86: FILE: include/asm-i386/marker.h:12:
+	__asm__ ( GENERIC_NOP5 )

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#90: FILE: include/linux/marker.h:1:
+/*****************************************************************************

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#120: FILE: include/linux/marker.h:31:
+#define MARK_SYM(event) \
+	__asm__ ( "__mark_" KBUILD_BASENAME "_" #event ":" )

ERROR:SPACING: space prohibited after that open parenthesis '('
#121: FILE: include/linux/marker.h:32:
+	__asm__ ( "__mark_" KBUILD_BASENAME "_" #event ":" )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#121: FILE: include/linux/marker.h:32:
+	__asm__ ( "__mark_" KBUILD_BASENAME "_" #event ":" )

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#125: FILE: include/linux/marker.h:36:
+#define MARK_PRINT(event, format, args...)	printk(format, ##args);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#125: FILE: include/linux/marker.h:36:
+#define MARK_PRINT(event, format, args...)	printk(format, ##args);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#127: FILE: include/linux/marker.h:38:
+#define MARK_FPROBE(event, format, args...) ^Ifprobe_##event(args);$

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#127: FILE: include/linux/marker.h:38:
+#define MARK_FPROBE(event, format, args...) 	fprobe_##event(args);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#129: FILE: include/linux/marker.h:40:
+#define MARK_KPROBE(event, format, args...)	MARK_SYM(event);

ERROR:SPACING: space required before the open parenthesis '('
#135: FILE: include/linux/marker.h:46:
+	} while(0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#166: FILE: include/linux/marker.h:77:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#175: FILE: kernel/Kconfig.marker:6:
+config MARK
+	bool "Enable MARK code markers"
+	default y
+	help
+	  Activate markers that can call printk or can be instrumented
+	  dynamically.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#182: FILE: kernel/Kconfig.marker:13:
+choice
+	prompt "MARK code marker behavior"
+	default MARK_KPROBE
+	depends on MARK
+	help
+	  Configuration of markers that can call printk or can be
+	  instrumented dynamically.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#190: FILE: kernel/Kconfig.marker:21:
+config MARK_KPROBE
+	bool "KPROBE"
+	---help---
+	Change markers for a symbol "__mark_modulename_event".

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#194: FILE: kernel/Kconfig.marker:25:
+config MARK_JPROBE
+	bool "JPROBE"
+	---help---
+	Change markers for a symbol "__mark_modulename_event"
+	and create a target for a high speed dynamic probe.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#199: FILE: kernel/Kconfig.marker:30:
+config MARK_FPROBE
+	bool "FPROBE"
+	---help---
+	Change markers for a function call.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#203: FILE: kernel/Kconfig.marker:34:
+config MARK_PRINT
+	bool "PRINT"
+	---help---
+	Call printk from the marker.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#209: FILE: kernel/Kconfig.marker:40:
+config MARK_NOPRINT
+	bool "Enable MARK_NOPRINT code markers"
+	default y
+	help
+	  Activate markers that cannot call printk.
+ 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#214: FILE: kernel/Kconfig.marker:45:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#215: FILE: kernel/Kconfig.marker:46:
+choice
+	prompt "MARK_NOPRINT code marker behavior"
+	default MARK_NOPRINT_KPROBE
+	depends on MARK_NOPRINT
+	help
+	  Configuration of markers that cannot call printk.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#222: FILE: kernel/Kconfig.marker:53:
+config MARK_NOPRINT_KPROBE
+	bool "KPROBE"
+	---help---
+	Change markers for a symbol "__mark_modulename_event".

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#226: FILE: kernel/Kconfig.marker:57:
+config MARK_NOPRINT_JPROBE
+	bool "JPROBE"
+	---help---
+	Change markers for a symbol "__mark_modulename_event"
+	and create a target for a high speed dynamic probe.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#231: FILE: kernel/Kconfig.marker:62:
+config MARK_NOPRINT_FPROBE
+	bool "FPROBE"
+	---help---
+	Change markers for a function call.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#237: FILE: kernel/Kconfig.marker:68:
+config MARK_STATIC
+	bool "Enable MARK_STATIC code markers"
+	default y
+	help
+	  Activate markers that cannot be instrumented dynamically. They will
+	  generate function calls to each function-style probe.
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000037156.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 20 warnings, 1 checks, 172 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000037156.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
