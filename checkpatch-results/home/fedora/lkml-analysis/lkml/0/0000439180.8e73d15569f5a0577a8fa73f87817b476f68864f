WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
diff -urpNX dontdiff linux-2.5.31/arch/mips/kernel/irixelf.c linux-2.5.31-willy/arch/mips/kernel/irixelf.c

ERROR:SPACING: space required after that ',' (ctx:VxV)
#67: FILE: arch/mips/kernel/irixelf.c:211:
+		__put_user((unsigned long)p,argv++);
 		                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#74: FILE: arch/mips/kernel/irixelf.c:217:
+		__put_user((unsigned long)p,envp++);
 		                           ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#154: FILE: fs/binfmt_elf.c:89:
+	current->mm->start_brk = current->mm->brk = end;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:TYPO_SPELLING: 'litle' may be misspelled - perhaps 'little'?
#168: FILE: fs/binfmt_elf.c:110:
+/* Let's use some macros to make this stack manipulation a litle clearer */
                                                            ^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#172: FILE: fs/binfmt_elf.c:114:
+	((15 + (unsigned long) ((sp) + (items))) &~ 15UL)

CHECK:SPACING: spaces preferred around that '&' (ctx:WxO)
#172: FILE: fs/binfmt_elf.c:114:
+	((15 + (unsigned long) ((sp) + (items))) &~ 15UL)
 	                                         ^

ERROR:SPACING: space prohibited after that '~' (ctx:OxW)
#172: FILE: fs/binfmt_elf.c:114:
+	((15 + (unsigned long) ((sp) + (items))) &~ 15UL)
 	                                          ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sp' - possible side-effects?
#173: FILE: fs/binfmt_elf.c:115:
+#define STACK_ALLOC(sp, len) ({ elf_addr_t old_sp = sp; sp += len; old_sp; })

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sp' may be better as '(sp)' to avoid precedence issues
#176: FILE: fs/binfmt_elf.c:118:
+#define STACK_ROUND(sp, items) \
+	(((unsigned long) (sp - items)) &~ 15UL)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'items' may be better as '(items)' to avoid precedence issues
#176: FILE: fs/binfmt_elf.c:118:
+#define STACK_ROUND(sp, items) \
+	(((unsigned long) (sp - items)) &~ 15UL)

CHECK:SPACING: No space is necessary after a cast
#177: FILE: fs/binfmt_elf.c:119:
+	(((unsigned long) (sp - items)) &~ 15UL)

CHECK:SPACING: spaces preferred around that '&' (ctx:WxO)
#177: FILE: fs/binfmt_elf.c:119:
+	(((unsigned long) (sp - items)) &~ 15UL)
 	                                ^

ERROR:SPACING: space prohibited after that '~' (ctx:OxW)
#177: FILE: fs/binfmt_elf.c:119:
+	(((unsigned long) (sp - items)) &~ 15UL)
 	                                 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#178: FILE: fs/binfmt_elf.c:120:
+#define STACK_ALLOC(sp, len) sp -= len

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sp' may be better as '(sp)' to avoid precedence issues
#178: FILE: fs/binfmt_elf.c:120:
+#define STACK_ALLOC(sp, len) sp -= len

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#182: FILE: fs/binfmt_elf.c:124:
+create_elf_tables(struct linux_binprm *bprm, struct elfhdr * exec,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#183: FILE: fs/binfmt_elf.c:125:
+create_elf_tables(struct linux_binprm *bprm, struct elfhdr * exec,
+		int interp_aout, unsigned long load_addr,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#312: FILE: fs/binfmt_elf.c:182:
+	NEW_AUX_ENT(AT_PHENT, sizeof (struct elf_phdr));

CHECK:SPACING: No space is necessary after a cast
#317: FILE: fs/binfmt_elf.c:187:
+	NEW_AUX_ENT(AT_UID, (elf_addr_t) current->uid);

CHECK:SPACING: No space is necessary after a cast
#318: FILE: fs/binfmt_elf.c:188:
+	NEW_AUX_ENT(AT_EUID, (elf_addr_t) current->euid);

CHECK:SPACING: No space is necessary after a cast
#319: FILE: fs/binfmt_elf.c:189:
+	NEW_AUX_ENT(AT_GID, (elf_addr_t) current->gid);

CHECK:SPACING: No space is necessary after a cast
#320: FILE: fs/binfmt_elf.c:190:
+	NEW_AUX_ENT(AT_EGID, (elf_addr_t) current->egid);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#321: FILE: fs/binfmt_elf.c:191:
+	if (k_platform) {
+		NEW_AUX_ENT(AT_PLATFORM, u_platform);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#337: FILE: fs/binfmt_elf.c:200:
+	if (interp_aout) {
[...]
+	} else {
[...]

CHECK:SPACING: No space is necessary after a cast
#347: FILE: fs/binfmt_elf.c:210:
+	bprm->exec = (unsigned long) sp; /* XXX: PARISC HACK */

WARNING:LINE_SPACING: Missing a blank line after declarations
#373: FILE: fs/binfmt_elf.c:231:
+		size_t len;
+		__put_user((elf_addr_t)p, argv++);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#374: FILE: fs/binfmt_elf.c:232:
+		len = strnlen_user((void *)p, PAGE_SIZE*MAX_ARG_PAGES);
 		                                       ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#385: FILE: fs/binfmt_elf.c:238:
+	current->mm->arg_end = current->mm->env_start = p;

WARNING:LINE_SPACING: Missing a blank line after declarations
#388: FILE: fs/binfmt_elf.c:241:
+		size_t len;
+		__put_user((elf_addr_t)p, envp++);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#389: FILE: fs/binfmt_elf.c:242:
+		len = strnlen_user((void *)p, PAGE_SIZE*MAX_ARG_PAGES);
 		                                       ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!bprm->sh_bang'
#421: FILE: fs/binfmt_elf.c:590:
+	if ((!bprm->sh_bang) && (interpreter_type == INTERPRETER_AOUT)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'interpreter_type == INTERPRETER_AOUT'
#421: FILE: fs/binfmt_elf.c:590:
+	if ((!bprm->sh_bang) && (interpreter_type == INTERPRETER_AOUT)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#423: FILE: fs/binfmt_elf.c:592:
+		char *passed_p = passed_fileno;
+		sprintf(passed_fileno, "%d", elf_exec_fileno);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#448: FILE: fs/binfmt_elf.c:615:
+	/* Do this immediately, since STACK_TOP as used in setup_arg_pages
+	   may depend on the personality.  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#448: FILE: fs/binfmt_elf.c:615:
+	   may depend on the personality.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#467: FILE: fs/binfmt_elf.c:669:
+			   is because the brk will follow the loader, and is not movable.  */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#511: FILE: fs/binfmt_elf.c:744:
+	create_elf_tables(bprm, &elf_ex, (interpreter_type == INTERPRETER_AOUT),
+			load_addr, interp_load_addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#541: FILE: fs/exec.c:345:
+		struct page *page = bprm->page[j];
+		if (!page)

CHECK:SPACING: No space is necessary after a cast
#595: FILE: fs/exec.c:396:
+			(PAGE_SIZE - 1 + (unsigned long) bprm->p);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000439180.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 12 warnings, 22 checks, 639 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000439180.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
