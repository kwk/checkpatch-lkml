WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#50: 
    1      485.36  100       485.3640     11.99      1.91   Sat Apr 30 14:01:51 2005

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#159: FILE: mm/slab.c:279:
+	spinlock_t lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#184: FILE: mm/slab.c:303:
+^Iunsigned int ^Ifree_limit;$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#185: FILE: mm/slab.c:304:
+	spinlock_t      list_lock;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#216: FILE: mm/slab.c:330:
+#define CACHE(x) \
+	if (size <=x) \
+		return i; \
+	else \
+		i++;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#216: FILE: mm/slab.c:330:
+#define CACHE(x) \
+	if (size <=x) \
+		return i; \
+	else \
+		i++;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#216: FILE: mm/slab.c:330:
+#define CACHE(x) \
+	if (size <=x) \
+		return i; \
+	else \
+		i++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#216: FILE: mm/slab.c:330:
+#define CACHE(x) \
+	if (size <=x) \
+		return i; \
+	else \
+		i++;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#217: FILE: mm/slab.c:331:
+	if (size <=x) \
 	         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#224: FILE: mm/slab.c:338:
+		extern void __bad_size(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'parent' - possible side-effects?
#235: FILE: mm/slab.c:349:
+#define LIST3_INIT(parent) \
+	do {	\
+		INIT_LIST_HEAD(&(parent)->slabs_full);	\
+		INIT_LIST_HEAD(&(parent)->slabs_partial);	\
+		INIT_LIST_HEAD(&(parent)->slabs_free);	\
+		(parent)->shared = NULL; \
+		(parent)->alien = NULL; \
+		(parent)->list_lock = SPIN_LOCK_UNLOCKED;	\
+		(parent)->free_objects = 0;	\
+		(parent)->free_touched = 0;	\
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#245: FILE: mm/slab.c:359:
+	} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'parent' - possible side-effects?
#248: FILE: mm/slab.c:362:
+#define LIST3_INIT(parent) \
+	do {	\
+		INIT_LIST_HEAD(&(parent)->slabs_full);	\
+		INIT_LIST_HEAD(&(parent)->slabs_partial);	\
+		INIT_LIST_HEAD(&(parent)->slabs_free);	\
+		(parent)->shared = NULL; \
+		(parent)->list_lock = SPIN_LOCK_UNLOCKED;	\
+		(parent)->free_objects = 0;	\
+		(parent)->free_touched = 0;	\
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#257: FILE: mm/slab.c:371:
+	} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cachep' may be better as '(cachep)' to avoid precedence issues
#260: FILE: mm/slab.c:374:
+#define MAKE_LIST(cachep, listp, slab, nodeid)	\
+	do {	\
+		INIT_LIST_HEAD(listp);		\
+		list_splice(&(cachep->nodelists[nodeid]->slab), listp); \
+	}while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'listp' - possible side-effects?
#260: FILE: mm/slab.c:374:
+#define MAKE_LIST(cachep, listp, slab, nodeid)	\
+	do {	\
+		INIT_LIST_HEAD(listp);		\
+		list_splice(&(cachep->nodelists[nodeid]->slab), listp); \
+	}while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'slab' may be better as '(slab)' to avoid precedence issues
#260: FILE: mm/slab.c:374:
+#define MAKE_LIST(cachep, listp, slab, nodeid)	\
+	do {	\
+		INIT_LIST_HEAD(listp);		\
+		list_splice(&(cachep->nodelists[nodeid]->slab), listp); \
+	}while(0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cachep->nodelists[nodeid]->slab
#263: FILE: mm/slab.c:377:
+		list_splice(&(cachep->nodelists[nodeid]->slab), listp); \

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: space required after that close brace '}'
#264: FILE: mm/slab.c:378:
+	}while(0)

ERROR:SPACING: space required before the open parenthesis '('
#264: FILE: mm/slab.c:378:
+	}while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cachep' - possible side-effects?
#266: FILE: mm/slab.c:380:
+#define	MAKE_ALL_LISTS(cachep, ptr, nodeid)			\
+	do {					\
+	MAKE_LIST((cachep), (&(ptr)->slabs_full), slabs_full, nodeid);	\
+	MAKE_LIST((cachep), (&(ptr)->slabs_partial), slabs_partial, nodeid);	\
+	MAKE_LIST((cachep), (&(ptr)->slabs_free), slabs_free, nodeid);	\
+	}while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#266: FILE: mm/slab.c:380:
+#define	MAKE_ALL_LISTS(cachep, ptr, nodeid)			\
+	do {					\
+	MAKE_LIST((cachep), (&(ptr)->slabs_full), slabs_full, nodeid);	\
+	MAKE_LIST((cachep), (&(ptr)->slabs_partial), slabs_partial, nodeid);	\
+	MAKE_LIST((cachep), (&(ptr)->slabs_free), slabs_free, nodeid);	\
+	}while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nodeid' - possible side-effects?
#266: FILE: mm/slab.c:380:
+#define	MAKE_ALL_LISTS(cachep, ptr, nodeid)			\
+	do {					\
+	MAKE_LIST((cachep), (&(ptr)->slabs_full), slabs_full, nodeid);	\
+	MAKE_LIST((cachep), (&(ptr)->slabs_partial), slabs_partial, nodeid);	\
+	MAKE_LIST((cachep), (&(ptr)->slabs_free), slabs_free, nodeid);	\
+	}while(0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#267: FILE: mm/slab.c:381:
+	do {					\
+	MAKE_LIST((cachep), (&(ptr)->slabs_full), slabs_full, nodeid);	\

ERROR:SPACING: space required after that close brace '}'
#271: FILE: mm/slab.c:385:
+	}while(0)

ERROR:SPACING: space required before the open parenthesis '('
#271: FILE: mm/slab.c:385:
+	}while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'node' may be better as '(node)' to avoid precedence issues
#284: FILE: mm/slab.c:397:
+#define is_node_online(node) \
+	(node == 0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#298: FILE: mm/slab.c:412:
+^Iunsigned int ^I^Ishared;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#387: FILE: mm/slab.c:798:
 }
+#ifdef CONFIG_NUMA

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#391: FILE: mm/slab.c:802:
+	int memsize = sizeof(void*)*MAX_NUMNODES;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#391: FILE: mm/slab.c:802:
+	int memsize = sizeof(void*)*MAX_NUMNODES;
 	                           ^

ERROR:SPACING: space required before the open parenthesis '('
#398: FILE: mm/slab.c:809:
+	if(ac_ptr) {

ERROR:SPACING: space required before the open parenthesis '('
#405: FILE: mm/slab.c:816:
+			if(!ac_ptr[i]) {

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#406: FILE: mm/slab.c:817:
+				for(i--; i <=0; i--)
 				           ^

ERROR:SPACING: space required before the open parenthesis '('
#406: FILE: mm/slab.c:817:
+				for(i--; i <=0; i--)

ERROR:SPACING: space required before the open parenthesis '('
#420: FILE: mm/slab.c:831:
+	if(!ac_ptr)

ERROR:SPACING: space required before the open parenthesis '('
#432: FILE: mm/slab.c:843:
+	if(ac->avail) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#442: FILE: mm/slab.c:853:
+	int i=0;
 	     ^

ERROR:SPACING: space required before the open parenthesis '('
#448: FILE: mm/slab.c:859:
+		if(ac) {

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#457: FILE: mm/slab.c:868:
 static int __devinit cpuup_callback(struct notifier_block *nfb,

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#470: FILE: mm/slab.c:881:
+		/* we need to do this right in the begining since
 		                                   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required before the open parenthesis '('
#483: FILE: mm/slab.c:893:
+				if(!(l3 = kmalloc_node(memsize,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#483: FILE: mm/slab.c:893:
+				if(!(l3 = kmalloc_node(memsize,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#484: FILE: mm/slab.c:894:
+				if(!(l3 = kmalloc_node(memsize,
+						GFP_KERNEL, node)))

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#488: FILE: mm/slab.c:898:
+					((unsigned long)cachep)%REAPTIMEOUT_LIST3;
 					                       ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#502: FILE: mm/slab.c:911:
+		/* Now we can go ahead with allocating the shared array's
+		  & array cache's */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#502: FILE: mm/slab.c:911:
+		  & array cache's */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#505: FILE: mm/slab.c:914:
+			nc = alloc_arraycache(cpu, cachep->limit,
+					cachep->batchcount);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#516: FILE: mm/slab.c:920:
+			BUG_ON(!l3);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required before the open parenthesis '('
#517: FILE: mm/slab.c:921:
+			if(!l3->shared) {

ERROR:SPACING: space required before the open parenthesis '('
#518: FILE: mm/slab.c:922:
+				if(!(nc = alloc_arraycache(cpu,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#518: FILE: mm/slab.c:922:
+				if(!(nc = alloc_arraycache(cpu,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#519: FILE: mm/slab.c:923:
+				if(!(nc = alloc_arraycache(cpu,
+					cachep->shared*cachep->batchcount,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#519: FILE: mm/slab.c:923:
+					cachep->shared*cachep->batchcount,
 					              ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#524: FILE: mm/slab.c:928:
+				/* we are serialised from CPU_DEAD or
+				  CPU_UP_CANCELLED by the cpucontrol lock */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#524: FILE: mm/slab.c:928:
+				  CPU_UP_CANCELLED by the cpucontrol lock */

ERROR:SPACING: space required before the open parenthesis '('
#545: FILE: mm/slab.c:954:
+			if(!l3)

ERROR:SPACING: space required before the open parenthesis '('
#552: FILE: mm/slab.c:961:
+			if(nc)

ERROR:SPACING: space required before the open parenthesis '('
#555: FILE: mm/slab.c:964:
+			if(!cpus_empty(mask)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#556: FILE: mm/slab.c:965:
+                                spin_unlock(&l3->list_lock);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#556: FILE: mm/slab.c:965:
+                                spin_unlock(&l3->list_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#557: FILE: mm/slab.c:966:
+                                goto unlock_cache;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#557: FILE: mm/slab.c:966:
+                                goto unlock_cache;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#558: FILE: mm/slab.c:967:
+                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#558: FILE: mm/slab.c:967:
+                        }$

ERROR:SPACING: space required before the open parenthesis '('
#560: FILE: mm/slab.c:969:
+			if(l3->shared) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#562: FILE: mm/slab.c:971:
+				free_block(cachep, l3->shared->entry,
+						l3->shared->avail);

ERROR:SPACING: space required before the open parenthesis '('
#567: FILE: mm/slab.c:976:
+			if(l3->alien) {

ERROR:SPACING: space required before the open parenthesis '('
#575: FILE: mm/slab.c:984:
+			if(__node_shrink(cachep, node)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#575: FILE: mm/slab.c:984:
+			if(__node_shrink(cachep, node)) {
[...]
+			else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#580: FILE: mm/slab.c:989:
+			}
+			else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#594: FILE: mm/slab.c:1011:
+static void init_list(kmem_cache_t *cachep, struct kmem_list3 *list,
+		int nodeid)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#598: FILE: mm/slab.c:1015:
+	BUG_ON((cachep->nodelists[nodeid]) != list);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*ptr)...) over kmalloc_node(sizeof(struct kmem_list3)...)
#599: FILE: mm/slab.c:1016:
+	ptr = kmalloc_node(sizeof(struct kmem_list3), GFP_KERNEL, nodeid);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#600: FILE: mm/slab.c:1017:
+	BUG_ON(!ptr);

ERROR:SPACING: space required before the open parenthesis '('
#618: FILE: mm/slab.c:1036:
+	for(i = 0; i < NUM_INIT_LISTS; i++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#676: FILE: mm/slab.c:1099:
+	sizes[INDEX_AC].cs_cachep = kmem_cache_create(names[INDEX_AC].name,
+				sizes[INDEX_AC].cs_size, ARCH_KMALLOC_MINALIGN,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#681: FILE: mm/slab.c:1104:
+		sizes[INDEX_L3].cs_cachep = kmem_cache_create(names[INDEX_L3].name,
+					 sizes[INDEX_L3].cs_size, ARCH_KMALLOC_MINALIGN,

ERROR:SPACING: space required before the open parenthesis '('
#693: FILE: mm/slab.c:1113:
+		if(!sizes->cs_cachep)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#695: FILE: mm/slab.c:1115:
+			sizes->cs_cachep = kmem_cache_create(names->name,
+				sizes->cs_size, ARCH_KMALLOC_MINALIGN,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#712: FILE: mm/slab.c:1141:
+		memcpy(ptr, ac_data(&cache_cache),
+				sizeof(struct arraycache_init));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#722: FILE: mm/slab.c:1148:
+		BUG_ON(ac_data(malloc_sizes[INDEX_AC].cs_cachep)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#725: FILE: mm/slab.c:1151:
+		memcpy(ptr, ac_data(malloc_sizes[INDEX_AC].cs_cachep),
 				sizeof(struct arraycache_init));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#735: FILE: mm/slab.c:1160:
+		init_list(&cache_cache, &initkmem_list3[CACHE_CACHE],
+				numa_node_id());

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#737: FILE: mm/slab.c:1162:
+		for (j=0; j < MAX_NUMNODES; j++) {
 		      ^

ERROR:SPACING: space required before the open parenthesis '('
#738: FILE: mm/slab.c:1163:
+			if(is_node_online(j))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#740: FILE: mm/slab.c:1165:
+				init_list(malloc_sizes[INDEX_L3].cs_cachep,
+						&initkmem_list3[SIZE_L3+j], j);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#740: FILE: mm/slab.c:1165:
+						&initkmem_list3[SIZE_L3+j], j);
 						                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#744: FILE: mm/slab.c:1169:
+			init_list(malloc_sizes[INDEX_AC].cs_cachep,
+					&initkmem_list3[SIZE_AC],

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#767: FILE: mm/slab.c:1487:
+/* For setting up all the kmem_list3s for cache whose objsize is same
+   as size of kmem_list3. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#767: FILE: mm/slab.c:1487:
+   as size of kmem_list3. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#771: FILE: mm/slab.c:1491:
+	int i;
+	for(i = 0; i < MAX_NUMNODES; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#771: FILE: mm/slab.c:1491:
+	for(i = 0; i < MAX_NUMNODES; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#772: FILE: mm/slab.c:1492:
+		if(is_node_online(i)) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#773: FILE: mm/slab.c:1493:
+			cachep->nodelists[i] = &initkmem_list3[SIZE_L3+i];
 			                                              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#776: FILE: mm/slab.c:1496:
+				((unsigned long)cachep)%REAPTIMEOUT_LIST3;
 				                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#821: FILE: mm/slab.c:1793:
+				kmalloc(sizeof(struct arraycache_init),
+						GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#835: FILE: mm/slab.c:1807:
+			((unsigned long)cachep)%REAPTIMEOUT_LIST3;
 			                       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#838: FILE: mm/slab.c:1810:
+		BUG_ON(!cachep->nodelists[numa_node_id()]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#859: FILE: mm/slab.c:1880:
+	BUG_ON(spin_trylock(&list3_data(cachep)->list_lock));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#867: FILE: mm/slab.c:1888:
+	BUG_ON(spin_trylock(&(cachep->nodelists[node])->list_lock));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cachep->nodelists[node]
#867: FILE: mm/slab.c:1888:
+	BUG_ON(spin_trylock(&(cachep->nodelists[node])->list_lock));

ERROR:SPACING: space required before the open parenthesis '('
#875: FILE: mm/slab.c:1896:
+#define check_spinlock_acquired_node(x, y) do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#911: FILE: mm/slab.c:1941:
+	for(i = 0; i < MAX_NUMNODES; i++)  {

ERROR:SPACING: space required before the open parenthesis '('
#918: FILE: mm/slab.c:1948:
+			if(l3->alien)

ERROR:SPACING: space required before the open parenthesis '('
#1009: FILE: mm/slab.c:2076:
+	for(i = 0; i < MAX_NUMNODES; i++) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1010: FILE: mm/slab.c:2077:
+		if ((l3 = cachep->nodelists[i])) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around l3->slabs_free
#1069: FILE: mm/slab.c:2271:
+	list_add_tail(&slabp->list, &(l3->slabs_free));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1092: FILE: mm/slab.c:2424:
+	BUG_ON(ac->avail > 0 || !l3);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1105: FILE: mm/slab.c:2435:
+			memcpy(ac->entry,
+				&(shared_array->entry[shared_array->avail]),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around shared_array->entry[shared_array->avail]
#1105: FILE: mm/slab.c:2435:
+				&(shared_array->entry[shared_array->avail]),

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1106: FILE: mm/slab.c:2436:
+				sizeof(void*)*batchcount);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1106: FILE: mm/slab.c:2436:
+				sizeof(void*)*batchcount);
 				             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1116: FILE: mm/slab.c:2464:
+				slabp->free*cachep->objsize;
 				           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1168: FILE: mm/slab.c:2599:
+ ^Istruct slab *slabp;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1168: FILE: mm/slab.c:2599:
+ ^Istruct slab *slabp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1168: FILE: mm/slab.c:2599:
+ ^Istruct slab *slabp;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1169: FILE: mm/slab.c:2600:
+ ^Istruct kmem_list3 *l3;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1169: FILE: mm/slab.c:2600:
+ ^Istruct kmem_list3 *l3;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1169: FILE: mm/slab.c:2600:
+ ^Istruct kmem_list3 *l3;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1170: FILE: mm/slab.c:2601:
+ ^Ivoid *obj;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1170: FILE: mm/slab.c:2601:
+ ^Ivoid *obj;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1170: FILE: mm/slab.c:2601:
+ ^Ivoid *obj;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1171: FILE: mm/slab.c:2602:
+ ^Ikmem_bufctl_t next;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1171: FILE: mm/slab.c:2602:
+ ^Ikmem_bufctl_t next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1171: FILE: mm/slab.c:2602:
+ ^Ikmem_bufctl_t next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1172: FILE: mm/slab.c:2603:
+ ^Iint x;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1172: FILE: mm/slab.c:2603:
+ ^Iint x;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1172: FILE: mm/slab.c:2603:
+ ^Iint x;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1174: FILE: mm/slab.c:2605:
+ ^Il3 = cachep->nodelists[nodeid];$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1174: FILE: mm/slab.c:2605:
+ ^Il3 = cachep->nodelists[nodeid];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1174: FILE: mm/slab.c:2605:
+ ^Il3 = cachep->nodelists[nodeid];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1175: FILE: mm/slab.c:2606:
+ ^IBUG_ON(!l3);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1175: FILE: mm/slab.c:2606:
+ ^IBUG_ON(!l3);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1175: FILE: mm/slab.c:2606:
+ ^IBUG_ON(!l3);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1175: FILE: mm/slab.c:2606:
+ 	BUG_ON(!l3);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1178: FILE: mm/slab.c:2609:
+ ^Ispin_lock(&l3->list_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1178: FILE: mm/slab.c:2609:
+ ^Ispin_lock(&l3->list_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1178: FILE: mm/slab.c:2609:
+ ^Ispin_lock(&l3->list_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1179: FILE: mm/slab.c:2610:
+ ^Ientry = l3->slabs_partial.next;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1179: FILE: mm/slab.c:2610:
+ ^Ientry = l3->slabs_partial.next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1179: FILE: mm/slab.c:2610:
+ ^Ientry = l3->slabs_partial.next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1180: FILE: mm/slab.c:2611:
+ ^Iif (entry == &l3->slabs_partial) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1180: FILE: mm/slab.c:2611:
+ ^Iif (entry == &l3->slabs_partial) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1180: FILE: mm/slab.c:2611:
+ ^Iif (entry == &l3->slabs_partial) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1181: FILE: mm/slab.c:2612:
+ ^I^Il3->free_touched = 1;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1181: FILE: mm/slab.c:2612:
+ ^I^Il3->free_touched = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1181: FILE: mm/slab.c:2612:
+ ^I^Il3->free_touched = 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1182: FILE: mm/slab.c:2613:
+ ^I^Ientry = l3->slabs_free.next;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1182: FILE: mm/slab.c:2613:
+ ^I^Ientry = l3->slabs_free.next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1182: FILE: mm/slab.c:2613:
+ ^I^Ientry = l3->slabs_free.next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1183: FILE: mm/slab.c:2614:
+ ^I^Iif (entry == &l3->slabs_free)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1183: FILE: mm/slab.c:2614:
+ ^I^Iif (entry == &l3->slabs_free)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1183: FILE: mm/slab.c:2614:
+ ^I^Iif (entry == &l3->slabs_free)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1184: FILE: mm/slab.c:2615:
+ ^I^I^Igoto must_grow;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1184: FILE: mm/slab.c:2615:
+ ^I^I^Igoto must_grow;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1184: FILE: mm/slab.c:2615:
+ ^I^I^Igoto must_grow;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1185: FILE: mm/slab.c:2616:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1185: FILE: mm/slab.c:2616:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1185: FILE: mm/slab.c:2616:
+ ^I}$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1187: FILE: mm/slab.c:2618:
+ ^Islabp = list_entry(entry, struct slab, list);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1187: FILE: mm/slab.c:2618:
+ ^Islabp = list_entry(entry, struct slab, list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1187: FILE: mm/slab.c:2618:
+ ^Islabp = list_entry(entry, struct slab, list);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1188: FILE: mm/slab.c:2619:
+ ^Icheck_spinlock_acquired_node(cachep, nodeid);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1188: FILE: mm/slab.c:2619:
+ ^Icheck_spinlock_acquired_node(cachep, nodeid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1188: FILE: mm/slab.c:2619:
+ ^Icheck_spinlock_acquired_node(cachep, nodeid);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1189: FILE: mm/slab.c:2620:
+ ^Icheck_slabp(cachep, slabp);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1189: FILE: mm/slab.c:2620:
+ ^Icheck_slabp(cachep, slabp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1189: FILE: mm/slab.c:2620:
+ ^Icheck_slabp(cachep, slabp);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1191: FILE: mm/slab.c:2622:
+ ^ISTATS_INC_NODEALLOCS(cachep);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1191: FILE: mm/slab.c:2622:
+ ^ISTATS_INC_NODEALLOCS(cachep);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1191: FILE: mm/slab.c:2622:
+ ^ISTATS_INC_NODEALLOCS(cachep);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1192: FILE: mm/slab.c:2623:
+ ^ISTATS_INC_ACTIVE(cachep);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1192: FILE: mm/slab.c:2623:
+ ^ISTATS_INC_ACTIVE(cachep);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1192: FILE: mm/slab.c:2623:
+ ^ISTATS_INC_ACTIVE(cachep);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1193: FILE: mm/slab.c:2624:
+ ^ISTATS_SET_HIGH(cachep);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1193: FILE: mm/slab.c:2624:
+ ^ISTATS_SET_HIGH(cachep);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1193: FILE: mm/slab.c:2624:
+ ^ISTATS_SET_HIGH(cachep);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1195: FILE: mm/slab.c:2626:
+ ^IBUG_ON(slabp->inuse == cachep->num);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1195: FILE: mm/slab.c:2626:
+ ^IBUG_ON(slabp->inuse == cachep->num);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1195: FILE: mm/slab.c:2626:
+ ^IBUG_ON(slabp->inuse == cachep->num);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1195: FILE: mm/slab.c:2626:
+ 	BUG_ON(slabp->inuse == cachep->num);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1197: FILE: mm/slab.c:2628:
+ ^I/* get obj pointer */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1197: FILE: mm/slab.c:2628:
+ ^I/* get obj pointer */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1197: FILE: mm/slab.c:2628:
+ ^I/* get obj pointer */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1198: FILE: mm/slab.c:2629:
+ ^Iobj =  slabp->s_mem + slabp->free*cachep->objsize;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1198: FILE: mm/slab.c:2629:
+ ^Iobj =  slabp->s_mem + slabp->free*cachep->objsize;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1198: FILE: mm/slab.c:2629:
+ ^Iobj =  slabp->s_mem + slabp->free*cachep->objsize;$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1198: FILE: mm/slab.c:2629:
+ 	obj =  slabp->s_mem + slabp->free*cachep->objsize;
  	                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1199: FILE: mm/slab.c:2630:
+ ^Islabp->inuse++;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1199: FILE: mm/slab.c:2630:
+ ^Islabp->inuse++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1199: FILE: mm/slab.c:2630:
+ ^Islabp->inuse++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1200: FILE: mm/slab.c:2631:
+ ^Inext = slab_bufctl(slabp)[slabp->free];$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1200: FILE: mm/slab.c:2631:
+ ^Inext = slab_bufctl(slabp)[slabp->free];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1200: FILE: mm/slab.c:2631:
+ ^Inext = slab_bufctl(slabp)[slabp->free];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1202: FILE: mm/slab.c:2633:
+ ^Islab_bufctl(slabp)[slabp->free] = BUFCTL_ALLOC;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1202: FILE: mm/slab.c:2633:
+ ^Islab_bufctl(slabp)[slabp->free] = BUFCTL_ALLOC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1202: FILE: mm/slab.c:2633:
+ ^Islab_bufctl(slabp)[slabp->free] = BUFCTL_ALLOC;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1204: FILE: mm/slab.c:2635:
+ ^Islabp->free = next;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1204: FILE: mm/slab.c:2635:
+ ^Islabp->free = next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1204: FILE: mm/slab.c:2635:
+ ^Islabp->free = next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1205: FILE: mm/slab.c:2636:
+ ^Icheck_slabp(cachep, slabp);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1205: FILE: mm/slab.c:2636:
+ ^Icheck_slabp(cachep, slabp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1205: FILE: mm/slab.c:2636:
+ ^Icheck_slabp(cachep, slabp);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1206: FILE: mm/slab.c:2637:
+ ^Il3->free_objects--;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1206: FILE: mm/slab.c:2637:
+ ^Il3->free_objects--;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1206: FILE: mm/slab.c:2637:
+ ^Il3->free_objects--;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1207: FILE: mm/slab.c:2638:
+ ^I/* move slabp to correct slabp list: */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1207: FILE: mm/slab.c:2638:
+ ^I/* move slabp to correct slabp list: */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1207: FILE: mm/slab.c:2638:
+ ^I/* move slabp to correct slabp list: */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1208: FILE: mm/slab.c:2639:
+ ^Ilist_del(&slabp->list);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1208: FILE: mm/slab.c:2639:
+ ^Ilist_del(&slabp->list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1208: FILE: mm/slab.c:2639:
+ ^Ilist_del(&slabp->list);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1210: FILE: mm/slab.c:2641:
+ ^Iif (slabp->free == BUFCTL_END) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1210: FILE: mm/slab.c:2641:
+ ^Iif (slabp->free == BUFCTL_END) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1210: FILE: mm/slab.c:2641:
+ ^Iif (slabp->free == BUFCTL_END) {$

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1210: FILE: mm/slab.c:2641:
+ 	if (slabp->free == BUFCTL_END) {
[...]
+ 	} else {
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#1211: FILE: mm/slab.c:2642:
+ ^I^Ilist_add(&slabp->list, &l3->slabs_full);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1211: FILE: mm/slab.c:2642:
+ ^I^Ilist_add(&slabp->list, &l3->slabs_full);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1211: FILE: mm/slab.c:2642:
+ ^I^Ilist_add(&slabp->list, &l3->slabs_full);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1212: FILE: mm/slab.c:2643:
+ ^I} else {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1212: FILE: mm/slab.c:2643:
+ ^I} else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1212: FILE: mm/slab.c:2643:
+ ^I} else {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1213: FILE: mm/slab.c:2644:
+ ^I^Ilist_add(&slabp->list, &l3->slabs_partial);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1213: FILE: mm/slab.c:2644:
+ ^I^Ilist_add(&slabp->list, &l3->slabs_partial);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1213: FILE: mm/slab.c:2644:
+ ^I^Ilist_add(&slabp->list, &l3->slabs_partial);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1214: FILE: mm/slab.c:2645:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1214: FILE: mm/slab.c:2645:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1214: FILE: mm/slab.c:2645:
+ ^I}$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1216: FILE: mm/slab.c:2647:
+ ^Ispin_unlock(&l3->list_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1216: FILE: mm/slab.c:2647:
+ ^Ispin_unlock(&l3->list_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1216: FILE: mm/slab.c:2647:
+ ^Ispin_unlock(&l3->list_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1217: FILE: mm/slab.c:2648:
+ ^Igoto done;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1217: FILE: mm/slab.c:2648:
+ ^Igoto done;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1217: FILE: mm/slab.c:2648:
+ ^Igoto done;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1220: FILE: mm/slab.c:2651:
+ ^Ispin_unlock(&l3->list_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1220: FILE: mm/slab.c:2651:
+ ^Ispin_unlock(&l3->list_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1220: FILE: mm/slab.c:2651:
+ ^Ispin_unlock(&l3->list_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1221: FILE: mm/slab.c:2652:
+ ^Ix = cache_grow(cachep, flags, nodeid);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1221: FILE: mm/slab.c:2652:
+ ^Ix = cache_grow(cachep, flags, nodeid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1221: FILE: mm/slab.c:2652:
+ ^Ix = cache_grow(cachep, flags, nodeid);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1223: FILE: mm/slab.c:2654:
+ ^Iif (!x)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1223: FILE: mm/slab.c:2654:
+ ^Iif (!x)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1223: FILE: mm/slab.c:2654:
+ ^Iif (!x)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1224: FILE: mm/slab.c:2655:
+ ^I^Ireturn NULL;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1224: FILE: mm/slab.c:2655:
+ ^I^Ireturn NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1224: FILE: mm/slab.c:2655:
+ ^I^Ireturn NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1226: FILE: mm/slab.c:2657:
+ ^Igoto retry;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1226: FILE: mm/slab.c:2657:
+ ^Igoto retry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1226: FILE: mm/slab.c:2657:
+ ^Igoto retry;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1228: FILE: mm/slab.c:2659:
+ ^Ireturn obj;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1228: FILE: mm/slab.c:2659:
+ ^Ireturn obj;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1228: FILE: mm/slab.c:2659:
+ ^Ireturn obj;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1261: FILE: mm/slab.c:2687:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around shared_array->entry[shared_array->avail]
#1319: FILE: mm/slab.c:2738:
+			memcpy(&(shared_array->entry[shared_array->avail]),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1320: FILE: mm/slab.c:2739:
+			memcpy(&(shared_array->entry[shared_array->avail]),
+					ac->entry,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around l3->slabs_free
#1338: FILE: mm/slab.c:2754:
+		while (p != &(l3->slabs_free)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ac->entry[batchcount]
#1350: FILE: mm/slab.c:2768:
+	memmove(ac->entry, &(ac->entry[batchcount]),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1351: FILE: mm/slab.c:2769:
+	memmove(ac->entry, &(ac->entry[batchcount]),
 			sizeof(void*)*ac->avail);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1354: FILE: mm/slab.c:2772:
 
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1368: FILE: mm/slab.c:2793:
+		struct slab *slabp;
+		slabp = GET_PAGE_SLAB(virt_to_page(objp));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1380: FILE: mm/slab.c:2805:
+					__drain_alien_cache(cachep,
+							alien, nodeid);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1384: FILE: mm/slab.c:2809:
+			}
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#1384: FILE: mm/slab.c:2809:
+			else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cachep->nodelists[nodeid]
#1385: FILE: mm/slab.c:2810:
+				spin_lock(&(cachep->nodelists[nodeid])->

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cachep->nodelists[nodeid]
#1388: FILE: mm/slab.c:2813:
+				spin_unlock(&(cachep->nodelists[nodeid])->

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1510: FILE: mm/slab.c:3149:
+	for( i=0; i<MAX_NUMNODES; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1510: FILE: mm/slab.c:3149:
+	for( i=0; i<MAX_NUMNODES; i++) {
 	           ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1510: FILE: mm/slab.c:3149:
+	for( i=0; i<MAX_NUMNODES; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#1510: FILE: mm/slab.c:3149:
+	for( i=0; i<MAX_NUMNODES; i++) {

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1515: FILE: mm/slab.c:3154:
+		list_for_each(q,&l3->slabs_full) {
 		               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1515: FILE: mm/slab.c:3154:
+		list_for_each(q,&l3->slabs_full) {
 		                ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1522: FILE: mm/slab.c:3158:
+				printk(KERN_INFO "slab %s: wrong slabp found in full slab chain at %p (%d/%d).\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1523: FILE: mm/slab.c:3159:
+				printk(KERN_INFO "slab %s: wrong slabp found in full slab chain at %p (%d/%d).\n",
+						cachep->name, slabp, slabp->inuse, cachep->num);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1533: FILE: mm/slab.c:3164:
+		list_for_each(q,&l3->slabs_partial) {
 		               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1533: FILE: mm/slab.c:3164:
+		list_for_each(q,&l3->slabs_partial) {
 		                ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1540: FILE: mm/slab.c:3168:
+				printk(KERN_INFO "slab %s: wrong slab found in partial chain at %p (%d/%d).\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1541: FILE: mm/slab.c:3169:
+				printk(KERN_INFO "slab %s: wrong slab found in partial chain at %p (%d/%d).\n",
+						cachep->name, slabp, slabp->inuse, cachep->num);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1551: FILE: mm/slab.c:3174:
+		list_for_each(q,&l3->slabs_free) {
 		               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1551: FILE: mm/slab.c:3174:
+		list_for_each(q,&l3->slabs_free) {
 		                ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1558: FILE: mm/slab.c:3178:
+				printk(KERN_INFO "slab %s: wrong slab found in free chain at %p (%d/%d).\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1559: FILE: mm/slab.c:3179:
+				printk(KERN_INFO "slab %s: wrong slab found in free chain at %p (%d/%d).\n",
+						cachep->name, slabp, slabp->inuse, cachep->num);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1580: FILE: mm/slab.c:3198:
+	for(i=0; i < NR_CPUS; i++) {
 	     ^

ERROR:SPACING: space required before the open parenthesis '('
#1580: FILE: mm/slab.c:3198:
+	for(i=0; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1580: FILE: mm/slab.c:3198:
+	for(i=0; i < NR_CPUS; i++) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1588: FILE: mm/slab.c:3206:
+			if (!(new_alien = alloc_alien_cache(i, cachep->limit)))

CHECK:SPACING: space preferred before that '*' (ctx:VxE)
#1591: FILE: mm/slab.c:3209:
+			if (!(new = alloc_arraycache(i, (cachep->shared*
 			                                               ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1591: FILE: mm/slab.c:3209:
+			if (!(new = alloc_arraycache(i, (cachep->shared*

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1594: FILE: mm/slab.c:3212:
+			if ((l3 = cachep->nodelists[node])) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1595: FILE: mm/slab.c:3213:
+			if ((l3 = cachep->nodelists[node])) {
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1598: FILE: mm/slab.c:3216:
+				if ((nc = cachep->nodelists[node]->shared))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1600: FILE: mm/slab.c:3218:
+					free_block(cachep, nc->entry,
+							nc->avail);

CHECK:SPACING: space preferred before that '*' (ctx:VxE)
#1608: FILE: mm/slab.c:3226:
+				l3->free_limit = (1 + nr_cpus_node(node))*
 				                                         ^

CHECK:SPACING: space preferred before that '*' (ctx:VxE)
#1611: FILE: mm/slab.c:3229:
+				l3->free_limit = (1 + num_online_cpus())*
 				                                        ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1621: FILE: mm/slab.c:3239:
+			if (!(l3 = kmalloc_node(sizeof(struct kmem_list3),

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*l3)...) over kmalloc_node(sizeof(struct kmem_list3)...)
#1621: FILE: mm/slab.c:3239:
+			if (!(l3 = kmalloc_node(sizeof(struct kmem_list3),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1622: FILE: mm/slab.c:3240:
+			if (!(l3 = kmalloc_node(sizeof(struct kmem_list3),
+							GFP_KERNEL, node)))

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#1627: FILE: mm/slab.c:3245:
+				((unsigned long)cachep)%REAPTIMEOUT_LIST3;
 				                       ^

CHECK:SPACING: space preferred before that '*' (ctx:VxE)
#1631: FILE: mm/slab.c:3249:
+			l3->free_limit = (1 + nr_cpus_node(node))*
 			                                         ^

CHECK:SPACING: space preferred before that '*' (ctx:VxE)
#1634: FILE: mm/slab.c:3252:
+			l3->free_limit = (1 + num_online_cpus())*
 			                                        ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1700: FILE: mm/slab.c:3323:
+		printk(KERN_ERR "alloc_kmemlist failed for %s, error %d.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1701: FILE: mm/slab.c:3324:
+		printk(KERN_ERR "alloc_kmemlist failed for %s, error %d.\n",
+				cachep->name, -err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1702: FILE: mm/slab.c:3325:
+		BUG();

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ac->entry[tofree]
#1729: FILE: mm/slab.c:3398:
+		memmove(ac->entry, &(ac->entry[tofree]),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1730: FILE: mm/slab.c:3399:
+		memmove(ac->entry, &(ac->entry[tofree]),
 					sizeof(void*)*ac->avail);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1755: FILE: mm/slab.c:3446:
+		drain_array_locked(searchp, ac_data(searchp), 0,
+				numa_node_id());

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1775: FILE: mm/slab.c:3461:
+			drain_array_locked(searchp, l3->shared, 0,
+				numa_node_id());

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1785: FILE: mm/slab.c:3468:
+		tofree = (l3->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1785: FILE: mm/slab.c:3468:
+		tofree = (l3->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1785: FILE: mm/slab.c:3468:
+		tofree = (l3->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1785: FILE: mm/slab.c:3468:
+		tofree = (l3->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1785: FILE: mm/slab.c:3468:
+		tofree = (l3->free_limit+5*searchp->num-1)/(5*searchp->num);
 		                                             ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around l3->slabs_free
#1790: FILE: mm/slab.c:3471:
+			if (p == &(l3->slabs_free))

WARNING:SPLIT_STRING: quoted string split across lines
#1817: FILE: mm/slab.c:3523:
 		seq_puts(m, " : globalstat <listallocs> <maxobjs> <grown> <reaped>"
+				" <error> <maxfreeable> <nodeallocs> <remotefrees>");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1858: FILE: mm/slab.c:3568:
+	for( i=0; i<MAX_NUMNODES; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1858: FILE: mm/slab.c:3568:
+	for( i=0; i<MAX_NUMNODES; i++) {
 	           ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1858: FILE: mm/slab.c:3568:
+	for( i=0; i<MAX_NUMNODES; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#1858: FILE: mm/slab.c:3568:
+	for( i=0; i<MAX_NUMNODES; i++) {

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1865: FILE: mm/slab.c:3575:
+		list_for_each(q,&l3->slabs_full) {
 		               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1865: FILE: mm/slab.c:3575:
+		list_for_each(q,&l3->slabs_full) {
 		                ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1872: FILE: mm/slab.c:3582:
+		list_for_each(q,&l3->slabs_partial) {
 		               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1872: FILE: mm/slab.c:3582:
+		list_for_each(q,&l3->slabs_partial) {
 		                ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1881: FILE: mm/slab.c:3591:
+		list_for_each(q,&l3->slabs_free) {
 		               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1881: FILE: mm/slab.c:3591:
+		list_for_each(q,&l3->slabs_free) {
 		                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1908: FILE: mm/slab.c:3618:
+	seq_printf(m, " : slabdata %6lu %6lu %6lu",
+			active_slabs, num_slabs, shared_avail);

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#1923: FILE: mm/slab.c:3630:
+		seq_printf(m, " : globalstat %7lu %6lu %5lu %4lu \

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1945: FILE: mm/slab.c:3681:
+	for( node=0; node<MAX_NUMNODES; node++) {
 	         ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1945: FILE: mm/slab.c:3681:
+	for( node=0; node<MAX_NUMNODES; node++) {
 	                 ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1945: FILE: mm/slab.c:3681:
+	for( node=0; node<MAX_NUMNODES; node++) {

ERROR:SPACING: space required before the open parenthesis '('
#1945: FILE: mm/slab.c:3681:
+	for( node=0; node<MAX_NUMNODES; node++) {

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1953: FILE: mm/slab.c:3686:
+		list_for_each(q,&l3->slabs_full) {
 		               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1953: FILE: mm/slab.c:3686:
+		list_for_each(q,&l3->slabs_full) {
 		                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1956: FILE: mm/slab.c:3689:
+			int i;
+			slabp = list_entry(q, struct slab, list);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1960: FILE: mm/slab.c:3693:
+				printk("obj %p/%d: %p", slabp, i, (void *)sym);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1962: FILE: mm/slab.c:3695:
+				printk("\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000183673.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 123 errors, 132 warnings, 80 checks, 1804 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000183673.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
