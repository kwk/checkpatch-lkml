WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
> merge that with Andrea-vm then you can get ramfs fixed and accounting sorted

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#67: FILE: fs/ramfs/inode.c:48:
+static struct inode_operations ramfs_inode_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#68: FILE: fs/ramfs/inode.c:49:
+static struct inode_operations ramfs_symlink_inode_operations;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#82: FILE: fs/ramfs/inode.c:63:
+	 * arithmetic, so there's no point */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#86: FILE: fs/ramfs/inode.c:67:
+	/* It is important that at least the free counts below be
+	   signed.  free_XXX may become negative if a limit is changed

ERROR:TRAILING_WHITESPACE: trailing whitespace
#87: FILE: fs/ramfs/inode.c:68:
+^I   downwards (by a remount) below the current usage. */^I  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#87: FILE: fs/ramfs/inode.c:68:
+	   downwards (by a remount) below the current usage. */	  

ERROR:TRAILING_WHITESPACE: trailing whitespace
#96: FILE: fs/ramfs/inode.c:77:
+^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around rsb->ramfs_lock
#116: FILE: fs/ramfs/inode.c:97:
+	spin_lock(&(rsb->ramfs_lock));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around rsb->ramfs_lock
#121: FILE: fs/ramfs/inode.c:102:
+	spin_unlock(&(rsb->ramfs_lock));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#125: FILE: fs/ramfs/inode.c:106:
+ * if there are no free inodes */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#137: FILE: fs/ramfs/inode.c:118:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#145: FILE: fs/ramfs/inode.c:126:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#152: FILE: fs/ramfs/inode.c:133:
+ * if there are no free dentries */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#164: FILE: fs/ramfs/inode.c:145:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#172: FILE: fs/ramfs/inode.c:153:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#181: FILE: fs/ramfs/inode.c:162:
+ * ramfs (ie. PageDirty(page) is true)  */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#188: FILE: fs/ramfs/inode.c:169:
+^I^I$

ERROR:SPACING: space prohibited after that open parenthesis '('
#189: FILE: fs/ramfs/inode.c:170:
+	if ( (rsb->free_pages > 0) &&

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rsb->free_pages > 0'
#189: FILE: fs/ramfs/inode.c:170:
+	if ( (rsb->free_pages > 0) &&
+	     ( !rsb->max_file_pages ||
+	       (inode->i_data.nrpages <= rsb->max_file_pages) ) ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_data.nrpages <= rsb->max_file_pages'
#189: FILE: fs/ramfs/inode.c:170:
+	if ( (rsb->free_pages > 0) &&
+	     ( !rsb->max_file_pages ||
+	       (inode->i_data.nrpages <= rsb->max_file_pages) ) ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#189: FILE: fs/ramfs/inode.c:170:
+	if ( (rsb->free_pages > 0) &&
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#190: FILE: fs/ramfs/inode.c:171:
+	if ( (rsb->free_pages > 0) &&
+	     ( !rsb->max_file_pages ||

ERROR:SPACING: space prohibited after that open parenthesis '('
#190: FILE: fs/ramfs/inode.c:171:
+	     ( !rsb->max_file_pages ||

ERROR:SPACING: space prohibited before that close parenthesis ')'
#191: FILE: fs/ramfs/inode.c:172:
+	       (inode->i_data.nrpages <= rsb->max_file_pages) ) ) {

CHECK:BRACES: Unbalanced braces around else statement
#194: FILE: fs/ramfs/inode.c:175:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#196: FILE: fs/ramfs/inode.c:177:
+^I$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#207: FILE: fs/ramfs/inode.c:188:
+	freed = inode->i_blocks/IBLOCKS_PER_PAGE - inode->i_mapping->nrpages;
 	                       ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#254: FILE: fs/ramfs/inode.c:272:
+	inode->i_ctime = inode->i_mtime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#261: FILE: fs/ramfs/inode.c:278:
+	struct inode * inode;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#263: FILE: fs/ramfs/inode.c:280:
+	if (! ramfs_alloc_inode(sb))
 	    ^

CHECK:BRACES: Unbalanced braces around else statement
#287: FILE: fs/ramfs/inode.c:310:
+	} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#302: FILE: fs/ramfs/inode.c:323:
+	struct inode * inode;

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#305: FILE: fs/ramfs/inode.c:326:
+	if (! ramfs_alloc_dentry(sb))
 	    ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#331: FILE: fs/ramfs/inode.c:363:
+	if (! ramfs_alloc_dentry(sb))
 	    ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#395: FILE: fs/ramfs/inode.c:486:
+static int parse_options(char * options, struct ramfs_params *p)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#404: FILE: fs/ramfs/inode.c:495:
+	for (optname = strtok(options,","); optname;
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#405: FILE: fs/ramfs/inode.c:496:
+	     optname = strtok(NULL,",")) {
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#406: FILE: fs/ramfs/inode.c:497:
+		if ((value = strchr(optname,'=')) != NULL) {
 		                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#406: FILE: fs/ramfs/inode.c:497:
+		if ((value = strchr(optname,'=')) != NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#413: FILE: fs/ramfs/inode.c:504:
+			p->filepages = simple_strtoul(value, &value, 0)

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#418: FILE: fs/ramfs/inode.c:509:
+			p->pages = simple_strtoul(value, &value, 0)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#423: FILE: fs/ramfs/inode.c:514:
+			p->inodes = simple_strtoul(value, &value, 0);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#427: FILE: fs/ramfs/inode.c:518:
+			p->dentries = simple_strtoul(value, &value, 0);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#433: FILE: fs/ramfs/inode.c:524:
+			*(optname-1) = ',';
 			         ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#436: FILE: fs/ramfs/inode.c:527:
+/*  ^I^Iif (ret == 0) */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#437: FILE: fs/ramfs/inode.c:528:
+/*  ^I^I^Ibreak; */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#450: FILE: fs/ramfs/inode.c:541:
+	/* By default we set the limits to be:
+	       - Allow this ramfs to take up to half of all available RAM

ERROR:CODE_INDENT: code indent should use tabs where possible
#452: FILE: fs/ramfs/inode.c:543:
+^I         the total max size, obviously)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#455: FILE: fs/ramfs/inode.c:546:
+^I         are never more inodes than dentries).$

WARNING:RETURN_VOID: void function return statements are not generally useful
#479: FILE: fs/ramfs/inode.c:570:
+	return;
+}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#482: FILE: fs/ramfs/inode.c:573:
+/* reset_limits is called during a remount to change the usage limits.
+

WARNING:TYPO_SPELLING: 'suceed' may be misspelled - perhaps 'succeed'?
#483: FILE: fs/ramfs/inode.c:574:
+   This will suceed, even if the new limits are lower than current
              ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#485: FILE: fs/ramfs/inode.c:576:
+   until usage falls below the new limit */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#497: FILE: fs/ramfs/inode.c:588:
+	if (p->filepages >= 0) {
+		rsb->max_file_pages = p->filepages;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#500: FILE: fs/ramfs/inode.c:591:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#501: FILE: fs/ramfs/inode.c:592:
+	
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#519: FILE: fs/ramfs/inode.c:610:
+static int ramfs_remount(struct super_block * sb, int * flags, char * data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#519: FILE: fs/ramfs/inode.c:610:
+static int ramfs_remount(struct super_block * sb, int * flags, char * data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#519: FILE: fs/ramfs/inode.c:610:
+static int ramfs_remount(struct super_block * sb, int * flags, char * data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#522: FILE: fs/ramfs/inode.c:613:
+	struct ramfs_sb_info * rsb = RAMFS_SB(sb);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#529: FILE: fs/ramfs/inode.c:620:
+^Iprintk(KERN_DEBUG "ramfs: remounted with options: %s\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#529: FILE: fs/ramfs/inode.c:620:
+	printk(KERN_DEBUG "ramfs: remounted with options: %s\n", 

ERROR:SPACING: space prohibited before that close parenthesis ')'
#530: FILE: fs/ramfs/inode.c:621:
+	       data ? (char *)data : "<defaults>" );

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#531: FILE: fs/ramfs/inode.c:622:
+	printk(KERN_DEBUG "ramfs: max_pages=%ld max_file_pages=%ld \

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#531: FILE: fs/ramfs/inode.c:622:
+	printk(KERN_DEBUG "ramfs: max_pages=%ld max_file_pages=%ld \

CHECK:LINE_SPACING: Please don't use multiple blank lines
#544: FILE: fs/ramfs/inode.c:635:
 
+

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#545: FILE: fs/ramfs/inode.c:636:
+static struct inode_operations ramfs_inode_operations = {

WARNING:INDENTED_LABEL: labels should not be indented
#546: FILE: fs/ramfs/inode.c:637:
+	truncate:	ramfs_truncate,

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#549: FILE: fs/ramfs/inode.c:640:
+static struct inode_operations ramfs_symlink_inode_operations = {

WARNING:INDENTED_LABEL: labels should not be indented
#550: FILE: fs/ramfs/inode.c:641:
+	truncate:	ramfs_truncate,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#551: FILE: fs/ramfs/inode.c:642:
+	readlink:	page_readlink,
 	        ^

WARNING:INDENTED_LABEL: labels should not be indented
#551: FILE: fs/ramfs/inode.c:642:
+	readlink:	page_readlink,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#552: FILE: fs/ramfs/inode.c:643:
+	follow_link:	page_follow_link,
 	           ^

WARNING:INDENTED_LABEL: labels should not be indented
#552: FILE: fs/ramfs/inode.c:643:
+	follow_link:	page_follow_link,

WARNING:INDENTED_LABEL: labels should not be indented
#562: FILE: fs/ramfs/inode.c:654:
+	llseek:		generic_file_llseek,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#570: FILE: fs/ramfs/inode.c:682:
+	delete_inode:	ramfs_delete_inode,
 	            ^

WARNING:INDENTED_LABEL: labels should not be indented
#570: FILE: fs/ramfs/inode.c:682:
+	delete_inode:	ramfs_delete_inode,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#571: FILE: fs/ramfs/inode.c:683:
+	put_super:      ramfs_put_super,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#571: FILE: fs/ramfs/inode.c:683:
+	put_super:      ramfs_put_super,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#572: FILE: fs/ramfs/inode.c:684:
+	remount_fs:     ramfs_remount,
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#572: FILE: fs/ramfs/inode.c:684:
+	remount_fs:     ramfs_remount,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#579: FILE: fs/ramfs/inode.c:691:
+	struct ramfs_sb_info * rsb;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*rsb)...) over kmalloc(sizeof(struct ramfs_sb_info)...)
#588: FILE: fs/ramfs/inode.c:700:
+	rsb = kmalloc(sizeof(struct ramfs_sb_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#608: FILE: fs/ramfs/inode.c:723:
+^Iprintk(KERN_DEBUG "ramfs: mounted with options: %s\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#608: FILE: fs/ramfs/inode.c:723:
+	printk(KERN_DEBUG "ramfs: mounted with options: %s\n", 

ERROR:SPACING: space prohibited before that close parenthesis ')'
#609: FILE: fs/ramfs/inode.c:724:
+	       data ? (char *)data : "<defaults>" );

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#610: FILE: fs/ramfs/inode.c:725:
+	printk(KERN_DEBUG "ramfs: max_pages=%ld max_file_pages=%ld \

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#610: FILE: fs/ramfs/inode.c:725:
+	printk(KERN_DEBUG "ramfs: max_pages=%ld max_file_pages=%ld \

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000494616.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 38 errors, 37 warnings, 14 checks, 556 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000494616.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
