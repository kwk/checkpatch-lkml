WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
This patch introduces base compatibility interface for other ip_tables modules

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#107: FILE: include/linux/netfilter/x_tables.h:256:
+ * current task alignment */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#110: FILE: include/linux/netfilter/x_tables.h:259:
+struct compat_xt_counters
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'u_int32_t'
#111: FILE: include/linux/netfilter/x_tables.h:260:
+	u_int32_t cnt[4];

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#115: FILE: include/linux/netfilter/x_tables.h:264:
+struct compat_xt_counters_info
+{

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#121: FILE: include/linux/netfilter/x_tables.h:270:
+#define COMPAT_XT_ALIGN(s) (((s) + (__alignof__(struct compat_xt_counters)-1)) \
                                                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#122: FILE: include/linux/netfilter/x_tables.h:271:
+		& ~(__alignof__(struct compat_xt_counters)-1))
 		                                          ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#124: FILE: include/linux/netfilter/x_tables.h:273:
+extern int ipt_match_align_compat(void *match, void **dstptr,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#125: FILE: include/linux/netfilter/x_tables.h:274:
+extern int ipt_match_align_compat(void *match, void **dstptr,
+		int *size, int off, int convert);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#126: FILE: include/linux/netfilter/x_tables.h:275:
+extern int ipt_target_align_compat(void *target, void **dstptr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#127: FILE: include/linux/netfilter/x_tables.h:276:
+extern int ipt_target_align_compat(void *target, void **dstptr,
+		int *size, int off, int convert);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#152: FILE: include/linux/netfilter_ipv4/ip_tables.h:373:
+struct compat_ipt_getinfo
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#162: FILE: include/linux/netfilter_ipv4/ip_tables.h:383:
+struct compat_ipt_entry
+{

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#165: FILE: include/linux/netfilter_ipv4/ip_tables.h:386:
+	u_int16_t target_offset;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#166: FILE: include/linux/netfilter_ipv4/ip_tables.h:387:
+	u_int16_t next_offset;

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#173: FILE: include/linux/netfilter_ipv4/ip_tables.h:394:
+struct compat_ipt_entry_match
+{

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#176: FILE: include/linux/netfilter_ipv4/ip_tables.h:397:
+			u_int16_t match_size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#179: FILE: include/linux/netfilter_ipv4/ip_tables.h:400:
+		u_int16_t match_size;

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#185: FILE: include/linux/netfilter_ipv4/ip_tables.h:406:
+struct compat_ipt_entry_target
+{

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#188: FILE: include/linux/netfilter_ipv4/ip_tables.h:409:
+			u_int16_t target_size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#191: FILE: include/linux/netfilter_ipv4/ip_tables.h:412:
+		u_int16_t target_size;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#196: FILE: include/linux/netfilter_ipv4/ip_tables.h:417:
+#define COMPAT_IPT_ALIGN(s) ^ICOMPAT_XT_ALIGN(s)$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#198: FILE: include/linux/netfilter_ipv4/ip_tables.h:419:
+extern int ipt_match_align_compat(void *match, void **dstptr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#199: FILE: include/linux/netfilter_ipv4/ip_tables.h:420:
+extern int ipt_match_align_compat(void *match, void **dstptr,
+		int *size, int off, int convert);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#200: FILE: include/linux/netfilter_ipv4/ip_tables.h:421:
+extern int ipt_target_align_compat(void *target, void **dstptr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#201: FILE: include/linux/netfilter_ipv4/ip_tables.h:422:
+extern int ipt_target_align_compat(void *target, void **dstptr,
+		int *size, int off, int convert);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#371: FILE: net/ipv4/netfilter/ip_tables.c:794:
+static inline struct xt_counters * alloc_counters(struct ipt_table *table)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#426: FILE: net/ipv4/netfilter/ip_tables.c:897:
+	u_int16_t offset;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#430: FILE: net/ipv4/netfilter/ip_tables.c:901:
+static struct compat_delta *compat_offsets = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#432: FILE: net/ipv4/netfilter/ip_tables.c:903:
+static int compat_add_offset(u_int16_t offset, short delta)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*tmp)...) over kmalloc(sizeof(struct compat_delta)...)
#436: FILE: net/ipv4/netfilter/ip_tables.c:907:
+	tmp = kmalloc(sizeof(struct compat_delta), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: space required before the open parenthesis '('
#456: FILE: net/ipv4/netfilter/ip_tables.c:927:
+		for(tmp = compat_offsets; tmp; tmp = next) {

ERROR:SPACING: space required before the open parenthesis '('
#469: FILE: net/ipv4/netfilter/ip_tables.c:940:
+	for(tmp = compat_offsets, delta = 0; tmp; tmp = tmp->next)

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#476: FILE: net/ipv4/netfilter/ip_tables.c:947:
+struct compat_ipt_standard_target
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#485: FILE: net/ipv4/netfilter/ip_tables.c:956:
+struct compat_ipt_standard
+{

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#491: FILE: net/ipv4/netfilter/ip_tables.c:962:
+static int compat_ipt_standard_fn(void *target,
+		void **dstptr, int *size, int convert)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#498: FILE: net/ipv4/netfilter/ip_tables.c:969:
+	switch (convert) {
+		case COMPAT_TO_USER:
[...]
+		case COMPAT_FROM_USER:
[...]
+		case COMPAT_CALC_SIZE:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#502: FILE: net/ipv4/netfilter/ip_tables.c:973:
+			memcpy(&compat_st.target, &pst->target,
+					sizeof(struct ipt_entry_target));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#510: FILE: net/ipv4/netfilter/ip_tables.c:981:
+			if (__copy_to_user(*dstptr, &compat_st,
+				sizeof(struct compat_ipt_standard_target)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#519: FILE: net/ipv4/netfilter/ip_tables.c:990:
+			memcpy(&st.target, &pcompat_st->target,
+					sizeof(struct ipt_entry_target));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#526: FILE: net/ipv4/netfilter/ip_tables.c:997:
+			memcpy(*dstptr, &st,
+					sizeof(struct ipt_standard_target));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#541: FILE: net/ipv4/netfilter/ip_tables.c:1012:
+int ipt_target_align_compat(void *target, void **dstptr,
+		int *size, int off, int convert)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#545: FILE: net/ipv4/netfilter/ip_tables.c:1016:
+	u_int16_t tsize;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#549: FILE: net/ipv4/netfilter/ip_tables.c:1020:
+	switch (convert) {
+		case COMPAT_TO_USER:
[...]
+		case COMPAT_FROM_USER:
[...]
+		case COMPAT_CALC_SIZE:
[...]
+		default:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#584: FILE: net/ipv4/netfilter/ip_tables.c:1055:
+int ipt_match_align_compat(void *match, void **dstptr,
+		int *size, int off, int convert)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#588: FILE: net/ipv4/netfilter/ip_tables.c:1059:
+	u_int16_t msize;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#592: FILE: net/ipv4/netfilter/ip_tables.c:1063:
+	switch (convert) {
+		case COMPAT_TO_USER:
[...]
+		case COMPAT_FROM_USER:
[...]
+		case COMPAT_CALC_SIZE:
[...]
+		default:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#627: FILE: net/ipv4/netfilter/ip_tables.c:1098:
+static int icmp_compat(void *match,
+		void **dstptr, int *size, int convert)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#637: FILE: net/ipv4/netfilter/ip_tables.c:1108:
+compat_calc_match(struct ipt_entry_match *m, int * size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#645: FILE: net/ipv4/netfilter/ip_tables.c:1116:
+static int compat_calc_entry(struct ipt_entry *e, struct xt_table_info *info,
+		void *base, struct xt_table_info *newinfo)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#648: FILE: net/ipv4/netfilter/ip_tables.c:1119:
+	u_int16_t entry_offset;

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#662: FILE: net/ipv4/netfilter/ip_tables.c:1133:
+	for (i = 0; i< NF_IP_NUMHOOKS; i++) {
 	             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#674: FILE: net/ipv4/netfilter/ip_tables.c:1145:
+static int compat_table_info(struct xt_table_info *info,
+		struct xt_table_info *newinfo)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#709: FILE: net/ipv4/netfilter/ip_tables.c:1180:
+		duprintf("length %u != %u\n", *len,
+			(unsigned int)sizeof(struct ipt_getinfo));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#716: FILE: net/ipv4/netfilter/ip_tables.c:1187:
+	name[IPT_TABLE_MAXNAMELEN-1] = '\0';
 	                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#721: FILE: net/ipv4/netfilter/ip_tables.c:1192:
+	t = try_then_request_module(xt_find_table_lock(AF_INET, name),
+			"iptable_%s", name);

CHECK:BRACES: braces {} should be used on all arms of this statement
#722: FILE: net/ipv4/netfilter/ip_tables.c:1193:
+	if (t && !IS_ERR(t)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#733: FILE: net/ipv4/netfilter/ip_tables.c:1204:
+			struct xt_table_info tmp;
+			ret = compat_table_info(private, &tmp);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#736: FILE: net/ipv4/netfilter/ip_tables.c:1207:
+			memcpy(compat_info.hook_entry, tmp.hook_entry,
+					sizeof(compat_info.hook_entry));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#738: FILE: net/ipv4/netfilter/ip_tables.c:1209:
+			memcpy(compat_info.underflow, tmp.underflow,
+					sizeof(compat_info.underflow));

CHECK:BRACES: Unbalanced braces around else statement
#744: FILE: net/ipv4/netfilter/ip_tables.c:1215:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#749: FILE: net/ipv4/netfilter/ip_tables.c:1220:
+			memcpy(info.hook_entry, private->hook_entry,
+					sizeof(info.hook_entry));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#751: FILE: net/ipv4/netfilter/ip_tables.c:1222:
+			memcpy(info.underflow, private->underflow,
+					sizeof(info.underflow));

CHECK:BRACES: Unbalanced braces around else statement
#765: FILE: net/ipv4/netfilter/ip_tables.c:1236:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#785: FILE: net/ipv4/netfilter/ip_tables.c:1253:
+		duprintf("get_entries: %u < %d\n", *len,
+				(unsigned int)sizeof(get));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#792: FILE: net/ipv4/netfilter/ip_tables.c:1260:
+		duprintf("get_entries: %u != %u\n", *len,
+				(unsigned int)(sizeof(struct ipt_get_entries) +

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#820: FILE: net/ipv4/netfilter/ip_tables.c:1289:
+__do_replace(const char *name, unsigned int valid_hooks,
+		struct xt_table_info *newinfo, unsigned int num_counters,

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#937: FILE: net/ipv4/netfilter/ip_tables.c:1372:
+	if (tmp.size >= (INT_MAX - sizeof(struct xt_table_info)) / NR_CPUS -

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#964: FILE: net/ipv4/netfilter/ip_tables.c:1399:
+	ret = __do_replace(tmp.name, tmp.valid_hooks,
+			      newinfo, tmp.num_counters,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#971: FILE: net/ipv4/netfilter/ip_tables.c:1406:
+	IPT_ENTRY_ITERATE(loc_cpu_entry, newinfo->size, cleanup_entry,NULL);
 	                                                             ^

CHECK:BRACES: Unbalanced braces around else statement
#997: FILE: net/ipv4/netfilter/ip_tables.c:1454:
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#1012: FILE: net/ipv4/netfilter/ip_tables.c:1468:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1074: FILE: net/ipv4/netfilter/ip_tables.c:1532:
+static inline int compat_copy_match_to_user(struct ipt_entry_match *m,
+		void __user **dstptr, compat_uint_t *size)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1076: FILE: net/ipv4/netfilter/ip_tables.c:1534:
+	if (m->u.kernel.match->compat)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1078: FILE: net/ipv4/netfilter/ip_tables.c:1536:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1087: FILE: net/ipv4/netfilter/ip_tables.c:1545:
+static int compat_copy_entry_to_user(struct ipt_entry *e,
+		void __user **dstptr, compat_uint_t *size)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#1091: FILE: net/ipv4/netfilter/ip_tables.c:1549:
+	u_int16_t target_offset, next_offset;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1131: FILE: net/ipv4/netfilter/ip_tables.c:1589:
+compat_check_calc_match(struct ipt_entry_match *m,
+	    const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1139: FILE: net/ipv4/netfilter/ip_tables.c:1597:
+	match = try_then_request_module(xt_find_match(AF_INET, m->u.user.name,
+						   m->u.user.revision),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1143: FILE: net/ipv4/netfilter/ip_tables.c:1601:
+		duprintf("compat_check_calc_match: `%s' not found\n",
+				m->u.user.name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1157: FILE: net/ipv4/netfilter/ip_tables.c:1615:
+check_compat_entry_size_and_hooks(struct ipt_entry *e,
+			   struct xt_table_info *newinfo,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#1168: FILE: net/ipv4/netfilter/ip_tables.c:1626:
+	u_int16_t entry_offset;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1173: FILE: net/ipv4/netfilter/ip_tables.c:1631:
+	if ((unsigned long)e % __alignof__(struct compat_ipt_entry) != 0
+	    || (unsigned char *)e + sizeof(struct compat_ipt_entry) >= limit) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1194: FILE: net/ipv4/netfilter/ip_tables.c:1652:
+	ret = IPT_MATCH_ITERATE(e, compat_check_calc_match, name, &e->ip,
+			e->comefrom, &off, &j);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1200: FILE: net/ipv4/netfilter/ip_tables.c:1658:
+	target = try_then_request_module(xt_find_target(AF_INET,
+						     t->u.user.name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1237: FILE: net/ipv4/netfilter/ip_tables.c:1695:
+static inline int compat_copy_match_from_user(struct ipt_entry_match *m,
+	void **dstptr, compat_uint_t *size, const char *name,

CHECK:BRACES: braces {} should be used on all arms of this statement
#1243: FILE: net/ipv4/netfilter/ip_tables.c:1701:
+	if (m->u.kernel.match->compat)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1245: FILE: net/ipv4/netfilter/ip_tables.c:1703:
+	else {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1251: FILE: net/ipv4/netfilter/ip_tables.c:1709:
+	if (dm->u.kernel.match->checkentry
+	    && !dm->u.kernel.match->checkentry(name, ip, dm->data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1264: FILE: net/ipv4/netfilter/ip_tables.c:1722:
+static int compat_copy_entry_from_user(struct ipt_entry *e, void **dstptr,
+	unsigned int *size, const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1279: FILE: net/ipv4/netfilter/ip_tables.c:1737:
+	ret = IPT_MATCH_ITERATE(e, compat_copy_match_from_user, dstptr, size,
+			name, &de->ip, de->comefrom);

CHECK:BRACES: Unbalanced braces around else statement
#1287: FILE: net/ipv4/netfilter/ip_tables.c:1745:
+	else {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1306: FILE: net/ipv4/netfilter/ip_tables.c:1764:
+	} else if (t->u.kernel.target->checkentry
+		   && !t->u.kernel.target->checkentry(name, de, t->data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1322: FILE: net/ipv4/netfilter/ip_tables.c:1780:
+translate_compat_table(const char *name,
+		unsigned int valid_hooks,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'translate_compat_table', this function's name, in a string
#1347: FILE: net/ipv4/netfilter/ip_tables.c:1805:
+	duprintf("translate_compat_table: size %u\n", info->size);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'translate_compat_table', this function's name, in a string
#1361: FILE: net/ipv4/netfilter/ip_tables.c:1819:
+		duprintf("translate_compat_table: %u not %u entries\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1397: FILE: net/ipv4/netfilter/ip_tables.c:1855:
+	ret = IPT_ENTRY_ITERATE(entry0, total_size,
+			compat_copy_entry_from_user, &pos, &size,

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1443: FILE: net/ipv4/netfilter/ip_tables.c:1901:
+	if (tmp.size >= (INT_MAX - sizeof(struct xt_table_info)) / NR_CPUS -

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1462: FILE: net/ipv4/netfilter/ip_tables.c:1920:
+	ret = translate_compat_table(tmp.name, tmp.valid_hooks,
+			      &newinfo, &loc_cpu_entry, tmp.size,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'compat_do_replace', this function's name, in a string
#1467: FILE: net/ipv4/netfilter/ip_tables.c:1925:
+	duprintf("compat_do_replace: Translated table\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1470: FILE: net/ipv4/netfilter/ip_tables.c:1928:
+	ret = __do_replace(tmp.name, tmp.valid_hooks,
+			      newinfo, tmp.num_counters,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1477: FILE: net/ipv4/netfilter/ip_tables.c:1935:
+	IPT_ENTRY_ITERATE(loc_cpu_entry, newinfo->size, cleanup_entry,NULL);
 	                                                             ^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1484: FILE: net/ipv4/netfilter/ip_tables.c:1942:
+struct compat_ipt_get_entries
+{

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1491: FILE: net/ipv4/netfilter/ip_tables.c:1949:
+static int compat_copy_entries_to_user(unsigned int total_size,
+		     struct ipt_table *table, void __user *userptr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1514: FILE: net/ipv4/netfilter/ip_tables.c:1972:
+	ret = IPT_ENTRY_ITERATE(loc_cpu_entry, total_size,
+			compat_copy_entry_to_user, &pos, &size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1526: FILE: net/ipv4/netfilter/ip_tables.c:1984:
+		if (copy_from_user(&e, userptr + off,
+					sizeof(struct compat_ipt_entry)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1536: FILE: net/ipv4/netfilter/ip_tables.c:1994:
+			if (copy_from_user(&m, userptr + off + i,
+					sizeof(struct ipt_entry_match)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1546: FILE: net/ipv4/netfilter/ip_tables.c:2004:
+		if (copy_from_user(&t, userptr + off + e.target_offset,
+					sizeof(struct ipt_entry_target)))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1567: FILE: net/ipv4/netfilter/ip_tables.c:2025:
+
+

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'compat_get_entries', this function's name, in a string
#1569: FILE: net/ipv4/netfilter/ip_tables.c:2027:
+		duprintf("compat_get_entries: %u < %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1570: FILE: net/ipv4/netfilter/ip_tables.c:2028:
+		duprintf("compat_get_entries: %u < %u\n",
+				*len, (unsigned int)sizeof(get));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'compat_get_entries', this function's name, in a string
#1578: FILE: net/ipv4/netfilter/ip_tables.c:2036:
+		duprintf("compat_get_entries: %u != %u\n", *len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1579: FILE: net/ipv4/netfilter/ip_tables.c:2037:
+		duprintf("compat_get_entries: %u != %u\n", *len,
+			(unsigned int)(sizeof(struct compat_ipt_get_entries) +

CHECK:BRACES: braces {} should be used on all arms of this statement
#1586: FILE: net/ipv4/netfilter/ip_tables.c:2044:
+	if (t && !IS_ERR(t)) {
[...]
+	} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#1589: FILE: net/ipv4/netfilter/ip_tables.c:2047:
+		struct xt_table_info info;
+		duprintf("t->private->number = %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1594: FILE: net/ipv4/netfilter/ip_tables.c:2052:
+			ret = compat_copy_entries_to_user(private->size,
+						   t, uptr->entrytable);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'compat_get_entries', this function's name, in a string
#1596: FILE: net/ipv4/netfilter/ip_tables.c:2054:
+			duprintf("compat_get_entries: I've got %u not %u!\n",

CHECK:BRACES: Unbalanced braces around else statement
#1604: FILE: net/ipv4/netfilter/ip_tables.c:2062:
+	} else

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'compat_do_ipt_get_ctl', this function's name, in a string
#1624: FILE: net/ipv4/netfilter/ip_tables.c:2082:
+		duprintf("compat_do_ipt_get_ctl: unknown request %i\n", cmd);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd == IPT_SO_SET_REPLACE'
#1639: FILE: net/ipv4/netfilter/ip_tables.c:2098:
+	if (is_current_32bits() && (cmd == IPT_SO_SET_REPLACE))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1749: FILE: net/ipv4/netfilter/ip_tables.c:2355:
+EXPORT_SYMBOL(ipt_target_align_compat);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1761: FILE: net/netfilter/xt_tcpudp.c:271:
+static int tcp_compat(void *match,
+		void **dstptr, int *size, int convert)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1771: FILE: net/netfilter/xt_tcpudp.c:281:
+static int udp_compat(void *match,
+		void **dstptr, int *size, int convert)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000102680.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 21 warnings, 88 checks, 1707 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000102680.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
