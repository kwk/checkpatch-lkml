WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#53: FILE: include/bc/beancounter.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#54: FILE: include/bc/beancounter.h:2:
+ * include/bc/beancounter.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#88: FILE: include/bc/beancounter.h:36:
+#include <asm/atomic.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#107: FILE: include/bc/beancounter.h:55:
+	int	(*bcr_change)(struct beancounter *bc,
+			unsigned long new_bar, unsigned long new_lim);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#110: FILE: include/bc/beancounter.h:58:
+	int	(*bcr_limit_hit)(struct beancounter *bc, unsigned long val,
+			unsigned long flags);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#118: FILE: include/bc/beancounter.h:66:
+	spinlock_t		bc_lock;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#131: FILE: include/bc/beancounter.h:79:
+extern void bc_put(struct beancounter *bc);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#139: FILE: include/bc/beancounter.h:87:
+extern struct beancounter *bc_findcreate(bcid_t bcid, int bc_flags);

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#141: FILE: include/bc/beancounter.h:89:
+static inline void bc_adjust_maxheld(struct bc_resource_parm *parm)
                                                               ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#147: FILE: include/bc/beancounter.h:95:
+static inline void bc_adjust_minheld(struct bc_resource_parm *parm)
                                                               ^^^^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#153: FILE: include/bc/beancounter.h:101:
+static inline void bc_init_resource(struct bc_resource_parm *parm,
                                                              ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: include/bc/beancounter.h:102:
+static inline void bc_init_resource(struct bc_resource_parm *parm,
+		unsigned long bar, unsigned long lim)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#165: FILE: include/bc/beancounter.h:113:
+int bc_change_param(struct beancounter *bc, int res,
+		unsigned long bar, unsigned long lim);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#168: FILE: include/bc/beancounter.h:116:
+int __must_check bc_charge_locked(struct beancounter *bc, int res_id,
+		unsigned long val, int strict, unsigned long flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#170: FILE: include/bc/beancounter.h:118:
+static inline int __must_check bc_charge(struct beancounter *bc, int res_id,
+		unsigned long val, int strict)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#182: FILE: include/bc/beancounter.h:130:
+void __must_check bc_uncharge_locked(struct beancounter *bc, int res_id,
+		unsigned long val);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#184: FILE: include/bc/beancounter.h:132:
+static inline void bc_uncharge(struct beancounter *bc, int res_id,
+		unsigned long val)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#197: FILE: include/bc/beancounter.h:145:
+static inline int __must_check bc_charge_locked(struct beancounter *bc, int res,
+		unsigned long val, int strict, unsigned long flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#203: FILE: include/bc/beancounter.h:151:
+static inline int __must_check bc_charge(struct beancounter *bc, int res,
+		unsigned long val, int strict)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: include/bc/beancounter.h:157:
+static inline void bc_uncharge_locked(struct beancounter *bc, int res,
+		unsigned long val)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#214: FILE: include/bc/beancounter.h:162:
+static inline void bc_uncharge(struct beancounter *bc, int res,
+		unsigned long val)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:TRAILING_WHITESPACE: trailing whitespace
#232: FILE: include/linux/types.h:45:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#238: FILE: include/linux/types.h:51:
+ * $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#243: FILE: include/linux/types.h:56:
+typedef uid_t			bcid_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#252: FILE: include/linux/types.h:70:
+typedef __kernel_uid_t		bcid_t;

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#278: FILE: kernel/bc/beancounter.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#279: FILE: kernel/bc/beancounter.c:2:
+ * kernel/bc/beancounter.c

CHECK:BIT_MACRO: Prefer using the BIT macro
#295: FILE: kernel/bc/beancounter.c:18:
+#define BC_HASH_SIZE	(1 << BC_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#339: FILE: kernel/bc/beancounter.c:62:
+	hlist_for_each (ptr, head) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bc"
#345: FILE: kernel/bc/beancounter.c:68:
+	if (bc != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_bc"
#349: FILE: kernel/bc/beancounter.c:72:
+		if (new_bc != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_bc"
#354: FILE: kernel/bc/beancounter.c:77:
+	if (new_bc != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_bc"
#365: FILE: kernel/bc/beancounter.c:88:
+	if (new_bc == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#388: FILE: kernel/bc/beancounter.c:111:
+	if (likely(!atomic_dec_and_lock_irqsave(&bc->bc_refcount,
+				&bc_hash_lock, flags)))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#399: FILE: kernel/bc/beancounter.c:122:
+			printk(KERN_ERR "BC: Resource %s holds %lu on put\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#400: FILE: kernel/bc/beancounter.c:123:
+			printk(KERN_ERR "BC: Resource %s holds %lu on put\n",
+					bc_resources[i]->bcr_name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#408: FILE: kernel/bc/beancounter.c:131:
+int bc_charge_locked(struct beancounter *bc, int res, unsigned long val,
+		int strict, unsigned long flags)

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#410: FILE: kernel/bc/beancounter.c:133:
+	struct bc_resource_parm *parm;
 	                         ^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#413: FILE: kernel/bc/beancounter.c:136:
+	BUG_ON(val > BC_MAXVALUE);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#415: FILE: kernel/bc/beancounter.c:138:
+	parm = &bc->bc_parms[res];
 	^^^^

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#422: FILE: kernel/bc/beancounter.c:145:
+		/* fallthrough */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#428: FILE: kernel/bc/beancounter.c:151:
+			if (parm->held < parm->barrier &&
+					bc_resources[res]->bcr_barrier_hit)

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#431: FILE: kernel/bc/beancounter.c:154:
+		/* fallthrough */

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#434: FILE: kernel/bc/beancounter.c:157:
+		bc_adjust_maxheld(parm);
 		                  ^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#437: FILE: kernel/bc/beancounter.c:160:
+		BUG();

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#449: FILE: kernel/bc/beancounter.c:172:
+	struct bc_resource_parm *parm;
 	                         ^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#451: FILE: kernel/bc/beancounter.c:174:
+	BUG_ON(val > BC_MAXVALUE);

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#453: FILE: kernel/bc/beancounter.c:176:
+	parm = &bc->bc_parms[res];
 	^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#455: FILE: kernel/bc/beancounter.c:178:
+		printk(KERN_ERR "BC: Uncharging too much of %s: %lu vs %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#456: FILE: kernel/bc/beancounter.c:179:
+		printk(KERN_ERR "BC: Uncharging too much of %s: %lu vs %lu\n",
+				bc_resources[res]->bcr_name,

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#462: FILE: kernel/bc/beancounter.c:185:
+	bc_adjust_minheld(parm);
 	                  ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#466: FILE: kernel/bc/beancounter.c:189:
+int bc_change_param(struct beancounter *bc, int res,
+		unsigned long bar, unsigned long lim)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#495: FILE: kernel/bc/beancounter.c:218:
+	BUG_ON(bc_resources[res_id] != &bc_dummy_res);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#496: FILE: kernel/bc/beancounter.c:219:
+	BUG_ON(res_id >= BC_RESOURCES);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#519: FILE: kernel/bc/beancounter.c:242:
+	bc_cache = kmem_cache_create("beancounters",
+			sizeof(struct beancounter), 0,

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#524: FILE: kernel/bc/beancounter.c:247:
+__initcall(bc_init_late);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#526: FILE: kernel/bc/beancounter.c:249:
+EXPORT_SYMBOL(bc_resources);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#527: FILE: kernel/bc/beancounter.c:250:
+EXPORT_SYMBOL(init_bc);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#528: FILE: kernel/bc/beancounter.c:251:
+EXPORT_SYMBOL(bc_change_param);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#529: FILE: kernel/bc/beancounter.c:252:
+EXPORT_SYMBOL(bc_findcreate);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#530: FILE: kernel/bc/beancounter.c:253:
+EXPORT_SYMBOL(bc_put);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000019906.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 36 warnings, 27 checks, 467 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000019906.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
