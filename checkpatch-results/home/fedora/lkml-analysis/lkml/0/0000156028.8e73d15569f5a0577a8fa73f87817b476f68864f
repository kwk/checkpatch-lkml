WARNING:TYPO_SPELLING: 'identation' may be misspelled - perhaps 'indentation'?
#34: 
> Please fix identation accordingly to CodingStyle and repost, it 
             ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
> > The following is a driver I would like to see included in the base kernel.

WARNING:TYPO_SPELLING: 'controll' may be misspelled - perhaps 'control'?
#42: 
> > It allows OS controll of a device that synchronizes signaling hardware across a ATCA chassis.
                 ^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#83: FILE: drivers/char/tlclk.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#102: FILE: drivers/char/tlclk.c:20:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#103: FILE: drivers/char/tlclk.c:21:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#106: FILE: drivers/char/tlclk.c:24:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#128: FILE: drivers/char/tlclk.c:46:
+#include <asm/io.h>  /* inb/outb */

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#129: FILE: drivers/char/tlclk.c:47:
+#include <asm/uaccess.h>

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#139: FILE: drivers/char/tlclk.c:57:
+#define TLCLK_REG1 (TLCLK_BASE+1)
                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#140: FILE: drivers/char/tlclk.c:58:
+#define TLCLK_REG2 (TLCLK_BASE+2)
                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#141: FILE: drivers/char/tlclk.c:59:
+#define TLCLK_REG3 (TLCLK_BASE+3)
                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#142: FILE: drivers/char/tlclk.c:60:
+#define TLCLK_REG4 (TLCLK_BASE+4)
                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#143: FILE: drivers/char/tlclk.c:61:
+#define TLCLK_REG5 (TLCLK_BASE+5)
                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#144: FILE: drivers/char/tlclk.c:62:
+#define TLCLK_REG6 (TLCLK_BASE+6)
                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#145: FILE: drivers/char/tlclk.c:63:
+#define TLCLK_REG7 (TLCLK_BASE+7)
                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'port' - possible side-effects?
#147: FILE: drivers/char/tlclk.c:65:
+#define SET_PORT_BITS(port, mask, val) outb(((inb(port) & mask) | val), port)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mask' may be better as '(mask)' to avoid precedence issues
#147: FILE: drivers/char/tlclk.c:65:
+#define SET_PORT_BITS(port, mask, val) outb(((inb(port) & mask) | val), port)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'val' may be better as '(val)' to avoid precedence issues
#147: FILE: drivers/char/tlclk.c:65:
+#define SET_PORT_BITS(port, mask, val) outb(((inb(port) & mask) | val), port)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#153: FILE: drivers/char/tlclk.c:71:
+uncomment to include classic IOCTL's $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#153: FILE: drivers/char/tlclk.c:71:
+/*
+uncomment to include classic IOCTL's 

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'Uppon' may be misspelled - perhaps 'Upon'?
#158: FILE: drivers/char/tlclk.c:76:
+Uppon loading the driver will create a sysfs directory under class/misc/tlclk.
 ^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#158: FILE: drivers/char/tlclk.c:76:
+/* sysFS interface definition:
+Uppon loading the driver will create a sysfs directory under class/misc/tlclk.

WARNING:TYPO_SPELLING: 'opperation' may be misspelled - perhaps 'operation'?
#160: FILE: drivers/char/tlclk.c:78:
+This directory exports the following interfaces.  There opperation is documented 
                                                         ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#160: FILE: drivers/char/tlclk.c:78:
+This directory exports the following interfaces.  There opperation is documented $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#176: FILE: drivers/char/tlclk.c:94:
+reset    : $

WARNING:TYPO_SPELLING: 'interaces' may be misspelled - perhaps 'interfaces'?
#183: FILE: drivers/char/tlclk.c:101:
+All sysfs interaces are integers in hex format, i.e echo 99 > refalign
           ^^^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#189: FILE: drivers/char/tlclk.c:107:
+#define debug_printk( args... ) printk( args)

ERROR:SPACING: space prohibited after that open parenthesis '('
#189: FILE: drivers/char/tlclk.c:107:
+#define debug_printk( args... ) printk( args)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#189: FILE: drivers/char/tlclk.c:107:
+#define debug_printk( args... ) printk( args)

ERROR:SPACING: space prohibited after that open parenthesis '('
#191: FILE: drivers/char/tlclk.c:109:
+#define debug_printk( args... )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#191: FILE: drivers/char/tlclk.c:109:
+#define debug_printk( args... )

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#209: FILE: drivers/char/tlclk.c:127:
+irqreturn_t tlclk_interrupt(int irq, void *dev_id, struct pt_regs *regs);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#216: FILE: drivers/char/tlclk.c:134:
+     struct file *filp, unsigned int cmd, unsigned long arg)
                   ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#216: FILE: drivers/char/tlclk.c:134:
+tlclk_ioctl(struct inode *inode,
+     struct file *filp, unsigned int cmd, unsigned long arg)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: drivers/char/tlclk.c:134:
+     struct file *filp, unsigned int cmd, unsigned long arg)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: drivers/char/tlclk.c:136:
+ unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: drivers/char/tlclk.c:137:
+ unsigned char val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: drivers/char/tlclk.c:138:
+ int ret_val = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: drivers/char/tlclk.c:140:
+ val = (unsigned char)arg;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: drivers/char/tlclk.c:141:
+ if (_IOC_TYPE(cmd) != TLCLK_IOC_MAGIC)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#223: FILE: drivers/char/tlclk.c:141:
+ if (_IOC_TYPE(cmd) != TLCLK_IOC_MAGIC)
+  return -ENOTTY;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: drivers/char/tlclk.c:142:
+  return -ENOTTY;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: drivers/char/tlclk.c:144:
+ if (_IOC_NR(cmd) > TLCLK_IOC_MAXNR)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#226: FILE: drivers/char/tlclk.c:144:
+ if (_IOC_NR(cmd) > TLCLK_IOC_MAXNR)
+  return -ENOTTY;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: drivers/char/tlclk.c:145:
+  return -ENOTTY;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: drivers/char/tlclk.c:147:
+ spin_lock_irqsave(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: drivers/char/tlclk.c:148:
+ switch (cmd) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: drivers/char/tlclk.c:149:
+ case IOCTL_RESET:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: drivers/char/tlclk.c:150:
+  SET_PORT_BITS(TLCLK_REG4, 0xfd, val);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: drivers/char/tlclk.c:151:
+  break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#234: FILE: drivers/char/tlclk.c:152:
+ case IOCTL_MODE_SELECT:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#235: FILE: drivers/char/tlclk.c:153:
+  SET_PORT_BITS(TLCLK_REG0, 0xcf, val);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: drivers/char/tlclk.c:154:
+  break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: drivers/char/tlclk.c:155:
+ case IOCTL_REFALIGN:$

WARNING:TYPO_SPELLING: 'transistion' may be misspelled - perhaps 'transition'?
#238: FILE: drivers/char/tlclk.c:156:
+  /* GENERATING 0 to 1 transistion */
                        ^^^^^^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: drivers/char/tlclk.c:157:
+  SET_PORT_BITS(TLCLK_REG0, 0xf7, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: drivers/char/tlclk.c:158:
+  udelay(2);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: drivers/char/tlclk.c:159:
+  SET_PORT_BITS(TLCLK_REG0, 0xf7, 0x08);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: drivers/char/tlclk.c:160:
+  udelay(2);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#243: FILE: drivers/char/tlclk.c:161:
+  SET_PORT_BITS(TLCLK_REG0, 0xf7, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#244: FILE: drivers/char/tlclk.c:162:
+  break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#245: FILE: drivers/char/tlclk.c:163:
+ case IOCTL_HARDWARE_SWITCHING:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: drivers/char/tlclk.c:164:
+  SET_PORT_BITS(TLCLK_REG0, 0x7f, val);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: drivers/char/tlclk.c:165:
+  break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: drivers/char/tlclk.c:166:
+ case IOCTL_HARDWARE_SWITCHING_MODE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: drivers/char/tlclk.c:167:
+  SET_PORT_BITS(TLCLK_REG0, 0xbf, val);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: drivers/char/tlclk.c:168:
+  break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: drivers/char/tlclk.c:169:
+ case IOCTL_FILTER_SELECT:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#252: FILE: drivers/char/tlclk.c:170:
+  SET_PORT_BITS(TLCLK_REG0, 0xfb, val);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#253: FILE: drivers/char/tlclk.c:171:
+  break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: drivers/char/tlclk.c:172:
+ case IOCTL_SELECT_REF_FREQUENCY:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: drivers/char/tlclk.c:173:
+  SET_PORT_BITS(TLCLK_REG1, 0xfd, val);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#256: FILE: drivers/char/tlclk.c:174:
+  break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#257: FILE: drivers/char/tlclk.c:175:
+ case IOCTL_SELECT_REDUNDANT_CLOCK:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: drivers/char/tlclk.c:176:
+  SET_PORT_BITS(TLCLK_REG1, 0xfe, val);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: drivers/char/tlclk.c:177:
+  break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#260: FILE: drivers/char/tlclk.c:178:
+ case IOCTL_SELECT_AMCB1_TRANSMIT_CLOCK:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: drivers/char/tlclk.c:179:
+  if ((val == CLK_8kHz) || (val == CLK_16_384MHz)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#261: FILE: drivers/char/tlclk.c:179:
+  if ((val == CLK_8kHz) || (val == CLK_16_384MHz)) {
+   SET_PORT_BITS(TLCLK_REG3, 0xf8, 0x5);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val == CLK_8kHz'
#261: FILE: drivers/char/tlclk.c:179:
+  if ((val == CLK_8kHz) || (val == CLK_16_384MHz)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val == CLK_16_384MHz'
#261: FILE: drivers/char/tlclk.c:179:
+  if ((val == CLK_8kHz) || (val == CLK_16_384MHz)) {

CHECK:CAMELCASE: Avoid CamelCase: <CLK_8kHz>
#261: FILE: drivers/char/tlclk.c:179:
+  if ((val == CLK_8kHz) || (val == CLK_16_384MHz)) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <CLK_16_384MHz>
#261: FILE: drivers/char/tlclk.c:179:
+  if ((val == CLK_8kHz) || (val == CLK_16_384MHz)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#261: FILE: drivers/char/tlclk.c:179:
+  if ((val == CLK_8kHz) || (val == CLK_16_384MHz)) {
[...]
+  } else if (val >= CLK_8_592MHz) {
[...]
+  } else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#262: FILE: drivers/char/tlclk.c:180:
+   SET_PORT_BITS(TLCLK_REG3, 0xf8, 0x5);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: drivers/char/tlclk.c:181:
+   SET_PORT_BITS(TLCLK_REG1, 0xfb, ~val);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#264: FILE: drivers/char/tlclk.c:182:
+  } else if (val >= CLK_8_592MHz) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#264: FILE: drivers/char/tlclk.c:182:
+  } else if (val >= CLK_8_592MHz) {
+   SET_PORT_BITS(TLCLK_REG3, 0xf8, 0x7);

CHECK:CAMELCASE: Avoid CamelCase: <CLK_8_592MHz>
#264: FILE: drivers/char/tlclk.c:182:
+  } else if (val >= CLK_8_592MHz) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: drivers/char/tlclk.c:183:
+   SET_PORT_BITS(TLCLK_REG3, 0xf8, 0x7);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#266: FILE: drivers/char/tlclk.c:184:
+   switch (val) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: drivers/char/tlclk.c:185:
+   case CLK_8_592MHz:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: drivers/char/tlclk.c:186:
+    SET_PORT_BITS(TLCLK_REG0, 0xfc, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: drivers/char/tlclk.c:187:
+    break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: drivers/char/tlclk.c:188:
+   case CLK_11_184MHz:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#271: FILE: drivers/char/tlclk.c:189:
+    SET_PORT_BITS(TLCLK_REG0, 0xfc, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#272: FILE: drivers/char/tlclk.c:190:
+    break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#273: FILE: drivers/char/tlclk.c:191:
+   case CLK_34_368MHz:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#274: FILE: drivers/char/tlclk.c:192:
+    SET_PORT_BITS(TLCLK_REG0, 0xfc, 3);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: drivers/char/tlclk.c:193:
+    break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#276: FILE: drivers/char/tlclk.c:194:
+   case CLK_44_736MHz:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#277: FILE: drivers/char/tlclk.c:195:
+    SET_PORT_BITS(TLCLK_REG0, 0xfc, 2);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: drivers/char/tlclk.c:196:
+    break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: drivers/char/tlclk.c:197:
+   }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: drivers/char/tlclk.c:198:
+  } else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#280: FILE: drivers/char/tlclk.c:198:
+  } else
+   SET_PORT_BITS(TLCLK_REG3, 0xf8, val);

CHECK:BRACES: Unbalanced braces around else statement
#280: FILE: drivers/char/tlclk.c:198:
+  } else

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#281: FILE: drivers/char/tlclk.c:199:
+   SET_PORT_BITS(TLCLK_REG3, 0xf8, val);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#282: FILE: drivers/char/tlclk.c:200:
+  break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: drivers/char/tlclk.c:201:
+ case IOCTL_SELECT_AMCB2_TRANSMIT_CLOCK:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#284: FILE: drivers/char/tlclk.c:202:
+  if ((val == CLK_8kHz) || (val == CLK_16_384MHz)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#284: FILE: drivers/char/tlclk.c:202:
+  if ((val == CLK_8kHz) || (val == CLK_16_384MHz)) {
+   SET_PORT_BITS(TLCLK_REG3, 0xc7, 0x28);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val == CLK_8kHz'
#284: FILE: drivers/char/tlclk.c:202:
+  if ((val == CLK_8kHz) || (val == CLK_16_384MHz)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val == CLK_16_384MHz'
#284: FILE: drivers/char/tlclk.c:202:
+  if ((val == CLK_8kHz) || (val == CLK_16_384MHz)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#284: FILE: drivers/char/tlclk.c:202:
+  if ((val == CLK_8kHz) || (val == CLK_16_384MHz)) {
[...]
+  } else if (val >= CLK_8_592MHz) {
[...]
+  } else
[...]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: drivers/char/tlclk.c:203:
+   SET_PORT_BITS(TLCLK_REG3, 0xc7, 0x28);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: drivers/char/tlclk.c:204:
+   SET_PORT_BITS(TLCLK_REG1, 0xfb, ~val);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: drivers/char/tlclk.c:205:
+  } else if (val >= CLK_8_592MHz) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#287: FILE: drivers/char/tlclk.c:205:
+  } else if (val >= CLK_8_592MHz) {
+   SET_PORT_BITS(TLCLK_REG3, 0xc7, 0x38);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: drivers/char/tlclk.c:206:
+   SET_PORT_BITS(TLCLK_REG3, 0xc7, 0x38);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#289: FILE: drivers/char/tlclk.c:207:
+   switch (val) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: drivers/char/tlclk.c:208:
+   case CLK_8_592MHz:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: drivers/char/tlclk.c:209:
+    SET_PORT_BITS(TLCLK_REG0, 0xfc, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: drivers/char/tlclk.c:210:
+    break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#293: FILE: drivers/char/tlclk.c:211:
+   case CLK_11_184MHz:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#294: FILE: drivers/char/tlclk.c:212:
+    SET_PORT_BITS(TLCLK_REG0, 0xfc, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: drivers/char/tlclk.c:213:
+    break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: drivers/char/tlclk.c:214:
+   case CLK_34_368MHz:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#297: FILE: drivers/char/tlclk.c:215:
+    SET_PORT_BITS(TLCLK_REG0, 0xfc, 3);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#298: FILE: drivers/char/tlclk.c:216:
+    break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: drivers/char/tlclk.c:217:
+   case CLK_44_736MHz:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#300: FILE: drivers/char/tlclk.c:218:
+    SET_PORT_BITS(TLCLK_REG0, 0xfc, 2);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#301: FILE: drivers/char/tlclk.c:219:
+    break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#302: FILE: drivers/char/tlclk.c:220:
+   }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: drivers/char/tlclk.c:221:
+  } else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#303: FILE: drivers/char/tlclk.c:221:
+  } else
+   SET_PORT_BITS(TLCLK_REG3, 0xc7, val << 3);

CHECK:BRACES: Unbalanced braces around else statement
#303: FILE: drivers/char/tlclk.c:221:
+  } else

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#304: FILE: drivers/char/tlclk.c:222:
+   SET_PORT_BITS(TLCLK_REG3, 0xc7, val << 3);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#305: FILE: drivers/char/tlclk.c:223:
+  break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#306: FILE: drivers/char/tlclk.c:224:
+ case IOCTL_TEST_MODE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#307: FILE: drivers/char/tlclk.c:225:
+  SET_PORT_BITS(TLCLK_REG4, 0xfd, 2);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#308: FILE: drivers/char/tlclk.c:226:
+  break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#309: FILE: drivers/char/tlclk.c:227:
+ case IOCTL_ENABLE_CLKA0_OUTPUT:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#310: FILE: drivers/char/tlclk.c:228:
+  SET_PORT_BITS(TLCLK_REG2, 0xfe, val);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#311: FILE: drivers/char/tlclk.c:229:
+  break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#312: FILE: drivers/char/tlclk.c:230:
+ case IOCTL_ENABLE_CLKB0_OUTPUT:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#313: FILE: drivers/char/tlclk.c:231:
+  SET_PORT_BITS(TLCLK_REG2, 0xfd, val << 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#314: FILE: drivers/char/tlclk.c:232:
+  break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#315: FILE: drivers/char/tlclk.c:233:
+ case IOCTL_ENABLE_CLKA1_OUTPUT:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: drivers/char/tlclk.c:234:
+  SET_PORT_BITS(TLCLK_REG2, 0xfb, val << 2);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: drivers/char/tlclk.c:235:
+  break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#318: FILE: drivers/char/tlclk.c:236:
+ case IOCTL_ENABLE_CLKB1_OUTPUT:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: drivers/char/tlclk.c:237:
+  SET_PORT_BITS(TLCLK_REG2, 0xf7, val << 3);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: drivers/char/tlclk.c:238:
+  break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#321: FILE: drivers/char/tlclk.c:239:
+ case IOCTL_ENABLE_CLK3A_OUTPUT:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: drivers/char/tlclk.c:240:
+  SET_PORT_BITS(TLCLK_REG3, 0xbf, val << 6);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#323: FILE: drivers/char/tlclk.c:241:
+  break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: drivers/char/tlclk.c:242:
+ case IOCTL_ENABLE_CLK3B_OUTPUT:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: drivers/char/tlclk.c:243:
+  SET_PORT_BITS(TLCLK_REG3, 0x7f, val << 7);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#326: FILE: drivers/char/tlclk.c:244:
+  break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#327: FILE: drivers/char/tlclk.c:245:
+ case IOCTL_READ_ALARMS:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#328: FILE: drivers/char/tlclk.c:246:
+  ret_val = (inb(TLCLK_REG2) & 0xf0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: drivers/char/tlclk.c:247:
+  break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: drivers/char/tlclk.c:248:
+ case IOCTL_READ_INTERRUPT_SWITCH:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: drivers/char/tlclk.c:249:
+  ret_val = inb(TLCLK_REG6);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: drivers/char/tlclk.c:250:
+  break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#333: FILE: drivers/char/tlclk.c:251:
+ case IOCTL_READ_CURRENT_REF:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#334: FILE: drivers/char/tlclk.c:252:
+  ret_val = ((inb(TLCLK_REG1) & 0x08) >> 3);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#335: FILE: drivers/char/tlclk.c:253:
+  break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#336: FILE: drivers/char/tlclk.c:254:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#337: FILE: drivers/char/tlclk.c:255:
+ spin_unlock_irqrestore(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#339: FILE: drivers/char/tlclk.c:257:
+ return ret_val;$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#343: FILE: drivers/char/tlclk.c:261:
+static int tlclk_open(struct inode *inode, struct file *filp)
                                                         ^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#345: FILE: drivers/char/tlclk.c:263:
+ int result;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#347: FILE: drivers/char/tlclk.c:265:
+ /* Make sure there is no interrupt pending while $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#348: FILE: drivers/char/tlclk.c:266:
+  * initialising interrupt handler */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#349: FILE: drivers/char/tlclk.c:267:
+ inb(TLCLK_REG6);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#351: FILE: drivers/char/tlclk.c:269:
+ /* This device is wired through the FPGA IO space of the ATCA blade $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#352: FILE: drivers/char/tlclk.c:270:
+  * we can't share this IRQ */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#353: FILE: drivers/char/tlclk.c:271:
+ result = request_irq(telclk_interrupt, &tlclk_interrupt,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#354: FILE: drivers/char/tlclk.c:272:
+        SA_INTERRUPT, "telclock", tlclk_interrupt);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#354: FILE: drivers/char/tlclk.c:272:
+ result = request_irq(telclk_interrupt, &tlclk_interrupt,
+        SA_INTERRUPT, "telclock", tlclk_interrupt);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: drivers/char/tlclk.c:272:
+        SA_INTERRUPT, "telclock", tlclk_interrupt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#355: FILE: drivers/char/tlclk.c:273:
+ if (result == -EBUSY) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#355: FILE: drivers/char/tlclk.c:273:
+ if (result == -EBUSY) {
+  printk(KERN_ERR "telclock: Interrupt can't be reserved!\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: drivers/char/tlclk.c:274:
+  printk(KERN_ERR "telclock: Interrupt can't be reserved!\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#356: FILE: drivers/char/tlclk.c:274:
+  printk(KERN_ERR "telclock: Interrupt can't be reserved!\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#357: FILE: drivers/char/tlclk.c:275:
+  return -EBUSY;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#358: FILE: drivers/char/tlclk.c:276:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#359: FILE: drivers/char/tlclk.c:277:
+ inb(TLCLK_REG6); /* Clear interrupt events */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#361: FILE: drivers/char/tlclk.c:279:
+ return 0;$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#364: FILE: drivers/char/tlclk.c:282:
+static int tlclk_release(struct inode *inode, struct file *filp)
                                                            ^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#366: FILE: drivers/char/tlclk.c:284:
+ free_irq(telclk_interrupt, tlclk_interrupt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#368: FILE: drivers/char/tlclk.c:286:
+ return 0;$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#372: FILE: drivers/char/tlclk.c:290:
+tlclk_read(struct file * filp, char __user * buf, size_t count, loff_t * f_pos)
                          ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#372: FILE: drivers/char/tlclk.c:290:
+tlclk_read(struct file * filp, char __user * buf, size_t count, loff_t * f_pos)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#372: FILE: drivers/char/tlclk.c:290:
+tlclk_read(struct file * filp, char __user * buf, size_t count, loff_t * f_pos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#372: FILE: drivers/char/tlclk.c:290:
+tlclk_read(struct file * filp, char __user * buf, size_t count, loff_t * f_pos)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#374: FILE: drivers/char/tlclk.c:292:
+ int count0 = sizeof(struct tlclk_alarms);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#376: FILE: drivers/char/tlclk.c:294:
+ wait_event_interruptible(wq, got_event);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#377: FILE: drivers/char/tlclk.c:295:
+ if (copy_to_user(buf, alarm_events, sizeof(struct tlclk_alarms)))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#377: FILE: drivers/char/tlclk.c:295:
+ if (copy_to_user(buf, alarm_events, sizeof(struct tlclk_alarms)))
+  return -EFAULT;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#378: FILE: drivers/char/tlclk.c:296:
+  return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#380: FILE: drivers/char/tlclk.c:298:
+ memset(alarm_events, 0, sizeof(struct tlclk_alarms));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#381: FILE: drivers/char/tlclk.c:299:
+ got_event = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#383: FILE: drivers/char/tlclk.c:301:
+ return count0;$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#387: FILE: drivers/char/tlclk.c:305:
+tlclk_write(struct file * filp, const char __user * buf, size_t count,
                           ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#387: FILE: drivers/char/tlclk.c:305:
+tlclk_write(struct file * filp, const char __user * buf, size_t count,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#387: FILE: drivers/char/tlclk.c:305:
+tlclk_write(struct file * filp, const char __user * buf, size_t count,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#388: FILE: drivers/char/tlclk.c:306:
+tlclk_write(struct file * filp, const char __user * buf, size_t count,
+     loff_t * f_pos)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#388: FILE: drivers/char/tlclk.c:306:
+     loff_t * f_pos)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#388: FILE: drivers/char/tlclk.c:306:
+     loff_t * f_pos)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#390: FILE: drivers/char/tlclk.c:308:
+ return 0;$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#393: FILE: drivers/char/tlclk.c:311:
+static struct file_operations tlclk_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#394: FILE: drivers/char/tlclk.c:312:
+ .read = tlclk_read,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#395: FILE: drivers/char/tlclk.c:313:
+ .write = tlclk_write,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#397: FILE: drivers/char/tlclk.c:315:
+ .ioctl = tlclk_ioctl,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#399: FILE: drivers/char/tlclk.c:317:
+ .open = tlclk_open,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#400: FILE: drivers/char/tlclk.c:318:
+ .release = tlclk_release,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#406: FILE: drivers/char/tlclk.c:324:
+ .minor = MISC_DYNAMIC_MINOR,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#407: FILE: drivers/char/tlclk.c:325:
+ .name = "tlclk",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#408: FILE: drivers/char/tlclk.c:326:
+ .fops = &tlclk_fops,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#413: FILE: drivers/char/tlclk.c:331:
+ unsigned long ret_val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#414: FILE: drivers/char/tlclk.c:332:
+ unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#416: FILE: drivers/char/tlclk.c:334:
+ spin_lock_irqsave(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#417: FILE: drivers/char/tlclk.c:335:
+ ret_val = ((inb(TLCLK_REG1) & 0x08) >> 3);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#418: FILE: drivers/char/tlclk.c:336:
+ spin_unlock_irqrestore(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#420: FILE: drivers/char/tlclk.c:338:
+ return sprintf(buf, "0x%lX\n", ret_val);$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#423: FILE: drivers/char/tlclk.c:341:
+static CLASS_DEVICE_ATTR(current_ref, S_IRUGO, show_current_ref, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#427: FILE: drivers/char/tlclk.c:345:
+ unsigned long ret_val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#428: FILE: drivers/char/tlclk.c:346:
+ unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#430: FILE: drivers/char/tlclk.c:348:
+ spin_lock_irqsave(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#431: FILE: drivers/char/tlclk.c:349:
+ ret_val = inb(TLCLK_REG6);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#432: FILE: drivers/char/tlclk.c:350:
+ spin_unlock_irqrestore(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#434: FILE: drivers/char/tlclk.c:352:
+ return sprintf(buf, "0x%lX\n", ret_val);$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#437: FILE: drivers/char/tlclk.c:355:
+static CLASS_DEVICE_ATTR(interrupt_switch, S_IRUGO,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#438: FILE: drivers/char/tlclk.c:356:
+    show_interrupt_switch, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#442: FILE: drivers/char/tlclk.c:360:
+ unsigned long ret_val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#443: FILE: drivers/char/tlclk.c:361:
+ unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#445: FILE: drivers/char/tlclk.c:363:
+ spin_lock_irqsave(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#446: FILE: drivers/char/tlclk.c:364:
+ ret_val = (inb(TLCLK_REG2) & 0xf0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: drivers/char/tlclk.c:365:
+ spin_unlock_irqrestore(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: drivers/char/tlclk.c:367:
+ return sprintf(buf, "0x%lX\n", ret_val);$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#452: FILE: drivers/char/tlclk.c:370:
+static CLASS_DEVICE_ATTR(alarms, S_IRUGO, show_alarms, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#455: FILE: drivers/char/tlclk.c:373:
+static ssize_t store_enable_clk3b_output(struct class_device *d,
+      const char *buf, size_t count)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#455: FILE: drivers/char/tlclk.c:373:
+      const char *buf, size_t count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#457: FILE: drivers/char/tlclk.c:375:
+ unsigned long tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#458: FILE: drivers/char/tlclk.c:376:
+ unsigned char val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#459: FILE: drivers/char/tlclk.c:377:
+ unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#461: FILE: drivers/char/tlclk.c:379:
+ sscanf(buf, "%lX", &tmp);$

WARNING:NAKED_SSCANF: unchecked sscanf return value
#461: FILE: drivers/char/tlclk.c:379:
+ sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#461: FILE: drivers/char/tlclk.c:379:
+ sscanf(buf, "%lX", &tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#462: FILE: drivers/char/tlclk.c:380:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#462: FILE: drivers/char/tlclk.c:380:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#464: FILE: drivers/char/tlclk.c:382:
+ val = (unsigned char)tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#465: FILE: drivers/char/tlclk.c:383:
+ spin_lock_irqsave(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#466: FILE: drivers/char/tlclk.c:384:
+ SET_PORT_BITS(TLCLK_REG3, 0x7f, val << 7);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#467: FILE: drivers/char/tlclk.c:385:
+ spin_unlock_irqrestore(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#469: FILE: drivers/char/tlclk.c:387:
+ return strnlen(buf, count);$

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#472: FILE: drivers/char/tlclk.c:390:
+static CLASS_DEVICE_ATTR(enable_clk3b_output, S_IWUGO, NULL,

Exporting world writable sysfs/debugfs files is usually a bad thing.
When done arbitrarily they can introduce serious security bugs.
In the past, some of the debugfs vulnerabilities would seemingly allow
any local user to write arbitrary values into device registers - a
situation from which little good can be expected to emerge.

See: https://lore.kernel.org/linux-arm-kernel/cover.1296818921.git.segoon@openwall.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#472: FILE: drivers/char/tlclk.c:390:
+static CLASS_DEVICE_ATTR(enable_clk3b_output, S_IWUGO, NULL,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#473: FILE: drivers/char/tlclk.c:391:
+    store_enable_clk3b_output);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#476: FILE: drivers/char/tlclk.c:394:
+static ssize_t store_enable_clk3a_output(struct class_device *d,
+      const char *buf, size_t count)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#476: FILE: drivers/char/tlclk.c:394:
+      const char *buf, size_t count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#478: FILE: drivers/char/tlclk.c:396:
+ unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#479: FILE: drivers/char/tlclk.c:397:
+ unsigned long tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#480: FILE: drivers/char/tlclk.c:398:
+ unsigned char val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#482: FILE: drivers/char/tlclk.c:400:
+ sscanf(buf, "%lX", &tmp);$

WARNING:NAKED_SSCANF: unchecked sscanf return value
#482: FILE: drivers/char/tlclk.c:400:
+ sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#482: FILE: drivers/char/tlclk.c:400:
+ sscanf(buf, "%lX", &tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#483: FILE: drivers/char/tlclk.c:401:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#483: FILE: drivers/char/tlclk.c:401:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#485: FILE: drivers/char/tlclk.c:403:
+ val = (unsigned char)tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#486: FILE: drivers/char/tlclk.c:404:
+ spin_lock_irqsave(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#487: FILE: drivers/char/tlclk.c:405:
+ SET_PORT_BITS(TLCLK_REG3, 0xbf, val << 6);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#488: FILE: drivers/char/tlclk.c:406:
+ spin_unlock_irqrestore(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#490: FILE: drivers/char/tlclk.c:408:
+ return strnlen(buf, count);$

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#493: FILE: drivers/char/tlclk.c:411:
+static CLASS_DEVICE_ATTR(enable_clk3a_output, S_IWUGO, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#493: FILE: drivers/char/tlclk.c:411:
+static CLASS_DEVICE_ATTR(enable_clk3a_output, S_IWUGO, NULL,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#494: FILE: drivers/char/tlclk.c:412:
+    store_enable_clk3a_output);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#497: FILE: drivers/char/tlclk.c:415:
+static ssize_t store_enable_clkb1_output(struct class_device *d,
+      const char *buf, size_t count)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#497: FILE: drivers/char/tlclk.c:415:
+      const char *buf, size_t count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#499: FILE: drivers/char/tlclk.c:417:
+ unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#500: FILE: drivers/char/tlclk.c:418:
+ unsigned long tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#501: FILE: drivers/char/tlclk.c:419:
+ unsigned char val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#503: FILE: drivers/char/tlclk.c:421:
+ sscanf(buf, "%lX", &tmp);$

WARNING:NAKED_SSCANF: unchecked sscanf return value
#503: FILE: drivers/char/tlclk.c:421:
+ sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#503: FILE: drivers/char/tlclk.c:421:
+ sscanf(buf, "%lX", &tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#504: FILE: drivers/char/tlclk.c:422:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#504: FILE: drivers/char/tlclk.c:422:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#506: FILE: drivers/char/tlclk.c:424:
+ val = (unsigned char)tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#507: FILE: drivers/char/tlclk.c:425:
+ spin_lock_irqsave(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#508: FILE: drivers/char/tlclk.c:426:
+ SET_PORT_BITS(TLCLK_REG2, 0xf7, val << 3);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#509: FILE: drivers/char/tlclk.c:427:
+ spin_unlock_irqrestore(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#511: FILE: drivers/char/tlclk.c:429:
+ return strnlen(buf, count);$

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#514: FILE: drivers/char/tlclk.c:432:
+static CLASS_DEVICE_ATTR(enable_clkb1_output, S_IWUGO, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#514: FILE: drivers/char/tlclk.c:432:
+static CLASS_DEVICE_ATTR(enable_clkb1_output, S_IWUGO, NULL,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#515: FILE: drivers/char/tlclk.c:433:
+    store_enable_clkb1_output);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#518: FILE: drivers/char/tlclk.c:436:
+static ssize_t store_enable_clka1_output(struct class_device *d,
+      const char *buf, size_t count)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#518: FILE: drivers/char/tlclk.c:436:
+      const char *buf, size_t count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#520: FILE: drivers/char/tlclk.c:438:
+ unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#521: FILE: drivers/char/tlclk.c:439:
+ unsigned long tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#522: FILE: drivers/char/tlclk.c:440:
+ unsigned char val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#524: FILE: drivers/char/tlclk.c:442:
+ sscanf(buf, "%lX", &tmp);$

WARNING:NAKED_SSCANF: unchecked sscanf return value
#524: FILE: drivers/char/tlclk.c:442:
+ sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#524: FILE: drivers/char/tlclk.c:442:
+ sscanf(buf, "%lX", &tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#525: FILE: drivers/char/tlclk.c:443:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#525: FILE: drivers/char/tlclk.c:443:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#527: FILE: drivers/char/tlclk.c:445:
+ val = (unsigned char)tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#528: FILE: drivers/char/tlclk.c:446:
+ spin_lock_irqsave(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#529: FILE: drivers/char/tlclk.c:447:
+ SET_PORT_BITS(TLCLK_REG2, 0xfb, val << 2);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#530: FILE: drivers/char/tlclk.c:448:
+ spin_unlock_irqrestore(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#532: FILE: drivers/char/tlclk.c:450:
+ return strnlen(buf, count);$

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#535: FILE: drivers/char/tlclk.c:453:
+static CLASS_DEVICE_ATTR(enable_clka1_output, S_IWUGO, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#535: FILE: drivers/char/tlclk.c:453:
+static CLASS_DEVICE_ATTR(enable_clka1_output, S_IWUGO, NULL,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#536: FILE: drivers/char/tlclk.c:454:
+    store_enable_clka1_output);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#539: FILE: drivers/char/tlclk.c:457:
+static ssize_t store_enable_clkb0_output(struct class_device *d,
+      const char *buf, size_t count)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#539: FILE: drivers/char/tlclk.c:457:
+      const char *buf, size_t count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#541: FILE: drivers/char/tlclk.c:459:
+ unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#542: FILE: drivers/char/tlclk.c:460:
+ unsigned long tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#543: FILE: drivers/char/tlclk.c:461:
+ unsigned char val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#545: FILE: drivers/char/tlclk.c:463:
+ sscanf(buf, "%lX", &tmp);$

WARNING:NAKED_SSCANF: unchecked sscanf return value
#545: FILE: drivers/char/tlclk.c:463:
+ sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#545: FILE: drivers/char/tlclk.c:463:
+ sscanf(buf, "%lX", &tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#546: FILE: drivers/char/tlclk.c:464:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#546: FILE: drivers/char/tlclk.c:464:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#548: FILE: drivers/char/tlclk.c:466:
+ val = (unsigned char)tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#549: FILE: drivers/char/tlclk.c:467:
+ spin_lock_irqsave(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#550: FILE: drivers/char/tlclk.c:468:
+ SET_PORT_BITS(TLCLK_REG2, 0xfd, val << 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#551: FILE: drivers/char/tlclk.c:469:
+ spin_unlock_irqrestore(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#553: FILE: drivers/char/tlclk.c:471:
+ return strnlen(buf, count);$

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#556: FILE: drivers/char/tlclk.c:474:
+static CLASS_DEVICE_ATTR(enable_clkb0_output, S_IWUGO, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#556: FILE: drivers/char/tlclk.c:474:
+static CLASS_DEVICE_ATTR(enable_clkb0_output, S_IWUGO, NULL,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#557: FILE: drivers/char/tlclk.c:475:
+    store_enable_clkb0_output);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#560: FILE: drivers/char/tlclk.c:478:
+static ssize_t store_enable_clka0_output(struct class_device *d,
+      const char *buf, size_t count)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#560: FILE: drivers/char/tlclk.c:478:
+      const char *buf, size_t count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#562: FILE: drivers/char/tlclk.c:480:
+ unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#563: FILE: drivers/char/tlclk.c:481:
+ unsigned long tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#564: FILE: drivers/char/tlclk.c:482:
+ unsigned char val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#566: FILE: drivers/char/tlclk.c:484:
+ sscanf(buf, "%lX", &tmp);$

WARNING:NAKED_SSCANF: unchecked sscanf return value
#566: FILE: drivers/char/tlclk.c:484:
+ sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#566: FILE: drivers/char/tlclk.c:484:
+ sscanf(buf, "%lX", &tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#567: FILE: drivers/char/tlclk.c:485:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#567: FILE: drivers/char/tlclk.c:485:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#569: FILE: drivers/char/tlclk.c:487:
+ val = (unsigned char)tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#570: FILE: drivers/char/tlclk.c:488:
+ spin_lock_irqsave(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#571: FILE: drivers/char/tlclk.c:489:
+ SET_PORT_BITS(TLCLK_REG2, 0xfe, val);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#572: FILE: drivers/char/tlclk.c:490:
+ spin_unlock_irqrestore(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#574: FILE: drivers/char/tlclk.c:492:
+ return strnlen(buf, count);$

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#577: FILE: drivers/char/tlclk.c:495:
+static CLASS_DEVICE_ATTR(enable_clka0_output, S_IWUGO, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#577: FILE: drivers/char/tlclk.c:495:
+static CLASS_DEVICE_ATTR(enable_clka0_output, S_IWUGO, NULL,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#578: FILE: drivers/char/tlclk.c:496:
+    store_enable_clka0_output);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#581: FILE: drivers/char/tlclk.c:499:
+          size_t count)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#581: FILE: drivers/char/tlclk.c:499:
+static ssize_t store_test_mode(struct class_device *d, const char *buf,
+          size_t count)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#581: FILE: drivers/char/tlclk.c:499:
+          size_t count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#583: FILE: drivers/char/tlclk.c:501:
+ unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#584: FILE: drivers/char/tlclk.c:502:
+ unsigned long tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#585: FILE: drivers/char/tlclk.c:503:
+ unsigned char val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#587: FILE: drivers/char/tlclk.c:505:
+ sscanf(buf, "%lX", &tmp);$

WARNING:NAKED_SSCANF: unchecked sscanf return value
#587: FILE: drivers/char/tlclk.c:505:
+ sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#587: FILE: drivers/char/tlclk.c:505:
+ sscanf(buf, "%lX", &tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#588: FILE: drivers/char/tlclk.c:506:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#588: FILE: drivers/char/tlclk.c:506:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#590: FILE: drivers/char/tlclk.c:508:
+ val = (unsigned char)tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#591: FILE: drivers/char/tlclk.c:509:
+ spin_lock_irqsave(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#592: FILE: drivers/char/tlclk.c:510:
+ SET_PORT_BITS(TLCLK_REG4, 0xfd, 2);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#593: FILE: drivers/char/tlclk.c:511:
+ spin_unlock_irqrestore(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#595: FILE: drivers/char/tlclk.c:513:
+ return strnlen(buf, count);$

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#598: FILE: drivers/char/tlclk.c:516:
+static CLASS_DEVICE_ATTR(test_mode, S_IWUGO, NULL, store_test_mode);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#598: FILE: drivers/char/tlclk.c:516:
+static CLASS_DEVICE_ATTR(test_mode, S_IWUGO, NULL, store_test_mode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#601: FILE: drivers/char/tlclk.c:519:
+static ssize_t store_select_amcb2_transmit_clock(struct class_device *d,
+       const char *buf, size_t count)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#601: FILE: drivers/char/tlclk.c:519:
+       const char *buf, size_t count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#603: FILE: drivers/char/tlclk.c:521:
+ unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#604: FILE: drivers/char/tlclk.c:522:
+ unsigned long tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#605: FILE: drivers/char/tlclk.c:523:
+ unsigned char val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#607: FILE: drivers/char/tlclk.c:525:
+ sscanf(buf, "%lX", &tmp);$

WARNING:NAKED_SSCANF: unchecked sscanf return value
#607: FILE: drivers/char/tlclk.c:525:
+ sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#607: FILE: drivers/char/tlclk.c:525:
+ sscanf(buf, "%lX", &tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#608: FILE: drivers/char/tlclk.c:526:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#608: FILE: drivers/char/tlclk.c:526:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#610: FILE: drivers/char/tlclk.c:528:
+ val = (unsigned char)tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#611: FILE: drivers/char/tlclk.c:529:
+ spin_lock_irqsave(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#612: FILE: drivers/char/tlclk.c:530:
+ if ((val == CLK_8kHz) || (val == CLK_16_384MHz)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#612: FILE: drivers/char/tlclk.c:530:
+ if ((val == CLK_8kHz) || (val == CLK_16_384MHz)) {
+  SET_PORT_BITS(TLCLK_REG3, 0xc7, 0x28);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val == CLK_8kHz'
#612: FILE: drivers/char/tlclk.c:530:
+ if ((val == CLK_8kHz) || (val == CLK_16_384MHz)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val == CLK_16_384MHz'
#612: FILE: drivers/char/tlclk.c:530:
+ if ((val == CLK_8kHz) || (val == CLK_16_384MHz)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#612: FILE: drivers/char/tlclk.c:530:
+ if ((val == CLK_8kHz) || (val == CLK_16_384MHz)) {
[...]
+ } else if (val >= CLK_8_592MHz) {
[...]
+ } else
[...]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#613: FILE: drivers/char/tlclk.c:531:
+  SET_PORT_BITS(TLCLK_REG3, 0xc7, 0x28);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#614: FILE: drivers/char/tlclk.c:532:
+  SET_PORT_BITS(TLCLK_REG1, 0xfb, ~val);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#615: FILE: drivers/char/tlclk.c:533:
+ } else if (val >= CLK_8_592MHz) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#615: FILE: drivers/char/tlclk.c:533:
+ } else if (val >= CLK_8_592MHz) {
+  SET_PORT_BITS(TLCLK_REG3, 0xc7, 0x38);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#616: FILE: drivers/char/tlclk.c:534:
+  SET_PORT_BITS(TLCLK_REG3, 0xc7, 0x38);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#617: FILE: drivers/char/tlclk.c:535:
+  switch (val) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#618: FILE: drivers/char/tlclk.c:536:
+  case CLK_8_592MHz:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#619: FILE: drivers/char/tlclk.c:537:
+   SET_PORT_BITS(TLCLK_REG0, 0xfc, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#620: FILE: drivers/char/tlclk.c:538:
+   break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#621: FILE: drivers/char/tlclk.c:539:
+  case CLK_11_184MHz:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#622: FILE: drivers/char/tlclk.c:540:
+   SET_PORT_BITS(TLCLK_REG0, 0xfc, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#623: FILE: drivers/char/tlclk.c:541:
+   break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#624: FILE: drivers/char/tlclk.c:542:
+  case CLK_34_368MHz:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#625: FILE: drivers/char/tlclk.c:543:
+   SET_PORT_BITS(TLCLK_REG0, 0xfc, 3);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#626: FILE: drivers/char/tlclk.c:544:
+   break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#627: FILE: drivers/char/tlclk.c:545:
+  case CLK_44_736MHz:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#628: FILE: drivers/char/tlclk.c:546:
+   SET_PORT_BITS(TLCLK_REG0, 0xfc, 2);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#629: FILE: drivers/char/tlclk.c:547:
+   break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#630: FILE: drivers/char/tlclk.c:548:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#631: FILE: drivers/char/tlclk.c:549:
+ } else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#631: FILE: drivers/char/tlclk.c:549:
+ } else
+  SET_PORT_BITS(TLCLK_REG3, 0xc7, val << 3);

CHECK:BRACES: Unbalanced braces around else statement
#631: FILE: drivers/char/tlclk.c:549:
+ } else

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#632: FILE: drivers/char/tlclk.c:550:
+  SET_PORT_BITS(TLCLK_REG3, 0xc7, val << 3);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#634: FILE: drivers/char/tlclk.c:552:
+ spin_unlock_irqrestore(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#636: FILE: drivers/char/tlclk.c:554:
+ return strnlen(buf, count);$

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#639: FILE: drivers/char/tlclk.c:557:
+static CLASS_DEVICE_ATTR(select_amcb2_transmit_clock, S_IWUGO, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#639: FILE: drivers/char/tlclk.c:557:
+static CLASS_DEVICE_ATTR(select_amcb2_transmit_clock, S_IWUGO, NULL,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#640: FILE: drivers/char/tlclk.c:558:
+    store_select_amcb2_transmit_clock);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#643: FILE: drivers/char/tlclk.c:561:
+static ssize_t store_select_amcb1_transmit_clock(struct class_device *d,
+       const char *buf, size_t count)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#643: FILE: drivers/char/tlclk.c:561:
+       const char *buf, size_t count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#645: FILE: drivers/char/tlclk.c:563:
+ unsigned long tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#646: FILE: drivers/char/tlclk.c:564:
+ unsigned char val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#647: FILE: drivers/char/tlclk.c:565:
+ unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#649: FILE: drivers/char/tlclk.c:567:
+ sscanf(buf, "%lX", &tmp);$

WARNING:NAKED_SSCANF: unchecked sscanf return value
#649: FILE: drivers/char/tlclk.c:567:
+ sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#649: FILE: drivers/char/tlclk.c:567:
+ sscanf(buf, "%lX", &tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#650: FILE: drivers/char/tlclk.c:568:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#650: FILE: drivers/char/tlclk.c:568:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#652: FILE: drivers/char/tlclk.c:570:
+ val = (unsigned char)tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#653: FILE: drivers/char/tlclk.c:571:
+ spin_lock_irqsave(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#654: FILE: drivers/char/tlclk.c:572:
+ if ((val == CLK_8kHz) || (val == CLK_16_384MHz)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#654: FILE: drivers/char/tlclk.c:572:
+ if ((val == CLK_8kHz) || (val == CLK_16_384MHz)) {
+  SET_PORT_BITS(TLCLK_REG3, 0xf8, 0x5);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val == CLK_8kHz'
#654: FILE: drivers/char/tlclk.c:572:
+ if ((val == CLK_8kHz) || (val == CLK_16_384MHz)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val == CLK_16_384MHz'
#654: FILE: drivers/char/tlclk.c:572:
+ if ((val == CLK_8kHz) || (val == CLK_16_384MHz)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#654: FILE: drivers/char/tlclk.c:572:
+ if ((val == CLK_8kHz) || (val == CLK_16_384MHz)) {
[...]
+ } else if (val >= CLK_8_592MHz) {
[...]
+ } else
[...]

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#655: FILE: drivers/char/tlclk.c:573:
+  SET_PORT_BITS(TLCLK_REG3, 0xf8, 0x5);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#656: FILE: drivers/char/tlclk.c:574:
+  SET_PORT_BITS(TLCLK_REG1, 0xfb, ~val);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#657: FILE: drivers/char/tlclk.c:575:
+ } else if (val >= CLK_8_592MHz) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#657: FILE: drivers/char/tlclk.c:575:
+ } else if (val >= CLK_8_592MHz) {
+  SET_PORT_BITS(TLCLK_REG3, 0xf8, 0x7);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#658: FILE: drivers/char/tlclk.c:576:
+  SET_PORT_BITS(TLCLK_REG3, 0xf8, 0x7);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#659: FILE: drivers/char/tlclk.c:577:
+  switch (val) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#660: FILE: drivers/char/tlclk.c:578:
+  case CLK_8_592MHz:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#661: FILE: drivers/char/tlclk.c:579:
+   SET_PORT_BITS(TLCLK_REG0, 0xfc, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#662: FILE: drivers/char/tlclk.c:580:
+   break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#663: FILE: drivers/char/tlclk.c:581:
+  case CLK_11_184MHz:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#664: FILE: drivers/char/tlclk.c:582:
+   SET_PORT_BITS(TLCLK_REG0, 0xfc, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#665: FILE: drivers/char/tlclk.c:583:
+   break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#666: FILE: drivers/char/tlclk.c:584:
+  case CLK_34_368MHz:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#667: FILE: drivers/char/tlclk.c:585:
+   SET_PORT_BITS(TLCLK_REG0, 0xfc, 3);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#668: FILE: drivers/char/tlclk.c:586:
+   break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#669: FILE: drivers/char/tlclk.c:587:
+  case CLK_44_736MHz:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#670: FILE: drivers/char/tlclk.c:588:
+   SET_PORT_BITS(TLCLK_REG0, 0xfc, 2);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#671: FILE: drivers/char/tlclk.c:589:
+   break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#672: FILE: drivers/char/tlclk.c:590:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#673: FILE: drivers/char/tlclk.c:591:
+ } else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#673: FILE: drivers/char/tlclk.c:591:
+ } else
+  SET_PORT_BITS(TLCLK_REG3, 0xf8, val);

CHECK:BRACES: Unbalanced braces around else statement
#673: FILE: drivers/char/tlclk.c:591:
+ } else

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#674: FILE: drivers/char/tlclk.c:592:
+  SET_PORT_BITS(TLCLK_REG3, 0xf8, val);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#675: FILE: drivers/char/tlclk.c:593:
+ spin_unlock_irqrestore(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#677: FILE: drivers/char/tlclk.c:595:
+ return strnlen(buf, count);$

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#680: FILE: drivers/char/tlclk.c:598:
+static CLASS_DEVICE_ATTR(select_amcb1_transmit_clock, S_IWUGO, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#680: FILE: drivers/char/tlclk.c:598:
+static CLASS_DEVICE_ATTR(select_amcb1_transmit_clock, S_IWUGO, NULL,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#681: FILE: drivers/char/tlclk.c:599:
+    store_select_amcb1_transmit_clock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#684: FILE: drivers/char/tlclk.c:602:
+         const char *buf, size_t count)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#684: FILE: drivers/char/tlclk.c:602:
+static ssize_t store_select_redundant_clock(struct class_device *d,
+         const char *buf, size_t count)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#684: FILE: drivers/char/tlclk.c:602:
+         const char *buf, size_t count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#686: FILE: drivers/char/tlclk.c:604:
+ unsigned long tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#687: FILE: drivers/char/tlclk.c:605:
+ unsigned char val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#688: FILE: drivers/char/tlclk.c:606:
+ unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#690: FILE: drivers/char/tlclk.c:608:
+ sscanf(buf, "%lX", &tmp);$

WARNING:NAKED_SSCANF: unchecked sscanf return value
#690: FILE: drivers/char/tlclk.c:608:
+ sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#690: FILE: drivers/char/tlclk.c:608:
+ sscanf(buf, "%lX", &tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#691: FILE: drivers/char/tlclk.c:609:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#691: FILE: drivers/char/tlclk.c:609:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#693: FILE: drivers/char/tlclk.c:611:
+ val = (unsigned char)tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#694: FILE: drivers/char/tlclk.c:612:
+ spin_lock_irqsave(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#695: FILE: drivers/char/tlclk.c:613:
+ SET_PORT_BITS(TLCLK_REG1, 0xfe, val);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#696: FILE: drivers/char/tlclk.c:614:
+ spin_unlock_irqrestore(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#698: FILE: drivers/char/tlclk.c:616:
+ return strnlen(buf, count);$

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#701: FILE: drivers/char/tlclk.c:619:
+static CLASS_DEVICE_ATTR(select_redundant_clock, S_IWUGO, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#701: FILE: drivers/char/tlclk.c:619:
+static CLASS_DEVICE_ATTR(select_redundant_clock, S_IWUGO, NULL,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#702: FILE: drivers/char/tlclk.c:620:
+    store_select_redundant_clock);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#705: FILE: drivers/char/tlclk.c:623:
+static ssize_t store_select_ref_frequency(struct class_device *d,
+       const char *buf, size_t count)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#705: FILE: drivers/char/tlclk.c:623:
+       const char *buf, size_t count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#707: FILE: drivers/char/tlclk.c:625:
+ unsigned long tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#708: FILE: drivers/char/tlclk.c:626:
+ unsigned char val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#709: FILE: drivers/char/tlclk.c:627:
+ unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#711: FILE: drivers/char/tlclk.c:629:
+ sscanf(buf, "%lX", &tmp);$

WARNING:NAKED_SSCANF: unchecked sscanf return value
#711: FILE: drivers/char/tlclk.c:629:
+ sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#711: FILE: drivers/char/tlclk.c:629:
+ sscanf(buf, "%lX", &tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#712: FILE: drivers/char/tlclk.c:630:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#712: FILE: drivers/char/tlclk.c:630:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#714: FILE: drivers/char/tlclk.c:632:
+ val = (unsigned char)tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#715: FILE: drivers/char/tlclk.c:633:
+ spin_lock_irqsave(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#716: FILE: drivers/char/tlclk.c:634:
+ SET_PORT_BITS(TLCLK_REG1, 0xfd, val);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#717: FILE: drivers/char/tlclk.c:635:
+ spin_unlock_irqrestore(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#719: FILE: drivers/char/tlclk.c:637:
+ return strnlen(buf, count);$

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#722: FILE: drivers/char/tlclk.c:640:
+static CLASS_DEVICE_ATTR(select_ref_frequency, S_IWUGO, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#722: FILE: drivers/char/tlclk.c:640:
+static CLASS_DEVICE_ATTR(select_ref_frequency, S_IWUGO, NULL,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#723: FILE: drivers/char/tlclk.c:641:
+    store_select_ref_frequency);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#726: FILE: drivers/char/tlclk.c:644:
+static ssize_t store_filter_select(struct class_device *d,
+       const char *buf, size_t count)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#726: FILE: drivers/char/tlclk.c:644:
+       const char *buf, size_t count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#728: FILE: drivers/char/tlclk.c:646:
+ unsigned long tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#729: FILE: drivers/char/tlclk.c:647:
+ unsigned char val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#730: FILE: drivers/char/tlclk.c:648:
+ unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#732: FILE: drivers/char/tlclk.c:650:
+ sscanf(buf, "%lX", &tmp);$

WARNING:NAKED_SSCANF: unchecked sscanf return value
#732: FILE: drivers/char/tlclk.c:650:
+ sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#732: FILE: drivers/char/tlclk.c:650:
+ sscanf(buf, "%lX", &tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#733: FILE: drivers/char/tlclk.c:651:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#733: FILE: drivers/char/tlclk.c:651:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#735: FILE: drivers/char/tlclk.c:653:
+ val = (unsigned char)tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#736: FILE: drivers/char/tlclk.c:654:
+ spin_lock_irqsave(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#737: FILE: drivers/char/tlclk.c:655:
+ SET_PORT_BITS(TLCLK_REG0, 0xfb, val);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#738: FILE: drivers/char/tlclk.c:656:
+ spin_unlock_irqrestore(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#740: FILE: drivers/char/tlclk.c:658:
+ return strnlen(buf, count);$

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#743: FILE: drivers/char/tlclk.c:661:
+static CLASS_DEVICE_ATTR(filter_select, S_IWUGO, NULL, store_filter_select);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#743: FILE: drivers/char/tlclk.c:661:
+static CLASS_DEVICE_ATTR(filter_select, S_IWUGO, NULL, store_filter_select);

ERROR:CODE_INDENT: code indent should use tabs where possible
#746: FILE: drivers/char/tlclk.c:664:
+          const char *buf, size_t count)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#746: FILE: drivers/char/tlclk.c:664:
+static ssize_t store_hardware_switching_mode(struct class_device *d,
+          const char *buf, size_t count)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#746: FILE: drivers/char/tlclk.c:664:
+          const char *buf, size_t count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#748: FILE: drivers/char/tlclk.c:666:
+ unsigned long tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#749: FILE: drivers/char/tlclk.c:667:
+ unsigned char val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#750: FILE: drivers/char/tlclk.c:668:
+ unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#752: FILE: drivers/char/tlclk.c:670:
+ sscanf(buf, "%lX", &tmp);$

WARNING:NAKED_SSCANF: unchecked sscanf return value
#752: FILE: drivers/char/tlclk.c:670:
+ sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#752: FILE: drivers/char/tlclk.c:670:
+ sscanf(buf, "%lX", &tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#753: FILE: drivers/char/tlclk.c:671:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#753: FILE: drivers/char/tlclk.c:671:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#755: FILE: drivers/char/tlclk.c:673:
+ val = (unsigned char)tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#756: FILE: drivers/char/tlclk.c:674:
+ spin_lock_irqsave(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#757: FILE: drivers/char/tlclk.c:675:
+ SET_PORT_BITS(TLCLK_REG0, 0xbf, val);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#758: FILE: drivers/char/tlclk.c:676:
+ spin_unlock_irqrestore(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#760: FILE: drivers/char/tlclk.c:678:
+ return strnlen(buf, count);$

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#763: FILE: drivers/char/tlclk.c:681:
+static CLASS_DEVICE_ATTR(hardware_switching_mode, S_IWUGO, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#763: FILE: drivers/char/tlclk.c:681:
+static CLASS_DEVICE_ATTR(hardware_switching_mode, S_IWUGO, NULL,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#764: FILE: drivers/char/tlclk.c:682:
+    store_hardware_switching_mode);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#767: FILE: drivers/char/tlclk.c:685:
+static ssize_t store_hardware_switching(struct class_device *d,
+     const char *buf, size_t count)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#767: FILE: drivers/char/tlclk.c:685:
+     const char *buf, size_t count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#769: FILE: drivers/char/tlclk.c:687:
+ unsigned long tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#770: FILE: drivers/char/tlclk.c:688:
+ unsigned char val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#771: FILE: drivers/char/tlclk.c:689:
+ unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#773: FILE: drivers/char/tlclk.c:691:
+ sscanf(buf, "%lX", &tmp);$

WARNING:NAKED_SSCANF: unchecked sscanf return value
#773: FILE: drivers/char/tlclk.c:691:
+ sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#773: FILE: drivers/char/tlclk.c:691:
+ sscanf(buf, "%lX", &tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#774: FILE: drivers/char/tlclk.c:692:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#774: FILE: drivers/char/tlclk.c:692:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#776: FILE: drivers/char/tlclk.c:694:
+ val = (unsigned char)tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#777: FILE: drivers/char/tlclk.c:695:
+ spin_lock_irqsave(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#778: FILE: drivers/char/tlclk.c:696:
+ SET_PORT_BITS(TLCLK_REG0, 0x7f, val);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#779: FILE: drivers/char/tlclk.c:697:
+ spin_unlock_irqrestore(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#781: FILE: drivers/char/tlclk.c:699:
+ return strnlen(buf, count);$

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#784: FILE: drivers/char/tlclk.c:702:
+static CLASS_DEVICE_ATTR(hardware_switching, S_IWUGO, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#784: FILE: drivers/char/tlclk.c:702:
+static CLASS_DEVICE_ATTR(hardware_switching, S_IWUGO, NULL,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#785: FILE: drivers/char/tlclk.c:703:
+    store_hardware_switching);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#788: FILE: drivers/char/tlclk.c:706:
+         const char *buf, size_t count)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#788: FILE: drivers/char/tlclk.c:706:
+static ssize_t store_refalign(struct class_device *d,
+         const char *buf, size_t count)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#788: FILE: drivers/char/tlclk.c:706:
+         const char *buf, size_t count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#790: FILE: drivers/char/tlclk.c:708:
+ unsigned long tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#791: FILE: drivers/char/tlclk.c:709:
+ unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#793: FILE: drivers/char/tlclk.c:711:
+ sscanf(buf, "%lX", &tmp);$

WARNING:NAKED_SSCANF: unchecked sscanf return value
#793: FILE: drivers/char/tlclk.c:711:
+ sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#793: FILE: drivers/char/tlclk.c:711:
+ sscanf(buf, "%lX", &tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#794: FILE: drivers/char/tlclk.c:712:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#794: FILE: drivers/char/tlclk.c:712:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#795: FILE: drivers/char/tlclk.c:713:
+ spin_lock_irqsave(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#796: FILE: drivers/char/tlclk.c:714:
+ SET_PORT_BITS(TLCLK_REG0, 0xf7, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#797: FILE: drivers/char/tlclk.c:715:
+ udelay(2);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#798: FILE: drivers/char/tlclk.c:716:
+ SET_PORT_BITS(TLCLK_REG0, 0xf7, 0x08);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#799: FILE: drivers/char/tlclk.c:717:
+ udelay(2);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#800: FILE: drivers/char/tlclk.c:718:
+ SET_PORT_BITS(TLCLK_REG0, 0xf7, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#801: FILE: drivers/char/tlclk.c:719:
+ spin_unlock_irqrestore(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#803: FILE: drivers/char/tlclk.c:721:
+ return strnlen(buf, count);$

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#806: FILE: drivers/char/tlclk.c:724:
+static CLASS_DEVICE_ATTR(refalign, S_IWUGO, NULL, store_refalign);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#806: FILE: drivers/char/tlclk.c:724:
+static CLASS_DEVICE_ATTR(refalign, S_IWUGO, NULL, store_refalign);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#809: FILE: drivers/char/tlclk.c:727:
+static ssize_t store_mode_select(struct class_device *d,
+     const char *buf, size_t count)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#809: FILE: drivers/char/tlclk.c:727:
+     const char *buf, size_t count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#811: FILE: drivers/char/tlclk.c:729:
+ unsigned long tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#812: FILE: drivers/char/tlclk.c:730:
+ unsigned char val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#813: FILE: drivers/char/tlclk.c:731:
+ unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#815: FILE: drivers/char/tlclk.c:733:
+ sscanf(buf, "%lX", &tmp);$

WARNING:NAKED_SSCANF: unchecked sscanf return value
#815: FILE: drivers/char/tlclk.c:733:
+ sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#815: FILE: drivers/char/tlclk.c:733:
+ sscanf(buf, "%lX", &tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#816: FILE: drivers/char/tlclk.c:734:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#816: FILE: drivers/char/tlclk.c:734:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#818: FILE: drivers/char/tlclk.c:736:
+ val = (unsigned char)tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#819: FILE: drivers/char/tlclk.c:737:
+ spin_lock_irqsave(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#820: FILE: drivers/char/tlclk.c:738:
+ SET_PORT_BITS(TLCLK_REG0, 0xcf, val);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#821: FILE: drivers/char/tlclk.c:739:
+ spin_unlock_irqrestore(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#823: FILE: drivers/char/tlclk.c:741:
+ return strnlen(buf, count);$

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#826: FILE: drivers/char/tlclk.c:744:
+static CLASS_DEVICE_ATTR(mode_select, S_IWUGO, NULL, store_mode_select);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#826: FILE: drivers/char/tlclk.c:744:
+static CLASS_DEVICE_ATTR(mode_select, S_IWUGO, NULL, store_mode_select);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#829: FILE: drivers/char/tlclk.c:747:
+static ssize_t store_reset(struct class_device *d,
+      const char *buf, size_t count)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#829: FILE: drivers/char/tlclk.c:747:
+      const char *buf, size_t count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#831: FILE: drivers/char/tlclk.c:749:
+ unsigned long tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#832: FILE: drivers/char/tlclk.c:750:
+ unsigned char val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#833: FILE: drivers/char/tlclk.c:751:
+ unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#835: FILE: drivers/char/tlclk.c:753:
+ sscanf(buf, "%lX", &tmp);$

WARNING:NAKED_SSCANF: unchecked sscanf return value
#835: FILE: drivers/char/tlclk.c:753:
+ sscanf(buf, "%lX", &tmp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#835: FILE: drivers/char/tlclk.c:753:
+ sscanf(buf, "%lX", &tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#836: FILE: drivers/char/tlclk.c:754:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);$

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#836: FILE: drivers/char/tlclk.c:754:
+ debug_printk(KERN_ERR "tmp = 0x%lX \n", tmp);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#838: FILE: drivers/char/tlclk.c:756:
+ val = (unsigned char)tmp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#839: FILE: drivers/char/tlclk.c:757:
+ spin_lock_irqsave(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#840: FILE: drivers/char/tlclk.c:758:
+ SET_PORT_BITS(TLCLK_REG4, 0xfd, val);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#841: FILE: drivers/char/tlclk.c:759:
+ spin_unlock_irqrestore(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#843: FILE: drivers/char/tlclk.c:761:
+ return strnlen(buf, count);$

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#846: FILE: drivers/char/tlclk.c:764:
+static CLASS_DEVICE_ATTR(reset, S_IWUGO, NULL, store_reset);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#846: FILE: drivers/char/tlclk.c:764:
+static CLASS_DEVICE_ATTR(reset, S_IWUGO, NULL, store_reset);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#851: FILE: drivers/char/tlclk.c:769:
+ int ret;$

ERROR:SPACING: exactly one space required after that #ifdef
#852: FILE: drivers/char/tlclk.c:770:
+#ifdef  CONFIG_SYSFS

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#853: FILE: drivers/char/tlclk.c:771:
+ struct class_device *class;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#855: FILE: drivers/char/tlclk.c:773:
+ ret = register_chrdev(tlclk_major, "telclock", &tlclk_fops);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#857: FILE: drivers/char/tlclk.c:775:
+ if (ret < 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#857: FILE: drivers/char/tlclk.c:775:
+ if (ret < 0) {
+  printk(KERN_ERR "telclock: can't get major! %d\n", tlclk_major);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#858: FILE: drivers/char/tlclk.c:776:
+  printk(KERN_ERR "telclock: can't get major! %d\n", tlclk_major);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#858: FILE: drivers/char/tlclk.c:776:
+  printk(KERN_ERR "telclock: can't get major! %d\n", tlclk_major);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#859: FILE: drivers/char/tlclk.c:777:
+  return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#860: FILE: drivers/char/tlclk.c:778:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#862: FILE: drivers/char/tlclk.c:780:
+ alarm_events = kcalloc(1, sizeof(struct tlclk_alarms), GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#864: FILE: drivers/char/tlclk.c:782:
+ if (!alarm_events)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#864: FILE: drivers/char/tlclk.c:782:
+ if (!alarm_events)
+  goto out1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#865: FILE: drivers/char/tlclk.c:783:
+  goto out1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#867: FILE: drivers/char/tlclk.c:785:
+ if (!request_region(TLCLK_BASE, 8, "telclock")) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#867: FILE: drivers/char/tlclk.c:785:
+ if (!request_region(TLCLK_BASE, 8, "telclock")) {
+  printk(KERN_ERR "tlclk: request_region failed! 0x%X\n",

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#868: FILE: drivers/char/tlclk.c:786:
+  printk(KERN_ERR "tlclk: request_region failed! 0x%X\n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#868: FILE: drivers/char/tlclk.c:786:
+  printk(KERN_ERR "tlclk: request_region failed! 0x%X\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#869: FILE: drivers/char/tlclk.c:787:
+         TLCLK_BASE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#869: FILE: drivers/char/tlclk.c:787:
+         TLCLK_BASE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#870: FILE: drivers/char/tlclk.c:788:
+  ret = -EBUSY;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#871: FILE: drivers/char/tlclk.c:789:
+  goto out2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#872: FILE: drivers/char/tlclk.c:790:
+ }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#874: FILE: drivers/char/tlclk.c:792:
+/* Read telecom clock IRQ number (Set by BIOS) $

WARNING:TYPO_SPELLING: 'opperation' may be misspelled - perhaps 'operation'?
#875: FILE: drivers/char/tlclk.c:793:
+ * This is also the probe opperation to avoid driver use on 
                           ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#875: FILE: drivers/char/tlclk.c:793:
+ * This is also the probe opperation to avoid driver use on $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#876: FILE: drivers/char/tlclk.c:794:
+ * non MCPBL0010 hardware. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#877: FILE: drivers/char/tlclk.c:795:
+ telclk_interrupt = (inb(TLCLK_REG7) & 0x0f);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#879: FILE: drivers/char/tlclk.c:797:
+ if (0x0F == telclk_interrupt) { /* not MCPBL0010 ? */$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#879: FILE: drivers/char/tlclk.c:797:
+ if (0x0F == telclk_interrupt) { /* not MCPBL0010 ? */
+  printk(KERN_ERR "telclk_interrup = 0x%x non-mcpbl0010 hw \n",

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#879: FILE: drivers/char/tlclk.c:797:
+ if (0x0F == telclk_interrupt) { /* not MCPBL0010 ? */

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#880: FILE: drivers/char/tlclk.c:798:
+  printk(KERN_ERR "telclk_interrup = 0x%x non-mcpbl0010 hw \n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#880: FILE: drivers/char/tlclk.c:798:
+  printk(KERN_ERR "telclk_interrup = 0x%x non-mcpbl0010 hw \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#880: FILE: drivers/char/tlclk.c:798:
+  printk(KERN_ERR "telclk_interrup = 0x%x non-mcpbl0010 hw \n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#881: FILE: drivers/char/tlclk.c:799:
+         telclk_interrupt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#881: FILE: drivers/char/tlclk.c:799:
+         telclk_interrupt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#882: FILE: drivers/char/tlclk.c:800:
+  ret = -ENXIO;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#883: FILE: drivers/char/tlclk.c:801:
+  goto out3;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#884: FILE: drivers/char/tlclk.c:802:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#886: FILE: drivers/char/tlclk.c:804:
+ init_timer(&switchover_timer);$

ERROR:SPACING: exactly one space required after that #ifdef
#890: FILE: drivers/char/tlclk.c:808:
+#ifdef  CONFIG_SYSFS

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#891: FILE: drivers/char/tlclk.c:809:
+ if (0 > (ret = misc_register(&tlclk_miscdev))) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#891: FILE: drivers/char/tlclk.c:809:
+ if (0 > (ret = misc_register(&tlclk_miscdev))) {
+  printk(KERN_ERR " misc_register retruns %d \n", ret);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#891: FILE: drivers/char/tlclk.c:809:
+ if (0 > (ret = misc_register(&tlclk_miscdev))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:TYPO_SPELLING: 'retruns' may be misspelled - perhaps 'returns'?
#892: FILE: drivers/char/tlclk.c:810:
+  printk(KERN_ERR " misc_register retruns %d \n", ret);
                                   ^^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#892: FILE: drivers/char/tlclk.c:810:
+  printk(KERN_ERR " misc_register retruns %d \n", ret);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#892: FILE: drivers/char/tlclk.c:810:
+  printk(KERN_ERR " misc_register retruns %d \n", ret);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#892: FILE: drivers/char/tlclk.c:810:
+  printk(KERN_ERR " misc_register retruns %d \n", ret);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#893: FILE: drivers/char/tlclk.c:811:
+  ret = -EBUSY;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#894: FILE: drivers/char/tlclk.c:812:
+  goto out3;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#895: FILE: drivers/char/tlclk.c:813:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#896: FILE: drivers/char/tlclk.c:814:
+ class = tlclk_miscdev.class;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#897: FILE: drivers/char/tlclk.c:815:
+ class_device_create_file(class, &class_device_attr_current_ref);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#898: FILE: drivers/char/tlclk.c:816:
+ class_device_create_file(class, &class_device_attr_interrupt_switch);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#899: FILE: drivers/char/tlclk.c:817:
+ class_device_create_file(class, &class_device_attr_alarms);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#900: FILE: drivers/char/tlclk.c:818:
+ class_device_create_file(class, &class_device_attr_enable_clk3b_output);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#901: FILE: drivers/char/tlclk.c:819:
+ class_device_create_file(class, &class_device_attr_enable_clk3a_output);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#902: FILE: drivers/char/tlclk.c:820:
+ class_device_create_file(class, &class_device_attr_enable_clkb1_output);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#903: FILE: drivers/char/tlclk.c:821:
+ class_device_create_file(class, &class_device_attr_enable_clka1_output);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#904: FILE: drivers/char/tlclk.c:822:
+ class_device_create_file(class, &class_device_attr_enable_clkb0_output);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#905: FILE: drivers/char/tlclk.c:823:
+ class_device_create_file(class, &class_device_attr_enable_clka0_output);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#906: FILE: drivers/char/tlclk.c:824:
+ class_device_create_file(class, &class_device_attr_test_mode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#907: FILE: drivers/char/tlclk.c:825:
+ class_device_create_file(class,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#908: FILE: drivers/char/tlclk.c:826:
+ class_device_create_file(class,
+     &class_device_attr_select_amcb2_transmit_clock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#908: FILE: drivers/char/tlclk.c:826:
+     &class_device_attr_select_amcb2_transmit_clock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#909: FILE: drivers/char/tlclk.c:827:
+ class_device_create_file(class,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#910: FILE: drivers/char/tlclk.c:828:
+ class_device_create_file(class,
+     &class_device_attr_select_amcb1_transmit_clock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#910: FILE: drivers/char/tlclk.c:828:
+     &class_device_attr_select_amcb1_transmit_clock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#911: FILE: drivers/char/tlclk.c:829:
+ class_device_create_file(class,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#912: FILE: drivers/char/tlclk.c:830:
+ class_device_create_file(class,
+     &class_device_attr_select_redundant_clock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#912: FILE: drivers/char/tlclk.c:830:
+     &class_device_attr_select_redundant_clock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#913: FILE: drivers/char/tlclk.c:831:
+ class_device_create_file(class,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#914: FILE: drivers/char/tlclk.c:832:
+ class_device_create_file(class,
+     &class_device_attr_select_ref_frequency);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#914: FILE: drivers/char/tlclk.c:832:
+     &class_device_attr_select_ref_frequency);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#915: FILE: drivers/char/tlclk.c:833:
+ class_device_create_file(class, &class_device_attr_filter_select);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#916: FILE: drivers/char/tlclk.c:834:
+ class_device_create_file(class,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#917: FILE: drivers/char/tlclk.c:835:
+ class_device_create_file(class,
+     &class_device_attr_hardware_switching_mode);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#917: FILE: drivers/char/tlclk.c:835:
+     &class_device_attr_hardware_switching_mode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#918: FILE: drivers/char/tlclk.c:836:
+ class_device_create_file(class, &class_device_attr_hardware_switching);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#919: FILE: drivers/char/tlclk.c:837:
+ class_device_create_file(class, &class_device_attr_refalign);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#920: FILE: drivers/char/tlclk.c:838:
+ class_device_create_file(class, &class_device_attr_mode_select);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#921: FILE: drivers/char/tlclk.c:839:
+ class_device_create_file(class, &class_device_attr_reset);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#924: FILE: drivers/char/tlclk.c:842:
+ return 0;$

WARNING:INDENTED_LABEL: labels should not be indented
#925: FILE: drivers/char/tlclk.c:843:
+      out3:

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#926: FILE: drivers/char/tlclk.c:844:
+ release_region(TLCLK_BASE, 8);$

WARNING:INDENTED_LABEL: labels should not be indented
#927: FILE: drivers/char/tlclk.c:845:
+      out2:

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#928: FILE: drivers/char/tlclk.c:846:
+ kfree(alarm_events);$

WARNING:INDENTED_LABEL: labels should not be indented
#929: FILE: drivers/char/tlclk.c:847:
+      out1:

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#930: FILE: drivers/char/tlclk.c:848:
+ return ret;$

ERROR:SPACING: exactly one space required after that #ifdef
#935: FILE: drivers/char/tlclk.c:853:
+#ifdef  CONFIG_SYSFS

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#936: FILE: drivers/char/tlclk.c:854:
+ misc_deregister(&tlclk_miscdev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#938: FILE: drivers/char/tlclk.c:856:
+ unregister_chrdev(tlclk_major, "telclock");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#940: FILE: drivers/char/tlclk.c:858:
+ release_region(TLCLK_BASE, 8);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#941: FILE: drivers/char/tlclk.c:859:
+ del_timer_sync(&switchover_timer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#942: FILE: drivers/char/tlclk.c:860:
+ kfree(alarm_events);$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#944: FILE: drivers/char/tlclk.c:862:
+
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#945: FILE: drivers/char/tlclk.c:863:
+}
+static void switchover_timeout(unsigned long data)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#947: FILE: drivers/char/tlclk.c:865:
+ if ((data & 1)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#947: FILE: drivers/char/tlclk.c:865:
+ if ((data & 1)) {
+  if ((inb(TLCLK_REG1) & 0x08) != (data & 0x08))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#948: FILE: drivers/char/tlclk.c:866:
+  if ((inb(TLCLK_REG1) & 0x08) != (data & 0x08))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#948: FILE: drivers/char/tlclk.c:866:
+  if ((inb(TLCLK_REG1) & 0x08) != (data & 0x08))
+   alarm_events->switchover_primary++;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#949: FILE: drivers/char/tlclk.c:867:
+   alarm_events->switchover_primary++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#950: FILE: drivers/char/tlclk.c:868:
+ } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#950: FILE: drivers/char/tlclk.c:868:
+ } else {
+  if ((inb(TLCLK_REG1) & 0x08) != (data & 0x08))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#951: FILE: drivers/char/tlclk.c:869:
+  if ((inb(TLCLK_REG1) & 0x08) != (data & 0x08))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#951: FILE: drivers/char/tlclk.c:869:
+  if ((inb(TLCLK_REG1) & 0x08) != (data & 0x08))
+   alarm_events->switchover_secondary++;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#952: FILE: drivers/char/tlclk.c:870:
+   alarm_events->switchover_secondary++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#953: FILE: drivers/char/tlclk.c:871:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#956: FILE: drivers/char/tlclk.c:874:
+ del_timer(&switchover_timer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#957: FILE: drivers/char/tlclk.c:875:
+ got_event = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#958: FILE: drivers/char/tlclk.c:876:
+ wake_up(&wq);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#963: FILE: drivers/char/tlclk.c:881:
+ unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#965: FILE: drivers/char/tlclk.c:883:
+ spin_lock_irqsave(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#967: FILE: drivers/char/tlclk.c:885:
+ int_events = inb(TLCLK_REG6);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#970: FILE: drivers/char/tlclk.c:888:
+ if (int_events & PRI_LOS_01_MASK) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#970: FILE: drivers/char/tlclk.c:888:
+ if (int_events & PRI_LOS_01_MASK) {
+  if (inb(TLCLK_REG2) & SEC_LOST_MASK)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#971: FILE: drivers/char/tlclk.c:889:
+  if (inb(TLCLK_REG2) & SEC_LOST_MASK)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#971: FILE: drivers/char/tlclk.c:889:
+  if (inb(TLCLK_REG2) & SEC_LOST_MASK)
+   alarm_events->lost_clocks++;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#972: FILE: drivers/char/tlclk.c:890:
+   alarm_events->lost_clocks++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#973: FILE: drivers/char/tlclk.c:891:
+  else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#973: FILE: drivers/char/tlclk.c:891:
+  else
+   alarm_events->lost_primary_clock++;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#974: FILE: drivers/char/tlclk.c:892:
+   alarm_events->lost_primary_clock++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#975: FILE: drivers/char/tlclk.c:893:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#978: FILE: drivers/char/tlclk.c:896:
+ if (int_events & PRI_LOS_10_MASK) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#978: FILE: drivers/char/tlclk.c:896:
+ if (int_events & PRI_LOS_10_MASK) {
+  alarm_events->primary_clock_back++;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#979: FILE: drivers/char/tlclk.c:897:
+  alarm_events->primary_clock_back++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#980: FILE: drivers/char/tlclk.c:898:
+  SET_PORT_BITS(TLCLK_REG1, 0xFE, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#981: FILE: drivers/char/tlclk.c:899:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#983: FILE: drivers/char/tlclk.c:901:
+ if (int_events & SEC_LOS_01_MASK) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#983: FILE: drivers/char/tlclk.c:901:
+ if (int_events & SEC_LOS_01_MASK) {
+  if (inb(TLCLK_REG2) & PRI_LOST_MASK)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#984: FILE: drivers/char/tlclk.c:902:
+  if (inb(TLCLK_REG2) & PRI_LOST_MASK)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#984: FILE: drivers/char/tlclk.c:902:
+  if (inb(TLCLK_REG2) & PRI_LOST_MASK)
+   alarm_events->lost_clocks++;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#985: FILE: drivers/char/tlclk.c:903:
+   alarm_events->lost_clocks++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#986: FILE: drivers/char/tlclk.c:904:
+  else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 3)
#986: FILE: drivers/char/tlclk.c:904:
+  else
+   alarm_events->lost_secondary_clock++;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#987: FILE: drivers/char/tlclk.c:905:
+   alarm_events->lost_secondary_clock++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#988: FILE: drivers/char/tlclk.c:906:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#990: FILE: drivers/char/tlclk.c:908:
+ if (int_events & SEC_LOS_10_MASK) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#990: FILE: drivers/char/tlclk.c:908:
+ if (int_events & SEC_LOS_10_MASK) {
+  alarm_events->secondary_clock_back++;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#991: FILE: drivers/char/tlclk.c:909:
+  alarm_events->secondary_clock_back++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#992: FILE: drivers/char/tlclk.c:910:
+  SET_PORT_BITS(TLCLK_REG1, 0xFE, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#993: FILE: drivers/char/tlclk.c:911:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#994: FILE: drivers/char/tlclk.c:912:
+ if (int_events & HOLDOVER_10_MASK)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#994: FILE: drivers/char/tlclk.c:912:
+ if (int_events & HOLDOVER_10_MASK)
+  alarm_events->pll_end_holdover++;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#995: FILE: drivers/char/tlclk.c:913:
+  alarm_events->pll_end_holdover++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#997: FILE: drivers/char/tlclk.c:915:
+ if (int_events & UNLOCK_01_MASK)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#997: FILE: drivers/char/tlclk.c:915:
+ if (int_events & UNLOCK_01_MASK)
+  alarm_events->pll_lost_sync++;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#998: FILE: drivers/char/tlclk.c:916:
+  alarm_events->pll_lost_sync++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1000: FILE: drivers/char/tlclk.c:918:
+ if (int_events & UNLOCK_10_MASK)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1000: FILE: drivers/char/tlclk.c:918:
+ if (int_events & UNLOCK_10_MASK)
+  alarm_events->pll_sync++;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1001: FILE: drivers/char/tlclk.c:919:
+  alarm_events->pll_sync++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1004: FILE: drivers/char/tlclk.c:922:
+ if (int_events & HOLDOVER_01_MASK) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1004: FILE: drivers/char/tlclk.c:922:
+ if (int_events & HOLDOVER_01_MASK) {
+  alarm_events->pll_holdover++;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1005: FILE: drivers/char/tlclk.c:923:
+  alarm_events->pll_holdover++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1007: FILE: drivers/char/tlclk.c:925:
+  switchover_timer.expires = jiffies + msecs_to_jiffies(10); /* TIMEOUT in ~10ms */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1008: FILE: drivers/char/tlclk.c:926:
+  switchover_timer.data = inb(TLCLK_REG1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1009: FILE: drivers/char/tlclk.c:927:
+  add_timer(&switchover_timer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1010: FILE: drivers/char/tlclk.c:928:
+ } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 2)
#1010: FILE: drivers/char/tlclk.c:928:
+ } else {
+  got_event = 1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1011: FILE: drivers/char/tlclk.c:929:
+  got_event = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1012: FILE: drivers/char/tlclk.c:930:
+  wake_up(&wq);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1013: FILE: drivers/char/tlclk.c:931:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1014: FILE: drivers/char/tlclk.c:932:
+ spin_unlock_irqrestore(&event_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1016: FILE: drivers/char/tlclk.c:934:
+ return IRQ_HANDLED;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1025: FILE: drivers/char/tlclk.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1044: FILE: drivers/char/tlclk.h:20:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1045: FILE: drivers/char/tlclk.h:21:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:CAMELCASE: Avoid CamelCase: <REF_CLK1_8kHz>
#1081: FILE: drivers/char/tlclk.h:57:
+#define REF_CLK1_8kHz  0x00

CHECK:CAMELCASE: Avoid CamelCase: <REF_CLK2_19_44MHz>
#1082: FILE: drivers/char/tlclk.h:58:
+#define REF_CLK2_19_44MHz 0x02

CHECK:CAMELCASE: Avoid CamelCase: <CLK_1_544MHz>
#1097: FILE: drivers/char/tlclk.h:73:
+#define CLK_1_544MHz 0x00

CHECK:CAMELCASE: Avoid CamelCase: <CLK_2_048MHz>
#1098: FILE: drivers/char/tlclk.h:74:
+#define CLK_2_048MHz 0x01

CHECK:CAMELCASE: Avoid CamelCase: <CLK_4_096MHz>
#1099: FILE: drivers/char/tlclk.h:75:
+#define CLK_4_096MHz 0x02

CHECK:CAMELCASE: Avoid CamelCase: <CLK_6_312MHz>
#1100: FILE: drivers/char/tlclk.h:76:
+#define CLK_6_312MHz 0x03

CHECK:CAMELCASE: Avoid CamelCase: <CLK_8_192MHz>
#1101: FILE: drivers/char/tlclk.h:77:
+#define CLK_8_192MHz 0x04

CHECK:CAMELCASE: Avoid CamelCase: <CLK_19_440MHz>
#1102: FILE: drivers/char/tlclk.h:78:
+#define CLK_19_440MHz 0x06

CHECK:CAMELCASE: Avoid CamelCase: <CLK_11_184MHz>
#1105: FILE: drivers/char/tlclk.h:81:
+#define CLK_11_184MHz 0x09

CHECK:CAMELCASE: Avoid CamelCase: <CLK_34_368MHz>
#1106: FILE: drivers/char/tlclk.h:82:
+#define CLK_34_368MHz 0x0b

CHECK:CAMELCASE: Avoid CamelCase: <CLK_44_736MHz>
#1107: FILE: drivers/char/tlclk.h:83:
+#define CLK_44_736MHz 0x0a

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1179: FILE: drivers/char/tlclk.h:155:
+ __u32 lost_clocks;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1180: FILE: drivers/char/tlclk.h:156:
+ __u32 lost_primary_clock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1181: FILE: drivers/char/tlclk.h:157:
+ __u32 lost_secondary_clock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1182: FILE: drivers/char/tlclk.h:158:
+ __u32 primary_clock_back;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1183: FILE: drivers/char/tlclk.h:159:
+ __u32 secondary_clock_back;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1184: FILE: drivers/char/tlclk.h:160:
+ __u32 switchover_primary;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1185: FILE: drivers/char/tlclk.h:161:
+ __u32 switchover_secondary;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1186: FILE: drivers/char/tlclk.h:162:
+ __u32 pll_holdover;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1187: FILE: drivers/char/tlclk.h:163:
+ __u32 pll_end_holdover;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1188: FILE: drivers/char/tlclk.h:164:
+ __u32 pll_lost_sync;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1189: FILE: drivers/char/tlclk.h:165:
+ __u32 pll_sync;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000156028.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 33 errors, 695 warnings, 67 checks, 1126 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000156028.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
