WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
> could you convert it to proper coding style (braces placement, identation)?

WARNING:TYPO_SPELLING: 'identation' may be misspelled - perhaps 'indentation'?
#36: 
> could you convert it to proper coding style (braces placement, identation)?
                                                                 ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#45: FILE: linux/lzf.h:1:
+#ifndef _LZF_H_

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#48: FILE: linux/lzf.h:4:
+unsigned int lzf_decompress (const void *const in_data,  unsigned int in_len, void *out_data, unsigned int out_len);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#48: FILE: linux/lzf.h:4:
+unsigned int lzf_decompress (const void *const in_data,  unsigned int in_len, void *out_data, unsigned int out_len);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#49: FILE: linux/lzf.h:5:
+unsigned int lzf_compress (const void *const in_data, unsigned int in_len, void *out_data, unsigned int out_len, void *hbuf);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#49: FILE: linux/lzf.h:5:
+unsigned int lzf_compress (const void *const in_data, unsigned int in_len, void *out_data, unsigned int out_len, void *hbuf);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#52: FILE: linux/lzf.h:8:
+void lzf_free(char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:PATCH_PREFIX: patch prefix 'lib' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#60: FILE: lzf_d.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#62: FILE: lzf_d.c:3:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#65: FILE: lzf_d.c:6:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#68: FILE: lzf_d.c:9:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#72: FILE: lzf_d.c:13:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#75: FILE: lzf_d.c:16:
+ * $

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#122: FILE: lzf_d.c:63:
+				*op++ = *ip++;
 				^

CHECK:SPACING: No space is necessary after a cast
#139: FILE: lzf_d.c:80:
+			if (ref < (u8 *) out_data)

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#146: FILE: lzf_d.c:87:
+				*op++ = *ref++;
 				^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#150: FILE: lzf_d.c:91:
+	while (op < out_end && ip < in_end);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#150: FILE: lzf_d.c:91:
+	}
+	while (op < out_end && ip < in_end);

while should follow the closing bracket on the same line::

  do {
          ...
  } while(something);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#152: FILE: lzf_d.c:93:
+	return op - (u8 *) out_data;

WARNING:PATCH_PREFIX: patch prefix 'lib' exists, appears to be a -p0 patch

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#162: FILE: Kconfig:33:
+config LZF
+	tristate "LZF Compress/Decompress Support"
+
 #
 # compression support is select'ed if needed
 #

Kconfig symbols should have a help text which fully describes
it.

WARNING:PATCH_PREFIX: patch prefix 'lib' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#173: FILE: lzf.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#174: FILE: lzf.c:2:
+ * lib/lzf.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#218: FILE: lzf.c:46:
+EXPORT_SYMBOL_GPL(lzf_compress);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#219: FILE: lzf.c:47:
+EXPORT_SYMBOL_GPL(lzf_decompress);

WARNING:LINE_SPACING: Missing a blank line after declarations
#224: FILE: lzf.c:52:
+	char *wk = vmalloc_32((1 << HLOG) * sizeof(char *));
+	return (wk);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#224: FILE: lzf.c:52:
+	return (wk);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#232: FILE: lzf.c:60:
+EXPORT_SYMBOL_GPL(lzf_new);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#233: FILE: lzf.c:61:
+EXPORT_SYMBOL_GPL(lzf_free);

WARNING:PATCH_PREFIX: patch prefix 'lib' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'lib' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#260: FILE: lzf_c.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#262: FILE: lzf_c.c:3:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#265: FILE: lzf_c.c:6:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#268: FILE: lzf_c.c:9:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#272: FILE: lzf_c.c:13:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#275: FILE: lzf_c.c:16:
+ * $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#306: FILE: lzf_c.c:47:
+#define FRST(p) (((p[0]) << 8) + p[1])

ERROR:SPACING: space required after that ',' (ctx:VxV)
#307: FILE: lzf_c.c:48:
+#define NEXT(v,p) (((v) << 8) + p[2])
               ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#307: FILE: lzf_c.c:48:
+#define NEXT(v,p) (((v) << 8) + p[2])

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#308: FILE: lzf_c.c:49:
+#define IDX(h) ((((h ^ (h << 5)) >> (3*8 - HLOG)) + h*3) & (HSIZE - 1))
                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#308: FILE: lzf_c.c:49:
+#define IDX(h) ((((h ^ (h << 5)) >> (3*8 - HLOG)) + h*3) & (HSIZE - 1))
                                                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'h' - possible side-effects?
#308: FILE: lzf_c.c:49:
+#define IDX(h) ((((h ^ (h << 5)) >> (3*8 - HLOG)) + h*3) & (HSIZE - 1))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'h' may be better as '(h)' to avoid precedence issues
#308: FILE: lzf_c.c:49:
+#define IDX(h) ((((h ^ (h << 5)) >> (3*8 - HLOG)) + h*3) & (HSIZE - 1))

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#316: FILE: lzf_c.c:57:
+#if 0

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#318: FILE: lzf_c.c:59:
+# define FRST(p) (p[0] << 5) ^ p[1]

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#318: FILE: lzf_c.c:59:
+# define FRST(p) (p[0] << 5) ^ p[1]

ERROR:SPACING: space required after that ',' (ctx:VxV)
#319: FILE: lzf_c.c:60:
+# define NEXT(v,p) ((v) << 5) ^ p[2]
                ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#319: FILE: lzf_c.c:60:
+# define NEXT(v,p) ((v) << 5) ^ p[2]

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#319: FILE: lzf_c.c:60:
+# define NEXT(v,p) ((v) << 5) ^ p[2]

CHECK:BIT_MACRO: Prefer using the BIT macro
#323: FILE: lzf_c.c:64:
+#define        MAX_LIT        (1 <<  5)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#324: FILE: lzf_c.c:65:
+#define        MAX_OFF        (1 << 13)

CHECK:SPACING: No space is necessary after a cast
#343: FILE: lzf_c.c:84:
+	u8 *op = (u8 *) out_data;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#368: FILE: lzf_c.c:109:
+			if (1

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#368: FILE: lzf_c.c:109:
+			if (1
[...]
+			    && *(u16 *) ref == *(u16 *) ip && ref[2] == ip[2]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#370: FILE: lzf_c.c:111:
+^I^I^I    && ref < ip^I/* the next test will actually take $

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#370: FILE: lzf_c.c:111:
+#if INIT_HTAB && !USE_MEMCPY
+			    && ref < ip	/* the next test will actually take 

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#371: FILE: lzf_c.c:112:
+			    && ref < ip	/* the next test will actually take 
+							   care of this, but this is faster */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#371: FILE: lzf_c.c:112:
+							   care of this, but this is faster */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#373: FILE: lzf_c.c:114:
+#endif
+			    && (off = ip - ref - 1) < MAX_OFF

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#374: FILE: lzf_c.c:115:
+			    && (off = ip - ref - 1) < MAX_OFF
+			    && ip + 4 < in_end && ref > (u8 *) in_data

CHECK:SPACING: No space is necessary after a cast
#374: FILE: lzf_c.c:115:
+			    && ip + 4 < in_end && ref > (u8 *) in_data

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#376: FILE: lzf_c.c:117:
+#if STRICT_ALIGN
+			    && ref[0] == ip[0]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#377: FILE: lzf_c.c:118:
+			    && ref[0] == ip[0]
+			    && ref[1] == ip[1]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#378: FILE: lzf_c.c:119:
+			    && ref[1] == ip[1]
+			    && ref[2] == ip[2]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#380: FILE: lzf_c.c:121:
+#else
+			    && *(u16 *) ref == *(u16 *) ip && ref[2] == ip[2]

CHECK:SPACING: No space is necessary after a cast
#380: FILE: lzf_c.c:121:
+			    && *(u16 *) ref == *(u16 *) ip && ref[2] == ip[2]

WARNING:LINE_SPACING: Missing a blank line after declarations
#386: FILE: lzf_c.c:127:
+				unsigned int maxlen = in_end - ip - len;
+				maxlen = maxlen > MAX_REF ? MAX_REF : maxlen;

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#399: FILE: lzf_c.c:140:
+						*op++ = ip[lit];
 						^

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#427: FILE: lzf_c.c:168:
+				}
+				while (len--);

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#450: FILE: lzf_c.c:191:
+				*op++ = ip[lit];
 				^

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#463: FILE: lzf_c.c:204:
+			*op++ = ip[lit];
 			^

CHECK:SPACING: No space is necessary after a cast
#467: FILE: lzf_c.c:208:
+	return op - (u8 *) out_data;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000227652.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 21 errors, 28 warnings, 28 checks, 398 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000227652.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
