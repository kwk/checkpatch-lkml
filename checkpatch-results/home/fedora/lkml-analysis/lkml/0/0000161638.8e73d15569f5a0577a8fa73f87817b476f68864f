WARNING:TYPO_SPELLING: 'resposible' may be misspelled - perhaps 'responsible'?
#31: 
a) the spi bus, which is registered in system and is resposible for
                                                     ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#93: FILE: drivers/spi/Kconfig:6:
+config SPI
+	default Y
+	tristate "SPI support"
+        default false
+	help
+	  Say Y if you need to enable SPI support on your kernel
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: drivers/spi/Kconfig:14:
+^Ibool "SPI debug output" $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#102: FILE: drivers/spi/Kconfig:15:
+^Idepends on SPI $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#103: FILE: drivers/spi/Kconfig:16:
+^Idefault false $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#104: FILE: drivers/spi/Kconfig:17:
+^Ihelp $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#107: FILE: drivers/spi/Kconfig:20:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#115: FILE: drivers/spi/Kconfig:28:
+^I  programs use the SPI bus. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#116: FILE: drivers/spi/Kconfig:29:
+^I  This support is also available as a module.  If so, the module $

WARNING:DEPRECATED_VARIABLE: Use of EXTRA_CFLAGS is deprecated, please use `ccflags-y instead.
#135: FILE: drivers/spi/Makefile:10:
+EXTRA_CFLAGS += -DDEBUG

EXTRA_{A,C,CPP,LD}FLAGS are deprecated and should be replaced by the new
flags added via commit f77bf01425b1 ("kbuild: introduce ccflags-y,
asflags-y and ldflags-y").

The following conversion scheme maybe used::

  EXTRA_AFLAGS    ->  asflags-y
  EXTRA_CFLAGS    ->  ccflags-y
  EXTRA_CPPFLAGS  ->  cppflags-y
  EXTRA_LDFLAGS   ->  ldflags-y

See:

  1. https://lore.kernel.org/lkml/20070930191054.GA15876@uranus.ravnborg.org/
  2. https://lore.kernel.org/lkml/1313384834-24433-12-git-send-email-lacombar@gmail.com/
  3. https://www.kernel.org/doc/html/latest/kbuild/makefiles.html#compilation-flags

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#143: FILE: drivers/spi/spi-core.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#144: FILE: drivers/spi/spi-core.c:2:
+ *  linux/drivers/spi/spi-core.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:SPACING: space prohibited after that open parenthesis '('
#169: FILE: drivers/spi/spi-core.c:27:
+static LIST_HEAD( spi_busses );

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#169: FILE: drivers/spi/spi-core.c:27:
+static LIST_HEAD( spi_busses );

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#179: FILE: drivers/spi/spi-core.c:37:
+		printk(KERN_ERR

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#181: FILE: drivers/spi/spi-core.c:39:
+		       __FUNCTION__);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#186: FILE: drivers/spi/spi-core.c:44:
+	if (NULL == spidrv->supported_ids) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#189: FILE: drivers/spi/spi-core.c:47:
+		     __FUNCTION__);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#199: FILE: drivers/spi/spi-core.c:57:
+		if (0 == strncmp(*id, SPI_ID_ANY, strlen(SPI_ID_ANY))) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#206: FILE: drivers/spi/spi-core.c:64:
+		if (0 == strcmp(*id, spidev->dev.bus_id)) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#215: FILE: drivers/spi/spi-core.c:73:
+	pr_debug("%s: no match\n ", __FUNCTION__);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: drivers/spi/spi-core.c:75:
+spi_match_done:^I$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#221: FILE: drivers/spi/spi-core.c:79:
+int spi_bus_register( struct spi_bus* bus, char* name )

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#221: FILE: drivers/spi/spi-core.c:79:
+int spi_bus_register( struct spi_bus* bus, char* name )

ERROR:SPACING: space prohibited after that open parenthesis '('
#221: FILE: drivers/spi/spi-core.c:79:
+int spi_bus_register( struct spi_bus* bus, char* name )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#221: FILE: drivers/spi/spi-core.c:79:
+int spi_bus_register( struct spi_bus* bus, char* name )

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#224: FILE: drivers/spi/spi-core.c:82:
+	static int count = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:SPACING: space prohibited after that open square bracket '['
#225: FILE: drivers/spi/spi-core.c:83:
+	char busname[ BUS_ID_SIZE ];

ERROR:SPACING: space prohibited before that close square bracket ']'
#225: FILE: drivers/spi/spi-core.c:83:
+	char busname[ BUS_ID_SIZE ];

ERROR:SPACING: space prohibited after that open square bracket '['
#226: FILE: drivers/spi/spi-core.c:84:
+	char fullname[ BUS_ID_SIZE ];

ERROR:SPACING: space prohibited before that close square bracket ']'
#226: FILE: drivers/spi/spi-core.c:84:
+	char fullname[ BUS_ID_SIZE ];

ERROR:TRAILING_WHITESPACE: trailing whitespace
#228: FILE: drivers/spi/spi-core.c:86:
+^IENTER();^I$

ERROR:SPACING: space prohibited after that open parenthesis '('
#229: FILE: drivers/spi/spi-core.c:87:
+	if( bus ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#229: FILE: drivers/spi/spi-core.c:87:
+	if( bus ) {

ERROR:SPACING: space required before the open parenthesis '('
#229: FILE: drivers/spi/spi-core.c:87:
+	if( bus ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#230: FILE: drivers/spi/spi-core.c:88:
+		init_MUTEX( &bus->lock );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#230: FILE: drivers/spi/spi-core.c:88:
+		init_MUTEX( &bus->lock );

ERROR:SPACING: space prohibited after that open parenthesis '('
#235: FILE: drivers/spi/spi-core.c:93:
+		strncpy( busname, name ? name : "SPI", sizeof( busname ) );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#235: FILE: drivers/spi/spi-core.c:93:
+		strncpy( busname, name ? name : "SPI", sizeof( busname ) );

ERROR:SPACING: space prohibited after that open parenthesis '('
#237: FILE: drivers/spi/spi-core.c:95:
+		sprintf( fullname, "%s_%02d", busname, bus->platform_device.id);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#238: FILE: drivers/spi/spi-core.c:96:
+		bus->the_bus.name = kmalloc( strlen( fullname )+1, GFP_KERNEL );
 		                                               ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#238: FILE: drivers/spi/spi-core.c:96:
+		bus->the_bus.name = kmalloc( strlen( fullname )+1, GFP_KERNEL );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#238: FILE: drivers/spi/spi-core.c:96:
+		bus->the_bus.name = kmalloc( strlen( fullname )+1, GFP_KERNEL );

ERROR:SPACING: space prohibited after that open parenthesis '('
#239: FILE: drivers/spi/spi-core.c:97:
+		if( bus->the_bus.name ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#239: FILE: drivers/spi/spi-core.c:97:
+		if( bus->the_bus.name ) {

ERROR:SPACING: space required before the open parenthesis '('
#239: FILE: drivers/spi/spi-core.c:97:
+		if( bus->the_bus.name ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#239: FILE: drivers/spi/spi-core.c:97:
+		if( bus->the_bus.name ) {
+			strcpy( bus->the_bus.name, fullname );
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#240: FILE: drivers/spi/spi-core.c:98:
+			strcpy( bus->the_bus.name, fullname );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#240: FILE: drivers/spi/spi-core.c:98:
+			strcpy( bus->the_bus.name, fullname );

ERROR:SPACING: space prohibited after that open parenthesis '('
#243: FILE: drivers/spi/spi-core.c:101:
+		err = bus_register( &bus->the_bus );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#243: FILE: drivers/spi/spi-core.c:101:
+		err = bus_register( &bus->the_bus );

ERROR:SPACING: space prohibited after that open parenthesis '('
#244: FILE: drivers/spi/spi-core.c:102:
+		if( err ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#244: FILE: drivers/spi/spi-core.c:102:
+		if( err ) {

ERROR:SPACING: space required before the open parenthesis '('
#244: FILE: drivers/spi/spi-core.c:102:
+		if( err ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#244: FILE: drivers/spi/spi-core.c:102:
+		if( err ) {
+			goto out;
+		}

ERROR:SPACING: space prohibited after that open parenthesis '('
#247: FILE: drivers/spi/spi-core.c:105:
+		list_add_tail( &bus->bus_list, &spi_busses );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#247: FILE: drivers/spi/spi-core.c:105:
+		list_add_tail( &bus->bus_list, &spi_busses );

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#248: FILE: drivers/spi/spi-core.c:106:
+		bus->platform_device.name = kmalloc( strlen( busname )+1, GFP_KERNEL );
 		                                                      ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#248: FILE: drivers/spi/spi-core.c:106:
+		bus->platform_device.name = kmalloc( strlen( busname )+1, GFP_KERNEL );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#248: FILE: drivers/spi/spi-core.c:106:
+		bus->platform_device.name = kmalloc( strlen( busname )+1, GFP_KERNEL );

ERROR:SPACING: space prohibited after that open parenthesis '('
#249: FILE: drivers/spi/spi-core.c:107:
+		if( bus->platform_device.name ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#249: FILE: drivers/spi/spi-core.c:107:
+		if( bus->platform_device.name ) {

ERROR:SPACING: space required before the open parenthesis '('
#249: FILE: drivers/spi/spi-core.c:107:
+		if( bus->platform_device.name ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#249: FILE: drivers/spi/spi-core.c:107:
+		if( bus->platform_device.name ) {
+			strcpy( bus->platform_device.name, busname );
+		}

ERROR:SPACING: space prohibited after that open parenthesis '('
#250: FILE: drivers/spi/spi-core.c:108:
+			strcpy( bus->platform_device.name, busname );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#250: FILE: drivers/spi/spi-core.c:108:
+			strcpy( bus->platform_device.name, busname );

ERROR:SPACING: space prohibited after that open parenthesis '('
#252: FILE: drivers/spi/spi-core.c:110:
+		err = platform_device_register( &bus->platform_device );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#252: FILE: drivers/spi/spi-core.c:110:
+		err = platform_device_register( &bus->platform_device );

ERROR:SPACING: space prohibited after that open parenthesis '('
#255: FILE: drivers/spi/spi-core.c:113:
+	if( err ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#255: FILE: drivers/spi/spi-core.c:113:
+	if( err ) {

ERROR:SPACING: space required before the open parenthesis '('
#255: FILE: drivers/spi/spi-core.c:113:
+	if( err ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#256: FILE: drivers/spi/spi-core.c:114:
+		if( bus->the_bus.name ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#256: FILE: drivers/spi/spi-core.c:114:
+		if( bus->the_bus.name ) {

ERROR:SPACING: space required before the open parenthesis '('
#256: FILE: drivers/spi/spi-core.c:114:
+		if( bus->the_bus.name ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#256: FILE: drivers/spi/spi-core.c:114:
+		if( bus->the_bus.name ) {
+			kfree( bus->the_bus.name );
+		}

ERROR:SPACING: space prohibited after that open parenthesis '('
#257: FILE: drivers/spi/spi-core.c:115:
+			kfree( bus->the_bus.name );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#257: FILE: drivers/spi/spi-core.c:115:
+			kfree( bus->the_bus.name );

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#257: FILE: drivers/spi/spi-core.c:115:
+		if( bus->the_bus.name ) {
+			kfree( bus->the_bus.name );

ERROR:SPACING: space prohibited after that open parenthesis '('
#259: FILE: drivers/spi/spi-core.c:117:
+		if( bus->platform_device.name ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#259: FILE: drivers/spi/spi-core.c:117:
+		if( bus->platform_device.name ) {

ERROR:SPACING: space required before the open parenthesis '('
#259: FILE: drivers/spi/spi-core.c:117:
+		if( bus->platform_device.name ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#259: FILE: drivers/spi/spi-core.c:117:
+		if( bus->platform_device.name ) {
+			kfree( bus->platform_device.name );
+		}

ERROR:SPACING: space prohibited after that open parenthesis '('
#260: FILE: drivers/spi/spi-core.c:118:
+			kfree( bus->platform_device.name );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#260: FILE: drivers/spi/spi-core.c:118:
+			kfree( bus->platform_device.name );

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#260: FILE: drivers/spi/spi-core.c:118:
+		if( bus->platform_device.name ) {
+			kfree( bus->platform_device.name );

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#267: FILE: drivers/spi/spi-core.c:125:
+void spi_bus_unregister( struct spi_bus* bus )

ERROR:SPACING: space prohibited after that open parenthesis '('
#267: FILE: drivers/spi/spi-core.c:125:
+void spi_bus_unregister( struct spi_bus* bus )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#267: FILE: drivers/spi/spi-core.c:125:
+void spi_bus_unregister( struct spi_bus* bus )

ERROR:SPACING: space prohibited after that open parenthesis '('
#269: FILE: drivers/spi/spi-core.c:127:
+	if( bus ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#269: FILE: drivers/spi/spi-core.c:127:
+	if( bus ) {

ERROR:SPACING: space required before the open parenthesis '('
#269: FILE: drivers/spi/spi-core.c:127:
+	if( bus ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#270: FILE: drivers/spi/spi-core.c:128:
+		platform_device_unregister( &bus->platform_device );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#270: FILE: drivers/spi/spi-core.c:128:
+		platform_device_unregister( &bus->platform_device );

ERROR:SPACING: space prohibited after that open parenthesis '('
#271: FILE: drivers/spi/spi-core.c:129:
+		if( bus->platform_device.name ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#271: FILE: drivers/spi/spi-core.c:129:
+		if( bus->platform_device.name ) {

ERROR:SPACING: space required before the open parenthesis '('
#271: FILE: drivers/spi/spi-core.c:129:
+		if( bus->platform_device.name ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#271: FILE: drivers/spi/spi-core.c:129:
+		if( bus->platform_device.name ) {
+			kfree( bus->platform_device.name );
+		}

ERROR:SPACING: space prohibited after that open parenthesis '('
#272: FILE: drivers/spi/spi-core.c:130:
+			kfree( bus->platform_device.name );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#272: FILE: drivers/spi/spi-core.c:130:
+			kfree( bus->platform_device.name );

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#272: FILE: drivers/spi/spi-core.c:130:
+		if( bus->platform_device.name ) {
+			kfree( bus->platform_device.name );

ERROR:SPACING: space prohibited after that open parenthesis '('
#274: FILE: drivers/spi/spi-core.c:132:
+		bus_unregister( &bus->the_bus );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#274: FILE: drivers/spi/spi-core.c:132:
+		bus_unregister( &bus->the_bus );

ERROR:SPACING: space prohibited after that open parenthesis '('
#275: FILE: drivers/spi/spi-core.c:133:
+		if( bus->the_bus.name ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#275: FILE: drivers/spi/spi-core.c:133:
+		if( bus->the_bus.name ) {

ERROR:SPACING: space required before the open parenthesis '('
#275: FILE: drivers/spi/spi-core.c:133:
+		if( bus->the_bus.name ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#275: FILE: drivers/spi/spi-core.c:133:
+		if( bus->the_bus.name ) {
+			kfree( bus->the_bus.name );
+		}

ERROR:SPACING: space prohibited after that open parenthesis '('
#276: FILE: drivers/spi/spi-core.c:134:
+			kfree( bus->the_bus.name );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#276: FILE: drivers/spi/spi-core.c:134:
+			kfree( bus->the_bus.name );

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#276: FILE: drivers/spi/spi-core.c:134:
+		if( bus->the_bus.name ) {
+			kfree( bus->the_bus.name );

ERROR:SPACING: space prohibited after that open parenthesis '('
#278: FILE: drivers/spi/spi-core.c:136:
+		list_del_init( &bus->bus_list );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#278: FILE: drivers/spi/spi-core.c:136:
+		list_del_init( &bus->bus_list );

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#291: FILE: drivers/spi/spi-core.c:149:
+struct spi_bus* spi_bus_find( char* id )

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#291: FILE: drivers/spi/spi-core.c:149:
+struct spi_bus* spi_bus_find( char* id )

ERROR:SPACING: space prohibited after that open parenthesis '('
#291: FILE: drivers/spi/spi-core.c:149:
+struct spi_bus* spi_bus_find( char* id )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#291: FILE: drivers/spi/spi-core.c:149:
+struct spi_bus* spi_bus_find( char* id )

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#293: FILE: drivers/spi/spi-core.c:151:
+	struct bus_type* the_bus = find_bus( id );

ERROR:SPACING: space prohibited after that open parenthesis '('
#293: FILE: drivers/spi/spi-core.c:151:
+	struct bus_type* the_bus = find_bus( id );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#293: FILE: drivers/spi/spi-core.c:151:
+	struct bus_type* the_bus = find_bus( id );

ERROR:SPACING: space prohibited after that open parenthesis '('
#295: FILE: drivers/spi/spi-core.c:153:
+	return the_bus ? container_of( the_bus, struct spi_bus, the_bus ) : NULL;

ERROR:SPACING: space prohibited before that close parenthesis ')'
#295: FILE: drivers/spi/spi-core.c:153:
+	return the_bus ? container_of( the_bus, struct spi_bus, the_bus ) : NULL;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#298: FILE: drivers/spi/spi-core.c:156:
+EXPORT_SYMBOL( spi_bus_find );

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:SPACING: space prohibited after that open parenthesis '('
#298: FILE: drivers/spi/spi-core.c:156:
+EXPORT_SYMBOL( spi_bus_find );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#298: FILE: drivers/spi/spi-core.c:156:
+EXPORT_SYMBOL( spi_bus_find );

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#299: FILE: drivers/spi/spi-core.c:157:
+int spi_device_add( struct spi_bus* bus, struct spi_device *dev, char* name)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#299: FILE: drivers/spi/spi-core.c:157:
+int spi_device_add( struct spi_bus* bus, struct spi_device *dev, char* name)

ERROR:SPACING: space prohibited after that open parenthesis '('
#299: FILE: drivers/spi/spi-core.c:157:
+int spi_device_add( struct spi_bus* bus, struct spi_device *dev, char* name)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev->dev.parent"
#305: FILE: drivers/spi/spi-core.c:163:
+	if (dev->dev.parent == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space prohibited after that open parenthesis '('
#307: FILE: drivers/spi/spi-core.c:165:
+	if( name ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#307: FILE: drivers/spi/spi-core.c:165:
+	if( name ) {

ERROR:SPACING: space required before the open parenthesis '('
#307: FILE: drivers/spi/spi-core.c:165:
+	if( name ) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#307: FILE: drivers/spi/spi-core.c:165:
+	if( name ) {
[...]
+	} else {
[...]

ERROR:SPACING: space prohibited after that open parenthesis '('
#308: FILE: drivers/spi/spi-core.c:166:
+		strncpy( dev->dev.bus_id, name, sizeof( dev->dev.bus_id ) );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#308: FILE: drivers/spi/spi-core.c:166:
+		strncpy( dev->dev.bus_id, name, sizeof( dev->dev.bus_id ) );

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#310: FILE: drivers/spi/spi-core.c:168:
+		snprintf( dev->dev.bus_id, sizeof( dev->dev.bus_id ), "DEV%p_%s", dev, bus->the_bus.name );

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space prohibited after that open parenthesis '('
#310: FILE: drivers/spi/spi-core.c:168:
+		snprintf( dev->dev.bus_id, sizeof( dev->dev.bus_id ), "DEV%p_%s", dev, bus->the_bus.name );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#310: FILE: drivers/spi/spi-core.c:168:
+		snprintf( dev->dev.bus_id, sizeof( dev->dev.bus_id ), "DEV%p_%s", dev, bus->the_bus.name );

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%p_'
#310: FILE: drivers/spi/spi-core.c:168:
+		snprintf( dev->dev.bus_id, sizeof( dev->dev.bus_id ), "DEV%p_%s", dev, bus->the_bus.name );

ERROR:SPACING: space prohibited after that open parenthesis '('
#313: FILE: drivers/spi/spi-core.c:171:
+	init_MUTEX( &dev->lock );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#313: FILE: drivers/spi/spi-core.c:171:
+	init_MUTEX( &dev->lock );

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#334: FILE: drivers/spi/spi-core.c:192:
+int spi_do_probe( struct device* dev, void* device_driver )

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#334: FILE: drivers/spi/spi-core.c:192:
+int spi_do_probe( struct device* dev, void* device_driver )

ERROR:SPACING: space prohibited after that open parenthesis '('
#334: FILE: drivers/spi/spi-core.c:192:
+int spi_do_probe( struct device* dev, void* device_driver )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#334: FILE: drivers/spi/spi-core.c:192:
+int spi_do_probe( struct device* dev, void* device_driver )

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#336: FILE: drivers/spi/spi-core.c:194:
+	struct device_driver* drv = device_driver;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#337: FILE: drivers/spi/spi-core.c:195:
+^I$

ERROR:SPACING: space prohibited after that open parenthesis '('
#338: FILE: drivers/spi/spi-core.c:196:
+	if( dev->bus->match && !dev->bus->match( dev, drv ) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#338: FILE: drivers/spi/spi-core.c:196:
+	if( dev->bus->match && !dev->bus->match( dev, drv ) ) {

ERROR:SPACING: space required before the open parenthesis '('
#338: FILE: drivers/spi/spi-core.c:196:
+	if( dev->bus->match && !dev->bus->match( dev, drv ) ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#338: FILE: drivers/spi/spi-core.c:196:
+	if( dev->bus->match && !dev->bus->match( dev, drv ) ) {
+		goto do_probe_out;
+	}

ERROR:SPACING: space prohibited after that open parenthesis '('
#341: FILE: drivers/spi/spi-core.c:199:
+	if( drv->probe ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#341: FILE: drivers/spi/spi-core.c:199:
+	if( drv->probe ) {

ERROR:SPACING: space required before the open parenthesis '('
#341: FILE: drivers/spi/spi-core.c:199:
+	if( drv->probe ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#342: FILE: drivers/spi/spi-core.c:200:
+		if( 0 == drv->probe( dev ) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#342: FILE: drivers/spi/spi-core.c:200:
+		if( 0 == drv->probe( dev ) ) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#342: FILE: drivers/spi/spi-core.c:200:
+		if( 0 == drv->probe( dev ) ) {

ERROR:SPACING: space required before the open parenthesis '('
#342: FILE: drivers/spi/spi-core.c:200:
+		if( 0 == drv->probe( dev ) ) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#344: FILE: drivers/spi/spi-core.c:202:
+			device_bind_driver( dev );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#344: FILE: drivers/spi/spi-core.c:202:
+			device_bind_driver( dev );

ERROR:TRAILING_WHITESPACE: trailing whitespace
#345: FILE: drivers/spi/spi-core.c:203:
+^I^I}^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#347: FILE: drivers/spi/spi-core.c:205:
+do_probe_out:^I$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#350: FILE: drivers/spi/spi-core.c:208:
+}
+int spi_driver_add( struct spi_driver* drv )

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#350: FILE: drivers/spi/spi-core.c:208:
+int spi_driver_add( struct spi_driver* drv )

ERROR:SPACING: space prohibited after that open parenthesis '('
#350: FILE: drivers/spi/spi-core.c:208:
+int spi_driver_add( struct spi_driver* drv )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#350: FILE: drivers/spi/spi-core.c:208:
+int spi_driver_add( struct spi_driver* drv )

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#353: FILE: drivers/spi/spi-core.c:211:
+	struct list_head* entry;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#354: FILE: drivers/spi/spi-core.c:212:
+       $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: drivers/spi/spi-core.c:212:
+       $

ERROR:SPACING: space prohibited after that open parenthesis '('
#355: FILE: drivers/spi/spi-core.c:213:
+	err = driver_register( &drv->driver );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#355: FILE: drivers/spi/spi-core.c:213:
+	err = driver_register( &drv->driver );

ERROR:SPACING: space prohibited after that open parenthesis '('
#356: FILE: drivers/spi/spi-core.c:214:
+	if( err ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#356: FILE: drivers/spi/spi-core.c:214:
+	if( err ) {

ERROR:SPACING: space required before the open parenthesis '('
#356: FILE: drivers/spi/spi-core.c:214:
+	if( err ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#356: FILE: drivers/spi/spi-core.c:214:
+	if( err ) {
+		goto out;
+	}

ERROR:SPACING: space prohibited after that open parenthesis '('
#361: FILE: drivers/spi/spi-core.c:219:
+	if( err ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#361: FILE: drivers/spi/spi-core.c:219:
+	if( err ) {

ERROR:SPACING: space required before the open parenthesis '('
#361: FILE: drivers/spi/spi-core.c:219:
+	if( err ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#361: FILE: drivers/spi/spi-core.c:219:
+	if( err ) {
+		goto out;
+	}

ERROR:SPACING: space prohibited after that open parenthesis '('
#365: FILE: drivers/spi/spi-core.c:223:
+	if( err ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#365: FILE: drivers/spi/spi-core.c:223:
+	if( err ) {

ERROR:SPACING: space required before the open parenthesis '('
#365: FILE: drivers/spi/spi-core.c:223:
+	if( err ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#365: FILE: drivers/spi/spi-core.c:223:
+	if( err ) {
+		goto out;
+	}

ERROR:SPACING: space prohibited after that open parenthesis '('
#368: FILE: drivers/spi/spi-core.c:226:
+	list_for_each( entry, &spi_busses ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#368: FILE: drivers/spi/spi-core.c:226:
+	list_for_each( entry, &spi_busses ) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#369: FILE: drivers/spi/spi-core.c:227:
+		struct spi_bus* bus = container_of( entry, struct spi_bus, bus_list );

ERROR:SPACING: space prohibited after that open parenthesis '('
#369: FILE: drivers/spi/spi-core.c:227:
+		struct spi_bus* bus = container_of( entry, struct spi_bus, bus_list );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#369: FILE: drivers/spi/spi-core.c:227:
+		struct spi_bus* bus = container_of( entry, struct spi_bus, bus_list );

WARNING:LINE_SPACING: Missing a blank line after declarations
#370: FILE: drivers/spi/spi-core.c:228:
+		struct spi_bus* bus = container_of( entry, struct spi_bus, bus_list );
+		bus_for_each_dev( &bus->the_bus, NULL, &drv->driver, spi_do_probe );

ERROR:SPACING: space prohibited after that open parenthesis '('
#370: FILE: drivers/spi/spi-core.c:228:
+		bus_for_each_dev( &bus->the_bus, NULL, &drv->driver, spi_do_probe );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#370: FILE: drivers/spi/spi-core.c:228:
+		bus_for_each_dev( &bus->the_bus, NULL, &drv->driver, spi_do_probe );

ERROR:SPACING: space prohibited after that open parenthesis '('
#372: FILE: drivers/spi/spi-core.c:230:
+	module_add_driver( drv->driver.owner, &drv->driver );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#372: FILE: drivers/spi/spi-core.c:230:
+	module_add_driver( drv->driver.owner, &drv->driver );

ERROR:TRAILING_WHITESPACE: trailing whitespace
#374: FILE: drivers/spi/spi-core.c:232:
+^Ireturn err;^I$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#377: FILE: drivers/spi/spi-core.c:235:
+void spi_driver_del( struct spi_driver* drv )

ERROR:SPACING: space prohibited after that open parenthesis '('
#377: FILE: drivers/spi/spi-core.c:235:
+void spi_driver_del( struct spi_driver* drv )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#377: FILE: drivers/spi/spi-core.c:235:
+void spi_driver_del( struct spi_driver* drv )

ERROR:SPACING: space prohibited after that open parenthesis '('
#379: FILE: drivers/spi/spi-core.c:237:
+	driver_unregister( &drv->driver );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#379: FILE: drivers/spi/spi-core.c:237:
+	driver_unregister( &drv->driver );

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#381: FILE: drivers/spi/spi-core.c:239:
+}
+/**

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#394: FILE: drivers/spi/spi-core.c:252:
+	int ret = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#395: FILE: drivers/spi/spi-core.c:253:
+	struct spi_bus* bus;

ERROR:SPACING: space prohibited after that open parenthesis '('
#397: FILE: drivers/spi/spi-core.c:255:
+	bus = TO_SPI_BUS( dev->dev.bus );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#397: FILE: drivers/spi/spi-core.c:255:
+	bus = TO_SPI_BUS( dev->dev.bus );

ERROR:SPACING: space prohibited after that open parenthesis '('
#400: FILE: drivers/spi/spi-core.c:258:
+		down( &dev->lock );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#400: FILE: drivers/spi/spi-core.c:258:
+		down( &dev->lock );

ERROR:SPACING: space prohibited after that open parenthesis '('
#459: FILE: drivers/spi/spi-core.c:317:
+MODULE_LICENSE( "GPL" );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#459: FILE: drivers/spi/spi-core.c:317:
+MODULE_LICENSE( "GPL" );

ERROR:SPACING: space prohibited after that open parenthesis '('
#460: FILE: drivers/spi/spi-core.c:318:
+MODULE_AUTHOR( "dmitry pervushin <dpervushin@ru.mvista.com>" );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#460: FILE: drivers/spi/spi-core.c:318:
+MODULE_AUTHOR( "dmitry pervushin <dpervushin@ru.mvista.com>" );

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#462: FILE: drivers/spi/spi-core.c:320:
+EXPORT_SYMBOL_GPL(spi_driver_add);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#463: FILE: drivers/spi/spi-core.c:321:
+EXPORT_SYMBOL_GPL(spi_driver_del);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#464: FILE: drivers/spi/spi-core.c:322:
+EXPORT_SYMBOL_GPL(spi_device_add);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#465: FILE: drivers/spi/spi-core.c:323:
+EXPORT_SYMBOL_GPL(spi_device_del);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#466: FILE: drivers/spi/spi-core.c:324:
+EXPORT_SYMBOL_GPL(spi_bus_match);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#467: FILE: drivers/spi/spi-core.c:325:
+EXPORT_SYMBOL_GPL(spi_transfer);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#468: FILE: drivers/spi/spi-core.c:326:
+EXPORT_SYMBOL_GPL(spi_write);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#469: FILE: drivers/spi/spi-core.c:327:
+EXPORT_SYMBOL_GPL(spi_read);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#475: FILE: drivers/spi/spi-dev.c:1:
+/*#ifdef CONFIG_DEVFS_FS^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#475: FILE: drivers/spi/spi-dev.c:1:
+/*#ifdef CONFIG_DEVFS_FS	

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#476: FILE: drivers/spi/spi-dev.c:2:
+/*#ifdef CONFIG_DEVFS_FS	
+

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#477: FILE: drivers/spi/spi-dev.c:3:
+    spi-dev.c - spi-bus driver, char device interface  $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#493: FILE: drivers/spi/spi-dev.c:19:
+    along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#494: FILE: drivers/spi/spi-dev.c:20:
+    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#500: FILE: drivers/spi/spi-dev.c:26:
+/* Note that this is a complete rewrite of Simon Vogl's i2c-dev module.
+   But I have used so much of his original code and ideas that it seems

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#501: FILE: drivers/spi/spi-dev.c:27:
+   only fair to recognize him as co-author -- Frodo */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#503: FILE: drivers/spi/spi-dev.c:29:
+/* The devfs code is contributed by Philipp Matthias Hahn $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#504: FILE: drivers/spi/spi-dev.c:30:
+/* The devfs code is contributed by Philipp Matthias Hahn 
+   <pmhahn@titan.lahn.de> */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#504: FILE: drivers/spi/spi-dev.c:30:
+   <pmhahn@titan.lahn.de> */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#506: FILE: drivers/spi/spi-dev.c:32:
+/* Modifications to allow work with current spi-core by $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#507: FILE: drivers/spi/spi-dev.c:33:
+/* Modifications to allow work with current spi-core by 
+   Andrey Ivolgin <aivolgin@ru.mvista.com>, Sep 2004

ERROR:TRAILING_WHITESPACE: trailing whitespace
#511: FILE: drivers/spi/spi-dev.c:37:
+   by Vitaly Wool <vwool@ru.mvista.com> (C) 2004 MontaVista Software, Inc. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#511: FILE: drivers/spi/spi-dev.c:37:
+/* devfs code corrected to support automatic device addition/deletion
+   by Vitaly Wool <vwool@ru.mvista.com> (C) 2004 MontaVista Software, Inc. 

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#514: FILE: drivers/spi/spi-dev.c:40:
+/* $Id: common_spi_core-2.patch,v 1.1.2.6 2005/07/15 07:24:40 tpoynor Exp $ */

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#527: FILE: drivers/spi/spi-dev.c:53:
+#include <asm/uaccess.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#536: FILE: drivers/spi/spi-dev.c:62:
+			   loff_t * offset);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#538: FILE: drivers/spi/spi-dev.c:64:
+			    loff_t * offset);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#549: FILE: drivers/spi/spi-dev.c:75:
+static struct file_operations spidev_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#575: FILE: drivers/spi/spi-dev.c:101:
+	if (NULL == dev) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#576: FILE: drivers/spi/spi-dev.c:102:
+		printk(KERN_ERR "%s: probing the NULL device!\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#576: FILE: drivers/spi/spi-dev.c:102:
+		printk(KERN_ERR "%s: probing the NULL device!\n", __FUNCTION__);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*drvdata)...) over kmalloc(sizeof(struct spidev_driver_data)...)
#580: FILE: drivers/spi/spi-dev.c:106:
+	drvdata = kmalloc(sizeof(struct spidev_driver_data), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#581: FILE: drivers/spi/spi-dev.c:107:
+	if (NULL == drvdata) {

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#582: FILE: drivers/spi/spi-dev.c:108:
+	if (NULL == drvdata) {
+		pr_debug("%s: allocating drvdata failed\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#582: FILE: drivers/spi/spi-dev.c:108:
+		pr_debug("%s: allocating drvdata failed\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#588: FILE: drivers/spi/spi-dev.c:114:
+		 __FUNCTION__, dev, drvdata->minor);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#591: FILE: drivers/spi/spi-dev.c:117:
+^Iclass_simple_device_add( spidev_class, $

ERROR:SPACING: space prohibited after that open parenthesis '('
#591: FILE: drivers/spi/spi-dev.c:117:
+	class_simple_device_add( spidev_class, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#592: FILE: drivers/spi/spi-dev.c:118:
+	class_simple_device_add( spidev_class, 
+			 MKDEV( SPI_MAJOR, drvdata->minor ),

ERROR:SPACING: space prohibited after that open parenthesis '('
#592: FILE: drivers/spi/spi-dev.c:118:
+			 MKDEV( SPI_MAJOR, drvdata->minor ),

ERROR:SPACING: space prohibited before that close parenthesis ')'
#592: FILE: drivers/spi/spi-dev.c:118:
+			 MKDEV( SPI_MAJOR, drvdata->minor ),

ERROR:CODE_INDENT: code indent should use tabs where possible
#593: FILE: drivers/spi/spi-dev.c:119:
+^I^I         NULL, "spi%d", drvdata->minor );$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space prohibited before that close parenthesis ')'
#593: FILE: drivers/spi/spi-dev.c:119:
+		         NULL, "spi%d", drvdata->minor );

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#595: FILE: drivers/spi/spi-dev.c:121:
+	pr_debug("%s: Registered as minor %d\n", __FUNCTION__, drvdata->minor);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#603: FILE: drivers/spi/spi-dev.c:129:
+	if (NULL == dev) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#603: FILE: drivers/spi/spi-dev.c:129:
+	if (NULL == dev) {
+		printk(KERN_ERR "%s: removing the NULL device\n", __FUNCTION__);
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#604: FILE: drivers/spi/spi-dev.c:130:
+		printk(KERN_ERR "%s: removing the NULL device\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#604: FILE: drivers/spi/spi-dev.c:130:
+		printk(KERN_ERR "%s: removing the NULL device\n", __FUNCTION__);

CHECK:SPACING: No space is necessary after a cast
#607: FILE: drivers/spi/spi-dev.c:133:
+	drvdata = (struct spidev_driver_data *) dev_get_drvdata(dev);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#608: FILE: drivers/spi/spi-dev.c:134:
+	if (NULL == drvdata) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#609: FILE: drivers/spi/spi-dev.c:135:
+		pr_debug("%s: oops, drvdata is NULL !\n", __FUNCTION__);

ERROR:SPACING: space prohibited after that open parenthesis '('
#612: FILE: drivers/spi/spi-dev.c:138:
+	class_simple_device_remove( MKDEV( SPI_MAJOR, drvdata->minor ) );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#612: FILE: drivers/spi/spi-dev.c:138:
+	class_simple_device_remove( MKDEV( SPI_MAJOR, drvdata->minor ) );

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#614: FILE: drivers/spi/spi-dev.c:140:
+	pr_debug("%s: device removed\n", __FUNCTION__);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#619: FILE: drivers/spi/spi-dev.c:145:
+			   loff_t * offset)

WARNING:SPACING: Unnecessary space before function pointer arguments
#624: FILE: drivers/spi/spi-dev.c:150:
+	unsigned long (*cpy_to_user) (void *to_user, const void *from,

WARNING:SPACING: Unnecessary space before function pointer arguments
#626: FILE: drivers/spi/spi-dev.c:152:
+	void *(*alloc) (size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#626: FILE: drivers/spi/spi-dev.c:152:
+	void *(*alloc) (size_t, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#626: FILE: drivers/spi/spi-dev.c:152:
+	void *(*alloc) (size_t, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#627: FILE: drivers/spi/spi-dev.c:153:
+	void (*free) (const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#627: FILE: drivers/spi/spi-dev.c:153:
+	void (*free) (const void *);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp"
#638: FILE: drivers/spi/spi-dev.c:164:
+	if (tmp == NULL)

ERROR:SPACING: space prohibited after that open parenthesis '('
#641: FILE: drivers/spi/spi-dev.c:167:
+	ret = spi_read( dev, 0, tmp, count);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#649: FILE: drivers/spi/spi-dev.c:175:
+			    loff_t * offset)

WARNING:SPACING: Unnecessary space before function pointer arguments
#654: FILE: drivers/spi/spi-dev.c:180:
+	unsigned long (*cpy_from_user) (void *to, const void *from_user,

WARNING:SPACING: Unnecessary space before function pointer arguments
#656: FILE: drivers/spi/spi-dev.c:182:
+	void *(*alloc) (size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#656: FILE: drivers/spi/spi-dev.c:182:
+	void *(*alloc) (size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#656: FILE: drivers/spi/spi-dev.c:182:
+	void *(*alloc) (size_t, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#657: FILE: drivers/spi/spi-dev.c:183:
+	void (*free) (const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#657: FILE: drivers/spi/spi-dev.c:183:
+	void (*free) (const void *);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp"
#669: FILE: drivers/spi/spi-dev.c:195:
+	if (tmp == NULL)

ERROR:SPACING: space prohibited after that open parenthesis '('
#678: FILE: drivers/spi/spi-dev.c:204:
+	ret = spi_write( dev, 0, tmp, count);

CHECK:SPACING: No space is necessary after a cast
#690: FILE: drivers/spi/spi-dev.c:216:
+	struct spidev_openclose *o = (struct spidev_openclose *) context;

CHECK:SPACING: No space is necessary after a cast
#694: FILE: drivers/spi/spi-dev.c:220:
+	drvdata = (struct spidev_driver_data *) dev_get_drvdata(the_dev);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#695: FILE: drivers/spi/spi-dev.c:221:
+	if (NULL == drvdata) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#696: FILE: drivers/spi/spi-dev.c:222:
+		pr_debug("%s: oops, drvdata is NULL !\n", __FUNCTION__);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#717: FILE: drivers/spi/spi-dev.c:243:
+	if (status == 0) {
+		status = -ENODEV;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#727: FILE: drivers/spi/spi-dev.c:253:
+	if (dev) {
+		put_device(&dev->dev);
+	}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#739: FILE: drivers/spi/spi-dev.c:265:
+	if (0 != (res = register_chrdev(SPI_MAJOR, "spi", &spidev_fops))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#739: FILE: drivers/spi/spi-dev.c:265:
+	if (0 != (res = register_chrdev(SPI_MAJOR, "spi", &spidev_fops))) {
+		goto out;
+	}

ERROR:SPACING: space prohibited before that close parenthesis ')'
#743: FILE: drivers/spi/spi-dev.c:269:
+	spidev_class = class_simple_create(THIS_MODULE, "spi" );

ERROR:SPACING: space prohibited after that open parenthesis '('
#744: FILE: drivers/spi/spi-dev.c:270:
+	if ( IS_ERR( spidev_class)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#745: FILE: drivers/spi/spi-dev.c:271:
+		printk( KERN_ERR"%s: error creating class\n", __FUNCTION__ );

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#745: FILE: drivers/spi/spi-dev.c:271:
+		printk( KERN_ERR"%s: error creating class\n", __FUNCTION__ );

ERROR:SPACING: space prohibited after that open parenthesis '('
#745: FILE: drivers/spi/spi-dev.c:271:
+		printk( KERN_ERR"%s: error creating class\n", __FUNCTION__ );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#745: FILE: drivers/spi/spi-dev.c:271:
+		printk( KERN_ERR"%s: error creating class\n", __FUNCTION__ );

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#745: FILE: drivers/spi/spi-dev.c:271:
+		printk( KERN_ERR"%s: error creating class\n", __FUNCTION__ );

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#745: FILE: drivers/spi/spi-dev.c:271:
+		printk( KERN_ERR"%s: error creating class\n", __FUNCTION__ );

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#750: FILE: drivers/spi/spi-dev.c:276:
+	if (0 != (res = spi_driver_add(&spidev_driver))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#750: FILE: drivers/spi/spi-dev.c:276:
+	if (0 != (res = spi_driver_add(&spidev_driver))) {
+		goto out_unreg;
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#753: FILE: drivers/spi/spi-dev.c:279:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#754: FILE: drivers/spi/spi-dev.c:280:
+	printk( "SPI /dev entries driver.\n" );

ERROR:SPACING: space prohibited after that open parenthesis '('
#754: FILE: drivers/spi/spi-dev.c:280:
+	printk( "SPI /dev entries driver.\n" );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#754: FILE: drivers/spi/spi-dev.c:280:
+	printk( "SPI /dev entries driver.\n" );

WARNING:INDENTED_LABEL: labels should not be indented
#758: FILE: drivers/spi/spi-dev.c:284:
+      out_unreg:

WARNING:INDENTED_LABEL: labels should not be indented
#760: FILE: drivers/spi/spi-dev.c:286:
+      out:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#761: FILE: drivers/spi/spi-dev.c:287:
+	printk(KERN_ERR "%s: Driver initialization failed\n", __FILE__);

ERROR:SPACING: space prohibited after that open parenthesis '('
#768: FILE: drivers/spi/spi-dev.c:294:
+	class_simple_destroy( spidev_class );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#768: FILE: drivers/spi/spi-dev.c:294:
+	class_simple_destroy( spidev_class );

ERROR:SPACING: space prohibited after that open parenthesis '('
#772: FILE: drivers/spi/spi-dev.c:298:
+MODULE_AUTHOR( "dmitry pervushin <dpervushin@ru.mvista.com>" );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#772: FILE: drivers/spi/spi-dev.c:298:
+MODULE_AUTHOR( "dmitry pervushin <dpervushin@ru.mvista.com>" );

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#783: FILE: drivers/spi/spi_locals.h:1:
+#ifndef __SPI_LOCAL_H

ERROR:SPACING: space prohibited after that open parenthesis '('
#786: FILE: drivers/spi/spi_locals.h:4:
+#define SPI_DRV( n ) container_of( n, struct spi_driver, driver )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#786: FILE: drivers/spi/spi_locals.h:4:
+#define SPI_DRV( n ) container_of( n, struct spi_driver, driver )

ERROR:SPACING: space prohibited after that open parenthesis '('
#787: FILE: drivers/spi/spi_locals.h:5:
+#define SPI_DEV( n ) container_of( n, struct spi_device, dev )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#787: FILE: drivers/spi/spi_locals.h:5:
+#define SPI_DEV( n ) container_of( n, struct spi_device, dev )

ERROR:SPACING: space prohibited after that open parenthesis '('
#789: FILE: drivers/spi/spi_locals.h:7:
+#define ENTER() pr_debug( "%s: ENTERed\n", __FUNCTION__ )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#789: FILE: drivers/spi/spi_locals.h:7:
+#define ENTER() pr_debug( "%s: ENTERed\n", __FUNCTION__ )

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#789: FILE: drivers/spi/spi_locals.h:7:
+#define ENTER() pr_debug( "%s: ENTERed\n", __FUNCTION__ )

ERROR:SPACING: space prohibited after that open parenthesis '('
#790: FILE: drivers/spi/spi_locals.h:8:
+#define LEAVE() pr_debug( "%s: LEFT OUT\n", __FUNCTION__ )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#790: FILE: drivers/spi/spi_locals.h:8:
+#define LEAVE() pr_debug( "%s: LEFT OUT\n", __FUNCTION__ )

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#790: FILE: drivers/spi/spi_locals.h:8:
+#define LEAVE() pr_debug( "%s: LEFT OUT\n", __FUNCTION__ )

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#798: FILE: include/linux/spi.h:1:
+/*

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#821: FILE: include/linux/spi.h:24:
+#define SPI_M_CS	0x08	/**< CS active level at begining of frame ( default low ) */
                 	    	                        ^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#831: FILE: include/linux/spi.h:34:
+
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#838: FILE: include/linux/spi.h:41:
+int spi_bus_register( struct spi_bus*, char* name );

ERROR:SPACING: space prohibited after that open parenthesis '('
#838: FILE: include/linux/spi.h:41:
+int spi_bus_register( struct spi_bus*, char* name );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#838: FILE: include/linux/spi.h:41:
+int spi_bus_register( struct spi_bus*, char* name );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_bus*' should also have an identifier name
#838: FILE: include/linux/spi.h:41:
+int spi_bus_register( struct spi_bus*, char* name );

ERROR:SPACING: space prohibited after that open parenthesis '('
#839: FILE: include/linux/spi.h:42:
+void spi_bus_unregister( struct spi_bus* );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#839: FILE: include/linux/spi.h:42:
+void spi_bus_unregister( struct spi_bus* );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_bus*' should also have an identifier name
#839: FILE: include/linux/spi.h:42:
+void spi_bus_unregister( struct spi_bus* );

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#840: FILE: include/linux/spi.h:43:
+struct spi_bus* spi_bus_find( char* id );

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#840: FILE: include/linux/spi.h:43:
+struct spi_bus* spi_bus_find( char* id );

ERROR:SPACING: space prohibited after that open parenthesis '('
#840: FILE: include/linux/spi.h:43:
+struct spi_bus* spi_bus_find( char* id );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#840: FILE: include/linux/spi.h:43:
+struct spi_bus* spi_bus_find( char* id );

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#842: FILE: include/linux/spi.h:45:
+int spi_device_add( struct spi_bus*, struct spi_device*, char* name );

ERROR:SPACING: space prohibited after that open parenthesis '('
#842: FILE: include/linux/spi.h:45:
+int spi_device_add( struct spi_bus*, struct spi_device*, char* name );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#842: FILE: include/linux/spi.h:45:
+int spi_device_add( struct spi_bus*, struct spi_device*, char* name );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_bus*' should also have an identifier name
#842: FILE: include/linux/spi.h:45:
+int spi_device_add( struct spi_bus*, struct spi_device*, char* name );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_device*' should also have an identifier name
#842: FILE: include/linux/spi.h:45:
+int spi_device_add( struct spi_bus*, struct spi_device*, char* name );

ERROR:SPACING: space prohibited after that open parenthesis '('
#843: FILE: include/linux/spi.h:46:
+void spi_device_del( struct spi_device* );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#843: FILE: include/linux/spi.h:46:
+void spi_device_del( struct spi_device* );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_device*' should also have an identifier name
#843: FILE: include/linux/spi.h:46:
+void spi_device_del( struct spi_device* );

ERROR:SPACING: space prohibited after that open parenthesis '('
#845: FILE: include/linux/spi.h:48:
+int spi_driver_add( struct spi_driver* );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#845: FILE: include/linux/spi.h:48:
+int spi_driver_add( struct spi_driver* );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_driver*' should also have an identifier name
#845: FILE: include/linux/spi.h:48:
+int spi_driver_add( struct spi_driver* );

ERROR:SPACING: space prohibited after that open parenthesis '('
#846: FILE: include/linux/spi.h:49:
+void spi_driver_del( struct spi_driver* );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#846: FILE: include/linux/spi.h:49:
+void spi_driver_del( struct spi_driver* );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_driver*' should also have an identifier name
#846: FILE: include/linux/spi.h:49:
+void spi_driver_del( struct spi_driver* );

WARNING:SPACING: Unnecessary space before function pointer arguments
#849: FILE: include/linux/spi.h:52:
+	int (*open) (struct spi_driver *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_driver *' should also have an identifier name
#849: FILE: include/linux/spi.h:52:
+	int (*open) (struct spi_driver *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#850: FILE: include/linux/spi.h:53:
+	int (*command) (struct spi_driver *, int cmd, void *arg);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_driver *' should also have an identifier name
#850: FILE: include/linux/spi.h:53:
+	int (*command) (struct spi_driver *, int cmd, void *arg);

WARNING:SPACING: Unnecessary space before function pointer arguments
#851: FILE: include/linux/spi.h:54:
+	void (*close) (struct spi_driver *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct spi_driver *' should also have an identifier name
#851: FILE: include/linux/spi.h:54:
+	void (*close) (struct spi_driver *);

ERROR:SPACING: space prohibited after that open parenthesis '('
#864: FILE: include/linux/spi.h:67:
+#define TO_SPI_BUS( bus ) container_of( bus, struct spi_bus, the_bus )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#864: FILE: include/linux/spi.h:67:
+#define TO_SPI_BUS( bus ) container_of( bus, struct spi_bus, the_bus )

ERROR:SPACING: space prohibited after that open parenthesis '('
#865: FILE: include/linux/spi.h:68:
+#define TO_SPI_BUS_PLDEV( dev ) container_of( dev, struct spi_bus, platform_device )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#865: FILE: include/linux/spi.h:68:
+#define TO_SPI_BUS_PLDEV( dev ) container_of( dev, struct spi_bus, platform_device )

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#867: FILE: include/linux/spi.h:70:
+struct spi_bus
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#872: FILE: include/linux/spi.h:75:
+	int (*xfer)( struct spi_bus* this, struct spi_device* device, struct spi_msg msgs[], int num, int flags );

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#872: FILE: include/linux/spi.h:75:
+	int (*xfer)( struct spi_bus* this, struct spi_device* device, struct spi_msg msgs[], int num, int flags );

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#872: FILE: include/linux/spi.h:75:
+	int (*xfer)( struct spi_bus* this, struct spi_device* device, struct spi_msg msgs[], int num, int flags );

ERROR:SPACING: space prohibited after that open parenthesis '('
#872: FILE: include/linux/spi.h:75:
+	int (*xfer)( struct spi_bus* this, struct spi_device* device, struct spi_msg msgs[], int num, int flags );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#872: FILE: include/linux/spi.h:75:
+	int (*xfer)( struct spi_bus* this, struct spi_device* device, struct spi_msg msgs[], int num, int flags );

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#873: FILE: include/linux/spi.h:76:
+	int (*chip_cs)( int op, void* context );

ERROR:SPACING: space prohibited after that open parenthesis '('
#873: FILE: include/linux/spi.h:76:
+	int (*chip_cs)( int op, void* context );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#873: FILE: include/linux/spi.h:76:
+	int (*chip_cs)( int op, void* context );

ERROR:SPACING: space prohibited after that open parenthesis '('
#877: FILE: include/linux/spi.h:80:
+#define SPI_DEVICE( dev ) container_of( dev, struct spi_device, dev )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#877: FILE: include/linux/spi.h:80:
+#define SPI_DEVICE( dev ) container_of( dev, struct spi_device, dev )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#877: FILE: include/linux/spi.h:80:
+#define SPI_DEVICE( dev ) container_of( dev, struct spi_device, dev )

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#879: FILE: include/linux/spi.h:82:
+struct spi_device {
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#880: FILE: include/linux/spi.h:83:
+	void* bus_data;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#881: FILE: include/linux/spi.h:84:
+	void* drv_data;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#885: FILE: include/linux/spi.h:88:
+	void (*select)( int op, struct spi_device* this );

ERROR:SPACING: space prohibited after that open parenthesis '('
#885: FILE: include/linux/spi.h:88:
+	void (*select)( int op, struct spi_device* this );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#885: FILE: include/linux/spi.h:88:
+	void (*select)( int op, struct spi_device* this );

WARNING:SPACING: Unnecessary space before function pointer arguments
#887: FILE: include/linux/spi.h:90:
+	void *(*alloc) (size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#887: FILE: include/linux/spi.h:90:
+	void *(*alloc) (size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#887: FILE: include/linux/spi.h:90:
+	void *(*alloc) (size_t, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#888: FILE: include/linux/spi.h:91:
+	void (*free) (const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#888: FILE: include/linux/spi.h:91:
+	void (*free) (const void *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#889: FILE: include/linux/spi.h:92:
+	unsigned long (*copy_from_user) (void *to, const void *from_user,

WARNING:SPACING: Unnecessary space before function pointer arguments
#891: FILE: include/linux/spi.h:94:
+	unsigned long (*copy_to_user) (void *to_user, const void *from,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#893: FILE: include/linux/spi.h:96:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#937: FILE: include/linux/spi.h:140:
+	struct spi_ops *ops = clnt->ops;
+	if (ops && ops->close)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#941: FILE: include/linux/spi.h:144:
+extern int spi_write(struct spi_device *dev, int addr, const char *buf, int len);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#942: FILE: include/linux/spi.h:145:
+extern int spi_read(struct spi_device *dev, int addr, char *buf, int len);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#944: FILE: include/linux/spi.h:147:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000161638.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 248 errors, 121 warnings, 19 checks, 843 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000161638.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
