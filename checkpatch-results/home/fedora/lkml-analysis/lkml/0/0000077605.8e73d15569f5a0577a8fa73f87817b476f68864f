CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#117: 
Cc: Jörn Engel <joern@wohnheim.fh-wedel.de>
     ^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#140: FILE: arch/s390/Kconfig:449:
+config S390_HYPFS_FS
+	bool "s390 hypervisor file system support"
+	select SYS_HYPERVISOR
+	default y
+	help
+	  This is a virtual file system intended to provide accounting
+	  information in an s390 hypervisor environment.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#178: FILE: arch/s390/hypfs/hypfs.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#196: FILE: arch/s390/hypfs/hypfs.h:19:
+extern struct dentry *hypfs_mkdir(struct super_block *sb, struct dentry *parent,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#199: FILE: arch/s390/hypfs/hypfs.h:22:
+extern struct dentry *hypfs_create_u64(struct super_block *sb,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#203: FILE: arch/s390/hypfs/hypfs.h:26:
+extern struct dentry *hypfs_create_str(struct super_block *sb,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#212: FILE: arch/s390/hypfs/hypfs_diag.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#260: FILE: arch/s390/hypfs/hypfs_diag.c:49:
+ * Since we have two different diag 204 data formats for old and new s390 $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#261: FILE: arch/s390/hypfs/hypfs_diag.c:50:
+ * machines, we do not access the structs directly, but use getter functions for $

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#274: FILE: arch/s390/hypfs/hypfs_diag.c:63:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#285: FILE: arch/s390/hypfs/hypfs_diag.c:74:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#326: FILE: arch/s390/hypfs/hypfs_diag.c:115:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#344: FILE: arch/s390/hypfs/hypfs_diag.c:133:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#384: FILE: arch/s390/hypfs/hypfs_diag.c:173:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#403: FILE: arch/s390/hypfs/hypfs_diag.c:192:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#462: FILE: arch/s390/hypfs/hypfs_diag.c:251:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#470: FILE: arch/s390/hypfs/hypfs_diag.c:259:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#497: FILE: arch/s390/hypfs/hypfs_diag.c:286:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#506: FILE: arch/s390/hypfs/hypfs_diag.c:295:
+} __attribute__ ((packed));

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#548: FILE: arch/s390/hypfs/hypfs_diag.c:337:
+		      "0: \n" ".section __ex_table,\"a\"\n"

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#548: FILE: arch/s390/hypfs/hypfs_diag.c:337:
+		      "0: \n" ".section __ex_table,\"a\"\n"

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#549: FILE: arch/s390/hypfs/hypfs_diag.c:338:
+#ifndef __s390x__

Architecture specific defines should be avoided wherever
possible.

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#556: FILE: arch/s390/hypfs/hypfs_diag.c:345:
+		      ".previous":"+d" (_subcode), "+d"(_size)
 		                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#557: FILE: arch/s390/hypfs/hypfs_diag.c:346:
+		      :"d"(addr)
 		      ^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#558: FILE: arch/s390/hypfs/hypfs_diag.c:347:
+		      :"memory");
 		      ^

CHECK:SPACING: No space is necessary after a cast
#580: FILE: arch/s390/hypfs/hypfs_diag.c:369:
+		free_pages((unsigned long) diag204_buf, 0);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#592: FILE: arch/s390/hypfs/hypfs_diag.c:381:
+	diag204_buf = (void*)((unsigned long)diag204_buf_vmalloc

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#600: FILE: arch/s390/hypfs/hypfs_diag.c:389:
+	diag204_buf = (void*)__get_free_pages(GFP_KERNEL,0);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#600: FILE: arch/s390/hypfs/hypfs_diag.c:389:
+	diag204_buf = (void*)__get_free_pages(GFP_KERNEL,0);
 	                                                ^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#616: FILE: arch/s390/hypfs/hypfs_diag.c:405:
+		return diag204_alloc_rbuf();
+	} else {/* INFO_EXT */

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#619: FILE: arch/s390/hypfs/hypfs_diag.c:408:
+			return ERR_PTR(-ENOSYS);

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#671: FILE: arch/s390/hypfs/hypfs_diag.c:460:
+		rc = -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#691: FILE: arch/s390/hypfs/hypfs_diag.c:480:
+		return ERR_PTR(-ENOSYS);

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#701: FILE: arch/s390/hypfs/hypfs_diag.c:490:
+		     : :"d" (0), "d"(ptr) : "memory");
 		       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#723: FILE: arch/s390/hypfs/hypfs_diag.c:512:
+	memcpy(name, diag224_cpu_names + ((index + 1) * CPU_NAME_LEN),
+		CPU_NAME_LEN);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#734: FILE: arch/s390/hypfs/hypfs_diag.c:523:
+		printk(KERN_ERR "hypfs: diag 204 not working.");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#740: FILE: arch/s390/hypfs/hypfs_diag.c:529:
+		printk(KERN_ERR "hypfs: could not get name table.\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#809: FILE: arch/s390/hypfs/hypfs_diag.c:598:
+		int rc;
+		rc = hypfs_create_cpu_files(sb, cpus_dir, cpu_info);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#853: FILE: arch/s390/hypfs/hypfs_diag.c:642:
+		int rc;
+		rc = hypfs_create_phys_cpu_files(sb, cpus_dir, cpu_info);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#912: FILE: arch/s390/hypfs/hypfs_diag.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#923: FILE: arch/s390/hypfs/hypfs_diag.h:12:
+extern int hypfs_diag_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#924: FILE: arch/s390/hypfs/hypfs_diag.h:13:
+extern void hypfs_diag_exit(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#925: FILE: arch/s390/hypfs/hypfs_diag.h:14:
+extern int hypfs_diag_create_files(struct super_block *sb, struct dentry *root);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#932: FILE: arch/s390/hypfs/inode.c:1:
+/*

WARNING:CONST_STRUCT: struct file_operations should normally be const
#969: FILE: arch/s390/hypfs/inode.c:38:
+static struct file_operations hypfs_file_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#982: FILE: arch/s390/hypfs/inode.c:51:
+	inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LINE_SPACING: Missing a blank line after declarations
#1010: FILE: arch/s390/hypfs/inode.c:79:
+		struct dentry *next_dentry;
+		next_dentry = hypfs_last_dentry->d_fsdata;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1022: FILE: arch/s390/hypfs/inode.c:91:
+		struct hypfs_sb_info *hypfs_info = sb->s_fs_info;
+		ret->i_mode = mode;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1027: FILE: arch/s390/hypfs/inode.c:96:
+		ret->i_atime = ret->i_mtime = ret->i_ctime = CURRENT_TIME;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1042: FILE: arch/s390/hypfs/inode.c:111:
+static int hypfs_open(struct inode *inode, struct file *filp)
                                                         ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#1048: FILE: arch/s390/hypfs/inode.c:117:
+		if (!(inode->i_mode & S_IWUGO))

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1052: FILE: arch/s390/hypfs/inode.c:121:
+		if (!(inode->i_mode & S_IRUGO))

ERROR:SPACING: space required before the open parenthesis '('
#1057: FILE: arch/s390/hypfs/inode.c:126:
+	if(data) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1074: FILE: arch/s390/hypfs/inode.c:143:
+	struct file *filp = iocb->ki_filp;
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1089: FILE: arch/s390/hypfs/inode.c:158:
+	file_accessed(filp);
 	              ^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1093: FILE: arch/s390/hypfs/inode.c:162:
+}
+static ssize_t hypfs_aio_write(struct kiocb *iocb, const char __user *buf,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1120: FILE: arch/s390/hypfs/inode.c:189:
+		printk(KERN_ERR "hypfs: Update failed\n");

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1131: FILE: arch/s390/hypfs/inode.c:200:
+static int hypfs_release(struct inode *inode, struct file *filp)
                                                            ^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1172: FILE: arch/s390/hypfs/inode.c:241:
+			printk(KERN_ERR "hypfs: Unrecognized mount option "

WARNING:SPLIT_STRING: quoted string split across lines
#1173: FILE: arch/s390/hypfs/inode.c:242:
+			printk(KERN_ERR "hypfs: Unrecognized mount option "
+			       "\"%s\" or missing value\n", str);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sbi)...) over kzalloc(sizeof(struct hypfs_sb_info)...)
#1187: FILE: arch/s390/hypfs/inode.c:256:
+	sbi = kzalloc(sizeof(struct hypfs_sb_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1211: FILE: arch/s390/hypfs/inode.c:280:
+		iput(root_inode);
 		^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1273: FILE: arch/s390/hypfs/inode.c:342:
+	if (mode & S_IFREG) {
[...]
+	} else if (mode & S_IFDIR) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1283: FILE: arch/s390/hypfs/inode.c:352:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1284: FILE: arch/s390/hypfs/inode.c:353:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:UNNECESSARY_INT: Prefer 'unsigned long long' over 'unsigned long long int' as the int is unnecessary
#1326: FILE: arch/s390/hypfs/inode.c:395:
+	snprintf(tmp, TMP_SIZE, "%lld\n", (unsigned long long int)value);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1360: FILE: arch/s390/hypfs/inode.c:429:
+static struct file_operations hypfs_file_ops = {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1407: FILE: arch/s390/hypfs/inode.c:476:
+	printk(KERN_ERR "hypfs: Initialization failed with rc = %i.\n", rc);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000077605.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 42 warnings, 17 checks, 1263 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000077605.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
