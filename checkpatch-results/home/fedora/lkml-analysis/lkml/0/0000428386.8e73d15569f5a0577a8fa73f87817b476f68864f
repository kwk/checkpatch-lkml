WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
  The following patch implements direct I/O for NFS as a compilation option.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#91: FILE: fs/block_dev.c:134:
+static int blkdev_direct_IO(int rw, struct file * filp, struct kiobuf * iobuf, unsigned long blocknr, int blocksize)
                                                   ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#91: FILE: fs/block_dev.c:134:
+static int blkdev_direct_IO(int rw, struct file * filp, struct kiobuf * iobuf, unsigned long blocknr, int blocksize)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#91: FILE: fs/block_dev.c:134:
+static int blkdev_direct_IO(int rw, struct file * filp, struct kiobuf * iobuf, unsigned long blocknr, int blocksize)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#91: FILE: fs/block_dev.c:134:
+static int blkdev_direct_IO(int rw, struct file * filp, struct kiobuf * iobuf, unsigned long blocknr, int blocksize)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#93: FILE: fs/block_dev.c:136:
+	struct inode * inode = filp->f_dentry->d_inode->i_mapping->host;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#105: FILE: fs/ext2/inode.c:586:
+static int ext2_direct_IO(int rw, struct file * filp, struct kiobuf * iobuf, unsigned long blocknr, int blocksize)
                                                 ^^^^

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#105: FILE: fs/ext2/inode.c:586:
+static int ext2_direct_IO(int rw, struct file * filp, struct kiobuf * iobuf, unsigned long blocknr, int blocksize)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#105: FILE: fs/ext2/inode.c:586:
 }
+static int ext2_direct_IO(int rw, struct file * filp, struct kiobuf * iobuf, unsigned long blocknr, int blocksize)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#105: FILE: fs/ext2/inode.c:586:
+static int ext2_direct_IO(int rw, struct file * filp, struct kiobuf * iobuf, unsigned long blocknr, int blocksize)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#105: FILE: fs/ext2/inode.c:586:
+static int ext2_direct_IO(int rw, struct file * filp, struct kiobuf * iobuf, unsigned long blocknr, int blocksize)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#107: FILE: fs/ext2/inode.c:588:
+	struct inode * inode = filp->f_dentry->d_inode->i_mapping->host;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#119: FILE: fs/jfs/inode.c:326:
+static int jfs_direct_IO(int rw, struct file *filp, struct kiobuf *iobuf,
                                               ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#122: FILE: fs/jfs/inode.c:329:
+	struct inode * inode = filp->f_dentry->d_inode->i_mapping->host;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#141: FILE: fs/nfs/direct.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#142: FILE: fs/nfs/direct.c:2:
+ * linux/fs/nfs/direct.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#185: FILE: fs/nfs/direct.c:45:
+#include <asm/uaccess.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#194: FILE: fs/nfs/direct.c:54:
+	struct inode * inode = file->f_dentry->d_inode;

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: fs/nfs/direct.c:56:
+        struct rpc_message msg;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: fs/nfs/direct.c:56:
+        struct rpc_message msg;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: fs/nfs/direct.c:57:
+        struct nfs_readres res = { &fattr, arg->count, 0 };$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: fs/nfs/direct.c:57:
+        struct nfs_readres res = { &fattr, arg->count, 0 };$

ERROR:CODE_INDENT: code indent should use tabs where possible
#206: FILE: fs/nfs/direct.c:66:
+        msg.rpc_resp = &res;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: fs/nfs/direct.c:66:
+        msg.rpc_resp = &res;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#209: FILE: fs/nfs/direct.c:69:
+        msg.rpc_cred = nfs_file_cred(file);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: fs/nfs/direct.c:69:
+        msg.rpc_cred = nfs_file_cred(file);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#210: FILE: fs/nfs/direct.c:70:
+        fattr.valid = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: fs/nfs/direct.c:70:
+        fattr.valid = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#211: FILE: fs/nfs/direct.c:71:
+        result = rpc_call_sync(NFS_CLIENT(inode), &msg, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: fs/nfs/direct.c:71:
+        result = rpc_call_sync(NFS_CLIENT(inode), &msg, 0);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#220: FILE: fs/nfs/direct.c:80:
+nfs_direct_write_rpc(struct file *file, struct nfs_writeargs *arg,
+	struct nfs_writeverf *verf)

ERROR:CODE_INDENT: code indent should use tabs where possible
#225: FILE: fs/nfs/direct.c:85:
+        struct rpc_message msg;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: fs/nfs/direct.c:85:
+        struct rpc_message msg;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#226: FILE: fs/nfs/direct.c:86:
+        struct nfs_writeres res = { &fattr, verf, 0 };$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: fs/nfs/direct.c:86:
+        struct nfs_writeres res = { &fattr, verf, 0 };$

ERROR:CODE_INDENT: code indent should use tabs where possible
#235: FILE: fs/nfs/direct.c:95:
+        msg.rpc_resp = &res;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#235: FILE: fs/nfs/direct.c:95:
+        msg.rpc_resp = &res;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#240: FILE: fs/nfs/direct.c:100:
+        result = rpc_call_sync(NFS_CLIENT(inode), &msg, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: fs/nfs/direct.c:100:
+        result = rpc_call_sync(NFS_CLIENT(inode), &msg, 0);$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'arg->stable == NFS_FILE_SYNC'
#248: FILE: fs/nfs/direct.c:108:
+			if ((arg->stable == NFS_FILE_SYNC) &&
+			    (verf->committed != NFS_FILE_SYNC)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'verf->committed != NFS_FILE_SYNC'
#248: FILE: fs/nfs/direct.c:108:
+			if ((arg->stable == NFS_FILE_SYNC) &&
+			    (verf->committed != NFS_FILE_SYNC)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#250: FILE: fs/nfs/direct.c:110:
+				printk(KERN_ERR __FUNCTION__

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#250: FILE: fs/nfs/direct.c:110:
+				printk(KERN_ERR __FUNCTION__

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#256: FILE: fs/nfs/direct.c:116:
+				printk(KERN_INFO __FUNCTION__

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#256: FILE: fs/nfs/direct.c:116:
+				printk(KERN_INFO __FUNCTION__

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#262: FILE: fs/nfs/direct.c:122:
+		return result;
+	} else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#264: FILE: fs/nfs/direct.c:124:
+        ^Iverf->committed = NFS_FILE_SYNC; /* NFSv2 always syncs data */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#264: FILE: fs/nfs/direct.c:124:
+        ^Iverf->committed = NFS_FILE_SYNC; /* NFSv2 always syncs data */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#264: FILE: fs/nfs/direct.c:124:
+        ^Iverf->committed = NFS_FILE_SYNC; /* NFSv2 always syncs data */$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#276: FILE: fs/nfs/direct.c:136:
+nfs_direct_commit_rpc(struct inode *inode, loff_t offset, size_t count,
+	struct nfs_writeverf *verf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: fs/nfs/direct.c:157:
+nfs_direct_commit_rpc(struct inode *inode, loff_t offset, size_t count,
+	struct nfs_writeverf *verf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: fs/nfs/direct.c:168:
+nfs_direct_read(struct file *file, struct kiobuf *iobuf, loff_t offset,
+	size_t count)

ERROR:CODE_INDENT: code indent should use tabs where possible
#324: FILE: fs/nfs/direct.c:184:
+        while (count) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: fs/nfs/direct.c:184:
+        while (count) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#328: FILE: fs/nfs/direct.c:188:
+                request = count;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#328: FILE: fs/nfs/direct.c:188:
+                request = count;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#329: FILE: fs/nfs/direct.c:189:
+                if (count > rsize)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: fs/nfs/direct.c:189:
+                if (count > rsize)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#330: FILE: fs/nfs/direct.c:190:
+                        request = rsize;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: fs/nfs/direct.c:190:
+                        request = rsize;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#345: FILE: fs/nfs/direct.c:205:
+                result = nfs_direct_read_rpc(file, &args);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#345: FILE: fs/nfs/direct.c:205:
+                result = nfs_direct_read_rpc(file, &args);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#347: FILE: fs/nfs/direct.c:207:
+                if (result < 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#347: FILE: fs/nfs/direct.c:207:
+                if (result < 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#351: FILE: fs/nfs/direct.c:211:
+                        ^Itotal = result;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#351: FILE: fs/nfs/direct.c:211:
+                        ^Itotal = result;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#351: FILE: fs/nfs/direct.c:211:
+                        ^Itotal = result;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#352: FILE: fs/nfs/direct.c:212:
+                        break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#352: FILE: fs/nfs/direct.c:212:
+                        break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#353: FILE: fs/nfs/direct.c:213:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#353: FILE: fs/nfs/direct.c:213:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#355: FILE: fs/nfs/direct.c:215:
+                total += result;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#355: FILE: fs/nfs/direct.c:215:
+                total += result;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#356: FILE: fs/nfs/direct.c:216:
+                if (result < args.count)   /* NFSv2ism */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: fs/nfs/direct.c:216:
+                if (result < args.count)   /* NFSv2ism */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#357: FILE: fs/nfs/direct.c:217:
+                        break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#357: FILE: fs/nfs/direct.c:217:
+                        break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#358: FILE: fs/nfs/direct.c:218:
+                count -= result;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#358: FILE: fs/nfs/direct.c:218:
+                count -= result;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#361: FILE: fs/nfs/direct.c:221:
+^I        args.pgbase &= ~PAGE_MASK;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#362: FILE: fs/nfs/direct.c:222:
+        };$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#362: FILE: fs/nfs/direct.c:222:
+        };$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#377: FILE: fs/nfs/direct.c:237:
+nfs_direct_write(struct file *file, struct kiobuf *iobuf,
+	loff_t offset, size_t count)

ERROR:CODE_INDENT: code indent should use tabs where possible
#386: FILE: fs/nfs/direct.c:246:
+        struct nfs_writeargs args = { NFS_FH(inode), 0, 0, NFS_FILE_SYNC, 0, pages };$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#386: FILE: fs/nfs/direct.c:246:
+        struct nfs_writeargs args = { NFS_FH(inode), 0, 0, NFS_FILE_SYNC, 0, pages };$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'count > wsize'
#389: FILE: fs/nfs/direct.c:249:
+	if ((NFS_PROTO(inode)->version == 3) && (count > wsize) &&
+							(!IS_SYNC(inode)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#390: FILE: fs/nfs/direct.c:250:
+	if ((NFS_PROTO(inode)->version == 3) && (count > wsize) &&
+							(!IS_SYNC(inode)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#397: FILE: fs/nfs/direct.c:257:
+        while (count) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#397: FILE: fs/nfs/direct.c:257:
+        while (count) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#401: FILE: fs/nfs/direct.c:261:
+                request = count;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#401: FILE: fs/nfs/direct.c:261:
+                request = count;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#402: FILE: fs/nfs/direct.c:262:
+                if (count > wsize)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#402: FILE: fs/nfs/direct.c:262:
+                if (count > wsize)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#403: FILE: fs/nfs/direct.c:263:
+                        request = wsize;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#403: FILE: fs/nfs/direct.c:263:
+                        request = wsize;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#422: FILE: fs/nfs/direct.c:282:
+                result = nfs_direct_write_rpc(file, &args, &ret_verf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#422: FILE: fs/nfs/direct.c:282:
+                result = nfs_direct_write_rpc(file, &args, &ret_verf);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#424: FILE: fs/nfs/direct.c:284:
+                if (result < 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#424: FILE: fs/nfs/direct.c:284:
+                if (result < 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#425: FILE: fs/nfs/direct.c:285:
+                        total = result;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#425: FILE: fs/nfs/direct.c:285:
+                        total = result;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#426: FILE: fs/nfs/direct.c:286:
+                        break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#426: FILE: fs/nfs/direct.c:286:
+                        break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#427: FILE: fs/nfs/direct.c:287:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#427: FILE: fs/nfs/direct.c:287:
+                }$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#431: FILE: fs/nfs/direct.c:291:
+			memcpy(&first_verf.verifier, &ret_verf.verifier,
+								VERF_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#435: FILE: fs/nfs/direct.c:295:
+			if (memcmp(&first_verf.verifier, &ret_verf.verifier,
+								VERF_SIZE))

ERROR:CODE_INDENT: code indent should use tabs where possible
#439: FILE: fs/nfs/direct.c:299:
+                total += result;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#439: FILE: fs/nfs/direct.c:299:
+                total += result;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#440: FILE: fs/nfs/direct.c:300:
+                count -= result;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#440: FILE: fs/nfs/direct.c:300:
+                count -= result;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#441: FILE: fs/nfs/direct.c:301:
+                offset += result;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#441: FILE: fs/nfs/direct.c:301:
+                offset += result;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#442: FILE: fs/nfs/direct.c:302:
+        };$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#442: FILE: fs/nfs/direct.c:302:
+        };$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#449: FILE: fs/nfs/direct.c:309:
+		if (nfs_direct_commit_rpc(inode, save_offset,
+					iobuf->length - count, &ret_verf))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#452: FILE: fs/nfs/direct.c:312:
+		if (memcmp(&first_verf.verifier, &ret_verf.verifier,
+								VERF_SIZE))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#459: FILE: fs/nfs/direct.c:319:
+	printk(KERN_INFO __FUNCTION__

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#459: FILE: fs/nfs/direct.c:319:
+	printk(KERN_INFO __FUNCTION__

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#483: FILE: fs/nfs/direct.c:343:
+nfs_direct_IO(int rw, struct file *file, struct kiobuf *iobuf,
+	unsigned long blocknr, int blocksize)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#494: FILE: fs/nfs/direct.c:354:
+		dfprintk(VFS,
+			"NFS: direct_IO(READ) (%s/%s) off/cnt(%Lu/%d)\n",

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#494: FILE: fs/nfs/direct.c:354:
+			"NFS: direct_IO(READ) (%s/%s) off/cnt(%Lu/%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#502: FILE: fs/nfs/direct.c:362:
+		dfprintk(VFS,
+			"NFS: direct_IO(WRITE) (%s/%s) off/cnt(%Lu/%d)\n",

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#502: FILE: fs/nfs/direct.c:362:
+			"NFS: direct_IO(WRITE) (%s/%s) off/cnt(%Lu/%d)\n",

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#531: FILE: fs/nfs/file.c:204:
+	direct_IO: nfs_direct_IO,
 	         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#531: FILE: fs/nfs/file.c:204:
+	direct_IO: nfs_direct_IO,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#571: FILE: fs/reiserfs/inode.c:2122:
+static int reiserfs_direct_io(int rw, struct file *filp, 
                                                    ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#571: FILE: fs/reiserfs/inode.c:2122:
+static int reiserfs_direct_io(int rw, struct file *filp, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#575: FILE: fs/reiserfs/inode.c:2126:
+    struct inode * inode = filp->f_dentry->d_inode->i_mapping->host;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#575: FILE: fs/reiserfs/inode.c:2126:
+    struct inode * inode = filp->f_dentry->d_inode->i_mapping->host;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#587: FILE: include/linux/fs.h:398:
+	int (*direct_IO)(int, struct file *, struct kiobuf *, unsigned long, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#587: FILE: include/linux/fs.h:398:
+	int (*direct_IO)(int, struct file *, struct kiobuf *, unsigned long, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiobuf *' should also have an identifier name
#587: FILE: include/linux/fs.h:398:
+	int (*direct_IO)(int, struct file *, struct kiobuf *, unsigned long, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#587: FILE: include/linux/fs.h:398:
+	int (*direct_IO)(int, struct file *, struct kiobuf *, unsigned long, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#587: FILE: include/linux/fs.h:398:
+	int (*direct_IO)(int, struct file *, struct kiobuf *, unsigned long, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#600: FILE: include/linux/nfs_fs.h:275:
+extern int  nfs_direct_IO(int, struct file *, struct kiobuf *, unsigned long, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#600: FILE: include/linux/nfs_fs.h:275:
+extern int  nfs_direct_IO(int, struct file *, struct kiobuf *, unsigned long, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#600: FILE: include/linux/nfs_fs.h:275:
+extern int  nfs_direct_IO(int, struct file *, struct kiobuf *, unsigned long, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiobuf *' should also have an identifier name
#600: FILE: include/linux/nfs_fs.h:275:
+extern int  nfs_direct_IO(int, struct file *, struct kiobuf *, unsigned long, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#600: FILE: include/linux/nfs_fs.h:275:
+extern int  nfs_direct_IO(int, struct file *, struct kiobuf *, unsigned long, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#600: FILE: include/linux/nfs_fs.h:275:
+extern int  nfs_direct_IO(int, struct file *, struct kiobuf *, unsigned long, int);

WARNING:INLINE: plain inline is preferred over __inline__
#615: FILE: include/linux/nfs_fs.h:311:
+static __inline__ int

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#659: FILE: mm/filemap.c:1598:
+		retval = mapping->a_ops->direct_IO(rw, filp, iobuf, (offset+progress) >> blocksize_bits, blocksize);
 		                                       ^^^^

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#659: FILE: mm/filemap.c:1598:
+		retval = mapping->a_ops->direct_IO(rw, filp, iobuf, (offset+progress) >> blocksize_bits, blocksize);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#659: FILE: mm/filemap.c:1598:
+		retval = mapping->a_ops->direct_IO(rw, filp, iobuf, (offset+progress) >> blocksize_bits, blocksize);
 		                                                           ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000428386.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 51 errors, 75 warnings, 19 checks, 566 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000428386.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
