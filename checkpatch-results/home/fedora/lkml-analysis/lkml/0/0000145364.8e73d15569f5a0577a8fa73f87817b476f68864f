WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#68: 
________________________________________________________________________________

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#195: 
# echo 50 > /proc/sys/vm/readahead_ratio

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#196: 
# /usr/src/test/read_threads 80

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#199: 
# tail -36 /proc/vmstat

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#483: 
# cat functions.sh

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#555: 
# cat test_ra.sh

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#556: 
#!/bin/zsh

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#574: 
# cat test_nfs.sh

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#575: 
#!/bin/zsh

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#590: 
# cat read_threads.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#592: 
#include <sys/types.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#593: 
#include <sys/stat.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#594: 
#include <fcntl.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#595: 
#include <unistd.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#596: 
#include <pthread.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#597: 
#include <stdio.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#598: 
#include <stdlib.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#599: 
#include <time.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#600: 
#include <sys/syscall.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#601: 
#include <string.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#604: 
#define READ_THREADS    100

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#605: 
#define THREAD_FILES    10

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#606: 
#define BLOCK_SIZE      4096

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#741: FILE: include/linux/mm.h:894:
+			struct file_ra_state *ra, struct file *filp,
 			                                       ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#741: FILE: include/linux/mm.h:894:
+page_cache_readahead_adaptive(struct address_space *mapping,
+			struct file_ra_state *ra, struct file *filp,

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#915: FILE: include/linux/sysctl.h:183:
+	VM_READAHEAD_RATIO=29, /* percent of read-ahead size to thrashing-threshold */
 	                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#926: FILE: kernel/sysctl.c:69:
+extern int readahead_ratio;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'zero', consider using the shared one in include/linux/sysctl.h
#942: FILE: kernel/sysctl.c:863:
+		.extra1		= &zero,

Commit d91bff3011cf ("proc/sysctl: add shared variables for range
check") added some shared const variables to be used instead of a local
copy in each source file.

Consider replacing the sysctl range checking value with the shared
one in include/linux/sysctl.h.  The following conversion scheme may
be used::

  &zero     ->  SYSCTL_ZERO
  &one      ->  SYSCTL_ONE
  &int_max  ->  SYSCTL_INT_MAX

See:

  1. https://lore.kernel.org/lkml/20190430180111.10688-1-mcroce@redhat.com/
  2. https://lore.kernel.org/lkml/20190531131422.14970-1-mcroce@redhat.com/

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#954: FILE: mm/filemap.c:702:
+extern int readahead_ratio;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#977: FILE: mm/filemap.c:765:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#985: FILE: mm/filemap.c:773:
+			if (unlikely(page == NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#987: FILE: mm/filemap.c:775:
+						filp, prev_page, NULL,
 						^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#987: FILE: mm/filemap.c:775:
+				page_cache_readahead_adaptive(mapping, &ra,
+						filp, prev_page, NULL,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#993: FILE: mm/filemap.c:781:
+						filp, prev_page, page,
 						^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#993: FILE: mm/filemap.c:781:
+				page_cache_readahead_adaptive(mapping, &ra,
+						filp, prev_page, page,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1101: FILE: mm/filemap.c:1242:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1110: FILE: mm/filemap.c:1251:
+			page_cache_readahead_adaptive(mapping, ra,
+						file, NULL, NULL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1115: FILE: mm/filemap.c:1256:
+			page_cache_readahead_adaptive(mapping, ra,
+						file, NULL, page,

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#1158: FILE: mm/page_alloc.c:112:
+			1 << PG_activate|
 			                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1218: FILE: mm/page_alloc.c:838:
+	BUG_ON(!batch_size);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1227: FILE: mm/page_alloc.c:847:
+			if (left_count <= 0) {
+				break;
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPLIT_STRING: quoted string split across lines
#1297: FILE: mm/page_alloc.c:1393:
 			" present:%lukB"
+			" aging:%lukB"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#1298: FILE: mm/page_alloc.c:1394:
+			" aging:%lukB"
+			" age:%lu"

WARNING:SPLIT_STRING: quoted string split across lines
#1325: FILE: mm/page_alloc.c:2145:
 			   "\n        inactive %lu"
+			   "\n        aging    %lu"

WARNING:SPLIT_STRING: quoted string split across lines
#1326: FILE: mm/page_alloc.c:2146:
+			   "\n        aging    %lu"
+			   "\n        age      %lu"

WARNING:IF_1: Consider removing the #if 1 and its #endif
#1396: FILE: mm/readahead.c:18:
+#if 1

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#1397: FILE: mm/readahead.c:19:
+#define dprintk(args...) \
+	if (readahead_ratio & 1) printk(KERN_DEBUG args)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1398: FILE: mm/readahead.c:20:
+	if (readahead_ratio & 1) printk(KERN_DEBUG args)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1398: FILE: mm/readahead.c:20:
+	if (readahead_ratio & 1) printk(KERN_DEBUG args)

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#1399: FILE: mm/readahead.c:21:
+#define ddprintk(args...) \
+	if ((readahead_ratio & 3) == 3) printk(KERN_DEBUG args)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1400: FILE: mm/readahead.c:22:
+	if ((readahead_ratio & 3) == 3) printk(KERN_DEBUG args)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1400: FILE: mm/readahead.c:22:
+	if ((readahead_ratio & 3) == 3) printk(KERN_DEBUG args)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'delta' - possible side-effects?
#1402: FILE: mm/readahead.c:24:
+#define ra_account_page(ra, member, delta)	do {			\
+	unsigned long opg = offsetof(struct page_state, pgreadahead) - 	\
+				offsetof(struct page_state, readahead);	\
+	unsigned long o1 = offsetof(struct page_state, member);		\
+	unsigned long o2 = o1 + 2 * opg * ((ra)->flags & RA_CLASS_MASK);\
+	BUG_ON(opg + o2 >= sizeof(struct page_state));			\
+	__mod_page_state(o1, 1UL);					\
+	__mod_page_state(o2, 1UL);					\
+	__mod_page_state(opg + o1, (delta));				\
+	__mod_page_state(opg + o2, (delta));				\
+} while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1403: FILE: mm/readahead.c:25:
+^Iunsigned long opg = offsetof(struct page_state, pgreadahead) - ^I\$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1407: FILE: mm/readahead.c:29:
+	BUG_ON(opg + o2 >= sizeof(struct page_state));			\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'class' - possible side-effects?
#1414: FILE: mm/readahead.c:36:
+#define ra_account(member, class, delta)	do {			\
+	unsigned long opg = offsetof(struct page_state, pgreadahead) - 	\
+				offsetof(struct page_state, readahead);	\
+	unsigned long o1 = offsetof(struct page_state, member);		\
+	unsigned long o2 = o1 + 2 * opg * (class);			\
+	if ((class) >= RA_CLASS_END)					\
+		break;							\
+	BUG_ON(o2 >= sizeof(struct page_state));			\
+	__mod_page_state(o1, (delta));					\
+	__mod_page_state(o2, (delta));					\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'delta' - possible side-effects?
#1414: FILE: mm/readahead.c:36:
+#define ra_account(member, class, delta)	do {			\
+	unsigned long opg = offsetof(struct page_state, pgreadahead) - 	\
+				offsetof(struct page_state, readahead);	\
+	unsigned long o1 = offsetof(struct page_state, member);		\
+	unsigned long o2 = o1 + 2 * opg * (class);			\
+	if ((class) >= RA_CLASS_END)					\
+		break;							\
+	BUG_ON(o2 >= sizeof(struct page_state));			\
+	__mod_page_state(o1, (delta));					\
+	__mod_page_state(o2, (delta));					\
+} while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1415: FILE: mm/readahead.c:37:
+^Iunsigned long opg = offsetof(struct page_state, pgreadahead) - ^I\$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1421: FILE: mm/readahead.c:43:
+	BUG_ON(o2 >= sizeof(struct page_state));			\

ERROR:SPACING: space required before the open parenthesis '('
#1429: FILE: mm/readahead.c:51:
+#define inc_page_state(a)    do {} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1430: FILE: mm/readahead.c:52:
+#define mod_page_state(a, b) do {} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1431: FILE: mm/readahead.c:53:
+#define dprintk(args...)     do {} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1432: FILE: mm/readahead.c:54:
+#define ddprintk(args...)    do {} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1433: FILE: mm/readahead.c:55:
+#define ra_account(member, class, delta)	do {} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1434: FILE: mm/readahead.c:56:
+#define ra_account_page(member, class, delta)	do {} while(0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1441: FILE: mm/readahead.c:63:
+int readahead_ratio = 0;   $

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1441: FILE: mm/readahead.c:63:
+int readahead_ratio = 0;   

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1475: FILE: mm/readahead.c:343:
+		if (readahead_ratio > 9 &&
+				page_idx == nr_to_read - lookahead_size)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1494: FILE: mm/readahead.c:428:
+	return __do_page_cache_readahead(mapping, filp, offset, nr_to_read, 0);
 	                                          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1503: FILE: mm/readahead.c:448:
+	actual = __do_page_cache_readahead(mapping, filp, offset, nr_to_read, 0);
 	                                            ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1506: FILE: mm/readahead.c:451:
+	dprintk("blockable-readahead(ino=%lu, ra=%lu+%lu) = %d\n",
+			mapping->host->i_ino, offset, nr_to_read, actual);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1533: FILE: mm/readahead.c:632:
+ *    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1535: FILE: mm/readahead.c:634:
+ *    +-----------------------------------------+       $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1536: FILE: mm/readahead.c:635:
+ *    |       # PG_readahead                    |       $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1537: FILE: mm/readahead.c:636:
+ *    +-----------------------------------------+       $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1544: FILE: mm/readahead.c:643:
+ *                  +-----------------------------------------+       $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1545: FILE: mm/readahead.c:644:
+ *                  |                #                        |       $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1546: FILE: mm/readahead.c:645:
+ *                  +-----------------------------------------+       $

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rescue_pages', this function's name, in a string
#1576: FILE: mm/readahead.c:675:
+	dprintk("rescue_pages(ino=%lu, index=%lu nr=%lu)\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1577: FILE: mm/readahead.c:676:
+	dprintk("rescue_pages(ino=%lu, index=%lu nr=%lu)\n",
+			mapping->host->i_ino, index, nr_pages);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1578: FILE: mm/readahead.c:677:
+	BUG_ON(!nr_pages);

ERROR:SPACING: space required before the open parenthesis '('
#1580: FILE: mm/readahead.c:679:
+	for(;;) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1589: FILE: mm/readahead.c:688:
+			struct page *the_page = page;
+			page = list_entry(page->lru.prev, struct page, lru);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1591: FILE: mm/readahead.c:690:
+			if (!PageActive(the_page) &&
+					!PageActivate(the_page) &&

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1628: FILE: mm/readahead.c:727:
+ *              la_index      ra_index     lookahead_index         readahead_index        $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1676: FILE: mm/readahead.c:775:
+static inline void ra_state_init(struct file_ra_state *ra,
+				unsigned long la_index, unsigned long ra_index)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1686: FILE: mm/readahead.c:785:
+static inline void ra_state_update(struct file_ra_state *ra,
+				unsigned long ra_size, unsigned long la_size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1700: FILE: mm/readahead.c:799:
+static inline void ra_state_adjust(struct file_ra_state *ra,
+				unsigned long ra_size, unsigned long la_size)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1710: FILE: mm/readahead.c:809:
+			struct address_space *mapping, struct file *filp)
 			                                            ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1710: FILE: mm/readahead.c:809:
+static int ra_dispatch(struct file_ra_state *ra,
+			struct address_space *mapping, struct file *filp)

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#1717: FILE: mm/readahead.c:816:
+	static char *ra_class_name[] = {

WARNING:TYPO_SPELLING: 'contexta' may be misspelled - perhaps 'context'?
#1721: FILE: mm/readahead.c:820:
+		"contexta"
 		 ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1725: FILE: mm/readahead.c:824:
+	BUG_ON(ra_class == 0 || ra_class > RA_CLASS_END);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1738: FILE: mm/readahead.c:837:
+		if (ra_class == RA_CLASS_CONTEXT_ACCELERATED &&
+				eof_index > ra->lookahead_index + 1)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1746: FILE: mm/readahead.c:845:
+	actual = __do_page_cache_readahead(mapping, filp,
 	                                            ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1747: FILE: mm/readahead.c:846:
+	actual = __do_page_cache_readahead(mapping, filp,
+					ra->ra_index, ra_size, la_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1754: FILE: mm/readahead.c:853:
+	dprintk("readahead-%s(ino=%lu, index=%lu, ra=%lu+%lu-%lu) = %d\n",
+			ra_class_name[ra_class - 1],

WARNING:TYPO_SPELLING: 'Substract' may be misspelled - perhaps 'Subtract'?
#1765: FILE: mm/readahead.c:864:
+ *   - Substract ra_size by the old look-ahead to get real safe read-ahead;
        ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1776: FILE: mm/readahead.c:875:
+static inline int adjust_rala(unsigned long ra_max,
+				unsigned long *ra_size, unsigned long *la_size)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1805: FILE: mm/readahead.c:904:
+ * $

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1823: FILE: mm/readahead.c:922:
+static inline unsigned long compute_thrashing_threshold(

WARNING:SPLIT_STRING: quoted string split across lines
#1846: FILE: mm/readahead.c:945:
+	ddprintk("compute_thrashing_threshold: "
+			"ra=%lu=%lu*%lu/%lu, remain %lu for %lu\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1853: FILE: mm/readahead.c:952:
+/* $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1857: FILE: mm/readahead.c:956:
+state_based_readahead(struct address_space *mapping, struct file *filp,
                                                                   ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1858: FILE: mm/readahead.c:957:
+state_based_readahead(struct address_space *mapping, struct file *filp,
+			struct file_ra_state *ra, struct page *page,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1876: FILE: mm/readahead.c:975:
+	if (!adjust_rala(min(ra_max, 2 * ra_old + (ra_max - ra_old) / 16),
+				&ra_size, &la_size))

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1882: FILE: mm/readahead.c:981:
+	return ra_dispatch(ra, mapping, filp);
 	                                ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1885: FILE: mm/readahead.c:984:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1894: FILE: mm/readahead.c:993:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1898: FILE: mm/readahead.c:997:
+ *| |-->|-->|       |------>|-->|                |------>| $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1906: FILE: mm/readahead.c:1005:
+ * ^Il: the number of pages read by the stream$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1908: FILE: mm/readahead.c:1007:
+ * ^IL: the number of pages pushed into inactive_list in the mean time$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1910: FILE: mm/readahead.c:1009:
+ * ^If(l01) <= L0$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1911: FILE: mm/readahead.c:1010:
+ * ^If(l11 + l12) = L1$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1912: FILE: mm/readahead.c:1011:
+ * ^If(l21 + l22) = L2$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1913: FILE: mm/readahead.c:1012:
+ * ^I...$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1914: FILE: mm/readahead.c:1013:
+ * ^If(l01 + l11 + ...) <= Sum(L0 + L1 + ...)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1928: FILE: mm/readahead.c:1027:
+ *  ___ ^I0^I^Inot in inactive list$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1929: FILE: mm/readahead.c:1028:
+ *  L__ ^I1^I^Ifresh$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1930: FILE: mm/readahead.c:1029:
+ *  L_R ^I2^I^Istale$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1931: FILE: mm/readahead.c:1030:
+ *  LA_ ^I4^I^Idisturbed once$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1932: FILE: mm/readahead.c:1031:
+ *  LAR ^I8^I^Idisturbed twice$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1945: FILE: mm/readahead.c:1044:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1951: FILE: mm/readahead.c:1050:
+ * ^IThe counted value may well be far under the true threshold, so return$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1952: FILE: mm/readahead.c:1051:
+ * ^Iit unmodified for further process in adjust_rala_accelerated().$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1954: FILE: mm/readahead.c:1053:
+ * ^ICheck 3 evenly spread pages to be sure there is no hole or many$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1955: FILE: mm/readahead.c:1054:
+ * ^Inot-yet-accessed pages. This prevents unnecessary IO, and allows some$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1956: FILE: mm/readahead.c:1055:
+ * ^Ialmost sequential patterns to survive.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1967: FILE: mm/readahead.c:1066:
+static int count_sequential_pages(struct address_space *mapping,
+			int sequential_class, unsigned long *remain,

ERROR:SPACING: space required before the open parenthesis '('
#1989: FILE: mm/readahead.c:1088:
+		if(nr_lookback > ra_max / 8) {

ERROR:SPACING: space required before the open parenthesis '('
#1999: FILE: mm/readahead.c:1098:
+	for(step = ra_min; step < nr_lookback; step *= 4) {

ERROR:SPACING: space required before the open parenthesis '('
#2009: FILE: mm/readahead.c:1108:
+	for(;;) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#2012: FILE: mm/readahead.c:1111:
+		if (get_sequential_class(page) < sequential_class) {
[...]
+		} else if (++count >= 3 || step < ra_max / 16)
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2027: FILE: mm/readahead.c:1126:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#2048: FILE: mm/readahead.c:1147:
+	for(;;) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2055: FILE: mm/readahead.c:1154:
+^I^Ido {    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2068: FILE: mm/readahead.c:1167:
+out:    $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2080: FILE: mm/readahead.c:1179:
+static unsigned long first_absent_page(struct address_space *mapping,
+				struct page *page, unsigned long index,

ERROR:SPACING: space required before the open parenthesis '('
#2107: FILE: mm/readahead.c:1206:
+	for(;; ra_size /= 2) {

WARNING:TYPO_SPELLING: 'choosed' may be misspelled - perhaps 'chose'?
#2128: FILE: mm/readahead.c:1227:
+ * is not choosed to make the whole next chunk safe(as in normal ones). Only
           ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2134: FILE: mm/readahead.c:1233:
+static inline int adjust_rala_accelerated(unsigned long ra_max,
+				unsigned long *ra_size, unsigned long *la_size)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2150: FILE: mm/readahead.c:1249:
+/* $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2155: FILE: mm/readahead.c:1254:
+			struct file *filp, struct file_ra_state *ra,
 			             ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2165: FILE: mm/readahead.c:1264:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2167: FILE: mm/readahead.c:1266:
+	ra_size = count_sequential_pages(mapping, sequential_class,
+			&remain_pages, index, ra_min, ra_max);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2168: FILE: mm/readahead.c:1267:
+	BUG_ON(!ra_size || !remain_pages);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2171: FILE: mm/readahead.c:1270:
+	if (!page)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2173: FILE: mm/readahead.c:1272:
+	else {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2174: FILE: mm/readahead.c:1273:
+		ra_index = first_absent_page(

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2199: FILE: mm/readahead.c:1298:
+	return ra_dispatch(ra, mapping, filp);
 	                                ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2216: FILE: mm/readahead.c:1315:
+		struct file *filp, struct file_ra_state *ra,
 		             ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2216: FILE: mm/readahead.c:1315:
+newfile_readahead(struct address_space *mapping,
+		struct file *filp, struct file_ra_state *ra,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2232: FILE: mm/readahead.c:1331:
+	return ra_dispatch(ra, mapping, filp);
 	                                ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2255: FILE: mm/readahead.c:1354:
+^I*ra_max = min(min(KB(64 + mem_mb*64), KB(2048)), ra->ra_pages); $

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2255: FILE: mm/readahead.c:1354:
+	*ra_max = min(min(KB(64 + mem_mb*64), KB(2048)), ra->ra_pages); 
 	                                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2256: FILE: mm/readahead.c:1355:
+	*ra_min = min(min(KB(VM_MIN_READAHEAD + mem_mb/16), KB(128)), *ra_max/2);
 	                                              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2256: FILE: mm/readahead.c:1355:
+	*ra_min = min(min(KB(VM_MIN_READAHEAD + mem_mb/16), KB(128)), *ra_max/2);
 	                                                                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2260: FILE: mm/readahead.c:1359:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2266: FILE: mm/readahead.c:1365:
+ * 2. page != NULL $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2276: FILE: mm/readahead.c:1375:
+			struct file_ra_state *ra, struct file *filp,
 			                                       ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2276: FILE: mm/readahead.c:1375:
+page_cache_readahead_adaptive(struct address_space *mapping,
+			struct file_ra_state *ra, struct file *filp,

ERROR:SPACING: space required before the open parenthesis '('
#2287: FILE: mm/readahead.c:1386:
+		if(!TestClearPageReadahead(page))

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2310: FILE: mm/readahead.c:1409:
+		return newfile_readahead(mapping, filp, ra, last_index, ra_min);
 		                                  ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2316: FILE: mm/readahead.c:1415:
+	if ((readahead_ratio % 5) == 0 &&
+		page && index == ra->lookahead_index &&

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2319: FILE: mm/readahead.c:1418:
+		return state_based_readahead(mapping, filp, ra, page, ra_max);
 		                                      ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2321: FILE: mm/readahead.c:1420:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2323: FILE: mm/readahead.c:1422:
+^I */ $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2328: FILE: mm/readahead.c:1427:
+		return context_based_readahead(mapping, filp, ra,
 		                                        ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2341: FILE: mm/readahead.c:1440:
+	size = __do_page_cache_readahead(mapping, filp, index, size, 0);
 	                                          ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2347: FILE: mm/readahead.c:1446:
+	dprintk("readrandom(ino=%lu, pages=%lu, index=%lu-%lu-%lu) = %lu\n",
+			mapping->host->i_ino, mapping->nrpages,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2369: FILE: mm/readahead.c:1468:
+		ra_account(pgreadahead_hit,
+				(ra->flags >> RA_CLASS_SHIFT) & RA_CLASS_MASK, 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2390: FILE: mm/swap.c:128:
+	if (!PageActive(page) && !PageActivate(page) &&
+			PageReferenced(page) && PageLRU(page)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#2391: FILE: mm/swap.c:129:
+		if (readahead_ratio > 9 || (readahead_ratio & 1)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2394: FILE: mm/swap.c:132:
+		} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2479: FILE: mm/vmscan.c:1083:
+						begin_zone = end_zone = i;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2499: FILE: mm/vmscan.c:1100:
+		while (end_zone < pgdat->nr_zones - 1 &&
+			pages_more_aged(pgdat->node_zones + end_zone,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2503: FILE: mm/vmscan.c:1104:
+		while (begin_zone &&
+			pages_more_aged(pgdat->node_zones + begin_zone,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000145364.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 43 errors, 84 warnings, 50 checks, 1744 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000145364.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
