ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#93: FILE: include/linux/mm.h:384:
+int shmem_swapout(struct page * page, struct file *file);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#94: FILE: include/linux/mm.h:385:
+struct page * shmem_nopage(struct vm_area_struct * vma, unsigned long address, int no_share);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#94: FILE: include/linux/mm.h:385:
+struct page * shmem_nopage(struct vm_area_struct * vma, unsigned long address, int no_share);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#95: FILE: include/linux/mm.h:386:
+struct file *shmem_file_setup(struct file *fzero, char * name, loff_t size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#96: FILE: include/linux/mm.h:387:
+extern int shmem_zero_setup(struct vm_area_struct *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#96: FILE: include/linux/mm.h:387:
+extern int shmem_zero_setup(struct vm_area_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#107: FILE: include/linux/pagemap.h:70:
+extern struct page * __find_get_page(struct address_space *mapping,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#107: FILE: include/linux/pagemap.h:70:
+extern struct page * __find_get_page(struct address_space *mapping,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#116: FILE: include/linux/shmem_fs.h:1:
+#ifndef __SHMEM_I

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#128: FILE: include/linux/shmem_fs.h:13:
+typedef struct {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#153: FILE: include/linux/swap.h:294:
+extern void shmem_unuse(swp_entry_t entry, struct page *page);

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#247: FILE: ipc/shm.c:46:
+	struct file *		shm_file;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#284: FILE: ipc/shm.c:59:
+static struct file_operations shm_file_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#285: FILE: ipc/shm.c:60:
+static struct vm_operations_struct shm_vm_ops;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#295: FILE: ipc/shm.c:72:
+static int newseg (key_t key, int shmflg, size_t size);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#359: FILE: ipc/shm.c:80:
+size_t ^Ishm_ctlall = SHMALL;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#360: FILE: ipc/shm.c:81:
+int ^Ishm_ctlmni = SHMMNI;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#543: FILE: ipc/shm.c:110:
+static inline void shm_inc (int id) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#543: FILE: ipc/shm.c:110:
+static inline void shm_inc (int id) {

ERROR:SPACING: space required before the open parenthesis '('
#598: FILE: ipc/shm.c:113:
+	if(!(shp = shm_lock(id)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#598: FILE: ipc/shm.c:113:
+	if(!(shp = shm_lock(id)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#599: FILE: ipc/shm.c:114:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#607: FILE: ipc/shm.c:121:
+static void shm_open (struct vm_area_struct *shmd)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#646: FILE: ipc/shm.c:123:
+	shm_inc ((int)shmd->vm_file->private_data);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#650: FILE: ipc/shm.c:126:
+static void shm_destroy (struct shmid_kernel *shp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#658: FILE: ipc/shm.c:128:
+	struct file * file = shp->shm_file;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#719: FILE: ipc/shm.c:132:
+	shm_unlock (shp->id);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#720: FILE: ipc/shm.c:133:
+	shm_rmid (shp->id);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#721: FILE: ipc/shm.c:134:
+	kfree (shp);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#722: FILE: ipc/shm.c:135:
+	fput (file);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#843: FILE: ipc/shm.c:144:
+static void shm_close (struct vm_area_struct *shmd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#847: FILE: ipc/shm.c:146:
+	struct file * file = shmd->vm_file;

CHECK:SPACING: No space is necessary after a cast
#848: FILE: ipc/shm.c:147:
+	int id = (int) file->private_data;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#901: FILE: ipc/shm.c:150:
+	down (&shm_ids.sem);

ERROR:SPACING: space required before the open parenthesis '('
#903: FILE: ipc/shm.c:152:
+	if(!(shp = shm_lock(id)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#903: FILE: ipc/shm.c:152:
+	if(!(shp = shm_lock(id)))

ERROR:SPACING: space required before the open parenthesis '('
#914: FILE: ipc/shm.c:156:
+	if(shp->shm_flags & PRV_DEST &&

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#915: FILE: ipc/shm.c:157:
+	   file_count (file) == 1) /* shp has the last reference*/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#916: FILE: ipc/shm.c:158:
+		shm_destroy (shp);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#917: FILE: ipc/shm.c:159:
+^Ielse $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#922: FILE: ipc/shm.c:162:
+	up (&shm_ids.sem);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#926: FILE: ipc/shm.c:165:
+static int shm_mmap(struct file * file, struct vm_area_struct * vma)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#926: FILE: ipc/shm.c:165:
+static int shm_mmap(struct file * file, struct vm_area_struct * vma)

CHECK:SPACING: No space is necessary after a cast
#947: FILE: ipc/shm.c:169:
+	shm_inc((int) file->private_data);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#956: FILE: ipc/shm.c:173:
+static struct file_operations shm_file_operations = {

WARNING:INDENTED_LABEL: labels should not be indented
#957: FILE: ipc/shm.c:174:
+	mmap:		shm_mmap

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#962: FILE: ipc/shm.c:177:
+static struct vm_operations_struct shm_vm_ops = {

WARNING:INDENTED_LABEL: labels should not be indented
#963: FILE: ipc/shm.c:178:
+	open:	shm_open,	/* callback for a new vm-area open */

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#964: FILE: ipc/shm.c:179:
+	close:	shm_close,	/* callback for when the vm-area is released */
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#964: FILE: ipc/shm.c:179:
+	close:	shm_close,	/* callback for when the vm-area is released */

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#965: FILE: ipc/shm.c:180:
+	nopage:	shmem_nopage,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#965: FILE: ipc/shm.c:180:
+	nopage:	shmem_nopage,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#966: FILE: ipc/shm.c:181:
+	swapout:shmem_swapout,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#966: FILE: ipc/shm.c:181:
+	swapout:shmem_swapout,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#969: FILE: ipc/shm.c:184:
+static int newseg (key_t key, int shmflg, size_t size)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#973: FILE: ipc/shm.c:188:
+	struct file * file;

CHECK:SPACING: No space is necessary after a cast
#989: FILE: ipc/shm.c:195:
+	shp = (struct shmid_kernel *) kmalloc (sizeof (*shp), GFP_USER);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#989: FILE: ipc/shm.c:195:
+	shp = (struct shmid_kernel *) kmalloc (sizeof (*shp), GFP_USER);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#989: FILE: ipc/shm.c:195:
+	shp = (struct shmid_kernel *) kmalloc (sizeof (*shp), GFP_USER);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#989: FILE: ipc/shm.c:195:
+	shp = (struct shmid_kernel *) kmalloc (sizeof (*shp), GFP_USER);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1017: FILE: ipc/shm.c:213:
+	sprintf (name, "SYSV%08x", id);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1018: FILE: ipc/shm.c:214:
+	if (IS_ERR(file = shmem_file_setup(NULL, name, size)))

CHECK:SPACING: No space is necessary after a cast
#1020: FILE: ipc/shm.c:216:
+	file->private_data = (void*) id;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1020: FILE: ipc/shm.c:216:
+	file->private_data = (void*) id;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1024: FILE: ipc/shm.c:220:
+		BUG();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1027: FILE: ipc/shm.c:223:
+	shm_unlock (id);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1033: FILE: ipc/shm.c:229:
+	kfree (shp);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1051: FILE: ipc/shm.c:244:
+	} else if ((id = ipc_findkey(&shm_ids, key)) == -1) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1089: FILE: ipc/shm.c:358:
+static void shm_get_stat (unsigned long *rss, unsigned long *swp) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1089: FILE: ipc/shm.c:358:
+static void shm_get_stat (unsigned long *rss, unsigned long *swp) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1104: FILE: ipc/shm.c:400:
+		shm_get_stat (&shm_info.shm_rss, &shm_info.shm_swp);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1137: FILE: ipc/shm.c:448:
+		tbuf.shm_nattch	= file_count (shp->shm_file) - 1;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1163: FILE: ipc/shm.c:491:
+^I^Iif (shp == NULL) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!shp"
#1163: FILE: ipc/shm.c:491:
+		if (shp == NULL) 

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1178: FILE: ipc/shm.c:495:
+			if (file_count (shp->shm_file) == 1) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'shp->shm_file'
#1178: FILE: ipc/shm.c:495:
+			if (file_count (shp->shm_file) == 1) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1179: FILE: ipc/shm.c:496:
+				shm_destroy (shp);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1279: FILE: ipc/shm.c:602:
+	get_file (file);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1300: FILE: ipc/shm.c:608:
+	fput (file);

WARNING:LONG_LINE_STRING: line length of 151 exceeds 100 columns
#1591: FILE: ipc/shm.c:645:
+	len += sprintf(buffer, "       key      shmid perms       size  cpid  lpid nattch   uid   gid  cuid  cgid      atime      dtime      ctime\n");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1612: FILE: ipc/shm.c:667:
+				file_count (shp->shm_file) - 1,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1819: FILE: kernel/sysctl.c:66:
+extern size_t shm_ctlall;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1820: FILE: kernel/sysctl.c:67:
+extern int shm_ctlmni;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1828: FILE: kernel/sysctl.c:213:
+	{KERN_SHMALL, "shmall", &shm_ctlall, sizeof (size_t),

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1830: FILE: kernel/sysctl.c:215:
+	{KERN_SHMMNI, "shmmni", &shm_ctlmni, sizeof (int),

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1857: FILE: mm/filemap.c:545:
+struct page * __find_get_page(struct address_space *mapping,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1878: FILE: mm/shmem.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1884: FILE: mm/shmem.c:7:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1909: FILE: mm/shmem.c:32:
+#include <asm/uaccess.h>

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1913: FILE: mm/shmem.c:36:
+#define ENTRIES_PER_PAGE (PAGE_SIZE/sizeof(unsigned long))
                                    ^

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#1917: FILE: mm/shmem.c:40:
+static struct address_space_operations shmem_aops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1918: FILE: mm/shmem.c:41:
+static struct file_operations shmem_file_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1919: FILE: mm/shmem.c:42:
+static struct inode_operations shmem_inode_operations;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1920: FILE: mm/shmem.c:43:
+static struct file_operations shmem_dir_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1921: FILE: mm/shmem.c:44:
+static struct inode_operations shmem_dir_inode_operations;

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#1922: FILE: mm/shmem.c:45:
+static struct vm_operations_struct shmem_vm_ops;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1924: FILE: mm/shmem.c:47:
+LIST_HEAD (shmem_inodes);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1939: FILE: mm/shmem.c:62:
+static struct dentry * shmem_lookup(struct inode *dir, struct dentry *dentry)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1945: FILE: mm/shmem.c:68:
+static inline swp_entry_t * shmem_swp_entry (struct shmem_inode_info *info, unsigned long index) $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1945: FILE: mm/shmem.c:68:
+static inline swp_entry_t * shmem_swp_entry (struct shmem_inode_info *info, unsigned long index) 

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1945: FILE: mm/shmem.c:68:
+static inline swp_entry_t * shmem_swp_entry (struct shmem_inode_info *info, unsigned long index) 

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1948: FILE: mm/shmem.c:71:
+		return info->i_direct+index;
 		                     ^

ERROR:SPACING: space required before the open brace '{'
#1952: FILE: mm/shmem.c:75:
+		if (!info->i_indirect){

ERROR:CODE_INDENT: code indent should use tabs where possible
#1953: FILE: mm/shmem.c:76:
+                        info->i_indirect = (swp_entry_t *) get_zeroed_page(GFP_USER);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: No space is necessary after a cast
#1953: FILE: mm/shmem.c:76:
+                        info->i_indirect = (swp_entry_t *) get_zeroed_page(GFP_USER);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1953: FILE: mm/shmem.c:76:
+                        info->i_indirect = (swp_entry_t *) get_zeroed_page(GFP_USER);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1954: FILE: mm/shmem.c:77:
+                        if (!info->i_indirect)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1954: FILE: mm/shmem.c:77:
+                        if (!info->i_indirect)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1955: FILE: mm/shmem.c:78:
+                                return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1955: FILE: mm/shmem.c:78:
+                                return NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1956: FILE: mm/shmem.c:79:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1956: FILE: mm/shmem.c:79:
+                }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1957: FILE: mm/shmem.c:80:
+^I^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1958: FILE: mm/shmem.c:81:
+		return info->i_indirect+index;
 		                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1960: FILE: mm/shmem.c:83:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1963: FILE: mm/shmem.c:86:
+                info->i_double = (swp_entry_t **) get_zeroed_page(GFP_USER);$

CHECK:SPACING: No space is necessary after a cast
#1963: FILE: mm/shmem.c:86:
+                info->i_double = (swp_entry_t **) get_zeroed_page(GFP_USER);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1963: FILE: mm/shmem.c:86:
+                info->i_double = (swp_entry_t **) get_zeroed_page(GFP_USER);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1964: FILE: mm/shmem.c:87:
+                if (!info->i_double)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1964: FILE: mm/shmem.c:87:
+                if (!info->i_double)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1965: FILE: mm/shmem.c:88:
+                        return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1965: FILE: mm/shmem.c:88:
+                        return NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1966: FILE: mm/shmem.c:89:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1966: FILE: mm/shmem.c:89:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1967: FILE: mm/shmem.c:90:
+        if(!(info->i_double[index/ENTRIES_PER_PAGE])) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1967: FILE: mm/shmem.c:90:
+        if(!(info->i_double[index/ENTRIES_PER_PAGE])) {$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1967: FILE: mm/shmem.c:90:
+        if(!(info->i_double[index/ENTRIES_PER_PAGE])) {
                                  ^

ERROR:SPACING: space required before the open parenthesis '('
#1967: FILE: mm/shmem.c:90:
+        if(!(info->i_double[index/ENTRIES_PER_PAGE])) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1968: FILE: mm/shmem.c:91:
+                info->i_double[index/ENTRIES_PER_PAGE] = (swp_entry_t *) get_zeroed_page(GFP_USER);$

CHECK:SPACING: No space is necessary after a cast
#1968: FILE: mm/shmem.c:91:
+                info->i_double[index/ENTRIES_PER_PAGE] = (swp_entry_t *) get_zeroed_page(GFP_USER);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1968: FILE: mm/shmem.c:91:
+                info->i_double[index/ENTRIES_PER_PAGE] = (swp_entry_t *) get_zeroed_page(GFP_USER);$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1968: FILE: mm/shmem.c:91:
+                info->i_double[index/ENTRIES_PER_PAGE] = (swp_entry_t *) get_zeroed_page(GFP_USER);
                                     ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1969: FILE: mm/shmem.c:92:
+                if (!info->i_double[index/ENTRIES_PER_PAGE])$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1969: FILE: mm/shmem.c:92:
+                if (!info->i_double[index/ENTRIES_PER_PAGE])$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1969: FILE: mm/shmem.c:92:
+                if (!info->i_double[index/ENTRIES_PER_PAGE])
                                          ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1970: FILE: mm/shmem.c:93:
+                        return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1970: FILE: mm/shmem.c:93:
+                        return NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1971: FILE: mm/shmem.c:94:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1971: FILE: mm/shmem.c:94:
+        }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1972: FILE: mm/shmem.c:95:
+^I$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1973: FILE: mm/shmem.c:96:
+	return info->i_double[index/ENTRIES_PER_PAGE]+index%ENTRIES_PER_PAGE;
 	                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1973: FILE: mm/shmem.c:96:
+	return info->i_double[index/ENTRIES_PER_PAGE]+index%ENTRIES_PER_PAGE;
 	                                             ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#1973: FILE: mm/shmem.c:96:
+	return info->i_double[index/ENTRIES_PER_PAGE]+index%ENTRIES_PER_PAGE;
 	                                                   ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1979: FILE: mm/shmem.c:102:
+	struct page * page;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1984: FILE: mm/shmem.c:107:
+		swap_free (*ptr);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1985: FILE: mm/shmem.c:108:
+/* ^I^Iatomic_dec (&swap_cnt); */$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1986: FILE: mm/shmem.c:109:
+		if (!(page = lookup_swap_cache(*ptr)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1993: FILE: mm/shmem.c:116:
+static unsigned long $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1993: FILE: mm/shmem.c:116:
+static unsigned long 
+shmem_truncate_part (swp_entry_t * dir, unsigned long size, 
+		     unsigned long start) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1994: FILE: mm/shmem.c:117:
+shmem_truncate_part (swp_entry_t * dir, unsigned long size, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1994: FILE: mm/shmem.c:117:
+shmem_truncate_part (swp_entry_t * dir, unsigned long size, 

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1994: FILE: mm/shmem.c:117:
+shmem_truncate_part (swp_entry_t * dir, unsigned long size, 

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1999: FILE: mm/shmem.c:122:
+		shmem_free_swp (dir+start, size-start);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1999: FILE: mm/shmem.c:122:
+		shmem_free_swp (dir+start, size-start);
 		                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1999: FILE: mm/shmem.c:122:
+		shmem_free_swp (dir+start, size-start);
 		                               ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2000: FILE: mm/shmem.c:123:
+		memset(dir+start, 0, (size-start) * sizeof (swp_entry_t));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2000: FILE: mm/shmem.c:123:
+		memset(dir+start, 0, (size-start) * sizeof (swp_entry_t));
 		          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2000: FILE: mm/shmem.c:123:
+		memset(dir+start, 0, (size-start) * sizeof (swp_entry_t));
 		                          ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2005: FILE: mm/shmem.c:128:
+static void shmem_truncate (struct inode * inode)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2005: FILE: mm/shmem.c:128:
+static void shmem_truncate (struct inode * inode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2010: FILE: mm/shmem.c:133:
+	struct shmem_inode_info * info = &inode->u.shmem_i;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2014: FILE: mm/shmem.c:137:
+	start = shmem_truncate_part (info->i_direct, SHMEM_NR_DIRECT, start);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2017: FILE: mm/shmem.c:140:
+		start = shmem_truncate_part (info->i_indirect, ENTRIES_PER_PAGE, start);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2019: FILE: mm/shmem.c:142:
+		shmem_free_swp (info->i_indirect, ENTRIES_PER_PAGE);

CHECK:SPACING: No space is necessary after a cast
#2020: FILE: mm/shmem.c:143:
+		free_page ((unsigned long) info->i_indirect);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2020: FILE: mm/shmem.c:143:
+		free_page ((unsigned long) info->i_indirect);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2024: FILE: mm/shmem.c:147:
+	if (!(base = info->i_double))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2032: FILE: mm/shmem.c:155:
+			shmem_free_swp (*ptr, ENTRIES_PER_PAGE);

CHECK:SPACING: No space is necessary after a cast
#2033: FILE: mm/shmem.c:156:
+			free_page ((unsigned long) *ptr);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2033: FILE: mm/shmem.c:156:
+			free_page ((unsigned long) *ptr);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2038: FILE: mm/shmem.c:161:
+		start = shmem_truncate_part (info->i_indirect, ENTRIES_PER_PAGE, start);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2044: FILE: mm/shmem.c:167:
+	free_page ((unsigned long)base);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2048: FILE: mm/shmem.c:171:
+static void shmem_put_inode(struct inode * inode)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2050: FILE: mm/shmem.c:173:
+	vmtruncate (inode, 0);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2051: FILE: mm/shmem.c:174:
+	spin_lock (&shmem_ilock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2052: FILE: mm/shmem.c:175:
+	list_del (&inode->u.shmem_i.list);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2053: FILE: mm/shmem.c:176:
+	spin_unlock (&shmem_ilock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2054: FILE: mm/shmem.c:177:
+	force_delete (inode);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2059: FILE: mm/shmem.c:182:
+	struct inode * inode = new_inode(sb);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2062: FILE: mm/shmem.c:185:
+		spin_lock (&shmem_ilock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2063: FILE: mm/shmem.c:186:
+		list_add (&inode->u.shmem_i.list, &shmem_inodes);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2064: FILE: mm/shmem.c:187:
+		spin_unlock (&shmem_ilock);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2072: FILE: mm/shmem.c:195:
+		inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2098: FILE: mm/shmem.c:221:
+	struct inode * inode = shmem_get_inode(dir->i_sb, mode, dev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2109: FILE: mm/shmem.c:232:
+static int shmem_mkdir(struct inode * dir, struct dentry * dentry, int mode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2109: FILE: mm/shmem.c:232:
+static int shmem_mkdir(struct inode * dir, struct dentry * dentry, int mode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2122: FILE: mm/shmem.c:245:
+static int shmem_link(struct dentry *old_dentry, struct inode * dir, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2122: FILE: mm/shmem.c:245:
+static int shmem_link(struct dentry *old_dentry, struct inode * dir, struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2173: FILE: mm/shmem.c:296:
+static int shmem_unlink(struct inode * dir, struct dentry *dentry)

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#2195: FILE: mm/shmem.c:318:
+static int shmem_rename(struct inode * old_dir, struct dentry *old_dentry, struct inode * new_dir,struct dentry *new_dentry)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2195: FILE: mm/shmem.c:318:
+static int shmem_rename(struct inode * old_dir, struct dentry *old_dentry, struct inode * new_dir,struct dentry *new_dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2195: FILE: mm/shmem.c:318:
+static int shmem_rename(struct inode * old_dir, struct dentry *old_dentry, struct inode * new_dir,struct dentry *new_dentry)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2195: FILE: mm/shmem.c:318:
+static int shmem_rename(struct inode * old_dir, struct dentry *old_dentry, struct inode * new_dir,struct dentry *new_dentry)
                                                                                                  ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2201: FILE: mm/shmem.c:324:
+		struct inode *inode = new_dentry->d_inode;
+		if (inode) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2210: FILE: mm/shmem.c:333:
+static int shmem_symlink(struct inode * dir, struct dentry *dentry, const char * symname)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2210: FILE: mm/shmem.c:333:
+static int shmem_symlink(struct inode * dir, struct dentry *dentry, const char * symname)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#2214: FILE: mm/shmem.c:337:
+	error = shmem_mknod(dir, dentry, S_IFLNK | S_IRWXUGO, 0);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2216: FILE: mm/shmem.c:339:
+		int l = strlen(symname)+1;
 		                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2218: FILE: mm/shmem.c:341:
+		struct inode *inode = dentry->d_inode;
+		error = block_symlink(inode, symname, l);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2223: FILE: mm/shmem.c:346:
+static int shmem_mmap(struct file * file, struct vm_area_struct * vma)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2223: FILE: mm/shmem.c:346:
+static int shmem_mmap(struct file * file, struct vm_area_struct * vma)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2236: FILE: mm/shmem.c:359:
+int shmem_swapout(struct page * page, struct file *file)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2241: FILE: mm/shmem.c:364:
+static int shmem_writepage(struct page * page)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2245: FILE: mm/shmem.c:368:
+	entry = shmem_swp_entry (&((struct inode *)page->mapping->host)->u.shmem_i, page->index);

WARNING:TYPO_SPELLING: 'allocted' may be misspelled - perhaps 'allocated'?
#2247: FILE: mm/shmem.c:370:
+	if (!entry)	/* this had been allocted on page allocation */
 	           	                 ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2248: FILE: mm/shmem.c:371:
+		BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2249: FILE: mm/shmem.c:372:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2251: FILE: mm/shmem.c:374:
+		BUG();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2252: FILE: mm/shmem.c:375:
+	*entry = __get_swap_page (2);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2257: FILE: mm/shmem.c:380:
+	lru_cache_del (page);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2258: FILE: mm/shmem.c:381:
+	remove_inode_page (page);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2259: FILE: mm/shmem.c:382:
+	page_cache_release (page);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2263: FILE: mm/shmem.c:386:
+	UnlockPage (page);

CHECK:CAMELCASE: Avoid CamelCase: <UnlockPage>
#2263: FILE: mm/shmem.c:386:
+	UnlockPage (page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2268: FILE: mm/shmem.c:391:
+struct page * shmem_nopage(struct vm_area_struct * vma, unsigned long address, int no_share)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2268: FILE: mm/shmem.c:391:
+struct page * shmem_nopage(struct vm_area_struct * vma, unsigned long address, int no_share)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2271: FILE: mm/shmem.c:394:
+	struct page * page;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2274: FILE: mm/shmem.c:397:
+	struct inode * inode = vma->vm_file->f_dentry->d_inode;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2275: FILE: mm/shmem.c:398:
+	struct address_space * mapping = inode->i_mapping;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'idx >= size'
#2281: FILE: mm/shmem.c:404:
+	if ((idx >= size) && (vma->vm_mm == current->mm))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_mm == current->mm'
#2281: FILE: mm/shmem.c:404:
+	if ((idx >= size) && (vma->vm_mm == current->mm))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2284: FILE: mm/shmem.c:407:
+	down (&inode->i_sem);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2286: FILE: mm/shmem.c:409:
+	page = __find_get_page(mapping, idx, page_hash (mapping, idx));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2290: FILE: mm/shmem.c:413:
+	entry = shmem_swp_entry (&inode->u.shmem_i, idx);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2301: FILE: mm/shmem.c:424:
+^I^I^Iif (!page) $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2316: FILE: mm/shmem.c:439:
+	add_to_page_cache (page, mapping, idx);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2317: FILE: mm/shmem.c:440:
+	SetPageDirty (page);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2318: FILE: mm/shmem.c:441:
+	SetPageUptodate (page);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2319: FILE: mm/shmem.c:442:
+	UnlockPage (page);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2321: FILE: mm/shmem.c:444:
+	return(page);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2329: FILE: mm/shmem.c:452:
+static int shmem_parse_options(char *options, int *mode, unsigned long * blocks)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2334: FILE: mm/shmem.c:457:
+	if ( options )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2334: FILE: mm/shmem.c:457:
+	if ( options )

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2335: FILE: mm/shmem.c:458:
+		this_char = strtok(options,",");
 		                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2336: FILE: mm/shmem.c:459:
+	for ( ; this_char; this_char = strtok(NULL,",")) {
 	                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2337: FILE: mm/shmem.c:460:
+		if ((value = strchr(this_char,'=')) != NULL)
 		                             ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2337: FILE: mm/shmem.c:460:
+		if ((value = strchr(this_char,'=')) != NULL)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2339: FILE: mm/shmem.c:462:
+		if (!strcmp(this_char,"nr_blocks")) {
 		                     ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#2339: FILE: mm/shmem.c:462:
+		if (!strcmp(this_char,"nr_blocks")) {
[...]
+		} else if (!strcmp(this_char,"mode")) {
[...]
+		else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#2342: FILE: mm/shmem.c:465:
+			*blocks = simple_strtoul(value,&value,0);
 			                              ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#2342: FILE: mm/shmem.c:465:
+			*blocks = simple_strtoul(value,&value,0);
 			                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2342: FILE: mm/shmem.c:465:
+			*blocks = simple_strtoul(value,&value,0);
 			                                     ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#2342: FILE: mm/shmem.c:465:
+			*blocks = simple_strtoul(value,&value,0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2345: FILE: mm/shmem.c:468:
+		} else if (!strcmp(this_char,"mode")) {
 		                            ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#2348: FILE: mm/shmem.c:471:
+			*mode = simple_strtoul(value,&value,8);
 			                            ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#2348: FILE: mm/shmem.c:471:
+			*mode = simple_strtoul(value,&value,8);
 			                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2348: FILE: mm/shmem.c:471:
+			*mode = simple_strtoul(value,&value,8);
 			                                   ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#2348: FILE: mm/shmem.c:471:
+			*mode = simple_strtoul(value,&value,8);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2352: FILE: mm/shmem.c:475:
+		}
+		else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2359: FILE: mm/shmem.c:482:
+static struct super_block *shmem_read_super(struct super_block * sb, void * data, int silent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2359: FILE: mm/shmem.c:482:
+static struct super_block *shmem_read_super(struct super_block * sb, void * data, int silent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2361: FILE: mm/shmem.c:484:
+	struct inode * inode;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2362: FILE: mm/shmem.c:485:
+	struct dentry * root;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#2364: FILE: mm/shmem.c:487:
+	int mode   = S_IRWXUGO | S_ISVTX;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2366: FILE: mm/shmem.c:489:
+	if (shmem_parse_options (data, &mode, &blocks)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2367: FILE: mm/shmem.c:490:
+		printk(KERN_ERR "shmem fs invalid option\n");

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#2381: FILE: mm/shmem.c:504:
+		iput(inode);
 		^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2388: FILE: mm/shmem.c:511:
+static int shmem_remount_fs (struct super_block *sb, int *flags, char *data)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2390: FILE: mm/shmem.c:513:
+	if (shmem_parse_options (data, NULL, NULL))

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#2395: FILE: mm/shmem.c:518:
+static struct address_space_operations shmem_aops = {

WARNING:INDENTED_LABEL: labels should not be indented
#2396: FILE: mm/shmem.c:519:
+	writepage: shmem_writepage

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2399: FILE: mm/shmem.c:522:
+static struct file_operations shmem_file_operations = {

WARNING:INDENTED_LABEL: labels should not be indented
#2400: FILE: mm/shmem.c:523:
+	mmap:		shmem_mmap

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#2403: FILE: mm/shmem.c:526:
+static struct inode_operations shmem_inode_operations = {

WARNING:INDENTED_LABEL: labels should not be indented
#2404: FILE: mm/shmem.c:527:
+	truncate:	shmem_truncate,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2407: FILE: mm/shmem.c:530:
+static struct file_operations shmem_dir_operations = {

WARNING:INDENTED_LABEL: labels should not be indented
#2408: FILE: mm/shmem.c:531:
+	read:		generic_read_dir,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2409: FILE: mm/shmem.c:532:
+	readdir:	dcache_readdir,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#2409: FILE: mm/shmem.c:532:
+	readdir:	dcache_readdir,

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#2412: FILE: mm/shmem.c:535:
+static struct inode_operations shmem_dir_inode_operations = {

WARNING:INDENTED_LABEL: labels should not be indented
#2413: FILE: mm/shmem.c:536:
+	create:		shmem_create,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2414: FILE: mm/shmem.c:537:
+	lookup:		shmem_lookup,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#2414: FILE: mm/shmem.c:537:
+	lookup:		shmem_lookup,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2415: FILE: mm/shmem.c:538:
+	link:		shmem_link,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#2415: FILE: mm/shmem.c:538:
+	link:		shmem_link,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2416: FILE: mm/shmem.c:539:
+	unlink:		shmem_unlink,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#2416: FILE: mm/shmem.c:539:
+	unlink:		shmem_unlink,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2417: FILE: mm/shmem.c:540:
+	symlink:	shmem_symlink,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#2417: FILE: mm/shmem.c:540:
+	symlink:	shmem_symlink,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2418: FILE: mm/shmem.c:541:
+	mkdir:		shmem_mkdir,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#2418: FILE: mm/shmem.c:541:
+	mkdir:		shmem_mkdir,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2419: FILE: mm/shmem.c:542:
+	rmdir:		shmem_rmdir,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#2419: FILE: mm/shmem.c:542:
+	rmdir:		shmem_rmdir,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2420: FILE: mm/shmem.c:543:
+	mknod:		shmem_mknod,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#2420: FILE: mm/shmem.c:543:
+	mknod:		shmem_mknod,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2421: FILE: mm/shmem.c:544:
+	rename:		shmem_rename,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#2421: FILE: mm/shmem.c:544:
+	rename:		shmem_rename,

WARNING:INDENTED_LABEL: labels should not be indented
#2425: FILE: mm/shmem.c:548:
+	statfs:		shmem_statfs,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2426: FILE: mm/shmem.c:549:
+	remount_fs:	shmem_remount_fs,
 	          ^

WARNING:INDENTED_LABEL: labels should not be indented
#2426: FILE: mm/shmem.c:549:
+	remount_fs:	shmem_remount_fs,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2427: FILE: mm/shmem.c:550:
+	put_inode:	shmem_put_inode,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#2427: FILE: mm/shmem.c:550:
+	put_inode:	shmem_put_inode,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2430: FILE: mm/shmem.c:553:
+
+

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#2431: FILE: mm/shmem.c:554:
+static struct vm_operations_struct shmem_vm_ops = {

WARNING:INDENTED_LABEL: labels should not be indented
#2434: FILE: mm/shmem.c:557:
+	nopage:	shmem_nopage,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#2435: FILE: mm/shmem.c:558:
+	swapout:shmem_swapout,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#2435: FILE: mm/shmem.c:558:
+	swapout:shmem_swapout,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2443: FILE: mm/shmem.c:566:
+	struct vfsmount * res;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2445: FILE: mm/shmem.c:568:
+	if ((error = register_filesystem(&shmem_fs_type))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2446: FILE: mm/shmem.c:569:
+		printk (KERN_ERR "Could not register shmem fs\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2446: FILE: mm/shmem.c:569:
+		printk (KERN_ERR "Could not register shmem fs\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2451: FILE: mm/shmem.c:574:
+	if (IS_ERR (res)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2452: FILE: mm/shmem.c:575:
+		printk (KERN_ERR "could not kern_mount shmem fs\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2452: FILE: mm/shmem.c:575:
+		printk (KERN_ERR "could not kern_mount shmem fs\n");

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#2467: FILE: mm/shmem.c:590:
+static int shmem_clear_swp (swp_entry_t entry, swp_entry_t *ptr, int size) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2467: FILE: mm/shmem.c:590:
+static int shmem_clear_swp (swp_entry_t entry, swp_entry_t *ptr, int size) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2472: FILE: mm/shmem.c:595:
+			swap_free (entry);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2480: FILE: mm/shmem.c:603:
+static int shmem_unuse_inode (struct inode *inode, swp_entry_t entry, struct page *page)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2485: FILE: mm/shmem.c:608:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2487: FILE: mm/shmem.c:610:
+	if ((offset = shmem_clear_swp (entry, inode->u.shmem_i.i_direct, SHMEM_NR_DIRECT)) >= 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2487: FILE: mm/shmem.c:610:
+	if ((offset = shmem_clear_swp (entry, inode->u.shmem_i.i_direct, SHMEM_NR_DIRECT)) >= 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2491: FILE: mm/shmem.c:614:
+	if (inode->u.shmem_i.i_indirect &&

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2492: FILE: mm/shmem.c:615:
+	    (offset = shmem_clear_swp (entry, inode->u.shmem_i.i_indirect, ENTRIES_PER_PAGE)) >= 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2495: FILE: mm/shmem.c:618:
+	if (!(base = inode->u.shmem_i.i_double))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2500: FILE: mm/shmem.c:623:
+		if (*ptr &&

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2501: FILE: mm/shmem.c:624:
+		    (offset = shmem_clear_swp (entry, *ptr, ENTRIES_PER_PAGE)) >= 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2505: FILE: mm/shmem.c:628:
+^I^I^I^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2508: FILE: mm/shmem.c:631:
+	delete_from_swap_cache (page);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2509: FILE: mm/shmem.c:632:
+	add_to_page_cache (page, inode->i_mapping, idx);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2510: FILE: mm/shmem.c:633:
+	SetPageDirty (page);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2511: FILE: mm/shmem.c:634:
+	SetPageUptodate (page);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2512: FILE: mm/shmem.c:635:
+	UnlockPage (page);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2522: FILE: mm/shmem.c:645:
+	struct inode * inode;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2524: FILE: mm/shmem.c:647:
+	spin_lock (&shmem_ilock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2531: FILE: mm/shmem.c:654:
+	spin_unlock (&shmem_ilock);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2534: FILE: mm/shmem.c:657:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2535: FILE: mm/shmem.c:658:
+struct file *shmem_file_setup(struct file *fzero, char * name, loff_t size)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2541: FILE: mm/shmem.c:664:
+	struct qstr this;
+	int vm_enough_memory(long pages);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2541: FILE: mm/shmem.c:664:
+	int vm_enough_memory(long pages);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2562: FILE: mm/shmem.c:685:
+	error = shmem_create (root->d_inode, dentry, S_IRWXUGO);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#2562: FILE: mm/shmem.c:685:
+	error = shmem_create (root->d_inode, dentry, S_IRWXUGO);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2564: FILE: mm/shmem.c:687:
+	dput (dentry);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2574: FILE: mm/shmem.c:697:
+	return(file);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2579: FILE: mm/shmem.c:702:
+^Ireturn ERR_PTR(error);^I$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2584: FILE: mm/shmem.c:707:
+	extern int vm_enough_memory(long pages);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2587: FILE: mm/shmem.c:710:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000562591.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 127 errors, 172 warnings, 37 checks, 2335 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000562591.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
