WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
o This patch describes the necessary data structures needed for sysfs backing

ERROR:POINTER_LOCATION: "foo	* bar" should be "foo	*bar"
#60: FILE: include/linux/kobject.h:34:
+	struct sysfs_dirent	* s_dirent;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#81: FILE: include/linux/sysfs.h:69:
+^Istruct list_head^Is_sibling;  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#83: FILE: include/linux/sysfs.h:71:
+^Ivoid ^I^I^I* s_element;$

ERROR:POINTER_LOCATION: "foo 			* bar" should be "foo 			*bar"
#83: FILE: include/linux/sysfs.h:71:
+	void 			* s_element;

ERROR:POINTER_LOCATION: "foo		* bar" should be "foo		*bar"
#84: FILE: include/linux/sysfs.h:72:
+	struct dentry		* s_dentry;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#156: FILE: fs/sysfs/mount.c:73:
+static void sysfs_kill_super(struct super_block * sb)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#202: FILE: fs/sysfs/sysfs.h:11:
+extern int sysfs_add_file(struct sysfs_dirent * , const struct attribute * );
                                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#202: FILE: fs/sysfs/sysfs.h:11:
+extern int sysfs_add_file(struct sysfs_dirent * , const struct attribute * );

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#202: FILE: fs/sysfs/sysfs.h:11:
+extern int sysfs_add_file(struct sysfs_dirent * , const struct attribute * );

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysfs_dirent *' should also have an identifier name
#202: FILE: fs/sysfs/sysfs.h:11:
+extern int sysfs_add_file(struct sysfs_dirent * , const struct attribute * );

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct attribute *' should also have an identifier name
#202: FILE: fs/sysfs/sysfs.h:11:
+extern int sysfs_add_file(struct sysfs_dirent * , const struct attribute * );

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#203: FILE: fs/sysfs/sysfs.h:12:
+extern void sysfs_hash_and_remove(struct sysfs_dirent *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysfs_dirent *' should also have an identifier name
#203: FILE: fs/sysfs/sysfs.h:12:
+extern void sysfs_hash_and_remove(struct sysfs_dirent *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#203: FILE: fs/sysfs/sysfs.h:12:
+extern void sysfs_hash_and_remove(struct sysfs_dirent *, const char *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#207: FILE: fs/sysfs/sysfs.h:15:
+extern char * sysfs_get_name(struct sysfs_dirent *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#207: FILE: fs/sysfs/sysfs.h:15:
+extern char * sysfs_get_name(struct sysfs_dirent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysfs_dirent *' should also have an identifier name
#207: FILE: fs/sysfs/sysfs.h:15:
+extern char * sysfs_get_name(struct sysfs_dirent *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#208: FILE: fs/sysfs/sysfs.h:16:
+extern int sysfs_get_link_count(struct sysfs_dirent *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysfs_dirent *' should also have an identifier name
#208: FILE: fs/sysfs/sysfs.h:16:
+extern int sysfs_get_link_count(struct sysfs_dirent *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#209: FILE: fs/sysfs/sysfs.h:17:
+extern struct dentry * sysfs_get_new_dentry(struct dentry *, const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#209: FILE: fs/sysfs/sysfs.h:17:
+extern struct dentry * sysfs_get_new_dentry(struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#209: FILE: fs/sysfs/sysfs.h:17:
+extern struct dentry * sysfs_get_new_dentry(struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#209: FILE: fs/sysfs/sysfs.h:17:
+extern struct dentry * sysfs_get_new_dentry(struct dentry *, const char *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#210: FILE: fs/sysfs/sysfs.h:18:
+extern int sysfs_init_file(struct inode * inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#210: FILE: fs/sysfs/sysfs.h:18:
+extern int sysfs_init_file(struct inode * inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#211: FILE: fs/sysfs/sysfs.h:19:
+extern int sysfs_symlink(struct inode *, struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#211: FILE: fs/sysfs/sysfs.h:19:
+extern int sysfs_symlink(struct inode *, struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#211: FILE: fs/sysfs/sysfs.h:19:
+extern int sysfs_symlink(struct inode *, struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#211: FILE: fs/sysfs/sysfs.h:19:
+extern int sysfs_symlink(struct inode *, struct dentry *, const char *);

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#213: FILE: fs/sysfs/sysfs.h:21:
+extern struct inode_operations sysfs_dir_inode_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#214: FILE: fs/sysfs/sysfs.h:22:
+extern struct file_operations sysfs_dir_operations;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#215: FILE: fs/sysfs/sysfs.h:23:
+extern struct file_operations bin_fops;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#217: FILE: fs/sysfs/sysfs.h:25:
+struct dentry * sysfs_lookup(struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#217: FILE: fs/sysfs/sysfs.h:25:
+struct dentry * sysfs_lookup(struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#217: FILE: fs/sysfs/sysfs.h:25:
+struct dentry * sysfs_lookup(struct inode *, struct dentry *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#217: FILE: fs/sysfs/sysfs.h:25:
+struct dentry * sysfs_lookup(struct inode *, struct dentry *, struct nameidata *);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#221: FILE: fs/sysfs/sysfs.h:29:
+int sysfs_readdir(struct file * filp, void * dirent, filldir_t filldir);
                                 ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#221: FILE: fs/sysfs/sysfs.h:29:
+int sysfs_readdir(struct file * filp, void * dirent, filldir_t filldir);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#221: FILE: fs/sysfs/sysfs.h:29:
+int sysfs_readdir(struct file * filp, void * dirent, filldir_t filldir);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#223: FILE: fs/sysfs/sysfs.h:31:
+static inline struct kobject * sysfs_get_file_kobject(struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#223: FILE: fs/sysfs/sysfs.h:31:
+static inline struct kobject * sysfs_get_file_kobject(struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#225: FILE: fs/sysfs/sysfs.h:33:
+	struct dentry * parent;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#226: FILE: fs/sysfs/sysfs.h:34:
+	struct sysfs_dirent * sd;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#227: FILE: fs/sysfs/sysfs.h:35:
+^I$

CHECK:SPACING: No space is necessary after a cast
#233: FILE: fs/sysfs/sysfs.h:41:
+	return (struct kobject *) sd->s_element;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#234: FILE: fs/sysfs/sysfs.h:42:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#235: FILE: fs/sysfs/sysfs.h:43:
+		
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#237: FILE: fs/sysfs/sysfs.h:45:
+static inline struct attribute * sysfs_get_file_attr(struct file * filp)
                                                                    ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#237: FILE: fs/sysfs/sysfs.h:45:
+static inline struct attribute * sysfs_get_file_attr(struct file * filp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#237: FILE: fs/sysfs/sysfs.h:45:
+static inline struct attribute * sysfs_get_file_attr(struct file * filp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#239: FILE: fs/sysfs/sysfs.h:47:
+	struct sysfs_dirent * sd = filp->f_dentry->d_fsdata;

WARNING:LINE_SPACING: Missing a blank line after declarations
#240: FILE: fs/sysfs/sysfs.h:48:
+	struct sysfs_dirent * sd = filp->f_dentry->d_fsdata;
+	return sd->s_element;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#241: FILE: fs/sysfs/sysfs.h:49:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#242: FILE: fs/sysfs/sysfs.h:50:
+		
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#244: FILE: fs/sysfs/sysfs.h:52:
+static inline struct sysfs_dirent * $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#245: FILE: fs/sysfs/sysfs.h:53:
+sysfs_alloc_dirent(struct sysfs_dirent * parent_sd, void * element, int type)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#245: FILE: fs/sysfs/sysfs.h:53:
+sysfs_alloc_dirent(struct sysfs_dirent * parent_sd, void * element, int type)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#247: FILE: fs/sysfs/sysfs.h:55:
+	struct sysfs_dirent * sd;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#248: FILE: fs/sysfs/sysfs.h:56:
+^I^I^I^I^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#267: FILE: fs/sysfs/sysfs.h:75:
+sysfs_free_dirent(struct sysfs_dirent * parent_sd, const char * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#267: FILE: fs/sysfs/sysfs.h:75:
+sysfs_free_dirent(struct sysfs_dirent * parent_sd, const char * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#269: FILE: fs/sysfs/sysfs.h:77:
+	struct sysfs_dirent * sd;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#270: FILE: fs/sysfs/sysfs.h:78:
+	struct list_head * tmp;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#271: FILE: fs/sysfs/sysfs.h:79:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#286: FILE: fs/sysfs/sysfs.h:94:
+sysfs_free_children(struct sysfs_dirent * parent_sd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#288: FILE: fs/sysfs/sysfs.h:96:
+	struct sysfs_dirent * sd;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#289: FILE: fs/sysfs/sysfs.h:97:
+	struct list_head * tmp;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#290: FILE: fs/sysfs/sysfs.h:98:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000324959.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 37 errors, 22 warnings, 10 checks, 228 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000324959.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
