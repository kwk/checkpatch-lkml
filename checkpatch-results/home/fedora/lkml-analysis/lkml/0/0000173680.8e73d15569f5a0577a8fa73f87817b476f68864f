WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#27: 
Signed-Off-By: Matt Helsley <matthltc@us.ibm.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#28: 
Signed-Off-By: Gerrit Huizenga <gh@us.ibm.com>

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#43: FILE: kernel/ckrm/ckrm.c:851:
+		/* prepare init_task and then rely on inheritance
+		   of properties */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#43: FILE: kernel/ckrm/ckrm.c:851:
+		   of properties */

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#64: FILE: kernel/ckrm/ckrm_tc.c:38:
+#define TASK_EXIT_CLASS ((void*)-1)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#74: FILE: kernel/ckrm/ckrm_tc.c:117:
+	if (TASK_EXIT_CLASS == curcls) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'newcls != TASK_EXIT_CLASS'
#78: FILE: kernel/ckrm/ckrm_tc.c:120:
+		if (newcls && (newcls != TASK_EXIT_CLASS))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'curcls == NULL'
#84: FILE: kernel/ckrm/ckrm_tc.c:125:
+	if ((curcls == NULL) && (newcls == TASK_EXIT_CLASS)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'newcls == TASK_EXIT_CLASS'
#84: FILE: kernel/ckrm/ckrm_tc.c:125:
+	if ((curcls == NULL) && (newcls == TASK_EXIT_CLASS)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!curcls"
#84: FILE: kernel/ckrm/ckrm_tc.c:125:
+	if ((curcls == NULL) && (newcls == TASK_EXIT_CLASS)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'newcls != TASK_EXIT_CLASS'
#93: FILE: kernel/ckrm/ckrm_tc.c:136:
+		if (newcls && (newcls != TASK_EXIT_CLASS)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!newcls"
#102: FILE: kernel/ckrm/ckrm_tc.c:146:
+	if (newcls == NULL) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000173680.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 5 warnings, 6 checks, 93 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000173680.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
