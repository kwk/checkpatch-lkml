WARNING:TYPO_SPELLING: 'completly' may be misspelled - perhaps 'completely'?
#39: 
breaks all the archs out there. This should fix the problem completly
                                                            ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#50: 
	ftp://ftp.us.kernel.org/pub/linux/kernel/people/andrea/patches/v2.4/2.4.18pre2aa2/pte-highmem-5

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#97: FILE: arch/i386/kernel/vm86.c:115:
+	pte_orig = pte = pte_offset(pmd, 0xA0000);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space prohibited after that open parenthesis '('
#284: FILE: drivers/char/drm/drm_vm.h:173:
+	if( !pte_present( *pte ) ) { pte_kunmap(pte); return NOPAGE_OOM; }

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#284: FILE: drivers/char/drm/drm_vm.h:173:
+	if( !pte_present( *pte ) ) { pte_kunmap(pte); return NOPAGE_OOM; }

ERROR:SPACING: space required before the open parenthesis '('
#284: FILE: drivers/char/drm/drm_vm.h:173:
+	if( !pte_present( *pte ) ) { pte_kunmap(pte); return NOPAGE_OOM; }

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#284: FILE: drivers/char/drm/drm_vm.h:173:
+	if( !pte_present( *pte ) ) { pte_kunmap(pte); return NOPAGE_OOM; }

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#365: FILE: include/asm-i386/highmem.h:58:
+#define PKMAP_SIZE ((LAST_PKMAP*KM_NR_SERIES) << PAGE_SHIFT)
                                ^

WARNING:TYPO_SPELLING: 'serie' may be misspelled - perhaps 'series'?
#372: FILE: include/asm-i386/highmem.h:63:
+extern void * FASTCALL(kmap_high(struct page *page, int serie));
                                                         ^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#372: FILE: include/asm-i386/highmem.h:63:
+extern void * FASTCALL(kmap_high(struct page *page, int serie));

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#372: FILE: include/asm-i386/highmem.h:63:
+extern void * FASTCALL(kmap_high(struct page *page, int serie));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#373: FILE: include/asm-i386/highmem.h:64:
+extern void FASTCALL(kunmap_high(void * vaddr));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#373: FILE: include/asm-i386/highmem.h:64:
+extern void FASTCALL(kunmap_high(void * vaddr));

WARNING:TYPO_SPELLING: 'serie' may be misspelled - perhaps 'series'?
#380: FILE: include/asm-i386/highmem.h:70:
+static inline void *kmap_serie(struct page *page, int serie)
                                                       ^^^^^

WARNING:TYPO_SPELLING: 'serie' may be misspelled - perhaps 'series'?
#387: FILE: include/asm-i386/highmem.h:76:
+	return kmap_high(page, serie);
 	                       ^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#414: FILE: include/asm-i386/highmem.h:143:
+		enum fixed_addresses idx;
+		idx = (__fix_to_virt(FIX_KMAP_BEGIN) - kvaddr) >> PAGE_SHIFT;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#419: FILE: include/asm-i386/highmem.h:148:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:NEW_TYPEDEFS: do not add new typedefs
#432: FILE: include/asm-i386/page.h:41:
+typedef struct { unsigned long pmd_low, pmd_high; } pmd_t;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#435: FILE: include/asm-i386/page.h:44:
+#define pmd_val(x)	((x).pmd_low | ((unsigned long long)(x).pmd_high << 32))

WARNING:NEW_TYPEDEFS: do not add new typedefs
#439: FILE: include/asm-i386/page.h:47:
+typedef struct { unsigned long pmd_low; } pmd_t;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#477: FILE: include/asm-i386/pgalloc.h:107:
+static inline struct page * pte_alloc_one_fast(struct mm_struct *mm,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#481: FILE: include/asm-i386/pgalloc.h:110:
+	struct page * page;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#497: FILE: include/asm-i386/pgalloc.h:112:
+	if ((page = pte_quicklist)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#498: FILE: include/asm-i386/pgalloc.h:113:
+		struct page ** pte_vaddr = kmap_atomic(page, KM_USER0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#499: FILE: include/asm-i386/pgalloc.h:114:
+		struct page ** pte_vaddr = kmap_atomic(page, KM_USER0);
+		pte_quicklist = *pte_vaddr;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#509: FILE: include/asm-i386/pgalloc.h:122:
+static inline void pte_free_fast(struct page * page)

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#513: FILE: include/asm-i386/pgalloc.h:124:
+	struct page ** pte_vaddr = kmap_atomic(page, KM_USER0);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#523: FILE: include/asm-i386/pgalloc.h:133:
+	struct page * page = mem_map + (pmd_val(pmd) >> PAGE_SHIFT);

WARNING:LINE_SPACING: Missing a blank line after declarations
#524: FILE: include/asm-i386/pgalloc.h:134:
+	struct page * page = mem_map + (pmd_val(pmd) >> PAGE_SHIFT);
+	pte_free_fast(page);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#527: FILE: include/asm-i386/pgalloc.h:137:
+static __inline__ void pte_free_slow(struct page * page)

WARNING:INLINE: plain inline is preferred over __inline__
#527: FILE: include/asm-i386/pgalloc.h:137:
+static __inline__ void pte_free_slow(struct page * page)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#544: FILE: include/asm-i386/pgtable-2level.h:64:
+#define __mk_pmd(page_nr,pgprot) __pmd(((page_nr) << PAGE_SHIFT) | pgprot_val(pgprot))
                         ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#560: FILE: include/asm-i386/pgtable-3level.h:56:
+	smp_wmb();

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#570: FILE: include/asm-i386/pgtable-3level.h:96:
+#define __pmd_page(x)	(mem_map + (((x).pmd_low >> PAGE_SHIFT) | ((x).pmd_high << (32-PAGE_SHIFT))))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#570: FILE: include/asm-i386/pgtable-3level.h:96:
+#define __pmd_page(x)	(mem_map + (((x).pmd_low >> PAGE_SHIFT) | ((x).pmd_high << (32-PAGE_SHIFT))))
                      	                                                              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#570: FILE: include/asm-i386/pgtable-3level.h:96:
+#define __pmd_page(x)	(mem_map + (((x).pmd_low >> PAGE_SHIFT) | ((x).pmd_high << (32-PAGE_SHIFT))))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#571: FILE: include/asm-i386/pgtable-3level.h:97:
+#define pmd_none(x)	(!(x).pmd_low && !(x).pmd_high)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#627: FILE: include/asm-i386/pgtable.h:326:
+	struct page * __page = __pmd_page(pmd);	\

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#633: FILE: include/asm-i386/pgtable.h:332:
+	struct page * __page = __pmd_page(pmd);	\

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#639: FILE: include/asm-i386/pgtable.h:338:
+	struct page * __page = __pmd_page(pmd);	\

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#645: FILE: include/asm-i386/pgtable.h:344:
+	struct page * __page = __pmd_page(pmd);	\

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#651: FILE: include/asm-i386/pgtable.h:350:
+	struct page * __page = __pmd_page(pmd);	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mm' - possible side-effects?
#655: FILE: include/asm-i386/pgtable.h:354:
+#define pmd_page_under_lock(pmd, mm)			\
+({							\
+	struct page * __page = __pmd_page(pmd);		\
+	int page_highmem = PageHighMem(__page);		\
+	void *__kvaddr;					\
+							\
+	if (page_highmem)				\
+		spin_unlock(&(mm)->page_table_lock);	\
+	__kvaddr = kmap_pagetable(__page);		\
+	if (page_highmem)				\
+		spin_lock(&(mm)->page_table_lock);	\
+	__kvaddr;					\
+})

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#657: FILE: include/asm-i386/pgtable.h:356:
+	struct page * __page = __pmd_page(pmd);		\

CHECK:SPACING: No space is necessary after a cast
#678: FILE: include/asm-i386/pgtable.h:389:
+#define pte_offset2(dir, address) ((pte_t *) pmd_page2(*(dir)) + \

CHECK:SPACING: No space is necessary after a cast
#680: FILE: include/asm-i386/pgtable.h:391:
+#define pte_offset_atomic(dir, address) ((pte_t *) pmd_page_atomic(*(dir)) + \

CHECK:SPACING: No space is necessary after a cast
#682: FILE: include/asm-i386/pgtable.h:393:
+#define pte_offset_atomic2(dir, address) ((pte_t *) pmd_page_atomic2(*(dir)) + \

CHECK:SPACING: No space is necessary after a cast
#684: FILE: include/asm-i386/pgtable.h:395:
+#define pte_offset_under_lock(dir, address, mm) ((pte_t *) pmd_page_under_lock(*(dir), mm) + \

CHECK:SPACING: No space is necessary after a cast
#686: FILE: include/asm-i386/pgtable.h:397:
+#define pte_offset_atomic_irq(dir, address) ((pte_t *) pmd_page_atomic_irq(*(dir)) + \

CHECK:SPACING: No space is necessary after a cast
#688: FILE: include/asm-i386/pgtable.h:399:
+#define pte_offset_lowmem(dir, address) ((pte_t *) pmd_page_lowmem(*(dir)) + \

CHECK:SPACING: No space is necessary after a cast
#690: FILE: include/asm-i386/pgtable.h:401:
+#define pte_kunmap(ptep) kunmap_vaddr((unsigned long) ptep & PAGE_MASK)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ptep' may be better as '(ptep)' to avoid precedence issues
#690: FILE: include/asm-i386/pgtable.h:401:
+#define pte_kunmap(ptep) kunmap_vaddr((unsigned long) ptep & PAGE_MASK)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#734: FILE: mm/filemap.c:2061:
+	pte_t * pte, * pte_orig;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#734: FILE: mm/filemap.c:2061:
+	pte_t * pte, * pte_orig;
 	             ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#743: FILE: mm/filemap.c:2072:
+	pte_orig = pte = pte_offset_atomic(pmd, address);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#772: FILE: mm/highmem.c:34:
+static int pkmap_count[LAST_PKMAP*KM_NR_SERIES];
                                  ^

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#797: FILE: mm/highmem.c:57:
+__initcall(init_kmap);

WARNING:TYPO_SPELLING: 'serie' may be misspelled - perhaps 'series'?
#799: FILE: mm/highmem.c:59:
+static void flush_all_zero_pkmaps(int serie)
                                       ^^^^^

WARNING:TYPO_SPELLING: 'serie' may be misspelled - perhaps 'series'?
#806: FILE: mm/highmem.c:65:
+	for (i = serie * LAST_PKMAP; i < (serie+1) * LAST_PKMAP; i++) {
 	         ^^^^^

WARNING:TYPO_SPELLING: 'serie' may be misspelled - perhaps 'series'?
#806: FILE: mm/highmem.c:65:
+	for (i = serie * LAST_PKMAP; i < (serie+1) * LAST_PKMAP; i++) {
 	                                  ^^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#806: FILE: mm/highmem.c:65:
+	for (i = serie * LAST_PKMAP; i < (serie+1) * LAST_PKMAP; i++) {
 	                                       ^

WARNING:TYPO_SPELLING: 'serie' may be misspelled - perhaps 'series'?
#815: FILE: mm/highmem.c:97:
+static inline unsigned long map_new_virtual(struct page *page, int serie)
                                                                    ^^^^^

WARNING:TYPO_SPELLING: 'serie' may be misspelled - perhaps 'series'?
#826: FILE: mm/highmem.c:106:
+		last_pkmap_nr[serie] = ((last_pkmap_nr[serie] + 1) & LAST_PKMAP_MASK) + serie * LAST_PKMAP;
 		              ^^^^^

WARNING:TYPO_SPELLING: 'serie' may be misspelled - perhaps 'series'?
#826: FILE: mm/highmem.c:106:
+		last_pkmap_nr[serie] = ((last_pkmap_nr[serie] + 1) & LAST_PKMAP_MASK) + serie * LAST_PKMAP;
 		                                       ^^^^^

WARNING:TYPO_SPELLING: 'serie' may be misspelled - perhaps 'series'?
#826: FILE: mm/highmem.c:106:
+		last_pkmap_nr[serie] = ((last_pkmap_nr[serie] + 1) & LAST_PKMAP_MASK) + serie * LAST_PKMAP;
 		                                                                        ^^^^^

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#826: FILE: mm/highmem.c:106:
+		last_pkmap_nr[serie] = ((last_pkmap_nr[serie] + 1) & LAST_PKMAP_MASK) + serie * LAST_PKMAP;

WARNING:TYPO_SPELLING: 'serie' may be misspelled - perhaps 'series'?
#827: FILE: mm/highmem.c:107:
+		if (!(last_pkmap_nr[serie] & LAST_PKMAP_MASK)) {
 		                    ^^^^^

WARNING:TYPO_SPELLING: 'serie' may be misspelled - perhaps 'series'?
#828: FILE: mm/highmem.c:108:
+			flush_all_zero_pkmaps(serie);
 			                      ^^^^^

WARNING:TYPO_SPELLING: 'serie' may be misspelled - perhaps 'series'?
#832: FILE: mm/highmem.c:111:
+		if (!pkmap_count[last_pkmap_nr[serie]])
 		                               ^^^^^

WARNING:TYPO_SPELLING: 'serie' may be misspelled - perhaps 'series'?
#841: FILE: mm/highmem.c:123:
+			add_wait_queue(&pkmap_map_wait[serie], &wait);
 			                               ^^^^^

WARNING:TYPO_SPELLING: 'serie' may be misspelled - perhaps 'series'?
#845: FILE: mm/highmem.c:126:
+			remove_wait_queue(&pkmap_map_wait[serie], &wait);
 			                                  ^^^^^

WARNING:TYPO_SPELLING: 'serie' may be misspelled - perhaps 'series'?
#855: FILE: mm/highmem.c:137:
+	vaddr = PKMAP_ADDR(last_pkmap_nr[serie]);
 	                                 ^^^^^

WARNING:TYPO_SPELLING: 'serie' may be misspelled - perhaps 'series'?
#856: FILE: mm/highmem.c:138:
+	set_pte(&(pkmap_page_table[last_pkmap_nr[serie]]), mk_pte(page, kmap_prot));
 	                                         ^^^^^

WARNING:TYPO_SPELLING: 'serie' may be misspelled - perhaps 'series'?
#859: FILE: mm/highmem.c:140:
+	pkmap_count[last_pkmap_nr[serie]] = 1;
 	                          ^^^^^

WARNING:TYPO_SPELLING: 'serie' may be misspelled - perhaps 'series'?
#866: FILE: mm/highmem.c:146:
+void *kmap_high(struct page *page, int serie)
                                        ^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#872: FILE: mm/highmem.c:152:
+		BUG();

WARNING:TYPO_SPELLING: 'serie' may be misspelled - perhaps 'series'?
#882: FILE: mm/highmem.c:163:
+		vaddr = map_new_virtual(page, serie);
 		                              ^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#891: FILE: mm/highmem.c:171:
+void kunmap_high(void * vaddr)

WARNING:TYPO_SPELLING: 'serie' may be misspelled - perhaps 'series'?
#896: FILE: mm/highmem.c:174:
+	int need_wakeup, serie;
 	                 ^^^^^

CHECK:SPACING: No space is necessary after a cast
#903: FILE: mm/highmem.c:178:
+	nr = PKMAP_NR((unsigned long) vaddr);

WARNING:TYPO_SPELLING: 'serie' may be misspelled - perhaps 'series'?
#904: FILE: mm/highmem.c:179:
+	serie = nr / LAST_PKMAP;
 	^^^^^

WARNING:TYPO_SPELLING: 'serie' may be misspelled - perhaps 'series'?
#920: FILE: mm/highmem.c:201:
+		need_wakeup = waitqueue_active(&pkmap_map_wait[serie]);
 		                                               ^^^^^

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#920: FILE: mm/highmem.c:201:
+		need_wakeup = waitqueue_active(&pkmap_map_wait[serie]);

WARNING:TYPO_SPELLING: 'serie' may be misspelled - perhaps 'series'?
#927: FILE: mm/highmem.c:207:
+		wake_up(&pkmap_map_wait[serie]);
 		                        ^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#994: FILE: mm/memory.c:301:
+	pte_t * ptep, * ptep_orig;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#994: FILE: mm/memory.c:301:
+	pte_t * ptep, * ptep_orig;
 	              ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1003: FILE: mm/memory.c:311:
+	ptep_orig = ptep = pte_offset_atomic(pmd, address);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1053: FILE: mm/memory.c:1368:
+			int ret = handle_pte_fault(mm, vma, address, write_access, pte);
+			pte_kunmap(pte);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1063: FILE: mm/memory.c:1413:
+static inline struct page * pte_alloc_one(struct mm_struct *mm, unsigned long address)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1065: FILE: mm/memory.c:1415:
+	struct page * page;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1080: FILE: mm/memory.c:1431:
+	pte_t * pte;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1084: FILE: mm/memory.c:1434:
+		struct page * page;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1128: FILE: mm/mprotect.c:18:
+	pte_t * pte, * pte_orig;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#1128: FILE: mm/mprotect.c:18:
+	pte_t * pte, * pte_orig;
 	             ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1137: FILE: mm/mprotect.c:28:
+	pte_orig = pte = pte_offset_atomic(pmd, address);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1207: FILE: mm/swapfile.c:405:
+	pte_t * pte, * pte_orig;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#1207: FILE: mm/swapfile.c:405:
+	pte_t * pte, * pte_orig;
 	             ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1216: FILE: mm/swapfile.c:415:
+	pte_orig = pte = pte_offset_atomic(dir, address);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1236: FILE: mm/vmalloc.c:24:
+	pte_t * pte, * pte_orig;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#1236: FILE: mm/vmalloc.c:24:
+	pte_t * pte, * pte_orig;
 	             ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1245: FILE: mm/vmalloc.c:34:
+	pte_orig = pte = pte_offset_atomic(pmd, address);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000484066.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 36 errors, 40 warnings, 25 checks, 1046 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000484066.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
