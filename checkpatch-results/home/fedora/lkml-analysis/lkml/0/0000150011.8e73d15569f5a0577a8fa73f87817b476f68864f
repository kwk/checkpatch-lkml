WARNING:TYPO_SPELLING: 'sucessfully' may be misspelled - perhaps 'successfully'?
#39: 
reject result, and compile sucessfully (2.6.12.6).
                           ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#127: 
kobject_hotplug: /sbin/hotplug vc seq=335 HOME=/ PATH=/sbin:/bin:/usr/sbin:/usr/bin ACTION=add DEVPATH=/class/vc/vcs1 SUBSYSTEM=vc

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#856: FILE: fs/proc/proc_misc.c:226:
+extern struct seq_operations refaults_op;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#856: FILE: fs/proc/proc_misc.c:226:
+extern struct seq_operations refaults_op;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#859: FILE: fs/proc/proc_misc.c:229:
+ (void)inode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#860: FILE: fs/proc/proc_misc.c:230:
+ return seq_open(file, &refaults_op);$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#863: FILE: fs/proc/proc_misc.c:233:
+static struct file_operations refaults_file_operations = {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#864: FILE: fs/proc/proc_misc.c:234:
+ .open = refaults_open,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#865: FILE: fs/proc/proc_misc.c:235:
+ .read = seq_read,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#866: FILE: fs/proc/proc_misc.c:236:
+ .llseek = seq_lseek,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#867: FILE: fs/proc/proc_misc.c:237:
+ .release = seq_release,$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#877: FILE: fs/proc/proc_misc.c:609:
+	create_seq_entry("refaults",S_IRUGO, &refaults_file_operations);
 	                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#877: FILE: fs/proc/proc_misc.c:609:
+	create_seq_entry("refaults",S_IRUGO, &refaults_file_operations);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#891: FILE: include/linux/mmzone.h:148:
+     $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#891: FILE: include/linux/mmzone.h:148:
+     $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#902: FILE: include/linux/page-flags.h:80:
+#define PG_new ^I^I^I21 /* Newly allocated page */$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#927: FILE: include/linux/swap.h:157:
+extern int do_remember_page(struct address_space *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#927: FILE: include/linux/swap.h:157:
+extern int do_remember_page(struct address_space *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#927: FILE: include/linux/swap.h:157:
+extern int do_remember_page(struct address_space *, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#928: FILE: include/linux/swap.h:158:
+extern int recently_evicted(struct address_space *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#928: FILE: include/linux/swap.h:158:
+extern int recently_evicted(struct address_space *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#928: FILE: include/linux/swap.h:158:
+extern int recently_evicted(struct address_space *, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#929: FILE: include/linux/swap.h:159:
+extern void init_nonresident(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#932: FILE: include/linux/swap.h:162:
+extern void remember_page(struct page *, struct address_space *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#932: FILE: include/linux/swap.h:162:
+extern void remember_page(struct page *, struct address_space *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#932: FILE: include/linux/swap.h:162:
+extern void remember_page(struct page *, struct address_space *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#932: FILE: include/linux/swap.h:162:
+extern void remember_page(struct page *, struct address_space *, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#933: FILE: include/linux/swap.h:163:
+extern int page_is_hot(struct page *, struct address_space *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#933: FILE: include/linux/swap.h:163:
+extern int page_is_hot(struct page *, struct address_space *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#933: FILE: include/linux/swap.h:163:
+extern int page_is_hot(struct page *, struct address_space *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#933: FILE: include/linux/swap.h:163:
+extern int page_is_hot(struct page *, struct address_space *, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#934: FILE: include/linux/swap.h:164:
+extern unsigned long get_active_limit(void);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#946: FILE: include/linux/swap.h:304:
+#define remember_page(x,y) 0
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#947: FILE: include/linux/swap.h:305:
+#define recently_evicted(x,y) 0
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#950: FILE: include/linux/swap.h:308:
+#define page_is_hot(x,y,z) 0
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#950: FILE: include/linux/swap.h:308:
+#define page_is_hot(x,y,z) 0
                        ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#978: FILE: mm/clockpro.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#979: FILE: mm/clockpro.c:2:
+ * mm/clockpro.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#994: FILE: mm/clockpro.c:17:
+ unsigned long total = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#995: FILE: mm/clockpro.c:18:
+ int cpu;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#997: FILE: mm/clockpro.c:20:
+ for (cpu = first_cpu(cpu_online_map); cpu < NR_CPUS; cpu++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#997: FILE: mm/clockpro.c:20:
+ for (cpu = first_cpu(cpu_online_map); cpu < NR_CPUS; cpu++)
+ total += per_cpu(evicted_pages, cpu);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#997: FILE: mm/clockpro.c:20:
+ for (cpu = first_cpu(cpu_online_map); cpu < NR_CPUS; cpu++)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#998: FILE: mm/clockpro.c:21:
+ total += per_cpu(evicted_pages, cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1000: FILE: mm/clockpro.c:23:
+ return total;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1005: FILE: mm/clockpro.c:28:
+ static unsigned long next_check;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1006: FILE: mm/clockpro.c:29:
+ static unsigned long total;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1007: FILE: mm/clockpro.c:30:
+ unsigned long active, inactive, free;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1009: FILE: mm/clockpro.c:32:
+ if (time_after(jiffies, next_check)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#1009: FILE: mm/clockpro.c:32:
+ if (time_after(jiffies, next_check)) {
+ get_zone_counts(&active, &inactive, &free);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1010: FILE: mm/clockpro.c:33:
+ get_zone_counts(&active, &inactive, &free);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1011: FILE: mm/clockpro.c:34:
+ total = active + inactive + free;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1012: FILE: mm/clockpro.c:35:
+ next_check = jiffies + HZ/10;$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1012: FILE: mm/clockpro.c:35:
+ next_check = jiffies + HZ/10;
                           ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1013: FILE: mm/clockpro.c:36:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1015: FILE: mm/clockpro.c:38:
+ return total;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1020: FILE: mm/clockpro.c:43:
+ struct zone * zone;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1020: FILE: mm/clockpro.c:43:
+ struct zone * zone;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1021: FILE: mm/clockpro.c:44:
+ int cpu;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1023: FILE: mm/clockpro.c:46:
+ for (cpu = first_cpu(cpu_online_map); cpu < NR_CPUS; cpu++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#1023: FILE: mm/clockpro.c:46:
+ for (cpu = first_cpu(cpu_online_map); cpu < NR_CPUS; cpu++)
+ per_cpu(evicted_pages, cpu) /= 2;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1023: FILE: mm/clockpro.c:46:
+ for (cpu = first_cpu(cpu_online_map); cpu < NR_CPUS; cpu++)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1024: FILE: mm/clockpro.c:47:
+ per_cpu(evicted_pages, cpu) /= 2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1026: FILE: mm/clockpro.c:49:
+ for_each_zone(zone)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#1026: FILE: mm/clockpro.c:49:
+ for_each_zone(zone)
+ zone->active_scanned /= 2;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1027: FILE: mm/clockpro.c:50:
+ zone->active_scanned /= 2;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1030: FILE: mm/clockpro.c:53:
+int page_is_hot(struct page * page, struct address_space * mapping,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1030: FILE: mm/clockpro.c:53:
+int page_is_hot(struct page * page, struct address_space * mapping,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1031: FILE: mm/clockpro.c:54:
+int page_is_hot(struct page * page, struct address_space * mapping,
+ unsigned long index)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1031: FILE: mm/clockpro.c:54:
+ unsigned long index)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1033: FILE: mm/clockpro.c:56:
+ unsigned long long distance;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1034: FILE: mm/clockpro.c:57:
+ unsigned long long evicted;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1035: FILE: mm/clockpro.c:58:
+ int refault_distance;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1036: FILE: mm/clockpro.c:59:
+ struct zone *zone;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1039: FILE: mm/clockpro.c:62:
+ refault_distance = recently_evicted(mapping, index);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1040: FILE: mm/clockpro.c:63:
+ if (refault_distance < 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#1040: FILE: mm/clockpro.c:63:
+ if (refault_distance < 0)
+ return 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1041: FILE: mm/clockpro.c:64:
+ return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1043: FILE: mm/clockpro.c:66:
+ distance = estimate_pageable_memory() + refault_distance;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1044: FILE: mm/clockpro.c:67:
+ evicted = get_evicted();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1045: FILE: mm/clockpro.c:68:
+ zone = page_zone(page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1048: FILE: mm/clockpro.c:71:
+ if (unlikely(evicted > distance))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#1048: FILE: mm/clockpro.c:71:
+ if (unlikely(evicted > distance))
+ decay_clockpro_variables();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1049: FILE: mm/clockpro.c:72:
+ decay_clockpro_variables();$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1052: FILE: mm/clockpro.c:75:
+ /*
+ * Estimate whether the inter-reference distance of the tested

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1060: FILE: mm/clockpro.c:83:
+ if (distance * zone->active_scanned < evicted * zone->nr_active) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#1060: FILE: mm/clockpro.c:83:
+ if (distance * zone->active_scanned < evicted * zone->nr_active) {
+ if (zone->active_limit > zone->present_pages / 8)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1061: FILE: mm/clockpro.c:84:
+ if (zone->active_limit > zone->present_pages / 8)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#1061: FILE: mm/clockpro.c:84:
+ if (zone->active_limit > zone->present_pages / 8)
+ zone->active_limit--;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1062: FILE: mm/clockpro.c:85:
+ zone->active_limit--;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1063: FILE: mm/clockpro.c:86:
+ return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1064: FILE: mm/clockpro.c:87:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1067: FILE: mm/clockpro.c:90:
+ if ((evicted & 1) && zone->active_limit < zone->present_pages * 7 / 8)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#1067: FILE: mm/clockpro.c:90:
+ if ((evicted & 1) && zone->active_limit < zone->present_pages * 7 / 8)
+ zone->active_limit++;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1068: FILE: mm/clockpro.c:91:
+ zone->active_limit++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1069: FILE: mm/clockpro.c:92:
+ return 0;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1072: FILE: mm/clockpro.c:95:
+void remember_page(struct page * page, struct address_space * mapping,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1072: FILE: mm/clockpro.c:95:
+void remember_page(struct page * page, struct address_space * mapping,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1073: FILE: mm/clockpro.c:96:
+void remember_page(struct page * page, struct address_space * mapping,
+ unsigned long index)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1073: FILE: mm/clockpro.c:96:
+ unsigned long index)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1075: FILE: mm/clockpro.c:98:
+ struct zone * zone = page_zone(page);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1075: FILE: mm/clockpro.c:98:
+ struct zone * zone = page_zone(page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1076: FILE: mm/clockpro.c:99:
+ struct zone * zone = page_zone(page);
+ if (do_remember_page(mapping, index) && (index & 1) &&

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1076: FILE: mm/clockpro.c:99:
+ if (do_remember_page(mapping, index) && (index & 1) &&$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#1076: FILE: mm/clockpro.c:99:
+ if (do_remember_page(mapping, index) && (index & 1) &&
[...]
+ zone->active_limit++;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1077: FILE: mm/clockpro.c:100:
+ if (do_remember_page(mapping, index) && (index & 1) &&
+ zone->active_limit < zone->present_pages * 7 / 8)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1077: FILE: mm/clockpro.c:100:
+ zone->active_limit < zone->present_pages * 7 / 8)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1078: FILE: mm/clockpro.c:101:
+ zone->active_limit++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1083: FILE: mm/clockpro.c:106:
+ unsigned long total = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1084: FILE: mm/clockpro.c:107:
+ struct zone * zone;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1084: FILE: mm/clockpro.c:107:
+ struct zone * zone;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1086: FILE: mm/clockpro.c:109:
+ for_each_zone(zone)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#1086: FILE: mm/clockpro.c:109:
+ for_each_zone(zone)
+ total += zone->active_limit;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1087: FILE: mm/clockpro.c:110:
+ total += zone->active_limit;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1089: FILE: mm/clockpro.c:112:
+ return total;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1114: FILE: mm/filemap.c:410:
+^I}^I^I^I      $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1166: FILE: mm/nonresident.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1167: FILE: mm/nonresident.c:2:
+ * mm/nonresident.c

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1201: FILE: mm/nonresident.c:36:
+#define NUM_NR ((NR_BUCKET_BYTES - sizeof(atomic_t))/sizeof(u32))
                                                     ^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1204: FILE: mm/nonresident.c:39:
+struct nr_bucket
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1205: FILE: mm/nonresident.c:40:
+ atomic_t hand;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1206: FILE: mm/nonresident.c:41:
+ u32 page[NUM_NR];$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1210: FILE: mm/nonresident.c:45:
+DEFINE_PER_CPU(unsigned long[NUM_NR+1], refault_histogram);
                                    ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1213: FILE: mm/nonresident.c:48:
+static struct nr_bucket * nonres_table;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1217: FILE: mm/nonresident.c:52:
+struct nr_bucket * nr_hash(void * mapping, unsigned long index)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1217: FILE: mm/nonresident.c:52:
+struct nr_bucket * nr_hash(void * mapping, unsigned long index)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1219: FILE: mm/nonresident.c:54:
+ unsigned long bucket;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1220: FILE: mm/nonresident.c:55:
+ unsigned long hash;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1222: FILE: mm/nonresident.c:57:
+ hash = hash_ptr(mapping, BITS_PER_LONG);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1223: FILE: mm/nonresident.c:58:
+ hash = 37 * hash + hash_long(index, BITS_PER_LONG);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1224: FILE: mm/nonresident.c:59:
+ bucket = hash & nonres_mask;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1226: FILE: mm/nonresident.c:61:
+ return nonres_table + bucket;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1229: FILE: mm/nonresident.c:64:
+static u32 nr_cookie(struct address_space * mapping, unsigned long index)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1231: FILE: mm/nonresident.c:66:
+ unsigned long cookie = hash_ptr(mapping, BITS_PER_LONG);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1232: FILE: mm/nonresident.c:67:
+ unsigned long cookie = hash_ptr(mapping, BITS_PER_LONG);
+ cookie = 37 * cookie + hash_long(index, BITS_PER_LONG);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1232: FILE: mm/nonresident.c:67:
+ cookie = 37 * cookie + hash_long(index, BITS_PER_LONG);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1234: FILE: mm/nonresident.c:69:
+ if (mapping->host) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#1234: FILE: mm/nonresident.c:69:
+ if (mapping->host) {
+ cookie = 37 * cookie + hash_long(mapping->host->i_ino, BITS_PER_LONG);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1234: FILE: mm/nonresident.c:69:
+ if (mapping->host) {
+ cookie = 37 * cookie + hash_long(mapping->host->i_ino, BITS_PER_LONG);
+ }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1235: FILE: mm/nonresident.c:70:
+ cookie = 37 * cookie + hash_long(mapping->host->i_ino, BITS_PER_LONG);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1236: FILE: mm/nonresident.c:71:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1238: FILE: mm/nonresident.c:73:
+ return (u32)(cookie >> (BITS_PER_LONG - 32));$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1241: FILE: mm/nonresident.c:76:
+int recently_evicted(struct address_space * mapping, unsigned long index)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1243: FILE: mm/nonresident.c:78:
+ struct nr_bucket * nr_bucket;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1243: FILE: mm/nonresident.c:78:
+ struct nr_bucket * nr_bucket;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1244: FILE: mm/nonresident.c:79:
+ int distance;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1245: FILE: mm/nonresident.c:80:
+ u32 wanted;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1246: FILE: mm/nonresident.c:81:
+ int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1248: FILE: mm/nonresident.c:83:
+ prefetch(mapping->host);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1249: FILE: mm/nonresident.c:84:
+ nr_bucket = nr_hash(mapping, index);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1251: FILE: mm/nonresident.c:86:
+ prefetch(nr_bucket);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1252: FILE: mm/nonresident.c:87:
+ wanted = nr_cookie(mapping, index);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1254: FILE: mm/nonresident.c:89:
+ for (i = 0; i < NUM_NR; i++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#1254: FILE: mm/nonresident.c:89:
+ for (i = 0; i < NUM_NR; i++) {
+ if (nr_bucket->page[i] == wanted) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1255: FILE: mm/nonresident.c:90:
+ if (nr_bucket->page[i] == wanted) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#1255: FILE: mm/nonresident.c:90:
+ if (nr_bucket->page[i] == wanted) {
+ nr_bucket->page[i] = 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1256: FILE: mm/nonresident.c:91:
+ nr_bucket->page[i] = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1258: FILE: mm/nonresident.c:93:
+ distance = atomic_read(&nr_bucket->hand) + NUM_NR - i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1259: FILE: mm/nonresident.c:94:
+ distance = (distance % NUM_NR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1260: FILE: mm/nonresident.c:95:
+  __get_cpu_var(refault_histogram)[distance]++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1261: FILE: mm/nonresident.c:96:
+ return (distance + 1) * (1 << nonres_shift);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1262: FILE: mm/nonresident.c:97:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1263: FILE: mm/nonresident.c:98:
+ }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1265: FILE: mm/nonresident.c:100:
+ __get_cpu_var(refault_histogram)[NUM_NR]++;     $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1265: FILE: mm/nonresident.c:100:
+ __get_cpu_var(refault_histogram)[NUM_NR]++;     $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1266: FILE: mm/nonresident.c:101:
+ return -1;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1269: FILE: mm/nonresident.c:104:
+int do_remember_page(struct address_space * mapping, unsigned long index)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1271: FILE: mm/nonresident.c:106:
+ struct nr_bucket * nr_bucket;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1271: FILE: mm/nonresident.c:106:
+ struct nr_bucket * nr_bucket;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1272: FILE: mm/nonresident.c:107:
+ u32 nrpage;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1273: FILE: mm/nonresident.c:108:
+ int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1275: FILE: mm/nonresident.c:110:
+ prefetch(mapping->host);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1276: FILE: mm/nonresident.c:111:
+ nr_bucket = nr_hash(mapping, index);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1278: FILE: mm/nonresident.c:113:
+ prefetchw(nr_bucket);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1279: FILE: mm/nonresident.c:114:
+ nrpage = nr_cookie(mapping, index);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1282: FILE: mm/nonresident.c:117:
+ preempt_disable();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1284: FILE: mm/nonresident.c:119:
+ i = atomic_inc_return(&nr_bucket->hand);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1285: FILE: mm/nonresident.c:120:
+ if (unlikely(i >= NUM_NR)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#1285: FILE: mm/nonresident.c:120:
+ if (unlikely(i >= NUM_NR)) {
+ if (i == NUM_NR)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1286: FILE: mm/nonresident.c:121:
+ if (i == NUM_NR)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#1286: FILE: mm/nonresident.c:121:
+ if (i == NUM_NR)
+ atomic_set(&nr_bucket->hand, -1);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1287: FILE: mm/nonresident.c:122:
+ atomic_set(&nr_bucket->hand, -1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1288: FILE: mm/nonresident.c:123:
+ goto retry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1289: FILE: mm/nonresident.c:124:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1290: FILE: mm/nonresident.c:125:
+ preempt_enable();$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1291: FILE: mm/nonresident.c:126:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1291: FILE: mm/nonresident.c:126:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1292: FILE: mm/nonresident.c:127:
+ __get_cpu_var(evicted_pages)++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1295: FILE: mm/nonresident.c:130:
+ return xchg(&nr_bucket->page[i], nrpage);$

WARNING:MISPLACED_INIT: __initdata should be placed after nonresident_factor
#1303: FILE: mm/nonresident.c:138:
+static __initdata unsigned long nonresident_factor = 1;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1306: FILE: mm/nonresident.c:141:
+ int target;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1307: FILE: mm/nonresident.c:142:
+ int i;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1310: FILE: mm/nonresident.c:145:
+ /*
+ * Calculate the non-resident hash bucket target. Use a power of

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1313: FILE: mm/nonresident.c:148:
+ target = nr_all_pages * nonresident_factor;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1314: FILE: mm/nonresident.c:149:
+ target /= (sizeof(struct nr_bucket) / sizeof(u32));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1316: FILE: mm/nonresident.c:151:
+ nonres_table = alloc_large_system_hash("Non-resident page tracking",$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1317: FILE: mm/nonresident.c:152:
+ nonres_table = alloc_large_system_hash("Non-resident page tracking",
+ sizeof(struct nr_bucket),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1317: FILE: mm/nonresident.c:152:
+ sizeof(struct nr_bucket),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1318: FILE: mm/nonresident.c:153:
+ target,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1319: FILE: mm/nonresident.c:154:
+ 0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1320: FILE: mm/nonresident.c:155:
+ HASH_EARLY | HASH_HIGHMEM,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1321: FILE: mm/nonresident.c:156:
+ &nonres_shift,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1322: FILE: mm/nonresident.c:157:
+ &nonres_mask,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1323: FILE: mm/nonresident.c:158:
+ 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1325: FILE: mm/nonresident.c:160:
+ for (i = 0; i < (1 << nonres_shift); i++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#1325: FILE: mm/nonresident.c:160:
+ for (i = 0; i < (1 << nonres_shift); i++)
+ atomic_set(&nonres_table[i].hand, 0);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1326: FILE: mm/nonresident.c:161:
+ atomic_set(&nonres_table[i].hand, 0);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1329: FILE: mm/nonresident.c:164:
+static int __init set_nonresident_factor(char * str)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1331: FILE: mm/nonresident.c:166:
+ if (!str)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#1331: FILE: mm/nonresident.c:166:
+ if (!str)
+ return 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1332: FILE: mm/nonresident.c:167:
+ return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1333: FILE: mm/nonresident.c:168:
+ nonresident_factor = simple_strtoul(str, &str, 0);$

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1333: FILE: mm/nonresident.c:168:
+ nonresident_factor = simple_strtoul(str, &str, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1334: FILE: mm/nonresident.c:169:
+ return 1;$

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1336: FILE: mm/nonresident.c:171:
+__setup("nonresident_factor=", set_nonresident_factor);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1344: FILE: mm/nonresident.c:179:
+ if (*pos < 0 || *pos > NUM_NR)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#1344: FILE: mm/nonresident.c:179:
+ if (*pos < 0 || *pos > NUM_NR)
+ return NULL;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1345: FILE: mm/nonresident.c:180:
+ return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1347: FILE: mm/nonresident.c:182:
+ m->private = (unsigned long)*pos;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1349: FILE: mm/nonresident.c:184:
+ return pos;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1354: FILE: mm/nonresident.c:189:
+ if (*pos < NUM_NR) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#1354: FILE: mm/nonresident.c:189:
+ if (*pos < NUM_NR) {
+ (*pos)++;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1355: FILE: mm/nonresident.c:190:
+ (*pos)++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1356: FILE: mm/nonresident.c:191:
+ (unsigned long)m->private++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1357: FILE: mm/nonresident.c:192:
+ return pos;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1358: FILE: mm/nonresident.c:193:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1359: FILE: mm/nonresident.c:194:
+ return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1368: FILE: mm/nonresident.c:203:
+ unsigned long total = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1369: FILE: mm/nonresident.c:204:
+ int cpu;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1371: FILE: mm/nonresident.c:206:
+ for (cpu = first_cpu(cpu_online_map); cpu < NR_CPUS; cpu++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#1371: FILE: mm/nonresident.c:206:
+ for (cpu = first_cpu(cpu_online_map); cpu < NR_CPUS; cpu++) {
+ total += per_cpu(refault_histogram, cpu)[index];

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1371: FILE: mm/nonresident.c:206:
+ for (cpu = first_cpu(cpu_online_map); cpu < NR_CPUS; cpu++) {
+ total += per_cpu(refault_histogram, cpu)[index];
+ }

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1371: FILE: mm/nonresident.c:206:
+ for (cpu = first_cpu(cpu_online_map); cpu < NR_CPUS; cpu++) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1372: FILE: mm/nonresident.c:207:
+ total += per_cpu(refault_histogram, cpu)[index];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1373: FILE: mm/nonresident.c:208:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1374: FILE: mm/nonresident.c:209:
+ return total;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1379: FILE: mm/nonresident.c:214:
+ unsigned long index = (unsigned long)m->private;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1380: FILE: mm/nonresident.c:215:
+ unsigned long upper = ((unsigned long)index + 1) << nonres_shift;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1381: FILE: mm/nonresident.c:216:
+ unsigned long lower = (unsigned long)index << nonres_shift;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1382: FILE: mm/nonresident.c:217:
+ unsigned long hits = get_refault_stat(index);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1384: FILE: mm/nonresident.c:219:
+ if (index == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#1384: FILE: mm/nonresident.c:219:
+ if (index == 0)
+ seq_printf(m, " Refault distance Hits\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1385: FILE: mm/nonresident.c:220:
+ seq_printf(m, " Refault distance Hits\n");$

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1385: FILE: mm/nonresident.c:220:
+ seq_printf(m, " Refault distance Hits\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1387: FILE: mm/nonresident.c:222:
+ if (index < NUM_NR)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#1387: FILE: mm/nonresident.c:222:
+ if (index < NUM_NR)
+ seq_printf(m, "%9lu - %9lu %9lu\n", lower, upper, hits);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1388: FILE: mm/nonresident.c:223:
+ seq_printf(m, "%9lu - %9lu %9lu\n", lower, upper, hits);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1389: FILE: mm/nonresident.c:224:
+ else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#1389: FILE: mm/nonresident.c:224:
+ else
+ seq_printf(m, " New/Beyond %9lu %9lu\n", lower, hits);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1390: FILE: mm/nonresident.c:225:
+ seq_printf(m, " New/Beyond %9lu %9lu\n", lower, hits);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1392: FILE: mm/nonresident.c:227:
+ return 0;$

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#1395: FILE: mm/nonresident.c:230:
+struct seq_operations refaults_op = {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1396: FILE: mm/nonresident.c:231:
+ .start = frag_start,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1397: FILE: mm/nonresident.c:232:
+ .next = frag_next,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1398: FILE: mm/nonresident.c:233:
+ .stop = frag_stop,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1399: FILE: mm/nonresident.c:234:
+ .show = frag_show,$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1410: FILE: mm/page_alloc.c:1717:
+^I^I$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 26)
#1436: FILE: mm/swap_state.c:364:
+			if (active) {
+			  lru_cache_add_active(new_page);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1436: FILE: mm/swap_state.c:364:
+			if (active) {
[...]
+			} else
[...]

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 26)
#1438: FILE: mm/swap_state.c:366:
+			} else
+			  lru_cache_add(new_page);				       

CHECK:BRACES: Unbalanced braces around else statement
#1438: FILE: mm/swap_state.c:366:
+			} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1439: FILE: mm/swap_state.c:367:
+^I^I^I  lru_cache_add(new_page);^I^I^I^I       $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1492: FILE: mm/vmscan.c:822:
+         * The limit is automatically adjusted through refaults$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1493: FILE: mm/vmscan.c:823:
+^I * measuring how well the VM did in the past.^I       $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1497: FILE: mm/vmscan.c:826:
+        ^Izone->nr_scan_active += zone->nr_active - zone->active_limit;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1497: FILE: mm/vmscan.c:826:
+        ^Izone->nr_scan_active += zone->nr_active - zone->active_limit;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1497: FILE: mm/vmscan.c:826:
+        ^Izone->nr_scan_active += zone->nr_active - zone->active_limit;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1498: FILE: mm/vmscan.c:827:
+^Ielse if (sc->priority < DEF_PRIORITY - 2)^I  $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000150011.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 32 errors, 221 warnings, 15 checks, 620 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000150011.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
