WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#74: FILE: include/linux/rmap.h:30:
+void fastcall page_add_file_rmap(struct page *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#102: FILE: mm/fremap.c:68:
+	BUG_ON(!page_mapping(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#138: FILE: mm/memory.c:336:
+					pte_chain = page_add_rmap(page,
+						dst_pte, pte_chain);

CHECK:BRACES: braces {} should be used on all arms of this statement
#167: FILE: mm/memory.c:1619:
+		if (anon) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#170: FILE: mm/memory.c:1622:
+			pte_chain = page_add_rmap(new_page,
+						page_table, pte_chain);

CHECK:BRACES: Unbalanced braces around else statement
#171: FILE: mm/memory.c:1623:
+		} else

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#206: FILE: mm/rmap.c:125:
+	return (address >= vma->vm_start && address < vma->vm_end)?
 	                                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#207: FILE: mm/rmap.c:126:
+		address: -EFAULT;
 		       ^

WARNING:INDENTED_LABEL: labels should not be indented
#207: FILE: mm/rmap.c:126:
+		address: -EFAULT;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#211: FILE: mm/rmap.c:130:
+static int page_referenced_one(struct page *page,
+	struct mm_struct *mm, unsigned long address,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#287: FILE: mm/rmap.c:206:
+		if ((vma->vm_flags & (VM_LOCKED|VM_MAYSHARE))
 		                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#288: FILE: mm/rmap.c:207:
+				  == (VM_LOCKED|VM_MAYSHARE)) {
 				               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#308: FILE: mm/rmap.c:227:
+		if (vma->vm_flags & (VM_LOCKED|VM_RESERVED)) {
 		                              ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#374: FILE: mm/rmap.c:368:
+	BUG_ON(PageAnon(page));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#414: FILE: mm/rmap.c:464:
+static int fastcall try_to_unmap_anon_one(struct page * page, pte_addr_t paddr)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#449: FILE: mm/rmap.c:529:
+static int try_to_unmap_one(struct page *page,
+	struct mm_struct *mm, unsigned long address,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#487: FILE: mm/rmap.c:567:
+	if ((vma->vm_flags & (VM_LOCKED|VM_RESERVED)) ||
 	                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#488: FILE: mm/rmap.c:568:
+	if ((vma->vm_flags & (VM_LOCKED|VM_RESERVED)) ||
+			ptep_test_and_clear_young(pte)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#502: FILE: mm/rmap.c:582:
+	BUG_ON(!page->pte.mapcount);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#546: FILE: mm/rmap.c:626:
+			ret = try_to_unmap_one(page,
+				vma->vm_mm, address, &mapcount, vma);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#560: FILE: mm/rmap.c:640:
+			ret = try_to_unmap_one(page,
+				vma->vm_mm, address, &mapcount, vma);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#582: FILE: mm/rmap.c:668:
+	BUG_ON(PageReserved(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#583: FILE: mm/rmap.c:669:
+	BUG_ON(!PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#584: FILE: mm/rmap.c:670:
+	BUG_ON(!page_mapped(page));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000288942.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 8 warnings, 13 checks, 513 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000288942.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
