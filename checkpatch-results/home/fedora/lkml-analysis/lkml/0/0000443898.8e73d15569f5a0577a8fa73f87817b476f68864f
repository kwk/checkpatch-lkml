WARNING:TYPO_SPELLING: 'invokation' may be misspelled - perhaps 'invocation'?
#104: 
invokation.
^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#150: 
 fs/direct-io.c     |  292 ++++++++++++++++++++++++++++++++++++++++-------------

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#170: FILE: fs/direct-io.c:43:
+	unsigned blkbits;		/* doesn't change */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#172: FILE: fs/direct-io.c:45:
+	unsigned blocks_available;	/* At block_in_file.  changes */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#175: FILE: fs/direct-io.c:47:
+	unsigned first_block_in_page;	/* doesn't change, Used only once */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#195: FILE: fs/direct-io.c:62:
+	unsigned head;			/* next page to process */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#196: FILE: fs/direct-io.c:63:
+	unsigned tail;			/* last valid page + 1 */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dio->rw == WRITE'
#214: FILE: fs/direct-io.c:102:
+	if (ret < 0 && dio->blocks_available && (dio->rw == WRITE)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#347: FILE: fs/direct-io.c:348:
+	BUG_ON(dio->block_in_file >= dio->final_block_in_request);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#355: FILE: fs/direct-io.c:356:
+		BUG_ON(map_bh->b_size == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#356: FILE: fs/direct-io.c:357:
+		BUG_ON((map_bh->b_size & ((1 << dio->blkbits) - 1)) != 0);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#363: FILE: fs/direct-io.c:364:
+			unsigned i;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#367: FILE: fs/direct-io.c:368:
+				unmap_underlying_metadata(map_bh->b_bdev,
+							block++);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#370: FILE: fs/direct-io.c:371:
+		BUG_ON(dio->rw != READ);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dio->bio"
#384: FILE: fs/direct-io.c:385:
+	if (dio->bio == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#388: FILE: fs/direct-io.c:389:
+	if (dio->bio->bi_idx == dio->bio->bi_vcnt ||
+			dio->boundary ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#406: FILE: fs/direct-io.c:407:
+	ret = dio_bio_alloc(dio, dio->map_bh.b_bdev, sector,
+				DIO_BIO_MAX_SIZE / PAGE_SIZE);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#431: FILE: fs/direct-io.c:429:
+	const unsigned blkbits = dio->blkbits;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#443: FILE: fs/direct-io.c:450:
+			unsigned this_chunk_bytes;	/* # of bytes mapped */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#444: FILE: fs/direct-io.c:451:
+			unsigned this_chunk_blocks;	/* # of blocks */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#445: FILE: fs/direct-io.c:452:
+			unsigned u;

WARNING:LINE_SPACING: Missing a blank line after declarations
#460: FILE: fs/direct-io.c:461:
+				char *kaddr = kmap_atomic(page, KM_USER0);
+				memset(kaddr + (block_in_page << blkbits),

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#461: FILE: fs/direct-io.c:462:
+				memset(kaddr + (block_in_page << blkbits),
+						0, 1 << blkbits);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#529: FILE: fs/direct-io.c:499:
+			BUG_ON(this_chunk_bytes == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#541: FILE: fs/direct-io.c:511:
+				BUG();

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#560: FILE: fs/direct-io.c:534:
+	const unsigned blkbits = inode->i_blkbits;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#561: FILE: fs/direct-io.c:535:
+	const unsigned blocksize_mask = (1 << blkbits) - 1;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#633: FILE: fs/block_dev.c:34:
+		unsigned sizebits = blksize_bits(size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#644: FILE: fs/block_dev.c:93:
+blkdev_get_block(struct inode *inode, sector_t iblock,
+		struct buffer_head *bh, int create)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#653: FILE: fs/block_dev.c:106:
+blkdev_get_blocks(struct inode *inode, sector_t iblock,
+		unsigned long max_blocks, struct buffer_head *bh, int create)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#695: FILE: drivers/char/raw.c:67:
+ * Set the device's soft blocksize to the minimum possible.  This gives the $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#751: FILE: drivers/char/raw.c:108:
+				printk("%s: set_blocksize() failed: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#752: FILE: drivers/char/raw.c:109:
+				printk("%s: set_blocksize() failed: %d\n",
+					__FUNCTION__, ret);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#752: FILE: drivers/char/raw.c:109:
+					__FUNCTION__, ret);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#768: FILE: drivers/char/raw.c:135:
+		  struct file *filp,
 		               ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#774: FILE: drivers/char/raw.c:140:
+^Iint err; $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!b"
#786: FILE: drivers/char/raw.c:149:
+	if (b == NULL)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#803: FILE: drivers/char/raw.c:163:
+		  struct file *filp,
 		               ^^^^

CHECK:SPACING: No space is necessary after a cast
#822: FILE: drivers/char/raw.c:178:
+		if (copy_from_user(&rq, (void *) arg, sizeof(rq)))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#862: FILE: drivers/char/raw.c:204:
+			if ((rq.block_major == 0 && rq.block_minor != 0) ||
+					rq.block_major > MAX_BLKDEV ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#879: FILE: drivers/char/raw.c:218:
+				bdget(kdev_t_to_nr(mk_kdev(rq.block_major,
+							rq.block_minor)));

CHECK:SPACING: No space is necessary after a cast
#891: FILE: drivers/char/raw.c:233:
+			if (copy_to_user((void *) arg, &rq, sizeof(rq)))

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#911: FILE: drivers/char/raw.c:254:
+	return rw_raw_dev(WRITE, filp, (char *)buf, size, offp);
 	                         ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#946: FILE: fs/ext2/inode.c:611:
+ext2_get_blocks(struct inode *inode, sector_t iblock, unsigned long max_blocks,
+			struct buffer_head *bh_result, int create)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#974: FILE: fs/jfs/inode.c:298:
+jfs_get_blocks(struct inode *inode, sector_t iblock, unsigned long max_blocks,
+			struct buffer_head *bh_result, int create)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000443898.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 27 warnings, 16 checks, 791 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000443898.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
