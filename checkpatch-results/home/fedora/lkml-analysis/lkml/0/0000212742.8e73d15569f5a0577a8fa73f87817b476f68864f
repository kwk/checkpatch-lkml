WARNING:TYPO_SPELLING: 'splitted' may be misspelled - perhaps 'split'?
#28: 
post a nice splitted patch set for dm later that day.
            ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required before the open parenthesis '('
#103: FILE: crypto/cipher.c:300:
+		if(crypto_tfm_alg_blocksize(tfm) != 16) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#104: FILE: crypto/cipher.c:301:
+			printk(KERN_WARNING "LRW can't be used with non-128-bit ciphers\n");

ERROR:SPACING: space required before the open parenthesis '('
#114: FILE: crypto/cipher.c:311:
+		if(tfm->crt_cipher.cit_mode == CRYPTO_TFM_MODE_LRW) {

ERROR:SPACING: space required before the open parenthesis '('
#117: FILE: crypto/cipher.c:314:
+		} else if(tfm->crt_cipher.cit_mode == CRYPTO_TFM_MODE_LRW_RAW) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#119: FILE: crypto/cipher.c:316:
+^I^I^Iops->cit_decrypt_tweaks = lrw_raw_decrypt;^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#121: FILE: crypto/cipher.c:318:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#129: FILE: crypto/cipher.c:325:
+^Iif (ops->cit_mode == CRYPTO_TFM_MODE_CBC || ops->cit_mode == CRYPTO_TFM_MODE_LRW $

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#130: FILE: crypto/cipher.c:326:
+	if (ops->cit_mode == CRYPTO_TFM_MODE_CBC || ops->cit_mode == CRYPTO_TFM_MODE_LRW 
+	    || ops->cit_mode == CRYPTO_TFM_MODE_LRW_RAW) {

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#139: FILE: crypto/api.c:29:
 	switch(flags & CRYPTO_TFM_MODE_MASK) {
+		case CRYPTO_TFM_MODE_LRW:
+		case CRYPTO_TFM_MODE_LRW_RAW:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: crypto/internal.h:24:
+                        u8*, cryptfn_t, int enc, void *, int);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: crypto/internal.h:24:
+                        u8*, cryptfn_t, int enc, void *, int);$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#173: FILE: crypto/lrw.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#177: FILE: crypto/lrw.c:5:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#190: FILE: crypto/lrw.c:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#191: FILE: crypto/lrw.c:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: crypto/lrw.c:34:
+#define LRW_DEBUG_DUMP(x,y,z) $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#206: FILE: crypto/lrw.c:34:
+#define LRW_DEBUG_DUMP(x,y,z) 
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#206: FILE: crypto/lrw.c:34:
+#define LRW_DEBUG_DUMP(x,y,z) 
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#208: FILE: crypto/lrw.c:36:
+#define LRW_DEBUG_DUMP(t,b,l) hexdumpTitle(t,b,l);
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#208: FILE: crypto/lrw.c:36:
+#define LRW_DEBUG_DUMP(t,b,l) hexdumpTitle(t,b,l);
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#208: FILE: crypto/lrw.c:36:
+#define LRW_DEBUG_DUMP(t,b,l) hexdumpTitle(t,b,l);
                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#208: FILE: crypto/lrw.c:36:
+#define LRW_DEBUG_DUMP(t,b,l) hexdumpTitle(t,b,l);
                                               ^

CHECK:CAMELCASE: Avoid CamelCase: <hexdumpTitle>
#208: FILE: crypto/lrw.c:36:
+#define LRW_DEBUG_DUMP(t,b,l) hexdumpTitle(t,b,l);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#208: FILE: crypto/lrw.c:36:
+#define LRW_DEBUG_DUMP(t,b,l) hexdumpTitle(t,b,l);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#213: FILE: crypto/lrw.c:41:
+	printk("%s",title);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#213: FILE: crypto/lrw.c:41:
+	printk("%s",title);
 	           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#214: FILE: crypto/lrw.c:42:
+        while (len--)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: crypto/lrw.c:42:
+        while (len--)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#215: FILE: crypto/lrw.c:43:
+                printk("%02x", *buf++);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: crypto/lrw.c:43:
+                printk("%02x", *buf++);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#215: FILE: crypto/lrw.c:43:
+                printk("%02x", *buf++);

ERROR:CODE_INDENT: code indent should use tabs where possible
#217: FILE: crypto/lrw.c:45:
+        printk("\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: crypto/lrw.c:45:
+        printk("\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#217: FILE: crypto/lrw.c:45:
+        printk("\n");

CHECK:CAMELCASE: Avoid CamelCase: <negTab>
#232: FILE: crypto/lrw.c:60:
+	u64 *negTab;

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#235: FILE: crypto/lrw.c:63:
+static void lrw_generate_table(const char *xkey2, u64 *negTab) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#238: FILE: crypto/lrw.c:66:
+	u64 *key2 = (u64 *)xkey2;
+	key2[0] = be64_to_cpu(key2[0]);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#240: FILE: crypto/lrw.c:68:
+	GFMulGenTab(key2,rpol,negTab);
 	                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#240: FILE: crypto/lrw.c:68:
+	GFMulGenTab(key2,rpol,negTab);
 	                     ^

CHECK:CAMELCASE: Avoid CamelCase: <GFMulGenTab>
#240: FILE: crypto/lrw.c:68:
+	GFMulGenTab(key2,rpol,negTab);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#243: FILE: crypto/lrw.c:71:
+static void lrw_tweak_cook(void *priv, int sg, void **dpatchlist) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#247: FILE: crypto/lrw.c:75:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#248: FILE: crypto/lrw.c:76:
+	if(lta->stripesize == 0) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#249: FILE: crypto/lrw.c:77:
+		copy128(lta->startN,raw_tweak);
 		                   ^

CHECK:CAMELCASE: Avoid CamelCase: <startN>
#249: FILE: crypto/lrw.c:77:
+		copy128(lta->startN,raw_tweak);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#250: FILE: crypto/lrw.c:78:
+		copy128(lta->currentN,raw_tweak);
 		                     ^

CHECK:CAMELCASE: Avoid CamelCase: <currentN>
#250: FILE: crypto/lrw.c:78:
+		copy128(lta->currentN,raw_tweak);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#254: FILE: crypto/lrw.c:82:
+	add128(lta->currentN,1);
 	                    ^

ERROR:SPACING: space required before the open parenthesis '('
#255: FILE: crypto/lrw.c:83:
+	if(equal128(lta->currentN, raw_tweak)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#256: FILE: crypto/lrw.c:84:
+^I^Ilta->stripesize++;^I$

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#258: FILE: crypto/lrw.c:86:
+		GFMulSeq(lta->startN, (lta->cooked_tweaks)+lta->cooked_tweaks_idx, lta->stripesize, lta->negTab);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#258: FILE: crypto/lrw.c:86:
+		GFMulSeq(lta->startN, (lta->cooked_tweaks)+lta->cooked_tweaks_idx, lta->stripesize, lta->negTab);
 		                                          ^

CHECK:CAMELCASE: Avoid CamelCase: <GFMulSeq>
#258: FILE: crypto/lrw.c:86:
+		GFMulSeq(lta->startN, (lta->cooked_tweaks)+lta->cooked_tweaks_idx, lta->stripesize, lta->negTab);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#259: FILE: crypto/lrw.c:87:
+		copy128(lta->startN,raw_tweak);
 		                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#260: FILE: crypto/lrw.c:88:
+		copy128(lta->currentN,raw_tweak);
 		                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#263: FILE: crypto/lrw.c:91:
+^I}^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#273: FILE: crypto/lrw.c:101:
+static void lrw_one_pass(void *priv,int sg, void **dpatchlist)
                                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#279: FILE: crypto/lrw.c:107:
+	u8 *tweaks = dpatchlist[2];
+	LRW_DEBUG_DUMP("P:",src,16);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#279: FILE: crypto/lrw.c:107:
+	LRW_DEBUG_DUMP("P:",src,16);
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#279: FILE: crypto/lrw.c:107:
+	LRW_DEBUG_DUMP("P:",src,16);
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#280: FILE: crypto/lrw.c:108:
+	LRW_DEBUG_DUMP("T:",tweaks,16);
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#280: FILE: crypto/lrw.c:108:
+	LRW_DEBUG_DUMP("T:",tweaks,16);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#285: FILE: crypto/lrw.c:113:
+	LRW_DEBUG_DUMP("P^T:",dst,16);
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#285: FILE: crypto/lrw.c:113:
+	LRW_DEBUG_DUMP("P^T:",dst,16);
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#287: FILE: crypto/lrw.c:115:
+	lrw->fn(crypto_tfm_ctx(lrw->tfm),dst,dst);
 	                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#287: FILE: crypto/lrw.c:115:
+	lrw->fn(crypto_tfm_ctx(lrw->tfm),dst,dst);
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#289: FILE: crypto/lrw.c:117:
+	LRW_DEBUG_DUMP("Enc(P^T):",dst,16);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#289: FILE: crypto/lrw.c:117:
+	LRW_DEBUG_DUMP("Enc(P^T):",dst,16);
 	                              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#296: FILE: crypto/lrw.c:124:
+                          struct scatterlist *dst,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#296: FILE: crypto/lrw.c:124:
+int lrw_raw_encrypt(struct crypto_tfm *tfm,
+                          struct scatterlist *dst,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: crypto/lrw.c:124:
+                          struct scatterlist *dst,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#297: FILE: crypto/lrw.c:125:
+                          struct scatterlist *src,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#297: FILE: crypto/lrw.c:125:
+                          struct scatterlist *src,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#298: FILE: crypto/lrw.c:126:
+                          unsigned int nbytes, struct scatterlist *tweaksg)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#298: FILE: crypto/lrw.c:126:
+                          unsigned int nbytes, struct scatterlist *tweaksg)$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#301: FILE: crypto/lrw.c:129:
+^I^I[0].sg = src, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#302: FILE: crypto/lrw.c:130:
+^I^I[0].stepsize = 16, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#303: FILE: crypto/lrw.c:131:
+^I^I[0].ioflag = 0, $

ERROR:SPACING: space required before the open brace '{'
#304: FILE: crypto/lrw.c:132:
+		[0].buf = (char[16]){},

ERROR:TRAILING_WHITESPACE: trailing whitespace
#305: FILE: crypto/lrw.c:133:
+^I^I[1].sg = dst, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#306: FILE: crypto/lrw.c:134:
+^I^I[1].stepsize = 16, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#307: FILE: crypto/lrw.c:135:
+^I^I[1].ioflag = 1, $

ERROR:SPACING: space required before the open brace '{'
#308: FILE: crypto/lrw.c:136:
+		[1].buf = (char[16]){},

ERROR:TRAILING_WHITESPACE: trailing whitespace
#309: FILE: crypto/lrw.c:137:
+^I^I[2].sg = tweaksg, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#310: FILE: crypto/lrw.c:138:
+^I^I[2].stepsize = 16, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#311: FILE: crypto/lrw.c:139:
+^I^I[2].ioflag = 0, $

ERROR:SPACING: space required before the open brace '{'
#312: FILE: crypto/lrw.c:140:
+		[2].buf = (char[16]){},

ERROR:TRAILING_WHITESPACE: trailing whitespace
#314: FILE: crypto/lrw.c:142:
+^I     $

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#319: FILE: crypto/lrw.c:147:
+	scatterwalk_walker_generic(lrw_one_pass, &callinfo, nbytes/16, 3, lrw_walk_infos);
 	                                                          ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#324: FILE: crypto/lrw.c:152:
+                          struct scatterlist *dst,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#324: FILE: crypto/lrw.c:152:
+int lrw_raw_decrypt(struct crypto_tfm *tfm,
+                          struct scatterlist *dst,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: crypto/lrw.c:152:
+                          struct scatterlist *dst,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#325: FILE: crypto/lrw.c:153:
+                          struct scatterlist *src,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: crypto/lrw.c:153:
+                          struct scatterlist *src,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#326: FILE: crypto/lrw.c:154:
+                          unsigned int nbytes, struct scatterlist *tweaksg)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#326: FILE: crypto/lrw.c:154:
+                          unsigned int nbytes, struct scatterlist *tweaksg)$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#329: FILE: crypto/lrw.c:157:
+^I^I[0].sg = src, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#330: FILE: crypto/lrw.c:158:
+^I^I[0].stepsize = 16, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#331: FILE: crypto/lrw.c:159:
+^I^I[0].ioflag = 0, $

ERROR:SPACING: space required before the open brace '{'
#332: FILE: crypto/lrw.c:160:
+		[0].buf = (char[16]){},

ERROR:TRAILING_WHITESPACE: trailing whitespace
#333: FILE: crypto/lrw.c:161:
+^I^I[1].sg = dst, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#334: FILE: crypto/lrw.c:162:
+^I^I[1].stepsize = 16, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#335: FILE: crypto/lrw.c:163:
+^I^I[1].ioflag = 1, $

ERROR:SPACING: space required before the open brace '{'
#336: FILE: crypto/lrw.c:164:
+		[1].buf = (char[16]){},

ERROR:TRAILING_WHITESPACE: trailing whitespace
#337: FILE: crypto/lrw.c:165:
+^I^I[2].sg = tweaksg, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#338: FILE: crypto/lrw.c:166:
+^I^I[2].stepsize = 16, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#339: FILE: crypto/lrw.c:167:
+^I^I[2].ioflag = 0, $

ERROR:SPACING: space required before the open brace '{'
#340: FILE: crypto/lrw.c:168:
+		[2].buf = (char[16]){},

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#346: FILE: crypto/lrw.c:174:
+	scatterwalk_walker_generic(lrw_one_pass, &callinfo, nbytes/16, 3, lrw_walk_infos);
 	                                                          ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#351: FILE: crypto/lrw.c:179:
+                          struct scatterlist *dst,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#351: FILE: crypto/lrw.c:179:
+int lrw_template(struct crypto_tfm *tfm,
+                          struct scatterlist *dst,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#351: FILE: crypto/lrw.c:179:
+                          struct scatterlist *dst,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#352: FILE: crypto/lrw.c:180:
+                          struct scatterlist *src,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#352: FILE: crypto/lrw.c:180:
+                          struct scatterlist *src,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#353: FILE: crypto/lrw.c:181:
+                          unsigned int nbytes, struct scatterlist *raw_tweaks,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#353: FILE: crypto/lrw.c:181:
+                          unsigned int nbytes, struct scatterlist *raw_tweaks,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#354: FILE: crypto/lrw.c:182:
+                          int (*rawfunction)(struct crypto_tfm *,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: crypto/lrw.c:182:
+                          int (*rawfunction)(struct crypto_tfm *,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#355: FILE: crypto/lrw.c:183:
+                                             struct scatterlist *,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#355: FILE: crypto/lrw.c:183:
+                                             struct scatterlist *,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#356: FILE: crypto/lrw.c:184:
+                                             struct scatterlist *,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: crypto/lrw.c:184:
+                                             struct scatterlist *,$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#357: FILE: crypto/lrw.c:185:
+                                             unsigned int, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#357: FILE: crypto/lrw.c:185:
+                                             unsigned int, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#357: FILE: crypto/lrw.c:185:
+                                             unsigned int, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#358: FILE: crypto/lrw.c:186:
+                                             struct scatterlist *))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#358: FILE: crypto/lrw.c:186:
+                                             struct scatterlist *))$

WARNING:LINE_SPACING: Missing a blank line after declarations
#362: FILE: crypto/lrw.c:190:
+	struct scatterlist cooked_tweaks_sg = {NULL, };
+	u128_alloc(currentN);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#364: FILE: crypto/lrw.c:192:
+	u64 *cooked_tweaks = kmalloc(nbytes,GFP_KERNEL);
 	                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#365: FILE: crypto/lrw.c:193:
+^I$

ERROR:SPACING: space required before the open brace '{'
#370: FILE: crypto/lrw.c:198:
+		[0].buf = (char[16]){},

ERROR:TRAILING_WHITESPACE: trailing whitespace
#381: FILE: crypto/lrw.c:209:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#382: FILE: crypto/lrw.c:210:
+	if(cooked_tweaks == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cooked_tweaks"
#382: FILE: crypto/lrw.c:210:
+	if(cooked_tweaks == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#384: FILE: crypto/lrw.c:212:
+^I$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#385: FILE: crypto/lrw.c:213:
+	scatterwalk_walker_generic(lrw_tweak_cook, &recipe, nbytes/16, 1, cook_walk_info);
 	                                                          ^

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#386: FILE: crypto/lrw.c:214:
+	GFMulSeq(recipe.startN, recipe.cooked_tweaks+recipe.cooked_tweaks_idx, recipe.stripesize, recipe.negTab);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#386: FILE: crypto/lrw.c:214:
+	GFMulSeq(recipe.startN, recipe.cooked_tweaks+recipe.cooked_tweaks_idx, recipe.stripesize, recipe.negTab);
 	                                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#387: FILE: crypto/lrw.c:215:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#391: FILE: crypto/lrw.c:219:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#392: FILE: crypto/lrw.c:220:
+	r = rawfunction(tfm,dst,src,nbytes,&cooked_tweaks_sg);
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#392: FILE: crypto/lrw.c:220:
+	r = rawfunction(tfm,dst,src,nbytes,&cooked_tweaks_sg);
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#392: FILE: crypto/lrw.c:220:
+	r = rawfunction(tfm,dst,src,nbytes,&cooked_tweaks_sg);
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#392: FILE: crypto/lrw.c:220:
+	r = rawfunction(tfm,dst,src,nbytes,&cooked_tweaks_sg);
 	                                  ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#392: FILE: crypto/lrw.c:220:
+	r = rawfunction(tfm,dst,src,nbytes,&cooked_tweaks_sg);
 	                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#394: FILE: crypto/lrw.c:222:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#399: FILE: crypto/lrw.c:227:
+                    struct scatterlist *src, unsigned int nbytes, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#399: FILE: crypto/lrw.c:227:
+                    struct scatterlist *src, unsigned int nbytes, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#399: FILE: crypto/lrw.c:227:
+int lrw_encrypt(struct crypto_tfm *tfm, struct scatterlist *dst,
+                    struct scatterlist *src, unsigned int nbytes, 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#399: FILE: crypto/lrw.c:227:
+                    struct scatterlist *src, unsigned int nbytes, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#400: FILE: crypto/lrw.c:228:
+                    struct scatterlist *tweaksg)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#400: FILE: crypto/lrw.c:228:
+                    struct scatterlist *tweaksg)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#402: FILE: crypto/lrw.c:230:
+	return lrw_template(tfm,dst,src,nbytes,tweaksg,lrw_raw_encrypt);
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#402: FILE: crypto/lrw.c:230:
+	return lrw_template(tfm,dst,src,nbytes,tweaksg,lrw_raw_encrypt);
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#402: FILE: crypto/lrw.c:230:
+	return lrw_template(tfm,dst,src,nbytes,tweaksg,lrw_raw_encrypt);
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#402: FILE: crypto/lrw.c:230:
+	return lrw_template(tfm,dst,src,nbytes,tweaksg,lrw_raw_encrypt);
 	                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#402: FILE: crypto/lrw.c:230:
+	return lrw_template(tfm,dst,src,nbytes,tweaksg,lrw_raw_encrypt);
 	                                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#406: FILE: crypto/lrw.c:234:
+                    struct scatterlist *src, unsigned int nbytes, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#406: FILE: crypto/lrw.c:234:
+                    struct scatterlist *src, unsigned int nbytes, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#406: FILE: crypto/lrw.c:234:
+int lrw_decrypt(struct crypto_tfm *tfm, struct scatterlist *dst,
+                    struct scatterlist *src, unsigned int nbytes, 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#406: FILE: crypto/lrw.c:234:
+                    struct scatterlist *src, unsigned int nbytes, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#407: FILE: crypto/lrw.c:235:
+                    struct scatterlist *tweaksg)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#407: FILE: crypto/lrw.c:235:
+                    struct scatterlist *tweaksg)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#409: FILE: crypto/lrw.c:237:
+	return lrw_template(tfm,dst,src,nbytes,tweaksg,lrw_raw_decrypt);
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#409: FILE: crypto/lrw.c:237:
+	return lrw_template(tfm,dst,src,nbytes,tweaksg,lrw_raw_decrypt);
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#409: FILE: crypto/lrw.c:237:
+	return lrw_template(tfm,dst,src,nbytes,tweaksg,lrw_raw_decrypt);
 	                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#409: FILE: crypto/lrw.c:237:
+	return lrw_template(tfm,dst,src,nbytes,tweaksg,lrw_raw_decrypt);
 	                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#409: FILE: crypto/lrw.c:237:
+	return lrw_template(tfm,dst,src,nbytes,tweaksg,lrw_raw_decrypt);
 	                                              ^

WARNING:LONG_LINE: line length of 154 exceeds 100 columns
#419: FILE: crypto/lrw.c:247:
+	printk(KERN_DEBUG "setkey_lrw: given keylen %d, wanted min %d, wanted max %d\n",keylen,cia->cia_min_keysize + bsize,cia->cia_max_keysize + bsize);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#419: FILE: crypto/lrw.c:247:
+	printk(KERN_DEBUG "setkey_lrw: given keylen %d, wanted min %d, wanted max %d\n",keylen,cia->cia_min_keysize + bsize,cia->cia_max_keysize + bsize);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#419: FILE: crypto/lrw.c:247:
+	printk(KERN_DEBUG "setkey_lrw: given keylen %d, wanted min %d, wanted max %d\n",keylen,cia->cia_min_keysize + bsize,cia->cia_max_keysize + bsize);
 	                                                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#419: FILE: crypto/lrw.c:247:
+	printk(KERN_DEBUG "setkey_lrw: given keylen %d, wanted min %d, wanted max %d\n",keylen,cia->cia_min_keysize + bsize,cia->cia_max_keysize + bsize);
 	                                                                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#419: FILE: crypto/lrw.c:247:
+	printk(KERN_DEBUG "setkey_lrw: given keylen %d, wanted min %d, wanted max %d\n",keylen,cia->cia_min_keysize + bsize,cia->cia_max_keysize + bsize);
 	                                                                                                                   ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'setkey_lrw', this function's name, in a string
#419: FILE: crypto/lrw.c:247:
+	printk(KERN_DEBUG "setkey_lrw: given keylen %d, wanted min %d, wanted max %d\n",keylen,cia->cia_min_keysize + bsize,cia->cia_max_keysize + bsize);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#422: FILE: crypto/lrw.c:250:
+	if (keylen < (cia->cia_min_keysize + bsize)
+		|| keylen > (cia->cia_max_keysize + bsize)) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#427: FILE: crypto/lrw.c:255:
+	r = cia->cia_setkey(crypto_tfm_ctx(tfm), key, keylen-bsize,
 	                                                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#428: FILE: crypto/lrw.c:256:
+                            &tfm->crt_flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#428: FILE: crypto/lrw.c:256:
+                            &tfm->crt_flags);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#429: FILE: crypto/lrw.c:257:
+^Iif (r < 0) $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#432: FILE: crypto/lrw.c:260:
+	lrw_generate_table(key+keylen-bsize,crypto_tfm_cmctx(tfm));
 	                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#432: FILE: crypto/lrw.c:260:
+	lrw_generate_table(key+keylen-bsize,crypto_tfm_cmctx(tfm));
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#432: FILE: crypto/lrw.c:260:
+	lrw_generate_table(key+keylen-bsize,crypto_tfm_cmctx(tfm));
 	                                   ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#438: FILE: crypto/lrw.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#442: FILE: crypto/lrw.h:5:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#455: FILE: crypto/lrw.h:18:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#456: FILE: crypto/lrw.h:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#458: FILE: crypto/lrw.h:21:
+ */    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#459: FILE: crypto/lrw.h:22:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#459: FILE: crypto/lrw.h:22:
+    $

ERROR:CODE_INDENT: code indent should use tabs where possible
#461: FILE: crypto/lrw.h:24:
+                          struct scatterlist *dst,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#461: FILE: crypto/lrw.h:24:
+int lrw_raw_encrypt(struct crypto_tfm *tfm,
+                          struct scatterlist *dst,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#461: FILE: crypto/lrw.h:24:
+                          struct scatterlist *dst,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#462: FILE: crypto/lrw.h:25:
+                          struct scatterlist *src,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#462: FILE: crypto/lrw.h:25:
+                          struct scatterlist *src,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#463: FILE: crypto/lrw.h:26:
+                          unsigned int nbytes, struct scatterlist *tweaksg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#463: FILE: crypto/lrw.h:26:
+                          unsigned int nbytes, struct scatterlist *tweaksg);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#465: FILE: crypto/lrw.h:28:
+                          struct scatterlist *dst,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#465: FILE: crypto/lrw.h:28:
+int lrw_encrypt(struct crypto_tfm *tfm,
+                          struct scatterlist *dst,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#465: FILE: crypto/lrw.h:28:
+                          struct scatterlist *dst,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#466: FILE: crypto/lrw.h:29:
+                          struct scatterlist *src,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#466: FILE: crypto/lrw.h:29:
+                          struct scatterlist *src,$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#467: FILE: crypto/lrw.h:30:
+                          unsigned int nbytes, struct scatterlist *tweaks);  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#467: FILE: crypto/lrw.h:30:
+                          unsigned int nbytes, struct scatterlist *tweaks);  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#467: FILE: crypto/lrw.h:30:
+                          unsigned int nbytes, struct scatterlist *tweaks);  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#469: FILE: crypto/lrw.h:32:
+                          struct scatterlist *dst,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#469: FILE: crypto/lrw.h:32:
+int lrw_raw_decrypt(struct crypto_tfm *tfm,
+                          struct scatterlist *dst,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#469: FILE: crypto/lrw.h:32:
+                          struct scatterlist *dst,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#470: FILE: crypto/lrw.h:33:
+                          struct scatterlist *src,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#470: FILE: crypto/lrw.h:33:
+                          struct scatterlist *src,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#471: FILE: crypto/lrw.h:34:
+                          unsigned int nbytes, struct scatterlist *tweaksg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#471: FILE: crypto/lrw.h:34:
+                          unsigned int nbytes, struct scatterlist *tweaksg);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#473: FILE: crypto/lrw.h:36:
+                          struct scatterlist *dst,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#473: FILE: crypto/lrw.h:36:
+int lrw_decrypt(struct crypto_tfm *tfm,
+                          struct scatterlist *dst,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#473: FILE: crypto/lrw.h:36:
+                          struct scatterlist *dst,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#474: FILE: crypto/lrw.h:37:
+                          struct scatterlist *src,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#474: FILE: crypto/lrw.h:37:
+                          struct scatterlist *src,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#475: FILE: crypto/lrw.h:38:
+                          unsigned int nbytes, struct scatterlist *tweaksg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#475: FILE: crypto/lrw.h:38:
+                          unsigned int nbytes, struct scatterlist *tweaksg);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#478: FILE: crypto/lrw.h:41:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#479: FILE: crypto/lrw.h:42:
+ * Unfortunately LRW requires spaghetti coding otherwise the performance of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#480: FILE: crypto/lrw.h:43:
+ * this mode is unreasonable $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#486: FILE: crypto/gfmulseq.c:1:
+/*

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#502: FILE: crypto/gfmulseq.c:17:
+#define u64msbmask (1ULL << 63)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#504: FILE: crypto/gfmulseq.c:19:
+#define xor128(op, arg) ^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op' - possible side-effects?
#504: FILE: crypto/gfmulseq.c:19:
+#define xor128(op, arg) 				\
+	do { 						\
+		(op)[0] = (op)[0] ^ (arg)[0]; 		\
+		(op)[1] = (op)[1] ^ (arg)[1]; 		\
+	} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg' - possible side-effects?
#504: FILE: crypto/gfmulseq.c:19:
+#define xor128(op, arg) 				\
+	do { 						\
+		(op)[0] = (op)[0] ^ (arg)[0]; 		\
+		(op)[1] = (op)[1] ^ (arg)[1]; 		\
+	} while(0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#505: FILE: crypto/gfmulseq.c:20:
+^Ido { ^I^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#506: FILE: crypto/gfmulseq.c:21:
+^I^I(op)[0] = (op)[0] ^ (arg)[0]; ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#507: FILE: crypto/gfmulseq.c:22:
+^I^I(op)[1] = (op)[1] ^ (arg)[1]; ^I^I\$

ERROR:SPACING: space required before the open parenthesis '('
#508: FILE: crypto/gfmulseq.c:23:
+	} while(0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#510: FILE: crypto/gfmulseq.c:25:
+#define lsr128(n,shift) ^I^I^I^I^I^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#510: FILE: crypto/gfmulseq.c:25:
+#define lsr128(n,shift) 							\
                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#510: FILE: crypto/gfmulseq.c:25:
+#define lsr128(n,shift) 							\
+	do {									\
+		(n)[1] = (n)[1] >> shift | (n)[0] << (bits/2-(shift));		\
+		(n)[0] = (n)[0] >> shift;					\
+	} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'shift' - possible side-effects?
#510: FILE: crypto/gfmulseq.c:25:
+#define lsr128(n,shift) 							\
+	do {									\
+		(n)[1] = (n)[1] >> shift | (n)[0] << (bits/2-(shift));		\
+		(n)[0] = (n)[0] >> shift;					\
+	} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'shift' may be better as '(shift)' to avoid precedence issues
#510: FILE: crypto/gfmulseq.c:25:
+#define lsr128(n,shift) 							\
+	do {									\
+		(n)[1] = (n)[1] >> shift | (n)[0] << (bits/2-(shift));		\
+		(n)[0] = (n)[0] >> shift;					\
+	} while(0)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#512: FILE: crypto/gfmulseq.c:27:
+		(n)[1] = (n)[1] >> shift | (n)[0] << (bits/2-(shift));		\
 		                                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#512: FILE: crypto/gfmulseq.c:27:
+		(n)[1] = (n)[1] >> shift | (n)[0] << (bits/2-(shift));		\
 		                                            ^

ERROR:SPACING: space required before the open parenthesis '('
#514: FILE: crypto/gfmulseq.c:29:
+	} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#516: FILE: crypto/gfmulseq.c:31:
+#define lsl128(n,shift)							\
                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#516: FILE: crypto/gfmulseq.c:31:
+#define lsl128(n,shift)							\
+	do {								\
+		(n)[0] = (n)[0] << shift | (n)[1] >> (bits/2-(shift));	\
+		(n)[1] = (n)[1] << 1;					\
+	} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'shift' - possible side-effects?
#516: FILE: crypto/gfmulseq.c:31:
+#define lsl128(n,shift)							\
+	do {								\
+		(n)[0] = (n)[0] << shift | (n)[1] >> (bits/2-(shift));	\
+		(n)[1] = (n)[1] << 1;					\
+	} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'shift' may be better as '(shift)' to avoid precedence issues
#516: FILE: crypto/gfmulseq.c:31:
+#define lsl128(n,shift)							\
+	do {								\
+		(n)[0] = (n)[0] << shift | (n)[1] >> (bits/2-(shift));	\
+		(n)[1] = (n)[1] << 1;					\
+	} while(0)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#518: FILE: crypto/gfmulseq.c:33:
+		(n)[0] = (n)[0] << shift | (n)[1] >> (bits/2-(shift));	\
 		                                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#518: FILE: crypto/gfmulseq.c:33:
+		(n)[0] = (n)[0] << shift | (n)[1] >> (bits/2-(shift));	\
 		                                            ^

ERROR:SPACING: space required before the open parenthesis '('
#520: FILE: crypto/gfmulseq.c:35:
+	} while(0)

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#522: FILE: crypto/gfmulseq.c:37:
+#define msb128(n) (((n)[0] & u64msbmask)?0x1:0x0)
                                         ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#522: FILE: crypto/gfmulseq.c:37:
+#define msb128(n) (((n)[0] & u64msbmask)?0x1:0x0)
                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#526: FILE: crypto/gfmulseq.c:41:
+#define zero128(pointer) memset((void *)(pointer),0,sizeof(u64)*u64factor);
                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#526: FILE: crypto/gfmulseq.c:41:
+#define zero128(pointer) memset((void *)(pointer),0,sizeof(u64)*u64factor);
                                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#526: FILE: crypto/gfmulseq.c:41:
+#define zero128(pointer) memset((void *)(pointer),0,sizeof(u64)*u64factor);
                                                                ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#526: FILE: crypto/gfmulseq.c:41:
+#define zero128(pointer) memset((void *)(pointer),0,sizeof(u64)*u64factor);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#527: FILE: crypto/gfmulseq.c:42:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#528: FILE: crypto/gfmulseq.c:43:
+#define setN(negTab,i,value)					\
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#528: FILE: crypto/gfmulseq.c:43:
+#define setN(negTab,i,value)					\
                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'negTab' - possible side-effects?
#528: FILE: crypto/gfmulseq.c:43:
+#define setN(negTab,i,value)					\
+	do {							\
+		(negTab)[I1(i)] = cpu_to_be64((value)[0]);	\
+		(negTab)[I2(i)] = cpu_to_be64((value)[1]);	\
+	} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#528: FILE: crypto/gfmulseq.c:43:
+#define setN(negTab,i,value)					\
+	do {							\
+		(negTab)[I1(i)] = cpu_to_be64((value)[0]);	\
+		(negTab)[I2(i)] = cpu_to_be64((value)[1]);	\
+	} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'value' - possible side-effects?
#528: FILE: crypto/gfmulseq.c:43:
+#define setN(negTab,i,value)					\
+	do {							\
+		(negTab)[I1(i)] = cpu_to_be64((value)[0]);	\
+		(negTab)[I2(i)] = cpu_to_be64((value)[1]);	\
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#532: FILE: crypto/gfmulseq.c:47:
+	} while(0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#534: FILE: crypto/gfmulseq.c:49:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#535: FILE: crypto/gfmulseq.c:50:
+ * GF Multiplication Base Algorithm $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#537: FILE: crypto/gfmulseq.c:52:
+^I$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#538: FILE: crypto/gfmulseq.c:53:
+void GFMulBase(u128 callersN, u128 GF, u128_t negTab) {

CHECK:CAMELCASE: Avoid CamelCase: <GFMulBase>
#538: FILE: crypto/gfmulseq.c:53:
+void GFMulBase(u128 callersN, u128 GF, u128_t negTab) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#539: FILE: crypto/gfmulseq.c:54:
+	int want=1;
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#540: FILE: crypto/gfmulseq.c:55:
+	int i=0;
 	     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#543: FILE: crypto/gfmulseq.c:58:
+	copy128(N,callersN);
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#546: FILE: crypto/gfmulseq.c:61:
+	for(i=0;i<bits;i++) {
 	     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#546: FILE: crypto/gfmulseq.c:61:
+	for(i=0;i<bits;i++) {
 	       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#546: FILE: crypto/gfmulseq.c:61:
+	for(i=0;i<bits;i++) {
 	         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#546: FILE: crypto/gfmulseq.c:61:
+	for(i=0;i<bits;i++) {
 	              ^

ERROR:SPACING: space required before the open parenthesis '('
#546: FILE: crypto/gfmulseq.c:61:
+	for(i=0;i<bits;i++) {

ERROR:SPACING: space required after that ',' (ctx:VxO)
#548: FILE: crypto/gfmulseq.c:63:
+			xor128(GF,&negTab[I1(bits-1-i)]);
 			         ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#548: FILE: crypto/gfmulseq.c:63:
+			xor128(GF,&negTab[I1(bits-1-i)]);
 			          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#548: FILE: crypto/gfmulseq.c:63:
+			xor128(GF,&negTab[I1(bits-1-i)]);
 			                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#548: FILE: crypto/gfmulseq.c:63:
+			xor128(GF,&negTab[I1(bits-1-i)]);
 			                           ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#549: FILE: crypto/gfmulseq.c:64:
+			want = want?0:1;
 			           ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#549: FILE: crypto/gfmulseq.c:64:
+			want = want?0:1;
 			             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#551: FILE: crypto/gfmulseq.c:66:
+		lsl128(N,1);
 		        ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#555: FILE: crypto/gfmulseq.c:70:
+static inline void findAlignment(u128 callersN, int value, int *align) {

CHECK:CAMELCASE: Avoid CamelCase: <findAlignment>
#555: FILE: crypto/gfmulseq.c:70:
+static inline void findAlignment(u128 callersN, int value, int *align) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#559: FILE: crypto/gfmulseq.c:74:
+	copy128(N,callersN);
 	         ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#561: FILE: crypto/gfmulseq.c:76:
+	lsr128(N,*align);
 	        ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#561: FILE: crypto/gfmulseq.c:76:
+	lsr128(N,*align);
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#562: FILE: crypto/gfmulseq.c:77:
+	for(i=*align;i<bits;i++) {
 	     ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#562: FILE: crypto/gfmulseq.c:77:
+	for(i=*align;i<bits;i++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#562: FILE: crypto/gfmulseq.c:77:
+	for(i=*align;i<bits;i++) {
 	            ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#562: FILE: crypto/gfmulseq.c:77:
+	for(i=*align;i<bits;i++) {
 	              ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#562: FILE: crypto/gfmulseq.c:77:
+	for(i=*align;i<bits;i++) {
 	                   ^

ERROR:SPACING: space required before the open parenthesis '('
#562: FILE: crypto/gfmulseq.c:77:
+	for(i=*align;i<bits;i++) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#567: FILE: crypto/gfmulseq.c:82:
+		lsr128(N,1);
 		        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#572: FILE: crypto/gfmulseq.c:87:
+/* GF Multiplication Aligned $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#577: FILE: crypto/gfmulseq.c:92:
+void GFMulAligned(u128 currentN, u64 **callersCurrentGF, u64 *negTab, int pow2, int *length) {

CHECK:CAMELCASE: Avoid CamelCase: <GFMulAligned>
#577: FILE: crypto/gfmulseq.c:92:
+void GFMulAligned(u128 currentN, u64 **callersCurrentGF, u64 *negTab, int pow2, int *length) {

CHECK:CAMELCASE: Avoid CamelCase: <callersCurrentGF>
#577: FILE: crypto/gfmulseq.c:92:
+void GFMulAligned(u128 currentN, u64 **callersCurrentGF, u64 *negTab, int pow2, int *length) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#581: FILE: crypto/gfmulseq.c:96:
+	int curp=0;		// Destination pointer for next computation
 	        ^

CHECK:CAMELCASE: Avoid CamelCase: <currentGF>
#582: FILE: crypto/gfmulseq.c:97:
+	u64 *currentGF = *callersCurrentGF;	// pointer to base GF

ERROR:TRAILING_WHITESPACE: trailing whitespace
#583: FILE: crypto/gfmulseq.c:98:
+^Iu64 addPoly[2];^I^I// Inner loop's addition polynomial $

CHECK:CAMELCASE: Avoid CamelCase: <addPoly>
#583: FILE: crypto/gfmulseq.c:98:
+	u64 addPoly[2];		// Inner loop's addition polynomial 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#584: FILE: crypto/gfmulseq.c:99:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#586: FILE: crypto/gfmulseq.c:101:
+	printf("bulk: %d %d\n",pow2,*length);
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#586: FILE: crypto/gfmulseq.c:101:
+	printf("bulk: %d %d\n",pow2,*length);
 	                           ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#586: FILE: crypto/gfmulseq.c:101:
+	printf("bulk: %d %d\n",pow2,*length);
 	                            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#589: FILE: crypto/gfmulseq.c:104:
+	for(i=0; i<pow2 && *length; i++) {
 	     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#589: FILE: crypto/gfmulseq.c:104:
+	for(i=0; i<pow2 && *length; i++) {
 	          ^

ERROR:SPACING: space required before the open parenthesis '('
#589: FILE: crypto/gfmulseq.c:104:
+	for(i=0; i<pow2 && *length; i++) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#593: FILE: crypto/gfmulseq.c:108:
+#define min(a,b) (a)<(b)?(a):(b)
              ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#593: FILE: crypto/gfmulseq.c:108:
+#define min(a,b) (a)<(b)?(a):(b)
                     ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#593: FILE: crypto/gfmulseq.c:108:
+#define min(a,b) (a)<(b)?(a):(b)
                         ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#593: FILE: crypto/gfmulseq.c:108:
+#define min(a,b) (a)<(b)?(a):(b)
                             ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#593: FILE: crypto/gfmulseq.c:108:
+#define min(a,b) (a)<(b)?(a):(b)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#593: FILE: crypto/gfmulseq.c:108:
+#define min(a,b) (a)<(b)?(a):(b)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#593: FILE: crypto/gfmulseq.c:108:
+#define min(a,b) (a)<(b)?(a):(b)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#594: FILE: crypto/gfmulseq.c:109:
+^I^I/* $

ERROR:SPACING: space required before the open parenthesis '('
#607: FILE: crypto/gfmulseq.c:122:
+		while(j--) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#614: FILE: crypto/gfmulseq.c:129:
+^I/* Update callers variables */^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#618: FILE: crypto/gfmulseq.c:133:
+	add128(currentN,curp);
 	               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#620: FILE: crypto/gfmulseq.c:135:
+	printf("bulk generated %d\n",curp);
 	                            ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#629: FILE: crypto/gfmulseq.c:144:
+void GFMulNStep(u64 *currentN, u64 *currentGF, u64 *negTab, int align) {

CHECK:CAMELCASE: Avoid CamelCase: <GFMulNStep>
#629: FILE: crypto/gfmulseq.c:144:
+void GFMulNStep(u64 *currentN, u64 *currentGF, u64 *negTab, int align) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#646: FILE: crypto/gfmulseq.c:161:
+	u64 *currentGF = dst;
+	u128_alloc(currentN);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#647: FILE: crypto/gfmulseq.c:162:
+	int alignOfN=0;
 	            ^

CHECK:CAMELCASE: Avoid CamelCase: <alignOfN>
#647: FILE: crypto/gfmulseq.c:162:
+	int alignOfN=0;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#649: FILE: crypto/gfmulseq.c:164:
+	copy128(currentN,callersN);
 	                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#652: FILE: crypto/gfmulseq.c:167:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#653: FILE: crypto/gfmulseq.c:168:
+	if(!length) return;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#653: FILE: crypto/gfmulseq.c:168:
+	if(!length) return;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#654: FILE: crypto/gfmulseq.c:169:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#655: FILE: crypto/gfmulseq.c:170:
+	findAlignment(currentN,0,&alignOfN);
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#655: FILE: crypto/gfmulseq.c:170:
+	findAlignment(currentN,0,&alignOfN);
 	                        ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#655: FILE: crypto/gfmulseq.c:170:
+	findAlignment(currentN,0,&alignOfN);
 	                         ^

ERROR:SPACING: space required before the open parenthesis '('
#656: FILE: crypto/gfmulseq.c:171:
+	if(alignOfN != 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#656: FILE: crypto/gfmulseq.c:171:
+	if(alignOfN != 0) {
+		GFMulAligned(currentN, &currentGF, negTab, alignOfN, &length);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#659: FILE: crypto/gfmulseq.c:174:
+	while(1) {

ERROR:SPACING: space required before the open parenthesis '('
#660: FILE: crypto/gfmulseq.c:175:
+		if(!length) return;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#660: FILE: crypto/gfmulseq.c:175:
+		if(!length) return;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#661: FILE: crypto/gfmulseq.c:176:
+			findAlignment(currentN,1,&alignOfN);
 			                      ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#661: FILE: crypto/gfmulseq.c:176:
+			findAlignment(currentN,1,&alignOfN);
 			                        ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#661: FILE: crypto/gfmulseq.c:176:
+			findAlignment(currentN,1,&alignOfN);
 			                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#662: FILE: crypto/gfmulseq.c:177:
+^I^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#664: FILE: crypto/gfmulseq.c:179:
+			add128(currentN,1);
 			               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#665: FILE: crypto/gfmulseq.c:180:
+^I^I^IcurrentGF = &currentGF[I1(1)];^I$

ERROR:SPACING: space required before the open parenthesis '('
#667: FILE: crypto/gfmulseq.c:182:
+		if(!length) return;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#667: FILE: crypto/gfmulseq.c:182:
+		if(!length) return;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#668: FILE: crypto/gfmulseq.c:183:
+^I^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#679: FILE: crypto/gfmulseq.c:194:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#680: FILE: crypto/gfmulseq.c:195:
+ * genNegTab: generate negative-logic table, that is: $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#685: FILE: crypto/gfmulseq.c:200:
+void GFMulGenTab(u128 key2, u128 rpol, u128_t negTab) {

CHECK:CAMELCASE: Avoid CamelCase: <key2Control>
#686: FILE: crypto/gfmulseq.c:201:
+	u128_alloc(key2Control);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#689: FILE: crypto/gfmulseq.c:204:
+^I^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#690: FILE: crypto/gfmulseq.c:205:
+	copy128(key2Control,key2);
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#691: FILE: crypto/gfmulseq.c:206:
+	copy128(res,key2);
 	           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#693: FILE: crypto/gfmulseq.c:208:
+	setN(negTab,0,key2);
 	           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#693: FILE: crypto/gfmulseq.c:208:
+	setN(negTab,0,key2);
 	             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#694: FILE: crypto/gfmulseq.c:209:
+	for(i=1; i < bits; i++) {
 	     ^

ERROR:SPACING: space required before the open parenthesis '('
#694: FILE: crypto/gfmulseq.c:209:
+	for(i=1; i < bits; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#695: FILE: crypto/gfmulseq.c:210:
+		if(msb128(key2Control)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#695: FILE: crypto/gfmulseq.c:210:
+		if(msb128(key2Control)) {
[...]
+		else
[...]

ERROR:SPACING: space required after that ',' (ctx:VxV)
#696: FILE: crypto/gfmulseq.c:211:
+			lsl128(key2Control,1);
 			                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#697: FILE: crypto/gfmulseq.c:212:
+			xor128(key2Control,rpol);
 			                  ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#699: FILE: crypto/gfmulseq.c:214:
+		}
+		else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#700: FILE: crypto/gfmulseq.c:215:
+			lsl128(key2Control,1);
 			                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#701: FILE: crypto/gfmulseq.c:216:
+		xor128(res,key2Control);
 		          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#702: FILE: crypto/gfmulseq.c:217:
+		setN(negTab,i,res);
 		           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#702: FILE: crypto/gfmulseq.c:217:
+		setN(negTab,i,res);
 		             ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#708: FILE: crypto/gfmulseq.h:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#729: FILE: crypto/gfmulseq.h:22:
+#define print128(n) do { ^I^I^I^I^I^I\$

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#732: FILE: crypto/gfmulseq.h:25:
+	for(__print128_i = 0; __print128_i<16; __print128_i++)	\
 	                                  ^

ERROR:SPACING: space required before the open parenthesis '('
#732: FILE: crypto/gfmulseq.h:25:
+	for(__print128_i = 0; __print128_i<16; __print128_i++)	\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#733: FILE: crypto/gfmulseq.h:26:
+		printk("%02hhx",*(__print128_p+__print128_i));		\

ERROR:SPACING: space required after that ',' (ctx:VxO)
#733: FILE: crypto/gfmulseq.h:26:
+		printk("%02hhx",*(__print128_p+__print128_i));		\
 		               ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#733: FILE: crypto/gfmulseq.h:26:
+		printk("%02hhx",*(__print128_p+__print128_i));		\
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#733: FILE: crypto/gfmulseq.h:26:
+		printk("%02hhx",*(__print128_p+__print128_i));		\
 		                              ^

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'hh' in '%02hhx' is unnecessary
#733: FILE: crypto/gfmulseq.h:26:
+		printk("%02hhx",*(__print128_p+__print128_i));		\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#734: FILE: crypto/gfmulseq.h:27:
+^Iprintk("\n"); ^I^I^I^I^I^I^I\$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#734: FILE: crypto/gfmulseq.h:27:
+	printk("\n"); 							\

ERROR:TRAILING_WHITESPACE: trailing whitespace
#735: FILE: crypto/gfmulseq.h:28:
+} while(0) $

ERROR:SPACING: space required before the open parenthesis '('
#735: FILE: crypto/gfmulseq.h:28:
+} while(0) 

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#744: FILE: crypto/gfmulseq.h:37:
+#define I1(x) ((x)*u64factor)
                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#745: FILE: crypto/gfmulseq.h:38:
+#define I2(x) ((x)*u64factor+1)
                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#745: FILE: crypto/gfmulseq.h:38:
+#define I2(x) ((x)*u64factor+1)
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#747: FILE: crypto/gfmulseq.h:40:
+#define copy128(dst,src)			\
                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dst' - possible side-effects?
#747: FILE: crypto/gfmulseq.h:40:
+#define copy128(dst,src)			\
+	do {					\
+		(dst)[0] = (src)[0];		\
+		(dst)[1] = (src)[1];		\
+	} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'src' - possible side-effects?
#747: FILE: crypto/gfmulseq.h:40:
+#define copy128(dst,src)			\
+	do {					\
+		(dst)[0] = (src)[0];		\
+		(dst)[1] = (src)[1];		\
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#751: FILE: crypto/gfmulseq.h:44:
+	} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#753: FILE: crypto/gfmulseq.h:46:
+#define add128(dst,oper)						\
                   ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dst' - possible side-effects?
#753: FILE: crypto/gfmulseq.h:46:
+#define add128(dst,oper)						\
+	do {								\
+		u64 scratch = (dst)[1] + (oper);			\
+		if(scratch < (dst)[1] && scratch < (oper)) 		\
+			(dst)[0]++;					\
+		(dst)[1] = scratch;					\
+	} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'oper' - possible side-effects?
#753: FILE: crypto/gfmulseq.h:46:
+#define add128(dst,oper)						\
+	do {								\
+		u64 scratch = (dst)[1] + (oper);			\
+		if(scratch < (dst)[1] && scratch < (oper)) 		\
+			(dst)[0]++;					\
+		(dst)[1] = scratch;					\
+	} while(0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#756: FILE: crypto/gfmulseq.h:49:
+^I^Iif(scratch < (dst)[1] && scratch < (oper)) ^I^I\$

ERROR:SPACING: space required before the open parenthesis '('
#756: FILE: crypto/gfmulseq.h:49:
+		if(scratch < (dst)[1] && scratch < (oper)) 		\

ERROR:SPACING: space required before the open parenthesis '('
#759: FILE: crypto/gfmulseq.h:52:
+	} while(0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#760: FILE: crypto/gfmulseq.h:53:
+^I$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#761: FILE: crypto/gfmulseq.h:54:
+#define equal128(op1,op2) \
                     ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op1' - possible side-effects?
#761: FILE: crypto/gfmulseq.h:54:
+#define equal128(op1,op2) \
+	(((op1)[0] == (op2)[0]) && ((op1)[1] == (op2)[1]))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op2' - possible side-effects?
#761: FILE: crypto/gfmulseq.h:54:
+#define equal128(op1,op2) \
+	(((op1)[0] == (op2)[0]) && ((op1)[1] == (op2)[1]))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#763: FILE: crypto/gfmulseq.h:56:
+^I$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op1' - possible side-effects?
#764: FILE: crypto/gfmulseq.h:57:
+#define cpu_to_be128(op1) \
+	do { 			\
+		(op1)[0] = cpu_to_be64((op1)[0]); \
+		(op1)[1] = cpu_to_be64((op1)[1]); \
+	} while(0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#765: FILE: crypto/gfmulseq.h:58:
+^Ido { ^I^I^I\$

ERROR:SPACING: space required before the open parenthesis '('
#768: FILE: crypto/gfmulseq.h:61:
+	} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op1' - possible side-effects?
#770: FILE: crypto/gfmulseq.h:63:
+#define be128_to_cpu(op1) \
+	do { 			\
+		(op1)[0] = be64_to_cpu((op1)[0]); \
+		(op1)[1] = be64_to_cpu((op1)[1]); \
+	} while(0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#771: FILE: crypto/gfmulseq.h:64:
+^Ido { ^I^I^I\$

ERROR:SPACING: space required before the open parenthesis '('
#774: FILE: crypto/gfmulseq.h:67:
+	} while(0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#776: FILE: crypto/gfmulseq.h:69:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#823: FILE: crypto/tcrypt.c:276:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#826: FILE: crypto/tcrypt.c:279:
+		tfm = crypto_alloc_tfm (algo, CRYPTO_TFM_MODE_ECB);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#830: FILE: crypto/tcrypt.c:283:
+		tfm = crypto_alloc_tfm (algo, CRYPTO_TFM_MODE_CBC);

ERROR:CODE_INDENT: code indent should use tabs where possible
#833: FILE: crypto/tcrypt.c:286:
+        case MODE_LRW:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#833: FILE: crypto/tcrypt.c:286:
+        case MODE_LRW:$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#834: FILE: crypto/tcrypt.c:287:
+		tfm = crypto_alloc_tfm (algo, CRYPTO_TFM_MODE_LRW);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#835: FILE: crypto/tcrypt.c:288:
+		strncpy(m,"LRW",4);
 		         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#835: FILE: crypto/tcrypt.c:288:
+		strncpy(m,"LRW",4);
 		               ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#838: FILE: crypto/tcrypt.c:291:
+		BUG();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tfm"
#843: FILE: crypto/tcrypt.c:296:
+	if (tfm == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#844: FILE: crypto/tcrypt.c:297:
+		printk("failed to load transform for %s %s\n", algo, m);

ERROR:SPACING: space required before the open parenthesis '('
#878: FILE: crypto/tcrypt.c:337:
+			switch(mode) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#882: FILE: crypto/tcrypt.c:340:
+						     crypto_tfm_alg_ivsize (tfm));

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#883: FILE: crypto/tcrypt.c:341:
+				/* fall-through intentional */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:LINE_SPACING: Missing a blank line after declarations
#893: FILE: crypto/tcrypt.c:351:
+					u64 *hosttweak = (u64 *)cipher_tv[i].tweak;
+					hosttweak[0] = be64_to_cpu(hosttweak[0]);

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#899: FILE: crypto/tcrypt.c:357:
+						ret = crypto_cipher_encrypt_tweaks(tfm, sg, sg, cipher_tv[i].ilen, tweaks);

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#901: FILE: crypto/tcrypt.c:359:
+						ret = crypto_cipher_decrypt_tweaks(tfm, sg, sg, cipher_tv[i].ilen, tweaks);

ERROR:SPACING: space required before the open parenthesis '('
#921: FILE: crypto/tcrypt.c:412:
+			switch(mode) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#925: FILE: crypto/tcrypt.c:415:
+						     crypto_tfm_alg_ivsize (tfm));

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#926: FILE: crypto/tcrypt.c:416:
+				/* fall-through intentional */

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#938: FILE: crypto/tcrypt.c:428:
+					ret = crypto_cipher_encrypt_tweaks(tfm, sg, sg, cipher_tv[i].ilen, tweaks);

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#940: FILE: crypto/tcrypt.c:430:
+					ret = crypto_cipher_decrypt_tweaks(tfm, sg, sg, cipher_tv[i].ilen, tweaks);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#958: FILE: crypto/tcrypt.c:700:
+		test_cipher ("aes", MODE_LRW, ENCRYPT, aes_lrw_enc_tv_template, AES_LRW_ENC_TEST_VECTORS);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#958: FILE: crypto/tcrypt.c:700:
+		test_cipher ("aes", MODE_LRW, ENCRYPT, aes_lrw_enc_tv_template, AES_LRW_ENC_TEST_VECTORS);

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#982: FILE: crypto/tcrypt.h:1789:
+		.key = { 0x45, 0x62, 0xac, 0x25, 0xf8, 0x28, 0x17, 0x6d, 0x4c, 0x26, 0x84, 0x14, 0xb5, 0x68, 0x01, 0x85,

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#983: FILE: crypto/tcrypt.h:1790:
+			 0x25, 0x8e, 0x2a, 0x05, 0xe7, 0x3e, 0x9d, 0x03, 0xee, 0x5a, 0x83, 0x0c, 0xcc, 0x09, 0x4c, 0x87 },

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#985: FILE: crypto/tcrypt.h:1792:
+		.tweak = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 },

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#987: FILE: crypto/tcrypt.h:1794:
+		.input = { 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46 },

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#989: FILE: crypto/tcrypt.h:1796:
+		.result = { 0xf1, 0xb2, 0x73, 0xcd, 0x65, 0xa3, 0xdf, 0x5f, 0xe9, 0x5d, 0x48, 0x92, 0x54, 0x63, 0x4e, 0xb8 },

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#992: FILE: crypto/tcrypt.h:1799:
+		.key = { 0x59, 0x70, 0x47, 0x14, 0xf5, 0x57, 0x47, 0x8c, 0xd7, 0x79, 0xe8, 0x0f, 0x54, 0x88, 0x79, 0x44,

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#993: FILE: crypto/tcrypt.h:1800:
+			 0x0d, 0x48, 0xf0, 0xb7, 0xb1, 0x5a, 0x53, 0xea, 0x1c, 0xaa, 0x6b, 0x29, 0xc2, 0xca, 0xfb, 0xaf },

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#995: FILE: crypto/tcrypt.h:1802:
+		.tweak = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02 },

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#997: FILE: crypto/tcrypt.h:1804:
+		.input = { 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46 },

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#999: FILE: crypto/tcrypt.h:1806:
+		.result = { 0x00, 0xc8, 0x2b, 0xae, 0x95, 0xbb, 0xcd, 0xe5, 0x27, 0x4f, 0x07, 0x69, 0xb2, 0x60, 0xe1, 0x36 },

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#1002: FILE: crypto/tcrypt.h:1809:
+		.key = { 0xd8, 0x2a, 0x91, 0x34, 0xb2, 0x6a, 0x56, 0x50, 0x30, 0xfe, 0x69, 0xe2, 0x37, 0x7f, 0x98, 0x47,

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#1003: FILE: crypto/tcrypt.h:1810:
+			 0xcd, 0xf9, 0x0b, 0x16, 0x0c, 0x64, 0x8f, 0xb6, 0xb0, 0x0d, 0x0d, 0x1b, 0xae, 0x85, 0x87, 0x1f },

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#1005: FILE: crypto/tcrypt.h:1812:
+		.tweak = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00 },

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#1007: FILE: crypto/tcrypt.h:1814:
+		.input = { 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46 },

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#1009: FILE: crypto/tcrypt.h:1816:
+		.result = { 0x76, 0x32, 0x21, 0x83, 0xed, 0x8f, 0xf1, 0x82, 0xf9, 0x59, 0x62, 0x03, 0x69, 0x0e, 0x5e, 0x01 },

WARNING:LONG_LINE: line length of 168 exceeds 100 columns
#1012: FILE: crypto/tcrypt.h:1819:
+		.key = { 0x0f, 0x6a, 0xef, 0xf8, 0xd3, 0xd2, 0xbb, 0x15, 0x25, 0x83, 0xf7, 0x3c, 0x1f, 0x01, 0x28, 0x74, 0xca, 0xc6, 0xbc, 0x35, 0x4d, 0x4a, 0x65, 0x54,

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#1013: FILE: crypto/tcrypt.h:1820:
+			 0x90, 0xae, 0x61, 0xcf, 0x7b, 0xae, 0xbd, 0xcc, 0xad, 0xe4, 0x94, 0xc5, 0x4a, 0x29, 0xae, 0x70 },

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#1015: FILE: crypto/tcrypt.h:1822:
+		.tweak = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 },

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#1017: FILE: crypto/tcrypt.h:1824:
+		.input = { 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46 },

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#1019: FILE: crypto/tcrypt.h:1826:
+		.result = { 0x9c, 0x0f, 0x15, 0x2f, 0x55, 0xa2, 0xd8, 0xf0, 0xd6, 0x7b, 0x8f, 0x9e, 0x28, 0x22, 0xbc, 0x41 },

WARNING:LONG_LINE: line length of 168 exceeds 100 columns
#1022: FILE: crypto/tcrypt.h:1829:
+		.key = { 0x8a, 0xd4, 0xee, 0x10, 0x2f, 0xbd, 0x81, 0xff, 0xf8, 0x86, 0xce, 0xac, 0x93, 0xc5, 0xad, 0xc6, 0xa0, 0x19, 0x07, 0xc0, 0x9d, 0xf7, 0xbb, 0xdd,

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#1023: FILE: crypto/tcrypt.h:1830:
+			 0x52, 0x13, 0xb2, 0xb7, 0xf0, 0xff, 0x11, 0xd8, 0xd6, 0x08, 0xd0, 0xcd, 0x2e, 0xb1, 0x17, 0x6f },

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#1025: FILE: crypto/tcrypt.h:1832:
+		.tweak = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00 },

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#1027: FILE: crypto/tcrypt.h:1834:
+		.input = { 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46 },

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#1029: FILE: crypto/tcrypt.h:1836:
+		.result = { 0xd4, 0x27, 0x6a, 0x7f, 0x14, 0x91, 0x3d, 0x65, 0xc8, 0x60, 0x48, 0x02, 0x87, 0xe3, 0x34, 0x06 },

WARNING:LONG_LINE: line length of 216 exceeds 100 columns
#1032: FILE: crypto/tcrypt.h:1839:
+		.key = { 0xf8, 0xd4, 0x76, 0xff, 0xd6, 0x46, 0xee, 0x6c, 0x23, 0x84, 0xcb, 0x1c, 0x77, 0xd6, 0x19, 0x5d, 0xfe, 0xf1, 0xa9, 0xf3, 0x7b, 0xbc, 0x8d, 0x21, 0xa7, 0x9c, 0x21, 0xf8, 0xcb, 0x90, 0x02, 0x89,

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#1033: FILE: crypto/tcrypt.h:1840:
+		 	 0xa8, 0x45, 0x34, 0x8e, 0xc8, 0xc5, 0xb5, 0xf1, 0x26, 0xf5, 0x0e, 0x76, 0xfe, 0xfd, 0x1b, 0x1e },

ERROR:CODE_INDENT: code indent should use tabs where possible
#1033: FILE: crypto/tcrypt.h:1840:
+^I^I ^I 0xa8, 0x45, 0x34, 0x8e, 0xc8, 0xc5, 0xb5, 0xf1, 0x26, 0xf5, 0x0e, 0x76, 0xfe, 0xfd, 0x1b, 0x1e },$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1033: FILE: crypto/tcrypt.h:1840:
+^I^I ^I 0xa8, 0x45, 0x34, 0x8e, 0xc8, 0xc5, 0xb5, 0xf1, 0x26, 0xf5, 0x0e, 0x76, 0xfe, 0xfd, 0x1b, 0x1e },$

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#1035: FILE: crypto/tcrypt.h:1842:
+		.tweak = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 },

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#1037: FILE: crypto/tcrypt.h:1844:
+		.input = { 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46 },

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#1039: FILE: crypto/tcrypt.h:1846:
+		.result = { 0xbd, 0x06, 0xb8, 0xe1, 0xdb, 0x98, 0x89, 0x9e, 0xc4, 0x98, 0xe4, 0x91, 0xcf, 0x1c, 0x70, 0x2b },

WARNING:LONG_LINE: line length of 216 exceeds 100 columns
#1042: FILE: crypto/tcrypt.h:1849:
+		.key = { 0xfb, 0x76, 0x15, 0xb2, 0x3d, 0x80, 0x89, 0x1d, 0xd4, 0x70, 0x98, 0x0b, 0xc7, 0x95, 0x84, 0xc8, 0xb2, 0xfb, 0x64, 0xce, 0x60, 0x97, 0x87, 0x8d, 0x17, 0xfc, 0xe4, 0x5a, 0x49, 0xe8, 0x30, 0xb7,

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#1043: FILE: crypto/tcrypt.h:1850:
+			 0x6e, 0x78, 0x17, 0xe7, 0x2d, 0x5e, 0x12, 0xd4, 0x60, 0x64, 0x04, 0x7a, 0xf1, 0x2f, 0x9e, 0x0c },

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#1045: FILE: crypto/tcrypt.h:1852:
+		.tweak = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00 },

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#1047: FILE: crypto/tcrypt.h:1854:
+		.input = { 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46 },

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#1049: FILE: crypto/tcrypt.h:1856:
+		.result = { 0x5b, 0x90, 0x8e, 0xc1, 0xab, 0xdd, 0x67, 0x5f, 0x3d, 0x69, 0x8a, 0x95, 0x53, 0xc8, 0x9c, 0xe5 },

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000212742.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 263 errors, 124 warnings, 77 checks, 984 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000212742.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
