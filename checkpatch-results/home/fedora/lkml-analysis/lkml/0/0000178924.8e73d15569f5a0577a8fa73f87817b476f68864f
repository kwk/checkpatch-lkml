WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#39: FILE: drivers/rio/rio-scan.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#75: FILE: drivers/rio/rio-scan.c:37:
+static int next_destid = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#76: FILE: drivers/rio/rio-scan.c:38:
+static int next_switchid = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#77: FILE: drivers/rio/rio-scan.c:39:
+static int next_net = 0;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#96: FILE: drivers/rio/rio-scan.c:58:
+extern struct rio_route_ops __start_rio_route_ops[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#97: FILE: drivers/rio/rio-scan.c:59:
+extern struct rio_route_ops __end_rio_route_ops[];

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: drivers/rio/rio-scan.c:63:
+ * @port: RIO master port $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#119: FILE: drivers/rio/rio-scan.c:81:
+ * @port: RIO master port $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: drivers/rio/rio-scan.c:97:
+ * @port: RIO master port $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#162: FILE: drivers/rio/rio-scan.c:124:
+	list_for_each_entry(rdev, &rio_devices, global_list)
+	    rio_write_config_32(rdev, RIO_COMPONENT_TAG_CSR,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#171: FILE: drivers/rio/rio-scan.c:133:
+		printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#181: FILE: drivers/rio/rio-scan.c:143:
+			printk(KERN_INFO

CHECK:BRACES: braces {} should be used on all arms of this statement
#233: FILE: drivers/rio/rio-scan.c:195:
+	if (((src_ops & RIO_SRC_OPS_READ) ||
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#248: FILE: drivers/rio/rio-scan.c:210:
+	} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur->vid == rdev->vid'
#297: FILE: drivers/rio/rio-scan.c:259:
+		if ((cur->vid == rdev->vid) && (cur->did == rdev->did)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur->did == rdev->did'
#297: FILE: drivers/rio/rio-scan.c:259:
+		if ((cur->vid == rdev->vid) && (cur->did == rdev->did)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#306: FILE: drivers/rio/rio-scan.c:268:
+		printk(KERN_ERR "RIO: missing routing ops for %s\n",

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#318: FILE: drivers/rio/rio-scan.c:280:
+static void __devinit rio_add_device(struct rio_dev *rdev)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*rdev)...) over kmalloc(sizeof(struct rio_dev)...)
#353: FILE: drivers/rio/rio-scan.c:315:
+	rdev = kmalloc(sizeof(struct rio_dev), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BRACES: braces {} should be used on all arms of this statement
#382: FILE: drivers/rio/rio-scan.c:344:
+	if (rio_device_has_destid(port, rdev->src_ops, rdev->dst_ops)
[...]
+	} else
[...]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#383: FILE: drivers/rio/rio-scan.c:345:
+	if (rio_device_has_destid(port, rdev->src_ops, rdev->dst_ops)
+	    && do_enum) {

CHECK:BRACES: Unbalanced braces around else statement
#388: FILE: drivers/rio/rio-scan.c:350:
+	} else

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*rswitch)...) over kmalloc(sizeof(struct rio_switch)...)
#395: FILE: drivers/rio/rio-scan.c:357:
+		rswitch = kmalloc(sizeof(struct rio_switch), GFP_KERNEL);

CHECK:BRACES: Unbalanced braces around else statement
#414: FILE: drivers/rio/rio-scan.c:376:
+	} else

CHECK:SPACING: No space is necessary after a cast
#424: FILE: drivers/rio/rio-scan.c:386:
+	rdev->dev.dma_mask = (u64 *) 0xffffffff;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#434: FILE: drivers/rio/rio-scan.c:396:
+      out:

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#459: FILE: drivers/rio/rio-scan.c:421:
+		if ((ext_ftr_ptr =

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#514: FILE: drivers/rio/rio-scan.c:476:
+		    u16 route_destid, u8 * route_port)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#536: FILE: drivers/rio/rio-scan.c:498:
+	return (u16) (result & 0xffff);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#540: FILE: drivers/rio/rio-scan.c:502:
+ * rio_get_swpinfo_inport- Gets the ingress port number $

CHECK:SPACING: No space is necessary after a cast
#555: FILE: drivers/rio/rio-scan.c:517:
+	return (u8) (result & 0xff);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#635: FILE: drivers/rio/rio-scan.c:597:
+		pr_debug(

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#641: FILE: drivers/rio/rio-scan.c:603:
+	if ((rdev = rio_setup_device(net, port, RIO_ANY_DESTID, hopcount, 1))) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#641: FILE: drivers/rio/rio-scan.c:603:
+	if ((rdev = rio_setup_device(net, port, RIO_ANY_DESTID, hopcount, 1))) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#644: FILE: drivers/rio/rio-scan.c:606:
+	} else

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#662: FILE: drivers/rio/rio-scan.c:624:
+		pr_debug(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#674: FILE: drivers/rio/rio-scan.c:636:
+				pr_debug(

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'rdev->rswitch->route_table[destid]'
#693: FILE: drivers/rio/rio-scan.c:655:
+						rdev->rswitch->
+						    route_table[destid] =

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:BRACES: Unbalanced braces around else statement
#700: FILE: drivers/rio/rio-scan.c:662:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#702: FILE: drivers/rio/rio-scan.c:664:
+		pr_debug("RIO: found %s (vid %4.4x did %4.4x)\n",
+		    rio_name(rdev), rdev->vid, rdev->did);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#748: FILE: drivers/rio/rio-scan.c:710:
+	if ((rdev = rio_setup_device(net, port, destid, hopcount, 0))) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#748: FILE: drivers/rio/rio-scan.c:710:
+	if ((rdev = rio_setup_device(net, port, destid, hopcount, 0))) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#751: FILE: drivers/rio/rio-scan.c:713:
+	} else

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#761: FILE: drivers/rio/rio-scan.c:723:
+		pr_debug(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#771: FILE: drivers/rio/rio-scan.c:733:
+				pr_debug(

CHECK:BRACES: Unbalanced braces around else statement
#789: FILE: drivers/rio/rio-scan.c:751:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#791: FILE: drivers/rio/rio-scan.c:753:
+		pr_debug("RIO: found %s (vid %4.4x did %4.4x)\n",
+		    rio_name(rdev), rdev->vid, rdev->did);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#812: FILE: drivers/rio/rio-scan.c:774:
+		if ((ext_ftr_ptr =

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#835: FILE: drivers/rio/rio-scan.c:797:
+static struct rio_net __devinit *rio_alloc_net(struct rio_mport *port)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*net)...) over kmalloc(sizeof(struct rio_net)...)
#839: FILE: drivers/rio/rio-scan.c:801:
+	net = kmalloc(sizeof(struct rio_net), GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#866: FILE: drivers/rio/rio-scan.c:828:
+	printk(KERN_INFO "RIO: enumerate master port %d, %s\n", mport->id,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#870: FILE: drivers/rio/rio-scan.c:832:
+		printk(KERN_INFO

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#879: FILE: drivers/rio/rio-scan.c:841:
+		if (!(net = rio_alloc_net(mport))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#880: FILE: drivers/rio/rio-scan.c:842:
+			printk(KERN_ERR "RIO: failed to allocate new net\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#886: FILE: drivers/rio/rio-scan.c:848:
+			printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#895: FILE: drivers/rio/rio-scan.c:857:
+		printk(KERN_INFO "RIO: master port %d link inactive\n",

WARNING:INDENTED_LABEL: labels should not be indented
#900: FILE: drivers/rio/rio-scan.c:862:
+      out:

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#916: FILE: drivers/rio/rio-scan.c:878:
+	list_for_each_entry(rdev, &rio_devices, global_list)
+	    if (rio_is_switch(rdev))

WARNING:TABSTOP: Statements should start on a tabstop
#917: FILE: drivers/rio/rio-scan.c:879:
+	    if (rio_is_switch(rdev))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#956: FILE: drivers/rio/rio-scan.c:918:
+	printk(KERN_INFO "RIO: discover master port %d, %s\n", mport->id,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#961: FILE: drivers/rio/rio-scan.c:923:
+		if (!(net = rio_alloc_net(mport))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#962: FILE: drivers/rio/rio-scan.c:924:
+			printk(KERN_ERR "RIO: Failed to allocate new net\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#983: FILE: drivers/rio/rio-scan.c:945:
+			printk(KERN_INFO

WARNING:INDENTED_LABEL: labels should not be indented
#994: FILE: drivers/rio/rio-scan.c:956:
+      timeout:

WARNING:INDENTED_LABEL: labels should not be indented
#996: FILE: drivers/rio/rio-scan.c:958:
+      bail:

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1014: FILE: drivers/rio/switches/tsi500.c:1:
+/*

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1032: FILE: drivers/rio/switches/tsi500.c:19:
+tsi500_route_add_entry(struct rio_mport *mport, u16 destid, u8 hopcount, u16 table, u16 route_destid, u8 route_port)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '&' (ctx:VxO)
#1035: FILE: drivers/rio/switches/tsi500.c:22:
+	u32 offset = 0x10000 + 0xa00 + ((route_destid / 2)&~0x3);
 	                                                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1040: FILE: drivers/rio/switches/tsi500.c:27:
+		result &= ~(0xf << (4*(route_destid & 0x7)));
 		                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1041: FILE: drivers/rio/switches/tsi500.c:28:
+		for (i=0;i<4;i++)
 		      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1041: FILE: drivers/rio/switches/tsi500.c:28:
+		for (i=0;i<4;i++)
 		        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1041: FILE: drivers/rio/switches/tsi500.c:28:
+		for (i=0;i<4;i++)
 		          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1041: FILE: drivers/rio/switches/tsi500.c:28:
+		for (i=0;i<4;i++)
 		            ^

WARNING:LONG_LINE: line length of 148 exceeds 100 columns
#1042: FILE: drivers/rio/switches/tsi500.c:29:
+			rio_mport_write_config_32(mport, destid, hopcount, offset + (0x20000*i), result | (route_port << (4*(route_destid & 0x7))));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1042: FILE: drivers/rio/switches/tsi500.c:29:
+			rio_mport_write_config_32(mport, destid, hopcount, offset + (0x20000*i), result | (route_port << (4*(route_destid & 0x7))));
 			                                                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1042: FILE: drivers/rio/switches/tsi500.c:29:
+			rio_mport_write_config_32(mport, destid, hopcount, offset + (0x20000*i), result | (route_port << (4*(route_destid & 0x7))));
 			                                                                                                   ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1044: FILE: drivers/rio/switches/tsi500.c:31:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1044: FILE: drivers/rio/switches/tsi500.c:31:
+	else {

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1045: FILE: drivers/rio/switches/tsi500.c:32:
+		rio_mport_read_config_32(mport, destid, hopcount, offset + (0x20000*table), &result);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1045: FILE: drivers/rio/switches/tsi500.c:32:
+		rio_mport_read_config_32(mport, destid, hopcount, offset + (0x20000*table), &result);
 		                                                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1046: FILE: drivers/rio/switches/tsi500.c:33:
+		result &= ~(0xf << (4*(route_destid & 0x7)));
 		                     ^

WARNING:LONG_LINE: line length of 144 exceeds 100 columns
#1047: FILE: drivers/rio/switches/tsi500.c:34:
+		rio_mport_write_config_32(mport, destid, hopcount, offset + (0x20000*table), result | (route_port << (4*(route_destid & 0x7))));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1047: FILE: drivers/rio/switches/tsi500.c:34:
+		rio_mport_write_config_32(mport, destid, hopcount, offset + (0x20000*table), result | (route_port << (4*(route_destid & 0x7))));
 		                                                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1047: FILE: drivers/rio/switches/tsi500.c:34:
+		rio_mport_write_config_32(mport, destid, hopcount, offset + (0x20000*table), result | (route_port << (4*(route_destid & 0x7))));
 		                                                                                                       ^

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#1054: FILE: drivers/rio/switches/tsi500.c:41:
+tsi500_route_get_entry(struct rio_mport *mport, u16 destid, u8 hopcount, u16 table, u16 route_destid, u8 *route_port)

CHECK:SPACING: spaces preferred around that '&' (ctx:VxO)
#1057: FILE: drivers/rio/switches/tsi500.c:44:
+	u32 offset = 0x10000 + 0xa00 + ((route_destid / 2)&~0x3);
 	                                                  ^

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1063: FILE: drivers/rio/switches/tsi500.c:50:
+		rio_mport_read_config_32(mport, destid, hopcount, offset + (0x20000*table), &result);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1063: FILE: drivers/rio/switches/tsi500.c:50:
+		rio_mport_read_config_32(mport, destid, hopcount, offset + (0x20000*table), &result);
 		                                                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1065: FILE: drivers/rio/switches/tsi500.c:52:
+	result &= 0xf << (4*(route_destid & 0x7));
 	                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1066: FILE: drivers/rio/switches/tsi500.c:53:
+	*route_port = result >> (4*(route_destid & 0x7));
 	                          ^

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1073: FILE: drivers/rio/switches/tsi500.c:60:
+DECLARE_RIO_ROUTE_OPS(RIO_VID_TUNDRA, RIO_DID_TSI500, tsi500_route_add_entry, tsi500_route_get_entry);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000178924.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 32 warnings, 40 checks, 1025 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000178924.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
