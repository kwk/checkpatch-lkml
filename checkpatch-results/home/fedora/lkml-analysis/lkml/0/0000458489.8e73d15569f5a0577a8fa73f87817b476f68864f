WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
Let's just get over with  this before queue handling will be targeted again...

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rq->nr_sectors == 1'
#938: FILE: drivers/ide/ide-taskfile.c:565:
+	if ((rq->nr_sectors == 1) != (stat & DRQ_STAT)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#968: FILE: drivers/ide/pcidma.c:1:
+/**** vi:set ts=8 sts=8 sw=8:************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#997: FILE: drivers/ide/pcidma.c:30:
+#include <asm/io.h>

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1012: FILE: drivers/ide/pcidma.c:45:
+	if (OK_STAT(stat = GET_STAT(),DRIVE_READY,drive->bad_wstat|DRQ_STAT)) {
 	                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1012: FILE: drivers/ide/pcidma.c:45:
+	if (OK_STAT(stat = GET_STAT(),DRIVE_READY,drive->bad_wstat|DRQ_STAT)) {
 	                                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1012: FILE: drivers/ide/pcidma.c:45:
+	if (OK_STAT(stat = GET_STAT(),DRIVE_READY,drive->bad_wstat|DRQ_STAT)) {
 	                                                          ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1012: FILE: drivers/ide/pcidma.c:45:
+	if (OK_STAT(stat = GET_STAT(),DRIVE_READY,drive->bad_wstat|DRQ_STAT)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1017: FILE: drivers/ide/pcidma.c:50:
+		printk(KERN_ERR "%s: dma_intr: bad DMA status (dma_stat=%x)\n",

WARNING:IF_1: Consider removing the #if 1 and its #endif
#1034: FILE: drivers/ide/pcidma.c:67:
+#if 1

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1041: FILE: drivers/ide/pcidma.c:74:
+			printk("ide-dma: received %d segments, build %d\n", rq->nr_segments, nents);

CHECK:SPACING: No space is necessary after a cast
#1056: FILE: drivers/ide/pcidma.c:89:
+			sg[nents].offset = (unsigned long) virt_addr & ~PAGE_MASK;

CHECK:SPACING: No space is necessary after a cast
#1064: FILE: drivers/ide/pcidma.c:97:
+		sg[nents].offset = (unsigned long) virt_addr & ~PAGE_MASK;

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#1071: FILE: drivers/ide/pcidma.c:104:
+			printk("ide-dma: received %d phys segments, build %d\n", rq->nr_phys_segments, nents);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1071: FILE: drivers/ide/pcidma.c:104:
+			printk("ide-dma: received %d phys segments, build %d\n", rq->nr_phys_segments, nents);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1078: FILE: drivers/ide/pcidma.c:111:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1089: FILE: drivers/ide/pcidma.c:122:
+	u8 dma_stat = inb(drive->channel->dma_base+2);
 	                                          ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1092: FILE: drivers/ide/pcidma.c:125:
+	printk("%s: dma_timer_expiry: dma status == 0x%02x\n", drive->name, dma_stat);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dma_timer_expiry', this function's name, in a string
#1092: FILE: drivers/ide/pcidma.c:125:
+	printk("%s: dma_timer_expiry: dma status == 0x%02x\n", drive->name, dma_stat);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1095: FILE: drivers/ide/pcidma.c:128:
+#if 0

WARNING:LINE_SPACING: Missing a blank line after declarations
#1101: FILE: drivers/ide/pcidma.c:134:
+		u8 stat = GET_STAT();
+		return ide_error(drive, rq, "dma_timer_expiry", stat);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1123: FILE: drivers/ide/pcidma.c:156:
+	outb(inb(dma_base+2)|6, dma_base+2);	/* clear INTR & ERROR flags */
 	                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1123: FILE: drivers/ide/pcidma.c:156:
+	outb(inb(dma_base+2)|6, dma_base+2);	/* clear INTR & ERROR flags */
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1123: FILE: drivers/ide/pcidma.c:156:
+	outb(inb(dma_base+2)|6, dma_base+2);	/* clear INTR & ERROR flags */
 	                                ^

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1207: FILE: drivers/ide/pcidma.c:240:
+	if (ch->sg_table) {
+		kfree(ch->sg_table);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ch->dma_extra'
#1210: FILE: drivers/ide/pcidma.c:243:
+	if ((ch->dma_extra) && (ch->unit == 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ch->unit == 0'
#1210: FILE: drivers/ide/pcidma.c:243:
+	if ((ch->dma_extra) && (ch->unit == 0))

WARNING:TYPO_SPELLING: 'driectly' may be misspelled - perhaps 'directly'?
#1224: FILE: drivers/ide/pcidma.c:257:
+ * FIXME: there are some places where this gets used driectly for "error
                                                      ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1241: FILE: drivers/ide/pcidma.c:274:
+			printk("%s: DMA disabled\n", drive->name);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1286: FILE: drivers/ide/pcidma.c:319:
+	ch->sg_nents = i = build_sglist(ch, rq);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1308: FILE: drivers/ide/pcidma.c:341:
+				printk("ide-dma: count %d, sg_nents %d, cur_len %d, cur_addr %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1309: FILE: drivers/ide/pcidma.c:342:
+				printk("ide-dma: count %d, sg_nents %d, cur_len %d, cur_addr %u\n",
+						count, ch->sg_nents, cur_len, cur_addr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1310: FILE: drivers/ide/pcidma.c:343:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:CODE_INDENT: code indent should use tabs where possible
#1320: FILE: drivers/ide/pcidma.c:353:
+^I^I        /*$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1347: FILE: drivers/ide/pcidma.c:380:
+		printk(KERN_ERR "%s: empty DMA table?\n", ch->name);

WARNING:TYPO_SPELLING: 'reques' may be misspelled - perhaps 'request'?
#1362: FILE: drivers/ide/pcidma.c:395:
+ * Pacific Digital host chip needs the reques to be passed there to decide
                                        ^^^^^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1376: FILE: drivers/ide/pcidma.c:409:
+	outb(inb(dma_base)|1, dma_base);		/* start DMA */
 	                  ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxO)
#1387: FILE: drivers/ide/pcidma.c:420:
+	outb(inb(dma_base)&~1, dma_base);	/* stop DMA */
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1388: FILE: drivers/ide/pcidma.c:421:
+	dma_stat = inb(dma_base+2);		/* get DMA status */
 	                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1389: FILE: drivers/ide/pcidma.c:422:
+	outb(dma_stat|6, dma_base+2);		/* clear the INTR & ERROR bits */
 	             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1389: FILE: drivers/ide/pcidma.c:422:
+	outb(dma_stat|6, dma_base+2);		/* clear the INTR & ERROR bits */
 	                         ^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#1421: FILE: drivers/ide/pcidma.c:454:
+	printk(KERN_ERR "ATA: UDMA timeout occured %s!\n", drive->name);
 	                                   ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1421: FILE: drivers/ide/pcidma.c:454:
+	printk(KERN_ERR "ATA: UDMA timeout occured %s!\n", drive->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1434: FILE: drivers/ide/pcidma.c:467:
+		printk(KERN_ERR "ATA: ERROR: BM DMA portst already in use!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1438: FILE: drivers/ide/pcidma.c:471:
+	printk(KERN_INFO"    %s: BM-DMA at 0x%04lx-0x%04lx", ch->name, dma_base, dma_base + 7);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1438: FILE: drivers/ide/pcidma.c:471:
+	printk(KERN_INFO"    %s: BM-DMA at 0x%04lx-0x%04lx", ch->name, dma_base, dma_base + 7);

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1441: FILE: drivers/ide/pcidma.c:474:
+	ch->dmatable_cpu = pci_alloc_consistent(ch->pci_dev,
+						  PRD_ENTRIES * PRD_BYTES,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ch->dmatable_cpu"
#1443: FILE: drivers/ide/pcidma.c:476:
+	if (ch->dmatable_cpu == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ch->sg_table)...) over kmalloc(sizeof(struct scatterlist)...)
#1446: FILE: drivers/ide/pcidma.c:479:
+	ch->sg_table = kmalloc(sizeof(struct scatterlist) * PRD_ENTRIES,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1447: FILE: drivers/ide/pcidma.c:480:
+	ch->sg_table = kmalloc(sizeof(struct scatterlist) * PRD_ENTRIES,
+				 GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ch->sg_table"
#1448: FILE: drivers/ide/pcidma.c:481:
+	if (ch->sg_table == NULL) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1478: FILE: drivers/ide/pcidma.c:511:
+		u8 dma_stat = inb(dma_base+2);
 		                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1479: FILE: drivers/ide/pcidma.c:512:
+		u8 dma_stat = inb(dma_base+2);
+		printk(", BIOS settings: %s:%s, %s:%s",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1479: FILE: drivers/ide/pcidma.c:512:
+		printk(", BIOS settings: %s:%s, %s:%s",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1483: FILE: drivers/ide/pcidma.c:516:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1487: FILE: drivers/ide/pcidma.c:520:
+	printk(" -- ERROR, UNABLE TO ALLOCATE DMA TABLES\n");

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#1507: FILE: drivers/ide/pcidma.c:540:
+	ide_set_handler(drive, ide_dma_intr, WAIT_CMD, dma_timer_expiry);	/* issue cmd to drive */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'drive->addressing == 1'
#1508: FILE: drivers/ide/pcidma.c:541:
+	if ((rq->flags & REQ_DRIVE_ACB) && (drive->addressing == 1)) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1521: FILE: drivers/ide/pcidma.c:554:
+EXPORT_SYMBOL(ata_do_udma);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1522: FILE: drivers/ide/pcidma.c:555:
+EXPORT_SYMBOL(ide_dma_intr);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1791: FILE: drivers/ide/pdc202xx.c:169:
+int check_in_drive_lists(struct ata_device *drive) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#1792: FILE: drivers/ide/pdc202xx.c:170:
+	const char *pdc_quirk_drives[] = {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1801: FILE: drivers/ide/pdc202xx.c:179:
+     const char**list = pdc_quirk_drives;$

ERROR:POINTER_LOCATION: "foo**bar" should be "foo **bar"
#1801: FILE: drivers/ide/pdc202xx.c:179:
+     const char**list = pdc_quirk_drives;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1827: FILE: drivers/ide/pdc202xx.c:312:
+#define set_2regs(a, b) \
+        OUT_BYTE((a + adj), indexreg); \
+	OUT_BYTE(b, datareg);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#1827: FILE: drivers/ide/pdc202xx.c:312:
+#define set_2regs(a, b) \
+        OUT_BYTE((a + adj), indexreg); \
+	OUT_BYTE(b, datareg);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1827: FILE: drivers/ide/pdc202xx.c:312:
+#define set_2regs(a, b) \
+        OUT_BYTE((a + adj), indexreg); \
+	OUT_BYTE(b, datareg);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:CODE_INDENT: code indent should use tabs where possible
#1828: FILE: drivers/ide/pdc202xx.c:313:
+        OUT_BYTE((a + adj), indexreg); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1828: FILE: drivers/ide/pdc202xx.c:313:
+        OUT_BYTE((a + adj), indexreg); \$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1831: FILE: drivers/ide/pdc202xx.c:316:
+#define set_reg_and_wait(value, reg, delay) \
+	OUT_BYTE(value, reg); \
+        mdelay(delay);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1831: FILE: drivers/ide/pdc202xx.c:316:
+#define set_reg_and_wait(value, reg, delay) \
+	OUT_BYTE(value, reg); \
+        mdelay(delay);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1833: FILE: drivers/ide/pdc202xx.c:318:
+        mdelay(delay);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1833: FILE: drivers/ide/pdc202xx.c:318:
+        mdelay(delay);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1835: FILE: drivers/ide/pdc202xx.c:320:
+
+

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2017: FILE: drivers/ide/pdc202xx.c:446:
+	else	speed = XFER_PIO_0 + min_t(byte, pio, 4);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2035: FILE: drivers/ide/pdc202xx.c:583:
+			set_2regs(iordy, (IN_BYTE(datareg)|0x03));
 			                                  ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2073: FILE: drivers/ide/pdc202xx.c:863:
+static void pdc202xx_bug (struct ata_device *drive)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2085: FILE: drivers/ide/pdc202xx.c:879:
+	set_reg_and_wait(0x04,IDE_CONTROL_REG, 1000);
 	                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2086: FILE: drivers/ide/pdc202xx.c:880:
+	set_reg_and_wait(0x00,IDE_CONTROL_REG, 1000);
 	                     ^

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#2099: FILE: drivers/ide/pdc202xx.c:891:
+	set_reg_and_wait(udma_speed_flag & ~0x10, high_16 + 0x001f, 2000);		/* 2 seconds ?! */

WARNING:LONG_LINE_COMMENT: line length of 111 exceeds 100 columns
#2142: FILE: drivers/ide/pdc202xx.c:920:
+			set_reg_and_wait(udma_speed_flag & ~0x10, high_16 + 0x001f, 2000);   /* 2 seconds ?! */

WARNING:LONG_LINE_COMMENT: line length of 114 exceeds 100 columns
#2155: FILE: drivers/ide/pdc202xx.c:934:
+			set_reg_and_wait(udma_speed_flag & ~0x10, high_16 + 0x001f, 2000);	/* 2 seconds ?! */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2245: FILE: drivers/ide/quirks.c:1:
+/**** vi:set ts=8 sts=8 sw=8:************************************************

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#2274: FILE: drivers/ide/quirks.c:30:
+#include <asm/io.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2280: FILE: drivers/ide/quirks.c:36:
+	char * id_model;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2281: FILE: drivers/ide/quirks.c:37:
+	char * id_firmware;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2293: FILE: drivers/ide/quirks.c:49:
+struct drive_list_entry drive_blacklist[] = {
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2331: FILE: drivers/ide/quirks.c:87:
+static int in_drive_list(struct hd_driveid *id, struct drive_list_entry * drive_table)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!drive_table->id_firmware'
#2334: FILE: drivers/ide/quirks.c:90:
+		if ((!strcmp(drive_table->id_model, id->model)) &&
+		    ((drive_table->id_firmware && !strstr(drive_table->id_firmware, id->fw_rev)) ||
+		     (!drive_table->id_firmware)))

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2387: FILE: drivers/ide/quirks.c:143:
+		return in_drive_list(id, drive_whitelist);
+	} else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2389: FILE: drivers/ide/quirks.c:145:
+		int blacklist = in_drive_list(id, drive_blacklist);
+		if (blacklist)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2390: FILE: drivers/ide/quirks.c:146:
+			printk("%s: Disabling (U)DMA for %s\n", drive->name, id->model);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2391: FILE: drivers/ide/quirks.c:147:
+		return(blacklist);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:SPACING: space required after that ',' (ctx:OxV)
#2400: FILE: drivers/ide/quirks.c:156:
+			if (!strcmp(*list++,id->model))
 			                   ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#2407: FILE: drivers/ide/quirks.c:163:
+			if (!strcmp(*list++,id->model)) {
 			                   ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2408: FILE: drivers/ide/quirks.c:164:
+				printk("%s: Disabling (U)DMA for %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2409: FILE: drivers/ide/quirks.c:165:
+				printk("%s: Disabling (U)DMA for %s\n",
+					drive->name, id->model);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2421: FILE: drivers/ide/quirks.c:177:
+	printk(", DMA");

CHECK:BRACES: braces {} should be used on all arms of this statement
#2426: FILE: drivers/ide/quirks.c:182:
+	if ((id->field_valid & 4) && (eighty_ninty_three(drive)) &&
[...]
+	} else if ((id->field_valid & 4) && (eighty_ninty_three(drive)) &&
[...]
+	} else if ((id->field_valid & 4) &&
[...]
+	} else if (id->field_valid & 4)
[...]

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2434: FILE: drivers/ide/quirks.c:190:
+		if ((id->dma_ultra >> 13) & 1) {
[...]
+		} else if ((id->dma_ultra >> 12) & 1) {
[...]
+		} else {
[...]

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2443: FILE: drivers/ide/quirks.c:199:
+		if ((id->dma_ultra >> 10) & 1) {
[...]
+		} else if ((id->dma_ultra >> 9) & 1) {
[...]
+		} else {
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2455: FILE: drivers/ide/quirks.c:211:
+	printk(str);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2473: FILE: drivers/ide/quirks.c:229:
+EXPORT_SYMBOL(udma_print);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2474: FILE: drivers/ide/quirks.c:230:
+EXPORT_SYMBOL(udma_black_list);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2475: FILE: drivers/ide/quirks.c:231:
+EXPORT_SYMBOL(udma_white_list);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000458489.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 53 warnings, 33 checks, 1572 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000458489.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
