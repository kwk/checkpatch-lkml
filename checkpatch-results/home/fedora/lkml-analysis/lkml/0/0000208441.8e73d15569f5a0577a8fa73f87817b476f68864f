WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
--- linux-2.6.11-rc2-mm1-modules.orig/security/seclvl.c	2005-02-03 14:55:44.799527472 -0600

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#66: FILE: security/seclvl.c:104:
+static void seclvl_printk( int verb, const char * fmt, ... )

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#66: FILE: security/seclvl.c:104:
+static void seclvl_printk( int verb, const char * fmt, ... )

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#66: FILE: security/seclvl.c:104:
+static void seclvl_printk( int verb, const char * fmt, ... )

WARNING:LINE_SPACING: Missing a blank line after declarations
#69: FILE: security/seclvl.c:107:
+	va_list args;
+	va_start( args, fmt );

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#69: FILE: security/seclvl.c:107:
+	va_start( args, fmt );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#69: FILE: security/seclvl.c:107:
+	va_start( args, fmt );

WARNING:LINE_SPACING: Missing a blank line after declarations
#73: FILE: security/seclvl.c:111:
+		unsigned long _now = jiffies;
+		if ((_now - _prior) > HZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#73: FILE: security/seclvl.c:111:
+		if ((_now - _prior) > HZ) {
+			vprintk( fmt, args );
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#74: FILE: security/seclvl.c:112:
+			vprintk( fmt, args );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#74: FILE: security/seclvl.c:112:
+			vprintk( fmt, args );

ERROR:SPACING: space prohibited after that open parenthesis '('
#78: FILE: security/seclvl.c:116:
+	va_end( args );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#78: FILE: security/seclvl.c:116:
+	va_end( args );

WARNING:SPLIT_STRING: quoted string split across lines
#90: FILE: security/seclvl.c:200:
+		seclvl_printk(1, KERN_WARNING "%s: Attempt to set seclvl out "
+			      "of range: [%d]\n", __FUNCTION__, reqlvl);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#90: FILE: security/seclvl.c:200:
+			      "of range: [%d]\n", __FUNCTION__, reqlvl);

WARNING:SPLIT_STRING: quoted string split across lines
#99: FILE: security/seclvl.c:207:
+		seclvl_printk(1, KERN_WARNING "%s: Attempt to lower seclvl to "
+			      "[%d]\n", __FUNCTION__, reqlvl);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#99: FILE: security/seclvl.c:207:
+			      "[%d]\n", __FUNCTION__, reqlvl);

WARNING:SPLIT_STRING: quoted string split across lines
#110: FILE: security/seclvl.c:232:
+		seclvl_printk(1, KERN_WARNING "%s: Cannot advance to seclvl "
+			      "[%d]\n", __FUNCTION__, newlvl);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#110: FILE: security/seclvl.c:232:
+			      "[%d]\n", __FUNCTION__, newlvl);

WARNING:SPLIT_STRING: quoted string split across lines
#117: FILE: security/seclvl.c:237:
+		seclvl_printk(1, KERN_WARNING "%s: Cannot advance to seclvl "
+			      "[%d]\n", __FUNCTION__, newlvl);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#117: FILE: security/seclvl.c:237:
+			      "[%d]\n", __FUNCTION__, newlvl);

WARNING:SPLIT_STRING: quoted string split across lines
#124: FILE: security/seclvl.c:242:
+		seclvl_printk(1, KERN_WARNING "%s: Not allowed to advance to "
+			      "seclvl [%d]\n", __FUNCTION__, seclvl);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#124: FILE: security/seclvl.c:242:
+			      "seclvl [%d]\n", __FUNCTION__, seclvl);

WARNING:SPLIT_STRING: quoted string split across lines
#135: FILE: security/seclvl.c:259:
+		seclvl_printk(1, KERN_WARNING "%s: Invalid value passed to "
+			      "seclvl: [%s]\n", __FUNCTION__, buff);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#135: FILE: security/seclvl.c:259:
+			      "seclvl: [%s]\n", __FUNCTION__, buff);

WARNING:SPLIT_STRING: quoted string split across lines
#143: FILE: security/seclvl.c:265:
+		seclvl_printk(1, KERN_WARNING "%s: Illegal secure level "
+			      "requested: [%d]\n", __FUNCTION__, (int)val);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#143: FILE: security/seclvl.c:265:
+			      "requested: [%d]\n", __FUNCTION__, (int)val);

WARNING:SPLIT_STRING: quoted string split across lines
#150: FILE: security/seclvl.c:270:
+		seclvl_printk(0, KERN_ERR "%s: Failure advancing security "
+			      "level to [%lu]\n", __FUNCTION__, val);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#150: FILE: security/seclvl.c:270:
+			      "level to [%lu]\n", __FUNCTION__, val);

WARNING:SPLIT_STRING: quoted string split across lines
#162: FILE: security/seclvl.c:318:
+		seclvl_printk(0, KERN_ERR "%s: Plaintext password too large "
+			      "(%d characters).  Largest possible is %lu "

WARNING:SPLIT_STRING: quoted string split across lines
#163: FILE: security/seclvl.c:319:
+			      "(%d characters).  Largest possible is %lu "
+			      "bytes.\n", __FUNCTION__, len, PAGE_SIZE);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#163: FILE: security/seclvl.c:319:
+			      "bytes.\n", __FUNCTION__, len, PAGE_SIZE);

WARNING:SPLIT_STRING: quoted string split across lines
#171: FILE: security/seclvl.c:325:
+		seclvl_printk(0, KERN_ERR "%s: Failed to load transform for "
+			      "SHA1\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#171: FILE: security/seclvl.c:325:
+			      "SHA1\n", __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#187: FILE: security/seclvl.c:361:
 			      "this part of the module; please tell a "
+			      "maintainer about this event.\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#187: FILE: security/seclvl.c:361:
+			      "maintainer about this event.\n", __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#198: FILE: security/seclvl.c:372:
+		seclvl_printk(0, KERN_ERR "%s: Error hashing password: rc = "
+			      "[%d]\n", __FUNCTION__, rc);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#198: FILE: security/seclvl.c:372:
+			      "[%d]\n", __FUNCTION__, rc);

WARNING:SPLIT_STRING: quoted string split across lines
#209: FILE: security/seclvl.c:381:
+	seclvl_printk(0, KERN_INFO "%s: Password accepted; seclvl reduced to "
+		      "0.\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#209: FILE: security/seclvl.c:381:
+		      "0.\n", __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#221: FILE: security/seclvl.c:400:
 				      "the init process dissallowed in "
+				      "secure level %d\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#221: FILE: security/seclvl.c:400:
+				      "secure level %d\n", __FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#236: FILE: security/seclvl.c:427:
 				      "and/or APPEND extended attribute set "
+				      "denied in seclvl [%d]\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#236: FILE: security/seclvl.c:427:
+				      "denied in seclvl [%d]\n", __FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#244: FILE: security/seclvl.c:433:
 				      "raw I/O while in secure level [%d] "
+				      "denied\n", __FUNCTION__, seclvl);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#244: FILE: security/seclvl.c:433:
+				      "denied\n", __FUNCTION__, seclvl);

WARNING:SPLIT_STRING: quoted string split across lines
#251: FILE: security/seclvl.c:438:
 				      "network administrative task while "
+				      "in secure level [%d] denied\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#252: FILE: security/seclvl.c:439:
+				      __FUNCTION__, seclvl);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#259: FILE: security/seclvl.c:444:
+				      __FUNCTION__, seclvl);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#266: FILE: security/seclvl.c:449:
+				      __FUNCTION__, seclvl);

WARNING:SPLIT_STRING: quoted string split across lines
#272: FILE: security/seclvl.c:453:
 				      "a module operation while in secure "
+				      "level [%d] denied\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#273: FILE: security/seclvl.c:454:
+				      __FUNCTION__, seclvl);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#282: FILE: security/seclvl.c:464:
+	seclvl_printk(1, KERN_WARNING "%s: Capability denied\n", __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#294: FILE: security/seclvl.c:479:
+			seclvl_printk(1, KERN_WARNING "%s: Attempt to "
+				      "decrement time in secure level %d "

WARNING:SPLIT_STRING: quoted string split across lines
#295: FILE: security/seclvl.c:480:
+				      "decrement time in secure level %d "
+				      "denied: current->pid = [%d], "

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#298: FILE: security/seclvl.c:482:
+				      __FUNCTION__, seclvl, current->pid,

WARNING:SPLIT_STRING: quoted string split across lines
#309: FILE: security/seclvl.c:533:
+			seclvl_printk(1, KERN_WARNING "%s: Write to block "
+				      "device denied in secure level [%d]\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#310: FILE: security/seclvl.c:534:
+				      __FUNCTION__, seclvl);

WARNING:SPLIT_STRING: quoted string split across lines
#319: FILE: security/seclvl.c:539:
+				seclvl_printk(1, KERN_WARNING "%s: Write to "
+					      "mounted block device denied in "

WARNING:SPLIT_STRING: quoted string split across lines
#320: FILE: security/seclvl.c:540:
+					      "mounted block device denied in "
+					      "secure level [%d]\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#321: FILE: security/seclvl.c:541:
+					      __FUNCTION__, seclvl);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#334: FILE: security/seclvl.c:561:
+					      __FUNCTION__, seclvl);

WARNING:SPLIT_STRING: quoted string split across lines
#345: FILE: security/seclvl.c:590:
+		seclvl_printk(1, KERN_WARNING "%s: Attempt to unmount in "
+			      "secure level [%d]\n", __FUNCTION__, seclvl);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#345: FILE: security/seclvl.c:590:
+			      "secure level [%d]\n", __FUNCTION__, seclvl);

WARNING:SPLIT_STRING: quoted string split across lines
#358: FILE: security/seclvl.c:618:
 				      "were set, but they are mutually "
+				      "exclusive.\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#358: FILE: security/seclvl.c:618:
+				      "exclusive.\n", __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#366: FILE: security/seclvl.c:624:
+			seclvl_printk(0, KERN_ERR "%s: Error: SHA1 support "
+				      "not in kernel\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#366: FILE: security/seclvl.c:624:
+				      "not in kernel\n", __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#379: FILE: security/seclvl.c:636:
 				      "representation of the SHA1 hash of "
+				      "the password.\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#379: FILE: security/seclvl.c:636:
+				      "the password.\n", __FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#390: FILE: security/seclvl.c:660:
+		seclvl_printk(0, KERN_WARNING "Error [%d] registering seclvl "
+			      "subsystem\n", __FUNCTION__, rc);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#390: FILE: security/seclvl.c:660:
+			      "subsystem\n", __FUNCTION__, rc);

WARNING:SPLIT_STRING: quoted string split across lines
#401: FILE: security/seclvl.c:687:
+		seclvl_printk(0, KERN_ERR "%s: Error: bad initial securelevel "
+			      "[%d].\n", __FUNCTION__, initlvl);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#401: FILE: security/seclvl.c:687:
+			      "[%d].\n", __FUNCTION__, initlvl);

WARNING:SPLIT_STRING: quoted string split across lines
#410: FILE: security/seclvl.c:694:
+		seclvl_printk(0, KERN_ERR "%s: Error processing the password "
+			      "module parameter(s): rc = [%d]\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#410: FILE: security/seclvl.c:694:
+			      "module parameter(s): rc = [%d]\n", __FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#420: FILE: security/seclvl.c:701:
+		seclvl_printk(0, KERN_ERR "%s: seclvl: Failure registering "
+			      "with the kernel.\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#420: FILE: security/seclvl.c:701:
+			      "with the kernel.\n", __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#428: FILE: security/seclvl.c:707:
 				      "registering with primary security "
+				      "module.\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#428: FILE: security/seclvl.c:707:
+				      "module.\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#436: FILE: security/seclvl.c:714:
+			      __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#441: FILE: security/seclvl.c:718:
+		      __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#453: FILE: security/seclvl.c:742:
+		seclvl_printk(0, KERN_INFO "%s: seclvl: Failure unregistering "
+			      "with the kernel\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#453: FILE: security/seclvl.c:742:
+			      "with the kernel\n", __FUNCTION__);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000208441.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 75 warnings, 0 checks, 391 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000208441.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
