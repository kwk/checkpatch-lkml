WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
> Ok Andrew, I've attached two patches (which should be applied in order to 

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#174: FILE: include/linux/sysctl.h:137:
+	KERN_INTERACTIVE=67,	/* interactive tasks can have cpu bursts */
 	                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#175: FILE: include/linux/sysctl.h:138:
+	KERN_COMPUTE=68,	/* adjust timeslices for a compute server */
 	            ^

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#319: FILE: kernel/sched.c:79:
+int sched_compute = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#376: FILE: kernel/sched.c:130:
+	unsigned long bitmap[BITS_TO_LONGS(MAX_PRIO+1)];
 	                                           ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#493: FILE: kernel/sched.c:646:
+	if (likely(!rt_task(p))) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#495: FILE: kernel/sched.c:648:
+		unsigned int task_user_prio = TASK_USER_PRIO(p);
+		return 39 - task_user_prio;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#496: FILE: kernel/sched.c:649:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#507: FILE: kernel/sched.c:656:
+	unsigned int best_burst;
+	best_burst = burst(p);

WARNING:LINE_SPACING: Missing a blank line after declarations
#551: FILE: kernel/sched.c:674:
+	unsigned int slice = RR_INTERVAL();
+	if (likely(!rt_task(p)))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#584: FILE: kernel/sched.c:684:
+static int rr_interval(task_t * p)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#587: FILE: kernel/sched.c:687:
+	int rr_interval = RR_INTERVAL();
+	if (unlikely(!rr_interval))

WARNING:LINE_SPACING: Missing a blank line after declarations
#607: FILE: kernel/sched.c:703:
+	unsigned int best_burst;
+	if (rt_task(p))

WARNING:LINE_SPACING: Missing a blank line after declarations
#641: FILE: kernel/sched.c:737:
+	unsigned long total_run = NS_TO_JIFFIES(ns_totalrun);
+	if (p->flags & PF_FORKED || ((!(NS_TO_JIFFIES(p->runtime)) ||

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#641: FILE: kernel/sched.c:737:
+	if (p->flags & PF_FORKED || ((!(NS_TO_JIFFIES(p->runtime)) ||
[...]
+			p->flags &= ~PF_FORKED;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#642: FILE: kernel/sched.c:738:
+	if (p->flags & PF_FORKED || ((!(NS_TO_JIFFIES(p->runtime)) ||
+		!sched_interactive || sched_compute) &&

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#763: FILE: kernel/sched.c:1001:
+	if (p->prio == rq->curr->prio && (p->slice < slice(p) ||
[...]
+			return 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#764: FILE: kernel/sched.c:1002:
+	if (p->prio == rq->curr->prio && (p->slice < slice(p) ||
+		rt_task(rq->curr)))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#766: FILE: kernel/sched.c:1004:
+	if (!sched_compute || rq->cache_ticks >= cache_delay ||
[...]
+			return 1;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#767: FILE: kernel/sched.c:1005:
+	if (!sched_compute || rq->cache_ticks >= cache_delay ||
+		!p->mm || rt_task(p))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#966: FILE: kernel/sched.c:1551:
+void pull_task(runqueue_t *src_rq, task_t *p,
+		runqueue_t *this_rq, int this_cpu)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#1180: FILE: kernel/sched.c:2278:
+		if (((smt_curr->slice * (100 - sd->per_cpu_gain) / 100) >
[...]
 				ret = 1;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#1191: FILE: kernel/sched.c:2288:
+		if ((((p->slice * (100 - sd->per_cpu_gain) / 100) >
[...]
 				resched_task(smt_curr);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1332: FILE: kernel/sched.c:2676:
+	if ((queued = task_queued(p)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1353: FILE: kernel/sched.c:2798:
+	BUG_ON(task_queued(p));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1373: FILE: kernel/sched.c:2874:
+	if ((queued = task_queued(p)))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1526: FILE: kernel/sched.c:4187:
+		memset(rq->bitmap, 0, BITS_TO_LONGS(MAX_PRIO+1)*sizeof(long));
 		                                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1526: FILE: kernel/sched.c:4187:
+		memset(rq->bitmap, 0, BITS_TO_LONGS(MAX_PRIO+1)*sizeof(long));
 		                                               ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1546: FILE: kernel/sysctl.c:648:
+		.maxlen		= sizeof (int),

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1554: FILE: kernel/sysctl.c:656:
+		.maxlen		= sizeof (int),

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000262806.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 15 warnings, 9 checks, 1388 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000262806.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
