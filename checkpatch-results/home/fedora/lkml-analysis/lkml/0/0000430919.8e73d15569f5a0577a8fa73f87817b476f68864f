WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
diff -urpN linux-2.5.37/arch/arm/config.in linux-2.5.37-ltt/arch/arm/config.in

CHECK:SPACING: No space is necessary after a cast
#139: FILE: arch/arm/kernel/process.c:404:
+		TRACE_PROCESS(TRACE_EV_PROCESS_KTHREAD, __ret, (int) fn);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#180: FILE: arch/arm/kernel/traps.c:179:
+asmlinkage void trace_real_syscall_entry(int scno,struct pt_regs * regs)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#180: FILE: arch/arm/kernel/traps.c:179:
+asmlinkage void trace_real_syscall_entry(int scno,struct pt_regs * regs)
                                                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#198: FILE: arch/arm/kernel/traps.c:197:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#199: FILE: arch/arm/kernel/traps.c:198:
+	if (! (user_mode(regs) ))
 	    ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#199: FILE: arch/arm/kernel/traps.c:198:
+	if (! (user_mode(regs) ))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#205: FILE: arch/arm/kernel/traps.c:204:
+			     (void*)&lower_bound,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#206: FILE: arch/arm/kernel/traps.c:205:
+			     (void*)&upper_bound) < 0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_depth == 1'
#209: FILE: arch/arm/kernel/traps.c:208:
+	if ((use_depth == 1) || (use_bounds == 1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_bounds == 1'
#209: FILE: arch/arm/kernel/traps.c:208:
+	if ((use_depth == 1) || (use_bounds == 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lr > start_code'
#216: FILE: arch/arm/kernel/traps.c:215:
+			if ((lr > start_code) && (lr < end_code)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lr < end_code'
#216: FILE: arch/arm/kernel/traps.c:215:
+			if ((lr > start_code) && (lr < end_code)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_depth == 1'
#217: FILE: arch/arm/kernel/traps.c:216:
+				if (((use_depth == 1) && (depth >= seek_depth)) ||
+				    ((use_bounds == 1) && (lr > lower_bound) && (lr < upper_bound))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'depth >= seek_depth'
#217: FILE: arch/arm/kernel/traps.c:216:
+				if (((use_depth == 1) && (depth >= seek_depth)) ||
+				    ((use_bounds == 1) && (lr > lower_bound) && (lr < upper_bound))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_bounds == 1'
#217: FILE: arch/arm/kernel/traps.c:216:
+				if (((use_depth == 1) && (depth >= seek_depth)) ||
+				    ((use_bounds == 1) && (lr > lower_bound) && (lr < upper_bound))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lr > lower_bound'
#217: FILE: arch/arm/kernel/traps.c:216:
+				if (((use_depth == 1) && (depth >= seek_depth)) ||
+				    ((use_bounds == 1) && (lr > lower_bound) && (lr < upper_bound))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lr < upper_bound'
#217: FILE: arch/arm/kernel/traps.c:216:
+				if (((use_depth == 1) && (depth >= seek_depth)) ||
+				    ((use_bounds == 1) && (lr > lower_bound) && (lr < upper_bound))) {

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#218: FILE: arch/arm/kernel/traps.c:217:
+				    ((use_bounds == 1) && (lr > lower_bound) && (lr < upper_bound))) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'prev_fp > start_stack'
#226: FILE: arch/arm/kernel/traps.c:225:
+			if ((__get_user((unsigned long)prev_fp, (fp - 3))) ||
+			    (prev_fp > start_stack) ||
+			    (prev_fp <= fp)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'prev_fp <= fp'
#226: FILE: arch/arm/kernel/traps.c:225:
+			if ((__get_user((unsigned long)prev_fp, (fp - 3))) ||
+			    (prev_fp > start_stack) ||
+			    (prev_fp <= fp)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#241: FILE: arch/arm/kernel/traps.c:240:
+        trace_event(TRACE_EV_SYSCALL_EXIT, NULL);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: arch/arm/kernel/traps.c:240:
+        trace_event(TRACE_EV_SYSCALL_EXIT, NULL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#278: FILE: arch/arm/kernel/traps.c:519:
+       ^ITRACE_TRAP_ENTRY(1, (uint32_t)info.si_addr);^I/* debug */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#278: FILE: arch/arm/kernel/traps.c:519:
+       ^ITRACE_TRAP_ENTRY(1, (uint32_t)info.si_addr);^I/* debug */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: arch/arm/kernel/traps.c:519:
+       ^ITRACE_TRAP_ENTRY(1, (uint32_t)info.si_addr);^I/* debug */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#328: FILE: arch/arm/mm/fault-common.c:268:
+ ^I^Ireturn 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#328: FILE: arch/arm/mm/fault-common.c:268:
+ ^I^Ireturn 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#328: FILE: arch/arm/mm/fault-common.c:268:
+ ^I^Ireturn 0;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#361: FILE: include/asm-arm/trace.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#362: FILE: include/asm-arm/trace.h:2:
+ * linux/include/asm-arm/trace.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000430919.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 9 warnings, 12 checks, 290 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000430919.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
