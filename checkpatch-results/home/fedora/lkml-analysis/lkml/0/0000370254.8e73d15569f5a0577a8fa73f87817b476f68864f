WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#43: 
axboe@apu:/home/axboe $ ls /proc/aam/hda/
                                     ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#53: 
hda: iorate=149, switching to fast operation
^^^

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#55: 
hda: iorate=13, switching to quiet operation
^^^

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#57: 
hda: switching to spin down
^^^

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#58: 
hda: spun up by activity (bash)
^^^

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#63: 
root@apu:/proc/aam/hda # cat status
                   ^^^

WARNING:TYPO_SPELLING: 'experiement' may be misspelled - perhaps 'experiment'?
#67: 
experiement, so.... The code itself is solid, though. Patch is against
^^^^^^^^^^^

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#70: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#71: 
# Project Name: Linux 2.4 for PowerPC

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#72: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#72: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#73: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#74: 
#	           ChangeSet	1.877   -> 1.878  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#75: 
#	drivers/block/Config.in	1.6     -> 1.7    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#76: 
#	drivers/ide/ide-probe.c	1.28    -> 1.29   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#77: 
#	include/linux/blkdev.h	1.24    -> 1.25   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#78: 
#	drivers/ide/ide-disk.c	1.18    -> 1.19   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#79: 
#	drivers/block/ll_rw_blk.c	1.42    -> 1.43   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#80: 
#	Documentation/Configure.help	1.124   -> 1.125  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#81: 
#	drivers/ide/ide-io.c	1.4     -> 1.5    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#82: 
#	drivers/block/Makefile	1.5     -> 1.6    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#83: 
#	               (new)	        -> 1.1     drivers/block/blk-aam.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#84: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#85: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#86: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#87: 
# 03/05/14	axboe@apu.(none)	1.878

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#88: 
# Automatic acoustic management

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#89: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#90: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#92: 
--- a/Documentation/Configure.help	Wed May 14 12:02:39 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:TYPO_SPELLING: 'specificed' may be misspelled - perhaps 'specified'?
#102: FILE: Documentation/Configure.help:568:
+  rises above the specificed level, the drive is switched to fast (or
                   ^^^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#159: FILE: drivers/block/blk-aam.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#160: FILE: drivers/block/blk-aam.c:2:
+ * linux/drivers/block/blk-aam.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#175: FILE: drivers/block/blk-aam.c:17:
+#include <asm/uaccess.h>

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#177: FILE: drivers/block/blk-aam.c:19:
+#define blk_start_sample(p)	do {	\
+	(p)->sample_start = jiffies;	\
+	(p)->sample_ios = 0;		\
+} while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#177: FILE: drivers/block/blk-aam.c:19:
+#define blk_start_sample(p)	do {	\
+	(p)->sample_start = jiffies;	\
+	(p)->sample_ios = 0;		\
+} while (0);

do {} while(0) macros should not have a trailing semicolon.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#192: FILE: drivers/block/blk-aam.c:34:
+			printk("%s: spun up by activity (%s)\n", q->name, current->comm);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#232: FILE: drivers/block/blk-aam.c:74:
+			printk("%s: iorate=%d, switching to fast operation\n", q->name, iorate);

CHECK:SPACING: No space is necessary after a cast
#275: FILE: drivers/block/blk-aam.c:117:
+	request_queue_t *q = (request_queue_t *) data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#295: FILE: drivers/block/blk-aam.c:137:
+	if (p->verbose && p->power_state != BLK_POWER_LOW) {
+		printk("%s: iorate=%d, switching to quiet operation\n", q->name, iorate);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#296: FILE: drivers/block/blk-aam.c:138:
+		printk("%s: iorate=%d, switching to quiet operation\n", q->name, iorate);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#305: FILE: drivers/block/blk-aam.c:147:
+				printk("%s: switching to spin down\n", q->name);

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#328: FILE: drivers/block/blk-aam.c:170:
+	if (jiffies != p->sample_start) {

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#433: FILE: drivers/block/blk-aam.c:275:
+	*val = simple_strtoul(tmp, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#445: FILE: drivers/block/blk-aam.c:287:
+	if ((ret = blk_aam_proc_write(buf, count, &val)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#460: FILE: drivers/block/blk-aam.c:302:
+	if ((ret = blk_aam_proc_write(buf, count, &val)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#474: FILE: drivers/block/blk-aam.c:316:
+	if ((ret = blk_aam_proc_write(buf, count, &p->low_mark)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#487: FILE: drivers/block/blk-aam.c:329:
+	if ((ret = blk_aam_proc_write(buf, count, &p->low_cycle)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#500: FILE: drivers/block/blk-aam.c:342:
+	if ((ret = blk_aam_proc_write(buf, count, &p->high_cycle)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#513: FILE: drivers/block/blk-aam.c:355:
+	if ((ret = blk_aam_proc_write(buf, count, &p->high_mark)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#526: FILE: drivers/block/blk-aam.c:368:
+	if ((ret = blk_aam_proc_write(buf, count, &p->idle_cycle)) < 0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#541: FILE: drivers/block/blk-aam.c:383:
+		printk("%s: must set name first\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#541: FILE: drivers/block/blk-aam.c:383:
+		printk("%s: must set name first\n", __FUNCTION__);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*p)...) over kmalloc(sizeof(struct blk_power)...)
#545: FILE: drivers/block/blk-aam.c:387:
+	p = kmalloc(sizeof(struct blk_power), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: No space is necessary after a cast
#555: FILE: drivers/block/blk-aam.c:397:
+	p->power_timer.data	= (unsigned long) q;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#635: FILE: drivers/block/blk-aam.c:477:
+EXPORT_SYMBOL(blk_set_power_fn);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#719: FILE: drivers/ide/ide-disk.c:1560:
+	switch (p->power_state) {
+		case BLK_POWER_HIGH:
[...]
+		case BLK_POWER_LOW:
[...]
+		case BLK_POWER_IDLE:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: No space is necessary after a cast
#792: FILE: include/linux/blkdev.h:67:
+typedef void (power_fn) (request_queue_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#877: FILE: include/linux/blkdev.h:289:
+extern void blk_queue_set_name(request_queue_t *, const char *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#877: FILE: include/linux/blkdev.h:289:
+extern void blk_queue_set_name(request_queue_t *, const char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#877: FILE: include/linux/blkdev.h:289:
+extern void blk_queue_set_name(request_queue_t *, const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#879: FILE: include/linux/blkdev.h:291:
+extern int blk_set_power_fn(request_queue_t *, power_fn *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#880: FILE: include/linux/blkdev.h:292:
+extern void blk_power_acct(request_queue_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#880: FILE: include/linux/blkdev.h:292:
+extern void blk_power_acct(request_queue_t *);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#886: FILE: include/linux/blkdev.h:298:
+}
+#define blk_power_acct(q)	do { } while (0)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000370254.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 47 warnings, 9 checks, 751 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000370254.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
