WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
>with patches to change the existing uses of smp_mb(), smp_rmb(), smp_wmb(),

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#56: FILE: include/asm-alpha/system.h:145:
+#define memory_barrier() \
 __asm__ __volatile__("mb": : :"memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#60: FILE: include/asm-alpha/system.h:148:
+#define read_barrier() \
 __asm__ __volatile__("mb": : :"memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#64: FILE: include/asm-alpha/system.h:151:
+#define read_barrier_depends() \
+__asm__ __volatile__("mb": : :"memory")

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#65: FILE: include/asm-alpha/system.h:152:
+__asm__ __volatile__("mb": : :"memory")
                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#65: FILE: include/asm-alpha/system.h:152:
+__asm__ __volatile__("mb": : :"memory")
                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#67: FILE: include/asm-alpha/system.h:154:
+#define write_barrier() \
 __asm__ __volatile__("wmb": : :"memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#70: FILE: include/asm-alpha/system.h:157:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#71: FILE: include/asm-alpha/system.h:158:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#72: FILE: include/asm-alpha/system.h:159:
+#define wmb()	write_barrier()

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#96: FILE: include/asm-arm/system.h:39:
+#define memory_barrier() __asm__ __volatile__ ("" : : : "memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#97: FILE: include/asm-arm/system.h:40:
+#define read_barrier() mb()

ERROR:SPACING: space required before the open parenthesis '('
#98: FILE: include/asm-arm/system.h:41:
+#define read_barrier_depends() do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#99: FILE: include/asm-arm/system.h:42:
+#define write_barrier() mb()

WARNING:MEMORY_BARRIER: memory barrier without comment
#102: FILE: include/asm-arm/system.h:45:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#103: FILE: include/asm-arm/system.h:46:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#104: FILE: include/asm-arm/system.h:47:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#120: FILE: include/asm-arm/system.h:82:
+#define smp_read_barrier_depends()		do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#134: FILE: include/asm-cris/system.h:150:
+#define memory_barrier() __asm__ __volatile__ ("" : : : "memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#135: FILE: include/asm-cris/system.h:151:
+#define read_barrier() mb()

ERROR:SPACING: space required before the open parenthesis '('
#136: FILE: include/asm-cris/system.h:152:
+#define read_barrier_depends() do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#137: FILE: include/asm-cris/system.h:153:
+#define write_barrier() mb()

WARNING:MEMORY_BARRIER: memory barrier without comment
#139: FILE: include/asm-cris/system.h:155:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#140: FILE: include/asm-cris/system.h:156:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#141: FILE: include/asm-cris/system.h:157:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#151: FILE: include/asm-cris/system.h:167:
+#define smp_read_barrier_depends()     do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#164: FILE: include/asm-i386/system.h:289:
+#define memory_barrier() \
+		__asm__ __volatile__ ("lock; addl $0,0(%%esp)": : :"memory")

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#165: FILE: include/asm-i386/system.h:290:
+		__asm__ __volatile__ ("lock; addl $0,0(%%esp)": : :"memory")
 		                                              ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#165: FILE: include/asm-i386/system.h:290:
+		__asm__ __volatile__ ("lock; addl $0,0(%%esp)": : :"memory")
 		                                                  ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#166: FILE: include/asm-i386/system.h:291:
+#define read_barrier()	mb()

ERROR:SPACING: space required before the open parenthesis '('
#167: FILE: include/asm-i386/system.h:292:
+#define read_barrier_depends()	do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#171: FILE: include/asm-i386/system.h:295:
+#define write_barrier() \
+		__asm__ __volatile__ ("lock; addl $0,0(%%esp)": : :"memory")

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#172: FILE: include/asm-i386/system.h:296:
+		__asm__ __volatile__ ("lock; addl $0,0(%%esp)": : :"memory")
 		                                              ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#172: FILE: include/asm-i386/system.h:296:
+		__asm__ __volatile__ ("lock; addl $0,0(%%esp)": : :"memory")
 		                                                  ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#175: FILE: include/asm-i386/system.h:298:
+#define write_barrier() \
+		__asm__ __volatile__ ("": : :"memory")

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#176: FILE: include/asm-i386/system.h:299:
+		__asm__ __volatile__ ("": : :"memory")
 		                        ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#176: FILE: include/asm-i386/system.h:299:
+		__asm__ __volatile__ ("": : :"memory")
 		                            ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#179: FILE: include/asm-i386/system.h:302:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#180: FILE: include/asm-i386/system.h:303:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#181: FILE: include/asm-i386/system.h:304:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#191: FILE: include/asm-i386/system.h:314:
+#define smp_read_barrier_depends()	do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#229: FILE: include/asm-ia64/system.h:102:
+#define memory_barrier()	__asm__ __volatile__ ("mf" ::: "memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#230: FILE: include/asm-ia64/system.h:103:
+#define read_barrier()		mb()

ERROR:SPACING: space required before the open parenthesis '('
#231: FILE: include/asm-ia64/system.h:104:
+#define read_barrier_depends()	do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#232: FILE: include/asm-ia64/system.h:105:
+#define write_barrier()		mb()

WARNING:MEMORY_BARRIER: memory barrier without comment
#234: FILE: include/asm-ia64/system.h:107:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#235: FILE: include/asm-ia64/system.h:108:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#236: FILE: include/asm-ia64/system.h:109:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#246: FILE: include/asm-ia64/system.h:119:
+# define smp_read_barrier_depends()	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#262: FILE: include/asm-m68k/system.h:83:
+#define read_barrier_depends()	do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#267: FILE: include/asm-m68k/system.h:88:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#268: FILE: include/asm-m68k/system.h:89:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#269: FILE: include/asm-m68k/system.h:90:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#273: FILE: include/asm-m68k/system.h:94:
+#define smp_read_barrier_depends()	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#287: FILE: include/asm-mips/system.h:152:
+#define read_barrier()		do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#288: FILE: include/asm-mips/system.h:153:
+#define read_barrier_depends()	do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#295: FILE: include/asm-mips/system.h:159:
+#define memory_barrier()				\
 __asm__ __volatile__(					\
 	"# prevent instructions being moved around\n\t"	\
 	".set\tnoreorder\n\t"				\

WARNING:MEMORY_BARRIER: memory barrier without comment
#305: FILE: include/asm-mips/system.h:169:
+#define read_barrier() mb()

ERROR:SPACING: space required before the open parenthesis '('
#306: FILE: include/asm-mips/system.h:170:
+#define read_barrier_depends()	do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#307: FILE: include/asm-mips/system.h:171:
+#define write_barrier() mb()

WARNING:MEMORY_BARRIER: memory barrier without comment
#311: FILE: include/asm-mips/system.h:175:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#312: FILE: include/asm-mips/system.h:176:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#313: FILE: include/asm-mips/system.h:177:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#323: FILE: include/asm-mips/system.h:187:
+#define smp_read_barrier_depends()	do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#335: FILE: include/asm-mips64/system.h:140:
+#define memory_barrier()				\
 __asm__ __volatile__(					\
 	"# prevent instructions being moved around\n\t"	\
 	".set\tnoreorder\n\t"				\

WARNING:MEMORY_BARRIER: memory barrier without comment
#345: FILE: include/asm-mips64/system.h:149:
+#define read_barrier() mb()

ERROR:SPACING: space required before the open parenthesis '('
#346: FILE: include/asm-mips64/system.h:150:
+#define read_barrier_depends()	do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#347: FILE: include/asm-mips64/system.h:151:
+#define write_barrier() mb()

WARNING:MEMORY_BARRIER: memory barrier without comment
#349: FILE: include/asm-mips64/system.h:153:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#350: FILE: include/asm-mips64/system.h:154:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#351: FILE: include/asm-mips64/system.h:155:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#361: FILE: include/asm-mips64/system.h:165:
+#define smp_read_barrier_depends()	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#372: FILE: include/asm-parisc/system.h:53:
+#define smp_read_barrier_depends()	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#380: FILE: include/asm-parisc/system.h:62:
+#define smp_read_barrier_depends()	do { } while(0)

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#390: FILE: include/asm-parisc/system.h:125:
+#define memory_barrier()  __asm__ __volatile__ ("sync" : : :"memory")
                                                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#390: FILE: include/asm-parisc/system.h:125:
+#define memory_barrier()  __asm__ __volatile__ ("sync" : : :"memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#391: FILE: include/asm-parisc/system.h:126:
+#define read_barrier() mb()

WARNING:MEMORY_BARRIER: memory barrier without comment
#392: FILE: include/asm-parisc/system.h:127:
+#define write_barrier() mb()

ERROR:SPACING: space required before the open parenthesis '('
#393: FILE: include/asm-parisc/system.h:128:
+#define read_barrier_depends()	do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#395: FILE: include/asm-parisc/system.h:130:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#396: FILE: include/asm-parisc/system.h:131:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#397: FILE: include/asm-parisc/system.h:132:
+#define wmb()	write_barrier()

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#424: FILE: include/asm-ppc/system.h:35:
+#define memory_barrier()  __asm__ __volatile__ ("sync" : : : "memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#425: FILE: include/asm-ppc/system.h:36:
+#define read_barrier()  __asm__ __volatile__ ("sync" : : : "memory")

ERROR:SPACING: space required before the open parenthesis '('
#426: FILE: include/asm-ppc/system.h:37:
+#define read_barrier_depends()  do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#427: FILE: include/asm-ppc/system.h:38:
+#define write_barrier()  __asm__ __volatile__ ("eieio" : : : "memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#429: FILE: include/asm-ppc/system.h:40:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#430: FILE: include/asm-ppc/system.h:41:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#431: FILE: include/asm-ppc/system.h:42:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#444: FILE: include/asm-ppc/system.h:55:
+#define smp_read_barrier_depends()	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#460: FILE: include/asm-s390/system.h:120:
+#define read_barrier_depends() do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#469: FILE: include/asm-s390/system.h:129:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#470: FILE: include/asm-s390/system.h:130:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#471: FILE: include/asm-s390/system.h:131:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#487: FILE: include/asm-s390x/system.h:133:
+#define read_barrier_depends()	do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#499: FILE: include/asm-s390x/system.h:145:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#500: FILE: include/asm-s390x/system.h:146:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#501: FILE: include/asm-s390x/system.h:147:
+#define wmb()	write_barrier()

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#515: FILE: include/asm-sh/system.h:89:
+#define memory_barrier()	__asm__ __volatile__ ("": : :"memory")
                         	                        ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#515: FILE: include/asm-sh/system.h:89:
+#define memory_barrier()	__asm__ __volatile__ ("": : :"memory")
                         	                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#515: FILE: include/asm-sh/system.h:89:
+#define memory_barrier()	__asm__ __volatile__ ("": : :"memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#516: FILE: include/asm-sh/system.h:90:
+#define read_barrier()		mb()

ERROR:SPACING: space required before the open parenthesis '('
#517: FILE: include/asm-sh/system.h:91:
+#define read_barrier_depends()	do { } while(0)

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#518: FILE: include/asm-sh/system.h:92:
+#define write_barrier()		__asm__ __volatile__ ("": : :"memory")
                        		                        ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#518: FILE: include/asm-sh/system.h:92:
+#define write_barrier()		__asm__ __volatile__ ("": : :"memory")
                        		                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#518: FILE: include/asm-sh/system.h:92:
+#define write_barrier()		__asm__ __volatile__ ("": : :"memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#520: FILE: include/asm-sh/system.h:94:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#521: FILE: include/asm-sh/system.h:95:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#522: FILE: include/asm-sh/system.h:96:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#532: FILE: include/asm-sh/system.h:106:
+#define smp_read_barrier_depends()	do { } while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#546: FILE: include/asm-sparc/system.h:278:
+#define memory_barrier()	__asm__ __volatile__ ("" : : : "memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#547: FILE: include/asm-sparc/system.h:279:
+#define read_barrier()		mb()

ERROR:SPACING: space required before the open parenthesis '('
#548: FILE: include/asm-sparc/system.h:280:
+#define read_barrier_depends()	do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#549: FILE: include/asm-sparc/system.h:281:
+#define write_barrier()		mb()

ERROR:SPACING: space required before the open parenthesis '('
#554: FILE: include/asm-sparc/system.h:286:
+#define smp_read_barrier_depends()	do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#557: FILE: include/asm-sparc/system.h:289:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#558: FILE: include/asm-sparc/system.h:290:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#559: FILE: include/asm-sparc/system.h:291:
+#define wmb()	write_barrier()

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#571: FILE: include/asm-sparc64/system.h:99:
+#define memory_barrier()		\
 	membar("#LoadLoad | #LoadStore | #StoreStore | #StoreLoad");

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: space required before the open parenthesis '('
#576: FILE: include/asm-sparc64/system.h:102:
+#define read_barrier_depends()		do { } while(0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#583: FILE: include/asm-sparc64/system.h:109:
+#define mb()	memory_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#584: FILE: include/asm-sparc64/system.h:110:
+#define rmb()	read_barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#585: FILE: include/asm-sparc64/system.h:111:
+#define wmb()	write_barrier()

ERROR:SPACING: space required before the open parenthesis '('
#595: FILE: include/asm-sparc64/system.h:121:
+#define smp_read_barrier_depends()	do { } while(0)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000501348.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 61 errors, 63 warnings, 0 checks, 485 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000501348.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
