WARNING:TYPO_SPELLING: 'Servies' may be misspelled - perhaps 'Services'?
#35: 
This starts a change of "Driver Servies" to become a "interface" to
                                ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
due to a driver model bug (deadlock) Patrick Mochel already knows about. Due

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#63: FILE: drivers/pcmcia/cs.c:2443:
+    bus_register(&pcmcia_bus_type);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#71: FILE: drivers/pcmcia/cs.c:2466:
+    bus_unregister(&pcmcia_bus_type);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dev_link_t *' should also have an identifier name
#92: FILE: drivers/pcmcia/ds.c:83:
+	void		(*detach)(dev_link_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:LINE_SPACING: Missing a blank line after declarations
#133: FILE: drivers/pcmcia/ds.c:153:
+	struct cmp_data *cmp = data;
+	if (strncmp((char *)cmp->dev_info, (char *)drv->name,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#141: FILE: drivers/pcmcia/ds.c:161:
+static struct pcmcia_driver * get_pcmcia_driver (dev_info_t *dev_info)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#141: FILE: drivers/pcmcia/ds.c:161:
+static struct pcmcia_driver * get_pcmcia_driver (dev_info_t *dev_info)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#145: FILE: drivers/pcmcia/ds.c:165:
+	struct cmp_data cmp;
+	cmp.dev_info = dev_info;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#153: FILE: drivers/pcmcia/ds.c:173:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#213: FILE: drivers/pcmcia/ds.c:203:
+^I^I^I^Iif (b->driver == driver) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: drivers/pcmcia/ds.c:206:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#220: FILE: drivers/pcmcia/ds.c:210:
+
+

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'register_pccard_driver', this function's name, in a string
#229: FILE: drivers/pcmcia/ds.c:219:
+	DEBUG(0, "ds: register_pccard_driver('%s')\n", (char *)dev_info);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*driver)...) over kmalloc(sizeof(struct pcmcia_driver)...)
#232: FILE: drivers/pcmcia/ds.c:222:
+		driver = kmalloc(sizeof(struct pcmcia_driver), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#233: FILE: drivers/pcmcia/ds.c:223:
+^I^Iif (!driver) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#242: FILE: drivers/pcmcia/ds.c:232:
+^Iif (driver->use_count == 0) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: drivers/pcmcia/ds.c:238:
+^I^I^Iif (b->driver != driver) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!b->instance"
#252: FILE: drivers/pcmcia/ds.c:241:
+			if (b->instance == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#253: FILE: drivers/pcmcia/ds.c:242:
+				printk(KERN_NOTICE "ds: unable to create instance "

WARNING:SPLIT_STRING: quoted string split across lines
#254: FILE: drivers/pcmcia/ds.c:243:
+				printk(KERN_NOTICE "ds: unable to create instance "
+				       "of '%s'!\n", driver->drv.name);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#309: FILE: drivers/pcmcia/ds.c:275:
+	d = (void *) p;

CHECK:SPACING: No space is necessary after a cast
#321: FILE: drivers/pcmcia/ds.c:283:
+    bus_for_each_drv(&pcmcia_bus_type, NULL, (void *) &p, proc_read_drivers_callback);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#321: FILE: drivers/pcmcia/ds.c:283:
+    bus_for_each_drv(&pcmcia_bus_type, NULL, (void *) &p, proc_read_drivers_callback);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: drivers/pcmcia/ds.c:428:
+    struct pcmcia_driver *driver;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#342: FILE: drivers/pcmcia/ds.c:436:
+    driver = get_pcmcia_driver(&bind_info->dev_info);$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#343: FILE: drivers/pcmcia/ds.c:437:
     if (driver == NULL) {
+	    driver = kmalloc(sizeof(struct pcmcia_driver), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*driver)...) over kmalloc(sizeof(struct pcmcia_driver)...)
#351: FILE: drivers/pcmcia/ds.c:438:
+	    driver = kmalloc(sizeof(struct pcmcia_driver), GFP_KERNEL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#352: FILE: drivers/pcmcia/ds.c:439:
+^I    if (!driver) $

WARNING:TABSTOP: Statements should start on a tabstop
#352: FILE: drivers/pcmcia/ds.c:439:
+	    if (!driver) 

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (12, 20)
#352: FILE: drivers/pcmcia/ds.c:439:
+	    if (!driver) 
+		    return -ENOMEM;

WARNING:TABSTOP: Statements should start on a tabstop
#353: FILE: drivers/pcmcia/ds.c:440:
+		    return -ENOMEM;

CHECK:SPACING: No space is necessary after a cast
#366: FILE: drivers/pcmcia/ds.c:458:
+    bind_req.dev_info = (dev_info_t *) driver->drv.name;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#366: FILE: drivers/pcmcia/ds.c:458:
+    bind_req.dev_info = (dev_info_t *) driver->drv.name;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#375: FILE: drivers/pcmcia/ds.c:539:
+	if ((strcmp((char *)b->driver->drv.name,
[...]
 	    break;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'b->function == bind_info->function'
#375: FILE: drivers/pcmcia/ds.c:539:
+	if ((strcmp((char *)b->driver->drv.name,
 		    (char *)bind_info->dev_info) == 0) &&
 	    (b->function == bind_info->function))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#384: FILE: drivers/pcmcia/ds.c:573:
+	if ((strcmp((char *)(*b)->driver->drv.name,
[...]
 	    break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#603: FILE: drivers/pcmcia/ds.c:353:
+    struct ds_socket_info *s = socket_table[sn]->ds_info;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#604: FILE: drivers/pcmcia/ds.c:354:
+    struct ds_socket_info *s = socket_table[sn]->ds_info;
+    if (!s)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#604: FILE: drivers/pcmcia/ds.c:354:
+    if (!s)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#604: FILE: drivers/pcmcia/ds.c:354:
+    if (!s)
+	    return;

WARNING:TABSTOP: Statements should start on a tabstop
#605: FILE: drivers/pcmcia/ds.c:355:
+	    return;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#640: FILE: drivers/pcmcia/ds.c:383:
+	if (!(ds->state & SOCKET_REMOVAL_PENDING)) {
+	    ds->state |= SOCKET_REMOVAL_PENDING;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#643: FILE: drivers/pcmcia/ds.c:386:
+	    ds->removal.expires = jiffies + HZ/10;
 	                                      ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#671: FILE: drivers/pcmcia/ds.c:448:
+    struct ds_socket_info *s = socket_table[i]->ds_info;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#674: FILE: drivers/pcmcia/ds.c:451:
+    if (!s)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#674: FILE: drivers/pcmcia/ds.c:451:
+    if (!s)
+	    return -ENODEV;

WARNING:TABSTOP: Statements should start on a tabstop
#675: FILE: drivers/pcmcia/ds.c:452:
+	    return -ENODEV;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#685: FILE: drivers/pcmcia/ds.c:517:
+    struct ds_socket_info *s = socket_table[i]->ds_info;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#689: FILE: drivers/pcmcia/ds.c:521:
+    if (!s)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#689: FILE: drivers/pcmcia/ds.c:521:
+    if (!s)
+	    return -ENODEV;

WARNING:TABSTOP: Statements should start on a tabstop
#690: FILE: drivers/pcmcia/ds.c:522:
+	    return -ENODEV;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#700: FILE: drivers/pcmcia/ds.c:590:
+    struct ds_socket_info *s = socket_table[i]->ds_info;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#709: FILE: drivers/pcmcia/ds.c:624:
+    struct ds_socket_info *s;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#716: FILE: drivers/pcmcia/ds.c:630:
+    s = socket_table[i]->ds_info;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#717: FILE: drivers/pcmcia/ds.c:631:
+    if (!s)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#717: FILE: drivers/pcmcia/ds.c:631:
+    if (!s)
+	    return -ENODEV;

WARNING:TABSTOP: Statements should start on a tabstop
#718: FILE: drivers/pcmcia/ds.c:632:
+	    return -ENODEV;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#727: FILE: drivers/pcmcia/ds.c:658:
+    struct ds_socket_info *s;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#734: FILE: drivers/pcmcia/ds.c:664:
+    s = socket_table[i]->ds_info;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#735: FILE: drivers/pcmcia/ds.c:665:
+    if (!s)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#735: FILE: drivers/pcmcia/ds.c:665:
+    if (!s)
+	    return -ENODEV;

WARNING:TABSTOP: Statements should start on a tabstop
#736: FILE: drivers/pcmcia/ds.c:666:
+	    return -ENODEV;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#745: FILE: drivers/pcmcia/ds.c:692:
+    struct ds_socket_info *s;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#754: FILE: drivers/pcmcia/ds.c:701:
+    s = socket_table[i]->ds_info;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#755: FILE: drivers/pcmcia/ds.c:702:
+    if (!s)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#755: FILE: drivers/pcmcia/ds.c:702:
+    if (!s)
+	    return -ENODEV;

WARNING:TABSTOP: Statements should start on a tabstop
#756: FILE: drivers/pcmcia/ds.c:703:
+	    return -ENODEV;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#765: FILE: drivers/pcmcia/ds.c:723:
+    struct ds_socket_info *s;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#774: FILE: drivers/pcmcia/ds.c:734:
+    s = socket_table[i]->ds_info;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#775: FILE: drivers/pcmcia/ds.c:735:
+    if (!s)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#775: FILE: drivers/pcmcia/ds.c:735:
+    if (!s)
+	    return -ENODEV;

WARNING:TABSTOP: Statements should start on a tabstop
#776: FILE: drivers/pcmcia/ds.c:736:
+	    return -ENODEV;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#785: FILE: drivers/pcmcia/ds.c:758:
+    struct ds_socket_info *s;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#793: FILE: drivers/pcmcia/ds.c:765:
+    s = socket_table[i]->ds_info;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#794: FILE: drivers/pcmcia/ds.c:766:
+    if (!s)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#794: FILE: drivers/pcmcia/ds.c:766:
+    if (!s)
+	    return -ENODEV;

WARNING:TABSTOP: Statements should start on a tabstop
#795: FILE: drivers/pcmcia/ds.c:767:
+	    return -ENODEV;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#804: FILE: drivers/pcmcia/ds.c:783:
+    struct ds_socket_info *s;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#813: FILE: drivers/pcmcia/ds.c:792:
+    s = socket_table[i]->ds_info;$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ds)...) over kmalloc(sizeof(struct ds_socket_info)...)
#842: FILE: drivers/pcmcia/ds.c:962:
+	ds = kmalloc(sizeof(struct ds_socket_info), GFP_KERNEL);

CHECK:CAMELCASE: Avoid CamelCase: <Socket>
#893: FILE: drivers/pcmcia/ds.c:975:
+	bind.Socket = socket->socket_table_entry;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#895: FILE: drivers/pcmcia/ds.c:977:
+	client_reg.dev_info = bind.dev_info = &dev_info;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:CAMELCASE: Avoid CamelCase: <BindDevice>
#901: FILE: drivers/pcmcia/ds.c:981:
+		cs_error(NULL, BindDevice, ret);

CHECK:CAMELCASE: Avoid CamelCase: <Attributes>
#908: FILE: drivers/pcmcia/ds.c:986:
+	client_reg.Attributes = INFO_MASTER_CLIENT;

CHECK:CAMELCASE: Avoid CamelCase: <EventMask>
#909: FILE: drivers/pcmcia/ds.c:987:
+	client_reg.EventMask =

CHECK:CAMELCASE: Avoid CamelCase: <Version>
#915: FILE: drivers/pcmcia/ds.c:993:
+	client_reg.Version = 0x0210;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#919: FILE: drivers/pcmcia/ds.c:997:
+	ret = pcmcia_register_client(&ds->handle,
 			   &client_reg);

CHECK:CAMELCASE: Avoid CamelCase: <RegisterClient>
#923: FILE: drivers/pcmcia/ds.c:999:
+		cs_error(NULL, RegisterClient, ret);

WARNING:LINE_SPACING: Missing a blank line after declarations
#934: FILE: drivers/pcmcia/ds.c:1009:
+	struct ds_socket_info *ds = socket->ds_info;
+	if (ds) {

CHECK:SPACING: No space is necessary after a cast
#952: FILE: drivers/pcmcia/ds.c:1027:
+	s = (socket_info_t *) cls_d->s_info;

ERROR:CODE_INDENT: code indent should use tabs where possible
#956: FILE: drivers/pcmcia/ds.c:1031:
+        for (i = 0; i < cls_d->nsock; i++) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#956: FILE: drivers/pcmcia/ds.c:1031:
+        for (i = 0; i < cls_d->nsock; i++) {$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dev->kobj
#963: FILE: drivers/pcmcia/ds.c:1038:
+	cls_d->ds_intf.kobj.parent = &(dev->kobj);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ds_interface.kset
#964: FILE: drivers/pcmcia/ds.c:1039:
+	cls_d->ds_intf.kobj.kset = &(ds_interface.kset);

ERROR:CODE_INDENT: code indent should use tabs where possible
#966: FILE: drivers/pcmcia/ds.c:1041:
+        /* add interface */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#967: FILE: drivers/pcmcia/ds.c:1042:
+        /* currently commented out due to deadlock */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#968: FILE: drivers/pcmcia/ds.c:1043:
+        //ret = interface_add_data(&(cls_d->ds_intf));$

CHECK:SPACING: No space is necessary after a cast
#970: FILE: drivers/pcmcia/ds.c:1045:
+		s = (socket_info_t *) cls_d->s_info;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#974: FILE: drivers/pcmcia/ds.c:1049:
+^I^I}^I^I$

CHECK:SPACING: No space is necessary after a cast
#988: FILE: drivers/pcmcia/ds.c:1063:
+	s = (socket_info_t *) cls_d->s_info;

ERROR:CODE_INDENT: code indent should use tabs where possible
#992: FILE: drivers/pcmcia/ds.c:1067:
+        for (i = 0; i < cls_d->nsock; i++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#992: FILE: drivers/pcmcia/ds.c:1067:
+        for (i = 0; i < cls_d->nsock; i++) {$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1000: FILE: drivers/pcmcia/ds.c:1075:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1002: FILE: drivers/pcmcia/ds.c:1077:
+        .name = "Driver Services",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1002: FILE: drivers/pcmcia/ds.c:1077:
+        .name = "Driver Services",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1003: FILE: drivers/pcmcia/ds.c:1078:
+        .devclass = &pcmcia_socket_class,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1003: FILE: drivers/pcmcia/ds.c:1078:
+        .devclass = &pcmcia_socket_class,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1004: FILE: drivers/pcmcia/ds.c:1079:
+        .add_device = &ds_pcmcia_s_dev_add,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1004: FILE: drivers/pcmcia/ds.c:1079:
+        .add_device = &ds_pcmcia_s_dev_add,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1005: FILE: drivers/pcmcia/ds.c:1080:
+        .remove_device = &ds_pcmcia_s_dev_remove,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1005: FILE: drivers/pcmcia/ds.c:1080:
+        .remove_device = &ds_pcmcia_s_dev_remove,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1007: FILE: drivers/pcmcia/ds.c:1082:
+        .devnum = 0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1007: FILE: drivers/pcmcia/ds.c:1082:
+        .devnum = 0,$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1026: FILE: drivers/pcmcia/ds.c:1097:
+	schedule_timeout(HZ/4);
 	                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1027: FILE: drivers/pcmcia/ds.c:1098:
+^I$

CHECK:CAMELCASE: Avoid CamelCase: <Revision>
#1029: FILE: drivers/pcmcia/ds.c:1100:
+	if (serv.Revision != CS_RELEASE_CODE) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1030: FILE: drivers/pcmcia/ds.c:1101:
+		printk(KERN_NOTICE "ds: Card Services release does not match!\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1034: FILE: drivers/pcmcia/ds.c:1105:
+        interface_register(&ds_interface);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1034: FILE: drivers/pcmcia/ds.c:1105:
+        interface_register(&ds_interface);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1039: FILE: drivers/pcmcia/ds.c:1110:
+		printk(KERN_NOTICE "unable to find a free device # for "

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1051: FILE: drivers/pcmcia/ds.c:1117:
+		create_proc_read_entry("drivers",0,proc_pccard,proc_read_drivers,NULL);
 		                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1051: FILE: drivers/pcmcia/ds.c:1117:
+		create_proc_read_entry("drivers",0,proc_pccard,proc_read_drivers,NULL);
 		                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1051: FILE: drivers/pcmcia/ds.c:1117:
+		create_proc_read_entry("drivers",0,proc_pccard,proc_read_drivers,NULL);
 		                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1051: FILE: drivers/pcmcia/ds.c:1117:
+		create_proc_read_entry("drivers",0,proc_pccard,proc_read_drivers,NULL);
 		                                                                ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1080: FILE: drivers/pcmcia/ds.c:1133:
+        interface_unregister(&ds_interface);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1080: FILE: drivers/pcmcia/ds.c:1133:
+        interface_unregister(&ds_interface);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000390866.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 75 warnings, 27 checks, 981 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000390866.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
