WARNING:SPACING: space prohibited between function name and open parenthesis '('
#151: FILE: drivers/char/rio/rio_linux.c:197:
+static void my_hd (void *addr, int len);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#178: FILE: drivers/char/rio/rio_linux.c:217:
+static int rio_probe_addrs[]= {0xc0000, 0xd0000, 0xe0000};
                             ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#196: FILE: drivers/char/rio/rio_linux.c:296:
+static void my_hd (void *ad, int len)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#205: FILE: drivers/char/rio/rio_linux.c:381:
+static void rio_reset_interrupt (struct Host *HostP)

CHECK:CAMELCASE: Avoid CamelCase: <Host>
#205: FILE: drivers/char/rio/rio_linux.c:381:
+static void rio_reset_interrupt (struct Host *HostP)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <HostP>
#205: FILE: drivers/char/rio/rio_linux.c:381:
+static void rio_reset_interrupt (struct Host *HostP)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#214: FILE: drivers/char/rio/rio_linux.c:818:
+static struct vpd_prom *get_VPD_PROM (struct Host *hp)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#223: FILE: drivers/char/rio/rio_linux.c:1039:
+static void fix_rio_pci (struct pci_dev *pdev)

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#233: FILE: drivers/char/rio/rioboot.c:83:
+static int RIOBootComplete( struct rio_info *p, struct Host *HostP, uint Rup, struct PktCmd *PktCmdP );

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space prohibited after that open parenthesis '('
#233: FILE: drivers/char/rio/rioboot.c:83:
+static int RIOBootComplete( struct rio_info *p, struct Host *HostP, uint Rup, struct PktCmd *PktCmdP );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#233: FILE: drivers/char/rio/rioboot.c:83:
+static int RIOBootComplete( struct rio_info *p, struct Host *HostP, uint Rup, struct PktCmd *PktCmdP );

CHECK:CAMELCASE: Avoid CamelCase: <RIOBootComplete>
#233: FILE: drivers/char/rio/rioboot.c:83:
+static int RIOBootComplete( struct rio_info *p, struct Host *HostP, uint Rup, struct PktCmd *PktCmdP );

CHECK:CAMELCASE: Avoid CamelCase: <Rup>
#233: FILE: drivers/char/rio/rioboot.c:83:
+static int RIOBootComplete( struct rio_info *p, struct Host *HostP, uint Rup, struct PktCmd *PktCmdP );

CHECK:CAMELCASE: Avoid CamelCase: <PktCmd>
#233: FILE: drivers/char/rio/rioboot.c:83:
+static int RIOBootComplete( struct rio_info *p, struct Host *HostP, uint Rup, struct PktCmd *PktCmdP );

CHECK:CAMELCASE: Avoid CamelCase: <PktCmdP>
#233: FILE: drivers/char/rio/rioboot.c:83:
+static int RIOBootComplete( struct rio_info *p, struct Host *HostP, uint Rup, struct PktCmd *PktCmdP );

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#243: FILE: drivers/char/rio/rioboot.c:807:
+static int RIOBootComplete( struct rio_info *p, struct Host *HostP, uint Rup, struct PktCmd *PktCmdP )

ERROR:SPACING: space prohibited after that open parenthesis '('
#243: FILE: drivers/char/rio/rioboot.c:807:
+static int RIOBootComplete( struct rio_info *p, struct Host *HostP, uint Rup, struct PktCmd *PktCmdP )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#243: FILE: drivers/char/rio/rioboot.c:807:
+static int RIOBootComplete( struct rio_info *p, struct Host *HostP, uint Rup, struct PktCmd *PktCmdP )

CHECK:CAMELCASE: Avoid CamelCase: <MapP>
#336: FILE: drivers/char/rio/riotable.c:280:
+					if (strcmp(MapP->Name,

CHECK:CAMELCASE: Avoid CamelCase: <Name>
#336: FILE: drivers/char/rio/riotable.c:280:
+					if (strcmp(MapP->Name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#337: FILE: drivers/char/rio/riotable.c:281:
+					if (strcmp(MapP->Name,
 							p->RIOConnectTable[SubEnt].Name)==0 && !(MapP->Flags & RTA16_SECOND_SLOT)) { /* (9) */

CHECK:CAMELCASE: Avoid CamelCase: <RIOHosts>
#345: FILE: drivers/char/rio/riotable.c:409:
+				if (strcmp(p->RIOHosts[Host].Name, p->RIOHosts[Host2].Name)

CHECK:CAMELCASE: Avoid CamelCase: <Host2>
#345: FILE: drivers/char/rio/riotable.c:409:
+				if (strcmp(p->RIOHosts[Host].Name, p->RIOHosts[Host2].Name)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#384: FILE: drivers/char/rio/riotty.c:101:
+#if 0

CHECK:CAMELCASE: Avoid CamelCase: <RIOCookMode>
#385: FILE: drivers/char/rio/riotty.c:102:
+static int RIOCookMode(struct ttystatics *);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#395: FILE: drivers/char/rio/riotty.c:733:
+#if 0

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#415: FILE: drivers/char/rio/riotty.c:1019:
+			PortP->Xprint.XpLen = strlen(PortP->Xprint.XpOn)+
 			                                                ^

CHECK:CAMELCASE: Avoid CamelCase: <PortP>
#415: FILE: drivers/char/rio/riotty.c:1019:
+			PortP->Xprint.XpLen = strlen(PortP->Xprint.XpOn)+

CHECK:CAMELCASE: Avoid CamelCase: <Xprint>
#415: FILE: drivers/char/rio/riotty.c:1019:
+			PortP->Xprint.XpLen = strlen(PortP->Xprint.XpOn)+

CHECK:CAMELCASE: Avoid CamelCase: <XpLen>
#415: FILE: drivers/char/rio/riotty.c:1019:
+			PortP->Xprint.XpLen = strlen(PortP->Xprint.XpOn)+

CHECK:CAMELCASE: Avoid CamelCase: <XpOn>
#415: FILE: drivers/char/rio/riotty.c:1019:
+			PortP->Xprint.XpLen = strlen(PortP->Xprint.XpOn)+

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#416: FILE: drivers/char/rio/riotty.c:1020:
+												strlen(PortP->Xprint.XpOff);

CHECK:CAMELCASE: Avoid CamelCase: <XpOff>
#416: FILE: drivers/char/rio/riotty.c:1020:
+												strlen(PortP->Xprint.XpOff);

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#426: FILE: drivers/char/rio/riotty.c:1034:
+			PortP->Xprint.XpLen = strlen(PortP->Xprint.XpOn)+
 			                                                ^

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#427: FILE: drivers/char/rio/riotty.c:1035:
+										strlen(PortP->Xprint.XpOff);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#447: FILE: drivers/char/rio/rioctrl.c:143:
+static int copyout (caddr_t dp, int arg, int siz)

CHECK:CAMELCASE: Avoid CamelCase: <RIOPCIinit>
#495: FILE: drivers/char/rio/rioinit.c:87:
+int RIOPCIinit(struct rio_info *p, int Mode);

CHECK:CAMELCASE: Avoid CamelCase: <Mode>
#495: FILE: drivers/char/rio/rioinit.c:87:
+int RIOPCIinit(struct rio_info *p, int Mode);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#495: FILE: drivers/char/rio/rioinit.c:87:
+int RIOPCIinit(struct rio_info *p, int Mode);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#497: FILE: drivers/char/rio/rioinit.c:89:
+#if 0

CHECK:CAMELCASE: Avoid CamelCase: <RIOAllocateInterrupts>
#498: FILE: drivers/char/rio/rioinit.c:90:
+static void RIOAllocateInterrupts(struct rio_info *);

CHECK:CAMELCASE: Avoid CamelCase: <RIOReport>
#499: FILE: drivers/char/rio/rioinit.c:91:
+static int RIOReport(struct rio_info *);

CHECK:CAMELCASE: Avoid CamelCase: <RIOStopInterrupts>
#500: FILE: drivers/char/rio/rioinit.c:92:
+static void RIOStopInterrupts(struct rio_info *, int, int);

CHECK:CAMELCASE: Avoid CamelCase: <RIOScrub>
#503: FILE: drivers/char/rio/rioinit.c:95:
+static int RIOScrub(int, BYTE *, int);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#521: FILE: drivers/char/rio/rioinit.c:1271:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#548: FILE: drivers/char/rio/rioinit.c:1485:
+#if 0

CHECK:CAMELCASE: Avoid CamelCase: <RIOReceive>
#602: FILE: drivers/char/rio/riointr.c:87:
+static void RIOReceive(struct rio_info *, struct Port *);

CHECK:CAMELCASE: Avoid CamelCase: <Port>
#602: FILE: drivers/char/rio/riointr.c:87:
+static void RIOReceive(struct rio_info *, struct Port *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#680: FILE: drivers/char/rio/riointr.c:90:
+static char *firstchars (char *p, int nch)

CHECK:CAMELCASE: Avoid CamelCase: <RIOCheckIsolated>
#793: FILE: drivers/char/rio/rioroute.c:86:
+static int RIOCheckIsolated(struct rio_info *, struct Host *, uint);

CHECK:CAMELCASE: Avoid CamelCase: <RIOIsolate>
#794: FILE: drivers/char/rio/rioroute.c:87:
+static int RIOIsolate(struct rio_info *, struct Host *, uint);

CHECK:CAMELCASE: Avoid CamelCase: <RIOCheck>
#795: FILE: drivers/char/rio/rioroute.c:88:
+static int RIOCheck(struct Host *, uint);

CHECK:CAMELCASE: Avoid CamelCase: <RIOConCon>
#796: FILE: drivers/char/rio/rioroute.c:89:
+static void RIOConCon(struct rio_info *, struct Host *, uint, uint, uint, uint, int);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#798: FILE: drivers/char/rio/rioroute.c:91:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000233185.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 17 warnings, 32 checks, 737 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000233185.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
