WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rio_hw_add_outb_message', this function's name, in a string
#49: FILE: arch/ppc/syslib/ppc85xx_rio.c:306:
+	    ("RIO: rio_hw_add_outb_message(): destid %4.4x mbox %d buffer %8.8x len %8.8x\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#94: FILE: arch/ppc/syslib/ppc85xx_rio.c:413:
+		if (!

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'msg_tx_ring.virt_buffer[j]'
#105: FILE: arch/ppc/syslib/ppc85xx_rio.c:424:
+							  msg_tx_ring.
+							  virt_buffer[j],

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'msg_tx_ring.phys_buffer[j]'
#107: FILE: arch/ppc/syslib/ppc85xx_rio.c:426:
+							  msg_tx_ring.
+							  phys_buffer[j]);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#117: FILE: arch/ppc/syslib/ppc85xx_rio.c:432:
+	if (!(msg_tx_ring.virt = dma_alloc_coherent(NULL,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#134: FILE: arch/ppc/syslib/ppc85xx_rio.c:454:
+	if ((rc =

WARNING:INDENTED_LABEL: labels should not be indented
#146: FILE: arch/ppc/syslib/ppc85xx_rio.c:479:
+      out_irq:

WARNING:INDENTED_LABEL: labels should not be indented
#150: FILE: arch/ppc/syslib/ppc85xx_rio.c:483:
+      out_dma:

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#186: FILE: arch/ppc/syslib/ppc85xx_rio.c:581:
+	if (!(msg_rx_ring.virt = dma_alloc_coherent(NULL,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#203: FILE: arch/ppc/syslib/ppc85xx_rio.c:598:
+	if ((rc =

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#220: FILE: arch/ppc/syslib/ppc85xx_rio.c:709:
+		printk(KERN_ERR

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#285: FILE: arch/ppc/syslib/ppc85xx_rio.c:809:
+	if (!(dbell_win =

CHECK:SPACING: No space is necessary after a cast
#286: FILE: arch/ppc/syslib/ppc85xx_rio.c:810:
+	      (u32) ioremap(mport->iores.start + RIO_MAINT_WIN_SIZE,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#288: FILE: arch/ppc/syslib/ppc85xx_rio.c:812:
+		printk(KERN_ERR

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#298: FILE: arch/ppc/syslib/ppc85xx_rio.c:819:
+	if (!(dbell_ring.virt = dma_alloc_coherent(NULL,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#302: FILE: arch/ppc/syslib/ppc85xx_rio.c:823:
+		printk(KERN_ERR "RIO: unable allocate inbound doorbell ring\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#316: FILE: arch/ppc/syslib/ppc85xx_rio.c:837:
+	if ((rc =

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#322: FILE: arch/ppc/syslib/ppc85xx_rio.c:843:
+		printk(KERN_ERR

WARNING:INDENTED_LABEL: labels should not be indented
#330: FILE: arch/ppc/syslib/ppc85xx_rio.c:851:
+      out:

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000176359.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 10 warnings, 1 checks, 285 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000176359.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
