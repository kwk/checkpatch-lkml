WARNING:TYPO_SPELLING: 'wether' may be misspelled - perhaps 'weather'?
#43: 
>> Depends on, wether I want to recognize it and do these checks. Anyway,
               ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#59: 
> Suddenly /mnt/foo and /usr/bin/foo (same file) have different capabilities.

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#71: 
--- a/fs/Config.in	Wed Oct 16 09:23:41 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#129: FILE: fs/fscaps.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#140: FILE: fs/fscaps.c:12:
+#include <asm/uaccess.h>

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#142: FILE: fs/fscaps.c:14:
+static int __fscap_lookup(struct vfsmount *mnt, struct nameidata *nd)
                                                                   ^^

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#144: FILE: fs/fscaps.c:16:
+	static char name[] = ".capabilities";

WARNING:LINE_SPACING: Missing a blank line after declarations
#145: FILE: fs/fscaps.c:17:
+	static char name[] = ".capabilities";
+	nd->mnt = mntget(mnt);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#148: FILE: fs/fscaps.c:20:
+	return path_walk(name, nd);
 	                       ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#154: FILE: fs/fscaps.c:26:
+	struct inode *inode = de->d_inode;
+	if (mnt->mnt_flags & MNT_NOSUID)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#166: FILE: fs/fscaps.c:38:
+static void __fscap_read(struct file *filp, struct linux_binprm *bprm)
                                       ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#170: FILE: fs/fscaps.c:42:
+	int n = kernel_read(filp, ino * sizeof(fscaps), (char *) fscaps, sizeof(fscaps));
 	                    ^^^^

CHECK:SPACING: No space is necessary after a cast
#170: FILE: fs/fscaps.c:42:
+	int n = kernel_read(filp, ino * sizeof(fscaps), (char *) fscaps, sizeof(fscaps));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#171: FILE: fs/fscaps.c:43:
+	int n = kernel_read(filp, ino * sizeof(fscaps), (char *) fscaps, sizeof(fscaps));
+	if (n == sizeof(fscaps)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#179: FILE: fs/fscaps.c:51:
+static int kernel_write(struct file *file, unsigned long offset,
+		 char *addr, unsigned long count)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#192: FILE: fs/fscaps.c:64:
+static void __fscap_drop(struct file *filp, struct dentry *de)
                                       ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#196: FILE: fs/fscaps.c:68:
+	int n = kernel_read(filp, ino * sizeof(fscaps), (char *) fscaps, sizeof(fscaps));
 	                    ^^^^

CHECK:SPACING: No space is necessary after a cast
#196: FILE: fs/fscaps.c:68:
+	int n = kernel_read(filp, ino * sizeof(fscaps), (char *) fscaps, sizeof(fscaps));

WARNING:LINE_SPACING: Missing a blank line after declarations
#197: FILE: fs/fscaps.c:69:
+	int n = kernel_read(filp, ino * sizeof(fscaps), (char *) fscaps, sizeof(fscaps));
+	if (n == sizeof(fscaps) && (fscaps[0] || fscaps[1] || fscaps[2])) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#198: FILE: fs/fscaps.c:70:
+		fscaps[0] = fscaps[1] = fscaps[2] = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#199: FILE: fs/fscaps.c:71:
+		kernel_write(filp, ino * sizeof(fscaps), (char *) fscaps, sizeof(fscaps));
 		             ^^^^

CHECK:SPACING: No space is necessary after a cast
#199: FILE: fs/fscaps.c:71:
+		kernel_write(filp, ino * sizeof(fscaps), (char *) fscaps, sizeof(fscaps));

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#205: FILE: fs/fscaps.c:77:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#206: FILE: fs/fscaps.c:78:
+	int err = __fscap_lookup(bprm->file->f_vfsmnt, &nd);
 	                                                ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#207: FILE: fs/fscaps.c:79:
+	int err = __fscap_lookup(bprm->file->f_vfsmnt, &nd);
+	if (!err) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#208: FILE: fs/fscaps.c:80:
+		struct file *filp = __fscap_open(nd.dentry, nd.mnt, O_RDONLY);
 		             ^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#208: FILE: fs/fscaps.c:80:
+		struct file *filp = __fscap_open(nd.dentry, nd.mnt, O_RDONLY);
 		                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#208: FILE: fs/fscaps.c:80:
+		struct file *filp = __fscap_open(nd.dentry, nd.mnt, O_RDONLY);
 		                                            ^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#209: FILE: fs/fscaps.c:81:
+		if (filp && !IS_ERR(filp)) {
 		    ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#209: FILE: fs/fscaps.c:81:
+		if (filp && !IS_ERR(filp)) {
 		                    ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#209: FILE: fs/fscaps.c:81:
+		struct file *filp = __fscap_open(nd.dentry, nd.mnt, O_RDONLY);
+		if (filp && !IS_ERR(filp)) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#210: FILE: fs/fscaps.c:82:
+			__fscap_read(filp, bprm);
 			             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#211: FILE: fs/fscaps.c:83:
+			filp_close(filp, 0);
 			           ^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#218: FILE: fs/fscaps.c:90:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#219: FILE: fs/fscaps.c:91:
+	int err = __fscap_lookup(de->d_sb->s_rootmnt, &nd);
 	                                               ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#220: FILE: fs/fscaps.c:92:
+	int err = __fscap_lookup(de->d_sb->s_rootmnt, &nd);
+	if (!err) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#221: FILE: fs/fscaps.c:93:
+		struct file *filp = __fscap_open(nd.dentry, nd.mnt, O_RDWR);
 		             ^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#221: FILE: fs/fscaps.c:93:
+		struct file *filp = __fscap_open(nd.dentry, nd.mnt, O_RDWR);
 		                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#221: FILE: fs/fscaps.c:93:
+		struct file *filp = __fscap_open(nd.dentry, nd.mnt, O_RDWR);
 		                                            ^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#222: FILE: fs/fscaps.c:94:
+		if (filp && !IS_ERR(filp)) {
 		    ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#222: FILE: fs/fscaps.c:94:
+		if (filp && !IS_ERR(filp)) {
 		                    ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#222: FILE: fs/fscaps.c:94:
+		struct file *filp = __fscap_open(nd.dentry, nd.mnt, O_RDWR);
+		if (filp && !IS_ERR(filp)) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#223: FILE: fs/fscaps.c:95:
+			__fscap_drop(filp, de);
 			             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#224: FILE: fs/fscaps.c:96:
+			filp_close(filp, 0);
 			           ^^^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#229: FILE: fs/fscaps.c:101:
+EXPORT_SYMBOL(fscap_read);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#230: FILE: fs/fscaps.c:102:
+EXPORT_SYMBOL(fscap_drop);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#286: FILE: include/linux/fscaps.h:1:
+/*

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#300: FILE: include/linux/fscaps.h:15:
+#if defined(CONFIG_FS_CAPABILITIES) || defined(CONFIG_FS_CAPABILITIES_MODULE)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#301: FILE: include/linux/fscaps.h:16:
+extern void fscap_read(struct linux_binprm *bprm);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#302: FILE: include/linux/fscaps.h:17:
+extern void fscap_drop(struct dentry *de);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#303: FILE: include/linux/fscaps.h:18:
+#else^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000420037.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 42 warnings, 7 checks, 223 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000420037.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
