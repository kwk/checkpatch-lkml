WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
No valid state info is available, so the page cache is queried to abtain the

WARNING:TYPO_SPELLING: 'infomation' may be misspelled - perhaps 'information'?
#26: 
required position/timing infomation.
                         ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#66: FILE: mm/readahead.c:1150:
+ * ^Il: the number of pages read by the stream$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#68: FILE: mm/readahead.c:1152:
+ * ^IL: the number of pages pushed into inactive_list in the mean time$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#70: FILE: mm/readahead.c:1154:
+ * ^If(l01) <= L0$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#71: FILE: mm/readahead.c:1155:
+ * ^If(l11 + l12) = L1$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#72: FILE: mm/readahead.c:1156:
+ * ^If(l21 + l22) = L2$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#73: FILE: mm/readahead.c:1157:
+ * ^I...$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#74: FILE: mm/readahead.c:1158:
+ * ^If(l01 + l11 + ...) <= Sum(L0 + L1 + ...)$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#105: FILE: mm/readahead.c:1189:
+	switch (page_refcnt(page)) {
+		case 0:
[...]
+		case PAGE_REFCNT_1:
[...]
+		case PAGE_REFCNT_2:
[...]
+		case PAGE_REFCNT_3:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#123: FILE: mm/readahead.c:1207:
+static int count_cache_hit(struct address_space *mapping,
+				pgoff_t first_index, pgoff_t last_index)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: mm/readahead.c:1238:
+static int query_page_cache(struct address_space *mapping,
+			struct file_ra_state *ra,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#176: FILE: mm/readahead.c:1260:
+		BUG_ON(index > offset + 1);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:CODE_INDENT: code indent should use tabs where possible
#206: FILE: mm/readahead.c:1290:
+        radix_tree_cache_init(&cache);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: mm/readahead.c:1290:
+        radix_tree_cache_init(&cache);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#210: FILE: mm/readahead.c:1294:
+		struct radix_tree_node *node;
+		node = radix_tree_cache_lookup_node(&mapping->page_tree,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#211: FILE: mm/readahead.c:1295:
+                                                &cache, offset - count, 1);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#211: FILE: mm/readahead.c:1295:
+		node = radix_tree_cache_lookup_node(&mapping->page_tree,
+                                                &cache, offset - count, 1);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: mm/readahead.c:1295:
+                                                &cache, offset - count, 1);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#216: FILE: mm/readahead.c:1300:
+		if (node != radix_tree_lookup_node(&mapping->page_tree,
+							offset - count, 1)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#218: FILE: mm/readahead.c:1302:
+			printk(KERN_ERR "check radix_tree_cache_lookup_node!\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: mm/readahead.c:1326:
+static inline pgoff_t first_absent_page_bw(struct address_space *mapping,
+					pgoff_t index, unsigned long max_scan)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: mm/readahead.c:1340:
+		page = radix_tree_cache_lookup(&mapping->page_tree,
+							&cache, --index);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#277: FILE: mm/readahead.c:1361:
+	ra_index = radix_tree_lookup_tail(&mapping->page_tree,
+					index + 1, max_scan);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#281: FILE: mm/readahead.c:1365:
+	BUG_ON(ra_index <= index);

WARNING:TYPO_SPELLING: 'choosed' may be misspelled - perhaps 'chose'?
#302: FILE: mm/readahead.c:1386:
+ * is not choosed to make the whole next chunk safe(as in normal ones). Only
           ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: mm/readahead.c:1392:
+static inline int adjust_rala_accelerated(unsigned long ra_max,
+				unsigned long *ra_size, unsigned long *la_size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#329: FILE: mm/readahead.c:1413:
+try_context_based_readahead(struct address_space *mapping,
+			struct file_ra_state *ra,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#359: FILE: mm/readahead.c:1443:
+			ra_account(ra, RA_EVENT_READAHEAD_MUTILATE,
+						ra->readahead_index - index);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#363: FILE: mm/readahead.c:1447:
+	ra_size = query_page_cache(mapping, ra, &remain_pages,
+						index - 1, ra_min, ra_max);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#367: FILE: mm/readahead.c:1451:
+	if (readahead_ratio < VM_READAHEAD_PROTECT_RATIO &&
+			remain_pages <= la_size && la_size > 1) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000136429.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 16 warnings, 12 checks, 348 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000136429.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
