WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#29: FILE: include/linux/shlist.h:1:
+#ifdef __KERNEL__

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#33: FILE: include/linux/shlist.h:5:
+#include <asm/processor.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#43: FILE: include/linux/shlist.h:15:
+ * Common stuff $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#99: FILE: include/linux/shlist.h:71:
+	if (_list) {				\
+	    (_list) = (_list)->next;		\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#110: FILE: include/linux/shlist.h:82:
+#define slist_del(_entry_in,_head_in)			\
                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#118: FILE: include/linux/shlist.h:90:
+		typeof(_entry) _pos, _prev=_head;	\
 		                          ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#126: FILE: include/linux/shlist.h:98:
+			if (_prev == _head) break;	\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#137: FILE: include/linux/shlist.h:109:
+#define slist_del_quick(_entry_in,_buf_in)		\
                                  ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#152: FILE: include/linux/shlist.h:124:
+#define INIT_SLIST_HEAD(name)			\
+	(name->next = NULL)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#158: FILE: include/linux/shlist.h:130:
+#define SLIST_HEAD(type,name)			\
                        ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#158: FILE: include/linux/shlist.h:130:
+#define SLIST_HEAD(type,name)			\
+	typeof(type) name = SLIST_HEAD_INIT(name)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#158: FILE: include/linux/shlist.h:130:
+#define SLIST_HEAD(type,name)			\
+	typeof(type) name = SLIST_HEAD_INIT(name)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#166: FILE: include/linux/shlist.h:138:
+#define slist_for_each(pos, head)				\
+	for (pos = head; pos && ({ prefetch(pos->next); 1; });	\
+	    pos = pos->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#175: FILE: include/linux/shlist.h:147:
+#define slist_for_each_del(pos, head)			\
+	for (pos = slist_pop(head); pos &&		\
+    	    ({ prefetch(pos->next); 1; });		\
+	    pos = slist_pop(head))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#175: FILE: include/linux/shlist.h:147:
+#define slist_for_each_del(pos, head)			\
+	for (pos = slist_pop(head); pos &&		\
+    	    ({ prefetch(pos->next); 1; });		\
+	    pos = slist_pop(head))

ERROR:CODE_INDENT: code indent should use tabs where possible
#177: FILE: include/linux/shlist.h:149:
+    ^I    ({ prefetch(pos->next); 1; });^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#177: FILE: include/linux/shlist.h:149:
+    ^I    ({ prefetch(pos->next); 1; });^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: include/linux/shlist.h:149:
+    ^I    ({ prefetch(pos->next); 1; });^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#184: FILE: include/linux/shlist.h:156:
+#define INIT_SLIST_LOOP(name)			\
+	(name->next = name)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#184: FILE: include/linux/shlist.h:156:
+#define INIT_SLIST_LOOP(name)			\
+	(name->next = name)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#190: FILE: include/linux/shlist.h:162:
+#define SLIST_LOOP(type,name)			\
                        ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#190: FILE: include/linux/shlist.h:162:
+#define SLIST_LOOP(type,name)			\
+	typeof(type) name = SLIST_LOOP_INIT(name);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#190: FILE: include/linux/shlist.h:162:
+#define SLIST_LOOP(type,name)			\
+	typeof(type) name = SLIST_LOOP_INIT(name);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#190: FILE: include/linux/shlist.h:162:
+#define SLIST_LOOP(type,name)			\
+	typeof(type) name = SLIST_LOOP_INIT(name);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#202: FILE: include/linux/shlist.h:174:
+	if (_head) {					\
+	    memcpy(_head, (_entry), sizeof(_entry));	\

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#209: FILE: include/linux/shlist.h:181:
+	} else						\
+	    NULL;					\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#218: FILE: include/linux/shlist.h:190:
+#define slist_for_each_circular(pos, head)		\
+	for (pos = head; pos && pos != head &&		\
+	    ({ prefetch(pos->next); 1; });		\
+	    pos = pos->next)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#218: FILE: include/linux/shlist.h:190:
+#define slist_for_each_circular(pos, head)		\
+	for (pos = head; pos && pos != head &&		\
+	    ({ prefetch(pos->next); 1; });		\
+	    pos = pos->next)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000429060.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 9 warnings, 10 checks, 196 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000429060.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
