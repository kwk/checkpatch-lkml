WARNING:SPACING: Unnecessary space before function pointer arguments
#68: FILE: include/linux/posix-timers.h:33:
+	int (*clock_getres) (clockid_t which_clock, struct timespec *tp);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#72: FILE: include/linux/posix-timers.h:35:
+	int (*clock_set) (clockid_t which_clock, struct timespec * tp);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#72: FILE: include/linux/posix-timers.h:35:
+	int (*clock_set) (clockid_t which_clock, struct timespec * tp);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#73: FILE: include/linux/posix-timers.h:36:
+	int (*clock_get) (clockid_t which_clock, struct timespec * tp);

WARNING:SPACING: Unnecessary space before function pointer arguments
#73: FILE: include/linux/posix-timers.h:36:
+	int (*clock_get) (clockid_t which_clock, struct timespec * tp);

WARNING:SPACING: Unnecessary space before function pointer arguments
#77: FILE: include/linux/posix-timers.h:38:
+	int (*nsleep) (clockid_t which_clock, int flags, struct timespec *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct timespec *' should also have an identifier name
#77: FILE: include/linux/posix-timers.h:38:
+	int (*nsleep) (clockid_t which_clock, int flags, struct timespec *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'clockid_t' should also have an identifier name
#92: FILE: include/linux/posix-timers.h:51:
+int do_posix_clock_nonanosleep(clockid_t, int flags, struct timespec *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct timespec *' should also have an identifier name
#92: FILE: include/linux/posix-timers.h:51:
+int do_posix_clock_nonanosleep(clockid_t, int flags, struct timespec *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'clockid_t' should also have an identifier name
#93: FILE: include/linux/posix-timers.h:52:
+int do_posix_clock_nosettime(clockid_t, struct timespec *tp);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#143: FILE: kernel/posix-timers.c:204:
+#define DEFHOOK(name)	if (clock->name == NULL) clock->name = common_##name

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#143: FILE: kernel/posix-timers.c:204:
+#define DEFHOOK(name)	if (clock->name == NULL) clock->name = common_##name

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#143: FILE: kernel/posix-timers.c:204:
+#define DEFHOOK(name)	if (clock->name == NULL) clock->name = common_##name

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!clock->name"
#143: FILE: kernel/posix-timers.c:204:
+#define DEFHOOK(name)	if (clock->name == NULL) clock->name = common_##name

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'clock' - possible side-effects?
#146: FILE: kernel/posix-timers.c:207:
+#define CLOCK_DISPATCH(clock, call, arglist) \
+	(posix_clocks[clock].call != NULL \
+	 ? (*posix_clocks[clock].call) arglist : common_##call arglist)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'call' - possible side-effects?
#146: FILE: kernel/posix-timers.c:207:
+#define CLOCK_DISPATCH(clock, call, arglist) \
+	(posix_clocks[clock].call != NULL \
+	 ? (*posix_clocks[clock].call) arglist : common_##call arglist)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'call' may be better as '(call)' to avoid precedence issues
#146: FILE: kernel/posix-timers.c:207:
+#define CLOCK_DISPATCH(clock, call, arglist) \
+	(posix_clocks[clock].call != NULL \
+	 ? (*posix_clocks[clock].call) arglist : common_##call arglist)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arglist' - possible side-effects?
#146: FILE: kernel/posix-timers.c:207:
+#define CLOCK_DISPATCH(clock, call, arglist) \
+	(posix_clocks[clock].call != NULL \
+	 ? (*posix_clocks[clock].call) arglist : common_##call arglist)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "posix_clocks[clock].call"
#147: FILE: kernel/posix-timers.c:208:
+	(posix_clocks[clock].call != NULL \

CHECK:SPACING: No space is necessary after a cast
#149: FILE: kernel/posix-timers.c:210:
+#define DEFHOOK(name)		(void) 0 /* Nothing here.  */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#149: FILE: kernel/posix-timers.c:210:
+#define DEFHOOK(name)		(void) 0 /* Nothing here.  */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#150: FILE: kernel/posix-timers.c:211:
+#define COMMONDEFN	static inline

CHECK:SPACING: No space is necessary after a cast
#183: FILE: kernel/posix-timers.c:244:
+	new_timer->it_timer.data = (unsigned long) new_timer;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#212: FILE: kernel/posix-timers.c:273:
+}
+#undef	DEFHOOK

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#219: FILE: kernel/posix-timers.c:280:
+	if ((unsigned) which_clock >= MAX_CLOCKS)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#219: FILE: kernel/posix-timers.c:280:
+	if ((unsigned) which_clock >= MAX_CLOCKS)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "posix_clocks[which_clock].clock_getres"
#221: FILE: kernel/posix-timers.c:282:
+	if (posix_clocks[which_clock].clock_getres != NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#230: FILE: kernel/posix-timers.c:291:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#445: FILE: kernel/posix-timers.c:1281:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#517: FILE: kernel/posix-timers.c:1343:
+	if (!error && tp && copy_to_user(tp, &rtn_tp, sizeof (rtn_tp))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#517: FILE: kernel/posix-timers.c:1343:
+	if (!error && tp && copy_to_user(tp, &rtn_tp, sizeof (rtn_tp))) {
+		error = -EFAULT;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#567: FILE: kernel/posix-timers.c:1492:
 
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000212848.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 11 warnings, 16 checks, 502 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000212848.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
