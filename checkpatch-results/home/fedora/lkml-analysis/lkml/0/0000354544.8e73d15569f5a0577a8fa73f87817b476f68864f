WARNING:TYPO_SPELLING: 'folowing' may be misspelled - perhaps 'following'?
#45: 
like the folowing ...
         ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#74: 
; (C) 2003 Herbert Pötzl <herbert@13thfloor.at>
                    ^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#92: 
diff -NurbP --minimal linux-2.4.22-pre6/fs/dquot.c linux-2.4.22-pre6-mq0.04/fs/dquot.c

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#131: FILE: fs/dquot.c:198:
+static inline struct dquot *find_dquot(struct dqhash *hash, unsigned int hashent, unsigned int id, int type)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#137: FILE: fs/dquot.c:203:
+	for (head = hash->dqh_hash[hashent].next; head != hash->dqh_hash+hashent; head = head->next) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#137: FILE: fs/dquot.c:203:
+	for (head = hash->dqh_hash[hashent].next; head != hash->dqh_hash+hashent; head = head->next) {
 	                                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#173: FILE: fs/dquot.c:353:
+    ^I/* this could be optimized! (easily?) */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#173: FILE: fs/dquot.c:353:
+    ^I/* this could be optimized! (easily?) */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#173: FILE: fs/dquot.c:353:
+    ^I/* this could be optimized! (easily?) */$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#195: FILE: fs/dquot.c:382:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: fs/dquot.c:385:
+        struct dqhash *hash;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: fs/dquot.c:385:
+        struct dqhash *hash;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#200: FILE: fs/dquot.c:387:
+    ^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#200: FILE: fs/dquot.c:387:
+    ^I$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: fs/dquot.c:387:
+    ^I$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*hash)...) over kmalloc(sizeof(struct dqhash)...)
#201: FILE: fs/dquot.c:388:
+	hash = kmalloc(sizeof(struct dqhash),  GFP_USER);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:LINE_SPACING: Please don't use multiple blank lines
#227: FILE: fs/dquot.c:414:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#240: FILE: fs/dquot.c:427:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#246: FILE: fs/dquot.c:433:
+
+

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#278: FILE: fs/dquot.c:467:
+		if ((cnt == type || type == -1) && dqh_has_quota_enabled(hash, cnt) && info_dirty(&dqopt->info[cnt]))

ERROR:CODE_INDENT: code indent should use tabs where possible
#327: FILE: fs/dquot.c:639:
+^I    ^Idquot->dq_dev = hash->dqh_sb->s_dev;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#327: FILE: fs/dquot.c:639:
+^I    ^Idquot->dq_dev = hash->dqh_sb->s_dev;$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#351: FILE: fs/dquot.c:661:
+	if ((dquot = find_dquot(hash, hashent, id, type)) == NODQUOT) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#354: FILE: fs/dquot.c:663:
+			if ((empty = get_empty_dquot(hash, type)) == NODQUOT)

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#420: FILE: fs/dquot.c:959:
+		dquot->dq_dqb.dqb_itime = CURRENT_TIME + dqh_dqopt(dquot->dq_dqh)->info[dquot->dq_type].dqi_igrace;

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#429: FILE: fs/dquot.c:993:
+			dquot->dq_dqb.dqb_btime = CURRENT_TIME + dqh_dqopt(dquot->dq_dqh)->info[dquot->dq_type].dqi_bgrace;

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#461: FILE: fs/dquot.c:1041:
+		if (dquot[cnt] == NODQUOT || !dqh_has_quota_enabled(dqh, cnt) || inode->i_dquot[cnt] != NODQUOT)

ERROR:CODE_INDENT: code indent should use tabs where possible
#469: FILE: fs/dquot.c:1197:
+    ^Istruct dqhash *dqh = inode->i_sb->s_dqh;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#469: FILE: fs/dquot.c:1197:
+    ^Istruct dqhash *dqh = inode->i_sb->s_dqh;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#469: FILE: fs/dquot.c:1197:
+    ^Istruct dqhash *dqh = inode->i_sb->s_dqh;$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#572: FILE: fs/dquot.c:1405:
+	if ((error = dqopt->ops[type]->read_file_info(hash, type)) < 0)

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#598: FILE: fs/dquot.c:1488:
+			dm->dqb_btime = CURRENT_TIME + dqh_dqopt(dquot->dq_dqh)->info[dquot->dq_type].dqi_bgrace;

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#607: FILE: fs/dquot.c:1496:
+			dm->dqb_itime = CURRENT_TIME + dqh_dqopt(dquot->dq_dqh)->info[dquot->dq_type].dqi_igrace;

ERROR:CODE_INDENT: code indent should use tabs where possible
#671: FILE: fs/inode.c:1212:
+    ^Istruct super_block *sb = hash->dqh_sb;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#671: FILE: fs/inode.c:1212:
+    ^Istruct super_block *sb = hash->dqh_sb;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#671: FILE: fs/inode.c:1212:
+    ^Istruct super_block *sb = hash->dqh_sb;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#675: FILE: fs/inode.c:1215:
+    ^I/* fix this later!!, we need dq_op here? */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#675: FILE: fs/inode.c:1215:
+    ^I/* fix this later!!, we need dq_op here? */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#675: FILE: fs/inode.c:1215:
+    ^I/* fix this later!!, we need dq_op here? */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#687: FILE: fs/quota.c:139:
+    ^Istruct dqhash *dqh = sb->s_dqh;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#687: FILE: fs/quota.c:139:
+    ^Istruct dqhash *dqh = sb->s_dqh;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#687: FILE: fs/quota.c:139:
+    ^Istruct dqhash *dqh = sb->s_dqh;$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#717: FILE: fs/quota.c:166:
+			if ((ret = sb->s_qcop->get_info(dqh, type, &info)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#732: FILE: fs/quota.c:182:
+			if ((ret = sb->s_qcop->get_dqblk(dqh, type, id, &idq)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#769: FILE: fs/quota.c:337:
+	if ((ret = sb->s_qcop->get_dqblk(dqh, type, id, &idq)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#778: FILE: fs/quota.c:350:
+		if ((ret = sb->s_qcop->get_info(dqh, type, &info)) < 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#814: FILE: fs/quota.c:400:
+    ^Iif (sb)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#814: FILE: fs/quota.c:400:
+    ^Iif (sb)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#814: FILE: fs/quota.c:400:
+    ^Iif (sb)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#815: FILE: fs/quota.c:401:
+^I    ^Idqh = sb->s_dqh;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#815: FILE: fs/quota.c:401:
+^I    ^Idqh = sb->s_dqh;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#816: FILE: fs/quota.c:402:
+^Ielse {^I$

CHECK:BRACES: Unbalanced braces around else statement
#816: FILE: fs/quota.c:402:
+	else {	

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#817: FILE: fs/quota.c:403:
+^I    ^Iprintk("sb == NULL"); /* is this possible? */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#817: FILE: fs/quota.c:403:
+^I    ^Iprintk("sb == NULL"); /* is this possible? */$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#817: FILE: fs/quota.c:403:
+	    	printk("sb == NULL"); /* is this possible? */

ERROR:CODE_INDENT: code indent should use tabs where possible
#818: FILE: fs/quota.c:404:
+^I    ^Idqh = NULL;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#818: FILE: fs/quota.c:404:
+^I    ^Idqh = NULL;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#820: FILE: fs/quota.c:406:
+^I^I$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#850: FILE: fs/quota_v1.c:45:
+	filp = dqh_dqopt(dquot->dq_dqh)->files[type];
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#859: FILE: fs/quota_v1.c:74:
+	filp = dqh_dqopt(dquot->dq_dqh)->files[type];
 	^^^^

WARNING:LONG_LINE: line length of 163 exceeds 100 columns
#891: FILE: fs/quota_v1.c:147:
+	printk(KERN_INFO "VFS: %s: Refusing to turn on old quota format on given file. It probably contains newer quota format.\n", kdevname(hash->dqh_sb->s_dev));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#891: FILE: fs/quota_v1.c:147:
+	printk(KERN_INFO "VFS: %s: Refusing to turn on old quota format on given file. It probably contains newer quota format.\n", kdevname(hash->dqh_sb->s_dev));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#942: FILE: fs/quota_v2.c:52:
+	struct mem_dqinfo *info = dqh_dqopt(hash)->info+type;
 	                                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#958: FILE: fs/quota_v2.c:80:
+	struct mem_dqinfo *info = dqh_dqopt(hash)->info+type;
 	                                               ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#969: FILE: fs/quota_v2.c:284:
+	struct file *filp = dqh_dqopt(dquot->dq_dqh)->files[dquot->dq_type];
 	             ^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#970: FILE: fs/quota_v2.c:285:
+	struct mem_dqinfo *info = dqh_dqopt(dquot->dq_dqh)->info+dquot->dq_type;
 	                                                        ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#980: FILE: fs/quota_v2.c:345:
+	struct file *filp = dqh_dqopt(dquot->dq_dqh)->files[dquot->dq_type];
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#990: FILE: fs/quota_v2.c:419:
+	filp = dqh_dqopt(dquot->dq_dqh)->files[type];
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1000: FILE: fs/quota_v2.c:440:
+	struct file *filp = dqh_dqopt(dquot->dq_dqh)->files[dquot->dq_type];
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1011: FILE: fs/quota_v2.c:489:
+	struct file *filp = dqh_dqopt(dquot->dq_dqh)->files[dquot->dq_type];
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1021: FILE: fs/quota_v2.c:539:
+	struct file *filp = dqh_dqopt(dquot->dq_dqh)->files[dquot->dq_type];
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1030: FILE: fs/quota_v2.c:576:
+	struct file *filp = dqh_dqopt(dquot->dq_dqh)->files[dquot->dq_type];
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1039: FILE: fs/quota_v2.c:615:
+	filp = dqh_dqopt(dquot->dq_dqh)->files[type];
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1043: FILE: fs/quota_v2.c:618:
+	if (!filp || !dquot->dq_dqh) {	/* Invalidated quota? */
 	     ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1060: FILE: fs/super.c:285:
+   ^I    ^I/* quick hack to make dqhash id unique, sufficient for now */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1060: FILE: fs/super.c:285:
+   ^I    ^I/* quick hack to make dqhash id unique, sufficient for now */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1060: FILE: fs/super.c:285:
+   ^I    ^I/* quick hack to make dqhash id unique, sufficient for now */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1070: FILE: fs/super.c:300:
+    ^Idestroy_dqhash(s->s_dqh);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1070: FILE: fs/super.c:300:
+    ^Idestroy_dqhash(s->s_dqh);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1070: FILE: fs/super.c:300:
+    ^Idestroy_dqhash(s->s_dqh);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1082: FILE: include/linux/fs.h:762:
+^Istruct dqhash^I    ^I*s_dqh;^I    ^I/* Diskquota hash */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1093: FILE: include/linux/mount.h:32:
+    ^Istruct dqhash *mnt_dqh;     ^I/* Diskquota hash for mount */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1093: FILE: include/linux/mount.h:32:
+    ^Istruct dqhash *mnt_dqh;     ^I/* Diskquota hash for mount */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1093: FILE: include/linux/mount.h:32:
+    ^Istruct dqhash *mnt_dqh;     ^I/* Diskquota hash for mount */$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dqhash *' should also have an identifier name
#1130: FILE: include/linux/quota.h:239:
+	int (*check_quota_file)(struct dqhash *, int);	/* Detect whether file is in our format */

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1130: FILE: include/linux/quota.h:239:
+	int (*check_quota_file)(struct dqhash *, int);	/* Detect whether file is in our format */

WARNING:LONG_LINE_COMMENT: line length of 109 exceeds 100 columns
#1131: FILE: include/linux/quota.h:240:
+	int (*read_file_info)(struct dqhash *, int);	/* Read main info about file - called on quotaon() */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dqhash *' should also have an identifier name
#1131: FILE: include/linux/quota.h:240:
+	int (*read_file_info)(struct dqhash *, int);	/* Read main info about file - called on quotaon() */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1131: FILE: include/linux/quota.h:240:
+	int (*read_file_info)(struct dqhash *, int);	/* Read main info about file - called on quotaon() */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dqhash *' should also have an identifier name
#1132: FILE: include/linux/quota.h:241:
+	int (*write_file_info)(struct dqhash *, int);	/* Write main info about file */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1132: FILE: include/linux/quota.h:241:
+	int (*write_file_info)(struct dqhash *, int);	/* Write main info about file */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dqhash *' should also have an identifier name
#1133: FILE: include/linux/quota.h:242:
+	int (*free_file_info)(struct dqhash *, int);	/* Called on quotaoff() */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1133: FILE: include/linux/quota.h:242:
+	int (*free_file_info)(struct dqhash *, int);	/* Called on quotaoff() */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dquot *' should also have an identifier name
#1134: FILE: include/linux/quota.h:243:
+	int (*read_dqblk)(struct dquot *);		/* Read structure for one user */

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#1135: FILE: include/linux/quota.h:244:
+	int (*commit_dqblk)(struct dquot *);	    	/* Write (or delete) structure for one user */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1135: FILE: include/linux/quota.h:244:
+^Iint (*commit_dqblk)(struct dquot *);^I    ^I/* Write (or delete) structure for one user */$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dquot *' should also have an identifier name
#1135: FILE: include/linux/quota.h:244:
+	int (*commit_dqblk)(struct dquot *);	    	/* Write (or delete) structure for one user */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dqhash *' should also have an identifier name
#1150: FILE: include/linux/quota.h:261:
+	int (*quota_on)(struct dqhash *, int, int, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1150: FILE: include/linux/quota.h:261:
+	int (*quota_on)(struct dqhash *, int, int, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1150: FILE: include/linux/quota.h:261:
+	int (*quota_on)(struct dqhash *, int, int, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1150: FILE: include/linux/quota.h:261:
+	int (*quota_on)(struct dqhash *, int, int, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dqhash *' should also have an identifier name
#1151: FILE: include/linux/quota.h:262:
+	int (*quota_off)(struct dqhash *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1151: FILE: include/linux/quota.h:262:
+	int (*quota_off)(struct dqhash *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dqhash *' should also have an identifier name
#1152: FILE: include/linux/quota.h:263:
+	int (*quota_sync)(struct dqhash *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1152: FILE: include/linux/quota.h:263:
+	int (*quota_sync)(struct dqhash *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dqhash *' should also have an identifier name
#1153: FILE: include/linux/quota.h:264:
+	int (*get_info)(struct dqhash *, int, struct if_dqinfo *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1153: FILE: include/linux/quota.h:264:
+	int (*get_info)(struct dqhash *, int, struct if_dqinfo *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct if_dqinfo *' should also have an identifier name
#1153: FILE: include/linux/quota.h:264:
+	int (*get_info)(struct dqhash *, int, struct if_dqinfo *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dqhash *' should also have an identifier name
#1154: FILE: include/linux/quota.h:265:
+	int (*set_info)(struct dqhash *, int, struct if_dqinfo *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1154: FILE: include/linux/quota.h:265:
+	int (*set_info)(struct dqhash *, int, struct if_dqinfo *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct if_dqinfo *' should also have an identifier name
#1154: FILE: include/linux/quota.h:265:
+	int (*set_info)(struct dqhash *, int, struct if_dqinfo *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dqhash *' should also have an identifier name
#1155: FILE: include/linux/quota.h:266:
+	int (*get_dqblk)(struct dqhash *, int, qid_t, struct if_dqblk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1155: FILE: include/linux/quota.h:266:
+	int (*get_dqblk)(struct dqhash *, int, qid_t, struct if_dqblk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'qid_t' should also have an identifier name
#1155: FILE: include/linux/quota.h:266:
+	int (*get_dqblk)(struct dqhash *, int, qid_t, struct if_dqblk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct if_dqblk *' should also have an identifier name
#1155: FILE: include/linux/quota.h:266:
+	int (*get_dqblk)(struct dqhash *, int, qid_t, struct if_dqblk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dqhash *' should also have an identifier name
#1156: FILE: include/linux/quota.h:267:
+	int (*set_dqblk)(struct dqhash *, int, qid_t, struct if_dqblk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1156: FILE: include/linux/quota.h:267:
+	int (*set_dqblk)(struct dqhash *, int, qid_t, struct if_dqblk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'qid_t' should also have an identifier name
#1156: FILE: include/linux/quota.h:267:
+	int (*set_dqblk)(struct dqhash *, int, qid_t, struct if_dqblk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct if_dqblk *' should also have an identifier name
#1156: FILE: include/linux/quota.h:267:
+	int (*set_dqblk)(struct dqhash *, int, qid_t, struct if_dqblk *);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'hash' - possible side-effects?
#1176: FILE: include/linux/quota.h:311:
+#define dqh_any_quota_enabled(hash) (is_enabled(dqh_dqopt(hash), USRQUOTA)  \
+    	| is_enabled(dqh_dqopt(hash), GRPQUOTA))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1177: FILE: include/linux/quota.h:312:
+    ^I| is_enabled(dqh_dqopt(hash), GRPQUOTA))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1177: FILE: include/linux/quota.h:312:
+    ^I| is_enabled(dqh_dqopt(hash), GRPQUOTA))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1177: FILE: include/linux/quota.h:312:
+    ^I| is_enabled(dqh_dqopt(hash), GRPQUOTA))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1189: FILE: include/linux/quota.h:324:
+    ^Istruct super_block *dqh_sb; ^I/* super block if applicable */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1189: FILE: include/linux/quota.h:324:
+    ^Istruct super_block *dqh_sb; ^I/* super block if applicable */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1189: FILE: include/linux/quota.h:324:
+    ^Istruct super_block *dqh_sb; ^I/* super block if applicable */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1190: FILE: include/linux/quota.h:325:
+    ^Istruct list_head dqh_hash[NR_DQHASH];$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1190: FILE: include/linux/quota.h:325:
+    ^Istruct list_head dqh_hash[NR_DQHASH];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1190: FILE: include/linux/quota.h:325:
+    ^Istruct list_head dqh_hash[NR_DQHASH];$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1193: FILE: include/linux/quota.h:328:
+struct dqhash *new_dqhash(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dqhash *' should also have an identifier name
#1194: FILE: include/linux/quota.h:329:
+void destroy_dqhash(struct dqhash *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1195: FILE: include/linux/quota.h:330:
+struct dqhash *find_dqhash(unsigned int);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1199: FILE: include/linux/quota.h:334:
+    ^Idq->dq_flags |= DQ_MOD;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1199: FILE: include/linux/quota.h:334:
+    ^Idq->dq_flags |= DQ_MOD;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1199: FILE: include/linux/quota.h:334:
+    ^Idq->dq_flags |= DQ_MOD;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000354544.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 96 warnings, 11 checks, 1034 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000354544.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
