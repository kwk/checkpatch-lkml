WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#67: 
--- linux-2.6.11-rc1-mm2.orig/include/linux/sched.h	2005-01-22 20:42:44.000000000 +1100

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'policy' - possible side-effects?
#74: FILE: include/linux/sched.h:148:
+#define SCHED_RT_PRIO(policy)	(SCHED_RT(policy) || \
+				(policy) == SCHED_ISO)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#96: FILE: include/linux/sched.h:374:
+ * of ISO_PRIO if below starvation limits or their underlying $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#134: FILE: kernel/sched.c:70:
+#define USER_PRIO(p)		((p)-MIN_NORMAL_PRIO)
                     		    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#142: FILE: kernel/sched.c:187:
+#define ISO_BITMAP_SIZE ((((MAX_USER_RT_PRIO+1+7)/8)+sizeof(long)-1)/ \
                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#142: FILE: kernel/sched.c:187:
+#define ISO_BITMAP_SIZE ((((MAX_USER_RT_PRIO+1+7)/8)+sizeof(long)-1)/ \
                                               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#142: FILE: kernel/sched.c:187:
+#define ISO_BITMAP_SIZE ((((MAX_USER_RT_PRIO+1+7)/8)+sizeof(long)-1)/ \
                                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#142: FILE: kernel/sched.c:187:
+#define ISO_BITMAP_SIZE ((((MAX_USER_RT_PRIO+1+7)/8)+sizeof(long)-1)/ \
                                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#142: FILE: kernel/sched.c:187:
+#define ISO_BITMAP_SIZE ((((MAX_USER_RT_PRIO+1+7)/8)+sizeof(long)-1)/ \
                                                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxE)
#142: FILE: kernel/sched.c:187:
+#define ISO_BITMAP_SIZE ((((MAX_USER_RT_PRIO+1+7)/8)+sizeof(long)-1)/ \
                                                                     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#199: FILE: kernel/sched.c:605:
+	runqueue_t *rq = task_rq(p);
+	rq->iso_active--;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#314: FILE: kernel/sched.c:2641:
+	BUG_ON(idx == MAX_USER_RT_PRIO);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#331: FILE: kernel/sched.c:2654:
+out:^I$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#335: FILE: kernel/sched.c:2658:
+static inline task_t* find_next_task(runqueue_t *rq, prio_array_t *array)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#338: FILE: kernel/sched.c:2661:
+	int idx = sched_find_first_bit(array->bitmap);
+	if (unlikely(iso_ready(rq) && idx > ISO_PRIO))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'param->sched_priority == 0'
#436: FILE: kernel/sched.c:3590:
+	if ((!SCHED_RT_PRIO(policy)) != (param->sched_priority == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#478: FILE: kernel/sched.c:5139:
+		rq->iso_refractory = rq->iso_ticks = rq->iso_active = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000212949.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 4 warnings, 10 checks, 396 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000212949.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
