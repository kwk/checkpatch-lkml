WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#23: 
The Linux semop() System V semaphore SEM_UNDO should perform SEM_UNDO cleanup

WARNING:TYPO_SPELLING: 'sempaphore' may be misspelled - perhaps 'semaphore'?
#30: 
with the SEM_UNDO flag set, the change in sempaphore value performed by
                                          ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#80: 
#include <stdio.h>

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#81: 
#include <unistd.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#82: 
#include <sys/sem.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#83: 
#include <errno.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#84: 
#include <pthread.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#86: 
#define KEY 0x1234

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#88: 
#define NUMTHREADS 2

ERROR:TRAILING_WHITESPACE: trailing whitespace
#198: FILE: linux/include/linux/sem.h:128:
+ */ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#201: FILE: linux/include/linux/sem.h:131:
+	spinlock_t	lock;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#202: FILE: linux/include/linux/sem.h:132:
+	volatile unsigned long	add_count;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'undohd != NULL'
#222: FILE: linux/ipc/sem.c:796:
+	if ((undohd != NULL) && (atomic_read(&undohd->refcnt) != 1))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "undohd"
#222: FILE: linux/ipc/sem.c:796:
+	if ((undohd != NULL) && (atomic_read(&undohd->refcnt) != 1))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'undohd != NULL'
#242: FILE: linux/ipc/sem.c:816:
+	if ((undohd != NULL) && (atomic_read(&undohd->refcnt) != 1))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "undohd"
#242: FILE: linux/ipc/sem.c:816:
+	if ((undohd != NULL) && (atomic_read(&undohd->refcnt) != 1))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#246: FILE: linux/ipc/sem.c:820:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#266: FILE: linux/ipc/sem.c:840:
+		undohd = (struct sem_undohd *) kmalloc(size, GFP_KERNEL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#266: FILE: linux/ipc/sem.c:840:
+		undohd = (struct sem_undohd *) kmalloc(size, GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!undohd"
#267: FILE: linux/ipc/sem.c:841:
+		if (undohd == NULL)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#280: FILE: linux/ipc/sem.c:854:
+static struct sem_undo* freeundos(struct sem_undo* un)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#280: FILE: linux/ipc/sem.c:854:
+static struct sem_undo* freeundos(struct sem_undo* un)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#286: FILE: linux/ipc/sem.c:859:
+	for(up = &current->semundohd->proc_list;(u=*up);up=&u->proc_next) {
 	                                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#286: FILE: linux/ipc/sem.c:859:
+	for(up = &current->semundohd->proc_list;(u=*up);up=&u->proc_next) {
 	                                          ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#286: FILE: linux/ipc/sem.c:859:
+	for(up = &current->semundohd->proc_list;(u=*up);up=&u->proc_next) {
 	                                           ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#286: FILE: linux/ipc/sem.c:859:
+	for(up = &current->semundohd->proc_list;(u=*up);up=&u->proc_next) {
 	                                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#286: FILE: linux/ipc/sem.c:859:
+	for(up = &current->semundohd->proc_list;(u=*up);up=&u->proc_next) {
 	                                                  ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#286: FILE: linux/ipc/sem.c:859:
+	for(up = &current->semundohd->proc_list;(u=*up);up=&u->proc_next) {
 	                                                   ^

ERROR:SPACING: space required before the open parenthesis '('
#286: FILE: linux/ipc/sem.c:859:
+	for(up = &current->semundohd->proc_list;(u=*up);up=&u->proc_next) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#300: FILE: linux/ipc/sem.c:876:
+	if (current->semundohd != NULL) {
+		un = current->semundohd->proc_list;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "current->semundohd"
#300: FILE: linux/ipc/sem.c:876:
+	if (current->semundohd != NULL) {

ERROR:SPACING: space required before the open parenthesis '('
#303: FILE: linux/ipc/sem.c:879:
+	while(un != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "un"
#303: FILE: linux/ipc/sem.c:879:
+	while(un != NULL) {

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#304: FILE: linux/ipc/sem.c:880:
+		if(un->semid==semid)
 		            ^

ERROR:SPACING: space required before the open parenthesis '('
#304: FILE: linux/ipc/sem.c:880:
+		if(un->semid==semid)

ERROR:SPACING: spaces required around that '==' (ctx:VxO)
#306: FILE: linux/ipc/sem.c:882:
+		if(un->semid==-1)
 		            ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#306: FILE: linux/ipc/sem.c:882:
+		if(un->semid==-1)
 		              ^

ERROR:SPACING: space required before the open parenthesis '('
#306: FILE: linux/ipc/sem.c:882:
+		if(un->semid==-1)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#307: FILE: linux/ipc/sem.c:883:
+			un=freeundos(un);
 			  ^

WARNING:TABSTOP: Statements should start on a tabstop
#308: FILE: linux/ipc/sem.c:884:
+		 else

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#309: FILE: linux/ipc/sem.c:885:
+			un=un->proc_next;
 			  ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "current->semundohd"
#327: FILE: linux/ipc/sem.c:901:
+	if (current->semundohd != NULL)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#336: FILE: linux/ipc/sem.c:910:
+	size = sizeof(struct sem_undo) + sizeof(short)*nsems;
 	                                              ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#356: FILE: linux/ipc/sem.c:924:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#358: FILE: linux/ipc/sem.c:926:
+^I * released all locks and reacquired them. $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_un"
#370: FILE: linux/ipc/sem.c:938:
+	if (new_un != NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#372: FILE: linux/ipc/sem.c:940:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#377: FILE: linux/ipc/sem.c:945:
+		un->semadj = (short *) &un[1];

CHECK:LINE_SPACING: Please don't use multiple blank lines
#391: FILE: linux/ipc/sem.c:966:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#436: FILE: linux/ipc/sem.c:1008:
+^I^I$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#499: FILE: linux/ipc/sem.c:1104:
+#define CLONE_SEMUNDO (CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND)
                                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#499: FILE: linux/ipc/sem.c:1104:
+#define CLONE_SEMUNDO (CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND)
                                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#499: FILE: linux/ipc/sem.c:1104:
+#define CLONE_SEMUNDO (CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND)
                                                     ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#506: FILE: linux/ipc/sem.c:1111:
+	if (((clone_flags & CLONE_SEMUNDO) == CLONE_SEMUNDO) ||
[...]
+	} else 
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#507: FILE: linux/ipc/sem.c:1112:
+	if (((clone_flags & CLONE_SEMUNDO) == CLONE_SEMUNDO) ||
+		(clone_flags & CLONE_THREAD)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#515: FILE: linux/ipc/sem.c:1120:
+^I} else $

CHECK:BRACES: Unbalanced braces around else statement
#515: FILE: linux/ipc/sem.c:1120:
+	} else 

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tsk->semundohd"
#532: FILE: linux/ipc/sem.c:1137:
+	if (tsk->semundohd != NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'undohd == NULL'
#553: FILE: linux/ipc/sem.c:1179:
+	if ((undohd == NULL) || (atomic_read(&undohd->refcnt) != 1))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!undohd"
#553: FILE: linux/ipc/sem.c:1179:
+	if ((undohd == NULL) || (atomic_read(&undohd->refcnt) != 1))

ERROR:CODE_INDENT: code indent should use tabs where possible
#557: FILE: linux/ipc/sem.c:1183:
+         * is the last task exiting for this undo list.$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:RETURN_VOID: void function return statements are not generally useful
#587: FILE: linux/ipc/util.c:351:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#589: FILE: linux/ipc/util.c:353:
+
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#600: FILE: linux/kernel/fork.c:29:
+extern int copy_semundo(unsigned long clone_flags, struct task_struct *tsk);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#601: FILE: linux/kernel/fork.c:30:
+extern void exit_semundo(struct task_struct *tsk);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000482636.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 17 warnings, 26 checks, 427 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000482636.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
