WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
> It looks like the incorrect code has been in there for quite some time, but 

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#80: FILE: arch/i386/mm/ioremap.c:249:
+	/* Use the vm area unlocked, assuming the caller
+	   ensures there isn't another iounmap for the same address

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#83: FILE: arch/i386/mm/ioremap.c:252:
+	   cpa takes care of the direct mappings. */

ERROR:SPACING: space required after that ';' (ctx:WxV)
#85: FILE: arch/i386/mm/ioremap.c:254:
+	for (p = vmlist ; p ;p = p->next) {
 	                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#92: FILE: arch/i386/mm/ioremap.c:261:
+		printk("iounmap: bad address %p\n", addr);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'iounmap', this function's name, in a string
#92: FILE: arch/i386/mm/ioremap.c:261:
+		printk("iounmap: bad address %p\n", addr);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#110: FILE: arch/i386/mm/ioremap.c:276:
+	BUG_ON(p != o || o == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!o"
#110: FILE: arch/i386/mm/ioremap.c:276:
+	BUG_ON(p != o || o == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#143: FILE: arch/x86_64/mm/ioremap.c:267:
+	/* Use the vm area unlocked, assuming the caller
+	   ensures there isn't another iounmap for the same address

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#146: FILE: arch/x86_64/mm/ioremap.c:270:
+	   cpa takes care of the direct mappings. */

ERROR:SPACING: space required after that ';' (ctx:WxV)
#148: FILE: arch/x86_64/mm/ioremap.c:272:
+	for (p = vmlist ; p ;p = p->next) {
 	                    ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#168: FILE: arch/x86_64/mm/ioremap.c:290:
+	BUG_ON(p != o || o == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!o"
#168: FILE: arch/x86_64/mm/ioremap.c:290:
+	BUG_ON(p != o || o == NULL);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000129017.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 9 warnings, 2 checks, 109 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000129017.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
