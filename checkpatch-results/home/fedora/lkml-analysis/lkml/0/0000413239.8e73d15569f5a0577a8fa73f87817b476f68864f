Use of uninitialized value $typo_fix in concatenation (.) or string at /home/fedora/lkml-analysis/linux/scripts/checkpatch.pl line 3367.
WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#23: 
This is kmsgdump for 2.5.47, most of it was just putting rejects back in that 

WARNING:TYPO_SPELLING: 'proccess' may be misspelled - perhaps 'process'?
#29: 
The only thing I had to change was that proccess.c didn't know about kb_wait 
                                        ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'proccess' may be misspelled - perhaps 'process'?
#43: 
in proccess.c.  I'm sure someone else knows the correct way to fix that :)
   ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#73: FILE: arch/i386/Kconfig:1643:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#79: FILE: arch/i386/Kconfig:1649:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#82: FILE: arch/i386/Kconfig:1652:
+^I  $

WARNING:TYPO_SPELLING: 'developpers' may be misspelled - perhaps 'developers'?
#84: FILE: arch/i386/Kconfig:1654:
+	  developpers to debug it. This isn't a toy, you have been warned !
 	  ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#95: FILE: arch/i386/Kconfig:1665:
+^I$

WARNING:TYPO_SPELLING: 'formated' may be misspelled - perhaps 'formatted'?
#102: FILE: arch/i386/Kconfig:1672:
+	  easier when the diskette is formated as FAT. One other advantage of
 	                              ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#108: FILE: arch/i386/Kconfig:1678:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#117: FILE: arch/i386/Kconfig:1687:
+^I  automatically dump its messages buffer onto a diskette and then $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#119: FILE: arch/i386/Kconfig:1689:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#138: FILE: arch/i386/Kconfig:1708:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#140: FILE: arch/i386/Kconfig:1710:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#142: FILE: arch/i386/Kconfig:1712:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#163: FILE: arch/i386/kernel/kmsgdump.S:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#167: FILE: arch/i386/kernel/kmsgdump.S:5:
+ *^I$

WARNING:TYPO_SPELLING: 'adresses' may be misspelled - perhaps 'addresses'?
#176: FILE: arch/i386/kernel/kmsgdump.S:14:
+ * Useful information are stored at the following hexadecimal adresses :
                                                               ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#191: FILE: arch/i386/kernel/kmsgdump.S:29:
+ *^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: arch/i386/kernel/kmsgdump.S:42:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#208: FILE: arch/i386/kernel/kmsgdump.S:46:
+^I$

WARNING:TYPO_SPELLING: 'useable' may be misspelled - perhaps 'usable'?
#217: FILE: arch/i386/kernel/kmsgdump.S:55:
+ * the diskette is useable as-is.
                    ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#220: FILE: arch/i386/kernel/kmsgdump.S:58:
+bootstrap:^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#224: FILE: arch/i386/kernel/kmsgdump.S:62:
+0:^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#240: FILE: arch/i386/kernel/kmsgdump.S:78:
+^Imovw^I$(MASK_PANICDUMP|MASK_PANICBOOT|MASK_OUTPUTFAT|MASK_SAFEDUMP), $

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#241: FILE: arch/i386/kernel/kmsgdump.S:78:
MODEFLAGS

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#244: FILE: arch/i386/kernel/kmsgdump.S:81:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#250: FILE: arch/i386/kernel/kmsgdump.S:87:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#257: FILE: arch/i386/kernel/kmsgdump.S:94:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#260: FILE: arch/i386/kernel/kmsgdump.S:97:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#283: FILE: arch/i386/kernel/kmsgdump.S:120:
+^Imovw^I$0xe, %ax^I/* force a switch to graph mode to help in reinitialization $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#309: FILE: arch/i386/kernel/kmsgdump.S:145:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#311: FILE: arch/i386/kernel/kmsgdump.S:147:
+redrawmessages:^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#321: FILE: arch/i386/kernel/kmsgdump.S:157:
+^Ijnz^I3f^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#322: FILE: arch/i386/kernel/kmsgdump.S:158:
+^Imovw^I%di, currentline-kmsgdump+CODEORIGIN^I/* we fix the end at this point. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#328: FILE: arch/i386/kernel/kmsgdump.S:163:
+findline:^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#341: FILE: arch/i386/kernel/kmsgdump.S:176:
+^Icmpb^I$0, mustredraw-kmsgdump+CODEORIGIN^I/* if we must redraw the messages $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#356: FILE: arch/i386/kernel/kmsgdump.S:190:
+1:^Imovb^I%al, unitname-kmsgdump+CODEORIGIN^I^I/* write the drive letter into the $

WARNING:TYPO_SPELLING: 'positionned' may be misspelled - perhaps 'positioned'?
#361: FILE: arch/i386/kernel/kmsgdump.S:194:
+/* SI is already positionned at msgFAT, so we avoid "movw $msgFAT,%si" */
                  ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#380: FILE: arch/i386/kernel/kmsgdump.S:213:
+^Imov^I$1, %ah^I^I/* we check if another key has been hit to speed up scrolling $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#415: FILE: arch/i386/kernel/kmsgdump.S:247:
+^Ijnz^I5b^I$

WARNING:TYPO_SPELLING: 'ony' may be misspelled - perhaps 'only'?
#425: FILE: arch/i386/kernel/kmsgdump.S:257:
+	jc	9f		/* on error, we return immediately after ony one beep */
 	  	  		                                         ^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#436: FILE: arch/i386/kernel/kmsgdump.S:268:
+/* clears the screen from the upper left corner defined by CX to the bottom $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#455: FILE: arch/i386/kernel/kmsgdump.S:286:
+^Ijbe^I1f^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#465: FILE: arch/i386/kernel/kmsgdump.S:296:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#467: FILE: arch/i386/kernel/kmsgdump.S:298:
+printbuffer:^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#494: FILE: arch/i386/kernel/kmsgdump.S:325:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#505: FILE: arch/i386/kernel/kmsgdump.S:336:
+^I/* a safe dump is requested. we must ensure the diskette contains a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#534: FILE: arch/i386/kernel/kmsgdump.S:364:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#543: FILE: arch/i386/kernel/kmsgdump.S:373:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#572: FILE: arch/i386/kernel/kmsgdump.S:402:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#580: FILE: arch/i386/kernel/kmsgdump.S:410:
+hardware_reset:^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#611: FILE: arch/i386/kernel/kmsgdump.S:441:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#622: FILE: arch/i386/kernel/kmsgdump.S:452:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#623: FILE: arch/i386/kernel/kmsgdump.S:453:
+/* PIT reconfiguration (cont'd) : set Timer2 clock to 880 Hz for the buzzer $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#635: FILE: arch/i386/kernel/kmsgdump.S:464:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#663: FILE: arch/i386/kernel/kmsgdump.S:492:
+^Iret^I^I$

WARNING:TYPO_SPELLING: 'interprete' may be misspelled - perhaps 'interpret'?
#696: FILE: arch/i386/kernel/kmsgdump.S:525:
+/* Make sure [40:72] doesn't contain 0x1234, which the Bios will interprete 
                                                                  ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#696: FILE: arch/i386/kernel/kmsgdump.S:525:
+/* Make sure [40:72] doesn't contain 0x1234, which the Bios will interprete $

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#705: FILE: arch/i386/kernel/kmsgdump.S:533:
+ * occured.
    ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#745: FILE: arch/i386/kernel/kmsgdump.S:573:
+ * sets the cursor to the begin of the line in DH, col in DL, and displays $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#747: FILE: arch/i386/kernel/kmsgdump.S:574:
+ * which ends with \n, \r or \0. On return, AL contains the byte that ended $

WARNING:TYPO_SPELLING: 'positionned' may be misspelled - perhaps 'positioned'?
#750: FILE: arch/i386/kernel/kmsgdump.S:576:
+ * if LF is encountered, the cursor is positionned at the beginning of the 
                                        ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#750: FILE: arch/i386/kernel/kmsgdump.S:576:
+ * if LF is encountered, the cursor is positionned at the beginning of the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#753: FILE: arch/i386/kernel/kmsgdump.S:578:
+ * If DH is set to -1, then the cursor isn't moved. The new cursor position $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#767: FILE: arch/i386/kernel/kmsgdump.S:591:
+^Ilodsb^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#776: FILE: arch/i386/kernel/kmsgdump.S:600:
+^Imovb^I$255, %dl^I/* if we pass the end of the line, we'll begin on a new row $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#820: FILE: arch/i386/kernel/kmsgdump.S:643:
+#ifdef STEP_BY_STEP^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#895: FILE: arch/i386/kernel/kmsgdump.S:718:
+ * We'll use a trick to write the two FATs : $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#904: FILE: arch/i386/kernel/kmsgdump.S:727:
+^Ijc^I0f^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#913: FILE: arch/i386/kernel/kmsgdump.S:736:
+ * writes <LOG_BUF_LEN> bytes of data on drive DRIVENUM, from logical sector $

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#915: FILE: arch/i386/kernel/kmsgdump.S:737:
+ * CF is set if an error occured.
                          ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#943: FILE: arch/i386/kernel/kmsgdump.S:765:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#946: FILE: arch/i386/kernel/kmsgdump.S:768:
+ * starts writing CX sectors of data from ES:DI to the diskette at logical $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#948: FILE: arch/i386/kernel/kmsgdump.S:769:
+ * first logical sector is numbered 0. This function can write more than one $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1038: FILE: arch/i386/kernel/kmsgdump.S:858:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1042: FILE: arch/i386/kernel/kmsgdump.S:862:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1046: FILE: arch/i386/kernel/kmsgdump.S:866:
+helpline:^I.asciz^I"> \377Boot \377Dump \377Format \377Halt \377Info \377Print $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1051: FILE: arch/i386/kernel/kmsgdump.S:870:
+msgunit:^I.ascii^I"Drive Unit and Format : \377" /* no zero string -> will $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1060: FILE: arch/i386/kernel/kmsgdump.S:878:
+/* these messages must be *exactly* 15 chars long, and terminated by a 0 (ie: $

WARNING:TYPO_SPELLING: 'Formating' may be misspelled - perhaps 'Formatting'?
#1063: FILE: arch/i386/kernel/kmsgdump.S:880:
+statform:	.asciz	"Formating FAT12"
          	      	 ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1071: FILE: arch/i386/kernel/kmsgdump.S:888:
+aboutmsg:^I.ascii^I"KMSGDUMP 0.4.3 - (C) 2000/12/23 - Willy Tarreau <willy AT $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1073: FILE: arch/i386/kernel/kmsgdump.S:889:
+^I^I.ascii^I"<\377B> reboots, <\377D> dumps messages onto the floppy, <\377F> $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1075: FILE: arch/i386/kernel/kmsgdump.S:890:
+^I^I.ascii^I"format, <\377H> halts the system, <\377P> prints the messages on $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1077: FILE: arch/i386/kernel/kmsgdump.S:891:
+^I^I.ascii^I"printer, <\377T> selects a printer, <\377U> changes the floppy $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1079: FILE: arch/i386/kernel/kmsgdump.S:892:
+^I^I.ascii^I"scroll messages up/down, and <\377I> shows this help. When an $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1082: FILE: arch/i386/kernel/kmsgdump.S:894:
+^I^I.ascii^I"When dumping data onto a floppy, be warned that FLOPPY CONTENTS $

WARNING:TYPO_SPELLING: 'lenght' may be misspelled - perhaps 'length'?
#1085: FILE: arch/i386/kernel/kmsgdump.S:896:
+/* just a public label at the end of the code so we know its lenght. */
                                                              ^^^^^^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1117: FILE: arch/i386/kernel/process.c:57:
+	for (i=0; i<0x10000; i++)
 	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1117: FILE: arch/i386/kernel/process.c:57:
+	for (i=0; i<0x10000; i++)
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1122: FILE: arch/i386/kernel/process.c:62:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1126: FILE: arch/i386/kernel/process.c:66:
+void disable_local_APIC(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1137: FILE: arch/i386/kernel/process.c:397:
 
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1139: FILE: arch/i386/kernel/process.c:399:
+extern void dump_syslog(char * buf);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1142: FILE: arch/i386/kernel/process.c:402:
+static int chkpnt = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1144: FILE: arch/i386/kernel/process.c:404:
+/* boot-time default flags. These are single character indicators except for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1146: FILE: arch/i386/kernel/process.c:405:
+   and U (unit number) which must be followed by a number. To avoid confusion $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1146: FILE: arch/i386/kernel/process.c:405:
+/* boot-time default flags. These are single character indicators except for 
+   and U (unit number) which must be followed by a number. To avoid confusion 

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1148: FILE: arch/i386/kernel/process.c:406:
+   values, each flag has its complement and you are strongly encouraged to $

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#1166: FILE: arch/i386/kernel/process.c:423:
+char kmsgdump_flags[16]=
                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1178: FILE: arch/i386/kernel/process.c:435:
+        "S"$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1178: FILE: arch/i386/kernel/process.c:435:
+        "S"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1180: FILE: arch/i386/kernel/process.c:437:
+        "O"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1180: FILE: arch/i386/kernel/process.c:437:
+        "O"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1182: FILE: arch/i386/kernel/process.c:439:
+        "T0U0"; /* Safe,Track0,Unit0 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1182: FILE: arch/i386/kernel/process.c:439:
+        "T0U0"; /* Safe,Track0,Unit0 */$

WARNING:TYPO_SPELLING: 'unuseable' may be misspelled - perhaps 'unusable'?
#1188: FILE: arch/i386/kernel/process.c:445:
+ * The system is rebooted to real mode so it will be unuseable after a call
                                                      ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1192: FILE: arch/i386/kernel/process.c:449:
+ *   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1193: FILE: arch/i386/kernel/process.c:450:
+ * Note 1 : Part of this code has been shamelessly stolen from $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1195: FILE: arch/i386/kernel/process.c:451:
+ *          Perhaps it should be better to implement a generic rebooting $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1199: FILE: arch/i386/kernel/process.c:454:
+ *          I finally accepted the fact that the PC is stronger than the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1202: FILE: arch/i386/kernel/process.c:456:
+ *          about it not working properly on some hardware still applies $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1205: FILE: arch/i386/kernel/process.c:458:
+ *          messages, but it will be interesting to add this feature to all $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1211: FILE: arch/i386/kernel/process.c:463:
+^Iint modeflags=MASK_OUTPUTFAT | MASK_PANICDUMP | MASK_PANICBOOT | $

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1211: FILE: arch/i386/kernel/process.c:463:
+	int modeflags=MASK_OUTPUTFAT | MASK_PANICDUMP | MASK_PANICBOOT | 
 	             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1213: FILE: arch/i386/kernel/process.c:464:
+	int track=0;	/* by default, track 0 */
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1214: FILE: arch/i386/kernel/process.c:465:
+	int unit=0;	/* and drive A */
 	        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1215: FILE: arch/i386/kernel/process.c:466:
+^I$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1216: FILE: arch/i386/kernel/process.c:467:
+	if (chkpnt<100) {
+	    unsigned long l, r;

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1216: FILE: arch/i386/kernel/process.c:467:
+	if (chkpnt<100) {
 	          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1218: FILE: arch/i386/kernel/process.c:469:
+	    unsigned long l, r;
+	    chkpnt=100;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1218: FILE: arch/i386/kernel/process.c:469:
+	    chkpnt=100;
 	          ^

WARNING:TABSTOP: Statements should start on a tabstop
#1233: FILE: arch/i386/kernel/process.c:484:
+	    if (test_bit(X86_FEATURE_APIC, boot_cpu_data.x86_capability)) {

WARNING:TABSTOP: Statements should start on a tabstop
#1239: FILE: arch/i386/kernel/process.c:490:
+	    }

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1243: FILE: arch/i386/kernel/process.c:494:
+	/* Write 0x09 to CMOS register number 0x0f, which the BIOS POST
+	   routine will recognize as telling it to :

WARNING:TYPO_SPELLING: 'funciton' may be misspelled - perhaps 'function'?
#1248: FILE: arch/i386/kernel/process.c:499:
+	   [Note: funciton 0x0A is easier to use, but doesn't re-initialize
 	          ^^^^^^^^

WARNING:TYPO_SPELLING: 'harware' may be misspelled - perhaps 'hardware'?
#1249: FILE: arch/i386/kernel/process.c:500:
+	          anything and might not work on specific harware.          ]
 	                                                  ^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1249: FILE: arch/i386/kernel/process.c:500:
+^I          anything and might not work on specific harware.          ]$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1252: FILE: arch/i386/kernel/process.c:503:
+	if (chkpnt<200) {
+	    unsigned long flags;

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1252: FILE: arch/i386/kernel/process.c:503:
+	if (chkpnt<200) {
 	          ^

WARNING:TABSTOP: Statements should start on a tabstop
#1253: FILE: arch/i386/kernel/process.c:504:
+	    unsigned long flags;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1254: FILE: arch/i386/kernel/process.c:505:
+	    unsigned long flags;
+	    chkpnt=200;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1254: FILE: arch/i386/kernel/process.c:505:
+	    chkpnt=200;
 	          ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1255: FILE: arch/i386/kernel/process.c:506:
+            spin_lock_irqsave(&rtc_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1255: FILE: arch/i386/kernel/process.c:506:
+            spin_lock_irqsave(&rtc_lock, flags);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1256: FILE: arch/i386/kernel/process.c:507:
+	    outb_p (0x8f, 0x70);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1258: FILE: arch/i386/kernel/process.c:509:
+	    outb_p (0x09, 0x71);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1260: FILE: arch/i386/kernel/process.c:511:
+            spin_unlock_irqrestore(&rtc_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1260: FILE: arch/i386/kernel/process.c:511:
+            spin_unlock_irqrestore(&rtc_lock, flags);$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1264: FILE: arch/i386/kernel/process.c:515:
+	/* Remap the kernel at virtual address zero, as well as offset zero
+	   from the kernel segment.  This assumes the kernel segment starts at

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1265: FILE: arch/i386/kernel/process.c:516:
+	   virtual address PAGE_OFFSET. */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1267: FILE: arch/i386/kernel/process.c:518:
+	if (chkpnt<300) {
+	    chkpnt=300;

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1267: FILE: arch/i386/kernel/process.c:518:
+	if (chkpnt<300) {
 	          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1268: FILE: arch/i386/kernel/process.c:519:
+	    chkpnt=300;
 	          ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1269: FILE: arch/i386/kernel/process.c:520:
+	    memcpy (swapper_pg_dir, swapper_pg_dir + USER_PGD_PTRS,

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#1270: FILE: arch/i386/kernel/process.c:521:
+		    sizeof (swapper_pg_dir [0]) * KERNEL_PGD_PTRS);

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1270: FILE: arch/i386/kernel/process.c:521:
+		    sizeof (swapper_pg_dir [0]) * KERNEL_PGD_PTRS);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1275: FILE: arch/i386/kernel/process.c:526:
+	/* Make sure the first page is mapped to the start of physical memory.
+	   It is normally not mapped, to trap kernel NULL pointer dereferences.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1278: FILE: arch/i386/kernel/process.c:529:
+	if (chkpnt<400) {
+	    int page;

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1278: FILE: arch/i386/kernel/process.c:529:
+	if (chkpnt<400) {
 	          ^

WARNING:TABSTOP: Statements should start on a tabstop
#1279: FILE: arch/i386/kernel/process.c:530:
+	    int page;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1281: FILE: arch/i386/kernel/process.c:532:
+	    chkpnt=400;
 	          ^

WARNING:TABSTOP: Statements should start on a tabstop
#1282: FILE: arch/i386/kernel/process.c:533:
+	    for (page=0; page < ((FREEMEMORY+PAGE_SIZE-1) >> PAGE_SHIFT); page++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1282: FILE: arch/i386/kernel/process.c:533:
+	    for (page=0; page < ((FREEMEMORY+PAGE_SIZE-1) >> PAGE_SHIFT); page++)
 	             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1282: FILE: arch/i386/kernel/process.c:533:
+	    for (page=0; page < ((FREEMEMORY+PAGE_SIZE-1) >> PAGE_SHIFT); page++)
 	                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1282: FILE: arch/i386/kernel/process.c:533:
+	    for (page=0; page < ((FREEMEMORY+PAGE_SIZE-1) >> PAGE_SHIFT); page++)
 	                                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1286: FILE: arch/i386/kernel/process.c:537:
+^I$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1291: FILE: arch/i386/kernel/process.c:542:
+	if (chkpnt<500) {
+	    chkpnt=500;

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1291: FILE: arch/i386/kernel/process.c:542:
+	if (chkpnt<500) {
 	          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1292: FILE: arch/i386/kernel/process.c:543:
+	    chkpnt=500;
 	          ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1293: FILE: arch/i386/kernel/process.c:544:
+	    asm volatile("movl %0,%%cr3": :"r" (__pa(swapper_pg_dir)));
 	                                ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1293: FILE: arch/i386/kernel/process.c:544:
+	    asm volatile("movl %0,%%cr3": :"r" (__pa(swapper_pg_dir)));
 	                                  ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1298: FILE: arch/i386/kernel/process.c:549:
+	if (chkpnt<600) {
+	    chkpnt=600;

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1298: FILE: arch/i386/kernel/process.c:549:
+	if (chkpnt<600) {
 	          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1299: FILE: arch/i386/kernel/process.c:550:
+	    chkpnt=600;
 	          ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1310: FILE: arch/i386/kernel/process.c:561:
+	/* For the switch to real mode, copy some code to low memory, out of
+	   the way of BIOS variables. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1310: FILE: arch/i386/kernel/process.c:561:
+	   the way of BIOS variables. */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1312: FILE: arch/i386/kernel/process.c:563:
+	if (chkpnt<700) {
+	    chkpnt=700;

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1312: FILE: arch/i386/kernel/process.c:563:
+	if (chkpnt<700) {
 	          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1313: FILE: arch/i386/kernel/process.c:564:
+	    chkpnt=700;
 	          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1314: FILE: arch/i386/kernel/process.c:565:
+^I    memset ((char *)CODEORIGIN, 0, 0x1000-CODEORIGIN); /* get a clean first $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1314: FILE: arch/i386/kernel/process.c:565:
+	    memset ((char *)CODEORIGIN, 0, 0x1000-CODEORIGIN); /* get a clean first 

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1314: FILE: arch/i386/kernel/process.c:565:
+	    memset ((char *)CODEORIGIN, 0, 0x1000-CODEORIGIN); /* get a clean first 
 	                                         ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1316: FILE: arch/i386/kernel/process.c:566:
+	    memset ((char *)CODEORIGIN, 0, 0x1000-CODEORIGIN); /* get a clean first 
+	    chkpnt++;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1319: FILE: arch/i386/kernel/process.c:569:
+	    memcpy ((char *)CODEORIGIN, kmsgdump, kmsgdump_end-kmsgdump);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1319: FILE: arch/i386/kernel/process.c:569:
+	    memcpy ((char *)CODEORIGIN, kmsgdump, kmsgdump_end-kmsgdump);
 	                                                      ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1324: FILE: arch/i386/kernel/process.c:574:
+	if (chkpnt<800) {
+	    char *c;

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1324: FILE: arch/i386/kernel/process.c:574:
+	if (chkpnt<800) {
 	          ^

WARNING:TABSTOP: Statements should start on a tabstop
#1325: FILE: arch/i386/kernel/process.c:575:
+	    char *c;

WARNING:TABSTOP: Statements should start on a tabstop
#1326: FILE: arch/i386/kernel/process.c:576:
+	    int *var = NULL;

WARNING:TABSTOP: Statements should start on a tabstop
#1327: FILE: arch/i386/kernel/process.c:577:
+	    int val = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1328: FILE: arch/i386/kernel/process.c:578:
+	    int val = 0;
+	    chkpnt = 800;

WARNING:TABSTOP: Statements should start on a tabstop
#1331: FILE: arch/i386/kernel/process.c:581:
+	    while (*c) {

ERROR:SPACING: space required before the open parenthesis '('
#1332: FILE: arch/i386/kernel/process.c:582:
+		switch(*c) {

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#1333: FILE: arch/i386/kernel/process.c:583:
+		case 'F' : modeflags |=  MASK_OUTPUTFAT; break;
 		         ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1333: FILE: arch/i386/kernel/process.c:583:
+		case 'F' : modeflags |=  MASK_OUTPUTFAT; break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#1334: FILE: arch/i386/kernel/process.c:584:
+		case 'R' : modeflags &= ~MASK_OUTPUTFAT; break;
 		         ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1334: FILE: arch/i386/kernel/process.c:584:
+		case 'R' : modeflags &= ~MASK_OUTPUTFAT; break;

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#1335: FILE: arch/i386/kernel/process.c:585:
+		case 'I' : modeflags |=  MASK_PANICMAN; break;
 		         ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1335: FILE: arch/i386/kernel/process.c:585:
+		case 'I' : modeflags |=  MASK_PANICMAN; break;

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#1336: FILE: arch/i386/kernel/process.c:586:
+		case 'A' : modeflags &= ~MASK_PANICMAN; break;
 		         ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1336: FILE: arch/i386/kernel/process.c:586:
+		case 'A' : modeflags &= ~MASK_PANICMAN; break;

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#1337: FILE: arch/i386/kernel/process.c:587:
+		case 'B' : modeflags |=  MASK_PANICBOOT; break;
 		         ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1337: FILE: arch/i386/kernel/process.c:587:
+		case 'B' : modeflags |=  MASK_PANICBOOT; break;

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#1338: FILE: arch/i386/kernel/process.c:588:
+		case 'H' : modeflags &= ~MASK_PANICBOOT; break;
 		         ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1338: FILE: arch/i386/kernel/process.c:588:
+		case 'H' : modeflags &= ~MASK_PANICBOOT; break;

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#1339: FILE: arch/i386/kernel/process.c:589:
+		case 'S' : modeflags |=  MASK_SAFEDUMP; break;
 		         ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1339: FILE: arch/i386/kernel/process.c:589:
+		case 'S' : modeflags |=  MASK_SAFEDUMP; break;

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#1340: FILE: arch/i386/kernel/process.c:590:
+		case 'O' : modeflags &= ~MASK_SAFEDUMP; break;
 		         ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1340: FILE: arch/i386/kernel/process.c:590:
+		case 'O' : modeflags &= ~MASK_SAFEDUMP; break;

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#1341: FILE: arch/i386/kernel/process.c:591:
+		case 'E' : modeflags |=  MASK_PANICDUMP; break;
 		         ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1341: FILE: arch/i386/kernel/process.c:591:
+		case 'E' : modeflags |=  MASK_PANICDUMP; break;

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#1342: FILE: arch/i386/kernel/process.c:592:
+		case 'D' : modeflags &= ~MASK_PANICDUMP; break;
 		         ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1342: FILE: arch/i386/kernel/process.c:592:
+		case 'D' : modeflags &= ~MASK_PANICDUMP; break;

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#1343: FILE: arch/i386/kernel/process.c:593:
+		case 'T' : var = &track; val = 0; break;
 		         ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1343: FILE: arch/i386/kernel/process.c:593:
+		case 'T' : var = &track; val = 0; break;

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#1344: FILE: arch/i386/kernel/process.c:594:
+		case 'U' : var = &unit;  val = 0; break;
 		         ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1344: FILE: arch/i386/kernel/process.c:594:
+		case 'U' : var = &unit;  val = 0; break;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#1346: FILE: arch/i386/kernel/process.c:596:
+		if (*c>='0' && *c<='9')
+		    val=(val*10)+(*c-'0');

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#1346: FILE: arch/i386/kernel/process.c:596:
+		if (*c>='0' && *c<='9')
 		      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#1346: FILE: arch/i386/kernel/process.c:596:
+		if (*c>='0' && *c<='9')
 		                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1347: FILE: arch/i386/kernel/process.c:597:
+		    val=(val*10)+(*c-'0');
 		       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1347: FILE: arch/i386/kernel/process.c:597:
+		    val=(val*10)+(*c-'0');
 		            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1347: FILE: arch/i386/kernel/process.c:597:
+		    val=(val*10)+(*c-'0');
 		                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1347: FILE: arch/i386/kernel/process.c:597:
+		    val=(val*10)+(*c-'0');
 		                    ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#1350: FILE: arch/i386/kernel/process.c:600:
+		if ((*c<'0' || *c>'9') && (var != NULL)) {
+		    *var = val;

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1350: FILE: arch/i386/kernel/process.c:600:
+		if ((*c<'0' || *c>'9') && (var != NULL)) {
 		       ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#1350: FILE: arch/i386/kernel/process.c:600:
+		if ((*c<'0' || *c>'9') && (var != NULL)) {
 		                 ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'var != NULL'
#1350: FILE: arch/i386/kernel/process.c:600:
+		if ((*c<'0' || *c>'9') && (var != NULL)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1350: FILE: arch/i386/kernel/process.c:600:
+		if ((*c<'0' || *c>'9') && (var != NULL)) {
+		    *var = val;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "var"
#1350: FILE: arch/i386/kernel/process.c:600:
+		if ((*c<'0' || *c>'9') && (var != NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TABSTOP: Statements should start on a tabstop
#1353: FILE: arch/i386/kernel/process.c:603:
+	    }

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1366: FILE: arch/i386/kernel/process.c:616:
+
+

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1367: FILE: arch/i386/kernel/process.c:617:
+	if (chkpnt<900) {
+	    chkpnt=900;

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1367: FILE: arch/i386/kernel/process.c:617:
+	if (chkpnt<900) {
 	          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1368: FILE: arch/i386/kernel/process.c:618:
+	    chkpnt=900;
 	          ^

WARNING:TABSTOP: Statements should start on a tabstop
#1369: FILE: arch/i386/kernel/process.c:619:
+	    if (callertype == DUMP_FROM_SYSRQ)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1374: FILE: arch/i386/kernel/process.c:624:
+
+

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1375: FILE: arch/i386/kernel/process.c:625:
+	if (chkpnt<1000) {
+	    chkpnt=1000;

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1375: FILE: arch/i386/kernel/process.c:625:
+	if (chkpnt<1000) {
 	          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1376: FILE: arch/i386/kernel/process.c:626:
+	    chkpnt=1000;
 	          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1377: FILE: arch/i386/kernel/process.c:627:
+^I    memset (phys_to_virt(BEGINOFMESSAGES), 0, LOG_BUF_LEN); /* $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1377: FILE: arch/i386/kernel/process.c:627:
+	    memset (phys_to_virt(BEGINOFMESSAGES), 0, LOG_BUF_LEN); /* 

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1379: FILE: arch/i386/kernel/process.c:628:
+	    memset (phys_to_virt(BEGINOFMESSAGES), 0, LOG_BUF_LEN); /* 
+	    chkpnt++;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1385: FILE: arch/i386/kernel/process.c:634:
+	/* We only have to inform the Bios to where we need to jump,
+	   and initialize an image of the register bank in memory. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1385: FILE: arch/i386/kernel/process.c:634:
+	   and initialize an image of the register bank in memory. */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1386: FILE: arch/i386/kernel/process.c:635:
+	if (chkpnt<1100) {
+	    chkpnt=1100;

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1386: FILE: arch/i386/kernel/process.c:635:
+	if (chkpnt<1100) {
 	          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1387: FILE: arch/i386/kernel/process.c:636:
+	    chkpnt=1100;
 	          ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1388: FILE: arch/i386/kernel/process.c:637:
+^I    *((unsigned short *)(BOOTSTACKFRAME+0x16)) = 0;^I       ^I/* CS */$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1388: FILE: arch/i386/kernel/process.c:637:
+	    *((unsigned short *)(BOOTSTACKFRAME+0x16)) = 0;	       	/* CS */
 	                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1390: FILE: arch/i386/kernel/process.c:639:
+	    *((unsigned short *)(BOOTSTACKFRAME+0x14)) = CODEORIGIN;	/* IP */
 	                                       ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1395: FILE: arch/i386/kernel/process.c:644:
+	    *((unsigned short *)0x469) = ((int)BOOTSTACKFRAME)>>4 & 0xF000;
 	                                                      ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1400: FILE: arch/i386/kernel/process.c:649:
+	if (chkpnt<1200) {
+	    chkpnt=1200;

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1400: FILE: arch/i386/kernel/process.c:649:
+	if (chkpnt<1200) {
 	          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1401: FILE: arch/i386/kernel/process.c:650:
+	    chkpnt=1200;
 	          ^

WARNING:TABSTOP: Statements should start on a tabstop
#1402: FILE: arch/i386/kernel/process.c:651:
+	    for (;;) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1404: FILE: arch/i386/kernel/process.c:653:
+		int i;
+		for (i=0; i<100; i++) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#1404: FILE: arch/i386/kernel/process.c:653:
+		for (i=0; i<100; i++) {
+		    kb_wait();

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1404: FILE: arch/i386/kernel/process.c:653:
+		for (i=0; i<100; i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1404: FILE: arch/i386/kernel/process.c:653:
+		for (i=0; i<100; i++) {
 		           ^

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1406: FILE: arch/i386/kernel/process.c:655:
+		    udelay(50);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1407: FILE: arch/i386/kernel/process.c:656:
+		    outb(0xfe,0x64);         /* pulse reset low */
 		             ^

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1408: FILE: arch/i386/kernel/process.c:657:
+		    udelay(50);

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1411: FILE: arch/i386/kernel/process.c:660:
+		__asm__ __volatile__("lidt %0": :"m" (no_idt));
 		                              ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#1411: FILE: arch/i386/kernel/process.c:660:
+		__asm__ __volatile__("lidt %0": :"m" (no_idt));
 		                                ^

WARNING:TABSTOP: Statements should start on a tabstop
#1413: FILE: arch/i386/kernel/process.c:662:
+	    }

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#1450: FILE: Documentation/kmsgdump.txt:21:
+   - after a kernel panic has occured, a dump may be automatically
                               ^^^^^^^

WARNING:TYPO_SPELLING: 'succesfully' may be misspelled - perhaps 'successfully'?
#1454: FILE: Documentation/kmsgdump.txt:25:
+chances to complete the dump succesfully, the CPU is rebooted in
                              ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#1458: FILE: Documentation/kmsgdump.txt:29:
+occured, it is IMPOSSIBLE TO CONTINUE TO WORK WITH THE CURRENT
 ^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1471: FILE: Documentation/kmsgdump.txt:42:
+Even if there are cases in which you can dump at the end of a diskette $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1492: FILE: Documentation/kmsgdump.txt:62:
+even kmsgdump can cause recursive crashes (this has been reported to me $

WARNING:TYPO_SPELLING: 'succesful' may be misspelled - perhaps 'successful'?
#1541: FILE: Documentation/kmsgdump.txt:110:
+After a succesful dump or print, 3 quick beeps are played. In case of an 
         ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1541: FILE: Documentation/kmsgdump.txt:110:
+After a succesful dump or print, 3 quick beeps are played. In case of an $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1567: FILE: Documentation/kmsgdump.txt:135:
+disabled, the dump is performed with the current parameters (unit, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1601: FILE: Documentation/kmsgdump.txt:168:
+you should accord the size in "include/asm/kmsgdump.h", parameter $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1651: FILE: Documentation/kmsgdump.txt:217:
+the beginning of the floppy in the drive and will look for the word $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1654: FILE: Documentation/kmsgdump.txt:219:
+will only be performed if this word is found as-is. So if you enable safe $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1663: FILE: Documentation/kmsgdump.txt:227:
+    - a diskette on which a dump has been done in FAT mode is re-usable $

WARNING:TYPO_SPELLING: 'formated' may be misspelled - perhaps 'formatted'?
#1681: FILE: Documentation/kmsgdump.txt:244:
+reason, when a diskette is formated in FAT mode, a small code is inserted on
                            ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1684: FILE: Documentation/kmsgdump.txt:247:
+right on specific systems, so you may have to do some tests before $

WARNING:TYPO_SPELLING: 'formated' may be misspelled - perhaps 'formatted'?
#1698: FILE: Documentation/kmsgdump.txt:260:
+If the disk has been formated as FAT12, you'll find on it a file
                      ^^^^^^^^

WARNING:TYPO_SPELLING: 'msdos' may be misspelled - perhaps ''?
#1705: FILE: Documentation/kmsgdump.txt:267:
+       # mount -rt msdos /dev/fd0 /mnt
                    ^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1752: FILE: Documentation/kmsgdump.txt:314:
+When a file server crashes, it may FSCK during a long time. There are good $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1754: FILE: Documentation/kmsgdump.txt:315:
+about how to dramatically reduce FSCK time, but at least consider these $

WARNING:TYPO_SPELLING: 'devide' may be misspelled - perhaps 'divide'?
#1759: FILE: Documentation/kmsgdump.txt:320:
+      depending on hardware dependencies. In the better case, you can devide
                                                                       ^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1764: FILE: Documentation/kmsgdump.txt:325:
+      for example, it's not always necessary to mount everything RW. So $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1771: FILE: Documentation/kmsgdump.txt:331:
+ $

WARNING:TYPO_SPELLING: 'formating' may be misspelled - perhaps 'formatting'?
#1774: FILE: Documentation/kmsgdump.txt:334:
+    - change the number of bytes by inode and the block size when formating
                                                                   ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1775: FILE: Documentation/kmsgdump.txt:335:
+      your FS. I personnaly use 16384 bytes/inode, a block size of 4096 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1778: FILE: Documentation/kmsgdump.txt:337:
+      waste about 1% space, but total mount time is about 1 second for a $

WARNING:TYPO_SPELLING: 'loosy' may be misspelled - perhaps 'lossy'?
#1781: FILE: Documentation/kmsgdump.txt:339:
+      loosy power-off is less than 3 minutes.
       ^^^^^

WARNING:TYPO_SPELLING: 'informations' may be misspelled - perhaps 'information'?
#1790: FILE: Documentation/kmsgdump.txt:348:
+For more informations, you can email me at :
          ^^^^^^^^^^^^

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1814: FILE: drivers/char/sysrq.c:84:
+#if defined(__i386__) && defined(CONFIG_KMSGDUMP)

Architecture specific defines should be avoided wherever
possible.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1816: FILE: drivers/char/sysrq.c:86:
+^I$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1817: FILE: drivers/char/sysrq.c:87:
+static void sysrq_handle_dump(int key, struct pt_regs *pt_regs,
+		struct kbd_struct *kbd, struct tty_struct *tty) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1818: FILE: drivers/char/sysrq.c:88:
+static void sysrq_handle_dump(int key, struct pt_regs *pt_regs,
+		struct kbd_struct *kbd, struct tty_struct *tty) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1819: FILE: drivers/char/sysrq.c:89:
+^I^Imachine_dump(1);/* 1 = "dump called from SysRq, so interactive mode $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1821: FILE: drivers/char/sysrq.c:90:
+		machine_dump(1);/* 1 = "dump called from SysRq, so interactive mode 
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1830: FILE: drivers/char/sysrq.c:99:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1832: FILE: drivers/char/sysrq.c:101:
+
+

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1841: FILE: drivers/char/sysrq.c:390:
+#if defined(__i386__) && defined(CONFIG_KMSGDUMP)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1856: FILE: include/asm-i386/kmsgdump.h:1:
+/*

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1873: FILE: include/asm-i386/kmsgdump.h:18:
+#define FREEMEMORY	(BEGINOFMESSAGES+LOG_BUF_LEN)
                   	                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1875: FILE: include/asm-i386/kmsgdump.h:20:
+#define BOOTSTACKFRAME^I0xFB0^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1912: FILE: include/asm-i386/kmsgdump.h:57:
+/* At the moment, most versions of gas are broken so you can't activate
+   the following line which is the correct one. However, as long as the

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1913: FILE: include/asm-i386/kmsgdump.h:58:
+   constant SECTPERCLUST equals 1, the next line can be used as a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1916: FILE: include/asm-i386/kmsgdump.h:60:
+   definition of NBCLUSTERS WITHOUT involving the divide operation which $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1918: FILE: include/asm-i386/kmsgdump.h:61:
+   gas interpret as a comment. Versions from binutils 2.9.4 and later seem $

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1923: FILE: include/asm-i386/kmsgdump.h:65:
+#  define	NBCLUSTERS		((NBHEADS*NBTRACKS*NBSECT)/SECTPERCLUST)
          	          		         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1923: FILE: include/asm-i386/kmsgdump.h:65:
+#  define	NBCLUSTERS		((NBHEADS*NBTRACKS*NBSECT)/SECTPERCLUST)
          	          		                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1923: FILE: include/asm-i386/kmsgdump.h:65:
+#  define	NBCLUSTERS		((NBHEADS*NBTRACKS*NBSECT)/SECTPERCLUST)
          	          		                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1925: FILE: include/asm-i386/kmsgdump.h:67:
+#  define	NBCLUSTERS		(NBHEADS*NBTRACKS*NBSECT)
          	          		        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1925: FILE: include/asm-i386/kmsgdump.h:67:
+#  define	NBCLUSTERS		(NBHEADS*NBTRACKS*NBSECT)
          	          		                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1928: FILE: include/asm-i386/kmsgdump.h:70:
+#define	FATSIZE			((NBCLUSTERS*3+1023)>>10)
        	       			            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1928: FILE: include/asm-i386/kmsgdump.h:70:
+#define	FATSIZE			((NBCLUSTERS*3+1023)>>10)
        	       			              ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1928: FILE: include/asm-i386/kmsgdump.h:70:
+#define	FATSIZE			((NBCLUSTERS*3+1023)>>10)
        	       			                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1941: FILE: include/asm-i386/kmsgdump.h:83:
+#define MKWORD(h,l)		((h)<<8|(l))
                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1941: FILE: include/asm-i386/kmsgdump.h:83:
+#define MKWORD(h,l)		((h)<<8|(l))
                    		    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1941: FILE: include/asm-i386/kmsgdump.h:83:
+#define MKWORD(h,l)		((h)<<8|(l))
                    		       ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1945: FILE: include/asm-i386/kmsgdump.h:87:
+extern void kmsgdump(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1946: FILE: include/asm-i386/kmsgdump.h:88:
+extern void kmsgdump_end(void);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1959: FILE: include/linux/sysctl.h:120:
+	KERN_KMSGDUMP=44,	/* string: kmsgdump flags. Reuse Stop-A ID */
 	             ^

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1971: FILE: kernel/panic.c:20:
+#if defined(__i386__) && defined(CONFIG_KMSGDUMP)

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1982: FILE: kernel/panic.c:73:
+#if defined(__i386__) && defined(CONFIG_KMSGDUMP)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1984: FILE: kernel/panic.c:75:
+	/* We allow SysRq to be used for <panic_timeout> seconds, and
+	   then the dump is forced. This way, if IRQs are frozen and

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1991: FILE: kernel/panic.c:82:
+^Iprintk(KERN_EMERG "Dumping messages in %d seconds : last chance for $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1991: FILE: kernel/panic.c:82:
+	printk(KERN_EMERG "Dumping messages in %d seconds : last chance for 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1999: FILE: kernel/panic.c:89:
+^Imachine_dump(0);        /* 0 tells machine_dump that it's called from $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2002: FILE: kernel/panic.c:91:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2003: FILE: kernel/panic.c:92:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2003: FILE: kernel/panic.c:92:
+		
+	

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#2015: FILE: kernel/printk.c:310:
+#if defined(__i386__) && defined(CONFIG_KMSGDUMP)

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#2024: FILE: kernel/printk.c:319:
+void dump_syslog(char *buf) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2028: FILE: kernel/printk.c:323:
+^I^Ireturn;^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2038: FILE: kernel/printk.c:333:
+	for (i = 0; (i < count) && (j != log_end); i++, j++) {
+		buf[i] = LOG_BUF(j);
+	}

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#2056: FILE: kernel/sysctl.c:80:
+#if defined(__i386__) && defined(CONFIG_KMSGDUMP)

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#2067: FILE: kernel/sysctl.c:245:
+#if defined(__i386__) && defined(CONFIG_KMSGDUMP)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000413239.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 192 errors, 94 warnings, 42 checks, 1952 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000413239.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
