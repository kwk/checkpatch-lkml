WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
Using this driver, users can handle Fn+Fx key (except for Fn+F3) with acpid.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#40: 
# /etc/acpi/events/hotkey

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#46: 
#!/bin/sh

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
# Take care about the way events are reported

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#68: 
# This is a BitKeeper generated diff -Nru style patch.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#69: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#70: 
# ChangeSet

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#71: 
#   2004/07/26 11:50:39+09:00 miura@da-cha.org 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#72: 
#   Panasonic Laptop Extra driver.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#73: 
#   This adds support of hotkey (Fn+Fx) on Panasonic Lets note Laptop series.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#74: 
#   Loding this driver, user can get event through acpid like "HKEY HKEY 0000080 000001"

WARNING:TYPO_SPELLING: 'Loding' may be misspelled - perhaps 'Loading'?
#74: 
#   Loding this driver, user can get event through acpid like "HKEY HKEY 0000080 000001"
    ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#75: 
#   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#76: 
#   Signed-off-by: Hiroshi Miura <miura@da-cha.org>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#77: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#78: 
# drivers/acpi/pcc_acpi.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#79: 
#   2004/07/26 11:50:23+09:00 miura@da-cha.org +518 -0

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#80: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#81: 
# drivers/acpi/pcc_acpi.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#82: 
#   2004/07/26 11:50:23+09:00 miura@da-cha.org +0 -0

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#83: 
#   BitKeeper file /home/miura/kernel/linux-2.6.7-hm/drivers/acpi/pcc_acpi.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#84: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#85: 
# drivers/acpi/Makefile

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#86: 
#   2004/07/26 11:50:23+09:00 miura@da-cha.org +1 -0

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#87: 
#   add Panasonic Laptop Extra driver entry

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#88: 
# 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#89: 
# drivers/acpi/Kconfig

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#90: 
#   2004/07/26 11:50:23+09:00 miura@da-cha.org +20 -0

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#91: 
#   add Panasonic Laptop Extra driver entry

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#92: 
# 

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#94: 
--- a/drivers/acpi/Kconfig	2004-07-27 12:44:53 +09:00

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#100: FILE: drivers/acpi/Kconfig:207:
+config ACPI_PCC
+	tristate "Panasonic Laptop Extras"
+	depends on X86
+	depends on ACPI_INTERPRETER
+	default m
+	---help---
+	  This driver adds support for access to certain system settings
+	  on panasonic Let's Note laptops. 
+
+	  On these machines, all hotkey is handled through the ACPI.
+	  This driver is required for access to controls not covered
+	  by the general ACPI drivers, such as LCD brightness, video output,
+	  etc.
+
+	  More information about this driver will be available at
+	  <http://www.da-cha.org/letsnote/>
+
+	  If you have a panasonic lets note laptop (such as the CF-T2, Y2,
+	  R2, W2, R3), say Y.
+
 config ACPI_DEBUG
 	bool "Debug Statements"
 	depends on ACPI_INTERPRETER

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#107: FILE: drivers/acpi/Kconfig:214:
+^I  on panasonic Let's Note laptops. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#136: FILE: drivers/acpi/pcc_acpi.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#143: FILE: drivers/acpi/pcc_acpi.c:8:
+ *  it under the terms of the GNU General Public License version 2 as $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#151: FILE: drivers/acpi/pcc_acpi.c:16:
+ *  along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#152: FILE: drivers/acpi/pcc_acpi.c:17:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:TYPO_SPELLING: 'retrive' may be misspelled - perhaps 'retrieve'?
#162: FILE: drivers/acpi/pcc_acpi.c:27:
+ *		-       add debug function to retrive SIFR
   		                              ^^^^^^^

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#186: FILE: drivers/acpi/pcc_acpi.c:51:
+#include <asm/uaccess.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#198: FILE: drivers/acpi/pcc_acpi.c:63:
+ * Define ACPI PATHs $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#207: FILE: drivers/acpi/pcc_acpi.c:72:
+#define DEVICE_NAME_HKEY ^I"\\_SB_.HKEY"$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#220: FILE: drivers/acpi/pcc_acpi.c:85:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#236: FILE: drivers/acpi/pcc_acpi.c:101:
+static int acpi_hotkey_add (struct acpi_device *device);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#237: FILE: drivers/acpi/pcc_acpi.c:102:
+static int acpi_hotkey_remove (struct acpi_device *device, int type);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#255: FILE: drivers/acpi/pcc_acpi.c:120:
+
+

WARNING:INLINE: plain inline is preferred over __inline__
#259: FILE: drivers/acpi/pcc_acpi.c:124:
+static __inline__ void

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#260: FILE: drivers/acpi/pcc_acpi.c:125:
+_set_bit(u32* word, u32 mask, int value)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#268: FILE: drivers/acpi/pcc_acpi.c:133:
+is_valid_acpi_path(const char* methodName)

CHECK:CAMELCASE: Avoid CamelCase: <methodName>
#268: FILE: drivers/acpi/pcc_acpi.c:133:
+is_valid_acpi_path(const char* methodName)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#273: FILE: drivers/acpi/pcc_acpi.c:138:
+	status = acpi_get_handle(0, (char*)methodName, &handle);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#277: FILE: drivers/acpi/pcc_acpi.c:142:
+#if 0

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#279: FILE: drivers/acpi/pcc_acpi.c:144:
+write_acpi_int(const char* methodName, int val)

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(in_objs)
#285: FILE: drivers/acpi/pcc_acpi.c:150:
+	params.count = sizeof(in_objs)/sizeof(in_objs[0]);

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#285: FILE: drivers/acpi/pcc_acpi.c:150:
+	params.count = sizeof(in_objs)/sizeof(in_objs[0]);
 	                              ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#290: FILE: drivers/acpi/pcc_acpi.c:155:
+	status = acpi_evaluate_object(0, (char*)methodName, &params, 0);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#296: FILE: drivers/acpi/pcc_acpi.c:161:
+read_acpi_int(acpi_handle handle, const char* methodName, int* pVal)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#296: FILE: drivers/acpi/pcc_acpi.c:161:
+read_acpi_int(acpi_handle handle, const char* methodName, int* pVal)

CHECK:CAMELCASE: Avoid CamelCase: <pVal>
#296: FILE: drivers/acpi/pcc_acpi.c:161:
+read_acpi_int(acpi_handle handle, const char* methodName, int* pVal)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#305: FILE: drivers/acpi/pcc_acpi.c:170:
+	status = acpi_evaluate_object(handle, (char*)methodName, 0, &results);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#307: FILE: drivers/acpi/pcc_acpi.c:172:
+		printk(KERN_INFO "acpi evaluate error on %s\n", methodName);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#314: FILE: drivers/acpi/pcc_acpi.c:179:
+		printk(KERN_INFO "return value is not int\n");

ERROR:POINTER_LOCATION: "foo*	bar" should be "foo *bar"
#321: FILE: drivers/acpi/pcc_acpi.c:186:
+static struct proc_dir_entry*	acpi_pcc_dir;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#323: FILE: drivers/acpi/pcc_acpi.c:188:
+typedef struct _ProcItem

CHECK:CAMELCASE: Avoid CamelCase: <_ProcItem>
#323: FILE: drivers/acpi/pcc_acpi.c:188:
+typedef struct _ProcItem

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#324: FILE: drivers/acpi/pcc_acpi.c:189:
+typedef struct _ProcItem
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#325: FILE: drivers/acpi/pcc_acpi.c:190:
+	const char* name;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#326: FILE: drivers/acpi/pcc_acpi.c:191:
+	char* (*read_func)(char*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char*' should also have an identifier name
#326: FILE: drivers/acpi/pcc_acpi.c:191:
+	char* (*read_func)(char*);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char*' should also have an identifier name
#327: FILE: drivers/acpi/pcc_acpi.c:192:
+	unsigned long (*write_func)(const char*, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#327: FILE: drivers/acpi/pcc_acpi.c:192:
+	unsigned long (*write_func)(const char*, unsigned long);

CHECK:CAMELCASE: Avoid CamelCase: <ProcItem>
#328: FILE: drivers/acpi/pcc_acpi.c:193:
+} ProcItem;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#330: FILE: drivers/acpi/pcc_acpi.c:195:
+
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#333: FILE: drivers/acpi/pcc_acpi.c:198:
+dispatch_read(char* page, char** start, off_t off, int count, int* eof,

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#333: FILE: drivers/acpi/pcc_acpi.c:198:
+dispatch_read(char* page, char** start, off_t off, int count, int* eof,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#333: FILE: drivers/acpi/pcc_acpi.c:198:
+dispatch_read(char* page, char** start, off_t off, int count, int* eof,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#334: FILE: drivers/acpi/pcc_acpi.c:199:
+dispatch_read(char* page, char** start, off_t off, int count, int* eof,
+	ProcItem* item)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#334: FILE: drivers/acpi/pcc_acpi.c:199:
+	ProcItem* item)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#336: FILE: drivers/acpi/pcc_acpi.c:201:
+	char* p = page;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#344: FILE: drivers/acpi/pcc_acpi.c:209:
+	if (len <= off+count) *eof = 1;
 	              ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#344: FILE: drivers/acpi/pcc_acpi.c:209:
+	if (len <= off+count) *eof = 1;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#347: FILE: drivers/acpi/pcc_acpi.c:212:
+	if (len>count) len = count;
 	       ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#347: FILE: drivers/acpi/pcc_acpi.c:212:
+	if (len>count) len = count;

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#348: FILE: drivers/acpi/pcc_acpi.c:213:
+	if (len<0) len = 0;
 	       ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#348: FILE: drivers/acpi/pcc_acpi.c:213:
+	if (len<0) len = 0;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#353: FILE: drivers/acpi/pcc_acpi.c:218:
+dispatch_write(struct file* file, __user const char* buffer,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#353: FILE: drivers/acpi/pcc_acpi.c:218:
+dispatch_write(struct file* file, __user const char* buffer,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#354: FILE: drivers/acpi/pcc_acpi.c:219:
+dispatch_write(struct file* file, __user const char* buffer,
+	unsigned long count, ProcItem* item)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#354: FILE: drivers/acpi/pcc_acpi.c:219:
+	unsigned long count, ProcItem* item)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#357: FILE: drivers/acpi/pcc_acpi.c:222:
+	char* tmp_buffer;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#367: FILE: drivers/acpi/pcc_acpi.c:232:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#367: FILE: drivers/acpi/pcc_acpi.c:232:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#380: FILE: drivers/acpi/pcc_acpi.c:245:
+write_chgd(const char* buffer, unsigned long count)

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#385: FILE: drivers/acpi/pcc_acpi.c:250:
+	if (sscanf(buffer, "%i", &value) == 1 && value >= 0 && value < 2) {
+		if (value == 0) 
+			/* do nothing */
+			status = AE_OK;
+		else {
+			status = acpi_evaluate_object(0, METHOD_CHGD, 0 , 0);
+		}
+		if (ACPI_FAILURE(status)) {
+			printk(KERN_INFO LOGPREFIX "fail evaluate CHGD()\n");
+			return -EFAULT;
+		}
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#386: FILE: drivers/acpi/pcc_acpi.c:251:
+^I^Iif (value == 0) $

CHECK:BRACES: braces {} should be used on all arms of this statement
#386: FILE: drivers/acpi/pcc_acpi.c:251:
+		if (value == 0) 
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#389: FILE: drivers/acpi/pcc_acpi.c:254:
+		else {

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#390: FILE: drivers/acpi/pcc_acpi.c:255:
+			status = acpi_evaluate_object(0, METHOD_CHGD, 0 , 0);
 			                                                ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#393: FILE: drivers/acpi/pcc_acpi.c:258:
+			printk(KERN_INFO LOGPREFIX "fail evaluate CHGD()\n");

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#399: FILE: drivers/acpi/pcc_acpi.c:264:
+
+}

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#402: FILE: drivers/acpi/pcc_acpi.c:267:
+read_nothing(char* p)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#410: FILE: drivers/acpi/pcc_acpi.c:275:
+read_hkey_status(char* p)

ERROR:SPACING: space required before the open brace '{'
#417: FILE: drivers/acpi/pcc_acpi.c:282:
+	if (!read_acpi_int(NULL, DEVICE_NAME_HKEY "." METHOD_HKEY_SQTY, &num_sifr)){

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#418: FILE: drivers/acpi/pcc_acpi.c:283:
+		printk(KERN_INFO LOGPREFIX "evaluation error HKEY.SQTY\n");

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#422: FILE: drivers/acpi/pcc_acpi.c:287:
+	status = acpi_evaluate_object(NULL, DEVICE_NAME_HKEY "." METHOD_HKEY_SINF, 0 , &buffer);
 	                                                                             ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#424: FILE: drivers/acpi/pcc_acpi.c:289:
+		printk(KERN_INFO LOGPREFIX "evaluation error HEKY.SINF\n");

CHECK:SPACING: No space is necessary after a cast
#427: FILE: drivers/acpi/pcc_acpi.c:292:
+	hkey = (union acpi_object *) buffer.pointer;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hkey->type != ACPI_TYPE_PACKAGE'
#428: FILE: drivers/acpi/pcc_acpi.c:293:
+	if (!hkey || (hkey->type != ACPI_TYPE_PACKAGE)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#429: FILE: drivers/acpi/pcc_acpi.c:294:
+		printk(KERN_INFO LOGPREFIX "Invalid HKEY.SINF\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#432: FILE: drivers/acpi/pcc_acpi.c:297:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#434: FILE: drivers/acpi/pcc_acpi.c:299:
+		printk(KERN_INFO LOGPREFIX "SQTY is not equal to SINF length?\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around hkey->package.elements[i]
#439: FILE: drivers/acpi/pcc_acpi.c:304:
+		union acpi_object *element = &(hkey->package.elements[i]);

WARNING:LINE_SPACING: Missing a blank line after declarations
#440: FILE: drivers/acpi/pcc_acpi.c:305:
+		union acpi_object *element = &(hkey->package.elements[i]);
+		if (likely(element->type == ACPI_TYPE_INTEGER)) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#440: FILE: drivers/acpi/pcc_acpi.c:305:
+		if (likely(element->type == ACPI_TYPE_INTEGER)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#442: FILE: drivers/acpi/pcc_acpi.c:307:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#443: FILE: drivers/acpi/pcc_acpi.c:308:
+			printk(KERN_INFO LOGPREFIX "Invalid HKEY.SINF value\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#450: FILE: drivers/acpi/pcc_acpi.c:315:
+
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#452: FILE: drivers/acpi/pcc_acpi.c:317:
+read_version(char* p)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#459: FILE: drivers/acpi/pcc_acpi.c:324:
+
+

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#468: FILE: drivers/acpi/pcc_acpi.c:333:
+	if (!status) {
[...]
+	} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#469: FILE: drivers/acpi/pcc_acpi.c:334:
+		printk(KERN_INFO LOGPREFIX "error getting hotkey status\n");

CHECK:BRACES: Unbalanced braces around else statement
#470: FILE: drivers/acpi/pcc_acpi.c:335:
+	} else

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#473: FILE: drivers/acpi/pcc_acpi.c:338:
+	return (status);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:SPACING: No space is necessary after a cast
#479: FILE: drivers/acpi/pcc_acpi.c:344:
+	struct acpi_hotkey	*hotkey = (struct acpi_hotkey *) data;

ERROR:SPACING: space required before the open parenthesis '('
#484: FILE: drivers/acpi/pcc_acpi.c:349:
+	switch(event) {

WARNING:RETURN_VOID: void function return statements are not generally useful
#495: FILE: drivers/acpi/pcc_acpi.c:360:
+	return;
+}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#498: FILE: drivers/acpi/pcc_acpi.c:363:
+acpi_hotkey_add (struct acpi_device *device)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*hotkey)...) over kmalloc(sizeof(struct acpi_hotkey)...)
#507: FILE: drivers/acpi/pcc_acpi.c:372:
+	hotkey = kmalloc(sizeof(struct acpi_hotkey), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#519: FILE: drivers/acpi/pcc_acpi.c:384:
+	status = acpi_install_notify_handler (

ERROR:TRAILING_WHITESPACE: trailing whitespace
#524: FILE: drivers/acpi/pcc_acpi.c:389:
+^Iif (ACPI_FAILURE(status)) $

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#530: FILE: drivers/acpi/pcc_acpi.c:395:
+	return (result);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#544: FILE: drivers/acpi/pcc_acpi.c:409:
+	status = acpi_remove_notify_handler(hotkey->handle,
+		    ACPI_DEVICE_NOTIFY, acpi_hotkey_notify);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#546: FILE: drivers/acpi/pcc_acpi.c:411:
+		printk(KERN_INFO LOGPREFIX "Error removing notify handler\n");

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#550: FILE: drivers/acpi/pcc_acpi.c:415:
+	return(0);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#555: FILE: drivers/acpi/pcc_acpi.c:420:
+ * proc and module init
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#558: FILE: drivers/acpi/pcc_acpi.c:423:
+ProcItem pcc_proc_items[] =
+{

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#560: FILE: drivers/acpi/pcc_acpi.c:425:
+	{ "chgd"   , read_nothing , write_chgd},
 	           ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#560: FILE: drivers/acpi/pcc_acpi.c:425:
+	{ "chgd"   , read_nothing , write_chgd},
 	                          ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#563: FILE: drivers/acpi/pcc_acpi.c:428:
+	{ "version", read_version , NULL},
 	                          ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#564: FILE: drivers/acpi/pcc_acpi.c:429:
+^I{ NULL ^I   , NULL^I  , NULL},$

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#564: FILE: drivers/acpi/pcc_acpi.c:429:
+	{ NULL 	   , NULL	  , NULL},
 	       	   ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#564: FILE: drivers/acpi/pcc_acpi.c:429:
+	{ NULL 	   , NULL	  , NULL},
 	       	         	  ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#568: FILE: drivers/acpi/pcc_acpi.c:433:
+add_device(ProcItem *proc_items, struct proc_dir_entry* proc_entry)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#570: FILE: drivers/acpi/pcc_acpi.c:435:
+	struct proc_dir_entry* proc;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#571: FILE: drivers/acpi/pcc_acpi.c:436:
+	ProcItem* item;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#573: FILE: drivers/acpi/pcc_acpi.c:438:
+	for (item = proc_items; item->name; ++item)
+	{

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#576: FILE: drivers/acpi/pcc_acpi.c:441:
+		proc = create_proc_read_entry(item->name,
+			S_IFREG | S_IRUGO | S_IWUSR,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#576: FILE: drivers/acpi/pcc_acpi.c:441:
+			S_IFREG | S_IRUGO | S_IWUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#577: FILE: drivers/acpi/pcc_acpi.c:442:
+			proc_entry, (read_proc_t*)dispatch_read, item);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#581: FILE: drivers/acpi/pcc_acpi.c:446:
+			proc->write_proc = (write_proc_t*)dispatch_write;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#587: FILE: drivers/acpi/pcc_acpi.c:452:
+
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#593: FILE: drivers/acpi/pcc_acpi.c:458:
+	if (unlikely(!(acpi_pcc_dir = proc_mkdir(PROC_PCC, acpi_root_dir))))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space required before the open brace '{'
#598: FILE: drivers/acpi/pcc_acpi.c:463:
+	if (ACPI_FAILURE(status)){

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#607: FILE: drivers/acpi/pcc_acpi.c:472:
+remove_device(ProcItem *proc_items, struct proc_dir_entry* proc_entry)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#609: FILE: drivers/acpi/pcc_acpi.c:474:
+	ProcItem* item;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#613: FILE: drivers/acpi/pcc_acpi.c:478:
+	return(AE_OK);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#616: FILE: drivers/acpi/pcc_acpi.c:481:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#623: FILE: drivers/acpi/pcc_acpi.c:488:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#623: FILE: drivers/acpi/pcc_acpi.c:488:
+ $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#633: FILE: drivers/acpi/pcc_acpi.c:498:
+		printk(KERN_INFO LOGPREFIX "Error registering hotkey driver\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#635: FILE: drivers/acpi/pcc_acpi.c:500:
+	printk(KERN_INFO LOGPREFIX "ACPI PCC HotKey driver version %s\n", ACPI_PCC_VERSION);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#637: FILE: drivers/acpi/pcc_acpi.c:502:
+	return (pcc_proc_init());

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#639: FILE: drivers/acpi/pcc_acpi.c:504:
+
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#648: FILE: drivers/acpi/pcc_acpi.c:513:
+^Iacpi_bus_unregister_driver(&acpi_hotkey_driver); $

WARNING:RETURN_VOID: void function return statements are not generally useful
#650: FILE: drivers/acpi/pcc_acpi.c:515:
+	return;
+}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000264519.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 67 errors, 67 warnings, 30 checks, 549 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000264519.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
