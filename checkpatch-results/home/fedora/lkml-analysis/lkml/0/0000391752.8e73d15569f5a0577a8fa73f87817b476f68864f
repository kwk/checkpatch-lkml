WARNING:TYPO_SPELLING: 'rmove' may be misspelled - perhaps 'remove'?
#30: 
which should rmove locking problems.
             ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LONG_LINE_STRING: line length of 108 exceeds 100 columns
#64: FILE: arch/sparc64/kernel/ioctl32.c:4269:
+#define IOCTL_TABLE_START void ioctl32_foo(void) { asm volatile(".data\n.global ioctl_start\nioctl_start:");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#64: FILE: arch/sparc64/kernel/ioctl32.c:4269:
+#define IOCTL_TABLE_START void ioctl32_foo(void) { asm volatile(".data\n.global ioctl_start\nioctl_start:");

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#64: FILE: arch/sparc64/kernel/ioctl32.c:4269:
+#define IOCTL_TABLE_START void ioctl32_foo(void) { asm volatile(".data\n.global ioctl_start\nioctl_start:");

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#65: FILE: arch/sparc64/kernel/ioctl32.c:4270:
+#define IOCTL_TABLE_END asm volatile("\n.global ioctl_end\nioctl_end:\n\t.previous"); }

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#211: FILE: arch/sparc64/kernel/sparc64_ksyms.c:92:
+extern int compat_ioctl(unsigned int fd, unsigned int cmd, u32 arg);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#232: FILE: arch/sparc64/kernel/sunos_ioctl32.c:95:
+extern asmlinkage int compat_ioctl(unsigned int, unsigned int, u32);

WARNING:LONG_LINE_STRING: line length of 108 exceeds 100 columns
#409: FILE: arch/x86_64/ia32/ia32_ioctl.c:3585:
+#define IOCTL_TABLE_START void ioctl_dummy(void) { asm volatile("\n.global ioctl_start\nioctl_start:\n\t" );

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#409: FILE: arch/x86_64/ia32/ia32_ioctl.c:3585:
+#define IOCTL_TABLE_START void ioctl_dummy(void) { asm volatile("\n.global ioctl_start\nioctl_start:\n\t" );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#409: FILE: arch/x86_64/ia32/ia32_ioctl.c:3585:
+#define IOCTL_TABLE_START void ioctl_dummy(void) { asm volatile("\n.global ioctl_start\nioctl_start:\n\t" );

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#409: FILE: arch/x86_64/ia32/ia32_ioctl.c:3585:
+#define IOCTL_TABLE_START void ioctl_dummy(void) { asm volatile("\n.global ioctl_start\nioctl_start:\n\t" );

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#410: FILE: arch/x86_64/ia32/ia32_ioctl.c:3586:
+#define IOCTL_TABLE_END  asm volatile("\n.global ioctl_end;\nioctl_end:\n"); }

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#653: FILE: include/linux/ioctl32.h:24:
+	int (*handler)(unsigned int, unsigned int, unsigned long, struct file * filp);
 	                                                                        ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#653: FILE: include/linux/ioctl32.h:24:
+	int (*handler)(unsigned int, unsigned int, unsigned long, struct file * filp);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#653: FILE: include/linux/ioctl32.h:24:
+	int (*handler)(unsigned int, unsigned int, unsigned long, struct file * filp);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#653: FILE: include/linux/ioctl32.h:24:
+	int (*handler)(unsigned int, unsigned int, unsigned long, struct file * filp);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#653: FILE: include/linux/ioctl32.h:24:
+	int (*handler)(unsigned int, unsigned int, unsigned long, struct file * filp);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#684: FILE: kernel/compat.c:241:
+extern struct ioctl_trans ioctl_start[], ioctl_end[]; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#684: FILE: kernel/compat.c:241:
+extern struct ioctl_trans ioctl_start[], ioctl_end[]; 

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#696: FILE: kernel/compat.c:253:
+	hash = ioctl32_hash (trans->cmd);

CHECK:BRACES: braces {} should be used on all arms of this statement
#697: FILE: kernel/compat.c:254:
+	if (!ioctl32_hash_table[hash])
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#699: FILE: kernel/compat.c:256:
+	else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#713: FILE: kernel/compat.c:270:
+^I^Iif (ioctl_start[i].next != 0) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#714: FILE: kernel/compat.c:271:
+^I^I^Iprintk("ioctl translation %d bad\n",i); $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#714: FILE: kernel/compat.c:271:
+			printk("ioctl translation %d bad\n",i); 

ERROR:SPACING: space required after that ',' (ctx:VxV)
#714: FILE: kernel/compat.c:271:
+			printk("ioctl translation %d bad\n",i); 
 			                                   ^

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#723: FILE: kernel/compat.c:280:
+__initcall(init_sys32_ioctl);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#728: FILE: kernel/compat.c:285:
+/* Never free them really. This avoids SMP races. With a Read-Copy-Update
+   enabled kernel we could just use the RCU infrastructure for this. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#728: FILE: kernel/compat.c:285:
+   enabled kernel we could just use the RCU infrastructure for this. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#729: FILE: kernel/compat.c:286:
+static void free_ioctl(struct ioctl_trans *t) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#730: FILE: kernel/compat.c:287:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#731: FILE: kernel/compat.c:288:
+^It->cmd = 0; $

WARNING:MEMORY_BARRIER: memory barrier without comment
#732: FILE: kernel/compat.c:289:
+	mb();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#735: FILE: kernel/compat.c:292:
+} $

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#737: FILE: kernel/compat.c:294:
+int register_ioctl32_conversion(unsigned int cmd, int (*handler)(unsigned int, unsigned int, unsigned long, struct file *))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#742: FILE: kernel/compat.c:299:
+^Ilock_kernel(); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#745: FILE: kernel/compat.c:302:
+^I     t = t->next) { $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#747: FILE: kernel/compat.c:304:
+			printk("Trying to register duplicated ioctl32 handler %x\n", cmd);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#749: FILE: kernel/compat.c:306:
+^I^I^Ireturn -EINVAL; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#751: FILE: kernel/compat.c:308:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#753: FILE: kernel/compat.c:310:
+^Iif (ioctl_free_list) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#754: FILE: kernel/compat.c:311:
+^I^It = ioctl_free_list; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#755: FILE: kernel/compat.c:312:
+^I^Iioctl_free_list = t->next; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#756: FILE: kernel/compat.c:313:
+^I} else { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#757: FILE: kernel/compat.c:314:
+^I^It = kmalloc(sizeof(struct ioctl_trans), GFP_KERNEL); $

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*t)...) over kmalloc(sizeof(struct ioctl_trans)...)
#757: FILE: kernel/compat.c:314:
+		t = kmalloc(sizeof(struct ioctl_trans), GFP_KERNEL); 

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:TRAILING_WHITESPACE: trailing whitespace
#758: FILE: kernel/compat.c:315:
+^I^Iif (!t) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#763: FILE: kernel/compat.c:320:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#766: FILE: kernel/compat.c:323:
+^It->handler = handler; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#774: FILE: kernel/compat.c:331:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#776: FILE: kernel/compat.c:333:
+^I       t < (struct ioctl_trans *)ioctl_end; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#777: FILE: kernel/compat.c:334:
+} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#779: FILE: kernel/compat.c:336:
+/* Problem: $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#780: FILE: kernel/compat.c:337:
+/* Problem: 
+   This function cannot unregister duplicate ioctls, because they are not

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#782: FILE: kernel/compat.c:339:
+   When they happen we need to extend the prototype to pass the handler too. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#789: FILE: kernel/compat.c:346:
+^Ilock_kernel(); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#792: FILE: kernel/compat.c:349:
+^Iif (!t) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#795: FILE: kernel/compat.c:352:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#797: FILE: kernel/compat.c:354:
+^Iif (t->cmd == cmd) { $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#799: FILE: kernel/compat.c:356:
+			printk("%p tried to unregister builtin ioctl %x\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#801: FILE: kernel/compat.c:358:
+^I^I} else { $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#801: FILE: kernel/compat.c:358:
+		} else { 
+		ioctl32_hash_table[hash] = t->next;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#803: FILE: kernel/compat.c:360:
+^I^I^Ifree_ioctl(t); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#807: FILE: kernel/compat.c:364:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#810: FILE: kernel/compat.c:367:
+^I^Iif (t1->cmd == cmd) { $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#812: FILE: kernel/compat.c:369:
+				printk("%p tried to unregister builtin ioctl %x\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#815: FILE: kernel/compat.c:372:
+^I^I^I} else { $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#815: FILE: kernel/compat.c:372:
+			} else { 
+			t->next = t1->next;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#817: FILE: kernel/compat.c:374:
+^I^I^I^Ifree_ioctl(t1); $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#824: FILE: kernel/compat.c:381:
+	printk(KERN_ERR "Trying to free unknown 32bit ioctl handler %x\n", cmd);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#830: FILE: kernel/compat.c:387:
+EXPORT_SYMBOL(register_ioctl32_conversion); $

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#830: FILE: kernel/compat.c:387:
+EXPORT_SYMBOL(register_ioctl32_conversion); 

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#831: FILE: kernel/compat.c:388:
+EXPORT_SYMBOL(unregister_ioctl32_conversion); $

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#831: FILE: kernel/compat.c:388:
+EXPORT_SYMBOL(unregister_ioctl32_conversion); 

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#835: FILE: kernel/compat.c:392:
+	struct file * filp;
 	              ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#835: FILE: kernel/compat.c:392:
+	struct file * filp;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#837: FILE: kernel/compat.c:394:
+	int (*handler)(unsigned int, unsigned int, unsigned long, struct file * filp);
 	                                                                        ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#837: FILE: kernel/compat.c:394:
+	int (*handler)(unsigned int, unsigned int, unsigned long, struct file * filp);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#837: FILE: kernel/compat.c:394:
+	int (*handler)(unsigned int, unsigned int, unsigned long, struct file * filp);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#837: FILE: kernel/compat.c:394:
+	int (*handler)(unsigned int, unsigned int, unsigned long, struct file * filp);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#837: FILE: kernel/compat.c:394:
+	int (*handler)(unsigned int, unsigned int, unsigned long, struct file * filp);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#840: FILE: kernel/compat.c:397:
+	filp = fget(fd);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#841: FILE: kernel/compat.c:398:
+	if(!filp)
 	    ^^^^

ERROR:SPACING: space required before the open parenthesis '('
#841: FILE: kernel/compat.c:398:
+	if(!filp)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#845: FILE: kernel/compat.c:402:
+		error = sys_ioctl (fd, cmd, arg);

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#849: FILE: kernel/compat.c:406:
+	t = (struct ioctl_trans *)ioctl32_hash_table [ioctl32_hash (cmd)];

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#849: FILE: kernel/compat.c:406:
+	t = (struct ioctl_trans *)ioctl32_hash_table [ioctl32_hash (cmd)];

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#855: FILE: kernel/compat.c:412:
+		error = handler(fd, cmd, arg, filp);
 		                              ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#860: FILE: kernel/compat.c:417:
+^I^Iif (++count <= 50) { $

WARNING:LINE_SPACING: Missing a blank line after declarations
#860: FILE: kernel/compat.c:417:
+		static int count;
+		if (++count <= 50) { 

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#862: FILE: kernel/compat.c:419:
+^I^I^Ichar *path = (char *)__get_free_page(GFP_KERNEL), *fn = "?"; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#866: FILE: kernel/compat.c:423:
+^I^I^I^Istruct file *f = fget(fd); $

WARNING:LINE_SPACING: Missing a blank line after declarations
#867: FILE: kernel/compat.c:424:
+				struct file *f = fget(fd); 
+				if (f) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#868: FILE: kernel/compat.c:425:
+^I^I^I^I^Ifn = d_path(f->f_dentry, f->f_vfsmnt, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#874: FILE: kernel/compat.c:431:
+^I^I^Isprintf(buf,"'%c'", (cmd>>24) & 0x3f); $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#874: FILE: kernel/compat.c:431:
+			sprintf(buf,"'%c'", (cmd>>24) & 0x3f); 
 			           ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#874: FILE: kernel/compat.c:431:
+			sprintf(buf,"'%c'", (cmd>>24) & 0x3f); 
 			                        ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 28)
#875: FILE: kernel/compat.c:432:
+			if (!isprint(buf[1]))
+			    sprintf(buf, "%02x", buf[1]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#877: FILE: kernel/compat.c:434:
+			printk("ioctl32(%s:%d): Unknown cmd fd(%d) "

WARNING:SPLIT_STRING: quoted string split across lines
#878: FILE: kernel/compat.c:435:
+			printk("ioctl32(%s:%d): Unknown cmd fd(%d) "
+			       "cmd(%08x){%s} arg(%08x) on %s\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#882: FILE: kernel/compat.c:439:
+^I^I^Iif (path) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#883: FILE: kernel/compat.c:440:
+^I^I^I^Ifree_page((unsigned long)path); $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#888: FILE: kernel/compat.c:445:
+	fput(filp);
 	     ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#893: FILE: kernel/compat.c:450:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000391752.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 54 errors, 45 warnings, 5 checks, 468 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000391752.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
