WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#38: FILE: security/ima/ima_fs.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#46: FILE: security/ima/ima_fs.c:9:
+ * LSM IBM Integrity Measurement Architecture.^I^I  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#54: FILE: security/ima/ima_fs.c:17:
+ *^I^Iimplemenents imafs $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#71: FILE: security/ima/ima_fs.c:34:
+#include <asm/uaccess.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#84: FILE: security/ima/ima_fs.c:47:
+extern struct h_table htable;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#89: FILE: security/ima/ima_fs.c:52:
+static ssize_t ima_show_htable_value(char __user * buf, size_t count,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#90: FILE: security/ima/ima_fs.c:53:
+				     loff_t * ppos, atomic_t * val)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#90: FILE: security/ima/ima_fs.c:53:
+				     loff_t * ppos, atomic_t * val)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#99: FILE: security/ima/ima_fs.c:62:
+static ssize_t ima_show_htable_clean_inode_hits(struct file *filp,
                                                              ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#100: FILE: security/ima/ima_fs.c:63:
+						char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#102: FILE: security/ima/ima_fs.c:65:
+						loff_t * ppos)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#107: FILE: security/ima/ima_fs.c:70:
+}
+static struct file_operations ima_htable_clean_inode_hits_ops = {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#107: FILE: security/ima/ima_fs.c:70:
+static struct file_operations ima_htable_clean_inode_hits_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#111: FILE: security/ima/ima_fs.c:74:
+static ssize_t ima_show_htable_clean_table_hits(struct file *filp,
                                                              ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#112: FILE: security/ima/ima_fs.c:75:
+						char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#114: FILE: security/ima/ima_fs.c:77:
+						loff_t * ppos)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#119: FILE: security/ima/ima_fs.c:82:
+}
+static struct file_operations ima_htable_clean_table_hits_ops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#119: FILE: security/ima/ima_fs.c:82:
+static struct file_operations ima_htable_clean_table_hits_ops = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#123: FILE: security/ima/ima_fs.c:86:
+static ssize_t ima_show_htable_dirty_table_hits(struct file *filp,
                                                              ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#124: FILE: security/ima/ima_fs.c:87:
+						char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#126: FILE: security/ima/ima_fs.c:89:
+						loff_t * ppos)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#131: FILE: security/ima/ima_fs.c:94:
+}
+static struct file_operations ima_htable_dirty_table_hits_ops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#131: FILE: security/ima/ima_fs.c:94:
+static struct file_operations ima_htable_dirty_table_hits_ops = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#135: FILE: security/ima/ima_fs.c:98:
+static ssize_t ima_show_htable_changed_files(struct file *filp,
                                                           ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#136: FILE: security/ima/ima_fs.c:99:
+					     char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#137: FILE: security/ima/ima_fs.c:100:
+					     size_t count, loff_t * ppos)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#142: FILE: security/ima/ima_fs.c:105:
+}
+static struct file_operations ima_htable_changed_files_ops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#142: FILE: security/ima/ima_fs.c:105:
+static struct file_operations ima_htable_changed_files_ops = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#146: FILE: security/ima/ima_fs.c:109:
+static ssize_t ima_show_htable_user_measure(struct file *filp,
                                                          ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#147: FILE: security/ima/ima_fs.c:110:
+					    char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#148: FILE: security/ima/ima_fs.c:111:
+					    size_t count, loff_t * ppos)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#153: FILE: security/ima/ima_fs.c:116:
+}
+static struct file_operations ima_htable_user_measure_ops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#153: FILE: security/ima/ima_fs.c:116:
+static struct file_operations ima_htable_user_measure_ops = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#157: FILE: security/ima/ima_fs.c:120:
+static ssize_t ima_show_htable_kernel_measure(struct file *filp,
                                                            ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#158: FILE: security/ima/ima_fs.c:121:
+					      char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#159: FILE: security/ima/ima_fs.c:122:
+					      size_t count, loff_t * ppos)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#164: FILE: security/ima/ima_fs.c:127:
+}
+static struct file_operations ima_htable_kernel_measure_ops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#164: FILE: security/ima/ima_fs.c:127:
+static struct file_operations ima_htable_kernel_measure_ops = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#168: FILE: security/ima/ima_fs.c:131:
+static ssize_t ima_show_htable_violations(struct file *filp,
                                                        ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#169: FILE: security/ima/ima_fs.c:132:
+					  char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#170: FILE: security/ima/ima_fs.c:133:
+					  size_t count, loff_t * ppos)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#174: FILE: security/ima/ima_fs.c:137:
+}
+static struct file_operations ima_htable_violations_ops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#174: FILE: security/ima/ima_fs.c:137:
+static struct file_operations ima_htable_violations_ops = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#178: FILE: security/ima/ima_fs.c:141:
+static ssize_t ima_show_measurements_count(struct file *filp,
                                                         ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#179: FILE: security/ima/ima_fs.c:142:
+					   char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#180: FILE: security/ima/ima_fs.c:143:
+					   size_t count, loff_t * ppos)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#184: FILE: security/ima/ima_fs.c:147:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#185: FILE: security/ima/ima_fs.c:148:
+}
+static struct file_operations ima_measurements_count_ops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#185: FILE: security/ima/ima_fs.c:148:
+static struct file_operations ima_measurements_count_ops = {

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#189: FILE: security/ima/ima_fs.c:152:
+extern int measure_user_file(struct file *, u32 measure_flags);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#189: FILE: security/ima/ima_fs.c:152:
+extern int measure_user_file(struct file *, u32 measure_flags);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#190: FILE: security/ima/ima_fs.c:153:
+extern int ima_enabled;

WARNING:LONG_LINE_COMMENT: line length of 156 exceeds 100 columns
#207: FILE: security/ima/ima_fs.c:170:
+/* print format: 32bit-le=pcr#||char[20]=digest||flags||filename||'\0'  flags bits: 32-16 application flags, 15-3 kernel flags, 2-0 hook len(filename)<=40*/

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#211: FILE: security/ima/ima_fs.c:174:
+	void *ptr = (void *) buf;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#215: FILE: security/ima/ima_fs.c:178:
+	*((u32 *) ptr) = (u32) CONFIG_IMA_MEASURE_PCR_IDX;

CHECK:SPACING: No space is necessary after a cast
#234: FILE: security/ima/ima_fs.c:197:
+	*((char *) ptr) = '\0';

CHECK:SPACING: No space is necessary after a cast
#237: FILE: security/ima/ima_fs.c:200:
+	return ((u32) ptr - (u32) buf);

WARNING:TYPO_SPELLING: 'overrided' may be misspelled - perhaps 'overrode'?
#240: FILE: security/ima/ima_fs.c:203:
+/* Position pointer is overrided to mean entry # rather than size in bytes */
                        ^^^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#241: FILE: security/ima/ima_fs.c:204:
+static ssize_t ima_measurements_read(struct file *filp, char __user * buf,
                                                   ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#241: FILE: security/ima/ima_fs.c:204:
+static ssize_t ima_measurements_read(struct file *filp, char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#242: FILE: security/ima/ima_fs.c:205:
+				     size_t count, loff_t * ppos)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#257: FILE: security/ima/ima_fs.c:220:
+
+

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#261: FILE: security/ima/ima_fs.c:224:
+	for (qe = first_measurement, i = 0; qe && qe->entry && i < *ppos;
+	     qe = qe->later, i++);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#264: FILE: security/ima/ima_fs.c:227:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#284: FILE: security/ima/ima_fs.c:247:
+				 const char __user * buf, size_t count,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#285: FILE: security/ima/ima_fs.c:248:
+				 loff_t * ppos)

CHECK:SPACING: No space is necessary after a cast
#304: FILE: security/ima/ima_fs.c:267:
+	mr = (struct measure_request *) tmpbuf;

CHECK:BRACES: braces {} should be used on all arms of this statement
#318: FILE: security/ima/ima_fs.c:281:
+	if (error) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#321: FILE: security/ima/ima_fs.c:284:
+	} else

WARNING:CONST_STRUCT: struct file_operations should normally be const
#325: FILE: security/ima/ima_fs.c:288:
+static struct file_operations ima_measure_ops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#329: FILE: security/ima/ima_fs.c:292:
+static struct file_operations ima_measurements_ops = {

CHECK:CAMELCASE: Avoid CamelCase: <Opt_uid>
#333: FILE: security/ima/ima_fs.c:296:
+enum { Opt_uid, Opt_gid };

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_gid>
#333: FILE: security/ima/ima_fs.c:296:
+enum { Opt_uid, Opt_gid };

WARNING:LINE_SPACING: Missing a blank line after declarations
#353: FILE: security/ima/ima_fs.c:316:
+		int token;
+		if (!*p)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#358: FILE: security/ima/ima_fs.c:321:
+		switch (token) {
+

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#394: FILE: security/ima/ima_fs.c:357:
+		[IMA_MEASURE] =
+		    {"measurereq", &ima_measure_ops, S_IWUSR | S_IWGRP},

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IWGRP' are not preferred. Consider using octal permissions '0220'.
#394: FILE: security/ima/ima_fs.c:357:
+		    {"measurereq", &ima_measure_ops, S_IWUSR | S_IWGRP},

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#396: FILE: security/ima/ima_fs.c:359:
+		[IMA_MEASUREMENTS] =
+		    {"binary_measurements", &ima_measurements_ops,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#397: FILE: security/ima/ima_fs.c:360:
+		     S_IRUSR | S_IRGRP},

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#399: FILE: security/ima/ima_fs.c:362:
+		[IMA_MEASUREMENTS_COUNT] =
+		    {"binary_measurements_count",

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#401: FILE: security/ima/ima_fs.c:364:
+		     S_IRUSR | S_IRGRP},

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#403: FILE: security/ima/ima_fs.c:366:
+		[IMA_HTABLE_CLEAN_INODE_HITS] =
+		    {"clean_inode_hits", &ima_htable_clean_inode_hits_ops,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#404: FILE: security/ima/ima_fs.c:367:
+		     S_IRUSR | S_IRGRP},

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#406: FILE: security/ima/ima_fs.c:369:
+		[IMA_HTABLE_CLEAN_TABLE_HITS] =
+		    {"clean_hashtable_hits",

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#408: FILE: security/ima/ima_fs.c:371:
+		     S_IRUSR | S_IRGRP},

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#410: FILE: security/ima/ima_fs.c:373:
+		[IMA_HTABLE_DIRTY_TABLE_HITS] =
+		    {"dirty_hashtable_hits",

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#412: FILE: security/ima/ima_fs.c:375:
+		     S_IRUSR | S_IRGRP},

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#414: FILE: security/ima/ima_fs.c:377:
+		[IMA_HTABLE_CHANGED_FILES] =
+		    {"changed_files", &ima_htable_changed_files_ops,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#415: FILE: security/ima/ima_fs.c:378:
+		     S_IRUSR | S_IRGRP},

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#417: FILE: security/ima/ima_fs.c:380:
+		[IMA_HTABLE_USER_MEASURE] =
+		    {"user_count", &ima_htable_user_measure_ops,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#418: FILE: security/ima/ima_fs.c:381:
+		     S_IRUSR | S_IRGRP},

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#420: FILE: security/ima/ima_fs.c:383:
+		[IMA_HTABLE_KERNEL_MEASURE] =
+		    {"kernel_count", &ima_htable_kernel_measure_ops,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#421: FILE: security/ima/ima_fs.c:384:
+		     S_IRUSR | S_IRGRP},

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#423: FILE: security/ima/ima_fs.c:386:
+		[IMA_HTABLE_VIOLATIONS] =
+		    {"violations", &ima_htable_violations_ops,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#424: FILE: security/ima/ima_fs.c:387:
+		     S_IRUSR | S_IRGRP},

WARNING:LINE_SPACING: Missing a blank line after declarations
#437: FILE: security/ima/ima_fs.c:400:
+	struct super_block *sb;
+	sb = get_sb_single(fs_type, flags, data, ima_fill_super);

WARNING:RETURN_VOID: void function return statements are not generally useful
#469: FILE: security/ima/ima_fs.c:432:
+	return;
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#474: FILE: security/ima/ima.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#482: FILE: security/ima/ima.h:9:
+ * LSM IBM Integrity Measurement Architecture.^I  $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#502: FILE: security/ima/ima.h:29:
+	printk(level "ima (%s): " format ,__func__, ## arg)

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#502: FILE: security/ima/ima.h:29:
+	printk(level "ima (%s): " format ,__func__, ## arg)
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#502: FILE: security/ima/ima.h:29:
+	printk(level "ima (%s): " format ,__func__, ## arg)
 	                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#503: FILE: security/ima/ima.h:30:
+       $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#503: FILE: security/ima/ima.h:30:
+       $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#511: FILE: security/ima/ima.h:38:
+ * then redefine IMA_PANIC to, e g., ima_error (see INSTALL documentation) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#517: FILE: security/ima/ima.h:44:
+void invalidate_pcr(char *);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#523: FILE: security/ima/ima.h:50:
+ * our inode_permission hook being called (nfs, remote fs) */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#527: FILE: security/ima/ima.h:54:
+#define IMA_MAGIC ^I^I0x9999$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#531: FILE: security/ima/ima.h:58:
+#define MMAP_MEASURE_FLAG ^I0x01$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#532: FILE: security/ima/ima.h:59:
+#define MODULE_MEASURE_FLAG ^I0x02$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#533: FILE: security/ima/ima.h:60:
+#define USER_MEASURE_FLAG ^I0x04$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sha_value' - possible side-effects?
#537: FILE: security/ima/ima.h:64:
+#define SHA_KEY(sha_value) (((sha_value)[18] << 8 | (sha_value)[19]) % MEASURE_HTABLE_SIZE)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#538: FILE: security/ima/ima.h:65:
+typedef enum { CLEAN, DIRTY, CHANGED } ima_entry_flags;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#552: FILE: security/ima/ima.h:79:
+ * if stacking were to be implemented, this would be the place */

CHECK:SPACING: No space is necessary after a cast
#554: FILE: security/ima/ima.h:81:
+	((struct ima_inode *) ((inode)->i_security))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#556: FILE: security/ima/ima.h:83:
+#define ima_store_inode_security(inode,sec_struct) \
                                       ^

CHECK:SPACING: No space is necessary after a cast
#560: FILE: security/ima/ima.h:87:
+	((struct ima_file *) ((file)->f_security))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#571: FILE: security/ima/ima.h:98:
+	char file_name[TCG_EVENT_NAME_LEN_MAX+1]; /* name + \0 */
 	                                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#590: FILE: security/ima/ima.h:117:
+/* hash table to keep fast access to past measurements $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#591: FILE: security/ima/ima.h:118:
+ * uses one global lock for now (read/write) */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#620: FILE: security/ima/ima.h:147:
+^Iif ((imajor(inode) == MEM_MAJOR) $

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#621: FILE: security/ima/ima.h:148:
+	if ((imajor(inode) == MEM_MAJOR) 
+	    && S_ISCHR(inode->i_mode) && (iminor(inode) == KMEM_MINOR))

WARNING:RETURN_VOID: void function return statements are not generally useful
#628: FILE: security/ima/ima.h:155:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#634: FILE: security/ima/ima.h:161:
+^Iif ((imajor(inode) == MEM_MAJOR) $

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#635: FILE: security/ima/ima.h:162:
+	if ((imajor(inode) == MEM_MAJOR) 
+	    && S_ISCHR(inode->i_mode) && (iminor(inode) == MEM_MINOR))

WARNING:RETURN_VOID: void function return statements are not generally useful
#642: FILE: security/ima/ima.h:169:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#655: FILE: security/ima/ima.h:182:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#670: FILE: security/ima/ima.h:197:
+	return;
+}

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#695: FILE: security/ima/ima.h:222:
+extern ssize_t tpm_transmit(struct tpm_chip *chip, const char *buf, size_t bufsiz);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#697: FILE: security/ima/ima.h:224:
+extern struct tpm_chip *tpm_chip_lookup(int chip_num);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#714: FILE: security/ima/ima.h:241:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#720: FILE: security/ima/ima_init.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#731: FILE: security/ima/ima_init.c:12:
+ * LSM IBM Integrity Measurement Architecture.^I  $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#748: FILE: security/ima/ima_init.c:29:
+#include <asm/uaccess.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#762: FILE: security/ima/ima_init.c:43:
+extern struct h_table htable;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#772: FILE: security/ima/ima_init.c:53:
+void create_htable(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#773: FILE: security/ima/ima_init.c:54:
+void create_sha_htable(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#774: FILE: security/ima/ima_init.c:55:
+void ima_lsm_init(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#775: FILE: security/ima/ima_init.c:56:
+void ima_fs_init(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#776: FILE: security/ima/ima_init.c:57:
+int ima_add_measure_entry(struct measure_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct measure_entry *' should also have an identifier name
#776: FILE: security/ima/ima_init.c:57:
+int ima_add_measure_entry(struct measure_entry *);

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#778: FILE: security/ima/ima_init.c:59:
+int ima_enabled = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#783: FILE: security/ima/ima_init.c:64:
+	ima_enabled = simple_strtol(str, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#787: FILE: security/ima/ima_init.c:68:
+__setup("ima=", ima_enabled_setup);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#789: FILE: security/ima/ima_init.c:70:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#799: FILE: security/ima/ima_init.c:80:
+	if (entry == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#809: FILE: security/ima/ima_init.c:90:
+	if ((count = strlen(boot_aggregate_name)) > TCG_EVENT_NAME_LEN_MAX)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#813: FILE: security/ima/ima_init.c:94:
+	if (ima_used_chip != NULL) {
[...]
+	} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ima_used_chip"
#813: FILE: security/ima/ima_init.c:94:
+	if (ima_used_chip != NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#817: FILE: security/ima/ima_init.c:98:
+^I^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tfm"
#819: FILE: security/ima/ima_init.c:100:
+		if (tfm == NULL) {

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'tfm->__crt_alg->cra_digest.dia_update'
#829: FILE: security/ima/ima_init.c:110:
+			tfm->__crt_alg->cra_digest.
+			    dia_update(crypto_tfm_ctx(tfm), pcr_i, 20);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:BRACES: Unbalanced braces around else statement
#833: FILE: security/ima/ima_init.c:114:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#837: FILE: security/ima/ima_init.c:118:
+	if (ima_add_measure_entry(entry) < 0) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#840: FILE: security/ima/ima_init.c:121:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#844: FILE: security/ima/ima_init.c:125:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#856: FILE: security/ima/ima_init.c:137:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#861: FILE: security/ima/ima_init.c:142:
+^Iprintk(KERN_INFO "IBM Integrity Measurement Architecture (IBM IMA %s).\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#861: FILE: security/ima/ima_init.c:142:
+	printk(KERN_INFO "IBM Integrity Measurement Architecture (IBM IMA %s).\n", 

CHECK:BRACES: Unbalanced braces around else statement
#868: FILE: security/ima/ima_init.c:149:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#870: FILE: security/ima/ima_init.c:151:
+			printk(KERN_INFO "    IMA (not enabled in kernel command line) aborting!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#873: FILE: security/ima/ima_init.c:154:
+		printk(KERN_INFO "    IMA (test mode)\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ima_used_chip"
#876: FILE: security/ima/ima_init.c:157:
+	if (ima_used_chip == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#878: FILE: security/ima/ima_init.c:159:
+			printk(KERN_INFO "    IMA (TPM/BYPASS - no TPM chip found)\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#885: FILE: security/ima/ima_init.c:166:
+	if (!register_security(&null_ops))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#887: FILE: security/ima/ima_init.c:168:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#888: FILE: security/ima/ima_init.c:169:
+		if (ima_test_mode) {
[...]
+		} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#890: FILE: security/ima/ima_init.c:171:
+			printk(KERN_INFO "    IMA (LSM/not free) aborting!\n");

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#892: FILE: security/ima/ima_init.c:173:
+			return -EFAULT;
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#892: FILE: security/ima/ima_init.c:173:
+		} else

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#905: FILE: security/ima/ima_init.c:186:
+__initcall(measure_init);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#910: FILE: security/ima/ima_init.c:191:
+    ("Run-time LSM-based IBM Integrity Measurement Architecture");$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#915: FILE: security/ima/ima_lsmhooks.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#923: FILE: security/ima/ima_lsmhooks.c:9:
+ * LSM IBM Integrity Measurement Architecture.^I^I  $

WARNING:REPEATED_WORD: Possible repeated word: 'into'
#932: FILE: security/ima/ima_lsmhooks.c:18:
+ *             implements Linux Security Modules hooks that call into
+ *             into the measurement functions

ERROR:TRAILING_WHITESPACE: trailing whitespace
#946: FILE: security/ima/ima_lsmhooks.c:32:
+/* if set, then hooks do nothing $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#947: FILE: security/ima/ima_lsmhooks.c:33:
+ * (controls non-lsm module hook as well) */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#950: FILE: security/ima/ima_lsmhooks.c:36:
+struct measure_entry *ima_lookup_measure_entry(unsigned long, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dev_t' should also have an identifier name
#950: FILE: security/ima/ima_lsmhooks.c:36:
+struct measure_entry *ima_lookup_measure_entry(unsigned long, dev_t);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#951: FILE: security/ima/ima_lsmhooks.c:37:
+void measure_mmap_file(struct file *, u32 flags);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#951: FILE: security/ima/ima_lsmhooks.c:37:
+void measure_mmap_file(struct file *, u32 flags);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#952: FILE: security/ima/ima_lsmhooks.c:38:
+int measure_dirty_flag_super(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#952: FILE: security/ima/ima_lsmhooks.c:38:
+int measure_dirty_flag_super(struct super_block *);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#973: FILE: security/ima/ima_lsmhooks.c:59:
+int ima_inode_permission(struct inode *inode, int mask, struct nameidata *nd)
                                                                           ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#981: FILE: security/ima/ima_lsmhooks.c:67:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#987: FILE: security/ima/ima_lsmhooks.c:73:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#989: FILE: security/ima/ima_lsmhooks.c:75:
+	/* files that are written to are usually not executed (measured),
+	   optimize this path */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#989: FILE: security/ima/ima_lsmhooks.c:75:
+	   optimize this path */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#991: FILE: security/ima/ima_lsmhooks.c:77:
+	if ((entry = ima_lookup_measure_entry(inode->i_ino, inode->i_rdev)) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#996: FILE: security/ima/ima_lsmhooks.c:82:
+	if ((i_security = ima_get_inode_security(inode)) != NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around i_security->measure_count
#997: FILE: security/ima/ima_lsmhooks.c:83:
+		if (atomic_read(&(i_security->measure_count))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1000: FILE: security/ima/ima_lsmhooks.c:86:
+^I^I^Iima_error("VIOLATION: Writing to measured file (%s) while it is being used!\n", $

WARNING:LONG_LINE_STRING: line length of 104 exceeds 100 columns
#1000: FILE: security/ima/ima_lsmhooks.c:86:
+			ima_error("VIOLATION: Writing to measured file (%s) while it is being used!\n", 

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1001: FILE: security/ima/ima_lsmhooks.c:87:
+^I^I^I^I  entry->file_name);^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "qe"
#1022: FILE: security/ima/ima_lsmhooks.c:108:
+		while (qe != NULL) {

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1039: FILE: security/ima/ima_lsmhooks.c:125:
+	if (i_security) {
+		kfree(i_security);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1049: FILE: security/ima/ima_lsmhooks.c:135:
+	if ((f_security = ima_get_file_security(file)) == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#1053: FILE: security/ima/ima_lsmhooks.c:139:
+	if (i_security && (f_security->is_measuring))
+			atomic_dec(&(i_security->measure_count));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'f_security->is_measuring'
#1053: FILE: security/ima/ima_lsmhooks.c:139:
+	if (i_security && (f_security->is_measuring))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around i_security->measure_count
#1054: FILE: security/ima/ima_lsmhooks.c:140:
+			atomic_dec(&(i_security->measure_count));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1075: FILE: security/ima/ima_lsmhooks.c:161:
+/* IMA requires early initialization in order measure
+   all executables etc from the very beginning. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1075: FILE: security/ima/ima_lsmhooks.c:161:
+   all executables etc from the very beginning. */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1100: FILE: security/ima/ima_main.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1108: FILE: security/ima/ima_main.c:9:
+ * LSM IBM Integrity Measurement Architecture.^I^I  $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1126: FILE: security/ima/ima_main.c:27:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#1127: FILE: security/ima/ima_main.c:28:
+#include <asm/atomic.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1136: FILE: security/ima/ima_main.c:37:
+extern struct sha_table sha_htable;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1138: FILE: security/ima/ima_main.c:39:
+struct sha_entry *ima_lookup_sha_entry(u8 * sha_value);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1139: FILE: security/ima/ima_main.c:40:
+struct measure_entry *ima_lookup_measure_entry(unsigned long, dev_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dev_t' should also have an identifier name
#1139: FILE: security/ima/ima_main.c:40:
+struct measure_entry *ima_lookup_measure_entry(unsigned long, dev_t);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1140: FILE: security/ima/ima_main.c:41:
+int ima_add_measure_entry(struct measure_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct measure_entry *' should also have an identifier name
#1140: FILE: security/ima/ima_main.c:41:
+int ima_add_measure_entry(struct measure_entry *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1141: FILE: security/ima/ima_main.c:42:
+int measure_dirty_flag_inode(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1141: FILE: security/ima/ima_main.c:42:
+int measure_dirty_flag_inode(struct inode *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1142: FILE: security/ima/ima_main.c:43:
+extern struct tpm_chip *ima_used_chip;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1146: FILE: security/ima/ima_main.c:47:
+/* $

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#1155: FILE: security/ima/ima_main.c:56:
+		return DIRTY;	/* dirty */
+		break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1162: FILE: security/ima/ima_main.c:63:
+ * returns =0 if measurement allowed $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_sb->s_magic != IMA_MAGIC'
#1167: FILE: security/ima/ima_main.c:68:
+	if (S_ISREG(inode->i_mode) && (inode->i_sb->s_magic != IMA_MAGIC))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1168: FILE: security/ima/ima_main.c:69:
+^I^Ireturn 0;       ^I/* measure */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1170: FILE: security/ima/ima_main.c:71:
+^I^Ireturn 1;       ^I/* skip */^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1170: FILE: security/ima/ima_main.c:71:
+^I^Ireturn 1;       ^I/* skip */^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1173: FILE: security/ima/ima_main.c:74:
+
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1187: FILE: security/ima/ima_main.c:88:
+	if ((bufp =

CHECK:SPACING: No space is necessary after a cast
#1188: FILE: security/ima/ima_main.c:89:
+	     (char *) kmalloc(PAGE_SIZE, GFP_KERNEL)) == 0) {

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#1188: FILE: security/ima/ima_main.c:89:
+	     (char *) kmalloc(PAGE_SIZE, GFP_KERNEL)) == 0) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#1196: FILE: security/ima/ima_main.c:97:
+	if (entry == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1206: FILE: security/ima/ima_main.c:107:
+	if ((count = file->f_dentry->d_name.len) > TCG_EVENT_NAME_LEN_MAX)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tfm"
#1214: FILE: security/ima/ima_main.c:115:
+	if (tfm == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'file->f_op->read'
#1224: FILE: security/ima/ima_main.c:125:
+		if ((count =
+		     (file->f_op->read) (file,
+					 (char __user *) bufp,
+					 PAGE_SIZE,
+					 &offset)) < 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1224: FILE: security/ima/ima_main.c:125:
+		if ((count =

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (file->f_op->read)
#1225: FILE: security/ima/ima_main.c:126:
+		     (file->f_op->read) (file,

CHECK:SPACING: No space is necessary after a cast
#1226: FILE: security/ima/ima_main.c:127:
+					 (char __user *) bufp,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "i_security"
#1244: FILE: security/ima/ima_main.c:145:
+	if (i_security != NULL) {

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1253: FILE: security/ima/ima_main.c:154:
+	return (entry);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:INDENTED_LABEL: labels should not be indented
#1256: FILE: security/ima/ima_main.c:157:
+      outf:

WARNING:INDENTED_LABEL: labels should not be indented
#1258: FILE: security/ima/ima_main.c:159:
+      outm:

WARNING:INDENTED_LABEL: labels should not be indented
#1261: FILE: security/ima/ima_main.c:162:
+      out:

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tfm"
#1276: FILE: security/ima/ima_main.c:177:
+	if (tfm == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#1292: FILE: security/ima/ima_main.c:193:
+		if (entry == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1302: FILE: security/ima/ima_main.c:203:
+		if ((count = strlen(name)) > TCG_EVENT_NAME_LEN_MAX)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1307: FILE: security/ima/ima_main.c:208:
+		if ((error = ima_add_measure_entry(entry)) < 0) {

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#1310: FILE: security/ima/ima_main.c:211:
+			    ("error adding new measurement entry");;

WARNING:LONG_LINE_COMMENT: line length of 117 exceeds 100 columns
#1315: FILE: security/ima/ima_main.c:216:
+	}			/* else we already have this hash value from an exec/file that was running earlier */

WARNING:INDENTED_LABEL: labels should not be indented
#1318: FILE: security/ima/ima_main.c:219:
+      out:

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#1323: FILE: security/ima/ima_main.c:224:
+static unsigned int find_mod_sec(Elf_Ehdr * hdr, Elf_Shdr * sechdrs, const char *secstrings, const char *name)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1323: FILE: security/ima/ima_main.c:224:
+static unsigned int find_mod_sec(Elf_Ehdr * hdr, Elf_Shdr * sechdrs, const char *secstrings, const char *name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1323: FILE: security/ima/ima_main.c:224:
+static unsigned int find_mod_sec(Elf_Ehdr * hdr, Elf_Shdr * sechdrs, const char *secstrings, const char *name)

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Ehdr>
#1323: FILE: security/ima/ima_main.c:224:
+static unsigned int find_mod_sec(Elf_Ehdr * hdr, Elf_Shdr * sechdrs, const char *secstrings, const char *name)

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#1323: FILE: security/ima/ima_main.c:224:
+static unsigned int find_mod_sec(Elf_Ehdr * hdr, Elf_Shdr * sechdrs, const char *secstrings, const char *name)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1326: FILE: security/ima/ima_main.c:227:
+	unsigned int i;
+	for (i = 1; i < hdr->e_shnum; i++)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1329: FILE: security/ima/ima_main.c:230:
+		if ((sechdrs[i].sh_flags & SHF_ALLOC)
+		    && strcmp(secstrings + sechdrs[i].sh_name, name) == 0)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1335: FILE: security/ima/ima_main.c:236:
+void measure_kernel_module(void *start, unsigned long len, const char __user * uargs)

CHECK:SPACING: No space is necessary after a cast
#1359: FILE: security/ima/ima_main.c:260:
+	hdr = (Elf_Ehdr *) start;

CHECK:SPACING: No space is necessary after a cast
#1360: FILE: security/ima/ima_main.c:261:
+	sechdrs = (void *) hdr + hdr->e_shoff;

CHECK:SPACING: No space is necessary after a cast
#1361: FILE: security/ima/ima_main.c:262:
+	secstrings = (void *) hdr + sechdrs[hdr->e_shstrndx].sh_offset;

CHECK:SPACING: No space is necessary after a cast
#1370: FILE: security/ima/ima_main.c:271:
+	mod = (void *) ((size_t) hdr + sechdrs[modindex].sh_offset);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1374: FILE: security/ima/ima_main.c:275:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1376: FILE: security/ima/ima_main.c:277:
+
+

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#1378: FILE: security/ima/ima_main.c:279:
+static void measure_file (struct file *file, u32 measure_flags, struct inode *inode, struct ima_inode *i_security)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1378: FILE: security/ima/ima_main.c:279:
+static void measure_file (struct file *file, u32 measure_flags, struct inode *inode, struct ima_inode *i_security)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entry != NULL'
#1384: FILE: security/ima/ima_main.c:285:
+	if ((entry != NULL) && (entry->dirty == CLEAN)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entry->dirty == CLEAN'
#1384: FILE: security/ima/ima_main.c:285:
+	if ((entry != NULL) && (entry->dirty == CLEAN)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entry"
#1384: FILE: security/ima/ima_main.c:285:
+	if ((entry != NULL) && (entry->dirty == CLEAN)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#1401: FILE: security/ima/ima_main.c:302:
+	if (entry == NULL) {	/* no old entry for this inode found */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1404: FILE: security/ima/ima_main.c:305:
+			if (ima_add_measure_entry(new_entry) < 0) {
[...]
+			} else	
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1407: FILE: security/ima/ima_main.c:308:
+^I^I^I} else^I$

CHECK:BRACES: Unbalanced braces around else statement
#1407: FILE: security/ima/ima_main.c:308:
+			} else	

CHECK:BRACES: braces {} should be used on all arms of this statement
#1424: FILE: security/ima/ima_main.c:325:
+			if (ima_add_measure_entry(new_entry) < 0) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1427: FILE: security/ima/ima_main.c:328:
+			} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1435: FILE: security/ima/ima_main.c:336:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1453: FILE: security/ima/ima_main.c:354:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1453: FILE: security/ima/ima_main.c:354:
+ $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around inode->i_writecount
#1455: FILE: security/ima/ima_main.c:356:
+	if (atomic_read(&(inode->i_writecount)) > 0) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1457: FILE: security/ima/ima_main.c:358:
+		struct measure_entry *entry;
+		invalidate_pcr("ToMToU violation");

WARNING:LONG_LINE_STRING: line length of 103 exceeds 100 columns
#1461: FILE: security/ima/ima_main.c:362:
+			  (entry != NULL) ? entry->file_name : "most likely measuring file opened rw");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entry"
#1461: FILE: security/ima/ima_main.c:362:
+			  (entry != NULL) ? entry->file_name : "most likely measuring file opened rw");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1467: FILE: security/ima/ima_main.c:368:
+	if ((f_security = ima_get_file_security(file)) != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!i_security"
#1469: FILE: security/ima/ima_main.c:370:
+		if (i_security == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*f_security)...) over kmalloc(sizeof(struct ima_file)...)
#1475: FILE: security/ima/ima_main.c:376:
+		f_security = kmalloc(sizeof(struct ima_file), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!f_security"
#1476: FILE: security/ima/ima_main.c:377:
+		if (f_security == NULL) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1479: FILE: security/ima/ima_main.c:380:
+			return -ENOMEM;
+		} else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1485: FILE: security/ima/ima_main.c:386:
+		if (i_security != NULL)
[...]
+		else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "i_security"
#1485: FILE: security/ima/ima_main.c:386:
+		if (i_security != NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around i_security->measure_count
#1486: FILE: security/ima/ima_main.c:387:
+			atomic_inc(&(i_security->measure_count));

CHECK:BRACES: Unbalanced braces around else statement
#1487: FILE: security/ima/ima_main.c:388:
+		else {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1489: FILE: security/ima/ima_main.c:390:
+			if ((i_security = ima_get_inode_security(inode)))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!i_security"
#1493: FILE: security/ima/ima_main.c:394:
+			if (i_security == NULL) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1497: FILE: security/ima/ima_main.c:398:
+				return -EFAULT;
+			} else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around i_security->measure_count
#1500: FILE: security/ima/ima_main.c:401:
+				atomic_set(&(i_security->measure_count), 1);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1504: FILE: security/ima/ima_main.c:405:
+^I^I^Ispin_unlock(&ima_measure_file_lock);^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1515: FILE: security/ima/ima_main.c:416:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1524: FILE: security/ima/ima_main.c:425:
+^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around inode->i_writecount
#1532: FILE: security/ima/ima_main.c:433:
+	if (atomic_read(&(inode->i_writecount)) > 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1540: FILE: security/ima/ima_main.c:441:
+		if ((i_security = ima_get_inode_security(inode)))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*i_security)...) over kmalloc(sizeof(struct ima_inode)...)
#1542: FILE: security/ima/ima_main.c:443:
+		i_security = kmalloc(sizeof(struct ima_inode), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!i_security"
#1543: FILE: security/ima/ima_main.c:444:
+		if (i_security == NULL) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1547: FILE: security/ima/ima_main.c:448:
+			return;
+		} else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around i_security->measure_count
#1550: FILE: security/ima/ima_main.c:451:
+			atomic_set(&(i_security->measure_count), 0);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1566: FILE: security/ima/ima_queue.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1574: FILE: security/ima/ima_queue.c:9:
+ * LSM IBM Integrity Measurement Architecture.^I^I  $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1592: FILE: security/ima/ima_queue.c:27:
+#include <asm/uaccess.h>

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#1600: FILE: security/ima/ima_queue.c:35:
+struct queue_entry *first_measurement = NULL;	/* for printing */

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#1601: FILE: security/ima/ima_queue.c:36:
+struct queue_entry *latest_measurement = NULL;	/* for adding */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1605: FILE: security/ima/ima_queue.c:40:
+int ima_add_sha_entry(struct measure_entry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct measure_entry *' should also have an identifier name
#1605: FILE: security/ima/ima_queue.c:40:
+int ima_add_sha_entry(struct measure_entry *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1644: FILE: security/ima/ima_queue.c:79:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1645: FILE: security/ima/ima_queue.c:80:
+ * also sets clean and dirty table hit marks $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "qe"
#1654: FILE: security/ima/ima_queue.c:89:
+	while ((qe != NULL) && ((qe->entry->inode_nr != inode_number)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1655: FILE: security/ima/ima_queue.c:90:
+	while ((qe != NULL) && ((qe->entry->inode_nr != inode_number)
+				|| (qe->entry->dev_id != dev_number)))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "qe"
#1658: FILE: security/ima/ima_queue.c:93:
+	if (qe != NULL) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1671: FILE: security/ima/ima_queue.c:106:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1673: FILE: security/ima/ima_queue.c:108:
+struct sha_entry *ima_lookup_sha_entry(u8 * sha_value)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "se"
#1680: FILE: security/ima/ima_queue.c:115:
+	while ((se != NULL) && (memcmp(se->digest, sha_value, 20)))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1685: FILE: security/ima/ima_queue.c:120:
+
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1696: FILE: security/ima/ima_queue.c:131:
+	if ((qe = kmalloc(sizeof(struct queue_entry), GFP_KERNEL)) == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*qe)...) over kmalloc(sizeof(struct queue_entry)...)
#1696: FILE: security/ima/ima_queue.c:131:
+	if ((qe = kmalloc(sizeof(struct queue_entry), GFP_KERNEL)) == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!first_measurement"
#1709: FILE: security/ima/ima_queue.c:144:
+	if (first_measurement == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1713: FILE: security/ima/ima_queue.c:148:
+^I$

WARNING:INDENTED_LABEL: labels should not be indented
#1719: FILE: security/ima/ima_queue.c:154:
+      out:

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1723: FILE: security/ima/ima_queue.c:158:
+
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1733: FILE: security/ima/ima_queue.c:168:
+	if ((se = kmalloc(sizeof(struct sha_entry), GFP_KERNEL)) == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*se)...) over kmalloc(sizeof(struct sha_entry)...)
#1733: FILE: security/ima/ima_queue.c:168:
+	if ((se = kmalloc(sizeof(struct sha_entry), GFP_KERNEL)) == NULL)

WARNING:INDENTED_LABEL: labels should not be indented
#1747: FILE: security/ima/ima_queue.c:182:
+      out:

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1755: FILE: security/ima/ima_tpm_extend.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1763: FILE: security/ima/ima_tpm_extend.h:9:
+ * LSM IBM Integrity Measurement Architecture.^I^I  $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1788: FILE: security/ima/ima_tpm_extend.h:34:
+static void tpm_extend(int index, const u8 * digest)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ima_used_chip"
#1794: FILE: security/ima/ima_tpm_extend.h:40:
+	if (ima_used_chip == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1797: FILE: security/ima/ima_tpm_extend.h:43:
+	if ((data = kmalloc(TPM_BUFSIZE, GFP_KERNEL)) == NULL)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1802: FILE: security/ima/ima_tpm_extend.h:48:
+	memcpy(data+10, &i, 4);
 	           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1804: FILE: security/ima/ima_tpm_extend.h:50:
+	if ((len = tpm_transmit(ima_used_chip, data, TPM_BUFSIZE)) >= 30) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "data"
#1815: FILE: security/ima/ima_tpm_extend.h:61:
+	if (data != NULL)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1824: FILE: security/ima/ima_tpm_pcrread.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1832: FILE: security/ima/ima_tpm_pcrread.h:9:
+ * LSM IBM Integrity Measurement Architecture.^I^I  $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1857: FILE: security/ima/ima_tpm_pcrread.h:34:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1858: FILE: security/ima/ima_tpm_pcrread.h:35:
+static void tpm_pcrread(int index, u8 * hash)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ima_used_chip"
#1864: FILE: security/ima/ima_tpm_pcrread.h:41:
+	if (ima_used_chip == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1867: FILE: security/ima/ima_tpm_pcrread.h:44:
+	if ((data = kmalloc(TPM_BUFSIZE, GFP_KERNEL)) == NULL)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1872: FILE: security/ima/ima_tpm_pcrread.h:49:
+	memcpy(data+10, &i, 4);
 	           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1873: FILE: security/ima/ima_tpm_pcrread.h:50:
+	if ((len = tpm_transmit(ima_used_chip, data, TPM_BUFSIZE)) >= 30) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "data"
#1886: FILE: security/ima/ima_tpm_pcrread.h:63:
+	if (data != NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1905: FILE: security/ima/Kconfig:11:
+    ^I^ITo measure executable code running on this $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1907: FILE: security/ima/Kconfig:13:
+^I^Iany other security modules because LSM are $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1917: FILE: security/ima/Kconfig:23:
+^I^IIf you would like to test the measurement $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1918: FILE: security/ima/Kconfig:24:
+^I^Iarchitecture but you do not have a TPM hardware $

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1932: FILE: security/ima/Kconfig:38:
+config IMA_SKIP_BOOT_AGGREGATE
+	bool "Skip Boot Aggregate Creation"
+	depends on IMA_MEASURE
+	help
+		If y, the usual aggregate over the boot PCRs 
+		of the TPM is not calculated and not added to 
+		the measurement list. If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1936: FILE: security/ima/Kconfig:42:
+^I^IIf y, the usual aggregate over the boot PCRs $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1937: FILE: security/ima/Kconfig:43:
+^I^Iof the TPM is not calculated and not added to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1946: FILE: security/ima/Kconfig:52:
+                this does not restrict normal systems. $

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#1962: FILE: security/ima/Kconfig:68:
+		This setting enforces TPM PCR invalidation if /dev/hda,
 		                                                   ^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1964: FILE: security/ima/Kconfig:70:
+^I^Idirectly (bypass of measurement dirty flagging possible). $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1980: FILE: security/ima/Kconfig:86:
+^I^Iit is safe to say yes. $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000175996.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 105 errors, 135 warnings, 112 checks, 1941 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000175996.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
