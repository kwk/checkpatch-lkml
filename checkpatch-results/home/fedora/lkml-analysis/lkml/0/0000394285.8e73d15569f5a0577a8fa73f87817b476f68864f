WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
diff -ur acpi-2/drivers/acpi/resources/rsxface.c acpi-3/drivers/acpi/resources/rsxface.c

CHECK:LINE_SPACING: Please don't use multiple blank lines
#38: FILE: drivers/acpi/resources/rsxface.c:320:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#39: FILE: drivers/acpi/resources/rsxface.c:321:
+#define copy_field(out, in, field)	out->field = in->field

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'out' may be better as '(out)' to avoid precedence issues
#39: FILE: drivers/acpi/resources/rsxface.c:321:
+#define copy_field(out, in, field)	out->field = in->field

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'in' may be better as '(in)' to avoid precedence issues
#39: FILE: drivers/acpi/resources/rsxface.c:321:
+#define copy_field(out, in, field)	out->field = in->field

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#39: FILE: drivers/acpi/resources/rsxface.c:321:
+#define copy_field(out, in, field)	out->field = in->field

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#39: FILE: drivers/acpi/resources/rsxface.c:321:
+#define copy_field(out, in, field)	out->field = in->field

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#40: FILE: drivers/acpi/resources/rsxface.c:322:
+#define copy_address(out, in)					\
+	copy_field(out, in, resource_type);			\
+	copy_field(out, in, producer_consumer);			\
+	copy_field(out, in, decode);				\
+	copy_field(out, in, min_address_fixed);			\
+	copy_field(out, in, max_address_fixed);			\
+	copy_field(out, in, attribute);				\
+	copy_field(out, in, granularity);			\
+	copy_field(out, in, min_address_range);			\
+	copy_field(out, in, max_address_range);			\
+	copy_field(out, in, address_translation_offset);	\
+	copy_field(out, in, address_length);			\
+	copy_field(out, in, resource_source);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'out' - possible side-effects?
#40: FILE: drivers/acpi/resources/rsxface.c:322:
+#define copy_address(out, in)					\
+	copy_field(out, in, resource_type);			\
+	copy_field(out, in, producer_consumer);			\
+	copy_field(out, in, decode);				\
+	copy_field(out, in, min_address_fixed);			\
+	copy_field(out, in, max_address_fixed);			\
+	copy_field(out, in, attribute);				\
+	copy_field(out, in, granularity);			\
+	copy_field(out, in, min_address_range);			\
+	copy_field(out, in, max_address_range);			\
+	copy_field(out, in, address_translation_offset);	\
+	copy_field(out, in, address_length);			\
+	copy_field(out, in, resource_source);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'in' - possible side-effects?
#40: FILE: drivers/acpi/resources/rsxface.c:322:
+#define copy_address(out, in)					\
+	copy_field(out, in, resource_type);			\
+	copy_field(out, in, producer_consumer);			\
+	copy_field(out, in, decode);				\
+	copy_field(out, in, min_address_fixed);			\
+	copy_field(out, in, max_address_fixed);			\
+	copy_field(out, in, attribute);				\
+	copy_field(out, in, granularity);			\
+	copy_field(out, in, min_address_range);			\
+	copy_field(out, in, max_address_range);			\
+	copy_field(out, in, address_translation_offset);	\
+	copy_field(out, in, address_length);			\
+	copy_field(out, in, resource_source);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#40: FILE: drivers/acpi/resources/rsxface.c:322:
+#define copy_address(out, in)					\
+	copy_field(out, in, resource_type);			\
+	copy_field(out, in, producer_consumer);			\
+	copy_field(out, in, decode);				\
+	copy_field(out, in, min_address_fixed);			\
+	copy_field(out, in, max_address_fixed);			\
+	copy_field(out, in, attribute);				\
+	copy_field(out, in, granularity);			\
+	copy_field(out, in, min_address_range);			\
+	copy_field(out, in, max_address_range);			\
+	copy_field(out, in, address_translation_offset);	\
+	copy_field(out, in, address_length);			\
+	copy_field(out, in, resource_source);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#59: FILE: drivers/acpi/resources/rsxface.c:341:
+ *              out                     - Pointer to the users's return $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#73: FILE: drivers/acpi/resources/rsxface.c:355:
+acpi_resource_to_address64 (

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#81: FILE: drivers/acpi/resources/rsxface.c:363:
+	switch (resource->id) {
+		case ACPI_RSTYPE_ADDRESS16:
[...]
+		case ACPI_RSTYPE_ADDRESS32:
[...]
+		case ACPI_RSTYPE_ADDRESS64:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: No space is necessary after a cast
#83: FILE: drivers/acpi/resources/rsxface.c:365:
+			address16 = (struct acpi_resource_address16 *) &resource->data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#87: FILE: drivers/acpi/resources/rsxface.c:369:
+			address32 = (struct acpi_resource_address32 *) &resource->data;

CHECK:SPACING: No space is necessary after a cast
#91: FILE: drivers/acpi/resources/rsxface.c:373:
+			address64 = (struct acpi_resource_address64 *) &resource->data;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#107: FILE: include/acpi/acpixf.h:356:
+acpi_resource_to_address64 (

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000394285.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 2 warnings, 12 checks, 76 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000394285.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
