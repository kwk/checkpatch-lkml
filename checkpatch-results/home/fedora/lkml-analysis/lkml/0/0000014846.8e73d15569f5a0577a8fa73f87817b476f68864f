WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#22: 
or write-through block cache.  It is intended to be used in conjunction with

WARNING:TYPO_SPELLING: 'peformance' may be misspelled - perhaps 'performance'?
#26: 
In performance tests with iSCSI, gave peformance improvements of 2-10x that
                                      ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'vailable' may be misspelled - perhaps 'available'?
#29: 
clusters.  A detailed performance analysis will be vailable shortly via a
                                                   ^^^^^^^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#50: FILE: drivers/md/Kconfig:264:
+config DM_CACHE
+	tristate "Cache target support (EXPERIMENTAL)"
+	depends on BLK_DEV_DM && EXPERIMENTAL
+	---help---
+	  Support for generic cache target for device-mapper.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#72: FILE: drivers/md/dm-cache.c

There is no reason for source files to be executable.  The executable
bit can be removed safely.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#72: 
new file mode 100755

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#77: FILE: drivers/md/dm-cache.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#94: FILE: drivers/md/dm-cache.c:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#95: FILE: drivers/md/dm-cache.c:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#99: FILE: drivers/md/dm-cache.c:23:
+#include <asm/atomic.h>

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#122: FILE: drivers/md/dm-cache.c:46:
+#define DPRINTK( s, arg... ) printk(DMC_PREFIX s "\n", ##arg)

ERROR:SPACING: space prohibited after that open parenthesis '('
#122: FILE: drivers/md/dm-cache.c:46:
+#define DPRINTK( s, arg... ) printk(DMC_PREFIX s "\n", ##arg)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#122: FILE: drivers/md/dm-cache.c:46:
+#define DPRINTK( s, arg... ) printk(DMC_PREFIX s "\n", ##arg)

ERROR:SPACING: space prohibited after that open parenthesis '('
#124: FILE: drivers/md/dm-cache.c:48:
+#define DPRINTK( s, arg... )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#124: FILE: drivers/md/dm-cache.c:48:
+#define DPRINTK( s, arg... )

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#198: FILE: drivers/md/dm-cache.c:122:
+	if (data == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#205: FILE: drivers/md/dm-cache.c:129:
+		if (j < 2) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#208: FILE: drivers/md/dm-cache.c:132:
+		} else

WARNING:SPACING: space prohibited before semicolon
#274: FILE: drivers/md/dm-cache.c:198:
+	for (*pages = pl = dmc->pages; --nr; pl = pl->next) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#274: FILE: drivers/md/dm-cache.c:198:
+	for (*pages = pl = dmc->pages; --nr; pl = pl->next) ;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#324: FILE: drivers/md/dm-cache.c:248:
+	BUG_ON(dmc->nr_free_pages != dmc->nr_pages);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#327: FILE: drivers/md/dm-cache.c:251:
+	dmc->nr_free_pages = dmc->nr_pages = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#392: FILE: drivers/md/dm-cache.c:316:
+	BUG_ON(!list_empty(&_complete_jobs));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#393: FILE: drivers/md/dm-cache.c:317:
+	BUG_ON(!list_empty(&_io_jobs));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#394: FILE: drivers/md/dm-cache.c:318:
+	BUG_ON(!list_empty(&_pages_jobs));

CHECK:BRACES: braces {} should be used on all arms of this statement
#440: FILE: drivers/md/dm-cache.c:364:
+	if (job->rw == READ) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#443: FILE: drivers/md/dm-cache.c:367:
+	} else

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#473: FILE: drivers/md/dm-cache.c:397:
+			if (0 == job->nr_pages) {	/* The request is aligned to cache block */

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#525: FILE: drivers/md/dm-cache.c:449:
+			return r;
+		} else {	/* The original request is a WRITE */

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#529: FILE: drivers/md/dm-cache.c:453:
+				bvec =
+				    kmalloc(job->nr_pages * sizeof(*bvec),
+					    GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:LONG_LINE_COMMENT: line length of 125 exceeds 100 columns
#564: FILE: drivers/md/dm-cache.c:488:
+//                              DPRINTK("New bvec (len: %u, offset: %u, left: %u)", bvec[i].bv_len, bvec[i].bv_offset, head);

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 130 exceeds 100 columns
#574: FILE: drivers/md/dm-cache.c:498:
+//                              DPRINTK("Add bvec (len: %u, offset: %u, left: %u)", bvec[i].bv_len, bvec[i].bv_offset, remaining);

WARNING:LONG_LINE_COMMENT: line length of 129 exceeds 100 columns
#587: FILE: drivers/md/dm-cache.c:511:
+//                              DPRINTK("Added a bvec (offset: %u, len: %u, left: %u)", bvec[i].bv_offset, bvec[i].bv_len, tail);

WARNING:LONG_LINE_COMMENT: line length of 137 exceeds 100 columns
#594: FILE: drivers/md/dm-cache.c:518:
+//                                      DPRINTK("Added a page (offset: %u, len: %u, left: %u)", bvec[i].bv_offset, bvec[i].bv_len, tail);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#608: FILE: drivers/md/dm-cache.c:532:
+		if (0 == job->nr_pages)	/* Original request is aligned with cache blocks */

CHECK:BRACES: Unbalanced braces around else statement
#612: FILE: drivers/md/dm-cache.c:536:
+		else {

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#613: FILE: drivers/md/dm-cache.c:537:
+			if (bio_data_dir(bio) == WRITE && head > 0 && tail > 0) {	/* Special case */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#619: FILE: drivers/md/dm-cache.c:543:
+				if (offset
+				    && (offset + bio->bi_size < PAGE_SIZE))

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#622: FILE: drivers/md/dm-cache.c:546:
+				bvec =
+				    kmalloc(nr_vecs * sizeof(*bvec),
+					    GFP_KERNEL);

WARNING:SPACING: Unnecessary space before function pointer arguments
#761: FILE: drivers/md/dm-cache.c:685:
+			int (*fn) (struct kcached_job *))

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#812: FILE: drivers/md/dm-cache.c:736:
+	dmc->nr_pages = dmc->nr_free_pages = 0;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dmc"
#848: FILE: drivers/md/dm-cache.c:772:
+	if (dmc == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#880: FILE: drivers/md/dm-cache.c:804:
+	if (argc >= 3) {
[...]
+	} else
[...]

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#881: FILE: drivers/md/dm-cache.c:805:
+		if (sscanf(argv[2], "%u", &dmc->block_size) != 1) {
+			ti->error = "dm-cache: Invalid block size";
+			r = -EINVAL;
+			goto bad4;
+		}

CHECK:BRACES: Unbalanced braces around else statement
#886: FILE: drivers/md/dm-cache.c:810:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#897: FILE: drivers/md/dm-cache.c:821:
+	if (argc >= 4) {
[...]
+	} else
[...]

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#898: FILE: drivers/md/dm-cache.c:822:
+		if (sscanf(argv[3], "%llu", &dmc->size) != 1 || !dmc->size) {
+			ti->error = "dm-cache: Invalid cache size";
+			r = -EINVAL;
+			goto bad4;
+		}

CHECK:BRACES: Unbalanced braces around else statement
#903: FILE: drivers/md/dm-cache.c:827:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#918: FILE: drivers/md/dm-cache.c:842:
+	if (argc >= 5) {
[...]
+	} else
[...]

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#919: FILE: drivers/md/dm-cache.c:843:
+		if (sscanf(argv[4], "%u", &dmc->assoc) != 1 || !dmc->assoc) {
+			ti->error = "dm-cache: Invalid cache associativity";
+			r = -EINVAL;
+			goto bad4;
+		}

CHECK:BRACES: Unbalanced braces around else statement
#924: FILE: drivers/md/dm-cache.c:848:
+	} else

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#927: FILE: drivers/md/dm-cache.c:851:
+	if (!dmc->assoc || (dmc->assoc & (dmc->assoc - 1))
+	    || dmc->size < dmc->assoc) {

WARNING:TYPO_SPELLING: 'exeeds' may be misspelled - perhaps 'exceeds'?
#935: FILE: drivers/md/dm-cache.c:859:
+		    ("Requested cache size exeeds the cache device's capacity (%llu*%i>%llu)",
 		                           ^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#949: FILE: drivers/md/dm-cache.c:873:
+	DMINFO("Going to allocate %lluKB (%uB per) mem for %llu-entry cache "
+	       "(capacity: %lluMB, associativity: %u, block size: %u sectors)",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#952: FILE: drivers/md/dm-cache.c:876:
+	dmc->cache = (struct cacheblock *)vmalloc(order);

WARNING:INDENTED_LABEL: labels should not be indented
#980: FILE: drivers/md/dm-cache.c:904:
+      bad4:

WARNING:INDENTED_LABEL: labels should not be indented
#982: FILE: drivers/md/dm-cache.c:906:
+      bad3:

WARNING:INDENTED_LABEL: labels should not be indented
#984: FILE: drivers/md/dm-cache.c:908:
+      bad2:

WARNING:INDENTED_LABEL: labels should not be indented
#986: FILE: drivers/md/dm-cache.c:910:
+      bad1:

WARNING:INDENTED_LABEL: labels should not be indented
#988: FILE: drivers/md/dm-cache.c:912:
+      bad:

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1045: FILE: drivers/md/dm-cache.c:969:
+			while ((i + j) < dmc->size
+			       && (cache[i + j].state & DIRTY)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1046: FILE: drivers/md/dm-cache.c:970:
+			       && (cache[i + j].state & DIRTY)
+			       && (cache[i + j].block ==

WARNING:SPLIT_STRING: quoted string split across lines
#1084: FILE: drivers/md/dm-cache.c:1008:
+		    ("dm-cache stats: reads (%lu), writes (%lu), cache hits (%lu, 0.%lu), "
+		     "replacement (%lu), write-backs (%lu)", dmc->reads,

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#1097: FILE: drivers/md/dm-cache.c:1021:
+ * Basic hash function for the cache to map a block offset in the device to a block offset in the cache

WARNING:TYPO_SPELLING: 'implementaion' may be misspelled - perhaps 'implementation'?
#1119: FILE: drivers/md/dm-cache.c:1043:
+ * (This seems to be a naive implementaion. However, consider the rareness of the reset,
                              ^^^^^^^^^^^^^

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#1139: FILE: drivers/md/dm-cache.c:1063:
+ *  0: cache miss but block allocated for insertion (the index of the allocated frame is stored in *cache_block)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1144: FILE: drivers/md/dm-cache.c:1068:
+			sector_t * cache_block)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE_COMMENT: line length of 109 exceeds 100 columns
#1160: FILE: drivers/md/dm-cache.c:1084:
+//                                      index, cache[index].block, cache[index].state, cache[index].counter);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1167: FILE: drivers/md/dm-cache.c:1091:
+				break;
+			} else {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1170: FILE: drivers/md/dm-cache.c:1094:
+				if (!(cache[index].state & RESERVED)
+				    && !(cache[index].state & WRITEBACK)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1172: FILE: drivers/md/dm-cache.c:1096:
+					if (!(cache[index].state & DIRTY)
+					    && cache[index].counter <

CHECK:BRACES: braces {} should be used on all arms of this statement
#1192: FILE: drivers/md/dm-cache.c:1116:
+		if (invalid != -1)
[...]
+		else if (oldest_clean != -1)
[...]
+		else if (oldest != -1) {
[...]
+		} else {
[...]

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1210: FILE: drivers/md/dm-cache.c:1134:
+			1 == res ? "HIT" : (0 == res ? "MISS" : "WB NEEDED"));

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1270: FILE: drivers/md/dm-cache.c:1194:
+		return 0;
+	} else {		/* WRITE hit */

CHECK:BRACES: Unbalanced braces around else statement
#1349: FILE: drivers/md/dm-cache.c:1273:
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#1397: FILE: drivers/md/dm-cache.c:1321:
+	} else

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1460: FILE: drivers/md/dm-cache.c:1384:
+	if (1 == res)		/* Cache hit; server request from cache */

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1462: FILE: drivers/md/dm-cache.c:1386:
+	else if (0 == res)	/* Cache miss; replacement block is found */

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1464: FILE: drivers/md/dm-cache.c:1388:
+	else if (2 == res) {	/* Cache set is dirty; initiate a write-back */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000014846.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 46 warnings, 24 checks, 1484 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000014846.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
