WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#62: 
diff -urN linux.test13p3p/drivers/block/ll_rw_blk.c linux-test12/drivers/block/ll_rw_blk.c

WARNING:SPACING: space prohibited before semicolon
#69: FILE: drivers/block/ll_rw_blk.c:957:
+	mark_buffer_clean(bh) ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#82: FILE: fs/buffer.c:102:
+static struct address_space_operations anon_space_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#83: FILE: fs/buffer.c:103:
+	writepage: block_write_anon_page,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#84: FILE: fs/buffer.c:104:
+	sync_page: block_sync_page,
 	         ^

WARNING:INDENTED_LABEL: labels should not be indented
#84: FILE: fs/buffer.c:104:
+	sync_page: block_sync_page,

WARNING:SPACING: space prohibited before semicolon
#85: FILE: fs/buffer.c:105:
+} ;

WARNING:INDENTED_LABEL: labels should not be indented
#87: FILE: fs/buffer.c:107:
+	pages: { &anon_space_mapping.pages, &anon_space_mapping.pages },

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#88: FILE: fs/buffer.c:108:
+	a_ops: &anon_space_ops,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#88: FILE: fs/buffer.c:108:
+	a_ops: &anon_space_ops,

WARNING:SPACING: space prohibited before semicolon
#89: FILE: fs/buffer.c:109:
+} ;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#98: FILE: fs/buffer.c:175:
+/*
+** util function for sync_buffers and flush_dirty_buffers

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#102: FILE: fs/buffer.c:179:
+static int dirty_list_writepage(struct page *page) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#103: FILE: fs/buffer.c:180:
+	int (*writepage)(struct page *)  ;

WARNING:SPACING: space prohibited before semicolon
#103: FILE: fs/buffer.c:180:
+	int (*writepage)(struct page *)  ;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#103: FILE: fs/buffer.c:180:
+	int (*writepage)(struct page *)  ;

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: space prohibited before semicolon
#104: FILE: fs/buffer.c:181:
+	int ret ;

WARNING:SPACING: space prohibited before semicolon
#106: FILE: fs/buffer.c:183:
+	writepage = page->mapping->a_ops->writepage ;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#108: FILE: fs/buffer.c:185:
+	if (!writepage) {
+		writepage = anon_space_ops.writepage ;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited before semicolon
#109: FILE: fs/buffer.c:186:
+		writepage = anon_space_ops.writepage ;

WARNING:SPACING: space prohibited before semicolon
#112: FILE: fs/buffer.c:189:
+	page_cache_get(page) ;

WARNING:SPACING: space prohibited before semicolon
#113: FILE: fs/buffer.c:190:
+	ClearPageDirty(page) ;

WARNING:SPACING: space prohibited before semicolon
#114: FILE: fs/buffer.c:191:
+	ret = writepage(page) ;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#116: FILE: fs/buffer.c:193:
+	/* note, when writepage returns 1, we mark the page dirty again
+	** but the writepage func is responsible for making sure any

WARNING:SPACING: space prohibited before semicolon
#121: FILE: fs/buffer.c:198:
+		SetPageDirty(page) ;

WARNING:SPACING: space prohibited before semicolon
#122: FILE: fs/buffer.c:199:
+		UnlockPage(page) ;

CHECK:CAMELCASE: Avoid CamelCase: <UnlockPage>
#122: FILE: fs/buffer.c:199:
+		UnlockPage(page) ;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACING: space prohibited before semicolon
#124: FILE: fs/buffer.c:201:
+	page_cache_release(page) ;

WARNING:SPACING: space prohibited before semicolon
#125: FILE: fs/buffer.c:202:
+	return ret ;

WARNING:SPACING: space prohibited before semicolon
#135: FILE: fs/buffer.c:219:
+	struct page *page ;

WARNING:SPACING: space prohibited before semicolon
#144: FILE: fs/buffer.c:275:
+			page = bh->b_page ;

CHECK:CAMELCASE: Avoid CamelCase: <TryLockPage>
#145: FILE: fs/buffer.c:276:
+			if (TryLockPage(page)) {

WARNING:SPACING: space prohibited before semicolon
#147: FILE: fs/buffer.c:278:
+					retry = 1 ;

WARNING:SPACING: space prohibited before semicolon
#148: FILE: fs/buffer.c:279:
+					continue ;

WARNING:SPACING: space prohibited before semicolon
#151: FILE: fs/buffer.c:282:
+				wait_on_page(page) ;

WARNING:SPACING: space prohibited before semicolon
#152: FILE: fs/buffer.c:283:
+				goto repeat ;

WARNING:SPACING: space prohibited before semicolon
#158: FILE: fs/buffer.c:287:
+			dirty_list_writepage(page) ;

WARNING:SPACING: space prohibited before semicolon
#169: FILE: fs/buffer.c:1152:
+		SetPageDirty(bh->b_page) ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#178: FILE: fs/buffer.c:1529:
+static int block_write_anon_page(struct page *page) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited before semicolon
#181: FILE: fs/buffer.c:1532:
+	int i, nr = 0 ;

WARNING:SPACING: space prohibited before semicolon
#182: FILE: fs/buffer.c:1533:
+	int partial = 0 ;

WARNING:SPACING: space prohibited before semicolon
#183: FILE: fs/buffer.c:1534:
+	int ret = 0 ;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#186: FILE: fs/buffer.c:1537:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#189: FILE: fs/buffer.c:1540:
+		BUG() ;

WARNING:SPACING: space prohibited before semicolon
#189: FILE: fs/buffer.c:1540:
+		BUG() ;

WARNING:SPACING: space prohibited before semicolon
#200: FILE: fs/buffer.c:1551:
+				arr[nr++] = bh ;

WARNING:SPACING: space prohibited before semicolon
#202: FILE: fs/buffer.c:1553:
+				partial = 1 ;

WARNING:SPACING: space prohibited before semicolon
#203: FILE: fs/buffer.c:1554:
+				unlock_buffer(bh) ;

WARNING:SPACING: space prohibited before semicolon
#206: FILE: fs/buffer.c:1557:
+			partial = 1 ;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#212: FILE: fs/buffer.c:1563:
+	for (i = 0 ; i < nr ; i++) {
+		submit_bh(WRITE, arr[i]) ;
+	}

WARNING:SPACING: space prohibited before semicolon
#213: FILE: fs/buffer.c:1564:
+		submit_bh(WRITE, arr[i]) ;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#218: FILE: fs/buffer.c:1569:
+	if (nr == 0) {
+		UnlockPage(page) ;
+	}

WARNING:SPACING: space prohibited before semicolon
#219: FILE: fs/buffer.c:1570:
+		UnlockPage(page) ;

WARNING:SPACING: space prohibited before semicolon
#221: FILE: fs/buffer.c:1572:
+	return ret ;

WARNING:SPACING: space prohibited before semicolon
#231: FILE: fs/buffer.c:1584:
+	int nr = 0 ;

WARNING:SPACING: space prohibited before semicolon
#232: FILE: fs/buffer.c:1585:
+	struct buffer_head *arr[MAX_BUF_PER_PAGE] ;

WARNING:SPACING: space prohibited before semicolon
#233: FILE: fs/buffer.c:1586:
+	int page_ok = Page_Uptodate(page) ;

CHECK:CAMELCASE: Avoid CamelCase: <Page_Uptodate>
#233: FILE: fs/buffer.c:1586:
+	int page_ok = Page_Uptodate(page) ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#260: FILE: fs/buffer.c:1622:
+^I^I^Iarr[nr++] = bh ; $

WARNING:SPACING: space prohibited before semicolon
#260: FILE: fs/buffer.c:1622:
+			arr[nr++] = bh ; 

WARNING:SPACING: space prohibited before semicolon
#262: FILE: fs/buffer.c:1624:
+			partial = 1 ;

WARNING:SPACING: space prohibited before semicolon
#271: FILE: fs/buffer.c:1632:
+		bh = arr[i] ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#279: FILE: fs/buffer.c:1638:
+^I} $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#286: FILE: fs/buffer.c:1640:
+	for (i = 0 ; i < nr ; i++) {
+		submit_bh(WRITE, arr[i]) ;
+	}

WARNING:SPACING: space prohibited before semicolon
#287: FILE: fs/buffer.c:1641:
+		submit_bh(WRITE, arr[i]) ;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#290: FILE: fs/buffer.c:1644:
+^Iif (nr == 0) $

WARNING:SPACING: space prohibited before semicolon
#291: FILE: fs/buffer.c:1645:
+		UnlockPage(page) ;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: fs/buffer.c:1773:
+static int __block_dirty_range(struct inode *inode, struct page *page,
+		unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#308: FILE: fs/buffer.c:1773:
+		unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#308: FILE: fs/buffer.c:1773:
+		unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#310: FILE: fs/buffer.c:1775:
+	unsigned block_start, block_end;

WARNING:SPACING: space prohibited before semicolon
#311: FILE: fs/buffer.c:1776:
+	int partial = 0 ;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#312: FILE: fs/buffer.c:1777:
+	unsigned blocksize;

ERROR:SPACING: space required before the open parenthesis '('
#317: FILE: fs/buffer.c:1782:
+	for(bh = head = page->buffers, block_start = 0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#319: FILE: fs/buffer.c:1784:
+	    block_start=block_end, bh = bh->b_this_page) {
 	               ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#326: FILE: fs/buffer.c:1791:
+			if (!atomic_set_buffer_dirty(bh)) {
+				buffer_insert_inode_queue(bh, inode);
+			}

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#333: FILE: fs/buffer.c:1798:
+	 * uptodate then we can optimize away a bogus readpage() for
 	   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'wether' may be misspelled - perhaps 'weather'?
#334: FILE: fs/buffer.c:1799:
+	 * the next read(). Here we 'discover' wether the page went
 	                                       ^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#335: FILE: fs/buffer.c:1800:
+	 * uptodate as a result of this (potentially partial) write.
 	   ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#353: FILE: fs/buffer.c:2098:
+		/* this will just set the dirty bits for block_write_full_page
+		** it is only safe because we have the page locked and

ERROR:SPACING: space required after that ',' (ctx:VxV)
#359: FILE: fs/buffer.c:2104:
+		__block_dirty_range(inode,page,0,offset);
 		                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#359: FILE: fs/buffer.c:2104:
+		__block_dirty_range(inode,page,0,offset);
 		                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#359: FILE: fs/buffer.c:2104:
+		__block_dirty_range(inode,page,0,offset);
 		                                ^

WARNING:SPACING: space prohibited before semicolon
#361: FILE: fs/buffer.c:2106:
+		err = __block_write_full_page(inode, page, get_block) ;

WARNING:SPACING: space prohibited before semicolon
#377: FILE: fs/buffer.c:2403:
+	unsigned long index ;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#386: FILE: fs/buffer.c:2420:
+	/* don't put this buffer head on the free list until the
+	** page is setup.  Is there a better index to use?  Would 0

WARNING:SPACING: space prohibited before semicolon
#390: FILE: fs/buffer.c:2424:
+	index = atomic_read(&buffermem_pages) ;

WARNING:SPACING: space prohibited before semicolon
#392: FILE: fs/buffer.c:2426:
+	add_to_page_cache_locked(page, &anon_space_mapping, index) ;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&anon_space_mapping'
#414: FILE: fs/buffer.c:2551:
+	if (page->mapping == (&anon_space_mapping)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BRACES: braces {} are not necessary for single statement blocks
#414: FILE: fs/buffer.c:2551:
+	if (page->mapping == (&anon_space_mapping)) {
+		atomic_dec(&buffermem_pages) ;
+	}

WARNING:SPACING: space prohibited before semicolon
#415: FILE: fs/buffer.c:2552:
+		atomic_dec(&buffermem_pages) ;

WARNING:SPACING: space prohibited before semicolon
#424: FILE: fs/buffer.c:2732:
+	struct page *page ;

WARNING:SPACING: space prohibited before semicolon
#433: FILE: fs/buffer.c:2750:
+			continue ;

WARNING:SPACING: space prohibited before semicolon
#448: FILE: fs/buffer.c:2763:
+		page = bh->b_page ;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#449: FILE: fs/buffer.c:2764:
+		if (TryLockPage(page)) {
+			continue ;
+		}

WARNING:SPACING: space prohibited before semicolon
#450: FILE: fs/buffer.c:2765:
+			continue ;

WARNING:SPACING: space prohibited before semicolon
#452: FILE: fs/buffer.c:2767:
+		spin_unlock(&lru_list_lock) ;

WARNING:SPACING: space prohibited before semicolon
#453: FILE: fs/buffer.c:2768:
+		dirty_list_writepage(page) ;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000560315.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 80 warnings, 6 checks, 409 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000560315.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
