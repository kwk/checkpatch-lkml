WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
> The only real worry would be that the locking isn't rigth, but getting the

WARNING:TYPO_SPELLING: 'rigth' may be misspelled - perhaps 'right'?
#28: 
> The only real worry would be that the locking isn't rigth, but getting the
                                                      ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#54: FILE: fs/buffer.c:325:
+ *     ^Iand writepage() all of them.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#55: FILE: fs/buffer.c:326:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#59: FILE: fs/buffer.c:330:
+void filemap_fdatasync(struct address_space * mapping)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#65: FILE: fs/buffer.c:336:
+        while (!list_empty(&mapping->dirty_pages)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#65: FILE: fs/buffer.c:336:
+        while (!list_empty(&mapping->dirty_pages)) {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#66: FILE: fs/buffer.c:337:
+^I^Istruct page *page = list_entry(mapping->dirty_pages.next, $

CHECK:CAMELCASE: Avoid CamelCase: <UnlockPage>
#85: FILE: fs/buffer.c:356:
+		UnlockPage(page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#170: FILE: mm/filemap.c:207:
+void truncate_list_pages(struct list_head *head, unsigned long start, unsigned partial)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#189: FILE: mm/filemap.c:256:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#199: FILE: mm/filemap.c:266:
+void truncate_inode_pages(struct address_space * mapping, loff_t lstart) $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#199: FILE: mm/filemap.c:266:
+void truncate_inode_pages(struct address_space * mapping, loff_t lstart) 

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#202: FILE: mm/filemap.c:269:
+	unsigned partial = lstart & (PAGE_CACHE_SIZE - 1);

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#216: FILE: mm/filemap.c:336:
+static int do_buffer_fdatasync(struct list_head *head, unsigned long start, unsigned long end, int (*fn)(struct page *))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#235: FILE: mm/filemap.c:381:
+^Iretval = do_buffer_fdatasync(&inode->i_mapping->dirty_pages, start_idx, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#236: FILE: mm/filemap.c:382:
+	retval = do_buffer_fdatasync(&inode->i_mapping->dirty_pages, start_idx, 
+			end_idx, writeout_one_page);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#237: FILE: mm/filemap.c:383:
+^Iretval |= do_buffer_fdatasync(&inode->i_mapping->clean_pages, start_idx, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#241: FILE: mm/filemap.c:387:
+^Iretval |= do_buffer_fdatasync(&inode->i_mapping->dirty_pages, start_idx, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#243: FILE: mm/filemap.c:389:
+^Iretval |= do_buffer_fdatasync(&inode->i_mapping->clean_pages, start_idx, $

WARNING:LINE_SPACING: Missing a blank line after declarations
#264: FILE: mm/memory.c:266:
+		struct page *page = pte_page(pte);
+		if ((!VALID_PAGE(page)) || PageReserved(page))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#322: FILE: include/linux/fs.h:1068:
+extern void filemap_fdatasync(struct address_space *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#322: FILE: include/linux/fs.h:1068:
+extern void filemap_fdatasync(struct address_space *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#334: FILE: include/linux/mm.h:184:
+#define SetPageDirty(page) \
+	if (!test_and_set_bit(PG_dirty, &page->flags)) { \
+		spin_lock(&pagecache_lock); \
+		list_del(&page->list); \
+		list_add(&page->list, &page->mapping->dirty_pages); \
+		spin_unlock(&pagecache_lock); \
+	}

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#334: FILE: include/linux/mm.h:184:
+#define SetPageDirty(page) \
+	if (!test_and_set_bit(PG_dirty, &page->flags)) { \
+		spin_lock(&pagecache_lock); \
+		list_del(&page->list); \
+		list_add(&page->list, &page->mapping->dirty_pages); \
+		spin_unlock(&pagecache_lock); \
+	}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'page' may be better as '(page)' to avoid precedence issues
#334: FILE: include/linux/mm.h:184:
+#define SetPageDirty(page) \
+	if (!test_and_set_bit(PG_dirty, &page->flags)) { \
+		spin_lock(&pagecache_lock); \
+		list_del(&page->list); \
+		list_add(&page->list, &page->mapping->dirty_pages); \
+		spin_unlock(&pagecache_lock); \
+	}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000559560.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 9 warnings, 6 checks, 263 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000559560.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
