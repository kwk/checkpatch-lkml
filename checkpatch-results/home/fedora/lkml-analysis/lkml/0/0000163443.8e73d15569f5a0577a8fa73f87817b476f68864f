WARNING:LINE_SPACING: Missing a blank line after declarations
#84: FILE: fs/proc/proc_misc.c:607:
+	int len;
+	extern int rcu_read_proc_data(char *page);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#84: FILE: fs/proc/proc_misc.c:607:
+	extern int rcu_read_proc_data(char *page);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LINE_SPACING: Missing a blank line after declarations
#94: FILE: fs/proc/proc_misc.c:617:
+	int len;
+	extern int rcu_read_proc_gp_data(char *page);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#94: FILE: fs/proc/proc_misc.c:617:
+	extern int rcu_read_proc_gp_data(char *page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#104: FILE: fs/proc/proc_misc.c:627:
+	int len;
+	extern int rcu_read_proc_ptrs_data(char *page);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#104: FILE: fs/proc/proc_misc.c:627:
+	extern int rcu_read_proc_ptrs_data(char *page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#114: FILE: fs/proc/proc_misc.c:637:
+	int len;
+	extern int rcu_read_proc_ctrs_data(char *page);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#114: FILE: fs/proc/proc_misc.c:637:
+	extern int rcu_read_proc_ctrs_data(char *page);

ERROR:CODE_INDENT: code indent should use tabs where possible
#121: FILE: fs/proc/proc_misc.c:644:
+^I^I^I         int count, int *eof, void *data)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#121: FILE: fs/proc/proc_misc.c:644:
+int rcu_read_proc_torture_writer(char *page, char **start, off_t off,
+			         int count, int *eof, void *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#124: FILE: fs/proc/proc_misc.c:647:
+	int len;
+	extern int rcu_read_proc_torture_writer_data(char *page);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#124: FILE: fs/proc/proc_misc.c:647:
+	extern int rcu_read_proc_torture_writer_data(char *page);

ERROR:CODE_INDENT: code indent should use tabs where possible
#131: FILE: fs/proc/proc_misc.c:654:
+^I^I^I         int count, int *eof, void *data)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#131: FILE: fs/proc/proc_misc.c:654:
+int rcu_read_proc_torture_reader(char *page, char **start, off_t off,
+			         int count, int *eof, void *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#134: FILE: fs/proc/proc_misc.c:657:
+	int len;
+	extern int rcu_read_proc_torture_reader_data(char *page);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#134: FILE: fs/proc/proc_misc.c:657:
+	extern int rcu_read_proc_torture_reader_data(char *page);

ERROR:CODE_INDENT: code indent should use tabs where possible
#141: FILE: fs/proc/proc_misc.c:664:
+^I^I^I        int count, int *eof, void *data)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#141: FILE: fs/proc/proc_misc.c:664:
+int rcu_read_proc_torture_stats(char *page, char **start, off_t off,
+			        int count, int *eof, void *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#144: FILE: fs/proc/proc_misc.c:667:
+	int len;
+	extern int rcu_read_proc_torture_stats_data(char *page);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#144: FILE: fs/proc/proc_misc.c:667:
+	extern int rcu_read_proc_torture_stats_data(char *page);

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_bh', prefer 'call_rcu' instead
#189: FILE: include/linux/rcupdate.h:217:
+#define call_rcu_bh(head, rcu) call_rcu(head, rcu)

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#191: FILE: include/linux/rcupdate.h:219:
+extern void rcu_read_lock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#192: FILE: include/linux/rcupdate.h:220:
+extern void rcu_read_unlock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#193: FILE: include/linux/rcupdate.h:221:
+extern int rcu_pending(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#232: FILE: include/linux/rcupdate.h:313:
+extern void synchronize_sched(void);

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#232: FILE: include/linux/rcupdate.h:313:
+extern void synchronize_sched(void);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: kernel/rcupdate.c:22:
+ *^I    Paul E. McKenney <paulmck@us.ibm.com> (PREEMPT_RCU)$

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#296: FILE: kernel/rcupdate.c:22:
+ *	    Paul E. McKenney <paulmck@us.ibm.com> (PREEMPT_RCU)
  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Paul>
#296: FILE: kernel/rcupdate.c:22:
+ *	    Paul E. McKenney <paulmck@us.ibm.com> (PREEMPT_RCU)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <McKenney>
#296: FILE: kernel/rcupdate.c:22:
+ *	    Paul E. McKenney <paulmck@us.ibm.com> (PREEMPT_RCU)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: kernel/rcupdate.c:26:
+ *$

CHECK:SPACING: space preferred before that '*' (ctx:ExE)
#303: FILE: kernel/rcupdate.c:26:
+ *
  ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#304: FILE: kernel/rcupdate.c:27:
+ * Papers:  http://www.rdrop.com/users/paulmck/RCU$

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#304: FILE: kernel/rcupdate.c:27:
+ * Papers:  http://www.rdrop.com/users/paulmck/RCU
  ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#304: FILE: kernel/rcupdate.c:27:
+ * Papers:  http://www.rdrop.com/users/paulmck/RCU
          ^

ERROR:SPACING: spaces required around that ':' (ctx:VxC)
#304: FILE: kernel/rcupdate.c:27:
+ * Papers:  http://www.rdrop.com/users/paulmck/RCU
                 ^

CHECK:CAMELCASE: Avoid CamelCase: <Papers>
#304: FILE: kernel/rcupdate.c:27:
+ * Papers:  http://www.rdrop.com/users/paulmck/RCU

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#308: FILE: kernel/rcupdate.c:30:
+ * ^I^IDocumentation/RCU/*.txt$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#308: FILE: kernel/rcupdate.c:30:
+ * ^I^IDocumentation/RCU/*.txt$

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#308: FILE: kernel/rcupdate.c:30:
+ * 		Documentation/RCU/*.txt
  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#308: FILE: kernel/rcupdate.c:30:
+ * 		Documentation/RCU/*.txt
    		             ^

CHECK:CAMELCASE: Avoid CamelCase: <Documentation>
#308: FILE: kernel/rcupdate.c:30:
+ * 		Documentation/RCU/*.txt

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#378: FILE: kernel/rcupdate.c:484:
+EXPORT_SYMBOL(call_rcu);  /* WARNING: GPL-only in April 2006. */

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#379: FILE: kernel/rcupdate.c:485:
+EXPORT_SYMBOL(call_rcu_bh);  /* WARNING: GPL-only in April 2006. */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#381: FILE: kernel/rcupdate.c:487:
+EXPORT_SYMBOL(synchronize_kernel);  /* WARNING: GPL-only in April 2006. */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#427: FILE: kernel/rcupdate.c:533:
+};
+struct rcu_ctrlblk {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#431: FILE: kernel/rcupdate.c:537:
+};
+static struct rcu_data rcu_data;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#436: FILE: kernel/rcupdate.c:542:
 };
+static DEFINE_PER_CPU(atomic_t [2], rcu_flipctr) =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#437: FILE: kernel/rcupdate.c:543:
+static DEFINE_PER_CPU(atomic_t [2], rcu_flipctr) =
+	{ ATOMIC_INIT(0), ATOMIC_INIT(0) };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#452: FILE: kernel/rcupdate.c:556:
+static struct rcu_torture *rcu_torture_current = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#453: FILE: kernel/rcupdate.c:557:
+static long rcu_torture_current_version = 0;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#457: FILE: kernel/rcupdate.c:561:
+static DEFINE_PER_CPU(long [RCU_TORTURE_PIPE_LEN + 1], rcu_torture_count) =
+	{ 0 };

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#459: FILE: kernel/rcupdate.c:563:
+static DEFINE_PER_CPU(long [RCU_TORTURE_PIPE_LEN + 1], rcu_torture_batch) =
+	{ 0 };

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#461: FILE: kernel/rcupdate.c:565:
+static atomic_t rcu_torture_wcount[RCU_TORTURE_PIPE_LEN + 1] =
+	{ ATOMIC_INIT(0) };

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#480: FILE: kernel/rcupdate.c:581:
+	if (current->rcu_read_lock_nesting++ == 0) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#493: FILE: kernel/rcupdate.c:594:
+		if (unlikely(flipctr != (rcu_ctrlblk.batch & 0x1))) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#532: FILE: kernel/rcupdate.c:625:
+	if (--current->rcu_read_lock_nesting == 0) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "current->rcu_flipctr2"
#543: FILE: kernel/rcupdate.c:636:
+		if (unlikely(current->rcu_flipctr2 != NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#554: FILE: kernel/rcupdate.c:647:
+{
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.waitlist"
#556: FILE: kernel/rcupdate.c:649:
+		if (rcu_data.waitlist != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.nextlist"
#565: FILE: kernel/rcupdate.c:658:
+		if (rcu_data.nextlist != NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#617: FILE: kernel/rcupdate.c:703:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#617: FILE: kernel/rcupdate.c:703:
+	if (unlikely(flipctr != rcu_ctrlblk.batch)) {
+	

WARNING:MEMORY_BARRIER: memory barrier without comment
#650: FILE: kernel/rcupdate.c:734:
+	smp_mb();

WARNING:BRACES: braces {} are not necessary for single statement blocks
#666: FILE: kernel/rcupdate.c:750:
+		if (rcu_ctrlblk.batch == rcu_data.batch) {
+			return;
+		}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcu_data.donelist"
#675: FILE: kernel/rcupdate.c:759:
+	if (rcu_data.donelist == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!list"
#691: FILE: kernel/rcupdate.c:775:
+	if (list == NULL) {

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#738: FILE: kernel/rcupdate.c:822:
+synchronize_sched(void)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#743: FILE: kernel/rcupdate.c:827:
+	if (sched_getaffinity(0, &oldmask) < 0) {
+		oldmask = cpu_possible_map; 
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#744: FILE: kernel/rcupdate.c:828:
+^I^Ioldmask = cpu_possible_map; $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.donelist"
#756: FILE: kernel/rcupdate.c:840:
+	return (rcu_data.donelist != NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.waitlist"
#757: FILE: kernel/rcupdate.c:841:
+		rcu_data.waitlist != NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.nextlist"
#758: FILE: kernel/rcupdate.c:842:
+		rcu_data.nextlist != NULL);

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(rcu_tortures)
#766: FILE: kernel/rcupdate.c:850:
+	for (i = 0; i < sizeof(rcu_tortures) / sizeof(rcu_tortures[0]); i++) {

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#771: FILE: kernel/rcupdate.c:855:
+/*&&&&*/printk("WARNING: experimental RCU implementation.\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#813: FILE: kernel/rcupdate.c:895:
+^I^I       $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#872: FILE: kernel/rcupdate.c:932:
+^I^I^I       cpu, $

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#877: FILE: kernel/rcupdate.c:937:
+	return (cnt);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#898: FILE: kernel/rcupdate.c:956:
+		return (NULL);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#906: FILE: kernel/rcupdate.c:964:
+	return (container_of(p, struct rcu_torture, rtort_free));

WARNING:BRACES: braces {} are not necessary for single statement blocks
#931: FILE: kernel/rcupdate.c:989:
+	if (i > RCU_TORTURE_PIPE_LEN) {
+		i = RCU_TORTURE_PIPE_LEN;
+	}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#936: FILE: kernel/rcupdate.c:994:
+	if (++rp->rtort_pipe_count >= RCU_TORTURE_PIPE_LEN) {
[...]
+	} else {
[...]

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#969: FILE: kernel/rcupdate.c:1027:
+	return (swahw32(rrsp->rrs_state));

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1003: FILE: kernel/rcupdate.c:1061:
+		if (rcu_ctrlblk.batch == oldbatch) {
+			continue;
+		}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1006: FILE: kernel/rcupdate.c:1064:
+		if ((rp = rcu_torture_alloc()) == NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1006: FILE: kernel/rcupdate.c:1064:
+		if ((rp = rcu_torture_alloc()) == NULL) {
+			continue;
+		}

WARNING:MEMORY_BARRIER: memory barrier without comment
#1013: FILE: kernel/rcupdate.c:1071:
+		smp_wmb();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "old_rp"
#1014: FILE: kernel/rcupdate.c:1072:
+		if (old_rp != NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1017: FILE: kernel/rcupdate.c:1075:
+			if (i > RCU_TORTURE_PIPE_LEN) {
+				i = RCU_TORTURE_PIPE_LEN;
+			}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#1054: FILE: kernel/rcupdate.c:1112:
+		if (p == NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1099: FILE: kernel/rcupdate.c:1157:
+		if (pipesummary[i] != 0) {
+			break;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1111: FILE: kernel/rcupdate.c:1169:
+	if (i > 1) {
+		cnt += sprintf(&page[cnt], "!!! ");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1115: FILE: kernel/rcupdate.c:1173:
+	for (i = 0; i < RCU_TORTURE_PIPE_LEN + 1; i++) {
+		cnt += sprintf(&page[cnt], " %ld", pipesummary[i]);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1119: FILE: kernel/rcupdate.c:1177:
+	for (i = 0; i < RCU_TORTURE_PIPE_LEN; i++) {
+		cnt += sprintf(&page[cnt], " %ld", batchsummary[i]);
+	}

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1128: FILE: kernel/rcupdate.c:1186:
+	return (cnt);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1130: FILE: kernel/rcupdate.c:1188:
+
+}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1135: FILE: kernel/rcupdate.c:1193:
+EXPORT_SYMBOL(call_rcu); /* WARNING: GPL-only in April 2006. */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1137: FILE: kernel/rcupdate.c:1195:
+EXPORT_SYMBOL_GPL(synchronize_sched);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1138: FILE: kernel/rcupdate.c:1196:
+EXPORT_SYMBOL(rcu_read_lock);  /* WARNING: GPL-only in April 2006. */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1139: FILE: kernel/rcupdate.c:1197:
+EXPORT_SYMBOL(rcu_read_unlock);  /* WARNING: GPL-only in April 2006. */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1140: FILE: kernel/rcupdate.c:1198:
+EXPORT_SYMBOL(synchronize_kernel);  /* WARNING: Removal in April 2006. */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000163443.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 24 errors, 45 warnings, 32 checks, 1044 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000163443.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
