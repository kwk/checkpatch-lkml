WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#33: FILE: fs/compat.c:74:
+asmlinkage long compat_sys_futimesat(int dfd, char __user *filename, struct compat_timeval __user *t)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#71: FILE: fs/compat.c:115:
+asmlinkage long compat_sys_newfstatat(int dfd, char __user * filename,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#72: FILE: fs/compat.c:116:
+asmlinkage long compat_sys_newfstatat(int dfd, char __user * filename,
+		struct compat_stat __user *statbuf, int flag)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#119: FILE: fs/exec.c:480:
+	err = path_lookup_open(AT_FDCWD, name, LOOKUP_FOLLOW, &nd, FMODE_READ);
 	                                                       ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#140: FILE: fs/namei.c:1067:
+static int fastcall do_path_lookup(int dfd, const char *name, unsigned int flags, struct nameidata *nd)
                                                                                                     ^^

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#140: FILE: fs/namei.c:1067:
+static int fastcall do_path_lookup(int dfd, const char *name, unsigned int flags, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#191: FILE: fs/namei.c:1128:
+int fastcall path_lookup(const char *name, unsigned int flags, struct nameidata *nd)
                                                                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#193: FILE: fs/namei.c:1130:
+	return do_path_lookup(AT_FDCWD, name, flags, nd);
 	                                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#197: FILE: fs/namei.c:1134:
+		unsigned int lookup_flags, struct nameidata *nd,
 		                                             ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#197: FILE: fs/namei.c:1134:
+static int __path_lookup_intent_open(int dfd, const char *name,
+		unsigned int lookup_flags, struct nameidata *nd,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#207: FILE: fs/namei.c:1145:
+	err = do_path_lookup(dfd, name, lookup_flags|LOOKUP_OPEN, nd);
 	                                                          ^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#207: FILE: fs/namei.c:1145:
+	err = do_path_lookup(dfd, name, lookup_flags|LOOKUP_OPEN, nd);
 	                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#217: FILE: fs/namei.c:1164:
+int path_lookup_open(int dfd, const char *name, unsigned int lookup_flags,
 		struct nameidata *nd, int open_flags)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#220: FILE: fs/namei.c:1166:
+	return __path_lookup_intent_open(dfd, name, lookup_flags, nd,
 	                                                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#232: FILE: fs/namei.c:1179:
+			      unsigned int lookup_flags, struct nameidata *nd,
 			                                                   ^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#237: FILE: fs/namei.c:1182:
+	return __path_lookup_intent_open(dfd, name, lookup_flags|LOOKUP_CREATE,
 	                                                        ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#238: FILE: fs/namei.c:1183:
+			nd, open_flags, create_mode);
 			^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#247: FILE: fs/namei.c:1193:
+		err = __path_lookup_intent_open(AT_FDCWD, tmp, lookup_flags, nd, open_flags, 0);
 		                                                             ^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#256: FILE: fs/namei.c:1285:
+int fastcall __user_walk_fd(int dfd, const char __user *name, unsigned flags,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#257: FILE: fs/namei.c:1286:
+			    struct nameidata *nd)
 			                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#264: FILE: fs/namei.c:1292:
+		err = do_path_lookup(dfd, tmp, flags, nd);
 		                                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#270: FILE: fs/namei.c:1298:
+int fastcall __user_walk(const char __user *name, unsigned flags, struct nameidata *nd)
                                                                                     ^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#270: FILE: fs/namei.c:1298:
+int fastcall __user_walk(const char __user *name, unsigned flags, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#272: FILE: fs/namei.c:1300:
+	return __user_walk_fd(AT_FDCWD, name, flags, nd);
 	                                             ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#283: FILE: fs/namei.c:1561:
+int open_namei(int dfd, const char * pathname, int flag, int mode,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#284: FILE: fs/namei.c:1562:
+	       struct nameidata *nd)
 	                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#294: FILE: fs/namei.c:1585:
+					 nd, flag);
 					 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#303: FILE: fs/namei.c:1594:
+	error = path_lookup_create(dfd, pathname, LOOKUP_PARENT, nd, flag, mode);
 	                                                         ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#312: FILE: fs/namei.c:1789:
+asmlinkage long sys_mknodat(int dfd, const char __user * filename, int mode,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#313: FILE: fs/namei.c:1790:
+			    unsigned dev)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#322: FILE: fs/namei.c:1803:
+	error = do_path_lookup(dfd, tmp, LOOKUP_PARENT, &nd);
 	                                                 ^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#330: FILE: fs/namei.c:1839:
+asmlinkage long sys_mknod(const char __user * filename, int mode, unsigned dev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#330: FILE: fs/namei.c:1839:
+asmlinkage long sys_mknod(const char __user * filename, int mode, unsigned dev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#343: FILE: fs/namei.c:1866:
+asmlinkage long sys_mkdirat(int dfd, const char __user * pathname, int mode)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#352: FILE: fs/namei.c:1877:
+		error = do_path_lookup(dfd, tmp, LOOKUP_PARENT, &nd);
 		                                                 ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#360: FILE: fs/namei.c:1897:
+asmlinkage long sys_mkdir(const char __user * pathname, int mode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#373: FILE: fs/namei.c:1963:
+static long do_rmdir(int dfd, const char __user * pathname)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#382: FILE: fs/namei.c:1974:
+	error = do_path_lookup(dfd, name, LOOKUP_PARENT, &nd);
 	                                                  ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#390: FILE: fs/namei.c:2004:
+asmlinkage long sys_rmdir(const char __user * pathname)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#403: FILE: fs/namei.c:2045:
+static long do_unlinkat(int dfd, const char __user * pathname)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#412: FILE: fs/namei.c:2057:
+	error = do_path_lookup(dfd, name, LOOKUP_PARENT, &nd);
 	                                                  ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#420: FILE: fs/namei.c:2092:
+asmlinkage long sys_unlinkat(int dfd, const char __user * pathname, int flag)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#431: FILE: fs/namei.c:2103:
+asmlinkage long sys_unlink(const char __user * pathname)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#444: FILE: fs/namei.c:2129:
+asmlinkage long sys_symlinkat(const char __user * oldname,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#445: FILE: fs/namei.c:2130:
+			      int newdfd, const char __user * newname)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#454: FILE: fs/namei.c:2145:
+		error = do_path_lookup(newdfd, to, LOOKUP_PARENT, &nd);
 		                                                   ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#462: FILE: fs/namei.c:2163:
+asmlinkage long sys_symlink(const char __user * oldname, const char __user * newname)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#462: FILE: fs/namei.c:2163:
+asmlinkage long sys_symlink(const char __user * oldname, const char __user * newname)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#489: FILE: fs/namei.c:2230:
+	error = do_path_lookup(newdfd, to, LOOKUP_PARENT, &nd);
 	                                                   ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#497: FILE: fs/namei.c:2253:
+asmlinkage long sys_link(const char __user * oldname, const char __user * newname)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#497: FILE: fs/namei.c:2253:
+asmlinkage long sys_link(const char __user * oldname, const char __user * newname)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#510: FILE: fs/namei.c:2404:
+static inline int do_rename(int olddfd, const char * oldname,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#511: FILE: fs/namei.c:2405:
+			    int newdfd, const char * newname)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#534: FILE: fs/namei.c:2481:
+asmlinkage long sys_renameat(int olddfd, const char __user * oldname,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#535: FILE: fs/namei.c:2482:
+			     int newdfd, const char __user * newname)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#551: FILE: fs/namei.c:2501:
+asmlinkage long sys_rename(const char __user * oldname, const char __user * newname)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#551: FILE: fs/namei.c:2501:
+asmlinkage long sys_rename(const char __user * oldname, const char __user * newname)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#583: FILE: fs/open.c:416:
+long do_utimes(int dfd, char __user * filename, struct timeval * times)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#583: FILE: fs/open.c:416:
+long do_utimes(int dfd, char __user * filename, struct timeval * times)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#591: FILE: fs/open.c:423:
+	error = __user_walk_fd(dfd, filename, LOOKUP_FOLLOW, &nd);
 	                                                      ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#600: FILE: fs/open.c:463:
+asmlinkage long sys_futimesat(int dfd, char __user * filename, struct timeval __user * utimes)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#600: FILE: fs/open.c:463:
+asmlinkage long sys_futimesat(int dfd, char __user * filename, struct timeval __user * utimes)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#610: FILE: fs/open.c:472:
+asmlinkage long sys_utimes(char __user * filename, struct timeval __user * utimes)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#610: FILE: fs/open.c:472:
+asmlinkage long sys_utimes(char __user * filename, struct timeval __user * utimes)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#623: FILE: fs/open.c:727:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#631: FILE: fs/open.c:735:
+	error = __user_walk_fd(dfd, filename, follow, &nd);
 	                                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#633: FILE: fs/open.c:737:
+		error = chown_common(nd.dentry, user, group);
 		                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#634: FILE: fs/open.c:738:
+		path_release(&nd);
 		              ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#648: FILE: fs/open.c:847:
+static struct file *do_filp_open(int dfd, const char * filename, int flags,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#658: FILE: fs/open.c:857:
+	error = open_namei(dfd, filename, namei_flags, mode, &nd);
 	                                                      ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#665: FILE: fs/open.c:864:
+struct file *filp_open(const char * filename, int flags, int mode)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#726: FILE: fs/stat.c:71:
+	error = __user_walk_fd(dfd, name, LOOKUP_FOLLOW, &nd);
 	                                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#748: FILE: fs/stat.c:91:
+	error = __user_walk_fd(dfd, name, 0, &nd);
 	                                      ^^

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#803: FILE: fs/stat.c:262:
+asmlinkage long sys_newfstatat(int dfd, char __user * filename, struct stat __user * statbuf, int flag)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#803: FILE: fs/stat.c:262:
+}
+asmlinkage long sys_newfstatat(int dfd, char __user * filename, struct stat __user * statbuf, int flag)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#803: FILE: fs/stat.c:262:
+asmlinkage long sys_newfstatat(int dfd, char __user * filename, struct stat __user * statbuf, int flag)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#803: FILE: fs/stat.c:262:
+asmlinkage long sys_newfstatat(int dfd, char __user * filename, struct stat __user * statbuf, int flag)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#828: FILE: fs/stat.c:292:
+asmlinkage long sys_readlinkat(int dfd, const char __user * path, char __user * buf, int bufsiz)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#828: FILE: fs/stat.c:292:
+asmlinkage long sys_readlinkat(int dfd, const char __user * path, char __user * buf, int bufsiz)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#837: FILE: fs/stat.c:300:
+	error = __user_walk_fd(dfd, path, 0, &nd);
 	                                      ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#845: FILE: fs/stat.c:317:
+asmlinkage long sys_readlink(const char __user * path, char __user * buf, int bufsiz)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#845: FILE: fs/stat.c:317:
+asmlinkage long sys_readlink(const char __user * path, char __user * buf, int bufsiz)

ERROR:CODE_INDENT: code indent should use tabs where possible
#861: FILE: include/linux/fcntl.h:27:
+                                           openat should use the current$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#861: FILE: include/linux/fcntl.h:27:
+#define AT_FDCWD		-100    /* Special value used to indicate
+                                           openat should use the current

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#862: FILE: include/linux/fcntl.h:28:
+                                           working directory. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#862: FILE: include/linux/fcntl.h:28:
+                                           working directory. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#865: FILE: include/linux/fcntl.h:31:
+                                           unlinking file.  */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#865: FILE: include/linux/fcntl.h:31:
+#define AT_REMOVEDIR		0x200   /* Remove directory instead of
+                                           unlinking file.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#865: FILE: include/linux/fcntl.h:31:
+                                           unlinking file.  */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#878: FILE: include/linux/fs.h:1317:
+extern long do_sys_open(int fdf, const char __user *filename, int flags,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#888: FILE: include/linux/fs.h:1446:
+extern int open_namei(int dfd, const char *, int, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#888: FILE: include/linux/fs.h:1446:
+extern int open_namei(int dfd, const char *, int, int, struct nameidata *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#888: FILE: include/linux/fs.h:1446:
+extern int open_namei(int dfd, const char *, int, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#888: FILE: include/linux/fs.h:1446:
+extern int open_namei(int dfd, const char *, int, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#888: FILE: include/linux/fs.h:1446:
+extern int open_namei(int dfd, const char *, int, int, struct nameidata *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#896: FILE: include/linux/fs.h:1644:
+extern int vfs_stat_fd(int dfd, char __user *, struct kstat *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char __user *' should also have an identifier name
#896: FILE: include/linux/fs.h:1644:
+extern int vfs_stat_fd(int dfd, char __user *, struct kstat *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kstat *' should also have an identifier name
#896: FILE: include/linux/fs.h:1644:
+extern int vfs_stat_fd(int dfd, char __user *, struct kstat *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#897: FILE: include/linux/fs.h:1645:
+extern int vfs_lstat_fd(int dfd, char __user *, struct kstat *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char __user *' should also have an identifier name
#897: FILE: include/linux/fs.h:1645:
+extern int vfs_lstat_fd(int dfd, char __user *, struct kstat *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kstat *' should also have an identifier name
#897: FILE: include/linux/fs.h:1645:
+extern int vfs_lstat_fd(int dfd, char __user *, struct kstat *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#908: FILE: include/linux/namei.h:59:
+extern int FASTCALL(__user_walk_fd(int dfd, const char __user *, unsigned, struct nameidata *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#908: FILE: include/linux/namei.h:59:
+extern int FASTCALL(__user_walk_fd(int dfd, const char __user *, unsigned, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char __user *' should also have an identifier name
#908: FILE: include/linux/namei.h:59:
+extern int FASTCALL(__user_walk_fd(int dfd, const char __user *, unsigned, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#908: FILE: include/linux/namei.h:59:
+extern int FASTCALL(__user_walk_fd(int dfd, const char __user *, unsigned, struct nameidata *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#908: FILE: include/linux/namei.h:59:
+extern int FASTCALL(__user_walk_fd(int dfd, const char __user *, unsigned, struct nameidata *));

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#911: FILE: include/linux/namei.h:61:
+	__user_walk_fd(AT_FDCWD, name, LOOKUP_FOLLOW, nd)
 	                                              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#914: FILE: include/linux/namei.h:63:
+	__user_walk_fd(AT_FDCWD, name, 0, nd)
 	                                  ^^

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#923: FILE: include/linux/namei.h:71:
+extern int path_lookup_open(int dfd, const char *name, unsigned lookup_flags, struct nameidata *, int open_flags);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#923: FILE: include/linux/namei.h:71:
+extern int path_lookup_open(int dfd, const char *name, unsigned lookup_flags, struct nameidata *, int open_flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#923: FILE: include/linux/namei.h:71:
+extern int path_lookup_open(int dfd, const char *name, unsigned lookup_flags, struct nameidata *, int open_flags);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#923: FILE: include/linux/namei.h:71:
+extern int path_lookup_open(int dfd, const char *name, unsigned lookup_flags, struct nameidata *, int open_flags);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#935: FILE: include/linux/time.h:93:
+extern long do_utimes(int dfd, char __user * filename, struct timeval * times);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#935: FILE: include/linux/time.h:93:
+extern long do_utimes(int dfd, char __user * filename, struct timeval * times);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#935: FILE: include/linux/time.h:93:
+extern long do_utimes(int dfd, char __user * filename, struct timeval * times);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000124914.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 42 errors, 60 warnings, 13 checks, 825 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000124914.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
