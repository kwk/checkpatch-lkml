WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#79: 
--- 2.6.11-rc4-bk9/arch/i386/mm/ioremap.c	2005-02-21 12:03:54.000000000 +0000

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#88: FILE: arch/i386/mm/ioremap.c:21:
+static inline void remap_area_pte(pmd_t *pmd, unsigned long addr,
+		unsigned long end, unsigned long phys_addr, unsigned long flags)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#107: FILE: arch/i386/mm/ioremap.c:29:
+		BUG_ON(!pte_none(*pte));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#120: FILE: arch/i386/mm/ioremap.c:37:
+static inline int remap_area_pmd(pud_t *pud, unsigned long addr,
+		unsigned long end, unsigned long phys_addr, unsigned long flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#152: FILE: arch/i386/mm/ioremap.c:54:
+static inline int remap_area_pud(pgd_t *pgd, unsigned long addr,
+		unsigned long end, unsigned long phys_addr, unsigned long flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#164: FILE: arch/i386/mm/ioremap.c:66:
+			error = remap_area_pmd(pud, addr, next,
+						phys_addr + addr, flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#174: FILE: arch/i386/mm/ioremap.c:76:
+static int remap_area_pages(unsigned long addr, unsigned long phys_addr,
 				 unsigned long size, unsigned long flags)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#185: FILE: arch/i386/mm/ioremap.c:83:
+	BUG_ON(addr >= end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: arch/i386/mm/ioremap.c:93:
+			error = remap_area_pud(pgd, addr, next,
+						phys_addr + addr, flags);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'end' - possible side-effects?
#270: FILE: include/asm-generic/pgtable.h:138:
+#define pmd_limit(addr, end)						\
+({	unsigned long __limit = ((addr) + PMD_SIZE) & PMD_MASK;		\
+	(__limit <= (end) && __limit)? __limit: (end);			\
+})

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#272: FILE: include/asm-generic/pgtable.h:140:
+	(__limit <= (end) && __limit)? __limit: (end);			\
 	                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#272: FILE: include/asm-generic/pgtable.h:140:
+	(__limit <= (end) && __limit)? __limit: (end);			\
 	                                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'end' - possible side-effects?
#277: FILE: include/asm-generic/pgtable.h:145:
+#define pud_limit(addr, end)						\
+({	unsigned long __limit = ((addr) + PUD_SIZE) & PUD_MASK;		\
+	(__limit <= (end) && __limit)? __limit: (end);			\
+})

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#279: FILE: include/asm-generic/pgtable.h:147:
+	(__limit <= (end) && __limit)? __limit: (end);			\
 	                             ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#279: FILE: include/asm-generic/pgtable.h:147:
+	(__limit <= (end) && __limit)? __limit: (end);			\
 	                                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'end' - possible side-effects?
#283: FILE: include/asm-generic/pgtable.h:151:
+#define pgd_limit(addr, end)						\
+({	unsigned long __limit = ((addr) + PGDIR_SIZE) & PGDIR_MASK;	\
+	(__limit <= (end) && __limit)? __limit: (end);			\
+})

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#285: FILE: include/asm-generic/pgtable.h:153:
+	(__limit <= (end) && __limit)? __limit: (end);			\
 	                             ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#285: FILE: include/asm-generic/pgtable.h:153:
+	(__limit <= (end) && __limit)? __limit: (end);			\
 	                                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: mm/memory.c:91:
+static inline void clear_pmd_range(struct mmu_gather *tlb,
+		pmd_t *pmd, unsigned long addr, unsigned long end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#322: FILE: mm/memory.c:104:
+static inline void clear_pud_range(struct mmu_gather *tlb,
+		pud_t *pud, unsigned long addr, unsigned long end)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#339: FILE: mm/memory.c:110:
+	start_pmd = pmd = pmd_offset(pud, addr);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#370: FILE: mm/memory.c:131:
+static inline void clear_pgd_range(struct mmu_gather *tlb,
+		pgd_t *pgd, unsigned long addr, unsigned long end)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#387: FILE: mm/memory.c:137:
+	start_pud = pud = pud_offset(pgd, addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#421: FILE: mm/memory.c:163:
+void clear_page_range(struct mmu_gather *tlb,
+		unsigned long addr, unsigned long end)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#435: FILE: mm/memory.c:168:
+	BUG_ON(addr >= end);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#502: FILE: mm/memory.c:211:
+pte_t fastcall * pte_alloc_map(struct mm_struct *mm, pmd_t *pmd, unsigned long address)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#532: FILE: mm/memory.c:253:
+static inline int copy_one_pte(pte_t *dst_pte, pte_t *src_pte,
+				unsigned long vm_flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#585: FILE: mm/memory.c:306:
+static int copy_pte_range(struct mm_struct *dst_mm, struct mm_struct *src_mm,
+		pmd_t *dst_pmd, pmd_t *src_pmd, unsigned long vm_flags,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#623: FILE: mm/memory.c:333:
+	if (count[2] += count[3])

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#637: FILE: mm/memory.c:344:
+static inline int copy_pmd_range(struct mm_struct *dst_mm,
+		struct mm_struct *src_mm, pud_t *dst_pud, pud_t *src_pud,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#678: FILE: mm/memory.c:374:
+static inline int copy_pud_range(struct mm_struct *dst_mm,
+		struct mm_struct *src_mm, pgd_t *dst_pgd, pgd_t *src_pgd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#717: FILE: mm/memory.c:404:
+int copy_page_range(struct mm_struct *dst_mm, struct mm_struct *src_mm,
 		struct vm_area_struct *vma)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#756: FILE: mm/memory.c:427:
+		err = copy_pud_range(dst_mm, src_mm, dst_pgd, src_pgd,
+					vma->vm_flags, addr, next);

WARNING:LINE_SPACING: Missing a blank line after declarations
#800: FILE: mm/memory.c:443:
+		pte_t entry = *pte;
+		if (pte_none(entry))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#856: FILE: mm/memory.c:504:
+static inline void zap_pmd_range(struct mmu_gather *tlb,
+		pud_t *pud, unsigned long addr, unsigned long end,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#897: FILE: mm/memory.c:525:
+static inline void zap_pud_range(struct mmu_gather *tlb,
+		pgd_t *pgd, unsigned long addr, unsigned long end,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#933: FILE: mm/memory.c:546:
+static void zap_pgd_range(struct mmu_gather *tlb,
+		struct vm_area_struct *vma, unsigned long addr,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#942: FILE: mm/memory.c:552:
+	BUG_ON(addr >= end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#976: FILE: mm/memory.c:647:
+				zap_pgd_range(*tlbp, vma, start,
 						start + block, details);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#986: FILE: mm/memory.c:958:
+static void zeromap_pte_range(pmd_t *pmd, unsigned long addr,
+		unsigned long end, pgprot_t prot)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1011: FILE: mm/memory.c:972:
+static inline int zeromap_pmd_range(struct mm_struct *mm, pud_t *pud,
+		unsigned long addr, unsigned long end, pgprot_t prot)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1052: FILE: mm/memory.c:988:
+static inline int zeromap_pud_range(struct mm_struct *mm, pgd_t *pgd,
+		unsigned long addr, unsigned long end, pgprot_t prot)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1084: FILE: mm/memory.c:1008:
+int zeromap_page_range(struct vm_area_struct *vma,
+		unsigned long addr, unsigned long size, pgprot_t prot)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1101: FILE: mm/memory.c:1016:
+	BUG_ON(addr >= end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1143: FILE: mm/memory.c:1041:
+static void remap_pte_range(pmd_t *pmd, unsigned long addr, unsigned long end,
 		unsigned long pfn, pgprot_t prot)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1169: FILE: mm/memory.c:1056:
+static inline int remap_pmd_range(struct mm_struct *mm,
+		pud_t *pud, unsigned long addr, unsigned long end,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1206: FILE: mm/memory.c:1075:
+static inline int remap_pud_range(struct mm_struct *mm,
+		pgd_t *pgd, unsigned long addr, unsigned long end,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1232: FILE: mm/memory.c:1088:
+			error = remap_pmd_range(mm, pud, addr, next,
+					pfn + (addr >> PAGE_SHIFT), prot);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1265: FILE: mm/memory.c:1107:
+	BUG_ON(addr >= end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1291: FILE: mm/memory.c:1127:
+			error = remap_pud_range(mm, pgd, addr, next,
+					pfn + (addr >> PAGE_SHIFT), prot);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1349: FILE: mm/mprotect.c:29:
+static void change_pte_range(pmd_t *pmd, unsigned long addr,
+				unsigned long end, pgprot_t newprot)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1386: FILE: mm/mprotect.c:50:
+static inline void change_pmd_range(pud_t *pud, unsigned long addr,
+				unsigned long end, pgprot_t newprot)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1427: FILE: mm/mprotect.c:70:
+static inline void change_pud_range(pgd_t *pgd, unsigned long addr,
+				unsigned long end, pgprot_t newprot)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1468: FILE: mm/mprotect.c:90:
+static void change_protection(struct vm_area_struct *vma, unsigned long addr,
+				unsigned long end, pgprot_t newprot)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1534: FILE: mm/msync.c:26:
+^I^Iunsigned long addr, unsigned long end, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1534: FILE: mm/msync.c:26:
+static void sync_pte_range(pmd_t *pmd,
+		unsigned long addr, unsigned long end, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1583: FILE: mm/msync.c:53:
+^I^Iunsigned long addr, unsigned long end, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1583: FILE: mm/msync.c:53:
+static inline void sync_pmd_range(pud_t *pud,
+		unsigned long addr, unsigned long end, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1625: FILE: mm/msync.c:74:
+static inline void sync_pud_range(pgd_t *pgd,
+		unsigned long addr, unsigned long end,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1665: FILE: mm/msync.c:95:
+static void sync_pgd_range(struct vm_area_struct *vma,
+		unsigned long addr, unsigned long end, unsigned int flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1730: FILE: mm/msync.c:126:
+static void filemap_sync(struct vm_area_struct *vma, unsigned long start,
+			unsigned long end, unsigned int flags)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1738: FILE: mm/msync.c:131:
+		size_t sz = min((size_t)(end-start), chunk);
 		                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1741: FILE: mm/msync.c:133:
+		sync_pgd_range(vma, start, start+sz, flags);
 		                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1753: FILE: mm/msync.c:140:
+static void filemap_sync(struct vm_area_struct *vma, unsigned long start,
+			unsigned long end, unsigned int flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1783: FILE: mm/swapfile.c:431:
+static void unuse_pte(struct vm_area_struct *vma, pte_t *pte,
+		unsigned long addr, swp_entry_t entry, struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1801: FILE: mm/swapfile.c:443:
+static int unuse_pte_range(struct vm_area_struct *vma,
+		pmd_t *pmd, unsigned long addr, unsigned long end,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1850: FILE: mm/swapfile.c:466:
+static inline int unuse_pmd_range(struct vm_area_struct *vma,
+		pud_t *pud, unsigned long addr, unsigned long end,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1896: FILE: mm/swapfile.c:489:
+static inline int unuse_pud_range(struct vm_area_struct *vma,
+		pgd_t *pgd, unsigned long addr, unsigned long end,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1941: FILE: mm/swapfile.c:512:
+static int unuse_vma(struct vm_area_struct *vma,
+		swp_entry_t entry, struct page *page)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2086: FILE: mm/vmalloc.c:33:
+		pte_t entry = ptep_get_and_clear(pte);
+		if (unlikely(!pte_none(entry) && !pte_present(entry))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#2087: FILE: mm/vmalloc.c:34:
+			printk(KERN_CRIT "ERROR: swapped out kernel page\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2096: FILE: mm/vmalloc.c:41:
+static inline void unmap_area_pmd(pud_t *pud,
+		unsigned long addr, unsigned long end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2137: FILE: mm/vmalloc.c:61:
+static inline void unmap_area_pud(pgd_t *pgd,
+		unsigned long addr, unsigned long end)

CHECK:SPACING: No space is necessary after a cast
#2171: FILE: mm/vmalloc.c:82:
+	unsigned long addr = (unsigned long) area->addr;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2176: FILE: mm/vmalloc.c:87:
+	BUG_ON(addr >= end);

CHECK:SPACING: No space is necessary after a cast
#2206: FILE: mm/vmalloc.c:101:
+	flush_tlb_kernel_range((unsigned long) area->addr, end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2210: FILE: mm/vmalloc.c:105:
+static int map_area_pte(pmd_t *pmd, unsigned long addr,
+		unsigned long end, pgprot_t prot, struct page ***pages)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2242: FILE: mm/vmalloc.c:123:
+static inline int map_area_pmd(pud_t *pud, unsigned long addr,
+	       unsigned long end, pgprot_t prot, struct page ***pages)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2269: FILE: mm/vmalloc.c:140:
+static inline int map_area_pud(pgd_t *pgd, unsigned long addr,
+		unsigned long end, pgprot_t prot, struct page ***pages)

CHECK:SPACING: No space is necessary after a cast
#2317: FILE: mm/vmalloc.c:158:
+	unsigned long addr = (unsigned long) area->addr;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2326: FILE: mm/vmalloc.c:164:
+	BUG_ON(addr >= end);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000205335.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 12 warnings, 59 checks, 2231 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000205335.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
