WARNING:TYPO_SPELLING: 'dissassembly' may be misspelled - perhaps 'disassembly'?
#58: 
definition). Looking at the dissassembly (or running in the debugger) 
                            ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#67: 
fixing the problem, it also makes sigaddset() faster for constant arguments.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#98: 
#ifdef  DEF_KERNEL

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#99: 
#include <linux/kernel.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#100: 
#include <linux/module.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#101: 
#include <linux/slab.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#102: 
#include <linux/mm.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#103: 
#include <linux/signal.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#110: 
#define SIGADDSET sigaddset

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#111: 
#define SIGISMEMBER sigismember

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#114: 
#else

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#116: 
#define printk printf

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#117: 
#define KERN_INFO

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#121: 
#include <asm/signal.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#122: 
#define _NSIG (64)

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#123: 
#define _NSIG_BPW (32)

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#139: 
#define SIGISMEMBER(set,sig)               \

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#144: 
#define SIGADDSET1(set,sig)                \

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#160: 
#define SIGADDSET  __gen_sigaddset

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#164: 
#endif

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#176: 
#ifdef  DEF_KERNEL

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#178: 
#else

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#180: 
#endif

WARNING:TYPO_SPELLING: 'uncomenting' may be misspelled - perhaps 'uncommenting'?
#196: 
	//uncomenting this line fixes the problem
	  ^^^^^^^^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#262: FILE: signal.h:189:
+#define sigaddset(set,sig)                 \
                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'set' - possible side-effects?
#262: FILE: signal.h:189:
+#define sigaddset(set,sig)                 \
+	(__builtin_constant_p(sig) ?       \
+	__const_sigaddset((set),(sig)) :   \
+	__gen_sigaddset((set),(sig)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sig' - possible side-effects?
#262: FILE: signal.h:189:
+#define sigaddset(set,sig)                 \
+	(__builtin_constant_p(sig) ?       \
+	__const_sigaddset((set),(sig)) :   \
+	__gen_sigaddset((set),(sig)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#264: FILE: signal.h:191:
+	__const_sigaddset((set),(sig)) :   \
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#265: FILE: signal.h:192:
+	__gen_sigaddset((set),(sig)))
 	                     ^

WARNING:INLINE: plain inline is preferred over __inline__
#267: FILE: signal.h:194:
+static __inline__ void __gen_sigaddset(sigset_t *set, int _sig)

WARNING:INLINE: plain inline is preferred over __inline__
#273: FILE: signal.h:199:
+static __inline__ void __const_sigaddset(sigset_t *set, int _sig)

WARNING:LINE_SPACING: Missing a blank line after declarations
#276: FILE: signal.h:202:
+	unsigned long sig = _sig - 1;
+	set->sig[sig / _NSIG_BPW] |= 1 << (sig % _NSIG_BPW);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#279: FILE: signal.h:205:
+#define sigdelset(set,sig)                 \
                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'set' - possible side-effects?
#279: FILE: signal.h:205:
+#define sigdelset(set,sig)                 \
+	(__builtin_constant_p(sig) ?       \
+	__const_sigdelset((set),(sig)) :   \
+	__gen_sigdelset((set),(sig)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sig' - possible side-effects?
#279: FILE: signal.h:205:
+#define sigdelset(set,sig)                 \
+	(__builtin_constant_p(sig) ?       \
+	__const_sigdelset((set),(sig)) :   \
+	__gen_sigdelset((set),(sig)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#281: FILE: signal.h:207:
+	__const_sigdelset((set),(sig)) :   \
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#282: FILE: signal.h:208:
+	__gen_sigdelset((set),(sig)))
 	                     ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#284: FILE: signal.h:210:
+
+

WARNING:INLINE: plain inline is preferred over __inline__
#285: FILE: signal.h:211:
+static __inline__ void __gen_sigdelset(sigset_t *set, int _sig)

WARNING:INLINE: plain inline is preferred over __inline__
#290: FILE: signal.h:216:
+static __inline__ void __const_sigaddset(sigset_t *set, int _sig)

WARNING:LINE_SPACING: Missing a blank line after declarations
#293: FILE: signal.h:219:
+	unsigned long sig = _sig - 1;
+	set->sig[sig / _NSIG_BPW] &= ~(1 << (sig % _NSIG_BPW));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000133800.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 30 warnings, 5 checks, 41 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000133800.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
