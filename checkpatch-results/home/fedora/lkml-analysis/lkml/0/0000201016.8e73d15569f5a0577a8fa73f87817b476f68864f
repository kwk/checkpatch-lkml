WARNING:TYPO_SPELLING: 'stucture' may be misspelled - perhaps 'structure'?
#130: FILE: Documentation/filesystems/relayfs.txt:18:
+allow clients to impose some stucture on the buffer data.  Nor does
                              ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:REPEATED_WORD: Possible repeated word: 'relayfs'
#162: FILE: Documentation/filesystems/relayfs.txt:50:
+	mount -t relayfs relayfs /mnt/relay

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#197: FILE: Documentation/filesystems/relayfs.txt:85:
+    buf_mapped(buf, filp)
                     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#198: FILE: Documentation/filesystems/relayfs.txt:86:
+    buf_unmapped(buf, filp)
                       ^^^^

WARNING:TYPO_SPELLING: 'reponsible' may be misspelled - perhaps 'responsible'?
#238: FILE: Documentation/filesystems/relayfs.txt:126:
+sub-buffers in the channel.  In this mode, the client is reponsible
                                                          ^^^^^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'to'
#252: FILE: Documentation/filesystems/relayfs.txt:140:
+can be used to to get the padding for the just-finished sub-buffer.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#326: FILE: fs/Kconfig:935:
+config RELAYFS_FS
+	tristate "Relayfs file system support"
+	---help---
+	  Relayfs is a high-speed data relay filesystem designed to provide
+	  an efficient mechanism for tools and facilities to relay large
+	  amounts of data from kernel space to user space.
+
+	  To compile this code as a module, choose M here: the module will be
+	  called relayfs.
+
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#361: FILE: fs/relayfs/buffers.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LINE_SPACING: Missing a blank line after declarations
#383: FILE: fs/relayfs/buffers.c:23:
+	struct rchan_buf *buf = vma->vm_private_data;
+	buf->chan->cb->buf_unmapped(buf, vma->vm_file);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#416: FILE: fs/relayfs/buffers.c:56:
+static struct vm_operations_struct relay_file_mmap_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#433: FILE: fs/relayfs/buffers.c:73:
+	struct file *filp = vma->vm_file;
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#443: FILE: fs/relayfs/buffers.c:83:
+	buf->chan->cb->buf_mapped(buf, filp);
 	                               ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#497: FILE: fs/relayfs/buffers.c:137:
+	struct rchan_buf *buf = kcalloc(1, sizeof(struct rchan_buf), GFP_KERNEL);
+	if (!buf)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#500: FILE: fs/relayfs/buffers.c:140:
+	buf->padding = kmalloc(chan->n_subbufs * sizeof(unsigned *), GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#500: FILE: fs/relayfs/buffers.c:140:
+	buf->padding = kmalloc(chan->n_subbufs * sizeof(unsigned *), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#503: FILE: fs/relayfs/buffers.c:143:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#504: FILE: fs/relayfs/buffers.c:144:
+	buf->commit = kmalloc(chan->n_subbufs * sizeof(unsigned *), GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#504: FILE: fs/relayfs/buffers.c:144:
+	buf->commit = kmalloc(chan->n_subbufs * sizeof(unsigned *), GFP_KERNEL);

WARNING:TYPO_SPELLING: 'fileystem' may be misspelled - perhaps 'filesystem'?
#547: FILE: fs/relayfs/buffers.c:187:
+ *	Removes the file from the relayfs fileystem, which also frees the
   	                                  ^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#554: FILE: fs/relayfs/buffers.c:194:
+	struct rchan_buf *buf = container_of(kref, struct rchan_buf, kref);
+	relayfs_remove(buf->dentry);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#560: FILE: fs/relayfs/buffers.h:1:
+#ifndef _BUFFERS_H

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#564: FILE: fs/relayfs/buffers.h:5:
+#define FIX_SIZE(x) (((x) - 1) & PAGE_MASK) + PAGE_SIZE

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#566: FILE: fs/relayfs/buffers.h:7:
+extern int relay_mmap_buf(struct rchan_buf *buf, struct vm_area_struct *vma);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#567: FILE: fs/relayfs/buffers.h:8:
+extern struct rchan_buf *relay_create_buf(struct rchan *chan);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#568: FILE: fs/relayfs/buffers.h:9:
+extern void relay_destroy_buf(struct rchan_buf *buf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#569: FILE: fs/relayfs/buffers.h:10:
+extern void relay_remove_buf(struct kref *kref);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#576: FILE: fs/relayfs/inode.c:1:
+/*

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#602: FILE: fs/relayfs/inode.c:27:
+static struct vfsmount *		relayfs_mount;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo *			bar" should be "foo *bar"
#604: FILE: fs/relayfs/inode.c:29:
+static kmem_cache_t *			relayfs_inode_cachep;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#618: FILE: fs/relayfs/inode.c:43:
+		BUG_ON(!chan);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#623: FILE: fs/relayfs/inode.c:48:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#629: FILE: fs/relayfs/inode.c:54:
+^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#636: FILE: fs/relayfs/inode.c:61:
+	inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#645: FILE: fs/relayfs/inode.c:70:
+^I^I$

WARNING:TYPO_SPELLING: 'specifed' may be misspelled - perhaps 'specified'?
#665: FILE: fs/relayfs/inode.c:90:
+ *	Creates a file or directory with the specifed permissions.
   	                                     ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#677: FILE: fs/relayfs/inode.c:102:
+	BUG_ON(!name || !(S_ISREG(mode) || S_ISDIR(mode)));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#681: FILE: fs/relayfs/inode.c:106:
+		printk(KERN_ERR "Couldn't mount relayfs: errcode %d\n", error);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#723: FILE: fs/relayfs/inode.c:148:
+^I$

WARNING:TYPO_SPELLING: 'specied' may be misspelled - perhaps 'specified'?
#737: FILE: fs/relayfs/inode.c:162:
+ *	@mode: mode, if not specied the default perms are used
   	                    ^^^^^^^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#748: FILE: fs/relayfs/inode.c:173:
+		mode = S_IRUSR;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0755'.
#765: FILE: fs/relayfs/inode.c:190:
+	int mode = S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO;

WARNING:LINE_SPACING: Missing a blank line after declarations
#766: FILE: fs/relayfs/inode.c:191:
+	int mode = S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO;
+	return relayfs_create_entry(name, parent, mode, NULL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#776: FILE: fs/relayfs/inode.c:201:
+	struct dentry *parent = dentry->d_parent;
+	if (!parent)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#804: FILE: fs/relayfs/inode.c:229:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#807: FILE: fs/relayfs/inode.c:232:
+^I$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#811: FILE: fs/relayfs/inode.c:236:
+ *	@filp: the file
   	 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#815: FILE: fs/relayfs/inode.c:240:
+int relayfs_open(struct inode *inode, struct file *filp)
                                                    ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#818: FILE: fs/relayfs/inode.c:243:
+	struct rchan_buf *buf = RELAYFS_I(inode)->buf;
+	kref_get(&buf->kref);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#825: FILE: fs/relayfs/inode.c:250:
+ *	@filp: the file
   	 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#830: FILE: fs/relayfs/inode.c:255:
+int relayfs_mmap(struct file *filp, struct vm_area_struct *vma)
                               ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#833: FILE: fs/relayfs/inode.c:258:
+	struct inode *inode = filp->f_dentry->d_inode;
+	return relay_mmap_buf(RELAYFS_I(inode)->buf, vma);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#838: FILE: fs/relayfs/inode.c:263:
+ *	@filp: the file
   	 ^^^^

WARNING:TYPO_SPELLING: 'implemention' may be misspelled - perhaps 'implementation'?
#841: FILE: fs/relayfs/inode.c:266:
+ *	Poll implemention.
   	     ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#843: FILE: fs/relayfs/inode.c:268:
+unsigned int relayfs_poll(struct file *filp, poll_table *wait)
                                        ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#853: FILE: fs/relayfs/inode.c:278:
+		poll_wait(filp, &buf->read_wait, wait);
 		          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#864: FILE: fs/relayfs/inode.c:289:
+ *	@filp: the file
   	 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#869: FILE: fs/relayfs/inode.c:294:
+int relayfs_release(struct inode *inode, struct file *filp)
                                                       ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#872: FILE: fs/relayfs/inode.c:297:
+	struct rchan_buf *buf = RELAYFS_I(inode)->buf;
+	kref_put(&buf->kref, relay_remove_buf);

WARNING:LINE_SPACING: Missing a blank line after declarations
#883: FILE: fs/relayfs/inode.c:308:
+	struct relayfs_inode_info *p = kmem_cache_alloc(relayfs_inode_cachep, SLAB_KERNEL);
+	if (!p)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#886: FILE: fs/relayfs/inode.c:311:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#904: FILE: fs/relayfs/inode.c:329:
+	struct relayfs_inode_info *i = p;
+	if ((flags & (SLAB_CTOR_VERIFY | SLAB_CTOR_CONSTRUCTOR)) == SLAB_CTOR_CONSTRUCTOR)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#908: FILE: fs/relayfs/inode.c:333:
+struct file_operations relayfs_file_operations = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#922: FILE: fs/relayfs/inode.c:347:
+static int relayfs_fill_super(struct super_block * sb, void * data, int silent)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#922: FILE: fs/relayfs/inode.c:347:
+static int relayfs_fill_super(struct super_block * sb, void * data, int silent)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0755'.
#926: FILE: fs/relayfs/inode.c:351:
+	int mode = S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO;

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#939: FILE: fs/relayfs/inode.c:364:
+		iput(inode);
 		^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#947: FILE: fs/relayfs/inode.c:372:
+static struct super_block * relayfs_get_sb(struct file_system_type *fs_type,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#964: FILE: fs/relayfs/inode.c:389:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#966: FILE: fs/relayfs/inode.c:391:
+	relayfs_inode_cachep = kmem_cache_create("relayfs_inode_cache",
+				sizeof(struct relayfs_inode_info), 0,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#974: FILE: fs/relayfs/inode.c:399:
+^I$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#987: FILE: fs/relayfs/inode.c:412:
+EXPORT_SYMBOL_GPL(relayfs_open);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#988: FILE: fs/relayfs/inode.c:413:
+EXPORT_SYMBOL_GPL(relayfs_poll);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#989: FILE: fs/relayfs/inode.c:414:
+EXPORT_SYMBOL_GPL(relayfs_mmap);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#990: FILE: fs/relayfs/inode.c:415:
+EXPORT_SYMBOL_GPL(relayfs_release);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#991: FILE: fs/relayfs/inode.c:416:
+EXPORT_SYMBOL_GPL(relayfs_file_operations);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#992: FILE: fs/relayfs/inode.c:417:
+EXPORT_SYMBOL_GPL(relayfs_create_dir);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#993: FILE: fs/relayfs/inode.c:418:
+EXPORT_SYMBOL_GPL(relayfs_remove_dir);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1003: FILE: fs/relayfs/relay.c:1:
+/*

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1068: FILE: fs/relayfs/relay.c:66:
+static int subbuf_start_default_callback (struct rchan_buf *buf,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1070: FILE: fs/relayfs/relay.c:68:
+					  unsigned prev_subbuf_idx,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1079: FILE: fs/relayfs/relay.c:77:
+static void deliver_default_callback (struct rchan_buf *buf,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1080: FILE: fs/relayfs/relay.c:78:
+				      unsigned subbuf_idx,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1089: FILE: fs/relayfs/relay.c:87:
+					struct file *filp)
 					             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1097: FILE: fs/relayfs/relay.c:95:
+					  struct file *filp)
 					               ^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1105: FILE: fs/relayfs/relay.c:103:
+				      unsigned subbuf_idx,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1130: FILE: fs/relayfs/relay.c:128:
+	struct rchan_buf *buf = private;
+	wake_up_interruptible(&buf->read_wait);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1140: FILE: fs/relayfs/relay.c:138:
+	void *next = buf->data + buf->chan->subbuf_size;
+	if (next >= buf->start + buf->chan->subbuf_size * buf->chan->n_subbufs)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1156: FILE: fs/relayfs/relay.c:154:
+^I$

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1200: FILE: fs/relayfs/relay.c:198:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#1220: FILE: fs/relayfs/relay.c:218:
+	dentry = relayfs_create_file(filename, parent, S_IRUSR, chan);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1285: FILE: fs/relayfs/relay.c:283:
+			 unsigned subbuf_size,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1286: FILE: fs/relayfs/relay.c:284:
+			 unsigned n_subbufs,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1299: FILE: fs/relayfs/relay.c:297:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1311: FILE: fs/relayfs/relay.c:309:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1325: FILE: fs/relayfs/relay.c:323:
+^I$

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1327: FILE: fs/relayfs/relay.c:325:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1343: FILE: fs/relayfs/relay.c:341:
+				 unsigned subbuf_idx)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1346: FILE: fs/relayfs/relay.c:344:
+	unsigned full = buf->chan->subbuf_size - buf->padding[subbuf_idx];

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1357: FILE: fs/relayfs/relay.c:355:
+static inline void do_switch(struct rchan_buf *buf, unsigned new, unsigned old)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1357: FILE: fs/relayfs/relay.c:355:
+static inline void do_switch(struct rchan_buf *buf, unsigned new, unsigned old)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1359: FILE: fs/relayfs/relay.c:357:
+	unsigned start = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1365: FILE: fs/relayfs/relay.c:363:
+	buf->offset = buf->commit[new] = start;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1378: FILE: fs/relayfs/relay.c:376:
+unsigned relay_switch_subbuf(struct rchan_buf *buf, unsigned length)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1378: FILE: fs/relayfs/relay.c:376:
+unsigned relay_switch_subbuf(struct rchan_buf *buf, unsigned length)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1381: FILE: fs/relayfs/relay.c:379:
+	unsigned padding;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1390: FILE: fs/relayfs/relay.c:388:
+^I$

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1401: FILE: fs/relayfs/relay.c:399:
+	if (waitqueue_active(&buf->read_wait)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1408: FILE: fs/relayfs/relay.c:406:
+		void *old_data = buf->start + old * buf->chan->subbuf_size;
+		buf->chan->cb->buf_full(buf, old, old_data);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1428: FILE: fs/relayfs/relay.c:426:
+		  unsigned count)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1430: FILE: fs/relayfs/relay.c:428:
+	unsigned offset, subbuf_idx;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1459: FILE: fs/relayfs/relay.c:457:
+	if (cpu >= NR_CPUS || !chan->buf[cpu])

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1461: FILE: fs/relayfs/relay.c:459:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1481: FILE: fs/relayfs/relay.c:479:
+	struct rchan *chan = container_of(kref, struct rchan, kref);
+	kfree(chan);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1497: FILE: fs/relayfs/relay.c:495:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1519: FILE: fs/relayfs/relay.c:517:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1526: FILE: fs/relayfs/relay.c:524:
+EXPORT_SYMBOL_GPL(relay_open);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1527: FILE: fs/relayfs/relay.c:525:
+EXPORT_SYMBOL_GPL(relay_close);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1528: FILE: fs/relayfs/relay.c:526:
+EXPORT_SYMBOL_GPL(relay_flush);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1529: FILE: fs/relayfs/relay.c:527:
+EXPORT_SYMBOL_GPL(relay_reset);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1530: FILE: fs/relayfs/relay.c:528:
+EXPORT_SYMBOL_GPL(relay_subbufs_consumed);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1531: FILE: fs/relayfs/relay.c:529:
+EXPORT_SYMBOL_GPL(relay_commit);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1532: FILE: fs/relayfs/relay.c:530:
+EXPORT_SYMBOL_GPL(relay_switch_subbuf);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1537: FILE: fs/relayfs/relay.h:1:
+#ifndef _RELAY_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1544: FILE: fs/relayfs/relay.h:8:
+extern int relayfs_remove(struct dentry *dentry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1545: FILE: fs/relayfs/relay.h:9:
+extern int relay_buf_empty(struct rchan_buf *buf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1546: FILE: fs/relayfs/relay.h:10:
+extern void relay_destroy_channel(struct kref *kref);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1553: FILE: include/linux/relayfs_fs.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1554: FILE: include/linux/relayfs_fs.h:2:
+ * linux/include/linux/relayfs_fs.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1583: FILE: include/linux/relayfs_fs.h:31:
+struct rchan_buf
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1586: FILE: include/linux/relayfs_fs.h:34:
+	unsigned offset;		/* current offset into sub-buffer */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#1597: FILE: include/linux/relayfs_fs.h:45:
+	unsigned *padding;		/* padding counts per sub-buffer */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#1598: FILE: include/linux/relayfs_fs.h:46:
+	unsigned *commit;		/* commit counts per sub-buffer */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1606: FILE: include/linux/relayfs_fs.h:54:
+struct rchan
+{

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1608: FILE: include/linux/relayfs_fs.h:56:
+	unsigned subbuf_size;		/* sub-buffer size */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1609: FILE: include/linux/relayfs_fs.h:57:
+	unsigned n_subbufs;		/* number of sub-buffers per buffer */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1610: FILE: include/linux/relayfs_fs.h:58:
+	unsigned alloc_size;		/* total buffer size allocated */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1621: FILE: include/linux/relayfs_fs.h:69:
+struct relayfs_inode_info
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1635: FILE: include/linux/relayfs_fs.h:83:
+struct rchan_callbacks
+{

WARNING:SPACING: Unnecessary space before function pointer arguments
#1647: FILE: include/linux/relayfs_fs.h:95:
+	int (*subbuf_start) (struct rchan_buf *buf,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1649: FILE: include/linux/relayfs_fs.h:97:
+			     unsigned prev_subbuf_idx,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1660: FILE: include/linux/relayfs_fs.h:108:
+	void (*deliver) (struct rchan_buf *buf,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1661: FILE: include/linux/relayfs_fs.h:109:
+			 unsigned subbuf_idx,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1667: FILE: include/linux/relayfs_fs.h:115:
+	 * @filp: relayfs file pointer
 	    ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1671: FILE: include/linux/relayfs_fs.h:119:
+        void (*buf_mapped)(struct rchan_buf *buf,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1671: FILE: include/linux/relayfs_fs.h:119:
+        void (*buf_mapped)(struct rchan_buf *buf,$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1672: FILE: include/linux/relayfs_fs.h:120:
+			   struct file *filp);
 			                ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1677: FILE: include/linux/relayfs_fs.h:125:
+	 * @filp: relayfs file pointer
 	    ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1681: FILE: include/linux/relayfs_fs.h:129:
+        void (*buf_unmapped)(struct rchan_buf *buf,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1681: FILE: include/linux/relayfs_fs.h:129:
+        void (*buf_unmapped)(struct rchan_buf *buf,$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1682: FILE: include/linux/relayfs_fs.h:130:
+			     struct file *filp);
 			                  ^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'channel'
#1686: FILE: include/linux/relayfs_fs.h:134:
+	 * @buf: the channel channel buffer

ERROR:CODE_INDENT: code indent should use tabs where possible
#1692: FILE: include/linux/relayfs_fs.h:140:
+        void (*buf_full)(struct rchan_buf *buf,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1692: FILE: include/linux/relayfs_fs.h:140:
+        void (*buf_full)(struct rchan_buf *buf,$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1693: FILE: include/linux/relayfs_fs.h:141:
+			 unsigned subbuf_idx,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1703: FILE: include/linux/relayfs_fs.h:151:
+			 unsigned subbuf_size,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1704: FILE: include/linux/relayfs_fs.h:152:
+			 unsigned n_subbufs,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1707: FILE: include/linux/relayfs_fs.h:155:
+extern void relay_close(struct rchan *chan);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1708: FILE: include/linux/relayfs_fs.h:156:
+extern void relay_flush(struct rchan *chan);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1709: FILE: include/linux/relayfs_fs.h:157:
+extern void relay_subbufs_consumed(struct rchan *chan,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1712: FILE: include/linux/relayfs_fs.h:160:
+extern void relay_reset(struct rchan *chan);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1713: FILE: include/linux/relayfs_fs.h:161:
+extern unsigned relay_switch_subbuf(struct rchan_buf *buf,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1713: FILE: include/linux/relayfs_fs.h:161:
+extern unsigned relay_switch_subbuf(struct rchan_buf *buf,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1714: FILE: include/linux/relayfs_fs.h:162:
+				    unsigned length);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1715: FILE: include/linux/relayfs_fs.h:163:
+extern void relay_commit(struct rchan_buf *buf,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1717: FILE: include/linux/relayfs_fs.h:165:
+			 unsigned count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1718: FILE: include/linux/relayfs_fs.h:166:
+extern struct dentry *relayfs_create_dir(const char *name,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1720: FILE: include/linux/relayfs_fs.h:168:
+extern int relayfs_remove_dir(struct dentry *dentry);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1737: FILE: include/linux/relayfs_fs.h:185:
+			       unsigned length)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1765: FILE: include/linux/relayfs_fs.h:213:
+				 unsigned length)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1768: FILE: include/linux/relayfs_fs.h:216:
+^I$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1788: FILE: include/linux/relayfs_fs.h:236:
+static inline void *relay_reserve(struct rchan *chan, unsigned length)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1808: FILE: include/linux/relayfs_fs.h:256:
+extern struct file_operations relayfs_file_operations;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1809: FILE: include/linux/relayfs_fs.h:257:
+extern int relayfs_open(struct inode *inode, struct file *filp);
                                                           ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1809: FILE: include/linux/relayfs_fs.h:257:
+extern int relayfs_open(struct inode *inode, struct file *filp);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1810: FILE: include/linux/relayfs_fs.h:258:
+extern unsigned int relayfs_poll(struct file *filp, poll_table *wait);
                                               ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1810: FILE: include/linux/relayfs_fs.h:258:
+extern unsigned int relayfs_poll(struct file *filp, poll_table *wait);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1811: FILE: include/linux/relayfs_fs.h:259:
+extern int relayfs_mmap(struct file *filp, struct vm_area_struct *vma);
                                      ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1811: FILE: include/linux/relayfs_fs.h:259:
+extern int relayfs_mmap(struct file *filp, struct vm_area_struct *vma);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1812: FILE: include/linux/relayfs_fs.h:260:
+extern int relayfs_release(struct inode *inode, struct file *filp);
                                                              ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1812: FILE: include/linux/relayfs_fs.h:260:
+extern int relayfs_release(struct inode *inode, struct file *filp);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000201016.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 30 errors, 128 warnings, 22 checks, 1667 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000201016.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
