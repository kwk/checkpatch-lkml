CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#75: FILE: include/linux/timer.h:27:
+extern void __timer_init(struct timer_list *t, timer_cb_t *func, long sig);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#77: FILE: include/linux/timer.h:29:
+#define timer_init(ptr, member, func)				\
+	__timer_init(&(ptr)->member, func,			\
+		     __timer_sig(typeof(*ptr), member))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#77: FILE: include/linux/timer.h:29:
+#define timer_init(ptr, member, func)				\
+	__timer_init(&(ptr)->member, func,			\
+		     __timer_sig(typeof(*ptr), member))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#77: FILE: include/linux/timer.h:29:
+#define timer_init(ptr, member, func)				\
+	__timer_init(&(ptr)->member, func,			\
+		     __timer_sig(typeof(*ptr), member))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#81: FILE: include/linux/timer.h:33:
+#define timer_of(ptr, type, member) ({				\
+	const struct timer_list *_t = (ptr);			\
+	if (_t->_sig != __timer_sig(type, member)) {		\
+		WARN_ON(_t->_sig != -__timer_sig(type, member));\
+		return;						\
+	}							\
+	container_of(ptr, type, member);			\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#81: FILE: include/linux/timer.h:33:
+#define timer_of(ptr, type, member) ({				\
+	const struct timer_list *_t = (ptr);			\
+	if (_t->_sig != __timer_sig(type, member)) {		\
+		WARN_ON(_t->_sig != -__timer_sig(type, member));\
+		return;						\
+	}							\
+	container_of(ptr, type, member);			\
+})

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#81: FILE: include/linux/timer.h:33:
+#define timer_of(ptr, type, member) ({				\
+	const struct timer_list *_t = (ptr);			\
+	if (_t->_sig != __timer_sig(type, member)) {		\
+		WARN_ON(_t->_sig != -__timer_sig(type, member));\
+		return;						\
+	}							\
+	container_of(ptr, type, member);			\
+})

CHECK:LINE_SPACING: Please don't use multiple blank lines
#90: FILE: include/linux/timer.h:42:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#145: FILE: kernel/timer.c:586:
+ ^I^I^Idata = timer->_sig == __TIMER_OLD_SIG ? timer->data : (unsigned long)timer;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#145: FILE: kernel/timer.c:586:
+ ^I^I^Idata = timer->_sig == __TIMER_OLD_SIG ? timer->data : (unsigned long)timer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: kernel/timer.c:586:
+ ^I^I^Idata = timer->_sig == __TIMER_OLD_SIG ? timer->data : (unsigned long)timer;$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#177: FILE: kernel/workqueue.c:251:
+		BUG_ON(timer_pending(&dwork->timer));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#201: FILE: kernel/workqueue.c:281:
+		BUG_ON(timer_pending(&dwork->timer));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000003808.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 5 warnings, 7 checks, 141 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000003808.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
