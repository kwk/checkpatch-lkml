WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
 drivers/scsi/libata-scsi.c  |  790 ++++++++++++++++++++++++++++++++++++--------

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*host_set)...) over kzalloc(sizeof(struct ata_host_set)...)
#95: FILE: drivers/scsi/libata-core.c:4261:
+	host_set = kzalloc(sizeof(struct ata_host_set) +

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:LINE_SPACING: Please don't use multiple blank lines
#169: FILE: drivers/scsi/libata-scsi.c:63:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'ARRE' may be misspelled - perhaps 'ARE'?
#174: FILE: drivers/scsi/libata-scsi.c:68:
+	    (1 << 6),	/* ARRE (auto read reallocation) */
 	             	   ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!argbuf"
#241: FILE: drivers/scsi/libata-scsi.c:166:
+		if (argbuf == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#248: FILE: drivers/scsi/libata-scsi.c:173:
+^I^I                            block count in sector count field */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#248: FILE: drivers/scsi/libata-scsi.c:173:
+		scsi_cmd[2]  = 0x0e;     /* no off.line or cc, read from dev,
+		                            block count in sector count field */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#248: FILE: drivers/scsi/libata-scsi.c:173:
+		                            block count in sector count field */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#270: FILE: drivers/scsi/libata-scsi.c:195:
+	/* Good values for timeout and retries?  Values below
+	   from scsi_ioctl_send_command() for default case... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#270: FILE: drivers/scsi/libata-scsi.c:195:
+	   from scsi_ioctl_send_command() for default case... */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#271: FILE: drivers/scsi/libata-scsi.c:196:
+	scsi_wait_req(sreq, scsi_cmd, argbuf, argsize, (10*HZ), 5);
 	                                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#281: FILE: drivers/scsi/libata-scsi.c:206:
+	if ((argbuf)
+	 && copy_to_user((void *)(arg + sizeof(args)), argbuf, argsize))

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#287: FILE: drivers/scsi/libata-scsi.c:212:
+	if (argbuf)
+		kfree(argbuf);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#335: FILE: drivers/scsi/libata-scsi.c:260:
+	/* Good values for timeout and retries?  Values below
+	   from scsi_ioctl_send_command() for default case... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#335: FILE: drivers/scsi/libata-scsi.c:260:
+	   from scsi_ioctl_send_command() for default case... */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#336: FILE: drivers/scsi/libata-scsi.c:261:
+	scsi_wait_req(sreq, scsi_cmd, NULL, 0, (10*HZ), 5);
 	                                          ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#385: FILE: drivers/scsi/libata-scsi.c:383:
+void ata_dump_status(unsigned id, struct ata_taskfile *tf)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#389: FILE: drivers/scsi/libata-scsi.c:387:
+	printk(KERN_WARNING "ata%u: status=0x%02x { ", id, stat);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#391: FILE: drivers/scsi/libata-scsi.c:389:
+		printk("Busy }\n");	/* Data is not valid in this case */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#393: FILE: drivers/scsi/libata-scsi.c:391:
+		if (stat & 0x40)	printk("DriveReady ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#393: FILE: drivers/scsi/libata-scsi.c:391:
+		if (stat & 0x40)	printk("DriveReady ");

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#394: FILE: drivers/scsi/libata-scsi.c:392:
+		if (stat & 0x20)	printk("DeviceFault ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#394: FILE: drivers/scsi/libata-scsi.c:392:
+		if (stat & 0x20)	printk("DeviceFault ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#395: FILE: drivers/scsi/libata-scsi.c:393:
+		if (stat & 0x10)	printk("SeekComplete ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#395: FILE: drivers/scsi/libata-scsi.c:393:
+		if (stat & 0x10)	printk("SeekComplete ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#396: FILE: drivers/scsi/libata-scsi.c:394:
+		if (stat & 0x08)	printk("DataRequest ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#396: FILE: drivers/scsi/libata-scsi.c:394:
+		if (stat & 0x08)	printk("DataRequest ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#397: FILE: drivers/scsi/libata-scsi.c:395:
+		if (stat & 0x04)	printk("CorrectedError ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#397: FILE: drivers/scsi/libata-scsi.c:395:
+		if (stat & 0x04)	printk("CorrectedError ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#398: FILE: drivers/scsi/libata-scsi.c:396:
+		if (stat & 0x02)	printk("Index ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#398: FILE: drivers/scsi/libata-scsi.c:396:
+		if (stat & 0x02)	printk("Index ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#399: FILE: drivers/scsi/libata-scsi.c:397:
+		if (stat & 0x01)	printk("Error ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#399: FILE: drivers/scsi/libata-scsi.c:397:
+		if (stat & 0x01)	printk("Error ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#400: FILE: drivers/scsi/libata-scsi.c:398:
+		printk("}\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#403: FILE: drivers/scsi/libata-scsi.c:401:
+			printk(KERN_WARNING "ata%u: error=0x%02x { ", id, err);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#404: FILE: drivers/scsi/libata-scsi.c:402:
+			if (err & 0x04)		printk("DriveStatusError ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#404: FILE: drivers/scsi/libata-scsi.c:402:
+			if (err & 0x04)		printk("DriveStatusError ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#406: FILE: drivers/scsi/libata-scsi.c:404:
+				if (err & 0x04)	printk("BadCRC ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#406: FILE: drivers/scsi/libata-scsi.c:404:
+				if (err & 0x04)	printk("BadCRC ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#407: FILE: drivers/scsi/libata-scsi.c:405:
+				else		printk("Sector ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#407: FILE: drivers/scsi/libata-scsi.c:405:
+				else		printk("Sector ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#409: FILE: drivers/scsi/libata-scsi.c:407:
+			if (err & 0x40)		printk("UncorrectableError ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#409: FILE: drivers/scsi/libata-scsi.c:407:
+			if (err & 0x40)		printk("UncorrectableError ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#410: FILE: drivers/scsi/libata-scsi.c:408:
+			if (err & 0x10)		printk("SectorIdNotFound ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#410: FILE: drivers/scsi/libata-scsi.c:408:
+			if (err & 0x10)		printk("SectorIdNotFound ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#411: FILE: drivers/scsi/libata-scsi.c:409:
+			if (err & 0x02)		printk("TrackZeroNotFound ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#411: FILE: drivers/scsi/libata-scsi.c:409:
+			if (err & 0x02)		printk("TrackZeroNotFound ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#412: FILE: drivers/scsi/libata-scsi.c:410:
+			if (err & 0x01)		printk("AddrMarkNotFound ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#412: FILE: drivers/scsi/libata-scsi.c:410:
+			if (err & 0x01)		printk("AddrMarkNotFound ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#413: FILE: drivers/scsi/libata-scsi.c:411:
+			printk("}\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#440: FILE: drivers/scsi/libata-scsi.c:431:
+void ata_to_sense_error(unsigned id, u8 drv_stat, u8 drv_err, u8 *sk, u8 *asc, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#440: FILE: drivers/scsi/libata-scsi.c:431:
+void ata_to_sense_error(unsigned id, u8 drv_stat, u8 drv_err, u8 *sk, u8 *asc, 

WARNING:BRACES: braces {} are not necessary for single statement blocks
#471: FILE: drivers/scsi/libata-scsi.c:480:
+	if (drv_stat & ATA_BUSY) {
+		drv_err = 0;	/* Ignore the err bits, they're invalid */
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#500: FILE: drivers/scsi/libata-scsi.c:488:
+^I^I^Iif ((sense_table[i][0] & drv_err) == $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#514: FILE: drivers/scsi/libata-scsi.c:497:
+		printk(KERN_WARNING "ata%u: no sense translation for "

WARNING:SPLIT_STRING: quoted string split across lines
#515: FILE: drivers/scsi/libata-scsi.c:498:
+		printk(KERN_WARNING "ata%u: no sense translation for "
+		       "error 0x%02x\n", id, drv_err);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#529: FILE: drivers/scsi/libata-scsi.c:511:
+^Iprintk(KERN_WARNING "ata%u: no sense translation for status: 0x%02x\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#529: FILE: drivers/scsi/libata-scsi.c:511:
+	printk(KERN_WARNING "ata%u: no sense translation for status: 0x%02x\n", 

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#541: FILE: drivers/scsi/libata-scsi.c:523:
+	printk(KERN_ERR "ata%u: translated ATA stat/err 0x%02x/%02x to "

WARNING:SPLIT_STRING: quoted string split across lines
#542: FILE: drivers/scsi/libata-scsi.c:524:
+	printk(KERN_ERR "ata%u: translated ATA stat/err 0x%02x/%02x to "
+	       "SCSI SK/ASC/ASCQ 0x%x/%02x/%02x\n", id, drv_stat, drv_err,

WARNING:RETURN_VOID: void function return statements are not generally useful
#545: FILE: drivers/scsi/libata-scsi.c:527:
+	return;
+}

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#586: FILE: drivers/scsi/libata-scsi.c:556:
+	assert(NULL != qc->ap->ops->tf_read);

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#626: FILE: drivers/scsi/libata-scsi.c:581:
+	desc[1] = sb[7] = 14;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#686: FILE: drivers/scsi/libata-scsi.c:631:
+	assert(NULL != qc->ap->ops->tf_read);

ERROR:CODE_INDENT: code indent should use tabs where possible
#716: FILE: drivers/scsi/libata-scsi.c:1205:
+ ^Iint need_sense = drv_stat & (ATA_ERR | ATA_BUSY | ATA_DRQ);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#716: FILE: drivers/scsi/libata-scsi.c:1205:
+ ^Iint need_sense = drv_stat & (ATA_ERR | ATA_BUSY | ATA_DRQ);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#716: FILE: drivers/scsi/libata-scsi.c:1205:
+ ^Iint need_sense = drv_stat & (ATA_ERR | ATA_BUSY | ATA_DRQ);$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd->cmnd[0] == ATA_16'
#729: FILE: drivers/scsi/libata-scsi.c:1214:
+	if (((cmd->cmnd[0] == ATA_16) || (cmd->cmnd[0] == ATA_12)) &&
+ 	    ((cmd->cmnd[2] & 0x20) || need_sense)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd->cmnd[0] == ATA_12'
#729: FILE: drivers/scsi/libata-scsi.c:1214:
+	if (((cmd->cmnd[0] == ATA_16) || (cmd->cmnd[0] == ATA_12)) &&
+ 	    ((cmd->cmnd[2] & 0x20) || need_sense)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#730: FILE: drivers/scsi/libata-scsi.c:1215:
+ ^I    ((cmd->cmnd[2] & 0x20) || need_sense)) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#730: FILE: drivers/scsi/libata-scsi.c:1215:
+ ^I    ((cmd->cmnd[2] & 0x20) || need_sense)) {$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#730: FILE: drivers/scsi/libata-scsi.c:1215:
+	if (((cmd->cmnd[0] == ATA_16) || (cmd->cmnd[0] == ATA_12)) &&
+ 	    ((cmd->cmnd[2] & 0x20) || need_sense)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#730: FILE: drivers/scsi/libata-scsi.c:1215:
+ ^I    ((cmd->cmnd[2] & 0x20) || need_sense)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#731: FILE: drivers/scsi/libata-scsi.c:1216:
+ ^I^Iata_gen_ata_desc_sense(qc);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#731: FILE: drivers/scsi/libata-scsi.c:1216:
+ ^I^Iata_gen_ata_desc_sense(qc);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#731: FILE: drivers/scsi/libata-scsi.c:1216:
+ ^I^Iata_gen_ata_desc_sense(qc);$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'spg != ALL_SUB_MPAGES'
#872: FILE: drivers/scsi/libata-scsi.c:1740:
+	if (spg && (spg != ALL_SUB_MPAGES))

ERROR:SPACING: space required before the open parenthesis '('
#877: FILE: drivers/scsi/libata-scsi.c:1743:
+	switch(pg) {

WARNING:TYPO_SPELLING: 'pass-thru' may be misspelled - perhaps 'pass-through'?
#951: FILE: drivers/scsi/libata-scsi.c:2170:
+ *	ata_scsi_map_proto - Map pass-thru protocol value to taskfile value.
   	                         ^^^^^^^^^

WARNING:TYPO_SPELLING: 'pass-thru' may be misspelled - perhaps 'pass-through'?
#952: FILE: drivers/scsi/libata-scsi.c:2171:
+ *	@byte1: Byte 1 from pass-thru CDB.
   	                    ^^^^^^^^^

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#960: FILE: drivers/scsi/libata-scsi.c:2179:
+	switch((byte1 & 0x1e) >> 1) {
+		case 3:		/* Non-data */
[...]
+		case 6:		/* DMA */
[...]
+		case 4:		/* PIO Data-in */
+		case 5:		/* PIO Data-out */
[...]
+		case 10:	/* Device Reset */
+		case 0:		/* Hard Reset */
+		case 1:		/* SRST */
+		case 2:		/* Bus Idle */
+		case 7:		/* Packet */
+		case 8:		/* DMA Queued */
+		case 9:		/* Device Diagnostic */
+		case 11:	/* UDMA Data-in */
+		case 12:	/* UDMA Data-Out */
+		case 13:	/* FPDMA */
+		default:	/* Reserved */

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#960: FILE: drivers/scsi/libata-scsi.c:2179:
+	switch((byte1 & 0x1e) >> 1) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#969: FILE: drivers/scsi/libata-scsi.c:2188:
+			if (byte1 & 0xe0) {
+				return ATA_PROT_PIO_MULT;
+			}

WARNING:TYPO_SPELLING: 'pass-thru' may be misspelled - perhaps 'pass-through'?
#992: FILE: drivers/scsi/libata-scsi.c:2211:
+ *	ata_scsi_pass_thru - convert ATA pass-thru CDB to taskfile
   	                                 ^^^^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around qc->tf
#1004: FILE: drivers/scsi/libata-scsi.c:2223:
+	struct ata_taskfile *tf = &(qc->tf);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1007: FILE: drivers/scsi/libata-scsi.c:2226:
+	if ((tf->protocol = ata_scsi_map_proto(scsicmd[1])) == ATA_PROT_UNKNOWN)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1020: FILE: drivers/scsi/libata-scsi.c:2239:
+		if (scsicmd[1] & 0x01) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1027: FILE: drivers/scsi/libata-scsi.c:2246:
+		} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tf->command == ATA_CMD_SET_FEATURES'
#1062: FILE: drivers/scsi/libata-scsi.c:2281:
+	if ((tf->command == ATA_CMD_SET_FEATURES)
+	 && (tf->feature == SETFEATURES_XFER))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tf->feature == SETFEATURES_XFER'
#1062: FILE: drivers/scsi/libata-scsi.c:2281:
+	if ((tf->command == ATA_CMD_SET_FEATURES)
+	 && (tf->feature == SETFEATURES_XFER))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1063: FILE: drivers/scsi/libata-scsi.c:2282:
+	if ((tf->command == ATA_CMD_SET_FEATURES)
+	 && (tf->feature == SETFEATURES_XFER))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1119: FILE: drivers/scsi/libata.h:53:
+extern int ata_task_ioctl(struct scsi_device *scsidev, void __user *arg);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1120: FILE: drivers/scsi/libata.h:54:
+extern int ata_cmd_ioctl(struct scsi_device *scsidev, void __user *arg);

CHECK:CAMELCASE: Avoid CamelCase: <aPERR>
#1177: FILE: drivers/scsi/pdc_adma.c:467:
+			if ((status & (aPERR | aPSD | aUIRQ)))

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <aPSD>
#1177: FILE: drivers/scsi/pdc_adma.c:467:
+			if ((status & (aPERR | aPSD | aUIRQ)))

CHECK:CAMELCASE: Avoid CamelCase: <aUIRQ>
#1177: FILE: drivers/scsi/pdc_adma.c:467:
+			if ((status & (aPERR | aPSD | aUIRQ)))

CHECK:CAMELCASE: Avoid CamelCase: <cDONE>
#1179: FILE: drivers/scsi/pdc_adma.c:469:
+			else if (pp->pkt[0] != cDONE)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1201: FILE: drivers/scsi/pdc_adma.c:565:
+		dma_free_coherent(dev, ADMA_PKT_BYTES,
+						pp->pkt, pp->pkt_dma);

WARNING:TYPO_SPELLING: 'pass-thru' may be misspelled - perhaps 'pass-through'?
#1456: FILE: include/scsi/scsi.h:120:
+#define	ATA_16		      0x85	/* 16-byte pass-thru */
        	      		          	           ^^^^^^^^^

WARNING:TYPO_SPELLING: 'pass-thru' may be misspelled - perhaps 'pass-through'?
#1457: FILE: include/scsi/scsi.h:121:
+#define	ATA_12		      0xa1	/* 12-byte pass-thru */
        	      		          	           ^^^^^^^^^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000140331.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 51 warnings, 24 checks, 1306 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000140331.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
