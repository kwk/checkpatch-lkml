WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#53: 
--- linux-2.6.11.orig/include/asm-ia64/spinlock.h	2005-03-01 23:37:48.000000000 -0800

WARNING:FUNCTION_ARGUMENTS: function definition argument '__u32 *' should also have an identifier name
#88: FILE: include/asm-ia64/spinlock.h:106:
+void hbo_spinlock_wait_remote(__u32 *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#88: FILE: include/asm-ia64/spinlock.h:106:
+void hbo_spinlock_wait_remote(__u32 *, unsigned long);

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__flags' - possible side-effects?
#96: FILE: include/asm-ia64/spinlock.h:114:
+#define _raw_spin_lock_flags(__x, __flags)						\
+do {											\
+	__u32 *ia64_spinlock_ptr = (__u32 *) (__x);					\
+	__u64 ia64_spinlock_val;							\
+							\
+	if (unlikely(ndata[numa_node_id()].spin_at == ia64_spinlock_ptr))		\
+		hbo_spinlock_wait_remote(ia64_spinlock_ptr, __flags);			\
+							\
+	ia64_spinlock_val = ia64_cmpxchg4_acq(ia64_spinlock_ptr, numa_node_id()+ 1, 0);	\
+							\
+	if (unlikely(ia64_spinlock_val))						\
+		hbo_spinlock_contention(ia64_spinlock_ptr, ia64_spinlock_val, __flags);	\
+} while (0)

CHECK:SPACING: No space is necessary after a cast
#98: FILE: include/asm-ia64/spinlock.h:116:
+	__u32 *ia64_spinlock_ptr = (__u32 *) (__x);					\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#104: FILE: include/asm-ia64/spinlock.h:122:
+	ia64_spinlock_val = ia64_cmpxchg4_acq(ia64_spinlock_ptr, numa_node_id()+ 1, 0);	\
 	                                                                       ^

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#170: FILE: arch/ia64/mm/numa.c:24:
+#include <asm/uaccess.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#194: FILE: arch/ia64/mm/numa.c:68:
+#define INC_HC(member) __get_cpu_var(counters).member++

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#194: FILE: arch/ia64/mm/numa.c:68:
+#define INC_HC(member) __get_cpu_var(counters).member++

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#195: FILE: arch/ia64/mm/numa.c:69:
+#define DEC_HC(member) __get_cpu_var(counters).member--

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#195: FILE: arch/ia64/mm/numa.c:69:
+#define DEC_HC(member) __get_cpu_var(counters).member--

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: arch/ia64/mm/numa.c:74:
+^I ^Ilocal_irq_enable();$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#200: FILE: arch/ia64/mm/numa.c:74:
+^I ^Ilocal_irq_enable();$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#214: FILE: arch/ia64/mm/numa.c:88:
+static unsigned int backoff_factor = 2*8;
                                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#240: FILE: arch/ia64/mm/numa.c:114:
+		if (unlikely(lockval-1 != numa_node_id())) {
 		                    ^

ERROR:SPACING: space required before the open parenthesis '('
#253: FILE: arch/ia64/mm/numa.c:127:
+		for(;;) {

ERROR:SPACING: space required before the open parenthesis '('
#256: FILE: arch/ia64/mm/numa.c:130:
+			for(i = 0; i < backoff; i++)

ERROR:SPACING: spaces required around that '==' (ctx:WxV)
#267: FILE: arch/ia64/mm/numa.c:141:
+			if (likely(lockval ==0))
 			                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#279: FILE: arch/ia64/mm/numa.c:153:
+					ndata[lockval-1].spin_at = lock;
 					             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#296: FILE: arch/ia64/mm/numa.c:170:
+		lockval = ia64_cmpxchg4_acq(lock, numa_node_id()+1, 0);
 		                                                ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ndata[i].spin_at
#312: FILE: arch/ia64/mm/numa.c:186:
+					cmpxchg(&(ndata[i].spin_at), lock, NULL);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:CODE_INDENT: code indent should use tabs where possible
#316: FILE: arch/ia64/mm/numa.c:190:
+        } while (likely(lockval));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: arch/ia64/mm/numa.c:190:
+        } while (likely(lockval));$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#329: FILE: arch/ia64/mm/numa.c:203:
+static int hbo_read_proc(char *page, char **start, off_t off,
+	int count, int *eof, void *data)

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#336: FILE: arch/ia64/mm/numa.c:210:
+	if (cpu >=0)
 	        ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#336: FILE: arch/ia64/mm/numa.c:210:
+	if (cpu >=0)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#338: FILE: arch/ia64/mm/numa.c:212:
+	else {

ERROR:SPACING: space required before the open parenthesis '('
#340: FILE: arch/ia64/mm/numa.c:214:
+		for(n = 1; n < num_possible_cpus(); n++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#341: FILE: arch/ia64/mm/numa.c:215:
+                        struct hbo_c_s *c = &per_cpu(counters, n);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: arch/ia64/mm/numa.c:215:
+                        struct hbo_c_s *c = &per_cpu(counters, n);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#353: FILE: arch/ia64/mm/numa.c:227:
+	len += sprintf(page+len, "Contentions      : %lu\n",x->contention);
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#353: FILE: arch/ia64/mm/numa.c:227:
+	len += sprintf(page+len, "Contentions      : %lu\n",x->contention);
 	                                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#354: FILE: arch/ia64/mm/numa.c:228:
+	len += sprintf(page+len, "Remote Lock      : %lu\n",x->remote_lock);
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#354: FILE: arch/ia64/mm/numa.c:228:
+	len += sprintf(page+len, "Remote Lock      : %lu\n",x->remote_lock);
 	                                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#355: FILE: arch/ia64/mm/numa.c:229:
+	len += sprintf(page+len, "Retry            : %lu\n",x->retry);
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#355: FILE: arch/ia64/mm/numa.c:229:
+	len += sprintf(page+len, "Retry            : %lu\n",x->retry);
 	                                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#356: FILE: arch/ia64/mm/numa.c:230:
+	len += sprintf(page+len, "Local block      : %lu\n",x->local_block);
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#356: FILE: arch/ia64/mm/numa.c:230:
+	len += sprintf(page+len, "Local block      : %lu\n",x->local_block);
 	                                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#357: FILE: arch/ia64/mm/numa.c:231:
+	len += sprintf(page+len, "Remote block     : %lu\n",x->remote_block);
 	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#357: FILE: arch/ia64/mm/numa.c:231:
+	len += sprintf(page+len, "Remote block     : %lu\n",x->remote_block);
 	                                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#359: FILE: arch/ia64/mm/numa.c:233:
+	if (len <= off+count)
 	              ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#363: FILE: arch/ia64/mm/numa.c:237:
+	if (len>count)
 	       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#365: FILE: arch/ia64/mm/numa.c:239:
+	if (len<0)
 	       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#367: FILE: arch/ia64/mm/numa.c:241:
+        return len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#367: FILE: arch/ia64/mm/numa.c:241:
+        return len;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#371: FILE: arch/ia64/mm/numa.c:245:
+static int hbo_reset_write(struct file *file, const char __user *buffer,
+	unsigned long count, void *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#377: FILE: arch/ia64/mm/numa.c:251:
+		struct hbo_c_s *c = &per_cpu(counters, i);
+		memset(c, 0, sizeof(struct hbo_c_s));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#383: FILE: arch/ia64/mm/numa.c:257:
+static int hbo_write_int(struct file *file, const char __user *buffer,
+	unsigned long count, void *data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#385: FILE: arch/ia64/mm/numa.c:259:
+	unsigned int * v = data;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#394: FILE: arch/ia64/mm/numa.c:268:
+	*v = simple_strtoul(buffer,NULL, 10);
 	                          ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#394: FILE: arch/ia64/mm/numa.c:268:
+	*v = simple_strtoul(buffer,NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:SPACING: space required after that ',' (ctx:VxO)
#404: FILE: arch/ia64/mm/numa.c:278:
+	len = sprintf(page, "%u\n",*v);
 	                          ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#404: FILE: arch/ia64/mm/numa.c:278:
+	len = sprintf(page, "%u\n",*v);
 	                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#405: FILE: arch/ia64/mm/numa.c:279:
+	if (len <= off+count)
 	              ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#409: FILE: arch/ia64/mm/numa.c:283:
+	if (len>count)
 	       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#411: FILE: arch/ia64/mm/numa.c:285:
+	if (len<0)
 	       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#421: FILE: arch/ia64/mm/numa.c:295:
+	proc_hbo = proc_mkdir("hbo",NULL);
 	                           ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#422: FILE: arch/ia64/mm/numa.c:296:
+	hbo_reset = create_proc_entry("reset", S_IWUGO, proc_hbo);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#425: FILE: arch/ia64/mm/numa.c:299:
+	x = create_proc_entry("all", S_IRUGO, proc_hbo);

ERROR:SPACING: space required before the open parenthesis '('
#455: FILE: arch/ia64/mm/numa.c:329:
+	for(i = 0; i < num_possible_cpus(); i++) {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#460: FILE: arch/ia64/mm/numa.c:334:
+		p = create_proc_entry(name, S_IRUGO, proc_hbo);

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#468: FILE: arch/ia64/mm/numa.c:342:
+__initcall(init_hbolock);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000181344.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 26 errors, 13 warnings, 23 checks, 401 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000181344.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
