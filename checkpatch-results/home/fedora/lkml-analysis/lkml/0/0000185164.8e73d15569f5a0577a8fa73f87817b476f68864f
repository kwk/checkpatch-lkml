WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#78: FILE: include/linux/plist.h:1:
+#ifndef _LINUX_PLIST_H_

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#93: FILE: include/linux/plist.h:16:
+#define PL_HEAD_INIT(head)	\
+{							\
+	.prio_list = LIST_HEAD_INIT((head).prio_list),	\
+	.node_list = LIST_HEAD_INIT((head).node_list),	\
+}

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#117: FILE: include/linux/plist.h:40:
+extern void plist_add(struct pl_node *node, struct pl_head *head);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#118: FILE: include/linux/plist.h:41:
+extern void plist_del(struct pl_node *node);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'list' - possible side-effects?
#137: FILE: include/linux/plist.h:60:
+#define __pl_head_node(head, list, dir)	\
+	list_entry((head)->list.dir, struct pl_node, plist.list)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'list' may be better as '(list)' to avoid precedence issues
#137: FILE: include/linux/plist.h:60:
+#define __pl_head_node(head, list, dir)	\
+	list_entry((head)->list.dir, struct pl_node, plist.list)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#140: FILE: include/linux/plist.h:63:
+static inline struct pl_node* plist_next(const struct pl_head *head)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#145: FILE: include/linux/plist.h:68:
+static inline struct pl_node* plist_prev(const struct pl_head *head)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#150: FILE: include/linux/plist.h:73:
+static inline struct pl_node* plist_prio_next(const struct pl_head *head)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#155: FILE: include/linux/plist.h:78:
+static inline struct pl_node* plist_prio_prev(const struct pl_head *head)

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#165: FILE: lib/plist.c:1:
+#include <linux/plist.h>

CHECK:BRACES: braces {} should be used on all arms of this statement
#174: FILE: lib/plist.c:10:
+		if (node->prio < iter->prio)
[...]
+		else if (node->prio == iter->prio) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#191: FILE: lib/plist.c:27:
+		struct pl_node *next = plist_next(&node->plist);
+		list_move_tail(&next->plist.prio_list, &node->plist.prio_list);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000185164.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 5 warnings, 6 checks, 116 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000185164.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
