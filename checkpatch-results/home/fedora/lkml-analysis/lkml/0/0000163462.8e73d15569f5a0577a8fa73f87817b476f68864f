CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#138: FILE: arch/mips/vr41xx/common/icu.c:109:
+static inline uint16_t icu1_set(uint8_t offset, uint16_t set)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#141: FILE: arch/mips/vr41xx/common/icu.c:111:
+	uint16_t data;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#155: FILE: arch/mips/vr41xx/common/icu.c:120:
+static inline uint16_t icu1_clear(uint8_t offset, uint16_t clear)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#158: FILE: arch/mips/vr41xx/common/icu.c:122:
+	uint16_t data;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#172: FILE: arch/mips/vr41xx/common/icu.c:131:
+static inline uint16_t icu2_set(uint8_t offset, uint16_t set)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#175: FILE: arch/mips/vr41xx/common/icu.c:133:
+	uint16_t data;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#189: FILE: arch/mips/vr41xx/common/icu.c:142:
+static inline uint16_t icu2_clear(uint8_t offset, uint16_t clear)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#192: FILE: arch/mips/vr41xx/common/icu.c:144:
+	uint16_t data;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!request_mem_region"
#587: FILE: arch/mips/vr41xx/common/icu.c:695:
+	if (request_mem_region(icu1_start, ICU1_SIZE, "ICU") == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!request_mem_region"
#592: FILE: arch/mips/vr41xx/common/icu.c:698:
+	if (request_mem_region(icu2_start, ICU2_SIZE, "ICU") == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!icu1_base"
#600: FILE: arch/mips/vr41xx/common/icu.c:704:
+	if (icu1_base == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!icu2_base"
#608: FILE: arch/mips/vr41xx/common/icu.c:711:
+	if (icu2_base == NULL) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#691: FILE: arch/mips/vr41xx/common/irq.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#707: FILE: arch/mips/vr41xx/common/irq.c:17:
+ *  along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#708: FILE: arch/mips/vr41xx/common/irq.c:18:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#717: FILE: arch/mips/vr41xx/common/irq.c:27:
+typedef struct irq_cascade {

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#718: FILE: arch/mips/vr41xx/common/irq.c:28:
+	int (*get_irq)(unsigned int, struct pt_regs *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#718: FILE: arch/mips/vr41xx/common/irq.c:28:
+	int (*get_irq)(unsigned int, struct pt_regs *);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "irq_cascade[irq].get_irq"
#736: FILE: arch/mips/vr41xx/common/irq.c:46:
+	if (irq_cascade[irq].get_irq != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "get_irq"
#741: FILE: arch/mips/vr41xx/common/irq.c:51:
+	if (get_irq != NULL) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#750: FILE: arch/mips/vr41xx/common/irq.c:60:
+EXPORT_SYMBOL_GPL(cascade_irq);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:BRACES: braces {} should be used on all arms of this statement
#763: FILE: arch/mips/vr41xx/common/irq.c:73:
+	if (cascade->get_irq != NULL) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cascade->get_irq"
#763: FILE: arch/mips/vr41xx/common/irq.c:73:
+	if (cascade->get_irq != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#765: FILE: arch/mips/vr41xx/common/irq.c:75:
+		unsigned int source_irq = irq;
+		desc = irq_desc + source_irq;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#773: FILE: arch/mips/vr41xx/common/irq.c:83:
+	} else

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#828: FILE: include/asm-mips/vr41xx/vr41xx.h:131:
+extern int cascade_irq(unsigned int irq, int (*get_irq)(unsigned int, struct pt_regs *));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000163462.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 6 warnings, 18 checks, 739 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000163462.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
