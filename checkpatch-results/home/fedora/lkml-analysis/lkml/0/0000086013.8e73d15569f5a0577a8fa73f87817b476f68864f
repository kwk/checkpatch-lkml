WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#68: 
> > > spin_lock functions around it to, since they only protect tp->vlgrp in

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#263: FILE: drivers/net/bonding/bond_main.c:567:
+void bond_del_vlans_from_slave(struct bonding *bond, struct net_device *slave_dev);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#366: FILE: drivers/net/bonding/bond_main.c:2300:
+	int i,vlan_id, rv;
 	     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#468: FILE: drivers/net/e1000/e1000_main.c:261:
+void e1000_restore_vlan(struct e1000_adapter *adapter);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#572: FILE: drivers/net/e1000/e1000_main.c:3738:
+		if (VLAN_ENABLED && unlikely(adapter->vlgrp &&
 			    (status & E1000_RXD_STAT_VP))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#581: FILE: drivers/net/e1000/e1000_main.c:3747:
+		if (VLAN_ENABLED && unlikely(adapter->vlgrp &&
 			    (status & E1000_RXD_STAT_VP))) {

ERROR:SPACING: space required before the open parenthesis '('
#757: FILE: drivers/net/ixgb/ixgb_main.c:1916:
+		if(VLAN_ENABLED && adapter->vlgrp && (status & IXGB_RX_DESC_STATUS_VP)) {

ERROR:SPACING: space required before the open parenthesis '('
#766: FILE: drivers/net/ixgb/ixgb_main.c:1924:
+		if(VLAN_ENABLED && adapter->vlgrp && (status & IXGB_RX_DESC_STATUS_VP)) {

CHECK:CAMELCASE: Avoid CamelCase: <Control_2>
#826: FILE: drivers/net/s2io.c:5685:
+	if (VLAN_ENABLED && sp->vlgrp && RXD_GET_VLAN_TAG(rxdp->Control_2)) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:SPACING: space required before the open parenthesis '('
#877: FILE: drivers/net/typhoon.c:1749:
+		if(VLAN_ENABLED) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#877: FILE: drivers/net/typhoon.c:1749:
+		if(VLAN_ENABLED) {
[...]
+			spin_unlock(&tp->state_lock);
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#879: FILE: drivers/net/typhoon.c:1751:
+			if(tp->vlgrp != NULL && rx->rxStatus & TYPHOON_RX_VLAN) {

CHECK:CAMELCASE: Avoid CamelCase: <rxStatus>
#879: FILE: drivers/net/typhoon.c:1751:
+			if(tp->vlgrp != NULL && rx->rxStatus & TYPHOON_RX_VLAN) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tp->vlgrp"
#879: FILE: drivers/net/typhoon.c:1751:
+			if(tp->vlgrp != NULL && rx->rxStatus & TYPHOON_RX_VLAN) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#881: FILE: drivers/net/typhoon.c:1753:
+				vlan_hwaccel_receive_skb(new_skb, tp->vlgrp,
 						 ntohl(rx->vlanTag) & 0xffff);

CHECK:BRACES: Unbalanced braces around else statement
#885: FILE: drivers/net/typhoon.c:1756:
+		} else

ERROR:SPACING: space required before the open parenthesis '('
#897: FILE: drivers/net/typhoon.c:2239:
+	if(VLAN_ENABLED) {

ERROR:SPACING: space required before the open parenthesis '('
#899: FILE: drivers/net/typhoon.c:2241:
+		if(tp->vlgrp && tp->wol_events & TYPHOON_WAKE_MAGIC_PKT) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#901: FILE: drivers/net/typhoon.c:2243:
+			printk(KERN_ERR "%s: cannot do WAKE_MAGIC with VLANS\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#902: FILE: drivers/net/typhoon.c:2244:
+			printk(KERN_ERR "%s: cannot do WAKE_MAGIC with VLANS\n",
+					dev->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#956: FILE: include/linux/if_vlan.h:163:
+int __vlan_hwaccel_rx(struct sk_buff *skb,
 				    struct vlan_group *grp,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1072: FILE: net/8021q/Makefile:5:
+obj-y^I^I^I += if_vlan.o $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1081: FILE: net/8021q/if_vlan.c:1:
+/* 802.1q helpers.

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1089: FILE: net/8021q/if_vlan.c:9:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1097: FILE: net/8021q/if_vlan.c:17:
+int __vlan_hwaccel_rx(struct sk_buff *skb,
+				    struct vlan_group *grp,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skb->dev"
#1103: FILE: net/8021q/if_vlan.c:23:
+	if (skb->dev == NULL) {

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1137: FILE: net/8021q/if_vlan.c:57:
+	return (polling ? netif_receive_skb(skb) : netif_rx(skb));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1148: FILE: net/8021q/if_vlan.c:68:
+ * $

WARNING:LINE_SPACING: Missing a blank line after declarations
#1158: FILE: net/8021q/if_vlan.c:78:
+		struct sk_buff *sk_tmp = skb;
+		skb = skb_realloc_headroom(sk_tmp, VLAN_HLEN);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1161: FILE: net/8021q/if_vlan.c:81:
+			printk(KERN_ERR "vlan: failed to realloc headroom\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1167: FILE: net/8021q/if_vlan.c:87:
+			printk(KERN_ERR "vlan: failed to unshare skbuff\n");

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#1178: FILE: net/8021q/if_vlan.c:98:
+	veth->h_vlan_proto = __constant_htons(ETH_P_8021Q);

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#1183: FILE: net/8021q/if_vlan.c:103:
+	skb->protocol = __constant_htons(ETH_P_8021Q);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000086013.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 10 warnings, 13 checks, 975 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000086013.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
