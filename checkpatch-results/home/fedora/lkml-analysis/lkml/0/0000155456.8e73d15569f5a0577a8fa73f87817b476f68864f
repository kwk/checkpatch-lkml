WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#40: FILE: fs/gfs2/gfs2.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:CAMELCASE: Avoid CamelCase: <PRIu64>
#77: FILE: fs/gfs2/gfs2.h:38:
+#define PRIu64 "lu"

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <PRId64>
#78: FILE: fs/gfs2/gfs2.h:39:
+#define PRId64 "ld"

CHECK:CAMELCASE: Avoid CamelCase: <PRIx64>
#79: FILE: fs/gfs2/gfs2.h:40:
+#define PRIx64 "lx"

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'den' - possible side-effects?
#89: FILE: fs/gfs2/gfs2.h:50:
+#define DIV_RU(num, den) (((num) + (den) - 1) / (den))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#95: FILE: fs/gfs2/gfs2.h:56:
+#define set_v2sdp(sb, sdp) (sb)->s_fs_info = (sdp)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#99: FILE: fs/gfs2/gfs2.h:60:
+#define set_v2fp(file, fp) (file)->private_data = (fp)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#101: FILE: fs/gfs2/gfs2.h:62:
+#define set_v2bd(bh, bd) (bh)->b_private = (bd)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#103: FILE: fs/gfs2/gfs2.h:64:
+#define set_v2db(bh, db) (bh)->b_private = (db)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#106: FILE: fs/gfs2/gfs2.h:67:
+#define set_transaction(tr) (current->journal_info) = (tr)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#109: FILE: fs/gfs2/gfs2.h:70:
+#define set_gl2ip(gl, ip) (gl)->gl_object = (ip)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#111: FILE: fs/gfs2/gfs2.h:72:
+#define set_gl2rgd(gl, rgd) (gl)->gl_object = (rgd)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#113: FILE: fs/gfs2/gfs2.h:74:
+#define set_gl2gl(gl, gl2) (gl)->gl_object = (gl2)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#120: FILE: fs/gfs2/incore.h:1:
+/*

WARNING:SPACING: Unnecessary space before function pointer arguments
#175: FILE: fs/gfs2/incore.h:56:
+	void (*lo_add) (struct gfs2_sbd *sdp, struct gfs2_log_element *le);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#176: FILE: fs/gfs2/incore.h:57:
+	void (*lo_incore_commit) (struct gfs2_sbd *sdp, struct gfs2_trans *tr);

WARNING:SPACING: Unnecessary space before function pointer arguments
#177: FILE: fs/gfs2/incore.h:58:
+	void (*lo_before_commit) (struct gfs2_sbd *sdp);

WARNING:SPACING: Unnecessary space before function pointer arguments
#178: FILE: fs/gfs2/incore.h:59:
+	void (*lo_after_commit) (struct gfs2_sbd *sdp, struct gfs2_ail *ai);

WARNING:SPACING: Unnecessary space before function pointer arguments
#179: FILE: fs/gfs2/incore.h:60:
+	void (*lo_before_scan) (struct gfs2_jdesc *jd,

WARNING:SPACING: Unnecessary space before function pointer arguments
#181: FILE: fs/gfs2/incore.h:62:
+	int (*lo_scan_elements) (struct gfs2_jdesc *jd, unsigned int start,

WARNING:SPACING: Unnecessary space before function pointer arguments
#183: FILE: fs/gfs2/incore.h:64:
+	void (*lo_after_scan) (struct gfs2_jdesc *jd, int error, int pass);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#195: FILE: fs/gfs2/incore.h:76:
+	uint32_t bi_offset;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#196: FILE: fs/gfs2/incore.h:77:
+	uint32_t bi_start;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#197: FILE: fs/gfs2/incore.h:78:
+	uint32_t bi_len;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#207: FILE: fs/gfs2/incore.h:88:
+	uint64_t rd_rg_vn;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#211: FILE: fs/gfs2/incore.h:92:
+	uint32_t rd_free_clone;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#213: FILE: fs/gfs2/incore.h:94:
+	uint32_t rd_last_alloc_data;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#214: FILE: fs/gfs2/incore.h:95:
+	uint32_t rd_last_alloc_meta;

CHECK:CAMELCASE: Avoid CamelCase: <Pinned>
#222: FILE: fs/gfs2/incore.h:103:
+BUFFER_FNS(Pinned, pinned)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#243: FILE: fs/gfs2/incore.h:124:
+	void (*go_xmote_th) (struct gfs2_glock * gl, unsigned int state,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#243: FILE: fs/gfs2/incore.h:124:
+	void (*go_xmote_th) (struct gfs2_glock * gl, unsigned int state,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#245: FILE: fs/gfs2/incore.h:126:
+	void (*go_xmote_bh) (struct gfs2_glock * gl);

WARNING:SPACING: Unnecessary space before function pointer arguments
#245: FILE: fs/gfs2/incore.h:126:
+	void (*go_xmote_bh) (struct gfs2_glock * gl);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#246: FILE: fs/gfs2/incore.h:127:
+	void (*go_drop_th) (struct gfs2_glock * gl);

WARNING:SPACING: Unnecessary space before function pointer arguments
#246: FILE: fs/gfs2/incore.h:127:
+	void (*go_drop_th) (struct gfs2_glock * gl);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#247: FILE: fs/gfs2/incore.h:128:
+	void (*go_drop_bh) (struct gfs2_glock * gl);

WARNING:SPACING: Unnecessary space before function pointer arguments
#247: FILE: fs/gfs2/incore.h:128:
+	void (*go_drop_bh) (struct gfs2_glock * gl);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#248: FILE: fs/gfs2/incore.h:129:
+	void (*go_sync) (struct gfs2_glock * gl, int flags);

WARNING:SPACING: Unnecessary space before function pointer arguments
#248: FILE: fs/gfs2/incore.h:129:
+	void (*go_sync) (struct gfs2_glock * gl, int flags);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#249: FILE: fs/gfs2/incore.h:130:
+	void (*go_inval) (struct gfs2_glock * gl, int flags);

WARNING:SPACING: Unnecessary space before function pointer arguments
#249: FILE: fs/gfs2/incore.h:130:
+	void (*go_inval) (struct gfs2_glock * gl, int flags);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#250: FILE: fs/gfs2/incore.h:131:
+	int (*go_demote_ok) (struct gfs2_glock * gl);

WARNING:SPACING: Unnecessary space before function pointer arguments
#250: FILE: fs/gfs2/incore.h:131:
+	int (*go_demote_ok) (struct gfs2_glock * gl);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#251: FILE: fs/gfs2/incore.h:132:
+	int (*go_lock) (struct gfs2_holder * gh);

WARNING:SPACING: Unnecessary space before function pointer arguments
#251: FILE: fs/gfs2/incore.h:132:
+	int (*go_lock) (struct gfs2_holder * gh);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#252: FILE: fs/gfs2/incore.h:133:
+	void (*go_unlock) (struct gfs2_holder * gh);

WARNING:SPACING: Unnecessary space before function pointer arguments
#252: FILE: fs/gfs2/incore.h:133:
+	void (*go_unlock) (struct gfs2_holder * gh);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#253: FILE: fs/gfs2/incore.h:134:
+	void (*go_callback) (struct gfs2_glock * gl, unsigned int state);

WARNING:SPACING: Unnecessary space before function pointer arguments
#253: FILE: fs/gfs2/incore.h:134:
+	void (*go_callback) (struct gfs2_glock * gl, unsigned int state);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#254: FILE: fs/gfs2/incore.h:135:
+	void (*go_greedy) (struct gfs2_glock * gl);

WARNING:SPACING: Unnecessary space before function pointer arguments
#254: FILE: fs/gfs2/incore.h:135:
+	void (*go_greedy) (struct gfs2_glock * gl);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#300: FILE: fs/gfs2/incore.h:181:
+	spinlock_t gl_spin;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#317: FILE: fs/gfs2/incore.h:198:
+	uint64_t gl_vn;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#341: FILE: fs/gfs2/incore.h:222:
+	uint32_t al_requested;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#353: FILE: fs/gfs2/incore.h:234:
+	uint32_t al_alloced;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#367: FILE: fs/gfs2/incore.h:248:
+	uint64_t i_vn;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#377: FILE: fs/gfs2/incore.h:258:
+	uint64_t i_last_rg_alloc;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#379: FILE: fs/gfs2/incore.h:260:
+	spinlock_t i_spin;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#402: FILE: fs/gfs2/incore.h:283:
+	uint64_t rv_blkno;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#407: FILE: fs/gfs2/incore.h:288:
+	uint64_t rr_blkno;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#429: FILE: fs/gfs2/incore.h:310:
+	uint32_t qd_id;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#432: FILE: fs/gfs2/incore.h:313:
+	int64_t qd_change;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#433: FILE: fs/gfs2/incore.h:314:
+	int64_t qd_change_sync;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#445: FILE: fs/gfs2/incore.h:326:
+	uint64_t qd_sync_gen;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#484: FILE: fs/gfs2/incore.h:365:
+	uint64_t ai_sync_gen;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#528: FILE: fs/gfs2/incore.h:409:
+	spinlock_t gt_spin;

CHECK:BIT_MACRO: Prefer using the BIT macro
#579: FILE: fs/gfs2/incore.h:460:
+#define GFS2_GL_HASH_SIZE	(1 << GFS2_GL_HASH_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#590: FILE: fs/gfs2/incore.h:471:
+	uint32_t sd_fsb2bb;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#591: FILE: fs/gfs2/incore.h:472:
+	uint32_t sd_fsb2bb_shift;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#592: FILE: fs/gfs2/incore.h:473:
+	uint32_t sd_diptrs;	/* Number of pointers in a dinode */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#593: FILE: fs/gfs2/incore.h:474:
+	uint32_t sd_inptrs;	/* Number of pointers in a indirect block */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#594: FILE: fs/gfs2/incore.h:475:
+	uint32_t sd_jbsize;	/* Size of a journaled data block */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#595: FILE: fs/gfs2/incore.h:476:
+	uint32_t sd_hash_bsize;	/* sizeof(exhash block) */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#596: FILE: fs/gfs2/incore.h:477:
+	uint32_t sd_hash_bsize_shift;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#597: FILE: fs/gfs2/incore.h:478:
+	uint32_t sd_hash_ptrs;	/* Number of pointers in a hash block */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#598: FILE: fs/gfs2/incore.h:479:
+	uint32_t sd_ut_per_block;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#599: FILE: fs/gfs2/incore.h:480:
+	uint32_t sd_qc_per_block;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#600: FILE: fs/gfs2/incore.h:481:
+	uint32_t sd_max_dirres;	/* Max blocks needed to add a directory entry */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#601: FILE: fs/gfs2/incore.h:482:
+	uint32_t sd_max_height;	/* Max height of a file's metadata tree */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#602: FILE: fs/gfs2/incore.h:483:
+	uint64_t sd_heightsize[GFS2_MAX_META_HEIGHT];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#603: FILE: fs/gfs2/incore.h:484:
+	uint32_t sd_max_jheight; /* Max height of journaled file's meta tree */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#604: FILE: fs/gfs2/incore.h:485:
+	uint64_t sd_jheightsize[GFS2_MAX_META_HEIGHT];

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#614: FILE: fs/gfs2/incore.h:495:
+	spinlock_t sd_reclaim_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#641: FILE: fs/gfs2/incore.h:522:
+	spinlock_t sd_statfs_spin;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#649: FILE: fs/gfs2/incore.h:530:
+	uint64_t sd_rindex_vn;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#650: FILE: fs/gfs2/incore.h:531:
+	spinlock_t sd_rindex_spin;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#661: FILE: fs/gfs2/incore.h:542:
+	spinlock_t sd_jindex_spin;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#689: FILE: fs/gfs2/incore.h:570:
+	spinlock_t sd_unlinked_spin;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#700: FILE: fs/gfs2/incore.h:581:
+	spinlock_t sd_quota_spin;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#707: FILE: fs/gfs2/incore.h:588:
+	uint64_t sd_quota_sync_gen;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#712: FILE: fs/gfs2/incore.h:593:
+	spinlock_t sd_log_lock;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#737: FILE: fs/gfs2/incore.h:618:
+	uint64_t sd_log_sequence;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#740: FILE: fs/gfs2/incore.h:621:
+	uint64_t sd_log_wraps;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#748: FILE: fs/gfs2/incore.h:629:
+	uint64_t sd_log_flush_wrapped;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#752: FILE: fs/gfs2/incore.h:633:
+	uint64_t sd_ail_sync_gen;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#814: FILE: include/linux/gfs2_ioctl.h:1:
+/*

ERROR:CODE_INDENT: code indent should use tabs where possible
#837: FILE: include/linux/gfs2_ioctl.h:24:
+        char __user *gi_data;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#837: FILE: include/linux/gfs2_ioctl.h:24:
+        char __user *gi_data;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#839: FILE: include/linux/gfs2_ioctl.h:26:
+	uint64_t gi_offset;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#847: FILE: include/linux/gfs2_ondisk.h:1:
+/*

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ino1' - possible side-effects?
#899: FILE: include/linux/gfs2_ondisk.h:53:
+#define gfs2_inum_equal(ino1, ino2) \
+	(((ino1)->no_formal_ino == (ino2)->no_formal_ino) && \
+	((ino1)->no_addr == (ino2)->no_addr))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ino2' - possible side-effects?
#899: FILE: include/linux/gfs2_ondisk.h:53:
+#define gfs2_inum_equal(ino1, ino2) \
+	(((ino1)->no_formal_ino == (ino2)->no_formal_ino) && \
+	((ino1)->no_addr == (ino2)->no_addr))

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#904: FILE: include/linux/gfs2_ondisk.h:58:
+	uint64_t no_formal_ino;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#905: FILE: include/linux/gfs2_ondisk.h:59:
+	uint64_t no_addr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#930: FILE: include/linux/gfs2_ondisk.h:84:
+	uint32_t mh_magic;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#931: FILE: include/linux/gfs2_ondisk.h:85:
+	uint16_t mh_type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#932: FILE: include/linux/gfs2_ondisk.h:86:
+	uint16_t mh_format;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#933: FILE: include/linux/gfs2_ondisk.h:87:
+	uint64_t mh_blkno;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#952: FILE: include/linux/gfs2_ondisk.h:106:
+/* Requirement:  GFS2_LOCKNAME_LEN % 8 == 0
+   Includes: the fencing zero at the end */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#952: FILE: include/linux/gfs2_ondisk.h:106:
+   Includes: the fencing zero at the end */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#958: FILE: include/linux/gfs2_ondisk.h:112:
+	uint32_t sb_fs_format;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#959: FILE: include/linux/gfs2_ondisk.h:113:
+	uint32_t sb_multihost_format;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#961: FILE: include/linux/gfs2_ondisk.h:115:
+	uint32_t sb_bsize;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#962: FILE: include/linux/gfs2_ondisk.h:116:
+	uint32_t sb_bsize_shift;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#975: FILE: include/linux/gfs2_ondisk.h:129:
+	uint64_t ri_addr;	/* grp block disk address */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#976: FILE: include/linux/gfs2_ondisk.h:130:
+	uint32_t ri_length;	/* length of rgrp header in fs blocks */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#977: FILE: include/linux/gfs2_ondisk.h:131:
+	uint32_t ri_pad;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#979: FILE: include/linux/gfs2_ondisk.h:133:
+	uint64_t ri_data0;	/* first data location */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#980: FILE: include/linux/gfs2_ondisk.h:134:
+	uint32_t ri_data;	/* num of data blocks in rgrp */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#982: FILE: include/linux/gfs2_ondisk.h:136:
+	uint32_t ri_bitbytes;	/* number of bytes in data bitmaps */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1009: FILE: include/linux/gfs2_ondisk.h:163:
+	uint32_t rg_flags;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1010: FILE: include/linux/gfs2_ondisk.h:164:
+	uint32_t rg_free;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1011: FILE: include/linux/gfs2_ondisk.h:165:
+	uint32_t rg_dinodes;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1021: FILE: include/linux/gfs2_ondisk.h:175:
+	uint64_t qu_limit;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1022: FILE: include/linux/gfs2_ondisk.h:176:
+	uint64_t qu_warn;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#1023: FILE: include/linux/gfs2_ondisk.h:177:
+	int64_t qu_value;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1055: FILE: include/linux/gfs2_ondisk.h:209:
+	uint32_t di_mode;	/* mode of file */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1056: FILE: include/linux/gfs2_ondisk.h:210:
+	uint32_t di_uid;	/* owner's user id */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1057: FILE: include/linux/gfs2_ondisk.h:211:
+	uint32_t di_gid;	/* owner's group id */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1058: FILE: include/linux/gfs2_ondisk.h:212:
+	uint32_t di_nlink;	/* number of links to this file */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1059: FILE: include/linux/gfs2_ondisk.h:213:
+	uint64_t di_size;	/* number of bytes in file */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1060: FILE: include/linux/gfs2_ondisk.h:214:
+	uint64_t di_blocks;	/* number of blocks in file */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#1061: FILE: include/linux/gfs2_ondisk.h:215:
+	int64_t di_atime;	/* time last accessed */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#1062: FILE: include/linux/gfs2_ondisk.h:216:
+	int64_t di_mtime;	/* time last modified */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#1063: FILE: include/linux/gfs2_ondisk.h:217:
+	int64_t di_ctime;	/* time last changed */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1064: FILE: include/linux/gfs2_ondisk.h:218:
+	uint32_t di_major;	/* device major number */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1065: FILE: include/linux/gfs2_ondisk.h:219:
+	uint32_t di_minor;	/* device minor number */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1067: FILE: include/linux/gfs2_ondisk.h:221:
+	uint64_t di_goal_meta;	/* rgrp to alloc from next */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1068: FILE: include/linux/gfs2_ondisk.h:222:
+	uint64_t di_goal_data;	/* data block goal */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1070: FILE: include/linux/gfs2_ondisk.h:224:
+	uint32_t di_flags;	/* GFS2_DIF_... */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1071: FILE: include/linux/gfs2_ondisk.h:225:
+	uint32_t di_payload_format;  /* GFS2_FORMAT_... */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1072: FILE: include/linux/gfs2_ondisk.h:226:
+	uint16_t di_height;	/* height of metadata */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1075: FILE: include/linux/gfs2_ondisk.h:229:
+	uint16_t di_depth;	/* Number of bits in the table */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1076: FILE: include/linux/gfs2_ondisk.h:230:
+	uint32_t di_entries;	/* The number of entries in the directory */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1078: FILE: include/linux/gfs2_ondisk.h:232:
+	uint64_t di_eattr;	/* extended attribute block number */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1092: FILE: include/linux/gfs2_ondisk.h:246:
+	uint32_t de_hash;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1093: FILE: include/linux/gfs2_ondisk.h:247:
+	uint32_t de_rec_len;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1094: FILE: include/linux/gfs2_ondisk.h:248:
+	uint8_t de_name_len;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1095: FILE: include/linux/gfs2_ondisk.h:249:
+	uint8_t de_type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1096: FILE: include/linux/gfs2_ondisk.h:250:
+	uint16_t de_pad1;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1097: FILE: include/linux/gfs2_ondisk.h:251:
+	uint32_t de_pad2;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1107: FILE: include/linux/gfs2_ondisk.h:261:
+	uint16_t lf_depth;		/* Depth of leaf */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1108: FILE: include/linux/gfs2_ondisk.h:262:
+	uint16_t lf_entries;		/* Number of dirents in leaf */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1109: FILE: include/linux/gfs2_ondisk.h:263:
+	uint32_t lf_dirent_format;	/* Format of the dirents */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1110: FILE: include/linux/gfs2_ondisk.h:264:
+	uint64_t lf_next;		/* Next leaf, if overflow */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1132: FILE: include/linux/gfs2_ondisk.h:286:
+	uint32_t ea_rec_len;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1133: FILE: include/linux/gfs2_ondisk.h:287:
+	uint32_t ea_data_len;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1134: FILE: include/linux/gfs2_ondisk.h:288:
+	uint8_t ea_name_len;	/* no NULL pointer after the string */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1135: FILE: include/linux/gfs2_ondisk.h:289:
+	uint8_t ea_type;	/* GFS2_EATYPE_... */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1136: FILE: include/linux/gfs2_ondisk.h:290:
+	uint8_t ea_flags;	/* GFS2_EAFLAG_... */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1137: FILE: include/linux/gfs2_ondisk.h:291:
+	uint8_t ea_num_ptrs;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1138: FILE: include/linux/gfs2_ondisk.h:292:
+	uint32_t ea_pad;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1150: FILE: include/linux/gfs2_ondisk.h:304:
+	uint64_t lh_sequence;	/* Sequence number of this transaction */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1151: FILE: include/linux/gfs2_ondisk.h:305:
+	uint32_t lh_flags;	/* GFS2_LOG_HEAD_... */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1152: FILE: include/linux/gfs2_ondisk.h:306:
+	uint32_t lh_tail;	/* Block number of log tail */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1153: FILE: include/linux/gfs2_ondisk.h:307:
+	uint32_t lh_blkno;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1154: FILE: include/linux/gfs2_ondisk.h:308:
+	uint32_t lh_hash;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1163: FILE: include/linux/gfs2_ondisk.h:317:
+/* ld_data1 is the number of metadata blocks in the descriptor.
+   ld_data2 is unused. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1163: FILE: include/linux/gfs2_ondisk.h:317:
+   ld_data2 is unused. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1167: FILE: include/linux/gfs2_ondisk.h:321:
+/* ld_data1 is the number of revoke blocks in the descriptor.
+   ld_data2 is unused. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1167: FILE: include/linux/gfs2_ondisk.h:321:
+   ld_data2 is unused. */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1172: FILE: include/linux/gfs2_ondisk.h:326:
+	uint32_t ld_type;	/* GFS2_LOG_DESC_... */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1173: FILE: include/linux/gfs2_ondisk.h:327:
+	uint32_t ld_length;	/* Number of buffers in this chunk */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1174: FILE: include/linux/gfs2_ondisk.h:328:
+	uint32_t ld_data1;	/* descriptor-specific field */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1175: FILE: include/linux/gfs2_ondisk.h:329:
+	uint32_t ld_data2;	/* descriptor-specific field */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1189: FILE: include/linux/gfs2_ondisk.h:343:
+	uint64_t ir_start;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1190: FILE: include/linux/gfs2_ondisk.h:344:
+	uint64_t ir_length;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#1200: FILE: include/linux/gfs2_ondisk.h:354:
+	int64_t sc_total;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#1201: FILE: include/linux/gfs2_ondisk.h:355:
+	int64_t sc_free;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#1202: FILE: include/linux/gfs2_ondisk.h:356:
+	int64_t sc_dinodes;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1215: FILE: include/linux/gfs2_ondisk.h:369:
+	uint32_t ut_flags;	/* GFS2_UTF_... */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1216: FILE: include/linux/gfs2_ondisk.h:370:
+	uint32_t ut_pad;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#1228: FILE: include/linux/gfs2_ondisk.h:382:
+	int64_t qc_change;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1229: FILE: include/linux/gfs2_ondisk.h:383:
+	uint32_t qc_flags;	/* GFS2_QCF_... */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1230: FILE: include/linux/gfs2_ondisk.h:384:
+	uint32_t qc_id;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1315: FILE: include/linux/gfs2_ondisk.h:469:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1319: FILE: include/linux/gfs2_ondisk.h:473:
+#define CPIN_08(s1, s2, member, count) {memcpy((s1->member), (s2->member), (count));}
                                                                                    ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's1' may be better as '(s1)' to avoid precedence issues
#1319: FILE: include/linux/gfs2_ondisk.h:473:
+#define CPIN_08(s1, s2, member, count) {memcpy((s1->member), (s2->member), (count));}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's2' may be better as '(s2)' to avoid precedence issues
#1319: FILE: include/linux/gfs2_ondisk.h:473:
+#define CPIN_08(s1, s2, member, count) {memcpy((s1->member), (s2->member), (count));}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#1319: FILE: include/linux/gfs2_ondisk.h:473:
+#define CPIN_08(s1, s2, member, count) {memcpy((s1->member), (s2->member), (count));}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#1319: FILE: include/linux/gfs2_ondisk.h:473:
+#define CPIN_08(s1, s2, member, count) {memcpy((s1->member), (s2->member), (count));}

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1320: FILE: include/linux/gfs2_ondisk.h:474:
+#define CPOUT_08(s1, s2, member, count) {memcpy((s2->member), (s1->member), (count));}
                                                                                     ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's1' may be better as '(s1)' to avoid precedence issues
#1320: FILE: include/linux/gfs2_ondisk.h:474:
+#define CPOUT_08(s1, s2, member, count) {memcpy((s2->member), (s1->member), (count));}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's2' may be better as '(s2)' to avoid precedence issues
#1320: FILE: include/linux/gfs2_ondisk.h:474:
+#define CPOUT_08(s1, s2, member, count) {memcpy((s2->member), (s1->member), (count));}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#1320: FILE: include/linux/gfs2_ondisk.h:474:
+#define CPOUT_08(s1, s2, member, count) {memcpy((s2->member), (s1->member), (count));}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#1320: FILE: include/linux/gfs2_ondisk.h:474:
+#define CPOUT_08(s1, s2, member, count) {memcpy((s2->member), (s1->member), (count));}

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1321: FILE: include/linux/gfs2_ondisk.h:475:
+#define CPIN_16(s1, s2, member) {(s1->member) = gfs2_16_to_cpu((s2->member));}
                                                                             ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's1' may be better as '(s1)' to avoid precedence issues
#1321: FILE: include/linux/gfs2_ondisk.h:475:
+#define CPIN_16(s1, s2, member) {(s1->member) = gfs2_16_to_cpu((s2->member));}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's2' may be better as '(s2)' to avoid precedence issues
#1321: FILE: include/linux/gfs2_ondisk.h:475:
+#define CPIN_16(s1, s2, member) {(s1->member) = gfs2_16_to_cpu((s2->member));}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#1321: FILE: include/linux/gfs2_ondisk.h:475:
+#define CPIN_16(s1, s2, member) {(s1->member) = gfs2_16_to_cpu((s2->member));}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#1321: FILE: include/linux/gfs2_ondisk.h:475:
+#define CPIN_16(s1, s2, member) {(s1->member) = gfs2_16_to_cpu((s2->member));}

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1322: FILE: include/linux/gfs2_ondisk.h:476:
+#define CPOUT_16(s1, s2, member) {(s2->member) = cpu_to_gfs2_16((s1->member));}
                                                                              ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's1' may be better as '(s1)' to avoid precedence issues
#1322: FILE: include/linux/gfs2_ondisk.h:476:
+#define CPOUT_16(s1, s2, member) {(s2->member) = cpu_to_gfs2_16((s1->member));}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's2' may be better as '(s2)' to avoid precedence issues
#1322: FILE: include/linux/gfs2_ondisk.h:476:
+#define CPOUT_16(s1, s2, member) {(s2->member) = cpu_to_gfs2_16((s1->member));}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#1322: FILE: include/linux/gfs2_ondisk.h:476:
+#define CPOUT_16(s1, s2, member) {(s2->member) = cpu_to_gfs2_16((s1->member));}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#1322: FILE: include/linux/gfs2_ondisk.h:476:
+#define CPOUT_16(s1, s2, member) {(s2->member) = cpu_to_gfs2_16((s1->member));}

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1323: FILE: include/linux/gfs2_ondisk.h:477:
+#define CPIN_32(s1, s2, member) {(s1->member) = gfs2_32_to_cpu((s2->member));}
                                                                             ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's1' may be better as '(s1)' to avoid precedence issues
#1323: FILE: include/linux/gfs2_ondisk.h:477:
+#define CPIN_32(s1, s2, member) {(s1->member) = gfs2_32_to_cpu((s2->member));}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's2' may be better as '(s2)' to avoid precedence issues
#1323: FILE: include/linux/gfs2_ondisk.h:477:
+#define CPIN_32(s1, s2, member) {(s1->member) = gfs2_32_to_cpu((s2->member));}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#1323: FILE: include/linux/gfs2_ondisk.h:477:
+#define CPIN_32(s1, s2, member) {(s1->member) = gfs2_32_to_cpu((s2->member));}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#1323: FILE: include/linux/gfs2_ondisk.h:477:
+#define CPIN_32(s1, s2, member) {(s1->member) = gfs2_32_to_cpu((s2->member));}

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1324: FILE: include/linux/gfs2_ondisk.h:478:
+#define CPOUT_32(s1, s2, member) {(s2->member) = cpu_to_gfs2_32((s1->member));}
                                                                              ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's1' may be better as '(s1)' to avoid precedence issues
#1324: FILE: include/linux/gfs2_ondisk.h:478:
+#define CPOUT_32(s1, s2, member) {(s2->member) = cpu_to_gfs2_32((s1->member));}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's2' may be better as '(s2)' to avoid precedence issues
#1324: FILE: include/linux/gfs2_ondisk.h:478:
+#define CPOUT_32(s1, s2, member) {(s2->member) = cpu_to_gfs2_32((s1->member));}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#1324: FILE: include/linux/gfs2_ondisk.h:478:
+#define CPOUT_32(s1, s2, member) {(s2->member) = cpu_to_gfs2_32((s1->member));}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#1324: FILE: include/linux/gfs2_ondisk.h:478:
+#define CPOUT_32(s1, s2, member) {(s2->member) = cpu_to_gfs2_32((s1->member));}

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1325: FILE: include/linux/gfs2_ondisk.h:479:
+#define CPIN_64(s1, s2, member) {(s1->member) = gfs2_64_to_cpu((s2->member));}
                                                                             ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's1' may be better as '(s1)' to avoid precedence issues
#1325: FILE: include/linux/gfs2_ondisk.h:479:
+#define CPIN_64(s1, s2, member) {(s1->member) = gfs2_64_to_cpu((s2->member));}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's2' may be better as '(s2)' to avoid precedence issues
#1325: FILE: include/linux/gfs2_ondisk.h:479:
+#define CPIN_64(s1, s2, member) {(s1->member) = gfs2_64_to_cpu((s2->member));}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#1325: FILE: include/linux/gfs2_ondisk.h:479:
+#define CPIN_64(s1, s2, member) {(s1->member) = gfs2_64_to_cpu((s2->member));}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#1325: FILE: include/linux/gfs2_ondisk.h:479:
+#define CPIN_64(s1, s2, member) {(s1->member) = gfs2_64_to_cpu((s2->member));}

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1326: FILE: include/linux/gfs2_ondisk.h:480:
+#define CPOUT_64(s1, s2, member) {(s2->member) = cpu_to_gfs2_64((s1->member));}
                                                                              ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's1' may be better as '(s1)' to avoid precedence issues
#1326: FILE: include/linux/gfs2_ondisk.h:480:
+#define CPOUT_64(s1, s2, member) {(s2->member) = cpu_to_gfs2_64((s1->member));}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 's2' may be better as '(s2)' to avoid precedence issues
#1326: FILE: include/linux/gfs2_ondisk.h:480:
+#define CPOUT_64(s1, s2, member) {(s2->member) = cpu_to_gfs2_64((s1->member));}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#1326: FILE: include/linux/gfs2_ondisk.h:480:
+#define CPOUT_64(s1, s2, member) {(s2->member) = cpu_to_gfs2_64((s1->member));}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#1326: FILE: include/linux/gfs2_ondisk.h:480:
+#define CPOUT_64(s1, s2, member) {(s2->member) = cpu_to_gfs2_64((s1->member));}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1328: FILE: include/linux/gfs2_ondisk.h:482:
+#define pv(struct, member, fmt) printk("  "#member" = "fmt"\n", struct->member);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'struct' may be better as '(struct)' to avoid precedence issues
#1328: FILE: include/linux/gfs2_ondisk.h:482:
+#define pv(struct, member, fmt) printk("  "#member" = "fmt"\n", struct->member);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#1328: FILE: include/linux/gfs2_ondisk.h:482:
+#define pv(struct, member, fmt) printk("  "#member" = "fmt"\n", struct->member);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1328: FILE: include/linux/gfs2_ondisk.h:482:
+#define pv(struct, member, fmt) printk("  "#member" = "fmt"\n", struct->member);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1328: FILE: include/linux/gfs2_ondisk.h:482:
+#define pv(struct, member, fmt) printk("  "#member" = "fmt"\n", struct->member);

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'struct' may be better as '(struct)' to avoid precedence issues
#1329: FILE: include/linux/gfs2_ondisk.h:483:
+#define pa(struct, member, count) print_array(#member, struct->member, count);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#1329: FILE: include/linux/gfs2_ondisk.h:483:
+#define pa(struct, member, count) print_array(#member, struct->member, count);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1329: FILE: include/linux/gfs2_ondisk.h:483:
+#define pa(struct, member, count) print_array(#member, struct->member, count);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1343: FILE: include/linux/gfs2_ondisk.h:497:
+	printk("  %s =\n", title);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1345: FILE: include/linux/gfs2_ondisk.h:499:
+		printk("%.2X ", (unsigned char)buf[x]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1347: FILE: include/linux/gfs2_ondisk.h:501:
+			printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1350: FILE: include/linux/gfs2_ondisk.h:504:
+		printk("\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1384: FILE: include/linux/gfs2_ondisk.h:538:
+	pv(no, no_formal_ino, "%"PRIu64);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1385: FILE: include/linux/gfs2_ondisk.h:539:
+	pv(no, no_addr, "%"PRIu64);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1413: FILE: include/linux/gfs2_ondisk.h:567:
+	pv(mh, mh_blkno, "%"PRIu64);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1502: FILE: include/linux/gfs2_ondisk.h:656:
+	pv(ri, ri_addr, "%"PRIu64);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1506: FILE: include/linux/gfs2_ondisk.h:660:
+	pv(ri, ri_data0, "%"PRIu64);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1568: FILE: include/linux/gfs2_ondisk.h:722:
+	pv(qu, qu_limit, "%"PRIu64);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1569: FILE: include/linux/gfs2_ondisk.h:723:
+	pv(qu, qu_warn, "%"PRIu64);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1570: FILE: include/linux/gfs2_ondisk.h:724:
+	pv(qu, qu_value, "%"PRId64);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1650: FILE: include/linux/gfs2_ondisk.h:804:
+	pv(di, di_size, "%"PRIu64);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1651: FILE: include/linux/gfs2_ondisk.h:805:
+	pv(di, di_blocks, "%"PRIu64);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1652: FILE: include/linux/gfs2_ondisk.h:806:
+	pv(di, di_atime, "%"PRId64);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1653: FILE: include/linux/gfs2_ondisk.h:807:
+	pv(di, di_mtime, "%"PRId64);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1654: FILE: include/linux/gfs2_ondisk.h:808:
+	pv(di, di_ctime, "%"PRId64);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1658: FILE: include/linux/gfs2_ondisk.h:812:
+	pv(di, di_goal_meta, "%"PRIu64);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1659: FILE: include/linux/gfs2_ondisk.h:813:
+	pv(di, di_goal_data, "%"PRIu64);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1668: FILE: include/linux/gfs2_ondisk.h:822:
+	pv(di, di_eattr, "%"PRIu64);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1713: FILE: include/linux/gfs2_ondisk.h:867:
+	printk("  name = %s\n", buf);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1748: FILE: include/linux/gfs2_ondisk.h:902:
+	pv(lf, lf_next, "%"PRIu64);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1793: FILE: include/linux/gfs2_ondisk.h:947:
+	printk("  name = %s\n", buf);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1823: FILE: include/linux/gfs2_ondisk.h:977:
+	pv(lh, lh_sequence, "%"PRIu64);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1885: FILE: include/linux/gfs2_ondisk.h:1039:
+	pv(ir, ir_start, "%"PRIu64);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1886: FILE: include/linux/gfs2_ondisk.h:1040:
+	pv(ir, ir_length, "%"PRIu64);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1909: FILE: include/linux/gfs2_ondisk.h:1063:
+	pv(sc, sc_total, "%"PRId64);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1910: FILE: include/linux/gfs2_ondisk.h:1064:
+	pv(sc, sc_free, "%"PRId64);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1911: FILE: include/linux/gfs2_ondisk.h:1065:
+	pv(sc, sc_dinodes, "%"PRId64);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1959: FILE: include/linux/gfs2_ondisk.h:1113:
+	pv(qc, qc_change, "%"PRId64);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000155456.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 28 errors, 38 warnings, 198 checks, 1917 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000155456.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
