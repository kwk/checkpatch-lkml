WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#83: 
--- linux-2.4.20/arch/i386/kernel/setup.c	2002-11-28 16:53:09.000000000 -07=

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#106: FILE: kernel/resource.c:71:
=20

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#116: FILE: kernel/resource.c:125:
 }
+int request_resource_remove_guess(struct resource *root, struct resource *=

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#118: FILE: kernel/resource.c:126:
+int request_resource_remove_guess(struct resource *root, struct resource *=
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#119: FILE: kernel/resource.c:127:
+	struct resource *conflict, *sibling, *conflict_head =3D NULL;
 	                                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#120: FILE: kernel/resource.c:128:
+	int rc =3D -EBUSY;
 	       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#120: FILE: kernel/resource.c:128:
+	int rc =3D -EBUSY;
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#124: FILE: kernel/resource.c:132:
+		conflict =3D __request_resource(root, new);
 		         ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#125: FILE: kernel/resource.c:133:
+		if (! conflict) {
 		    ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#127: FILE: kernel/resource.c:135:
+#if 0

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#130: FILE: kernel/resource.c:138:
+				sibling =3D conflict_head->sibling;
 				        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#132: FILE: kernel/resource.c:140:
+				conflict_head =3D sibling;
 				              ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#135: FILE: kernel/resource.c:143:
+			rc =3D 0;
 			   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#142: FILE: kernel/resource.c:150:
+				printk(KERN_ERR __FILE__

WARNING:SPLIT_STRING: quoted string split across lines
#144: FILE: kernel/resource.c:152:
+				       " %s(): unable to remove conflict:"
+				       " %s %08lx-%08lx\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#151: FILE: kernel/resource.c:159:
+			conflict->sibling =3D conflict_head;
 			                  ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#152: FILE: kernel/resource.c:160:
+			conflict_head =3D conflict;
 			              ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#161: FILE: kernel/resource.c:169:
+		sibling =3D conflict_head->sibling;
 		        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#162: FILE: kernel/resource.c:170:
+		if ((conflict =3D __request_resource(root, conflict_head))) {
 		              ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#162: FILE: kernel/resource.c:170:
+		if ((conflict =3D __request_resource(root, conflict_head))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#164: FILE: kernel/resource.c:172:
+			/* We hold the lock so why can't the
+			   resource be replaced? */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#164: FILE: kernel/resource.c:172:
+			   resource be replaced? */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#165: FILE: kernel/resource.c:173:
+			printk(KERN_ERR __FILE__

WARNING:SPLIT_STRING: quoted string split across lines
#167: FILE: kernel/resource.c:175:
+			       " %s(): failed to replace resource:"
+			       " %s %08lx-%08lx\n",

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#174: FILE: kernel/resource.c:182:
+		conflict_head =3D sibling;
 		              ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#192: FILE: include/linux/ioport.h:45:
+#define IORESOURCE_GUESS	0x08000000	/* These regions are reserved
+						   but it's unknown if it's

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#198: FILE: include/linux/ioport.h:51:
+						   aren't tracked by anything. */

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#209: FILE: include/linux/ioport.h:98:
+extern int request_resource_remove_guess(struct resource *root, struct res=
                                                                           ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#209: FILE: include/linux/ioport.h:98:
+extern int request_resource_remove_guess(struct resource *root, struct res=

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct res' should also have an identifier name
#209: FILE: include/linux/ioport.h:98:
+extern int request_resource_remove_guess(struct resource *root, struct res=

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ew' should also have an identifier name
#209: FILE: include/linux/ioport.h:98:
+extern int request_resource_remove_guess(struct resource *root, struct res=

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000328456.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 12 warnings, 3 checks, 121 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000328456.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
