CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#95: FILE: fs/namespace.c:103:
+		if (p->mnt_parent == mnt && p->mnt_mountpoint == dentry &&
+				(root == NULL || p->mnt_root == root )) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#95: FILE: fs/namespace.c:103:
+				(root == NULL || p->mnt_root == root )) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!root"
#95: FILE: fs/namespace.c:103:
+				(root == NULL || p->mnt_root == root )) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#130: FILE: fs/namespace.c:627:
+	struct nameidata nd;
 	                 ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#144: FILE: fs/namespace.c:641:
+		list_for_each_entry_safe(child_mnt, next,
+				&mnt->mnt_mounts, mnt_child) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#145: FILE: fs/namespace.c:642:
+				&mnt->mnt_mounts, mnt_child) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#146: FILE: fs/namespace.c:643:
+			if(child_mnt->mnt_mountpoint == dentry)

ERROR:SPACING: space required before the open parenthesis '('
#149: FILE: fs/namespace.c:646:
+			if(!is_subdir(child_mnt->mnt_mountpoint, dentry))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#152: FILE: fs/namespace.c:649:
+			detach_mnt(child_mnt, &nd);
 			                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#153: FILE: fs/namespace.c:650:
+			nd.mnt = newmnt;
 			^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#154: FILE: fs/namespace.c:651:
+			attach_mnt(child_mnt, &nd);
 			                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#157: FILE: fs/namespace.c:654:
+		nd.mnt = mnt;
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#158: FILE: fs/namespace.c:655:
+		nd.dentry = dentry;
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#159: FILE: fs/namespace.c:656:
+		attach_mnt(newmnt, &nd);
 		                    ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#160: FILE: fs/namespace.c:657:
+ ^I^Ispin_unlock(&vfsmount_lock);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#160: FILE: fs/namespace.c:657:
+ ^I^Ispin_unlock(&vfsmount_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: fs/namespace.c:657:
+ ^I^Ispin_unlock(&vfsmount_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#161: FILE: fs/namespace.c:658:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#161: FILE: fs/namespace.c:658:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: fs/namespace.c:658:
+ ^I}$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#166: FILE: fs/namespace.c:663:
+_do_make_mounted(struct nameidata *nd, struct vfsmount **mnt)
                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#170: FILE: fs/namespace.c:667:
+	int err = mount_is_safe(nd);
 	                        ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#171: FILE: fs/namespace.c:668:
+	int err = mount_is_safe(nd);
+	if (err)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#175: FILE: fs/namespace.c:672:
+ ^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#175: FILE: fs/namespace.c:672:
+ ^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: fs/namespace.c:672:
+ ^I/*$

WARNING:TYPO_SPELLING: 'propogate' may be misspelled - perhaps 'propagate'?
#178: FILE: fs/namespace.c:675:
+	 * which means you need to propogate it
 	                           ^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#180: FILE: fs/namespace.c:677:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#180: FILE: fs/namespace.c:677:
+ ^I */$

ERROR:SPACING: space required before the open parenthesis '('
#181: FILE: fs/namespace.c:678:
+	if(parent_dentry == parent_mnt->mnt_root) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#186: FILE: fs/namespace.c:683:
+			 pnode_make_mounted(parent_mnt->mnt_pnode,
+					 parent_mnt, parent_dentry) :

ERROR:CODE_INDENT: code indent should use tabs where possible
#190: FILE: fs/namespace.c:687:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#190: FILE: fs/namespace.c:687:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: fs/namespace.c:687:
+ ^I}$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#197: FILE: fs/namespace.c:694:
+static int do_change_type(struct nameidata *nd, int flag)
                                             ^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#204: FILE: fs/namespace.c:701:
+	if (!(flag & MS_SHARED) && !(flag & MS_PRIVATE)
+			&& !(flag & MS_SLAVE))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#207: FILE: fs/namespace.c:704:
+	if ((err = _do_make_mounted(nd, &mnt)))
 	                            ^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#207: FILE: fs/namespace.c:704:
+	if ((err = _do_make_mounted(nd, &mnt)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space required before the open parenthesis '('
#223: FILE: fs/namespace.c:720:
+			if(!IS_MNT_SHARED(m)) {

ERROR:SPACING: space required before the open parenthesis '('
#225: FILE: fs/namespace.c:722:
+				if(!m->mnt_pnode) {

ERROR:SPACING: space required before the open parenthesis '('
#232: FILE: fs/namespace.c:729:
+			if(old_pnode) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#234: FILE: fs/namespace.c:731:
+				pnode_add_slave_pnode(old_pnode,
+						m->mnt_pnode);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#240: FILE: fs/namespace.c:737:
+			if (IS_MNT_SLAVE(m)) {
+				break;
+			}

ERROR:SPACING: space required before the open parenthesis '('
#258: FILE: fs/namespace.c:755:
+			if(m->mnt_pnode)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#263: FILE: fs/namespace.c:760:
+
+		}

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#277: FILE: fs/namespace.c:1201:
+		retval = do_change_type(&nd, flags);
 		                         ^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#286: FILE: fs/pnode.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#287: FILE: fs/pnode.c:2:
+ *  linux/fs/pnode.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#310: FILE: fs/pnode.c:25:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#314: FILE: fs/pnode.c:29:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#318: FILE: fs/pnode.c:33:
+static kmem_cache_t * pnode_cachep;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#321: FILE: fs/pnode.c:36:
+ __cacheline_aligned_in_smp DEFINE_SPINLOCK(vfspnode_lock);$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#321: FILE: fs/pnode.c:36:
+ __cacheline_aligned_in_smp DEFINE_SPINLOCK(vfspnode_lock);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vfspnode_lock' should also have an identifier name
#321: FILE: fs/pnode.c:36:
+ __cacheline_aligned_in_smp DEFINE_SPINLOCK(vfspnode_lock);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#323: FILE: fs/pnode.c:38:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#328: FILE: fs/pnode.c:43:
+	struct vfspnode *pnode = (struct vfspnode *)data;
+	INIT_LIST_HEAD(&pnode->pnode_vfs);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#334: FILE: fs/pnode.c:49:
+	atomic_set(&pnode->pnode_count,0);
 	                              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#341: FILE: fs/pnode.c:56:
+                       sizeof(struct vfspnode), 0,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: fs/pnode.c:56:
+	pnode_cachep = kmem_cache_create("pnode_cache",
+                       sizeof(struct vfspnode), 0,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: fs/pnode.c:56:
+                       sizeof(struct vfspnode), 0,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#342: FILE: fs/pnode.c:57:
+                       SLAB_HWCACHE_ALIGN|SLAB_PANIC, pnode_init_fn, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#342: FILE: fs/pnode.c:57:
+                       SLAB_HWCACHE_ALIGN|SLAB_PANIC, pnode_init_fn, NULL);$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#342: FILE: fs/pnode.c:57:
+                       SLAB_HWCACHE_ALIGN|SLAB_PANIC, pnode_init_fn, NULL);
                                          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#345: FILE: fs/pnode.c:60:
+
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#349: FILE: fs/pnode.c:64:
+	struct vfspnode *pnode =  (struct vfspnode *)kmem_cache_alloc(

WARNING:LINE_SPACING: Missing a blank line after declarations
#367: FILE: fs/pnode.c:82:
+	struct vfspnode *tmp_pnode;
+	do {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#370: FILE: fs/pnode.c:85:
+		BUG_ON(!list_empty(&pnode->pnode_vfs));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#371: FILE: fs/pnode.c:86:
+		BUG_ON(!list_empty(&pnode->pnode_slavevfs));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#372: FILE: fs/pnode.c:87:
+		BUG_ON(!list_empty(&pnode->pnode_slavepnode));

ERROR:SPACING: space required before the open parenthesis '('
#377: FILE: fs/pnode.c:92:
+	} while(pnode);

WARNING:TYPO_SPELLING: 'comsume' may be misspelled - perhaps 'consume'?
#383: FILE: fs/pnode.c:98:
+	void *out_data; /* produced by slave, comsume by master */
 	                                      ^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#388: FILE: fs/pnode.c:103:
+^Iint ^Iflag;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#389: FILE: fs/pnode.c:104:
+^Iint ^Itraversal;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#396: FILE: fs/pnode.c:111:
+
+

WARNING:TYPO_SPELLING: 'Everytime' may be misspelled - perhaps 'Every time'?
#404: FILE: fs/pnode.c:119:
+ * it is returned with the flag PNODE_DOWN. Everytime the pnode is encountered
                                             ^^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#410: FILE: fs/pnode.c:125:
+ * ^I^Itree.$

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#412: FILE: fs/pnode.c:127:
+static int inline

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#416: FILE: fs/pnode.c:131:
+	int ret=0;
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#418: FILE: fs/pnode.c:133:
+			*slave_pnode=context->slave_pnode,
 			            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#419: FILE: fs/pnode.c:134:
+			*master_pnode=context->master_pnode;
 			             ^

ERROR:SPACING: space required before the open parenthesis '('
#457: FILE: fs/pnode.c:172:
+		if(traversal == PNODE_MID) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#457: FILE: fs/pnode.c:172:
+		if(traversal == PNODE_MID) {
[...]
+		} else {
[...]

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'next != &pnode->pnode_slavepnode'
#469: FILE: fs/pnode.c:184:
+		if ((next != &pnode->pnode_slavepnode) &&
+			(traversal == PNODE_DOWN || traversal == PNODE_MID)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#470: FILE: fs/pnode.c:185:
+		if ((next != &pnode->pnode_slavepnode) &&
+			(traversal == PNODE_DOWN || traversal == PNODE_MID)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#474: FILE: fs/pnode.c:189:
+			context->pnode = get_pnode(list_entry(next,
+				struct vfspnode, pnode_peer_slave));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#491: FILE: fs/pnode.c:206:
+
+

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#492: FILE: fs/pnode.c:207:
+static void inline

CHECK:LINE_SPACING: Please don't use multiple blank lines
#522: FILE: fs/pnode.c:237:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#551: FILE: fs/pnode.c:266:
+ ^I_pnode_disassociate_mnt(mnt);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#551: FILE: fs/pnode.c:266:
+ ^I_pnode_disassociate_mnt(mnt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#551: FILE: fs/pnode.c:266:
+ ^I_pnode_disassociate_mnt(mnt);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#560: FILE: fs/pnode.c:275:
+ ^I_pnode_disassociate_mnt(mnt);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#560: FILE: fs/pnode.c:275:
+ ^I_pnode_disassociate_mnt(mnt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#560: FILE: fs/pnode.c:275:
+ ^I_pnode_disassociate_mnt(mnt);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#564: FILE: fs/pnode.c:279:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#570: FILE: fs/pnode.c:285:
+ ^I_pnode_disassociate_mnt(mnt);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#570: FILE: fs/pnode.c:285:
+ ^I_pnode_disassociate_mnt(mnt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#570: FILE: fs/pnode.c:285:
+ ^I_pnode_disassociate_mnt(mnt);$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#579: FILE: fs/pnode.c:294:
+	int ret=0,traversal,level;
 	       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#579: FILE: fs/pnode.c:294:
+	int ret=0,traversal,level;
 	         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#579: FILE: fs/pnode.c:294:
+	int ret=0,traversal,level;
 	                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#580: FILE: fs/pnode.c:295:
+     ^Istruct vfspnode *slave_pnode, *master_pnode, *child_pnode, *slave_child_pnode;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#580: FILE: fs/pnode.c:295:
+     ^Istruct vfspnode *slave_pnode, *master_pnode, *child_pnode, *slave_child_pnode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#580: FILE: fs/pnode.c:295:
+     ^Istruct vfspnode *slave_pnode, *master_pnode, *child_pnode, *slave_child_pnode;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#581: FILE: fs/pnode.c:296:
+     ^Istruct vfsmount *slave_mnt, *member_mnt, *t_m;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#581: FILE: fs/pnode.c:296:
+     ^Istruct vfsmount *slave_mnt, *member_mnt, *t_m;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#581: FILE: fs/pnode.c:296:
+     ^Istruct vfsmount *slave_mnt, *member_mnt, *t_m;$

ERROR:SPACING: space required before the open parenthesis '('
#588: FILE: fs/pnode.c:303:
+	while(pnode_next(&context)) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#595: FILE: fs/pnode.c:310:
+		if (traversal == PNODE_DOWN ) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#596: FILE: fs/pnode.c:311:
+			if (master_pnode) {
[...]
+			} else {
[...]

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#597: FILE: fs/pnode.c:312:
+				child_pnode = (struct vfspnode *)p_array[level-1].in_data;
 				                                              ^

ERROR:SPACING: space required before the open parenthesis '('
#606: FILE: fs/pnode.c:321:
+		} else if(traversal == PNODE_MID) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#607: FILE: fs/pnode.c:322:
+		} else if(traversal == PNODE_MID) {
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#609: FILE: fs/pnode.c:324:
+			slave_child_pnode = p_array[level+1].out_data;
 			                                 ^

ERROR:SPACING: space required before the open parenthesis '('
#612: FILE: fs/pnode.c:327:
+		} else if(traversal == PNODE_UP) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#616: FILE: fs/pnode.c:331:
+			list_for_each_entry_safe(member_mnt,
+				t_m, &pnode->pnode_vfs, mnt_pnode_mntlist) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#618: FILE: fs/pnode.c:333:
+				if (!(child_mnt = do_make_mounted(mnt, dentry))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#626: FILE: fs/pnode.c:341:
+			list_for_each_entry_safe(slave_mnt,
+				t_m, &pnode->pnode_slavevfs, mnt_pnode_mntlist) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#628: FILE: fs/pnode.c:343:
+				if (!(child_mnt = do_make_mounted(mnt, dentry))) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#717: FILE: include/linux/fs.h:238:
+extern void __init pnode_init(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#717: FILE: include/linux/fs.h:238:
+extern void __init pnode_init(unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#725: FILE: include/linux/fs.h:1218:
+extern struct vfsmount *do_make_mounted(struct vfsmount *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#725: FILE: include/linux/fs.h:1218:
+extern struct vfsmount *do_make_mounted(struct vfsmount *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#725: FILE: include/linux/fs.h:1218:
+extern struct vfsmount *do_make_mounted(struct vfsmount *, struct dentry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#738: FILE: include/linux/dcache.h:331:
+extern struct vfsmount *lookup_mnt(struct vfsmount *, struct dentry *, struct dentry *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#747: FILE: include/linux/pnode.h:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#761: FILE: include/linux/pnode.h:15:
+#include <asm/atomic.h>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#764: FILE: include/linux/pnode.h:18:
+^Istruct list_head pnode_vfs; ^I /* list of vfsmounts anchored here */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#768: FILE: include/linux/pnode.h:22:
+	struct list_head pnode_peer_slave;/* going through master's slave pnode
+					    list*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#768: FILE: include/linux/pnode.h:22:
+					    list*/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#770: FILE: include/linux/pnode.h:24:
+^Iint ^I^I pnode_flags;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#771: FILE: include/linux/pnode.h:25:
+^Iatomic_t ^I pnode_count;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#773: FILE: include/linux/pnode.h:27:
+};
+#define PNODE_MAX_SLAVE_LEVEL 10

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#777: FILE: include/linux/pnode.h:31:
+#define IS_PNODE_DELETE(pn)  ((pn->pnode_flags&PNODE_DELETE)==PNODE_DELETE)
                                               ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#777: FILE: include/linux/pnode.h:31:
+#define IS_PNODE_DELETE(pn)  ((pn->pnode_flags&PNODE_DELETE)==PNODE_DELETE)
                                                             ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pn' may be better as '(pn)' to avoid precedence issues
#777: FILE: include/linux/pnode.h:31:
+#define IS_PNODE_DELETE(pn)  ((pn->pnode_flags&PNODE_DELETE)==PNODE_DELETE)

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#778: FILE: include/linux/pnode.h:32:
+#define IS_PNODE_SLAVE(pn)  ((pn->pnode_flags&PNODE_SLAVE)==PNODE_SLAVE)
                                              ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#778: FILE: include/linux/pnode.h:32:
+#define IS_PNODE_SLAVE(pn)  ((pn->pnode_flags&PNODE_SLAVE)==PNODE_SLAVE)
                                                           ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pn' may be better as '(pn)' to avoid precedence issues
#778: FILE: include/linux/pnode.h:32:
+#define IS_PNODE_SLAVE(pn)  ((pn->pnode_flags&PNODE_SLAVE)==PNODE_SLAVE)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#779: FILE: include/linux/pnode.h:33:
+#define SET_PNODE_DELETE(pn)  pn->pnode_flags |= PNODE_DELETE

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pn' may be better as '(pn)' to avoid precedence issues
#779: FILE: include/linux/pnode.h:33:
+#define SET_PNODE_DELETE(pn)  pn->pnode_flags |= PNODE_DELETE

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#780: FILE: include/linux/pnode.h:34:
+#define SET_PNODE_SLAVE(pn)  pn->pnode_flags |= PNODE_SLAVE

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pn' may be better as '(pn)' to avoid precedence issues
#780: FILE: include/linux/pnode.h:34:
+#define SET_PNODE_SLAVE(pn)  pn->pnode_flags |= PNODE_SLAVE

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#783: FILE: include/linux/pnode.h:37:
+extern void __put_pnode(struct vfspnode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfspnode *' should also have an identifier name
#783: FILE: include/linux/pnode.h:37:
+extern void __put_pnode(struct vfspnode *);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#814: FILE: include/linux/pnode.h:68:
+void __init pnode_init(unsigned long );

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#815: FILE: include/linux/pnode.h:69:
+struct vfspnode * pnode_alloc(void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfspnode *' should also have an identifier name
#816: FILE: include/linux/pnode.h:70:
+void pnode_add_slave_mnt(struct vfspnode *, struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#816: FILE: include/linux/pnode.h:70:
+void pnode_add_slave_mnt(struct vfspnode *, struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfspnode *' should also have an identifier name
#817: FILE: include/linux/pnode.h:71:
+void pnode_add_member_mnt(struct vfspnode *, struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#817: FILE: include/linux/pnode.h:71:
+void pnode_add_member_mnt(struct vfspnode *, struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#818: FILE: include/linux/pnode.h:72:
+void pnode_del_slave_mnt(struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#819: FILE: include/linux/pnode.h:73:
+void pnode_del_member_mnt(struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#820: FILE: include/linux/pnode.h:74:
+void pnode_disassociate_mnt(struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfspnode *' should also have an identifier name
#821: FILE: include/linux/pnode.h:75:
+void pnode_add_slave_pnode(struct vfspnode *, struct vfspnode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfspnode *' should also have an identifier name
#821: FILE: include/linux/pnode.h:75:
+void pnode_add_slave_pnode(struct vfspnode *, struct vfspnode *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#822: FILE: include/linux/pnode.h:76:
+struct vfsmount * pnode_make_mounted(struct vfspnode *, struct vfsmount *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfspnode *' should also have an identifier name
#822: FILE: include/linux/pnode.h:76:
+struct vfsmount * pnode_make_mounted(struct vfspnode *, struct vfsmount *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#822: FILE: include/linux/pnode.h:76:
+struct vfsmount * pnode_make_mounted(struct vfspnode *, struct vfsmount *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#822: FILE: include/linux/pnode.h:76:
+struct vfsmount * pnode_make_mounted(struct vfspnode *, struct vfsmount *, struct dentry *);

WARNING:TYPO_SPELLING: 'propogation' may be misspelled - perhaps 'propagation'?
#842: FILE: include/linux/mount.h:25:
+#define MNT_PNODE_MASK	0xf0  /* propogation flag mask */
                       	         ^^^^^^^^^^^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#844: FILE: include/linux/mount.h:27:
+#define IS_MNT_SHARED(mnt) (mnt->mnt_flags&MNT_SHARED)
                                           ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mnt' may be better as '(mnt)' to avoid precedence issues
#844: FILE: include/linux/mount.h:27:
+#define IS_MNT_SHARED(mnt) (mnt->mnt_flags&MNT_SHARED)

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#845: FILE: include/linux/mount.h:28:
+#define IS_MNT_SLAVE(mnt) (mnt->mnt_flags&MNT_SLAVE)
                                          ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mnt' may be better as '(mnt)' to avoid precedence issues
#845: FILE: include/linux/mount.h:28:
+#define IS_MNT_SLAVE(mnt) (mnt->mnt_flags&MNT_SLAVE)

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#846: FILE: include/linux/mount.h:29:
+#define IS_MNT_PRIVATE(mnt) (mnt->mnt_flags&MNT_PRIVATE)
                                            ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mnt' may be better as '(mnt)' to avoid precedence issues
#846: FILE: include/linux/mount.h:29:
+#define IS_MNT_PRIVATE(mnt) (mnt->mnt_flags&MNT_PRIVATE)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mnt' may be better as '(mnt)' to avoid precedence issues
#848: FILE: include/linux/mount.h:31:
+#define CLEAR_MNT_SHARED(mnt) (mnt->mnt_flags &= ~(MNT_PNODE_MASK & MNT_SHARED))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mnt' may be better as '(mnt)' to avoid precedence issues
#849: FILE: include/linux/mount.h:32:
+#define CLEAR_MNT_PRIVATE(mnt) (mnt->mnt_flags &= ~(MNT_PNODE_MASK & MNT_PRIVATE))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mnt' may be better as '(mnt)' to avoid precedence issues
#850: FILE: include/linux/mount.h:33:
+#define CLEAR_MNT_SLAVE(mnt) (mnt->mnt_flags &= ~(MNT_PNODE_MASK & MNT_SLAVE))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mnt' - possible side-effects?
#853: FILE: include/linux/mount.h:36:
+#define SET_MNT_SHARED(mnt) (mnt->mnt_flags |= (MNT_PNODE_MASK & MNT_SHARED),\
+				CLEAR_MNT_PRIVATE(mnt), \
+				CLEAR_MNT_SLAVE(mnt))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mnt' may be better as '(mnt)' to avoid precedence issues
#853: FILE: include/linux/mount.h:36:
+#define SET_MNT_SHARED(mnt) (mnt->mnt_flags |= (MNT_PNODE_MASK & MNT_SHARED),\
+				CLEAR_MNT_PRIVATE(mnt), \
+				CLEAR_MNT_SLAVE(mnt))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mnt' - possible side-effects?
#856: FILE: include/linux/mount.h:39:
+#define SET_MNT_PRIVATE(mnt) (mnt->mnt_flags |= (MNT_PNODE_MASK & MNT_PRIVATE), \
+				CLEAR_MNT_SLAVE(mnt), \
+				CLEAR_MNT_SHARED(mnt), \
+				mnt->mnt_pnode = NULL)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mnt' may be better as '(mnt)' to avoid precedence issues
#856: FILE: include/linux/mount.h:39:
+#define SET_MNT_PRIVATE(mnt) (mnt->mnt_flags |= (MNT_PNODE_MASK & MNT_PRIVATE), \
+				CLEAR_MNT_SLAVE(mnt), \
+				CLEAR_MNT_SHARED(mnt), \
+				mnt->mnt_pnode = NULL)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mnt' - possible side-effects?
#860: FILE: include/linux/mount.h:43:
+#define SET_MNT_SLAVE(mnt) (mnt->mnt_flags |= (MNT_PNODE_MASK & MNT_SLAVE), \
+				CLEAR_MNT_PRIVATE(mnt), \
+				CLEAR_MNT_SHARED(mnt))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mnt' may be better as '(mnt)' to avoid precedence issues
#860: FILE: include/linux/mount.h:43:
+#define SET_MNT_SLAVE(mnt) (mnt->mnt_flags |= (MNT_PNODE_MASK & MNT_SLAVE), \
+				CLEAR_MNT_PRIVATE(mnt), \
+				CLEAR_MNT_SHARED(mnt))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#871: FILE: include/linux/mount.h:57:
+	struct list_head mnt_pnode_mntlist;/* and going through their
+					   pnode's vfsmount */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#871: FILE: include/linux/mount.h:57:
+					   pnode's vfsmount */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#873: FILE: include/linux/mount.h:59:
+	struct vfspnode *mnt_pnode;	/* and going through their
+					   pnode's vfsmount */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#873: FILE: include/linux/mount.h:59:
+					   pnode's vfsmount */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#881: FILE: include/linux/mount.h:69:
 
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000169544.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 46 errors, 82 warnings, 53 checks, 778 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000169544.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
