WARNING:TYPO_SPELLING: 'accomodate' may be misspelled - perhaps 'accommodate'?
#35: 
  transition.  To accomodate this, a transition from
                  ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#58: FILE: drivers/md/md.c:1561:
+static void sync_sbs(mddev_t * mddev, int nospares)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#76: FILE: drivers/md/md.c:1576:
+		     (rdev->sb_events&1)==0 &&
 		                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#76: FILE: drivers/md/md.c:1576:
+		     (rdev->sb_events&1)==0 &&
 		                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#77: FILE: drivers/md/md.c:1577:
+		     rdev->sb_events+1 == mddev->events)) {
 		                    ^

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'super_types[mddev->major_version].sync_super'
#82: FILE: drivers/md/md.c:1582:
+			super_types[mddev->major_version].
+				sync_super(mddev, rdev);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#107: FILE: drivers/md/md.c:1608:
+	 * and 'events' is odd, we can roll back to the previous clean state */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#109: FILE: drivers/md/md.c:1610:
+	if (mddev->sb_dirty == 3
+	    && (mddev->in_sync && mddev->recovery_cp == MaxSector)

CHECK:CAMELCASE: Avoid CamelCase: <MaxSector>
#109: FILE: drivers/md/md.c:1610:
+	    && (mddev->in_sync && mddev->recovery_cp == MaxSector)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#110: FILE: drivers/md/md.c:1611:
+	    && (mddev->in_sync && mddev->recovery_cp == MaxSector)
+	    && (mddev->events & 1))

CHECK:BRACES: Unbalanced braces around else statement
#112: FILE: drivers/md/md.c:1613:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#114: FILE: drivers/md/md.c:1615:
+		mddev->events ++;
 		              ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#117: FILE: drivers/md/md.c:1618:
+			if ((mddev->events&1)==0) {
 			                  ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#117: FILE: drivers/md/md.c:1618:
+			if ((mddev->events&1)==0) {
 			                     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#123: FILE: drivers/md/md.c:1624:
+			if ((mddev->events&1)) {
 			                  ^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000072475.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 5 warnings, 8 checks, 130 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000072475.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
