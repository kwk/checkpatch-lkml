WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
diff -Naur linux-2.5.44.orig/arch/i386/kernel/Makefile linux-2.5.44.lkcd/arch/i386/kernel/Makefile

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#63: FILE: arch/i386/kernel/irq.c:961:
+EXPORT_SYMBOL(irq_desc);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#135: FILE: arch/i386/kernel/traps.c:477:
+	if (!(dump_ipi_function_ptr && dump_ipi_function_ptr(regs))) {
+		return 0;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#155: FILE: arch/i386/kernel/traps.c:551:
+	if (dump_ipi(regs)) {
+		return;
+	}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#198: FILE: arch/i386/mm/init.c:161:
+int page_is_ram (unsigned long pagenr)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#207: FILE: arch/i386/mm/init.c:605:
+EXPORT_SYMBOL(page_is_ram);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#221: FILE: init/main.c:96:
+extern unsigned long _end;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#254: FILE: kernel/panic.c:26:
+volatile int dump_in_progress = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#254: FILE: kernel/panic.c:26:
+volatile int dump_in_progress = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#255: FILE: kernel/panic.c:27:
+volatile int dumping_cpu = 0;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#255: FILE: kernel/panic.c:27:
+volatile int dumping_cpu = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#264: FILE: kernel/panic.c:57:
+	struct pt_regs regs;
+	get_current_regs(&regs);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#290: FILE: kernel/panic.c:140:
+EXPORT_SYMBOL(panic_timeout);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#291: FILE: kernel/panic.c:141:
+EXPORT_SYMBOL(dump_function_ptr);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#292: FILE: kernel/panic.c:142:
+EXPORT_SYMBOL(dump_in_progress);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#293: FILE: kernel/panic.c:143:
+EXPORT_SYMBOL(dumping_cpu);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#315: FILE: kernel/sched.c:966:
+	if (unlikely(dump_in_progress)) {
+		goto dump_scheduling_disabled;
+	}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#333: FILE: kernel/sched.c:1066:
+		if (!current->active_mm) BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#333: FILE: kernel/sched.c:1066:
+		if (!current->active_mm) BUG();

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#337: FILE: kernel/sched.c:1070:
+^I ^I* If this is not the dumping cpu, then spin right here$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#337: FILE: kernel/sched.c:1070:
+^I ^I* If this is not the dumping cpu, then spin right here$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#337: FILE: kernel/sched.c:1070:
+		/*
+	 	* If this is not the dumping cpu, then spin right here

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#338: FILE: kernel/sched.c:1071:
+^I ^I* till the dump is complete$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#338: FILE: kernel/sched.c:1071:
+^I ^I* till the dump is complete$

ERROR:CODE_INDENT: code indent should use tabs where possible
#339: FILE: kernel/sched.c:1072:
+^I ^I*/$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#339: FILE: kernel/sched.c:1072:
+^I ^I*/$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#341: FILE: kernel/sched.c:1074:
+			while (dump_in_progress);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000421243.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 20 warnings, 0 checks, 257 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000421243.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
