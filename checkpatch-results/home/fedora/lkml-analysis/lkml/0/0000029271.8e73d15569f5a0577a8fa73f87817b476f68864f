ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#120: FILE: drivers/base/power/main.c:139:
+void class_device_pm_remove(struct class_device * dev)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#138: FILE: drivers/base/power/power.h:62:
+extern int class_device_pm_add(struct class_device *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class_device *' should also have an identifier name
#138: FILE: drivers/base/power/power.h:62:
+extern int class_device_pm_add(struct class_device *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#139: FILE: drivers/base/power/power.h:63:
+extern void class_device_pm_remove(struct class_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct class_device *' should also have an identifier name
#139: FILE: drivers/base/power/power.h:63:
+extern void class_device_pm_remove(struct class_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#148: FILE: drivers/base/power/power.h:80:
+extern int resume_class_device(struct dev_pm_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dev_pm_info *' should also have an identifier name
#148: FILE: drivers/base/power/power.h:80:
+extern int resume_class_device(struct dev_pm_info *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#155: FILE: drivers/base/power/power.h:87:
+extern int suspend_class_device(struct dev_pm_info *, pm_message_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dev_pm_info *' should also have an identifier name
#155: FILE: drivers/base/power/power.h:87:
+extern int suspend_class_device(struct dev_pm_info *, pm_message_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pm_message_t' should also have an identifier name
#155: FILE: drivers/base/power/power.h:87:
+extern int suspend_class_device(struct dev_pm_info *, pm_message_t);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#163: FILE: drivers/base/power/power.h:106:
+static inline int class_device_pm_add(struct class_device * dev)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#167: FILE: drivers/base/power/power.h:110:
+}
+static inline void class_device_pm_remove(struct class_device * dev)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#167: FILE: drivers/base/power/power.h:110:
+static inline void class_device_pm_remove(struct class_device * dev)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#169: FILE: drivers/base/power/power.h:112:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#170: FILE: drivers/base/power/power.h:113:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: drivers/base/power/suspend.c:137:
+		pm_dbg(dpm, "PM: suspend %d-->%d\n",
+			dpm->power_state.event, state.event);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#200: FILE: drivers/base/power/suspend.c:142:
+		pm_err(dpm, "PM: suspend %d->%d, parent %s already %d\n",
+			dpm->power_state.event, state.event,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#208: FILE: drivers/base/power/suspend.c:150:
+		pm_dbg(dpm, "%s%s\n",
+			suspend_verb(state.event),

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#210: FILE: drivers/base/power/suspend.c:152:
+			((state.event == PM_EVENT_SUSPEND)
+					&& device_may_wakeup(dev))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#221: FILE: drivers/base/power/suspend.c:163:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#279: FILE: drivers/base/power/resume.c:85:
+		pm_err(dpm, "resume from %d, parent %s still %d\n",
+			dpm->power_state.event,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000029271.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 5 warnings, 13 checks, 212 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000029271.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
