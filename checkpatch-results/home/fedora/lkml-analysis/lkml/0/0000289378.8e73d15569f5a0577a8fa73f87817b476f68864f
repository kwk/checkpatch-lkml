WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct acpi_device *' should also have an identifier name
#53: FILE: drivers/acpi/scan.c:30:
+	ssize_t (*show)(struct acpi_device *, struct acpi_handle_attribute *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct acpi_handle_attribute *' should also have an identifier name
#53: FILE: drivers/acpi/scan.c:30:
+	ssize_t (*show)(struct acpi_device *, struct acpi_handle_attribute *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#53: FILE: drivers/acpi/scan.c:30:
+	ssize_t (*show)(struct acpi_device *, struct acpi_handle_attribute *, char *);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#54: FILE: drivers/acpi/scan.c:31:
+	ssize_t (*store)(struct acpi_device *, struct acpi_handle_attribute *, const char *, size_t);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct acpi_device *' should also have an identifier name
#54: FILE: drivers/acpi/scan.c:31:
+	ssize_t (*store)(struct acpi_device *, struct acpi_handle_attribute *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct acpi_handle_attribute *' should also have an identifier name
#54: FILE: drivers/acpi/scan.c:31:
+	ssize_t (*store)(struct acpi_device *, struct acpi_handle_attribute *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#54: FILE: drivers/acpi/scan.c:31:
+	ssize_t (*store)(struct acpi_device *, struct acpi_handle_attribute *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#54: FILE: drivers/acpi/scan.c:31:
+	ssize_t (*store)(struct acpi_device *, struct acpi_handle_attribute *, const char *, size_t);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#57: FILE: drivers/acpi/scan.c:34:
+	spinlock_t lock;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#61: FILE: drivers/acpi/scan.c:38:
+acpi_device_write_raw(

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#69: FILE: drivers/acpi/scan.c:46:
+	if (attrib->args) {
+		kfree(attrib->args);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#88: FILE: drivers/acpi/scan.c:65:
+acpi_device_read_raw(

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: drivers/acpi/scan.c:112:
+^I                              arg_list, &buffer);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#137: FILE: drivers/acpi/scan.c:114:
+	if (arg_list)
+		kfree(arg_list);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#139: FILE: drivers/acpi/scan.c:116:
+	if (args)
+		kfree(args);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#151: FILE: drivers/acpi/scan.c:128:
+#define to_handle_attr(n) container_of(n, struct acpi_handle_attribute, attr);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:CODE_INDENT: code indent should use tabs where possible
#167: FILE: drivers/acpi/scan.c:144:
+^I                                         chandle, &chandle))) {$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#168: FILE: drivers/acpi/scan.c:145:
+	                                         chandle, &chandle))) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#169: FILE: drivers/acpi/scan.c:146:
+		memset(pathname, 0 , sizeof(pathname));
 		                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*attrib)...) over kmalloc(sizeof(struct acpi_handle_attribute)...)
#175: FILE: drivers/acpi/scan.c:152:
+		attrib = kmalloc(sizeof(struct acpi_handle_attribute),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:CODE_INDENT: code indent should use tabs where possible
#176: FILE: drivers/acpi/scan.c:153:
+^I^I                 GFP_KERNEL);$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#190: FILE: drivers/acpi/scan.c:167:
+		attrib->attr.mode = S_IFREG | S_IRUSR |

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:CODE_INDENT: code indent should use tabs where possible
#191: FILE: drivers/acpi/scan.c:168:
+^I^I                    S_IWUSR | S_IRGRP | S_IWGRP;$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRGRP | S_IWGRP' are not preferred. Consider using octal permissions '0260'.
#191: FILE: drivers/acpi/scan.c:168:
+		                    S_IWUSR | S_IRGRP | S_IWGRP;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#205: FILE: drivers/acpi/scan.c:182:
+extern struct dentry * sysfs_get_dentry(struct dentry *, const char *);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#223: FILE: drivers/acpi/scan.c:200:
+^I                                         chandle, &chandle))) {$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#224: FILE: drivers/acpi/scan.c:201:
+	                                         chandle, &chandle))) {
+

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#225: FILE: drivers/acpi/scan.c:202:
+		memset(pathname, 0 , sizeof(pathname));
 		                   ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dev->kobj.dentry->d_inode->i_sem
#231: FILE: drivers/acpi/scan.c:208:
+		down(&(dev->kobj.dentry->d_inode->i_sem));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dev->kobj.dentry->d_inode->i_sem
#237: FILE: drivers/acpi/scan.c:214:
+		up(&(dev->kobj.dentry->d_inode->i_sem));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#238: FILE: drivers/acpi/scan.c:215:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#243: FILE: drivers/acpi/scan.c:220:
+			if (strncmp(pathname, old_attr->name,
+			    strlen(pathname)) != 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#261: FILE: drivers/acpi/scan.c:239:
+                struct attribute *attr, char *buf)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#261: FILE: drivers/acpi/scan.c:239:
+static ssize_t acpi_device_attr_show(struct kobject *kobj,
+                struct attribute *attr, char *buf)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: drivers/acpi/scan.c:239:
+                struct attribute *attr, char *buf)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#265: FILE: drivers/acpi/scan.c:243:
+	struct acpi_handle_attribute *attribute = to_handle_attr(attr);
+	return attribute->show ?

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#270: FILE: drivers/acpi/scan.c:248:
+                struct attribute *attr, const char *buf, size_t len)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#270: FILE: drivers/acpi/scan.c:248:
+static ssize_t acpi_device_attr_store(struct kobject *kobj,
+                struct attribute *attr, const char *buf, size_t len)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: drivers/acpi/scan.c:248:
+                struct attribute *attr, const char *buf, size_t len)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#274: FILE: drivers/acpi/scan.c:252:
+	struct acpi_handle_attribute *attribute = to_handle_attr(attr);
+	return attribute->store ?

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#278: FILE: drivers/acpi/scan.c:256:
+static struct sysfs_ops acpi_device_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000289378.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 19 warnings, 11 checks, 261 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000289378.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
