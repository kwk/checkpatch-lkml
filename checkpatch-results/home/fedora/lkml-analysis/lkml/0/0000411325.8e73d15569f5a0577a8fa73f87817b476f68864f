ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#53: 
--- a/net/ipv4/af_inet.c	Sat Nov 23 23:56:58 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#60: FILE: net/ipv4/af_inet.c:1168:
+extern int  tcp_proc_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#61: FILE: net/ipv4/af_inet.c:1169:
+extern void tcp_proc_exit(void);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#117: FILE: net/ipv4/tcp_ipv4.c:2154:
+	struct tcp_iter_state* st = seq->private;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#132: FILE: net/ipv4/tcp_ipv4.c:2169:
+^I       ^Itp = tcp_sk(sk);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#132: FILE: net/ipv4/tcp_ipv4.c:2169:
+^I       ^Itp = tcp_sk(sk);$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#160: FILE: net/ipv4/tcp_ipv4.c:2197:
+	struct tcp_iter_state* st = seq->private;

CHECK:BRACES: braces {} should be used on all arms of this statement
#162: FILE: net/ipv4/tcp_ipv4.c:2199:
+	if (st->state == TCP_SEQ_STATE_OPENREQ) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: net/ipv4/tcp_ipv4.c:2202:
+^I       ^Itp = tcp_sk(st->syn_wait_sk);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#165: FILE: net/ipv4/tcp_ipv4.c:2202:
+^I       ^Itp = tcp_sk(st->syn_wait_sk);$

CHECK:BRACES: Unbalanced braces around else statement
#184: FILE: net/ipv4/tcp_ipv4.c:2221:
+	} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#192: FILE: net/ipv4/tcp_ipv4.c:2229:
+^I       ^Itp = tcp_sk(sk);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#192: FILE: net/ipv4/tcp_ipv4.c:2229:
+^I       ^Itp = tcp_sk(sk);$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#224: FILE: net/ipv4/tcp_ipv4.c:2261:
+	struct tcp_iter_state* st = seq->private;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#230: FILE: net/ipv4/tcp_ipv4.c:2267:
+^I       $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#259: FILE: net/ipv4/tcp_ipv4.c:2296:
+	struct tcp_iter_state* st = seq->private;

CHECK:BRACES: braces {} should be used on all arms of this statement
#261: FILE: net/ipv4/tcp_ipv4.c:2298:
+	if (st->state == TCP_SEQ_STATE_TIME_WAIT) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#282: FILE: net/ipv4/tcp_ipv4.c:2319:
+	} else

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#313: FILE: net/ipv4/tcp_ipv4.c:2350:
+	struct tcp_iter_state* st = seq->private;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#337: FILE: net/ipv4/tcp_ipv4.c:2374:
+	struct tcp_iter_state* st;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#368: FILE: net/ipv4/tcp_ipv4.c:2405:
+	struct tcp_iter_state* st = seq->private;

WARNING:LINE_SPACING: Missing a blank line after declarations
#374: FILE: net/ipv4/tcp_ipv4.c:2411:
+			struct tcp_opt *tp = tcp_sk(st->syn_wait_sk);
+			read_unlock_bh(&tp->syn_wait_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#400: FILE: net/ipv4/tcp_ipv4.c:2514:
+	struct tcp_iter_state* st;

WARNING:SPLIT_STRING: quoted string split across lines
#428: FILE: net/ipv4/tcp_ipv4.c:2520:
+			   "  sl  local_address rem_address   st tx_queue "
+			   "rx_queue tr tm->when retrnsmt   uid  timeout "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#429: FILE: net/ipv4/tcp_ipv4.c:2521:
+			   "rx_queue tr tm->when retrnsmt   uid  timeout "
+			   "inode");

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#490: FILE: net/ipv4/tcp_ipv4.c:2543:
+static struct seq_operations tcp_seq_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#528: FILE: net/ipv4/tcp_ipv4.c:2571:
+static struct file_operations tcp_seq_fops = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#572: FILE: net/ipv4/tcp_ipv4.c:2581:
+	struct proc_dir_entry *p = create_proc_entry("tcp", S_IRUGO, proc_net);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000411325.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 11 warnings, 4 checks, 536 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000411325.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
