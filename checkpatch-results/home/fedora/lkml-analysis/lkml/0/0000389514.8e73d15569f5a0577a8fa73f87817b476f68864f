CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#50: FILE: arch/i386/mm/discontig.c:71:
+#define PER_CPU_PAGES	PFN_UP((unsigned long)(__per_cpu_end-__per_cpu_start))
                      	                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#51: FILE: arch/i386/mm/discontig.c:72:
+#define MEM_MAP_SIZE(n)	PFN_UP((node_end_pfn[n]-node_start_pfn[n]+1)*sizeof(struct page))
                        	                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#51: FILE: arch/i386/mm/discontig.c:72:
+#define MEM_MAP_SIZE(n)	PFN_UP((node_end_pfn[n]-node_start_pfn[n]+1)*sizeof(struct page))
                        	                                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#51: FILE: arch/i386/mm/discontig.c:72:
+#define MEM_MAP_SIZE(n)	PFN_UP((node_end_pfn[n]-node_start_pfn[n]+1)*sizeof(struct page))
                        	                                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#51: FILE: arch/i386/mm/discontig.c:72:
+#define MEM_MAP_SIZE(n)	PFN_UP((node_end_pfn[n]-node_start_pfn[n]+1)*sizeof(struct page))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#54: FILE: arch/i386/mm/discontig.c:75:
+#define early_cpu_to_node(cpu)		((cpu)/4)
                               		      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#55: FILE: arch/i386/mm/discontig.c:76:
+#define early_node_to_cpumask(node)	(0xFUL << (4*(node)))
                                    	            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#78: FILE: arch/i386/mm/discontig.c:107:
+		__per_cpu_offset[cpu] = min_low_pfn*PAGE_SIZE
 		                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#86: FILE: arch/i386/mm/discontig.c:115:
+	__per_cpu_offset[cpu] = node_vaddr + MEM_MAP_SIZE(node)*PAGE_SIZE
 	                                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#87: FILE: arch/i386/mm/discontig.c:116:
+					+ PFN_UP(sizeof(pg_data_t))*PAGE_SIZE
 					                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#88: FILE: arch/i386/mm/discontig.c:117:
+					+ PER_CPU_PAGES*cpu_in_node*PAGE_SIZE
 					               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#88: FILE: arch/i386/mm/discontig.c:117:
+					+ PER_CPU_PAGES*cpu_in_node*PAGE_SIZE
 					                           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#95: FILE: arch/i386/mm/discontig.c:124:
+	int node, cpu;
+	for (node = 0; node < numnodes; ++node) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#96: FILE: arch/i386/mm/discontig.c:125:
+		for (cpu = 0; cpu < NR_CPUS; ++cpu) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#99: FILE: arch/i386/mm/discontig.c:128:
+				memcpy(RELOC_HIDE((char *)__per_cpu_start, __per_cpu_offset[cpu]),
+						__per_cpu_start,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#100: FILE: arch/i386/mm/discontig.c:129:
+						PER_CPU_PAGES*PAGE_SIZE);
 						             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#122: FILE: arch/i386/mm/discontig.c:199:
+			+ PER_CPU_PAGES*hweight32(early_node_to_cpumask(nid));
 			               ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#136: FILE: arch/i386/mm/discontig.c:251:
+		for (cpu = 0; cpu < NR_CPUS; ++cpu) {

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#177: FILE: include/asm-i386/percpu.h:16:
+#define DEFINE_PER_CPU(type, name) \
+    __attribute__((__section__(".data.percpu"))) __typeof__(type) name##__per_cpu

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: include/asm-i386/percpu.h:17:
+    __attribute__((__section__(".data.percpu"))) __typeof__(type) name##__per_cpu$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.percpu") over __attribute__((__section__(".data.percpu")))
#178: FILE: include/asm-i386/percpu.h:17:
+    __attribute__((__section__(".data.percpu"))) __typeof__(type) name##__per_cpu

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#185: FILE: include/asm-i386/percpu.h:24:
+#define DECLARE_PER_CPU(type, name) extern __typeof__(type) name##__per_cpu

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#186: FILE: include/asm-i386/percpu.h:25:
+#define EXPORT_PER_CPU_SYMBOL(var) EXPORT_SYMBOL(var##__per_cpu)

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000389514.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 6 warnings, 15 checks, 145 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000389514.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
