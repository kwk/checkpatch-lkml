WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
diff -urpN old-linux/include/net/irda/discovery.h linux/include/net/irda/discovery.h

WARNING:NEW_TYPEDEFS: do not add new typedefs
#51: FILE: include/net/irda/discovery.h:47:
+typedef struct discovery_t {

WARNING:FUNCTION_ARGUMENTS: function definition argument 'discovery_t *' should also have an identifier name
#103: FILE: include/net/irda/irlan_client.h:37:
+void irlan_client_discovery_indication(discovery_t *, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#103: FILE: include/net/irda/irlan_client.h:37:
+void irlan_client_discovery_indication(discovery_t *, void *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#194: FILE: net/irda/af_irda.c:437:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#198: FILE: net/irda/af_irda.c:440:
+	self = (struct irda_sock *) priv;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#200: FILE: net/irda/af_irda.c:442:
+		WARNING(__FUNCTION__ "(), lost myself!\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#221: FILE: net/irda/af_irda.c:463:
+^I$

CHECK:SPACING: No space is necessary after a cast
#224: FILE: net/irda/af_irda.c:466:
+	self = (struct irda_sock *) priv;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#226: FILE: net/irda/af_irda.c:468:
+		WARNING(__FUNCTION__ "(), lost myself!\n");

CHECK:SPACING: No space is necessary after a cast
#280: FILE: net/irda/af_irda.c:675:
+			    irda_discovery_indication, (void *) self);

CHECK:SPACING: No space is necessary after a cast
#300: FILE: net/irda/af_irda.c:694:
+	discovery = (discovery_t *) hashbin_get_first(self->cachelog);

CHECK:SPACING: No space is necessary after a cast
#324: FILE: net/irda/af_irda.c:736:
+		discovery = (discovery_t *) hashbin_get_next(self->cachelog);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#370: FILE: net/irda/af_irda.c:1669:
+	self->rx_flow = self->tx_flow = FLOW_START;	/* needed ??? */

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: No space is necessary after a cast
#402: FILE: net/irda/af_irda.c:2080:
+		discovery = (discovery_t *) hashbin_get_first(self->cachelog);

CHECK:SPACING: No space is necessary after a cast
#411: FILE: net/irda/af_irda.c:2103:
+			discovery = (discovery_t *) hashbin_get_next(self->cachelog);

CHECK:SPACING: No space is necessary after a cast
#448: FILE: net/irda/af_irda.c:2260:
+				    (void *) self);

CHECK:SPACING: No space is necessary after a cast
#465: FILE: net/irda/af_irda.c:2272:
+			self->watchdog.data = (unsigned long) self;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#466: FILE: net/irda/af_irda.c:2273:
+			self->watchdog.expires = jiffies + (val * HZ/1000);
 			                                            ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around self->watchdog
#467: FILE: net/irda/af_irda.c:2274:
+			add_timer(&(self->watchdog));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: No space is necessary after a cast
#476: FILE: net/irda/af_irda.c:2280:
+			if(self->watchdog.prev != (struct timer_list *) NULL)

ERROR:SPACING: space required before the open parenthesis '('
#476: FILE: net/irda/af_irda.c:2280:
+			if(self->watchdog.prev != (struct timer_list *) NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around self->watchdog
#477: FILE: net/irda/af_irda.c:2281:
+				del_timer(&(self->watchdog));

CHECK:SPACING: No space is necessary after a cast
#519: FILE: net/irda/ircomm/ircomm_tty_attach.c:239:
+		hints, ircomm_tty_discovery_indication, NULL, (void *) self);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#541: FILE: net/irda/irlan/irlan_client.c:166:
+void irlan_client_discovery_indication(discovery_t *discovery, void *priv) $

CHECK:SPACING: No space is necessary after a cast
#571: FILE: net/irda/irlmp.c:405:
+		any_lsap = (struct lsap_cb *) hashbin_get_first(lap->lsaps);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!any_lsap"
#572: FILE: net/irda/irlmp.c:406:
+		if (any_lsap == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LONG_LINE_STRING: line length of 103 exceeds 100 columns
#577: FILE: net/irda/irlmp.c:411:
+			IRDA_DEBUG(0, __FUNCTION__ "(), sorry, but I'm waiting for LAP to timeout!\n");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#577: FILE: net/irda/irlmp.c:411:
+			IRDA_DEBUG(0, __FUNCTION__ "(), sorry, but I'm waiting for LAP to timeout!\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#582: FILE: net/irda/irlmp.c:416:
+		 * can only talk to one node at a time */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000566814.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 9 warnings, 17 checks, 534 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000566814.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
