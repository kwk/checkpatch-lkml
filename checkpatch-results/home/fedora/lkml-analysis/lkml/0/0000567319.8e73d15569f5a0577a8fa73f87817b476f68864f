WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#53: FILE: nv.c:53:
+  #define mem_map_dec_count(p) atomic_inc(&((p)->count));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#56: FILE: nv.c:56:
+  #define mem_map_inc_count(p) atomic_dec(&((p)->count));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#69: FILE: os-interface.c:1334:
+    spinlock_t unload_lock = SPIN_LOCK_UNLOCKED;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#70: FILE: os-interface.c:1335:
+    struct module *mp = THIS_MODULE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#71: FILE: os-interface.c:1336:
+    struct module_symbol *sym;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: os-interface.c:1337:
+    int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: os-interface.c:1359:
+    spin_lock(&unload_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#87: FILE: os-interface.c:1360:
+    if (MOD_CAN_QUERY(mp) && (mp->nsyms > 0)) {$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mp->nsyms > 0'
#87: FILE: os-interface.c:1360:
+    if (MOD_CAN_QUERY(mp) && (mp->nsyms > 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:CODE_INDENT: code indent should use tabs where possible
#88: FILE: os-interface.c:1361:
+        for (i = mp->nsyms, sym = mp->syms;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: os-interface.c:1361:
+        for (i = mp->nsyms, sym = mp->syms;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#88: FILE: os-interface.c:1361:
+        for (i = mp->nsyms, sym = mp->syms;
[...]
+            if (strcmp(sym->name, symbol_name) == 0) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#89: FILE: os-interface.c:1362:
+             i > 0; --i, ++sym) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: os-interface.c:1362:
+             i > 0; --i, ++sym) {$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#90: FILE: os-interface.c:1363:
+             i > 0; --i, ++sym) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#91: FILE: os-interface.c:1364:
+            if (strcmp(sym->name, symbol_name) == 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: os-interface.c:1364:
+            if (strcmp(sym->name, symbol_name) == 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#92: FILE: os-interface.c:1365:
+                symbol_value = sym->value;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: os-interface.c:1365:
+                symbol_value = sym->value;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#93: FILE: os-interface.c:1366:
+                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: os-interface.c:1366:
+                break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#94: FILE: os-interface.c:1367:
+            }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: os-interface.c:1367:
+            }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#95: FILE: os-interface.c:1368:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: os-interface.c:1368:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: os-interface.c:1369:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: os-interface.c:1370:
+    spin_unlock(&unload_lock);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000567319.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 7 errors, 18 warnings, 2 checks, 46 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000567319.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
