WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#38: 
 Signed-off-by: James Morris <jmorris@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#39: 
 Signed-off-by: Stephen Smalley <sds@epoch.ncsc.mil>

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#89: FILE: fs/ramfs/inode.c:47:
+static struct inode_operations ramfs_symlink_inode_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#90: FILE: fs/ramfs/inode.c:48:
+static struct inode_operations ramfs_special_inode_operations;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#132: FILE: fs/ramfs/inode.c:187:
+static struct inode_operations ramfs_symlink_inode_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#141: FILE: fs/ramfs/inode.c:196:
+static struct inode_operations ramfs_special_inode_operations = {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#148: FILE: fs/ramfs/inode.c:202:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: fs/ramfs/inode.c:202:
+ $

WARNING:LINE_SPACING: Missing a blank line after declarations
#157: FILE: fs/ramfs/inode.c:257:
+	int err = init_ramfs_xattr();
+	if (err)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#176: FILE: fs/ramfs/xattr.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#186: FILE: fs/ramfs/xattr.c:11:
+ * Software Foundation; either version 2 of the License, or (at your option) $

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#212: FILE: fs/ramfs/xattr.c:37:
+int ramfs_setxattr(struct dentry *dentry, const char *name, const void *value, size_t size, int flags)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#238: FILE: fs/ramfs/xattr.c:63:
+#ifdef CONFIG_RAMFS_SECURITY^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#240: FILE: fs/ramfs/xattr.c:65:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#256: FILE: fs/ramfs/xattr.c:81:
+#ifdef CONFIG_RAMFS_FS_SECURITY^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#262: FILE: fs/ramfs/xattr.c:87:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#267: FILE: fs/ramfs/xattr.h:1:
+/*

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#279: FILE: fs/ramfs/xattr.h:13:
+ssize_t ramfs_getxattr(struct dentry *, const char *, void *, size_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#279: FILE: fs/ramfs/xattr.h:13:
+ssize_t ramfs_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#279: FILE: fs/ramfs/xattr.h:13:
+ssize_t ramfs_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#279: FILE: fs/ramfs/xattr.h:13:
+ssize_t ramfs_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#280: FILE: fs/ramfs/xattr.h:14:
+ssize_t ramfs_listxattr(struct dentry *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#280: FILE: fs/ramfs/xattr.h:14:
+ssize_t ramfs_listxattr(struct dentry *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#280: FILE: fs/ramfs/xattr.h:14:
+ssize_t ramfs_listxattr(struct dentry *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#281: FILE: fs/ramfs/xattr.h:15:
+int ramfs_removexattr(struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#281: FILE: fs/ramfs/xattr.h:15:
+int ramfs_removexattr(struct dentry *, const char *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#310: FILE: fs/ramfs/xattr_security.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#320: FILE: fs/ramfs/xattr_security.c:11:
+ * Software Foundation; either version 2 of the License, or (at your option) $

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#328: FILE: fs/ramfs/xattr_security.c:19:
+static size_t ramfs_xattr_security_list(struct inode *inode, char *list, const char *name, int name_len)

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#333: FILE: fs/ramfs/xattr_security.c:24:
+static int ramfs_xattr_security_get(struct inode *inode, const char *name, void *buffer, size_t size)

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#340: FILE: fs/ramfs/xattr_security.c:31:
+static int ramfs_xattr_security_set(struct inode *inode, const char *name, const void *value, size_t size, int flags)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000257630.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 24 warnings, 1 checks, 282 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000257630.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
