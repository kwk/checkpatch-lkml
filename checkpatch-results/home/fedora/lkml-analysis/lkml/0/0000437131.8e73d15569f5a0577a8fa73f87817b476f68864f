WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#131: 
#ifdef CONFIG_SMP branches from the scheduler proper.

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#164: FILE: arch/i386/kernel/smpboot.c:1169:
+printk("cpu_has_ht: %d, smp_num_siblings: %d, num_online_cpus(): %d.\n", cpu_has_ht, smp_num_siblings, num_online_cpus());

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#164: FILE: arch/i386/kernel/smpboot.c:1169:
+printk("cpu_has_ht: %d, smp_num_siblings: %d, num_online_cpus(): %d.\n", cpu_has_ht, smp_num_siblings, num_online_cpus());

ERROR:TRAILING_WHITESPACE: trailing whitespace
#188: FILE: arch/i386/kernel/smpboot.c:1194:
+^I/* At this point APs would have synchronised TSC and waiting for $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#197: FILE: arch/i386/kernel/smpboot.c:1198:
+		for (cpu = 0; cpu < NR_CPUS; cpu++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#199: FILE: arch/i386/kernel/smpboot.c:1200:
+			int i;
+			if (!test_bit(cpu, &cpu_callout_map))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#201: FILE: arch/i386/kernel/smpboot.c:1202:
+			for (i = 0; i < NR_CPUS; i++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#224: FILE: arch/i386/kernel/smpboot.c:1220:
+^I     $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#257: FILE: include/linux/sched.h:150:
+extern void sched_map_runqueue(int cpu1, int cpu2);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'assymetric' may be misspelled - perhaps 'asymmetric'?
#305: FILE: kernel/sched.c:150:
+ *  runqueue or even assymetric mappings.)
                      ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#309: FILE: kernel/sched.c:154:
+  static long __rq_idx[NR_CPUS] __cacheline_aligned;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#310: FILE: kernel/sched.c:155:
+  static long __cpu_idx[NR_CPUS] __cacheline_aligned;$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'idx' - possible side-effects?
#313: FILE: kernel/sched.c:158:
+# define for_each_sibling(idx, rq) \
+		for ((idx) = 0; (idx) < (rq)->nr_cpus; (idx)++)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#321: FILE: kernel/sched.c:166:
+# define for_each_sibling(idx, rq) while (0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: kernel/sched.c:170:
+  static inline void active_load_balance(runqueue_t *rq, int this_cpu) { }$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#328: FILE: kernel/sched.c:173:
+typedef struct cpu_s {

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#359: FILE: kernel/sched.c:203:
+#define cpu_int(c)		((cpu_rq(c))->cpu + cpu_idx(c))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#384: FILE: kernel/sched.c:226:
+# define task_running(p) \
+		(cpu_curr_ptr(task_cpu(p)) == (p))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#474: FILE: kernel/sched.c:420:
+	nrpolling = test_tsk_thread_flag(p,TIF_POLLING_NRFLAG);
 	                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#475: FILE: kernel/sched.c:421:
+	need_resched = test_and_set_tsk_thread_flag(p,TIF_NEED_RESCHED);
 	                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#476: FILE: kernel/sched.c:422:
+	nrpolling |= test_tsk_thread_flag(p,TIF_POLLING_NRFLAG);
 	                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#548: FILE: kernel/sched.c:518:
+		if (unlikely(sync && !task_running(p) &&
 			(task_cpu(p) != smp_processor_id()) &&

WARNING:TYPO_SPELLING: 'agressivity' may be misspelled - perhaps 'aggressivity'?
#592: FILE: kernel/sched.c:714:
+ * frequency and balancing agressivity depends on whether the CPU is
                            ^^^^^^^^^^^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#598: FILE: kernel/sched.c:720:
+#define BUSY_REBALANCE_TICK (HZ/4 ?: 1)
                                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#599: FILE: kernel/sched.c:721:
+#define IDLE_REBALANCE_TICK (HZ/1000 ?: 1)
                                ^

WARNING:TYPO_SPELLING: 'agressive' may be misspelled - perhaps 'aggressive'?
#640: FILE: kernel/sched.c:904:
+	 * (except if we are in idle mode which is a more agressive
 	                                                  ^^^^^^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#648: FILE: kernel/sched.c:908:
+#define CAN_MIGRATE_TASK(p,rq,cpu)					\
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#648: FILE: kernel/sched.c:908:
+#define CAN_MIGRATE_TASK(p,rq,cpu)					\
                              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#648: FILE: kernel/sched.c:908:
+#define CAN_MIGRATE_TASK(p,rq,cpu)					\
+	((idle || (jiffies - (p)->sleep_timestamp > cache_decay_ticks)) && \
+		!task_running(p) && task_allowed(p, cpu))

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#689: FILE: kernel/sched.c:950:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#708: FILE: kernel/sched.c:969:
+		 * doesnt matter which one) and let it fix things up:
 		   ^^^^^^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#737: FILE: kernel/sched.c:998:
+	for (i = 0; i < NR_CPUS; i++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#751: FILE: kernel/sched.c:1012:
+^I ^I * balance a thread over to the target queue.$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#751: FILE: kernel/sched.c:1012:
+^I ^I * balance a thread over to the target queue.$

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#774: FILE: kernel/sched.c:1035:
+	printk("sched_merge_runqueues: CPU#%d <=> CPU#%d, on CPU#%d.\n", cpu1, cpu2, smp_processor_id());

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#774: FILE: kernel/sched.c:1035:
+	printk("sched_merge_runqueues: CPU#%d <=> CPU#%d, on CPU#%d.\n", cpu1, cpu2, smp_processor_id());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#776: FILE: kernel/sched.c:1037:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#778: FILE: kernel/sched.c:1039:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#788: FILE: kernel/sched.c:1049:
+		BUG();

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'next != prev'
#908: FILE: kernel/sched.c:1231:
+	if ((next != prev) && (rq_nr_cpus(rq) > 1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1024: FILE: kernel/sched.c:2212:
+static int migration_task(void * data)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#1037: FILE: kernel/sched.c:2231:
 	if (smp_processor_id() != cpu)
+	printk("migration_thread %d on cpu=%d\n", cpu, smp_processor_id());

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1039: FILE: kernel/sched.c:2232:
+	printk("migration_thread %d on cpu=%d\n", cpu, smp_processor_id());

CHECK:SPACING: No space is necessary after a cast
#1064: FILE: kernel/sched.c:2299:
+	long cpu = (long) hcpu;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1071: FILE: kernel/sched.c:2303:
+		printk("Starting migration thread for cpu %li\n", cpu);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000437131.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 10 errors, 25 warnings, 10 checks, 922 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000437131.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
