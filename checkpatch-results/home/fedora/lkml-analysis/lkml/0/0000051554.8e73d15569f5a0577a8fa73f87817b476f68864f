CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#61: FILE: block/elevator.c:291:
+void elv_extended_request(request_queue_t *q, struct request *rq,
+			int direction

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#62: FILE: block/elevator.c:291:
, int nr_sectors)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#62: FILE: block/elevator.c:291:
+void elv_extended_request(request_queue_t *q, struct request *rq,
, int nr_sectors)

ERROR:SPACING: space required before the open brace '{'
#78: FILE: block/elevator.c:467:
+	if (plug && !q->request_fn){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#79: FILE: block/elevator.c:468:
+		printk(KERN_ALERT "Didn't expect this\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#91: FILE: block/elevator-iosched.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#92: FILE: block/elevator-iosched.c:2:
+ *  linux/block/elevator-iosched.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'desireable' may be misspelled - perhaps 'desirable'?
#198: FILE: block/elevator-iosched.c:107:
+ * desireable for request length to exceed the hardware limit.  However,
    ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'seperately' may be misspelled - perhaps 'separately'?
#201: FILE: block/elevator-iosched.c:110:
+ * to the disk seperately.
                ^^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!request"
#331: FILE: block/elevator-iosched.c:240:
+#define is_head(e) ((e)->request == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#335: FILE: block/elevator-iosched.c:244:
+#define is_contig_prev(prev, start) (!is_head(prev) &&

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#337: FILE: block/elevator-iosched.c:245:
+#define is_contig_next(start, next) (!is_head(next) && (start ==

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'start' may be better as '(start)' to avoid precedence issues
#337: FILE: block/elevator-iosched.c:245:
+#define is_contig_next(start, next) (!is_head(next) && (start ==

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#340: FILE: block/elevator-iosched.c:247:
+#define req_operlap(prev_start, prev_len, this_start) (prev_len &&

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'prev_len' may be better as '(prev_len)' to avoid precedence issues
#340: FILE: block/elevator-iosched.c:247:
+#define req_operlap(prev_start, prev_len, this_start) (prev_len &&

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#346: FILE: block/elevator-iosched.c:252:
+#define next_req_in_queue(e) (is_head(next_in_queue(e)) ?

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#348: FILE: block/elevator-iosched.c:253:
+#define prev_req_in_queue(e) (is_head(prev_in_queue(e)) ?

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'e' - possible side-effects?
#356: FILE: block/elevator-iosched.c:258:
+#define is_first_in_op(e) (prev_contig(e)->start > e->start)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'e' - possible side-effects?
#357: FILE: block/elevator-iosched.c:259:
+#define is_last_in_op(e) (next_contig(e)->start < e->start)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'q' - possible side-effects?
#359: FILE: block/elevator-iosched.c:261:
+#define active_req(q) ((q)->rq.count[0] + (q)->rq.count[1])

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'el' - possible side-effects?
#360: FILE: block/elevator-iosched.c:262:
+#define active_ops(el) ((el)->ops[0] + (el)->ops[1])

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'el' - possible side-effects?
#362: FILE: block/elevator-iosched.c:264:
+#define sweep_sec(el) ((el)->sec_this_sweep[0] + (el)->sec_this_sweep[1])

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'req' may be better as '(req)' to avoid precedence issues
#364: FILE: block/elevator-iosched.c:266:
+#define ops_count(el, req) ((el)->ops[req->flags & REQ_RW ? 1 : 0])

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'req' may be better as '(req)' to avoid precedence issues
#365: FILE: block/elevator-iosched.c:267:
+#define sec_count(el, req) ((el)->sec[req->flags & REQ_RW ? 1 : 0])

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#366: FILE: block/elevator-iosched.c:268:
+#define sweep_latency(el, req) ((el)->sweep_latency[(req)->flags &

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#376: FILE: block/elevator-iosched.c:277:
+	 * disk, and get sorted. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#394: FILE: block/elevator-iosched.c:294:
+	struct el_req head;	/* the head's start sector is the head position,
+	unsigned long head_jiffies;	/* last time the head was moved */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#405: FILE: block/elevator-iosched.c:304:
+	unsigned int pure_operation;	/* binary that prohibits operations
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#408: FILE: block/elevator-iosched.c:306:
+	unsigned int count_since_last_trace;	/* number of requests since we
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#412: FILE: block/elevator-iosched.c:309:
+	unsigned int ops_this_sweep[2]; /* number of operations submitted
+	unsigned long sweep_latency[2];

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#453: FILE: block/elevator-iosched.c:350:
+	el->sec_this_sweep[0] = el->sec_this_sweep[1] = \

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#453: FILE: block/elevator-iosched.c:350:
+	el->sec_this_sweep[0] = el->sec_this_sweep[1] = \

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#454: FILE: block/elevator-iosched.c:351:
+	el->ops_this_sweep[0] = el->ops_this_sweep[1] = \

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#455: FILE: block/elevator-iosched.c:352:
+	el->sweep_latency[0] = el->sweep_latency[1] = \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#462: FILE: block/elevator-iosched.c:359:
+#define sprint(el) (printk(KERN_ALERT "\nsec <%6d,%6d>  ops <%2u,%3u>

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#462: FILE: block/elevator-iosched.c:359:
+#define sprint(el) (printk(KERN_ALERT "\nsec <%6d,%6d>  ops <%2u,%3u>

CHECK:SPACING: No space is necessary after a cast
#467: FILE: block/elevator-iosched.c:364:
+		(unsigned long long) ((el->head.start - el->first_sweep_sector) >> 10), \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#472: FILE: block/elevator-iosched.c:369:
+#define printel(el) (printk(KERN_ALERT "(%9lu)  %6lu %4lu  req

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#472: FILE: block/elevator-iosched.c:369:
+#define printel(el) (printk(KERN_ALERT "(%9lu)  %6lu %4lu  req

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#482: FILE: block/elevator-iosched.c:378:
+#define printh(e) (printk(KERN_ALERT "(%9lu, %4lu)\n", (unsigned
                                        ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#482: FILE: block/elevator-iosched.c:378:
+#define printh(e) (printk(KERN_ALERT "(%9lu, %4lu)\n", (unsigned
                                              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#485: FILE: block/elevator-iosched.c:380:
+#define printr(e) (printk(KERN_ALERT "(%9lu, %4lu) %6lu  %p  %c  %c  %c\n", \
                                        ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#485: FILE: block/elevator-iosched.c:380:
+#define printr(e) (printk(KERN_ALERT "(%9lu, %4lu) %6lu  %p  %c  %c  %c\n", \
                                              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#485: FILE: block/elevator-iosched.c:380:
+#define printr(e) (printk(KERN_ALERT "(%9lu, %4lu) %6lu  %p  %c  %c  %c\n", \
                                                    ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#485: FILE: block/elevator-iosched.c:380:
+#define printr(e) (printk(KERN_ALERT "(%9lu, %4lu) %6lu  %p  %c  %c  %c\n", \
                                                          ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#485: FILE: block/elevator-iosched.c:380:
+#define printr(e) (printk(KERN_ALERT "(%9lu, %4lu) %6lu  %p  %c  %c  %c\n", \
                                                              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#485: FILE: block/elevator-iosched.c:380:
+#define printr(e) (printk(KERN_ALERT "(%9lu, %4lu) %6lu  %p  %c  %c  %c\n", \
                                                                  ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#485: FILE: block/elevator-iosched.c:380:
+#define printr(e) (printk(KERN_ALERT "(%9lu, %4lu) %6lu  %p  %c  %c  %c\n", \
                                                                      ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#496: FILE: block/elevator-iosched.c:389:
+ * These two functions are a little complicated.  They are intended to$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#497: FILE: block/elevator-iosched.c:390:
+ * allow iterating over all the operations in the queue, a la$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#498: FILE: block/elevator-iosched.c:391:
+ * queue_for_each_op().  However, due to the structure of contig$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#499: FILE: block/elevator-iosched.c:392:
+ * lists, the functions only work for the "ends", that is, the edge$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#500: FILE: block/elevator-iosched.c:393:
+ * request of the operation.  To illustrate:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#501: FILE: block/elevator-iosched.c:394:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#502: FILE: block/elevator-iosched.c:395:
+ * /--------------------- queue list ----------------------------\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#503: FILE: block/elevator-iosched.c:396:
+ * \-/ 100 --- 101 --- 102 \--/ 141 \--/ 170 --- 171 \--/ head \-/$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#504: FILE: block/elevator-iosched.c:397:
+ *   \---------------------/  \-----/  \-------------/  \------/$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#505: FILE: block/elevator-iosched.c:398:
+ *                       contig lists$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#506: FILE: block/elevator-iosched.c:399:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#507: FILE: block/elevator-iosched.c:400:
+ * Our goal is to return 141 given next_operation(100).  Thus$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#508: FILE: block/elevator-iosched.c:401:
+ * we take the prev_contig(100) to get 102, and next_in_queue(102)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#509: FILE: block/elevator-iosched.c:402:
+ * to get 141.  This obviously would fail if we called next_operation(101).$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#510: FILE: block/elevator-iosched.c:403:
+ * So we test for that case with (next_op == e), since prev_contig(101)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#511: FILE: block/elevator-iosched.c:404:
+ * is 100, and next_in_queue(100) is 101 again.  Note that this function$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#512: FILE: block/elevator-iosched.c:405:
+ * works correctly for single request operations, since prev_contig(141)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#513: FILE: block/elevator-iosched.c:406:
+ * is 141, so next_in_queue(141) returns 170, the correct value.  It also$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#514: FILE: block/elevator-iosched.c:407:
+ * works correctly for the head, since its contig list is also empty.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#515: FILE: block/elevator-iosched.c:408:
+ */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#529: FILE: block/elevator-iosched.c:422:
+ * Print the elevator statistics, and the entire queue.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#530: FILE: block/elevator-iosched.c:423:
+ */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#542: FILE: block/elevator-iosched.c:435:
+ * This is similar to list_splice(), except it merges every item onto @list,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#543: FILE: block/elevator-iosched.c:436:
+ * not excluding @head itself.  It is a noop if @head already immediately$

WARNING:TYPO_SPELLING: 'preceeds' may be misspelled - perhaps 'precedes'?
#544: FILE: block/elevator-iosched.c:437:
+ * preceeds @list.
    ^^^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#544: FILE: block/elevator-iosched.c:437:
+ * preceeds @list.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#545: FILE: block/elevator-iosched.c:438:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#546: FILE: block/elevator-iosched.c:439:
+ * It really should go into list.h$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#547: FILE: block/elevator-iosched.c:440:
+ */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#561: FILE: block/elevator-iosched.c:454:
+ * Find the insertion point for a request starting at sector @new.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#562: FILE: block/elevator-iosched.c:455:
+ */$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#587: FILE: block/elevator-iosched.c:480:
+			printk(KERN_ALERT "nate 0000: identical starting points\n");
 			                            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#606: FILE: block/elevator-iosched.c:499:
+ * Resets the sweep counter and triggers the trace printouts.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#607: FILE: block/elevator-iosched.c:500:
+ */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#610: FILE: block/elevator-iosched.c:503:
+ ^Iif (likely(!el->print_interval) || start >= el->head.start)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#610: FILE: block/elevator-iosched.c:503:
+ ^Iif (likely(!el->print_interval) || start >= el->head.start)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#610: FILE: block/elevator-iosched.c:503:
+ ^Iif (likely(!el->print_interval) || start >= el->head.start)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#617: FILE: block/elevator-iosched.c:510:
+ ^I^Isprint(el);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#617: FILE: block/elevator-iosched.c:510:
+ ^I^Isprint(el);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#617: FILE: block/elevator-iosched.c:510:
+ ^I^Isprint(el);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#618: FILE: block/elevator-iosched.c:511:
+ ^I^Iqprint(el->q, el);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#618: FILE: block/elevator-iosched.c:511:
+ ^I^Iqprint(el->q, el);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#618: FILE: block/elevator-iosched.c:511:
+ ^I^Iqprint(el->q, el);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#624: FILE: block/elevator-iosched.c:517:
+ * Keep track of contiguous submitted requests, and move the head forward to$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#625: FILE: block/elevator-iosched.c:518:
+ * skip the remaining requests in the current operation if more than$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#626: FILE: block/elevator-iosched.c:519:
+ * max_contig number of sectors have already been submitted.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#627: FILE: block/elevator-iosched.c:520:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#628: FILE: block/elevator-iosched.c:521:
+ * Returns True if it moved the head.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#629: FILE: block/elevator-iosched.c:522:
+ */$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#644: FILE: block/elevator-iosched.c:537:
+		printk(KERN_ALERT "nate 1977: max_contig went backwards\n");
 		                            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#654: FILE: block/elevator-iosched.c:547:
+ * Remove the selected request from the queue, and update all internal$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#655: FILE: block/elevator-iosched.c:548:
+ * state.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#656: FILE: block/elevator-iosched.c:549:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#657: FILE: block/elevator-iosched.c:550:
+ * This is called when the request is being submitted to the controller.  If$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#658: FILE: block/elevator-iosched.c:551:
+ * the controller's queue is full, the request gets added back into the$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#659: FILE: block/elevator-iosched.c:552:
+ * outgoing queue.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#660: FILE: block/elevator-iosched.c:553:
+ */$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#683: FILE: block/elevator-iosched.c:576:
+		printk(KERN_ALERT "nate 0001: removing request out of elevator order\n");
 		                            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#720: FILE: block/elevator-iosched.c:613:
+ * Insert a new request into the contig lists, and update the head position$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#721: FILE: block/elevator-iosched.c:614:
+ * if needed.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#722: FILE: block/elevator-iosched.c:615:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#723: FILE: block/elevator-iosched.c:616:
+ * This has to cover a lot of different cases, since @req can be new, or$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#724: FILE: block/elevator-iosched.c:617:
+ * only extended (via a bio merge).  Also, the head is never supposed to be$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#725: FILE: block/elevator-iosched.c:618:
+ * in between contiguous requests, so if we do a merge around the head, we$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#726: FILE: block/elevator-iosched.c:619:
+ * have to move it to the end of the resulting operation (we can't go to the$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#727: FILE: block/elevator-iosched.c:620:
+ * beginning, because we don't want to seek backwards).$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#728: FILE: block/elevator-iosched.c:621:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#729: FILE: block/elevator-iosched.c:622:
+ * First, set @next and @prev to the two requests we might merge with. After$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#730: FILE: block/elevator-iosched.c:623:
+ * the merge, @first and @last conceptually represent the first and last$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#731: FILE: block/elevator-iosched.c:624:
+ * request in the resulting operation.  However, since we may have already$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#732: FILE: block/elevator-iosched.c:625:
+ * merged into @next, the is_contig_prev code can't use the next_contig()$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#733: FILE: block/elevator-iosched.c:626:
+ * trick (see prev_operation()'s comment for an overview).  Thus, @first is$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#734: FILE: block/elevator-iosched.c:627:
+ * set to @prev, not necessarily the actual first request.  This is$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#735: FILE: block/elevator-iosched.c:628:
+ * sufficient to @ensure that @head is positioned properly afterward, so no$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#736: FILE: block/elevator-iosched.c:629:
+ * worries.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#737: FILE: block/elevator-iosched.c:630:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#738: FILE: block/elevator-iosched.c:631:
+ * If no merge happened, @first and @last are the request in question, since$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#739: FILE: block/elevator-iosched.c:632:
+ * it's its own operation.  Either way, the head should not be anywhere in$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#740: FILE: block/elevator-iosched.c:633:
+ * the area that the operation covers, so if needed, we move it before$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#741: FILE: block/elevator-iosched.c:634:
+ * returning.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#742: FILE: block/elevator-iosched.c:635:
+ */$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#751: FILE: block/elevator-iosched.c:644:
+		printk(KERN_ALERT "nate 0101: zero length request\n");
 		                            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#754: FILE: block/elevator-iosched.c:646:
+		printk(KERN_ALERT "nate 1111: request is already contiguous\n");
 		                            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#777: FILE: block/elevator-iosched.c:669:
+ * Insert a new request in elevator order.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#778: FILE: block/elevator-iosched.c:670:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#779: FILE: block/elevator-iosched.c:671:
+ * Initialize private data, insert the request, update the queue accounting,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#780: FILE: block/elevator-iosched.c:672:
+ * and merge it into the contig lists.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#781: FILE: block/elevator-iosched.c:673:
+ */$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#788: FILE: block/elevator-iosched.c:680:
+		printk(KERN_ALERT "nate 144: request didn't get zeroed out\n");
 		                           ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#805: FILE: block/elevator-iosched.c:697:
+ * Update private bookkeeping for a successful bio merge with @req.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#806: FILE: block/elevator-iosched.c:698:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#807: FILE: block/elevator-iosched.c:699:
+ * Aside from sychronizing the sector counts, we also have to check to see$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#808: FILE: block/elevator-iosched.c:700:
+ * if this merge closed a gap between requests, causing them to become$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#809: FILE: block/elevator-iosched.c:701:
+ * contiguous.  We always update the contig lists in this case, because we$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#810: FILE: block/elevator-iosched.c:702:
+ * can't count on doing a double merge (the requests may be too big, or a$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#811: FILE: block/elevator-iosched.c:703:
+ * mix of reads and writes).  @direction tells us whether it was a front or$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#812: FILE: block/elevator-iosched.c:704:
+ * back merge, but I haven't modified make_contiguous() to use it.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#813: FILE: block/elevator-iosched.c:705:
+ */$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#822: FILE: block/elevator-iosched.c:714:
+		printk(KERN_ALERT "nate 1990: mismatched sector counts in bio merge\n");
 		                            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#834: FILE: block/elevator-iosched.c:726:
+ * Here we update our private bookkeeping for merge of @old into @req.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#835: FILE: block/elevator-iosched.c:727:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#836: FILE: block/elevator-iosched.c:728:
+ * This is only for the case where a double merge has occurred, that is, a$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#837: FILE: block/elevator-iosched.c:729:
+ * bio was added to @req which caused it to become contiguous, and$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#838: FILE: block/elevator-iosched.c:730:
+ * mergeable, with @old.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#839: FILE: block/elevator-iosched.c:731:
+ */$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#846: FILE: block/elevator-iosched.c:738:
+		printk(KERN_ALERT "nate 894: request is not on the queue\n");
 		                           ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#848: FILE: block/elevator-iosched.c:740:
+		printk(KERN_ALERT "nate 898: merge_req on already dispatched req\n");
 		                           ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#850: FILE: block/elevator-iosched.c:742:
+		printk(KERN_ALERT "nate 896: merging with the queue head\n");
 		                           ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#853: FILE: block/elevator-iosched.c:745:
+		printk(KERN_ALERT "nate 8897: merging non-contiguous requests\n");
 		                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#853: FILE: block/elevator-iosched.c:745:
+		printk(KERN_ALERT "nate 8897: merging non-contiguous requests\n");
 		                                         ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#863: FILE: block/elevator-iosched.c:755:
+ * Initial check to see if we are allowed to merge @bio with a currently$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#864: FILE: block/elevator-iosched.c:756:
+ * enqueued request.  Returns the direction to merge, and the request to$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#865: FILE: block/elevator-iosched.c:757:
+ * merge with in @req.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#866: FILE: block/elevator-iosched.c:758:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#867: FILE: block/elevator-iosched.c:759:
+ * We avoid front merges if possible, this allows us to simplify$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#868: FILE: block/elevator-iosched.c:760:
+ * merge_requests(), since we know that a front merged bio could not have$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#869: FILE: block/elevator-iosched.c:761:
+ * happened.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#870: FILE: block/elevator-iosched.c:762:
+ */$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#884: FILE: block/elevator-iosched.c:776:
+	if (is_contig_prev(e, bio->bi_sector)
+				&& elv_rq_merge_ok(e->request, bio)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#891: FILE: block/elevator-iosched.c:783:
+	if (is_contig_next(bio->bi_sector + bio_sectors(bio), e)
+				&& elv_rq_merge_ok(e->request, bio)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#899: FILE: block/elevator-iosched.c:791:
+ * Select the first request which starts after the head position.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#900: FILE: block/elevator-iosched.c:792:
+ */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#938: FILE: block/elevator-iosched.c:829:
+ * Select the request whose starting sector is closest to the head position.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#939: FILE: block/elevator-iosched.c:830:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#940: FILE: block/elevator-iosched.c:831:
+ * Currently ignores max_write and pure_operation.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#941: FILE: block/elevator-iosched.c:832:
+ */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#959: FILE: block/elevator-iosched.c:850:
+ * Identify which request should be submitted to the disk next.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#960: FILE: block/elevator-iosched.c:851:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#961: FILE: block/elevator-iosched.c:852:
+ * Note that the request is not actually submitted, but it is added to$

WARNING:TYPO_SPELLING: 'compatability' may be misspelled - perhaps 'compatibility'?
#962: FILE: block/elevator-iosched.c:853:
+ * the outgoing queue.  This is solely to maintain compatability with the
                                                    ^^^^^^^^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#962: FILE: block/elevator-iosched.c:853:
+ * the outgoing queue.  This is solely to maintain compatability with the$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#963: FILE: block/elevator-iosched.c:854:
+ * device drivers and libraries, which all expect q->queue_head to be used.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#964: FILE: block/elevator-iosched.c:855:
+ * The outgoing queue is also used for requests frozen before a barrier, and$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#965: FILE: block/elevator-iosched.c:856:
+ * special requests.  These requests must go out before anything on the head$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#966: FILE: block/elevator-iosched.c:857:
+ * queue.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#967: FILE: block/elevator-iosched.c:858:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#968: FILE: block/elevator-iosched.c:859:
+ * However, if a request is submitted on an otherwise empty outgoing queue,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#969: FILE: block/elevator-iosched.c:860:
+ * and it doesn't get de-queued immediately, other requests can be inserted$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#970: FILE: block/elevator-iosched.c:861:
+ * into the head queue which are before it in elevator order.  So instead of$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#971: FILE: block/elevator-iosched.c:862:
+ * blindly returning the first request on the outgoing queue, the loop at top$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#972: FILE: block/elevator-iosched.c:863:
+ * checks if the request has been de-queued by remove_request() yet.  If so,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#973: FILE: block/elevator-iosched.c:864:
+ * it is part of a barrier or command, and it must go out.  If not, it is$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#974: FILE: block/elevator-iosched.c:865:
+ * removed from the outgoing queue.  Then if outgoing is empty, the next$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#975: FILE: block/elevator-iosched.c:866:
+ * request from the head queue is selected.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#976: FILE: block/elevator-iosched.c:867:
+ */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#982: FILE: block/elevator-iosched.c:873:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1012: FILE: block/elevator-iosched.c:902:
+		printk(KERN_ALERT "nate 202: request is already queued\n");
 		                           ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1028: FILE: block/elevator-iosched.c:918:
+ * Indicate whether next_request() has anything to submit.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1029: FILE: block/elevator-iosched.c:919:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1030: FILE: block/elevator-iosched.c:920:
+ * We check both queues here, since either one could be empty.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1031: FILE: block/elevator-iosched.c:921:
+ */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1040: FILE: block/elevator-iosched.c:930:
+ * These two functions are used to perform request merging when a bio merge$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1041: FILE: block/elevator-iosched.c:931:
+ * has bridged the gap between two requests.  Since we have already done the$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1042: FILE: block/elevator-iosched.c:932:
+ * work merging the contig lists in make_contiguous(), we only return$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1043: FILE: block/elevator-iosched.c:933:
+ * something here if we know it is contiguous, to save CPU cycles when no$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1044: FILE: block/elevator-iosched.c:934:
+ * merge is possible.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1045: FILE: block/elevator-iosched.c:935:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1046: FILE: block/elevator-iosched.c:936:
+ * TODO: benchmark with NULL functions here, since the work to do the merge$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1047: FILE: block/elevator-iosched.c:937:
+ * may be more than the overhead of keeping another request lying around.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1048: FILE: block/elevator-iosched.c:938:
+ */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1064: FILE: block/elevator-iosched.c:954:
+ * Free any per-queue private resources and reset the backing-dev-info$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1065: FILE: block/elevator-iosched.c:955:
+ * fields to the defaults.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1066: FILE: block/elevator-iosched.c:956:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1067: FILE: block/elevator-iosched.c:957:
+ * This is called for each queue when it is destroyed.  It is block device$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1068: FILE: block/elevator-iosched.c:958:
+ * specific.  We have to reset the backing_dev stuff since we messed with$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1069: FILE: block/elevator-iosched.c:959:
+ * the congestion and readahead values.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1070: FILE: block/elevator-iosched.c:960:
+ */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1087: FILE: block/elevator-iosched.c:976:
+ * Fortunately, we get to define a device-specific congestion function.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1088: FILE: block/elevator-iosched.c:977:
+ * This is fortunate because we have yet to find a case where we$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1089: FILE: block/elevator-iosched.c:978:
+ * benefit from any of the effects of being 'congested', so we just$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1090: FILE: block/elevator-iosched.c:979:
+ * turn it off.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1091: FILE: block/elevator-iosched.c:980:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1092: FILE: block/elevator-iosched.c:981:
+ * Read congestion just disables "optional" reads, from readahead and$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1093: FILE: block/elevator-iosched.c:982:
+ * fadvise and such, which is *very* wrong for our application.  Probably$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1094: FILE: block/elevator-iosched.c:983:
+ * I will implement dynamic tuning of ra_pages instead.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1095: FILE: block/elevator-iosched.c:984:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1096: FILE: block/elevator-iosched.c:985:
+ * Write congestion signals pdflush or FS specific flush code to stop$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1097: FILE: block/elevator-iosched.c:986:
+ * submitting pages, but really it's better to get a lot of pages at once.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1098: FILE: block/elevator-iosched.c:987:
+ * The max_contig and max_write tunables should address writes-starve-reads$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1099: FILE: block/elevator-iosched.c:988:
+ * problems in our case.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1100: FILE: block/elevator-iosched.c:989:
+ */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1107: FILE: block/elevator-iosched.c:996:
+ * Initialize elevator private data (el_data), and allocate an el_req for$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1108: FILE: block/elevator-iosched.c:997:
+ * each request on the free lists.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1109: FILE: block/elevator-iosched.c:998:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1110: FILE: block/elevator-iosched.c:999:
+ * This gets called for each actual queue when it is created.  It is block$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1111: FILE: block/elevator-iosched.c:1000:
+ * device specific.  Also initialize tunables to their default values, and$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1112: FILE: block/elevator-iosched.c:1001:
+ * install the congestion handler.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1113: FILE: block/elevator-iosched.c:1002:
+ */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1152: FILE: block/elevator-iosched.c:1041:
+ * Free this requests private resources.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1153: FILE: block/elevator-iosched.c:1042:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1154: FILE: block/elevator-iosched.c:1043:
+ * This is only called when the request is already unused.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1155: FILE: block/elevator-iosched.c:1044:
+ */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1168: FILE: block/elevator-iosched.c:1057:
+ * Allocate and initialize the private data for the new request.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1169: FILE: block/elevator-iosched.c:1058:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1170: FILE: block/elevator-iosched.c:1059:
+ * Don't do anything specific to adding a request; the remaining$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1171: FILE: block/elevator-iosched.c:1060:
+ * initialization happens in add_request or insert_request.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1172: FILE: block/elevator-iosched.c:1061:
+ */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1192: FILE: block/elevator-iosched.c:1080:
+ * SysFS Functions for Run-Time Tunables$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1193: FILE: block/elevator-iosched.c:1081:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1194: FILE: block/elevator-iosched.c:1082:
+ * Exports:   queue/iosched/max_contig^I(units of 512B sectors)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1195: FILE: block/elevator-iosched.c:1083:
+ *            queue/iosched/print_interval  (units of sweeps)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1196: FILE: block/elevator-iosched.c:1084:
+ *            queue/iosched/max_write  (units of 512B sectors)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1197: FILE: block/elevator-iosched.c:1085:
+ *            queue/iosched/ra_pages  (units of pages)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1198: FILE: block/elevator-iosched.c:1086:
+ */$

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#1204: FILE: block/elevator-iosched.c:1092:
+	return sprintf(page, "%u\n", (unsigned int) __VAR);		\
 	                      ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1240: FILE: block/elevator-iosched.c:1127:
+^I^I.elevator_merge_fn = ^I^Imerge,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1241: FILE: block/elevator-iosched.c:1128:
+^I^I.elevator_extended_req_fn = ^Iextended_request,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1253: FILE: block/elevator-iosched.c:1140:
+^I^I.elevator_put_req_fn = ^I^Iput_req,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1265: FILE: block/elevator-iosched.c:1152:
+ * Register the scheduler, and create the slab allocator$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1266: FILE: block/elevator-iosched.c:1153:
+ * for private request data$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1267: FILE: block/elevator-iosched.c:1154:
+ */$

CHECK:CAMELCASE: Avoid CamelCase: <Nate>
#1294: FILE: block/elevator-iosched.c:1181:
+MODULE_AUTHOR("Nate Diller");

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Diller>
#1294: FILE: block/elevator-iosched.c:1181:
+MODULE_AUTHOR("Nate Diller");

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1306: FILE: block/Kconfig.iosched:41:
+config IOSCHED_ELEVATOR
+	tristate "Elevator I/O scheduler"
+	default y
+	---help---
+	  This is a simple BSD style one-way elevator.  It avoids the complexity
+	  of deadlines, and uses a limit on contiguous I/O sectors to keep things
+	  moving and reduce latency.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1314: FILE: block/Kconfig.iosched:49:
+config IOSCHED_EL_SSTF
+	bool "Alternate Heuristic: Shortest Seek Time First" if IOSCHED_ELEVATOR
+	default n
+	---help---
+	  Elevator normally uses the C-SCAN one-way elevator algorithm,
+	  which is useful in most situations to avoid queue congestion and
+	  request starvation.  In some cases, SSTF might be higher
+	  performance, particularly with certain localized workloads.
+
+	  If you don't know that you want this, you don't.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1325: FILE: block/Kconfig.iosched:60:
+config IOSCHED_EL_PERF_DEBUG
+	bool "Debug Elevator I/O performance" if IOSCHED_ELEVATOR
+	default y
+	---help---
+	  This enables extra checking to ensure that Elevator I/O scheduling
+	  is occurring without errors that could effect performance.  It
+	  will print messages into the system log if it detects problems.
+	  If your performance under Elevator is lower than you expect, or if
+	  you would like to monitor for degradation, enable this option.
+
+	  This has negligible overhead, and does not change Elevator's behavior.
+
 choice
 	prompt "Default I/O scheduler"
+	default DEFAULT_AS
+	default DEFAULT_AS
 	help
 	  Select the I/O scheduler which will be used by default for all
 	  block devices.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1438: FILE: include/linux/elevator.h:100:
+extern void elv_extended_request(request_queue_t *, struct request *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#1438: FILE: include/linux/elevator.h:100:
+extern void elv_extended_request(request_queue_t *, struct request *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#1438: FILE: include/linux/elevator.h:100:
+extern void elv_extended_request(request_queue_t *, struct request *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'nt' should also have an identifier name
#1438: FILE: include/linux/elevator.h:100:
+extern void elv_extended_request(request_queue_t *, struct request *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1438: FILE: include/linux/elevator.h:100:
+extern void elv_extended_request(request_queue_t *, struct request *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1440: FILE: include/linux/elevator.h:101:
+extern void elv_extended_request(request_queue_t *, struct request *,
 extern void elv_merged_request(request_queue_t *, struct request *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000051554.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 26 errors, 211 warnings, 33 checks, 1351 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000051554.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
