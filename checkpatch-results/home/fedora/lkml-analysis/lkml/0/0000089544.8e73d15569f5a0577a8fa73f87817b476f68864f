WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#53: FILE: drivers/serial/Kconfig:328:
+config SERIAL_DCC
+	bool "JTAG ICE/ICD DCC serial port emulation support"
+	depends on ARM
+	select SERIAL_CORE
+	help
+	  This selects serial port emulation driver for ICE/ICD JTAG debugger
+	  (e.g. Trace32) for ARM architecture. You should make an terminal with
+	  DCC(JTAG1) protocol.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#63: FILE: drivers/serial/Kconfig:338:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#64: FILE: drivers/serial/Kconfig:339:
+config SERIAL_DCC_CONSOLE
+	bool "Support for console on JTAG ICE/ICD DCC"
+	depends on SERIAL_DCC
+	select SERIAL_CORE_CONSOLE
+	help
+	  Say Y here if you wish to use ICE/ICD JTAG DCC serial port emulation
+	  as the system console. you can use command line option "console=ttyJ0"
+	  for manual console driver setup.
+

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#91: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#96: FILE: drivers/serial/dcc.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#97: FILE: drivers/serial/dcc.c:2:
+ *  linux/drivers/serial/dcc.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#102: FILE: drivers/serial/dcc.c:7:
+ * ^ICopyright (C) 2003, 2004, 2005 Hyok S. Choi (hyok.choi@samsung.com)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#103: FILE: drivers/serial/dcc.c:8:
+ * ^ISAMSUNG ELECTRONICS Co.,Ltd.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#111: FILE: drivers/serial/dcc.c:16:
+ *   Feb-2004 Hyok S. Choi ^IUpdated for serial_core.c and 2.6 kernel$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#112: FILE: drivers/serial/dcc.c:17:
+ *   Apr-2004 Hyok S. Choi ^Ixmit_string_CR added$

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#128: FILE: drivers/serial/dcc.c:33:
+#include <asm/io.h>

ERROR:SPACING: exactly one space required after that #ifndef
#139: FILE: drivers/serial/dcc.c:44:
+#ifndef  DCC_IRQ_USED

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#150: FILE: drivers/serial/dcc.c:55:
+static int __inline__ __check_JTAG_RX_FLAG(void)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

WARNING:INLINE: plain inline is preferred over __inline__
#150: FILE: drivers/serial/dcc.c:55:
+static int __inline__ __check_JTAG_RX_FLAG(void)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#152: FILE: drivers/serial/dcc.c:57:
+	int __ret=0;
 	         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#153: FILE: drivers/serial/dcc.c:58:
+	int __ret=0;
+	__asm__ __volatile__(

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#153: FILE: drivers/serial/dcc.c:58:
+	__asm__ __volatile__(

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#154: FILE: drivers/serial/dcc.c:59:
+^I^I"^Imrc^I^Ip14, 0, %0, c0, c0 ^I@ read comms control reg\n"$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#159: FILE: drivers/serial/dcc.c:64:
+^I/* if   __ret ^I== 0 : no input yet$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#160: FILE: drivers/serial/dcc.c:65:
+	/* if   __ret 	== 0 : no input yet
+				== 1 : a character pending */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#160: FILE: drivers/serial/dcc.c:65:
+				== 1 : a character pending */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#161: FILE: drivers/serial/dcc.c:66:
+^Ireturn __ret;^I$

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#164: FILE: drivers/serial/dcc.c:69:
+static void __inline__ __get_JTAG_RX(volatile char *p)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#164: FILE: drivers/serial/dcc.c:69:
+static void __inline__ __get_JTAG_RX(volatile char *p)

WARNING:INLINE: plain inline is preferred over __inline__
#164: FILE: drivers/serial/dcc.c:69:
+static void __inline__ __get_JTAG_RX(volatile char *p)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#166: FILE: drivers/serial/dcc.c:71:
+	__asm__ __volatile__(

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#167: FILE: drivers/serial/dcc.c:72:
+^I^I"^Imrc^I^Ip14, 0, r3, c1, c0 ^I@ read comms data reg to r5\n"$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#168: FILE: drivers/serial/dcc.c:73:
+^I^I"^Istrb ^I^Ir3, ^I[%0]^I^I@ str a char"$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#174: FILE: drivers/serial/dcc.c:79:
+
+

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#175: FILE: drivers/serial/dcc.c:80:
+static int __inline__ __check_JTAG_TX_FLAG(void)

WARNING:INLINE: plain inline is preferred over __inline__
#175: FILE: drivers/serial/dcc.c:80:
+static int __inline__ __check_JTAG_TX_FLAG(void)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#177: FILE: drivers/serial/dcc.c:82:
+	int __ret=0;
 	         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#178: FILE: drivers/serial/dcc.c:83:
+	int __ret=0;
+	__asm__ __volatile__(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#178: FILE: drivers/serial/dcc.c:83:
+	__asm__ __volatile__(

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#179: FILE: drivers/serial/dcc.c:84:
+^I^I"^Imrc^I^Ip14, 0, %0, c0, c0 ^I@ read comms control reg\n"$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#180: FILE: drivers/serial/dcc.c:85:
+^I^I"^Iand ^I^I%0, %0, #2^I^I@ the read buffer status"$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#184: FILE: drivers/serial/dcc.c:89:
+^I/* if   __ret ^I== 0 : tx is available$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#185: FILE: drivers/serial/dcc.c:90:
+	/* if   __ret 	== 0 : tx is available
+				== 2 : tx busy */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#185: FILE: drivers/serial/dcc.c:90:
+				== 2 : tx busy */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#186: FILE: drivers/serial/dcc.c:91:
+^Ireturn __ret;^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#193: FILE: drivers/serial/dcc.c:98:
+	/*
+		r0 = string	; string address

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#198: FILE: drivers/serial/dcc.c:103:
+	__asm__ __volatile__(

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#200: FILE: drivers/serial/dcc.c:105:
+^I^I"1: ^Imrc^Ip14, 0, r3, c0, c0 ^I@ read comms control reg\n"$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#220: FILE: drivers/serial/dcc.c:125:
+	/*
+		r0 = string	; string address

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#225: FILE: drivers/serial/dcc.c:130:
+	__asm__ __volatile__(

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#228: FILE: drivers/serial/dcc.c:133:
+^I^I"1: ^Imrc^Ip14, 0, r3, c0, c0 ^I@ read comms control reg\n"$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#236: FILE: drivers/serial/dcc.c:141:
+^I^I"^Ib   1b^I^I^I^I@ loop for writing CR\n"^I^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#247: FILE: drivers/serial/dcc.c:152:
+
+

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#260: FILE: drivers/serial/dcc.c:165:
+	if(pendings + xmit->tail > UART_XMIT_SIZE)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#260: FILE: drivers/serial/dcc.c:165:
+	if(pendings + xmit->tail > UART_XMIT_SIZE)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around xmit->buf[xmit->tail]
#262: FILE: drivers/serial/dcc.c:167:
+		xmit_string(&(xmit->buf[xmit->tail]), UART_XMIT_SIZE - xmit->tail);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around xmit->buf[0]
#263: FILE: drivers/serial/dcc.c:168:
+		xmit_string(&(xmit->buf[0]), xmit->head);

CHECK:BRACES: Unbalanced braces around else statement
#264: FILE: drivers/serial/dcc.c:169:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around xmit->buf[xmit->tail]
#265: FILE: drivers/serial/dcc.c:170:
+		xmit_string(&(xmit->buf[xmit->tail]), pendings);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#266: FILE: drivers/serial/dcc.c:171:
+^I$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#267: FILE: drivers/serial/dcc.c:172:
+	xmit->tail = (xmit->tail + pendings) & (UART_XMIT_SIZE-1);
 	                                                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#268: FILE: drivers/serial/dcc.c:173:
+        port->icount.tx += pendings;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: drivers/serial/dcc.c:173:
+        port->icount.tx += pendings;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#271: FILE: drivers/serial/dcc.c:176:
+^I^Idcc_stop_tx(port); $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: drivers/serial/dcc.c:190:
+    dcc_transmit_buffer(port);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#311: FILE: drivers/serial/dcc.c:216:
+^I^I/* if   __ret ^I== 0 : no input yet$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#312: FILE: drivers/serial/dcc.c:217:
+		/* if   __ret 	== 0 : no input yet
+					== 1 : a character pending */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#312: FILE: drivers/serial/dcc.c:217:
+					== 1 : a character pending */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#338: FILE: drivers/serial/dcc.c:243:
+^I^Ireturn; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#360: FILE: drivers/serial/dcc.c:265:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#366: FILE: drivers/serial/dcc.c:271:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#377: FILE: drivers/serial/dcc.c:282:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#384: FILE: drivers/serial/dcc.c:289:
+^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#385: FILE: drivers/serial/dcc.c:290:
+	
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#435: FILE: drivers/serial/dcc.c:340:
+dcc_set_termios(struct uart_port *port, struct termios *termios,
+		   struct termios *old)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#457: FILE: drivers/serial/dcc.c:362:
+^Ibaud = uart_get_baud_rate(port, termios, old, 0, port->uartclk/16); $

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#457: FILE: drivers/serial/dcc.c:362:
+	baud = uart_get_baud_rate(port, termios, old, 0, port->uartclk/16); 
 	                                                              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#490: FILE: drivers/serial/dcc.c:395:
+        if (flags & UART_CONFIG_TYPE) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#490: FILE: drivers/serial/dcc.c:395:
+        if (flags & UART_CONFIG_TYPE) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#491: FILE: drivers/serial/dcc.c:396:
+                port->type = PORT_DCC_JTAG1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#491: FILE: drivers/serial/dcc.c:396:
+                port->type = PORT_DCC_JTAG1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#492: FILE: drivers/serial/dcc.c:397:
+                dcc_request_port(port);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#492: FILE: drivers/serial/dcc.c:397:
+                dcc_request_port(port);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#493: FILE: drivers/serial/dcc.c:398:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#493: FILE: drivers/serial/dcc.c:398:
+        }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#495: FILE: drivers/serial/dcc.c:400:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#495: FILE: drivers/serial/dcc.c:400:
+        $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#495: FILE: drivers/serial/dcc.c:400:
+        $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#496: FILE: drivers/serial/dcc.c:401:
+/*      $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#498: FILE: drivers/serial/dcc.c:403:
+ */     $

WARNING:TYPO_SPELLING: 'ser' may be misspelled - perhaps 'set'?
#499: FILE: drivers/serial/dcc.c:404:
+static int dcc_verify_port(struct uart_port *port, struct serial_struct *ser)
                                                                          ^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#501: FILE: drivers/serial/dcc.c:406:
+        int ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#501: FILE: drivers/serial/dcc.c:406:
+        int ret = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#502: FILE: drivers/serial/dcc.c:407:
+        if (ser->type != PORT_UNKNOWN && ser->type != PORT_DCC_JTAG1)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#502: FILE: drivers/serial/dcc.c:407:
+        int ret = 0;
+        if (ser->type != PORT_UNKNOWN && ser->type != PORT_DCC_JTAG1)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#502: FILE: drivers/serial/dcc.c:407:
+        if (ser->type != PORT_UNKNOWN && ser->type != PORT_DCC_JTAG1)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#503: FILE: drivers/serial/dcc.c:408:
+                ret = -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#503: FILE: drivers/serial/dcc.c:408:
+                ret = -EINVAL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#504: FILE: drivers/serial/dcc.c:409:
+        if (ser->irq < 0 || ser->irq >= NR_IRQS)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#504: FILE: drivers/serial/dcc.c:409:
+        if (ser->irq < 0 || ser->irq >= NR_IRQS)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#505: FILE: drivers/serial/dcc.c:410:
+                ret = -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#505: FILE: drivers/serial/dcc.c:410:
+                ret = -EINVAL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#506: FILE: drivers/serial/dcc.c:411:
+        if (ser->baud_base < 9600)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#506: FILE: drivers/serial/dcc.c:411:
+        if (ser->baud_base < 9600)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#507: FILE: drivers/serial/dcc.c:412:
+                ret = -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#507: FILE: drivers/serial/dcc.c:412:
+                ret = -EINVAL;$

WARNING:CONST_STRUCT: struct uart_ops should normally be const
#511: FILE: drivers/serial/dcc.c:416:
+static struct uart_ops dcc_pops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#532: FILE: drivers/serial/dcc.c:437:
+		.membase	= (char*)0x12345678,	/* we need these garbages */

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#534: FILE: drivers/serial/dcc.c:439:
+^I^I.iotype^I^I= SERIAL_IO_MEM,^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#540: FILE: drivers/serial/dcc.c:445:
+^I^I.uartclk^I= 14745600,^I^I^I $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#548: FILE: drivers/serial/dcc.c:453:
+
+

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#554: FILE: drivers/serial/dcc.c:459:
+	xmit_string_CR((char*)s, count);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#561: FILE: drivers/serial/dcc.c:466:
+dcc_console_get_options(struct uart_port *port, int *baud, int *parity, int $

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#562: FILE: drivers/serial/dcc.c:466:
*bits)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#608: FILE: drivers/serial/dcc.c:512:
+#define DCC_CONSOLE		&dcc_console

WARNING:REPEATED_WORD: Possible repeated word: 'driver'
#628: FILE: drivers/serial/dcc.c:532:
+	printk(KERN_INFO "DCC: JTAG1 Serial emulation driver driver $Revision: 1.1 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#628: FILE: drivers/serial/dcc.c:532:
+^Iprintk(KERN_INFO "DCC: JTAG1 Serial emulation driver driver $Revision: 1.1 $

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#628: FILE: drivers/serial/dcc.c:532:
+	printk(KERN_INFO "DCC: JTAG1 Serial emulation driver driver $Revision: 1.1 

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#628: FILE: drivers/serial/dcc.c:532:
+	printk(KERN_INFO "DCC: JTAG1 Serial emulation driver driver $Revision: 1.1 

CHECK:CAMELCASE: Avoid CamelCase: <Hyok>
#645: FILE: drivers/serial/dcc.c:548:
+MODULE_AUTHOR("Hyok S. Choi <hyok.choi@samsung.com>");

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Choi>
#645: FILE: drivers/serial/dcc.c:548:
+MODULE_AUTHOR("Hyok S. Choi <hyok.choi@samsung.com>");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000089544.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 44 errors, 54 warnings, 18 checks, 596 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000089544.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
