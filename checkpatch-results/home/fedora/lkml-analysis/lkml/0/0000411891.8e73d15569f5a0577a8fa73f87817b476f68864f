CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ma' - possible side-effects?
#80: FILE: fs/char_dev.c:26:
+#define isa_tty_dev(ma)	(ma == TTY_MAJOR || ma == TTYAUX_MAJOR)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ma' may be better as '(ma)' to avoid precedence issues
#80: FILE: fs/char_dev.c:26:
+#define isa_tty_dev(ma)	(ma == TTY_MAJOR || ma == TTYAUX_MAJOR)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#81: FILE: fs/char_dev.c:27:
+#define need_serial(ma,mi) (get_tty_driver(mk_kdev(ma,mi)) == NULL)
                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#81: FILE: fs/char_dev.c:27:
+#define need_serial(ma,mi) (get_tty_driver(mk_kdev(ma,mi)) == NULL)
                                                      ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!get_tty_driver"
#81: FILE: fs/char_dev.c:27:
+#define need_serial(ma,mi) (get_tty_driver(mk_kdev(ma,mi)) == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#92: FILE: fs/char_dev.c:134:
+	const char * name;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#93: FILE: fs/char_dev.c:135:
+	struct file_operations * fops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#93: FILE: fs/char_dev.c:135:
+	struct file_operations * fops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:BRACES: braces {} are not necessary for single statement blocks
#107: FILE: fs/char_dev.c:149:
+		if (chrdevs[i].fops) {
+			len += sprintf(page+len, "%3d %s\n", i, chrdevs[i].name);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#108: FILE: fs/char_dev.c:150:
+			len += sprintf(page+len, "%3d %s\n", i, chrdevs[i].name);
 			                   ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#116: FILE: fs/char_dev.c:158:
+/*
+	Return the function table of a device.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#120: FILE: fs/char_dev.c:162:
+static struct file_operations * get_chrfops(unsigned int major, unsigned int minor)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#120: FILE: fs/char_dev.c:162:
+static struct file_operations * get_chrfops(unsigned int major, unsigned int minor)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#122: FILE: fs/char_dev.c:164:
+	struct file_operations *ret = NULL;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#133: FILE: fs/char_dev.c:175:
+		if (need_serial(major,minor)) {
 		                     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#142: FILE: fs/char_dev.c:184:
+		char name[20];
+		sprintf(name, "char-major-%d", major);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#153: FILE: fs/char_dev.c:195:
+int register_chrdev(unsigned int major, const char * name, struct file_operations *fops)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#159: FILE: fs/char_dev.c:201:
+		for (major = MAX_CHRDEV-1; major > 0; major--) {
 		                       ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!chrdevs[major].fops"
#160: FILE: fs/char_dev.c:202:
+			if (chrdevs[major].fops == NULL) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#183: FILE: fs/char_dev.c:225:
+int unregister_chrdev(unsigned int major, const char * name)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#203: FILE: fs/char_dev.c:245:
+int chrdev_open(struct inode * inode, struct file * filp)
                                                     ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#203: FILE: fs/char_dev.c:245:
+int chrdev_open(struct inode * inode, struct file * filp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#203: FILE: fs/char_dev.c:245:
+int chrdev_open(struct inode * inode, struct file * filp)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "filp->f_op->open"
#210: FILE: fs/char_dev.c:252:
+		if (filp->f_op->open != NULL) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#212: FILE: fs/char_dev.c:254:
+			ret = filp->f_op->open(inode,filp);
 			                             ^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#212: FILE: fs/char_dev.c:254:
+			ret = filp->f_op->open(inode,filp);
 			                            ^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#224: FILE: fs/char_dev.c:266:
+struct file_operations def_chr_fops = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#228: FILE: fs/char_dev.c:270:
+const char * cdevname(kdev_t dev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#231: FILE: fs/char_dev.c:273:
+	const char * name = chrdevs[major(dev)].name;

CHECK:BRACES: braces {} should be used on all arms of this statement
#475: FILE: fs/inode.c:1277:
+	if (S_ISCHR(mode)) {
[...]
+	} else if (S_ISBLK(mode)) {
[...]
+	} else if (S_ISFIFO(mode))
[...]
+	else if (S_ISSOCK(mode))
[...]
+	else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#487: FILE: fs/inode.c:1289:
+		printk(KERN_DEBUG "init_special_inode: bogus i_mode (%o)\n", mode);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'init_special_inode', this function's name, in a string
#487: FILE: fs/inode.c:1289:
+		printk(KERN_DEBUG "init_special_inode: bogus i_mode (%o)\n", mode);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#501: FILE: fs/libfs.c:331:
+const char * kdevname(kdev_t dev)

WARNING:LINE_SPACING: Missing a blank line after declarations
#504: FILE: fs/libfs.c:334:
+	static char buffer[32];
+	sprintf(buffer, "%02x:%02x", major(dev), minor(dev));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#515: FILE: fs/proc/proc_misc.c:60:
+extern int get_chrdev_list(char *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#515: FILE: fs/proc/proc_misc.c:60:
+extern int get_chrdev_list(char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#516: FILE: fs/proc/proc_misc.c:61:
+extern int get_blkdev_list(char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#516: FILE: fs/proc/proc_misc.c:61:
+extern int get_blkdev_list(char *);

WARNING:LINE_SPACING: Missing a blank line after declarations
#526: FILE: fs/proc/proc_misc.c:381:
+	int len = get_chrdev_list(page);
+	len += get_blkdev_list(page+len);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#526: FILE: fs/proc/proc_misc.c:381:
+	len += get_blkdev_list(page+len);
 	                           ^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#537: FILE: include/linux/fs.h:1092:
+extern struct file_operations def_chr_fops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#538: FILE: include/linux/fs.h:1093:
+extern struct file_operations bad_sock_fops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#549: FILE: net/socket.c:494:
+struct file_operations bad_sock_fops = {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000411891.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 20 warnings, 9 checks, 252 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000411891.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
