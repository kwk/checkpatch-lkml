WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#55: 
--- 2.6.18-rc4-macro/./arch/i386/Kconfig	2006-08-06 13:20:11.000000000 -0500

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#61: FILE: ./arch/i386/Kconfig:542:
+config PTSHARE
+	bool "Share page tables"
+	default y
+	help
+	  Turn on sharing of page tables between processes for large shared
+	  memory regions.
+
 # Common NUMA Features

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#77: FILE: ./arch/s390/Kconfig:222:
+config PTSHARE
+	bool "Share page tables"
+	default y
+	help
+	  Turn on sharing of page tables between processes for large shared
+	  memory regions.
+
 comment "I/O subsystem configuration"
 

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#93: FILE: ./arch/x86_64/Kconfig:324:
+config PTSHARE
+	bool "Share page tables"
+	default y
+	help
+	  Turn on sharing of page tables between processes for large shared
+	  memory regions.
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#142: FILE: ./fs/proc/task_mmu.c:58:
+		(PTRS_PER_PTE*sizeof(pte_t)*mm->nr_shpte) >> 10,
 		             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#142: FILE: ./fs/proc/task_mmu.c:58:
+		(PTRS_PER_PTE*sizeof(pte_t)*mm->nr_shpte) >> 10,
 		                           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#220: FILE: ./include/linux/mm.h:836:
+#define __pt_lockptr(page)	&((page)->ptl)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#227: FILE: ./include/linux/mm.h:841:
+#define pte_lockptr(mm, pmd)	({(void)(mm); __pt_lockptr(pmd_page(*(pmd)));})
                             	                                            ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#278: FILE: ./include/linux/ptshare.h:1:
+#ifndef _LINUX_PTSHARE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#293: FILE: ./include/linux/ptshare.h:16:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#294: FILE: ./include/linux/ptshare.h:17:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#327: FILE: ./include/linux/ptshare.h:50:
+extern pte_t *pt_share_pte(struct vm_area_struct *vma, pmd_t *pmd, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#327: FILE: ./include/linux/ptshare.h:50:
+extern pte_t *pt_share_pte(struct vm_area_struct *vma, pmd_t *pmd, 

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#330: FILE: ./include/linux/ptshare.h:53:
+extern void pt_unshare_range(struct mm_struct *mm, unsigned long address,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#333: FILE: ./include/linux/ptshare.h:56:
+extern int pt_check_unshare_pte(struct mm_struct *mm, unsigned long address,

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'vma' may be better as '(vma)' to avoid precedence issues
#341: FILE: ./include/linux/ptshare.h:64:
+#define	pt_share_pte(vma, pmd, address)	pte_alloc_map(vma->vm_mm, pmd, address)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#499: FILE: ./mm/mprotect.c:150:
+			if (security_vm_enough_memory(charged)) {
 				return -ENOMEM;
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#510: FILE: ./mm/mprotect.c:189:
+ ^Inewprot = protection_map[newflags & mask];$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#510: FILE: ./mm/mprotect.c:189:
+ ^Inewprot = protection_map[newflags & mask];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#510: FILE: ./mm/mprotect.c:189:
+ ^Inewprot = protection_map[newflags & mask];$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#624: FILE: ./mm/ptshare.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#636: FILE: ./mm/ptshare.c:13:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#637: FILE: ./mm/ptshare.c:14:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#650: FILE: ./mm/ptshare.c:27:
+#include <asm/pgtable.h>

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#653: FILE: ./mm/ptshare.c:30:
+#define VM_PGEND(vma)	(((vma->vm_end - vma->vm_start) >> PAGE_SHIFT) -1)
                      	                                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vma' - possible side-effects?
#653: FILE: ./mm/ptshare.c:30:
+#define VM_PGEND(vma)	(((vma->vm_end - vma->vm_start) >> PAGE_SHIFT) -1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'vma' may be better as '(vma)' to avoid precedence issues
#653: FILE: ./mm/ptshare.c:30:
+#define VM_PGEND(vma)	(((vma->vm_end - vma->vm_start) >> PAGE_SHIFT) -1)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#655: FILE: ./mm/ptshare.c:32:
+#define	VMFLAG_COMPARE	(VM_READ|VM_WRITE|VM_EXEC|VM_SHARED)
        	              	        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#655: FILE: ./mm/ptshare.c:32:
+#define	VMFLAG_COMPARE	(VM_READ|VM_WRITE|VM_EXEC|VM_SHARED)
        	              	                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#655: FILE: ./mm/ptshare.c:32:
+#define	VMFLAG_COMPARE	(VM_READ|VM_WRITE|VM_EXEC|VM_SHARED)
        	              	                         ^

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#663: FILE: ./mm/ptshare.c:40:
+	spinlock_t *ptl;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#671: FILE: ./mm/ptshare.c:48:
+			printk(KERN_DEBUG "Force unshare pte for %s[%d] at address 0x%lx\n",

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#691: FILE: ./mm/ptshare.c:68:
+	if (!pud_present(*pud))
+	    return;

WARNING:TABSTOP: Statements should start on a tabstop
#692: FILE: ./mm/ptshare.c:69:
+	    return;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#709: FILE: ./mm/ptshare.c:86:
+	if (!pgd_present(*pgd))
+	    return;

WARNING:TABSTOP: Statements should start on a tabstop
#710: FILE: ./mm/ptshare.c:87:
+	    return;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#754: FILE: ./mm/ptshare.c:131:
+	if (vma->vm_flags & (VM_NONLINEAR|VM_PFNMAP|VM_INSERTPAGE|VM_HUGETLB))
 	                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#754: FILE: ./mm/ptshare.c:131:
+	if (vma->vm_flags & (VM_NONLINEAR|VM_PFNMAP|VM_INSERTPAGE|VM_HUGETLB))
 	                                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#754: FILE: ./mm/ptshare.c:131:
+	if (vma->vm_flags & (VM_NONLINEAR|VM_PFNMAP|VM_INSERTPAGE|VM_HUGETLB))
 	                                                         ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_start <= base'
#777: FILE: ./mm/ptshare.c:154:
+	if ((vma->vm_start <= base) &&
+	    (vma->vm_end > end))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_end > end'
#777: FILE: ./mm/ptshare.c:154:
+	if ((vma->vm_start <= base) &&
+	    (vma->vm_end > end))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#786: FILE: ./mm/ptshare.c:163:
+		if (vma->vm_flags & (VM_READ|VM_WRITE|VM_EXEC))
 		                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#786: FILE: ./mm/ptshare.c:163:
+		if (vma->vm_flags & (VM_READ|VM_WRITE|VM_EXEC))
 		                                     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#791: FILE: ./mm/ptshare.c:168:
+		BUG_ON(find_vma_prev(vma->vm_mm, vma->vm_start, &prev) != vma);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#796: FILE: ./mm/ptshare.c:173:
+		if (prev->vm_flags & (VM_READ|VM_WRITE|VM_EXEC))
 		                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#796: FILE: ./mm/ptshare.c:173:
+		if (prev->vm_flags & (VM_READ|VM_WRITE|VM_EXEC))
 		                                      ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#817: FILE: ./mm/ptshare.c:194:
+		if ((vma->vm_flags&VMFLAG_COMPARE) != (svma->vm_flags&VMFLAG_COMPARE))
 		                  ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#817: FILE: ./mm/ptshare.c:194:
+		if ((vma->vm_flags&VMFLAG_COMPARE) != (svma->vm_flags&VMFLAG_COMPARE))
 		                                                     ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_start != svma->vm_start'
#820: FILE: ./mm/ptshare.c:197:
+		if ((vma->vm_start != svma->vm_start) ||
+		    (vma->vm_end != svma->vm_end) ||
+		    (vma->vm_pgoff != svma->vm_pgoff))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_end != svma->vm_end'
#820: FILE: ./mm/ptshare.c:197:
+		if ((vma->vm_start != svma->vm_start) ||
+		    (vma->vm_end != svma->vm_end) ||
+		    (vma->vm_pgoff != svma->vm_pgoff))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_pgoff != svma->vm_pgoff'
#820: FILE: ./mm/ptshare.c:197:
+		if ((vma->vm_start != svma->vm_start) ||
+		    (vma->vm_end != svma->vm_end) ||
+		    (vma->vm_pgoff != svma->vm_pgoff))

WARNING:INDENTED_LABEL: labels should not be indented
#827: FILE: ./mm/ptshare.c:204:
+	    next:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#852: FILE: ./mm/ptshare.c:229:
+		printk(KERN_DEBUG "Looking for shareable pte page at address 0x%lx\n",

WARNING:INDENTED_LABEL: labels should not be indented
#881: FILE: ./mm/ptshare.c:258:
+		    next:

CHECK:BRACES: braces {} should be used on all arms of this statement
#902: FILE: ./mm/ptshare.c:279:
+		if (pmd_none(*pmd)) {
[...]
+		} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#904: FILE: ./mm/ptshare.c:281:
+			printk(KERN_DEBUG "Sharing pte for %s[%d] at address 0x%lx\n",

CHECK:BRACES: Unbalanced braces around else statement
#912: FILE: ./mm/ptshare.c:289:
+		} else

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#933: FILE: ./mm/ptshare.c:310:
+	spinlock_t *ptl;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#942: FILE: ./mm/ptshare.c:319:
+		printk(KERN_DEBUG "Unshare pte for %s[%d] at address 0x%lx\n",

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000047479.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 21 warnings, 30 checks, 813 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000047479.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
