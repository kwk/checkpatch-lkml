WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#54: 
Stack: 00000001 00000004 40156154 00000004 c0112a40 ceea0000 400168e4 bffffb44

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#166: FILE: arch/i386/kernel/traps.c:144:
+			printk("[<%08lx>] ", addr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#170: FILE: arch/i386/kernel/traps.c:148:
+					printk("\n   ");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#232: FILE: arch/i386/vmlinux.lds.S:82:
+  __bss_stop = .; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#244: FILE: include/linux/kallsyms.h:1:
+/* kallsyms headers

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#245: FILE: include/linux/kallsyms.h:2:
+/* kallsyms headers
+   Copyright 2000 Keith Owens <kaos@ocs.com.au>

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#266: FILE: include/linux/kallsyms.h:23:
+   along with this program; if not, write to the Free Software Foundation,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#267: FILE: include/linux/kallsyms.h:24:
+   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#270: FILE: include/linux/kallsyms.h:27:
+#ident "$Id: linux-2.4.9-kallsyms.patch,v 1.8 2002/02/11 18:34:53 arjanv Exp $"

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

CHECK:CAMELCASE: Avoid CamelCase: <ElfW>
#293: FILE: include/linux/kallsyms.h:50:
+#ifndef ElfW

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_ ## x>
#295: FILE: include/linux/kallsyms.h:52:
+#  define ElfW(x)  Elf32_ ## x

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_ ## x>
#298: FILE: include/linux/kallsyms.h:55:
+#  define ElfW(x)  Elf64_ ## x

ERROR:TRAILING_WHITESPACE: trailing whitespace
#310: FILE: include/linux/kallsyms.h:67:
+ */  $

WARNING:LINE_SPACING: Missing a blank line after declarations
#314: FILE: include/linux/kallsyms.h:71:
+	int		size;		/* Size of this header */
+	ElfW(Word)	total_size;	/* Total size of kallsyms data */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Word>
#314: FILE: include/linux/kallsyms.h:71:
+	ElfW(Word)	total_size;	/* Total size of kallsyms data */

WARNING:LINE_SPACING: Missing a blank line after declarations
#316: FILE: include/linux/kallsyms.h:73:
+	int		sections;	/* Number of section entries */
+	ElfW(Off)	section_off;	/* Offset to first section entry */

CHECK:CAMELCASE: Avoid CamelCase: <Off>
#316: FILE: include/linux/kallsyms.h:73:
+	ElfW(Off)	section_off;	/* Offset to first section entry */

WARNING:LINE_SPACING: Missing a blank line after declarations
#319: FILE: include/linux/kallsyms.h:76:
+	int		symbols;	/* Number of symbol entries */
+	ElfW(Off)	symbol_off;	/* Offset to first symbol entry */

WARNING:LINE_SPACING: Missing a blank line after declarations
#321: FILE: include/linux/kallsyms.h:78:
+	int		symbol_size;	/* Size of one symbol entry */
+	ElfW(Off)	string_off;	/* Offset to first string */

CHECK:CAMELCASE: Avoid CamelCase: <Addr>
#322: FILE: include/linux/kallsyms.h:79:
+	ElfW(Addr)	start;		/* Start address of first section */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#342: FILE: include/linux/kallsyms.h:99:
+#define kallsyms_next_sec(h,s) \
                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#342: FILE: include/linux/kallsyms.h:99:
+#define kallsyms_next_sec(h,s) \
+	((s) = (struct kallsyms_section *)((char *)(s) + (h)->section_size))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#344: FILE: include/linux/kallsyms.h:101:
+#define kallsyms_next_sym(h,s) \
                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#344: FILE: include/linux/kallsyms.h:101:
+#define kallsyms_next_sym(h,s) \
+	((s) = (struct kallsyms_symbol *)((char *)(s) + (h)->symbol_size))

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#349: FILE: include/linux/kallsyms.h:106:
+int kallsyms_symbol_to_address(

WARNING:LINE_SPACING: Missing a blank line after declarations
#360: FILE: include/linux/kallsyms.h:117:
+	unsigned long    *sym_start,		/* Set to start address of symbol */
+	unsigned long    *sym_end		/* Set to end address of symbol */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#363: FILE: include/linux/kallsyms.h:120:
+int kallsyms_address_to_symbol(

WARNING:LINE_SPACING: Missing a blank line after declarations
#373: FILE: include/linux/kallsyms.h:130:
+	unsigned long    *sym_start,		/* Set to start address of symbol */
+	unsigned long    *sym_end		/* Set to end address of symbol */

ERROR:CODE_INDENT: code indent should use tabs where possible
#378: FILE: include/linux/kallsyms.h:135:
+^I^I      ^Iconst char *,^I^I/* module name */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#378: FILE: include/linux/kallsyms.h:135:
+^I^I      ^Iconst char *,^I^I/* module name */$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#388: FILE: include/linux/kallsyms.h:145:
+static inline int kallsyms_address_to_symbol(

WARNING:LINE_SPACING: Missing a blank line after declarations
#398: FILE: include/linux/kallsyms.h:155:
+	unsigned long    *sym_start,		/* Set to start address of symbol */
+	unsigned long    *sym_end		/* Set to end address of symbol */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#413: FILE: include/linux/module.h:507:
+extern void print_modules(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#426: FILE: include/linux/module.h:519:
+extern int print_symbol(const char *fmt, unsigned long address);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#496: FILE: kernel/kallsyms.c:1:
+/*

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#522: FILE: kernel/kallsyms.c:27:
+int kallsyms_symbol_to_address(

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#524: FILE: kernel/kallsyms.c:29:
+^Iunsigned long ^I *token,^I/* Which module to start at */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#526: FILE: kernel/kallsyms.c:31:
+^Iunsigned long ^I *mod_start,^I/* Set to start address of module */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#527: FILE: kernel/kallsyms.c:32:
+^Iunsigned long ^I *mod_end,^I/* Set to end address of module */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#529: FILE: kernel/kallsyms.c:34:
+^Iunsigned long ^I *sec_start,^I/* Set to start address of section */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#530: FILE: kernel/kallsyms.c:35:
+^Iunsigned long ^I *sec_end,^I/* Set to end address of section */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#532: FILE: kernel/kallsyms.c:37:
+^Iunsigned long ^I *sym_start,^I/* Set to start address of symbol */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#533: FILE: kernel/kallsyms.c:38:
+^Iunsigned long ^I *sym_end^I/* Set to end address of symbol */$

WARNING:LINE_SPACING: Missing a blank line after declarations
#533: FILE: kernel/kallsyms.c:38:
+	unsigned long 	 *sym_start,	/* Set to start address of symbol */
+	unsigned long 	 *sym_end	/* Set to end address of symbol */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#556: FILE: kernel/kallsyms.c:61:
+^I^Iif (!mod_member_present(m, kallsyms_start) || $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#563: FILE: kernel/kallsyms.c:68:
+^I^Ika_str = $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#570: FILE: kernel/kallsyms.c:75:
+			if (!(pt_R = strstr(p, "_R")))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#575: FILE: kernel/kallsyms.c:80:
+			(void)simple_strtoul(pt_R+l-8, &p2, 16);
 			                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#575: FILE: kernel/kallsyms.c:80:
+			(void)simple_strtoul(pt_R+l-8, &p2, 16);
 			                           ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#575: FILE: kernel/kallsyms.c:80:
+			(void)simple_strtoul(pt_R+l-8, &p2, 16);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#578: FILE: kernel/kallsyms.c:83:
+			if (strncmp(p, name, pt_R-p) == 0)
 			                         ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around m->name
#592: FILE: kernel/kallsyms.c:97:
+	*mod_name = *(m->name) ? m->name : "kernel";

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#600: FILE: kernel/kallsyms.c:105:
+	if (i < ka_hdr->symbols-1) {
 	                       ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#600: FILE: kernel/kallsyms.c:105:
+	if (i < ka_hdr->symbols-1) {
[...]
+	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#602: FILE: kernel/kallsyms.c:107:
+		const struct kallsyms_symbol *ka_symn = ka_sym;
+		kallsyms_next_sym(ka_hdr, ka_symn);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#605: FILE: kernel/kallsyms.c:110:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#607: FILE: kernel/kallsyms.c:112:
+	return(1);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#610: FILE: kernel/kallsyms.c:115:
+int kallsyms_address_to_symbol(

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#613: FILE: kernel/kallsyms.c:118:
+^Iunsigned long ^I *mod_start,^I/* Set to start address of module */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#614: FILE: kernel/kallsyms.c:119:
+^Iunsigned long ^I *mod_end,^I/* Set to end address of module */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#616: FILE: kernel/kallsyms.c:121:
+^Iunsigned long ^I *sec_start,^I/* Set to start address of section */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#617: FILE: kernel/kallsyms.c:122:
+^Iunsigned long ^I *sec_end,^I/* Set to end address of section */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#619: FILE: kernel/kallsyms.c:124:
+^Iunsigned long ^I *sym_start,^I/* Set to start address of symbol */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#620: FILE: kernel/kallsyms.c:125:
+^Iunsigned long ^I *sym_end^I/* Set to end address of symbol */$

WARNING:LINE_SPACING: Missing a blank line after declarations
#620: FILE: kernel/kallsyms.c:125:
+	unsigned long 	 *sym_start,	/* Set to start address of symbol */
+	unsigned long 	 *sym_end	/* Set to end address of symbol */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#632: FILE: kernel/kallsyms.c:137:
+^I  $

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#632: FILE: kernel/kallsyms.c:137:
+	for (m = module_list; m; m = m->next) {
+	  

ERROR:TRAILING_WHITESPACE: trailing whitespace
#633: FILE: kernel/kallsyms.c:138:
+^I^Iif (!mod_member_present(m, kallsyms_start) || $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#655: FILE: kernel/kallsyms.c:160:
+^Ika_str = $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#670: FILE: kernel/kallsyms.c:175:
+		if (i < ka_hdr->symbols-1) {
 		                       ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#670: FILE: kernel/kallsyms.c:175:
+		if (i < ka_hdr->symbols-1) {
[...]
+		else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#672: FILE: kernel/kallsyms.c:177:
+			const struct kallsyms_symbol *ka_symn = ka_sym;
+			kallsyms_next_sym(ka_hdr, ka_symn);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#675: FILE: kernel/kallsyms.c:180:
+		}
+		else

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#694: FILE: kernel/kallsyms.c:199:
+		      int (*callback)(void *, const char *, const char *, ElfW(Addr), ElfW(Addr), ElfW(Word)))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#703: FILE: kernel/kallsyms.c:208:
+^I^Iif (!mod_member_present(m, kallsyms_start) || $

CHECK:SPACING: No space is necessary after a cast
#708: FILE: kernel/kallsyms.c:213:
+		ka_sec = (const struct kallsyms_section *) ((char *)ka_hdr + ka_hdr->section_off);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#711: FILE: kernel/kallsyms.c:216:
+			if (callback(

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'm->name'
#711: FILE: kernel/kallsyms.c:216:
+			if (callback(
+				token,
+				*(m->name) ? m->name : "kernel",
+				ka_sec->name_off + ka_str,
+				ka_sec->start,
+				ka_sec->start + ka_sec->size,
+				ka_sec->flags))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around m->name
#713: FILE: kernel/kallsyms.c:218:
+				*(m->name) ? m->name : "kernel",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#754: FILE: kernel/module.c:1324:
+^I^I/* kallsyms doesn't have a clue; lets try our list $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#755: FILE: kernel/module.c:1325:
+		 * of exported symbols */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#788: FILE: kernel/module.c:1347:
+		snprintf(buffer,MAX_SYMBOL_SIZE - 1, "%s [%s] 0x%x",
 		               ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#792: FILE: kernel/module.c:1351:
+	printk(fmt, buffer);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000430003.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 36 warnings, 28 checks, 646 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000430003.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
