WARNING:LINE_SPACING: Missing a blank line after declarations
#151: FILE: include/linux/security.h:52:
+	void **p = head;
+	pr_debug("__get_value: %s (%d): head %lx p %lx idx %d returning %lx at %lx\n",

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__get_value', this function's name, in a string
#151: FILE: include/linux/security.h:52:
+	pr_debug("__get_value: %s (%d): head %lx p %lx idx %d returning %lx at %lx\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#152: FILE: include/linux/security.h:53:
+	pr_debug("__get_value: %s (%d): head %lx p %lx idx %d returning %lx at %lx\n",
+		__FUNCTION__, __LINE__, (long)head, (long)p, idx, (long)p[idx], (long)&p[idx]);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#152: FILE: include/linux/security.h:53:
+		__FUNCTION__, __LINE__, (long)head, (long)p, idx, (long)p[idx], (long)&p[idx]);

WARNING:LINE_SPACING: Missing a blank line after declarations
#159: FILE: include/linux/security.h:60:
+	void **p = head;
+	p[idx] = v;

WARNING:SPLIT_STRING: quoted string split across lines
#161: FILE: include/linux/security.h:62:
+	pr_debug("%s (%d): hd %lx, p %lx, idx %d,"
+		"v %lx, p[idx] %lx at %lx\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#162: FILE: include/linux/security.h:63:
+		__FUNCTION__, __LINE__, (long) (head),

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#162: FILE: include/linux/security.h:63:
+		__FUNCTION__, __LINE__, (long) (head),

CHECK:SPACING: No space is necessary after a cast
#163: FILE: include/linux/security.h:64:
+		(long) p, idx, (long) (v),

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#185: FILE: include/linux/security.h:72:
+#define security_get_value_type(head, id, type, idx) (idx < sec_shared_slot) ? \
+		(type *)__get_value((head), idx) \
+	: ({ \
+		struct security_list *v = security_get_value((head), id); \
+		v ? hlist_entry(v, type, lsm_list) : NULL; \
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#185: FILE: include/linux/security.h:72:
+#define security_get_value_type(head, id, type, idx) (idx < sec_shared_slot) ? \
+		(type *)__get_value((head), idx) \
+	: ({ \
+		struct security_list *v = security_get_value((head), id); \
+		v ? hlist_entry(v, type, lsm_list) : NULL; \
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'idx' - possible side-effects?
#185: FILE: include/linux/security.h:72:
+#define security_get_value_type(head, id, type, idx) (idx < sec_shared_slot) ? \
+		(type *)__get_value((head), idx) \
+	: ({ \
+		struct security_list *v = security_get_value((head), id); \
+		v ? hlist_entry(v, type, lsm_list) : NULL; \
+	})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'idx' may be better as '(idx)' to avoid precedence issues
#185: FILE: include/linux/security.h:72:
+#define security_get_value_type(head, id, type, idx) (idx < sec_shared_slot) ? \
+		(type *)__get_value((head), idx) \
+	: ({ \
+		struct security_list *v = security_get_value((head), id); \
+		v ? hlist_entry(v, type, lsm_list) : NULL; \
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#192: FILE: include/linux/security.h:79:
+#define security_set_value_type(head, id, value, idx) \
+	do { \
+		if (idx < sec_shared_slot) { \
+			__set_value((head), idx, (value)); \
+		} else { \
+			security_set_value((head), id, &(value)->lsm_list); \
+		} \
+	} while (0);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'value' - possible side-effects?
#192: FILE: include/linux/security.h:79:
+#define security_set_value_type(head, id, value, idx) \
+	do { \
+		if (idx < sec_shared_slot) { \
+			__set_value((head), idx, (value)); \
+		} else { \
+			security_set_value((head), id, &(value)->lsm_list); \
+		} \
+	} while (0);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'idx' - possible side-effects?
#192: FILE: include/linux/security.h:79:
+#define security_set_value_type(head, id, value, idx) \
+	do { \
+		if (idx < sec_shared_slot) { \
+			__set_value((head), idx, (value)); \
+		} else { \
+			security_set_value((head), id, &(value)->lsm_list); \
+		} \
+	} while (0);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'idx' may be better as '(idx)' to avoid precedence issues
#192: FILE: include/linux/security.h:79:
+#define security_set_value_type(head, id, value, idx) \
+	do { \
+		if (idx < sec_shared_slot) { \
+			__set_value((head), idx, (value)); \
+		} else { \
+			security_set_value((head), id, &(value)->lsm_list); \
+		} \
+	} while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#192: FILE: include/linux/security.h:79:
+#define security_set_value_type(head, id, value, idx) \
+	do { \
+		if (idx < sec_shared_slot) { \
+			__set_value((head), idx, (value)); \
+		} else { \
+			security_set_value((head), id, &(value)->lsm_list); \
+		} \
+	} while (0);

do {} while(0) macros should not have a trailing semicolon.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#201: FILE: include/linux/security.h:88:
+#define security_add_value_type(head, id, value, idx) \
+	do { \
+		if (idx < sec_shared_slot) { \
+			__set_value((head), idx, (value)); \
+		} else { \
+			security_add_value((head), id, &(value)->lsm_list); \
+		} \
+	} while (0);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'value' - possible side-effects?
#201: FILE: include/linux/security.h:88:
+#define security_add_value_type(head, id, value, idx) \
+	do { \
+		if (idx < sec_shared_slot) { \
+			__set_value((head), idx, (value)); \
+		} else { \
+			security_add_value((head), id, &(value)->lsm_list); \
+		} \
+	} while (0);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'idx' - possible side-effects?
#201: FILE: include/linux/security.h:88:
+#define security_add_value_type(head, id, value, idx) \
+	do { \
+		if (idx < sec_shared_slot) { \
+			__set_value((head), idx, (value)); \
+		} else { \
+			security_add_value((head), id, &(value)->lsm_list); \
+		} \
+	} while (0);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'idx' may be better as '(idx)' to avoid precedence issues
#201: FILE: include/linux/security.h:88:
+#define security_add_value_type(head, id, value, idx) \
+	do { \
+		if (idx < sec_shared_slot) { \
+			__set_value((head), idx, (value)); \
+		} else { \
+			security_add_value((head), id, &(value)->lsm_list); \
+		} \
+	} while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#201: FILE: include/linux/security.h:88:
+#define security_add_value_type(head, id, value, idx) \
+	do { \
+		if (idx < sec_shared_slot) { \
+			__set_value((head), idx, (value)); \
+		} else { \
+			security_add_value((head), id, &(value)->lsm_list); \
+		} \
+	} while (0);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#210: FILE: include/linux/security.h:97:
+#define security_del_value_type(head, id, type, idx) (idx < sec_shared_slot) ? \
+		(type *)__get_value((head), idx) \
+	: ( { \
+		struct security_list *v; \
+		v = security_del_value((head), id); \
+		v ? hlist_entry(v, type, lsm_list) : NULL; \
+	} )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#210: FILE: include/linux/security.h:97:
+#define security_del_value_type(head, id, type, idx) (idx < sec_shared_slot) ? \
+		(type *)__get_value((head), idx) \
+	: ( { \
+		struct security_list *v; \
+		v = security_del_value((head), id); \
+		v ? hlist_entry(v, type, lsm_list) : NULL; \
+	} )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'idx' - possible side-effects?
#210: FILE: include/linux/security.h:97:
+#define security_del_value_type(head, id, type, idx) (idx < sec_shared_slot) ? \
+		(type *)__get_value((head), idx) \
+	: ( { \
+		struct security_list *v; \
+		v = security_del_value((head), id); \
+		v ? hlist_entry(v, type, lsm_list) : NULL; \
+	} )

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'idx' may be better as '(idx)' to avoid precedence issues
#210: FILE: include/linux/security.h:97:
+#define security_del_value_type(head, id, type, idx) (idx < sec_shared_slot) ? \
+		(type *)__get_value((head), idx) \
+	: ( { \
+		struct security_list *v; \
+		v = security_del_value((head), id); \
+		v ? hlist_entry(v, type, lsm_list) : NULL; \
+	} )

ERROR:SPACING: space prohibited after that open parenthesis '('
#212: FILE: include/linux/security.h:99:
+	: ( { \

ERROR:SPACING: space prohibited before that close parenthesis ')'
#216: FILE: include/linux/security.h:103:
+	} )

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#225: FILE: include/linux/security.h:2064:
+extern int register_security	(struct security_operations *ops, int *idx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#225: FILE: include/linux/security.h:2064:
+extern int register_security	(struct security_operations *ops, int *idx);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#228: FILE: include/linux/security.h:2066:
+extern int mod_reg_security	(const char *name,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#228: FILE: include/linux/security.h:2066:
+extern int mod_reg_security	(const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#229: FILE: include/linux/security.h:2067:
+extern int mod_reg_security	(const char *name,
+			struct security_operations *ops, int *idx);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#268: FILE: fs/inode.c:136:
+		memset(&inode->i_security, 0, (sec_shared_slot)*sizeof(void *));
 		                                               ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around inode->i_security[sec_shared_slot]
#269: FILE: fs/inode.c:137:
+		INIT_HLIST_HEAD((struct hlist_head *)&(inode->i_security[sec_shared_slot]));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#282: FILE: include/linux/binfmts.h:32:
+	void * security[CONFIG_SECURITY_STACKER_NUMFIELDS];

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#304: FILE: include/linux/fs.h:562:
+	void * security[CONFIG_SECURITY_STACKER_NUMFIELDS];

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#313: FILE: include/linux/fs.h:599:
+^Ivoid ^I^I^I*f_security[CONFIG_SECURITY_STACKER_NUMFIELDS];$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#348: FILE: include/linux/msg.h:73:
+	void * security[CONFIG_SECURITY_STACKER_NUMFIELDS];

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#387: FILE: ipc/msg.c:102:
+	memset(&msq->q_perm.security, 0, (sec_shared_slot)*sizeof(void *));
 	                                                  ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around msq->q_perm.security[sec_shared_slot]
#388: FILE: ipc/msg.c:103:
+	INIT_HLIST_HEAD((struct hlist_head *)&(msq->q_perm.security[sec_shared_slot]));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#401: FILE: ipc/msgutil.c:44:
+	memset(&msg->security, 0, (sec_shared_slot)*sizeof(void *));
 	                                           ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around msg->security[sec_shared_slot]
#402: FILE: ipc/msgutil.c:45:
+	INIT_HLIST_HEAD((struct hlist_head *)&(msg->security[sec_shared_slot]));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#415: FILE: ipc/sem.c:181:
+	memset(&sma->sem_perm.security, 0, (sec_shared_slot)*sizeof(void *));
 	                                                    ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around sma->sem_perm.security[sec_shared_slot]
#416: FILE: ipc/sem.c:182:
+	INIT_HLIST_HEAD((struct hlist_head *)&(sma->sem_perm.security[sec_shared_slot]));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#429: FILE: ipc/shm.c:202:
+	memset(&shp->shm_perm.security, 0, (sec_shared_slot)*sizeof(void *));
 	                                                    ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around shp->shm_perm.security[sec_shared_slot]
#430: FILE: ipc/shm.c:203:
+	INIT_HLIST_HEAD((struct hlist_head *)&(shp->shm_perm.security[sec_shared_slot]));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#443: FILE: kernel/fork.c:944:
+	memset(&p->security, 0, (sec_shared_slot)*sizeof(void *));
 	                                         ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around p->security[sec_shared_slot]
#444: FILE: kernel/fork.c:945:
+	INIT_HLIST_HEAD((struct hlist_head *)&(p->security[sec_shared_slot]));

CHECK:SPACING: No space is necessary after a cast
#471: FILE: security/security.c:37:
+	head = (struct hlist_head *) &(sec[sec_shared_slot]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around sec[sec_shared_slot]
#471: FILE: security/security.c:37:
+	head = (struct hlist_head *) &(sec[sec_shared_slot]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#482: FILE: security/security.c:60:
+security_set_value(void **sec, int security_id,
 	struct security_list *obj_node)

CHECK:SPACING: No space is necessary after a cast
#486: FILE: security/security.c:64:
+	head = (struct hlist_head *) &(sec[sec_shared_slot]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around sec[sec_shared_slot]
#486: FILE: security/security.c:64:
+	head = (struct hlist_head *) &(sec[sec_shared_slot]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#502: FILE: security/security.c:79:
+security_add_value(void **sec, int security_id,
 	struct security_list *obj_node)

CHECK:SPACING: No space is necessary after a cast
#506: FILE: security/security.c:83:
+	head = (struct hlist_head *) &(sec[sec_shared_slot]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around sec[sec_shared_slot]
#506: FILE: security/security.c:83:
+	head = (struct hlist_head *) &(sec[sec_shared_slot]);

CHECK:SPACING: No space is necessary after a cast
#550: FILE: security/security.c:159:
+	head = (struct hlist_head *) &(sec[sec_shared_slot]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around sec[sec_shared_slot]
#550: FILE: security/security.c:159:
+	head = (struct hlist_head *) &(sec[sec_shared_slot]);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#579: FILE: security/security.c:265:
+		for (i=0; i<sec_shared_slot; i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#579: FILE: security/security.c:265:
+		for (i=0; i<sec_shared_slot; i++) {
 		           ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!security_field_owners[i]"
#580: FILE: security/security.c:266:
+			if (security_field_owners[i] == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#607: FILE: security/security.c:306:
+	for (i=0; i<sec_shared_slot; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#607: FILE: security/security.c:306:
+	for (i=0; i<sec_shared_slot; i++) {
 	           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#624: FILE: security/security.c:330:
+int mod_reg_security(const char *name, struct security_operations *ops,
+			int *idx)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#645: FILE: security/security.c:355:
+		for (i=0; i<sec_shared_slot; i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#645: FILE: security/security.c:355:
+		for (i=0; i<sec_shared_slot; i++) {
 		           ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!security_field_owners[i]"
#646: FILE: security/security.c:356:
+			if (security_field_owners[i] == NULL) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#674: FILE: security/security.c:394:
+	for (i=0; i<sec_shared_slot; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#674: FILE: security/security.c:394:
+	for (i=0; i<sec_shared_slot; i++) {
 	           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#704: FILE: security/selinux/hooks.c:129:
+	security_set_value_type(task->security, SELINUX_LSM_ID, tsec,
+		selinux_secidx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#715: FILE: security/selinux/hooks.c:139:
+	tsec = security_del_value_type(task->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#727: FILE: security/selinux/hooks.c:151:
+	tsec = security_get_value_type(current->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#738: FILE: security/selinux/hooks.c:168:
+	security_set_value_type(inode->i_security, SELINUX_LSM_ID, isec,
+		selinux_secidx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#749: FILE: security/selinux/hooks.c:179:
+	isec = security_del_value_type(inode->i_security, SELINUX_LSM_ID,
+		struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#757: FILE: security/selinux/hooks.c:185:
+	sbsec = security_get_value_type(inode->i_sb->s_security,
+		SELINUX_LSM_ID, struct superblock_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#769: FILE: security/selinux/hooks.c:202:
+	tsec = security_get_value_type(current->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#780: FILE: security/selinux/hooks.c:218:
+	security_set_value_type(file->f_security, SELINUX_LSM_ID, fsec,
+		selinux_secidx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#791: FILE: security/selinux/hooks.c:228:
+	fsec = security_del_value_type(file->f_security, SELINUX_LSM_ID,
+		struct file_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#802: FILE: security/selinux/hooks.c:251:
+	security_set_value_type(sb->s_security, SELINUX_LSM_ID, sbsec,
+		selinux_secidx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#813: FILE: security/selinux/hooks.c:261:
+	sbsec = security_del_value_type(sb->s_security, SELINUX_LSM_ID,
+		struct superblock_security_struct, selinux_secidx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#823: FILE: security/selinux/hooks.c:289:
+	security_set_value_type(sk->sk_security, SELINUX_LSM_ID, ssec,
+		selinux_secidx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#834: FILE: security/selinux/hooks.c:302:
+	ssec = security_del_value_type(sk->sk_security, SELINUX_LSM_ID,
+		struct sk_security_struct, selinux_secidx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#847: FILE: security/selinux/hooks.c:354:
+	tsec = security_get_value_type(current->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#850: FILE: security/selinux/hooks.c:357:
+	sbsec = security_get_value_type(sb->s_security, SELINUX_LSM_ID,
+		struct superblock_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#862: FILE: security/selinux/hooks.c:530:
+	sbsec = security_get_value_type(sb->s_security, SELINUX_LSM_ID,
+		struct superblock_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#874: FILE: security/selinux/hooks.c:767:
+	isec = security_get_value_type(inode->i_security, SELINUX_LSM_ID,
+		struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#886: FILE: security/selinux/hooks.c:779:
+	sbsec = security_get_value_type(inode->i_sb->s_security,
+		SELINUX_LSM_ID, struct superblock_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#900: FILE: security/selinux/hooks.c:956:
+	tsec1 = security_get_value_type(tsk1->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#903: FILE: security/selinux/hooks.c:959:
+	tsec2 = security_get_value_type(tsk2->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#915: FILE: security/selinux/hooks.c:973:
+	tsec = security_get_value_type(tsk->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#927: FILE: security/selinux/hooks.c:991:
+	tsec = security_get_value_type(tsk->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#941: FILE: security/selinux/hooks.c:1011:
+	tsec = security_get_value_type(tsk->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#944: FILE: security/selinux/hooks.c:1014:
+	isec = security_get_value_type(inode->i_security, SELINUX_LSM_ID,
+		struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#958: FILE: security/selinux/hooks.c:1063:
+	tsec = security_get_value_type(tsk->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#961: FILE: security/selinux/hooks.c:1066:
+	fsec = security_get_value_type(file->f_security, SELINUX_LSM_ID,
+		struct file_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#977: FILE: security/selinux/hooks.c:1102:
+	tsec = security_get_value_type(current->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#980: FILE: security/selinux/hooks.c:1105:
+	dsec = security_get_value_type(dir->i_security, SELINUX_LSM_ID,
+		struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#983: FILE: security/selinux/hooks.c:1108:
+	sbsec = security_get_value_type(dir->i_sb->s_security, SELINUX_LSM_ID,
+		struct superblock_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#999: FILE: security/selinux/hooks.c:1155:
+	tsec = security_get_value_type(current->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1002: FILE: security/selinux/hooks.c:1158:
+	dsec = security_get_value_type(dir->i_security, SELINUX_LSM_ID,
+		struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1005: FILE: security/selinux/hooks.c:1161:
+	isec = security_get_value_type(dentry->d_inode->i_security,
+		SELINUX_LSM_ID, struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1021: FILE: security/selinux/hooks.c:1205:
+	tsec = security_get_value_type(current->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1024: FILE: security/selinux/hooks.c:1208:
+	old_dsec = security_get_value_type(old_dir->i_security, SELINUX_LSM_ID,
+		struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1027: FILE: security/selinux/hooks.c:1211:
+	old_isec = security_get_value_type(old_dentry->d_inode->i_security,
+		SELINUX_LSM_ID, struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1033: FILE: security/selinux/hooks.c:1215:
+	new_dsec = security_get_value_type(new_dir->i_security, SELINUX_LSM_ID,
+		struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1045: FILE: security/selinux/hooks.c:1245:
+		new_isec = security_get_value_type(new_dentry->d_inode->i_security,
+			SELINUX_LSM_ID, struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1059: FILE: security/selinux/hooks.c:1268:
+	tsec = security_get_value_type(tsk->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1062: FILE: security/selinux/hooks.c:1271:
+	sbsec = security_get_value_type(sb->s_security, SELINUX_LSM_ID,
+		struct superblock_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1076: FILE: security/selinux/hooks.c:1329:
+	isec = security_get_value_type(inode->i_security, SELINUX_LSM_ID,
+		struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1079: FILE: security/selinux/hooks.c:1332:
+	sbsec = security_get_value_type(inode->i_sb->s_security,
+		SELINUX_LSM_ID, struct superblock_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1095: FILE: security/selinux/hooks.c:1363:
+	tsec = security_get_value_type(current->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1098: FILE: security/selinux/hooks.c:1366:
+	dsec = security_get_value_type(dir->i_security, SELINUX_LSM_ID,
+		struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1101: FILE: security/selinux/hooks.c:1369:
+	sbsec = security_get_value_type(dir->i_sb->s_security, SELINUX_LSM_ID,
+		struct superblock_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1115: FILE: security/selinux/hooks.c:1442:
+	psec = security_get_value_type(parent->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1118: FILE: security/selinux/hooks.c:1445:
+	csec = security_get_value_type(child->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1130: FILE: security/selinux/hooks.c:1481:
+	tsec = security_get_value_type(current->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1141: FILE: security/selinux/hooks.c:1588:
+	security_set_value_type(bprm->security, SELINUX_LSM_ID, bsec,
+		selinux_secidx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1152: FILE: security/selinux/hooks.c:1603:
+	bsec = security_get_value_type(bprm->security, SELINUX_LSM_ID,
+		struct bprm_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1163: FILE: security/selinux/hooks.c:1610:
+	tsec = security_get_value_type(current->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1166: FILE: security/selinux/hooks.c:1613:
+	isec = security_get_value_type(inode->i_security, SELINUX_LSM_ID,
+		struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1178: FILE: security/selinux/hooks.c:1675:
+	tsec = security_get_value_type(current->security, SELINUX_LSM_ID,
+		struct task_security_struct,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1189: FILE: security/selinux/hooks.c:1693:
+ ^Ibsec = security_del_value_type(bprm->security, SELINUX_LSM_ID,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1189: FILE: security/selinux/hooks.c:1693:
+ ^Ibsec = security_del_value_type(bprm->security, SELINUX_LSM_ID,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1189: FILE: security/selinux/hooks.c:1693:
+ ^Ibsec = security_del_value_type(bprm->security, SELINUX_LSM_ID,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1190: FILE: security/selinux/hooks.c:1694:
+ ^I^I^Istruct bprm_security_struct, selinux_secidx);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1190: FILE: security/selinux/hooks.c:1694:
+ ^I^I^Istruct bprm_security_struct, selinux_secidx);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1190: FILE: security/selinux/hooks.c:1694:
+ 	bsec = security_del_value_type(bprm->security, SELINUX_LSM_ID,
+ 			struct bprm_security_struct, selinux_secidx);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1190: FILE: security/selinux/hooks.c:1694:
+ ^I^I^Istruct bprm_security_struct, selinux_secidx);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1203: FILE: security/selinux/hooks.c:1791:
+	tsec = security_get_value_type(current->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1206: FILE: security/selinux/hooks.c:1794:
+	bsec = security_get_value_type(bprm->security, SELINUX_LSM_ID,
+		struct bprm_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1220: FILE: security/selinux/hooks.c:1839:
+	tsec = security_get_value_type(current->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1223: FILE: security/selinux/hooks.c:1842:
+	bsec = security_get_value_type(bprm->security, SELINUX_LSM_ID,
+		struct bprm_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1235: FILE: security/selinux/hooks.c:2181:
+	sbsec = security_get_value_type(inode->i_sb->s_security,
+		SELINUX_LSM_ID, struct superblock_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1249: FILE: security/selinux/hooks.c:2193:
+	tsec = security_get_value_type(current->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1252: FILE: security/selinux/hooks.c:2196:
+	isec = security_get_value_type(inode->i_security, SELINUX_LSM_ID,
+		struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1264: FILE: security/selinux/hooks.c:2233:
+	isec = security_get_value_type(inode->i_security, SELINUX_LSM_ID,
+		struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1276: FILE: security/selinux/hooks.c:2258:
+	sbsec = security_get_value_type(inode->i_sb->s_security,
+		SELINUX_LSM_ID, struct superblock_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1288: FILE: security/selinux/hooks.c:2307:
+	isec = security_get_value_type(inode->i_security, SELINUX_LSM_ID,
+		struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1300: FILE: security/selinux/hooks.c:2338:
+	isec = security_get_value_type(inode->i_security, SELINUX_LSM_ID,
+		struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1314: FILE: security/selinux/hooks.c:2578:
+	tsec = security_get_value_type(current->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1317: FILE: security/selinux/hooks.c:2581:
+	fsec = security_get_value_type(file->f_security, SELINUX_LSM_ID,
+		struct file_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1331: FILE: security/selinux/hooks.c:2600:
+	tsec = security_get_value_type(tsk->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1334: FILE: security/selinux/hooks.c:2603:
+	fsec = security_get_value_type(file->f_security, SELINUX_LSM_ID,
+		struct file_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1346: FILE: security/selinux/hooks.c:2633:
+	tsec1 = security_get_value_type(current->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1355: FILE: security/selinux/hooks.c:2640:
+	tsec2 = security_get_value_type(tsk->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1367: FILE: security/selinux/hooks.c:2771:
+	tsec = security_get_value_type(p->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1381: FILE: security/selinux/hooks.c:2785:
+	tsec = security_get_value_type(p->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1384: FILE: security/selinux/hooks.c:2788:
+	isec = security_get_value_type(inode->i_security, SELINUX_LSM_ID,
+		struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1398: FILE: security/selinux/hooks.c:2958:
+	tsec = security_get_value_type(task->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1401: FILE: security/selinux/hooks.c:2961:
+	isec = security_get_value_type(SOCK_INODE(sock)->i_security,
+		SELINUX_LSM_ID, struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1413: FILE: security/selinux/hooks.c:2985:
+	tsec = security_get_value_type(current->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1428: FILE: security/selinux/hooks.c:3002:
+	isec = security_get_value_type(SOCK_INODE(sock)->i_security,
+		SELINUX_LSM_ID, struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1432: FILE: security/selinux/hooks.c:3006:
+	tsec = security_get_value_type(current->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1446: FILE: security/selinux/hooks.c:3046:
+		tsec = security_get_value_type(current->security,
+			SELINUX_LSM_ID, struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1449: FILE: security/selinux/hooks.c:3049:
+		isec = security_get_value_type(SOCK_INODE(sock)->i_security,
+			SELINUX_LSM_ID, struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1461: FILE: security/selinux/hooks.c:3129:
+	isec = security_get_value_type(SOCK_INODE(sock)->i_security,
+		SELINUX_LSM_ID, struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1476: FILE: security/selinux/hooks.c:3185:
+	newisec = security_get_value_type(SOCK_INODE(newsock)->i_security,
+		SELINUX_LSM_ID, struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1480: FILE: security/selinux/hooks.c:3189:
+	isec = security_get_value_type(SOCK_INODE(sock)->i_security,
+		SELINUX_LSM_ID, struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1494: FILE: security/selinux/hooks.c:3247:
+	isec = security_get_value_type(SOCK_INODE(sock)->i_security,
+		SELINUX_LSM_ID, struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1497: FILE: security/selinux/hooks.c:3250:
+	other_isec = security_get_value_type(SOCK_INODE(other)->i_security,
+		SELINUX_LSM_ID, struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1509: FILE: security/selinux/hooks.c:3264:
+	ssec = security_get_value_type(sock->sk->sk_security, SELINUX_LSM_ID,
+		struct sk_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1517: FILE: security/selinux/hooks.c:3270:
+	ssec = security_get_value_type(newsk->sk_security, SELINUX_LSM_ID,
+		struct sk_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1531: FILE: security/selinux/hooks.c:3286:
+	isec = security_get_value_type(SOCK_INODE(sock)->i_security,
+		SELINUX_LSM_ID, struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1534: FILE: security/selinux/hooks.c:3289:
+	other_isec = security_get_value_type(SOCK_INODE(other)->i_security,
+		SELINUX_LSM_ID, struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1546: FILE: security/selinux/hooks.c:3331:
+			isec = security_get_value_type(inode->i_security,
+				SELINUX_LSM_ID, struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1558: FILE: security/selinux/hooks.c:3416:
+	isec = security_get_value_type(SOCK_INODE(sock)->i_security,
+		SELINUX_LSM_ID, struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1568: FILE: security/selinux/hooks.c:3424:
+	ssec = security_get_value_type(sock->sk->sk_security, SELINUX_LSM_ID,
+		struct sk_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1580: FILE: security/selinux/hooks.c:3467:
+	isec = security_get_value_type(SOCK_INODE(sock)->i_security,
+		SELINUX_LSM_ID, struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1592: FILE: security/selinux/hooks.c:3535:
+	isec = security_get_value_type(inode->i_security, SELINUX_LSM_ID,
+		struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1604: FILE: security/selinux/hooks.c:3643:
+	tsec = security_get_value_type(current->security,
+		SELINUX_LSM_ID, struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1616: FILE: security/selinux/hooks.c:3665:
+	tsec = security_get_value_type(task->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1627: FILE: security/selinux/hooks.c:3681:
+	security_set_value_type(perm->security, SELINUX_LSM_ID, isec,
+		selinux_secidx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1638: FILE: security/selinux/hooks.c:3691:
+	isec = security_del_value_type(perm->security, SELINUX_LSM_ID,
+		struct ipc_security_struct, selinux_secidx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1648: FILE: security/selinux/hooks.c:3708:
+	security_set_value_type(msg->security, SELINUX_LSM_ID, msec,
+		selinux_secidx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1659: FILE: security/selinux/hooks.c:3718:
+	msec = security_del_value_type(msg->security, SELINUX_LSM_ID,
+		struct msg_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1673: FILE: security/selinux/hooks.c:3732:
+	tsec = security_get_value_type(current->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1676: FILE: security/selinux/hooks.c:3735:
+	isec = security_get_value_type(ipc_perms->security, SELINUX_LSM_ID,
+		struct ipc_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1690: FILE: security/selinux/hooks.c:3767:
+	tsec = security_get_value_type(current->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1693: FILE: security/selinux/hooks.c:3770:
+	isec = security_get_value_type(msq->q_perm.security, SELINUX_LSM_ID,
+		struct ipc_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1707: FILE: security/selinux/hooks.c:3797:
+	tsec = security_get_value_type(current->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1710: FILE: security/selinux/hooks.c:3800:
+	isec = security_get_value_type(msq->q_perm.security, SELINUX_LSM_ID,
+		struct ipc_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1726: FILE: security/selinux/hooks.c:3847:
+	tsec = security_get_value_type(current->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1729: FILE: security/selinux/hooks.c:3850:
+	isec = security_get_value_type(msq->q_perm.security, SELINUX_LSM_ID,
+		struct ipc_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1732: FILE: security/selinux/hooks.c:3853:
+	msec = security_get_value_type(msg->security, SELINUX_LSM_ID,
+		struct msg_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1748: FILE: security/selinux/hooks.c:3901:
+	tsec = security_get_value_type(target->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1751: FILE: security/selinux/hooks.c:3904:
+	isec = security_get_value_type(msq->q_perm.security, SELINUX_LSM_ID,
+		struct ipc_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1754: FILE: security/selinux/hooks.c:3907:
+	msec = security_get_value_type(msg->security, SELINUX_LSM_ID,
+		struct msg_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1768: FILE: security/selinux/hooks.c:3934:
+	tsec = security_get_value_type(current->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1771: FILE: security/selinux/hooks.c:3937:
+	isec = security_get_value_type(shp->shm_perm.security, SELINUX_LSM_ID,
+		struct ipc_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1785: FILE: security/selinux/hooks.c:3964:
+	tsec = security_get_value_type(current->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1788: FILE: security/selinux/hooks.c:3967:
+	isec = security_get_value_type(shp->shm_perm.security, SELINUX_LSM_ID,
+		struct ipc_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1802: FILE: security/selinux/hooks.c:4036:
+	tsec = security_get_value_type(current->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1805: FILE: security/selinux/hooks.c:4039:
+	isec = security_get_value_type(sma->sem_perm.security, SELINUX_LSM_ID,
+		struct ipc_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1819: FILE: security/selinux/hooks.c:4066:
+	tsec = security_get_value_type(current->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1822: FILE: security/selinux/hooks.c:4069:
+	isec = security_get_value_type(sma->sem_perm.security, SELINUX_LSM_ID,
+		struct ipc_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1834: FILE: security/selinux/hooks.c:4185:
+	tsec = security_get_value_type(p->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1846: FILE: security/selinux/hooks.c:4262:
+	tsec = security_get_value_type(p->security, SELINUX_LSM_ID,
+		struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1858: FILE: security/selinux/hooks.c:4482:
+	tsec = security_get_value_type(current->security, SELINUX_LSM_ID,
+		struct task_security_struct,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1867: FILE: security/selinux/hooks.c:4489:
+	if (register_security (&selinux_ops, &selinux_secidx)) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#1868: FILE: security/selinux/hooks.c:4490:
+		if (mod_reg_security( MY_NAME, &selinux_ops, &selinux_secidx)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1876: FILE: security/selinux/hooks.c:4500:
+	printk(KERN_NOTICE "got selinux_secidx %d\n", selinux_secidx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1900: FILE: security/selinux/selinuxfs.c:66:
+	tsec = security_get_value_type(tsk->security, SELINUX_LSM_ID,
+			struct task_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1912: FILE: security/selinux/selinuxfs.c:991:
+		isec = security_get_value_type(inode->i_security,
+				SELINUX_LSM_ID, struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1924: FILE: security/selinux/selinuxfs.c:1278:
+	isec = security_get_value_type(inode->i_security, SELINUX_LSM_ID,
+			struct inode_security_struct,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1949: FILE: security/seclvl.c:511:
+	isec = security_del_value_type(inode->i_security, SECLVL_LSM_ID,
+				struct seclvl_i_sec, seclvl_secidx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1960: FILE: security/seclvl.c:551:
+		isec = security_get_value_type(inode->i_security,
+				SECLVL_LSM_ID, struct seclvl_i_sec,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1972: FILE: security/seclvl.c:580:
+	isec = security_get_value_type(inode->i_security,
+			SECLVL_LSM_ID, struct seclvl_i_sec, seclvl_secidx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1979: FILE: security/seclvl.c:585:
+	isec = security_get_value_type(inode->i_security,
+			SECLVL_LSM_ID, struct seclvl_i_sec, seclvl_secidx);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#2013: FILE: security/seclvl.c:803:
+	printk(KERN_NOTICE "got seclvl_secidx %d\n", seclvl_secidx);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2035: FILE: security/capability.c:69:
+	if (register_security (&capability_ops, NULL)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2038: FILE: security/capability.c:71:
+		if (mod_reg_security (MY_NAME, &capability_ops, NULL)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2051: FILE: security/root_plug.c:107:
+	if (register_security (&rootplug_security_ops, NULL)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2056: FILE: security/root_plug.c:111:
+		if (mod_reg_security (MY_NAME, &rootplug_security_ops, NULL)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2069: FILE: security/cap_stack.c:65:
+	if (register_security (&capability_ops, NULL)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2072: FILE: security/cap_stack.c:67:
+		if (mod_reg_security (MY_NAME, &capability_ops, NULL)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2225: FILE: security/stacker.c:1652:
+	if (register_security (&stacker_ops, NULL)) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2250: FILE: include/linux/security-stack.h:19:
+extern int security_unlink_value(struct hlist_node *n, int idx);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around bprm->security[sec_shared_slot]
#2273: FILE: fs/compat.c:1528:
+	INIT_HLIST_HEAD((struct hlist_head *)&(bprm->security[sec_shared_slot]));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around bprm->security[sec_shared_slot]
#2286: FILE: fs/exec.c:1169:
+	INIT_HLIST_HEAD((struct hlist_head *)&(bprm->security[sec_shared_slot]));

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000160893.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 18 errors, 25 warnings, 178 checks, 1916 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000160893.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
