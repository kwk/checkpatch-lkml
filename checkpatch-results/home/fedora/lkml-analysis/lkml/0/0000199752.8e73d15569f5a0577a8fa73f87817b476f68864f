WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#56: FILE: drivers/pci/pcie/aer/aerdrv.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#83: FILE: drivers/pci/pcie/aer/aerdrv.c:28:
+static int __devinit aerdrv_probe (struct pcie_device *dev, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#83: FILE: drivers/pci/pcie/aer/aerdrv.c:28:
+static int __devinit aerdrv_probe (struct pcie_device *dev, 

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#83: FILE: drivers/pci/pcie/aer/aerdrv.c:28:
+static int __devinit aerdrv_probe (struct pcie_device *dev, 

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#84: FILE: drivers/pci/pcie/aer/aerdrv.c:29:
+static int __devinit aerdrv_probe (struct pcie_device *dev, 
+	const struct pcie_port_service_id *id );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#84: FILE: drivers/pci/pcie/aer/aerdrv.c:29:
+	const struct pcie_port_service_id *id );

ERROR:SPACING: space required after that ';' (ctx:VxV)
#86: FILE: drivers/pci/pcie/aer/aerdrv.c:31:
+static int aerdrv_suspend(struct pcie_device *dev, u32 state) {return 0;}
                                                                        ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#87: FILE: drivers/pci/pcie/aer/aerdrv.c:32:
+static int aerdrv_resume(struct pcie_device *dev) {return 0;}
                                                            ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#92: FILE: drivers/pci/pcie/aer/aerdrv.c:37:
+static struct pcie_port_service_id service_id[] = { { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#93: FILE: drivers/pci/pcie/aer/aerdrv.c:38:
+^I.vendor = PCI_ANY_ID, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#95: FILE: drivers/pci/pcie/aer/aerdrv.c:40:
+^I.port_type = PCIE_RC_PORT, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#119: FILE: drivers/pci/pcie/aer/aerdrv.c:64:
+irqreturn_t aerdrv_irq(int irq, void *context, struct pt_regs * r)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#127: FILE: drivers/pci/pcie/aer/aerdrv.c:72:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#128: FILE: drivers/pci/pcie/aer/aerdrv.c:73:
+^I * Must lock access to Root Error Status Reg, Root Error ID Reg, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#129: FILE: drivers/pci/pcie/aer/aerdrv.c:74:
+^I * and Root error producer/consumer index $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#143: FILE: drivers/pci/pcie/aer/aerdrv.c:88:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#149: FILE: drivers/pci/pcie/aer/aerdrv.c:94:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#155: FILE: drivers/pci/pcie/aer/aerdrv.c:100:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#160: FILE: drivers/pci/pcie/aer/aerdrv.c:105:
+^I$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#173: FILE: drivers/pci/pcie/aer/aerdrv.c:118:
+static struct aer_rpc* aerdrv_alloc_rpc(struct pcie_device *dev)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#179: FILE: drivers/pci/pcie/aer/aerdrv.c:124:
+^Iif (!(rpc = (struct aer_rpc *)kmalloc(sizeof(struct aer_rpc), $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#179: FILE: drivers/pci/pcie/aer/aerdrv.c:124:
+	if (!(rpc = (struct aer_rpc *)kmalloc(sizeof(struct aer_rpc), 

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#179: FILE: drivers/pci/pcie/aer/aerdrv.c:124:
+	if (!(rpc = (struct aer_rpc *)kmalloc(sizeof(struct aer_rpc), 

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*rpc)...) over kmalloc(sizeof(struct aer_rpc)...)
#179: FILE: drivers/pci/pcie/aer/aerdrv.c:124:
+	if (!(rpc = (struct aer_rpc *)kmalloc(sizeof(struct aer_rpc), 

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#180: FILE: drivers/pci/pcie/aer/aerdrv.c:125:
+	if (!(rpc = (struct aer_rpc *)kmalloc(sizeof(struct aer_rpc), 
+		GFP_KERNEL)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: drivers/pci/pcie/aer/aerdrv.c:129:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#185: FILE: drivers/pci/pcie/aer/aerdrv.c:130:
+^I * Initialize Root lock access, e_lock, to Root Error Status Reg, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#186: FILE: drivers/pci/pcie/aer/aerdrv.c:131:
+^I * Root Error ID Reg, and Root error producer/consumer index. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#188: FILE: drivers/pci/pcie/aer/aerdrv.c:133:
+^Irpc->e_lock = SPIN_LOCK_UNLOCKED; ^I^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#188: FILE: drivers/pci/pcie/aer/aerdrv.c:133:
+^Irpc->e_lock = SPIN_LOCK_UNLOCKED; ^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#190: FILE: drivers/pci/pcie/aer/aerdrv.c:135:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#192: FILE: drivers/pci/pcie/aer/aerdrv.c:137:
+^I * or print AER aware devices in this RPC hierarchy $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#199: FILE: drivers/pci/pcie/aer/aerdrv.c:144:
+^Irpc->self_id = (pdev->bus->number << 8) | pdev->devfn;^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#205: FILE: drivers/pci/pcie/aer/aerdrv.c:150:
+	rpc->prod_idx = rpc->cons_idx = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#208: FILE: drivers/pci/pcie/aer/aerdrv.c:153:
+^Iset_service_data(dev, rpc);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#209: FILE: drivers/pci/pcie/aer/aerdrv.c:154:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#226: FILE: drivers/pci/pcie/aer/aerdrv.c:171:
+^I^Iif (rpc->isr)^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#245: FILE: drivers/pci/pcie/aer/aerdrv.c:190:
+static int __devinit aerdrv_probe (struct pcie_device *dev, $

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#245: FILE: drivers/pci/pcie/aer/aerdrv.c:190:
+static int __devinit aerdrv_probe (struct pcie_device *dev, 

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#245: FILE: drivers/pci/pcie/aer/aerdrv.c:190:
+static int __devinit aerdrv_probe (struct pcie_device *dev, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#246: FILE: drivers/pci/pcie/aer/aerdrv.c:191:
+static int __devinit aerdrv_probe (struct pcie_device *dev, 
+				const struct pcie_port_service_id *id )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#246: FILE: drivers/pci/pcie/aer/aerdrv.c:191:
+				const struct pcie_port_service_id *id )

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#253: FILE: drivers/pci/pcie/aer/aerdrv.c:198:
+	if ((status = aer_init(&root_aerdrv))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#254: FILE: drivers/pci/pcie/aer/aerdrv.c:199:
+		printk(KERN_DEBUG "%s: AER service init fails - %s\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#255: FILE: drivers/pci/pcie/aer/aerdrv.c:200:
+^I^I^I__FUNCTION__, (status == OSC_METHOD_NOT_SUPPORTED) ? $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#255: FILE: drivers/pci/pcie/aer/aerdrv.c:200:
+		printk(KERN_DEBUG "%s: AER service init fails - %s\n",
+			__FUNCTION__, (status == OSC_METHOD_NOT_SUPPORTED) ? 

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#255: FILE: drivers/pci/pcie/aer/aerdrv.c:200:
+			__FUNCTION__, (status == OSC_METHOD_NOT_SUPPORTED) ? 

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#261: FILE: drivers/pci/pcie/aer/aerdrv.c:206:
+	if (!(rpc = aerdrv_alloc_rpc(dev))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#262: FILE: drivers/pci/pcie/aer/aerdrv.c:207:
+		printk(KERN_DEBUG "%s: Alloc rpc fails on PCIE device[%s]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#263: FILE: drivers/pci/pcie/aer/aerdrv.c:208:
+		printk(KERN_DEBUG "%s: Alloc rpc fails on PCIE device[%s]\n",
+			__FUNCTION__, device->bus_id);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#263: FILE: drivers/pci/pcie/aer/aerdrv.c:208:
+			__FUNCTION__, device->bus_id);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#269: FILE: drivers/pci/pcie/aer/aerdrv.c:214:
+^Iif ((status = request_irq(dev->irq, aerdrv_irq, SA_SHIRQ, "aerdrv", $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#269: FILE: drivers/pci/pcie/aer/aerdrv.c:214:
+	if ((status = request_irq(dev->irq, aerdrv_irq, SA_SHIRQ, "aerdrv", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#270: FILE: drivers/pci/pcie/aer/aerdrv.c:215:
+	if ((status = request_irq(dev->irq, aerdrv_irq, SA_SHIRQ, "aerdrv", 
+				dev))) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#271: FILE: drivers/pci/pcie/aer/aerdrv.c:216:
+^I^Iprintk(KERN_DEBUG "%s: Request ISR fails on PCIE device[%s]\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#271: FILE: drivers/pci/pcie/aer/aerdrv.c:216:
+		printk(KERN_DEBUG "%s: Request ISR fails on PCIE device[%s]\n", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#272: FILE: drivers/pci/pcie/aer/aerdrv.c:217:
+		printk(KERN_DEBUG "%s: Request ISR fails on PCIE device[%s]\n", 
+			__FUNCTION__, device->bus_id);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#272: FILE: drivers/pci/pcie/aer/aerdrv.c:217:
+			__FUNCTION__, device->bus_id);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#276: FILE: drivers/pci/pcie/aer/aerdrv.c:221:
+^Irpc->isr = 1;^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#279: FILE: drivers/pci/pcie/aer/aerdrv.c:224:
+	if ((status = aer_add_rootport(rpc))) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#280: FILE: drivers/pci/pcie/aer/aerdrv.c:225:
+^I^Iprintk(KERN_DEBUG "%s: Add rpc fails on PCIE device[%s]\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#280: FILE: drivers/pci/pcie/aer/aerdrv.c:225:
+		printk(KERN_DEBUG "%s: Add rpc fails on PCIE device[%s]\n", 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#281: FILE: drivers/pci/pcie/aer/aerdrv.c:226:
+		printk(KERN_DEBUG "%s: Add rpc fails on PCIE device[%s]\n", 
+			__FUNCTION__, device->bus_id);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#281: FILE: drivers/pci/pcie/aer/aerdrv.c:226:
+			__FUNCTION__, device->bus_id);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#303: FILE: drivers/pci/pcie/aer/aerdrv.c:248:
+static void __exit aerdrv_service_exit(void) $

CHECK:SPACING: No space is necessary after a cast
#303: FILE: drivers/pci/pcie/aer/aerdrv.c:248:
+static void __exit aerdrv_service_exit(void) 

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#314: FILE: drivers/pci/pcie/aer/aerdrv.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#330: FILE: drivers/pci/pcie/aer/aerdrv.h:17:
+#define VERBOSE_MASK^I^I^I0x3 $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#337: FILE: drivers/pci/pcie/aer/aerdrv.h:24:
+#define PCIE_PORT(d)			((d & 0x4) && (d != 0x7))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'd' may be better as '(d)' to avoid precedence issues
#337: FILE: drivers/pci/pcie/aer/aerdrv.h:24:
+#define PCIE_PORT(d)			((d & 0x4) && (d != 0x7))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'd' may be better as '(d)' to avoid precedence issues
#338: FILE: drivers/pci/pcie/aer/aerdrv.h:25:
+#define PCIE_ROOT_PORT(d)		(d == PCIE_RC_PORT)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#339: FILE: drivers/pci/pcie/aer/aerdrv.h:26:
+#define PCIE_SWITCH_PORT(d)^I^I(PCIE_PORT(d) && !PCIE_ROOT_PORT(d)) $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#339: FILE: drivers/pci/pcie/aer/aerdrv.h:26:
+#define PCIE_SWITCH_PORT(d)		(PCIE_PORT(d) && !PCIE_ROOT_PORT(d)) 

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#355: FILE: drivers/pci/pcie/aer/aerdrv.h:42:
+#define ROOT_ERR_STATUS_MULTI_UNCOR_BIT_MASK ^I0x08$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'd' may be better as '(d)' to avoid precedence issues
#357: FILE: drivers/pci/pcie/aer/aerdrv.h:44:
+#define ROOT_ERR_STATUS_CORRECTABLE(d)	(d & (ROOT_ERR_STATUS_COR_BIT_MASK | \
+					ROOT_ERR_STATUS_MULTI_COR_BIT_MASK))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'd' may be better as '(d)' to avoid precedence issues
#359: FILE: drivers/pci/pcie/aer/aerdrv.h:46:
+#define ROOT_ERR_STATUS_UNCORRECTABLE(d) (d & (ROOT_ERR_STATUS_UNCOR_BIT_MASK |\
+					ROOT_ERR_STATUS_MULTI_UNCOR_BIT_MASK))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'd' may be better as '(d)' to avoid precedence issues
#365: FILE: drivers/pci/pcie/aer/aerdrv.h:52:
+#define ERR_COR_ID(d)			(d & ERR_SOURCE_ID_MASK)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'd' may be better as '(d)' to avoid precedence issues
#366: FILE: drivers/pci/pcie/aer/aerdrv.h:53:
+#define ERR_UNCOR_ID(d)			(d >> 16)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'd' may be better as '(d)' to avoid precedence issues
#367: FILE: drivers/pci/pcie/aer/aerdrv.h:54:
+#define FIRST_ERROR(d)			(d & 1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'd' may be better as '(d)' to avoid precedence issues
#368: FILE: drivers/pci/pcie/aer/aerdrv.h:55:
+#define NEXT_ERROR(d)			((d >> 1) & 1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'id' may be better as '(id)' to avoid precedence issues
#370: FILE: drivers/pci/pcie/aer/aerdrv.h:57:
+#define AER_DEVICE_BUS(id)		(id >> 8)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'id' may be better as '(id)' to avoid precedence issues
#371: FILE: drivers/pci/pcie/aer/aerdrv.h:58:
+#define AER_DEVICE_DEV(id)		((id >> 3) & 0x1f)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'id' may be better as '(id)' to avoid precedence issues
#372: FILE: drivers/pci/pcie/aer/aerdrv.h:59:
+#define AER_DEVICE_FUNC(id)		(id & 0x7)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#373: FILE: drivers/pci/pcie/aer/aerdrv.h:60:
+^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#376: FILE: drivers/pci/pcie/aer/aerdrv.h:63:
+^I^I^I^I^IERR_DATA_LINK_PROTOCOL | ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#377: FILE: drivers/pci/pcie/aer/aerdrv.h:64:
+^I^I^I^I^IERR_RECEIVER_OVERFLOW | ^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#397: FILE: drivers/pci/pcie/aer/aerdrv.h:84:
+ ^Istruct list_head node;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#397: FILE: drivers/pci/pcie/aer/aerdrv.h:84:
+ ^Istruct list_head node;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#397: FILE: drivers/pci/pcie/aer/aerdrv.h:84:
+ ^Istruct list_head node;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#398: FILE: drivers/pci/pcie/aer/aerdrv.h:85:
+ ^Istruct list_head children;^I/* AER children of this root port */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#398: FILE: drivers/pci/pcie/aer/aerdrv.h:85:
+ ^Istruct list_head children;^I/* AER children of this root port */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#398: FILE: drivers/pci/pcie/aer/aerdrv.h:85:
+ ^Istruct list_head children;^I/* AER children of this root port */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#408: FILE: drivers/pci/pcie/aer/aerdrv.h:95:
+^Iint subordinate; ^I^I/* Subordinate bus of this node */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#410: FILE: drivers/pci/pcie/aer/aerdrv.h:97:
+^Ispinlock_t e_lock;^I^I/* $

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#410: FILE: drivers/pci/pcie/aer/aerdrv.h:97:
+	spinlock_t e_lock;		/* 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#412: FILE: drivers/pci/pcie/aer/aerdrv.h:99:
+^I^I^I^I^I * and error producer/consumer index $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#414: FILE: drivers/pci/pcie/aer/aerdrv.h:101:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#414: FILE: drivers/pci/pcie/aer/aerdrv.h:101:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#415: FILE: drivers/pci/pcie/aer/aerdrv.h:102:
+^Istruct semaphore rpc_sema;^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#417: FILE: drivers/pci/pcie/aer/aerdrv.h:104:
+^I^I^I^I^I * access, add, remove, or print AER $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#418: FILE: drivers/pci/pcie/aer/aerdrv.h:105:
+^I^I^I^I ^I * aware devices in this RPC hierarchy $

ERROR:CODE_INDENT: code indent should use tabs where possible
#418: FILE: drivers/pci/pcie/aer/aerdrv.h:105:
+^I^I^I^I ^I * aware devices in this RPC hierarchy $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#418: FILE: drivers/pci/pcie/aer/aerdrv.h:105:
+^I^I^I^I ^I * aware devices in this RPC hierarchy $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#436: FILE: drivers/pci/pcie/aer/aerdrv.h:123:
+^Iunsigned short tlp ^I: 1;^I/* Whether TLP header is available */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#437: FILE: drivers/pci/pcie/aer/aerdrv.h:124:
+^Iunsigned short reset ^I: 1;^I/* Whether a link reset is performed */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#443: FILE: drivers/pci/pcie/aer/aerdrv.h:130:
+ ^Istruct aer_device *parent;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#443: FILE: drivers/pci/pcie/aer/aerdrv.h:130:
+ ^Istruct aer_device *parent;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#443: FILE: drivers/pci/pcie/aer/aerdrv.h:130:
+ ^Istruct aer_device *parent;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#444: FILE: drivers/pci/pcie/aer/aerdrv.h:131:
+ ^Istruct list_head node;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#444: FILE: drivers/pci/pcie/aer/aerdrv.h:131:
+ ^Istruct list_head node;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#444: FILE: drivers/pci/pcie/aer/aerdrv.h:131:
+ ^Istruct list_head node;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#454: FILE: drivers/pci/pcie/aer/aerdrv.h:141:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#462: FILE: drivers/pci/pcie/aer/aerdrv.h:149:
+^Iunion aer_error last_recorded_err;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#464: FILE: drivers/pci/pcie/aer/aerdrv.h:151:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#465: FILE: drivers/pci/pcie/aer/aerdrv.h:152:
+^Istruct semaphore d_sema;^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#467: FILE: drivers/pci/pcie/aer/aerdrv.h:154:
+^I^I^I^I^I *  reported by this device $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#468: FILE: drivers/pci/pcie/aer/aerdrv.h:155:
+^I^I^I^I^I */^I$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#470: FILE: drivers/pci/pcie/aer/aerdrv.h:157:
+};
+#define to_aer_device(d) container_of(d, struct aer_device, gendev)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#473: FILE: drivers/pci/pcie/aer/aerdrv.h:160:
+extern struct pci_dev* get_root_pci_dev(unsigned short requestor_id);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#473: FILE: drivers/pci/pcie/aer/aerdrv.h:160:
+extern struct pci_dev* get_root_pci_dev(unsigned short requestor_id);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#474: FILE: drivers/pci/pcie/aer/aerdrv.h:161:
+extern int aer_get_verbose(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#475: FILE: drivers/pci/pcie/aer/aerdrv.h:162:
+extern int aer_get_auto_mode(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#476: FILE: drivers/pci/pcie/aer/aerdrv.h:163:
+extern void aer_log_event(struct aer_device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#477: FILE: drivers/pci/pcie/aer/aerdrv.h:164:
+extern void aer_send_alert(union aer_error *error);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#478: FILE: drivers/pci/pcie/aer/aerdrv.h:165:
+extern int aer_event_log_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#479: FILE: drivers/pci/pcie/aer/aerdrv.h:166:
+extern void aer_event_log_cleanup(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#480: FILE: drivers/pci/pcie/aer/aerdrv.h:167:
+extern int aer_get_record(char *page, int verbose);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#481: FILE: drivers/pci/pcie/aer/aerdrv.h:168:
+extern void aer_set_auto_consume(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#482: FILE: drivers/pci/pcie/aer/aerdrv.h:169:
+extern int aer_sysfs_init(struct device_driver *drv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#483: FILE: drivers/pci/pcie/aer/aerdrv.h:170:
+extern void aer_sysfs_cleanup(struct device_driver *drv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#484: FILE: drivers/pci/pcie/aer/aerdrv.h:171:
+extern int aer_add_rootport(struct aer_rpc *rpc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#485: FILE: drivers/pci/pcie/aer/aerdrv.h:172:
+extern void aer_delete_rootport(struct aer_rpc *rpc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#486: FILE: drivers/pci/pcie/aer/aerdrv.h:173:
+extern int aer_init(struct pcie_port_service_driver *drv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#487: FILE: drivers/pci/pcie/aer/aerdrv.h:174:
+extern void aer_cleanup(struct pcie_port_service_driver *drv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#488: FILE: drivers/pci/pcie/aer/aerdrv.h:175:
+extern void aer_isr(void *context);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#489: FILE: drivers/pci/pcie/aer/aerdrv.h:176:
+extern char* aer_get_error_source_name(union aer_error *error);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#489: FILE: drivers/pci/pcie/aer/aerdrv.h:176:
+extern char* aer_get_error_source_name(union aer_error *error);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#500: FILE: drivers/pci/pcie/aer/Kconfig:5:
+config PCIEAER
+	bool "Root Port Advanced Error Reporting support"
+	depends on PCIEPORTBUS 
+	default y
+
+	---help---
+	This enables Root Port Advanced Error Reporting (AER) driver
+	support. Error reporting messages sent to Root Port will be
+	handled by PCI Express AER driver.	

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#502: FILE: drivers/pci/pcie/aer/Kconfig:7:
+^Idepends on PCIEPORTBUS $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#508: FILE: drivers/pci/pcie/aer/Kconfig:13:
+^Ihandled by PCI Express AER driver.^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#543: FILE: include/linux/aer.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#559: FILE: include/linux/aer.h:17:
+#define UNCORRECTABLE_ERROR_STATUS_REG^I(PCIE_ENHANCED_CAP_HEADER | 0x04) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#560: FILE: include/linux/aer.h:18:
+#define UNCORRECTABLE_ERROR_MASK_REG^I(PCIE_ENHANCED_CAP_HEADER | 0x08) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#561: FILE: include/linux/aer.h:19:
+#define UNCORRECTABLE_ERROR_SEVERITY_REG (PCIE_ENHANCED_CAP_HEADER | 0x0c) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#562: FILE: include/linux/aer.h:20:
+#define CORRECTABLE_ERROR_STATUS_REG^I(PCIE_ENHANCED_CAP_HEADER | 0x10) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#563: FILE: include/linux/aer.h:21:
+#define CORRECTABLE_ERROR_MASK_REG^I(PCIE_ENHANCED_CAP_HEADER | 0x14) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#564: FILE: include/linux/aer.h:22:
+#define ADVANCE_CAPABILITY_CONTROL_REG^I(PCIE_ENHANCED_CAP_HEADER | 0x18) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#565: FILE: include/linux/aer.h:23:
+#define HEADER_LOG_REG^I^I^I(PCIE_ENHANCED_CAP_HEADER | 0x1c) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#566: FILE: include/linux/aer.h:24:
+#define ROOT_ERROR_COMMAND_REG^I^I(PCIE_ENHANCED_CAP_HEADER | 0x2c) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#567: FILE: include/linux/aer.h:25:
+#define ROOT_ERROR_STATUS_REG^I^I(PCIE_ENHANCED_CAP_HEADER | 0x30) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#568: FILE: include/linux/aer.h:26:
+#define CORRECTABLE_SOURCE_ID_REG^I(PCIE_ENHANCED_CAP_HEADER | 0x34) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#569: FILE: include/linux/aer.h:27:
+#define UNCORRECTABLE_SOURCE_ID_REG^I(PCIE_ENHANCED_CAP_HEADER | 0x36) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#576: FILE: include/linux/aer.h:34:
+#define AER_ERROR(d)^I^I^I(d & AER_ERROR_MASK)^I^I^I$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'd' may be better as '(d)' to avoid precedence issues
#576: FILE: include/linux/aer.h:34:
+#define AER_ERROR(d)			(d & AER_ERROR_MASK)			

ERROR:TRAILING_WHITESPACE: trailing whitespace
#579: FILE: include/linux/aer.h:37:
+#define ERR_RECEIVER^I^I^I0x00000001^I/* COR bit 0 ^I*/ $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#579: FILE: include/linux/aer.h:37:
+#define ERR_RECEIVER^I^I^I0x00000001^I/* COR bit 0 ^I*/ $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#580: FILE: include/linux/aer.h:38:
+#define ERR_BAD_TLP^I^I^I0x00000040  ^I/* COR bit 6 ^I*/$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#581: FILE: include/linux/aer.h:39:
+#define ERR_BAD_DLLP^I^I^I0x00000080^I/* COR bit 7 ^I*/$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#582: FILE: include/linux/aer.h:40:
+#define ERR_RELAY_NUM_ROLLOVER^I^I0x00000100 ^I/* COR bit 8 ^I*/$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#583: FILE: include/linux/aer.h:41:
+#define ERR_RELAY_TIMEOUT^I^I0x00001000 ^I/* COR bit 12 ^I*/$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#604: FILE: include/linux/aer.h:62:
+^I^Iunsigned int status; /*Particular Error Status*/ $

ERROR:SPACING: space required after that close brace '}'
#605: FILE: include/linux/aer.h:63:
+	}source;

ERROR:SPACING: space required after that close brace '}'
#614: FILE: include/linux/aer.h:72:
+	}u;

WARNING:SPACING: Unnecessary space before function pointer arguments
#625: FILE: include/linux/aer.h:83:
+	int (*notify) (unsigned short requestor_id, union aer_error *error);

WARNING:SPACING: Unnecessary space before function pointer arguments
#626: FILE: include/linux/aer.h:84:
+	int (*get_header) (unsigned short requestor_id, union aer_error *error,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#627: FILE: include/linux/aer.h:85:
+	int (*get_header) (unsigned short requestor_id, union aer_error *error,
+		struct header_log_regs *log);

WARNING:SPACING: Unnecessary space before function pointer arguments
#628: FILE: include/linux/aer.h:86:
+	int (*link_rec_prepare) (unsigned short requestor_id);

WARNING:SPACING: Unnecessary space before function pointer arguments
#629: FILE: include/linux/aer.h:87:
+	int (*link_rec_restart) (unsigned short requestor_id);

WARNING:SPACING: Unnecessary space before function pointer arguments
#630: FILE: include/linux/aer.h:88:
+	int (*link_reset) (unsigned short requestor_id);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#634: FILE: include/linux/aer.h:92:
+static inline int pcie_aer_register(struct pci_dev *dev,  $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#635: FILE: include/linux/aer.h:93:
+static inline int pcie_aer_register(struct pci_dev *dev,  
+	struct pcie_aer_handle *handle) {return -1;}

ERROR:SPACING: space required after that ';' (ctx:VxV)
#635: FILE: include/linux/aer.h:93:
+	struct pcie_aer_handle *handle) {return -1;}
 	                                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#638: FILE: include/linux/aer.h:96:
+extern int pcie_aer_register(struct pci_dev *dev, $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#638: FILE: include/linux/aer.h:96:
+extern int pcie_aer_register(struct pci_dev *dev, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#639: FILE: include/linux/aer.h:97:
+extern int pcie_aer_register(struct pci_dev *dev, 
+	struct pcie_aer_handle *handle);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#640: FILE: include/linux/aer.h:98:
+extern void pcie_aer_unregister(unsigned short requestor_id);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000199752.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 83 errors, 44 warnings, 49 checks, 581 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000199752.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
