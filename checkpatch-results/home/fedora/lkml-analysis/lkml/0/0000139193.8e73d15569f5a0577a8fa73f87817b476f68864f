ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#51: 
--- a/arch/arm/Kconfig

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#82: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#89: FILE: drivers/leds/Kconfig:4:
+config CLASS_LEDS
+	tristate "LED support"
+	help
+	  This option provides the generic support for the leds class.
+	  LEDs can be accessed from /sys/class/leds.  It will also allow you
+	  to select individual drivers for LED devices.  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#96: FILE: drivers/leds/Kconfig:11:
+config LEDS_LOCOMO
+	tristate "LED Support for Locomo device"
+	depends CLASS_LEDS && SHARP_LOCOMO
+	help
+	  This option enables support for the LEDs on Sharp Locomo.
+	  Zaurus models SL-5500 and SL-5600.
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#119: FILE: drivers/leds/ledscore.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#120: FILE: drivers/leds/ledscore.c:2:
+ * linux/drivers/leds/ledscore.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#148: FILE: drivers/leds/ledscore.c:30:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#168: FILE: drivers/leds/ledscore.c:50:
+^I$

CHECK:SPACING: No space is necessary after a cast
#179: FILE: drivers/leds/ledscore.c:61:
+	struct led_device *led_dev = (struct led_device *) data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#181: FILE: drivers/leds/ledscore.c:63:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#187: FILE: drivers/leds/ledscore.c:69:
+			unsigned long value;
+			if (led_dev->props->brightness_get(led_dev->class_dev.dev, led_dev->props))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#192: FILE: drivers/leds/ledscore.c:74:
+				led_dev->props->brightness_set(led_dev->class_dev.dev, led_dev->props, value);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!led_dev->ktimer"
#207: FILE: drivers/leds/ledscore.c:89:
+	} else if (led_dev->frequency && led_dev->ktimer == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*led_dev->ktimer)...) over kmalloc(sizeof(struct timer_list)...)
#209: FILE: drivers/leds/ledscore.c:91:
+		led_dev->ktimer = kmalloc(sizeof(struct timer_list), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: No space is necessary after a cast
#213: FILE: drivers/leds/ledscore.c:95:
+			led_dev->ktimer->data = (unsigned long) led_dev;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#225: FILE: drivers/leds/ledscore.c:107:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#245: FILE: drivers/leds/ledscore.c:127:
+^I$

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#266: FILE: drivers/leds/ledscore.c:148:
+			sprintf(buf, "%u\n", led_dev->props->color_get(led_dev->class_dev.dev, led_dev->props));

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#281: FILE: drivers/leds/ledscore.c:163:
+	unsigned long state = simple_strtoul(buf, &after, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LINE_SPACING: Missing a blank line after declarations
#282: FILE: drivers/leds/ledscore.c:164:
+	unsigned long state = simple_strtoul(buf, &after, 10);
+	if (after - buf > 0) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#286: FILE: drivers/leds/ledscore.c:168:
+^I^I^Iif (led_dev->props->color_set) $

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#287: FILE: drivers/leds/ledscore.c:169:
+				led_dev->props->color_set(led_dev->class_dev.dev, led_dev->props, state);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#305: FILE: drivers/leds/ledscore.c:187:
+^I^I^Isprintf(buf, "%u\n", $

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#306: FILE: drivers/leds/ledscore.c:188:
+				led_dev->props->brightness_get(led_dev->class_dev.dev, led_dev->props));

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#321: FILE: drivers/leds/ledscore.c:203:
+	unsigned long state = simple_strtoul(buf, &after, 10);

WARNING:LINE_SPACING: Missing a blank line after declarations
#322: FILE: drivers/leds/ledscore.c:204:
+	unsigned long state = simple_strtoul(buf, &after, 10);
+	if (after - buf > 0) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#326: FILE: drivers/leds/ledscore.c:208:
+			if (state > 100) state = 100;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#327: FILE: drivers/leds/ledscore.c:209:
+^I^I^Iif (led_dev->props->brightness_set) $

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#328: FILE: drivers/leds/ledscore.c:210:
+				led_dev->props->brightness_set(led_dev->class_dev.dev, led_dev->props, state);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#359: FILE: drivers/leds/ledscore.c:241:
+	unsigned long state = simple_strtoul(buf, &after, 10);

WARNING:LINE_SPACING: Missing a blank line after declarations
#360: FILE: drivers/leds/ledscore.c:242:
+	unsigned long state = simple_strtoul(buf, &after, 10);
+	if (after - buf > 0) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#366: FILE: drivers/leds/ledscore.c:248:
+			if (ret2) ret = ret2;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#387: FILE: drivers/leds/ledscore.c:269:
+	new_led = kmalloc (sizeof (struct led_device), GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#387: FILE: drivers/leds/ledscore.c:269:
+	new_led = kmalloc (sizeof (struct led_device), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new_led)...) over kmalloc(sizeof (struct led_device)...)
#387: FILE: drivers/leds/ledscore.c:269:
+	new_led = kmalloc (sizeof (struct led_device), GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#388: FILE: drivers/leds/ledscore.c:270:
+	if (unlikely (!new_led))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!new_led'
#388: FILE: drivers/leds/ledscore.c:270:
+	if (unlikely (!new_led))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#406: FILE: drivers/leds/ledscore.c:288:
+	rc = class_device_register (&new_led->class_dev);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#407: FILE: drivers/leds/ledscore.c:289:
+	if (unlikely (rc)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#408: FILE: drivers/leds/ledscore.c:290:
+		kfree (new_led);

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#432: FILE: drivers/leds/ledscore.c:314:
+	printk(KERN_INFO "Registered led device: number=%s, color=%s\n", new_led->class_dev.class_id, props->color);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#432: FILE: drivers/leds/ledscore.c:314:
+	printk(KERN_INFO "Registered led device: number=%s, color=%s\n", new_led->class_dev.class_id, props->color);

WARNING:TYPO_SPELLING: 'unreigister' may be misspelled - perhaps 'unregister'?
#440: FILE: drivers/leds/ledscore.c:322:
+ * @props: the property to unreigister
                            ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#462: FILE: drivers/leds/ledscore.c:344:
+	class_device_remove_file (&led_dev->class_dev, &class_device_attr_frequency);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#463: FILE: drivers/leds/ledscore.c:345:
+	class_device_remove_file (&led_dev->class_dev, &class_device_attr_brightness);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#464: FILE: drivers/leds/ledscore.c:346:
+	class_device_remove_file (&led_dev->class_dev, &class_device_attr_current_color);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#465: FILE: drivers/leds/ledscore.c:347:
+	class_device_remove_file (&led_dev->class_dev, &class_device_attr_color);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#466: FILE: drivers/leds/ledscore.c:348:
+	class_device_remove_file (&led_dev->class_dev, &class_device_attr_in_use);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#499: FILE: drivers/leds/ledscore.c:381:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#516: FILE: drivers/leds/ledscore.c:398:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#518: FILE: drivers/leds/ledscore.c:400:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#521: FILE: drivers/leds/ledscore.c:403:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#541: FILE: drivers/leds/ledscore.c:423:
+		if (led_dev->props) {
+			interface->add(led_dev->class_dev.dev, led_dev->props);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#584: FILE: drivers/leds/locomo.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#585: FILE: drivers/leds/locomo.c:2:
+ * linux/drivers/leds/locomo.c

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#609: FILE: drivers/leds/locomo.c:26:
+};
+#define to_locomoled_data(d) container_of(d, struct locomoled_data, props)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#622: FILE: drivers/leds/locomo.c:39:
+^I$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#625: FILE: drivers/leds/locomo.c:42:
+	if (value < 0) value = 0;

CHECK:BRACES: braces {} should be used on all arms of this statement
#628: FILE: drivers/leds/locomo.c:45:
+	if (data->brightness) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#631: FILE: drivers/leds/locomo.c:48:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#666: FILE: drivers/leds/locomo.c:83:
+^I$

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#671: FILE: drivers/leds/locomo.c:88:
+			printk(KERN_WARNING "Unable to register locomo led %s\n", leds[i].props.color);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#671: FILE: drivers/leds/locomo.c:88:
+			printk(KERN_WARNING "Unable to register locomo led %s\n", leds[i].props.color);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#675: FILE: drivers/leds/locomo.c:92:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#682: FILE: drivers/leds/locomo.c:99:
+^I$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#684: FILE: drivers/leds/locomo.c:101:
+		if (leds[i].registered) {
+			leds_device_unregister(&leds[i].props);
+		}

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#700: FILE: drivers/leds/locomo.c:117:
+static int __init locomoled_init(void) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#711: FILE: include/linux/leds.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#734: FILE: include/linux/leds.h:24:
+^I$

WARNING:TYPO_SPELLING: 'seperated' may be misspelled - perhaps 'separated'?
#736: FILE: include/linux/leds.h:26:
+	 * be seperated by a "/".  For example, "amber/green".
 	      ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#740: FILE: include/linux/leds.h:30:
+^I$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#745: FILE: include/linux/leds.h:35:
+	int (*color_get)(struct device *, struct led_properties *props);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#746: FILE: include/linux/leds.h:36:
+	void (*color_set)(struct device *, struct led_properties *props, int value);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#749: FILE: include/linux/leds.h:39:
+	 * Values are between 0-100 */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#750: FILE: include/linux/leds.h:40:
+	int (*brightness_get)(struct device *, struct led_properties *props);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#751: FILE: include/linux/leds.h:41:
+	void (*brightness_set)(struct device *, struct led_properties *props, int value);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#752: FILE: include/linux/leds.h:42:
+^I$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#770: FILE: include/linux/leds.h:60:
+};
+int leds_interface_register(struct led_interface *interface);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000139193.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 23 errors, 44 warnings, 11 checks, 690 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000139193.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
