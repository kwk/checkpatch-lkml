WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
diff -X dontdiff -Nur vanilla-2.6.0-test6/arch/i386/kernel/entry.S linux-2.6.0-test6/arch/i386/kernel/entry.S

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#67: FILE: CREDITS:3298:
+N: Peter Wächtler
           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#86: FILE: include/asm-i386/unistd.h:282:
+#define __NR_sys_mq_unlink    (__NR_sys_mq_open+1)
                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#87: FILE: include/asm-i386/unistd.h:283:
+#define __NR_mq_timedsend     (__NR_sys_mq_open+2)
                                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#88: FILE: include/asm-i386/unistd.h:284:
+#define __NR_mq_timedreceive  (__NR_sys_mq_open+3)
                                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#89: FILE: include/asm-i386/unistd.h:285:
+#define __NR_mq_notify        (__NR_sys_mq_open+4)
                                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#90: FILE: include/asm-i386/unistd.h:286:
+#define __NR_mq_getattr       (__NR_sys_mq_open+5)
                                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#91: FILE: include/asm-i386/unistd.h:287:
+#define __NR_mq_setattr       (__NR_sys_mq_open+6)
                                                ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#102: FILE: include/linux/pxqueue.h:1:
+#ifndef _LINUX_MQUEUE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#105: FILE: include/linux/pxqueue.h:4:
+#define MQ_MAXMSG ^I40^I/* max number of messages in each queue */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#107: FILE: include/linux/pxqueue.h:6:
+#define MQ_PRIO_MAX ^I256^I/* max priority */$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#112: FILE: include/linux/pxqueue.h:11:
+typedef int mqd_t;		/* message queue descriptor */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#122: FILE: include/linux/pxqueue.h:21:
+asmlinkage mqd_t sys_mq_open(const char *u_path, int oflag, mode_t mode,
+	struct mq_attr *u_attr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#125: FILE: include/linux/pxqueue.h:24:
+asmlinkage int sys_mq_timedsend(mqd_t mqdes, const char *msg_ptr, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#126: FILE: include/linux/pxqueue.h:25:
+asmlinkage int sys_mq_timedsend(mqd_t mqdes, const char *msg_ptr, 
+	size_t msg_len, unsigned int msg_prio, struct timespec *utime);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#127: FILE: include/linux/pxqueue.h:26:
+asmlinkage ssize_t sys_mq_timedreceive(mqd_t mqdes, char *msg_ptr, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: include/linux/pxqueue.h:27:
+asmlinkage ssize_t sys_mq_timedreceive(mqd_t mqdes, char *msg_ptr, 
+	size_t msg_len, unsigned int *msg_prio, struct timespec *utime);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#130: FILE: include/linux/pxqueue.h:29:
+asmlinkage int sys_mq_notify(mqd_t mqdes,
+	const struct sigevent *u_notification);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#133: FILE: include/linux/pxqueue.h:32:
+asmlinkage int sys_mq_setattr(mqd_t mqdes, const struct mq_attr *u_mqstat,
+	struct mq_attr *u_omqstat);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#161: FILE: init/Kconfig:98:
+^I  For userspace stub look at $

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#168: FILE: init/Kconfig:104:
diff -X dontdiff -Nur vanilla-2.6.0-test6/ipc/Makefile linux-2.6.0-test6/ipc/Makefile

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#180: FILE: ipc/posixmsg.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#181: FILE: ipc/posixmsg.c:2:
+ *  linux/ipc/posixmsg.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#183: FILE: ipc/posixmsg.c:4:
+ *  Copyright 2002,2003 Peter Wächtler <pwaechtler@mac.com>
                                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#200: FILE: ipc/posixmsg.c:21:
+ * replaced spinlocks with inode->i_sem $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#210: FILE: ipc/posixmsg.c:31:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#231: FILE: ipc/posixmsg.c:52:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#234: FILE: ipc/posixmsg.c:55:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#236: FILE: ipc/posixmsg.c:57:
+extern int msg_ctlmni;		/* max # of msg queue identifiers */

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#237: FILE: ipc/posixmsg.c:58:
+extern int msg_ctlmax;		/* max size of one message (bytes) */

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#242: FILE: ipc/posixmsg.c:63:
+#define get_mqueue(filp)\
                    ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'filp' - possible side-effects?
#242: FILE: ipc/posixmsg.c:63:
+#define get_mqueue(filp)\
+	((filp) ? filp->f_dentry->d_inode->u.generic_ip: filp)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#243: FILE: ipc/posixmsg.c:64:
+	((filp) ? filp->f_dentry->d_inode->u.generic_ip: filp)
 	  ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#243: FILE: ipc/posixmsg.c:64:
+	((filp) ? filp->f_dentry->d_inode->u.generic_ip: filp)
 	                                                 ^^^^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#243: FILE: ipc/posixmsg.c:64:
+	((filp) ? filp->f_dentry->d_inode->u.generic_ip: filp)
 	                                               ^

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#255: FILE: ipc/posixmsg.c:76:
+		return ERR_PTR(retval);;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#257: FILE: ipc/posixmsg.c:78:
+	queue->q_stime = queue->q_rtime = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#258: FILE: ipc/posixmsg.c:79:
+	queue->q_qbytes = queue->q_cbytes = queue->q_qnum = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#259: FILE: ipc/posixmsg.c:80:
+	queue->q_lspid = queue->q_lrpid = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#267: FILE: ipc/posixmsg.c:88:
+static int $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#268: FILE: ipc/posixmsg.c:89:
+mqueue_unlink (struct inode *dir, struct dentry *dentry)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: ipc/posixmsg.c:91:
+   dentry->d_inode->i_nlink--;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#271: FILE: ipc/posixmsg.c:92:
+   dput(dentry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#272: FILE: ipc/posixmsg.c:93:
+   return 0;$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#277: FILE: ipc/posixmsg.c:98:
+mqueue_close(struct inode *inode, struct file *filp)
                                                ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#281: FILE: ipc/posixmsg.c:102:
+	if (!q || !filp)
 	           ^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#286: FILE: ipc/posixmsg.c:107:
+	 * sys_getpid() returns the tgid if multithreaded */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#297: FILE: ipc/posixmsg.c:118:
+mqueue_poll(struct file *filp, struct poll_table_struct *wait)
                          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#299: FILE: ipc/posixmsg.c:120:
+	struct mqueue_ds *q = get_mqueue(filp);
 	                                 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#302: FILE: ipc/posixmsg.c:123:
+	poll_wait(filp, &q->wait_recv, wait);
 	          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#303: FILE: ipc/posixmsg.c:124:
+	poll_wait(filp, &q->wait_send, wait);
 	          ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#314: FILE: ipc/posixmsg.c:135:
+static struct file_operations msg_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#319: FILE: ipc/posixmsg.c:140:
+};
+static struct inode_operations msg_dir_inode_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#319: FILE: ipc/posixmsg.c:140:
+static struct inode_operations msg_dir_inode_operations = {

CHECK:BRACES: braces {} should be used on all arms of this statement
#330: FILE: ipc/posixmsg.c:151:
+	if (inode) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#334: FILE: ipc/posixmsg.c:155:
+		inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#341: FILE: ipc/posixmsg.c:162:
+			if ((q = kmalloc(sizeof (struct mqueue_ds), GFP_KERNEL))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#341: FILE: ipc/posixmsg.c:162:
+			if ((q = kmalloc(sizeof (struct mqueue_ds), GFP_KERNEL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*q)...) over kmalloc(sizeof (struct mqueue_ds)...)
#341: FILE: ipc/posixmsg.c:162:
+			if ((q = kmalloc(sizeof (struct mqueue_ds), GFP_KERNEL))) {

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#343: FILE: ipc/posixmsg.c:164:
+					iput(inode);
 					^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#349: FILE: ipc/posixmsg.c:170:
+				iput(inode);
 				^^^^

CHECK:BRACES: Unbalanced braces around else statement
#362: FILE: ipc/posixmsg.c:183:
+	} else

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#368: FILE: ipc/posixmsg.c:189:
+#if 0

ERROR:TRAILING_WHITESPACE: trailing whitespace
#369: FILE: ipc/posixmsg.c:190:
+/* don't use fget() to avoid the fput() for speed reason $

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#388: FILE: ipc/posixmsg.c:209:
+
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#389: FILE: ipc/posixmsg.c:210:
+}
+#define ERROUT(x)	return x;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#389: FILE: ipc/posixmsg.c:210:
+#define ERROUT(x)	return x;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#389: FILE: ipc/posixmsg.c:210:
+#define ERROUT(x)	return x;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#389: FILE: ipc/posixmsg.c:210:
+#define ERROUT(x)	return x;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: space required after that ';' (ctx:VxV)
#395: FILE: ipc/posixmsg.c:216:
+#define ERROUT(x)	{ err = x; goto out_fput;}
                  	                        ^

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#395: FILE: ipc/posixmsg.c:216:
+#define ERROUT(x)	{ err = x; goto out_fput;}

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#396: FILE: ipc/posixmsg.c:217:
+#define FPUTOUT      out_fput: fput(filp)
                                     ^^^^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#396: FILE: ipc/posixmsg.c:217:
+#define FPUTOUT      out_fput: fput(filp)

CHECK:SPACING: No space is necessary after a cast
#402: FILE: ipc/posixmsg.c:223:
+	return (int) ( q->queue.q_qnum < (unsigned long)q->attr.mq_maxmsg);

ERROR:SPACING: space prohibited after that open parenthesis '('
#402: FILE: ipc/posixmsg.c:223:
+	return (int) ( q->queue.q_qnum < (unsigned long)q->attr.mq_maxmsg);

ERROR:SPACING: space required before the open brace '{'
#413: FILE: ipc/posixmsg.c:234:
+	if (q){

WARNING:LINE_SPACING: Missing a blank line after declarations
#418: FILE: ipc/posixmsg.c:239:
+			struct msg_msg *msg = list_entry(tmp, struct msg_msg, m_list);
+			tmp = tmp->next;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#434: FILE: ipc/posixmsg.c:255:
+	struct file *filp;
 	             ^^^^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#439: FILE: ipc/posixmsg.c:260:
+	inode = get_msg_inode(msg_mnt->mnt_sb, S_IFIFO | (mode & S_IRWXUGO));

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "u_attr"
#446: FILE: ipc/posixmsg.c:267:
+	if (u_attr != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#447: FILE: ipc/posixmsg.c:268:
+		if (copy_from_user(&q->attr, u_attr, sizeof (struct mq_attr))) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#452: FILE: ipc/posixmsg.c:273:
+		if (q->attr.mq_maxmsg <= 0
+		    || q->attr.mq_msgsize <= 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#453: FILE: ipc/posixmsg.c:274:
+		    || q->attr.mq_msgsize <= 0
+		    || q->attr.mq_maxmsg > MQ_MAXMSG

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#454: FILE: ipc/posixmsg.c:275:
+		    || q->attr.mq_maxmsg > MQ_MAXMSG
+		    || q->attr.mq_msgsize > msg_ctlmax) {

WARNING:SPACING: space prohibited before semicolon
#460: FILE: ipc/posixmsg.c:281:
+		q->attr.mq_msgsize = 1024 /*msg_ctlmax */ ;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#470: FILE: ipc/posixmsg.c:291:
+	if ((fd = get_unused_fd()) < 0)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#472: FILE: ipc/posixmsg.c:293:
+	if (!(filp = get_empty_filp()))
 	      ^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#472: FILE: ipc/posixmsg.c:293:
+	if (!(filp = get_empty_filp()))

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#489: FILE: ipc/posixmsg.c:310:
+	filp->f_mode = (q->attr.mq_flags +1 ) & O_ACCMODE;
 	                                 ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#489: FILE: ipc/posixmsg.c:310:
+	filp->f_mode = (q->attr.mq_flags +1 ) & O_ACCMODE;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#492: FILE: ipc/posixmsg.c:313:
+	/* Now we map fd to filp, so userspace can access it */
 	                    ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#493: FILE: ipc/posixmsg.c:314:
+	fd_install(fd, filp);
 	               ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#498: FILE: ipc/posixmsg.c:319:
+	put_filp(filp);
 	         ^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#502: FILE: ipc/posixmsg.c:323:
+	iput(inode);
 	^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#508: FILE: ipc/posixmsg.c:329:
+ *^Isys_mq_open^I-^Iopens a message queue associated with @u_name $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#517: FILE: ipc/posixmsg.c:338:
+sys_mq_open(const char *u_name, int oflag, mode_t mode, struct mq_attr * u_attr)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#519: FILE: ipc/posixmsg.c:340:
+	struct file *filp;
 	             ^^^^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#523: FILE: ipc/posixmsg.c:344:
+	static int oflag2acc[O_ACCMODE] =
+	    { MAY_READ, MAY_WRITE, MAY_READ | MAY_WRITE };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#526: FILE: ipc/posixmsg.c:347:
+	if (IS_ERR(this.name = getname(u_name)))

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#539: FILE: ipc/posixmsg.c:360:
+			if (oflag & O_EXCL) {
[...]
+			} else {
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#546: FILE: ipc/posixmsg.c:367:
+^I^I^Iret = create_queue(msg_mnt->mnt_root, &this, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#547: FILE: ipc/posixmsg.c:368:
+			ret = create_queue(msg_mnt->mnt_root, &this, 
+					oflag, mode, u_attr);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#562: FILE: ipc/posixmsg.c:383:
+					filp =
 					^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#565: FILE: ipc/posixmsg.c:386:
+					if (IS_ERR(filp)) {
 					           ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#566: FILE: ipc/posixmsg.c:387:
+						ret = PTR_ERR(filp);
 						              ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#571: FILE: ipc/posixmsg.c:392:
+					fd_install(fd, filp);
 					               ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#587: FILE: ipc/posixmsg.c:408:
+ *^Isys_mq_unlink^I-^Iremoves a message queue from the namespace $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#588: FILE: ipc/posixmsg.c:409:
+ *^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#594: FILE: ipc/posixmsg.c:415:
+	int err=0;
 	       ^

ERROR:SPACING: space required before the open brace '{'
#603: FILE: ipc/posixmsg.c:424:
+	if (IS_ERR(dentry)){

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#604: FILE: ipc/posixmsg.c:425:
+		err= PTR_ERR(dentry);
 		   ^

ERROR:SPACING: space required before the open brace '{'
#607: FILE: ipc/posixmsg.c:428:
+	if (!dentry->d_inode){

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#608: FILE: ipc/posixmsg.c:429:
+		err= -ENOENT;
 		   ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#619: FILE: ipc/posixmsg.c:440:
+static inline long get_timeout( struct timespec *abs, int *err)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#626: FILE: ipc/posixmsg.c:447:
+	t=current_kernel_time();
 	 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#627: FILE: ipc/posixmsg.c:448:
+^Iif (t.tv_sec > abs->tv_sec || $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#628: FILE: ipc/posixmsg.c:449:
+	if (t.tv_sec > abs->tv_sec || 
+	(t.tv_sec == abs->tv_sec && t.tv_nsec > abs->tv_nsec))

ERROR:SPACING: space required before the open brace '{'
#633: FILE: ipc/posixmsg.c:454:
+	if (t.tv_nsec < 0){

ERROR:SPACING: spaces required around that '+=' (ctx:VxW)
#635: FILE: ipc/posixmsg.c:456:
+		t.tv_nsec+= 1000000000;
 		         ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#640: FILE: ipc/posixmsg.c:461:
+static void local_add_wait_queue(wait_queue_head_t *q, wait_queue_t * wait)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#648: FILE: ipc/posixmsg.c:469:
+static void local_remove_wait_queue(wait_queue_head_t *q, wait_queue_t * wait)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#656: FILE: ipc/posixmsg.c:477:
+ *^Isys_mq_timedsend^I-^Isend a message to the queue associated $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#676: FILE: ipc/posixmsg.c:497:
+	struct file *filp = get_filp(mqdes);
 	             ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#679: FILE: ipc/posixmsg.c:500:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#680: FILE: ipc/posixmsg.c:501:
+	if (!(q = get_mqueue(filp)))
 	                     ^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#680: FILE: ipc/posixmsg.c:501:
+	if (!(q = get_mqueue(filp)))

ERROR:SPACING: space prohibited after that open parenthesis '('
#682: FILE: ipc/posixmsg.c:503:
+	if ( !(filp->f_mode & FMODE_WRITE))

ERROR:SPACING: space prohibited after that open parenthesis '('
#683: FILE: ipc/posixmsg.c:504:
+		ERROUT( -EBADF);

CHECK:SPACING: No space is necessary after a cast
#684: FILE: ipc/posixmsg.c:505:
+	if ((unsigned int) msg_prio >= (unsigned int) MQ_PRIO_MAX)

ERROR:SPACING: space prohibited after that open parenthesis '('
#685: FILE: ipc/posixmsg.c:506:
+		ERROUT( -EINVAL);

ERROR:SPACING: space prohibited after that open parenthesis '('
#687: FILE: ipc/posixmsg.c:508:
+		ERROUT( -EMSGSIZE);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#690: FILE: ipc/posixmsg.c:511:
+	inode=filp->f_dentry->d_inode;
 	     ^

ERROR:SPACING: space required before the open brace '{'
#692: FILE: ipc/posixmsg.c:513:
+	if ((filp->f_flags & O_NONBLOCK) && !freespace(q, msg_len)){

ERROR:SPACING: space prohibited after that open parenthesis '('
#694: FILE: ipc/posixmsg.c:515:
+		ERROUT( -EAGAIN);

ERROR:SPACING: space prohibited after that open parenthesis '('
#699: FILE: ipc/posixmsg.c:520:
+		ERROUT( -ENOMEM);

CHECK:BRACES: braces {} should be used on all arms of this statement
#701: FILE: ipc/posixmsg.c:522:
+	if (utime) {
[...]
+	} else
[...]

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#702: FILE: ipc/posixmsg.c:523:
+		if (copy_from_user(&ts, utime, sizeof (ts)))

ERROR:SPACING: space prohibited after that open parenthesis '('
#703: FILE: ipc/posixmsg.c:524:
+			ERROUT( -EFAULT);

ERROR:SPACING: space prohibited after that open parenthesis '('
#705: FILE: ipc/posixmsg.c:526:
+		if ( err == -EINVAL )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#705: FILE: ipc/posixmsg.c:526:
+		if ( err == -EINVAL )

ERROR:SPACING: space prohibited after that open parenthesis '('
#706: FILE: ipc/posixmsg.c:527:
+			ERROUT( err);

CHECK:BRACES: Unbalanced braces around else statement
#708: FILE: ipc/posixmsg.c:529:
+	} else

CHECK:SPACING: No space is necessary after a cast
#711: FILE: ipc/posixmsg.c:532:
+	msg = get_msg((char *) msg_ptr, msg_len);

ERROR:SPACING: space prohibited after that open parenthesis '('
#713: FILE: ipc/posixmsg.c:534:
+		ERROUT( PTR_ERR(msg));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#721: FILE: ipc/posixmsg.c:542:
+^I/* open coded wait_event_interruptible_timeout() $

ERROR:SPACING: space required before the open brace '{'
#725: FILE: ipc/posixmsg.c:546:
+	if (!freespace(q, msg_len) ){

ERROR:SPACING: space prohibited before that close parenthesis ')'
#725: FILE: ipc/posixmsg.c:546:
+	if (!freespace(q, msg_len) ){

ERROR:SPACING: space required before the open brace '{'
#726: FILE: ipc/posixmsg.c:547:
+		if ( unlikely(timeout < 0) ){

ERROR:SPACING: space prohibited after that open parenthesis '('
#726: FILE: ipc/posixmsg.c:547:
+		if ( unlikely(timeout < 0) ){

ERROR:SPACING: space prohibited before that close parenthesis ')'
#726: FILE: ipc/posixmsg.c:547:
+		if ( unlikely(timeout < 0) ){

WARNING:LINE_SPACING: Missing a blank line after declarations
#731: FILE: ipc/posixmsg.c:552:
+		wait_queue_t __wait;
+		init_waitqueue_entry(&__wait, current);

ERROR:SPACING: space prohibited after that open parenthesis '('
#736: FILE: ipc/posixmsg.c:557:
+			if ( freespace(q, msg_len))

ERROR:SPACING: space required before the open brace '{'
#752: FILE: ipc/posixmsg.c:573:
+		if (unlikely(timeout == -ERESTARTSYS)){

ERROR:SPACING: space required before the open brace '{'
#756: FILE: ipc/posixmsg.c:577:
+		if (unlikely(timeout == 0)){

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#765: FILE: ipc/posixmsg.c:586:
+	if (msg_prio > 0 && !list_empty(&queue->q_messages)) {
+

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#786: FILE: ipc/posixmsg.c:607:
+	if (waitqueue_active(&q->wait_recv)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#792: FILE: ipc/posixmsg.c:613:
+		 * empty to not empty */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#798: FILE: ipc/posixmsg.c:619:
+^I^I^I^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#798: FILE: ipc/posixmsg.c:619:
+			if (q->notify.sigev_notify == SIGEV_THREAD) {
+				

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#799: FILE: ipc/posixmsg.c:620:
+				err = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:LINE_SPACING: Missing a blank line after declarations
#805: FILE: ipc/posixmsg.c:626:
+				struct siginfo sig_i;
+				sig_i.si_signo = q->notify.sigev_signo;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#824: FILE: ipc/posixmsg.c:645:
+ *^Isys_mq_timedreceive^I-^Ireceive a message from the queue associated $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#835: FILE: ipc/posixmsg.c:656:
+		    unsigned int *msg_prio, struct timespec * utime)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#843: FILE: ipc/posixmsg.c:664:
+	struct file *filp = get_filp(mqdes);
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#846: FILE: ipc/posixmsg.c:667:
+	if (!(q = get_mqueue(filp)))
 	                     ^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#846: FILE: ipc/posixmsg.c:667:
+	if (!(q = get_mqueue(filp)))

ERROR:SPACING: space prohibited after that open parenthesis '('
#849: FILE: ipc/posixmsg.c:670:
+		ERROUT( -EMSGSIZE);

ERROR:SPACING: space prohibited after that open parenthesis '('
#851: FILE: ipc/posixmsg.c:672:
+	if ( !(filp->f_mode & FMODE_READ))

ERROR:SPACING: space prohibited after that open parenthesis '('
#852: FILE: ipc/posixmsg.c:673:
+		ERROUT( -EBADF);

ERROR:SPACING: space prohibited after that open parenthesis '('
#856: FILE: ipc/posixmsg.c:677:
+		ERROUT( -EAGAIN);

CHECK:BRACES: braces {} should be used on all arms of this statement
#858: FILE: ipc/posixmsg.c:679:
+	if (utime) {
[...]
+	} else
[...]

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#859: FILE: ipc/posixmsg.c:680:
+		if (copy_from_user(&ts, utime, sizeof (ts)))

ERROR:SPACING: space prohibited after that open parenthesis '('
#860: FILE: ipc/posixmsg.c:681:
+			ERROUT( -EFAULT);

ERROR:SPACING: space prohibited after that open parenthesis '('
#862: FILE: ipc/posixmsg.c:683:
+		if ( err == -EINVAL )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#862: FILE: ipc/posixmsg.c:683:
+		if ( err == -EINVAL )

ERROR:SPACING: space prohibited after that open parenthesis '('
#863: FILE: ipc/posixmsg.c:684:
+			ERROUT( err);

CHECK:BRACES: Unbalanced braces around else statement
#865: FILE: ipc/posixmsg.c:686:
+	} else

ERROR:SPACING: space required before the open brace '{'
#872: FILE: ipc/posixmsg.c:693:
+	if (queue->q_qnum == 0 ){

ERROR:SPACING: space prohibited before that close parenthesis ')'
#872: FILE: ipc/posixmsg.c:693:
+	if (queue->q_qnum == 0 ){

ERROR:SPACING: space required before the open brace '{'
#873: FILE: ipc/posixmsg.c:694:
+		if (unlikely(timeout < 0)){

WARNING:LINE_SPACING: Missing a blank line after declarations
#878: FILE: ipc/posixmsg.c:699:
+		wait_queue_t __wait;
+		init_waitqueue_entry(&__wait, current);

ERROR:SPACING: space prohibited after that open parenthesis '('
#883: FILE: ipc/posixmsg.c:704:
+			if ( queue->q_qnum > 0)

ERROR:SPACING: space required before the open brace '{'
#899: FILE: ipc/posixmsg.c:720:
+		if (unlikely(timeout == -ERESTARTSYS)){

ERROR:SPACING: space required before the open brace '{'
#903: FILE: ipc/posixmsg.c:724:
+		if (unlikely(timeout == 0)){

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#911: FILE: ipc/posixmsg.c:732:
+	msg=list_entry(queue->q_messages.next, struct msg_msg, m_list);
 	   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#917: FILE: ipc/posixmsg.c:738:
+	inode=filp->f_dentry->d_inode;
 	     ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#927: FILE: ipc/posixmsg.c:748:
+	if ( put_msg(msg_ptr, msg, msg_len) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#928: FILE: ipc/posixmsg.c:749:
+	if ( put_msg(msg_ptr, msg, msg_len) ||
+		( msg_prio && put_user(msg->m_type, msg_prio))) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#928: FILE: ipc/posixmsg.c:749:
+		( msg_prio && put_user(msg->m_type, msg_prio))) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#932: FILE: ipc/posixmsg.c:753:
+^I$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#933: FILE: ipc/posixmsg.c:754:
+	fput(filp);
 	     ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#943: FILE: ipc/posixmsg.c:764:
+ *^Isys_mq_notify^I-^Iset or remove a notification on the queue associated $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#946: FILE: ipc/posixmsg.c:767:
+ *^I@u_notification: pointer to struct sigevent $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#953: FILE: ipc/posixmsg.c:774:
+	struct file *filp = get_filp(mqdes);
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#957: FILE: ipc/posixmsg.c:778:
+	if (!(q = get_mqueue(filp)))
 	                     ^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#957: FILE: ipc/posixmsg.c:778:
+	if (!(q = get_mqueue(filp)))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "u_notification"
#959: FILE: ipc/posixmsg.c:780:
+	if (u_notification != NULL)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#961: FILE: ipc/posixmsg.c:782:
+		    (&notify, u_notification, sizeof (struct sigevent)))

ERROR:SPACING: space prohibited after that open parenthesis '('
#962: FILE: ipc/posixmsg.c:783:
+			ERROUT( -EFAULT);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#966: FILE: ipc/posixmsg.c:787:
+	if (q->notify_pid == current->pid
+	    && (u_notification == NULL || notify.sigev_notify == SIGEV_NONE)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!u_notification"
#966: FILE: ipc/posixmsg.c:787:
+	    && (u_notification == NULL || notify.sigev_notify == SIGEV_NONE)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "u_notification"
#972: FILE: ipc/posixmsg.c:793:
+	} else if (u_notification != NULL) {

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#979: FILE: ipc/posixmsg.c:800:
+			err = -ENOSYS;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#988: FILE: ipc/posixmsg.c:809:
+static inline void $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#989: FILE: ipc/posixmsg.c:810:
+fill_flags(struct mqueue_ds *q, struct file *filp)
                                              ^^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#992: FILE: ipc/posixmsg.c:813:
+	q->attr.mq_flags = (filp->f_mode -1) & O_ACCMODE;
 	                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#999: FILE: ipc/posixmsg.c:820:
+ *^Isys_mq_getattr^I-^Iget the attributes of the queue associated $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1010: FILE: ipc/posixmsg.c:831:
+	struct file *filp = get_filp(mqdes);
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1012: FILE: ipc/posixmsg.c:833:
+	if (!(q = get_mqueue(filp)))
 	                     ^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1012: FILE: ipc/posixmsg.c:833:
+	if (!(q = get_mqueue(filp)))

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1015: FILE: ipc/posixmsg.c:836:
+	fill_flags(q,filp);
 	             ^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1015: FILE: ipc/posixmsg.c:836:
+	fill_flags(q,filp);
 	            ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1016: FILE: ipc/posixmsg.c:837:
+	if (copy_to_user(u_mqstat, &q->attr, sizeof (struct mq_attr)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1023: FILE: ipc/posixmsg.c:844:
+ *^Isys_mq_setattr^I-^Iset the attributes of the queue associated $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1036: FILE: ipc/posixmsg.c:857:
+	struct file *filp = get_filp(mqdes);
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1039: FILE: ipc/posixmsg.c:860:
+	if (!(q = get_mqueue(filp)))
 	                     ^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1039: FILE: ipc/posixmsg.c:860:
+	if (!(q = get_mqueue(filp)))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "u_omqstat"
#1042: FILE: ipc/posixmsg.c:863:
+	if (u_omqstat != NULL) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1043: FILE: ipc/posixmsg.c:864:
+		fill_flags(q,filp);
 		             ^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1043: FILE: ipc/posixmsg.c:864:
+		fill_flags(q,filp);
 		            ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1044: FILE: ipc/posixmsg.c:865:
+		if (copy_to_user(u_omqstat, &q->attr, sizeof (struct mq_attr)))

ERROR:SPACING: space prohibited after that open parenthesis '('
#1045: FILE: ipc/posixmsg.c:866:
+			ERROUT( -EFAULT);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1047: FILE: ipc/posixmsg.c:868:
+	if (copy_from_user(&mqstat, u_mqstat, sizeof (struct mq_attr)))

ERROR:SPACING: space prohibited after that open parenthesis '('
#1048: FILE: ipc/posixmsg.c:869:
+		ERROUT( -EFAULT);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1069: FILE: ipc/posixmsg.c:890:
+	static const struct qstr this={ .name="msg:", .len=4, .hash=0 };
 	                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1069: FILE: ipc/posixmsg.c:890:
+	static const struct qstr this={ .name="msg:", .len=4, .hash=0 };
 	                                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1069: FILE: ipc/posixmsg.c:890:
+	static const struct qstr this={ .name="msg:", .len=4, .hash=0 };
 	                                                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1069: FILE: ipc/posixmsg.c:890:
+	static const struct qstr this={ .name="msg:", .len=4, .hash=0 };
 	                                                           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1070: FILE: ipc/posixmsg.c:891:
+^I$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#1076: FILE: ipc/posixmsg.c:897:
+	root = get_msg_inode(sb, S_IFDIR | S_IRWXUGO | S_ISVTX);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1089: FILE: ipc/posixmsg.c:910:
+	iput(root);
 	^^^^

ERROR:SPACING: space required before the open brace '{'
#1112: FILE: ipc/posixmsg.c:933:
+	if (!err){

ERROR:SPACING: space required before the open brace '{'
#1113: FILE: ipc/posixmsg.c:934:
+		if (IS_ERR(msg_mnt = kern_mount(&msg_fs_type))){

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1113: FILE: ipc/posixmsg.c:934:
+		if (IS_ERR(msg_mnt = kern_mount(&msg_fs_type))){

CHECK:BRACES: braces {} should be used on all arms of this statement
#1113: FILE: ipc/posixmsg.c:934:
+		if (IS_ERR(msg_mnt = kern_mount(&msg_fs_type))){
[...]
+		} else
[...]

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#1115: FILE: ipc/posixmsg.c:936:
+			err= PTR_ERR(msg_mnt);
 			   ^

CHECK:BRACES: Unbalanced braces around else statement
#1116: FILE: ipc/posixmsg.c:937:
+		} else

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1117: FILE: ipc/posixmsg.c:938:
+			err=0;
 			   ^

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#1123: FILE: ipc/posixmsg.c:944:
+__initcall(mqueue_init);

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#1132: FILE: MAINTAINERS:1562:
+P:	Peter Wächtler
   	       ^

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#1133: FILE: MAINTAINERS:1563:
+P:	Peter Wächtler
+M:	pwaechtler@mac.com

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1161: FILE: ipc/util.c:742:
+asmlinkage mqd_t sys_mq_open(const char *u_path, int oflag, mode_t mode,
+	struct mq_attr *u_attr)

CHECK:SPACING: No space is necessary after a cast
#1163: FILE: ipc/util.c:744:
+	return (mqd_t) -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1163: FILE: ipc/util.c:744:
+	return (mqd_t) -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1168: FILE: ipc/util.c:749:
+	return -ENOSYS;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1171: FILE: ipc/util.c:752:
+asmlinkage int sys_mq_timedsend(mqd_t mqdes, const char *msg_ptr, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1172: FILE: ipc/util.c:753:
+asmlinkage int sys_mq_timedsend(mqd_t mqdes, const char *msg_ptr, 
+	size_t msg_len, unsigned int msg_prio, struct timespec *utime)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1174: FILE: ipc/util.c:755:
+	return -ENOSYS;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1177: FILE: ipc/util.c:758:
+asmlinkage ssize_t sys_mq_timedreceive(mqd_t mqdes, char *msg_ptr, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1178: FILE: ipc/util.c:759:
+asmlinkage ssize_t sys_mq_timedreceive(mqd_t mqdes, char *msg_ptr, 
+	size_t msg_len, unsigned int *msg_prio, struct timespec *utime)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1180: FILE: ipc/util.c:761:
+	return -ENOSYS;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1184: FILE: ipc/util.c:765:
+asmlinkage int sys_mq_notify(mqd_t mqdes,
+	const struct sigevent *u_notification)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1186: FILE: ipc/util.c:767:
+	return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1191: FILE: ipc/util.c:772:
+	return -ENOSYS;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1195: FILE: ipc/util.c:776:
+asmlinkage int sys_mq_setattr(mqd_t mqdes, const struct mq_attr *u_mqstat,
+	struct mq_attr *u_omqstat)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1197: FILE: ipc/util.c:778:
+	return -ENOSYS;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000332579.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 109 errors, 89 warnings, 58 checks, 1127 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000332579.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
