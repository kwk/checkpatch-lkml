WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#160: 
diff -urpN -X dontdiff linux-2.6.12-rc6/arch/i386/Kconfig linux-2.6.12-rc6-ctrRCU/arch/i386/Kconfig

WARNING:LINE_SPACING: Missing a blank line after declarations
#207: FILE: fs/proc/proc_misc.c:557:
+	int len;
+	extern int rcu_read_proc_data(char *page);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#207: FILE: fs/proc/proc_misc.c:557:
+	extern int rcu_read_proc_data(char *page);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LINE_SPACING: Missing a blank line after declarations
#217: FILE: fs/proc/proc_misc.c:567:
+	int len;
+	extern int rcu_read_proc_gp_data(char *page);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#217: FILE: fs/proc/proc_misc.c:567:
+	extern int rcu_read_proc_gp_data(char *page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#227: FILE: fs/proc/proc_misc.c:577:
+	int len;
+	extern int rcu_read_proc_ptrs_data(char *page);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#227: FILE: fs/proc/proc_misc.c:577:
+	extern int rcu_read_proc_ptrs_data(char *page);

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_bh', prefer 'call_rcu' instead
#268: FILE: include/linux/rcupdate.h:200:
+#define call_rcu_bh(head, rcu) call_rcu(head, rcu)

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#270: FILE: include/linux/rcupdate.h:202:
+extern void rcu_read_lock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#271: FILE: include/linux/rcupdate.h:203:
+extern void rcu_read_unlock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#272: FILE: include/linux/rcupdate.h:204:
+extern int rcu_pending(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#309: FILE: include/linux/rcupdate.h:296:
+extern void synchronize_sched(void);

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#309: FILE: include/linux/rcupdate.h:296:
+extern void synchronize_sched(void);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#395: FILE: kernel/rcupdate.c:481:
+EXPORT_SYMBOL(call_rcu);  /* WARNING: GPL-only in April 2006. */

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#396: FILE: kernel/rcupdate.c:482:
+EXPORT_SYMBOL(call_rcu_bh);  /* WARNING: GPL-only in April 2006. */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#398: FILE: kernel/rcupdate.c:484:
+EXPORT_SYMBOL(synchronize_kernel);  /* WARNING: GPL-only in April 2006. */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#456: FILE: kernel/rcupdate.c:542:
+};
+struct rcu_ctrlblk {

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#457: FILE: kernel/rcupdate.c:543:
+	spinlock_t	fliplock;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#460: FILE: kernel/rcupdate.c:546:
 };
+static struct rcu_data rcu_data;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#465: FILE: kernel/rcupdate.c:551:
+};
+static DEFINE_PER_CPU(atomic_t [2], rcu_flipctr) =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#466: FILE: kernel/rcupdate.c:552:
+static DEFINE_PER_CPU(atomic_t [2], rcu_flipctr) =
+	{ ATOMIC_INIT(0), ATOMIC_INIT(0) };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#481: FILE: kernel/rcupdate.c:562:
+	if (current->rcu_read_lock_nesting++ == 0) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#494: FILE: kernel/rcupdate.c:575:
+		if (unlikely(flipctr != (rcu_ctrlblk.batch & 0x1))) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#531: FILE: kernel/rcupdate.c:612:
+	if (--current->rcu_read_lock_nesting == 0) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "current->rcu_flipctr2"
#542: FILE: kernel/rcupdate.c:623:
+		if (unlikely(current->rcu_flipctr2 != NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#555: FILE: kernel/rcupdate.c:636:
+{
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.waitlist"
#563: FILE: kernel/rcupdate.c:644:
+		if (rcu_data.waitlist != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.nextlist"
#575: FILE: kernel/rcupdate.c:656:
+		if (rcu_data.nextlist != NULL) {

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#630: FILE: kernel/rcupdate.c:701:
+#if 0

ERROR:TRAILING_WHITESPACE: trailing whitespace
#634: FILE: kernel/rcupdate.c:705:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#634: FILE: kernel/rcupdate.c:705:
+	if (unlikely(flipctr != rcu_data.batch)) {
+	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#671: FILE: kernel/rcupdate.c:742:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcu_data.donelist"
#686: FILE: kernel/rcupdate.c:757:
+	if (rcu_data.donelist == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!list"
#705: FILE: kernel/rcupdate.c:776:
+	if (list == NULL) {

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#753: FILE: kernel/rcupdate.c:823:
+synchronize_sched(void)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#762: FILE: kernel/rcupdate.c:828:
+	if (sched_getaffinity(0, &oldmask) < 0) {
+		oldmask = cpu_possible_map; 
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#763: FILE: kernel/rcupdate.c:829:
+^I^Ioldmask = cpu_possible_map; $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.donelist"
#777: FILE: kernel/rcupdate.c:841:
+	return (rcu_data.donelist != NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.waitlist"
#778: FILE: kernel/rcupdate.c:842:
+		rcu_data.waitlist != NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_data.nextlist"
#779: FILE: kernel/rcupdate.c:843:
+		rcu_data.nextlist != NULL);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#784: FILE: kernel/rcupdate.c:848:
+/*&&&&*/printk("WARNING: experimental RCU implementation.\n");

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#801: FILE: kernel/rcupdate.c:865:
+	synchronize_sched();

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#864: FILE: kernel/rcupdate.c:925:
+EXPORT_SYMBOL(call_rcu); /* WARNING: GPL-only in April 2006. */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#868: FILE: kernel/rcupdate.c:928:
+EXPORT_SYMBOL(rcu_read_lock);  /* WARNING: GPL-only in April 2006. */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#869: FILE: kernel/rcupdate.c:929:
+EXPORT_SYMBOL(rcu_read_unlock);  /* WARNING: GPL-only in April 2006. */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#870: FILE: kernel/rcupdate.c:930:
+EXPORT_SYMBOL(synchronize_kernel);  /* WARNING: Removal in April 2006. */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000168288.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 21 warnings, 21 checks, 687 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000168288.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
