WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
POSIX requires that when you claim _POSIX_CPUTIME and _POSIX_THREAD_CPUTIME,

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu_timers' - possible side-effects?
#65: FILE: include/linux/init_task.h:120:
+#define INIT_CPU_TIMERS(cpu_timers)					\
+{									\
+	LIST_HEAD_INIT(cpu_timers[0]),					\
+	LIST_HEAD_INIT(cpu_timers[1]),					\
+	LIST_HEAD_INIT(cpu_timers[2]),					\
+}

CHECK:SPACING: No space is necessary after a cast
#95: FILE: include/linux/posix-timers.h:20:
+#define CPUCLOCK_PID(clock)		((pid_t) ~((clock) >> 3))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (14, 19)
#139: FILE: include/linux/posix-timers.h:106:
               if (delta >= 0) {						\
+	           orun = 1 + (delta / (timr)->it.real.incr);		\

ERROR:CODE_INDENT: code indent should use tabs where possible
#142: FILE: include/linux/posix-timers.h:107:
+^I           orun = 1 + (delta / (timr)->it.real.incr);^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#143: FILE: include/linux/posix-timers.h:108:
+^I          (timr)->it.real.timer.expires +=^I^I^I\$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct k_itimer *' should also have an identifier name
#159: FILE: include/linux/posix-timers.h:124:
+void posix_cpu_timer_schedule(struct k_itimer *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#161: FILE: include/linux/posix-timers.h:126:
+void run_posix_cpu_timers(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#162: FILE: include/linux/posix-timers.h:127:
+void posix_cpu_timers_exit(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#163: FILE: include/linux/posix-timers.h:128:
+void posix_cpu_timers_exit_group(struct task_struct *);

ERROR:CODE_INDENT: code indent should use tabs where possible
#183: FILE: include/linux/sched.h:617:
+  ^Icputime_t it_prof_expires, it_virt_expires;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#183: FILE: include/linux/sched.h:617:
+  ^Icputime_t it_prof_expires, it_virt_expires;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: include/linux/sched.h:617:
+  ^Icputime_t it_prof_expires, it_virt_expires;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: kernel/exit.c:762:
+ ^Itsk->it_virt_expires = cputime_zero;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#196: FILE: kernel/exit.c:762:
+ ^Itsk->it_virt_expires = cputime_zero;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: kernel/exit.c:762:
+ ^Itsk->it_virt_expires = cputime_zero;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: kernel/exit.c:763:
+ ^Itsk->it_prof_expires = cputime_zero;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#197: FILE: kernel/exit.c:763:
+ ^Itsk->it_prof_expires = cputime_zero;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: kernel/exit.c:763:
+ ^Itsk->it_prof_expires = cputime_zero;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#218: FILE: kernel/fork.c:894:
+ ^Ip->it_virt_expires = cputime_zero;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#218: FILE: kernel/fork.c:894:
+ ^Ip->it_virt_expires = cputime_zero;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: kernel/fork.c:894:
+ ^Ip->it_virt_expires = cputime_zero;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#220: FILE: kernel/fork.c:896:
+ ^Ip->it_sched_expires = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#220: FILE: kernel/fork.c:896:
+ ^Ip->it_sched_expires = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: kernel/fork.c:896:
+ ^Ip->it_sched_expires = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: kernel/fork.c:897:
+ ^IINIT_LIST_HEAD(&p->cpu_timers[0]);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#221: FILE: kernel/fork.c:897:
+ ^IINIT_LIST_HEAD(&p->cpu_timers[0]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: kernel/fork.c:897:
+ ^IINIT_LIST_HEAD(&p->cpu_timers[0]);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#222: FILE: kernel/fork.c:898:
+ ^IINIT_LIST_HEAD(&p->cpu_timers[1]);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#222: FILE: kernel/fork.c:898:
+ ^IINIT_LIST_HEAD(&p->cpu_timers[1]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: kernel/fork.c:898:
+ ^IINIT_LIST_HEAD(&p->cpu_timers[1]);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#223: FILE: kernel/fork.c:899:
+ ^IINIT_LIST_HEAD(&p->cpu_timers[2]);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#223: FILE: kernel/fork.c:899:
+ ^IINIT_LIST_HEAD(&p->cpu_timers[2]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: kernel/fork.c:899:
+ ^IINIT_LIST_HEAD(&p->cpu_timers[2]);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#267: FILE: kernel/posix-cpu-timers.c:37:
+	union cpu_time_count ret;
+	ret.sched = 0;		/* high half always zero when .cpu used */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#268: FILE: kernel/posix-cpu-timers.c:38:
+	if (CPUCLOCK_WHICH(which_clock) == CPUCLOCK_SCHED) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#287: FILE: kernel/posix-cpu-timers.c:62:
+	if (CPUCLOCK_WHICH(which_clock) == CPUCLOCK_SCHED) {
[...]
+	}  else {
[...]

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#293: FILE: kernel/posix-cpu-timers.c:68:
+}
+static inline void cpu_time_add(clockid_t which_clock,

ERROR:CODE_INDENT: code indent should use tabs where possible
#295: FILE: kernel/posix-cpu-timers.c:70:
+^I^I^I        union cpu_time_count val)$

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#297: FILE: kernel/posix-cpu-timers.c:72:
+	if (CPUCLOCK_WHICH(which_clock) == CPUCLOCK_SCHED) {
[...]
+	}  else {
[...]

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#303: FILE: kernel/posix-cpu-timers.c:78:
+}
+static inline union cpu_time_count cpu_time_sub(clockid_t which_clock,

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#307: FILE: kernel/posix-cpu-timers.c:82:
+	if (CPUCLOCK_WHICH(which_clock) == CPUCLOCK_SCHED) {
[...]
+	}  else {
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#327: FILE: kernel/posix-cpu-timers.c:102:
+		long long delta;
+		delta = now.sched - timer->it.cpu.expires.sched;

CHECK:SPACING: No space is necessary after a cast
#333: FILE: kernel/posix-cpu-timers.c:108:
+			timer->it_overrun += (int) delta;

WARNING:LINE_SPACING: Missing a blank line after declarations
#340: FILE: kernel/posix-cpu-timers.c:115:
+			long orun = 1 + (delta / timer->it.cpu.incr.cpu);
+			timer->it.cpu.expires.cpu =

CHECK:LINE_SPACING: Please don't use multiple blank lines
#355: FILE: kernel/posix-cpu-timers.c:298:
 
+

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#397: FILE: kernel/posix-cpu-timers.c:335:
+	if (p) {
[...]
+	} else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#422: FILE: kernel/posix-cpu-timers.c:358:
+	if (unlikely(p == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p->signal"
#427: FILE: kernel/posix-cpu-timers.c:363:
+		if (unlikely(p->signal == NULL)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#432: FILE: kernel/posix-cpu-timers.c:368:
+			BUG_ON(!list_empty(&timer->it.cpu.entry));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#488: FILE: kernel/posix-cpu-timers.c:424:
+		if (timer->expires.sched < sched_time) {
[...]
+		} else {
[...]

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#506: FILE: kernel/posix-cpu-timers.c:442:
+
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#507: FILE: kernel/posix-cpu-timers.c:443:
+}
+void posix_cpu_timers_exit_group(struct task_struct *tsk)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#515: FILE: kernel/posix-cpu-timers.c:451:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#530: FILE: kernel/posix-cpu-timers.c:466:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#608: FILE: kernel/posix-cpu-timers.c:544:
+	BUG_ON(!irqs_disabled());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#639: FILE: kernel/posix-cpu-timers.c:575:
+				BUG();

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#640: FILE: kernel/posix-cpu-timers.c:576:
+#define UPDATE_CLOCK(WHICH, c, n)^I^I^I      ^I^I      \$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#640: FILE: kernel/posix-cpu-timers.c:576:
+#define UPDATE_CLOCK(WHICH, c, n)			      		      \
+			case CPUCLOCK_##WHICH: 				      \
+				if (p->it_##c##_expires == 0 ||		      \
+				    p->it_##c##_expires > nt->expires.n) {    \
+					p->it_##c##_expires = nt->expires.n;  \
+				}					      \
+				break

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#640: FILE: kernel/posix-cpu-timers.c:576:
+#define UPDATE_CLOCK(WHICH, c, n)			      		      \
+			case CPUCLOCK_##WHICH: 				      \
+				if (p->it_##c##_expires == 0 ||		      \
+				    p->it_##c##_expires > nt->expires.n) {    \
+					p->it_##c##_expires = nt->expires.n;  \
+				}					      \
+				break

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#641: FILE: kernel/posix-cpu-timers.c:577:
+^I^I^Icase CPUCLOCK_##WHICH: ^I^I^I^I      \$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!timer->sigq"
#669: FILE: kernel/posix-cpu-timers.c:605:
+	if (unlikely(timer->sigq == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#706: FILE: kernel/posix-cpu-timers.c:642:
+	if (unlikely(p == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p->signal"
#721: FILE: kernel/posix-cpu-timers.c:657:
+	if (unlikely(p->signal == NULL)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#731: FILE: kernel/posix-cpu-timers.c:667:
+	BUG_ON(!irqs_disabled());

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#745: FILE: kernel/posix-cpu-timers.c:681:
+	if (CPUCLOCK_PERTHREAD(timer->it_clock)) {
[...]
+	} else {
[...]

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#769: FILE: kernel/posix-cpu-timers.c:705:
+				old_expires = cpu_time_sub(

WARNING:BRACES: braces {} are not necessary for single statement blocks
#795: FILE: kernel/posix-cpu-timers.c:731:
+	if (new_expires.sched != 0 && !(flags & TIMER_ABSTIME)) {
+		cpu_time_add(timer->it_clock, &new_expires, val);
+	}

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#863: FILE: kernel/posix-cpu-timers.c:799:
+		itp->it_value.tv_sec = itp->it_value.tv_nsec = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#867: FILE: kernel/posix-cpu-timers.c:803:
+	if (unlikely(p == NULL)) {

WARNING:INDENTED_LABEL: labels should not be indented
#872: FILE: kernel/posix-cpu-timers.c:808:
+	dead:

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p->signal"
#886: FILE: kernel/posix-cpu-timers.c:822:
+		if (unlikely(p->signal == NULL)) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#914: FILE: kernel/posix-cpu-timers.c:850:
+			itp->it_value.tv_sec = itp->it_value.tv_nsec = 0;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#1141: FILE: kernel/posix-cpu-timers.c:1075:
+	if (unlikely(p == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p->signal"
#1160: FILE: kernel/posix-cpu-timers.c:1094:
+		if (unlikely(p->signal == NULL)) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1166: FILE: kernel/posix-cpu-timers.c:1100:
+			timer->it.cpu.task = p = NULL;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1203: FILE: kernel/posix-cpu-timers.c:1137:
+	BUG_ON(!irqs_disabled());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1216: FILE: kernel/posix-cpu-timers.c:1150:
+	BUG_ON(tsk->exit_state);

WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#1244: FILE: kernel/posix-cpu-timers.c:1178:
+	 * noone will touch their list entries but us.  We'll take
 	   ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#1250: FILE: kernel/posix-cpu-timers.c:1184:
+		int firing;
+		spin_lock(&timer->it_lock);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1259: FILE: kernel/posix-cpu-timers.c:1193:
+		if (likely(firing >= 0)) {
+			cpu_timer_fire(timer);
+		}

WARNING:SIZEOF_PARENTHESIS: sizeof timer should be sizeof(timer)
#1287: FILE: kernel/posix-cpu-timers.c:1221:
+	memset(&timer, 0, sizeof timer);

CHECK:SPACING: No space is necessary after a cast
#1341: FILE: kernel/posix-cpu-timers.c:1275:
+		rmtp = (struct timespec __user *) restart_block->arg1;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rmtp"
#1342: FILE: kernel/posix-cpu-timers.c:1276:
+		if (rmtp != NULL && !(flags & TIMER_ABSTIME) &&

WARNING:SIZEOF_PARENTHESIS: sizeof *rmtp should be sizeof(*rmtp)
#1343: FILE: kernel/posix-cpu-timers.c:1277:
+		    copy_to_user(rmtp, &it.it_value, sizeof *rmtp))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1373: FILE: kernel/posix-cpu-timers.c:1314:
 }
+static int process_cpu_timer_create(struct k_itimer *timer)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1378: FILE: kernel/posix-cpu-timers.c:1319:
+}
+static int process_cpu_nsleep(clockid_t which_clock, int flags,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1391: FILE: kernel/posix-cpu-timers.c:1332:
 }
+static int thread_cpu_timer_create(struct k_itimer *timer)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1396: FILE: kernel/posix-cpu-timers.c:1337:
+}
+static int thread_cpu_nsleep(clockid_t which_clock, int flags,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1397: FILE: kernel/posix-cpu-timers.c:1338:
+static int thread_cpu_nsleep(clockid_t which_clock, int flags,
+			      struct timespec *rqtp)

CHECK:SPACING: No space is necessary after a cast
#1462: FILE: kernel/posix-timers.c:245:
+	new_timer->it.real.timer.data = (unsigned long) new_timer;

CHECK:SPACING: No space is necessary after a cast
#1615: FILE: kernel/posix-timers.c:835:
+	while ((volatile long) (timr->it.real.timer.expires) != expires);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1615: FILE: kernel/posix-timers.c:835:
+	while ((volatile long) (timr->it.real.timer.expires) != expires);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1615: FILE: kernel/posix-timers.c:835:
+	while ((volatile long) (timr->it.real.timer.expires) != expires);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1626: FILE: kernel/posix-timers.c:843:
+		timr->it.real.timer.expires = expires = 0;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around timr->it.real.wall_to_prev
#1684: FILE: kernel/posix-timers.c:1048:
+			    &expire_64, &(timr->it.real.wall_to_prev))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around timr->it.real.abs_timer_entry
#1704: FILE: kernel/posix-timers.c:1064:
+		list_add_tail(&(timr->it.real.abs_timer_entry),

ERROR:CODE_INDENT: code indent should use tabs where possible
#1799: FILE: kernel/timer.c:828:
+ ^Irun_posix_cpu_timers(p);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1799: FILE: kernel/timer.c:828:
+ ^Irun_posix_cpu_timers(p);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1799: FILE: kernel/timer.c:828:
+ ^Irun_posix_cpu_timers(p);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000212841.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 51 warnings, 35 checks, 1690 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000212841.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
