WARNING:TYPO_SPELLING: 'becasue' may be misspelled - perhaps 'because'?
#49: 
I think this got left over becasue of some intermediate trials.. I have
                           ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'choise' may be misspelled - perhaps 'choice'?
#69: 
> spin_lock_bit interface that wli prototypes might be a godd choise.
                                                              ^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#72: 
> Else the patch looks fine to me, although I'm wondering why you target 2.4.17

WARNING:TYPO_SPELLING: 'disscussion' may be misspelled - perhaps 'discussion'?
#76: 
for disscussion.
    ^^^^^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#111: FILE: fs/dcache.c:61:
+	struct dentry * dentry = (struct dentry *)arg;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#113: FILE: fs/dcache.c:63:
+^Iif (dname_external(dentry)) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#115: FILE: fs/dcache.c:65:
+^Ikmem_cache_free(dentry_cache, dentry); $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#360: FILE: fs/dcache.c:772:
+		if (!(dentry->d_vfs_flags & DCACHE_UNHASHED)) {
+			dentry = __dget(dentry);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#388: FILE: fs/dcache.c:881:
+	if (!list_empty(&entry->d_hash) && !d_unhashed(entry)) BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#388: FILE: fs/dcache.c:881:
+	if (!list_empty(&entry->d_hash) && !d_unhashed(entry)) BUG();

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#430: FILE: fs/intermezzo/journal.c:189:
+        if (dentry->d_parent != dentry && d_unhashed(dentry)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#430: FILE: fs/intermezzo/journal.c:189:
+        if (dentry->d_parent != dentry && d_unhashed(dentry)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#454: FILE: fs/readdir.c:82:
+  ^I^I^I^Iif (!d_unhashed(de) && de->d_inode) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#454: FILE: fs/readdir.c:82:
+  ^I^I^I^Iif (!d_unhashed(de) && de->d_inode) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#454: FILE: fs/readdir.c:82:
+  ^I^I^I^Iif (!d_unhashed(de) && de->d_inode) {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#499: FILE: include/linux/dcache.h:130:
+#define DCACHE_UNHASHED^I^I0x0010^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#509: FILE: include/linux/dcache.h:140:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#509: FILE: include/linux/dcache.h:140:
+ $

WARNING:INLINE: plain inline is preferred over __inline__
#510: FILE: include/linux/dcache.h:141:
+static __inline__ int d_unhashed(struct dentry *dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#523: FILE: include/linux/dcache.h:163:
+static __inline__ void __d_drop(struct dentry * dentry)

WARNING:INLINE: plain inline is preferred over __inline__
#523: FILE: include/linux/dcache.h:163:
+static __inline__ void __d_drop(struct dentry * dentry)

WARNING:MEMORY_BARRIER: memory barrier without comment
#527: FILE: include/linux/dcache.h:167:
+		wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#529: FILE: include/linux/dcache.h:169:
+		wmb();

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#544: FILE: include/linux/dcache.h:182:
+static __inline__ void d_drop_locked(struct dentry * dentry)

WARNING:INLINE: plain inline is preferred over __inline__
#544: FILE: include/linux/dcache.h:182:
+static __inline__ void d_drop_locked(struct dentry * dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#578: FILE: include/linux/dcache.h:289:
+static __inline__ struct dentry * __dget(struct dentry *dentry)

WARNING:INLINE: plain inline is preferred over __inline__
#578: FILE: include/linux/dcache.h:289:
+static __inline__ struct dentry * __dget(struct dentry *dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#588: FILE: include/linux/dcache.h:298:
+extern struct dentry * dget_locked(struct dentry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#588: FILE: include/linux/dcache.h:298:
+extern struct dentry * dget_locked(struct dentry *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000447329.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 16 warnings, 1 checks, 461 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000447329.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
