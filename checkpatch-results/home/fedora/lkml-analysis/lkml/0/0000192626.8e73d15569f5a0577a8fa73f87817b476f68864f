WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
could pass "force_ohci1394=off" on the kernel command line. The feature added

WARNING:TYPO_SPELLING: 'som' may be misspelled - perhaps 'some'?
#30: 
live cd on som exotic hardware that makes built-in drivers crash.
           ^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#53: FILE: include/linux/init.h:154:
+__setup("force_" __stringify(KBUILD_MODNAME) "=off", x##_disable_module)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#63: FILE: include/linux/init.h:166:
+#define module_init(x)^I__initcall(x); __module_init_disable(x);  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#63: FILE: include/linux/init.h:166:
+#define module_init(x)	__initcall(x); __module_init_disable(x);  

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#63: FILE: include/linux/init.h:166:
+#define module_init(x)	__initcall(x); __module_init_disable(x);  

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#63: FILE: include/linux/init.h:166:
+#define module_init(x)	__initcall(x); __module_init_disable(x);  

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#79: FILE: init/main.c:547:
+	for (call = __initcall_start; call < __initcall_end; call++) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000192626.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 3 warnings, 3 checks, 50 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000192626.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
