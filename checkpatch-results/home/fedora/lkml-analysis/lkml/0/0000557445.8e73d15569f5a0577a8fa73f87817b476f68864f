WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#73: 
diff -u --recursive linux-clean/arch/i386/kernel/apm.c linux-hacked-pmpolicy/arch/i386/kernel/apm.c

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - int soft_suspend() should probably be int soft_suspend(void)
#89: FILE: arch/i386/kernel/apm.c:889:
+static int soft_suspend()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

WARNING:LINE_SPACING: Missing a blank line after declarations
#92: FILE: arch/i386/kernel/apm.c:892:
+	struct pm_event pe;
+	memset(&pe,0,sizeof pe);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#92: FILE: arch/i386/kernel/apm.c:892:
+	memset(&pe,0,sizeof pe);
 	          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#92: FILE: arch/i386/kernel/apm.c:892:
+	memset(&pe,0,sizeof pe);
 	            ^

WARNING:SIZEOF_PARENTHESIS: sizeof pe should be sizeof(pe)
#92: FILE: arch/i386/kernel/apm.c:892:
+	memset(&pe,0,sizeof pe);

WARNING:LINE_SPACING: Missing a blank line after declarations
#104: FILE: arch/i386/kernel/apm.c:904:
+	struct pm_event pe;
+	memset(&pe,0,sizeof pe);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#104: FILE: arch/i386/kernel/apm.c:904:
+	memset(&pe,0,sizeof pe);
 	          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#104: FILE: arch/i386/kernel/apm.c:904:
+	memset(&pe,0,sizeof pe);
 	            ^

WARNING:SIZEOF_PARENTHESIS: sizeof pe should be sizeof(pe)
#104: FILE: arch/i386/kernel/apm.c:904:
+	memset(&pe,0,sizeof pe);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#112: FILE: arch/i386/kernel/apm.c:912:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#117: FILE: arch/i386/kernel/apm.c:917:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#141: FILE: arch/i386/kernel/apm.c:928:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#146: FILE: arch/i386/kernel/apm.c:933:
+^I^I$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#151: FILE: arch/i386/kernel/apm.c:938:
+	if(pm_prepare_for_event(&pe))
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#151: FILE: arch/i386/kernel/apm.c:938:
+	if(pm_prepare_for_event(&pe))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#154: FILE: arch/i386/kernel/apm.c:941:
+			printk(KERN_CRIT "apm: critical suspend was vetoed, expect armageddon\n" );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#154: FILE: arch/i386/kernel/apm.c:941:
+			printk(KERN_CRIT "apm: critical suspend was vetoed, expect armageddon\n" );

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#171: FILE: arch/i386/kernel/apm.c:967:
+	 * end of this suspend is holding the lock */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#180: FILE: arch/i386/kernel/apm.c:989:
+static int apm_enter_state(pm_state_t*ps)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#182: FILE: arch/i386/kernel/apm.c:991:
+	switch(*ps){

ERROR:SPACING: space required before the open parenthesis '('
#182: FILE: arch/i386/kernel/apm.c:991:
+	switch(*ps){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#202: FILE: arch/i386/kernel/apm.c:1076:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: arch/i386/kernel/apm.c:1078:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#223: FILE: arch/i386/kernel/apm.c:1101:
+^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#238: FILE: arch/i386/kernel/apm.c:1125:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#240: FILE: arch/i386/kernel/apm.c:1127:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: arch/i386/kernel/apm.c:1310:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#262: FILE: arch/i386/kernel/apm.c:1318:
+^I^I^I$

CHECK:SPACING: No space is necessary after a cast
#271: FILE: arch/i386/kernel/apm.c:1356:
+			(void) soft_suspend();

WARNING:NEW_TYPEDEFS: do not add new typedefs
#295: FILE: include/linux/pm.h:33:
+typedef int pm_state_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#296: FILE: include/linux/pm.h:34:
+typedef int pm_source_t;

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#299: FILE: include/linux/pm.h:37:
+struct pm_event
+{

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#302: FILE: include/linux/pm.h:40:
+	unsigned pe_flags;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#304: FILE: include/linux/pm.h:42:
+}
+;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#318: FILE: include/linux/pm.h:56:
+		/* The user clicked suspend in the GUI, or a program decided
+		    by itself */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#318: FILE: include/linux/pm.h:56:
+		    by itself */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#319: FILE: include/linux/pm.h:57:
+^I^I   $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#326: FILE: include/linux/pm.h:64:
+}
+;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#334: FILE: include/linux/pm.h:72:
+
+

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#343: FILE: include/linux/pm.h:156:
+extern int (*pm_enter_state)(pm_state_t*ps);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#348: FILE: include/linux/pm.h:161:
 
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#356: FILE: include/linux/pm.h:189:
 
+

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#360: FILE: include/linux/pm.h:193:
+int pm_request_event(struct pm_event*pe);

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#372: FILE: include/linux/pm.h:205:
+int pm_prepare_for_event(struct pm_event*pe);

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void pm_event_lock() should probably be void pm_event_lock(void)
#384: FILE: include/linux/pm.h:217:
+void pm_event_lock();

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void pm_event_unlock() should probably be void pm_event_unlock(void)
#385: FILE: include/linux/pm.h:218:
+void pm_event_unlock();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#387: FILE: include/linux/pm.h:220:
+
+

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#397: FILE: include/linux/pm.h:254:
+extern inline int pm_request_event(struct pm_event*pe)

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#402: FILE: include/linux/pm.h:259:
+extern inline int pm_prepare_for_event(struct pm_event*pe)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#407: FILE: include/linux/pm.h:264:
+extern inline void pm_event_lock() $

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void pm_event_lock() should probably be void pm_event_lock(void)
#407: FILE: include/linux/pm.h:264:
+extern inline void pm_event_lock() 

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - extrn inline void pm_event_unlock() should probably be extrn inline void pm_event_unlock(void)
#411: FILE: include/linux/pm.h:268:
+extrn inline void pm_event_unlock()

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#423: FILE: include/linux/sysctl.h:120:
+	KERN_POWERMANAGER=50,   /* string: path to PM policy agent */
 	                 ^

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#432: FILE: kernel/pm.c:17:
  *  along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#433: FILE: kernel/pm.c:18:
  *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#447: FILE: kernel/pm.c:32:
+#include <asm/uaccess.h>

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#455: FILE: kernel/pm.c:40:
+int (*pm_enter_state)(pm_state_t*ps); /* = 0 */

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#476: FILE: kernel/pm.c:230:
+static inline char* state2a(pm_state_t* s)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#476: FILE: kernel/pm.c:230:
+static inline char* state2a(pm_state_t* s)

ERROR:SPACING: space required before the open brace '{'
#478: FILE: kernel/pm.c:232:
+	switch(*s){

ERROR:SPACING: space required before the open parenthesis '('
#478: FILE: kernel/pm.c:232:
+	switch(*s){

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#486: FILE: kernel/pm.c:240:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#491: FILE: kernel/pm.c:245:
+static inline char* source2a(pm_source_t* s)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#491: FILE: kernel/pm.c:245:
+static inline char* source2a(pm_source_t* s)

ERROR:SPACING: space required before the open brace '{'
#493: FILE: kernel/pm.c:247:
+	switch(*s){

ERROR:SPACING: space required before the open parenthesis '('
#493: FILE: kernel/pm.c:247:
+	switch(*s){

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#501: FILE: kernel/pm.c:255:
+		BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#506: FILE: kernel/pm.c:260:
+/* $

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#516: FILE: kernel/pm.c:270:
+static int exec_policyhelper(void*p)

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#518: FILE: kernel/pm.c:272:
+	static char * envp[] = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#518: FILE: kernel/pm.c:272:
+	static char * envp[] = {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#524: FILE: kernel/pm.c:278:
+	struct pm_event*pe=(struct pm_event*)p;

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#524: FILE: kernel/pm.c:278:
+	struct pm_event*pe=(struct pm_event*)p;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#524: FILE: kernel/pm.c:278:
+	struct pm_event*pe=(struct pm_event*)p;
 	                  ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#525: FILE: kernel/pm.c:279:
+	char* source = source2a(&pe->pe_source);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#526: FILE: kernel/pm.c:280:
+	char* state = state2a(&pe->pe_state);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#527: FILE: kernel/pm.c:281:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#528: FILE: kernel/pm.c:282:
+^Ichar*argv[] = $

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#528: FILE: kernel/pm.c:282:
+	char*argv[] = 

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#529: FILE: kernel/pm.c:283:
+	char*argv[] = 
+		{

ERROR:SPACING: space required after that ',' (ctx:VxV)
#539: FILE: kernel/pm.c:293:
+	ret = exec_usermodehelper(pm_policyhelper_path,argv,envp);
 	                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#539: FILE: kernel/pm.c:293:
+	ret = exec_usermodehelper(pm_policyhelper_path,argv,envp);
 	                                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#540: FILE: kernel/pm.c:294:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#541: FILE: kernel/pm.c:295:
+	printk(KERN_ERR "pm: unable to exec \"%s\" (ret == %d, errno == %d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#542: FILE: kernel/pm.c:296:
+	printk(KERN_ERR "pm: unable to exec \"%s\" (ret == %d, errno == %d)\n",
+		       pm_policyhelper_path,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#550: FILE: kernel/pm.c:304:
+ */^I $

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#551: FILE: kernel/pm.c:305:
+static int event_policy(struct pm_event*pe)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#558: FILE: kernel/pm.c:312:
+		printk(KERN_ERR "pm: unable to query userspace as root fs not mounted\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#561: FILE: kernel/pm.c:315:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#564: FILE: kernel/pm.c:318:
+		printk(KERN_ERR "pm: fork failed (errno == %d)\n", -pid);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#571: FILE: kernel/pm.c:325:
+^I^Iset_fs(KERNEL_DS); $

WARNING:LINE_SPACING: Missing a blank line after declarations
#571: FILE: kernel/pm.c:325:
+		mm_segment_t fs = get_fs();
+		set_fs(KERNEL_DS); 

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#577: FILE: kernel/pm.c:331:
+		printk(KERN_ERR "pm: waitpid (pid==%d) failed (errno = %d, ret = %d)\n", pid, err, ret);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#577: FILE: kernel/pm.c:331:
+		printk(KERN_ERR "pm: waitpid (pid==%d) failed (errno = %d, ret = %d)\n", pid, err, ret);

ERROR:SPACING: space required before the open parenthesis '('
#581: FILE: kernel/pm.c:335:
+	if(ret > 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#582: FILE: kernel/pm.c:336:
+		printk(KERN_DEBUG "pm: userspace policy vetoed event (returning %d)\n",

ERROR:SPACING: space required before the open parenthesis '('
#586: FILE: kernel/pm.c:340:
+	if(ret == 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#591: FILE: kernel/pm.c:345:
+	printk(KERN_DEBUG "pm: userspace policy command returned failure: %d\n", ret );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#591: FILE: kernel/pm.c:345:
+	printk(KERN_DEBUG "pm: userspace policy command returned failure: %d\n", ret );

CHECK:LINE_SPACING: Please don't use multiple blank lines
#595: FILE: kernel/pm.c:349:
+
+

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void pm_event_lock() should probably be void pm_event_lock(void)
#616: FILE: kernel/pm.c:370:
+void pm_event_lock()

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#620: FILE: kernel/pm.c:374:
+}
+void pm_event_unlock()

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void pm_event_unlock() should probably be void pm_event_unlock(void)
#620: FILE: kernel/pm.c:374:
+void pm_event_unlock()

CHECK:LINE_SPACING: Please don't use multiple blank lines
#625: FILE: kernel/pm.c:379:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#626: FILE: kernel/pm.c:380:
+int pm_prepare_for_event(struct pm_event*pe) $

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#626: FILE: kernel/pm.c:380:
+int pm_prepare_for_event(struct pm_event*pe) 

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#629: FILE: kernel/pm.c:383:
+	void*data;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#631: FILE: kernel/pm.c:385:
+	if(pe->pe_flags & PME_FLAGS_REJECTABLE)
+	{

ERROR:SPACING: space required before the open parenthesis '('
#631: FILE: kernel/pm.c:385:
+	if(pe->pe_flags & PME_FLAGS_REJECTABLE)

ERROR:SPACING: space required before the open parenthesis '('
#633: FILE: kernel/pm.c:387:
+		if(!event_policy(pe))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#636: FILE: kernel/pm.c:390:
+^I$

ERROR:SPACING: space required before the open brace '{'
#637: FILE: kernel/pm.c:391:
+	switch(pe->pe_state){

ERROR:SPACING: space required before the open parenthesis '('
#637: FILE: kernel/pm.c:391:
+	switch(pe->pe_state){

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#640: FILE: kernel/pm.c:394:
+		data = (void*)3; /* Map suspend to ACPI D3 */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#649: FILE: kernel/pm.c:403:
+		BUG();

ERROR:SPACING: space required after that ',' (ctx:VxV)
#653: FILE: kernel/pm.c:407:
+	if(pm_send_all(req,data))
 	                  ^

ERROR:SPACING: space required before the open parenthesis '('
#653: FILE: kernel/pm.c:407:
+	if(pm_send_all(req,data))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#655: FILE: kernel/pm.c:409:
+^I$

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#674: FILE: kernel/pm.c:428:
+int pm_request_event(struct pm_event*pe)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#679: FILE: kernel/pm.c:433:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#680: FILE: kernel/pm.c:434:
+	v=pm_prepare_for_event(pe);
 	 ^

ERROR:SPACING: space required before the open parenthesis '('
#681: FILE: kernel/pm.c:435:
+	if(v)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#684: FILE: kernel/pm.c:438:
+	if(!pm_enter_state)
+	{

ERROR:SPACING: space required before the open parenthesis '('
#684: FILE: kernel/pm.c:438:
+	if(!pm_enter_state)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#686: FILE: kernel/pm.c:440:
+		v=2;
 		 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#691: FILE: kernel/pm.c:445:
+^I$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#705: FILE: kernel/pm.c:482:
+EXPORT_SYMBOL(pm_event_unlock);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#706: FILE: kernel/pm.c:483:
+EXPORT_SYMBOL(pm_prepare_for_event);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#707: FILE: kernel/pm.c:484:
+EXPORT_SYMBOL(pm_request_event);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#711: FILE: kernel/pm.c:488:
+EXPORT_SYMBOL(pm_policyhelper_path);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#730: FILE: kernel/sysctl.c:202:
+	{KERN_POWERMANAGER, "powermanager",&pm_policyhelper_path, 256,
 	                                  ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#730: FILE: kernel/sysctl.c:202:
+	{KERN_POWERMANAGER, "powermanager",&pm_policyhelper_path, 256,
 	                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#732: FILE: kernel/sysctl.c:204:
+#endif^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000557445.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 94 errors, 29 warnings, 11 checks, 627 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000557445.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
