WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
> (120KB instead of 220KB), possibly due to .config or compiler differences.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#56: 
# CONFIG_CC_OPTIMIZE_FOR_SIZE is not set

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#57: 
# CONFIG_MPSC is not set

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#58: 
# CONFIG_GENERIC_CPU is not set

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#59: 
# CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE is not set

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#60: 
# CONFIG_MTD_CFI_BE_BYTE_SWAP is not set

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#61: 
# CONFIG_MTD_CFI_LE_BYTE_SWAP is not set

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#62: 
# CONFIG_IDE_ARM is not set

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#63: 
# CONFIG_AIC7XXX_BUILD_FIRMWARE is not set

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#64: 
# CONFIG_AIC79XX_BUILD_FIRMWARE is not set

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#65: 
# CONFIG_SCTP_HMAC_NONE is not set

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#66: 
# CONFIG_SCTP_HMAC_SHA1 is not set

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#67: 
# CONFIG_NET_SCH_CLK_GETTIMEOFDAY is not set

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#68: 
# CONFIG_NET_SCH_CLK_CPU is not set

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#69: 
# CONFIG_HPET_RTC_IRQ is not set

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#70: 
# CONFIG_AEDSP16_SBPRO is not set

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#71: 
# CONFIG_USB_GADGET_PXA2XX is not set

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#72: 
# CONFIG_USB_GADGET_GOKU is not set

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#73: 
# CONFIG_USB_GADGET_SA1100 is not set

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#74: 
# CONFIG_USB_GADGET_DUMMY_HCD is not set

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#75: 
# CONFIG_USB_ZERO is not set

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#76: 
# CONFIG_USB_GADGETFS is not set

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#77: 
# CONFIG_USB_FILE_STORAGE is not set

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#78: 
# CONFIG_USB_G_SERIAL is not set

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#79: 
# CONFIG_JFFS2_CMODE_NONE is not set

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#80: 
# CONFIG_JFFS2_CMODE_SIZE is not set

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#81: 
# CONFIG_DEBUG_SPINLOCK is not set

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#140: FILE: include/linux/spinlock.h:68:
+#define spin_is_locked(x)	__spin_is_locked(x, __FILE__, __LINE__)

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t *' should also have an identifier name
#187: FILE: include/linux/spinlock.h:79:
+int __spin_trylock(spinlock_t *, const char *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#187: FILE: include/linux/spinlock.h:79:
+int __spin_trylock(spinlock_t *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#187: FILE: include/linux/spinlock.h:79:
+int __spin_trylock(spinlock_t *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t *' should also have an identifier name
#188: FILE: include/linux/spinlock.h:80:
+void __spin_lock(spinlock_t *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#188: FILE: include/linux/spinlock.h:80:
+void __spin_lock(spinlock_t *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#188: FILE: include/linux/spinlock.h:80:
+void __spin_lock(spinlock_t *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t *' should also have an identifier name
#189: FILE: include/linux/spinlock.h:81:
+void __spin_lock_irq(spinlock_t *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#189: FILE: include/linux/spinlock.h:81:
+void __spin_lock_irq(spinlock_t *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#189: FILE: include/linux/spinlock.h:81:
+void __spin_lock_irq(spinlock_t *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t *' should also have an identifier name
#190: FILE: include/linux/spinlock.h:82:
+void __spin_lock_irqsave(spinlock_t *, unsigned long *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#190: FILE: include/linux/spinlock.h:82:
+void __spin_lock_irqsave(spinlock_t *, unsigned long *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#190: FILE: include/linux/spinlock.h:82:
+void __spin_lock_irqsave(spinlock_t *, unsigned long *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#190: FILE: include/linux/spinlock.h:82:
+void __spin_lock_irqsave(spinlock_t *, unsigned long *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t *' should also have an identifier name
#191: FILE: include/linux/spinlock.h:83:
+void __spin_unlock(spinlock_t *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#191: FILE: include/linux/spinlock.h:83:
+void __spin_unlock(spinlock_t *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#191: FILE: include/linux/spinlock.h:83:
+void __spin_unlock(spinlock_t *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t *' should also have an identifier name
#192: FILE: include/linux/spinlock.h:84:
+void __spin_unlock_irq(spinlock_t *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#192: FILE: include/linux/spinlock.h:84:
+void __spin_unlock_irq(spinlock_t *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#192: FILE: include/linux/spinlock.h:84:
+void __spin_unlock_irq(spinlock_t *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t *' should also have an identifier name
#193: FILE: include/linux/spinlock.h:85:
+void __spin_unlock_irqrestore(spinlock_t *, unsigned long *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#193: FILE: include/linux/spinlock.h:85:
+void __spin_unlock_irqrestore(spinlock_t *, unsigned long *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#193: FILE: include/linux/spinlock.h:85:
+void __spin_unlock_irqrestore(spinlock_t *, unsigned long *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#193: FILE: include/linux/spinlock.h:85:
+void __spin_unlock_irqrestore(spinlock_t *, unsigned long *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t *' should also have an identifier name
#194: FILE: include/linux/spinlock.h:86:
+void __spin_lock_init(spinlock_t *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#194: FILE: include/linux/spinlock.h:86:
+void __spin_lock_init(spinlock_t *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t *' should also have an identifier name
#195: FILE: include/linux/spinlock.h:87:
+void __raw_spin_lock(spinlock_t *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#195: FILE: include/linux/spinlock.h:87:
+void __raw_spin_lock(spinlock_t *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#195: FILE: include/linux/spinlock.h:87:
+void __raw_spin_lock(spinlock_t *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t *' should also have an identifier name
#196: FILE: include/linux/spinlock.h:88:
+int __spin_is_locked(spinlock_t *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#196: FILE: include/linux/spinlock.h:88:
+int __spin_is_locked(spinlock_t *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#196: FILE: include/linux/spinlock.h:88:
+int __spin_is_locked(spinlock_t *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t *' should also have an identifier name
#197: FILE: include/linux/spinlock.h:89:
+int __raw_spin_trylock(spinlock_t *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#197: FILE: include/linux/spinlock.h:89:
+int __raw_spin_trylock(spinlock_t *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#197: FILE: include/linux/spinlock.h:89:
+int __raw_spin_trylock(spinlock_t *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t *' should also have an identifier name
#198: FILE: include/linux/spinlock.h:90:
+void __spin_unlock_wait(spinlock_t *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#198: FILE: include/linux/spinlock.h:90:
+void __spin_unlock_wait(spinlock_t *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#198: FILE: include/linux/spinlock.h:90:
+void __spin_unlock_wait(spinlock_t *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t *' should also have an identifier name
#199: FILE: include/linux/spinlock.h:91:
+void __raw_spin_unlock(spinlock_t *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#199: FILE: include/linux/spinlock.h:91:
+void __raw_spin_unlock(spinlock_t *, const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#199: FILE: include/linux/spinlock.h:91:
+void __raw_spin_unlock(spinlock_t *, const char *, int);

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#223: FILE: include/linux/spinlock.h:139:
+#include <asm/atomic.h>

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t *' should also have an identifier name
#240: FILE: include/linux/spinlock.h:150:
+int write_trylock(rwlock_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t *' should also have an identifier name
#243: FILE: include/linux/spinlock.h:153:
+void spin_lock(spinlock_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t *' should also have an identifier name
#244: FILE: include/linux/spinlock.h:154:
+void write_lock(rwlock_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t *' should also have an identifier name
#444: FILE: include/linux/spinlock.h:162:
+void spin_unlock(spinlock_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t *' should also have an identifier name
#445: FILE: include/linux/spinlock.h:163:
+void write_unlock(rwlock_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t *' should also have an identifier name
#446: FILE: include/linux/spinlock.h:164:
+void read_unlock(rwlock_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t *' should also have an identifier name
#447: FILE: include/linux/spinlock.h:165:
+void __spin_lock_irqsave(spinlock_t *, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#447: FILE: include/linux/spinlock.h:165:
+void __spin_lock_irqsave(spinlock_t *, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t *' should also have an identifier name
#448: FILE: include/linux/spinlock.h:166:
+void spin_lock_irq(spinlock_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t *' should also have an identifier name
#449: FILE: include/linux/spinlock.h:167:
+void spin_lock_bh(spinlock_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t *' should also have an identifier name
#450: FILE: include/linux/spinlock.h:168:
+void __read_lock_irqsave(rwlock_t *, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#450: FILE: include/linux/spinlock.h:168:
+void __read_lock_irqsave(rwlock_t *, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t *' should also have an identifier name
#451: FILE: include/linux/spinlock.h:169:
+void read_lock_irq(rwlock_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t *' should also have an identifier name
#452: FILE: include/linux/spinlock.h:170:
+void read_lock_bh(rwlock_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t *' should also have an identifier name
#453: FILE: include/linux/spinlock.h:171:
+void __write_lock_irqsave(rwlock_t *, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#453: FILE: include/linux/spinlock.h:171:
+void __write_lock_irqsave(rwlock_t *, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t *' should also have an identifier name
#454: FILE: include/linux/spinlock.h:172:
+void write_lock_irq(rwlock_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t *' should also have an identifier name
#455: FILE: include/linux/spinlock.h:173:
+void write_lock_bh(rwlock_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t *' should also have an identifier name
#456: FILE: include/linux/spinlock.h:174:
+void __spin_unlock_irqrestore(spinlock_t *, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#456: FILE: include/linux/spinlock.h:174:
+void __spin_unlock_irqrestore(spinlock_t *, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t *' should also have an identifier name
#457: FILE: include/linux/spinlock.h:175:
+void __raw_spin_unlock_irqrestore(spinlock_t *, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#457: FILE: include/linux/spinlock.h:175:
+void __raw_spin_unlock_irqrestore(spinlock_t *, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t *' should also have an identifier name
#458: FILE: include/linux/spinlock.h:176:
+void spin_unlock_irq(spinlock_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t *' should also have an identifier name
#459: FILE: include/linux/spinlock.h:177:
+void spin_unlock_bh(spinlock_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t *' should also have an identifier name
#460: FILE: include/linux/spinlock.h:178:
+void __read_unlock_irqrestore(rwlock_t *, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#460: FILE: include/linux/spinlock.h:178:
+void __read_unlock_irqrestore(rwlock_t *, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t *' should also have an identifier name
#461: FILE: include/linux/spinlock.h:179:
+void read_unlock_irq(rwlock_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t *' should also have an identifier name
#462: FILE: include/linux/spinlock.h:180:
+void read_unlock_bh(rwlock_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t *' should also have an identifier name
#463: FILE: include/linux/spinlock.h:181:
+void __write_unlock_irqrestore(rwlock_t *, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#463: FILE: include/linux/spinlock.h:181:
+void __write_unlock_irqrestore(rwlock_t *, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t *' should also have an identifier name
#464: FILE: include/linux/spinlock.h:182:
+void write_unlock_irq(rwlock_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rwlock_t *' should also have an identifier name
#465: FILE: include/linux/spinlock.h:183:
+void write_unlock_bh(rwlock_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'spinlock_t *' should also have an identifier name
#466: FILE: include/linux/spinlock.h:184:
+int spin_trylock_bh(spinlock_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#546: FILE: include/linux/spinlock.h:203:
+void bit_spin_lock(int, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#546: FILE: include/linux/spinlock.h:203:
+void bit_spin_lock(int, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#547: FILE: include/linux/spinlock.h:204:
+int bit_spin_trylock(int, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#547: FILE: include/linux/spinlock.h:204:
+int bit_spin_trylock(int, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#548: FILE: include/linux/spinlock.h:205:
+void bit_spin_unlock(int, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#548: FILE: include/linux/spinlock.h:205:
+void bit_spin_unlock(int, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#549: FILE: include/linux/spinlock.h:206:
+int bit_spin_is_locked(int, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#549: FILE: include/linux/spinlock.h:206:
+int bit_spin_is_locked(int, unsigned long *);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#574: FILE: include/linux/spinlock.h:231:
+#define spin_lock_irqsave(lock, flags)	do { local_irq_save(flags); _raw_spin_lock(lock); } while (0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#575: FILE: include/linux/spinlock.h:232:
+#define spin_unlock_irqrestore(lock, flags) do { _raw_spin_lock(lock); local_irq_restore(flags); } while (0)

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#576: FILE: include/linux/spinlock.h:233:
+#define read_lock_irqsave(lock, flags)	do { _raw_read_lock(lock); local_irq_save(flags); } while (0)

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#577: FILE: include/linux/spinlock.h:234:
+#define read_unlock_irqrestore(lock, flags) do { _raw_read_lock(lock); local_irq_restore(flags); } while (0)

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#578: FILE: include/linux/spinlock.h:235:
+#define write_lock_irqsave(lock, flags)	do { local_irq_save(flags); _raw_write_lock(lock); } while (0)

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#579: FILE: include/linux/spinlock.h:236:
+#define write_unlock_irqrestore(lock, flags) do { _raw_write_lock(lock); local_irq_restore(flags); } while (0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#597: FILE: kernel/spinlock.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#598: FILE: kernel/spinlock.c:2:
+ * kernel/spinlock.c - generic locking

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#611: FILE: kernel/spinlock.c:15:
+#include <asm/processor.h>	/* for cpu relax */

ERROR:CODE_INDENT: code indent should use tabs where possible
#637: FILE: kernel/spinlock.c:41:
+ ^Iif (lock->magic != SPINLOCK_MAGIC)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#637: FILE: kernel/spinlock.c:41:
+ ^Iif (lock->magic != SPINLOCK_MAGIC)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#637: FILE: kernel/spinlock.c:41:
+ ^Iif (lock->magic != SPINLOCK_MAGIC)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#638: FILE: kernel/spinlock.c:42:
+		printk(KERN_ERR "%s:%d: spin_is_locked on "

WARNING:SPLIT_STRING: quoted string split across lines
#639: FILE: kernel/spinlock.c:43:
+		printk(KERN_ERR "%s:%d: spin_is_locked on "
+			"uninitialized spinlock %p.\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#649: FILE: kernel/spinlock.c:53:
+		printk("%s:%d: spin_lock(%s:%p) already locked by %s/%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#650: FILE: kernel/spinlock.c:54:
+		printk("%s:%d: spin_lock(%s:%p) already locked by %s/%d\n",
+				file, line, lock->module,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#659: FILE: kernel/spinlock.c:63:
+ * FALSE. --> printk if already locked. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#665: FILE: kernel/spinlock.c:69:
+		printk("%s:%d: spin_is_locked(%s:%p) already locked by %s/%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#666: FILE: kernel/spinlock.c:70:
+		printk("%s:%d: spin_is_locked(%s:%p) already locked by %s/%d\n",
+			file, line, lock->module,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#674: FILE: kernel/spinlock.c:78:
+ * TRUE. --> printk if already locked. */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#680: FILE: kernel/spinlock.c:84:
+		printk("%s:%d: spin_trylock(%s:%p) already locked by %s/%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#681: FILE: kernel/spinlock.c:85:
+		printk("%s:%d: spin_trylock(%s:%p) already locked by %s/%d\n",
+				file, line, lock->module,

ERROR:CODE_INDENT: code indent should use tabs where possible
#693: FILE: kernel/spinlock.c:97:
+ ^Icheck_lock(lock, file, line);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#693: FILE: kernel/spinlock.c:97:
+ ^Icheck_lock(lock, file, line);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#693: FILE: kernel/spinlock.c:97:
+ ^Icheck_lock(lock, file, line);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#696: FILE: kernel/spinlock.c:100:
+		printk("%s:%d: spin_unlock_wait(%s:%p) owned by %s/%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#697: FILE: kernel/spinlock.c:101:
+		printk("%s:%d: spin_unlock_wait(%s:%p) owned by %s/%d\n",
+				file, line, lock->module, lock,

ERROR:CODE_INDENT: code indent should use tabs where possible
#705: FILE: kernel/spinlock.c:109:
+ ^Icheck_lock(lock, file, line);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#705: FILE: kernel/spinlock.c:109:
+ ^Icheck_lock(lock, file, line);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#705: FILE: kernel/spinlock.c:109:
+ ^Icheck_lock(lock, file, line);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#708: FILE: kernel/spinlock.c:112:
+		printk("%s:%d: spin_unlock(%s:%p) not locked\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#709: FILE: kernel/spinlock.c:113:
+		printk("%s:%d: spin_unlock(%s:%p) not locked\n",
+				file, line, lock->module, lock);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#747: FILE: kernel/spinlock.c:151:
+void __preempt_write_lock(rwlock_t *lock);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1023: FILE: kernel/spinlock.c:427:
+	BUG_ON(!test_bit(bitnum, addr));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000261026.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 3 errors, 136 warnings, 5 checks, 965 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000261026.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
