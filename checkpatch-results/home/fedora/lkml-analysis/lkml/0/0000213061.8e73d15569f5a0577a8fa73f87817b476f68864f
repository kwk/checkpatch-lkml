ERROR:SPACING: space required after that ',' (ctx:OxV)
#41: FILE: include/linux/kernel.h:96:
+extern void qsort(void *, size_t, size_t, int (*)(const void *,const void *));
                                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#41: FILE: include/linux/kernel.h:96:
+extern void qsort(void *, size_t, size_t, int (*)(const void *,const void *));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#41: FILE: include/linux/kernel.h:96:
+extern void qsort(void *, size_t, size_t, int (*)(const void *,const void *));

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#41: FILE: include/linux/kernel.h:96:
+extern void qsort(void *, size_t, size_t, int (*)(const void *,const void *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#41: FILE: include/linux/kernel.h:96:
+extern void qsort(void *, size_t, size_t, int (*)(const void *,const void *));

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#54: FILE: lib/Kconfig:33:
+config QSORT
+	bool "Quick Sort"
+
 #
 # compression support is select'ed if needed
 #

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#77: FILE: lib/qsort.c:1:
+/* Copyright (C) 1991, 1992, 1996, 1997, 1999 Free Software Foundation, Inc.

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#78: FILE: lib/qsort.c:2:
+/* Copyright (C) 1991, 1992, 1996, 1997, 1999 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#92: FILE: lib/qsort.c:16:
+   License along with the GNU C Library; if not, write to the Free$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#93: FILE: lib/qsort.c:17:
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#94: FILE: lib/qsort.c:18:
+   02111-1307 USA.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#97: FILE: lib/qsort.c:21:
+/* If you consider tuning this algorithm, you should consult first:
+   Engineering a sort function; Jon Bentley and M. Douglas McIlroy;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#98: FILE: lib/qsort.c:22:
+   Software - Practice and Experience; Vol. 23 (11), 1249-1265, 1993.  */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: lib/qsort.c:32:
+  do^I^I^I^I^I^I^I^I^I      \$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#108: FILE: lib/qsort.c:32:
+  do									      \
+    {									      \

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#108: FILE: lib/qsort.c:32:
+  do									      \
+    {									      \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: lib/qsort.c:33:
+    {^I^I^I^I^I^I^I^I^I      \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: lib/qsort.c:34:
+      register size_t __size = (size);^I^I^I^I^I      \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: lib/qsort.c:35:
+      register char *__a = (a), *__b = (b);^I^I^I^I      \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: lib/qsort.c:36:
+      do^I^I^I^I^I^I^I^I      \$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#112: FILE: lib/qsort.c:36:
+      do								      \
+	{								      \

WARNING:TABSTOP: Statements should start on a tabstop
#114: FILE: lib/qsort.c:38:
+	  char __tmp = *__a;						      \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: lib/qsort.c:42:
+    } while (0)$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#121: FILE: lib/qsort.c:45:
+/* Discontinue quicksort algorithm when partition gets below this size.
+   This particular magic number was chosen to work best on a Sun 4/260. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#121: FILE: lib/qsort.c:45:
+   This particular magic number was chosen to work best on a Sun 4/260. */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#125: FILE: lib/qsort.c:49:
+typedef struct

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: lib/qsort.c:50:
+  {$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#126: FILE: lib/qsort.c:50:
+typedef struct
+  {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: lib/qsort.c:51:
+    char *lo;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: lib/qsort.c:52:
+    char *hi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: lib/qsort.c:53:
+  } stack_node;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#133: FILE: lib/qsort.c:57:
+/* The stack needs log (total_elements) entries (we could even subtract
+   log(MAX_THRESH)).  Since total_elements has type size_t, we get as

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#135: FILE: lib/qsort.c:59:
+   bits per byte (CHAR_BIT) * sizeof(size_t).  */

CHECK:SPACING: No space is necessary after a cast
#138: FILE: lib/qsort.c:62:
+#define PUSH(low, high)	((void) ((top->lo = (low)), (top->hi = (high)), ++top))

CHECK:SPACING: No space is necessary after a cast
#139: FILE: lib/qsort.c:63:
+#define	POP(low, high)	((void) (--top, (low = top->lo), (high = top->hi)))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#142: FILE: lib/qsort.c:66:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#144: FILE: lib/qsort.c:68:
+/* Order size using quicksort.  This implementation incorporates
+   four optimizations discussed in Sedgewick:

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#165: FILE: lib/qsort.c:89:
+      stack size is needed (actually O(1) in this case)!  */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: lib/qsort.c:93:
+      int(*cmp)(const void *,const void *))$

WARNING:SPACING: missing space after return type
#169: FILE: lib/qsort.c:93:
+      int(*cmp)(const void *,const void *))

ERROR:SPACING: space required after that ',' (ctx:OxV)
#169: FILE: lib/qsort.c:93:
+      int(*cmp)(const void *,const void *))
                             ^

CHECK:SPACING: No space is necessary after a cast
#171: FILE: lib/qsort.c:95:
+  register char *base_ptr = (char *) pbase;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: lib/qsort.c:95:
+  register char *base_ptr = (char *) pbase;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#173: FILE: lib/qsort.c:97:
+  const size_t max_thresh = MAX_THRESH * size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: lib/qsort.c:99:
+  if (total_elems == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#175: FILE: lib/qsort.c:99:
+  if (total_elems == 0)
[...]
+    return;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: lib/qsort.c:101:
+    return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: lib/qsort.c:103:
+  if (total_elems > MAX_THRESH)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#179: FILE: lib/qsort.c:103:
+  if (total_elems > MAX_THRESH)
+    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#179: FILE: lib/qsort.c:103:
+  if (total_elems > MAX_THRESH)
+    {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: lib/qsort.c:104:
+    {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#181: FILE: lib/qsort.c:105:
+      char *lo = base_ptr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: lib/qsort.c:106:
+      char *hi = &lo[size * (total_elems - 1)];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: lib/qsort.c:107:
+      stack_node stack[STACK_SIZE];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: lib/qsort.c:108:
+      stack_node *top = stack + 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: lib/qsort.c:110:
+      while (STACK_NOT_EMPTY)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#186: FILE: lib/qsort.c:110:
+      while (STACK_NOT_EMPTY)
+        {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#186: FILE: lib/qsort.c:110:
+      while (STACK_NOT_EMPTY)
+        {

ERROR:CODE_INDENT: code indent should use tabs where possible
#187: FILE: lib/qsort.c:111:
+        {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: lib/qsort.c:111:
+        {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#188: FILE: lib/qsort.c:112:
+          char *left_ptr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: lib/qsort.c:112:
+          char *left_ptr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#189: FILE: lib/qsort.c:113:
+          char *right_ptr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: lib/qsort.c:113:
+          char *right_ptr;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#192: FILE: lib/qsort.c:116:
+	  /* Select median value from among LO, MID, and HI. Rearrange
+	     LO and HI so the three values are sorted. This lowers the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#195: FILE: lib/qsort.c:119:
+	     the while loops. */

WARNING:TABSTOP: Statements should start on a tabstop
#197: FILE: lib/qsort.c:121:
+	  char *mid = lo + size * ((hi - lo) / size >> 1);

WARNING:TABSTOP: Statements should start on a tabstop
#199: FILE: lib/qsort.c:123:
+	  if ((*cmp) ((void *) mid, (void *) lo) < 0)

CHECK:SPACING: No space is necessary after a cast
#199: FILE: lib/qsort.c:123:
+	  if ((*cmp) ((void *) mid, (void *) lo) < 0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#199: FILE: lib/qsort.c:123:
+	  if ((*cmp) ((void *) mid, (void *) lo) < 0)
+	    SWAP (mid, lo, size);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#200: FILE: lib/qsort.c:124:
+	    SWAP (mid, lo, size);

WARNING:TABSTOP: Statements should start on a tabstop
#201: FILE: lib/qsort.c:125:
+	  if ((*cmp) ((void *) hi, (void *) mid) < 0)

CHECK:SPACING: No space is necessary after a cast
#201: FILE: lib/qsort.c:125:
+	  if ((*cmp) ((void *) hi, (void *) mid) < 0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#201: FILE: lib/qsort.c:125:
+	  if ((*cmp) ((void *) hi, (void *) mid) < 0)
+	    SWAP (mid, hi, size);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#202: FILE: lib/qsort.c:126:
+	    SWAP (mid, hi, size);

WARNING:TABSTOP: Statements should start on a tabstop
#203: FILE: lib/qsort.c:127:
+	  else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#203: FILE: lib/qsort.c:127:
+	  else
+	    goto jump_over;

WARNING:TABSTOP: Statements should start on a tabstop
#204: FILE: lib/qsort.c:128:
+	    goto jump_over;

WARNING:TABSTOP: Statements should start on a tabstop
#205: FILE: lib/qsort.c:129:
+	  if ((*cmp) ((void *) mid, (void *) lo) < 0)

CHECK:SPACING: No space is necessary after a cast
#205: FILE: lib/qsort.c:129:
+	  if ((*cmp) ((void *) mid, (void *) lo) < 0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#205: FILE: lib/qsort.c:129:
+	  if ((*cmp) ((void *) mid, (void *) lo) < 0)
+	    SWAP (mid, lo, size);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#206: FILE: lib/qsort.c:130:
+	    SWAP (mid, lo, size);

WARNING:INDENTED_LABEL: labels should not be indented
#207: FILE: lib/qsort.c:131:
+	jump_over:;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#213: FILE: lib/qsort.c:137:
+	  /* Here's the famous ``collapse the walls'' section of quicksort.
+	     Gotta like those tight inner loops!  They are the main reason

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#214: FILE: lib/qsort.c:138:
+	     that this algorithm runs much faster than others. */

WARNING:TABSTOP: Statements should start on a tabstop
#215: FILE: lib/qsort.c:139:
+	  do

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#215: FILE: lib/qsort.c:139:
+	  do
+	    {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 14)
#215: FILE: lib/qsort.c:139:
+	  do
+	    {

WARNING:TABSTOP: Statements should start on a tabstop
#216: FILE: lib/qsort.c:140:
+	    {

WARNING:TABSTOP: Statements should start on a tabstop
#217: FILE: lib/qsort.c:141:
+	      while ((*cmp) ((void *) left_ptr, (void *) mid) < 0)

CHECK:SPACING: No space is necessary after a cast
#217: FILE: lib/qsort.c:141:
+	      while ((*cmp) ((void *) left_ptr, (void *) mid) < 0)

WARNING:TABSTOP: Statements should start on a tabstop
#220: FILE: lib/qsort.c:144:
+	      while ((*cmp) ((void *) mid, (void *) right_ptr) < 0)

CHECK:SPACING: No space is necessary after a cast
#220: FILE: lib/qsort.c:144:
+	      while ((*cmp) ((void *) mid, (void *) right_ptr) < 0)

WARNING:TABSTOP: Statements should start on a tabstop
#223: FILE: lib/qsort.c:147:
+	      if (left_ptr < right_ptr)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#223: FILE: lib/qsort.c:147:
+	      if (left_ptr < right_ptr)
+		{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (14, 18)
#223: FILE: lib/qsort.c:147:
+	      if (left_ptr < right_ptr)
+		{

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#225: FILE: lib/qsort.c:149:
+		  SWAP (left_ptr, right_ptr, size);

WARNING:TABSTOP: Statements should start on a tabstop
#226: FILE: lib/qsort.c:150:
+		  if (mid == left_ptr)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (18, 20)
#226: FILE: lib/qsort.c:150:
+		  if (mid == left_ptr)
+		    mid = right_ptr;

WARNING:TABSTOP: Statements should start on a tabstop
#228: FILE: lib/qsort.c:152:
+		  else if (mid == right_ptr)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (18, 20)
#228: FILE: lib/qsort.c:152:
+		  else if (mid == right_ptr)
+		    mid = left_ptr;

WARNING:TABSTOP: Statements should start on a tabstop
#233: FILE: lib/qsort.c:157:
+	      else if (left_ptr == right_ptr)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#233: FILE: lib/qsort.c:157:
+	      else if (left_ptr == right_ptr)
+		{

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (14, 18)
#233: FILE: lib/qsort.c:157:
+	      else if (left_ptr == right_ptr)
+		{

WARNING:TABSTOP: Statements should start on a tabstop
#237: FILE: lib/qsort.c:161:
+		  break;

WARNING:TABSTOP: Statements should start on a tabstop
#239: FILE: lib/qsort.c:163:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#240: FILE: lib/qsort.c:164:
+	  while (left_ptr <= right_ptr);

ERROR:CODE_INDENT: code indent should use tabs where possible
#242: FILE: lib/qsort.c:166:
+          /* Set up pointers for next iteration.  First determine whether$

ERROR:CODE_INDENT: code indent should use tabs where possible
#243: FILE: lib/qsort.c:167:
+             left and right partitions are below the threshold size.  If so,$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#243: FILE: lib/qsort.c:167:
+          /* Set up pointers for next iteration.  First determine whether
+             left and right partitions are below the threshold size.  If so,

ERROR:CODE_INDENT: code indent should use tabs where possible
#244: FILE: lib/qsort.c:168:
+             ignore one or both.  Otherwise, push the larger partition's$

ERROR:CODE_INDENT: code indent should use tabs where possible
#245: FILE: lib/qsort.c:169:
+             bounds on the stack and continue sorting the smaller one. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#245: FILE: lib/qsort.c:169:
+             bounds on the stack and continue sorting the smaller one. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#247: FILE: lib/qsort.c:171:
+          if ((size_t) (right_ptr - lo) <= max_thresh)$

CHECK:SPACING: No space is necessary after a cast
#247: FILE: lib/qsort.c:171:
+          if ((size_t) (right_ptr - lo) <= max_thresh)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: lib/qsort.c:171:
+          if ((size_t) (right_ptr - lo) <= max_thresh)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#247: FILE: lib/qsort.c:171:
+          if ((size_t) (right_ptr - lo) <= max_thresh)
+            {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 14)
#247: FILE: lib/qsort.c:171:
+          if ((size_t) (right_ptr - lo) <= max_thresh)
+            {

ERROR:CODE_INDENT: code indent should use tabs where possible
#248: FILE: lib/qsort.c:172:
+            {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: lib/qsort.c:172:
+            {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#249: FILE: lib/qsort.c:173:
+              if ((size_t) (hi - left_ptr) <= max_thresh)$

CHECK:SPACING: No space is necessary after a cast
#249: FILE: lib/qsort.c:173:
+              if ((size_t) (hi - left_ptr) <= max_thresh)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: lib/qsort.c:173:
+              if ((size_t) (hi - left_ptr) <= max_thresh)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#251: FILE: lib/qsort.c:175:
+                POP (lo, hi);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: lib/qsort.c:175:
+                POP (lo, hi);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#251: FILE: lib/qsort.c:175:
+                POP (lo, hi);

ERROR:CODE_INDENT: code indent should use tabs where possible
#252: FILE: lib/qsort.c:176:
+              else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#252: FILE: lib/qsort.c:176:
+              else$

ERROR:CODE_INDENT: code indent should use tabs where possible
#254: FILE: lib/qsort.c:178:
+                lo = left_ptr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: lib/qsort.c:178:
+                lo = left_ptr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#255: FILE: lib/qsort.c:179:
+            }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: lib/qsort.c:179:
+            }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#256: FILE: lib/qsort.c:180:
+          else if ((size_t) (hi - left_ptr) <= max_thresh)$

CHECK:SPACING: No space is necessary after a cast
#256: FILE: lib/qsort.c:180:
+          else if ((size_t) (hi - left_ptr) <= max_thresh)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#256: FILE: lib/qsort.c:180:
+          else if ((size_t) (hi - left_ptr) <= max_thresh)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#256: FILE: lib/qsort.c:180:
+          else if ((size_t) (hi - left_ptr) <= max_thresh)
[...]
+            hi = right_ptr;

ERROR:CODE_INDENT: code indent should use tabs where possible
#258: FILE: lib/qsort.c:182:
+            hi = right_ptr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: lib/qsort.c:182:
+            hi = right_ptr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#259: FILE: lib/qsort.c:183:
+          else if ((right_ptr - lo) > (hi - left_ptr))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: lib/qsort.c:183:
+          else if ((right_ptr - lo) > (hi - left_ptr))$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#259: FILE: lib/qsort.c:183:
+          else if ((right_ptr - lo) > (hi - left_ptr))
+            {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 14)
#259: FILE: lib/qsort.c:183:
+          else if ((right_ptr - lo) > (hi - left_ptr))
[...]
+	      /* Push larger left partition indices. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#260: FILE: lib/qsort.c:184:
+            {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#260: FILE: lib/qsort.c:184:
+            {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#262: FILE: lib/qsort.c:186:
+              PUSH (lo, right_ptr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#262: FILE: lib/qsort.c:186:
+              PUSH (lo, right_ptr);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#262: FILE: lib/qsort.c:186:
+              PUSH (lo, right_ptr);

ERROR:CODE_INDENT: code indent should use tabs where possible
#263: FILE: lib/qsort.c:187:
+              lo = left_ptr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: lib/qsort.c:187:
+              lo = left_ptr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#264: FILE: lib/qsort.c:188:
+            }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#264: FILE: lib/qsort.c:188:
+            }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#265: FILE: lib/qsort.c:189:
+          else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: lib/qsort.c:189:
+          else$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#265: FILE: lib/qsort.c:189:
+          else
+            {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 14)
#265: FILE: lib/qsort.c:189:
+          else
[...]
+	      /* Push larger right partition indices. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#266: FILE: lib/qsort.c:190:
+            {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#266: FILE: lib/qsort.c:190:
+            {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#268: FILE: lib/qsort.c:192:
+              PUSH (left_ptr, hi);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: lib/qsort.c:192:
+              PUSH (left_ptr, hi);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#268: FILE: lib/qsort.c:192:
+              PUSH (left_ptr, hi);

ERROR:CODE_INDENT: code indent should use tabs where possible
#269: FILE: lib/qsort.c:193:
+              hi = right_ptr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: lib/qsort.c:193:
+              hi = right_ptr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#270: FILE: lib/qsort.c:194:
+            }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: lib/qsort.c:194:
+            }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#271: FILE: lib/qsort.c:195:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#271: FILE: lib/qsort.c:195:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#272: FILE: lib/qsort.c:196:
+    }$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#275: FILE: lib/qsort.c:199:
+  /* Once the BASE_PTR array is partially sorted by quicksort the rest
+     is completely sorted using insertion sort, since this is efficient

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#278: FILE: lib/qsort.c:202:
+     the array (*not* one beyond it!). */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: lib/qsort.c:204:
+  {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#281: FILE: lib/qsort.c:205:
+    char *end_ptr = &base_ptr[size * (total_elems - 1)];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#282: FILE: lib/qsort.c:206:
+    char *tmp_ptr = base_ptr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: lib/qsort.c:207:
+    char *thresh = min(end_ptr, base_ptr + max_thresh);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#284: FILE: lib/qsort.c:208:
+    register char *run_ptr;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#287: FILE: lib/qsort.c:211:
+    /* Find smallest element in first threshold and place it at the
+       array's beginning.  This is the smallest array element,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#288: FILE: lib/qsort.c:212:
+       and the operation speeds up insertion sort's inner loop. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: lib/qsort.c:214:
+    for (run_ptr = tmp_ptr + size; run_ptr <= thresh; run_ptr += size)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#290: FILE: lib/qsort.c:214:
+    for (run_ptr = tmp_ptr + size; run_ptr <= thresh; run_ptr += size)
+      if ((*cmp) ((void *) run_ptr, (void *) tmp_ptr) < 0)

CHECK:SPACING: No space is necessary after a cast
#291: FILE: lib/qsort.c:215:
+      if ((*cmp) ((void *) run_ptr, (void *) tmp_ptr) < 0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: lib/qsort.c:215:
+      if ((*cmp) ((void *) run_ptr, (void *) tmp_ptr) < 0)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#292: FILE: lib/qsort.c:216:
+        tmp_ptr = run_ptr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: lib/qsort.c:216:
+        tmp_ptr = run_ptr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#294: FILE: lib/qsort.c:218:
+    if (tmp_ptr != base_ptr)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#294: FILE: lib/qsort.c:218:
+    if (tmp_ptr != base_ptr)
+      SWAP (tmp_ptr, base_ptr, size);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: lib/qsort.c:219:
+      SWAP (tmp_ptr, base_ptr, size);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#295: FILE: lib/qsort.c:219:
+      SWAP (tmp_ptr, base_ptr, size);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: lib/qsort.c:223:
+    run_ptr = base_ptr + size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#300: FILE: lib/qsort.c:224:
+    while ((run_ptr += size) <= end_ptr)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#300: FILE: lib/qsort.c:224:
+    while ((run_ptr += size) <= end_ptr)
+      {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#301: FILE: lib/qsort.c:225:
+      {$

CHECK:SPACING: No space is necessary after a cast
#303: FILE: lib/qsort.c:227:
+	while ((*cmp) ((void *) run_ptr, (void *) tmp_ptr) < 0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#303: FILE: lib/qsort.c:227:
+	while ((*cmp) ((void *) run_ptr, (void *) tmp_ptr) < 0)
+	  tmp_ptr -= size;

ERROR:CODE_INDENT: code indent should use tabs where possible
#307: FILE: lib/qsort.c:231:
+        if (tmp_ptr != run_ptr)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#307: FILE: lib/qsort.c:231:
+        if (tmp_ptr != run_ptr)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#307: FILE: lib/qsort.c:231:
+        if (tmp_ptr != run_ptr)
+          {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#307: FILE: lib/qsort.c:231:
+        if (tmp_ptr != run_ptr)
+          {

ERROR:CODE_INDENT: code indent should use tabs where possible
#308: FILE: lib/qsort.c:232:
+          {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#308: FILE: lib/qsort.c:232:
+          {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#309: FILE: lib/qsort.c:233:
+            char *trav;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#309: FILE: lib/qsort.c:233:
+            char *trav;$

WARNING:TABSTOP: Statements should start on a tabstop
#312: FILE: lib/qsort.c:236:
+	    while (--trav >= run_ptr)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#312: FILE: lib/qsort.c:236:
+	    while (--trav >= run_ptr)
+              {

ERROR:CODE_INDENT: code indent should use tabs where possible
#313: FILE: lib/qsort.c:237:
+              {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#313: FILE: lib/qsort.c:237:
+              {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#314: FILE: lib/qsort.c:238:
+                char c = *trav;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#314: FILE: lib/qsort.c:238:
+                char c = *trav;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#315: FILE: lib/qsort.c:239:
+                char *hi, *lo;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#315: FILE: lib/qsort.c:239:
+                char *hi, *lo;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#317: FILE: lib/qsort.c:241:
+                for (hi = lo = trav; (lo -= size) >= tmp_ptr; hi = lo)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: lib/qsort.c:241:
+                for (hi = lo = trav; (lo -= size) >= tmp_ptr; hi = lo)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 18)
#317: FILE: lib/qsort.c:241:
+                for (hi = lo = trav; (lo -= size) >= tmp_ptr; hi = lo)
+                  *hi = *lo;

ERROR:CODE_INDENT: code indent should use tabs where possible
#318: FILE: lib/qsort.c:242:
+                  *hi = *lo;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#318: FILE: lib/qsort.c:242:
+                  *hi = *lo;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#319: FILE: lib/qsort.c:243:
+                *hi = c;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: lib/qsort.c:243:
+                *hi = c;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#320: FILE: lib/qsort.c:244:
+              }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: lib/qsort.c:244:
+              }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#321: FILE: lib/qsort.c:245:
+          }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#321: FILE: lib/qsort.c:245:
+          }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: lib/qsort.c:246:
+      }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#323: FILE: lib/qsort.c:247:
+  }$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000213061.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 57 errors, 149 warnings, 15 checks, 294 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000213061.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
