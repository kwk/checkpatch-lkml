WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
My patch is based on my new idea to Linux swap subsystem, you can find more in

WARNING:TYPO_SPELLING: 'acessing' may be misspelled - perhaps 'accessing'?
#35: 
1) SwapDaemon can collect the statistic of process acessing pages and by it
                                                   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#46: 
	Signed-off-by: Yunfeng Zhang <zyf.zeroos@gmail.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:TYPO_SPELLING: 'acessing' may be misspelled - perhaps 'accessing'?
#85: FILE: Documentation/vm_pps.txt:33:
+1) SwapDaemon can collect the statistic of process acessing pages and by it
                                                    ^^^^^^^^

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#176: FILE: Documentation/vm_pps.txt:123:
tasks to dftlb.

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:TYPO_SPELLING: 'scaning' may be misspelled - perhaps 'scanning'?
#201: FILE: Documentation/vm_pps.txt:148:
+mm_struct instances, during the process of scaning and reclaiming process, it
                                            ^^^^^^^

WARNING:TYPO_SPELLING: 'aboved' may be misspelled - perhaps 'above'?
#258: FILE: Documentation/vm_pps.txt:205:
+   aboved hyperlink of Linux kernel mail list. So it's a compromise to use
    ^^^^^^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#356: FILE: include/asm-i386/pgtable-2level.h:55:
+	((((pte).pte_low >> 1) & 0xf ) + (((pte).pte_low >> 8) << 4 ))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#368: FILE: include/asm-i386/pgtable-2level.h:63:
+#define __swp_entry(type, offset)	((swp_entry_t) { ((type & 0xf) <<

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#385: FILE: include/asm-i386/pgtable.h:125:
+#define _PAGE_UNMAPPED	0x020	/* a special PTE type, hold its page reference
+								   even it's unmapped, see more from

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#386: FILE: include/asm-i386/pgtable.h:126:
+								   Documentation/vm_pps.txt. */

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#397: FILE: include/asm-i386/pgtable.h:235:
+static inline int pte_unmapped(pte_t pte)	{ return ((pte).pte_low &

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#399: FILE: include/asm-i386/pgtable.h:236:
+static inline int pte_swapped(pte_t pte)	{ return ((pte).pte_low &

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#401: FILE: include/asm-i386/pgtable.h:237:
+static inline int pte_file(pte_t pte)		{ return ((pte).pte_low &

WARNING:LONG_LINE_COMMENT: line length of 116 exceeds 100 columns
#418: FILE: include/linux/mm.h:170:
+									   see more from Documentation/vm_pps.txt */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#418: FILE: include/linux/mm.h:170:
+#define VM_PURE_PRIVATE	0x04000000	/* Is the vma is only belonging to a mm,
+									   see more from Documentation/vm_pps.txt */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#418: FILE: include/linux/mm.h:170:
+									   see more from Documentation/vm_pps.txt */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#432: FILE: include/linux/mm.h:1067:
+};
+extern struct pps_info pps_info;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#436: FILE: include/linux/mm.h:1071:
+struct delay_tlb_task
+{

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#437: FILE: include/linux/mm.h:1072:
+	struct mm_struct* mm;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#439: FILE: include/linux/mm.h:1074:
+	struct vm_area_struct* vma[32];

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#443: FILE: include/linux/mm.h:1078:
+};
+extern struct delay_tlb_task delay_tlb_tasks[32];

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#448: FILE: include/linux/mm.h:1083:
+void timer_flush_tlb_tasks(void* data /* = NULL */);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#450: FILE: include/linux/mm.h:1085:
+void enter_pps(struct mm_struct* mm, struct vm_area_struct* vma);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#450: FILE: include/linux/mm.h:1085:
+void enter_pps(struct mm_struct* mm, struct vm_area_struct* vma);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#451: FILE: include/linux/mm.h:1086:
+void leave_pps(struct vm_area_struct* vma, int migrate_flag);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#466: FILE: include/linux/swapops.h:53:
+	BUG_ON(!pte_swapped(pte));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#475: FILE: include/linux/swapops.h:67:
+	BUG_ON(!pte_swapped(__swp_entry_to_pte(arch_entry)));

WARNING:LINE_SPACING: Missing a blank line after declarations
#562: FILE: mm/memory.c:692:
+			struct page *page;
+			page = pfn_to_page(pte_pfn(ptent));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#563: FILE: mm/memory.c:693:
+			BUG_ON(page == ZERO_PAGE(addr));

CHECK:BRACES: braces {} should be used on all arms of this statement
#593: FILE: mm/memory.c:1540:
+		if (!(vma->vm_flags & VM_PURE_PRIVATE))
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#595: FILE: mm/memory.c:1542:
+		else {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#611: FILE: mm/memory.c:1905:
+	struct page* page;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#614: FILE: mm/memory.c:1908:
+	spinlock_t* ptl = pte_lockptr(vma->vm_mm, pmd);

CHECK:CAMELCASE: Avoid CamelCase: <swapType>
#615: FILE: mm/memory.c:1909:
+	int swapType = swp_type(entry);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <swapOffset>
#616: FILE: mm/memory.c:1910:
+	int swapOffset = swp_offset(entry);

CHECK:SPACING: No space is necessary after a cast
#632: FILE: mm/memory.c:1926:
+		if (next - (pte_t*) pmd >= PTRS_PER_PTE)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#632: FILE: mm/memory.c:1926:
+		if (next - (pte_t*) pmd >= PTRS_PER_PTE)

ERROR:CODE_INDENT: code indent should use tabs where possible
#635: FILE: mm/memory.c:1929:
+        if (!(!pte_present(*next) && pte_swapped(*next))) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#635: FILE: mm/memory.c:1929:
+        if (!(!pte_present(*next) && pte_swapped(*next))) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#635: FILE: mm/memory.c:1929:
+        if (!(!pte_present(*next) && pte_swapped(*next))) {
+			spin_unlock(ptl);

CHECK:SPACING: No space is necessary after a cast
#659: FILE: mm/memory.c:1953:
+		if (prev - (pte_t*) pmd < 0)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#659: FILE: mm/memory.c:1953:
+		if (prev - (pte_t*) pmd < 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#662: FILE: mm/memory.c:1956:
+        if (!(!pte_present(*prev) && pte_swapped(*prev))) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#662: FILE: mm/memory.c:1956:
+        if (!(!pte_present(*prev) && pte_swapped(*prev))) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#662: FILE: mm/memory.c:1956:
+        if (!(!pte_present(*prev) && pte_swapped(*prev))) {
+			spin_unlock(ptl);

ERROR:CODE_INDENT: code indent should use tabs where possible
#693: FILE: mm/memory.c:2000:
+ ^I^Ipps_swapin_readahead(entry, address, vma, page_table, pmd);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#693: FILE: mm/memory.c:2000:
+ ^I^Ipps_swapin_readahead(entry, address, vma, page_table, pmd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#693: FILE: mm/memory.c:2000:
+ ^I^Ipps_swapin_readahead(entry, address, vma, page_table, pmd);$

CHECK:BRACES: braces {} should be used on all arms of this statement
#741: FILE: mm/memory.c:2122:
+		if (!(vma->vm_flags & VM_PURE_PRIVATE))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#743: FILE: mm/memory.c:2124:
+		else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#757: FILE: mm/memory.c:2344:
+			BUG_ON(!(vma->vm_flags & VM_PURE_PRIVATE));

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#760: FILE: mm/memory.c:2347:
+			struct page* page = pte_page(entry);

WARNING:LINE_SPACING: Missing a blank line after declarations
#762: FILE: mm/memory.c:2349:
+			pte_t temp_pte = mk_pte(page, vma->vm_page_prot);
+			pte = pte_offset_map_lock(mm, pmd, address, &ptl);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#780: FILE: mm/memory.c:2596:
+static void migrate_back_pte_range(struct mm_struct* mm, pmd_t *pmd, struct

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#781: FILE: mm/memory.c:2597:
+		vm_area_struct *vma, unsigned long addr, unsigned long end)
 		               ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#783: FILE: mm/memory.c:2599:
+	struct page* page;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#786: FILE: mm/memory.c:2602:
+	spinlock_t* ptl;

CHECK:BRACES: braces {} should be used on all arms of this statement
#793: FILE: mm/memory.c:2609:
+		if (!pte_present(*pte) && pte_unmapped(*pte)) {
[...]
+		} else if (pte_present(*pte)) {
[...]
+		} else if (!pte_present(*pte) && pte_swapped(*pte))
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#798: FILE: mm/memory.c:2614:
+			BUG_ON(page == ZERO_PAGE(addr));

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#819: FILE: mm/memory.c:2635:
+static void migrate_back_pmd_range(struct mm_struct* mm, pud_t *pud, struct

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#820: FILE: mm/memory.c:2636:
+		vm_area_struct *vma, unsigned long addr, unsigned long end)
 		               ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#834: FILE: mm/memory.c:2650:
+static void migrate_back_pud_range(struct mm_struct* mm, pgd_t *pgd, struct

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#835: FILE: mm/memory.c:2651:
+		vm_area_struct *vma, unsigned long addr, unsigned long end)
 		               ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#851: FILE: mm/memory.c:2666:
+static void migrate_back_legacy_linux(struct mm_struct* mm, struct

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#854: FILE: mm/memory.c:2668:
+	pgd_t* pgd;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#868: FILE: mm/memory.c:2682:
+void enter_pps(struct mm_struct* mm, struct vm_area_struct* vma)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#868: FILE: mm/memory.c:2682:
+void enter_pps(struct mm_struct* mm, struct vm_area_struct* vma)

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#870: FILE: mm/memory.c:2684:
+	int condition = VM_READ | VM_WRITE | VM_EXEC | \

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma->vm_file"
#875: FILE: mm/memory.c:2689:
+	if (!(vma->vm_flags & ~condition) && vma->vm_file == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#886: FILE: mm/memory.c:2700:
+void leave_pps(struct vm_area_struct* vma, int migrate_flag)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#888: FILE: mm/memory.c:2702:
+	struct mm_struct* mm = vma->vm_mm;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#980: FILE: mm/rmap.c:636:
+		BUG_ON(!pte_swapped(*pte));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma"
#993: FILE: mm/swap_state.c:357:
+			if (vma == NULL || !(vma->vm_flags & VM_PURE_PRIVATE))

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1014: FILE: mm/swapfile.c:421:
+static int pps_test_swap_type(struct mm_struct* mm, pmd_t* pmd, pte_t* pte, int

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1014: FILE: mm/swapfile.c:421:
+static int pps_test_swap_type(struct mm_struct* mm, pmd_t* pmd, pte_t* pte, int

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1014: FILE: mm/swapfile.c:421:
+static int pps_test_swap_type(struct mm_struct* mm, pmd_t* pmd, pte_t* pte, int

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#1015: FILE: mm/swapfile.c:422:
+		type, struct page** ret_page)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1017: FILE: mm/swapfile.c:424:
+	spinlock_t* ptl = pte_lockptr(mm, pmd);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1019: FILE: mm/swapfile.c:426:
+	struct page* page;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1045: FILE: mm/swapfile.c:452:
+static int pps_swapoff_scan_ptes(struct mm_struct* mm, struct vm_area_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1046: FILE: mm/swapfile.c:453:
+		vma, pmd_t* pmd, unsigned long addr, unsigned long end, int type)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1049: FILE: mm/swapfile.c:456:
+	struct page* page;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#1054: FILE: mm/swapfile.c:461:
+			if (page == NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1063: FILE: mm/swapfile.c:470:
+					BUG();

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1085: FILE: mm/swapfile.c:492:
+static int pps_swapoff_pmd_range(struct mm_struct* mm, struct vm_area_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1086: FILE: mm/swapfile.c:493:
+		vma, pud_t* pud, unsigned long addr, unsigned long end, int type)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1090: FILE: mm/swapfile.c:497:
+	pmd_t* pmd = pmd_offset(pud, addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1091: FILE: mm/swapfile.c:498:
+	pmd_t* pmd = pmd_offset(pud, addr);
+	do {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1102: FILE: mm/swapfile.c:509:
+static int pps_swapoff_pud_range(struct mm_struct* mm, struct vm_area_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1103: FILE: mm/swapfile.c:510:
+		vma, pgd_t* pgd, unsigned long addr, unsigned long end, int type)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1107: FILE: mm/swapfile.c:514:
+	pud_t* pud = pud_offset(pgd, addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1108: FILE: mm/swapfile.c:515:
+	pud_t* pud = pud_offset(pgd, addr);
+	do {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1119: FILE: mm/swapfile.c:526:
+static int pps_swapoff_pgd_range(struct mm_struct* mm, struct vm_area_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1126: FILE: mm/swapfile.c:533:
+	pgd_t* pgd = pgd_offset(mm, addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1127: FILE: mm/swapfile.c:534:
+	pgd_t* pgd = pgd_offset(mm, addr);
+	do {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1140: FILE: mm/swapfile.c:547:
+	struct vm_area_struct* vma;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1145: FILE: mm/swapfile.c:552:
+	prev = mm = &init_mm;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "vma"
#1157: FILE: mm/swapfile.c:564:
+		for (vma = mm->mmap; vma != NULL; vma = vma->vm_next) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1239: FILE: mm/vmscan.c:1529:
+};
+// pps end.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1243: FILE: mm/vmscan.c:1533:
+	pte_t* ptes[MAX_SERIES_LENGTH];

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1244: FILE: mm/vmscan.c:1534:
+	struct page* pages[MAX_SERIES_LENGTH];

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1249: FILE: mm/vmscan.c:1539:
+static int get_series_stage(pte_t* pte, int index)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1254: FILE: mm/vmscan.c:1544:
+		struct page* page = pfn_to_page(pte_pfn(series.orig_ptes[index]));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1255: FILE: mm/vmscan.c:1545:
+		struct page* page = pfn_to_page(pte_pfn(series.orig_ptes[index]));
+		series.pages[index] = page;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1258: FILE: mm/vmscan.c:1548:
+		if (pte_young(series.orig_ptes[index])) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1260: FILE: mm/vmscan.c:1550:
+		} else

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1263: FILE: mm/vmscan.c:1553:
+		struct page* page = pfn_to_page(pte_pfn(series.orig_ptes[index]));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1264: FILE: mm/vmscan.c:1554:
+		struct page* page = pfn_to_page(pte_pfn(series.orig_ptes[index]));
+		series.pages[index] = page;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1265: FILE: mm/vmscan.c:1555:
+		if (!PageSwapCache(page))
[...]
+		else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1267: FILE: mm/vmscan.c:1557:
+			return 3;
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#1267: FILE: mm/vmscan.c:1557:
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#1273: FILE: mm/vmscan.c:1563:
+	} else // pte_swapped -- SwappedPTE

ERROR:POINTER_LOCATION: "foo** bar" should be "foo **bar"
#1277: FILE: mm/vmscan.c:1567:
+static void find_series(pte_t** start, unsigned long* addr, unsigned long end)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1277: FILE: mm/vmscan.c:1567:
+static void find_series(pte_t** start, unsigned long* addr, unsigned long end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1285: FILE: mm/vmscan.c:1574:
+	for (i = 1; i < MAX_SERIES_LENGTH && *addr < end; i++, (*start)++,
+		if (series_stage != get_series_stage(*start, i))

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1294: FILE: mm/vmscan.c:1583:
+void timer_flush_tlb_tasks(void* data)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "delay_tlb_tasks[i].mm"
#1301: FILE: mm/vmscan.c:1590:
+		if (delay_tlb_tasks[i].mm != NULL &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1302: FILE: mm/vmscan.c:1591:
+		if (delay_tlb_tasks[i].mm != NULL &&
+				cpu_isset(smp_processor_id(), delay_tlb_tasks[i].mm->cpu_vm_mask) &&

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#1318: FILE: mm/vmscan.c:1607:
+static struct delay_tlb_task* delay_task = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1318: FILE: mm/vmscan.c:1607:
+static struct delay_tlb_task* delay_task = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1319: FILE: mm/vmscan.c:1608:
+static int vma_index = 0;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1321: FILE: mm/vmscan.c:1610:
+static struct delay_tlb_task* search_free_tlb_tasks_slot(void)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1323: FILE: mm/vmscan.c:1612:
+	struct delay_tlb_task* ret = NULL;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1327: FILE: mm/vmscan.c:1616:
+		if (delay_tlb_tasks[i].mm != NULL) {
[...]
+		} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "delay_tlb_tasks[i].mm"
#1327: FILE: mm/vmscan.c:1616:
+		if (delay_tlb_tasks[i].mm != NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#1333: FILE: mm/vmscan.c:1622:
+		} else

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1343: FILE: mm/vmscan.c:1632:
+static void init_delay_task(struct mm_struct* mm)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1353: FILE: mm/vmscan.c:1642:
+static void start_tlb_tasks(struct mm_struct* mm)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1359: FILE: mm/vmscan.c:1648:
+			if (cpus_empty(delay_tlb_tasks[i].cpu_mask)) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1362: FILE: mm/vmscan.c:1651:
+			} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1370: FILE: mm/vmscan.c:1659:
+	BUG_ON(delay_task != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "delay_task"
#1370: FILE: mm/vmscan.c:1659:
+	BUG_ON(delay_task != NULL);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1385: FILE: mm/vmscan.c:1674:
+static void fill_in_tlb_tasks(struct vm_area_struct* vma, unsigned long addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1386: FILE: mm/vmscan.c:1675:
+static void fill_in_tlb_tasks(struct vm_area_struct* vma, unsigned long addr,
+		unsigned long end)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1388: FILE: mm/vmscan.c:1677:
+	struct mm_struct* mm;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1391: FILE: mm/vmscan.c:1680:
+	if (vma_index != 0 && delay_task->vma[vma_index - 1] == vma &&
+			delay_task->end[vma_index - 1] == addr) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1411: FILE: mm/vmscan.c:1700:
+static void shrink_pvma_scan_ptes(struct scan_control* sc, struct mm_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1412: FILE: mm/vmscan.c:1701:
+		mm, struct vm_area_struct* vma, pmd_t* pmd, unsigned long addr,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1412: FILE: mm/vmscan.c:1701:
+		mm, struct vm_area_struct* vma, pmd_t* pmd, unsigned long addr,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1416: FILE: mm/vmscan.c:1705:
+	spinlock_t* ptl = pte_lockptr(mm, pmd);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1417: FILE: mm/vmscan.c:1706:
+	pte_t* pte = pte_offset_map(pmd, addr);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1421: FILE: mm/vmscan.c:1710:
+	struct address_space* mapping = &swapper_space;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1429: FILE: mm/vmscan.c:1718:
+		switch (series.series_stage) {
+			case 1: // PTE -- untouched PTE.
[...]
+			case 2: // untouched PTE -- UnmappedPTE.
[...]
+			case 3: // Attach SwapPage to PrivatePage.
[...]
+			case 4: // SwapPage isn't consistent with PrivatePage.
[...]
+			case 5: // UnmappedPTE -- SwappedPTE, reclaim PrivatePage.
[...]
+			case 6:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1432: FILE: mm/vmscan.c:1721:
+					struct page* page = series.pages[i];

WARNING:LINE_SPACING: Missing a blank line after declarations
#1433: FILE: mm/vmscan.c:1722:
+					struct page* page = series.pages[i];
+					lock_page(page);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1435: FILE: mm/vmscan.c:1724:
+					if (unlikely(pte_same(*series.ptes[i], series.orig_ptes[i]))) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1436: FILE: mm/vmscan.c:1725:
+						if (pte_dirty(*series.ptes[i]))

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1439: FILE: mm/vmscan.c:1728:
+								pte_mkold(pte_mkclean(*series.ptes[i])));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1439: FILE: mm/vmscan.c:1728:
+						set_pte_at(mm, addr + i * PAGE_SIZE, series.ptes[i],
+								pte_mkold(pte_mkclean(*series.ptes[i])));

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1444: FILE: mm/vmscan.c:1733:
+				fill_in_tlb_tasks(vma, addr, addr + (PAGE_SIZE * series.series_length));

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1459: FILE: mm/vmscan.c:1748:
+					if (unlikely(pte_same(*series.ptes[i], series.orig_ptes[i]))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1461: FILE: mm/vmscan.c:1750:
+						pte_t pte_unmapped = series.orig_ptes[i];
+						pte_unmapped.pte_low &= ~_PAGE_PRESENT;

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1463: FILE: mm/vmscan.c:1752:
+						if (cmpxchg(&series.ptes[i]->pte_low,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1464: FILE: mm/vmscan.c:1753:
+						if (cmpxchg(&series.ptes[i]->pte_low,
+									series.orig_ptes[i].pte_low,

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1486: FILE: mm/vmscan.c:1775:
+						if (!PageSwapCache(series.pages[i])) {

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1487: FILE: mm/vmscan.c:1776:
+							if (!add_to_swap(series.pages[i], GFP_ATOMIC)) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1487: FILE: mm/vmscan.c:1776:
+							if (!add_to_swap(series.pages[i], GFP_ATOMIC)) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1504: FILE: mm/vmscan.c:1793:
+						struct page* page = series.pages[i];

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1507: FILE: mm/vmscan.c:1796:
+						if (!may_write_to_queue(mapping->backing_dev_info))

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1510: FILE: mm/vmscan.c:1799:
+						if (!PageDirty(page) || PageWriteback(page)) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1524: FILE: mm/vmscan.c:1813:
+						if (res < 0) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1530: FILE: mm/vmscan.c:1819:
+						if (!PageWriteback(page))

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1539: FILE: mm/vmscan.c:1828:
+					struct page* page = series.pages[i];

WARNING:LINE_SPACING: Missing a blank line after declarations
#1540: FILE: mm/vmscan.c:1829:
+					struct page* page = series.pages[i];
+					lock_page(page);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1542: FILE: mm/vmscan.c:1831:
+					if (unlikely(!pte_same(*series.ptes[i], series.orig_ptes[i]))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1549: FILE: mm/vmscan.c:1838:
+					swp_entry_t entry = { .val = page_private(page) };
+					swap_duplicate(entry);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1551: FILE: mm/vmscan.c:1840:
+					set_pte_at(mm, addr + i * PAGE_SIZE, series.ptes[i], pte_swp);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1551: FILE: mm/vmscan.c:1840:
+					pte_t pte_swp = swp_entry_to_pte(entry);
+					set_pte_at(mm, addr + i * PAGE_SIZE, series.ptes[i], pte_swp);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1575: FILE: mm/vmscan.c:1864:
+static void shrink_pvma_pmd_range(struct scan_control* sc, struct mm_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1576: FILE: mm/vmscan.c:1865:
+		mm, struct vm_area_struct* vma, pud_t* pud, unsigned long addr,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1576: FILE: mm/vmscan.c:1865:
+		mm, struct vm_area_struct* vma, pud_t* pud, unsigned long addr,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1580: FILE: mm/vmscan.c:1869:
+	pmd_t* pmd = pmd_offset(pud, addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1581: FILE: mm/vmscan.c:1870:
+	pmd_t* pmd = pmd_offset(pud, addr);
+	do {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1589: FILE: mm/vmscan.c:1878:
+static void shrink_pvma_pud_range(struct scan_control* sc, struct mm_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1590: FILE: mm/vmscan.c:1879:
+		mm, struct vm_area_struct* vma, pgd_t* pgd, unsigned long addr,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1590: FILE: mm/vmscan.c:1879:
+		mm, struct vm_area_struct* vma, pgd_t* pgd, unsigned long addr,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1594: FILE: mm/vmscan.c:1883:
+	pud_t* pud = pud_offset(pgd, addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1595: FILE: mm/vmscan.c:1884:
+	pud_t* pud = pud_offset(pgd, addr);
+	do {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1603: FILE: mm/vmscan.c:1892:
+static void shrink_pvma_pgd_range(struct scan_control* sc, struct mm_struct*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1604: FILE: mm/vmscan.c:1893:
+		mm, struct vm_area_struct* vma)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1609: FILE: mm/vmscan.c:1898:
+	pgd_t* pgd = pgd_offset(mm, addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1610: FILE: mm/vmscan.c:1899:
+	pgd_t* pgd = pgd_offset(mm, addr);
+	do {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1618: FILE: mm/vmscan.c:1907:
+static void shrink_private_vma(struct scan_control* sc)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1620: FILE: mm/vmscan.c:1909:
+	struct vm_area_struct* vma;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1624: FILE: mm/vmscan.c:1913:
+	prev = mm = &init_mm;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "vma"
#1637: FILE: mm/vmscan.c:1926:
+			for (vma = mm->mmap; vma != NULL; vma = vma->vm_next) {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1671: FILE: mm/vmscan.c:2125:
+static int kppsd(void* p)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1676: FILE: mm/vmscan.c:2130:
+	DEFINE_WAIT(wait);
+	daemonize("kppsd");

WARNING:LINE_SPACING: Missing a blank line after declarations
#1679: FILE: mm/vmscan.c:2133:
+	struct scan_control default_sc;
+	default_sc.gfp_mask = GFP_KERNEL;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000002496.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 91 errors, 60 warnings, 39 checks, 1545 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000002496.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
