WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#30: 
Signed-Off-By: Chandra Seetharaman <sekharan@us.ibm.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#31: 
Signed-Off-By: Hubertus Franke <frankeh@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#32: 
Signed-Off-By: Shailabh Nagar <nagar@watson.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#33: 
Signed-Off-By: Gerrit Huizenga <gh@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#34: 
Signed-Off-By: Vivek Kashyap <kashyapv@us.ibm.com>

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#35: 
Signed-Off-By: Matt Helsley <matthltc@us.ibm.com>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#124: FILE: kernel/res_group/res_group.c:123:
+struct resource_group *alloc_res_group(struct resource_group *parent,
+						const char *name)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#129: FILE: kernel/res_group/res_group.c:128:
+	BUG_ON(parent == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent"
#129: FILE: kernel/res_group/res_group.c:128:
+	BUG_ON(parent == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#131: FILE: kernel/res_group/res_group.c:130:
+	/* Only upto MAX_DEPTH level of hierarchy is supported */
 	        ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*rgroup)...) over kzalloc(sizeof(struct resource_group)...)
#136: FILE: kernel/res_group/res_group.c:135:
+	rgroup = kzalloc(sizeof(struct resource_group), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LINE_SPACING: Missing a blank line after declarations
#158: FILE: kernel/res_group/res_group.c:157:
+		struct res_controller *ctlr = get_controller_by_id(i);
+		if (!ctlr)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#188: FILE: kernel/res_group/res_group.c:197:
+	BUG_ON(is_res_group_root(rgroup));

WARNING:LINE_SPACING: Missing a blank line after declarations
#192: FILE: kernel/res_group/res_group.c:201:
+		struct res_controller *ctlr = get_controller_by_id(i);
+		if (!ctlr)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#216: FILE: kernel/res_group/res_group.c:225:
+	BUG_ON(is_res_group_root(rgroup));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#227: FILE: kernel/res_group/res_group.c:236:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#257: FILE: kernel/res_group/res_group.c:283:
+  ^Iread_lock(&res_group_lock);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#257: FILE: kernel/res_group/res_group.c:283:
+  ^Iread_lock(&res_group_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#257: FILE: kernel/res_group/res_group.c:283:
+  ^Iread_lock(&res_group_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#261: FILE: kernel/res_group/res_group.c:287:
+  ^I^Ido_alloc_shares_struct(rgroup, ctlr);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#261: FILE: kernel/res_group/res_group.c:287:
+  ^I^Ido_alloc_shares_struct(rgroup, ctlr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: kernel/res_group/res_group.c:287:
+  ^I^Ido_alloc_shares_struct(rgroup, ctlr);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#267: FILE: kernel/res_group/res_group.c:293:
+  ^Iread_unlock(&res_group_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#267: FILE: kernel/res_group/res_group.c:293:
+  ^Iread_unlock(&res_group_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: kernel/res_group/res_group.c:293:
+  ^Iread_unlock(&res_group_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#291: FILE: kernel/res_group/res_group.c:330:
+  ^Iread_lock(&res_group_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#291: FILE: kernel/res_group/res_group.c:330:
+  ^Iread_lock(&res_group_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: kernel/res_group/res_group.c:330:
+  ^Iread_lock(&res_group_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#295: FILE: kernel/res_group/res_group.c:334:
+  ^I^Ido_free_shares_struct(rgroup, ctlr);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#295: FILE: kernel/res_group/res_group.c:334:
+  ^I^Ido_free_shares_struct(rgroup, ctlr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: kernel/res_group/res_group.c:334:
+  ^I^Ido_free_shares_struct(rgroup, ctlr);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#301: FILE: kernel/res_group/res_group.c:340:
+  ^Iread_unlock(&res_group_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#301: FILE: kernel/res_group/res_group.c:340:
+  ^Iread_unlock(&res_group_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#301: FILE: kernel/res_group/res_group.c:340:
+  ^Iread_unlock(&res_group_lock);$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#312: FILE: kernel/res_group/res_group.c:354:
+EXPORT_SYMBOL_GPL(free_res_group);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#313: FILE: kernel/res_group/res_group.c:355:
+EXPORT_SYMBOL_GPL(default_res_group);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'parent' may be better as '(parent)' to avoid precedence issues
#328: FILE: include/linux/res_group_rc.h:74:
+#define for_each_child(child, parent)	\
+	list_for_each_entry(child, &parent->children, siblings)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#340: FILE: kernel/res_group/local.h:11:
+extern struct resource_group *alloc_res_group(struct resource_group *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct resource_group *' should also have an identifier name
#340: FILE: kernel/res_group/local.h:11:
+extern struct resource_group *alloc_res_group(struct resource_group *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#340: FILE: kernel/res_group/local.h:11:
+extern struct resource_group *alloc_res_group(struct resource_group *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: kernel/res_group/local.h:12:
+extern struct resource_group *alloc_res_group(struct resource_group *,
+							const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#342: FILE: kernel/res_group/local.h:13:
+extern int free_res_group(struct resource_group *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct resource_group *' should also have an identifier name
#342: FILE: kernel/res_group/local.h:13:
+extern int free_res_group(struct resource_group *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#343: FILE: kernel/res_group/local.h:14:
+extern void release_res_group(struct kref *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kref *' should also have an identifier name
#343: FILE: kernel/res_group/local.h:14:
+extern void release_res_group(struct kref *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000081758.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 30 warnings, 9 checks, 271 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000081758.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
