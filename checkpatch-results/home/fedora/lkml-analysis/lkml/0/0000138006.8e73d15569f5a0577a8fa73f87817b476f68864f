CHECK:BRACES: braces {} should be used on all arms of this statement
#103: FILE: mm/vmscan.c:623:
+	if (PageActive(page)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#110: FILE: mm/vmscan.c:630:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#135: FILE: mm/vmscan.c:655:
+	BUG_ON(!mapping);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#143: FILE: mm/vmscan.c:663:
+	radix_pointer = (struct page **)radix_tree_lookup_slot(

CHECK:BRACES: braces {} should be used on all arms of this statement
#161: FILE: mm/vmscan.c:681:
+	if (PageSwapCache(page)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#164: FILE: mm/vmscan.c:684:
+	} else

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#207: FILE: mm/vmscan.c:727:
+{
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#269: FILE: mm/vmscan.c:779:
+	BUG_ON(PageWriteback(page));	/* Writeback must be complete */

WARNING:REPEATED_WORD: Possible repeated word: 'we'
#341: FILE: mm/vmscan.c:850:
+		 * where we we may have triggered writeouts.

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#439: FILE: mm/vmscan.c:945:
+		}
+		else if (newpage) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#476: FILE: include/linux/swap.h:185:
+extern int migrate_page(struct page *, struct page *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#476: FILE: include/linux/swap.h:185:
+extern int migrate_page(struct page *, struct page *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#476: FILE: include/linux/swap.h:185:
+extern int migrate_page(struct page *, struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#477: FILE: include/linux/swap.h:186:
+extern int migrate_page_remove_references(struct page *, struct page *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#477: FILE: include/linux/swap.h:186:
+extern int migrate_page_remove_references(struct page *, struct page *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#477: FILE: include/linux/swap.h:186:
+extern int migrate_page_remove_references(struct page *, struct page *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#477: FILE: include/linux/swap.h:186:
+extern int migrate_page_remove_references(struct page *, struct page *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#478: FILE: include/linux/swap.h:187:
+extern void migrate_page_copy(struct page *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#478: FILE: include/linux/swap.h:187:
+extern void migrate_page_copy(struct page *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#478: FILE: include/linux/swap.h:187:
+extern void migrate_page_copy(struct page *, struct page *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000138006.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 10 warnings, 9 checks, 417 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000138006.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
