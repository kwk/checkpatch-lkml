WARNING:TYPO_SPELLING: 'preperation' may be misspelled - perhaps 'preparation'?
#24: 
In preperation for the x86_64 generic time conversion, this patch 
   ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#54: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#59: FILE: arch/x86_64/kernel/hpet.c:1:
+#include <linux/kernel.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#71: FILE: arch/x86_64/kernel/hpet.c:13:
+int nohpet __initdata = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:LINE_SPACING: Missing a blank line after declarations
#84: FILE: arch/x86_64/kernel/hpet.c:26:
+	unsigned long counter = hpet_readl(HPET_COUNTER) - vxtime.last;
+	return (min(counter,hpet_tick) * vxtime.quot) >> US_SCALE;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#84: FILE: arch/x86_64/kernel/hpet.c:26:
+	return (min(counter,hpet_tick) * vxtime.quot) >> US_SCALE;
 	                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#91: FILE: arch/x86_64/kernel/hpet.c:33:
+^Iunsigned int ^I^Intimer;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#94: FILE: arch/x86_64/kernel/hpet.c:36:
+        ^Ireturn 0;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#94: FILE: arch/x86_64/kernel/hpet.c:36:
+        ^Ireturn 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: arch/x86_64/kernel/hpet.c:36:
+        ^Ireturn 0;$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#96: FILE: arch/x86_64/kernel/hpet.c:38:
+	memset(&hd, 0, sizeof (hd));

CHECK:SPACING: No space is necessary after a cast
#121: FILE: arch/x86_64/kernel/hpet.c:63:
+		hpet = (struct hpet *) fix_to_virt(FIX_HPET_BASE);

CHECK:CAMELCASE: Avoid CamelCase: <Tn_INT_ROUTE_CNF_MASK>
#125: FILE: arch/x86_64/kernel/hpet.c:67:
+					Tn_INT_ROUTE_CNF_MASK) >>

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Tn_INT_ROUTE_CNF_SHIFT>
#126: FILE: arch/x86_64/kernel/hpet.c:68:
+				Tn_INT_ROUTE_CNF_SHIFT;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#128: FILE: arch/x86_64/kernel/hpet.c:70:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#253: FILE: arch/x86_64/kernel/hpet.c:195:
+#define DEFAULT_RTC_INT_FREQ ^I64$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#254: FILE: arch/x86_64/kernel/hpet.c:196:
+#define RTC_NUM_INTS ^I^I1$

WARNING:TYPO_SPELLING: 'everytime' may be misspelled - perhaps 'every time'?
#278: FILE: arch/x86_64/kernel/hpet.c:220:
+ * stop the main counter. And if we do that everytime someone diables/enables
                                             ^^^^^^^^^

WARNING:TYPO_SPELLING: 'diables' may be misspelled - perhaps 'disables'?
#278: FILE: arch/x86_64/kernel/hpet.c:220:
+ * stop the main counter. And if we do that everytime someone diables/enables
                                                               ^^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'PIE_freq > DEFAULT_RTC_INT_FREQ'
#295: FILE: arch/x86_64/kernel/hpet.c:237:
+	if (PIE_on && (PIE_freq > DEFAULT_RTC_INT_FREQ))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#303: FILE: arch/x86_64/kernel/hpet.c:245:
+	cnt += ((hpet_tick*HZ)/hpet_rtc_int_freq);
 	                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#303: FILE: arch/x86_64/kernel/hpet.c:245:
+	cnt += ((hpet_tick*HZ)/hpet_rtc_int_freq);
 	                      ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'PIE_freq > DEFAULT_RTC_INT_FREQ'
#328: FILE: arch/x86_64/kernel/hpet.c:270:
+	if (PIE_on && (PIE_freq > DEFAULT_RTC_INT_FREQ))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#349: FILE: arch/x86_64/kernel/hpet.c:291:
+		 * back to the future: */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#358: FILE: arch/x86_64/kernel/hpet.c:300:
+		printk(KERN_WARNING "rtc: lost some interrupts at %ldHz.\n",

WARNING:BRACES: braces {} are not necessary for single statement blocks
#393: FILE: arch/x86_64/kernel/hpet.c:335:
+	if (bit_mask & RTC_UIE) {
+		UIE_on = 1;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#400: FILE: arch/x86_64/kernel/hpet.c:342:
+	if (bit_mask & RTC_AIE) {
+		AIE_on = 1;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#449: FILE: arch/x86_64/kernel/hpet.c:391:
+	if (UIE_on | AIE_on) {
+		rtc_get_rtc_time(&curr_time);
+	}

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#462: FILE: arch/x86_64/kernel/hpet.c:404:
+		if (PIE_count >= hpet_rtc_int_freq/PIE_freq) {
 		                                  ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'curr_time.tm_sec == alarm_time.tm_sec'
#470: FILE: arch/x86_64/kernel/hpet.c:412:
+		if ((curr_time.tm_sec == alarm_time.tm_sec) &&
+		    (curr_time.tm_min == alarm_time.tm_min) &&
+		    (curr_time.tm_hour == alarm_time.tm_hour)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'curr_time.tm_min == alarm_time.tm_min'
#470: FILE: arch/x86_64/kernel/hpet.c:412:
+		if ((curr_time.tm_sec == alarm_time.tm_sec) &&
+		    (curr_time.tm_min == alarm_time.tm_min) &&
+		    (curr_time.tm_hour == alarm_time.tm_hour)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'curr_time.tm_hour == alarm_time.tm_hour'
#470: FILE: arch/x86_64/kernel/hpet.c:412:
+		if ((curr_time.tm_sec == alarm_time.tm_sec) &&
+		    (curr_time.tm_min == alarm_time.tm_min) &&
+		    (curr_time.tm_hour == alarm_time.tm_hour)) {

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#492: FILE: arch/x86_64/kernel/hpet.c:434:
+__setup("nohpet", nohpet_setup);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#573: FILE: arch/x86_64/kernel/time.c:232:
+extern unsigned long long cycles_2_ns(unsigned long long cyc);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1201: FILE: arch/x86_64/kernel/tsc.c:1:
+#include <linux/kernel.h>

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1212: FILE: arch/x86_64/kernel/tsc.c:12:
+int notsc __initdata = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1231: FILE: arch/x86_64/kernel/tsc.c:31:
+	unsigned long x;
+	t = get_cycles_sync();

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1279: FILE: arch/x86_64/kernel/tsc.c:79:
+static unsigned int cpufreq_delayed_issched = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1280: FILE: arch/x86_64/kernel/tsc.c:80:
+static unsigned int cpufreq_init = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1286: FILE: arch/x86_64/kernel/tsc.c:86:
+	unsigned int cpu;
+	for_each_online_cpu(cpu) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1299: FILE: arch/x86_64/kernel/tsc.c:99:
+	static int warned;
+	if (cpufreq_init && !cpufreq_delayed_issched) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1303: FILE: arch/x86_64/kernel/tsc.c:103:
+			printk(KERN_DEBUG "Losing some ticks... "

WARNING:SPLIT_STRING: quoted string split across lines
#1304: FILE: arch/x86_64/kernel/tsc.c:104:
+			printk(KERN_DEBUG "Losing some ticks... "
+				"checking if CPU frequency changed.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1310: FILE: arch/x86_64/kernel/tsc.c:110:
+static unsigned int  ref_freq = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1311: FILE: arch/x86_64/kernel/tsc.c:111:
+static unsigned long loops_per_jiffy_ref = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1313: FILE: arch/x86_64/kernel/tsc.c:113:
+static unsigned long cpu_khz_ref = 0;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val == CPUFREQ_RESUMECHANGE'
#1337: FILE: arch/x86_64/kernel/tsc.c:137:
+	if ((val == CPUFREQ_PRECHANGE  && freq->old < freq->new) ||
+		(val == CPUFREQ_POSTCHANGE && freq->old > freq->new) ||
+		(val == CPUFREQ_RESUMECHANGE)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1338: FILE: arch/x86_64/kernel/tsc.c:138:
+	if ((val == CPUFREQ_PRECHANGE  && freq->old < freq->new) ||
+		(val == CPUFREQ_POSTCHANGE && freq->old > freq->new) ||

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1381: FILE: arch/x86_64/kernel/tsc.c:181:
+	/* Most intel systems have synchronized TSCs except for
+	   multi node systems */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1381: FILE: arch/x86_64/kernel/tsc.c:181:
+	   multi node systems */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1382: FILE: arch/x86_64/kernel/tsc.c:182:
+ ^Iif (boot_cpu_data.x86_vendor == X86_VENDOR_INTEL) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1382: FILE: arch/x86_64/kernel/tsc.c:182:
+ ^Iif (boot_cpu_data.x86_vendor == X86_VENDOR_INTEL) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1382: FILE: arch/x86_64/kernel/tsc.c:182:
+ ^Iif (boot_cpu_data.x86_vendor == X86_VENDOR_INTEL) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1388: FILE: arch/x86_64/kernel/tsc.c:188:
+ ^I^Ireturn 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1388: FILE: arch/x86_64/kernel/tsc.c:188:
+ ^I^Ireturn 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1388: FILE: arch/x86_64/kernel/tsc.c:188:
+ ^I^Ireturn 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1391: FILE: arch/x86_64/kernel/tsc.c:191:
+ ^I/* Assume multi socket systems are not synchronized */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1391: FILE: arch/x86_64/kernel/tsc.c:191:
+ ^I/* Assume multi socket systems are not synchronized */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1391: FILE: arch/x86_64/kernel/tsc.c:191:
+ ^I/* Assume multi socket systems are not synchronized */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1392: FILE: arch/x86_64/kernel/tsc.c:192:
+ ^Ireturn num_present_cpus() > 1;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1392: FILE: arch/x86_64/kernel/tsc.c:192:
+ ^Ireturn num_present_cpus() > 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1392: FILE: arch/x86_64/kernel/tsc.c:192:
+ ^Ireturn num_present_cpus() > 1;$

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1401: FILE: arch/x86_64/kernel/tsc.c:201:
+__setup("notsc", notsc_setup);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1410: FILE: include/asm-x86_64/hpet.h:59:
+extern int hpet_arch_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1411: FILE: include/asm-x86_64/hpet.h:60:
+extern int hpet_timer_stop_set_go(unsigned long tick);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1412: FILE: include/asm-x86_64/hpet.h:61:
+extern int hpet_reenable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1413: FILE: include/asm-x86_64/hpet.h:62:
+extern unsigned int hpet_calibrate_tsc(void);

WARNING:TYPO_SPELLING: 'arbitralrily' may be misspelled - perhaps 'arbitrarily'?
#1435: FILE: include/asm-x86_64/timex.h:52:
+#define US_SCALE        32 /* 2^32, arbitralrily chosen */
                                     ^^^^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1439: FILE: include/asm-x86_64/timex.h:56:
+extern unsigned int do_gettimeoffset_hpet(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1440: FILE: include/asm-x86_64/timex.h:57:
+extern unsigned int do_gettimeoffset_tsc(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1441: FILE: include/asm-x86_64/timex.h:58:
+extern void set_cyc2ns_scale(unsigned long khz);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000014470.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 13 errors, 35 warnings, 23 checks, 1098 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000014470.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
