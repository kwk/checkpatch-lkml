WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
diff -urpN -I \$.*\$ --exclude TAGS -X /home/rusty/devel/kernel/kernel-patches/current-dontdiff --minimal linux-2.5.29.9350/Documentation/sched-coding.txt linux-2.5.29.9350.updated/Documentation/sched-coding.txt

WARNING:LINE_SPACING: Missing a blank line after declarations
#78: FILE: include/linux/sched.h:417:
+	unsigned long mask = 0;
+	BUG_ON(!cpu_online(cpu));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#78: FILE: include/linux/sched.h:417:
+	BUG_ON(!cpu_online(cpu));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#85: FILE: include/linux/sched.h:423:
+#define migrate_to_cpu(cpu) do { BUG_ON((cpu) != 0); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#85: FILE: include/linux/sched.h:423:
+#define migrate_to_cpu(cpu) do { BUG_ON((cpu) != 0); } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#85: FILE: include/linux/sched.h:423:
+#define migrate_to_cpu(cpu) do { BUG_ON((cpu) != 0); } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:NEW_TYPEDEFS: do not add new typedefs
#132: FILE: include/asm-i386/smp.h:94:
+typedef unsigned long cpumask_t;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#149: FILE: include/asm-i386/smp.h:107:
+	return NR_CPUS;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#168: FILE: include/asm-ia64/smp.h:55:
+typedef unsigned long cpumask_t;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#185: FILE: include/asm-ia64/smp.h:69:
+	return NR_CPUS;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#197: FILE: include/asm-ppc/smp.h:59:
+typedef unsigned long cpumask_t;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#213: FILE: include/asm-ppc/smp.h:72:
+	return NR_CPUS;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#224: FILE: include/asm-ppc64/smp.h:56:
+typedef unsigned long cpumask_t;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#238: FILE: include/asm-ppc64/smp.h:70:
+	return NR_CPUS;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#252: FILE: include/asm-sparc64/smp.h:73:
+typedef unsigned long cpumask_t;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#266: FILE: include/asm-sparc64/smp.h:84:
+	if (*mask & cpu_online_map) != 0UL)

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#268: FILE: include/asm-sparc64/smp.h:86:
+	return NR_CPUS;

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#280: FILE: include/linux/init_task.h:51:
+    cpus_allowed:	CPU_MASK_ALL,					\
                 ^

WARNING:INDENTED_LABEL: labels should not be indented
#280: FILE: include/linux/init_task.h:51:
+    cpus_allowed:	CPU_MASK_ALL,					\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#309: FILE: include/linux/sched.h:414:
+extern void set_cpus_allowed(task_t *p, cpumask_t *new_mask);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:NEW_TYPEDEFS: do not add new typedefs
#345: FILE: include/linux/smp.h:102:
+typedef unsigned long cpumask_t;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#348: FILE: include/linux/smp.h:105:
+#define cpu_online_mask(res,mask) do { *(res) = (*(mask) & 1); } while(0)
                            ^

ERROR:SPACING: space required before the open parenthesis '('
#348: FILE: include/linux/smp.h:105:
+#define cpu_online_mask(res,mask) do { *(res) = (*(mask) & 1); } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#348: FILE: include/linux/smp.h:105:
+#define cpu_online_mask(res,mask) do { *(res) = (*(mask) & 1); } while(0)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#392: FILE: kernel/sched.c:1557:
+	if (find_first_bit((unsigned long *)&online_mask, NR_CPUS) == NR_CPUS)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#453: FILE: kernel/sched.c:1947:
+		BUG_ON(task_cpu(p) >= NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#453: FILE: kernel/sched.c:1947:
+		BUG_ON(task_cpu(p) >= NR_CPUS);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000441004.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 5 errors, 21 warnings, 1 checks, 347 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000441004.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
