WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#50: FILE: arch/sparc64/kernel/sparc64_ksyms.c:180:
+EXPORT_SYMBOL(__atomic64_sub);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:SPACING: No space is necessary after a cast
#77: FILE: arch/sparc64/kernel/time.c:471:
+		pc -= (unsigned long) _stext;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:SPACING: No space is necessary after a cast
#129: FILE: arch/sparc64/mm/fault.c:326:
+		if ((tpc >= KERNBASE && tpc < (unsigned long) _etext) ||

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#150: FILE: arch/sparc64/mm/init.c:61:
+extern char  _start[], _end[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: No space is necessary after a cast
#159: FILE: arch/sparc64/mm/init.c:1337:
+	start_pfn  = PAGE_ALIGN((unsigned long) _end) -

CHECK:SPACING: No space is necessary after a cast
#195: FILE: arch/sparc64/mm/init.c:1749:
+	codepages = (((unsigned long) _etext) - ((unsigned long) _start));

CHECK:SPACING: No space is necessary after a cast
#198: FILE: arch/sparc64/mm/init.c:1751:
+	datapages = (((unsigned long) _edata) - ((unsigned long) _etext));

CHECK:SPACING: No space is necessary after a cast
#201: FILE: arch/sparc64/mm/init.c:1753:
+	initpages = (((unsigned long) __init_end) - ((unsigned long) __init_begin));

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:NEW_TYPEDEFS: do not add new typedefs
#223: FILE: include/asm-sparc64/atomic.h:12:
+typedef struct { volatile long counter; } atomic64_t;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#223: FILE: include/asm-sparc64/atomic.h:12:
+typedef struct { volatile long counter; } atomic64_t;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#235: FILE: include/asm-sparc64/atomic.h:24:
+extern int __atomic64_add(int, atomic64_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#235: FILE: include/asm-sparc64/atomic.h:24:
+extern int __atomic64_add(int, atomic64_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'atomic64_t *' should also have an identifier name
#235: FILE: include/asm-sparc64/atomic.h:24:
+extern int __atomic64_add(int, atomic64_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#238: FILE: include/asm-sparc64/atomic.h:27:
+extern int __atomic64_sub(int, atomic64_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#238: FILE: include/asm-sparc64/atomic.h:27:
+extern int __atomic64_sub(int, atomic64_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'atomic64_t *' should also have an identifier name
#238: FILE: include/asm-sparc64/atomic.h:27:
+extern int __atomic64_sub(int, atomic64_t *);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#269: FILE: include/asm-sparc64/local.h:1:
+#ifndef _ARCH_SPARC64_LOCAL_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#273: FILE: include/asm-sparc64/local.h:5:
+#include <asm/atomic.h>

WARNING:NEW_TYPEDEFS: do not add new typedefs
#275: FILE: include/asm-sparc64/local.h:7:
+typedef atomic64_t local_t;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#279: FILE: include/asm-sparc64/local.h:11:
+#define local_set(v,i)	atomic64_set(v,i)
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#279: FILE: include/asm-sparc64/local.h:11:
+#define local_set(v,i)	atomic64_set(v,i)
                       	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#288: FILE: include/asm-sparc64/local.h:20:
+#define __local_add(i,v)	((v)->counter+=(i))
                      ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#288: FILE: include/asm-sparc64/local.h:20:
+#define __local_add(i,v)	((v)->counter+=(i))
                         	             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#289: FILE: include/asm-sparc64/local.h:21:
+#define __local_sub(i,v)	((v)->counter-=(i))
                      ^

ERROR:SPACING: spaces required around that '-=' (ctx:VxV)
#289: FILE: include/asm-sparc64/local.h:21:
+#define __local_sub(i,v)	((v)->counter-=(i))
                         	             ^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#312: FILE: include/asm-sparc64/sections.h:1:
+#ifndef _SPARC64_SECTIONS_H

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000354292.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 20 warnings, 8 checks, 243 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000354292.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
