WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#165: FILE: drivers/input/serio/serio.c:46:
+#include <asm/uaccess.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#215: FILE: drivers/input/serio/serio.c:234:
+static $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#237: FILE: drivers/input/serio/serio.c:256:
+		proc_entry = create_proc_read_entry(serio->name, S_IWUSR|S_IRUSR|S_IRGRP|S_IROTH, proc_bus_input_ss_ports_dir,

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#237: FILE: drivers/input/serio/serio.c:256:
+		proc_entry = create_proc_read_entry(serio->name, S_IWUSR|S_IRUSR|S_IRGRP|S_IROTH, proc_bus_input_ss_ports_dir,
 		                                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#237: FILE: drivers/input/serio/serio.c:256:
+		proc_entry = create_proc_read_entry(serio->name, S_IWUSR|S_IRUSR|S_IRGRP|S_IROTH, proc_bus_input_ss_ports_dir,
 		                                                                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#237: FILE: drivers/input/serio/serio.c:256:
+		proc_entry = create_proc_read_entry(serio->name, S_IWUSR|S_IRUSR|S_IRGRP|S_IROTH, proc_bus_input_ss_ports_dir,
 		                                                                        ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IRUSR|S_IRGRP|S_IROTH' are not preferred. Consider using octal permissions '0644'.
#237: FILE: drivers/input/serio/serio.c:256:
+		proc_entry = create_proc_read_entry(serio->name, S_IWUSR|S_IRUSR|S_IRGRP|S_IROTH, proc_bus_input_ss_ports_dir,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:BRACES: braces {} are not necessary for single statement blocks
#266: FILE: drivers/input/serio/serio.c:292:
+	if (proc_bus_input_ss_ports_dir) {
+		remove_proc_entry(serio->name, proc_bus_input_ss_ports_dir);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#276: FILE: drivers/input/serio/serio.c:302:
+static $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#292: FILE: drivers/input/serio/serio.c:318:
+	if (!dev->name) {
[...]
+	  dev->name = kmalloc(16, GFP_KERNEL);

WARNING:TABSTOP: Statements should start on a tabstop
#295: FILE: drivers/input/serio/serio.c:321:
+	  if (!dev->name)

ERROR:CODE_INDENT: code indent should use tabs where possible
#296: FILE: drivers/input/serio/serio.c:322:
+^I  ^Idev->name = "out of memory";$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#296: FILE: drivers/input/serio/serio.c:322:
+^I  ^Idev->name = "out of memory";$

WARNING:TABSTOP: Statements should start on a tabstop
#297: FILE: drivers/input/serio/serio.c:323:
+	  else

ERROR:CODE_INDENT: code indent should use tabs where possible
#298: FILE: drivers/input/serio/serio.c:324:
+^I  ^Isnprintf(dev->name, 16, "xx%p", dev);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#298: FILE: drivers/input/serio/serio.c:324:
+^I  ^Isnprintf(dev->name, 16, "xx%p", dev);$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#316: FILE: drivers/input/serio/serio.c:342:
+	if (proc_bus_input_ss_devices_dir) {
+		remove_proc_entry(dev->name, proc_bus_input_ss_devices_dir);
+	}

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#324: FILE: drivers/input/serio/serio.c:350:
+	} else if (strcpy(dev->name, "out of memory")==0) {
 	                                             ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#351: FILE: drivers/input/serio/serio.c:385:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#357: FILE: drivers/input/serio/serio.c:391:
+	struct proc_dir_entry *entry;
+	for (entry = proc_bus->subdir; entry; entry = entry->next)

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#358: FILE: drivers/input/serio/serio.c:392:
+		if (strcmp(entry->name, "input")==0) {
 		                                ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#358: FILE: drivers/input/serio/serio.c:392:
+		if (strcmp(entry->name, "input")==0) {
+			return entry;
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#366: FILE: drivers/input/serio/serio.c:400:
+static $

ERROR:CODE_INDENT: code indent should use tabs where possible
#377: FILE: drivers/input/serio/serio.c:411:
+^I  ^Istrcat(strcpy(page, dev->name), "\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#377: FILE: drivers/input/serio/serio.c:411:
+^I  ^Istrcat(strcpy(page, dev->name), "\n");$

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#381: FILE: drivers/input/serio/serio.c:415:
+	if (c<0) c = 0;
 	     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#381: FILE: drivers/input/serio/serio.c:415:
+	if (c<0) c = 0;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#384: FILE: drivers/input/serio/serio.c:418:
+	return count<c? count : c;
 	            ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#384: FILE: drivers/input/serio/serio.c:418:
+	return count<c? count : c;
 	              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#395: FILE: drivers/input/serio/serio.c:429:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#395: FILE: drivers/input/serio/serio.c:429:
+  $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#396: FILE: drivers/input/serio/serio.c:430:
+	kbuffer = kmalloc(count+1, GFP_KERNEL);
 	                       ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#397: FILE: drivers/input/serio/serio.c:431:
+	if (!kbuffer) return -ENOMEM;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#398: FILE: drivers/input/serio/serio.c:432:
+	r=copy_from_user(kbuffer, ubuffer, count);
 	 ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#399: FILE: drivers/input/serio/serio.c:433:
+	if (r) goto out;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#401: FILE: drivers/input/serio/serio.c:435:
+	if (kbuffer[count-1] == '\n') /* tolerate an EOL */
 	                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#402: FILE: drivers/input/serio/serio.c:436:
+		kbuffer[count-1] = '\0';
 		             ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#404: FILE: drivers/input/serio/serio.c:438:
+	if (strlen(kbuffer)==0 ||
 	                   ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#405: FILE: drivers/input/serio/serio.c:439:
+	    strcmp(kbuffer, "(unconnected)")==0) { /* disconnect */
 	                                    ^

CHECK:BRACES: Unbalanced braces around else statement
#431: FILE: drivers/input/serio/serio.c:465:
+			else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#432: FILE: drivers/input/serio/serio.c:466:
+				printk(KERN_ERR "Inappropriate serio device '%s'\n", kbuffer);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#440: FILE: drivers/input/serio/serio.c:474:
+		printk(KERN_ERR "Bad serio device '%s'\n", kbuffer);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#451: FILE: drivers/input/serio/serio.c:485:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#452: FILE: drivers/input/serio/serio.c:486:
+static $

CHECK:BRACES: braces {} should be used on all arms of this statement
#469: FILE: drivers/input/serio/serio.c:503:
+			if (!*start) {
[...]
+			} else  cnt += len;
[...]

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#472: FILE: drivers/input/serio/serio.c:506:
+			} else  cnt += len;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#487: FILE: drivers/input/serio/serio.c:521:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#504: FILE: drivers/input/serio/serio.c:538:
+		struct proc_dir_entry *proc_bus_input_dir = get_proc_bus_input();
+		if (proc_bus_input_dir) {

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#509: FILE: drivers/input/serio/serio.c:543:
+				proc_bus_input_ss_ports_dir = proc_mkdir("ports", proc_bus_input_ss_dir);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#513: FILE: drivers/input/serio/serio.c:547:
+					printk(KERN_WARNING "/proc/bus/input/serio/ports/ cannot be created\n");

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#515: FILE: drivers/input/serio/serio.c:549:
+				proc_bus_input_ss_devices_dir = proc_mkdir("devices", proc_bus_input_ss_dir);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#519: FILE: drivers/input/serio/serio.c:553:
+					printk(KERN_WARNING "/proc/bus/input/serio/devices/ cannot be created\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#521: FILE: drivers/input/serio/serio.c:555:
+				printk(KERN_WARNING "/proc/bus/input/serio/ cannot be created\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#524: FILE: drivers/input/serio/serio.c:558:
+			printk(KERN_WARNING "/proc/bus/input/ not found\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000277798.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 23 warnings, 11 checks, 401 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000277798.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
