WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
> > > The only con I see is the complexity of the code, but then again, Nigel

WARNING:TYPO_SPELLING: 'thats' may be misspelled - perhaps 'that's'?
#34: 
> > ..but thats a big con.
          ^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#93: FILE: arch/i386/kernel/time.c:385:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#193: FILE: arch/x86_64/kernel/time.c:521:
+^I * and interrupts are disabled, so this $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#195: FILE: arch/x86_64/kernel/time.c:523:
+^I * ^I^I^I^I-- NC$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#223: FILE: arch/x86_64/kernel/time.c:551:
+	if ((year += 1900) < 1970)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#304: FILE: crypto/deflate.c:146:
+^I    ^Iif (!(ret == Z_OK && !stream->avail_in && !stream->avail_out)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#304: FILE: crypto/deflate.c:146:
+^I    ^Iif (!(ret == Z_OK && !stream->avail_in && !stream->avail_out)) {$

WARNING:LINE_SPACING: Missing a blank line after declarations
#309: FILE: crypto/deflate.c:151:
+			u8 zerostuff = 0;
+			stream->next_out = &zerostuff;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#310: FILE: crypto/deflate.c:152:
+^I^I^Istream->avail_out = 1; $

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#326: FILE: crypto/Kconfig:288:
+config CRYPTO_LZF
+	tristate "LZF compression algorithm"
+	depends on CRYPTO
+	help
+	  This is the LZF algorithm. It is especially useful for Suspend2,
+	  because it achieves good compression quickly.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#357: FILE: Documentation/kernel-parameters.txt:971:
+ $

WARNING:TYPO_SPELLING: 'reenabled' may be misspelled - perhaps 're-enabled'?
#425: FILE: drivers/base/power/resume.c:105:
+			printk("WARNING: Interrupts reenabled while resuming sysdev driver %s.\n",
 			                            ^^^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#425: FILE: drivers/base/power/resume.c:105:
+			printk("WARNING: Interrupts reenabled while resuming sysdev driver %s.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#426: FILE: drivers/base/power/resume.c:106:
+			printk("WARNING: Interrupts reenabled while resuming sysdev driver %s.\n",
+			kobject_name(&dev->kobj));

ERROR:CODE_INDENT: code indent should use tabs where possible
#464: FILE: drivers/input/serio/serio.c:319:
+  ^I^I^Iup(&serio_sem);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#464: FILE: drivers/input/serio/serio.c:319:
+  ^I^I^Iup(&serio_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#464: FILE: drivers/input/serio/serio.c:319:
+  ^I^I^Iup(&serio_sem);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#466: FILE: drivers/input/serio/serio.c:321:
+  ^I^I^Idown(&serio_sem);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#466: FILE: drivers/input/serio/serio.c:321:
+  ^I^I^Idown(&serio_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#466: FILE: drivers/input/serio/serio.c:321:
+  ^I^I^Idown(&serio_sem);$

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#481: FILE: drivers/macintosh/Kconfig:195:
+config SOFTWARE_REPLACE_SLEEP
+	bool "Using Software suspend replace broken sleep function"
+	depends on SUSPEND2
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#554: FILE: include/asm-arm/hw_irq.h:1:
+#ifndef __ASM_HARDIRQ_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#567: FILE: include/asm-i386/suspend2.h:1:
+ /*

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#579: FILE: include/asm-i386/suspend2.h:13:
+#include <asm/processor.h>

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#599: FILE: include/asm-i386/suspend2.h:33:
+} __attribute__((packed));

WARNING:NEW_TYPEDEFS: do not add new typedefs
#600: FILE: include/asm-i386/suspend2.h:34:
+typedef struct suspend2_saved_context suspend2_saved_context_t;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#607: FILE: include/asm-i386/suspend2.h:41:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#614: FILE: include/asm-i386/suspend2.h:48:
+ * buggy - it returns the value of the stack at the proper location, not the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#616: FILE: include/asm-i386/suspend2.h:50:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#621: FILE: include/asm-i386/suspend2.h:55:
+ * place. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#641: FILE: include/asm-i386/suspend2.h:75:
+^I * so it's avoided. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#661: FILE: include/asm-i386/suspend2.h:95:
+^I * control registers $

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#674: FILE: include/asm-i386/suspend2.h:107:
Can't you use existing suspend functions?

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#682: FILE: include/asm-i386/suspend2.h:114:
+	cpu_clear(0, per_cpu(cpu_tlbstate,
+				0).active_mm->cpu_vm_mask);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#686: FILE: include/asm-i386/suspend2.h:118:
+^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#687: FILE: include/asm-i386/suspend2.h:119:
+	
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#691: FILE: include/asm-i386/suspend2.h:123:
+	BUG_ON(!irqs_disabled());

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#733: FILE: include/linux/dyn_pageflags.h:1:
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#734: FILE: include/linux/dyn_pageflags.h:2:
+typedef unsigned long *** dyn_pageflags_t;

ERROR:POINTER_LOCATION: "foo *** bar" should be "foo ***bar"
#734: FILE: include/linux/dyn_pageflags.h:2:
+typedef unsigned long *** dyn_pageflags_t;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#745: FILE: include/linux/freezer.h:1:
+/* Freezer declarations */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#762: FILE: include/linux/freezer.h:18:
+extern void do_freeze_process(struct notifier_block *nl);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required before the open parenthesis '('
#767: FILE: include/linux/freezer.h:23:
+#define set_freezer_state(bit) do { } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#768: FILE: include/linux/freezer.h:24:
+#define clear_freezer_state(bit) do { } while(0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#785: FILE: include/linux/kernel.h:106:
+extern int snprintf_used(char *buffer, int buffer_size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#786: FILE: include/linux/kernel.h:107:
+extern int snprintf_used(char *buffer, int buffer_size,
+		const char *fmt, ...);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#959: FILE: kernel/fork.c:170:
+		extern void * suspend2_get_nonconflicting_pages(int);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#959: FILE: kernel/fork.c:170:
+		extern void * suspend2_get_nonconflicting_pages(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#959: FILE: kernel/fork.c:170:
+		extern void * suspend2_get_nonconflicting_pages(int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#961: FILE: kernel/fork.c:172:
+		printk("Starting a copyback thread %p\n", ti);

CHECK:BRACES: Unbalanced braces around else statement
#962: FILE: kernel/fork.c:173:
+	} else

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#978: FILE: kernel/power/atomic_copy.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/thread_info.h> instead of <asm/thread_info.h>
#986: FILE: kernel/power/atomic_copy.c:9:
+#include <asm/thread_info.h>

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1002: FILE: kernel/power/atomic_copy.c:25:
+volatile static int state1 __nosavedata = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1002: FILE: kernel/power/atomic_copy.c:25:
+volatile static int state1 __nosavedata = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1003: FILE: kernel/power/atomic_copy.c:26:
+volatile static int state2 __nosavedata = 0;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1003: FILE: kernel/power/atomic_copy.c:26:
+volatile static int state2 __nosavedata = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1004: FILE: kernel/power/atomic_copy.c:27:
+volatile static int state3 __nosavedata = 0;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1004: FILE: kernel/power/atomic_copy.c:27:
+volatile static int state3 __nosavedata = 0;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1005: FILE: kernel/power/atomic_copy.c:28:
+volatile static int io_speed_save[2][2] __nosavedata;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1020: FILE: kernel/power/block_io.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1056: FILE: kernel/power/block_io.h:37:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1061: FILE: kernel/power/block_io.h:42:
+^Iint (*submit_io) (int rw, $

WARNING:SPACING: Unnecessary space before function pointer arguments
#1061: FILE: kernel/power/block_io.h:42:
+	int (*submit_io) (int rw, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1062: FILE: kernel/power/block_io.h:43:
+	int (*submit_io) (int rw, 
+		struct submit_params *submit_info, int syncio);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1063: FILE: kernel/power/block_io.h:44:
+	int (*bdev_page_io) (int rw, struct block_device *bdev, long pos,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1064: FILE: kernel/power/block_io.h:45:
+	int (*bdev_page_io) (int rw, struct block_device *bdev, long pos,
+			struct page *page);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1065: FILE: kernel/power/block_io.h:46:
+	int (*rw_page) (int rw, struct page *page, int readahead_index,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1067: FILE: kernel/power/block_io.h:48:
+	void (*wait_on_readahead) (int readahead_index);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1068: FILE: kernel/power/block_io.h:49:
+	void (*check_io_stats) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1069: FILE: kernel/power/block_io.h:50:
+	void (*reset_io_stats) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1070: FILE: kernel/power/block_io.h:51:
+	void (*finish_all_io) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1071: FILE: kernel/power/block_io.h:52:
+	int (*prepare_readahead) (int index);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1072: FILE: kernel/power/block_io.h:53:
+	void (*cleanup_readahead) (int index);

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#1073: FILE: kernel/power/block_io.h:54:
+	struct page ** readahead_pages;

WARNING:SPACING: Unnecessary space before function pointer arguments
#1074: FILE: kernel/power/block_io.h:55:
+	int (*readahead_ready) (int readahead_index);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1076: FILE: kernel/power/block_io.h:57:
+	int (*forward_one_page) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1077: FILE: kernel/power/block_io.h:58:
+	void (*set_devinfo) (struct suspend2_bdev_info *info);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1078: FILE: kernel/power/block_io.h:59:
+	int (*read_init) (int stream_number);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1079: FILE: kernel/power/block_io.h:60:
+	int (*read_chunk) (struct page *buffer_page, int sync);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1080: FILE: kernel/power/block_io.h:61:
+	int (*read_cleanup) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1081: FILE: kernel/power/block_io.h:62:
+	int (*write_init) (int stream_number);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1082: FILE: kernel/power/block_io.h:63:
+	int (*write_chunk) (struct page *buffer_page);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1083: FILE: kernel/power/block_io.h:64:
+	int (*write_cleanup) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1084: FILE: kernel/power/block_io.h:65:
+	int (*read_header_chunk) (char *buffer, int buffer_size);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1085: FILE: kernel/power/block_io.h:66:
+	int (*write_header_chunk) (char *buffer, int buffer_size);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1086: FILE: kernel/power/block_io.h:67:
+	int (*write_header_chunk_finish) (void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1096: FILE: kernel/power/checksum.h:1:
+#ifdef CONFIG_SUSPEND2_CHECKSUMS

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1097: FILE: kernel/power/checksum.h:2:
+extern void suspend2_verify_checksums(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1098: FILE: kernel/power/checksum.h:3:
+extern void suspend2_checksum_calculate_checksums(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1099: FILE: kernel/power/checksum.h:4:
+extern void suspend2_checksum_print_differences(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1100: FILE: kernel/power/checksum.h:5:
+extern int suspend2_allocate_checksum_pages(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1114: FILE: kernel/power/compression.c:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1134: FILE: kernel/power/compression.c:1:
+#include <linux/mm.h>

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#1137: FILE: kernel/power/compression.c:4:
+#include <asm/pgtable.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1151: FILE: kernel/power/encryption.c:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1172: FILE: kernel/power/extent.c:1:
+/* kernel/power/suspend2_core/extent.c

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1173: FILE: kernel/power/extent.c:2:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1177: FILE: kernel/power/extent.c:6:
+ * $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'state' - possible side-effects?
#1188: FILE: kernel/power/extent.c:14:
+#define extent_state_eof(state) ((state)->num_chains < (state)->current_chain)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#1190: FILE: kernel/power/extent.c:16:
+#define extent_for_each(extent_chain, extentpointer, value) \
+if ((extent_chain)->first) \
+	for ((extentpointer) = (extent_chain)->first, (value) = \
+			(extentpointer)->minimum; \
+	     ((extentpointer) && ((extentpointer)->next || (value) <= \
+				 (extentpointer)->maximum)); \
+	     (((value) == (extentpointer)->maximum) ? \
+		((extentpointer) = (extentpointer)->next, (value) = \
+		 ((extentpointer) ? (extentpointer)->minimum : 0)) : \
+			(value)++))

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'extent_chain' - possible side-effects?
#1190: FILE: kernel/power/extent.c:16:
+#define extent_for_each(extent_chain, extentpointer, value) \
+if ((extent_chain)->first) \
+	for ((extentpointer) = (extent_chain)->first, (value) = \
+			(extentpointer)->minimum; \
+	     ((extentpointer) && ((extentpointer)->next || (value) <= \
+				 (extentpointer)->maximum)); \
+	     (((value) == (extentpointer)->maximum) ? \
+		((extentpointer) = (extentpointer)->next, (value) = \
+		 ((extentpointer) ? (extentpointer)->minimum : 0)) : \
+			(value)++))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'extentpointer' - possible side-effects?
#1190: FILE: kernel/power/extent.c:16:
+#define extent_for_each(extent_chain, extentpointer, value) \
+if ((extent_chain)->first) \
+	for ((extentpointer) = (extent_chain)->first, (value) = \
+			(extentpointer)->minimum; \
+	     ((extentpointer) && ((extentpointer)->next || (value) <= \
+				 (extentpointer)->maximum)); \
+	     (((value) == (extentpointer)->maximum) ? \
+		((extentpointer) = (extentpointer)->next, (value) = \
+		 ((extentpointer) ? (extentpointer)->minimum : 0)) : \
+			(value)++))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'value' - possible side-effects?
#1190: FILE: kernel/power/extent.c:16:
+#define extent_for_each(extent_chain, extentpointer, value) \
+if ((extent_chain)->first) \
+	for ((extentpointer) = (extent_chain)->first, (value) = \
+			(extentpointer)->minimum; \
+	     ((extentpointer) && ((extentpointer)->next || (value) <= \
+				 (extentpointer)->maximum)); \
+	     (((value) == (extentpointer)->maximum) ? \
+		((extentpointer) = (extentpointer)->next, (value) = \
+		 ((extentpointer) ? (extentpointer)->minimum : 0)) : \
+			(value)++))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'currentextent' - possible side-effects?
#1206: FILE: kernel/power/extent.c:32:
+#define GET_EXTENT_NEXT(currentextent, currentval) \
+{ \
+	if (currentextent) { \
+		if ((currentval) == (currentextent)->maximum) { \
+			if ((currentextent)->next) { \
+				(currentextent) = (currentextent)->next; \
+				(currentval) = (currentextent)->minimum; \
+			} else { \
+				(currentextent) = NULL; \
+				(currentval) = 0; \
+			} \
+		} else \
+			currentval++; \
+	} \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'currentval' - possible side-effects?
#1206: FILE: kernel/power/extent.c:32:
+#define GET_EXTENT_NEXT(currentextent, currentval) \
+{ \
+	if (currentextent) { \
+		if ((currentval) == (currentextent)->maximum) { \
+			if ((currentextent)->next) { \
+				(currentextent) = (currentextent)->next; \
+				(currentval) = (currentextent)->minimum; \
+			} else { \
+				(currentextent) = NULL; \
+				(currentval) = 0; \
+			} \
+		} else \
+			currentval++; \
+	} \
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1228: FILE: kernel/power/io.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1229: FILE: kernel/power/io.c:2:
+ * kernel/power/io.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1265: FILE: kernel/power/Kconfig:112:
+menuconfig SUSPEND2
+	bool "Suspend2"
+	select DYN_PAGEFLAGS
+	depends on PM
+	select HOTPLUG_CPU if SMP
+	---help---
+	  Suspend2 is the 'new and improved' suspend support.
+	  
+	  See the Suspend2 home page (suspend2.net)
+	  for FAQs, HOWTOs and other documentation.
+
+	comment 'Image Storage (you need at least one writer)'
+		depends on SUSPEND2
+	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1272: FILE: kernel/power/Kconfig:119:
+^I  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1278: FILE: kernel/power/Kconfig:125:
+^I$

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1279: FILE: kernel/power/Kconfig:126:
+	config SUSPEND2_FILEWRITER
+		bool '  File Writer'
+		depends on SUSPEND2
+		---help---
+		  This option enables support for storing an image in a
+		  simple file. This should be possible, but we're still
+		  testing it.
+
+	config SUSPEND2_SWAPWRITER
+		bool '  Swap Writer'
+		depends on SUSPEND2
+		select SWAP
+		---help---
+		  This option enables support for storing an image in your
+		  swap space.
+
+	comment 'General Options'
+		depends on SUSPEND2
+
+	config SUSPEND2_DEFAULT_RESUME2
+		string '  Default resume device name'
+		depends on SUSPEND2
+		---help---
+		  You normally need to add a resume2= parameter to your lilo.conf or
+		  equivalent. With this option properly set, the kernel has a value
+		  to default. No damage will be done if the value is invalid.
+
+	config SUSPEND2_CHECKSUMMING
+		bool '  Checksum images - developer option (SLOW!)'
+		depends on PM_DEBUG && SUSPEND2
+		---help---
+		  This option implements checksumming of images. It is not designed
+		  for everyone to use, but as a development tool.
+
+	config SUSPEND2_KEEP_IMAGE
+		bool '  Allow Keep Image Mode'
+		depends on SUSPEND2
+		---help---
+		  This option allows you to keep and image and reuse it. It is intended
+		  __ONLY__ for use with systems where all filesystems are mounted read-
+		  only (kiosks, for example). To use it, compile this option in and boot
+		  normally. Set the KEEP_IMAGE flag in /proc/suspend2 and suspend.
+		  When you resume, the image will not be removed. You will be unable to turn
+		  off swap partitions (assuming you are using the swap writer), but future
+		  suspends simply do a power-down. The image can be updated using the
+		  kernel command line parameter suspend_act= to turn off the keep image
+		  bit. Keep image mode is a little less user friendly on purpose - it
+		  should not be used without thought!

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1337: FILE: kernel/power/netlink.c:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1348: FILE: kernel/power/netlink.c:9:
+static int suspend2_nl_gen_rcv_msg(struct user_helper_data *uhd,
+		struct sk_buff *skb, struct nlmsghdr *nlh)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1355: FILE: kernel/power/netlink.c:16:
+	 * 1 for valid messages that it doesn't know. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1356: FILE: kernel/power/netlink.c:17:
+	if ((err = uhd->rcv_msg(skb, nlh)) != 1)

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#1365: FILE: kernel/power/netlink.c:25:
+	static char *envp[] = {

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#1370: FILE: kernel/power/netlink.c:30:
+	static char *argv[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL };

WARNING:NAKED_SSCANF: unchecked sscanf return value
#1380: FILE: kernel/power/netlink.c:40:
+		sscanf(orig_posn, "%s", test_read);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1390: FILE: kernel/power/netlink.c:50:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1403: FILE: kernel/power/pagedir.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1404: FILE: kernel/power/pagedir.c:2:
+ * kernel/power/pagedir.c

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1429: FILE: kernel/power/pagedir.c:26:
+int extra_pagedir_pages_allocated = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1438: FILE: kernel/power/pageflags.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1444: FILE: kernel/power/pageflags.c:6:
+ * $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1466: FILE: kernel/power/plugins.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1467: FILE: kernel/power/plugins.c:2:
+ * kernel/power/plugins.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1490: FILE: kernel/power/power_off.c:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1508: FILE: kernel/power/power_off.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1522: FILE: kernel/power/power_off.c:15:
+ *    should overlap completely, but I don't want to rely on this as it is $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1537: FILE: kernel/power/proc.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1538: FILE: kernel/power/proc.c:2:
+ * /kernel/power/proc.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1563: FILE: kernel/power/storage.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1564: FILE: kernel/power/storage.c:2:
+ * kernel/power/storage.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1599: FILE: kernel/power/storage.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1607: FILE: kernel/power/storage.c:8:
+ * $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1621: FILE: kernel/power/suspend.c:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1642: FILE: kernel/power/suspend_file.c:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1654: FILE: kernel/power/suspend_file.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1660: FILE: kernel/power/suspend_file.c:7:
+ * $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1673: FILE: kernel/power/ui.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1674: FILE: kernel/power/ui.c:2:
+ * kernel/power/ui.c

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1711: FILE: kernel/power/ui.c:37:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1715: FILE: kernel/power/ui.c:41:
+	if ((fd = sys_open("/dev/console", O_RDONLY, 0)) < 0) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1716: FILE: kernel/power/ui.c:42:
+		printk("Couldn't open /dev/console.\n");

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1726: FILE: kernel/power/ui.c:50:
+ * ^I^I(and we're displaying output), tell the user why and wait for$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1727: FILE: kernel/power/ui.c:51:
+ * ^I^Ithem to acknowledge the message.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1729: FILE: kernel/power/ui.c:53:
+ *^I ^Itelling the user why we're aborting.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1743: FILE: kernel/power/ui.c:66:
+^I^I^Iprinted_len = vsnprintf(local_printf_buf, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1744: FILE: kernel/power/ui.c:67:
+			printed_len = vsnprintf(local_printf_buf, 
+					sizeof(local_printf_buf), fmt, args);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1748: FILE: kernel/power/ui.c:71:
+				printed_len = sprintf(local_printf_buf + printed_len,
+					" (Press SPACE to continue)");

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1760: FILE: kernel/power/ui.c:81:
+		switch (message_detail) {
+		 case 0:
[...]
+		 case 1:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:TABSTOP: Statements should start on a tabstop
#1761: FILE: kernel/power/ui.c:82:
+		 case 0:

WARNING:TABSTOP: Statements should start on a tabstop
#1767: FILE: kernel/power/ui.c:88:
+		 case 1:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1775: FILE: kernel/power/ui.c:96:
+		say("Default action if you don't select one in %d seconds is: %s.\n",
+			message_timeout,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1787: FILE: kernel/power/ui.c:108:
+		say("Default action if you don't select one in %d seconds is: %s.\n",
+			message_timeout,

WARNING:TABSTOP: Statements should start on a tabstop
#1803: FILE: kernel/power/ui.c:123:
+	  }

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1826: FILE: kernel/sys.c:182:
+		ret = nb->notifier_call(nb,val,v);
 		                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1826: FILE: kernel/sys.c:182:
+		ret = nb->notifier_call(nb,val,v);
 		                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1852: FILE: mm/memory.c:954:
+ * We want the address of the page for Suspend2 to mark as being in pageset1. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1877: FILE: mm/page_alloc.c:924:
+^Iif ((((p->flags & PF_MEMALLOC) || unlikely(test_thread_flag(TIF_MEMDIE))) && $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1878: FILE: mm/page_alloc.c:925:
+	if ((((p->flags & PF_MEMALLOC) || unlikely(test_thread_flag(TIF_MEMDIE))) && 
+				!in_interrupt()) || (test_freezer_state(FREEZER_ON))) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000102769.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 46 errors, 92 warnings, 25 checks, 1358 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000102769.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
