WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#78: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#82: FILE: drivers/timesource/acpi_pm.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#83: FILE: drivers/timesource/acpi_pm.c:2:
+ * linux/drivers/timesource/acpi_pm.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#100: FILE: drivers/timesource/acpi_pm.c:19:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#104: FILE: drivers/timesource/acpi_pm.c:23:
+#include <asm/io.h>

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#111: FILE: drivers/timesource/acpi_pm.c:30:
+#define PMTMR_EXPECTED_RATE ((PMTMR_TICKS_PER_SEC*CALIBRATE_TIME_MSEC)/1000)
                                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#111: FILE: drivers/timesource/acpi_pm.c:30:
+#define PMTMR_EXPECTED_RATE ((PMTMR_TICKS_PER_SEC*CALIBRATE_TIME_MSEC)/1000)
                                                                       ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#116: FILE: drivers/timesource/acpi_pm.c:35:
+ * in arch/i386/acpi/boot.c */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#117: FILE: drivers/timesource/acpi_pm.c:36:
+extern u32 acpi_pmtmr_ioport;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#118: FILE: drivers/timesource/acpi_pm.c:37:
+extern int acpi_pmtmr_buggy;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#122: FILE: drivers/timesource/acpi_pm.c:41:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#131: FILE: drivers/timesource/acpi_pm.c:50:
+	u32 v1=0,v2=0,v3=0;
 	      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#131: FILE: drivers/timesource/acpi_pm.c:50:
+	u32 v1=0,v2=0,v3=0;
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#131: FILE: drivers/timesource/acpi_pm.c:50:
+	u32 v1=0,v2=0,v3=0;
 	           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#131: FILE: drivers/timesource/acpi_pm.c:50:
+	u32 v1=0,v2=0,v3=0;
 	             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#131: FILE: drivers/timesource/acpi_pm.c:50:
+	u32 v1=0,v2=0,v3=0;
 	                ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#142: FILE: drivers/timesource/acpi_pm.c:61:
+	} while ((v1 > v2 && v1 < v3) || (v2 > v3 && v2 < v1)
+			|| (v3 > v1 && v3 < v2));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#147: FILE: drivers/timesource/acpi_pm.c:66:
+
+

WARNING:TYPO_SPELLING: 'caluclated' may be misspelled - perhaps 'calculated'?
#159: FILE: drivers/timesource/acpi_pm.c:78:
+	.mult = 0, /*to be caluclated*/
 	                   ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LONG_LINE: line length of 137 exceeds 100 columns
#182: FILE: drivers/timesource/acpi_pm.c:101:
+		printk(KERN_INFO "PM-Timer running at invalid rate: %lu%% of normal - aborting.\n", 100UL * delta / PMTMR_EXPECTED_RATE);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#182: FILE: drivers/timesource/acpi_pm.c:101:
+		printk(KERN_INFO "PM-Timer running at invalid rate: %lu%% of normal - aborting.\n", 100UL * delta / PMTMR_EXPECTED_RATE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#201: FILE: drivers/timesource/acpi_pm.c:120:
+	timesource_acpi_pm.mult = timesource_hz2mult(PMTMR_TICKS_PER_SEC,
+									timesource_acpi_pm.shift);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'value2 < value1'
#211: FILE: drivers/timesource/acpi_pm.c:130:
+		if ((value2 < value1) && ((value2) < 0xFFF))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#213: FILE: drivers/timesource/acpi_pm.c:132:
+		printk(KERN_INFO "PM-Timer had inconsistent results: 0x%#x, 0x%#x - aborting.\n", value1, value2);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#213: FILE: drivers/timesource/acpi_pm.c:132:
+		printk(KERN_INFO "PM-Timer had inconsistent results: 0x%#x, 0x%#x - aborting.\n", value1, value2);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#216: FILE: drivers/timesource/acpi_pm.c:135:
+	printk(KERN_INFO "PM-Timer had no reasonable result: 0x%#x - aborting.\n", value1);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#239: FILE: drivers/timesource/cyclone.c:1:
+#include <linux/timesource.h>

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#245: FILE: drivers/timesource/cyclone.c:7:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#246: FILE: drivers/timesource/cyclone.c:8:
+#include <asm/pgtable.h>

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#256: FILE: drivers/timesource/cyclone.c:18:
+int use_cyclone = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#276: FILE: drivers/timesource/cyclone.c:38:
+	for(i=0; i < 3; i++) {
 	     ^

ERROR:SPACING: space required before the open parenthesis '('
#276: FILE: drivers/timesource/cyclone.c:38:
+	for(i=0; i < 3; i++) {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#285: FILE: drivers/timesource/cyclone.c:47:
+	delta64 += CALIBRATE_TIME_MSEC/2; /* round for do_div */
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#286: FILE: drivers/timesource/cyclone.c:48:
+	do_div(delta64,CALIBRATE_TIME_MSEC);
 	              ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#290: FILE: drivers/timesource/cyclone.c:52:
+	printk("calculated cyclone_freq: %lu khz\n", cyclone_freq_khz);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#298: FILE: drivers/timesource/cyclone.c:60:
+	u32 __iomem* reg;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* volatile bar" should be "foo * volatile bar"
#299: FILE: drivers/timesource/cyclone.c:61:
+	u32 __iomem* volatile cyclone_timer;	/* Cyclone MPMC0 register */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#299: FILE: drivers/timesource/cyclone.c:61:
+	u32 __iomem* volatile cyclone_timer;	/* Cyclone MPMC0 register */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#304: FILE: drivers/timesource/cyclone.c:66:
+	if (!use_cyclone) return -ENODEV;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#306: FILE: drivers/timesource/cyclone.c:68:
+	printk(KERN_INFO "Summit chipset: Starting Cyclone Counter.\n");

ERROR:SPACING: space required before the open brace '{'
#311: FILE: drivers/timesource/cyclone.c:73:
+	if(!reg){

ERROR:SPACING: space required before the open parenthesis '('
#311: FILE: drivers/timesource/cyclone.c:73:
+	if(!reg){

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#312: FILE: drivers/timesource/cyclone.c:74:
+		printk(KERN_ERR "Summit chipset: Could not find valid CBAR register.\n");

ERROR:SPACING: space required before the open brace '{'
#317: FILE: drivers/timesource/cyclone.c:79:
+	if(!base){

ERROR:SPACING: space required before the open parenthesis '('
#317: FILE: drivers/timesource/cyclone.c:79:
+	if(!base){

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#318: FILE: drivers/timesource/cyclone.c:80:
+		printk(KERN_ERR "Summit chipset: Could not find valid CBAR value.\n");

ERROR:SPACING: space required before the open brace '{'
#326: FILE: drivers/timesource/cyclone.c:88:
+	if(!reg){

ERROR:SPACING: space required before the open parenthesis '('
#326: FILE: drivers/timesource/cyclone.c:88:
+	if(!reg){

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#327: FILE: drivers/timesource/cyclone.c:89:
+		printk(KERN_ERR "Summit chipset: Could not find valid PMCC register.\n");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#330: FILE: drivers/timesource/cyclone.c:92:
+	writel(0x00000001,reg);
 	                 ^

ERROR:SPACING: space required before the open brace '{'
#336: FILE: drivers/timesource/cyclone.c:98:
+	if(!reg){

ERROR:SPACING: space required before the open parenthesis '('
#336: FILE: drivers/timesource/cyclone.c:98:
+	if(!reg){

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#337: FILE: drivers/timesource/cyclone.c:99:
+		printk(KERN_ERR "Summit chipset: Could not find valid MPCS register.\n");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#340: FILE: drivers/timesource/cyclone.c:102:
+	writel(0x00000001,reg);
 	                 ^

ERROR:SPACING: space required before the open brace '{'
#346: FILE: drivers/timesource/cyclone.c:108:
+	if(!cyclone_timer){

ERROR:SPACING: space required before the open parenthesis '('
#346: FILE: drivers/timesource/cyclone.c:108:
+	if(!cyclone_timer){

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#347: FILE: drivers/timesource/cyclone.c:109:
+		printk(KERN_ERR "Summit chipset: Could not find valid MPMC register.\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#352: FILE: drivers/timesource/cyclone.c:114:
+	for(i=0; i<3; i++){
 	     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#352: FILE: drivers/timesource/cyclone.c:114:
+	for(i=0; i<3; i++){
 	          ^

ERROR:SPACING: space required before the open brace '{'
#352: FILE: drivers/timesource/cyclone.c:114:
+	for(i=0; i<3; i++){

ERROR:SPACING: space required before the open parenthesis '('
#352: FILE: drivers/timesource/cyclone.c:114:
+	for(i=0; i<3; i++){

WARNING:LINE_SPACING: Missing a blank line after declarations
#355: FILE: drivers/timesource/cyclone.c:117:
+		int stall = 100;
+		while(stall--) barrier();

ERROR:SPACING: space required before the open parenthesis '('
#355: FILE: drivers/timesource/cyclone.c:117:
+		while(stall--) barrier();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#355: FILE: drivers/timesource/cyclone.c:117:
+		while(stall--) barrier();

ERROR:SPACING: space required before the open brace '{'
#356: FILE: drivers/timesource/cyclone.c:118:
+		if(readl(cyclone_timer) == old){

ERROR:SPACING: space required before the open parenthesis '('
#356: FILE: drivers/timesource/cyclone.c:118:
+		if(readl(cyclone_timer) == old){

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#357: FILE: drivers/timesource/cyclone.c:119:
+			printk(KERN_ERR "Summit chipset: Counter not counting! DISABLED\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: drivers/timesource/cyclone.c:131:
+	timesource_cyclone.mult = timesource_khz2mult(khz,
+									timesource_cyclone.shift);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#382: FILE: drivers/timesource/hpet.c:1:
+#include <linux/timesource.h>

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#386: FILE: drivers/timesource/hpet.c:5:
+#include <asm/io.h>

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#408: FILE: drivers/timesource/hpet.c:27:
+	void __iomem* hpet_base;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#416: FILE: drivers/timesource/hpet.c:35:
+		(void __iomem*)ioremap_nocache(hpet_address, HPET_MMAP_SIZE);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#422: FILE: drivers/timesource/hpet.c:41:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#446: FILE: drivers/timesource/i386_pit.c:1:
+#include <linux/timesource.h>

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#451: FILE: drivers/timesource/i386_pit.c:6:
+#include <asm/io.h>

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#486: FILE: drivers/timesource/i386_pit.c:41:
+	count = (LATCH-1) - count;
 	              ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#514: FILE: drivers/timesource/tsc-interp.c:1:
+/* TSC-Jiffies Interpolation timesource

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#515: FILE: drivers/timesource/tsc-interp.c:2:
+/* TSC-Jiffies Interpolation timesource
+	Example interpolation timesource.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#527: FILE: drivers/timesource/tsc-interp.c:14:
+static unsigned long current_tsc_khz = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#536: FILE: drivers/timesource/tsc-interp.c:23:
+#define NSEC_PER_JIFFY ((((unsigned long long)NSEC_PER_SEC)<<8)/ACTHZ)
                                                            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#536: FILE: drivers/timesource/tsc-interp.c:23:
+#define NSEC_PER_JIFFY ((((unsigned long long)NSEC_PER_SEC)<<8)/ACTHZ)
                                                                ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#547: FILE: drivers/timesource/tsc-interp.c:34:
+	.mask = (cycle_t)((1ULL<<32)-1),
 	                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#547: FILE: drivers/timesource/tsc-interp.c:34:
+	.mask = (cycle_t)((1ULL<<32)-1),
 	                            ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#548: FILE: drivers/timesource/tsc-interp.c:35:
+	.mult = 1<<SHIFT_VAL,
 	         ^

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#561: FILE: drivers/timesource/tsc-interp.c:48:
+	} while (jiffies_now != jiffies);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#568: FILE: drivers/timesource/tsc-interp.c:55:
+	mod_timer(&tsc_interp_timer, jiffies+1);
 	                                    ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#571: FILE: drivers/timesource/tsc-interp.c:58:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#591: FILE: drivers/timesource/tsc-interp.c:78:
+		ret += min((cycle_t)NSEC_PER_JIFFY,(cycle_t)((now - then)*mult)>> shift);
 		                                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#591: FILE: drivers/timesource/tsc-interp.c:78:
+		ret += min((cycle_t)NSEC_PER_JIFFY,(cycle_t)((now - then)*mult)>> shift);
 		                                                         ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxW)
#591: FILE: drivers/timesource/tsc-interp.c:78:
+		ret += min((cycle_t)NSEC_PER_JIFFY,(cycle_t)((now - then)*mult)>> shift);
 		                                                               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#593: FILE: drivers/timesource/tsc-interp.c:80:
+		ret += (cycle_t)(jiffs_now - jiffs_then)*NSEC_PER_JIFFY;
 		                                        ^

ERROR:SPACING: space required before the open brace '{'
#601: FILE: drivers/timesource/tsc-interp.c:88:
+	if (current_tsc_khz != tsc_khz){

CHECK:LINE_SPACING: Please don't use multiple blank lines
#607: FILE: drivers/timesource/tsc-interp.c:94:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#631: FILE: drivers/timesource/tsc.c:1:
+/* TODO:

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#643: FILE: drivers/timesource/tsc.c:13:
+static unsigned long current_tsc_khz = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#674: FILE: drivers/timesource/tsc.c:44:
+	cycle_t ret;
+	rdtscll(ret);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#683: FILE: drivers/timesource/tsc.c:53:
+	if (tsc_read_c3_time() &&
+		strncmp(timesource_tsc.name, "c3tsc", 5)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#684: FILE: drivers/timesource/tsc.c:54:
+		printk("Falling back to C3 safe TSC\n");

ERROR:SPACING: space required before the open brace '{'
#697: FILE: drivers/timesource/tsc.c:67:
+	if (current_tsc_khz != tsc_khz){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#700: FILE: drivers/timesource/tsc.c:70:
+		timesource_tsc.mult = timesource_khz2mult(current_tsc_khz,
+							timesource_tsc.shift);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#708: FILE: drivers/timesource/tsc.c:78:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#715: FILE: drivers/timesource/tsc.c:85:
+		timesource_tsc.mult = timesource_khz2mult(current_tsc_khz,
+							timesource_tsc.shift);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000147004.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 39 errors, 36 warnings, 27 checks, 624 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000147004.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
