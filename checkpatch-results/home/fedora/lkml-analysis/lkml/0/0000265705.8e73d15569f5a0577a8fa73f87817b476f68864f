CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around _prom->args.args[nargs]
#44: FILE: arch/ppc64/kernel/prom.c:206:
+	_prom->args.rets = (prom_arg_t *)&(_prom->args.args[nargs]);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#61: FILE: arch/ppc64/kernel/prom.c:247:
+	int i, nibbles = sizeof(val)*2;
 	                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#62: FILE: arch/ppc64/kernel/prom.c:248:
+	char buf[sizeof(val)*2+1];
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#62: FILE: arch/ppc64/kernel/prom.c:248:
+	char buf[sizeof(val)*2+1];
 	                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#72: FILE: arch/ppc64/kernel/prom.c:251:
+	for (i = nibbles-1;  i >= 0;  i--) {
 	                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#75: FILE: arch/ppc64/kernel/prom.c:254:
+			buf[i] += ('a'-'0'-10);
 			              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#75: FILE: arch/ppc64/kernel/prom.c:254:
+			buf[i] += ('a'-'0'-10);
 			                  ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#136: FILE: arch/ppc64/kernel/prom.c:468:
+	if ( (_systemcfg->processorCount = num_cpus) < 1 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#136: FILE: arch/ppc64/kernel/prom.c:468:
+	if ( (_systemcfg->processorCount = num_cpus) < 1 )

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#136: FILE: arch/ppc64/kernel/prom.c:468:
+	if ( (_systemcfg->processorCount = num_cpus) < 1 )

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:CAMELCASE: Avoid CamelCase: <processorCount>
#136: FILE: arch/ppc64/kernel/prom.c:468:
+	if ( (_systemcfg->processorCount = num_cpus) < 1 )

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#191: FILE: arch/ppc64/kernel/prom.c:559:
+	for (i=0; i < _lmb->memory.cnt ;i++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:WxV)
#191: FILE: arch/ppc64/kernel/prom.c:559:
+	for (i=0; i < _lmb->memory.cnt ;i++) {
 	                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#211: FILE: arch/ppc64/kernel/prom.c:572:
+	for (i=0; i < _lmb->reserved.cnt ;i++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:WxV)
#211: FILE: arch/ppc64/kernel/prom.c:572:
+	for (i=0; i < _lmb->reserved.cnt ;i++) {
 	                                 ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strstr"
#300: FILE: arch/ppc64/kernel/prom.c:778:
+			if ((strstr(compatible, RELOC("python")) == NULL) &&

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strstr"
#301: FILE: arch/ppc64/kernel/prom.c:779:
+			    (strstr(compatible, RELOC("Speedwagon")) == NULL) &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strstr"
#302: FILE: arch/ppc64/kernel/prom.c:780:
+			    (strstr(compatible, RELOC("Winnipeg")) == NULL))

ERROR:SPACING: space prohibited after that open parenthesis '('
#328: FILE: arch/ppc64/kernel/prom.c:862:
+		if ( (long)phb_node <= 0) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#328: FILE: arch/ppc64/kernel/prom.c:862:
+		if ( (long)phb_node <= 0) {
[...]
+		} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#348: FILE: arch/ppc64/kernel/prom.c:913:
+	extern unsigned long __secondary_hold_spinloop;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#349: FILE: arch/ppc64/kernel/prom.c:914:
+	extern unsigned long __secondary_hold_acknowledge;

WARNING:LINE_SPACING: Missing a blank line after declarations
#350: FILE: arch/ppc64/kernel/prom.c:915:
+	extern unsigned long __secondary_hold_acknowledge;
+	unsigned long *spinloop

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#715: FILE: arch/ppc64/kernel/prom.c:2975:
+	if (strcmp(node->name, "pci") == 0 &&
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#719: FILE: arch/ppc64/kernel/prom.c:2979:
+	} else

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000265705.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 4 warnings, 13 checks, 640 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000265705.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
