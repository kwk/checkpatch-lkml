WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
I have never worked with kernel or modules developing before, but needed a patch for my

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#54: FILE: qlogic_cs.c:1:
+#undef QLOGIC_LEN32_ID_CHECK

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#62: FILE: qlogic_cs.c:243:
+    u_short prod_id;$

ERROR:SPACING: space required before the open brace '{'
#71: FILE: qlogic_cs.c:261:
+	(CardServices(GetTupleData, handle, &tuple) == CS_SUCCESS)){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <CardServices>
#71: FILE: qlogic_cs.c:261:
+	(CardServices(GetTupleData, handle, &tuple) == CS_SUCCESS)){

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <GetTupleData>
#71: FILE: qlogic_cs.c:261:
+	(CardServices(GetTupleData, handle, &tuple) == CS_SUCCESS)){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: qlogic_cs.c:264:
+    }$

WARNING:IF_1: Consider removing the #if 1 and its #endif
#82: FILE: qlogic_cs.c:281:
+#if 1

CHECK:CAMELCASE: Avoid CamelCase: <NumPorts1>
#83: FILE: qlogic_cs.c:282:
+	link->io.NumPorts1 = parse.cftable_entry.io.win[0].len;

WARNING:IF_1: Consider removing the #if 1 and its #endif
#92: FILE: qlogic_cs.c:306:
+#if 1

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: qlogic_cs.c:307:
+    if (link->io.NumPorts1 == 32$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#93: FILE: qlogic_cs.c:307:
+    if (link->io.NumPorts1 == 32
[...]
+      qlogic_preset(link->io.BasePort1 + 16, link->irq.AssignedIRQ);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#95: FILE: qlogic_cs.c:309:
+^I&& ((info->manf_id == 0x0032 && prod_id == 0x0604)/*KXLC004*/ || $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#95: FILE: qlogic_cs.c:309:
+#ifdef QLOGIC_LEN32_ID_CHECK
+	&& ((info->manf_id == 0x0032 && prod_id == 0x0604)/*KXLC004*/ || 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: qlogic_cs.c:314:
+      qlogic_preset(link->io.BasePort1 + 16, link->irq.AssignedIRQ);$

CHECK:CAMELCASE: Avoid CamelCase: <BasePort1>
#100: FILE: qlogic_cs.c:314:
+      qlogic_preset(link->io.BasePort1 + 16, link->irq.AssignedIRQ);

CHECK:CAMELCASE: Avoid CamelCase: <AssignedIRQ>
#100: FILE: qlogic_cs.c:314:
+      qlogic_preset(link->io.BasePort1 + 16, link->irq.AssignedIRQ);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: qlogic_cs.c:315:
+    } else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 4)
#101: FILE: qlogic_cs.c:315:
+    } else
[...]
     qlogic_preset(link->io.BasePort1, link->irq.AssignedIRQ);

CHECK:BRACES: Unbalanced braces around else statement
#101: FILE: qlogic_cs.c:315:
+    } else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: sr.c:1053:
+    extern int kme_poweron(int);$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#117: FILE: sr.c:1053:
+    extern int kme_poweron(int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#117: FILE: sr.c:1053:
+    extern int kme_poweron(int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:CODE_INDENT: code indent should use tabs where possible
#125: FILE: sr.c:1084:
+        if (strncmp(scsi_CDs[i].device->vendor, "MATSHITA", 8) == 0$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: sr.c:1084:
+        if (strncmp(scsi_CDs[i].device->vendor, "MATSHITA", 8) == 0$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 10)
#125: FILE: sr.c:1084:
+        if (strncmp(scsi_CDs[i].device->vendor, "MATSHITA", 8) == 0
[...]
+          printk(KERN_INFO "KME CD-ROM07 found.\n");

CHECK:CAMELCASE: Avoid CamelCase: <scsi_CDs>
#125: FILE: sr.c:1084:
+        if (strncmp(scsi_CDs[i].device->vendor, "MATSHITA", 8) == 0

ERROR:CODE_INDENT: code indent should use tabs where possible
#126: FILE: sr.c:1085:
+           &&  strncmp(scsi_CDs[i].device->model, "KME CD-ROM07", 12) == 0){$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#126: FILE: sr.c:1085:
+        if (strncmp(scsi_CDs[i].device->vendor, "MATSHITA", 8) == 0
+           &&  strncmp(scsi_CDs[i].device->model, "KME CD-ROM07", 12) == 0){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: sr.c:1085:
+           &&  strncmp(scsi_CDs[i].device->model, "KME CD-ROM07", 12) == 0){$

ERROR:SPACING: space required before the open brace '{'
#126: FILE: sr.c:1085:
+           &&  strncmp(scsi_CDs[i].device->model, "KME CD-ROM07", 12) == 0){

ERROR:CODE_INDENT: code indent should use tabs where possible
#127: FILE: sr.c:1086:
+          printk(KERN_INFO "KME CD-ROM07 found.\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: sr.c:1086:
+          printk(KERN_INFO "KME CD-ROM07 found.\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#127: FILE: sr.c:1086:
+          printk(KERN_INFO "KME CD-ROM07 found.\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#128: FILE: sr.c:1087:
+          kme_poweron(i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: sr.c:1087:
+          kme_poweron(i);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#129: FILE: sr.c:1088:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: sr.c:1088:
+        }$

WARNING:IF_1: Consider removing the #if 1 and its #endif
#141: FILE: sr_ioctl.c:17:
+#if 1

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: sr_ioctl.c:49:
+    unsigned char cmd[12];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: sr_ioctl.c:50:
+    Scsi_Cmnd * SCpnt;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#154: FILE: sr_ioctl.c:50:
+    Scsi_Cmnd * SCpnt;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Cmnd>
#154: FILE: sr_ioctl.c:50:
+    Scsi_Cmnd * SCpnt;

CHECK:CAMELCASE: Avoid CamelCase: <SCpnt>
#154: FILE: sr_ioctl.c:50:
+    Scsi_Cmnd * SCpnt;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: sr_ioctl.c:51:
+    Scsi_Device * SDev;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#155: FILE: sr_ioctl.c:51:
+    Scsi_Device * SDev;

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Device>
#155: FILE: sr_ioctl.c:51:
+    Scsi_Device * SDev;

CHECK:CAMELCASE: Avoid CamelCase: <SDev>
#155: FILE: sr_ioctl.c:51:
+    Scsi_Device * SDev;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: sr_ioctl.c:52:
+    int result, err = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: sr_ioctl.c:53:
+    unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: sr_ioctl.c:55:
+    spin_lock_irqsave(&io_request_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: sr_ioctl.c:56:
+    SDev  = scsi_CDs[target].device;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: sr_ioctl.c:58:
+    SCpnt = scsi_allocate_device(NULL, scsi_CDs[target].device, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: sr_ioctl.c:59:
+    SCpnt->cmd_len = 12;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: sr_ioctl.c:60:
+    cmd[0] = 0xe0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: sr_ioctl.c:61:
+    cmd[1] = (scsi_CDs[target].device->lun << 5) & 0xe0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: sr_ioctl.c:62:
+    cmd[2] = cmd[3] = cmd[4] = 0x00;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#166: FILE: sr_ioctl.c:62:
+    cmd[2] = cmd[3] = cmd[4] = 0x00;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: sr_ioctl.c:63:
+    memcpy(cmd + 5, "TOMY01H", 7);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: sr_ioctl.c:65:
+    spin_unlock_irqrestore(&io_request_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: sr_ioctl.c:67:
+    if( !scsi_block_when_processing_errors(SDev) )$

ERROR:SPACING: space prohibited after that open parenthesis '('
#171: FILE: sr_ioctl.c:67:
+    if( !scsi_block_when_processing_errors(SDev) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#171: FILE: sr_ioctl.c:67:
+    if( !scsi_block_when_processing_errors(SDev) )

ERROR:SPACING: space required before the open parenthesis '('
#171: FILE: sr_ioctl.c:67:
+    if( !scsi_block_when_processing_errors(SDev) )

ERROR:CODE_INDENT: code indent should use tabs where possible
#172: FILE: sr_ioctl.c:68:
+        return -ENODEV;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: sr_ioctl.c:68:
+        return -ENODEV;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#174: FILE: sr_ioctl.c:70:
+    {$

WARNING:LINE_SPACING: Missing a blank line after declarations
#176: FILE: sr_ioctl.c:72:
+	struct semaphore sem = MUTEX_LOCKED;
+	SCpnt->request.sem = &sem;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#179: FILE: sr_ioctl.c:75:
+^I^I    (void *) cmd, NULL, 0, sr_ioctl_done, $

CHECK:SPACING: No space is necessary after a cast
#179: FILE: sr_ioctl.c:75:
+		    (void *) cmd, NULL, 0, sr_ioctl_done, 

ERROR:CODE_INDENT: code indent should use tabs where possible
#183: FILE: sr_ioctl.c:79:
+        SCpnt->request.sem = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: sr_ioctl.c:79:
+        SCpnt->request.sem = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: sr_ioctl.c:80:
+    }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#185: FILE: sr_ioctl.c:81:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: sr_ioctl.c:81:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: sr_ioctl.c:82:
+    result = SCpnt->result;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#187: FILE: sr_ioctl.c:83:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: sr_ioctl.c:83:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: sr_ioctl.c:84:
+    if(driver_byte(result) != 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#188: FILE: sr_ioctl.c:84:
+    if(driver_byte(result) != 0) {
+      printk(KERN_ERR "sr%d: KME-CDROM power on error, command: ", target);

ERROR:SPACING: space required before the open parenthesis '('
#188: FILE: sr_ioctl.c:84:
+    if(driver_byte(result) != 0) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: sr_ioctl.c:85:
+      printk(KERN_ERR "sr%d: KME-CDROM power on error, command: ", target);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#189: FILE: sr_ioctl.c:85:
+      printk(KERN_ERR "sr%d: KME-CDROM power on error, command: ", target);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: sr_ioctl.c:86:
+      print_command(cmd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: sr_ioctl.c:87:
+      print_sense("sr", SCpnt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: sr_ioctl.c:88:
+      err = -EIO;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: sr_ioctl.c:89:
+    }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#194: FILE: sr_ioctl.c:90:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: sr_ioctl.c:90:
+   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: sr_ioctl.c:91:
+    spin_lock_irqsave(&io_request_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: sr_ioctl.c:92:
+    result = SCpnt->result;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: sr_ioctl.c:94:
+    wake_up(&SCpnt->device->device_wait);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: sr_ioctl.c:95:
+    scsi_release_command(SCpnt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: sr_ioctl.c:96:
+    SCpnt = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: sr_ioctl.c:97:
+    spin_unlock_irqrestore(&io_request_lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: sr_ioctl.c:98:
+    return err;$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000389891.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 20 errors, 61 warnings, 15 checks, 134 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000389891.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
