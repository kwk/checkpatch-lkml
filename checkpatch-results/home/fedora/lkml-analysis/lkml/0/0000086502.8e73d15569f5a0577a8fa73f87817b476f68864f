WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#60: FILE: ./arch/i386/Kconfig:515:
+config PTSHARE
+	bool "Share page tables"
+	default y
+	help
+	  Turn on sharing of page tables between processes for large shared
+	  memory regions.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#81: FILE: ./arch/s390/Kconfig:221:
+config PTSHARE
+	bool "Share page tables"
+	default y
+	help
+	  Turn on sharing of page tables between processes for large shared
+	  memory regions.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#91: FILE: ./arch/s390/Kconfig:231:
+config PTSHARE_PTE
+	bool "Bottom level table (PTE)"
+	depends on PTSHARE
+	default y
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#96: FILE: ./arch/s390/Kconfig:236:
+config PTSHARE_PMD
+	bool "Middle level table (PMD)"
+	depends on PTSHARE && 64BIT
+	default y
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#112: FILE: ./arch/x86_64/Kconfig:305:
+config PTSHARE
+	bool "Share page tables"
+	default y
+	help
+	  Turn on sharing of page tables between processes for large shared
+	  memory regions.
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#217: FILE: ./include/linux/mm.h:827:
+#define __pt_lockptr(page)	&((page)->ptl)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#224: FILE: ./include/linux/mm.h:832:
+#define pte_lockptr(mm, pmd)	({(void)(mm); __pt_lockptr(pmd_page(*(pmd)));})
                             	                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#253: FILE: ./include/linux/ptshare.h:1:
+#ifndef _LINUX_PTSHARE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#268: FILE: ./include/linux/ptshare.h:16:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#269: FILE: ./include/linux/ptshare.h:17:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#294: FILE: ./include/linux/ptshare.h:42:
+static inline int pt_vmashared(struct vm_area_struct *vma) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#297: FILE: ./include/linux/ptshare.h:45:
+}
+extern void pt_unshare_range(struct vm_area_struct *vma, unsigned long address,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#297: FILE: ./include/linux/ptshare.h:45:
+extern void pt_unshare_range(struct vm_area_struct *vma, unsigned long address,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#332: FILE: ./include/linux/ptshare.h:80:
+extern pte_t * pt_share_pte(struct vm_area_struct *vma, unsigned long address,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#332: FILE: ./include/linux/ptshare.h:80:
+extern pte_t * pt_share_pte(struct vm_area_struct *vma, unsigned long address,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#334: FILE: ./include/linux/ptshare.h:82:
+extern int pt_check_unshare_pte(struct mm_struct *mm, unsigned long address,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#341: FILE: ./include/linux/ptshare.h:89:
+}
+static inline int pt_check_unshare_pte(struct mm_struct *mm, unsigned long address,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#346: FILE: ./include/linux/ptshare.h:94:
+}
+#define pt_increment_pte(pmdval)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'vma' may be better as '(vma)' to avoid precedence issues
#348: FILE: ./include/linux/ptshare.h:96:
+#define pt_share_pte(vma, address, pmd) pte_alloc_map(vma->vm_mm, pmd, address)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#375: FILE: ./include/linux/ptshare.h:123:
+}
+extern pmd_t * pt_share_pmd(struct vm_area_struct *vma, unsigned long address,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#375: FILE: ./include/linux/ptshare.h:123:
+extern pmd_t * pt_share_pmd(struct vm_area_struct *vma, unsigned long address,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#375: FILE: ./include/linux/ptshare.h:123:
+extern pmd_t * pt_share_pmd(struct vm_area_struct *vma, unsigned long address,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#377: FILE: ./include/linux/ptshare.h:125:
+extern int pt_check_unshare_pmd(struct mm_struct *mm, unsigned long address,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#384: FILE: ./include/linux/ptshare.h:132:
+}
+static inline int pt_check_unshare_pmd(struct mm_struct *mm, unsigned long address,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#389: FILE: ./include/linux/ptshare.h:137:
+}
+#define pt_increment_pmd(pudval)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'vma' may be better as '(vma)' to avoid precedence issues
#391: FILE: ./include/linux/ptshare.h:139:
+#define pt_share_pmd(vma, address, pud) pmd_alloc(vma->vm_mm, pud, address)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#395: FILE: ./include/linux/ptshare.h:143:
+extern pte_t *pt_share_hugepage(struct mm_struct *mm, struct vm_area_struct *vma,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#396: FILE: ./include/linux/ptshare.h:144:
+extern pte_t *pt_share_hugepage(struct mm_struct *mm, struct vm_area_struct *vma,
+			       unsigned long address);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#397: FILE: ./include/linux/ptshare.h:145:
+extern void pt_unshare_huge_range(struct vm_area_struct *vma, unsigned long address,

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#412: FILE: ./include/linux/ptshare.h:160:
+#define pmd_lock_init(pmd)	do {					\
+	spin_lock_init(__pt_lockptr(virt_to_page(pmd)));		\
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required after that ';' (ctx:VxV)
#416: FILE: ./include/linux/ptshare.h:164:
+#define pmd_lockptr(mm, pmd)	({(void)(mm); __pt_lockptr(virt_to_page(pmd));})
                             	                                             ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#420: FILE: ./include/linux/ptshare.h:168:
+#define pmd_lockptr(mm, pmd)	({(void)(pmd); &(mm)->page_table_lock;})
                             	                                     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#425: FILE: ./include/linux/ptshare.h:173:
+#define hugepte_lockptr(mm, pte)	({(void)(pte); &(mm)->page_table_lock;})
                                 	                                     ^

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#590: FILE: ./mm/hugetlb.c:572:
+	spinlock_t *ptl;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#628: FILE: ./mm/hugetlb.c:649:
+	spinlock_t *ptl;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#723: FILE: ./mm/memory.c:595:
+	if (!(vma->vm_flags & (VM_NONLINEAR|VM_PFNMAP|VM_INSERTPAGE))) {
 	                                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#723: FILE: ./mm/memory.c:595:
+	if (!(vma->vm_flags & (VM_NONLINEAR|VM_PFNMAP|VM_INSERTPAGE))) {
 	                                             ^

CHECK:BRACES: Unbalanced braces around else statement
#767: FILE: ./mm/memory.c:2348:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#775: FILE: ./mm/memory.c:2355:
+	else {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#961: FILE: ./mm/ptshare.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#973: FILE: ./mm/ptshare.c:13:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#974: FILE: ./mm/ptshare.c:14:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#987: FILE: ./mm/ptshare.c:27:
+#include <asm/pgtable.h>

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#990: FILE: ./mm/ptshare.c:30:
+#define VM_PGEND(vma)	(((vma->vm_end - vma->vm_start) >> PAGE_SHIFT) -1)
                      	                                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vma' - possible side-effects?
#990: FILE: ./mm/ptshare.c:30:
+#define VM_PGEND(vma)	(((vma->vm_end - vma->vm_start) >> PAGE_SHIFT) -1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'vma' may be better as '(vma)' to avoid precedence issues
#990: FILE: ./mm/ptshare.c:30:
+#define VM_PGEND(vma)	(((vma->vm_end - vma->vm_start) >> PAGE_SHIFT) -1)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#992: FILE: ./mm/ptshare.c:32:
+#define	VMFLAG_COMPARE	(VM_READ|VM_WRITE|VM_EXEC|VM_SHARED)
        	              	        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#992: FILE: ./mm/ptshare.c:32:
+#define	VMFLAG_COMPARE	(VM_READ|VM_WRITE|VM_EXEC|VM_SHARED)
        	              	                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#992: FILE: ./mm/ptshare.c:32:
+#define	VMFLAG_COMPARE	(VM_READ|VM_WRITE|VM_EXEC|VM_SHARED)
        	              	                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1001: FILE: ./mm/ptshare.c:41:
+	if (vma->vm_flags & (VM_NONLINEAR|VM_TRANSITION|VM_PFNMAP|VM_INSERTPAGE))
 	                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1001: FILE: ./mm/ptshare.c:41:
+	if (vma->vm_flags & (VM_NONLINEAR|VM_TRANSITION|VM_PFNMAP|VM_INSERTPAGE))
 	                                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1001: FILE: ./mm/ptshare.c:41:
+	if (vma->vm_flags & (VM_NONLINEAR|VM_TRANSITION|VM_PFNMAP|VM_INSERTPAGE))
 	                                                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1005: FILE: ./mm/ptshare.c:45:
+	if ((vma->vm_flags & (VM_SHARED|VM_WRITE)) == VM_WRITE)
 	                               ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1009: FILE: ./mm/ptshare.c:49:
+	/* If it's smaller than the smallest shareable unit, don't bother
+	   calling it shareable */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1009: FILE: ./mm/ptshare.c:49:
+	   calling it shareable */

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1021: FILE: ./mm/ptshare.c:61:
+	spinlock_t *ptl;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1029: FILE: ./mm/ptshare.c:69:
+			printk(KERN_DEBUG "Unsharing pte page at address 0x%lx\n",

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1044: FILE: ./mm/ptshare.c:84:
+	if (!pud_present(*pud))
+	    return;

WARNING:TABSTOP: Statements should start on a tabstop
#1045: FILE: ./mm/ptshare.c:85:
+	    return;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1050: FILE: ./mm/ptshare.c:90:
+		spinlock_t *ptl;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1057: FILE: ./mm/ptshare.c:97:
+			printk(KERN_DEBUG "Unsharing pmd page at address 0x%lx\n",

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1092: FILE: ./mm/ptshare.c:132:
+	if (!pgd_present(*pgd))
+	    return;

WARNING:TABSTOP: Statements should start on a tabstop
#1093: FILE: ./mm/ptshare.c:133:
+	    return;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'svma != vma'
#1154: FILE: ./mm/ptshare.c:194:
+		if ((svma != vma) &&
+		    ((vma->vm_flags&VMFLAG_COMPARE) == (svma->vm_flags&VMFLAG_COMPARE)) &&
+		    (vma->vm_start == svma->vm_start) &&
+		    (vma->vm_end == svma->vm_end) &&
+		    (vma->vm_pgoff == svma->vm_pgoff))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_start == svma->vm_start'
#1154: FILE: ./mm/ptshare.c:194:
+		if ((svma != vma) &&
+		    ((vma->vm_flags&VMFLAG_COMPARE) == (svma->vm_flags&VMFLAG_COMPARE)) &&
+		    (vma->vm_start == svma->vm_start) &&
+		    (vma->vm_end == svma->vm_end) &&
+		    (vma->vm_pgoff == svma->vm_pgoff))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_end == svma->vm_end'
#1154: FILE: ./mm/ptshare.c:194:
+		if ((svma != vma) &&
+		    ((vma->vm_flags&VMFLAG_COMPARE) == (svma->vm_flags&VMFLAG_COMPARE)) &&
+		    (vma->vm_start == svma->vm_start) &&
+		    (vma->vm_end == svma->vm_end) &&
+		    (vma->vm_pgoff == svma->vm_pgoff))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_pgoff == svma->vm_pgoff'
#1154: FILE: ./mm/ptshare.c:194:
+		if ((svma != vma) &&
+		    ((vma->vm_flags&VMFLAG_COMPARE) == (svma->vm_flags&VMFLAG_COMPARE)) &&
+		    (vma->vm_start == svma->vm_start) &&
+		    (vma->vm_end == svma->vm_end) &&
+		    (vma->vm_pgoff == svma->vm_pgoff))

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1155: FILE: ./mm/ptshare.c:195:
+		    ((vma->vm_flags&VMFLAG_COMPARE) == (svma->vm_flags&VMFLAG_COMPARE)) &&
 		                   ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1155: FILE: ./mm/ptshare.c:195:
+		    ((vma->vm_flags&VMFLAG_COMPARE) == (svma->vm_flags&VMFLAG_COMPARE)) &&
 		                                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1168: FILE: ./mm/ptshare.c:208:
+	unsigned long end = base + (PMD_SIZE-1);
 	                                    ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_start <= base'
#1170: FILE: ./mm/ptshare.c:210:
+	if (pt_shareable_vma(vma) &&
+	   (vma->vm_start <= base) &&
+	    (vma->vm_end >= end))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_end >= end'
#1170: FILE: ./mm/ptshare.c:210:
+	if (pt_shareable_vma(vma) &&
+	   (vma->vm_start <= base) &&
+	    (vma->vm_end >= end))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1171: FILE: ./mm/ptshare.c:211:
+	if (pt_shareable_vma(vma) &&
+	   (vma->vm_start <= base) &&

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1188: FILE: ./mm/ptshare.c:228:
+	spinlock_t *ptl;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1195: FILE: ./mm/ptshare.c:235:
+		printk(KERN_DEBUG "Looking for shareable pte page at address 0x%lx\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1230: FILE: ./mm/ptshare.c:270:
+				printk(KERN_DEBUG "Sharing pte page at address 0x%lx\n",

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1244: FILE: ./mm/ptshare.c:284:
+
+	}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1249: FILE: ./mm/ptshare.c:289:
+}
+int pt_check_unshare_pte(struct mm_struct *mm, unsigned long address, pmd_t *pmd)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1252: FILE: ./mm/ptshare.c:292:
+	spinlock_t *ptl;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1260: FILE: ./mm/ptshare.c:300:
+		printk(KERN_DEBUG "Unsharing pte at address 0x%lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1275: FILE: ./mm/ptshare.c:315:
+static int pt_shareable_pmd(struct vm_area_struct *vma,
+		 unsigned long address)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1278: FILE: ./mm/ptshare.c:318:
+	unsigned long end = base + (PUD_SIZE-1);
 	                                    ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_start <= base'
#1280: FILE: ./mm/ptshare.c:320:
+	if (pt_shareable_vma(vma) &&
+	    (vma->vm_start <= base) &&
+	    (vma->vm_end >= end))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_end >= end'
#1280: FILE: ./mm/ptshare.c:320:
+	if (pt_shareable_vma(vma) &&
+	    (vma->vm_start <= base) &&
+	    (vma->vm_end >= end))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1304: FILE: ./mm/ptshare.c:344:
+		printk(KERN_DEBUG "Looking for shareable pmd page at address 0x%lx\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1334: FILE: ./mm/ptshare.c:374:
+				printk(KERN_DEBUG "Sharing pmd page at address 0x%lx\n",

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1353: FILE: ./mm/ptshare.c:393:
+}
+int pt_check_unshare_pmd(struct mm_struct *mm, unsigned long address, pud_t *pud)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1356: FILE: ./mm/ptshare.c:396:
+	spinlock_t *ptl;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#1362: FILE: ./mm/ptshare.c:402:
+	if (pt_is_shared(page)) {
[...]
+			printk(KERN_DEBUG "Unsharing pmd at address 0x%lx\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1364: FILE: ./mm/ptshare.c:404:
+			printk(KERN_DEBUG "Unsharing pmd at address 0x%lx\n",

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000086502.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 24 warnings, 54 checks, 1275 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000086502.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
