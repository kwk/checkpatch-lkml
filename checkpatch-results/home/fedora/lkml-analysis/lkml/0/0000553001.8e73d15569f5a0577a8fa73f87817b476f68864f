WARNING:BAD_SIGN_OFF: Use a single space after To:
#62: 
To:   Suparna Bhattacharya/India/IBM@IBMIN

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Suparna Bhattacharya/India/IBM@IBMIN'
#62: 
To:   Suparna Bhattacharya/India/IBM@IBMIN

WARNING:BAD_SIGN_OFF: Use a single space after Cc:
#63: 
cc:   linux-kernel@vger.kernel.org, kiobuf-io-devel@lists.sourceforge.net

WARNING:BAD_SIGN_OFF: email address 'linux-kernel@vger.kernel.org, kiobuf-io-devel@lists.sourceforge.net' might be better as 'linux-kernel@vger.kernel.org kiobuf-io-devel@lists.sourceforge.net'
#63: 
cc:   linux-kernel@vger.kernel.org, kiobuf-io-devel@lists.sourceforge.net

WARNING:BAD_SIGN_OFF: Unexpected content after email: 'linux-kernel@vger.kernel.org, kiobuf-io-devel@lists.sourceforge.net', should be: 'linux-kernel@vger.kernel.org (kiobuf-io-devel@lists.sourceforge.net)'
#63: 
cc:   linux-kernel@vger.kernel.org, kiobuf-io-devel@lists.sourceforge.net

WARNING:TYPO_SPELLING: 'primatives' may be misspelled - perhaps 'primitives'?
#139: 
primatives, which should be kept as simple as possible.  Comments?
^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: include/linux/mm.h:201:
+                        if (!test_bit(PG_locked, &(page)->flags)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: include/linux/mm.h:201:
+                        if (!test_bit(PG_locked, &(page)->flags)) {$

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#152: FILE: include/linux/mm.h:201:
printk("last: %p\n", (page)->last_unlock); BUG(); } \

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: include/linux/mm.h:202:
+                        (page)->last_unlock = current_text_addr(); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: include/linux/mm.h:202:
+                        (page)->last_unlock = current_text_addr(); \$

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#153: FILE: include/linux/mm.h:202:
+                        (page)->last_unlock = current_text_addr(); \

ERROR:CODE_INDENT: code indent should use tabs where possible
#159: FILE: include/linux/mm.h:205:
+                        wake_up(&page->wait); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: include/linux/mm.h:205:
+                        wake_up(&page->wait); \$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#172: FILE: include/linux/sched.h:754:
+extern void FASTCALL(add_wait_queue_exclusive_lifo(wait_queue_head_t *q,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#174: FILE: include/linux/sched.h:755:
+extern void FASTCALL(add_wait_queue_exclusive_lifo(wait_queue_head_t *q,
 extern void FASTCALL(remove_wait_queue(wait_queue_head_t *q, wait_queue_t

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#175: FILE: include/linux/sched.h:755:
+extern void FASTCALL(add_wait_queue_exclusive_lifo(wait_queue_head_t *q,
* wait));

WARNING:NEW_TYPEDEFS: do not add new typedefs
#185: FILE: include/linux/wait.h:46:
+typedef struct __wait_queue wait_queue_t;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: include/linux/wait.h:54:
+    wait_queue_func_t func;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: include/linux/wait.h:116:
+    { 0x0, task, { NULL, NULL }, NULL __WAITQUEUE_DEBUG_INIT(name)}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: include/linux/wait.h:150:
+    q->func = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: include/linux/wait.h:152:
+    q->__magic = (long)&q->__magic;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#223: FILE: include/linux/wait.h:157:
+                        wait_queue_func_t func)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#223: FILE: include/linux/wait.h:157:
+static inline void init_waitqueue_func_entry(wait_queue_t *q,
+                        wait_queue_func_t func)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: include/linux/wait.h:157:
+                        wait_queue_func_t func)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: include/linux/wait.h:160:
+    if (!q || !p)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 9)
#226: FILE: include/linux/wait.h:160:
+    if (!q || !p)
+         WQ_BUG();

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: include/linux/wait.h:161:
+         WQ_BUG();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: include/linux/wait.h:161:
+         WQ_BUG();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: include/linux/wait.h:163:
+    q->flags = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: include/linux/wait.h:164:
+    q->task = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: include/linux/wait.h:165:
+    q->func = func;$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'q' - possible side-effects?
#240: FILE: include/linux/wait.h:223:
+#define add_wait_queue_cond(q, wait, cond, fail) \
+    do {                                \
+         unsigned long flags;                     \
+         wq_write_lock_irqsave(&(q)->lock, flags);     \
+         (wait)->flags = 0;                  \
+         if (cond)                      \
+              __add_wait_queue((q), (wait));           \
+         else {                              \
+              fail;                          \
+         }                              \
+         wq_write_unlock_irqrestore(&(q)->lock, flags);     \
+    } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'wait' - possible side-effects?
#240: FILE: include/linux/wait.h:223:
+#define add_wait_queue_cond(q, wait, cond, fail) \
+    do {                                \
+         unsigned long flags;                     \
+         wq_write_lock_irqsave(&(q)->lock, flags);     \
+         (wait)->flags = 0;                  \
+         if (cond)                      \
+              __add_wait_queue((q), (wait));           \
+         else {                              \
+              fail;                          \
+         }                              \
+         wq_write_unlock_irqrestore(&(q)->lock, flags);     \
+    } while (0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: include/linux/wait.h:224:
+    do {                                \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 9)
#241: FILE: include/linux/wait.h:224:
+    do {                                \
+         unsigned long flags;                     \

ERROR:CODE_INDENT: code indent should use tabs where possible
#242: FILE: include/linux/wait.h:225:
+         unsigned long flags;                     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: include/linux/wait.h:225:
+         unsigned long flags;                     \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#243: FILE: include/linux/wait.h:226:
+         wq_write_lock_irqsave(&(q)->lock, flags);     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#243: FILE: include/linux/wait.h:226:
+         wq_write_lock_irqsave(&(q)->lock, flags);     \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#244: FILE: include/linux/wait.h:227:
+         (wait)->flags = 0;                  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#244: FILE: include/linux/wait.h:227:
+         (wait)->flags = 0;                  \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#245: FILE: include/linux/wait.h:228:
+         if (cond)                      \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#245: FILE: include/linux/wait.h:228:
+         if (cond)                      \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (9, 14)
#245: FILE: include/linux/wait.h:228:
+         if (cond)                      \
+              __add_wait_queue((q), (wait));           \

ERROR:CODE_INDENT: code indent should use tabs where possible
#246: FILE: include/linux/wait.h:229:
+              __add_wait_queue((q), (wait));           \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: include/linux/wait.h:229:
+              __add_wait_queue((q), (wait));           \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#247: FILE: include/linux/wait.h:230:
+         else {                              \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: include/linux/wait.h:230:
+         else {                              \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (9, 14)
#247: FILE: include/linux/wait.h:230:
+         else {                              \
+              fail;                          \

ERROR:CODE_INDENT: code indent should use tabs where possible
#248: FILE: include/linux/wait.h:231:
+              fail;                          \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: include/linux/wait.h:231:
+              fail;                          \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#249: FILE: include/linux/wait.h:232:
+         }                              \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: include/linux/wait.h:232:
+         }                              \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#250: FILE: include/linux/wait.h:233:
+         wq_write_unlock_irqrestore(&(q)->lock, flags);     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: include/linux/wait.h:233:
+         wq_write_unlock_irqrestore(&(q)->lock, flags);     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: include/linux/wait.h:234:
+    } while (0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: kernel/fork.c:49:
+    unsigned long flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: kernel/fork.c:51:
+    wq_write_lock_irqsave(&q->lock, flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: kernel/fork.c:52:
+    wait->flags = WQ_FLAG_EXCLUSIVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: kernel/fork.c:53:
+    __add_wait_queue(q, wait);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: kernel/fork.c:54:
+    wq_write_unlock_irqrestore(&q->lock, flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#284: FILE: kernel/sched.c:717:
+         wait_queue_func_t func;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#284: FILE: kernel/sched.c:717:
+         wait_queue_func_t func;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#291: FILE: kernel/sched.c:724:
+         func = curr->func;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: kernel/sched.c:724:
+         func = curr->func;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#292: FILE: kernel/sched.c:725:
+         if (func) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: kernel/sched.c:725:
+         if (func) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (9, 14)
#292: FILE: kernel/sched.c:725:
+         if (func) {
+              unsigned flags = curr->flags;

ERROR:CODE_INDENT: code indent should use tabs where possible
#293: FILE: kernel/sched.c:726:
+              unsigned flags = curr->flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#293: FILE: kernel/sched.c:726:
+              unsigned flags = curr->flags;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#293: FILE: kernel/sched.c:726:
+              unsigned flags = curr->flags;

ERROR:CODE_INDENT: code indent should use tabs where possible
#294: FILE: kernel/sched.c:727:
+              func(curr);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#294: FILE: kernel/sched.c:727:
+              unsigned flags = curr->flags;
+              func(curr);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#294: FILE: kernel/sched.c:727:
+              func(curr);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#295: FILE: kernel/sched.c:728:
+              if (flags & WQ_FLAG_EXCLUSIVE && !--nr_exclusive)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: kernel/sched.c:728:
+              if (flags & WQ_FLAG_EXCLUSIVE && !--nr_exclusive)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (14, 19)
#295: FILE: kernel/sched.c:728:
+              if (flags & WQ_FLAG_EXCLUSIVE && !--nr_exclusive)
+                   break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#296: FILE: kernel/sched.c:729:
+                   break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: kernel/sched.c:729:
+                   break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#297: FILE: kernel/sched.c:730:
+              continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#297: FILE: kernel/sched.c:730:
+              continue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#298: FILE: kernel/sched.c:731:
+         }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#298: FILE: kernel/sched.c:731:
+         }$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000553001.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 25 errors, 53 warnings, 6 checks, 136 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000553001.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
