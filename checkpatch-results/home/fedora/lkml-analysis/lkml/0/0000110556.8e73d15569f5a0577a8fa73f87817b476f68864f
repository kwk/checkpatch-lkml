WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
 drivers/scsi/libata-core.c  |  625 +++++++++++++++++++++++++++++++++-----------

WARNING:REPEATED_WORD: Possible repeated word: 'for'
#71: 
      ata_piix: fix MAP VALUE interpretation for for ICH6/7

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#151: FILE: drivers/scsi/ahci.c:472:
+		udelay(10);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:SPACING: No space is necessary after a cast
#186: FILE: drivers/scsi/ahci.c:507:
+	void __iomem *port_mmio = (void __iomem *) ap->ioaddr.cmd_addr;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEV_LEVEL: Prefer dev_warn(... to dev_printk(KERN_WARNING, ...
#387: FILE: drivers/scsi/ata_piix.c:729:
+				dev_printk(KERN_WARNING, &pdev->dev,

CHECK:BRACES: braces {} should be used on all arms of this statement
#616: FILE: drivers/scsi/libata-core.c:1487:
+	if (ap->ops->probe_reset) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#627: FILE: drivers/scsi/libata-core.c:1498:
+			printk(KERN_ERR "ata%u: probe reset failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#628: FILE: drivers/scsi/libata-core.c:1499:
+			printk(KERN_ERR "ata%u: probe reset failed, "
+			       "disabling port\n", ap->id);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: Unbalanced braces around else statement
#631: FILE: drivers/scsi/libata-core.c:1502:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#667: FILE: drivers/scsi/libata-core.c:1574:
+		printk(KERN_INFO "ata%u: SATA link up %s Gbps (SStatus %X)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#670: FILE: drivers/scsi/libata-core.c:1577:
+		printk(KERN_INFO "ata%u: SATA link down (SStatus %X)\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#752: FILE: drivers/scsi/libata-core.c:1976:
+unsigned int ata_busy_sleep (struct ata_port *ap,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#818: FILE: drivers/scsi/libata-core.c:2278:
+			printk(KERN_ERR "ata%u: SRST failed (err_mask=0x%x)\n",

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#865: FILE: drivers/scsi/libata-core.c:2325:
+	msleep(1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#890: FILE: drivers/scsi/libata-core.c:2350:
+			printk(KERN_ERR "ata%u: COMRESET failed "

WARNING:SPLIT_STRING: quoted string split across lines
#891: FILE: drivers/scsi/libata-core.c:2351:
+			printk(KERN_ERR "ata%u: COMRESET failed "
+			       "(device not ready)\n", ap->id);

WARNING:TYPO_SPELLING: 'reponsible' may be misspelled - perhaps 'responsible'?
#911: FILE: drivers/scsi/libata-core.c:2371:
+ *	postreset is also reponsible for setting cable type.
   	                  ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'sucess' may be misspelled - perhaps 'success'?
#1023: FILE: drivers/scsi/libata-core.c:2483:
+ *	- Return 0 on sucess, -errno on failure.
   	              ^^^^^^

WARNING:TYPO_SPELLING: 'avaliable' may be misspelled - perhaps 'available'?
#1034: FILE: drivers/scsi/libata-core.c:2494:
+ *	0 on success, -EINVAL if no reset method is avaliable, -ENODEV
   	                                            ^^^^^^^^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1430: FILE: drivers/scsi/libata-core.c:5474:
+EXPORT_SYMBOL_GPL(sata_std_hardreset);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1431: FILE: drivers/scsi/libata-core.c:5475:
+EXPORT_SYMBOL_GPL(ata_std_postreset);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1432: FILE: drivers/scsi/libata-core.c:5476:
+EXPORT_SYMBOL_GPL(ata_std_probe_reset);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1433: FILE: drivers/scsi/libata-core.c:5477:
+EXPORT_SYMBOL_GPL(ata_drive_probe_reset);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1445: FILE: drivers/scsi/libata-core.c:5492:
+EXPORT_SYMBOL_GPL(ata_eh_qc_retry);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!arg"
#1458: FILE: drivers/scsi/libata-scsi.c:154:
+	if (arg == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1467: FILE: drivers/scsi/libata-scsi.c:204:
 	if ((argbuf)
+	 && copy_to_user(arg + sizeof(args), argbuf, argsize))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!arg"
#1476: FILE: drivers/scsi/libata-scsi.c:231:
+	if (arg == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1528: FILE: drivers/scsi/libata-scsi.c:779:
+	struct scsi_cmnd *scmd = qc->scsicmd;
+	scmd->retries = scmd->allowed;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#1581: FILE: drivers/scsi/libata-scsi.c:1052:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#1626: FILE: drivers/scsi/libata-scsi.c:1202:
+		} else

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1745: FILE: drivers/scsi/libata.h:48:
+extern unsigned int ata_qc_issue(struct ata_queued_cmd *qc);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1968: FILE: drivers/scsi/sata_promise.c:337:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hp"
#2104: FILE: drivers/scsi/sata_promise.c:724:
+	if (hp == NULL) {

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2123: FILE: drivers/scsi/sata_promise.c:755:
+		/* Fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2134: FILE: drivers/scsi/sata_promise.c:768:
+		/* Fall through */

WARNING:SPACING: Unnecessary space before function pointer arguments
#2444: FILE: include/linux/libata.h:424:
+	void (*phy_reset) (struct ata_port *ap); /* obsolete */

WARNING:SPACING: Unnecessary space before function pointer arguments
#2445: FILE: include/linux/libata.h:425:
+	int (*probe_reset) (struct ata_port *ap, unsigned int *classes);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2455: FILE: include/linux/libata.h:435:
+	unsigned int (*qc_issue) (struct ata_queued_cmd *qc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2463: FILE: include/linux/libata.h:483:
+extern int ata_drive_probe_reset(struct ata_port *ap,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2464: FILE: include/linux/libata.h:484:
+extern int ata_drive_probe_reset(struct ata_port *ap,
+			ata_reset_fn_t softreset, ata_reset_fn_t hardreset,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2466: FILE: include/linux/libata.h:486:
+extern int ata_std_softreset(struct ata_port *ap, int verbose,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2468: FILE: include/linux/libata.h:488:
+extern int sata_std_hardreset(struct ata_port *ap, int verbose,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2470: FILE: include/linux/libata.h:490:
+extern void ata_std_postreset(struct ata_port *ap, unsigned int *classes);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2478: FILE: include/linux/libata.h:506:
+extern void ata_eh_qc_complete(struct ata_queued_cmd *qc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2479: FILE: include/linux/libata.h:507:
+extern void ata_eh_qc_retry(struct ata_queued_cmd *qc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2487: FILE: include/linux/libata.h:515:
+extern unsigned int ata_busy_sleep(struct ata_port *ap,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2497: FILE: include/linux/libata.h:531:
+extern int ata_std_probe_reset(struct ata_port *ap, unsigned int *classes);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2504: FILE: include/linux/libata.h:537:
+extern unsigned int ata_qc_issue_prot(struct ata_queued_cmd *qc);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2516: FILE: include/linux/libata.h:708:
+			printk(KERN_WARNING "ATA: abnormal status 0x%X on port 0x%lX\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2517: FILE: include/linux/libata.h:709:
+			printk(KERN_WARNING "ATA: abnormal status 0x%X on port 0x%lX\n",
+				status, l);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2527: FILE: include/linux/libata.h:802:
+			printk(KERN_ERR "abnormal status 0x%X\n", status);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2538: FILE: include/linux/libata.h:821:
+		printk(KERN_INFO "%s: irq ack: host_stat 0x%X, new host_stat 0x%X, drv_stat 0x%X\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2539: FILE: include/linux/libata.h:822:
+		printk(KERN_INFO "%s: irq ack: host_stat 0x%X, new host_stat 0x%X, drv_stat 0x%X\n",
+			__FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2539: FILE: include/linux/libata.h:822:
+			__FUNCTION__,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2561: FILE: include/scsi/scsi_eh.h:38:
+extern void scsi_eh_finish_cmd(struct scsi_cmnd *scmd,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2563: FILE: include/scsi/scsi_eh.h:40:
+extern void scsi_eh_flush_done_q(struct list_head *done_q);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000110556.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 30 warnings, 26 checks, 2269 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000110556.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
