WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
diff -ruN 824-builtin-old/kernel/power/proc.c 824-builtin-new/kernel/power/proc.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: kernel/power/proc.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#44: FILE: kernel/power/proc.c:2:
+ * /kernel/power/proc.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#66: FILE: kernel/power/proc.c:24:
+ *    entries dependant upon debugging being compiled in.
               ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#91: FILE: kernel/power/proc.c:49:
+static int suspend_proc_initialised = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#96: FILE: kernel/power/proc.c:54:
+#include <asm/uaccess.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#104: FILE: kernel/power/proc.c:62:
+extern char resume2_file[256];	/* For resume= kernel option */

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:CODE_INDENT: code indent should use tabs where possible
#114: FILE: kernel/power/proc.c:72:
+        unsigned long count, void *data)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: kernel/power/proc.c:72:
+static int proc_try_suspend(struct file *file, const char *buffer,
+        unsigned long count, void *data)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: kernel/power/proc.c:72:
+        unsigned long count, void *data)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#128: FILE: kernel/power/proc.c:86:
+        unsigned long count, void *data)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: kernel/power/proc.c:86:
+static int proc_try_resume(struct file *file, const char *buffer,
+        unsigned long count, void *data)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: kernel/power/proc.c:86:
+        unsigned long count, void *data)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#140: FILE: kernel/power/proc.c:98:
+static int generic_read_proc(char * page, char ** start, off_t off, int count,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#140: FILE: kernel/power/proc.c:98:
+static int generic_read_proc(char * page, char ** start, off_t off, int count,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#141: FILE: kernel/power/proc.c:99:
+static int generic_read_proc(char * page, char ** start, off_t off, int count,
+		int *eof, void *data)

CHECK:SPACING: No space is necessary after a cast
#144: FILE: kernel/power/proc.c:102:
+	struct suspend_proc_data * proc_data = (struct suspend_proc_data *) data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#144: FILE: kernel/power/proc.c:102:
+	struct suspend_proc_data * proc_data = (struct suspend_proc_data *) data;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#146: FILE: kernel/power/proc.c:104:
+	switch (proc_data->type) {
+		case SUSPEND_PROC_DATA_CUSTOM:
[...]
+		case SUSPEND_PROC_DATA_BIT:
[...]
+		case SUSPEND_PROC_DATA_INTEGER:
[...]
+		case SUSPEND_PROC_DATA_UL:
[...]
+		case SUSPEND_PROC_DATA_STRING:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#148: FILE: kernel/power/proc.c:106:
+			printk("Error! /proc/suspend/%s marked as having custom"

WARNING:SPLIT_STRING: quoted string split across lines
#149: FILE: kernel/power/proc.c:107:
+			printk("Error! /proc/suspend/%s marked as having custom"
+				" routines, but the generic read routine has"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#150: FILE: kernel/power/proc.c:108:
+				" routines, but the generic read routine has"
+				" been invoked.\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#154: FILE: kernel/power/proc.c:112:
+^I^I^Ilen = sprintf(page, "%d\n", $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#155: FILE: kernel/power/proc.c:113:
+			len = sprintf(page, "%d\n", 
+				-test_bit(proc_data->data.bit.bit,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#160: FILE: kernel/power/proc.c:118:
+				int * variable = proc_data->data.integer.variable;

WARNING:LINE_SPACING: Missing a blank line after declarations
#161: FILE: kernel/power/proc.c:119:
+				int * variable = proc_data->data.integer.variable;
+				len = sprintf(page, "%d\n", *variable);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#166: FILE: kernel/power/proc.c:124:
+				long * variable = proc_data->data.ul.variable;

WARNING:LINE_SPACING: Missing a blank line after declarations
#167: FILE: kernel/power/proc.c:125:
+				long * variable = proc_data->data.ul.variable;
+				len = sprintf(page, "%lu\n", *variable);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#172: FILE: kernel/power/proc.c:130:
+				char * variable = proc_data->data.string.variable;

WARNING:LINE_SPACING: Missing a blank line after declarations
#173: FILE: kernel/power/proc.c:131:
+				char * variable = proc_data->data.string.variable;
+				len = sprintf(page, "%s\n", variable);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#183: FILE: kernel/power/proc.c:141:
+}
+/*

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#190: FILE: kernel/power/proc.c:148:
+static int generic_write_proc(struct file *file, const char * buffer,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#191: FILE: kernel/power/proc.c:149:
+static int generic_write_proc(struct file *file, const char * buffer,
+		unsigned long count, void * data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#191: FILE: kernel/power/proc.c:149:
+		unsigned long count, void * data)

CHECK:SPACING: No space is necessary after a cast
#193: FILE: kernel/power/proc.c:151:
+	struct suspend_proc_data * proc_data = (struct suspend_proc_data *) data;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#193: FILE: kernel/power/proc.c:151:
+	struct suspend_proc_data * proc_data = (struct suspend_proc_data *) data;

CHECK:SPACING: No space is necessary after a cast
#194: FILE: kernel/power/proc.c:152:
+	char * my_buf = (char *) get_zeroed_page(GFP_ATOMIC);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#194: FILE: kernel/power/proc.c:152:
+	char * my_buf = (char *) get_zeroed_page(GFP_ATOMIC);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#205: FILE: kernel/power/proc.c:163:
+^I$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#208: FILE: kernel/power/proc.c:166:
+	switch (proc_data->type) {
+		case SUSPEND_PROC_DATA_CUSTOM:
[...]
+		case SUSPEND_PROC_DATA_BIT:
[...]
+		case SUSPEND_PROC_DATA_INTEGER:
[...]
+		case SUSPEND_PROC_DATA_UL:
[...]
+		case SUSPEND_PROC_DATA_STRING:

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#210: FILE: kernel/power/proc.c:168:
+			printk("Error! /proc/suspend/%s marked as having custom"

WARNING:SPLIT_STRING: quoted string split across lines
#211: FILE: kernel/power/proc.c:169:
+			printk("Error! /proc/suspend/%s marked as having custom"
+				" routines, but the generic write routine has"

WARNING:SPLIT_STRING: quoted string split across lines
#212: FILE: kernel/power/proc.c:170:
+				" routines, but the generic write routine has"
+				" been invoked.\n",

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#217: FILE: kernel/power/proc.c:175:
+			int value = simple_strtoul(my_buf, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LINE_SPACING: Missing a blank line after declarations
#218: FILE: kernel/power/proc.c:176:
+			int value = simple_strtoul(my_buf, NULL, 0);
+			if (value)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#219: FILE: kernel/power/proc.c:177:
+^I^I^I^Iset_bit(proc_data->data.bit.bit, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#223: FILE: kernel/power/proc.c:181:
+				clear_bit(proc_data->data.bit.bit,
+					(proc_data->data.bit.bit_vector));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#228: FILE: kernel/power/proc.c:186:
+				int * variable = proc_data->data.integer.variable;

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#231: FILE: kernel/power/proc.c:189:
+				*variable = simple_strtol(my_buf, NULL, 0);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#241: FILE: kernel/power/proc.c:199:
+				unsigned long * variable = proc_data->data.ul.variable;

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#244: FILE: kernel/power/proc.c:202:
+				*variable = simple_strtoul(my_buf, NULL, 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#245: FILE: kernel/power/proc.c:203:
+^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#256: FILE: kernel/power/proc.c:214:
+^I^I^I^Iint copy_len = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#257: FILE: kernel/power/proc.c:215:
+^I^I^I^I^I(count > $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#259: FILE: kernel/power/proc.c:217:
+^I^I^I^I^Iproc_data->data.string.max_length : $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#261: FILE: kernel/power/proc.c:219:
+				char * variable =

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#265: FILE: kernel/power/proc.c:223:
+				if ((copy_len) &&
+					 (my_buf[copy_len - 1] == '\n'))

CHECK:SPACING: No space is necessary after a cast
#271: FILE: kernel/power/proc.c:229:
+	free_pages((unsigned long) my_buf, 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#275: FILE: kernel/power/proc.c:233:
+		int routine_result = proc_data->write_proc();
+		if (routine_result < 0)

WARNING:TABSTOP: Statements should start on a tabstop
#295: FILE: kernel/power/proc.c:253:
+		  }

WARNING:TABSTOP: Statements should start on a tabstop
#296: FILE: kernel/power/proc.c:254:
+	  }

WARNING:TABSTOP: Statements should start on a tabstop
#305: FILE: kernel/power/proc.c:263:
+		  }

WARNING:TABSTOP: Statements should start on a tabstop
#306: FILE: kernel/power/proc.c:264:
+	  }

CHECK:LINE_SPACING: Please don't use multiple blank lines
#309: FILE: kernel/power/proc.c:267:
+
+

WARNING:TABSTOP: Statements should start on a tabstop
#316: FILE: kernel/power/proc.c:274:
+		  }

WARNING:TABSTOP: Statements should start on a tabstop
#317: FILE: kernel/power/proc.c:275:
+	  }

ERROR:TRAILING_WHITESPACE: trailing whitespace
#332: FILE: kernel/power/proc.c:290:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#337: FILE: kernel/power/proc.c:295:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#338: FILE: kernel/power/proc.c:296:
+	BUG_ON(!suspend_dir);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#344: FILE: kernel/power/proc.c:302:
+	for (i=0; i< numfiles; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#344: FILE: kernel/power/proc.c:302:
+	for (i=0; i< numfiles; i++)
 	           ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#354: FILE: kernel/power/proc.c:312:
+struct proc_dir_entry * suspend_register_procfile(

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#354: FILE: kernel/power/proc.c:312:
+struct proc_dir_entry * suspend_register_procfile(

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#355: FILE: kernel/power/proc.c:313:
+		struct suspend_proc_data * suspend_proc_data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#357: FILE: kernel/power/proc.c:315:
+	struct proc_dir_entry * new_entry;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#358: FILE: kernel/power/proc.c:316:
+^I$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#362: FILE: kernel/power/proc.c:320:
+	new_entry = create_proc_entry(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#364: FILE: kernel/power/proc.c:322:
+^I^I^Isuspend_proc_data->permissions, $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#377: FILE: kernel/power/proc.c:335:
+		printk("Error! create_proc_entry returned NULL.\n");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#389: FILE: kernel/power/proc.c:347:
+void suspend_unregister_procfile(struct suspend_proc_data * suspend_proc_data)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#394: FILE: kernel/power/proc.c:352:
+	remove_proc_entry(

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#400: FILE: kernel/power/proc.c:358:
+EXPORT_SYMBOL(suspend_register_procfile);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#401: FILE: kernel/power/proc.c:359:
+EXPORT_SYMBOL(suspend_unregister_procfile);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#406: FILE: kernel/power/suspend_builtin.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#421: FILE: kernel/power/suspend_builtin.c:16:
+#include <asm/uaccess.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#424: FILE: kernel/power/suspend_builtin.c:19:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#426: FILE: kernel/power/suspend_builtin.c:21:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#427: FILE: kernel/power/suspend_builtin.c:22:
+ * The following are used by the arch specific low level routines $

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#432: FILE: kernel/power/suspend_builtin.c:27:
+volatile int suspend_io_time[2][2];

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#441: FILE: kernel/power/suspend_builtin.c:36:
+unsigned int nr_suspends = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#442: FILE: kernel/power/suspend_builtin.c:37:
+int suspend_act_used = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#443: FILE: kernel/power/suspend_builtin.c:38:
+int suspend_lvl_used = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#444: FILE: kernel/power/suspend_builtin.c:39:
+int suspend_dbg_used = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#445: FILE: kernel/power/suspend_builtin.c:40:
+int suspend_default_console_level = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#447: FILE: kernel/power/suspend_builtin.c:42:
+/* $

WARNING:SPACING: Unnecessary space before function pointer name
#458: FILE: kernel/power/suspend_builtin.c:53:
+void (* exclusive_handler) (int) = NULL;

WARNING:SPACING: Unnecessary space before function pointer arguments
#458: FILE: kernel/power/suspend_builtin.c:53:
+void (* exclusive_handler) (int) = NULL;

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#458: FILE: kernel/power/suspend_builtin.c:53:
+void (* exclusive_handler) (int) = NULL;
       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#460: FILE: kernel/power/suspend_builtin.c:55:
+/* --------------- Basic user interface functions --------------- $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#461: FILE: kernel/power/suspend_builtin.c:56:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#475: FILE: kernel/power/suspend_builtin.c:70:
+/* $

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#527: FILE: kernel/power/suspend_builtin.c:122:
+int suspend_get_keyboard_exclusive(void (* handler) (int))
                                          ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#544: FILE: kernel/power/suspend_builtin.c:139:
+	BUG_ON(!exclusive_handler);

CHECK:BRACES: braces {} should be used on all arms of this statement
#561: FILE: kernel/power/suspend_builtin.c:156:
+		if (keycode == 32)
[...]
+		else if (keycode == 99) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#578: FILE: kernel/power/suspend_builtin.c:173:
+^I/* $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'keycode == 32'
#582: FILE: kernel/power/suspend_builtin.c:177:
+	if ((suspend2_core_ops->keypress(keycode)) ||
+		(keycode == 32))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#583: FILE: kernel/power/suspend_builtin.c:178:
+	if ((suspend2_core_ops->keypress(keycode)) ||
+		(keycode == 32))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#589: FILE: kernel/power/suspend_builtin.c:184:
+ * ^I^IThe user may press C to continue booting, perhaps$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#590: FILE: kernel/power/suspend_builtin.c:185:
+ * ^I^Iinvalidating the image,  or space to reboot. $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#590: FILE: kernel/power/suspend_builtin.c:185:
+ * ^I^Iinvalidating the image,  or space to reboot. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#591: FILE: kernel/power/suspend_builtin.c:186:
+ * ^I^IThis works from either the serial console or normally $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#591: FILE: kernel/power/suspend_builtin.c:186:
+ * ^I^IThis works from either the serial console or normally $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#592: FILE: kernel/power/suspend_builtin.c:187:
+ * ^I^Iattached keyboard.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#594: FILE: kernel/power/suspend_builtin.c:189:
+ * ^I^INote that we come in here from init, while the kernel is$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#595: FILE: kernel/power/suspend_builtin.c:190:
+ * ^I^Ilocked. If we want to get events from the serial console,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#596: FILE: kernel/power/suspend_builtin.c:191:
+ * ^I^Iwe need to temporarily unlock the kernel.$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#601: FILE: kernel/power/suspend_builtin.c:196:
+#define say(message, a...) printk(KERN_EMERG message, ##a)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#613: FILE: kernel/power/suspend_builtin.c:208:
+/* $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#619: FILE: kernel/power/suspend_builtin.c:214:
+		extern int splash_verbose(void);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#633: FILE: kernel/power/suspend_builtin.c:228:
+^I^Iprinted_len = vsnprintf(suspend_print_buf, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#634: FILE: kernel/power/suspend_builtin.c:229:
+^I^I^I^Isizeof(suspend_print_buf), $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#634: FILE: kernel/power/suspend_builtin.c:229:
+		printed_len = vsnprintf(suspend_print_buf, 
+				sizeof(suspend_print_buf), 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#659: FILE: kernel/power/suspend_builtin.c:254:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#665: FILE: kernel/power/suspend_builtin.c:260:
+^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!continue_req'
#666: FILE: kernel/power/suspend_builtin.c:261:
+	if ((warning_reason) && (!continue_req))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#668: FILE: kernel/power/suspend_builtin.c:263:
+^I$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#677: FILE: kernel/power/suspend_builtin.c:272:
+}
+#undef say

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#684: FILE: kernel/power/suspend_builtin.c:279:
+int suspend2_register_core(struct suspend2_core_ops * ops_pointer)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#703: FILE: kernel/power/suspend_builtin.c:298:
+		printk(name_suspend "Software suspend is already running.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#708: FILE: kernel/power/suspend_builtin.c:303:
+		printk(name_suspend "Software suspend is disabled.\n"

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#715: FILE: kernel/power/suspend_builtin.c:310:
+		printk(name_suspend "Software suspend is disabled.\n"

WARNING:SPLIT_STRING: quoted string split across lines
#717: FILE: kernel/power/suspend_builtin.c:312:
+			"This may be because you haven't put something along the "
+			"lines of\n\nresume2=swap:/dev/hda1\n\n"

WARNING:SPLIT_STRING: quoted string split across lines
#719: FILE: kernel/power/suspend_builtin.c:314:
+			"in lilo.conf or equivalent. (Where /dev/hda1 is your "
+			"swap partition).\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#723: FILE: kernel/power/suspend_builtin.c:318:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#734: FILE: kernel/power/suspend_builtin.c:329:
+	mm_segment_t oldfs;
+	oldfs = get_fs(); set_fs(KERNEL_DS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#751: FILE: kernel/power/suspend_builtin.c:346:
+			suspend_early_boot_message(0,
+			 "Can't check whether to resume. Suspend's core module isn't loaded.");

WARNING:RETURN_VOID: void function return statements are not generally useful
#759: FILE: kernel/power/suspend_builtin.c:354:
+	return;
+}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#764: FILE: kernel/power/suspend_builtin.c:359:
+ * ^I^I     Performs the basic checking as to whether suspend is$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#765: FILE: kernel/power/suspend_builtin.c:360:
+ * ^I^I     enabled before invoking the high level routine.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#766: FILE: kernel/power/suspend_builtin.c:361:
+ * Called From     : $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#773: FILE: kernel/power/suspend_builtin.c:368:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#776: FILE: kernel/power/suspend_builtin.c:371:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!str"
#789: FILE: kernel/power/suspend_builtin.c:384:
+	if (str == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#791: FILE: kernel/power/suspend_builtin.c:386:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#801: FILE: kernel/power/suspend_builtin.c:396:
+	if(str)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#802: FILE: kernel/power/suspend_builtin.c:397:
+		suspend_action=simple_strtol(str,NULL,0);
 		              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#802: FILE: kernel/power/suspend_builtin.c:397:
+		suspend_action=simple_strtol(str,NULL,0);
 		                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#802: FILE: kernel/power/suspend_builtin.c:397:
+		suspend_action=simple_strtol(str,NULL,0);
 		                                     ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#802: FILE: kernel/power/suspend_builtin.c:397:
+		suspend_action=simple_strtol(str,NULL,0);

ERROR:SPACING: space required before the open parenthesis '('
#813: FILE: kernel/power/suspend_builtin.c:408:
+	if(str)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#814: FILE: kernel/power/suspend_builtin.c:409:
+		suspend_debug_state=simple_strtol(str,NULL,0);
 		                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#814: FILE: kernel/power/suspend_builtin.c:409:
+		suspend_debug_state=simple_strtol(str,NULL,0);
 		                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#814: FILE: kernel/power/suspend_builtin.c:409:
+		suspend_debug_state=simple_strtol(str,NULL,0);
 		                                          ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#814: FILE: kernel/power/suspend_builtin.c:409:
+		suspend_debug_state=simple_strtol(str,NULL,0);

ERROR:SPACING: space required before the open parenthesis '('
#825: FILE: kernel/power/suspend_builtin.c:420:
+	if(str)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#827: FILE: kernel/power/suspend_builtin.c:422:
+^I^Isuspend_default_console_level = $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#828: FILE: kernel/power/suspend_builtin.c:423:
+			simple_strtol(str,NULL,0);
 			                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#828: FILE: kernel/power/suspend_builtin.c:423:
+			simple_strtol(str,NULL,0);
 			                      ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#828: FILE: kernel/power/suspend_builtin.c:423:
+			simple_strtol(str,NULL,0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#888: FILE: kernel/power/suspend_builtin.c:483:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#891: FILE: kernel/power/suspend_builtin.c:486:
+^I^I$

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#892: FILE: kernel/power/suspend_builtin.c:487:
+		for (cpu = 0; cpu < NR_CPUS; cpu++) {

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#915: FILE: kernel/power/suspend_builtin.c:510:
+__setup("resume2=", resume_setup);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#916: FILE: kernel/power/suspend_builtin.c:511:
+__setup("suspend_act=", suspend_act_setup);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#918: FILE: kernel/power/suspend_builtin.c:513:
+__setup("suspend_dbg=", suspend_dbg_setup);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#919: FILE: kernel/power/suspend_builtin.c:514:
+__setup("suspend_lvl=", suspend_lvl_setup);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#921: FILE: kernel/power/suspend_builtin.c:516:
+__setup("noresume2", noresume_setup);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#923: FILE: kernel/power/suspend_builtin.c:518:
+EXPORT_SYMBOL(get_highstart_pfn);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#924: FILE: kernel/power/suspend_builtin.c:519:
+EXPORT_SYMBOL(suspend_save_avenrun);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#925: FILE: kernel/power/suspend_builtin.c:520:
+EXPORT_SYMBOL(suspend_restore_avenrun);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#927: FILE: kernel/power/suspend_builtin.c:522:
+EXPORT_SYMBOL(nr_suspends);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#928: FILE: kernel/power/suspend_builtin.c:523:
+EXPORT_SYMBOL(pagedir1);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#929: FILE: kernel/power/suspend_builtin.c:524:
+EXPORT_SYMBOL(pagedir2);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#930: FILE: kernel/power/suspend_builtin.c:525:
+EXPORT_SYMBOL(suspend2_register_core);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#931: FILE: kernel/power/suspend_builtin.c:526:
+EXPORT_SYMBOL(suspend2_unregister_core);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#932: FILE: kernel/power/suspend_builtin.c:527:
+EXPORT_SYMBOL(resume2_file);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#933: FILE: kernel/power/suspend_builtin.c:528:
+EXPORT_SYMBOL(suspend_act_used);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#934: FILE: kernel/power/suspend_builtin.c:529:
+EXPORT_SYMBOL(suspend_lvl_used);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#935: FILE: kernel/power/suspend_builtin.c:530:
+EXPORT_SYMBOL(suspend_dbg_used);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#936: FILE: kernel/power/suspend_builtin.c:531:
+EXPORT_SYMBOL(suspend_try_suspend);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#937: FILE: kernel/power/suspend_builtin.c:532:
+EXPORT_SYMBOL(suspend_debug_state);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#938: FILE: kernel/power/suspend_builtin.c:533:
+EXPORT_SYMBOL(suspend_result);

WARNING:TYPO_SPELLING: 'Symnols' may be misspelled - perhaps 'Symbols'?
#940: FILE: kernel/power/suspend_builtin.c:535:
+/* Symnols exported for Suspend plugins */
    ^^^^^^^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#942: FILE: kernel/power/suspend_builtin.c:537:
+EXPORT_SYMBOL(pagedir_resume);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#943: FILE: kernel/power/suspend_builtin.c:538:
+EXPORT_SYMBOL(suspend_io_time);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#944: FILE: kernel/power/suspend_builtin.c:539:
+EXPORT_SYMBOL(suspend2_core_ops);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#945: FILE: kernel/power/suspend_builtin.c:540:
+EXPORT_SYMBOL(suspend_early_boot_message);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#946: FILE: kernel/power/suspend_builtin.c:541:
+EXPORT_SYMBOL(suspend_wait_for_keypress);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000227962.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 78 errors, 81 warnings, 29 checks, 900 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000227962.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
