WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
This patch applies on 2.6.19. It is currently useful to my LTTng tracer, which

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#54: 
--- a/include/asm-alpha/local.h

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:NEW_TYPEDEFS: do not add new typedefs
#61: FILE: include/asm-alpha/local.h:7:
+typedef struct

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#62: FILE: include/asm-alpha/local.h:8:
+typedef struct
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#71: FILE: include/asm-alpha/local.h:14:
+#define local_set(l,i)	atomic_long_set(&(l)->a, (i))
                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#74: FILE: include/asm-alpha/local.h:17:
+#define local_add(i,l)	atomic_long_add((i),(&(l)->a))
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#74: FILE: include/asm-alpha/local.h:17:
+#define local_add(i,l)	atomic_long_add((i),(&(l)->a))
                       	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#75: FILE: include/asm-alpha/local.h:18:
+#define local_sub(i,l)	atomic_long_sub((i),(&(l)->a))
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#75: FILE: include/asm-alpha/local.h:18:
+#define local_sub(i,l)	atomic_long_sub((i),(&(l)->a))
                       	                   ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#81: FILE: include/asm-alpha/local.h:20:
+static __inline__ long local_add_return(long i, local_t * l)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INLINE: plain inline is preferred over __inline__
#81: FILE: include/asm-alpha/local.h:20:
+static __inline__ long local_add_return(long i, local_t * l)

WARNING:LINE_SPACING: Missing a blank line after declarations
#84: FILE: include/asm-alpha/local.h:23:
+	long temp, result;
+	__asm__ __volatile__(

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#84: FILE: include/asm-alpha/local.h:23:
+	__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#93: FILE: include/asm-alpha/local.h:32:
+	:"=&r" (temp), "=m" (l->a.counter), "=&r" (result)
 	^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#94: FILE: include/asm-alpha/local.h:33:
+	:"Ir" (i), "m" (l->a.counter) : "memory");
 	^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#102: FILE: include/asm-alpha/local.h:37:
+static __inline__ long local_sub_return(long i, local_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#102: FILE: include/asm-alpha/local.h:37:
+static __inline__ long local_sub_return(long i, local_t * v)

WARNING:LINE_SPACING: Missing a blank line after declarations
#105: FILE: include/asm-alpha/local.h:40:
+	long temp, result;
+	__asm__ __volatile__(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#105: FILE: include/asm-alpha/local.h:40:
+	__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#114: FILE: include/asm-alpha/local.h:49:
+	:"=&r" (temp), "=m" (l->a.counter), "=&r" (result)
 	^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#115: FILE: include/asm-alpha/local.h:50:
+	:"Ir" (i), "m" (l->a.counter) : "memory");
 	^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#132: FILE: include/asm-alpha/local.h:67:
+#define local_add_unless(l, a, u)				\
+({								\
+	long c, old;						\
+	c = local_read(l);					\
+	for (;;) {						\
+		if (unlikely(c == (u)))				\
+			break;					\
+		old = local_cmpxchg((l), c, c + (a));	\
+		if (likely(old == c))				\
+			break;					\
+		c = old;					\
+	}							\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#132: FILE: include/asm-alpha/local.h:67:
+#define local_add_unless(l, a, u)				\
+({								\
+	long c, old;						\
+	c = local_read(l);					\
+	for (;;) {						\
+		if (unlikely(c == (u)))				\
+			break;					\
+		old = local_cmpxchg((l), c, c + (a));	\
+		if (likely(old == c))				\
+			break;					\
+		c = old;					\
+	}							\
+	c != (u);						\
+})

ERROR:SPACING: space required after that ',' (ctx:VxV)
#150: FILE: include/asm-alpha/local.h:85:
+#define local_dec_return(l) local_sub_return(1,(l))
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#152: FILE: include/asm-alpha/local.h:87:
+#define local_inc_return(l) local_add_return(1,(l))
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#154: FILE: include/asm-alpha/local.h:89:
+#define local_sub_and_test(i,l) (local_sub_return((i), (l)) == 0)
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#163: FILE: include/asm-alpha/local.h:98:
+#define __local_add(i,l)	((l)->a.counter+=(i))
                      ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#163: FILE: include/asm-alpha/local.h:98:
+#define __local_add(i,l)	((l)->a.counter+=(i))
                         	               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#164: FILE: include/asm-alpha/local.h:99:
+#define __local_sub(i,l)	((l)->a.counter-=(i))
                      ^

ERROR:SPACING: spaces required around that '-=' (ctx:VxV)
#164: FILE: include/asm-alpha/local.h:99:
+#define __local_sub(i,l)	((l)->a.counter-=(i))
                         	               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#212: FILE: include/asm-generic/local.h:46:
+#define local_add_unless(l, a, u) atomic_long_add_unless((&(l)->a), (a), (u))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#212: FILE: include/asm-generic/local.h:46:
+#define local_add_unless(l, a, u) atomic_long_add_unless((&(l)->a), (a), (u))

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#255: FILE: include/asm-i386/local.h:6:
+#include <asm/atomic.h>

ERROR:SPACING: space required after that ',' (ctx:VxV)
#269: FILE: include/asm-i386/local.h:16:
+#define local_set(l,i)	atomic_long_set(&(l)->a, (i))
                    ^

WARNING:INLINE: plain inline is preferred over __inline__
#272: FILE: include/asm-i386/local.h:18:
+static __inline__ void local_inc(local_t *l)

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#277: FILE: include/asm-i386/local.h:22:
+		:"+m" (l->a.counter));
 		^

WARNING:INLINE: plain inline is preferred over __inline__
#281: FILE: include/asm-i386/local.h:25:
+static __inline__ void local_dec(local_t *l)

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#286: FILE: include/asm-i386/local.h:29:
+		:"+m" (l->a.counter));
 		^

WARNING:INLINE: plain inline is preferred over __inline__
#290: FILE: include/asm-i386/local.h:32:
+static __inline__ void local_add(long i, local_t *l)

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#295: FILE: include/asm-i386/local.h:36:
+		:"+m" (l->a.counter)
 		^

WARNING:INLINE: plain inline is preferred over __inline__
#300: FILE: include/asm-i386/local.h:40:
+static __inline__ void local_sub(long i, local_t *l)

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#305: FILE: include/asm-i386/local.h:44:
+		:"+m" (l->a.counter)
 		^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#313: FILE: include/asm-i386/local.h:52:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INLINE: plain inline is preferred over __inline__
#318: FILE: include/asm-i386/local.h:57:
+static __inline__ int local_sub_and_test(long i, local_t *l)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#322: FILE: include/asm-i386/local.h:61:
+	__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#324: FILE: include/asm-i386/local.h:63:
+		:"+m" (l->a.counter), "=qm" (c)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#325: FILE: include/asm-i386/local.h:64:
+		:"ir" (i) : "memory");
 		^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#332: FILE: include/asm-i386/local.h:71:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#336: FILE: include/asm-i386/local.h:75:
+ */ $

WARNING:INLINE: plain inline is preferred over __inline__
#337: FILE: include/asm-i386/local.h:76:
+static __inline__ int local_dec_and_test(local_t *l)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#341: FILE: include/asm-i386/local.h:80:
+	__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#343: FILE: include/asm-i386/local.h:82:
+		:"+m" (l->a.counter), "=qm" (c)
 		^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#349: FILE: include/asm-i386/local.h:88:
+ * local_inc_and_test - increment and test $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#351: FILE: include/asm-i386/local.h:90:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#355: FILE: include/asm-i386/local.h:94:
+ */ $

WARNING:INLINE: plain inline is preferred over __inline__
#356: FILE: include/asm-i386/local.h:95:
+static __inline__ int local_inc_and_test(local_t *l)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#360: FILE: include/asm-i386/local.h:99:
+	__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#362: FILE: include/asm-i386/local.h:101:
+		:"+m" (l->a.counter), "=qm" (c)
 		^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#371: FILE: include/asm-i386/local.h:110:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#375: FILE: include/asm-i386/local.h:114:
+ */ $

WARNING:INLINE: plain inline is preferred over __inline__
#376: FILE: include/asm-i386/local.h:115:
+static __inline__ int local_add_negative(long i, local_t *l)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#380: FILE: include/asm-i386/local.h:119:
+	__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#382: FILE: include/asm-i386/local.h:121:
+		:"+m" (l->a.counter), "=qm" (c)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#383: FILE: include/asm-i386/local.h:122:
+		:"ir" (i) : "memory");
 		^

WARNING:INLINE: plain inline is preferred over __inline__
#394: FILE: include/asm-i386/local.h:133:
+static __inline__ long local_add_return(long i, local_t *l)

WARNING:LINE_SPACING: Missing a blank line after declarations
#399: FILE: include/asm-i386/local.h:138:
+	unsigned long flags;
+	if(unlikely(boot_cpu_data.x86==3))

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#399: FILE: include/asm-i386/local.h:138:
+	if(unlikely(boot_cpu_data.x86==3))
 	                             ^

ERROR:SPACING: space required before the open parenthesis '('
#399: FILE: include/asm-i386/local.h:138:
+	if(unlikely(boot_cpu_data.x86==3))

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#404: FILE: include/asm-i386/local.h:143:
+	__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#406: FILE: include/asm-i386/local.h:145:
+		:"=r"(i)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#407: FILE: include/asm-i386/local.h:146:
+		:"m"(l->a.counter), "0"(i));
 		^

WARNING:INLINE: plain inline is preferred over __inline__
#420: FILE: include/asm-i386/local.h:159:
+static __inline__ long local_sub_return(long i, local_t *l)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#422: FILE: include/asm-i386/local.h:161:
+	return local_add_return(-i,l);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#425: FILE: include/asm-i386/local.h:164:
+#define local_inc_return(l)  (local_add_return(1,l))
                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#426: FILE: include/asm-i386/local.h:165:
+#define local_dec_return(l)  (local_sub_return(1,l))
                                                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#442: FILE: include/asm-i386/local.h:181:
+#define local_add_unless(l, a, u)				\
+({								\
+	long c, old;						\
+	c = local_read(l);					\
+	for (;;) {						\
+		if (unlikely(c == (u)))				\
+			break;					\
+		old = local_cmpxchg((l), c, c + (a));	\
+		if (likely(old == c))				\
+			break;					\
+		c = old;					\
+	}							\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#442: FILE: include/asm-i386/local.h:181:
+#define local_add_unless(l, a, u)				\
+({								\
+	long c, old;						\
+	c = local_read(l);					\
+	for (;;) {						\
+		if (unlikely(c == (u)))				\
+			break;					\
+		old = local_cmpxchg((l), c, c + (a));	\
+		if (likely(old == c))				\
+			break;					\
+		c = old;					\
+	}							\
+	c != (u);						\
+})

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#466: FILE: include/asm-i386/local.h:210:
+#define cpu_local_wrap_v(l)^I ^I\$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#557: FILE: include/asm-ia64/local.h:1:
+#include <asm-generic/local.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#621: FILE: include/asm-mips/local.h:1:
+#include <asm-generic/local.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#665: FILE: include/asm-parisc/local.h:1:
+#include <asm-generic/local.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#670: FILE: include/asm-powerpc/local.h:1:
+#ifndef _ARCH_POWERPC_LOCAL_H

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#674: FILE: include/asm-powerpc/local.h:5:
+#include <asm/atomic.h>

WARNING:NEW_TYPEDEFS: do not add new typedefs
#676: FILE: include/asm-powerpc/local.h:7:
+typedef struct

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#677: FILE: include/asm-powerpc/local.h:8:
+typedef struct
+{

ERROR:SPACING: space required after that ',' (ctx:VxV)
#684: FILE: include/asm-powerpc/local.h:15:
+#define local_set(l,i)	atomic_long_set(&(l)->a, (i))
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#686: FILE: include/asm-powerpc/local.h:17:
+#define local_add(i,l)	atomic_long_add((i),(&(l)->a))
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#686: FILE: include/asm-powerpc/local.h:17:
+#define local_add(i,l)	atomic_long_add((i),(&(l)->a))
                       	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#687: FILE: include/asm-powerpc/local.h:18:
+#define local_sub(i,l)	atomic_long_sub((i),(&(l)->a))
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#687: FILE: include/asm-powerpc/local.h:18:
+#define local_sub(i,l)	atomic_long_sub((i),(&(l)->a))
                       	                   ^

WARNING:INLINE: plain inline is preferred over __inline__
#693: FILE: include/asm-powerpc/local.h:24:
+static __inline__ int local_add_return(int a, local_t *l)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#697: FILE: include/asm-powerpc/local.h:28:
+	__asm__ __volatile__(

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#698: FILE: include/asm-powerpc/local.h:29:
+"1:	lwarx	%0,0,%2		# local_add_return\n\

ERROR:SPACING: space required after that ',' (ctx:VxO)
#700: FILE: include/asm-powerpc/local.h:31:
+	PPC405_ERR77(0,%2)
 	              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#700: FILE: include/asm-powerpc/local.h:31:
+	PPC405_ERR77(0,%2)
 	               ^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#701: FILE: include/asm-powerpc/local.h:32:
+"	stwcx.	%0,0,%2 \n\

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#701: FILE: include/asm-powerpc/local.h:32:
+"	stwcx.	%0,0,%2 \n\

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around l->a.counter
#704: FILE: include/asm-powerpc/local.h:35:
+	: "r" (a), "r" (&(l->a.counter))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:INLINE: plain inline is preferred over __inline__
#712: FILE: include/asm-powerpc/local.h:43:
+static __inline__ int local_sub_return(int a, local_t *l)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#716: FILE: include/asm-powerpc/local.h:47:
+	__asm__ __volatile__(

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#717: FILE: include/asm-powerpc/local.h:48:
+"1:	lwarx	%0,0,%2		# local_sub_return\n\

ERROR:SPACING: space required after that ',' (ctx:VxO)
#719: FILE: include/asm-powerpc/local.h:50:
+	PPC405_ERR77(0,%2)
 	              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#719: FILE: include/asm-powerpc/local.h:50:
+	PPC405_ERR77(0,%2)
 	               ^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#720: FILE: include/asm-powerpc/local.h:51:
+"	stwcx.	%0,0,%2 \n\

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#720: FILE: include/asm-powerpc/local.h:51:
+"	stwcx.	%0,0,%2 \n\

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around l->a.counter
#723: FILE: include/asm-powerpc/local.h:54:
+	: "r" (a), "r" (&(l->a.counter))

WARNING:INLINE: plain inline is preferred over __inline__
#729: FILE: include/asm-powerpc/local.h:60:
+static __inline__ int local_inc_return(local_t *l)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#733: FILE: include/asm-powerpc/local.h:64:
+	__asm__ __volatile__(

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#734: FILE: include/asm-powerpc/local.h:65:
+"1:	lwarx	%0,0,%1		# local_inc_return\n\

ERROR:SPACING: space required after that ',' (ctx:VxO)
#736: FILE: include/asm-powerpc/local.h:67:
+	PPC405_ERR77(0,%1)
 	              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#736: FILE: include/asm-powerpc/local.h:67:
+	PPC405_ERR77(0,%1)
 	               ^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#737: FILE: include/asm-powerpc/local.h:68:
+"	stwcx.	%0,0,%1 \n\

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#737: FILE: include/asm-powerpc/local.h:68:
+"	stwcx.	%0,0,%1 \n\

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around l->a.counter
#740: FILE: include/asm-powerpc/local.h:71:
+	: "r" (&(l->a.counter))

WARNING:INLINE: plain inline is preferred over __inline__
#756: FILE: include/asm-powerpc/local.h:87:
+static __inline__ int local_dec_return(local_t *l)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#760: FILE: include/asm-powerpc/local.h:91:
+	__asm__ __volatile__(

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#761: FILE: include/asm-powerpc/local.h:92:
+"1:	lwarx	%0,0,%1		# local_dec_return\n\

ERROR:SPACING: space required after that ',' (ctx:VxO)
#763: FILE: include/asm-powerpc/local.h:94:
+	PPC405_ERR77(0,%1)
 	              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#763: FILE: include/asm-powerpc/local.h:94:
+	PPC405_ERR77(0,%1)
 	               ^

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#764: FILE: include/asm-powerpc/local.h:95:
+"	stwcx.	%0,0,%1\n\

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around l->a.counter
#767: FILE: include/asm-powerpc/local.h:98:
+	: "r" (&(l->a.counter))

WARNING:INLINE: plain inline is preferred over __inline__
#786: FILE: include/asm-powerpc/local.h:117:
+static __inline__ int local_add_unless(local_t *l, int a, int u)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#790: FILE: include/asm-powerpc/local.h:121:
+	__asm__ __volatile__ (

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#791: FILE: include/asm-powerpc/local.h:122:
+"1:	lwarx	%0,0,%1		# local_add_unless\n\

ERROR:SPACING: space required after that ',' (ctx:VxO)
#795: FILE: include/asm-powerpc/local.h:126:
+	PPC405_ERR77(0,%2)
 	              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#795: FILE: include/asm-powerpc/local.h:126:
+	PPC405_ERR77(0,%2)
 	               ^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#796: FILE: include/asm-powerpc/local.h:127:
+"	stwcx.	%0,0,%1 \n\

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#796: FILE: include/asm-powerpc/local.h:127:
+"	stwcx.	%0,0,%1 \n\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#798: FILE: include/asm-powerpc/local.h:129:
+"	subf	%0,%2,%0 \n\

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#798: FILE: include/asm-powerpc/local.h:129:
+"	subf	%0,%2,%0 \n\

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around l->a.counter
#801: FILE: include/asm-powerpc/local.h:132:
+	: "r" (&(l->a.counter)), "r" (a), "r" (u)

WARNING:INLINE: plain inline is preferred over __inline__
#816: FILE: include/asm-powerpc/local.h:147:
+static __inline__ int local_dec_if_positive(local_t *l)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#820: FILE: include/asm-powerpc/local.h:151:
+	__asm__ __volatile__(

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#821: FILE: include/asm-powerpc/local.h:152:
+"1:	lwarx	%0,0,%1		# local_dec_if_positive\n\

ERROR:SPACING: space required after that ',' (ctx:VxO)
#824: FILE: include/asm-powerpc/local.h:155:
+	PPC405_ERR77(0,%1)
 	              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#824: FILE: include/asm-powerpc/local.h:155:
+	PPC405_ERR77(0,%1)
 	               ^

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#825: FILE: include/asm-powerpc/local.h:156:
+"	stwcx.	%0,0,%1\n\

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#827: FILE: include/asm-powerpc/local.h:158:
+	"\n\

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around l->a.counter
#829: FILE: include/asm-powerpc/local.h:160:
+	: "r" (&(l->a.counter))

WARNING:INLINE: plain inline is preferred over __inline__
#837: FILE: include/asm-powerpc/local.h:168:
+static __inline__ long local_add_return(long a, local_t *l)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#841: FILE: include/asm-powerpc/local.h:172:
+	__asm__ __volatile__(

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#842: FILE: include/asm-powerpc/local.h:173:
+"1:	ldarx	%0,0,%2		# local_add_return\n\

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around l->a.counter
#847: FILE: include/asm-powerpc/local.h:178:
+	: "r" (a), "r" (&(l->a.counter))

WARNING:INLINE: plain inline is preferred over __inline__
#855: FILE: include/asm-powerpc/local.h:186:
+static __inline__ long local_sub_return(long a, local_t *l)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#859: FILE: include/asm-powerpc/local.h:190:
+	__asm__ __volatile__(

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#860: FILE: include/asm-powerpc/local.h:191:
+"1:	ldarx	%0,0,%2		# local_sub_return\n\

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around l->a.counter
#865: FILE: include/asm-powerpc/local.h:196:
+	: "r" (a), "r" (&(l->a.counter))

WARNING:INLINE: plain inline is preferred over __inline__
#871: FILE: include/asm-powerpc/local.h:202:
+static __inline__ long local_inc_return(local_t *l)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#875: FILE: include/asm-powerpc/local.h:206:
+	__asm__ __volatile__(

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#876: FILE: include/asm-powerpc/local.h:207:
+"1:	ldarx	%0,0,%1		# local_inc_return\n\

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around l->a.counter
#881: FILE: include/asm-powerpc/local.h:212:
+	: "r" (&(l->a.counter))

WARNING:INLINE: plain inline is preferred over __inline__
#897: FILE: include/asm-powerpc/local.h:228:
+static __inline__ long local_dec_return(local_t *l)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#901: FILE: include/asm-powerpc/local.h:232:
+	__asm__ __volatile__(

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#902: FILE: include/asm-powerpc/local.h:233:
+"1:	ldarx	%0,0,%1		# local_dec_return\n\

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around l->a.counter
#907: FILE: include/asm-powerpc/local.h:238:
+	: "r" (&(l->a.counter))

WARNING:INLINE: plain inline is preferred over __inline__
#920: FILE: include/asm-powerpc/local.h:251:
+static __inline__ long local_dec_if_positive(local_t *l)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#924: FILE: include/asm-powerpc/local.h:255:
+	__asm__ __volatile__(

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#925: FILE: include/asm-powerpc/local.h:256:
+"1:	ldarx	%0,0,%1		# local_dec_if_positive\n\

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#930: FILE: include/asm-powerpc/local.h:261:
+	"\n\

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around l->a.counter
#932: FILE: include/asm-powerpc/local.h:263:
+	: "r" (&(l->a.counter))

WARNING:INLINE: plain inline is preferred over __inline__
#951: FILE: include/asm-powerpc/local.h:282:
+static __inline__ int local_add_unless(local_t *l, long a, long u)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#955: FILE: include/asm-powerpc/local.h:286:
+	__asm__ __volatile__ (

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#956: FILE: include/asm-powerpc/local.h:287:
+"1:	ldarx	%0,0,%1		# local_add_unless\n\

ERROR:SPACING: space required after that ',' (ctx:VxO)
#960: FILE: include/asm-powerpc/local.h:291:
+	PPC405_ERR77(0,%2)
 	              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#960: FILE: include/asm-powerpc/local.h:291:
+	PPC405_ERR77(0,%2)
 	               ^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#961: FILE: include/asm-powerpc/local.h:292:
+"	stdcx.	%0,0,%1 \n\

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#961: FILE: include/asm-powerpc/local.h:292:
+"	stdcx.	%0,0,%1 \n\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#963: FILE: include/asm-powerpc/local.h:294:
+"	subf	%0,%2,%0 \n\

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#963: FILE: include/asm-powerpc/local.h:294:
+"	subf	%0,%2,%0 \n\

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around l->a.counter
#966: FILE: include/asm-powerpc/local.h:297:
+	: "r" (&(l->a.counter)), "r" (a), "r" (u)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#986: FILE: include/asm-powerpc/local.h:317:
+#define __local_add(i,l)	((l)->a.counter+=(i))
                      ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#986: FILE: include/asm-powerpc/local.h:317:
+#define __local_add(i,l)	((l)->a.counter+=(i))
                         	               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#987: FILE: include/asm-powerpc/local.h:318:
+#define __local_sub(i,l)	((l)->a.counter-=(i))
                      ^

ERROR:SPACING: spaces required around that '-=' (ctx:VxV)
#987: FILE: include/asm-powerpc/local.h:318:
+#define __local_sub(i,l)	((l)->a.counter-=(i))
                         	               ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#990: FILE: include/asm-powerpc/local.h:321:
+/* Need to disable preemption for the cpu local counters otherwise we could
+   still access a variable of a previous CPU in a non atomic way. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#990: FILE: include/asm-powerpc/local.h:321:
+   still access a variable of a previous CPU in a non atomic way. */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#991: FILE: include/asm-powerpc/local.h:322:
+#define cpu_local_wrap_v(l)^I ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#993: FILE: include/asm-powerpc/local.h:324:
+^I   preempt_disable(); ^I^I\$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1076: FILE: include/asm-s390/local.h:1:
+#include <asm-generic/local.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1120: FILE: include/asm-sparc64/local.h:1:
+#include <asm-generic/local.h>

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#1127: FILE: include/asm-x86_64/local.h:5:
+#include <asm/atomic.h>

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1141: FILE: include/asm-x86_64/local.h:15:
+#define local_set(l,i)	atomic_long_set(&(l)->a, (i))
                    ^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1150: FILE: include/asm-x86_64/local.h:21:
+		:"=m" (l->a.counter)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1151: FILE: include/asm-x86_64/local.h:22:
+		:"m" (l->a.counter));
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1161: FILE: include/asm-x86_64/local.h:29:
+		:"=m" (l->a.counter)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1162: FILE: include/asm-x86_64/local.h:30:
+		:"m" (l->a.counter));
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1172: FILE: include/asm-x86_64/local.h:37:
+		:"=m" (l->a.counter)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1173: FILE: include/asm-x86_64/local.h:38:
+		:"ir" (i), "m" (l->a.counter));
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1183: FILE: include/asm-x86_64/local.h:45:
+		:"=m" (l->a.counter)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1184: FILE: include/asm-x86_64/local.h:46:
+		:"ir" (i), "m" (l->a.counter));
 		^

WARNING:INLINE: plain inline is preferred over __inline__
#1196: FILE: include/asm-x86_64/local.h:58:
+static __inline__ int local_sub_and_test(long i, local_t *l)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1200: FILE: include/asm-x86_64/local.h:62:
+	__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1202: FILE: include/asm-x86_64/local.h:64:
+		:"=m" (l->a.counter), "=qm" (c)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1203: FILE: include/asm-x86_64/local.h:65:
+		:"ir" (i), "m" (l->a.counter) : "memory");
 		^

WARNING:INLINE: plain inline is preferred over __inline__
#1215: FILE: include/asm-x86_64/local.h:77:
+static __inline__ int local_dec_and_test(local_t *l)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1219: FILE: include/asm-x86_64/local.h:81:
+	__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1221: FILE: include/asm-x86_64/local.h:83:
+		:"=m" (l->a.counter), "=qm" (c)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1222: FILE: include/asm-x86_64/local.h:84:
+		:"m" (l->a.counter) : "memory");
 		^

WARNING:INLINE: plain inline is preferred over __inline__
#1234: FILE: include/asm-x86_64/local.h:96:
+static __inline__ int local_inc_and_test(local_t *l)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1238: FILE: include/asm-x86_64/local.h:100:
+	__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1240: FILE: include/asm-x86_64/local.h:102:
+		:"=m" (l->a.counter), "=qm" (c)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1241: FILE: include/asm-x86_64/local.h:103:
+		:"m" (l->a.counter) : "memory");
 		^

WARNING:INLINE: plain inline is preferred over __inline__
#1254: FILE: include/asm-x86_64/local.h:116:
+static __inline__ int local_add_negative(long i, local_t *l)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1258: FILE: include/asm-x86_64/local.h:120:
+	__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1260: FILE: include/asm-x86_64/local.h:122:
+		:"=m" (l->a.counter), "=qm" (c)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1261: FILE: include/asm-x86_64/local.h:123:
+		:"ir" (i), "m" (l->a.counter) : "memory");
 		^

WARNING:INLINE: plain inline is preferred over __inline__
#1272: FILE: include/asm-x86_64/local.h:134:
+static __inline__ long local_add_return(long i, local_t *l)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1275: FILE: include/asm-x86_64/local.h:137:
+	long __i = i;
+	__asm__ __volatile__(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1275: FILE: include/asm-x86_64/local.h:137:
+	__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1277: FILE: include/asm-x86_64/local.h:139:
+		:"=r"(i)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1278: FILE: include/asm-x86_64/local.h:140:
+		:"m"(l->a.counter), "0"(i));
 		^

WARNING:INLINE: plain inline is preferred over __inline__
#1282: FILE: include/asm-x86_64/local.h:144:
+static __inline__ long local_sub_return(long i, local_t *l)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1284: FILE: include/asm-x86_64/local.h:146:
+	return local_add_return(-i,l);
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1287: FILE: include/asm-x86_64/local.h:149:
+#define local_inc_return(l)  (local_add_return(1,l))
                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1288: FILE: include/asm-x86_64/local.h:150:
+#define local_dec_return(l)  (local_sub_return(1,l))
                                                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#1304: FILE: include/asm-x86_64/local.h:166:
+#define local_add_unless(l, a, u)				\
+({								\
+	long c, old;						\
+	c = local_read(l);					\
+	for (;;) {						\
+		if (unlikely(c == (u)))				\
+			break;					\
+		old = local_cmpxchg((l), c, c + (a));	\
+		if (likely(old == c))				\
+			break;					\
+		c = old;					\
+	}							\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#1304: FILE: include/asm-x86_64/local.h:166:
+#define local_add_unless(l, a, u)				\
+({								\
+	long c, old;						\
+	c = local_read(l);					\
+	for (;;) {						\
+		if (unlikely(c == (u)))				\
+			break;					\
+		old = local_cmpxchg((l), c, c + (a));	\
+		if (likely(old == c))				\
+			break;					\
+		c = old;					\
+	}							\
+	c != (u);						\
+})

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1328: FILE: include/asm-x86_64/local.h:199:
+#define cpu_local_wrap_v(l)^I ^I\$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000012287.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 85 errors, 82 warnings, 51 checks, 1279 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000012287.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
