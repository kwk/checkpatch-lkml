WARNING:TYPO_SPELLING: 'wont' may be misspelled - perhaps 'won't'?
#170: 
  CLONE_DETACHED tasks, it wont get any exit code from them, and those
                           ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#273: FILE: include/linux/ptrace.h:29:
+extern int ptrace_readdata(struct task_struct *tsk, unsigned long src, char *dst, int len);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#274: FILE: include/linux/ptrace.h:30:
+extern int ptrace_writedata(struct task_struct *tsk, char * src, unsigned long dst, int len);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#274: FILE: include/linux/ptrace.h:30:
+extern int ptrace_writedata(struct task_struct *tsk, char * src, unsigned long dst, int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#275: FILE: include/linux/ptrace.h:31:
+extern int ptrace_attach(struct task_struct *tsk);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#276: FILE: include/linux/ptrace.h:32:
+extern int ptrace_detach(struct task_struct *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#276: FILE: include/linux/ptrace.h:32:
+extern int ptrace_detach(struct task_struct *, unsigned int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#276: FILE: include/linux/ptrace.h:32:
+extern int ptrace_detach(struct task_struct *, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#277: FILE: include/linux/ptrace.h:33:
+extern void ptrace_disable(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#277: FILE: include/linux/ptrace.h:33:
+extern void ptrace_disable(struct task_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#278: FILE: include/linux/ptrace.h:34:
+extern int ptrace_check_attach(struct task_struct *task, int kill);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#279: FILE: include/linux/ptrace.h:35:
+extern void __ptrace_link(struct task_struct *child, struct task_struct *new_parent);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#280: FILE: include/linux/ptrace.h:36:
+extern void __ptrace_unlink(struct task_struct *child);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#287: FILE: include/linux/ptrace.h:43:
+}
+static inline void ptrace_unlink(struct task_struct *child)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#350: FILE: kernel/exit.c:70:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required after that ',' (ctx:VxV)
#422: FILE: kernel/exit.c:287:
+		p = list_entry(_p,struct task_struct,sibling);
 		                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#422: FILE: kernel/exit.c:287:
+		p = list_entry(_p,struct task_struct,sibling);
 		                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#426: FILE: kernel/exit.c:291:
+		p = list_entry(_p,struct task_struct,ptrace_list);
 		                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#426: FILE: kernel/exit.c:291:
+		p = list_entry(_p,struct task_struct,ptrace_list);
 		                                    ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#523: FILE: kernel/ptrace.c:39:
+		BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#529: FILE: kernel/ptrace.c:45:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#529: FILE: kernel/ptrace.c:45:
+ $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#539: FILE: kernel/ptrace.c:55:
+		BUG();

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000438518.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 6 errors, 8 warnings, 9 checks, 347 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000438518.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
