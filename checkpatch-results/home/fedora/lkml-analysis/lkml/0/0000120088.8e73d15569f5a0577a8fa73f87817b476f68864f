WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#222: FILE: arch/powerpc/platforms/cell/spufs/run.c:1:
+#include <linux/wait.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#237: FILE: arch/powerpc/platforms/cell/spufs/run.c:16:
+static inline int spu_stopped(struct spu_context *ctx, u32 * stat)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#251: FILE: arch/powerpc/platforms/cell/spufs/run.c:30:
+static inline int spu_run_init(struct spu_context *ctx, u32 * npc,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#252: FILE: arch/powerpc/platforms/cell/spufs/run.c:31:
+			       u32 * status)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#256: FILE: arch/powerpc/platforms/cell/spufs/run.c:35:
+	if ((ret = spu_acquire_runnable(ctx)) != 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#263: FILE: arch/powerpc/platforms/cell/spufs/run.c:42:
+static inline int spu_run_fini(struct spu_context *ctx, u32 * npc,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#264: FILE: arch/powerpc/platforms/cell/spufs/run.c:43:
+			       u32 * status)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#276: FILE: arch/powerpc/platforms/cell/spufs/run.c:55:
+		if ((*status & SPU_STATUS_STOPPED_BY_STOP)
+		    && (*status >> SPU_STOP_STATUS_SHIFT) == 0x3fff) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#285: FILE: arch/powerpc/platforms/cell/spufs/run.c:64:
+^I^I^I^I         u32 *status)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#285: FILE: arch/powerpc/platforms/cell/spufs/run.c:64:
+static inline int spu_reacquire_runnable(struct spu_context *ctx, u32 *npc,
+				         u32 *status)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#289: FILE: arch/powerpc/platforms/cell/spufs/run.c:68:
+	if ((ret = spu_run_fini(ctx, npc, status)) != 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#295: FILE: arch/powerpc/platforms/cell/spufs/run.c:74:
+	if ((ret = spu_run_init(ctx, npc, status)) != 0)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#316: FILE: arch/powerpc/platforms/cell/spufs/run.c:95:
+		   u32 * npc, u32 * status)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#316: FILE: arch/powerpc/platforms/cell/spufs/run.c:95:
+		   u32 * npc, u32 * status)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#363: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:129:
+ * ^ISame as wait_event_interruptible(), except that here$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'wq' - possible side-effects?
#368: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:134:
+#define spufs_wait(wq, condition)					\
+({									\
+	int __ret = 0;							\
+	DEFINE_WAIT(__wait);						\
+	for (;;) {							\
+		prepare_to_wait(&(wq), &__wait, TASK_INTERRUPTIBLE);	\
+		if (condition)						\
+			break;						\
+		if (!signal_pending(current)) {				\
+			spu_release(ctx);				\
+			schedule();					\
+			spu_acquire(ctx);				\
+			continue;					\
+		}							\
+		__ret = -ERESTARTSYS;					\
+		break;							\
+	}								\
+	finish_wait(&(wq), &__wait);					\
+	__ret;								\
+})

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000120088.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 2 warnings, 3 checks, 336 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000120088.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
