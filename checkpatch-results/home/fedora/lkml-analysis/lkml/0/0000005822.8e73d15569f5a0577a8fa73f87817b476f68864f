WARNING:TYPO_SPELLING: 'reister' may be misspelled - perhaps 'register'?
#147: FILE: drivers/char/mxser_new.h:70:
+/* enchance reister bank set 0, 1, 2 */
             ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'recieved' may be misspelled - perhaps 'received'?
#205: FILE: drivers/char/mxser_new.h:120:
+/* recieved Xon/Xoff or specical interrupt pending */
    ^^^^^^^^

WARNING:TYPO_SPELLING: 'specical' may be misspelled - perhaps 'special'?
#205: FILE: drivers/char/mxser_new.h:120:
+/* recieved Xon/Xoff or specical interrupt pending */
                         ^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#268: FILE: drivers/char/mxser_new.h:154:
+#define ENABLE_MOXA_MUST_ENCHANCE_MODE(baseio) do { ^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'baseio' - possible side-effects?
#268: FILE: drivers/char/mxser_new.h:154:
+#define ENABLE_MOXA_MUST_ENCHANCE_MODE(baseio) do { 		\
+	u8	__oldlcr, __efr;				\
+	__oldlcr = inb((baseio)+UART_LCR);			\
 	outb(MOXA_MUST_ENTER_ENCHANCE, (baseio)+UART_LCR);	\
+	__efr = inb((baseio)+MOXA_MUST_EFR_REGISTER);		\
+	__efr |= MOXA_MUST_EFR_EFRB_ENABLE;			\
+	outb(__efr, (baseio)+MOXA_MUST_EFR_REGISTER);		\
+	outb(__oldlcr, (baseio)+UART_LCR);			\
+} while (0)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#270: FILE: drivers/char/mxser_new.h:156:
+	__oldlcr = inb((baseio)+UART_LCR);			\
 	                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#281: FILE: drivers/char/mxser_new.h:158:
+	__efr = inb((baseio)+MOXA_MUST_EFR_REGISTER);		\
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#283: FILE: drivers/char/mxser_new.h:160:
+	outb(__efr, (baseio)+MOXA_MUST_EFR_REGISTER);		\
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#284: FILE: drivers/char/mxser_new.h:161:
+	outb(__oldlcr, (baseio)+UART_LCR);			\
 	                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'baseio' - possible side-effects?
#287: FILE: drivers/char/mxser_new.h:164:
+#define DISABLE_MOXA_MUST_ENCHANCE_MODE(baseio) do {		\
+	u8	__oldlcr, __efr;				\
+	__oldlcr = inb((baseio)+UART_LCR);			\
 	outb(MOXA_MUST_ENTER_ENCHANCE, (baseio)+UART_LCR);	\
+	__efr = inb((baseio)+MOXA_MUST_EFR_REGISTER);		\
+	__efr &= ~MOXA_MUST_EFR_EFRB_ENABLE;			\
+	outb(__efr, (baseio)+MOXA_MUST_EFR_REGISTER);		\
+	outb(__oldlcr, (baseio)+UART_LCR);			\
+} while (0)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#289: FILE: drivers/char/mxser_new.h:166:
+	__oldlcr = inb((baseio)+UART_LCR);			\
 	                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#300: FILE: drivers/char/mxser_new.h:168:
+	__efr = inb((baseio)+MOXA_MUST_EFR_REGISTER);		\
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#302: FILE: drivers/char/mxser_new.h:170:
+	outb(__efr, (baseio)+MOXA_MUST_EFR_REGISTER);		\
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#303: FILE: drivers/char/mxser_new.h:171:
+	outb(__oldlcr, (baseio)+UART_LCR);			\
 	                       ^

CHECK:CAMELCASE: Avoid CamelCase: <Value>
#306: FILE: drivers/char/mxser_new.h:174:
+#define SET_MOXA_MUST_XON1_VALUE(baseio, Value) do {		\

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'baseio' - possible side-effects?
#306: FILE: drivers/char/mxser_new.h:174:
+#define SET_MOXA_MUST_XON1_VALUE(baseio, Value) do {		\
+	u8	__oldlcr, __efr;				\
+	__oldlcr = inb((baseio)+UART_LCR);			\
 	outb(MOXA_MUST_ENTER_ENCHANCE, (baseio)+UART_LCR);	\
+	__efr = inb((baseio)+MOXA_MUST_EFR_REGISTER);		\
+	__efr &= ~MOXA_MUST_EFR_BANK_MASK;			\
+	__efr |= MOXA_MUST_EFR_BANK0;				\
+	outb(__efr, (baseio)+MOXA_MUST_EFR_REGISTER);		\
 	outb((u8)(Value), (baseio)+MOXA_MUST_XON1_REGISTER);	\
+	outb(__oldlcr, (baseio)+UART_LCR);			\
+} while (0)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#308: FILE: drivers/char/mxser_new.h:176:
+	__oldlcr = inb((baseio)+UART_LCR);			\
 	                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#314: FILE: drivers/char/mxser_new.h:178:
+	__efr = inb((baseio)+MOXA_MUST_EFR_REGISTER);		\
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#317: FILE: drivers/char/mxser_new.h:181:
+	outb(__efr, (baseio)+MOXA_MUST_EFR_REGISTER);		\
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#321: FILE: drivers/char/mxser_new.h:183:
+	outb(__oldlcr, (baseio)+UART_LCR);			\
 	                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'baseio' - possible side-effects?
#327: FILE: drivers/char/mxser_new.h:186:
+#define SET_MOXA_MUST_XOFF1_VALUE(baseio, Value) do {		\
+	u8	__oldlcr, __efr;				\
+	__oldlcr = inb((baseio)+UART_LCR);			\
 	outb(MOXA_MUST_ENTER_ENCHANCE, (baseio)+UART_LCR);	\
+	__efr = inb((baseio)+MOXA_MUST_EFR_REGISTER);		\
+	__efr &= ~MOXA_MUST_EFR_BANK_MASK;			\
+	__efr |= MOXA_MUST_EFR_BANK0;				\
+	outb(__efr, (baseio)+MOXA_MUST_EFR_REGISTER);		\
 	outb((u8)(Value), (baseio)+MOXA_MUST_XOFF1_REGISTER);	\
+	outb(__oldlcr, (baseio)+UART_LCR);			\
+} while (0)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#329: FILE: drivers/char/mxser_new.h:188:
+	__oldlcr = inb((baseio)+UART_LCR);			\
 	                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#347: FILE: drivers/char/mxser_new.h:190:
+	__efr = inb((baseio)+MOXA_MUST_EFR_REGISTER);		\
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#350: FILE: drivers/char/mxser_new.h:193:
+	outb(__efr, (baseio)+MOXA_MUST_EFR_REGISTER);		\
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#354: FILE: drivers/char/mxser_new.h:195:
+	outb(__oldlcr, (baseio)+UART_LCR);			\
 	                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'info' - possible side-effects?
#422: FILE: drivers/char/mxser_new.h:198:
+#define SET_MOXA_MUST_FIFO_VALUE(info) do {			\
+	u8	__oldlcr, __efr;				\
+	__oldlcr = inb((info)->ioaddr+UART_LCR);		\
+	outb(MOXA_MUST_ENTER_ENCHANCE, (info)->ioaddr+UART_LCR);\
 	__efr = inb((info)->ioaddr+MOXA_MUST_EFR_REGISTER);	\
+	__efr &= ~MOXA_MUST_EFR_BANK_MASK;			\
+	__efr |= MOXA_MUST_EFR_BANK1;				\
 	outb(__efr, (info)->ioaddr+MOXA_MUST_EFR_REGISTER);	\
+	outb((u8)((info)->rx_high_water), (info)->ioaddr+	\
+			MOXA_MUST_RBRTH_REGISTER);		\
+	outb((u8)((info)->rx_trigger), (info)->ioaddr+		\
+			MOXA_MUST_RBRTI_REGISTER);		\
+	outb((u8)((info)->rx_low_water), (info)->ioaddr+	\
+			MOXA_MUST_RBRTL_REGISTER);		\
+	outb(__oldlcr, (info)->ioaddr+UART_LCR);		\
+} while (0)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#424: FILE: drivers/char/mxser_new.h:200:
+	__oldlcr = inb((info)->ioaddr+UART_LCR);		\
 	                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#425: FILE: drivers/char/mxser_new.h:201:
+	outb(MOXA_MUST_ENTER_ENCHANCE, (info)->ioaddr+UART_LCR);\
 	                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxE)
#488: FILE: drivers/char/mxser_new.h:206:
+	outb((u8)((info)->rx_high_water), (info)->ioaddr+	\
 	                                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxE)
#490: FILE: drivers/char/mxser_new.h:208:
+	outb((u8)((info)->rx_trigger), (info)->ioaddr+		\
 	                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxE)
#492: FILE: drivers/char/mxser_new.h:210:
+	outb((u8)((info)->rx_low_water), (info)->ioaddr+	\
 	                                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#494: FILE: drivers/char/mxser_new.h:212:
+	outb(__oldlcr, (info)->ioaddr+UART_LCR);		\
 	                             ^

CHECK:CAMELCASE: Avoid CamelCase: <pId>
#497: FILE: drivers/char/mxser_new.h:215:
+#define GET_MOXA_MUST_HARDWARE_ID(baseio, pId) do {		\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'baseio' - possible side-effects?
#497: FILE: drivers/char/mxser_new.h:215:
+#define GET_MOXA_MUST_HARDWARE_ID(baseio, pId) do {		\
+	u8	__oldlcr, __efr;				\
+	__oldlcr = inb((baseio)+UART_LCR);			\
 	outb(MOXA_MUST_ENTER_ENCHANCE, (baseio)+UART_LCR);	\
+	__efr = inb((baseio)+MOXA_MUST_EFR_REGISTER);		\
+	__efr &= ~MOXA_MUST_EFR_BANK_MASK;			\
+	__efr |= MOXA_MUST_EFR_BANK2;				\
+	outb(__efr, (baseio)+MOXA_MUST_EFR_REGISTER);		\
+	*pId = inb((baseio)+MOXA_MUST_HWID_REGISTER);		\
+	outb(__oldlcr, (baseio)+UART_LCR);			\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pId' may be better as '(pId)' to avoid precedence issues
#497: FILE: drivers/char/mxser_new.h:215:
+#define GET_MOXA_MUST_HARDWARE_ID(baseio, pId) do {		\
+	u8	__oldlcr, __efr;				\
+	__oldlcr = inb((baseio)+UART_LCR);			\
 	outb(MOXA_MUST_ENTER_ENCHANCE, (baseio)+UART_LCR);	\
+	__efr = inb((baseio)+MOXA_MUST_EFR_REGISTER);		\
+	__efr &= ~MOXA_MUST_EFR_BANK_MASK;			\
+	__efr |= MOXA_MUST_EFR_BANK2;				\
+	outb(__efr, (baseio)+MOXA_MUST_EFR_REGISTER);		\
+	*pId = inb((baseio)+MOXA_MUST_HWID_REGISTER);		\
+	outb(__oldlcr, (baseio)+UART_LCR);			\
+} while (0)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#499: FILE: drivers/char/mxser_new.h:217:
+	__oldlcr = inb((baseio)+UART_LCR);			\
 	                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#511: FILE: drivers/char/mxser_new.h:219:
+	__efr = inb((baseio)+MOXA_MUST_EFR_REGISTER);		\
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#514: FILE: drivers/char/mxser_new.h:222:
+	outb(__efr, (baseio)+MOXA_MUST_EFR_REGISTER);		\
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#515: FILE: drivers/char/mxser_new.h:223:
+	*pId = inb((baseio)+MOXA_MUST_HWID_REGISTER);		\
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#516: FILE: drivers/char/mxser_new.h:224:
+	outb(__oldlcr, (baseio)+UART_LCR);			\
 	                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'baseio' - possible side-effects?
#519: FILE: drivers/char/mxser_new.h:227:
+#define SET_MOXA_MUST_NO_SOFTWARE_FLOW_CONTROL(baseio) do {	\
+	u8	__oldlcr, __efr;				\
+	__oldlcr = inb((baseio)+UART_LCR);			\
 	outb(MOXA_MUST_ENTER_ENCHANCE, (baseio)+UART_LCR);	\
+	__efr = inb((baseio)+MOXA_MUST_EFR_REGISTER);		\
+	__efr &= ~MOXA_MUST_EFR_SF_MASK;			\
+	outb(__efr, (baseio)+MOXA_MUST_EFR_REGISTER);		\
+	outb(__oldlcr, (baseio)+UART_LCR);			\
+} while (0)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#521: FILE: drivers/char/mxser_new.h:229:
+	__oldlcr = inb((baseio)+UART_LCR);			\
 	                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#532: FILE: drivers/char/mxser_new.h:231:
+	__efr = inb((baseio)+MOXA_MUST_EFR_REGISTER);		\
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#534: FILE: drivers/char/mxser_new.h:233:
+	outb(__efr, (baseio)+MOXA_MUST_EFR_REGISTER);		\
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#535: FILE: drivers/char/mxser_new.h:234:
+	outb(__oldlcr, (baseio)+UART_LCR);			\
 	                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'baseio' - possible side-effects?
#538: FILE: drivers/char/mxser_new.h:237:
+#define ENABLE_MOXA_MUST_TX_SOFTWARE_FLOW_CONTROL(baseio) do {	\
+	u8	__oldlcr, __efr;				\
+	__oldlcr = inb((baseio)+UART_LCR);			\
 	outb(MOXA_MUST_ENTER_ENCHANCE, (baseio)+UART_LCR);	\
+	__efr = inb((baseio)+MOXA_MUST_EFR_REGISTER);		\
+	__efr &= ~MOXA_MUST_EFR_SF_TX_MASK;			\
+	__efr |= MOXA_MUST_EFR_SF_TX1;				\
+	outb(__efr, (baseio)+MOXA_MUST_EFR_REGISTER);		\
+	outb(__oldlcr, (baseio)+UART_LCR);			\
+} while (0)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#540: FILE: drivers/char/mxser_new.h:239:
+	__oldlcr = inb((baseio)+UART_LCR);			\
 	                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#552: FILE: drivers/char/mxser_new.h:241:
+	__efr = inb((baseio)+MOXA_MUST_EFR_REGISTER);		\
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#555: FILE: drivers/char/mxser_new.h:244:
+	outb(__efr, (baseio)+MOXA_MUST_EFR_REGISTER);		\
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#556: FILE: drivers/char/mxser_new.h:245:
+	outb(__oldlcr, (baseio)+UART_LCR);			\
 	                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'baseio' - possible side-effects?
#559: FILE: drivers/char/mxser_new.h:248:
+#define DISABLE_MOXA_MUST_TX_SOFTWARE_FLOW_CONTROL(baseio) do {	\
+	u8	__oldlcr, __efr;				\
+	__oldlcr = inb((baseio)+UART_LCR);			\
 	outb(MOXA_MUST_ENTER_ENCHANCE, (baseio)+UART_LCR);	\
+	__efr = inb((baseio)+MOXA_MUST_EFR_REGISTER);		\
+	__efr &= ~MOXA_MUST_EFR_SF_TX_MASK;			\
+	outb(__efr, (baseio)+MOXA_MUST_EFR_REGISTER);		\
+	outb(__oldlcr, (baseio)+UART_LCR);			\
+} while (0)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#561: FILE: drivers/char/mxser_new.h:250:
+	__oldlcr = inb((baseio)+UART_LCR);			\
 	                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#573: FILE: drivers/char/mxser_new.h:252:
+	__efr = inb((baseio)+MOXA_MUST_EFR_REGISTER);		\
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#575: FILE: drivers/char/mxser_new.h:254:
+	outb(__efr, (baseio)+MOXA_MUST_EFR_REGISTER);		\
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#576: FILE: drivers/char/mxser_new.h:255:
+	outb(__oldlcr, (baseio)+UART_LCR);			\
 	                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'baseio' - possible side-effects?
#579: FILE: drivers/char/mxser_new.h:258:
+#define ENABLE_MOXA_MUST_RX_SOFTWARE_FLOW_CONTROL(baseio) do {	\
+	u8	__oldlcr, __efr;				\
+	__oldlcr = inb((baseio)+UART_LCR);			\
 	outb(MOXA_MUST_ENTER_ENCHANCE, (baseio)+UART_LCR);	\
+	__efr = inb((baseio)+MOXA_MUST_EFR_REGISTER);		\
+	__efr &= ~MOXA_MUST_EFR_SF_RX_MASK;			\
+	__efr |= MOXA_MUST_EFR_SF_RX1;				\
+	outb(__efr, (baseio)+MOXA_MUST_EFR_REGISTER);		\
+	outb(__oldlcr, (baseio)+UART_LCR);			\
+} while (0)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#581: FILE: drivers/char/mxser_new.h:260:
+	__oldlcr = inb((baseio)+UART_LCR);			\
 	                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#592: FILE: drivers/char/mxser_new.h:262:
+	__efr = inb((baseio)+MOXA_MUST_EFR_REGISTER);		\
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#595: FILE: drivers/char/mxser_new.h:265:
+	outb(__efr, (baseio)+MOXA_MUST_EFR_REGISTER);		\
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#596: FILE: drivers/char/mxser_new.h:266:
+	outb(__oldlcr, (baseio)+UART_LCR);			\
 	                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'baseio' - possible side-effects?
#599: FILE: drivers/char/mxser_new.h:269:
+#define DISABLE_MOXA_MUST_RX_SOFTWARE_FLOW_CONTROL(baseio) do {	\
+	u8	__oldlcr, __efr;				\
+	__oldlcr = inb((baseio)+UART_LCR);			\
 	outb(MOXA_MUST_ENTER_ENCHANCE, (baseio)+UART_LCR);	\
+	__efr = inb((baseio)+MOXA_MUST_EFR_REGISTER);		\
+	__efr &= ~MOXA_MUST_EFR_SF_RX_MASK;			\
+	outb(__efr, (baseio)+MOXA_MUST_EFR_REGISTER);		\
+	outb(__oldlcr, (baseio)+UART_LCR);			\
+} while (0)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#601: FILE: drivers/char/mxser_new.h:271:
+	__oldlcr = inb((baseio)+UART_LCR);			\
 	                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#625: FILE: drivers/char/mxser_new.h:273:
+	__efr = inb((baseio)+MOXA_MUST_EFR_REGISTER);		\
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#627: FILE: drivers/char/mxser_new.h:275:
+	outb(__efr, (baseio)+MOXA_MUST_EFR_REGISTER);		\
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#628: FILE: drivers/char/mxser_new.h:276:
+	outb(__oldlcr, (baseio)+UART_LCR);			\
 	                       ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000005822.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 4 warnings, 61 checks, 575 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000005822.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
