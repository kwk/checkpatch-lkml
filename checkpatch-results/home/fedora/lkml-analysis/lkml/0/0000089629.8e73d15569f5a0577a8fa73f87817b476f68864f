WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
Implement sys_[gs]et_thread_area and the corresponding ptrace operations for

CHECK:LINE_SPACING: Please don't use multiple blank lines
#77: FILE: arch/um/include/os.h:237:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#79: FILE: arch/um/include/os.h:239:
+extern int os_set_thread_area(void *data, int pid);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#80: FILE: arch/um/include/os.h:240:
+extern int os_get_thread_area(void *data, int pid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#125: FILE: arch/um/kernel/process_kern.c:163:
+	ret = CHOOSE_MODE_PROC(copy_thread_tt, copy_thread_skas, nr,
+				clone_flags, sp, stack_top, p, regs);

CHECK:SPACING: No space is necessary after a cast
#153: FILE: arch/um/kernel/ptrace.c:192:
+					     (struct user_desc __user *) data);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#158: FILE: arch/um/kernel/ptrace.c:197:
+					     (struct user_desc __user *) data);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#200: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#205: FILE: arch/um/os-Linux/tls.c:1:
+#include <errno.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: No space is necessary after a cast
#231: FILE: arch/um/os-Linux/tls.c:27:
+		     (unsigned long) info);

CHECK:SPACING: No space is necessary after a cast
#245: FILE: arch/um/os-Linux/tls.c:41:
+		     (unsigned long) info);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#264: FILE: arch/um/os-Linux/tls.c:60:
+	if (ret < 0) {
+		ret = -errno;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#275: FILE: arch/um/os-Linux/tls.c:71:
+	if (ret < 0) {
+		ret = -errno;
+	}

WARNING:LONG_LINE_COMMENT: line length of 115 exceeds 100 columns
#337: FILE: arch/um/sys-i386/syscalls.c:67:
+ *     int clone(int flags, void * child_stack, int * parent_tidptr, struct user_desc * newtls, int * child_tidptr)

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#366: FILE: arch/um/sys-i386/tls.c:1:
+/*

WARNING:TYPO_SPELLING: 'dinamic' may be misspelled - perhaps 'dynamic'?
#421: FILE: arch/um/sys-i386/tls.c:56:
+ * Also, this must be tested when compiling in SKAS mode with dinamic linking
                                                               ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#424: FILE: arch/um/sys-i386/tls.c:59:
+static int get_free_idx(struct task_struct* task)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#440: FILE: arch/um/sys-i386/tls.c:75:
+static inline void clear_user_desc(struct user_desc* info)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#458: FILE: arch/um/sys-i386/tls.c:93:
+		struct uml_tls_struct* curr = &to->thread.arch.tls_array[idx - GDT_ENTRY_TLS_MIN];

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#461: FILE: arch/um/sys-i386/tls.c:96:
+		 * flushed to the host, which will clear it.*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#494: FILE: arch/um/sys-i386/tls.c:129:
+		struct uml_tls_struct* curr = &task->thread.arch.tls_array[i - GDT_ENTRY_TLS_MIN];

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#497: FILE: arch/um/sys-i386/tls.c:132:
+		 * which had a value. */

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#514: FILE: arch/um/sys-i386/tls.c:149:
+		struct uml_tls_struct* curr = &task->thread.arch.tls_array[i - GDT_ENTRY_TLS_MIN];

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#517: FILE: arch/um/sys-i386/tls.c:152:
+		 * will remain as flushed as it was. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#527: FILE: arch/um/sys-i386/tls.c:162:
+ * SKAS patch. */

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#541: FILE: arch/um/sys-i386/tls.c:176:
+static int set_tls_entry(struct task_struct* task, struct user_desc *info,

CHECK:SPACING: No space is necessary after a cast
#562: FILE: arch/um/sys-i386/tls.c:197:
+			   (void __user *) UPT_ESI(&new->thread.regs.regs),

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#578: FILE: arch/um/sys-i386/tls.c:213:
+static int get_tls_entry(struct task_struct* task, struct user_desc *info, int idx)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#598: FILE: arch/um/sys-i386/tls.c:233:
+		printk(KERN_ERR "get_tls_entry: task with pid %d got here "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'get_tls_entry', this function's name, in a string
#598: FILE: arch/um/sys-i386/tls.c:233:
+		printk(KERN_ERR "get_tls_entry: task with pid %d got here "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#599: FILE: arch/um/sys-i386/tls.c:234:
+		printk(KERN_ERR "get_tls_entry: task with pid %d got here "
+				"without flushed TLS.", current->pid);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#645: FILE: arch/um/sys-i386/tls.c:280:
+int ptrace_set_thread_area(struct task_struct *child, int idx,
+		struct user_desc __user *user_desc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#678: FILE: arch/um/sys-i386/tls.c:313:
+int ptrace_get_thread_area(struct task_struct *child, int idx,
+		struct user_desc __user *user_desc)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#711: FILE: arch/um/sys-x86_64/tls.c:1:
+#include "linux/sched.h"

ERROR:CODE_INDENT: code indent should use tabs where possible
#723: FILE: arch/um/sys-x86_64/tls.c:13:
+        return 0;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#723: FILE: arch/um/sys-x86_64/tls.c:13:
+        return 0;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#735: FILE: include/asm-um/desc.h:5:
+ * compile, and has never been used. */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'info' - possible side-effects?
#736: FILE: include/asm-um/desc.h:6:
+#define LDT_empty(info) (\
+	(info)->base_addr	== 0	&& \
+	(info)->limit		== 0	&& \
+	(info)->contents	== 0	&& \
+	(info)->read_exec_only	== 1	&& \
+	(info)->seg_32bit	== 0	&& \
+	(info)->limit_in_pages	== 0	&& \
+	(info)->seg_not_present	== 1	&& \
+	(info)->useable		== 0	)

WARNING:TYPO_SPELLING: 'useable' may be misspelled - perhaps 'usable'?
#744: FILE: include/asm-um/desc.h:14:
+	(info)->useable		== 0	)
 	        ^^^^^^^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#744: FILE: include/asm-um/desc.h:14:
+	(info)->useable		== 0	)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#753: FILE: include/asm-um/processor-i386.h:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#788: FILE: include/asm-um/processor-i386.h:33:
+^I.tls_array  ^I^I= { [ 0 ... GDT_ENTRY_TLS_ENTRIES - 1 ] = \$

ERROR:SPACING: space prohibited after that open square bracket '['
#788: FILE: include/asm-um/processor-i386.h:33:
+	.tls_array  		= { [ 0 ... GDT_ENTRY_TLS_ENTRIES - 1 ] = \

ERROR:SPACING: space prohibited before that close square bracket ']'
#788: FILE: include/asm-um/processor-i386.h:33:
+	.tls_array  		= { [ 0 ... GDT_ENTRY_TLS_ENTRIES - 1 ] = \

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#790: FILE: include/asm-um/processor-i386.h:35:
+^I.debugregs  ^I^I= { [ 0 ... 7 ] = 0 }, \$

ERROR:SPACING: space prohibited after that open square bracket '['
#790: FILE: include/asm-um/processor-i386.h:35:
+	.debugregs  		= { [ 0 ... 7 ] = 0 }, \

ERROR:SPACING: space prohibited before that close square bracket ']'
#790: FILE: include/asm-um/processor-i386.h:35:
+	.debugregs  		= { [ 0 ... 7 ] = 0 }, \

ERROR:CODE_INDENT: code indent should use tabs where possible
#802: FILE: include/asm-um/processor-i386.h:47:
+                                    struct arch_thread *to)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#802: FILE: include/asm-um/processor-i386.h:47:
+                                    struct arch_thread *to)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#804: FILE: include/asm-um/processor-i386.h:49:
+        memcpy(&to->tls_array, &from->tls_array, sizeof(from->tls_array));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#804: FILE: include/asm-um/processor-i386.h:49:
+        memcpy(&to->tls_array, &from->tls_array, sizeof(from->tls_array));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#822: FILE: include/asm-um/processor-x86_64.h:36:
+                                    struct arch_thread *to)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#822: FILE: include/asm-um/processor-x86_64.h:36:
+                                    struct arch_thread *to)$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#838: FILE: include/asm-um/ptrace-generic.h:63:
+extern int arch_copy_tls(struct task_struct *new);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#839: FILE: include/asm-um/ptrace-generic.h:64:
+extern void clear_flushed_tls(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#875: FILE: include/asm-um/ptrace-i386.h:44:
+extern int ptrace_get_thread_area(struct task_struct *child, int idx,

ERROR:CODE_INDENT: code indent should use tabs where possible
#876: FILE: include/asm-um/ptrace-i386.h:45:
+                                  struct user_desc __user *user_desc);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#876: FILE: include/asm-um/ptrace-i386.h:45:
+                                  struct user_desc __user *user_desc);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#878: FILE: include/asm-um/ptrace-i386.h:47:
+extern int ptrace_set_thread_area(struct task_struct *child, int idx,

ERROR:CODE_INDENT: code indent should use tabs where possible
#879: FILE: include/asm-um/ptrace-i386.h:48:
+                                  struct user_desc __user *user_desc);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#879: FILE: include/asm-um/ptrace-i386.h:48:
+                                  struct user_desc __user *user_desc);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#881: FILE: include/asm-um/ptrace-i386.h:50:
+extern int do_set_thread_area_skas(struct user_desc *info);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#882: FILE: include/asm-um/ptrace-i386.h:51:
+extern int do_get_thread_area_skas(struct user_desc *info);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#884: FILE: include/asm-um/ptrace-i386.h:53:
+extern int do_set_thread_area_tt(struct user_desc *info);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#885: FILE: include/asm-um/ptrace-i386.h:54:
+extern int do_get_thread_area_tt(struct user_desc *info);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#887: FILE: include/asm-um/ptrace-i386.h:56:
+extern int arch_switch_tls_skas(struct task_struct *from, struct task_struct *to);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#888: FILE: include/asm-um/ptrace-i386.h:57:
+extern int arch_switch_tls_tt(struct task_struct *from, struct task_struct *to);

ERROR:CODE_INDENT: code indent should use tabs where possible
#932: FILE: include/asm-um/ptrace-x86_64.h:69:
+                                         struct user_desc __user *user_desc)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#932: FILE: include/asm-um/ptrace-x86_64.h:69:
+                                         struct user_desc __user *user_desc)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#934: FILE: include/asm-um/ptrace-x86_64.h:71:
+        return -ENOSYS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#934: FILE: include/asm-um/ptrace-x86_64.h:71:
+        return -ENOSYS;$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#934: FILE: include/asm-um/ptrace-x86_64.h:71:
+        return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:CODE_INDENT: code indent should use tabs where possible
#938: FILE: include/asm-um/ptrace-x86_64.h:75:
+                                         struct user_desc __user *user_desc)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#938: FILE: include/asm-um/ptrace-x86_64.h:75:
+                                         struct user_desc __user *user_desc)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#940: FILE: include/asm-um/ptrace-x86_64.h:77:
+        return -ENOSYS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#940: FILE: include/asm-um/ptrace-x86_64.h:77:
+        return -ENOSYS;$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#940: FILE: include/asm-um/ptrace-x86_64.h:77:
+        return -ENOSYS;

ERROR:CODE_INDENT: code indent should use tabs where possible
#944: FILE: include/asm-um/ptrace-x86_64.h:81:
+                                     struct task_struct *to)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#944: FILE: include/asm-um/ptrace-x86_64.h:81:
+                                     struct task_struct *to)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#949: FILE: include/asm-um/ptrace-x86_64.h:86:
+                                       struct task_struct *to)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#949: FILE: include/asm-um/ptrace-x86_64.h:86:
+                                       struct task_struct *to)$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000089629.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 24 errors, 35 warnings, 22 checks, 782 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000089629.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
