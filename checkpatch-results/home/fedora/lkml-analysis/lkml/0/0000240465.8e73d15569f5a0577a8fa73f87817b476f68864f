WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#48: 
diff -Nur linux-2.6.9-rc4-mm1/Documentation/ibm-acpi.txt linux-2.6.9-rc4-mm1-ibm/Documentation/ibm-acpi.txt

ERROR:TRAILING_WHITESPACE: trailing whitespace
#75: FILE: Documentation/ibm-acpi.txt:24:
+^I- video output switching, expansion control^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'situtation' may be misspelled - perhaps 'situation'?
#439: FILE: Documentation/ibm-acpi.txt:388:
+audible alerts in various situtation. This feature allows the same
                           ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#455: FILE: Documentation/ibm-acpi.txt:404:
+^I4 - "unable"^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#530: FILE: drivers/acpi/ibm_acpi.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#547: FILE: drivers/acpi/ibm_acpi.c:18:
+ *  along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#548: FILE: drivers/acpi/ibm_acpi.c:19:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#582: FILE: drivers/acpi/ibm_acpi.c:53:
+#include <asm/uaccess.h>

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#596: FILE: drivers/acpi/ibm_acpi.c:67:
+#define IBM_ERR	   KERN_ERR    IBM_LOG

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#597: FILE: drivers/acpi/ibm_acpi.c:68:
+#define IBM_NOTICE KERN_NOTICE IBM_LOG

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#598: FILE: drivers/acpi/ibm_acpi.c:69:
+#define IBM_INFO   KERN_INFO   IBM_LOG

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#599: FILE: drivers/acpi/ibm_acpi.c:70:
+#define IBM_DEBUG  KERN_DEBUG  IBM_LOG

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#603: FILE: drivers/acpi/ibm_acpi.c:74:
+#define __unused __attribute__ ((unused))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#603: FILE: drivers/acpi/ibm_acpi.c:74:
+#define __unused __attribute__ ((unused))

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#608: FILE: drivers/acpi/ibm_acpi.c:79:
+static acpi_handle root_handle = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#620: FILE: drivers/acpi/ibm_acpi.c:91:
+IBM_HANDLE(vid, root, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#654: FILE: drivers/acpi/ibm_acpi.c:125:
+^I$

WARNING:SPACING: Unnecessary space before function pointer arguments
#655: FILE: drivers/acpi/ibm_acpi.c:126:
+	int  (*init)   (struct ibm_struct *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ibm_struct *' should also have an identifier name
#655: FILE: drivers/acpi/ibm_acpi.c:126:
+	int  (*init)   (struct ibm_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: Unnecessary space before function pointer arguments
#656: FILE: drivers/acpi/ibm_acpi.c:127:
+	int  (*read)   (struct ibm_struct *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ibm_struct *' should also have an identifier name
#656: FILE: drivers/acpi/ibm_acpi.c:127:
+	int  (*read)   (struct ibm_struct *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#656: FILE: drivers/acpi/ibm_acpi.c:127:
+	int  (*read)   (struct ibm_struct *, char *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#657: FILE: drivers/acpi/ibm_acpi.c:128:
+	int  (*write)  (struct ibm_struct *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ibm_struct *' should also have an identifier name
#657: FILE: drivers/acpi/ibm_acpi.c:128:
+	int  (*write)  (struct ibm_struct *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#657: FILE: drivers/acpi/ibm_acpi.c:128:
+	int  (*write)  (struct ibm_struct *, char *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#658: FILE: drivers/acpi/ibm_acpi.c:129:
+	void (*exit)   (struct ibm_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ibm_struct *' should also have an identifier name
#658: FILE: drivers/acpi/ibm_acpi.c:129:
+	void (*exit)   (struct ibm_struct *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#660: FILE: drivers/acpi/ibm_acpi.c:131:
+^Ivoid (*notify) (struct ibm_struct *, u32);^I$

WARNING:SPACING: Unnecessary space before function pointer arguments
#660: FILE: drivers/acpi/ibm_acpi.c:131:
+	void (*notify) (struct ibm_struct *, u32);	

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ibm_struct *' should also have an identifier name
#660: FILE: drivers/acpi/ibm_acpi.c:131:
+	void (*notify) (struct ibm_struct *, u32);	

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#660: FILE: drivers/acpi/ibm_acpi.c:131:
+	void (*notify) (struct ibm_struct *, u32);	

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#684: FILE: drivers/acpi/ibm_acpi.c:155:
+struct proc_dir_entry *proc_dir = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#686: FILE: drivers/acpi/ibm_acpi.c:157:
+#define onoff(status,bit) ((status) & (1 << (bit)) ? "on" : "off")
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#687: FILE: drivers/acpi/ibm_acpi.c:158:
+#define enabled(status,bit) ((status) & (1 << (bit)) ? "enabled" : "disabled")
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#688: FILE: drivers/acpi/ibm_acpi.c:159:
+#define strlencmp(a,b) (strncmp((a), (b), strlen(b)))
                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#688: FILE: drivers/acpi/ibm_acpi.c:159:
+#define strlencmp(a,b) (strncmp((a), (b), strlen(b)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#694: FILE: drivers/acpi/ibm_acpi.c:165:
+        struct acpi_object_list^Iparams;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#694: FILE: drivers/acpi/ibm_acpi.c:165:
+        struct acpi_object_list^Iparams;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#695: FILE: drivers/acpi/ibm_acpi.c:166:
+        union acpi_object^Iin_objs[IBM_MAX_ACPI_ARGS];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#695: FILE: drivers/acpi/ibm_acpi.c:166:
+        union acpi_object^Iin_objs[IBM_MAX_ACPI_ARGS];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#696: FILE: drivers/acpi/ibm_acpi.c:167:
+        struct acpi_buffer^Iresult;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#696: FILE: drivers/acpi/ibm_acpi.c:167:
+        struct acpi_buffer^Iresult;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#697: FILE: drivers/acpi/ibm_acpi.c:168:
+        union acpi_object^Iout_obj;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#697: FILE: drivers/acpi/ibm_acpi.c:168:
+        union acpi_object^Iout_obj;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#698: FILE: drivers/acpi/ibm_acpi.c:169:
+        acpi_status^I^Istatus;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#698: FILE: drivers/acpi/ibm_acpi.c:169:
+        acpi_status^I^Istatus;$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#705: FILE: drivers/acpi/ibm_acpi.c:176:
+		printk(IBM_ERR "acpi_evalf() called with empty format\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'acpi_evalf', this function's name, in a string
#705: FILE: drivers/acpi/ibm_acpi.c:176:
+		printk(IBM_ERR "acpi_evalf() called with empty format\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:BRACES: braces {} should be used on all arms of this statement
#709: FILE: drivers/acpi/ibm_acpi.c:180:
+	if (*fmt == 'q') {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#712: FILE: drivers/acpi/ibm_acpi.c:183:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#723: FILE: drivers/acpi/ibm_acpi.c:194:
+		char c = *(fmt++);
+		switch (c) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#730: FILE: drivers/acpi/ibm_acpi.c:201:
+			printk(IBM_ERR "acpi_evalf() called "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'acpi_evalf', this function's name, in a string
#730: FILE: drivers/acpi/ibm_acpi.c:201:
+			printk(IBM_ERR "acpi_evalf() called "

WARNING:SPLIT_STRING: quoted string split across lines
#731: FILE: drivers/acpi/ibm_acpi.c:202:
+			printk(IBM_ERR "acpi_evalf() called "
+			       "with invalid format character '%c'\n", c);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#753: FILE: drivers/acpi/ibm_acpi.c:224:
+		printk(IBM_ERR "acpi_evalf() called "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'acpi_evalf', this function's name, in a string
#753: FILE: drivers/acpi/ibm_acpi.c:224:
+		printk(IBM_ERR "acpi_evalf() called "

WARNING:SPLIT_STRING: quoted string split across lines
#754: FILE: drivers/acpi/ibm_acpi.c:225:
+		printk(IBM_ERR "acpi_evalf() called "
+		       "with invalid format character '%c'\n", res_type);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#759: FILE: drivers/acpi/ibm_acpi.c:230:
+		printk(IBM_ERR "acpi_evalf(%s, %s, ...) failed: %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'acpi_evalf', this function's name, in a string
#759: FILE: drivers/acpi/ibm_acpi.c:230:
+		printk(IBM_ERR "acpi_evalf(%s, %s, ...) failed: %d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#770: FILE: drivers/acpi/ibm_acpi.c:241:
+		printk(IBM_INFO "%s = 0x%x\n", method, i);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#772: FILE: drivers/acpi/ibm_acpi.c:243:
+		printk(IBM_ERR "error calling %s\n", method);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#793: FILE: drivers/acpi/ibm_acpi.c:264:
+	printk(IBM_INFO "%s v%s\n", IBM_DESC, IBM_VERSION);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#794: FILE: drivers/acpi/ibm_acpi.c:265:
+	printk(IBM_INFO "%s\n", IBM_URL);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#832: FILE: drivers/acpi/ibm_acpi.c:303:
+	for (i=0; i<32; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#832: FILE: drivers/acpi/ibm_acpi.c:303:
+	for (i=0; i<32; i++) {
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#834: FILE: drivers/acpi/ibm_acpi.c:305:
+		int bit = ((1 << i) & mask) != 0;
+		if (!acpi_evalf(hkey_handle, NULL, "MHKM", "vdd", i+1, bit))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#834: FILE: drivers/acpi/ibm_acpi.c:305:
+		if (!acpi_evalf(hkey_handle, NULL, "MHKM", "vdd", i+1, bit))
 		                                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#858: FILE: drivers/acpi/ibm_acpi.c:329:
+}^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#891: FILE: drivers/acpi/ibm_acpi.c:362:
+		if (strlencmp(cmd, "enable") == 0) {
[...]
+		} else if (strlencmp(cmd, "disable") == 0) {
[...]
+		} else if (strlencmp(cmd, "reset") == 0) {
[...]
+		} else if (sscanf(cmd, "0x%x", &mask) == 1) {
[...]
+		} else if (sscanf(cmd, "%x", &mask) == 1) {
[...]
+		} else
[...]

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#900: FILE: drivers/acpi/ibm_acpi.c:371:
+		} else if (sscanf(cmd, "%x", &mask) == 1) {
+			/* mask set */
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#902: FILE: drivers/acpi/ibm_acpi.c:373:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#911: FILE: drivers/acpi/ibm_acpi.c:382:
+}^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#922: FILE: drivers/acpi/ibm_acpi.c:393:
+	if (acpi_evalf(hkey_handle, &hkey, "MHKP", "d"))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#924: FILE: drivers/acpi/ibm_acpi.c:395:
+	else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#925: FILE: drivers/acpi/ibm_acpi.c:396:
+		printk(IBM_ERR "unknown hotkey event %d\n", event);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#927: FILE: drivers/acpi/ibm_acpi.c:398:
+^I}^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#953: FILE: drivers/acpi/ibm_acpi.c:424:
+	if (!ibm->supported)
[...]
+	else if (!(status & 1))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#957: FILE: drivers/acpi/ibm_acpi.c:428:
+	else {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#975: FILE: drivers/acpi/ibm_acpi.c:446:
+		if (strlencmp(cmd, "enable") == 0) {
[...]
+		} else if (strlencmp(cmd, "disable") == 0) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#979: FILE: drivers/acpi/ibm_acpi.c:450:
+		} else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#984: FILE: drivers/acpi/ibm_acpi.c:455:
+	if (do_cmd && !acpi_evalf(hkey_handle, NULL, "SBDC", "vd", status))
+	    return -EIO;

WARNING:TABSTOP: Statements should start on a tabstop
#985: FILE: drivers/acpi/ibm_acpi.c:456:
+	    return -EIO;

WARNING:SPLIT_STRING: quoted string split across lines
#1030: FILE: drivers/acpi/ibm_acpi.c:501:
+	len += sprintf(p + len, "commands:\tlcd_enable, lcd_disable, "
+		       "crt_enable, crt_disable\n");

WARNING:SPLIT_STRING: quoted string split across lines
#1032: FILE: drivers/acpi/ibm_acpi.c:503:
+	len += sprintf(p + len, "commands:\tdvi_enable, dvi_disable, "
+		       "auto_enable, auto_disable\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1043: FILE: drivers/acpi/ibm_acpi.c:514:
+	enable = disable = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: braces {} should be used on all arms of this statement
#1046: FILE: drivers/acpi/ibm_acpi.c:517:
+		if (strlencmp(cmd, "lcd_enable") == 0) {
[...]
+		} else if (strlencmp(cmd, "lcd_disable") == 0) {
[...]
+		} else if (strlencmp(cmd, "crt_enable") == 0) {
[...]
+		} else if (strlencmp(cmd, "crt_disable") == 0) {
[...]
+		} else if (strlencmp(cmd, "dvi_enable") == 0) {
[...]
+		} else if (strlencmp(cmd, "dvi_disable") == 0) {
[...]
+		} else if (strlencmp(cmd, "auto_enable") == 0) {
[...]
+		} else if (strlencmp(cmd, "auto_disable") == 0) {
[...]
+		} else if (strlencmp(cmd, "video_switch") == 0) {
[...]
+		} else if (strlencmp(cmd, "expand_toggle") == 0) {
[...]
+		} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#1066: FILE: drivers/acpi/ibm_acpi.c:537:
+			int autoswitch;
+			if (!acpi_evalf(vid_handle, &autoswitch, "^VDEE", "d"))

CHECK:BRACES: Unbalanced braces around else statement
#1078: FILE: drivers/acpi/ibm_acpi.c:549:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1112: FILE: drivers/acpi/ibm_acpi.c:583:
+	if (ibm->supported) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1116: FILE: drivers/acpi/ibm_acpi.c:587:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1129: FILE: drivers/acpi/ibm_acpi.c:600:
+^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#1131: FILE: drivers/acpi/ibm_acpi.c:602:
+		if (strlencmp(cmd, "on") == 0) {
[...]
+		} else if (strlencmp(cmd, "off") == 0) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1137: FILE: drivers/acpi/ibm_acpi.c:608:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1139: FILE: drivers/acpi/ibm_acpi.c:610:
+^I^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#1167: FILE: drivers/acpi/ibm_acpi.c:638:
+	if (!dock_handle)
[...]
+	else if (!docked)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1171: FILE: drivers/acpi/ibm_acpi.c:642:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1187: FILE: drivers/acpi/ibm_acpi.c:658:
+		if (strlencmp(cmd, "undock") == 0) {
[...]
+		} else if (strlencmp(cmd, "dock") == 0) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1195: FILE: drivers/acpi/ibm_acpi.c:666:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1200: FILE: drivers/acpi/ibm_acpi.c:671:
+}^I$

CHECK:BRACES: Unbalanced braces around else statement
#1212: FILE: drivers/acpi/ibm_acpi.c:683:
+	else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1213: FILE: drivers/acpi/ibm_acpi.c:684:
+		printk(IBM_ERR "unknown dock event %d, status %d\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1234: FILE: drivers/acpi/ibm_acpi.c:705:
+^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#1235: FILE: drivers/acpi/ibm_acpi.c:706:
+	if (!ibm->supported)
[...]
+	else if (!occupied)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1239: FILE: drivers/acpi/ibm_acpi.c:710:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1252: FILE: drivers/acpi/ibm_acpi.c:723:
+		if (strlencmp(cmd, "eject") == 0) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1256: FILE: drivers/acpi/ibm_acpi.c:727:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1261: FILE: drivers/acpi/ibm_acpi.c:732:
+}^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#1273: FILE: drivers/acpi/ibm_acpi.c:744:
+	if (!cmos_handle)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1275: FILE: drivers/acpi/ibm_acpi.c:746:
+	else {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1292: FILE: drivers/acpi/ibm_acpi.c:763:
+		if (sscanf(cmd, "%u", &cmos_cmd) == 1) {
[...]
+		} else
[...]

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1292: FILE: drivers/acpi/ibm_acpi.c:763:
+		if (sscanf(cmd, "%u", &cmos_cmd) == 1) {
+			/* cmos_cmd set */
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#1294: FILE: drivers/acpi/ibm_acpi.c:765:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1302: FILE: drivers/acpi/ibm_acpi.c:773:
+}^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1303: FILE: drivers/acpi/ibm_acpi.c:774:
+^I^I$

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1324: FILE: drivers/acpi/ibm_acpi.c:795:
+		if (sscanf(cmd, "%u", &led) != 1)
+			return -EINVAL;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1327: FILE: drivers/acpi/ibm_acpi.c:798:
+		if (strstr(cmd, "blink")) {
[...]
+		} else if (strstr(cmd, "on")) {
[...]
+		} else if (strstr(cmd, "off")) {
[...]
+		} else
[...]

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1338: FILE: drivers/acpi/ibm_acpi.c:809:
+			led_cmd = sysl_cmd = bled_a = bled_b = 0;

CHECK:BRACES: Unbalanced braces around else statement
#1339: FILE: drivers/acpi/ibm_acpi.c:810:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1341: FILE: drivers/acpi/ibm_acpi.c:812:
+^I^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#1342: FILE: drivers/acpi/ibm_acpi.c:813:
+		if (led_handle) {
[...]
+		} else if (led < 2) {
[...]
+		} else if (led == 2 && bled_handle) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1354: FILE: drivers/acpi/ibm_acpi.c:825:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1359: FILE: drivers/acpi/ibm_acpi.c:830:
+}^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1360: FILE: drivers/acpi/ibm_acpi.c:831:
+^I^I$

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1376: FILE: drivers/acpi/ibm_acpi.c:847:
+		if (sscanf(cmd, "%u", &beep_cmd) == 1) {
[...]
+		} else
[...]

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1376: FILE: drivers/acpi/ibm_acpi.c:847:
+		if (sscanf(cmd, "%u", &beep_cmd) == 1) {
+			/* beep_cmd set */
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#1378: FILE: drivers/acpi/ibm_acpi.c:849:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1386: FILE: drivers/acpi/ibm_acpi.c:857:
+}^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1387: FILE: drivers/acpi/ibm_acpi.c:858:
+^I^I$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1460: FILE: drivers/acpi/ibm_acpi.c:931:
+};
+#define NUM_IBMS (sizeof(ibms)/sizeof(ibms[0]))

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(ibms)
#1460: FILE: drivers/acpi/ibm_acpi.c:931:
+#define NUM_IBMS (sizeof(ibms)/sizeof(ibms[0]))

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1460: FILE: drivers/acpi/ibm_acpi.c:931:
+#define NUM_IBMS (sizeof(ibms)/sizeof(ibms[0]))
                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1467: FILE: drivers/acpi/ibm_acpi.c:938:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1501: FILE: drivers/acpi/ibm_acpi.c:972:
+        if (copy_from_user(kernbuf, userbuf, count)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1501: FILE: drivers/acpi/ibm_acpi.c:972:
+        if (copy_from_user(kernbuf, userbuf, count)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1503: FILE: drivers/acpi/ibm_acpi.c:974:
+                return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1503: FILE: drivers/acpi/ibm_acpi.c:974:
+                return -EFAULT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1514: FILE: drivers/acpi/ibm_acpi.c:985:
+        return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1514: FILE: drivers/acpi/ibm_acpi.c:985:
+        return ret;$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1537: FILE: drivers/acpi/ibm_acpi.c:1008:
+		printk(IBM_ERR "%s device not present\n", ibm->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1547: FILE: drivers/acpi/ibm_acpi.c:1018:
+		printk(IBM_ERR "acpi_install_notify_handler(%s) failed: %d\n",

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ibm->driver)...) over kmalloc(sizeof(struct acpi_driver)...)
#1566: FILE: drivers/acpi/ibm_acpi.c:1037:
+	ibm->driver = kmalloc(sizeof(struct acpi_driver), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1568: FILE: drivers/acpi/ibm_acpi.c:1039:
+		printk(IBM_ERR "kmalloc(ibm->driver) failed\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1568: FILE: drivers/acpi/ibm_acpi.c:1039:
+	if (!ibm->driver) {
+		printk(IBM_ERR "kmalloc(ibm->driver) failed\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1579: FILE: drivers/acpi/ibm_acpi.c:1050:
+		printk(IBM_ERR "acpi_bus_register_driver(%s) failed: %d\n",

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1609: FILE: drivers/acpi/ibm_acpi.c:1080:
+	entry = create_proc_entry(ibm->name, S_IFREG | S_IRUGO | S_IWUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1612: FILE: drivers/acpi/ibm_acpi.c:1083:
+		printk(IBM_ERR "unable to create proc entry %s\n", ibm->name);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1617: FILE: drivers/acpi/ibm_acpi.c:1088:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1658: FILE: drivers/acpi/ibm_acpi.c:1129:
+	for (i=0; i<num_paths; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1658: FILE: drivers/acpi/ibm_acpi.c:1129:
+	for (i=0; i<num_paths; i++) {
 	           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1663: FILE: drivers/acpi/ibm_acpi.c:1134:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1665: FILE: drivers/acpi/ibm_acpi.c:1136:
+		printk(IBM_ERR "%s object not found\n", name);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1675: FILE: drivers/acpi/ibm_acpi.c:1146:
+        if (ibm_handle_init(#object, &object##_handle, *object##_parent,      \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1675: FILE: drivers/acpi/ibm_acpi.c:1146:
+        if (ibm_handle_init(#object, &object##_handle, *object##_parent,      \$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1676: FILE: drivers/acpi/ibm_acpi.c:1147:
+		object##_paths, sizeof(object##_paths)/sizeof(char *), 1) < 0)\
 		                                      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1682: FILE: drivers/acpi/ibm_acpi.c:1153:
+		object##_paths, sizeof(object##_paths)/sizeof(char *), 0)
 		                                      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1684: FILE: drivers/acpi/ibm_acpi.c:1155:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1690: FILE: drivers/acpi/ibm_acpi.c:1161:
+	for (i=0; i<NUM_IBMS; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1690: FILE: drivers/acpi/ibm_acpi.c:1161:
+	for (i=0; i<NUM_IBMS; i++)
 	           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1693: FILE: drivers/acpi/ibm_acpi.c:1164:
+}^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1705: FILE: drivers/acpi/ibm_acpi.c:1176:
+	for (i=NUM_IBMS-1; i>=0; i--)
 	      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1705: FILE: drivers/acpi/ibm_acpi.c:1176:
+	for (i=NUM_IBMS-1; i>=0; i--)
 	               ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#1705: FILE: drivers/acpi/ibm_acpi.c:1176:
+	for (i=NUM_IBMS-1; i>=0; i--)
 	                    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1720: FILE: drivers/acpi/ibm_acpi.c:1191:
+		printk(IBM_ERR "unable to create proc dir %s", IBM_DIR);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1724: FILE: drivers/acpi/ibm_acpi.c:1195:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1739: FILE: drivers/acpi/ibm_acpi.c:1210:
+		printk(IBM_ERR "neither led nor sysl object found\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1743: FILE: drivers/acpi/ibm_acpi.c:1214:
+	for (i=0; i<NUM_IBMS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1743: FILE: drivers/acpi/ibm_acpi.c:1214:
+	for (i=0; i<NUM_IBMS; i++) {
 	           ^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1777: FILE: drivers/acpi/Kconfig:179:
+config ACPI_IBM
+	tristate "IBM ThinkPad Laptop Extras"
+	depends on X86
+	depends on ACPI_INTERPRETER
+	default m
+	---help---
+	  This is a Linux ACPI driver for the IBM ThinkPad laptops. It adds
+	  support for Fn-Fx key combinations, Bluetooth control, video
+	  output switching, ThinkLight control, UltraBay eject and more.
+	  For more information about this driver see Documentation/ibm-acpi.txt
+	  and http://ibm-acpi.sf.net/ .
+
+	  If you have an IBM ThinkPad laptop, say Y or M here.
+          

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1790: FILE: drivers/acpi/Kconfig:192:
+          $

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000240465.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 57 errors, 69 warnings, 43 checks, 1741 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000240465.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
