ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#66: FILE: arch/arm/kernel/time.c:146:
sysdev_attribute *attr, const char *buf, size_t size)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:CODE_INDENT: code indent should use tabs where possible
#84: FILE: arch/ppc64/kernel/sysfs.c:32:
+                                      const char *buf, size_t count)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: arch/ppc64/kernel/sysfs.c:32:
+                                      const char *buf, size_t count)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#95: FILE: arch/ppc64/kernel/sysfs.c:48:
+                                     char *buf)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#95: FILE: arch/ppc64/kernel/sysfs.c:48:
+                                     char *buf)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#115: FILE: arch/ppc64/kernel/sysfs.c:212:
+	store_##NAME(struct sys_device *dev, struct sysdev_attribute *attr,
 { \

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: arch/sh/drivers/dma/dma-sysfs.c:104:
+                                struct sysdev_attribute *attr,          \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: arch/sh/drivers/dma/dma-sysfs.c:104:
+                                struct sysdev_attribute *attr,          \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: arch/sh/drivers/dma/dma-sysfs.c:105:
+                                char *buf)^I                        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: arch/sh/drivers/dma/dma-sysfs.c:105:
+                                char *buf)^I                        \$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#214: FILE: arch/x86_64/kernel/mce.c:532:
+                                     struct sysdev_attribute *attr,  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#214: FILE: arch/x86_64/kernel/mce.c:532:
+                                     struct sysdev_attribute *attr,  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: arch/x86_64/kernel/mce.c:532:
+                                     struct sysdev_attribute *attr,  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#216: FILE: arch/x86_64/kernel/mce.c:534:
+                                     char *buf) { ^I   ^I                   \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#216: FILE: arch/x86_64/kernel/mce.c:534:
+                                     char *buf) { ^I   ^I                   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: arch/x86_64/kernel/mce.c:534:
+                                     char *buf) { ^I   ^I                   \$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#221: FILE: arch/x86_64/kernel/mce.c:537:
+	static ssize_t set_ ## name(struct sys_device *s,                          \
+                                    struct sysdev_attribute *attr,   
             \
+                                    const char *buf,size_t siz) {    

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#222: FILE: arch/x86_64/kernel/mce.c:538:
+                                    struct sysdev_attribute *attr,   $

ERROR:CODE_INDENT: code indent should use tabs where possible
#222: FILE: arch/x86_64/kernel/mce.c:538:
+                                    struct sysdev_attribute *attr,   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: arch/x86_64/kernel/mce.c:538:
+                                    struct sysdev_attribute *attr,   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#224: FILE: arch/x86_64/kernel/mce.c:540:
+                                    const char *buf,size_t siz) {    $

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: arch/x86_64/kernel/mce.c:540:
+                                    const char *buf,size_t siz) {    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: arch/x86_64/kernel/mce.c:540:
+                                    const char *buf,size_t siz) {    $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#224: FILE: arch/x86_64/kernel/mce.c:540:
+                                    const char *buf,size_t siz) {    
                                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#250: FILE: drivers/base/cpu.c:32:
+                            const char *buf, size_t count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: drivers/base/cpu.c:32:
+                            const char *buf, size_t count)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#263: FILE: drivers/base/node.c:20:
+static ssize_t node_read_cpumap(struct sys_device * dev, struct

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#273: FILE: drivers/base/node.c:37:
+static ssize_t node_read_meminfo(struct sys_device * dev, struct

ERROR:CODE_INDENT: code indent should use tabs where possible
#275: FILE: drivers/base/node.c:38:
+                                 char * buf)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: drivers/base/node.c:38:
+                                 char * buf)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#275: FILE: drivers/base/node.c:38:
+                                 char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#284: FILE: drivers/base/node.c:76:
+static ssize_t node_read_numastat(struct sys_device * dev, struct

ERROR:CODE_INDENT: code indent should use tabs where possible
#286: FILE: drivers/base/node.c:77:
+                                  char * buf)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: drivers/base/node.c:77:
+                                  char * buf)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#286: FILE: drivers/base/node.c:77:
+                                  char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#295: FILE: drivers/base/node.c:117:
+static ssize_t node_read_distance(struct sys_device * dev, struct

ERROR:CODE_INDENT: code indent should use tabs where possible
#297: FILE: drivers/base/node.c:118:
+                                  char * buf)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#297: FILE: drivers/base/node.c:118:
+                                  char * buf)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#297: FILE: drivers/base/node.c:118:
+                                  char * buf)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sys_device *' should also have an identifier name
#339: FILE: include/linux/sysdev.h:79:
+	ssize_t (*show)(struct sys_device *, struct sysdev_attribute *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysdev_attribute *' should also have an identifier name
#339: FILE: include/linux/sysdev.h:79:
+	ssize_t (*show)(struct sys_device *, struct sysdev_attribute *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#339: FILE: include/linux/sysdev.h:79:
+	ssize_t (*show)(struct sys_device *, struct sysdev_attribute *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sys_device *' should also have an identifier name
#340: FILE: include/linux/sysdev.h:80:
+	ssize_t (*store)(struct sys_device *, struct sysdev_attribute *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysdev_attribute *' should also have an identifier name
#340: FILE: include/linux/sysdev.h:80:
+	ssize_t (*store)(struct sys_device *, struct sysdev_attribute *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#340: FILE: include/linux/sysdev.h:80:
+	ssize_t (*store)(struct sys_device *, struct sysdev_attribute *,

ERROR:CODE_INDENT: code indent should use tabs where possible
#342: FILE: include/linux/sysdev.h:81:
+        void * data;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#342: FILE: include/linux/sysdev.h:81:
+	ssize_t (*store)(struct sys_device *, struct sysdev_attribute *,
+        void * data;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#342: FILE: include/linux/sysdev.h:81:
+        void * data;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#342: FILE: include/linux/sysdev.h:81:
+        void * data;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#348: FILE: include/linux/sysdev.h:86:
+#define SYSDEV_ATTR_WITH_DATA(_name,_mode,_show,_store,_data) ^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#348: FILE: include/linux/sysdev.h:86:
+#define SYSDEV_ATTR_WITH_DATA(_name,_mode,_show,_store,_data) 		\
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#348: FILE: include/linux/sysdev.h:86:
+#define SYSDEV_ATTR_WITH_DATA(_name,_mode,_show,_store,_data) 		\
                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#348: FILE: include/linux/sysdev.h:86:
+#define SYSDEV_ATTR_WITH_DATA(_name,_mode,_show,_store,_data) 		\
                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#348: FILE: include/linux/sysdev.h:86:
+#define SYSDEV_ATTR_WITH_DATA(_name,_mode,_show,_store,_data) 		\
                                                       ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#348: FILE: include/linux/sysdev.h:86:
+#define SYSDEV_ATTR_WITH_DATA(_name,_mode,_show,_store,_data) 		\
 struct sysdev_attribute attr_##_name = { 			\
 	.attr = {.name = __stringify(_name), .mode = _mode },	\
 	.show	= _show,					\
 	.store	= _store,					\
+        .data   = _data,                                        \
 };

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:CODE_INDENT: code indent should use tabs where possible
#353: FILE: include/linux/sysdev.h:91:
+        .data   = _data,                                        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#353: FILE: include/linux/sysdev.h:91:
+        .data   = _data,                                        \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#356: FILE: include/linux/sysdev.h:94:
+#define SYSDEV_ATTR(_name,_mode,_show,_store) ^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#356: FILE: include/linux/sysdev.h:94:
+#define SYSDEV_ATTR(_name,_mode,_show,_store) 		\
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#356: FILE: include/linux/sysdev.h:94:
+#define SYSDEV_ATTR(_name,_mode,_show,_store) 		\
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#356: FILE: include/linux/sysdev.h:94:
+#define SYSDEV_ATTR(_name,_mode,_show,_store) 		\
                                      ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#357: FILE: include/linux/sysdev.h:95:
+  SYSDEV_ATTR_WITH_DATA(_name,_mode,_show,_store,NULL)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#357: FILE: include/linux/sysdev.h:95:
+  SYSDEV_ATTR_WITH_DATA(_name,_mode,_show,_store,NULL)
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#357: FILE: include/linux/sysdev.h:95:
+  SYSDEV_ATTR_WITH_DATA(_name,_mode,_show,_store,NULL)
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#357: FILE: include/linux/sysdev.h:95:
+  SYSDEV_ATTR_WITH_DATA(_name,_mode,_show,_store,NULL)
                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#357: FILE: include/linux/sysdev.h:95:
+  SYSDEV_ATTR_WITH_DATA(_name,_mode,_show,_store,NULL)
                                                 ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000142257.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 39 errors, 25 warnings, 2 checks, 243 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000142257.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
