WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#107: FILE: kernel/timer_top.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#108: FILE: kernel/timer_top.c:2:
+ * kernel/timer_top.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#129: FILE: kernel/timer_top.c:23:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#136: FILE: kernel/timer_top.c:30:
+#include <asm/uaccess.h>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#144: FILE: kernel/timer_top.c:38:
+^Ichar ^I^I^Icomm[TASK_COMM_LEN];$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#145: FILE: kernel/timer_top.c:39:
+^Istruct list_head ^Ilist;$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#149: FILE: kernel/timer_top.c:43:
+	spinlock_t		lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#162: FILE: kernel/timer_top.c:56:
+static int start_flag = 0; ^I/* signs if will collect data or not */$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#162: FILE: kernel/timer_top.c:56:
+static int start_flag = 0; 	/* signs if will collect data or not */

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#165: FILE: kernel/timer_top.c:59:
+static inline struct timer_top_info *update_top_info(unsigned long function,
+	pid_t pid_info)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#185: FILE: kernel/timer_top.c:79:
+	struct task_struct * task_info;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: kernel/timer_top.c:90:
+^I       ^Itask_info = (struct task_struct *) data;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#196: FILE: kernel/timer_top.c:90:
+^I       ^Itask_info = (struct task_struct *) data;$

CHECK:SPACING: No space is necessary after a cast
#196: FILE: kernel/timer_top.c:90:
+	       	task_info = (struct task_struct *) data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'task_info->pid > 0'
#198: FILE: kernel/timer_top.c:92:
+		if ((task_info->pid > 0) && (task_info->pid < PID_MAX_LIMIT)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'task_info->pid < PID_MAX_LIMIT'
#198: FILE: kernel/timer_top.c:92:
+		if ((task_info->pid > 0) && (task_info->pid < PID_MAX_LIMIT)) {

WARNING:TYPO_SPELLING: 'didnt' may be misspelled - perhaps 'didn't'?
#212: FILE: kernel/timer_top.c:106:
+	/* if you are here then it didnt find so inserts in the list */
 	                           ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#226: FILE: kernel/timer_top.c:120:
+EXPORT_SYMBOL(account_timer);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#257: FILE: kernel/timer_top.c:151:
+		seq_printf(m, "%x %lu %d %s\n", top->func_pointer, top->counter, top->pid, top->comm);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BRACES: braces {} are not necessary for single statement blocks
#260: FILE: kernel/timer_top.c:154:
+	if (start_flag == 0) {
+		seq_printf(m, "Disabled\n");
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#261: FILE: kernel/timer_top.c:155:
+		seq_printf(m, "Disabled\n");

WARNING:CONST_STRUCT: struct file_operations should normally be const
#272: FILE: kernel/timer_top.c:166:
+static struct file_operations proc_timertop_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:CODE_INDENT: code indent should use tabs where possible
#283: FILE: kernel/timer_top.c:177:
+                                 unsigned long count, void *data)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#283: FILE: kernel/timer_top.c:177:
+static int proc_write_timer_input(struct file *file, const char *page,
+                                 unsigned long count, void *data)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: kernel/timer_top.c:177:
+                                 unsigned long count, void *data)$

ERROR:SPACING: space required before the open parenthesis '('
#289: FILE: kernel/timer_top.c:183:
+	if(count > MAX_INPUT_TOP - 1)

ERROR:SPACING: space required before the open parenthesis '('
#299: FILE: kernel/timer_top.c:193:
+	if(!strncmp(input_data, "clear", 5))

ERROR:SPACING: space required before the open parenthesis '('
#301: FILE: kernel/timer_top.c:195:
+	else if(!strncmp(input_data, "start", 5))

ERROR:SPACING: space required before the open parenthesis '('
#303: FILE: kernel/timer_top.c:197:
+	else if(!strncmp(input_data, "stop", 4))

ERROR:CODE_INDENT: code indent should use tabs where possible
#311: FILE: kernel/timer_top.c:205:
+                                int count, int *eof, void *data)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#311: FILE: kernel/timer_top.c:205:
+static int proc_read_timer_input(char *page, char **start, off_t off,
+                                int count, int *eof, void *data)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#311: FILE: kernel/timer_top.c:205:
+                                int count, int *eof, void *data)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#323: FILE: kernel/timer_top.c:217:
+	top_root.cache = kmem_cache_create("top_info",
+		sizeof(struct timer_top_info), 0, SLAB_PANIC, NULL, NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!top_info_file"
#326: FILE: kernel/timer_top.c:220:
+	if (top_info_file == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!top_info_file_out"
#330: FILE: kernel/timer_top.c:224:
+	if (top_info_file_out == NULL)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#377: FILE: include/linux/dyn-tick.h:55:
+extern int account_timer(unsigned long function, unsigned long data);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000130102.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 9 errors, 15 warnings, 12 checks, 304 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000130102.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
