CHECK:BRACES: braces {} should be used on all arms of this statement
#111: FILE: mm/vmscan.c:622:
+	if (PageActive(page)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#118: FILE: mm/vmscan.c:629:
+	} else

ERROR:SPACING: space required before the open parenthesis '('
#169: FILE: mm/vmscan.c:680:
+	for(i = 0; i < 10 && page_mapped(page); i++) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#189: FILE: mm/vmscan.c:700:
+	radix_pointer = (struct page **)radix_tree_lookup_slot(

CHECK:BRACES: braces {} should be used on all arms of this statement
#225: FILE: mm/vmscan.c:732:
+	if (PageSwapCache(page)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#228: FILE: mm/vmscan.c:735:
+	} else

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#243: FILE: mm/vmscan.c:750:
+{
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#246: FILE: mm/vmscan.c:753:
+		printk(KERN_ERR "precheck: copying %p->%p page count=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#247: FILE: mm/vmscan.c:754:
+		printk(KERN_ERR "precheck: copying %p->%p page count=%d\n",
+				page, newpage, page_count(page));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#276: FILE: mm/vmscan.c:783:
+		printk(KERN_ERR "postcheck: copying %p->%p page count=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#277: FILE: mm/vmscan.c:784:
+		printk(KERN_ERR "postcheck: copying %p->%p page count=%d\n",
+				page, newpage, page_count(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#301: FILE: mm/vmscan.c:802:
+	BUG_ON(PageWriteback(page));	/* Writeback must be complete */

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:REPEATED_WORD: Possible repeated word: 'we'
#388: FILE: mm/vmscan.c:868:
+		 * where we we may have triggered writeouts.

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#492: FILE: mm/vmscan.c:965:
+		}
+		else if (newpage) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#540: FILE: include/linux/swap.h:183:
+extern int migrate_pages(struct list_head *l, struct list_head *t,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#543: FILE: include/linux/swap.h:186:
+extern int migrate_page(struct page *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#543: FILE: include/linux/swap.h:186:
+extern int migrate_page(struct page *, struct page *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#543: FILE: include/linux/swap.h:186:
+extern int migrate_page(struct page *, struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#544: FILE: include/linux/swap.h:187:
+extern int migrate_page_remove_references(struct page *, struct page *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#544: FILE: include/linux/swap.h:187:
+extern int migrate_page_remove_references(struct page *, struct page *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#544: FILE: include/linux/swap.h:187:
+extern int migrate_page_remove_references(struct page *, struct page *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#544: FILE: include/linux/swap.h:187:
+extern int migrate_page_remove_references(struct page *, struct page *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#545: FILE: include/linux/swap.h:188:
+extern void migrate_page_copy(struct page *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#545: FILE: include/linux/swap.h:188:
+extern void migrate_page_copy(struct page *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#545: FILE: include/linux/swap.h:188:
+extern void migrate_page_copy(struct page *, struct page *);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#604: FILE: Documentation/vm/page_migration:51:
+   and set to not being uptodate so that all accesses to the new
                         ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000136666.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 12 warnings, 12 checks, 584 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000136666.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
