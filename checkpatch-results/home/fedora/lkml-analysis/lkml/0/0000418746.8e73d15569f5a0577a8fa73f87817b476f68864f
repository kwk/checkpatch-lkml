ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#34: 
--- a/fs/Config.in	Tue Oct 29 09:55:28 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#72: FILE: fs/posix_acl.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#73: FILE: fs/posix_acl.c:2:
+ * linux/fs/posix_acl.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#88: FILE: fs/posix_acl.c:17:
+#include <asm/atomic.h>

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#96: FILE: fs/posix_acl.c:25:
+EXPORT_SYMBOL(posix_acl_alloc);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#97: FILE: fs/posix_acl.c:26:
+EXPORT_SYMBOL(posix_acl_clone);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#98: FILE: fs/posix_acl.c:27:
+EXPORT_SYMBOL(posix_acl_valid);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#99: FILE: fs/posix_acl.c:28:
+EXPORT_SYMBOL(posix_acl_equiv_mode);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#100: FILE: fs/posix_acl.c:29:
+EXPORT_SYMBOL(posix_acl_from_mode);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#101: FILE: fs/posix_acl.c:30:
+EXPORT_SYMBOL(posix_acl_create_masq);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#102: FILE: fs/posix_acl.c:31:
+EXPORT_SYMBOL(posix_acl_chmod_masq);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#103: FILE: fs/posix_acl.c:32:
+EXPORT_SYMBOL(posix_acl_masq_nfs_mode);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#104: FILE: fs/posix_acl.c:33:
+EXPORT_SYMBOL(posix_acl_permission);

ERROR:CODE_INDENT: code indent should use tabs where possible
#113: FILE: fs/posix_acl.c:42:
+^I                    count * sizeof(struct posix_acl_entry);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LINE_SPACING: Missing a blank line after declarations
#115: FILE: fs/posix_acl.c:44:
+	struct posix_acl *acl = kmalloc(size, flags);
+	if (acl) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#132: FILE: fs/posix_acl.c:61:
+^I^I           sizeof(struct posix_acl_entry);$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#154: FILE: fs/posix_acl.c:83:
+		if (pa->e_perm & ~(ACL_READ|ACL_WRITE|ACL_EXECUTE))
 		                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#154: FILE: fs/posix_acl.c:83:
+		if (pa->e_perm & ~(ACL_READ|ACL_WRITE|ACL_EXECUTE))
 		                                     ^

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#156: FILE: fs/posix_acl.c:85:
+		switch (pa->e_tag) {
+			case ACL_USER_OBJ:
[...]
+			case ACL_USER:
[...]
+			case ACL_GROUP_OBJ:
[...]
+			case ACL_GROUP:
[...]
+			case ACL_MASK:
[...]
+			case ACL_OTHER:
[...]
+			default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#228: FILE: fs/posix_acl.c:157:
+		switch (pa->e_tag) {
+			case ACL_USER_OBJ:
[...]
+			case ACL_GROUP_OBJ:
[...]
+			case ACL_OTHER:
[...]
+			case ACL_MASK:
[...]
+			case ACL_USER:
+			case ACL_GROUP:
[...]
+			default:

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXO' are not preferred. Consider using octal permissions '0007'.
#230: FILE: fs/posix_acl.c:159:
+				mode |= (pa->e_perm & S_IRWXO) << 6;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXO' are not preferred. Consider using octal permissions '0007'.
#233: FILE: fs/posix_acl.c:162:
+				mode |= (pa->e_perm & S_IRWXO) << 3;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXO' are not preferred. Consider using octal permissions '0007'.
#236: FILE: fs/posix_acl.c:165:
+				mode |= pa->e_perm & S_IRWXO;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXG' are not preferred. Consider using octal permissions '0070'.
#239: FILE: fs/posix_acl.c:168:
+				mode = (mode & ~S_IRWXG) |

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXO' are not preferred. Consider using octal permissions '0007'.
#240: FILE: fs/posix_acl.c:169:
+				       ((pa->e_perm & S_IRWXO) << 3);

ERROR:CODE_INDENT: code indent should use tabs where possible
#251: FILE: fs/posix_acl.c:180:
+        if (mode_p)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: fs/posix_acl.c:180:
+        if (mode_p)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#252: FILE: fs/posix_acl.c:181:
+                *mode_p = (*mode_p & ~S_IRWXUGO) | mode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#252: FILE: fs/posix_acl.c:181:
+                *mode_p = (*mode_p & ~S_IRWXUGO) | mode;$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#252: FILE: fs/posix_acl.c:181:
+                *mode_p = (*mode_p & ~S_IRWXUGO) | mode;

ERROR:CODE_INDENT: code indent should use tabs where possible
#253: FILE: fs/posix_acl.c:182:
+        return not_equiv;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#253: FILE: fs/posix_acl.c:182:
+        return not_equiv;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#263: FILE: fs/posix_acl.c:192:
+	struct posix_acl *acl = posix_acl_alloc(3, flags);
+	if (!acl)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU' are not preferred. Consider using octal permissions '0700'.
#268: FILE: fs/posix_acl.c:197:
+	acl->a_entries[0].e_perm = (mode & S_IRWXU) >> 6;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXG' are not preferred. Consider using octal permissions '0070'.
#272: FILE: fs/posix_acl.c:201:
+	acl->a_entries[1].e_perm = (mode & S_IRWXG) >> 3;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXO' are not preferred. Consider using octal permissions '0007'.
#276: FILE: fs/posix_acl.c:205:
+	acl->a_entries[2].e_perm = (mode & S_IRWXO);

ERROR:CODE_INDENT: code indent should use tabs where possible
#291: FILE: fs/posix_acl.c:220:
+                switch(pa->e_tag) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: fs/posix_acl.c:220:
+                switch(pa->e_tag) {$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#291: FILE: fs/posix_acl.c:220:
+                switch(pa->e_tag) {
+                        case ACL_USER_OBJ:
[...]
+                        case ACL_USER:
[...]
+                        case ACL_GROUP_OBJ:
[...]
+                        case ACL_GROUP:
[...]
+                        case ACL_MASK:
[...]
+                        case ACL_OTHER:
[...]
+			default:

ERROR:SPACING: space required before the open parenthesis '('
#291: FILE: fs/posix_acl.c:220:
+                switch(pa->e_tag) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#292: FILE: fs/posix_acl.c:221:
+                        case ACL_USER_OBJ:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: fs/posix_acl.c:221:
+                        case ACL_USER_OBJ:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#294: FILE: fs/posix_acl.c:223:
+                                if (inode->i_uid == current->fsuid)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#294: FILE: fs/posix_acl.c:223:
+                                if (inode->i_uid == current->fsuid)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#295: FILE: fs/posix_acl.c:224:
+                                        goto check_perm;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: fs/posix_acl.c:224:
+                                        goto check_perm;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#296: FILE: fs/posix_acl.c:225:
+                                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: fs/posix_acl.c:225:
+                                break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#297: FILE: fs/posix_acl.c:226:
+                        case ACL_USER:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#297: FILE: fs/posix_acl.c:226:
+                        case ACL_USER:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#298: FILE: fs/posix_acl.c:227:
+                                if (pa->e_id == current->fsuid)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#298: FILE: fs/posix_acl.c:227:
+                                if (pa->e_id == current->fsuid)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#299: FILE: fs/posix_acl.c:228:
+                                        goto mask;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: fs/posix_acl.c:228:
+                                        goto mask;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#301: FILE: fs/posix_acl.c:230:
+                        case ACL_GROUP_OBJ:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#301: FILE: fs/posix_acl.c:230:
+                        case ACL_GROUP_OBJ:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#302: FILE: fs/posix_acl.c:231:
+                                if (in_group_p(inode->i_gid)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#302: FILE: fs/posix_acl.c:231:
+                                if (in_group_p(inode->i_gid)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#306: FILE: fs/posix_acl.c:235:
+                                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#306: FILE: fs/posix_acl.c:235:
+                                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#308: FILE: fs/posix_acl.c:237:
+                        case ACL_GROUP:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#308: FILE: fs/posix_acl.c:237:
+                        case ACL_GROUP:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#309: FILE: fs/posix_acl.c:238:
+                                if (in_group_p(pa->e_id)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#309: FILE: fs/posix_acl.c:238:
+                                if (in_group_p(pa->e_id)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#313: FILE: fs/posix_acl.c:242:
+                                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#313: FILE: fs/posix_acl.c:242:
+                                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#314: FILE: fs/posix_acl.c:243:
+                                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#314: FILE: fs/posix_acl.c:243:
+                                break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#315: FILE: fs/posix_acl.c:244:
+                        case ACL_MASK:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#315: FILE: fs/posix_acl.c:244:
+                        case ACL_MASK:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#316: FILE: fs/posix_acl.c:245:
+                                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: fs/posix_acl.c:245:
+                                break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#317: FILE: fs/posix_acl.c:246:
+                        case ACL_OTHER:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: fs/posix_acl.c:246:
+                        case ACL_OTHER:$

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#320: FILE: fs/posix_acl.c:249:
+					return -EACCES;
+				else

ERROR:CODE_INDENT: code indent should use tabs where possible
#324: FILE: fs/posix_acl.c:253:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: fs/posix_acl.c:253:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#325: FILE: fs/posix_acl.c:254:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: fs/posix_acl.c:254:
+        }$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#329: FILE: fs/posix_acl.c:258:
+	for (mask_obj = pa+1; mask_obj != pe; mask_obj++) {
 	                  ^

WARNING:TYPO_SPELLING: 'creat' may be misspelled - perhaps 'create'?
#347: FILE: fs/posix_acl.c:276:
+ * mode_p initially must contain the mode parameter to the open() / creat()
                                                                     ^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#362: FILE: fs/posix_acl.c:291:
+                switch(pa->e_tag) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#362: FILE: fs/posix_acl.c:291:
+                switch(pa->e_tag) {$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#362: FILE: fs/posix_acl.c:291:
+                switch(pa->e_tag) {
+                        case ACL_USER_OBJ:
[...]
+			case ACL_USER:
+			case ACL_GROUP:
[...]
+                        case ACL_GROUP_OBJ:
[...]
+                        case ACL_OTHER:
[...]
+                        case ACL_MASK:
[...]
+			default:

ERROR:SPACING: space required before the open parenthesis '('
#362: FILE: fs/posix_acl.c:291:
+                switch(pa->e_tag) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#363: FILE: fs/posix_acl.c:292:
+                        case ACL_USER_OBJ:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#363: FILE: fs/posix_acl.c:292:
+                        case ACL_USER_OBJ:$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXO' are not preferred. Consider using octal permissions '0007'.
#364: FILE: fs/posix_acl.c:293:
+				pa->e_perm &= (mode >> 6) | ~S_IRWXO;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU' are not preferred. Consider using octal permissions '0700'.
#365: FILE: fs/posix_acl.c:294:
+				mode &= (pa->e_perm << 6) | ~S_IRWXU;

ERROR:CODE_INDENT: code indent should use tabs where possible
#373: FILE: fs/posix_acl.c:302:
+                        case ACL_GROUP_OBJ:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#373: FILE: fs/posix_acl.c:302:
+                        case ACL_GROUP_OBJ:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#375: FILE: fs/posix_acl.c:304:
+                                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#375: FILE: fs/posix_acl.c:304:
+                                break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#377: FILE: fs/posix_acl.c:306:
+                        case ACL_OTHER:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#377: FILE: fs/posix_acl.c:306:
+                        case ACL_OTHER:$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXO' are not preferred. Consider using octal permissions '0007'.
#378: FILE: fs/posix_acl.c:307:
+				pa->e_perm &= mode | ~S_IRWXO;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXO' are not preferred. Consider using octal permissions '0007'.
#379: FILE: fs/posix_acl.c:308:
+				mode &= pa->e_perm | ~S_IRWXO;

ERROR:CODE_INDENT: code indent should use tabs where possible
#380: FILE: fs/posix_acl.c:309:
+                                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#380: FILE: fs/posix_acl.c:309:
+                                break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#382: FILE: fs/posix_acl.c:311:
+                        case ACL_MASK:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#382: FILE: fs/posix_acl.c:311:
+                        case ACL_MASK:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#385: FILE: fs/posix_acl.c:314:
+                                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#385: FILE: fs/posix_acl.c:314:
+                                break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#389: FILE: fs/posix_acl.c:318:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#389: FILE: fs/posix_acl.c:318:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#390: FILE: fs/posix_acl.c:319:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#390: FILE: fs/posix_acl.c:319:
+        }$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXO' are not preferred. Consider using octal permissions '0007'.
#393: FILE: fs/posix_acl.c:322:
+		mask_obj->e_perm &= (mode >> 3) | ~S_IRWXO;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXG' are not preferred. Consider using octal permissions '0070'.
#394: FILE: fs/posix_acl.c:323:
+		mode &= (mask_obj->e_perm << 3) | ~S_IRWXG;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXO' are not preferred. Consider using octal permissions '0007'.
#398: FILE: fs/posix_acl.c:327:
+		group_obj->e_perm &= (mode >> 3) | ~S_IRWXO;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXG' are not preferred. Consider using octal permissions '0070'.
#399: FILE: fs/posix_acl.c:328:
+		mode &= (group_obj->e_perm << 3) | ~S_IRWXG;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#402: FILE: fs/posix_acl.c:331:
+	*mode_p = (*mode_p & ~S_IRWXUGO) | mode;

ERROR:CODE_INDENT: code indent should use tabs where possible
#403: FILE: fs/posix_acl.c:332:
+        return not_equiv;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#403: FILE: fs/posix_acl.c:332:
+        return not_equiv;$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#418: FILE: fs/posix_acl.c:347:
+		switch(pa->e_tag) {
+			case ACL_USER_OBJ:
[...]
+			case ACL_USER:
+			case ACL_GROUP:
[...]
+			case ACL_GROUP_OBJ:
[...]
+			case ACL_MASK:
[...]
+			case ACL_OTHER:
[...]
+			default:

ERROR:SPACING: space required before the open parenthesis '('
#418: FILE: fs/posix_acl.c:347:
+		switch(pa->e_tag) {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU' are not preferred. Consider using octal permissions '0700'.
#420: FILE: fs/posix_acl.c:349:
+				pa->e_perm = (mode & S_IRWXU) >> 6;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXO' are not preferred. Consider using octal permissions '0007'.
#436: FILE: fs/posix_acl.c:365:
+				pa->e_perm = (mode & S_IRWXO);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXG' are not preferred. Consider using octal permissions '0070'.
#445: FILE: fs/posix_acl.c:374:
+		mask_obj->e_perm = (mode & S_IRWXG) >> 3;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXG' are not preferred. Consider using octal permissions '0070'.
#449: FILE: fs/posix_acl.c:378:
+		group_obj->e_perm = (mode & S_IRWXG) >> 3;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXO' are not preferred. Consider using octal permissions '0007'.
#472: FILE: fs/posix_acl.c:401:
+	struct posix_acl_entry *pa, *pe; int min_perm = S_IRWXO;

ERROR:CODE_INDENT: code indent should use tabs where possible
#475: FILE: fs/posix_acl.c:404:
+                switch(pa->e_tag) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#475: FILE: fs/posix_acl.c:404:
+                switch(pa->e_tag) {$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#475: FILE: fs/posix_acl.c:404:
+                switch(pa->e_tag) {
+			case ACL_USER_OBJ:
[...]
+			case ACL_USER:
+			case ACL_GROUP_OBJ:
+			case ACL_GROUP:
+			case ACL_MASK:
+			case ACL_OTHER:
[...]
+			default:

ERROR:SPACING: space required before the open parenthesis '('
#475: FILE: fs/posix_acl.c:404:
+                switch(pa->e_tag) {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#491: FILE: fs/posix_acl.c:420:
+	*mode_p = (*mode_p & ~(S_IRWXG|S_IRWXO)) | (min_perm << 3) | min_perm;
 	                              ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXG|S_IRWXO' are not preferred. Consider using octal permissions '0077'.
#491: FILE: fs/posix_acl.c:420:
+	*mode_p = (*mode_p & ~(S_IRWXG|S_IRWXO)) | (min_perm << 3) | min_perm;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#499: FILE: include/linux/posix_acl.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#500: FILE: include/linux/posix_acl.h:2:
+/*
+  File: linux/posix_acl.h

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#505: FILE: include/linux/posix_acl.h:7:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pa' - possible side-effects?
#544: FILE: include/linux/posix_acl.h:46:
+#define FOREACH_ACL_ENTRY(pa, acl, pe) \
+	for(pa=(acl)->a_entries, pe=pa+(acl)->a_count; pa<pe; pa++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'acl' - possible side-effects?
#544: FILE: include/linux/posix_acl.h:46:
+#define FOREACH_ACL_ENTRY(pa, acl, pe) \
+	for(pa=(acl)->a_entries, pe=pa+(acl)->a_count; pa<pe; pa++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pe' - possible side-effects?
#544: FILE: include/linux/posix_acl.h:46:
+#define FOREACH_ACL_ENTRY(pa, acl, pe) \
+	for(pa=(acl)->a_entries, pe=pa+(acl)->a_count; pa<pe; pa++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#545: FILE: include/linux/posix_acl.h:47:
+	for(pa=(acl)->a_entries, pe=pa+(acl)->a_count; pa<pe; pa++)
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#545: FILE: include/linux/posix_acl.h:47:
+	for(pa=(acl)->a_entries, pe=pa+(acl)->a_count; pa<pe; pa++)
 	                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#545: FILE: include/linux/posix_acl.h:47:
+	for(pa=(acl)->a_entries, pe=pa+(acl)->a_count; pa<pe; pa++)
 	                              ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#545: FILE: include/linux/posix_acl.h:47:
+	for(pa=(acl)->a_entries, pe=pa+(acl)->a_count; pa<pe; pa++)
 	                                                 ^

ERROR:SPACING: space required before the open parenthesis '('
#545: FILE: include/linux/posix_acl.h:47:
+	for(pa=(acl)->a_entries, pe=pa+(acl)->a_count; pa<pe; pa++)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#547: FILE: include/linux/posix_acl.h:49:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#569: FILE: include/linux/posix_acl.h:71:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#572: FILE: include/linux/posix_acl.h:74:
+extern struct posix_acl *posix_acl_alloc(int, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#573: FILE: include/linux/posix_acl.h:75:
+extern struct posix_acl *posix_acl_clone(const struct posix_acl *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct posix_acl *' should also have an identifier name
#573: FILE: include/linux/posix_acl.h:75:
+extern struct posix_acl *posix_acl_clone(const struct posix_acl *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#573: FILE: include/linux/posix_acl.h:75:
+extern struct posix_acl *posix_acl_clone(const struct posix_acl *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#574: FILE: include/linux/posix_acl.h:76:
+extern int posix_acl_valid(const struct posix_acl *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct posix_acl *' should also have an identifier name
#574: FILE: include/linux/posix_acl.h:76:
+extern int posix_acl_valid(const struct posix_acl *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#575: FILE: include/linux/posix_acl.h:77:
+extern int posix_acl_permission(struct inode *, const struct posix_acl *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#575: FILE: include/linux/posix_acl.h:77:
+extern int posix_acl_permission(struct inode *, const struct posix_acl *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct posix_acl *' should also have an identifier name
#575: FILE: include/linux/posix_acl.h:77:
+extern int posix_acl_permission(struct inode *, const struct posix_acl *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#575: FILE: include/linux/posix_acl.h:77:
+extern int posix_acl_permission(struct inode *, const struct posix_acl *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#576: FILE: include/linux/posix_acl.h:78:
+extern struct posix_acl *posix_acl_from_mode(mode_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'mode_t' should also have an identifier name
#576: FILE: include/linux/posix_acl.h:78:
+extern struct posix_acl *posix_acl_from_mode(mode_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#576: FILE: include/linux/posix_acl.h:78:
+extern struct posix_acl *posix_acl_from_mode(mode_t, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#577: FILE: include/linux/posix_acl.h:79:
+extern int posix_acl_equiv_mode(const struct posix_acl *, mode_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct posix_acl *' should also have an identifier name
#577: FILE: include/linux/posix_acl.h:79:
+extern int posix_acl_equiv_mode(const struct posix_acl *, mode_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'mode_t *' should also have an identifier name
#577: FILE: include/linux/posix_acl.h:79:
+extern int posix_acl_equiv_mode(const struct posix_acl *, mode_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#578: FILE: include/linux/posix_acl.h:80:
+extern int posix_acl_create_masq(struct posix_acl *, mode_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct posix_acl *' should also have an identifier name
#578: FILE: include/linux/posix_acl.h:80:
+extern int posix_acl_create_masq(struct posix_acl *, mode_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'mode_t *' should also have an identifier name
#578: FILE: include/linux/posix_acl.h:80:
+extern int posix_acl_create_masq(struct posix_acl *, mode_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#579: FILE: include/linux/posix_acl.h:81:
+extern int posix_acl_chmod_masq(struct posix_acl *, mode_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct posix_acl *' should also have an identifier name
#579: FILE: include/linux/posix_acl.h:81:
+extern int posix_acl_chmod_masq(struct posix_acl *, mode_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'mode_t' should also have an identifier name
#579: FILE: include/linux/posix_acl.h:81:
+extern int posix_acl_chmod_masq(struct posix_acl *, mode_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#580: FILE: include/linux/posix_acl.h:82:
+extern int posix_acl_masq_nfs_mode(struct posix_acl *, mode_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct posix_acl *' should also have an identifier name
#580: FILE: include/linux/posix_acl.h:82:
+extern int posix_acl_masq_nfs_mode(struct posix_acl *, mode_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'mode_t *' should also have an identifier name
#580: FILE: include/linux/posix_acl.h:82:
+extern int posix_acl_masq_nfs_mode(struct posix_acl *, mode_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#582: FILE: include/linux/posix_acl.h:84:
+extern struct posix_acl *get_posix_acl(struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#582: FILE: include/linux/posix_acl.h:84:
+extern struct posix_acl *get_posix_acl(struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#582: FILE: include/linux/posix_acl.h:84:
+extern struct posix_acl *get_posix_acl(struct inode *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#583: FILE: include/linux/posix_acl.h:85:
+extern int set_posix_acl(struct inode *, int, struct posix_acl *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#583: FILE: include/linux/posix_acl.h:85:
+extern int set_posix_acl(struct inode *, int, struct posix_acl *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#583: FILE: include/linux/posix_acl.h:85:
+extern int set_posix_acl(struct inode *, int, struct posix_acl *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct posix_acl *' should also have an identifier name
#583: FILE: include/linux/posix_acl.h:85:
+extern int set_posix_acl(struct inode *, int, struct posix_acl *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000418746.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 52 errors, 98 warnings, 22 checks, 536 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000418746.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
