ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#128: FILE: include/linux/sysctl.h:150:
+	KERN_SCHED_THROTTLE1=72,  /* int: throttling grace period 1 in secs */
 	                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#129: FILE: include/linux/sysctl.h:151:
+	KERN_SCHED_THROTTLE2=73,  /* int: throttling grace period 2 in secs */
 	                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#151: FILE: kernel/sched.c:170:
+ * All tasks begin life with a throttle timer which is expired, but a $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#183: FILE: kernel/sched.c:202:
+#define grace_expired(p, grace) ((p)->throttle_stamp && \
+	time_after_eq(jiffies, (p)->throttle_stamp + (grace)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#205: FILE: kernel/sched.c:224:
+#define SLICE_SPA_SHIFT   (SLICE_LTS_SHIFT + SLICE_LTS_BITS) $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#209: FILE: kernel/sched.c:228:
+#define INFO_MASK(x)      ((1U << (x))-1)
                                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#230: FILE: kernel/sched.c:249:
+#define set_last_slice(p, n) ((p)->slice_info = (((p)->slice_info & \
+	~SLICE_LTS_MASK) | (((n) << SLICE_LTS_SHIFT) & SLICE_LTS_MASK))) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#231: FILE: kernel/sched.c:250:
+^I~SLICE_LTS_MASK) | (((n) << SLICE_LTS_SHIFT) & SLICE_LTS_MASK))) $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#236: FILE: kernel/sched.c:255:
+#define set_slice_avg(p, n) ((p)->slice_info = (((p)->slice_info & \
+	~SLICE_AVG_MASK) | ((((n) / NS_SLEEP_AVG_PCNT) \
+	<< SLICE_AVG_SHIFT) & SLICE_AVG_MASK))) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#238: FILE: kernel/sched.c:257:
+^I<< SLICE_AVG_SHIFT) & SLICE_AVG_MASK))) $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#241: FILE: kernel/sched.c:260:
+#define set_slice_avg_raw(p, n) ((p)->slice_info = (((p)->slice_info & \
+	~SLICE_AVG_MASK) | (((n) << SLICE_AVG_SHIFT) & SLICE_AVG_MASK))) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#242: FILE: kernel/sched.c:261:
+^I~SLICE_AVG_MASK) | (((n) << SLICE_AVG_SHIFT) & SLICE_AVG_MASK))) $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#250: FILE: kernel/sched.c:269:
+#define slice_time_avg(p) \
+	(100 * last_slice(p) / max((unsigned) cpu_avg(p), 1U))

CHECK:SPACING: No space is necessary after a cast
#251: FILE: kernel/sched.c:270:
+	(100 * last_slice(p) / max((unsigned) cpu_avg(p), 1U))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#251: FILE: kernel/sched.c:270:
+	(100 * last_slice(p) / max((unsigned) cpu_avg(p), 1U))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#256: FILE: kernel/sched.c:275:
+#define slice_time_min(p) \
+	(100 * last_slice(p) / max((unsigned) cpu_max(p), 1U))

CHECK:SPACING: No space is necessary after a cast
#257: FILE: kernel/sched.c:276:
+	(100 * last_slice(p) / max((unsigned) cpu_max(p), 1U))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#257: FILE: kernel/sched.c:276:
+	(100 * last_slice(p) / max((unsigned) cpu_max(p), 1U))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#262: FILE: kernel/sched.c:281:
+#define cpu_this_slice(p) \
+	(100 * last_slice(p) / max((unsigned) time_this_slice(p), \
+	(unsigned) last_slice(p)))

CHECK:SPACING: No space is necessary after a cast
#263: FILE: kernel/sched.c:282:
+	(100 * last_slice(p) / max((unsigned) time_this_slice(p), \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#263: FILE: kernel/sched.c:282:
+	(100 * last_slice(p) / max((unsigned) time_this_slice(p), \

CHECK:SPACING: No space is necessary after a cast
#264: FILE: kernel/sched.c:283:
+	(unsigned) last_slice(p)))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#264: FILE: kernel/sched.c:283:
+	(unsigned) last_slice(p)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#300: FILE: kernel/sched.c:319:
+#define ADJUSTED_BONUS(p, grace)					\
+({									\
+	unsigned long sleep_avg = (p)->sleep_avg;			\
+	if (grace_expired(p, (grace)))					\
+		sleep_avg = min((p)->sleep_avg, slice_avg(p));		\
+	NS_TO_JIFFIES(sleep_avg) * MAX_BONUS / MAX_SLEEP_AVG;		\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#308: FILE: kernel/sched.c:327:
+#define BONUS_MULTIPLIER(p) \
+	(grace_expired(p, G1) ? : SLICE_AVG_MULTIPLIER(p))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#311: FILE: kernel/sched.c:330:
+#define BONUS_DIVISOR(p) \
+	(grace_expired(p, G2) ? : (1 + ADJUSTED_BONUS(p, G1)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#322: FILE: kernel/sched.c:341:
+#define INTERACTIVE_SLEEP_NS(p, ns) \
+	(BONUS_MULTIPLIER(p) * (ns) >= INTERACTIVE_SLEEP_AVG(p)	|| \
+	((p)->sleep_avg < INTERACTIVE_SLEEP_AVG(p) && BONUS_MULTIPLIER(p) * \
+	(ns) + (p)->sleep_avg >= INTERACTIVE_SLEEP_AVG(p))      || \
+	((p)->sleep_avg >= INTERACTIVE_SLEEP_AVG(p) && BONUS_MULTIPLIER(p) * \
+	(ns) + ((p)->sleep_avg % NS_MAX_BONUS) >= NS_MAX_BONUS))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ns' - possible side-effects?
#322: FILE: kernel/sched.c:341:
+#define INTERACTIVE_SLEEP_NS(p, ns) \
+	(BONUS_MULTIPLIER(p) * (ns) >= INTERACTIVE_SLEEP_AVG(p)	|| \
+	((p)->sleep_avg < INTERACTIVE_SLEEP_AVG(p) && BONUS_MULTIPLIER(p) * \
+	(ns) + (p)->sleep_avg >= INTERACTIVE_SLEEP_AVG(p))      || \
+	((p)->sleep_avg >= INTERACTIVE_SLEEP_AVG(p) && BONUS_MULTIPLIER(p) * \
+	(ns) + ((p)->sleep_avg % NS_MAX_BONUS) >= NS_MAX_BONUS))

ERROR:CODE_INDENT: code indent should use tabs where possible
#378: FILE: kernel/sched.c:1007:
+^I^I ^Iceiling += JIFFIES_TO_NS(slice);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#378: FILE: kernel/sched.c:1007:
+^I^I ^Iceiling += JIFFIES_TO_NS(slice);$

WARNING:TYPO_SPELLING: 'maximim' may be misspelled - perhaps 'maximum'?
#427: FILE: kernel/sched.c:1675:
+	 * boundary.  They are also born with an maximim expired throttle
 	                                         ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#588: FILE: kernel/sysctl.c:72:
+extern int sched_g1;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#589: FILE: kernel/sysctl.c:73:
+extern int sched_g2;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#598: FILE: kernel/sysctl.c:228:
+ * kern_table.  We use these as one-element integer vectors. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#613: FILE: kernel/sysctl.c:678:
+		.maxlen		= sizeof (int),

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'zero', consider using the shared one in include/linux/sysctl.h
#617: FILE: kernel/sysctl.c:682:
+		.extra1		= &zero,

Commit d91bff3011cf ("proc/sysctl: add shared variables for range
check") added some shared const variables to be used instead of a local
copy in each source file.

Consider replacing the sysctl range checking value with the shared
one in include/linux/sysctl.h.  The following conversion scheme may
be used::

  &zero     ->  SYSCTL_ZERO
  &one      ->  SYSCTL_ONE
  &int_max  ->  SYSCTL_INT_MAX

See:

  1. https://lore.kernel.org/lkml/20190430180111.10688-1-mcroce@redhat.com/
  2. https://lore.kernel.org/lkml/20190531131422.14970-1-mcroce@redhat.com/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#623: FILE: kernel/sysctl.c:688:
+		.maxlen		= sizeof (int),

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'zero', consider using the shared one in include/linux/sysctl.h
#627: FILE: kernel/sysctl.c:692:
+		.extra1		= &zero,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000103399.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 13 warnings, 17 checks, 522 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000103399.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
