WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#26: 
Signed-Off-By: dhowells@redhat.com

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#41: FILE: arch/frv/kernel/ptrace.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#64: FILE: arch/frv/kernel/ptrace.c:24:
+#include <asm/uaccess.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#66: FILE: arch/frv/kernel/ptrace.c:26:
+#include <asm/pgtable.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#68: FILE: arch/frv/kernel/ptrace.c:28:
+#include <asm/processor.h>

CHECK:SPACING: No space is necessary after a cast
#93: FILE: arch/frv/kernel/ptrace.c:53:
+	return ((unsigned long *) user)[regno];

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#114: FILE: arch/frv/kernel/ptrace.c:74:
+		((unsigned long *) user)[regno] = data;

CHECK:SPACING: No space is necessary after a cast
#211: FILE: arch/frv/kernel/ptrace.c:171:
+		ret = put_user(tmp,(unsigned long *) data);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#211: FILE: arch/frv/kernel/ptrace.c:171:
+		ret = put_user(tmp,(unsigned long *) data);
 		                  ^

CHECK:SPACING: No space is necessary after a cast
#254: FILE: arch/frv/kernel/ptrace.c:214:
+			ret = put_user(tmp, (unsigned long *) data);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#276: FILE: arch/frv/kernel/ptrace.c:236:
+		case 0 ... PT__END-1:
 		                  ^

CHECK:SPACING: No space is necessary after a cast
#289: FILE: arch/frv/kernel/ptrace.c:249:
+		if ((unsigned long) data > _NSIG)

CHECK:SPACING: No space is necessary after a cast
#317: FILE: arch/frv/kernel/ptrace.c:277:
+		if ((unsigned long) data > _NSIG)

WARNING:LINE_SPACING: Missing a blank line after declarations
#332: FILE: arch/frv/kernel/ptrace.c:292:
+		int i;
+		for (i = 0; i < PT__GPEND; i++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#334: FILE: arch/frv/kernel/ptrace.c:294:
+			if (put_user(tmp, (unsigned long *) data)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#346: FILE: arch/frv/kernel/ptrace.c:306:
+		int i;
+		for (i = 0; i < PT__GPEND; i++) {

CHECK:SPACING: No space is necessary after a cast
#347: FILE: arch/frv/kernel/ptrace.c:307:
+			if (get_user(tmp, (unsigned long *) data)) {

CHECK:SPACING: No space is necessary after a cast
#360: FILE: arch/frv/kernel/ptrace.c:320:
+		if (copy_to_user((void *) data,

CHECK:SPACING: No space is necessary after a cast
#370: FILE: arch/frv/kernel/ptrace.c:330:
+				   (void *) data,

CHECK:SPACING: No space is necessary after a cast
#390: FILE: arch/frv/kernel/ptrace.c:350:
+		if (put_user(tmp, (unsigned long *) data)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#411: FILE: arch/frv/kernel/ptrace.c:371:
+	unsigned	argmask;

WARNING:TYPO_SPELLING: 'creat' may be misspelled - perhaps 'create'?
#421: FILE: arch/frv/kernel/ptrace.c:381:
+	[8]	= { "creat",		0x000025	},
 	   	     ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#692: FILE: arch/frv/kernel/ptrace.c:652:
+#if 0

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#695: FILE: arch/frv/kernel/ptrace.c:655:
+	unsigned argmask;

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#707: FILE: arch/frv/kernel/ptrace.c:667:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#728: FILE: arch/frv/kernel/ptrace.c:688:
+			printk(KERN_CRIT "[%d] %s(%lx,%lx,%lx,%lx,%lx,%lx)\n",

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#738: FILE: arch/frv/kernel/ptrace.c:698:
+		}
+		else if (argmask == 0xffffff) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#739: FILE: arch/frv/kernel/ptrace.c:699:
+			printk(KERN_CRIT "[%d] %s()\n",

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#743: FILE: arch/frv/kernel/ptrace.c:703:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#743: FILE: arch/frv/kernel/ptrace.c:703:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#744: FILE: arch/frv/kernel/ptrace.c:704:
+			printk(KERN_CRIT "[%d] %s(",

CHECK:SPACING: No space is necessary after a cast
#753: FILE: arch/frv/kernel/ptrace.c:713:
+					printk("%ld", (long) *argp);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#753: FILE: arch/frv/kernel/ptrace.c:713:
+					printk("%ld", (long) *argp);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#756: FILE: arch/frv/kernel/ptrace.c:716:
+					printk("%lo", *argp);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#759: FILE: arch/frv/kernel/ptrace.c:719:
+					printk("%lx", *argp);

CHECK:SPACING: No space is necessary after a cast
#762: FILE: arch/frv/kernel/ptrace.c:722:
+					printk("%p", (void *) *argp);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#762: FILE: arch/frv/kernel/ptrace.c:722:
+					printk("%p", (void *) *argp);

CHECK:SPACING: No space is necessary after a cast
#765: FILE: arch/frv/kernel/ptrace.c:725:
+					printk("\"%s\"", (char *) *argp);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#765: FILE: arch/frv/kernel/ptrace.c:725:
+					printk("\"%s\"", (char *) *argp);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#772: FILE: arch/frv/kernel/ptrace.c:732:
+					printk(",");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#776: FILE: arch/frv/kernel/ptrace.c:736:
+			printk(")\n");

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#779: FILE: arch/frv/kernel/ptrace.c:739:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#779: FILE: arch/frv/kernel/ptrace.c:739:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#781: FILE: arch/frv/kernel/ptrace.c:741:
+			printk(KERN_CRIT "[%d] %s() = %ld\n", current->pid, name, __frame->gr8);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#783: FILE: arch/frv/kernel/ptrace.c:743:
+			printk(KERN_CRIT "[%d] %s() = %lx\n", current->pid, name, __frame->gr8);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#816: FILE: arch/frv/kernel/semaphore.c:1:
+/* semaphore.c: FR-V semaphores

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#842: FILE: arch/frv/kernel/semaphore.c:27:
+		printk("[%d] %s({%d,%d})\n",

ERROR:SPACING: space required after that ',' (ctx:VxV)
#849: FILE: arch/frv/kernel/semaphore.c:34:
+#define semtrace(SEM,STR) do { } while(0)
                     ^

ERROR:SPACING: space required before the open parenthesis '('
#849: FILE: arch/frv/kernel/semaphore.c:34:
+#define semtrace(SEM,STR) do { } while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#861: FILE: arch/frv/kernel/semaphore.c:46:
+	semtrace(sem,"Entering __down");
 	            ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__down', this function's name, in a string
#861: FILE: arch/frv/kernel/semaphore.c:46:
+	semtrace(sem,"Entering __down");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#882: FILE: arch/frv/kernel/semaphore.c:67:
+	semtrace(sem,"Leaving __down");
 	            ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__down', this function's name, in a string
#882: FILE: arch/frv/kernel/semaphore.c:67:
+	semtrace(sem,"Leaving __down");

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#885: FILE: arch/frv/kernel/semaphore.c:70:
+EXPORT_SYMBOL(__down);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#897: FILE: arch/frv/kernel/semaphore.c:82:
+	semtrace(sem,"Entering __down_interruptible");
 	            ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__down_interruptible', this function's name, in a string
#897: FILE: arch/frv/kernel/semaphore.c:82:
+	semtrace(sem,"Entering __down_interruptible");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__down_interruptible', this function's name, in a string
#922: FILE: arch/frv/kernel/semaphore.c:107:
+	semtrace(sem, "Leaving __down_interruptible");

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#937: FILE: arch/frv/kernel/semaphore.c:122:
+EXPORT_SYMBOL(__down_interruptible);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#947: FILE: arch/frv/kernel/semaphore.c:132:
+	semtrace(sem,"Entering __up");
 	            ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__up', this function's name, in a string
#947: FILE: arch/frv/kernel/semaphore.c:132:
+	semtrace(sem,"Entering __up");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#954: FILE: arch/frv/kernel/semaphore.c:139:
+	semtrace(sem,"Leaving __up");
 	            ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__up', this function's name, in a string
#954: FILE: arch/frv/kernel/semaphore.c:139:
+	semtrace(sem,"Leaving __up");

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#957: FILE: arch/frv/kernel/semaphore.c:142:
+EXPORT_SYMBOL(__up);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#962: FILE: arch/frv/kernel/setup.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#971: FILE: arch/frv/kernel/setup.c:10:
+ *  Copyright (C) 2001 ^I     Lineo, Inc. <www.lineo.com>$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#972: FILE: arch/frv/kernel/setup.c:11:
+ *  Copyright (C) 2003 ^I     David Howells <dhowells@redhat.com>, Red Hat, Inc.$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#1014: FILE: arch/frv/kernel/setup.c:53:
+#include <asm/io.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#1018: FILE: arch/frv/kernel/setup.c:57:
+#include <asm/pgtable.h>

WARNING:MISPLACED_INIT: __initdata should be placed after mb93090_banner[]
#1040: FILE: arch/frv/kernel/setup.c:79:
+static char __initdata mb93090_banner[] = "FJ/RH FR-V Linux";

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:MISPLACED_INIT: __initdata should be placed after mb93090_version[]
#1041: FILE: arch/frv/kernel/setup.c:80:
+static char __initdata mb93090_version[] = UTS_RELEASE;

WARNING:STATIC_CONST_CHAR_ARRAY: const array should probably be static const
#1046: FILE: arch/frv/kernel/setup.c:85:
+const char __frv_unknown_system[] = "unknown";

WARNING:STATIC_CONST_CHAR_ARRAY: const array should probably be static const
#1047: FILE: arch/frv/kernel/setup.c:86:
+const char __frv_mb93091_cb10[] = "mb93091-cb10";

WARNING:STATIC_CONST_CHAR_ARRAY: const array should probably be static const
#1048: FILE: arch/frv/kernel/setup.c:87:
+const char __frv_mb93091_cb11[] = "mb93091-cb11";

WARNING:STATIC_CONST_CHAR_ARRAY: const array should probably be static const
#1049: FILE: arch/frv/kernel/setup.c:88:
+const char __frv_mb93091_cb30[] = "mb93091-cb30";

WARNING:STATIC_CONST_CHAR_ARRAY: const array should probably be static const
#1050: FILE: arch/frv/kernel/setup.c:89:
+const char __frv_mb93091_cb41[] = "mb93091-cb41";

WARNING:STATIC_CONST_CHAR_ARRAY: const array should probably be static const
#1051: FILE: arch/frv/kernel/setup.c:90:
+const char __frv_mb93091_cb60[] = "mb93091-cb60";

WARNING:STATIC_CONST_CHAR_ARRAY: const array should probably be static const
#1052: FILE: arch/frv/kernel/setup.c:91:
+const char __frv_mb93091_cb70[] = "mb93091-cb70";

WARNING:STATIC_CONST_CHAR_ARRAY: const array should probably be static const
#1053: FILE: arch/frv/kernel/setup.c:92:
+const char __frv_mb93091_cb451[] = "mb93091-cb451";

WARNING:STATIC_CONST_CHAR_ARRAY: const array should probably be static const
#1054: FILE: arch/frv/kernel/setup.c:93:
+const char __frv_mb93090_mb00[] = "mb93090-mb00";

WARNING:STATIC_CONST_CHAR_ARRAY: const array should probably be static const
#1056: FILE: arch/frv/kernel/setup.c:95:
+const char __frv_mb93493[] = "mb93493";

WARNING:STATIC_CONST_CHAR_ARRAY: const array should probably be static const
#1058: FILE: arch/frv/kernel/setup.c:97:
+const char __frv_mb93093[] = "mb93093";

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1097: FILE: arch/frv/kernel/setup.c:136:
+	uint8_t	xbus, sdram, corebus, core, dsu;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1100: FILE: arch/frv/kernel/setup.c:139:
+#define _frac(N,D) ((N)<<4 | (D))
                ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1100: FILE: arch/frv/kernel/setup.c:139:
+#define _frac(N,D) ((N)<<4 | (D))
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1101: FILE: arch/frv/kernel/setup.c:140:
+#define _x0_16	_frac(1,6)
               	       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1102: FILE: arch/frv/kernel/setup.c:141:
+#define _x0_25	_frac(1,4)
               	       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1103: FILE: arch/frv/kernel/setup.c:142:
+#define _x0_33	_frac(1,3)
               	       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1104: FILE: arch/frv/kernel/setup.c:143:
+#define _x0_375	_frac(3,8)
                	       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1105: FILE: arch/frv/kernel/setup.c:144:
+#define _x0_5	_frac(1,2)
              	       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1106: FILE: arch/frv/kernel/setup.c:145:
+#define _x0_66	_frac(2,3)
               	       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1107: FILE: arch/frv/kernel/setup.c:146:
+#define _x0_75	_frac(3,4)
               	       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1108: FILE: arch/frv/kernel/setup.c:147:
+#define _x1	_frac(1,1)
            	       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1109: FILE: arch/frv/kernel/setup.c:148:
+#define _x1_5	_frac(3,2)
              	       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1110: FILE: arch/frv/kernel/setup.c:149:
+#define _x2	_frac(2,1)
            	       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1111: FILE: arch/frv/kernel/setup.c:150:
+#define _x3	_frac(3,1)
            	       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1112: FILE: arch/frv/kernel/setup.c:151:
+#define _x4	_frac(4,1)
            	       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1113: FILE: arch/frv/kernel/setup.c:152:
+#define _x4_5	_frac(9,2)
              	       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1114: FILE: arch/frv/kernel/setup.c:153:
+#define _x6	_frac(6,1)
            	       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1115: FILE: arch/frv/kernel/setup.c:154:
+#define _x8	_frac(8,1)
            	       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1116: FILE: arch/frv/kernel/setup.c:155:
+#define _x9	_frac(9,1)
            	       ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1130: FILE: arch/frv/kernel/setup.c:169:
+^I[5]^I= { ^I_x1,^I_x2,^I_x4,^I_x4,^I_x0_5^I},$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1131: FILE: arch/frv/kernel/setup.c:170:
+^I[8]^I= { ^I_x1,^I_x1,^I_x1,^I_x2,^I_x0_25^I},$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1132: FILE: arch/frv/kernel/setup.c:171:
+^I[9]^I= { ^I_x1,^I_x2,^I_x2,^I_x4,^I_x0_5^I},$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1133: FILE: arch/frv/kernel/setup.c:172:
+^I[11]^I= { ^I_x1,^I_x4,^I_x4,^I_x8,^I_x1^I},$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1134: FILE: arch/frv/kernel/setup.c:173:
+^I[12]^I= { ^I_x1,^I_x1,^I_x2,^I_x4,^I_x0_5^I},$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1135: FILE: arch/frv/kernel/setup.c:174:
+^I[13]^I= { ^I_x1,^I_x2,^I_x4,^I_x8,^I_x1^I},$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1144: FILE: arch/frv/kernel/setup.c:183:
+^I[8]^I= { ^I_x1,^I_x1,^I_x1,^I_x2,^I_x0_16^I},$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1145: FILE: arch/frv/kernel/setup.c:184:
+^I[9]^I= { ^I_x1,^I_x2,^I_x2,^I_x4,^I_x0_33^I},$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1146: FILE: arch/frv/kernel/setup.c:185:
+^I[12]^I= { ^I_x1,^I_x1,^I_x2,^I_x4,^I_x0_33^I},$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1147: FILE: arch/frv/kernel/setup.c:186:
+^I[14]^I= { ^I_x1,^I_x3,^I_x3,^I_x9,^I_x0_75^I},$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1148: FILE: arch/frv/kernel/setup.c:187:
+^I[15]^I= { ^I_x1,^I_x1_5,^I_x1_5,^I_x4_5,^I_x0_375^I},$

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#1163: FILE: arch/frv/kernel/setup.c:202:
+static const struct clock_cmode __pminitdata *clock_cmodes;
                                              ^

WARNING:MISPLACED_INIT: __initdata should be placed after __frv_uart0
#1166: FILE: arch/frv/kernel/setup.c:205:
+static struct uart_port __initdata __frv_uart0 = {

CHECK:SPACING: No space is necessary after a cast
#1168: FILE: arch/frv/kernel/setup.c:207:
+	.membase		= (char *) UART0_BASE,

WARNING:MISPLACED_INIT: __initdata should be placed after __frv_uart1
#1175: FILE: arch/frv/kernel/setup.c:214:
+static struct uart_port __initdata __frv_uart1 = {

CHECK:SPACING: No space is necessary after a cast
#1177: FILE: arch/frv/kernel/setup.c:216:
+	.membase		= (char *) UART1_BASE,

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1184: FILE: arch/frv/kernel/setup.c:223:
+#if 0

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_PPFN>
#1196: FILE: arch/frv/kernel/setup.c:235:
+	phys = ampr & xAMPRx_PPFN;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_SS>
#1197: FILE: arch/frv/kernel/setup.c:236:
+	size = 1 << (((ampr & xAMPRx_SS) >> 4) + 17);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1199: FILE: arch/frv/kernel/setup.c:238:
+	printk("%cAMPR%d: va %08lx-%08lx [pa %08lx] %c%c%c%c [cxn:%04lx]\n",

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_S>
#1203: FILE: arch/frv/kernel/setup.c:242:
+	       ampr & xAMPRx_S  ? 'S' : '-',

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_C>
#1204: FILE: arch/frv/kernel/setup.c:243:
+	       ampr & xAMPRx_C  ? 'C' : '-',

CHECK:CAMELCASE: Avoid CamelCase: <DAMPRx_WP>
#1205: FILE: arch/frv/kernel/setup.c:244:
+	       ampr & DAMPRx_WP ? 'W' : '-',

CHECK:CAMELCASE: Avoid CamelCase: <xAMPRx_V>
#1206: FILE: arch/frv/kernel/setup.c:245:
+	       ampr & xAMPRx_V  ? 'V' : '-',

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1218: FILE: arch/frv/kernel/setup.c:257:
+{
+

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1219: FILE: arch/frv/kernel/setup.c:258:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1256: FILE: arch/frv/kernel/setup.c:295:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1258: FILE: arch/frv/kernel/setup.c:297:
+	printk("LGCR: %08lx\n", __get_LGCR());

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1259: FILE: arch/frv/kernel/setup.c:298:
+	printk("Master: %08lx-%08lx CR=%08lx\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1264: FILE: arch/frv/kernel/setup.c:303:
+	int loop;
+	for (loop = 1; loop <= 7; loop++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1266: FILE: arch/frv/kernel/setup.c:305:
+		unsigned long lcr = __get_LCR(loop), lsbr = __get_LSBR(loop);
+		printk("CS#%d: %08lx-%08lx %c%c%c%c%c%c%c%c%c\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1266: FILE: arch/frv/kernel/setup.c:305:
+		printk("CS#%d: %08lx-%08lx %c%c%c%c%c%c%c%c%c\n",

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1285: FILE: arch/frv/kernel/setup.c:324:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1286: FILE: arch/frv/kernel/setup.c:325:
+	printk("\n");

CHECK:SPACING: No space is necessary after a cast
#1419: FILE: arch/frv/kernel/setup.c:458:
+			if (*(volatile unsigned short *) 0xffc001a0 == 0x0046)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1419: FILE: arch/frv/kernel/setup.c:458:
+			if (*(volatile unsigned short *) 0xffc001a0 == 0x0046)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1453: FILE: arch/frv/kernel/setup.c:492:
+		case PSR_VERSION_FR501_MB93501:  cpu_silicon = "mb93501";   break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1454: FILE: arch/frv/kernel/setup.c:493:
+		case PSR_VERSION_FR501_MB93501A: cpu_silicon = "mb93501/A"; break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1482: FILE: arch/frv/kernel/setup.c:521:
+	printk("- Series:%s CPU:%s Silicon:%s\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1512: FILE: arch/frv/kernel/setup.c:551:
+		printk("psr=%08lx hsr0=%08lx clkc=%08lx\n", psr, __get_HSR(0), clkc);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1515: FILE: arch/frv/kernel/setup.c:554:
+	 * through the FPGA.  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: No space is necessary after a cast
#1517: FILE: arch/frv/kernel/setup.c:556:
+		unsigned short clkswr = *(volatile unsigned short *) 0xffc00104UL & 0x1fffUL;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1517: FILE: arch/frv/kernel/setup.c:556:
+		unsigned short clkswr = *(volatile unsigned short *) 0xffc00104UL & 0x1fffUL;

CHECK:SPACING: No space is necessary after a cast
#1525: FILE: arch/frv/kernel/setup.c:564:
+				((clkswr     ) & 0xf) * 100000;

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#1525: FILE: arch/frv/kernel/setup.c:564:
+				((clkswr     ) & 0xf) * 100000;
 				               ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1525: FILE: arch/frv/kernel/setup.c:564:
+				((clkswr     ) & 0xf) * 100000;

CHECK:SPACING: No space is necessary after a cast
#1530: FILE: arch/frv/kernel/setup.c:569:
+		unsigned short clkswr = *(volatile unsigned short *) 0xffc00104UL & 0x1fffUL;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1530: FILE: arch/frv/kernel/setup.c:569:
+		unsigned short clkswr = *(volatile unsigned short *) 0xffc00104UL & 0x1fffUL;

CHECK:SPACING: No space is necessary after a cast
#1538: FILE: arch/frv/kernel/setup.c:577:
+				((clkswr     ) & 0xf) * 100000;

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#1538: FILE: arch/frv/kernel/setup.c:577:
+				((clkswr     ) & 0xf) * 100000;
 				               ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1538: FILE: arch/frv/kernel/setup.c:577:
+				((clkswr     ) & 0xf) * 100000;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1541: FILE: arch/frv/kernel/setup.c:580:
+	else {
+		__clkin_clock_speed_HZ = __get_CLKIN();
+	}

CHECK:BRACES: Unbalanced braces around else statement
#1541: FILE: arch/frv/kernel/setup.c:580:
+	else {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1553: FILE: arch/frv/kernel/setup.c:592:
+#define CLOCK(SRC,RATIO) ((SRC) * (((RATIO) >> 4) & 0x0f) / ((RATIO) & 0x0f))
                  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'RATIO' - possible side-effects?
#1553: FILE: arch/frv/kernel/setup.c:592:
+#define CLOCK(SRC,RATIO) ((SRC) * (((RATIO) >> 4) & 0x0f) / ((RATIO) & 0x0f))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1573: FILE: arch/frv/kernel/setup.c:612:
+		printk("Unsupported CLKC CM %ld\n", clkc & CLKC_CM);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1582: FILE: arch/frv/kernel/setup.c:621:
+		printk("CLKIN: %lu.%3.3luMHz\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1586: FILE: arch/frv/kernel/setup.c:625:
+		printk("CLKS:"

WARNING:SPLIT_STRING: quoted string split across lines
#1587: FILE: arch/frv/kernel/setup.c:626:
+		printk("CLKS:"
+		       " ext=%luMHz res=%luMHz sdram=%luMHz cbus=%luMHz core=%luMHz dsu=%luMHz\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1617: FILE: arch/frv/kernel/setup.c:656:
+		printk("      uart=%luMHz\n", __serial_clock_speed_HZ / 1000000 * quot);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#1639: FILE: arch/frv/kernel/setup.c:678:
+#define __steal_AMPR(r)						\
+	if (__get_DAMPR(r) & xAMPRx_V) {			\
+		ampr = __get_DAMPR(r);				\
+		__set_DAMPR(r, ampr | xAMPRx_S | xAMPRx_C);	\
+		__set_IAMPR(r, 0);				\
+		goto found;					\
+	}

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#1639: FILE: arch/frv/kernel/setup.c:678:
+#define __steal_AMPR(r)						\
+	if (__get_DAMPR(r) & xAMPRx_V) {			\
+		ampr = __get_DAMPR(r);				\
+		__set_DAMPR(r, ampr | xAMPRx_S | xAMPRx_C);	\
+		__set_IAMPR(r, 0);				\
+		goto found;					\
+	}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#1639: FILE: arch/frv/kernel/setup.c:678:
+#define __steal_AMPR(r)						\
+	if (__get_DAMPR(r) & xAMPRx_V) {			\
+		ampr = __get_DAMPR(r);				\
+		__set_DAMPR(r, ampr | xAMPRx_S | xAMPRx_C);	\
+		__set_IAMPR(r, 0);				\
+		goto found;					\
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1666: FILE: arch/frv/kernel/setup.c:705:
+	printk("No DMA consistent memory reserved\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1676: FILE: arch/frv/kernel/setup.c:715:
+	printk("DMA consistent memory reserved %lx-%lx\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1690: FILE: arch/frv/kernel/setup.c:729:
+	printk("Calibrating delay loop... %lu.%02lu BogoMIPS\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1732: FILE: arch/frv/kernel/setup.c:771:
+	printk("Linux FR-V port done by Red Hat Inc <dhowells@redhat.com>\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1734: FILE: arch/frv/kernel/setup.c:773:
+	printk("uClinux FR-V port done by Red Hat Inc <dhowells@redhat.com>\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1783: FILE: arch/frv/kernel/setup.c:822:
+	 * - by now the stack is part of the init task */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1784: FILE: arch/frv/kernel/setup.c:823:
+	printk("Memory %08lx-%08lx\n", memory_start, memory_end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1786: FILE: arch/frv/kernel/setup.c:825:
+	if (memory_start == memory_end) BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1786: FILE: arch/frv/kernel/setup.c:825:
+	if (memory_start == memory_end) BUG();

CHECK:SPACING: No space is necessary after a cast
#1788: FILE: arch/frv/kernel/setup.c:827:
+	init_mm.start_code = (unsigned long) &_stext;

CHECK:SPACING: No space is necessary after a cast
#1789: FILE: arch/frv/kernel/setup.c:828:
+	init_mm.end_code = (unsigned long) &_etext;

CHECK:SPACING: No space is necessary after a cast
#1790: FILE: arch/frv/kernel/setup.c:829:
+	init_mm.end_data = (unsigned long) &_edata;

WARNING:TYPO_SPELLING: 'incase' may be misspelled - perhaps 'in case'?
#1791: FILE: arch/frv/kernel/setup.c:830:
+#if 0 /* DAVIDM - don't set brk just incase someone decides to use it */
                                      ^^^^^^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1791: FILE: arch/frv/kernel/setup.c:830:
+#if 0 /* DAVIDM - don't set brk just incase someone decides to use it */

CHECK:SPACING: No space is necessary after a cast
#1792: FILE: arch/frv/kernel/setup.c:831:
+	init_mm.brk = (unsigned long) &_end;

CHECK:SPACING: No space is necessary after a cast
#1794: FILE: arch/frv/kernel/setup.c:833:
+	init_mm.brk = (unsigned long) 0;

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned long) 0' could be '0UL'
#1794: FILE: arch/frv/kernel/setup.c:833:
+	init_mm.brk = (unsigned long) 0;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1798: FILE: arch/frv/kernel/setup.c:837:
+	printk("KERNEL -> TEXT=0x%06x-0x%06x DATA=0x%06x-0x%06x BSS=0x%06x-0x%06x\n",

CHECK:SPACING: No space is necessary after a cast
#1799: FILE: arch/frv/kernel/setup.c:838:
+	       (int) &_stext, (int) &_etext,

CHECK:SPACING: No space is necessary after a cast
#1800: FILE: arch/frv/kernel/setup.c:839:
+	       (int) &_sdata, (int) &_edata,

CHECK:SPACING: No space is necessary after a cast
#1801: FILE: arch/frv/kernel/setup.c:840:
+	       (int) &_sbss, (int) &_ebss);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1806: FILE: arch/frv/kernel/setup.c:845:
+        conswitchp = &vga_con;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1806: FILE: arch/frv/kernel/setup.c:845:
+        conswitchp = &vga_con;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1808: FILE: arch/frv/kernel/setup.c:847:
+        conswitchp = &dummy_con;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1808: FILE: arch/frv/kernel/setup.c:847:
+        conswitchp = &dummy_con;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1813: FILE: arch/frv/kernel/setup.c:852:
+	ROOT_DEV = MKDEV(BLKMEM_MAJOR,0);
 	                             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1829: FILE: arch/frv/kernel/setup.c:868:
+	printk("Done setup_arch\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'setup_arch', this function's name, in a string
#1829: FILE: arch/frv/kernel/setup.c:868:
+	printk("Done setup_arch\n");

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1838: FILE: arch/frv/kernel/setup.c:877:
+#if 0

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1841: FILE: arch/frv/kernel/setup.c:880:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1843: FILE: arch/frv/kernel/setup.c:882:
+static int __devinit setup_arch_serial(void)

CHECK:SPACING: No space is necessary after a cast
#1868: FILE: arch/frv/kernel/setup.c:907:
+	kstart	= (unsigned long) &__kernel_image_start - PAGE_OFFSET;

CHECK:SPACING: No space is necessary after a cast
#1869: FILE: arch/frv/kernel/setup.c:908:
+	kend	= (unsigned long) &__kernel_image_end - PAGE_OFFSET;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1884: FILE: arch/frv/kernel/setup.c:923:
+	max_mapnr = num_physpages = (memory_end - memory_start) >> PAGE_SHIFT;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1892: FILE: arch/frv/kernel/setup.c:931:
+		max_mapnr = num_physpages = low_top_pfn;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1895: FILE: arch/frv/kernel/setup.c:934:
+	}
+	else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1895: FILE: arch/frv/kernel/setup.c:934:
+	else {
+		low_top_pfn = num_physpages;
+	}

CHECK:BRACES: Unbalanced braces around else statement
#1895: FILE: arch/frv/kernel/setup.c:934:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1905: FILE: arch/frv/kernel/setup.c:944:
+	printk(KERN_NOTICE "%ldMB LOWMEM available.\n", low_top_pfn >> (20 - PAGE_SHIFT));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1911: FILE: arch/frv/kernel/setup.c:950:
+		printk(KERN_NOTICE "%ldMB HIGHMEM available.\n", high_mem >> (20 - PAGE_SHIFT));

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1925: FILE: arch/frv/kernel/setup.c:964:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#1925: FILE: arch/frv/kernel/setup.c:964:
+		else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1926: FILE: arch/frv/kernel/setup.c:965:
+			printk(KERN_ERR

CHECK:SPACING: No space is necessary after a cast
#1952: FILE: arch/frv/kernel/setup.c:991:
+	kend = (unsigned long) &__kernel_image_end;

CHECK:SPACING: No space is necessary after a cast
#1967: FILE: arch/frv/kernel/setup.c:1006:
+	high_memory = (void *) (memory_end & PAGE_MASK);

CHECK:SPACING: No space is necessary after a cast
#1968: FILE: arch/frv/kernel/setup.c:1007:
+	max_mapnr = num_physpages = ((unsigned long) high_memory - PAGE_OFFSET) >> PAGE_SHIFT;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1968: FILE: arch/frv/kernel/setup.c:1007:
+	max_mapnr = num_physpages = ((unsigned long) high_memory - PAGE_OFFSET) >> PAGE_SHIFT;

CHECK:SPACING: No space is necessary after a cast
#1977: FILE: arch/frv/kernel/setup.c:1016:
+	reserve_bootmem((unsigned long) &__kernel_image_start,

CHECK:SPACING: No space is necessary after a cast
#1978: FILE: arch/frv/kernel/setup.c:1017:
+			kend - (unsigned long) &__kernel_image_start);

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#2038: FILE: arch/frv/kernel/setup.c:1077:
+	seq_printf(m, "\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#2041: FILE: arch/frv/kernel/setup.c:1080:
+	seq_printf(m, "PM-Controls:");

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%04hx' is unnecessary
#2045: FILE: arch/frv/kernel/setup.c:1084:
+		seq_printf(m, "%scmode=0x%04hx", sep, clock_cmodes_permitted);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'VAR' - possible side-effects?
#2066: FILE: arch/frv/kernel/setup.c:1105:
+#define print_clk(TAG, VAR) \
+	seq_printf(m, "Clock-" TAG ":\t%lu.%2.2lu MHz\n", VAR / 1000000, (VAR / 10000) % 100)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'VAR' may be better as '(VAR)' to avoid precedence issues
#2066: FILE: arch/frv/kernel/setup.c:1105:
+#define print_clk(TAG, VAR) \
+	seq_printf(m, "Clock-" TAG ":\t%lu.%2.2lu MHz\n", VAR / 1000000, (VAR / 10000) % 100)

CHECK:SPACING: No space is necessary after a cast
#2086: FILE: arch/frv/kernel/setup.c:1125:
+	return *pos < NR_CPUS ? (void *) 0x12345678 : NULL;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2086: FILE: arch/frv/kernel/setup.c:1125:
+	return *pos < NR_CPUS ? (void *) 0x12345678 : NULL;

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#2099: FILE: arch/frv/kernel/setup.c:1138:
+struct seq_operations cpuinfo_op = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2149: FILE: arch/frv/kernel/setup.c:1188:
+	mb93090_sendlcdcmd(LCD_CMD_FUNCSET(1,1,0));
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2149: FILE: arch/frv/kernel/setup.c:1188:
+	mb93090_sendlcdcmd(LCD_CMD_FUNCSET(1,1,0));
 	                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2150: FILE: arch/frv/kernel/setup.c:1189:
+	mb93090_sendlcdcmd(LCD_CMD_ON(0,0));
 	                               ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2168: FILE: arch/frv/kernel/signal.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#2190: FILE: arch/frv/kernel/signal.c:23:
+#include <asm/uaccess.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#2191: FILE: arch/frv/kernel/signal.c:24:
+#include <asm/cacheflush.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#2281: FILE: arch/frv/kernel/signal.c:114:
+		old_sigset_t mask;
+		if (verify_area(VERIFY_READ, act, sizeof(*act)) ||

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2310: FILE: arch/frv/kernel/signal.c:143:
+
+

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2316: FILE: arch/frv/kernel/signal.c:149:
+struct sigframe
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2320: FILE: arch/frv/kernel/signal.c:153:
+	unsigned long extramask[_NSIG_WORDS-1];
 	                                   ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2321: FILE: arch/frv/kernel/signal.c:154:
+	uint32_t retcode[2];

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2325: FILE: arch/frv/kernel/signal.c:158:
+struct rt_sigframe
+{

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2332: FILE: arch/frv/kernel/signal.c:165:
+	uint32_t retcode[2];

CHECK:SPACING: No space is necessary after a cast
#2360: FILE: arch/frv/kernel/signal.c:193:
+	struct sigframe __user *frame = (struct sigframe __user *) __frame->sp;

CHECK:SPACING: No space is necessary after a cast
#2390: FILE: arch/frv/kernel/signal.c:223:
+	struct rt_sigframe __user *frame = (struct rt_sigframe __user *) __frame->sp;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2413: FILE: arch/frv/kernel/signal.c:246:
+	 * call it and ignore errors.  */

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#2463: FILE: arch/frv/kernel/signal.c:296:
+		if (! on_sig_stack(sp))
 		    ^

CHECK:SPACING: No space is necessary after a cast
#2467: FILE: arch/frv/kernel/signal.c:300:
+	return (void __user *) ((sp - frame_size) & ~7UL);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2474: FILE: arch/frv/kernel/signal.c:307:
+static void setup_frame(int sig, struct k_sigaction *ka, sigset_t *set, struct pt_regs * regs)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2503: FILE: arch/frv/kernel/signal.c:336:
+	 * already in userspace.  */

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2508: FILE: arch/frv/kernel/signal.c:341:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#2508: FILE: arch/frv/kernel/signal.c:341:
+	else {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2514: FILE: arch/frv/kernel/signal.c:347:
+		    __put_user(0x8efc0000|__NR_sigreturn, &frame->retcode[0]) ||
 		                         ^

CHECK:SPACING: No space is necessary after a cast
#2518: FILE: arch/frv/kernel/signal.c:351:
+		flush_icache_range((unsigned long) frame->retcode,

CHECK:SPACING: No space is necessary after a cast
#2519: FILE: arch/frv/kernel/signal.c:352:
+				   (unsigned long) (frame->retcode + 2));

CHECK:SPACING: No space is necessary after a cast
#2523: FILE: arch/frv/kernel/signal.c:356:
+	regs->sp   = (unsigned long) frame;

CHECK:SPACING: No space is necessary after a cast
#2524: FILE: arch/frv/kernel/signal.c:357:
+	regs->lr   = (unsigned long) &frame->retcode;

CHECK:SPACING: No space is necessary after a cast
#2529: FILE: arch/frv/kernel/signal.c:362:
+			(struct fdpic_func_descriptor *) ka->sa.sa_handler;

CHECK:SPACING: No space is necessary after a cast
#2533: FILE: arch/frv/kernel/signal.c:366:
+		regs->pc   = (unsigned long) ka->sa.sa_handler;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2540: FILE: arch/frv/kernel/signal.c:373:
+	printk("SIG deliver %d (%s:%d): sp=%p pc=%lx ra=%p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2541: FILE: arch/frv/kernel/signal.c:374:
+	printk("SIG deliver %d (%s:%d): sp=%p pc=%lx ra=%p\n",
+		sig, current->comm, current->pid, frame, regs->pc, frame->pretcode);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2558: FILE: arch/frv/kernel/signal.c:391:
+			   sigset_t *set, struct pt_regs * regs)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2585: FILE: arch/frv/kernel/signal.c:418:
+	    __put_user((void*)current->sas_ss_sp, &frame->uc.uc_stack.ss_sp) ||

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2597: FILE: arch/frv/kernel/signal.c:430:
+	 * already in userspace.  */

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2602: FILE: arch/frv/kernel/signal.c:435:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#2602: FILE: arch/frv/kernel/signal.c:435:
+	else {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2608: FILE: arch/frv/kernel/signal.c:441:
+		    __put_user(0x8efc0000|__NR_rt_sigreturn, &frame->retcode[0]) ||
 		                         ^

CHECK:SPACING: No space is necessary after a cast
#2612: FILE: arch/frv/kernel/signal.c:445:
+		flush_icache_range((unsigned long) frame->retcode,

CHECK:SPACING: No space is necessary after a cast
#2613: FILE: arch/frv/kernel/signal.c:446:
+				   (unsigned long) (frame->retcode + 2));

CHECK:SPACING: No space is necessary after a cast
#2617: FILE: arch/frv/kernel/signal.c:450:
+	regs->sp  = (unsigned long) frame;

CHECK:SPACING: No space is necessary after a cast
#2618: FILE: arch/frv/kernel/signal.c:451:
+	regs->lr   = (unsigned long) &frame->retcode;

CHECK:SPACING: No space is necessary after a cast
#2620: FILE: arch/frv/kernel/signal.c:453:
+	regs->gr9 = (unsigned long) &frame->info;

CHECK:SPACING: No space is necessary after a cast
#2624: FILE: arch/frv/kernel/signal.c:457:
+			(struct fdpic_func_descriptor __user *) ka->sa.sa_handler;

CHECK:SPACING: No space is necessary after a cast
#2628: FILE: arch/frv/kernel/signal.c:461:
+		regs->pc   = (unsigned long) ka->sa.sa_handler;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2635: FILE: arch/frv/kernel/signal.c:468:
+	printk("SIG deliver %d (%s:%d): sp=%p pc=%lx ra=%p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2636: FILE: arch/frv/kernel/signal.c:469:
+	printk("SIG deliver %d (%s:%d): sp=%p pc=%lx ra=%p\n",
+		sig, current->comm, current->pid, frame, regs->pc, frame->pretcode);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2670: FILE: arch/frv/kernel/signal.c:503:
+			/* fallthrough */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

ERROR:SPACING: space required before the open brace '{'
#2738: FILE: arch/frv/kernel/signal.c:571:
+		if (regs->gr8 == -ERESTART_RESTARTBLOCK){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2761: FILE: arch/frv/kernel/signal.c:594:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2767: FILE: arch/frv/kernel/sleep.S:1:
+/* sleep.S: power saving mode entry

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2855: FILE: arch/frv/kernel/sleep.S:89:
+^I$

WARNING:REPEATED_WORD: Possible repeated word: 'be'
#2876: FILE: arch/frv/kernel/sleep.S:110:
+# - we want it to be be cacheline aligned so we can lock it into the icache easily

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2888: FILE: arch/frv/kernel/sleep.S:122:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2911: FILE: arch/frv/kernel/sleep.S:145:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2921: FILE: arch/frv/kernel/sleep.S:155:
+^I#      Release the interrupt mask setting of the MASK register of the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2926: FILE: arch/frv/kernel/sleep.S:160:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2944: FILE: arch/frv/kernel/sleep.S:178:
+2:^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2948: FILE: arch/frv/kernel/sleep.S:182:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2960: FILE: arch/frv/kernel/sleep.S:194:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2967: FILE: arch/frv/kernel/sleep.S:201:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2978: FILE: arch/frv/kernel/sleep.S:212:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2983: FILE: arch/frv/kernel/sleep.S:217:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3003: FILE: arch/frv/kernel/sleep.S:237:
+^Ior^I^Igr4,gr13,gr4^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3010: FILE: arch/frv/kernel/sleep.S:244:
+^Ilddi^I^I@(gr11,#0),gr4 ; hsr0, psr $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3014: FILE: arch/frv/kernel/sleep.S:248:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3024: FILE: arch/frv/kernel/sleep.S:258:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3064: FILE: arch/frv/kernel/sleep.S:298:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3072: FILE: arch/frv/kernel/sleep.S:306:
+^I# (2) Set '1' to all bits in the MASK register of the interrupt $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3101: FILE: arch/frv/kernel/sleep.S:335:
+^I# (9) Release the interrupt mask setting of the MASK register of the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3106: FILE: arch/frv/kernel/sleep.S:340:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3121: FILE: arch/frv/kernel/sleep.S:355:
+^I^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3127: FILE: arch/frv/kernel/switch_to.S:1:
+###############################################################################

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3235: FILE: arch/frv/kernel/switch_to.S:109:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3450: FILE: arch/frv/kernel/switch_to.S:324:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3473: FILE: arch/frv/kernel/switch_to.S:347:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000232872.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 79 errors, 123 warnings, 93 checks, 3552 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000232872.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
