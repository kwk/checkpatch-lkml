WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
diff -u --recursive --new-file -X /linux/dontdiff a/drivers/block/loop.c b/drivers/block/loop.c

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#43: 
--- a/drivers/block/loop.c	Sun Jun 15 01:40:53 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#298: FILE: drivers/block/loop.c:189:
+__setup("lo_prealloc=", lo_prealloc_setup);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#336: FILE: drivers/block/loop.c:210:
+__setup("lo_nice=", lo_nice_setup);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#345: FILE: drivers/block/loop.c:219:
+};^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#411: FILE: drivers/block/loop.c:250:
+	if(!y) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lo->lo_number == lo_prealloc[x]'
#414: FILE: drivers/block/loop.c:253:
+			if (lo_prealloc[x + 1] && (lo->lo_number == lo_prealloc[x])) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:INDENTED_LABEL: labels should not be indented
#429: FILE: drivers/block/loop.c:264:
+			fail1:

WARNING:INDENTED_LABEL: labels should not be indented
#435: FILE: drivers/block/loop.c:270:
+			fail2:

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*bio->bi_private)...) over kmalloc(sizeof(struct loop_bio_extension)...)
#441: FILE: drivers/block/loop.c:276:
+		bio->bi_private = kmalloc(sizeof(struct loop_bio_extension), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#481: FILE: drivers/block/loop.c:306:
+	if (waitqueue_active(&lo->lo_bio_wait))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#525: FILE: drivers/block/loop.c:328:
+	if ((last = lo->lo_bio_que0)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#533: FILE: drivers/block/loop.c:336:
+	} else if ((last = lo->lo_bio_que1)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#541: FILE: drivers/block/loop.c:344:
+	} else if ((last = lo->lo_bio_que2)) {

ERROR:SPACING: space required before the open parenthesis '('
#587: FILE: drivers/block/loop.c:363:
+	if(!flist) {

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#600: FILE: drivers/block/loop.c:374:
+	if (wk && waitqueue_active(&lo->lo_bio_wait))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#650: FILE: drivers/block/loop.c:407:
+static struct bio *loop_get_buffer(struct loop_device *lo,
+		struct bio *orig_bio, int from_thread, struct bio **merge_ptr)

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#740: FILE: drivers/block/loop.c:480:
+	if (bio_barrier(orig_bio) && ((merge->bi_idx == orig_bio->bi_idx) || (merge->bi_idx == (orig_bio->bi_vcnt - 1))))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'merge->bi_idx == orig_bio->bi_idx'
#740: FILE: drivers/block/loop.c:480:
+	if (bio_barrier(orig_bio) && ((merge->bi_idx == orig_bio->bi_idx) || (merge->bi_idx == (orig_bio->bi_vcnt - 1))))

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#746: FILE: drivers/block/loop.c:486:
+	bio->bi_size = len = orig_bio->bi_io_vec[merge->bi_idx].bv_len;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info64size > 0'
#794: FILE: drivers/block/loop.c:527:
+	if ((info64size > 0) && (info64size < size))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info64size < size'
#794: FILE: drivers/block/loop.c:527:
+	if ((info64size > 0) && (info64size < size))

CHECK:SPACING: No space is necessary after a cast
#900: FILE: drivers/block/loop.c:595:
+	pos = ((loff_t) bio->bi_sector << 9) + lo->lo_offset;

WARNING:LONG_LINE: line length of 142 exceeds 100 columns
#916: FILE: drivers/block/loop.c:611:
+					printk(KERN_ERR "loop%d: write transfer error, sector %llu\n", lo->lo_number, (unsigned long long)IV);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#916: FILE: drivers/block/loop.c:611:
+					printk(KERN_ERR "loop%d: write transfer error, sector %llu\n", lo->lo_number, (unsigned long long)IV);

WARNING:LONG_LINE: line length of 137 exceeds 100 columns
#920: FILE: drivers/block/loop.c:615:
+					printk(KERN_ERR "loop%d: write i/o error, sector %llu\n", lo->lo_number, (unsigned long long)IV);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#920: FILE: drivers/block/loop.c:615:
+					printk(KERN_ERR "loop%d: write i/o error, sector %llu\n", lo->lo_number, (unsigned long long)IV);

WARNING:LONG_LINE: line length of 136 exceeds 100 columns
#925: FILE: drivers/block/loop.c:620:
+					printk(KERN_ERR "loop%d: read i/o error, sector %llu\n", lo->lo_number, (unsigned long long)IV);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#925: FILE: drivers/block/loop.c:620:
+					printk(KERN_ERR "loop%d: read i/o error, sector %llu\n", lo->lo_number, (unsigned long long)IV);

WARNING:LONG_LINE: line length of 141 exceeds 100 columns
#929: FILE: drivers/block/loop.c:624:
+					printk(KERN_ERR "loop%d: read transfer error, sector %llu\n", lo->lo_number, (unsigned long long)IV);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#929: FILE: drivers/block/loop.c:624:
+					printk(KERN_ERR "loop%d: read transfer error, sector %llu\n", lo->lo_number, (unsigned long long)IV);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#944: FILE: drivers/block/loop.c:637:
+{       $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rw == WRITE'
#966: FILE: drivers/block/loop.c:653:
+	if ((rw == WRITE) && (lo->lo_flags & LO_FLAGS_READ_ONLY))

WARNING:INDENTED_LABEL: labels should not be indented
#1011: FILE: drivers/block/loop.c:684:
+	try_next_old_bio_vec:

WARNING:LONG_LINE: line length of 222 exceeds 100 columns
#1026: FILE: drivers/block/loop.c:697:
+		if (lo_do_transfer(lo, WRITE, page_address(new_bio->bi_io_vec[0].bv_page), page_address(old_bio->bi_io_vec[y].bv_page) + old_bio->bi_io_vec[y].bv_offset, extension->bioext_size, extension->bioext_sector)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1026: FILE: drivers/block/loop.c:697:
+		if (lo_do_transfer(lo, WRITE, page_address(new_bio->bi_io_vec[0].bv_page), page_address(old_bio->bi_io_vec[y].bv_page) + old_bio->bi_io_vec[y].bv_offset, extension->bioext_size, extension->bioext_sector)) {
+			clear_bit(0, &merge->bi_flags);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:INDENTED_LABEL: labels should not be indented
#1174: FILE: drivers/block/loop.c:814:
+			try_next_bio_vec:

WARNING:LONG_LINE: line length of 227 exceeds 100 columns
#1189: FILE: drivers/block/loop.c:829:
+				if (lo_do_transfer(lo, WRITE, page_address(xbio->bi_io_vec[0].bv_page), page_address(bio->bi_io_vec[y].bv_page) + bio->bi_io_vec[y].bv_offset, extension->bioext_size, extension->bioext_sector)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1189: FILE: drivers/block/loop.c:829:
+				if (lo_do_transfer(lo, WRITE, page_address(xbio->bi_io_vec[0].bv_page), page_address(bio->bi_io_vec[y].bv_page) + bio->bi_io_vec[y].bv_offset, extension->bioext_size, extension->bioext_sector)) {
+					clear_bit(0, &merge->bi_flags);
+				}

ERROR:CODE_INDENT: code indent should use tabs where possible
#1215: FILE: drivers/block/loop.c:855:
+ ^I^I^Icontinue;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1215: FILE: drivers/block/loop.c:855:
+ ^I^I^Icontinue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1215: FILE: drivers/block/loop.c:855:
+ ^I^I^Icontinue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1216: FILE: drivers/block/loop.c:856:
+ ^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1216: FILE: drivers/block/loop.c:856:
+ ^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1216: FILE: drivers/block/loop.c:856:
+ ^I^I}$

WARNING:LONG_LINE: line length of 219 exceeds 100 columns
#1229: FILE: drivers/block/loop.c:869:
+			if (lo_do_transfer(lo, READ, page_address(bio->bi_io_vec[0].bv_page), page_address(xbio->bi_io_vec[y].bv_page) + xbio->bi_io_vec[y].bv_offset, extension->bioext_size, extension->bioext_sector)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1229: FILE: drivers/block/loop.c:869:
+			if (lo_do_transfer(lo, READ, page_address(bio->bi_io_vec[0].bv_page), page_address(xbio->bi_io_vec[y].bv_page) + xbio->bi_io_vec[y].bv_offset, extension->bioext_size, extension->bioext_sector)) {
+				clear_bit(0, &merge->bi_flags);
+			}

CHECK:SPACING: No space is necessary after a cast
#1262: FILE: drivers/block/loop.c:903:
+		x = (int) bdev->bd_inode->i_size;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bs == 8192'
#1263: FILE: drivers/block/loop.c:904:
+		if ((bs == 8192) && (x & 0x1E00))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bs == 4096'
#1265: FILE: drivers/block/loop.c:906:
+		if ((bs == 4096) && (x & 0x0E00))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bs == 2048'
#1267: FILE: drivers/block/loop.c:908:
+		if ((bs == 2048) && (x & 0x0600))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bs == 1024'
#1269: FILE: drivers/block/loop.c:910:
+		if ((bs == 1024) && (x & 0x0200))

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1309: FILE: drivers/block/loop.c:946:
+	lo->lo_init[1] = lo->lo_init[0] = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1312: FILE: drivers/block/loop.c:949:
+^Ilo->key_data = NULL;^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1313: FILE: drivers/block/loop.c:950:
+	lo->lo_bio_que2 = lo->lo_bio_que1 = lo->lo_bio_que0 = NULL;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1314: FILE: drivers/block/loop.c:951:
+	lo->lo_bio_free1 = lo->lo_bio_free0 = NULL;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1315: FILE: drivers/block/loop.c:952:
+	lo->lo_bio_flsh = lo->lo_bio_need = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1436: FILE: drivers/block/loop.c:1056:
+^I^Istruct loop_func_table *xfer = xfer_funcs[lo->lo_encrypt_type]; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1438: FILE: drivers/block/loop.c:1058:
+^I^Ilo->transfer = NULL; $

WARNING:LINE_SPACING: Missing a blank line after declarations
#1438: FILE: drivers/block/loop.c:1058:
+		struct module *owner = xfer->owner;
+		lo->transfer = NULL; 

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1460: FILE: drivers/block/loop.c:1074:
+		struct module *owner = xfer->owner;
+		if(!try_module_get(owner))

ERROR:SPACING: space required before the open parenthesis '('
#1460: FILE: drivers/block/loop.c:1074:
+		if(!try_module_get(owner))

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#1486: FILE: drivers/block/loop.c:1092:
+	if (bdev->bd_openers != 2)	/* one for this fd being open plus one incremented by loop_set_fd */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1513: FILE: drivers/block/loop.c:1113:
+	lo->lo_init[1] = lo->lo_init[0] = 0;

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1534: FILE: drivers/block/loop.c:1128:
+static int loop_set_status(struct loop_device *lo, struct block_device *bdev, struct loop_info64 *info)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'offset != info->lo_offset'
#1560: FILE: drivers/block/loop.c:1151:
+	if ((offset != info->lo_offset) || info->lo_size) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1567: FILE: drivers/block/loop.c:1157:
+^I^Iif (!err) $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bdev->bd_disk->queue->queuedata"
#1704: FILE: drivers/block/loop.c:1324:
+	if (bdev->bd_disk->queue->queuedata != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#1727: FILE: drivers/block/loop.c:1344:
+		err = loop_set_status_old(lo, bdev, (struct loop_info *) arg);

CHECK:SPACING: No space is necessary after a cast
#1731: FILE: drivers/block/loop.c:1347:
+		err = loop_get_status_old(lo, bdev, (struct loop_info *) arg);

CHECK:SPACING: No space is necessary after a cast
#1735: FILE: drivers/block/loop.c:1350:
+		err = loop_set_status64(lo, bdev, (struct loop_info64 *) arg);

CHECK:SPACING: No space is necessary after a cast
#1739: FILE: drivers/block/loop.c:1353:
+		err = loop_get_status64(lo, bdev, (struct loop_info64 *) arg);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1786: FILE: drivers/block/loop.c:1390:
+	if ((unsigned)funcs->number >= MAX_LO_CRYPT || xfer_funcs[funcs->number])

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1809: FILE: drivers/block/loop.c:1408:
+		if (type == number) {
+			loop_release_xfer(lo);
 		}

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1827: FILE: drivers/block/loop.c:1432:
+	loop_dev_ptr_arr = kmalloc(max_loop * sizeof(struct loop_device *), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*loop_dev_ptr_arr[i])...) over kmalloc(sizeof(struct loop_device)...)
#1837: FILE: drivers/block/loop.c:1441:
+		loop_dev_ptr_arr[i] = kmalloc(sizeof(struct loop_device), GFP_KERNEL);

CHECK:BIT_MACRO: Prefer using the BIT macro
#1941: FILE: include/linux/loop.h:24:
+#define LOOP_IV_SECTOR_SIZE (1 << LOOP_IV_SECTOR_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1942: FILE: include/linux/loop.h:25:
+typedef sector_t loop_iv_t;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2014: FILE: include/linux/loop.h:132:
+^Iint (*init)(struct loop_device *, struct loop_info64 *); $

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct loop_device *' should also have an identifier name
#2014: FILE: include/linux/loop.h:132:
+	int (*init)(struct loop_device *, struct loop_info64 *); 

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct loop_info64 *' should also have an identifier name
#2014: FILE: include/linux/loop.h:132:
+	int (*init)(struct loop_device *, struct loop_info64 *); 

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000360694.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 16 errors, 36 warnings, 29 checks, 1942 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000360694.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
