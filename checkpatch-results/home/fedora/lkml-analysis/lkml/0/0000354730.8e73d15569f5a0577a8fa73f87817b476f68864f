WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
diff -uNrp linux-2.4.21-wq.51/include/linux/wait.h linux-2.4.21-wq.74/include/linux/wait.h

WARNING:NEW_TYPEDEFS: do not add new typedefs
#45: FILE: include/linux/wait.h:31:
+typedef struct __wait_queue wait_queue_t;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#46: FILE: include/linux/wait.h:32:
+typedef int (*wait_queue_func_t)(wait_queue_t *wait, unsigned mode, int sync);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#47: FILE: include/linux/wait.h:33:
+extern int default_wake_function(wait_queue_t *wait, unsigned mode, int sync);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#47: FILE: include/linux/wait.h:33:
+extern int default_wake_function(wait_queue_t *wait, unsigned mode, int sync);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#81: FILE: include/linux/wait.h:243:
+void FASTCALL(prepare_to_wait(wait_queue_head_t *q,
+				wait_queue_t *wait, int state));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#83: FILE: include/linux/wait.h:245:
+void FASTCALL(prepare_to_wait_exclusive(wait_queue_head_t *q,
+				wait_queue_t *wait, int state));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#85: FILE: include/linux/wait.h:247:
+int autoremove_wake_function(wait_queue_t *wait, unsigned mode, int sync);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#87: FILE: include/linux/wait.h:249:
+#define DEFINE_WAIT(name)						\
+	wait_queue_t name = {						\
+		.task		= current,				\
+		.func		= autoremove_wake_function,		\
+		.task_list	= {	.next = &name.task_list,	\
+					.prev = &name.task_list,	\
+				},					\
+	}

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#142: FILE: kernel/fork.c:108:
+int autoremove_wake_function(wait_queue_t *wait, unsigned mode, int sync)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#162: FILE: kernel/ksyms.c:382:
+EXPORT_SYMBOL(prepare_to_wait_exclusive);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#163: FILE: kernel/ksyms.c:383:
+EXPORT_SYMBOL(finish_wait);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#164: FILE: kernel/ksyms.c:384:
+EXPORT_SYMBOL(autoremove_wake_function);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#183: FILE: kernel/sched.c:705:
+int default_wake_function(wait_queue_t *curr, unsigned mode, int sync)

WARNING:LINE_SPACING: Missing a blank line after declarations
#186: FILE: kernel/sched.c:708:
+	struct task_struct *p = curr->task;
+	return try_to_wake_up(p, sync);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#206: FILE: kernel/sched.c:731:
+		unsigned flags;

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#221: FILE: kernel/sched.c:745:
+			if (r && (flags&WQ_FLAG_EXCLUSIVE) && !--nr_exclusive)
 			               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:REPEATED_WORD: Possible repeated word: 'until'
#236: FILE: kernel/workqueue.c:33:
+ * until until all currently-scheduled works are completed, but it doesn't

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#276: FILE: kernel/workqueue.c:108:
+int queue_delayed_work(struct workqueue_struct *wq,
+			struct work_struct *work, unsigned long delay)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#411: FILE: kernel/workqueue.c:288:
+		BUG_ON(!cwq->thread);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#492: FILE: kernel/workqueue.c:340:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000354730.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 15 warnings, 6 checks, 427 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000354730.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
