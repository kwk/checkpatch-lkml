WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#22: 
> I am working on a NAT product and trying provide mIRC support in it. I am looking into ip_masq_irc.c file of Linux 2.2.12 for reference, and have some doubts.

WARNING:TYPO_SPELLING: 'seperately' may be misspelled - perhaps 'separately'?
#37: 
seperately if you're not using 2.2.17. Many apologies.
^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#54: FILE: ip_masq_irc.c:26:
+ * FIXME: take common code from ip_masq_in and ip_masq_out, put into seperate
                                                                      ^^^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#70: FILE: ip_masq_irc.c:89:
+  int addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: ip_masq_irc.c:93:
+ { "SEND ", 5, 1 },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: ip_masq_irc.c:94:
+ { "CHAT ", 5, 1 },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: ip_masq_irc.c:95:
+ { "MOVE ", 5, 1 },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: ip_masq_irc.c:96:
+ { "TSEND ", 6, 1 },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#83: FILE: ip_masq_irc.c:97:
+ { "SCHAT ", 6, 1 },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: ip_masq_irc.c:98:
+ { "ACCEPT ", 7, 0 },$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#87: FILE: ip_masq_irc.c:100:
 };
+#define MAXMATCHLEN 7

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#116: FILE: ip_masq_irc.c:155:
+	while (data < (data_limit - ( 12 + MAXMATCHLEN ) ) )

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#116: FILE: ip_masq_irc.c:155:
+	while (data < (data_limit - ( 12 + MAXMATCHLEN ) ) )

ERROR:SPACING: space prohibited after that open parenthesis '('
#125: FILE: ip_masq_irc.c:180:
+				while ( *data++ != ' ')

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#126: FILE: ip_masq_irc.c:181:
+					if (data > (data_limit-5)) return 0;
 					                      ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#126: FILE: ip_masq_irc.c:181:
+					if (data > (data_limit-5)) return 0;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#129: FILE: ip_masq_irc.c:184:
+				if (dccprotos[i].addr == 1)
+				{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#148: FILE: ip_masq_irc.c:190:
+					s_addr = simple_strtoul(data,&data,10);
 					                            ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#148: FILE: ip_masq_irc.c:190:
+					s_addr = simple_strtoul(data,&data,10);
 					                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#148: FILE: ip_masq_irc.c:190:
+					s_addr = simple_strtoul(data,&data,10);
 					                                  ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#148: FILE: ip_masq_irc.c:190:
+					s_addr = simple_strtoul(data,&data,10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#149: FILE: ip_masq_irc.c:191:
+					if (*data++ !=' ')
 					            ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#161: FILE: ip_masq_irc.c:198:
+					s_port = simple_strtoul(data,&data,10);
 					                            ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#161: FILE: ip_masq_irc.c:198:
+					s_port = simple_strtoul(data,&data,10);
 					                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#161: FILE: ip_masq_irc.c:198:
+					s_port = simple_strtoul(data,&data,10);
 					                                  ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#161: FILE: ip_masq_irc.c:198:
+					s_port = simple_strtoul(data,&data,10);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#170: FILE: ip_masq_irc.c:202:
+^I^I^I^I^I * ^IWe must set NO_DPORT and NO_DADDR because$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#176: FILE: ip_masq_irc.c:207:
+					n_ms = ip_masq_new(IPPROTO_TCP,
 						maddr, 0,

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#186: FILE: ip_masq_irc.c:212:
+					if (n_ms==NULL)
 					        ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!n_ms"
#186: FILE: ip_masq_irc.c:212:
+					if (n_ms==NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required after that ',' (ctx:VxV)
#194: FILE: ip_masq_irc.c:219:
+					buf_len = sprintf(buf,"%lu %u",
 					                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: ip_masq_irc.c:220:
+					buf_len = sprintf(buf,"%lu %u",
 						ntohl(n_ms->maddr),ntohs(n_ms->mport));

ERROR:SPACING: space required after that ',' (ctx:VxO)
#198: FILE: ip_masq_irc.c:223:
+					s_port = simple_strtoul(data,&data,10);
 					                            ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#198: FILE: ip_masq_irc.c:223:
+					s_port = simple_strtoul(data,&data,10);
 					                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#198: FILE: ip_masq_irc.c:223:
+					s_port = simple_strtoul(data,&data,10);
 					                                  ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#198: FILE: ip_masq_irc.c:223:
+					s_port = simple_strtoul(data,&data,10);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#201: FILE: ip_masq_irc.c:226:
+					n_ms = ip_masq_out_get (IPPROTO_TCP,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#202: FILE: ip_masq_irc.c:227:
+					n_ms = ip_masq_out_get (IPPROTO_TCP,
+						ms->saddr,htons(s_port),

ERROR:SPACING: space required after that ',' (ctx:VxV)
#202: FILE: ip_masq_irc.c:227:
+						ms->saddr,htons(s_port),
 						         ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!n_ms"
#204: FILE: ip_masq_irc.c:229:
+					if (n_ms == NULL)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#207: FILE: ip_masq_irc.c:232:
+					buf_len = sprintf(buf,"%u",ntohs(n_ms->mport));
 					                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#207: FILE: ip_masq_irc.c:232:
+					buf_len = sprintf(buf,"%u",ntohs(n_ms->mport));
 					                          ^

WARNING:TYPO_SPELLING: 'mapp' may be misspelled - perhaps 'map'?
#225: FILE: ip_masq_irc.c:269:
+masq_irc_in (struct ip_masq_app *mapp, struct ip_masq *ms, struct sk_buff **skb_p, __u32 maddr)
                                  ^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#225: FILE: ip_masq_irc.c:269:
+masq_irc_in (struct ip_masq_app *mapp, struct ip_masq *ms, struct sk_buff **skb_p, __u32 maddr)

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: ip_masq_irc.c:271:
+        struct sk_buff *skb;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: ip_masq_irc.c:271:
+        struct sk_buff *skb;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#235: FILE: ip_masq_irc.c:279:
+        unsigned buf_len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#235: FILE: ip_masq_irc.c:279:
+        unsigned buf_len;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#235: FILE: ip_masq_irc.c:279:
+        unsigned buf_len;

ERROR:CODE_INDENT: code indent should use tabs where possible
#237: FILE: ip_masq_irc.c:281:
+        char *dcc_p, *addr_beg_p, *addr_end_p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: ip_masq_irc.c:281:
+        char *dcc_p, *addr_beg_p, *addr_end_p;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#239: FILE: ip_masq_irc.c:283:
+        skb = *skb_p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: ip_masq_irc.c:283:
+        skb = *skb_p;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#241: FILE: ip_masq_irc.c:285:
+        th = (struct tcphdr *)&(((char *)iph)[iph->ihl*4]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: ip_masq_irc.c:285:
+        th = (struct tcphdr *)&(((char *)iph)[iph->ihl*4]);$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#241: FILE: ip_masq_irc.c:285:
+        th = (struct tcphdr *)&(((char *)iph)[iph->ihl*4]);
                                                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#242: FILE: ip_masq_irc.c:286:
+        data = (char *)&th[1];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: ip_masq_irc.c:286:
+        data = (char *)&th[1];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#244: FILE: ip_masq_irc.c:288:
+        /*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#252: FILE: ip_masq_irc.c:296:
+         */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#254: FILE: ip_masq_irc.c:298:
+        data_limit = skb->h.raw + skb->len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: ip_masq_irc.c:298:
+        data_limit = skb->h.raw + skb->len;$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#256: FILE: ip_masq_irc.c:300:
+	while (data < (data_limit - 19 ) )
+	{

ERROR:SPACING: space prohibited before that close parenthesis ')'
#256: FILE: ip_masq_irc.c:300:
+	while (data < (data_limit - 19 ) )

ERROR:SPACING: space required after that ',' (ctx:VxV)
#258: FILE: ip_masq_irc.c:302:
+		if (memcmp(data,"\1DCC RESUME ",12))  {
 		               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#258: FILE: ip_masq_irc.c:302:
+		if (memcmp(data,"\1DCC RESUME ",12))  {
 		                               ^

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#259: FILE: ip_masq_irc.c:303:
+			data ++;
 			     ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#266: FILE: ip_masq_irc.c:310:
+		while( *data++ != ' ')

ERROR:SPACING: space required before the open parenthesis '('
#266: FILE: ip_masq_irc.c:310:
+		while( *data++ != ' ')

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#271: FILE: ip_masq_irc.c:315:
+			if (data > (data_limit-7)) return 0;
 			                      ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#271: FILE: ip_masq_irc.c:315:
+			if (data > (data_limit-7)) return 0;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#273: FILE: ip_masq_irc.c:317:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxO)
#280: FILE: ip_masq_irc.c:324:
+		s_port = simple_strtoul(data,&data,10);
 		                            ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#280: FILE: ip_masq_irc.c:324:
+		s_port = simple_strtoul(data,&data,10);
 		                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#280: FILE: ip_masq_irc.c:324:
+		s_port = simple_strtoul(data,&data,10);
 		                                  ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#280: FILE: ip_masq_irc.c:324:
+		s_port = simple_strtoul(data,&data,10);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#294: FILE: ip_masq_irc.c:338:
+		n_ms = ip_masq_in_get(IPPROTO_TCP,
+			0, 0,

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#297: FILE: ip_masq_irc.c:341:
+		if (n_ms==NULL) {
 		        ^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#297: FILE: ip_masq_irc.c:341:
+		if (n_ms==NULL) {
[...]
+		} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!n_ms"
#297: FILE: ip_masq_irc.c:341:
+		if (n_ms==NULL) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#299: FILE: ip_masq_irc.c:343:
+			return 0;
+		} else {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#307: FILE: ip_masq_irc.c:351:
+		buf_len = sprintf(buf,"%u",
 		                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: ip_masq_irc.c:352:
+		buf_len = sprintf(buf,"%u",
+			ntohs(n_ms->sport));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#314: FILE: ip_masq_irc.c:358:
+		diff = buf_len - (addr_end_p-addr_beg_p);
 		                            ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#322: FILE: ip_masq_irc.c:366:
+		if (diff==0) {
 		        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#326: FILE: ip_masq_irc.c:370:
+			memcpy(addr_beg_p,buf,buf_len);
 			                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#326: FILE: ip_masq_irc.c:370:
+			memcpy(addr_beg_p,buf,buf_len);
 			                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#329: FILE: ip_masq_irc.c:373:
+			*skb_p = ip_masq_skb_replace(skb, GFP_ATOMIC,
+				addr_beg_p, addr_end_p-addr_beg_p,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#329: FILE: ip_masq_irc.c:373:
+				addr_beg_p, addr_end_p-addr_beg_p,
 				                      ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#335: FILE: ip_masq_irc.c:379:
+
+	}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#338: FILE: ip_masq_irc.c:382:
+
+}

ERROR:CODE_INDENT: code indent should use tabs where possible
#353: FILE: ip_masq_irc.c:395:
+        0,^I^I^I/* type */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#353: FILE: ip_masq_irc.c:395:
+        0,^I^I^I/* type */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#354: FILE: ip_masq_irc.c:396:
+        0,^I^I^I/* n_attach */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: ip_masq_irc.c:396:
+        0,^I^I^I/* n_attach */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#355: FILE: ip_masq_irc.c:397:
+        masq_irc_init_1,^I/* init_1 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#355: FILE: ip_masq_irc.c:397:
+        masq_irc_init_1,^I/* init_1 */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#356: FILE: ip_masq_irc.c:398:
+        masq_irc_done_1,^I/* done_1 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: ip_masq_irc.c:398:
+        masq_irc_done_1,^I/* done_1 */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#357: FILE: ip_masq_irc.c:399:
+        masq_irc_out,^I^I/* pkt_out */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#357: FILE: ip_masq_irc.c:399:
+        masq_irc_out,^I^I/* pkt_out */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#358: FILE: ip_masq_irc.c:400:
+        masq_irc_in^I^I/* pkt_in */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#358: FILE: ip_masq_irc.c:400:
+        masq_irc_in^I^I/* pkt_in */$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000543130.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 51 errors, 34 warnings, 18 checks, 309 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000543130.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
