WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#54: 
 include/asm-i386/tlb.h        |  128 +++++++++++++++++++++++++++++++++++++++++-

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#153: FILE: arch/i386/mm/discontig.c:69:
+extern char __per_node_start[], __per_node_end[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#156: FILE: arch/i386/mm/discontig.c:72:
+#define PER_CPU_PAGES	PFN_UP((unsigned long)(__per_cpu_end-__per_cpu_start))
                      	                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#157: FILE: arch/i386/mm/discontig.c:73:
+#define PER_NODE_PAGES	PFN_UP((unsigned long)(__per_node_end-__per_node_start))
                       	                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#158: FILE: arch/i386/mm/discontig.c:74:
+#define MEM_MAP_SIZE(n)	PFN_UP((node_end_pfn[n]-node_start_pfn[n]+1)*sizeof(struct page))
                        	                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#158: FILE: arch/i386/mm/discontig.c:74:
+#define MEM_MAP_SIZE(n)	PFN_UP((node_end_pfn[n]-node_start_pfn[n]+1)*sizeof(struct page))
                        	                                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#158: FILE: arch/i386/mm/discontig.c:74:
+#define MEM_MAP_SIZE(n)	PFN_UP((node_end_pfn[n]-node_start_pfn[n]+1)*sizeof(struct page))
                        	                                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#158: FILE: arch/i386/mm/discontig.c:74:
+#define MEM_MAP_SIZE(n)	PFN_UP((node_end_pfn[n]-node_start_pfn[n]+1)*sizeof(struct page))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#169: FILE: arch/i386/mm/discontig.c:85:
+		vaddr  = (unsigned long)alloc_bootmem(PER_CPU_PAGES*PAGE_SIZE);
 		                                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#174: FILE: arch/i386/mm/discontig.c:90:
+		__per_cpu_offset[cpu] = vaddr + PAGE_SIZE*MEM_MAP_SIZE(node)
 		                                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#175: FILE: arch/i386/mm/discontig.c:91:
+					+ PAGE_SIZE*PFN_UP(sizeof(pg_data_t))
 					           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#176: FILE: arch/i386/mm/discontig.c:92:
+					+ PAGE_SIZE*PER_NODE_PAGES
 					           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#177: FILE: arch/i386/mm/discontig.c:93:
+					+ PAGE_SIZE*PER_CPU_PAGES*cpu_in_node
 					           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#177: FILE: arch/i386/mm/discontig.c:93:
+					+ PAGE_SIZE*PER_CPU_PAGES*cpu_in_node
 					                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#181: FILE: arch/i386/mm/discontig.c:97:
+	memcpy(RELOC_HIDE((char *)__per_cpu_start, __per_cpu_offset[cpu]),
+			__per_cpu_start,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#182: FILE: arch/i386/mm/discontig.c:98:
+			PER_CPU_PAGES*PAGE_SIZE);
 			             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#190: FILE: arch/i386/mm/discontig.c:106:
+		vaddr = (unsigned long)alloc_bootmem(PER_NODE_PAGES*PAGE_SIZE);
 		                                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#194: FILE: arch/i386/mm/discontig.c:110:
+		__per_node_offset[node] = vaddr + PAGE_SIZE*MEM_MAP_SIZE(node)
 		                                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#195: FILE: arch/i386/mm/discontig.c:111:
+					+ PAGE_SIZE*PFN_UP(sizeof(pg_data_t))
 					           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#199: FILE: arch/i386/mm/discontig.c:115:
+	memcpy(RELOC_HIDE((char *)__per_node_start, __per_node_offset[node]),
+			__per_node_start,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#200: FILE: arch/i386/mm/discontig.c:116:
+			PER_NODE_PAGES*PAGE_SIZE);
 			              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#206: FILE: arch/i386/mm/discontig.c:122:
+	int cpu;
+	for (cpu = 0; cpu < NR_CPUS; ++cpu)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#206: FILE: arch/i386/mm/discontig.c:122:
+	for (cpu = 0; cpu < NR_CPUS; ++cpu)

WARNING:LINE_SPACING: Missing a blank line after declarations
#213: FILE: arch/i386/mm/discontig.c:129:
+	int node;
+	void zone_sizes_init(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#213: FILE: arch/i386/mm/discontig.c:129:
+	void zone_sizes_init(void);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#237: FILE: arch/i386/mm/discontig.c:216:
+			+ PER_CPU_PAGES*MAX_NODE_CPUS;
 			               ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#288: FILE: include/asm-generic/percpu.h:28:
+#define per_cpu(var, cpu)		( (void)(cpu), var##__per_cpu )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#288: FILE: include/asm-generic/percpu.h:28:
+#define per_cpu(var, cpu)		( (void)(cpu), var##__per_cpu )

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#297: FILE: include/asm-generic/pernode.h:1:
+#ifndef _ASM_GENERIC_PERNODE_H_

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#309: FILE: include/asm-generic/pernode.h:13:
+#define DEFINE_PER_NODE(type, name) \
+    __attribute__((__section__(".data.pernode"))) __typeof__(type) name##__per_node

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#310: FILE: include/asm-generic/pernode.h:14:
+    __attribute__((__section__(".data.pernode"))) __typeof__(type) name##__per_node$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.pernode") over __attribute__((__section__(".data.pernode")))
#310: FILE: include/asm-generic/pernode.h:14:
+    __attribute__((__section__(".data.pernode"))) __typeof__(type) name##__per_node

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#321: FILE: include/asm-generic/pernode.h:25:
+#define DEFINE_PER_NODE(type, name) \
+    __typeof__(type) name##__per_node

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: include/asm-generic/pernode.h:26:
+    __typeof__(type) name##__per_node$

ERROR:SPACING: space prohibited after that open parenthesis '('
#325: FILE: include/asm-generic/pernode.h:29:
+#define per_node(var, node)		( (void)(node), var##__per_node )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#325: FILE: include/asm-generic/pernode.h:29:
+#define per_node(var, node)		( (void)(node), var##__per_node )

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#330: FILE: include/asm-generic/pernode.h:34:
+#define DECLARE_PER_NODE(type, name) extern __typeof__(type) name##__per_node

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#332: FILE: include/asm-generic/pernode.h:36:
+#define EXPORT_PER_NODE_SYMBOL(var) EXPORT_SYMBOL(var##__per_node)

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#333: FILE: include/asm-generic/pernode.h:37:
+#define EXPORT_PER_NODE_SYMBOL_GPL(var) EXPORT_SYMBOL_GPL(var##__per_node)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#380: FILE: include/asm-i386/pernode.h:1:
+#ifndef __ARCH_I386_PERNODE__

WARNING:INCLUDE_LINUX: Use #include <linux/percpu.h> instead of <asm/percpu.h>
#414: FILE: include/asm-i386/tlb.h:6:
+#include <asm/percpu.h>

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#447: FILE: include/asm-i386/tlb.h:45:
+	struct page *		pages[FREE_PTE_NR];

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#505: FILE: include/asm-i386/tlb.h:103:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tlb' - possible side-effects?
#530: FILE: include/asm-i386/tlb.h:128:
+#define tlb_remove_tlb_entry(tlb, ptep, address)		\
+	do {							\
+		tlb->need_flush = 1;				\
+		__tlb_remove_tlb_entry(tlb, ptep, address);	\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tlb' may be better as '(tlb)' to avoid precedence issues
#530: FILE: include/asm-i386/tlb.h:128:
+#define tlb_remove_tlb_entry(tlb, ptep, address)		\
+	do {							\
+		tlb->need_flush = 1;				\
+		__tlb_remove_tlb_entry(tlb, ptep, address);	\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tlb' - possible side-effects?
#536: FILE: include/asm-i386/tlb.h:134:
+#define pte_free_tlb(tlb, ptep)					\
+	do {							\
+		tlb->need_flush = 1;				\
+		__pte_free_tlb(tlb, ptep);			\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tlb' may be better as '(tlb)' to avoid precedence issues
#536: FILE: include/asm-i386/tlb.h:134:
+#define pte_free_tlb(tlb, ptep)					\
+	do {							\
+		tlb->need_flush = 1;				\
+		__pte_free_tlb(tlb, ptep);			\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tlb' - possible side-effects?
#542: FILE: include/asm-i386/tlb.h:140:
+#define pmd_free_tlb(tlb, pmdp)					\
+	do {							\
+		tlb->need_flush = 1;				\
+		__pmd_free_tlb(tlb, pmdp);			\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tlb' may be better as '(tlb)' to avoid precedence issues
#542: FILE: include/asm-i386/tlb.h:140:
+#define pmd_free_tlb(tlb, pmdp)					\
+	do {							\
+		tlb->need_flush = 1;				\
+		__pmd_free_tlb(tlb, pmdp);			\
+	} while (0)

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#587: FILE: include/linux/mm.h:322:
+DECLARE_PER_NODE(struct zone *[MAX_NR_ZONES], zone_table);
                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#593: FILE: include/linux/mm.h:327:
+	unsigned long zone = page->flags >> ZONE_SHIFT;
+	return per_node(zone_table, zone/MAX_NR_ZONES)[zone % MAX_NR_ZONES];

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#593: FILE: include/linux/mm.h:327:
+	return per_node(zone_table, zone/MAX_NR_ZONES)[zone % MAX_NR_ZONES];
 	                                ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#631: FILE: init/main.c:333:
+	extern char __per_node_start[], __per_node_end[];

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#801: FILE: mm/page_alloc.c:47:
+DEFINE_PER_NODE(struct zone *[MAX_NR_ZONES], zone_table);
                             ^

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000389318.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 8 errors, 16 warnings, 30 checks, 662 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000389318.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
