WARNING:EMAIL_SUBJECT: A patch subject line should describe the change not the tool that found it
#12: 
Subject: [PATCH] ppc64: Some sparse fixes

Naming the tool that found the issue is not very useful in the
subject line.  A good subject line summarizes the change that
the patch brings.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
This is a batch of sparse fixes for things in arch/ppc64/* and include/asm-ppc64/*

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#43: FILE: include/asm-ppc64/io.h:208:
+extern void __iomem * reserve_phb_iospace(unsigned long size);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#43: FILE: include/asm-ppc64/io.h:208:
+extern void __iomem * reserve_phb_iospace(unsigned long size);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#66: FILE: arch/ppc64/kernel/pci.c:577:
 static void __devinit pci_process_ISA_OF_ranges(struct device_node *isa_node,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#69: FILE: arch/ppc64/kernel/pci.c:579:
+				      void __iomem * phb_io_base_virt)

CHECK:SPACING: No space is necessary after a cast
#78: FILE: arch/ppc64/kernel/pci.c:798:
+	if (iounmap_explicit((void __iomem *) start_virt, size))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#93: FILE: arch/ppc64/kernel/pSeries_pci.c:158:
+	volatile u32 val;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#117: FILE: arch/ppc64/kernel/pSeries_pci.c:180:
+		printk("reg0: %x\n", val);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#130: FILE: arch/ppc64/kernel/rtasd.c:278:
+static ssize_t rtas_log_read(struct file * file, char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#130: FILE: arch/ppc64/kernel/rtasd.c:278:
+static ssize_t rtas_log_read(struct file * file, char __user * buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#131: FILE: arch/ppc64/kernel/rtasd.c:279:
+static ssize_t rtas_log_read(struct file * file, char __user * buf,
 			 size_t count, loff_t *ppos)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#179: FILE: arch/ppc64/kernel/xics.c:460:
+^I} intnodes[NR_CPUS]; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#179: FILE: arch/ppc64/kernel/xics.c:460:
+	} intnodes[NR_CPUS]; 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#236: FILE: arch/ppc64/kernel/xics.c:549:
+^I^I^Ixics_per_cpu[i] = ioremap(intnodes[hard_id].addr, $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#255: FILE: arch/ppc64/mm/init.c:877:
+void __iomem * reserve_phb_iospace(unsigned long size)

CHECK:SPACING: No space is necessary after a cast
#264: FILE: arch/ppc64/mm/init.c:884:
+	virt_addr = (void __iomem *) phbs_io_bot;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#287: FILE: arch/ppc64/kernel/udbg.c:25:
+extern u8 real_readb(volatile u8 __iomem  *addr);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#288: FILE: arch/ppc64/kernel/udbg.c:26:
+extern void real_writeb(u8 data, volatile u8 __iomem *addr);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#288: FILE: arch/ppc64/kernel/udbg.c:26:
+extern void real_writeb(u8 data, volatile u8 __iomem *addr);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#297: FILE: arch/ppc64/kernel/udbg.c:55:
+static volatile struct NS16550 __iomem *udbg_comport;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#324: FILE: arch/ppc64/kernel/udbg.c:79:
+		out_8(&udbg_comport->dll,  dll);	/* 1 = 115200,  2 = 57600,
+							   3 = 38400, 12 = 9600 baud */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#324: FILE: arch/ppc64/kernel/udbg.c:79:
+							   3 = 38400, 12 = 9600 baud */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#326: FILE: arch/ppc64/kernel/udbg.c:81:
+		out_8(&udbg_comport->dlm, 0x00);	/* dll >> 8 which should be zero
+							   for fast rates; */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#326: FILE: arch/ppc64/kernel/udbg.c:81:
+							   for fast rates; */

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#329: FILE: arch/ppc64/kernel/udbg.c:84:
+		out_8(&udbg_comport->fcr ,0x07);	/* Clear & enable FIFOs */
 		                         ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#329: FILE: arch/ppc64/kernel/udbg.c:84:
+		out_8(&udbg_comport->fcr ,0x07);	/* Clear & enable FIFOs */
 		                         ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#338: FILE: arch/ppc64/kernel/udbg.c:93:
+static volatile u8 __iomem *sccc;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#339: FILE: arch/ppc64/kernel/udbg.c:94:
+static volatile u8 __iomem *sccd;

CHECK:SPACING: No space is necessary after a cast
#348: FILE: arch/ppc64/kernel/udbg.c:133:
+	sccc = (volatile u8 * __iomem) ioremap(addr & PAGE_MASK, PAGE_SIZE) ;

WARNING:SPACING: space prohibited before semicolon
#348: FILE: arch/ppc64/kernel/udbg.c:133:
+	sccc = (volatile u8 * __iomem) ioremap(addr & PAGE_MASK, PAGE_SIZE) ;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#348: FILE: arch/ppc64/kernel/udbg.c:133:
+	sccc = (volatile u8 * __iomem) ioremap(addr & PAGE_MASK, PAGE_SIZE) ;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#377: FILE: arch/ppc64/kernel/udbg.c:168:
+	sccc = (volatile u8 __iomem *)0x80013020ul;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#378: FILE: arch/ppc64/kernel/udbg.c:169:
+	sccd = (volatile u8 __iomem *)0x80013030ul;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#387: FILE: arch/ppc64/kernel/udbg.c:195:
+	udbg_comport = (volatile struct NS16550 __iomem *)0xf40003f8;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 43)
#396: FILE: arch/ppc64/kernel/udbg.c:206:
+		while ((in_8(&udbg_comport->lsr) & LSR_THRE) == 0)
 			/* wait for idle */;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 51)
#405: FILE: arch/ppc64/kernel/udbg.c:211:
+			while ((in_8(&udbg_comport->lsr) & LSR_THRE) == 0)
+				/* wait for idle */; 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#406: FILE: arch/ppc64/kernel/udbg.c:212:
+^I^I^I^I/* wait for idle */; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#418: FILE: arch/ppc64/kernel/udbg.c:220:
+^I^Iout_8(sccd,  c);^I^I$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 43)
#448: FILE: arch/ppc64/kernel/udbg.c:249:
+		while ((in_8(&udbg_comport->lsr) & LSR_DR) == 0)
 			/* wait for char */;

ERROR:SPACING: space prohibited after that open parenthesis '('
#496: FILE: arch/ppc64/kernel/proc_ppc64.c:36:
+static ssize_t page_map_read( struct file *file, char __user *buf, size_t nbytes,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#497: FILE: arch/ppc64/kernel/proc_ppc64.c:37:
+static ssize_t page_map_read( struct file *file, char __user *buf, size_t nbytes,
+			      loff_t *ppos);

ERROR:SPACING: space prohibited after that open parenthesis '('
#506: FILE: arch/ppc64/kernel/proc_ppc64.c:165:
+static ssize_t page_map_read( struct file *file, char __user *buf, size_t nbytes,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#507: FILE: arch/ppc64/kernel/proc_ppc64.c:166:
+static ssize_t page_map_read( struct file *file, char __user *buf, size_t nbytes,
+			      loff_t *ppos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#536: FILE: arch/ppc64/kernel/proc_ppc64.c:350:
+static char * parse_next_property(char *buf, char *end, char **name, int *length,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#546: FILE: arch/ppc64/kernel/proc_ppc64.c:359:
+		printk(KERN_ERR "property parse failed in %s at line %d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#547: FILE: arch/ppc64/kernel/proc_ppc64.c:360:
+		       __FUNCTION__, __LINE__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#554: FILE: arch/ppc64/kernel/proc_ppc64.c:366:
+		printk(KERN_ERR "property parse failed in %s at line %d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#555: FILE: arch/ppc64/kernel/proc_ppc64.c:367:
+		       __FUNCTION__, __LINE__);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#564: FILE: arch/ppc64/kernel/proc_ppc64.c:375:
+^I^Iprintk(KERN_ERR "property parse failed in %s at line %d\n", $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#564: FILE: arch/ppc64/kernel/proc_ppc64.c:375:
+		printk(KERN_ERR "property parse failed in %s at line %d\n", 

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#565: FILE: arch/ppc64/kernel/proc_ppc64.c:376:
+		       __FUNCTION__, __LINE__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#570: FILE: arch/ppc64/kernel/proc_ppc64.c:380:
+		printk(KERN_ERR "property parse failed in %s at line %d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#571: FILE: arch/ppc64/kernel/proc_ppc64.c:381:
+		       __FUNCTION__, __LINE__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#580: FILE: arch/ppc64/kernel/proc_ppc64.c:389:
+		printk(KERN_ERR "property parse failed in %s at line %d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#581: FILE: arch/ppc64/kernel/proc_ppc64.c:390:
+		       __FUNCTION__, __LINE__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#586: FILE: arch/ppc64/kernel/proc_ppc64.c:394:
+		printk(KERN_ERR "property parse failed in %s at line %d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#587: FILE: arch/ppc64/kernel/proc_ppc64.c:395:
+		       __FUNCTION__, __LINE__);

CHECK:SPACING: No space is necessary after a cast
#600: FILE: arch/ppc64/kernel/vecemu.c:266:
+	if (get_user(instr, (unsigned int __user *) regs->nip))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#625: FILE: arch/ppc64/kernel/lparcfg.c:527:
+      .owner^I= THIS_MODULE,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#626: FILE: arch/ppc64/kernel/lparcfg.c:528:
+      .read^I= seq_read,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#627: FILE: arch/ppc64/kernel/lparcfg.c:529:
+      .open^I= lparcfg_open,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#628: FILE: arch/ppc64/kernel/lparcfg.c:530:
+      .release^I= single_release,$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000237372.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 15 errors, 40 warnings, 8 checks, 510 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000237372.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
