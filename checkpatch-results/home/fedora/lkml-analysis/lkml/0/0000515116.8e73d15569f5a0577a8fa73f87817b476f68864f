WARNING:TYPO_SPELLING: 'agressively' may be misspelled - perhaps 'aggressively'?
#54: 
much all active pages are being aged down agressively.
                                          ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'agressive' may be misspelled - perhaps 'aggressive'?
#61: 
agressive.
^^^^^^^^^

WARNING:TYPO_SPELLING: 'withoug' may be misspelled - perhaps 'without'?
#70: 
On a system withoug shortage, pages are only aged up, this is not realy
            ^^^^^^^

WARNING:TYPO_SPELLING: 'realy' may be misspelled - perhaps 'really'?
#70: 
On a system withoug shortage, pages are only aged up, this is not realy
                                                                  ^^^^^

WARNING:LONG_LINE: line length of 130 exceeds 100 columns
#91: FILE: mm/vmscan.c:49:
+static void vm_crawl_pmd(struct mm_struct * mm, struct vm_area_struct * vma, pmd_t *dir, unsigned long address, unsigned long end)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#91: FILE: mm/vmscan.c:49:
+static void vm_crawl_pmd(struct mm_struct * mm, struct vm_area_struct * vma, pmd_t *dir, unsigned long address, unsigned long end)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#91: FILE: mm/vmscan.c:49:
+static void vm_crawl_pmd(struct mm_struct * mm, struct vm_area_struct * vma, pmd_t *dir, unsigned long address, unsigned long end)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#93: FILE: mm/vmscan.c:51:
+	pte_t * pte;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#103: FILE: mm/vmscan.c:61:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#105: FILE: mm/vmscan.c:63:
+^I$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#114: FILE: mm/vmscan.c:72:
+			if (VALID_PAGE(page) && !PageReserved(page) &&
+			    ptep_test_and_clear_young(pte))
+			{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 137 exceeds 100 columns
#126: FILE: mm/vmscan.c:84:
+static inline void vm_crawl_pgd(struct mm_struct * mm, struct vm_area_struct * vma, pgd_t *dir, unsigned long address, unsigned long end)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#126: FILE: mm/vmscan.c:84:
+static inline void vm_crawl_pgd(struct mm_struct * mm, struct vm_area_struct * vma, pgd_t *dir, unsigned long address, unsigned long end)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#126: FILE: mm/vmscan.c:84:
+static inline void vm_crawl_pgd(struct mm_struct * mm, struct vm_area_struct * vma, pgd_t *dir, unsigned long address, unsigned long end)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#128: FILE: mm/vmscan.c:86:
+	pmd_t * pmd;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#141: FILE: mm/vmscan.c:99:
+^Ipgd_end = (address + PGDIR_SIZE) & PGDIR_MASK;^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'end > pgd_end'
#142: FILE: mm/vmscan.c:100:
+	if (pgd_end && (end > pgd_end))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_WHITESPACE: trailing whitespace
#144: FILE: mm/vmscan.c:102:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#153: FILE: mm/vmscan.c:111:
+static void vm_crawl_vma(struct mm_struct * mm, struct vm_area_struct * vma)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#153: FILE: mm/vmscan.c:111:
+static void vm_crawl_vma(struct mm_struct * mm, struct vm_area_struct * vma)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#159: FILE: mm/vmscan.c:117:
+	if (vma->vm_flags & (VM_LOCKED|VM_RESERVED))
 	                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#167: FILE: mm/vmscan.c:125:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#175: FILE: mm/vmscan.c:133:
+static void vm_crawl_mm(struct mm_struct * mm)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#177: FILE: mm/vmscan.c:135:
+	struct vm_area_struct* vma;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: mm/vmscan.c:142:
+^I * Find the proper vm-area after freezing the vma chain $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#196: FILE: mm/vmscan.c:154:
+ * the last scan. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#206: FILE: mm/vmscan.c:164:
+	while (p != &init_mm.mmlist)
+	{

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#231: FILE: mm/vmscan.c:189:
+ * push us into a shortage. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#234: FILE: mm/vmscan.c:192:
+	struct list_head * p;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#235: FILE: mm/vmscan.c:193:
+	struct page * page;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#241: FILE: mm/vmscan.c:199:
+		if (PageTestandClearReferenced(page))
+		    age_page_up(page);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#243: FILE: mm/vmscan.c:201:
+		else if (general_shortage)
+		    age_page_down(page);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#260: FILE: mm/vmscan.c:253:
+#if 0 /* The problem is that this test makes the system extremely unwilling to

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#263: FILE: mm/vmscan.c:256:
+       * time we consider swapping out? */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#266: FILE: mm/vmscan.c:259:
+	 * will not be aged. However their Referenced bit should be set. */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#267: FILE: mm/vmscan.c:260:
+	if (PageTestandClearReferenced(page)) {
+	    page->age = 0;

WARNING:TABSTOP: Statements should start on a tabstop
#269: FILE: mm/vmscan.c:262:
+	    return;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#346: FILE: mm/vmscan.c:869:
+		 * simply bounces them back to the active list */

ERROR:CODE_INDENT: code indent should use tabs where possible
#348: FILE: mm/vmscan.c:871:
+^I^I    ^Igoto skip_page;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#348: FILE: mm/vmscan.c:871:
+^I^I    ^Igoto skip_page;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#390: FILE: mm/vmscan.c:1000:
+^I    ^I/* perform aging of the active list */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#390: FILE: mm/vmscan.c:1000:
+^I    ^I/* perform aging of the active list */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#391: FILE: mm/vmscan.c:1001:
+^I    ^Ivm_devil(shortage & GENERAL_SHORTAGE);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#391: FILE: mm/vmscan.c:1001:
+^I    ^Ivm_devil(shortage & GENERAL_SHORTAGE);$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000515116.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 22 errors, 20 warnings, 2 checks, 303 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000515116.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
