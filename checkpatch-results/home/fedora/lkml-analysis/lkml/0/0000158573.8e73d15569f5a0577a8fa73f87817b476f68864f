WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#115: 
#define NCP_SYMLINK_MAGIC0      cpu_to_le32(0x6c6d7973)     /* "symlnk->" */

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#115: 
#define NCP_SYMLINK_MAGIC0      cpu_to_le32(0x6c6d7973)     /* "symlnk->" */

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#116: 
#define NCP_SYMLINK_MAGIC1      cpu_to_le32(0x3e2d6b6e)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#222: FILE: fs/ncpfs/inode.c:108:
+extern void ncp_put_link(struct dentry *, struct nameidata *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#222: FILE: fs/ncpfs/inode.c:108:
+extern void ncp_put_link(struct dentry *, struct nameidata *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#222: FILE: fs/ncpfs/inode.c:108:
+extern void ncp_put_link(struct dentry *, struct nameidata *);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#272: FILE: fs/ncpfs/symlink.c:50:
+	rawlink = (char*)kmalloc(NCP_MAX_SYMLINK_SIZE, GFP_KERNEL);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#272: FILE: fs/ncpfs/symlink.c:50:
+	rawlink = (char*)kmalloc(NCP_MAX_SYMLINK_SIZE, GFP_KERNEL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#288: FILE: fs/ncpfs/symlink.c:59:
+                         0, NCP_MAX_SYMLINK_SIZE, rawlink, &len);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#288: FILE: fs/ncpfs/symlink.c:59:
+	err = ncp_read_kernel(NCP_SERVER(inode), NCP_FINFO(inode)->file_handle,
+                         0, NCP_MAX_SYMLINK_SIZE, rawlink, &len);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: fs/ncpfs/symlink.c:59:
+                         0, NCP_MAX_SYMLINK_SIZE, rawlink, &len);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#307: FILE: fs/ncpfs/symlink.c:69:
+		if (len < NCP_MIN_SYMLINK_SIZE ||
+				((__le32 *)rawlink)[0] != NCP_SYMLINK_MAGIC0 ||

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#337: FILE: fs/ncpfs/symlink.c:90:
+int ncp_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                              ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: braces {} should be used on all arms of this statement
#341: FILE: fs/ncpfs/symlink.c:94:
+	if (!link)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#343: FILE: fs/ncpfs/symlink.c:96:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#346: FILE: fs/ncpfs/symlink.c:99:
+		int len = ncp_read_link(dentry->d_inode, link, PATH_MAX);
+		if (len < 0) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#351: FILE: fs/ncpfs/symlink.c:104:
+	nd_set_link(nd, link);
 	            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#363: FILE: fs/ncpfs/symlink.c:108:
+void ncp_put_link(struct dentry *dentry, struct nameidata *nd)
                                                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#365: FILE: fs/ncpfs/symlink.c:110:
+	char *s = nd_get_link(nd);
 	                      ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#366: FILE: fs/ncpfs/symlink.c:111:
+	char *s = nd_get_link(nd);
+	if (!IS_ERR(s))

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000158573.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 14 warnings, 4 checks, 156 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000158573.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
