CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#79: FILE: include/linux/fs.h:626:
+	uint64_t      cache_hit;        /* cache hit count*/

WARNING:TYPO_SPELLING: 'mmaped' may be misspelled - perhaps 'mapped'?
#86: FILE: include/linux/fs.h:633:
+#define RA_FLAG_MMAP		(1UL<<31)	/* mmaped page access */
                     		         	   ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#86: FILE: include/linux/fs.h:633:
+#define RA_FLAG_MMAP		(1UL<<31)	/* mmaped page access */
                     		    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#86: FILE: include/linux/fs.h:633:
+#define RA_FLAG_MMAP		(1UL<<31)	/* mmaped page access */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#158: FILE: mm/readahead.c:109:
+u32 debug_disable_stateful_method = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#167: FILE: mm/readahead.c:119:
+	debugfs_create_bool("disable_stateful_method", 0644, root,
+						&debug_disable_stateful_method);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: mm/readahead.c:961:
+static inline void ra_set_size(struct file_ra_state *ra,
+				unsigned long ra_size, unsigned long la_size)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#341: FILE: mm/readahead.c:971:
+			struct address_space *mapping, struct file *filp)
 			                                            ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: mm/readahead.c:971:
+static int ra_dispatch(struct file_ra_state *ra,
+			struct address_space *mapping, struct file *filp)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#350: FILE: mm/readahead.c:980:
+	BUG_ON(ra_class == 0 || ra_class > RA_CLASS_END);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#361: FILE: mm/readahead.c:991:
+		if (ra_class == RA_CLASS_CONTEXT_ACCELERATED &&
+				eof_index > ra->lookahead_index + 1)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#369: FILE: mm/readahead.c:999:
+	actual = __do_page_cache_readahead(mapping, filp,
 	                                            ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#370: FILE: mm/readahead.c:1000:
+	actual = __do_page_cache_readahead(mapping, filp,
+					ra->ra_index, ra_size, la_size);

WARNING:LINE_SPACING: Missing a blank line after declarations
#375: FILE: mm/readahead.c:1005:
+		struct page *page = find_page(mapping, ra->ra_index + actual);
+		if (page)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#393: FILE: mm/readahead.c:1023:
+		size = (i_size_read(filp->f_dentry->d_inode)+1023)/1024;
 		                                            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#393: FILE: mm/readahead.c:1023:
+		size = (i_size_read(filp->f_dentry->d_inode)+1023)/1024;
 		                                                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#397: FILE: mm/readahead.c:1027:
+			ddprintk("ino %lu is %s size %luK by %s(%d)\n",
+					filp->f_dentry->d_inode->i_ino,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#402: FILE: mm/readahead.c:1032:
+	dprintk("readahead-%s(ino=%lu, index=%lu, ra=%lu+%lu-%lu) = %d\n",
+			ra_class_name[ra_class],

WARNING:TYPO_SPELLING: 'Substract' may be misspelled - perhaps 'Subtract'?
#413: FILE: mm/readahead.c:1043:
+ *   - Substract ra_size by the old look-ahead to get real safe read-ahead;
        ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#424: FILE: mm/readahead.c:1054:
+static inline int adjust_rala(unsigned long ra_max,
+				unsigned long *ra_size, unsigned long *la_size)

CHECK:BRACES: braces {} should be used on all arms of this statement
#428: FILE: mm/readahead.c:1058:
+	if (*ra_size > *la_size)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#430: FILE: mm/readahead.c:1060:
+	else {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#473: FILE: mm/readahead.c:1103:
+static inline unsigned long compute_thrashing_threshold(

WARNING:SPLIT_STRING: quoted string split across lines
#497: FILE: mm/readahead.c:1127:
+	ddprintk("compute_thrashing_threshold: "
+			"ra=%lu=%lu*%lu/%lu, remain %lu for %lu\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#508: FILE: mm/readahead.c:1138:
+state_based_readahead(struct address_space *mapping, struct file *filp,
                                                                   ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#509: FILE: mm/readahead.c:1139:
+state_based_readahead(struct address_space *mapping, struct file *filp,
+			struct file_ra_state *ra,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#536: FILE: mm/readahead.c:1166:
+	return ra_dispatch(ra, mapping, filp);
 	                                ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#539: FILE: mm/readahead.c:1169:
+
+

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000124734.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 9 warnings, 18 checks, 497 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000124734.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
