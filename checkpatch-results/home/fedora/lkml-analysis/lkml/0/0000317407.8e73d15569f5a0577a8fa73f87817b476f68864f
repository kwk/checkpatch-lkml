WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
some of the allocated resources manually instead of relying on driver model.

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#79: 
--- a/drivers/base/firmware_class.c	Sun Dec 21 01:03:27 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#137: FILE: drivers/base/firmware_class.c:48:
+ *^IThe relevant values are: $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MEMORY_BARRIER: memory barrier without comment
#184: FILE: drivers/base/firmware_class.c:68:
+	wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#194: FILE: drivers/base/firmware_class.c:75:
+	wmb();

CHECK:BRACES: braces {} should be used on all arms of this statement
#245: FILE: drivers/base/firmware_class.c:93:
+	if (fw_priv->state <= FW_STATE_LOADING) {
[...]
+		}
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#246: FILE: drivers/base/firmware_class.c:94:
+		fw_priv->loading = simple_strtol(buf, NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:TRAILING_WHITESPACE: trailing whitespace
#258: FILE: drivers/base/firmware_class.c:105:
+^I^I^I^Ifirmware_finish_loading(fw_priv); $

CHECK:BRACES: Unbalanced braces around else statement
#263: FILE: drivers/base/firmware_class.c:110:
+	} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#285: FILE: drivers/base/firmware_class.c:128:
+^I^I   ^I^I  char *buffer, loff_t offset, size_t count)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#285: FILE: drivers/base/firmware_class.c:128:
+^I^I   ^I^I  char *buffer, loff_t offset, size_t count)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#285: FILE: drivers/base/firmware_class.c:128:
+static ssize_t firmware_data_read(struct kobject *kobj,
+		   		  char *buffer, loff_t offset, size_t count)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#377: FILE: drivers/base/firmware_class.c:212:
+ *  $

CHECK:SPACING: No space is necessary after a cast
#382: FILE: drivers/base/firmware_class.c:216:
+	struct firmware_priv *fw_priv = (struct firmware_priv *) data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#383: FILE: drivers/base/firmware_class.c:217:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#404: FILE: drivers/base/firmware_class.c:230:
+static ssize_t firmware_timeout_store(struct class *class, $

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#410: FILE: drivers/base/firmware_class.c:233:
+	loading_timeout = simple_strtol(buf, NULL, 10);

WARNING:TYPO_SPELLING: 'mimicing' may be misspelled - perhaps 'mimicking'?
#442: FILE: drivers/base/firmware_class.c:257:
+ *	Generates handcrafted hotplug event mimicing events from the
   	                                    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#444: FILE: drivers/base/firmware_class.c:259:
+ *^Iregistered. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#456: FILE: drivers/base/firmware_class.c:271:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#457: FILE: drivers/base/firmware_class.c:272:
+	if (!(buf = scratch = kmalloc(1024, GFP_KERNEL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#458: FILE: drivers/base/firmware_class.c:273:
+		printk(KERN_ERR "%s: not enough memory allocating environment\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#459: FILE: drivers/base/firmware_class.c:274:
+		       __FUNCTION__);

ERROR:CODE_INDENT: code indent should use tabs where possible
#473: FILE: drivers/base/firmware_class.c:287:
+        path = kmalloc(path_len, GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#473: FILE: drivers/base/firmware_class.c:287:
+        path = kmalloc(path_len, GFP_KERNEL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#474: FILE: drivers/base/firmware_class.c:288:
+        if (!path) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#474: FILE: drivers/base/firmware_class.c:288:
+        if (!path) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#477: FILE: drivers/base/firmware_class.c:290:
+                goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#477: FILE: drivers/base/firmware_class.c:290:
+                goto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#481: FILE: drivers/base/firmware_class.c:292:
+        kobject_fill_path(&class_dev->kobj, path, path_len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#481: FILE: drivers/base/firmware_class.c:292:
+        kobject_fill_path(&class_dev->kobj, path, path_len);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#486: FILE: drivers/base/firmware_class.c:294:
+        envp [i++] = scratch;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#486: FILE: drivers/base/firmware_class.c:294:
+        envp [i++] = scratch;$

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#486: FILE: drivers/base/firmware_class.c:294:
+        envp [i++] = scratch;

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

ERROR:CODE_INDENT: code indent should use tabs where possible
#487: FILE: drivers/base/firmware_class.c:295:
+        scratch += sprintf(scratch, "DEVPATH=%s", path) + 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#487: FILE: drivers/base/firmware_class.c:295:
+        scratch += sprintf(scratch, "DEVPATH=%s", path) + 1;$

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#527: FILE: drivers/base/firmware_class.c:331:
+	strlcpy(class_dev->class_id, dev->bus_id, BUS_ID_SIZE);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#536: FILE: drivers/base/firmware_class.c:340:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#536: FILE: drivers/base/firmware_class.c:340:
+ $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#537: FILE: drivers/base/firmware_class.c:341:
+	firmware = kmalloc(sizeof (struct firmware), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*firmware)...) over kmalloc(sizeof (struct firmware)...)
#537: FILE: drivers/base/firmware_class.c:341:
+	firmware = kmalloc(sizeof (struct firmware), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#539: FILE: drivers/base/firmware_class.c:343:
+		printk(KERN_ERR "%s: kmalloc(struct firmware) failed\n",

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#539: FILE: drivers/base/firmware_class.c:343:
+	if (!firmware) {
+		printk(KERN_ERR "%s: kmalloc(struct firmware) failed\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#540: FILE: drivers/base/firmware_class.c:344:
+		       __FUNCTION__);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#542: FILE: drivers/base/firmware_class.c:346:
+^I^Igoto err_out; $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#545: FILE: drivers/base/firmware_class.c:349:
+	memset(firmware, 0, sizeof (*firmware));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#546: FILE: drivers/base/firmware_class.c:350:
+       $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#546: FILE: drivers/base/firmware_class.c:350:
+       $

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*fw_priv)...) over kmalloc(sizeof(struct firmware_priv)...)
#547: FILE: drivers/base/firmware_class.c:351:
+	fw_priv = kmalloc(sizeof(struct firmware_priv), GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#549: FILE: drivers/base/firmware_class.c:353:
+		printk(KERN_ERR "%s: kmalloc(struct firmware_priv) failed\n",

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#549: FILE: drivers/base/firmware_class.c:353:
+	if (!fw_priv) {
+		printk(KERN_ERR "%s: kmalloc(struct firmware_priv) failed\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#550: FILE: drivers/base/firmware_class.c:354:
+		       __FUNCTION__);

ERROR:CODE_INDENT: code indent should use tabs where possible
#552: FILE: drivers/base/firmware_class.c:356:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#552: FILE: drivers/base/firmware_class.c:356:
+        }$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#554: FILE: drivers/base/firmware_class.c:358:
+	memset(fw_priv, 0, sizeof (*fw_priv));

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*class_dev)...) over kmalloc(sizeof(struct class_device)...)
#564: FILE: drivers/base/firmware_class.c:367:
+	class_dev = kmalloc(sizeof(struct class_device), GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#566: FILE: drivers/base/firmware_class.c:369:
+		printk(KERN_ERR "%s: kmalloc(struct class_device) failed\n",

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#566: FILE: drivers/base/firmware_class.c:369:
+	if (!class_dev) {
+		printk(KERN_ERR "%s: kmalloc(struct class_device) failed\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#567: FILE: drivers/base/firmware_class.c:370:
+		       __FUNCTION__);

ERROR:CODE_INDENT: code indent should use tabs where possible
#588: FILE: drivers/base/firmware_class.c:391:
+^I^I      ^I^I struct device *device)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#588: FILE: drivers/base/firmware_class.c:391:
+^I^I      ^I^I struct device *device)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#588: FILE: drivers/base/firmware_class.c:391:
+static int fw_setup_class_device(struct class_device **class_dev_p,
+		      		 struct device *device)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#618: FILE: drivers/base/firmware_class.c:419:
+^Iif (retval) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#694: FILE: drivers/base/firmware_class.c:464:
+^I^Igoto out; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#729: FILE: drivers/base/firmware_class.c:493:
+^Iclass_device_unregister(class_dev);^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#805: FILE: drivers/base/firmware_class.c:599:
+			printk(KERN_ERR "%s: class_create_file failed\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#806: FILE: drivers/base/firmware_class.c:600:
+			       __FUNCTION__);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#815: FILE: drivers/base/firmware_class.c:607:
 }
+static void __exit firmware_class_exit(void)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#828: FILE: include/linux/kobject.h:59:
+extern int kobject_get_path_length(struct kobject *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#828: FILE: include/linux/kobject.h:59:
+extern int kobject_get_path_length(struct kobject *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#829: FILE: include/linux/kobject.h:60:
+extern void kobject_fill_path(struct kobject *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#829: FILE: include/linux/kobject.h:60:
+extern void kobject_fill_path(struct kobject *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#829: FILE: include/linux/kobject.h:60:
+extern void kobject_fill_path(struct kobject *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#829: FILE: include/linux/kobject.h:60:
+extern void kobject_fill_path(struct kobject *, char *, int);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#856: FILE: lib/kobject.c:88:
+EXPORT_SYMBOL(kobject_get_path_length);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#863: FILE: lib/kobject.c:95:
+ *^I^I^Ikobject_get_path_length $

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#878: FILE: lib/kobject.c:115:
+EXPORT_SYMBOL(kobject_fill_path);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#890: FILE: lib/kobject.c:184:
+	kobj_path_length = kobject_get_path_length (kobj);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#896: FILE: lib/kobject.c:188:
+	kobject_fill_path (kobj, kobj_path, kobj_path_length);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000317407.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 26 errors, 42 warnings, 11 checks, 794 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000317407.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
