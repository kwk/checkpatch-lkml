WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
> > A better point, and one that would actually be useful, would be to remove

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#108: FILE: drivers/pci/pci.h:68:
+extern int pci_pm_init(struct pci_dev *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#109: FILE: drivers/pci/pci.h:69:
+extern void pci_pm_exit(struct pci_dev *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#109: FILE: drivers/pci/pci.h:69:
+extern void pci_pm_exit(struct pci_dev *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#118: FILE: drivers/pci/pci.h:78:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#119: FILE: drivers/pci/pci.h:79:
+
+}

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#127: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#132: FILE: drivers/pci/pm.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#133: FILE: drivers/pci/pm.c:2:
+ * drivers/pci/pm.c - Power management support for PCI devices

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#138: FILE: drivers/pci/pm.c:7:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#139: FILE: drivers/pci/pm.c:8:
+static ssize_t pm_possible_states_show(struct device * d,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#140: FILE: drivers/pci/pm.c:9:
+				       struct device_attribute * a,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#141: FILE: drivers/pci/pm.c:10:
+				       char * buffer)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#143: FILE: drivers/pci/pm.c:12:
+	struct pci_dev * dev = to_pci_dev(d);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#144: FILE: drivers/pci/pm.c:13:
+	char * s = buffer;

WARNING:DEVICE_ATTR_RO: Use DEVICE_ATTR_RO
#155: FILE: drivers/pci/pm.c:24:
+}

The DEVICE_ATTR_RO(name) helper macro can be used instead of
DEVICE_ATTR(name, 0444, name_show, NULL);

Note that the macro automatically appends _show to the named
attribute variable of the device for the show method.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

CHECK:LINE_SPACING: Please don't use multiple blank lines
#159: FILE: drivers/pci/pm.c:28:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#160: FILE: drivers/pci/pm.c:29:
+static ssize_t pm_state_show(struct device * d, struct device_attribute * a,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#160: FILE: drivers/pci/pm.c:29:
+static ssize_t pm_state_show(struct device * d, struct device_attribute * a,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#161: FILE: drivers/pci/pm.c:30:
+			     char * buffer)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#163: FILE: drivers/pci/pm.c:32:
+	struct pci_dev * dev = to_pci_dev(d);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#164: FILE: drivers/pci/pm.c:33:
+	const char * str;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#187: FILE: drivers/pci/pm.c:56:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#188: FILE: drivers/pci/pm.c:57:
+static ssize_t pm_state_store(struct device * d, struct device_attribute * a,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#188: FILE: drivers/pci/pm.c:57:
+static ssize_t pm_state_store(struct device * d, struct device_attribute * a,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#189: FILE: drivers/pci/pm.c:58:
+			      const char * buffer, size_t len)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#191: FILE: drivers/pci/pm.c:60:
+	struct pci_dev * dev = to_pci_dev(d);

WARNING:DEVICE_ATTR_RW: Use DEVICE_ATTR_RW
#215: FILE: drivers/pci/pm.c:84:
+}

The DEVICE_ATTR_RW(name) helper macro can be used instead of
DEVICE_ATTR(name, 0644, name_show, name_store);

Note that the macro automatically appends _show and _store to the
named attribute variable of the device for the show and store methods.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

CHECK:LINE_SPACING: Please don't use multiple blank lines
#219: FILE: drivers/pci/pm.c:88:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#220: FILE: drivers/pci/pm.c:89:
+static int find_states(struct pci_dev * dev)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#225: FILE: drivers/pci/pm.c:94:
+
+

WARNING:TYPO_SPELLING: 'capabilties' may be misspelled - perhaps 'capabilities'?
#232: FILE: drivers/pci/pm.c:101:
+	 * Check if the device has PM capabilties in the config space
 	                              ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#254: FILE: drivers/pci/pm.c:123:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#255: FILE: drivers/pci/pm.c:124:
+int pci_pm_init(struct pci_dev * dev)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#264: FILE: drivers/pci/pm.c:133:
+void pci_pm_exit(struct pci_dev * dev)

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000119211.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 17 errors, 8 warnings, 10 checks, 186 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000119211.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
