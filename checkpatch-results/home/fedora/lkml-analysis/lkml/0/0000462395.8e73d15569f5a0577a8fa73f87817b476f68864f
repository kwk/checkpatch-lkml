WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
Following patch adds support for ATM Ethernet bridging (RFC 2684) implemented by Marcell GAL.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#43: 
# This is a BitKeeper generated patch for the following project:

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#44: 
# Project Name: Linux kernel tree

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
# This patch format is intended for GNU patch command version 2.5 or higher.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#46: 
# This patch includes the following deltas:

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#47: 
#	           ChangeSet	1.449   -> 1.450  

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
#	arch/sparc/config.in	1.8     -> 1.9    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#49: 
#	    net/atm/Makefile	1.3     -> 1.4    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#50: 
#	       net/Config.in	1.8     -> 1.9    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#51: 
#	include/linux/atmdev.h	1.3     -> 1.4    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#52: 
#	    net/atm/common.c	1.8     -> 1.9    

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#53: 
#	Documentation/Configure.help	1.98    -> 1.99   

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#54: 
#	               (new)	        -> 1.1     include/linux/atmbr2684.h

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#55: 
#	               (new)	        -> 1.1     net/atm/br2684.c

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#56: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#57: 
# The following is the BitKeeper ChangeSet Log

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#58: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#59: 
# 02/04/23	maxk@qualcomm.com	1.450

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#60: 
# Support for ATM Ethernet bridging (BR2684)

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#61: 
# --------------------------------------------

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#62: 
#

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#64: 
--- a/Documentation/Configure.help	Tue Apr 23 16:13:18 2002

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#106: FILE: include/linux/atmbr2684.h:1:
+#ifndef _LINUX_ATMBR2684_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'Unsuported' may be misspelled - perhaps 'Unsupported'?
#141: FILE: include/linux/atmbr2684.h:36:
+#define BR2684_ENCAPS_AUTODETECT (2)	/* Unsuported */
                                     	   ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space prohibited after that open parenthesis '('
#203: FILE: include/linux/atmbr2684.h:98:
+#define BR2684_SETFILT	_IOW( 'a', ATMIOC_BACKEND + 0, \

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#214: FILE: include/linux/atmdev.h:98:
+#define ATM_NEWBACKENDIF _IOW('a',ATMIOC_SPECIAL+3,atm_backend_t)
                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#214: FILE: include/linux/atmdev.h:98:
+#define ATM_NEWBACKENDIF _IOW('a',ATMIOC_SPECIAL+3,atm_backend_t)
                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#214: FILE: include/linux/atmdev.h:98:
+#define ATM_NEWBACKENDIF _IOW('a',ATMIOC_SPECIAL+3,atm_backend_t)
                                                   ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#265: FILE: net/atm/br2684.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#266: FILE: net/atm/br2684.c:2:
+/*
+Experimental ethernet netdevice using ATM AAL5 as underlying carrier

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#281: FILE: net/atm/br2684.c:17:
+#include <asm/uaccess.h>

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#289: FILE: net/atm/br2684.c:25:
+/*
+ * Define this to use a version of the code which interacts with the higher

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#291: FILE: net/atm/br2684.c:27:
+ * our header at the begining of the packet.  However, there may still be
                      ^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#299: FILE: net/atm/br2684.c:35:
+#define DPRINTK(format, args...) printk(KERN_DEBUG "br2684: " format, ##args)

WARNING:LINE_SPACING: Missing a blank line after declarations
#310: FILE: net/atm/br2684.c:46:
+	int i = 0;
+	for (i = 0; i < skb->len && i < NUM2PRINT; i++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#310: FILE: net/atm/br2684.c:46:
+	for (i = 0; i < skb->len && i < NUM2PRINT; i++) {
+		sprintf(buf + i * 3, "%2.2x ", 0xff & skb->data[i]);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#313: FILE: net/atm/br2684.c:49:
+	printk(KERN_DEBUG "br2684: skb: %s\n", buf);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: net/atm/br2684.c:56:
+    { 0xAA, 0xAA, 0x03, 0x00, 0x80, 0xC2, 0x00, 0x07, 0x00, 0x00 };$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#320: FILE: net/atm/br2684.c:56:
+static unsigned char llc_oui_pid_pad[] =
+    { 0xAA, 0xAA, 0x03, 0x00, 0x80, 0xC2, 0x00, 0x07, 0x00, 0x00 };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#332: FILE: net/atm/br2684.c:68:
+	void (*old_push)(struct atm_vcc *vcc,struct sk_buff *skb);
 	                                    ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#340: FILE: net/atm/br2684.c:76:
+	unsigned copies_needed, copies_failed;

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#354: FILE: net/atm/br2684.c:90:
+/*
+ * This lock should be held for writing any time the list of devices or

CHECK:SPACING: No space is necessary after a cast
#366: FILE: net/atm/br2684.c:102:
+	return (struct br2684_dev *) ((char *) (net_dev) -

CHECK:SPACING: No space is necessary after a cast
#367: FILE: net/atm/br2684.c:103:
+	    (unsigned long) (&((struct br2684_dev *) 0)->net_dev));

CHECK:SPACING: No space is necessary after a cast
#377: FILE: net/atm/br2684.c:113:
+	return (struct br2684_vcc *) (atmvcc->user_back);

WARNING:LINE_SPACING: Missing a blank line after declarations
#390: FILE: net/atm/br2684.c:126:
+	struct br2684_dev *brdev;
+	switch (s->method) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#402: FILE: net/atm/br2684.c:138:
+			if (!strncmp(brdev->net_dev.name, s->spec.ifname,
+			    sizeof brdev->net_dev.name))

WARNING:SIZEOF_PARENTHESIS: sizeof brdev->net_dev.name should be sizeof(brdev->net_dev.name)
#402: FILE: net/atm/br2684.c:138:
+			    sizeof brdev->net_dev.name))

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#411: FILE: net/atm/br2684.c:147:
+/*
+ * Send a packet out a particular vcc.  Not to useful right now, but paves

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#416: FILE: net/atm/br2684.c:152:
+static int br2684_xmit_vcc(struct sk_buff *skb, struct br2684_dev *brdev,
+	struct br2684_vcc *brvcc)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#423: FILE: net/atm/br2684.c:159:
+	/* last 2 bytes of llc_oui_pid_pad are managed by header routines;
+	   yes, you got it: 8 + 2 = sizeof(llc_oui_pid_pad)

WARNING:LINE_SPACING: Missing a blank line after declarations
#427: FILE: net/atm/br2684.c:163:
+	int minheadroom = (brvcc->encaps == e_llc) ? 10 : 2;
+	if (skb_headroom(skb) < minheadroom) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#429: FILE: net/atm/br2684.c:165:
+		struct sk_buff *skb2 = skb_realloc_headroom(skb, minheadroom);
+		brvcc->copies_needed++;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skb2"
#431: FILE: net/atm/br2684.c:167:
+		if (skb2 == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#448: FILE: net/atm/br2684.c:184:
+^I^I/* we free this here for now, because we cannot know in a higher $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#449: FILE: net/atm/br2684.c:185:
+		/* we free this here for now, because we cannot know in a higher 
+			layer whether the skb point it supplied wasn't freed yet.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#465: FILE: net/atm/br2684.c:201:
+static inline struct br2684_vcc *pick_outgoing_vcc(struct sk_buff *skb,
+	struct br2684_dev *brdev)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'br2684_start_xmit', this function's name, in a string
#476: FILE: net/atm/br2684.c:212:
+	DPRINTK("br2684_start_xmit, skb->dst=%p\n", skb->dst);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!brvcc"
#479: FILE: net/atm/br2684.c:215:
+	if (brvcc == NULL) {

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#490: FILE: net/atm/br2684.c:226:
+		/*
+		 * We should probably use netif_*_queue() here, but that

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#495: FILE: net/atm/br2684.c:231:
+		/* don't free here! this pointer might be no longer valid!
+		dev_kfree_skb(skb);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'br2684_get_stats', this function's name, in a string
#506: FILE: net/atm/br2684.c:242:
+	DPRINTK("br2684_get_stats\n");

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#512: FILE: net/atm/br2684.c:248:
+/*
+ * These mirror eth_header and eth_header_cache.  They are not usually

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#517: FILE: net/atm/br2684.c:253:
+static int (*my_eth_header)(struct sk_buff *, struct net_device *,
+	unsigned short, void *, void *, unsigned);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#517: FILE: net/atm/br2684.c:253:
+	unsigned short, void *, void *, unsigned);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#522: FILE: net/atm/br2684.c:258:
+	      unsigned short type, void *daddr, void *saddr, unsigned len)

WARNING:LINE_SPACING: Missing a blank line after declarations
#526: FILE: net/atm/br2684.c:262:
+	int t = my_eth_header(skb, dev, type, daddr, saddr, len);
+	if (t > 0) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#526: FILE: net/atm/br2684.c:262:
+	if (t > 0) {
[...]
+	} else
[...]

CHECK:SPACING: No space is necessary after a cast
#527: FILE: net/atm/br2684.c:263:
+		pad_before_eth = (u16 *) skb_push(skb, 2);

CHECK:BRACES: Unbalanced braces around else statement
#530: FILE: net/atm/br2684.c:266:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#538: FILE: net/atm/br2684.c:274:
+/* hh_data is 16 bytes long. if encaps is ether-llc we need 24, so
+xmit will add the additional header part in that case */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#538: FILE: net/atm/br2684.c:274:
+xmit will add the additional header part in that case */

WARNING:LINE_SPACING: Missing a blank line after declarations
#541: FILE: net/atm/br2684.c:277:
+	int t = my_eth_header_cache(neigh, hh);
+	DPRINTK("br2684_header_cache, neigh=%p, hh_cache=%p\n", neigh, hh);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'br2684_header_cache', this function's name, in a string
#541: FILE: net/atm/br2684.c:277:
+	DPRINTK("br2684_header_cache, neigh=%p, hh_cache=%p\n", neigh, hh);

CHECK:BRACES: braces {} should be used on all arms of this statement
#542: FILE: net/atm/br2684.c:278:
+	if (t < 0)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#544: FILE: net/atm/br2684.c:280:
+		return t;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#544: FILE: net/atm/br2684.c:280:
+	else {

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#552: FILE: net/atm/br2684.c:288:
+/*
+ * This is similar to eth_type_trans, which cannot be used because of

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#556: FILE: net/atm/br2684.c:292:
+static inline unsigned short br_type_trans(struct sk_buff *skb,
+					       struct net_device *dev)

WARNING:LINE_SPACING: Missing a blank line after declarations
#560: FILE: net/atm/br2684.c:296:
+	unsigned char *rawp;
+	eth = skb->mac.ethernet;

CHECK:BRACES: braces {} should be used on all arms of this statement
#562: FILE: net/atm/br2684.c:298:
+	if (*eth->h_dest & 1) {
[...]
+	else if (memcmp(eth->h_dest, dev->dev_addr, ETH_ALEN))
[...]

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#578: FILE: net/atm/br2684.c:314:
+	/*
+	 * This is a magic hack to spot IPX packets. Older Novell breaks

CHECK:SPACING: No space is necessary after a cast
#583: FILE: net/atm/br2684.c:319:
+	if (*(unsigned short *) rawp == 0xFFFF)

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#587: FILE: net/atm/br2684.c:323:
+	/*
+	 * Real 802.2 LLC

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#594: FILE: net/atm/br2684.c:330:
+/*
+ * We remember when the MAC gets set, so we don't override it later with

WARNING:LINE_SPACING: Missing a blank line after declarations
#601: FILE: net/atm/br2684.c:337:
+	int err = my_eth_mac_addr(dev, p);
+	if (!err)

CHECK:SPACING: No space is necessary after a cast
#613: FILE: net/atm/br2684.c:349:
+	if (copy_from_user(&fs, (void *) arg, sizeof fs))

WARNING:SIZEOF_PARENTHESIS: sizeof fs should be sizeof(fs)
#613: FILE: net/atm/br2684.c:349:
+	if (copy_from_user(&fs, (void *) arg, sizeof fs))

CHECK:BRACES: braces {} should be used on all arms of this statement
#615: FILE: net/atm/br2684.c:351:
+	if (fs.ifspec.method != BR2684_FIND_BYNOTHING) {
[...]
+	} else
[...]

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#617: FILE: net/atm/br2684.c:353:
+		/*
+		 * This is really a per-vcc thing, but we can also search

WARNING:LINE_SPACING: Missing a blank line after declarations
#621: FILE: net/atm/br2684.c:357:
+		struct br2684_dev *brdev;
+		read_lock(&devs_lock);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!brdev"
#623: FILE: net/atm/br2684.c:359:
+		if (brdev == NULL || list_empty(&brdev->brvccs) ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!brvcc"
#629: FILE: net/atm/br2684.c:365:
+		if (brvcc == NULL)

CHECK:BRACES: Unbalanced braces around else statement
#631: FILE: net/atm/br2684.c:367:
+	} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'skb->data'
#643: FILE: net/atm/br2684.c:379:
+	if (type == __constant_htons(ETH_P_IP) &&
+	    (((struct iphdr *) (skb->data))->daddr & brvcc->filter.
+	     netmask) == brvcc->filter.prefix)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#643: FILE: net/atm/br2684.c:379:
+	if (type == __constant_htons(ETH_P_IP) &&

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

CHECK:SPACING: No space is necessary after a cast
#644: FILE: net/atm/br2684.c:380:
+	    (((struct iphdr *) (skb->data))->daddr & brvcc->filter.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'brvcc->filter.netmask'
#645: FILE: net/atm/br2684.c:381:
+	    (((struct iphdr *) (skb->data))->daddr & brvcc->filter.
+	     netmask) == brvcc->filter.prefix)

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:CONSTANT_CONVERSION: __constant_htons should be htons
#647: FILE: net/atm/br2684.c:383:
+	if (type == __constant_htons(ETH_P_ARP))

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'br2684_push', this function's name, in a string
#675: FILE: net/atm/br2684.c:411:
+	DPRINTK("br2684_push\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skb"
#677: FILE: net/atm/br2684.c:413:
+	if (skb == NULL) {	/* skb==NULL means VCC is being destroyed */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#694: FILE: net/atm/br2684.c:430:
+		/* let us waste some time for checking the encapsulation.
+		   Note, that only 7 char is checked so frames with a valid FCS

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#695: FILE: net/atm/br2684.c:431:
+		   are also accepted (but FCS is not checked of course) */

CHECK:SPACING: No space is necessary after a cast
#704: FILE: net/atm/br2684.c:440:
+		if (*((u16 *) (skb->data)) != 0) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'skb->data'
#704: FILE: net/atm/br2684.c:440:
+		if (*((u16 *) (skb->data)) != 0) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#718: FILE: net/atm/br2684.c:454:
+	/* FIXME: tcpdump shows that pointer to mac header is 2 bytes earlier,
+	   than should be. What else should I set? */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#718: FILE: net/atm/br2684.c:454:
+	   than should be. What else should I set? */

CHECK:SPACING: No space is necessary after a cast
#720: FILE: net/atm/br2684.c:456:
+	skb->mac.raw = ((char *) (skb->data)) - ETH_HLEN;

CHECK:SPACING: No space is necessary after a cast
#723: FILE: net/atm/br2684.c:459:
+	skb->protocol = ((u16 *) skb->data)[-1];

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#755: FILE: net/atm/br2684.c:491:
+/* assign a vcc to a dev
+Note: we do not have explicit unassign, but look at _push()

CHECK:SPACING: No space is necessary after a cast
#765: FILE: net/atm/br2684.c:501:
+	if (copy_from_user(&be, (void *) arg, sizeof be)) {

WARNING:SIZEOF_PARENTHESIS: sizeof be should be sizeof(be)
#765: FILE: net/atm/br2684.c:501:
+	if (copy_from_user(&be, (void *) arg, sizeof be)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!brdev"
#771: FILE: net/atm/br2684.c:507:
+	if (brdev == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#772: FILE: net/atm/br2684.c:508:
+		printk(KERN_ERR

WARNING:TYPO_SPELLING: 'non-existant' may be misspelled - perhaps 'non-existent'?
#773: FILE: net/atm/br2684.c:509:
+		    "br2684: tried to attach to non-existant device\n");
 		                                ^^^^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!atmvcc->push"
#777: FILE: net/atm/br2684.c:513:
+	if (atmvcc->push == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*brvcc)...) over kmalloc(sizeof(struct br2684_vcc)...)
#792: FILE: net/atm/br2684.c:528:
+	brvcc = kmalloc(sizeof(struct br2684_vcc), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'br2684_regvcc', this function's name, in a string
#798: FILE: net/atm/br2684.c:534:
+	DPRINTK("br2684_regvcc vcc=%p, encaps=%d, brvcc=%p\n", atmvcc, be.encaps,

WARNING:LINE_SPACING: Missing a blank line after declarations
#802: FILE: net/atm/br2684.c:538:
+		unsigned char *esi = atmvcc->dev->esi;
+		if (esi[0] | esi[1] | esi[2] | esi[3] | esi[4] | esi[5])

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#804: FILE: net/atm/br2684.c:540:
+			memcpy(brdev->net_dev.dev_addr, esi,
+			    brdev->net_dev.addr_len);

CHECK:SPACING: No space is necessary after a cast
#813: FILE: net/atm/br2684.c:549:
+	brvcc->encaps = (enum br2684_encaps) be.encaps;

WARNING:INDENTED_LABEL: labels should not be indented
#825: FILE: net/atm/br2684.c:561:
+    error:

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'br2684_create', this function's name, in a string
#837: FILE: net/atm/br2684.c:573:
+	DPRINTK("br2684_create\n");

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#839: FILE: net/atm/br2684.c:575:
+	/*
+	 * We track module use by vcc's NOT the devices they're on.  We're

CHECK:SPACING: No space is necessary after a cast
#845: FILE: net/atm/br2684.c:581:
+	if (copy_from_user(&ni, (void *) arg, sizeof ni)) {

WARNING:SIZEOF_PARENTHESIS: sizeof ni should be sizeof(ni)
#845: FILE: net/atm/br2684.c:581:
+	if (copy_from_user(&ni, (void *) arg, sizeof ni)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#853: FILE: net/atm/br2684.c:589:
+	if ((brdev = kmalloc(sizeof(struct br2684_dev), GFP_KERNEL)) == NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*brdev)...) over kmalloc(sizeof(struct br2684_dev)...)
#853: FILE: net/atm/br2684.c:589:
+	if ((brdev = kmalloc(sizeof(struct br2684_dev), GFP_KERNEL)) == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#866: FILE: net/atm/br2684.c:602:
+	if (ni.ifname[0] != '\0') {
[...]
+	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#868: FILE: net/atm/br2684.c:604:
+		memcpy(brdev->net_dev.name, ni.ifname,
+		    sizeof(brdev->net_dev.name));

CHECK:BRACES: Unbalanced braces around else statement
#870: FILE: net/atm/br2684.c:606:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#891: FILE: net/atm/br2684.c:627:
+		printk(KERN_ERR "br2684_create: register_netdev failed\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'br2684_create', this function's name, in a string
#891: FILE: net/atm/br2684.c:627:
+		printk(KERN_ERR "br2684_create: register_netdev failed\n");

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#902: FILE: net/atm/br2684.c:638:
+/*
+ * This handles ioctls actually performed on our vcc - we must return

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#906: FILE: net/atm/br2684.c:642:
+static int br2684_ioctl(struct atm_vcc *atmvcc, unsigned int cmd,
+	unsigned long arg)

WARNING:LINE_SPACING: Missing a blank line after declarations
#909: FILE: net/atm/br2684.c:645:
+	int err;
+	switch(cmd) {

ERROR:SPACING: space required before the open parenthesis '('
#909: FILE: net/atm/br2684.c:645:
+	switch(cmd) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#913: FILE: net/atm/br2684.c:649:
+		atm_backend_t b;
+		MOD_INC_USE_COUNT;

CHECK:SPACING: No space is necessary after a cast
#914: FILE: net/atm/br2684.c:650:
+		err = get_user(b, (atm_backend_t *) arg);

WARNING:LINE_SPACING: Missing a blank line after declarations
#948: FILE: net/atm/br2684.c:684:
+	struct br2684_vcc *brvcc;
+	list_for_each(lhd, &br2684_devs) {

WARNING:SPLIT_STRING: quoted string split across lines
#952: FILE: net/atm/br2684.c:688:
+			return sprintf(buf, "dev %.16s: num=%d, mac=%02X:%02X:"
+			    "%02X:%02X:%02X:%02X (%s)\n", brdev->net_dev.name,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#977: FILE: net/atm/br2684.c:713:
+#define b1(var, byte)	((u8 *) &brvcc->filter.var)[byte]

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#978: FILE: net/atm/br2684.c:714:
+#define bs(var)		b1(var, 0), b1(var, 1), b1(var, 2), b1(var, 3)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#978: FILE: net/atm/br2684.c:714:
+#define bs(var)		b1(var, 0), b1(var, 1), b1(var, 2), b1(var, 3)

WARNING:SPLIT_STRING: quoted string split across lines
#981: FILE: net/atm/br2684.c:717:
+				return sprintf(buf, "    filter=%d.%d.%d.%d/"
+				    "%d.%d.%d.%d\n", bs(prefix), bs(netmask));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#991: FILE: net/atm/br2684.c:727:
+static ssize_t br2684_proc_read(struct file *file, char *buf, size_t count,
+	loff_t *pos)

WARNING:LINE_SPACING: Missing a blank line after declarations
#995: FILE: net/atm/br2684.c:731:
+	int len = 0, x, left;
+	page = get_free_page(GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#1003: FILE: net/atm/br2684.c:739:
+		x = br2684_proc_engine(*pos, &((char *) page)[len]);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1008: FILE: net/atm/br2684.c:744:
+			/*
+			 * This should only happen if the user passed in

CHECK:SPACING: No space is necessary after a cast
#1023: FILE: net/atm/br2684.c:759:
+	if (len > 0 && copy_to_user(buf, (char *) page, len))

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1029: FILE: net/atm/br2684.c:765:
+static struct file_operations br2684_proc_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#1030: FILE: net/atm/br2684.c:766:
+	read: br2684_proc_read,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1033: FILE: net/atm/br2684.c:769:
+extern struct proc_dir_entry *atm_proc_root;	/* from proc.c */

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1035: FILE: net/atm/br2684.c:771:
+extern int (*br2684_ioctl_hook)(struct atm_vcc *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct atm_vcc *' should also have an identifier name
#1035: FILE: net/atm/br2684.c:771:
+extern int (*br2684_ioctl_hook)(struct atm_vcc *, unsigned int, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1035: FILE: net/atm/br2684.c:771:
+extern int (*br2684_ioctl_hook)(struct atm_vcc *, unsigned int, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1035: FILE: net/atm/br2684.c:771:
+extern int (*br2684_ioctl_hook)(struct atm_vcc *, unsigned int, unsigned long);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#1038: FILE: net/atm/br2684.c:774:
+#define UNUSED __attribute__((unused))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1043: FILE: net/atm/br2684.c:779:
+	struct proc_dir_entry *p;
+	if ((p = create_proc_entry("br2684", 0, atm_proc_root)) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1043: FILE: net/atm/br2684.c:779:
+	if ((p = create_proc_entry("br2684", 0, atm_proc_root)) == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1053: FILE: net/atm/br2684.c:789:
+	struct br2684_dev *brdev;
+	br2684_ioctl_hook = NULL;

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000462395.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 102 warnings, 48 checks, 1004 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000462395.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
