WARNING:LEADING_SPACE: please, no spaces at the start of a line
#48: FILE: utils.c:273:
+  if (strcmp(pathname, "_TMP") != 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#48: FILE: utils.c:273:
+  if (strcmp(pathname, "_TMP") != 0)
+    status = acpi_evaluate_object(handle, pathname, arguments, &buffer);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#49: FILE: utils.c:274:
+    status = acpi_evaluate_object(handle, pathname, arguments, &buffer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#50: FILE: utils.c:275:
+    else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#50: FILE: utils.c:275:
+    else {
+      printk(KERN_INFO PREFIX "acpi_evaluate_integer: Faking _TMP\n");

CHECK:BRACES: Unbalanced braces around else statement
#50: FILE: utils.c:275:
+    else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#51: FILE: utils.c:276:
+      printk(KERN_INFO PREFIX "acpi_evaluate_integer: Faking _TMP\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#51: FILE: utils.c:276:
+      printk(KERN_INFO PREFIX "acpi_evaluate_integer: Faking _TMP\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'acpi_evaluate_integer', this function's name, in a string
#51: FILE: utils.c:276:
+      printk(KERN_INFO PREFIX "acpi_evaluate_integer: Faking _TMP\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:CODE_INDENT: code indent should use tabs where possible
#52: FILE: utils.c:277:
+        status = AE_OK;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#52: FILE: utils.c:277:
+        status = AE_OK;$

WARNING:TABSTOP: Statements should start on a tabstop
#55: FILE: utils.c:280:
+	     }

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#57: FILE: utils.c:281:
	if (ACPI_FAILURE(status)) {

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000094685.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 10 warnings, 1 checks, 23 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000094685.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
