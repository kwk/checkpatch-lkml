WARNING:TYPO_SPELLING: 'moniter' may be misspelled - perhaps 'monitor'?
#32: 
moniter kernel global variables and dump the debugging information such
^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'excution' may be misspelled - perhaps 'execution'?
#50: 
	excution at do_fork.
	^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#94: FILE: arch/i386/kernel/kwatch.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/kdebug.h> instead of <asm/kdebug.h>
#105: FILE: arch/i386/kernel/kwatch.c:12:
+#include <asm/kdebug.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/bitops.h> instead of <asm/bitops.h>
#107: FILE: arch/i386/kernel/kwatch.c:14:
+#include <asm/bitops.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#132: FILE: arch/i386/kernel/kwatch.c:39:
+	struct dr_info dr;
+	dr.debugreg = debugreg;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#148: FILE: arch/i386/kernel/kwatch.c:55:
+	if (!(condition & (DR_TRAP0|DR_TRAP1|DR_TRAP2|DR_TRAP3))) {
 	                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#148: FILE: arch/i386/kernel/kwatch.c:55:
+	if (!(condition & (DR_TRAP0|DR_TRAP1|DR_TRAP2|DR_TRAP3))) {
 	                                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#148: FILE: arch/i386/kernel/kwatch.c:55:
+	if (!(condition & (DR_TRAP0|DR_TRAP1|DR_TRAP2|DR_TRAP3))) {
 	                                             ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#148: FILE: arch/i386/kernel/kwatch.c:55:
+	if (!(condition & (DR_TRAP0|DR_TRAP1|DR_TRAP2|DR_TRAP3))) {
+		return 0;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#156: FILE: arch/i386/kernel/kwatch.c:63:
+	if (kwatch_in_progress) {
+		goto recursed;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#165: FILE: arch/i386/kernel/kwatch.c:72:
+	if (kwatch_list[debugreg].handler) {
+		kwatch_list[debugreg].handler(&kwatch_list[debugreg], regs);
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#185: FILE: arch/i386/kernel/kwatch.c:92:
+int register_kwatch(unsigned long addr, u8 length, u8 type,
+		kwatch_handler_t handler)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#191: FILE: arch/i386/kernel/kwatch.c:98:
+	if (debugreg < 0) {
+		return -1;
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#237: FILE: arch/i386/kernel/kwatch.c:144:
+	struct die_args *args = (struct die_args *)data;
+	switch (val) {

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#261: FILE: arch/i386/kernel/kwatch.c:168:
+__initcall(init_kwatch);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#263: FILE: arch/i386/kernel/kwatch.c:170:
+EXPORT_SYMBOL_GPL(register_kwatch);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#264: FILE: arch/i386/kernel/kwatch.c:171:
+EXPORT_SYMBOL_GPL(unregister_kwatch);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#291: FILE: include/asm-i386/kwatch.h:1:
+#ifndef _ASM_KWATCH_H

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#295: FILE: include/asm-i386/kwatch.h:5:
+ *  ^IVamsi Krishna S <vamsi_krishna@in.ibm.com>, Oct, 2002$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#313: FILE: include/asm-i386/kwatch.h:23:
+extern int register_kwatch(unsigned long addr, u8 length, u8 type, kwatch_handler_t handler);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#314: FILE: include/asm-i386/kwatch.h:24:
+extern void unregister_kwatch(int debugreg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#315: FILE: include/asm-i386/kwatch.h:25:
+extern int kwatch_handler(unsigned long condition, struct pt_regs *regs);

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#317: FILE: include/asm-i386/kwatch.h:27:
+static inline int register_kwatch(unsigned long addr, u8 length, u8 type, kwatch_handler_t handler) { return -ENOSYS; }

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#317: FILE: include/asm-i386/kwatch.h:27:
+static inline int register_kwatch(unsigned long addr, u8 length, u8 type, kwatch_handler_t handler) { return -ENOSYS; }

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000240714.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 16 warnings, 9 checks, 229 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000240714.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
