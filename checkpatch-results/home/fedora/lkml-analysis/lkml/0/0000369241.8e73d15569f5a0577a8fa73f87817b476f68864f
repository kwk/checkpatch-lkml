ERROR:TRAILING_WHITESPACE: trailing whitespace
#60: FILE: fs/ext3/ialloc.c:579:
+^Iei->i_crtime = CURRENT_TIME;^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#61: FILE: fs/ext3/ialloc.c:580:
+	if (EXT3_INODE_SIZE(inode->i_sb) > EXT3_GOOD_OLD_INODE_SIZE) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#62: FILE: fs/ext3/ialloc.c:581:
+^I^Iei->i_extra_isize = ^Isizeof(__u16)^I/* i_extra_isize */$

CHECK:BRACES: Unbalanced braces around else statement
#68: FILE: fs/ext3/ialloc.c:587:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#83: FILE: fs/ext3/xattr.c:75:
+		printk(KERN_DEBUG "inode %s:%lu: ", \

CHECK:SPACING: No space is necessary after a cast
#84: FILE: fs/ext3/xattr.c:76:
+			inode->i_sb->s_id, (unsigned long) inode->i_ino); \

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#92: FILE: fs/ext3/xattr.c:82:
+		printk(KERN_DEBUG "block %s:%lu: ", \

CHECK:SPACING: No space is necessary after a cast
#93: FILE: fs/ext3/xattr.c:83:
+			bdevname(bh->b_bdev, b), (unsigned long) bh->b_blocknr); \

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#115: FILE: fs/ext3/xattr.c:265:
+ext3_xattr_block_get(struct inode *inode, int name_index, const char *name,
 	       void *buffer, size_t buffer_size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#130: FILE: fs/ext3/xattr.c:359:
+ext3_xattr_ibody_get(struct inode *inode, int name_index, const char *name,
+	       void *buffer, size_t buffer_size)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#137: FILE: fs/ext3/xattr.c:366:
+^I$

CHECK:SPACING: No space is necessary after a cast
#149: FILE: fs/ext3/xattr.c:378:
+	start = (char *) iloc.raw_inode + EXT3_GOOD_OLD_INODE_SIZE +

CHECK:SPACING: No space is necessary after a cast
#151: FILE: fs/ext3/xattr.c:380:
+	if (le32_to_cpu((*(__u32*) start)) != EXT3_XATTR_MAGIC) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#151: FILE: fs/ext3/xattr.c:380:
+	if (le32_to_cpu((*(__u32*) start)) != EXT3_XATTR_MAGIC) {

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#156: FILE: fs/ext3/xattr.c:385:
+	end = (char *) iloc.raw_inode + EXT3_SB(inode->i_sb)->s_inode_size;

CHECK:SPACING: No space is necessary after a cast
#158: FILE: fs/ext3/xattr.c:387:
+	last = (struct ext3_xattr_entry *) start;

WARNING:LINE_SPACING: Missing a blank line after declarations
#161: FILE: fs/ext3/xattr.c:390:
+		struct ext3_xattr_entry *next = EXT3_XATTR_NEXT(last);
+		if (le32_to_cpu(last->e_value_size) > storage_size ||

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#162: FILE: fs/ext3/xattr.c:391:
+		if (le32_to_cpu(last->e_value_size) > storage_size ||
+				(char *) next >= end) {

CHECK:SPACING: No space is necessary after a cast
#162: FILE: fs/ext3/xattr.c:391:
+				(char *) next >= end) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#164: FILE: fs/ext3/xattr.c:393:
+			ext3_error(inode->i_sb, "ext3_xattr_ibody_get",
+				"inode %ld", inode->i_ino);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#178: FILE: fs/ext3/xattr.c:407:
+^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#181: FILE: fs/ext3/xattr.c:410:
+	if (buffer) {
[...]
+	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#185: FILE: fs/ext3/xattr.c:414:
+			memcpy(buffer, start + le16_to_cpu(last->e_value_offs),
+				size);

CHECK:BRACES: Unbalanced braces around else statement
#188: FILE: fs/ext3/xattr.c:417:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#213: FILE: fs/ext3/xattr.c:441:
+	err = ext3_xattr_ibody_get(inode, name_index, name,
+					buffer, buffer_size);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#218: FILE: fs/ext3/xattr.c:446:
+^I$

CHECK:SPACING: No space is necessary after a cast
#238: FILE: fs/ext3/xattr.c:475:
+		(int) atomic_read(&(bh->b_count)), (int) le32_to_cpu(HDR(bh)->h_refcount));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around bh->b_count
#238: FILE: fs/ext3/xattr.c:475:
+		(int) atomic_read(&(bh->b_count)), (int) le32_to_cpu(HDR(bh)->h_refcount));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_WHITESPACE: trailing whitespace
#259: FILE: fs/ext3/xattr.c:543:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#264: FILE: fs/ext3/xattr.c:548:
+^Iif (ret) $

CHECK:SPACING: No space is necessary after a cast
#271: FILE: fs/ext3/xattr.c:555:
+	start = (char *) iloc.raw_inode + EXT3_GOOD_OLD_INODE_SIZE +

CHECK:SPACING: No space is necessary after a cast
#273: FILE: fs/ext3/xattr.c:557:
+	if (le32_to_cpu((*(__u32*) start)) != EXT3_XATTR_MAGIC) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#273: FILE: fs/ext3/xattr.c:557:
+	if (le32_to_cpu((*(__u32*) start)) != EXT3_XATTR_MAGIC) {

CHECK:SPACING: No space is necessary after a cast
#278: FILE: fs/ext3/xattr.c:562:
+	end = (char *) iloc.raw_inode + EXT3_SB(inode->i_sb)->s_inode_size;

CHECK:SPACING: No space is necessary after a cast
#280: FILE: fs/ext3/xattr.c:564:
+	last = (struct ext3_xattr_entry *) start;

WARNING:LINE_SPACING: Missing a blank line after declarations
#284: FILE: fs/ext3/xattr.c:568:
+		struct ext3_xattr_handler *handler;
+		if (le32_to_cpu(last->e_value_size) > storage_size ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#285: FILE: fs/ext3/xattr.c:569:
+		if (le32_to_cpu(last->e_value_size) > storage_size ||
+				(char *) next >= end) {

CHECK:SPACING: No space is necessary after a cast
#285: FILE: fs/ext3/xattr.c:569:
+				(char *) next >= end) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#287: FILE: fs/ext3/xattr.c:571:
+			ext3_error(inode->i_sb, "ext3_xattr_ibody_list",
+				"inode %ld", inode->i_ino);

CHECK:SPACING: No space is necessary after a cast
#307: FILE: fs/ext3/xattr.c:591:
+	last = (struct ext3_xattr_entry *) start;

WARNING:LINE_SPACING: Missing a blank line after declarations
#312: FILE: fs/ext3/xattr.c:596:
+		struct ext3_xattr_handler *handler;
+		handler = ext3_xattr_handler(last->e_name_index);

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#343: FILE: fs/ext3/xattr.c:627:
+		/* some error occured while collecting 
 		              ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#343: FILE: fs/ext3/xattr.c:627:
+^I^I/* some error occured while collecting $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#344: FILE: fs/ext3/xattr.c:628:
+		 * attributes in inode body */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#348: FILE: fs/ext3/xattr.c:632:
+^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#352: FILE: fs/ext3/xattr.c:636:
+		if (buffer_size <= 0) {
[...]
+		} else 
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#355: FILE: fs/ext3/xattr.c:639:
+^I^I} else $

CHECK:BRACES: Unbalanced braces around else statement
#355: FILE: fs/ext3/xattr.c:639:
+		} else 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#358: FILE: fs/ext3/xattr.c:642:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#379: FILE: fs/ext3/xattr.c:676:
+ext3_xattr_ibody_find(struct inode *inode, int name_index, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#380: FILE: fs/ext3/xattr.c:677:
+ext3_xattr_ibody_find(struct inode *inode, int name_index, 
+		const char *name, struct ext3_xattr_entry *rentry, int *free)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#388: FILE: fs/ext3/xattr.c:685:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#393: FILE: fs/ext3/xattr.c:690:
+^Iif (err) $

CHECK:SPACING: No space is necessary after a cast
#401: FILE: fs/ext3/xattr.c:698:
+	start = (char *) iloc.raw_inode + EXT3_GOOD_OLD_INODE_SIZE +

CHECK:SPACING: No space is necessary after a cast
#403: FILE: fs/ext3/xattr.c:700:
+	if (le32_to_cpu((*(__u32*) start)) != EXT3_XATTR_MAGIC) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#403: FILE: fs/ext3/xattr.c:700:
+	if (le32_to_cpu((*(__u32*) start)) != EXT3_XATTR_MAGIC) {

CHECK:SPACING: No space is necessary after a cast
#408: FILE: fs/ext3/xattr.c:705:
+	end = (char *) iloc.raw_inode + EXT3_SB(inode->i_sb)->s_inode_size;

CHECK:SPACING: No space is necessary after a cast
#410: FILE: fs/ext3/xattr.c:707:
+	last = (struct ext3_xattr_entry *) start;

WARNING:LINE_SPACING: Missing a blank line after declarations
#413: FILE: fs/ext3/xattr.c:710:
+		struct ext3_xattr_entry *next = EXT3_XATTR_NEXT(last);
+		if (le32_to_cpu(last->e_value_size) > storage_size ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#414: FILE: fs/ext3/xattr.c:711:
+		if (le32_to_cpu(last->e_value_size) > storage_size ||
+				(char *) next >= end) {

CHECK:SPACING: No space is necessary after a cast
#414: FILE: fs/ext3/xattr.c:711:
+				(char *) next >= end) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#416: FILE: fs/ext3/xattr.c:713:
+			ext3_error(inode->i_sb, "ext3_xattr_ibody_find",
+				"inode %ld", inode->i_ino);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#432: FILE: fs/ext3/xattr.c:729:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#445: FILE: fs/ext3/xattr.c:742:
+ext3_xattr_block_find(struct inode *inode, int name_index, const char *name,
+	       struct ext3_xattr_entry *rentry, int *free)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#463: FILE: fs/ext3/xattr.c:760:
+	ea_bdebug(bh, "b_count=%d, refcount=%d",
+		atomic_read(&(bh->b_count)), le32_to_cpu(HDR(bh)->h_refcount));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around bh->b_count
#463: FILE: fs/ext3/xattr.c:760:
+		atomic_read(&(bh->b_count)), le32_to_cpu(HDR(bh)->h_refcount));

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#465: FILE: fs/ext3/xattr.c:762:
+	if (HDR(bh)->h_magic != cpu_to_le32(EXT3_XATTR_MAGIC) ||
[...]
+			"inode %ld: bad block %d", inode->i_ino,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#501: FILE: fs/ext3/xattr.c:798:
+ * $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#506: FILE: fs/ext3/xattr.c:803:
+ext3_xattr_ibody_set(handle_t *handle, struct inode *inode, int name_index,
+		      const char *name, const void *value, size_t value_len,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#518: FILE: fs/ext3/xattr.c:815:
+^I$

CHECK:SPACING: No space is necessary after a cast
#531: FILE: fs/ext3/xattr.c:828:
+	start = (char *) iloc.raw_inode + EXT3_GOOD_OLD_INODE_SIZE +

CHECK:SPACING: No space is necessary after a cast
#533: FILE: fs/ext3/xattr.c:830:
+	if ((*(__u32*) start) != EXT3_XATTR_MAGIC) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#533: FILE: fs/ext3/xattr.c:830:
+	if ((*(__u32*) start) != EXT3_XATTR_MAGIC) {

CHECK:SPACING: No space is necessary after a cast
#535: FILE: fs/ext3/xattr.c:832:
+		*((__u32*) start) = cpu_to_le32(EXT3_XATTR_MAGIC);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#535: FILE: fs/ext3/xattr.c:832:
+		*((__u32*) start) = cpu_to_le32(EXT3_XATTR_MAGIC);

CHECK:SPACING: No space is necessary after a cast
#538: FILE: fs/ext3/xattr.c:835:
+	end = (char *) iloc.raw_inode +	EXT3_SB(inode->i_sb)->s_inode_size;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#542: FILE: fs/ext3/xattr.c:839:
+^Ilast = (struct ext3_xattr_entry *) start;^I$

CHECK:SPACING: No space is necessary after a cast
#542: FILE: fs/ext3/xattr.c:839:
+	last = (struct ext3_xattr_entry *) start;	

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#546: FILE: fs/ext3/xattr.c:843:
+		if (le32_to_cpu(last->e_value_size) > storage_size ||
+				(char *) next >= end) {

CHECK:SPACING: No space is necessary after a cast
#546: FILE: fs/ext3/xattr.c:843:
+				(char *) next >= end) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#548: FILE: fs/ext3/xattr.c:845:
+			ext3_error(inode->i_sb, "ext3_xattr_ibody_set",
+				"inode %ld", inode->i_ino);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#552: FILE: fs/ext3/xattr.c:849:
+^I^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#555: FILE: fs/ext3/xattr.c:852:
+			int offs = le16_to_cpu(last->e_value_offs);
+			if (offs < min_offs)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#559: FILE: fs/ext3/xattr.c:856:
+		if (name_index == last->e_name_index &&
+			name_len == last->e_name_len &&

ERROR:TRAILING_WHITESPACE: trailing whitespace
#560: FILE: fs/ext3/xattr.c:857:
+^I^I^I!memcmp(name, last->e_name, name_len)) $

CHECK:BRACES: Unbalanced braces around else statement
#562: FILE: fs/ext3/xattr.c:859:
+		else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#564: FILE: fs/ext3/xattr.c:861:
+			 * because it will be removed before changing */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#575: FILE: fs/ext3/xattr.c:872:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#578: FILE: fs/ext3/xattr.c:875:
+^I^Ibrelse(bh);^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#591: FILE: fs/ext3/xattr.c:888:
+		memmove(start + min_offs + size, start + min_offs,
+				border - min_offs);

CHECK:SPACING: No space is necessary after a cast
#594: FILE: fs/ext3/xattr.c:891:
+		e = (struct ext3_xattr_entry *) start;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#597: FILE: fs/ext3/xattr.c:894:
+^I^I^Iint offs = le16_to_cpu(e->e_value_offs); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#598: FILE: fs/ext3/xattr.c:895:
+^I^I^Iif (offs < border) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#598: FILE: fs/ext3/xattr.c:895:
+			int offs = le16_to_cpu(e->e_value_offs); 
+			if (offs < border) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#599: FILE: fs/ext3/xattr.c:896:
+^I^I^I^Ie->e_value_offs = $

CHECK:SPACING: No space is necessary after a cast
#607: FILE: fs/ext3/xattr.c:904:
+		src = (char *) here + EXT3_XATTR_LEN(here->e_name_len);

CHECK:SPACING: No space is necessary after a cast
#608: FILE: fs/ext3/xattr.c:905:
+		size = (char *) last - src;

CHECK:SPACING: No space is necessary after a cast
#609: FILE: fs/ext3/xattr.c:906:
+		if ((char *) here + size > end)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#610: FILE: fs/ext3/xattr.c:907:
+			printk("ALERT at %s:%d: 0x%p + %d > 0x%p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#611: FILE: fs/ext3/xattr.c:908:
+			printk("ALERT at %s:%d: 0x%p + %d > 0x%p\n",
+					__FILE__, __LINE__, here, size, end);

CHECK:SPACING: No space is necessary after a cast
#613: FILE: fs/ext3/xattr.c:910:
+		last = (struct ext3_xattr_entry *) ((char *) last - border);

CHECK:SPACING: No space is necessary after a cast
#614: FILE: fs/ext3/xattr.c:911:
+		*((__u32 *) last) = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#616: FILE: fs/ext3/xattr.c:913:
+^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#624: FILE: fs/ext3/xattr.c:921:
+		last->e_hash = last->e_value_block = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#628: FILE: fs/ext3/xattr.c:925:
+			printk("ALERT at %s:%d: 0x%p + %d + %d > 0x%p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#629: FILE: fs/ext3/xattr.c:926:
+			printk("ALERT at %s:%d: 0x%p + %d + %d > 0x%p\n",
+					__FILE__, __LINE__, start, offs,

CHECK:SPACING: No space is necessary after a cast
#633: FILE: fs/ext3/xattr.c:930:
+		*((__u32 *) last) = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#635: FILE: fs/ext3/xattr.c:932:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#657: FILE: fs/ext3/xattr.c:960:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!value"
#665: FILE: fs/ext3/xattr.c:968:
+	if (value == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#667: FILE: fs/ext3/xattr.c:970:
+	if (name == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#676: FILE: fs/ext3/xattr.c:979:
+	if (err == 0) {
[...]
+	} else if (err == -ENOENT) {
[...]
+	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#684: FILE: fs/ext3/xattr.c:987:
+		err = ext3_xattr_block_find(inode, name_index, name,
+						&entry, &free2);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#687: FILE: fs/ext3/xattr.c:990:
+^I^I^Igoto finish;^I$

CHECK:BRACES: Unbalanced braces around else statement
#692: FILE: fs/ext3/xattr.c:995:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#711: FILE: fs/ext3/xattr.c:1014:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#717: FILE: fs/ext3/xattr.c:1020:
+			ext3_xattr_ibody_set(handle, inode, name_index, name,
+					NULL, 0, flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#721: FILE: fs/ext3/xattr.c:1024:
+			ext3_xattr_block_set(handle, inode, name_index, name,
+					NULL, 0, flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#727: FILE: fs/ext3/xattr.c:1030:
+	err = ext3_xattr_ibody_set(handle, inode, name_index, name,
+				value, value_len, flags);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#732: FILE: fs/ext3/xattr.c:1035:
+^I^I^I^I^Iname, value, value_len, flags);^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#732: FILE: fs/ext3/xattr.c:1035:
+		err = ext3_xattr_block_set(handle, inode, name_index,
+					name, value, value_len, flags);	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#735: FILE: fs/ext3/xattr.c:1038:
+finish:^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#742: FILE: fs/ext3/xattr.c:1045:
+ * $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#747: FILE: fs/ext3/xattr.c:1050:
+ext3_xattr_block_set(handle_t *handle, struct inode *inode, int name_index,
 		      const char *name, const void *value, size_t value_len,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#771: FILE: fs/ext3/xattr.c:1073:
+^I$

CHECK:SPACING: No space is necessary after a cast
#788: FILE: fs/ext3/xattr.c:1298:
+				(long int) new_bh->b_blocknr);

WARNING:UNNECESSARY_INT: Prefer 'long' over 'long int' as the int is unnecessary
#788: FILE: fs/ext3/xattr.c:1298:
+				(long int) new_bh->b_blocknr);

CHECK:BRACES: braces {} should be used on all arms of this statement
#799: FILE: fs/ext3/inode.c:2329:
+	if (EXT3_INODE_SIZE(inode->i_sb) > EXT3_GOOD_OLD_INODE_SIZE) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#811: FILE: fs/ext3/inode.c:2341:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#813: FILE: fs/ext3/inode.c:2343:
+^I$

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#846: FILE: fs/ext3/xattr.h:78:
+extern int ext3_xattr_set_handle(handle_t *, struct inode *, int, const char *,const void *,size_t,int);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:OxV)
#846: FILE: fs/ext3/xattr.h:78:
+extern int ext3_xattr_set_handle(handle_t *, struct inode *, int, const char *,const void *,size_t,int);
                                                                               ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#846: FILE: fs/ext3/xattr.h:78:
+extern int ext3_xattr_set_handle(handle_t *, struct inode *, int, const char *,const void *,size_t,int);
                                                                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#846: FILE: fs/ext3/xattr.h:78:
+extern int ext3_xattr_set_handle(handle_t *, struct inode *, int, const char *,const void *,size_t,int);
                                                                                                   ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#846: FILE: fs/ext3/xattr.h:78:
+extern int ext3_xattr_set_handle(handle_t *, struct inode *, int, const char *,const void *,size_t,int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#846: FILE: fs/ext3/xattr.h:78:
+extern int ext3_xattr_set_handle(handle_t *, struct inode *, int, const char *,const void *,size_t,int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#846: FILE: fs/ext3/xattr.h:78:
+extern int ext3_xattr_set_handle(handle_t *, struct inode *, int, const char *,const void *,size_t,int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#846: FILE: fs/ext3/xattr.h:78:
+extern int ext3_xattr_set_handle(handle_t *, struct inode *, int, const char *,const void *,size_t,int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#846: FILE: fs/ext3/xattr.h:78:
+extern int ext3_xattr_set_handle(handle_t *, struct inode *, int, const char *,const void *,size_t,int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#846: FILE: fs/ext3/xattr.h:78:
+extern int ext3_xattr_set_handle(handle_t *, struct inode *, int, const char *,const void *,size_t,int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#846: FILE: fs/ext3/xattr.h:78:
+extern int ext3_xattr_set_handle(handle_t *, struct inode *, int, const char *,const void *,size_t,int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#846: FILE: fs/ext3/xattr.h:78:
+extern int ext3_xattr_set_handle(handle_t *, struct inode *, int, const char *,const void *,size_t,int);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#847: FILE: fs/ext3/xattr.h:79:
+extern int ext3_xattr_block_set(handle_t *, struct inode *, int, const char *,const void *,size_t,int);

ERROR:SPACING: space required after that ',' (ctx:OxV)
#847: FILE: fs/ext3/xattr.h:79:
+extern int ext3_xattr_block_set(handle_t *, struct inode *, int, const char *,const void *,size_t,int);
                                                                              ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#847: FILE: fs/ext3/xattr.h:79:
+extern int ext3_xattr_block_set(handle_t *, struct inode *, int, const char *,const void *,size_t,int);
                                                                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#847: FILE: fs/ext3/xattr.h:79:
+extern int ext3_xattr_block_set(handle_t *, struct inode *, int, const char *,const void *,size_t,int);
                                                                                                  ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#847: FILE: fs/ext3/xattr.h:79:
+extern int ext3_xattr_block_set(handle_t *, struct inode *, int, const char *,const void *,size_t,int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#847: FILE: fs/ext3/xattr.h:79:
+extern int ext3_xattr_block_set(handle_t *, struct inode *, int, const char *,const void *,size_t,int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#847: FILE: fs/ext3/xattr.h:79:
+extern int ext3_xattr_block_set(handle_t *, struct inode *, int, const char *,const void *,size_t,int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#847: FILE: fs/ext3/xattr.h:79:
+extern int ext3_xattr_block_set(handle_t *, struct inode *, int, const char *,const void *,size_t,int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#847: FILE: fs/ext3/xattr.h:79:
+extern int ext3_xattr_block_set(handle_t *, struct inode *, int, const char *,const void *,size_t,int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#847: FILE: fs/ext3/xattr.h:79:
+extern int ext3_xattr_block_set(handle_t *, struct inode *, int, const char *,const void *,size_t,int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#847: FILE: fs/ext3/xattr.h:79:
+extern int ext3_xattr_block_set(handle_t *, struct inode *, int, const char *,const void *,size_t,int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#847: FILE: fs/ext3/xattr.h:79:
+extern int ext3_xattr_block_set(handle_t *, struct inode *, int, const char *,const void *,size_t,int);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#860: FILE: include/linux/ext3_fs_i.h:103:
+^Istruct timespec i_crtime; $

WARNING:TYPO_SPELLING: 'lenght' may be misspelled - perhaps 'length'?
#862: FILE: include/linux/ext3_fs_i.h:105:
+	/* on-disk additional lenght */
 	                      ^^^^^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#883: FILE: include/linux/ext3_fs.h:282:
+#define EXT3_FIELD_END(field) (offsetof(struct ext3_inode, field) - \
+				EXT3_GOOD_OLD_INODE_SIZE + \
+				sizeof(*(&((struct ext3_inode *) 0)->field)))

CHECK:SPACING: No space is necessary after a cast
#885: FILE: include/linux/ext3_fs.h:284:
+				sizeof(*(&((struct ext3_inode *) 0)->field)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#886: FILE: include/linux/ext3_fs.h:285:
+^I^I^I^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000369241.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 47 errors, 33 warnings, 79 checks, 802 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000369241.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
