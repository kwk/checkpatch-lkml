WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#23: 
The attached patch adds LSM hooks for key management facilities. The notable

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#50: 
Signed-Off-By: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:NEW_TYPEDEFS: do not add new typedefs
#194: FILE: include/linux/key.h:50:
+typedef struct __key_reference_with_attributes *key_ref_t;

CHECK:SPACING: No space is necessary after a cast
#202: FILE: include/linux/key.h:57:
+	return (key_ref_t) ((unsigned long) key | possession);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#207: FILE: include/linux/key.h:62:
+	return (struct key *) ((unsigned long) key_ref & ~1UL);

CHECK:SPACING: No space is necessary after a cast
#212: FILE: include/linux/key.h:67:
+	return (unsigned long) key_ref & 1UL;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#271: FILE: include/linux/key-ui.h:41:
+extern int key_task_permission(const key_ref_t key_ref,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#689: FILE: security/keys/internal.h:141:
+extern long keyctl_set_security(key_serial_t, const char __user *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'key_serial_t' should also have an identifier name
#689: FILE: security/keys/internal.h:141:
+extern long keyctl_set_security(key_serial_t, const char __user *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char __user *' should also have an identifier name
#689: FILE: security/keys/internal.h:141:
+extern long keyctl_set_security(key_serial_t, const char __user *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void __user *' should also have an identifier name
#689: FILE: security/keys/internal.h:141:
+extern long keyctl_set_security(key_serial_t, const char __user *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#689: FILE: security/keys/internal.h:141:
+extern long keyctl_set_security(key_serial_t, const char __user *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#691: FILE: security/keys/internal.h:143:
+extern long keyctl_get_security(key_serial_t, const char __user *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'key_serial_t' should also have an identifier name
#691: FILE: security/keys/internal.h:143:
+extern long keyctl_get_security(key_serial_t, const char __user *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char __user *' should also have an identifier name
#691: FILE: security/keys/internal.h:143:
+extern long keyctl_get_security(key_serial_t, const char __user *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#691: FILE: security/keys/internal.h:143:
+extern long keyctl_get_security(key_serial_t, const char __user *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#691: FILE: security/keys/internal.h:143:
+extern long keyctl_get_security(key_serial_t, const char __user *,

CHECK:SPACING: No space is necessary after a cast
#937: FILE: security/keys/keyctl.c:1115:
+		return keyctl_set_security((key_serial_t) arg2,

CHECK:SPACING: No space is necessary after a cast
#938: FILE: security/keys/keyctl.c:1116:
+					   (const char __user *) arg3,

CHECK:SPACING: No space is necessary after a cast
#939: FILE: security/keys/keyctl.c:1117:
+					   (const void __user *) arg4,

CHECK:SPACING: No space is necessary after a cast
#940: FILE: security/keys/keyctl.c:1118:
+					   (size_t) arg5);

CHECK:SPACING: No space is necessary after a cast
#943: FILE: security/keys/keyctl.c:1121:
+		return keyctl_get_security((key_serial_t) arg2,

CHECK:SPACING: No space is necessary after a cast
#944: FILE: security/keys/keyctl.c:1122:
+					   (const char __user *) arg3,

CHECK:SPACING: No space is necessary after a cast
#945: FILE: security/keys/keyctl.c:1123:
+					   (void __user *) arg4,

CHECK:SPACING: No space is necessary after a cast
#946: FILE: security/keys/keyctl.c:1124:
+					   (size_t) arg5);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#966: FILE: security/keys/permission.c:1:
+/* permission.c: key permission determination

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1019: FILE: security/keys/permission.c:54:
+	 * membership in common with */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1046: FILE: security/keys/permission.c:81:
+EXPORT_SYMBOL(key_task_permission);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000145563.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 0 errors, 14 warnings, 14 checks, 905 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000145563.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
