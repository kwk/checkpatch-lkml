WARNING:TYPO_SPELLING: 'doen't' may be misspelled - perhaps 'doesn't'?
#52: 
         1) add a new entry (doen't point the data cluster yet).
                             ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'doen't' may be misspelled - perhaps 'doesn't'?
#59: 
         1) add a new entry (doen't point the data cluster yet).
                             ^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sbi->fat_bits != 32'
#94: FILE: fs/fat/cache.c:306:
+	if ((sbi->fat_bits != 32) && (inode->i_ino == MSDOS_ROOT_INO)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_ino == MSDOS_ROOT_INO'
#94: FILE: fs/fat/cache.c:306:
+	if ((sbi->fat_bits != 32) && (inode->i_ino == MSDOS_ROOT_INO)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#110: FILE: fs/fat/dir.c:1179:
+		printk(KERN_ERR "FAT: Corrupted directory (i_pos %lld)\n",

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#125: FILE: fs/fat/misc.c:36:
+EXPORT_SYMBOL(fat_fs_panic);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#141: FILE: fs/msdos/namei.c:461:
+	old_sinfo.bh = sinfo.bh = dotdot_bh = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: braces {} should be used on all arms of this statement
#171: FILE: fs/msdos/namei.c:494:
+			if (IS_DIRSYNC(old_dir)) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#177: FILE: fs/msdos/namei.c:500:
+			} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#215: FILE: fs/msdos/namei.c:543:
+	if (IS_DIRSYNC(new_dir)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#219: FILE: fs/msdos/namei.c:547:
+	} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#249: FILE: fs/msdos/namei.c:570:
+	old_dir->i_ctime = old_dir->i_mtime = ts;

WARNING:LINE_SPACING: Missing a blank line after declarations
#275: FILE: fs/msdos/namei.c:595:
+		int start = MSDOS_I(old_dir)->i_logstart;
+		dotdot_de->start = cpu_to_le16(start);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#294: FILE: fs/msdos/namei.c:614:
+		int err2 = fat_remove_entries(new_dir, &sinfo);
+		if (corrupt)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#301: FILE: fs/msdos/namei.c:621:
+			     __FUNCTION__, sinfo.i_pos);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#320: FILE: fs/vfat/namei.c:897:
+	old_sinfo.bh = sinfo.bh = dotdot_bh = NULL;

CHECK:BRACES: braces {} should be used on all arms of this statement
#373: FILE: fs/vfat/namei.c:942:
+	if (IS_DIRSYNC(new_dir)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#377: FILE: fs/vfat/namei.c:946:
+	} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#395: FILE: fs/vfat/namei.c:961:
+ ^I^I^Inew_dir->i_nlink++;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#395: FILE: fs/vfat/namei.c:961:
+ ^I^I^Inew_dir->i_nlink++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#395: FILE: fs/vfat/namei.c:961:
+ ^I^I^Inew_dir->i_nlink++;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#405: FILE: fs/vfat/namei.c:969:
+	old_dir->i_ctime = old_dir->i_mtime = ts;

WARNING:LINE_SPACING: Missing a blank line after declarations
#433: FILE: fs/vfat/namei.c:996:
+		int start = MSDOS_I(old_dir)->i_logstart;
+		dotdot_de->start = cpu_to_le16(start);

WARNING:LINE_SPACING: Missing a blank line after declarations
#451: FILE: fs/vfat/namei.c:1014:
+		int err2 = fat_remove_entries(new_dir, &sinfo);
+		if (corrupt)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#458: FILE: fs/vfat/namei.c:1021:
+			     __FUNCTION__, sinfo.i_pos);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000201928.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 1 errors, 12 warnings, 12 checks, 353 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000201928.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
