WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#27: 
(upto 256bytes) when only a few descriptors are needed. This makes
 ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
with this patch, because it usually has 10+ daemons hanging around in poll or 

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#55: FILE: include/linux/poll.h:16:
+#define POLL_INLINE_ENTRIES (1+(POLL_INLINE_BYTES / sizeof(struct poll_table_entry)))
                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#58: FILE: include/linux/poll.h:19:
+	struct file * filp;
 	              ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#58: FILE: include/linux/poll.h:19:
+	struct file * filp;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#60: FILE: include/linux/poll.h:21:
+	wait_queue_head_t * wait_address;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#64: FILE: include/linux/poll.h:25:
+	struct poll_table_page * next;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#65: FILE: include/linux/poll.h:26:
+	struct poll_table_entry * entry;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#72: FILE: include/linux/poll.h:33:
+^Istruct poll_table_page inline_page; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#73: FILE: include/linux/poll.h:34:
+^Istruct poll_table_entry inline_table[POLL_INLINE_ENTRIES]; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#134: FILE: fs/select.c:15:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#136: FILE: fs/select.c:17:
+ *     Stack allocation and fast path (Andi Kleen) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#176: FILE: fs/select.c:60:
+^I^Iif (old != &pt->inline_page) $

CHECK:SPACING: No space is necessary after a cast
#177: FILE: fs/select.c:61:
+			free_page((unsigned long) old);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#195: FILE: fs/select.c:71:
+^Iif (!table) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#196: FILE: fs/select.c:72:
+^I^Inew_table = &p->inline_page; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#197: FILE: fs/select.c:73:
+^I} else { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#198: FILE: fs/select.c:74:
+^I^Isz = (table == &p->inline_page) ? POLL_INLINE_TABLE_LEN : PAGE_SIZE; $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#199: FILE: fs/select.c:75:
+		if ((char*)table->entry >= (char*)table + sz) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#199: FILE: fs/select.c:75:
+		if ((char*)table->entry >= (char*)table + sz) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#207: FILE: fs/select.c:83:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#209: FILE: fs/select.c:85:
+^Iif (new_table) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#282: FILE: fs/select.c:130:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#284: FILE: fs/select.c:132:
+^Imaxoff = n/BITS_PER_LONG; $

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#284: FILE: fs/select.c:132:
+	maxoff = n/BITS_PER_LONG; 
 	          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#285: FILE: fs/select.c:133:
+^Imax = 0; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#292: FILE: fs/select.c:136:
+^I^Ifor (off = 0; off <= maxoff; off++) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#293: FILE: fs/select.c:137:
+^I^I^Iunsigned long val = BITS(fds, off); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#297: FILE: fs/select.c:139:
+^I^I^Iif (!val) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#321: FILE: fs/select.c:141:
+^I^I^Iwhile (val) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#322: FILE: fs/select.c:142:
+^I^I^I^Iint k = ffz(~val); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#326: FILE: fs/select.c:146:
+^I^I^I^Iif (k > n%BITS_PER_LONG) $

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#326: FILE: fs/select.c:146:
+				if (k > n%BITS_PER_LONG) 
 				         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#329: FILE: fs/select.c:149:
+^I^I^I^Ibit = (1UL << k); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#330: FILE: fs/select.c:150:
+^I^I^I^Ival &= ~bit; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#339: FILE: fs/select.c:159:
+^I^I^I^I} else { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#340: FILE: fs/select.c:160:
+^I^I^I^I^I/* This error will shadow all other results. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#341: FILE: fs/select.c:161:
+					 * This matches previous linux behaviour */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#342: FILE: fs/select.c:162:
+^I^I^I^I^Iretval = -EBADF; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#343: FILE: fs/select.c:163:
+^I^I^I^I^Igoto out; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#344: FILE: fs/select.c:164:
+^I^I^I^I} $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#345: FILE: fs/select.c:165:
+				if ((mask & POLLIN_SET) && ISSET(bit, __IN(fds,off))) {
 				                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#346: FILE: fs/select.c:166:
+					SET(bit, __RES_IN(fds,off));
 					                     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxW)
#350: FILE: fs/select.c:170:
+				if ((mask& POLLOUT_SET) && ISSET(bit,__OUT(fds,off))) {
 				         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#350: FILE: fs/select.c:170:
+				if ((mask& POLLOUT_SET) && ISSET(bit,__OUT(fds,off))) {
 				                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#350: FILE: fs/select.c:170:
+				if ((mask& POLLOUT_SET) && ISSET(bit,__OUT(fds,off))) {
 				                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#351: FILE: fs/select.c:171:
+					SET(bit, __RES_OUT(fds,off));
 					                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#355: FILE: fs/select.c:175:
+				if ((mask & POLLEX_SET) && ISSET(bit, __EX(fds,off))) {
 				                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#356: FILE: fs/select.c:176:
+					SET(bit, __RES_EX(fds,off));
 					                     ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#361: FILE: fs/select.c:181:
+				if (!(val &= ~bit))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#366: FILE: fs/select.c:186:
+^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#366: FILE: fs/select.c:186:
+
+		

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#367: FILE: fs/select.c:187:
+^I^Imaxoff = max; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#376: FILE: fs/select.c:198:
+out:^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#402: FILE: fs/select.c:217:
+^Iunsigned long rounded = FDS_BYTES(nr), mask; $

WARNING:LINE_SPACING: Missing a blank line after declarations
#403: FILE: fs/select.c:218:
+	unsigned long rounded = FDS_BYTES(nr), mask; 
+	if (ufdset) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#405: FILE: fs/select.c:220:
+		int error = verify_area(VERIFY_WRITE, ufdset, rounded);
+		if (!error && __copy_from_user(fdset, ufdset, rounded))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#407: FILE: fs/select.c:222:
+^I^Iif (nr % __NFDBITS == 0) $

CHECK:BRACES: braces {} should be used on all arms of this statement
#407: FILE: fs/select.c:222:
+		if (nr % __NFDBITS == 0) 
[...]
+		else { 
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#409: FILE: fs/select.c:224:
+^I^Ielse { $

CHECK:BRACES: Unbalanced braces around else statement
#409: FILE: fs/select.c:224:
+		else { 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#411: FILE: fs/select.c:226:
+^I^I^I   but without this some programs hang. */ $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#411: FILE: fs/select.c:226:
+			/* This includes one bit too much according to SU;
+			   but without this some programs hang. */ 

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#411: FILE: fs/select.c:226:
+			   but without this some programs hang. */ 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#412: FILE: fs/select.c:227:
+^I^I^Imask = ~(~0UL << (nr%__NFDBITS)); $

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#412: FILE: fs/select.c:227:
+			mask = ~(~0UL << (nr%__NFDBITS)); 
 			                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#413: FILE: fs/select.c:228:
+^I^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#414: FILE: fs/select.c:229:
+^I^Ifdset[nr/__NFDBITS] &= mask; $

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#414: FILE: fs/select.c:229:
+		fdset[nr/__NFDBITS] &= mask; 
 		        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#426: FILE: fs/select.c:254:
+^Ichar stack_bits[FDS_BYTES(FAST_SELECT_MAX) * 6]; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#439: FILE: fs/select.c:290:
+^Iif (n < FAST_SELECT_MAX) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#441: FILE: fs/select.c:292:
+^I} else { $

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#443: FILE: fs/select.c:294:
+		bits = kmalloc(6*size, GFP_KERNEL);
 		                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#446: FILE: fs/select.c:297:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#458: FILE: fs/select.c:310:
+^Imemset(fds.res_in, 0, 3*size); $

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#458: FILE: fs/select.c:310:
+	memset(fds.res_in, 0, 3*size); 
 	                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#478: FILE: fs/select.c:339:
+^Iif (n >= FAST_SELECT_MAX) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#489: FILE: fs/select.c:407:
+static int fast_poll(poll_table *table, poll_table *wait, struct pollfd *ufds, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#491: FILE: fs/select.c:409:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#492: FILE: fs/select.c:410:
+^Ipoll_table *pt = wait; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#494: FILE: fs/select.c:412:
+^Iint count, i; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#497: FILE: fs/select.c:415:
+^I^Ireturn -EFAULT; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#498: FILE: fs/select.c:416:
+^Ifor (;;) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#500: FILE: fs/select.c:418:
+^I^Icount = 0; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#501: FILE: fs/select.c:419:
+^I^Ido_pollfd(nfds, fds, &pt, &count); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#505: FILE: fs/select.c:423:
+^I^Icount = wait->error; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#506: FILE: fs/select.c:424:
+^I^Iif (count) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#507: FILE: fs/select.c:425:
+^I^I^Ibreak; ^I^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#507: FILE: fs/select.c:425:
+^I^I^Ibreak; ^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#509: FILE: fs/select.c:427:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#511: FILE: fs/select.c:429:
+^Ifor (i = 0; i < nfds; i++) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#513: FILE: fs/select.c:431:
+^Ipoll_freewait(table);^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#514: FILE: fs/select.c:432:
+^Iif (!count && signal_pending(current)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#515: FILE: fs/select.c:433:
+^I^Ireturn -EINTR; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#516: FILE: fs/select.c:434:
+^Ireturn count; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#517: FILE: fs/select.c:435:
+} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#526: FILE: fs/select.c:442:
+^Iint nchunks, nleft; $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#534: FILE: fs/select.c:456:
 
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#549: FILE: fs/select.c:462:
+^Iif (nfds < FAST_POLL_MAX) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#550: FILE: fs/select.c:463:
+^I^Ireturn fast_poll(&table, wait, ufds, nfds, timeout); $

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#553: FILE: fs/select.c:466:
+	fds = (struct pollfd **)kmalloc(

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#553: FILE: fs/select.c:466:
+	fds = (struct pollfd **)kmalloc(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fds"
#556: FILE: fs/select.c:469:
+	if (fds == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#558: FILE: fs/select.c:471:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#562: FILE: fs/select.c:474:
+^Iwhile (nleft > POLLFD_PER_PAGE) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#570: FILE: fs/select.c:481:
+^Iif (nleft) { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#576: FILE: fs/select.c:485:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#577: FILE: fs/select.c:486:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#582: FILE: fs/select.c:491:
+^I$

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000454675.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 84 errors, 10 warnings, 15 checks, 534 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000454675.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
