WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#60: 
[mcd@arrakis mcd]$ diffstat ~/linux/patches/sched_domains/mcd-sched_domains-changes.patch

ERROR:TRAILING_WHITESPACE: trailing whitespace
#162: FILE: include/linux/sched.h:424:
+^Iunsigned long cpu_power;^I/* CPU power of this domain, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#163: FILE: include/linux/sched.h:425:
+^I^I^I^I^I * SCHED_LOAD_SCALE being max power for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#164: FILE: include/linux/sched.h:426:
+^I^I^I^I^I * a single CPU. This is read only (except $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#165: FILE: include/linux/sched.h:427:
+					 * for setup, hotplug CPU). */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#233: FILE: kernel/sched.c:2223:
+	max_load = local_load = total_load = total_pwr = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#234: FILE: kernel/sched.c:2224:
+	busiest_domain = local_domain = NULL;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#241: FILE: kernel/sched.c:2229:
+		if (unlikely(cpus_empty(domain->span)))
+		    continue;

WARNING:TABSTOP: Statements should start on a tabstop
#242: FILE: kernel/sched.c:2230:
+		    continue;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#300: FILE: kernel/sched.c:2269:
+	if (local_load >= avg_load ||
+			100*max_load <= sd->imbalance_pct*local_load)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#300: FILE: kernel/sched.c:2269:
+			100*max_load <= sd->imbalance_pct*local_load)
 			   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#300: FILE: kernel/sched.c:2269:
+			100*max_load <= sd->imbalance_pct*local_load)
 			                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#321: FILE: kernel/sched.c:2293:
+		if (max_load - local_load >= SCHED_LOAD_SCALE*2) {
 		                                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#334: FILE: kernel/sched.c:2304:
+		pwr_now += busiest_domain->cpu_power*min(SCHED_LOAD_SCALE, max_load);
 		                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#335: FILE: kernel/sched.c:2305:
+		pwr_now += local_domain->cpu_power*min(SCHED_LOAD_SCALE, local_load);
 		                                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#340: FILE: kernel/sched.c:2309:
+		tmp = SCHED_LOAD_SCALE*SCHED_LOAD_SCALE/busiest_domain->cpu_power;
 		                      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#340: FILE: kernel/sched.c:2309:
+		tmp = SCHED_LOAD_SCALE*SCHED_LOAD_SCALE/busiest_domain->cpu_power;
 		                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#343: FILE: kernel/sched.c:2311:
+			pwr_move += busiest_domain->cpu_power*min(SCHED_LOAD_SCALE,
 			                                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#348: FILE: kernel/sched.c:2315:
+		tmp = SCHED_LOAD_SCALE*SCHED_LOAD_SCALE/local_domain->cpu_power;
 		                      ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#348: FILE: kernel/sched.c:2315:
+		tmp = SCHED_LOAD_SCALE*SCHED_LOAD_SCALE/local_domain->cpu_power;
 		                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#352: FILE: kernel/sched.c:2318:
+		pwr_move += local_domain->cpu_power*min(SCHED_LOAD_SCALE, local_load + tmp);
 		                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#373: FILE: kernel/sched.c:2336:
+	if (busiest_domain && (idle == NEWLY_IDLE ||
 			(idle == SCHED_IDLE && max_load > SCHED_LOAD_SCALE)) ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#412: FILE: kernel/sched.c:2372:
+static int load_balance(int cpu, runqueue_t *rq, struct sched_domain *sd, $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#623: FILE: kernel/sched.c:2545:
+		if (cpu_isset(busiest_cpu, busiest_domain->span))
+		    break;

WARNING:TABSTOP: Statements should start on a tabstop
#624: FILE: kernel/sched.c:2546:
+		    break;

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#715: FILE: kernel/sched.c:5041:
 cpumask_t __devinitdata cpu_isolated_map = CPU_MASK_NONE;

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#721: FILE: kernel/sched.c:5054:
+__setup("isolcpus=", isolated_cpu_setup);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#739: FILE: kernel/sched.c:5060:
+static void __devinit set_cpu_power(struct sched_domain *sd)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#770: FILE: kernel/sched.c:5064:
+^I^Isd->cpu_power = 1 + $

WARNING:LINE_SPACING: Missing a blank line after declarations
#775: FILE: kernel/sched.c:5069:
+		struct sched_domain *child_domain;
+		sd->cpu_power = 0;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#796: FILE: kernel/sched.c:5086:
+ * All the ugly ifdef'ing in this function is because I didn't want to rename $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#797: FILE: kernel/sched.c:5087:
+ * an modify the SD_*_INIT functions in this patch.  It makes it bigger and more $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#798: FILE: kernel/sched.c:5088:
+ * confusing.  Arch-specific initializers are what is necessary to fix this mess, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#799: FILE: kernel/sched.c:5089:
+ * but I'm not including that in this patch.  Another reason for this confusion $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#804: FILE: kernel/sched.c:5094:
+struct sched_domain * __devinit create_domain(struct sched_domain *parent, $

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#804: FILE: kernel/sched.c:5094:
+struct sched_domain * __devinit create_domain(struct sched_domain *parent, 

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#809: FILE: kernel/sched.c:5099:
+	domain = (struct sched_domain *)kmalloc(sizeof(struct sched_domain), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*domain)...) over kmalloc(sizeof(struct sched_domain)...)
#809: FILE: kernel/sched.c:5099:
+	domain = (struct sched_domain *)kmalloc(sizeof(struct sched_domain), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#811: FILE: kernel/sched.c:5101:
+		printk("Couldn't kmalloc sched_domain!\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#811: FILE: kernel/sched.c:5101:
+	if (!domain) {
+		printk("Couldn't kmalloc sched_domain!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#860: FILE: kernel/sched.c:5137:
+		printk("Invalid sd_type!\n");

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#883: FILE: kernel/sched.c:5155:
+void __devinit destroy_domain(struct sched_domain *sd)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#898: FILE: kernel/sched.c:5166:
+void __devinit cpu_attach_domain(struct sched_domain *sd, int cpu)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1003: FILE: kernel/sched.c:5212:
+static void __devinit arch_init_sched_domains(void)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1022: FILE: kernel/sched.c:5228:
+	BUG_ON(!sys_domain);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#1032: FILE: kernel/sched.c:5234:
+		cpumask_t nodemask;
+		nodemask = node_to_cpumask(i);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1090: FILE: kernel/sched.c:5262:
 static void __devinit arch_destroy_sched_domains(void)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1099: FILE: kernel/sched.c:5269:
+extern void __devinit arch_init_sched_domains(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1099: FILE: kernel/sched.c:5269:
+extern void __devinit arch_init_sched_domains(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1101: FILE: kernel/sched.c:5271:
+extern void __devinit arch_destroy_sched_domains(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1101: FILE: kernel/sched.c:5271:
+extern void __devinit arch_destroy_sched_domains(void);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1110: FILE: kernel/sched.c:5278:
+static void __devinit sched_domain_debug(void)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1118: FILE: kernel/sched.c:5282:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1126: FILE: kernel/sched.c:5286:
+^I^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1130: FILE: kernel/sched.c:5290:
+		printk(SD_DEBUG "CPU%d:", cpu);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1132: FILE: kernel/sched.c:5292:
+			printk(" not online.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1135: FILE: kernel/sched.c:5295:
+		printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1151: FILE: kernel/sched.c:5303:
+			printk(SD_DEBUG);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1161: FILE: kernel/sched.c:5316:
+			cpumask_scnprintf(str, NR_CPUS, sd->span);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1162: FILE: kernel/sched.c:5317:
+			printk("span %s, cpu_power %ld\n", str, sd->cpu_power);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1171: FILE: kernel/sched.c:5320:
+				printk(SD_DEBUG "ERROR domain->span does not contain CPU%d\n", cpu);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1176: FILE: kernel/sched.c:5323:
+			printk(SD_DEBUG);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1185: FILE: kernel/sched.c:5327:
+				printk("Leaf domain, no children\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1187: FILE: kernel/sched.c:5329:
+				printk("Interior domain, childrens' spans:");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1190: FILE: kernel/sched.c:5332:
+						printk(" ERROR child has empty span:");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1193: FILE: kernel/sched.c:5335:
+						printk(" ERROR repeated CPUs:");

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1195: FILE: kernel/sched.c:5337:
+					cpumask_scnprintf(str, NR_CPUS, child->span);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1196: FILE: kernel/sched.c:5338:
+					printk(" %s", str);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1199: FILE: kernel/sched.c:5341:
+				printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1219: FILE: kernel/sched.c:5344:
+					printk(SD_DEBUG "ERROR children don't span domain->span\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1228: FILE: kernel/sched.c:5352:
+					printk(SD_DEBUG "ERROR parent span is not a superset of domain->span\n");

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000243790.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 11 errors, 43 warnings, 17 checks, 1154 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000243790.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
