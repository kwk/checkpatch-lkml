WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#23: 
The attached patch changes mm/nommu.c to better support mmap() when MMU support

WARNING:BAD_SIGN_OFF: Do not use whitespace before To:
#31: 
	To: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: Do not use whitespace before Cc:
#32: 
	Cc: Alexandre Oliva <aoliva@redhat.com>, uclibc@uclibc.org

WARNING:BAD_SIGN_OFF: Unexpected content after email: 'Alexandre Oliva <aoliva@redhat.com>, uclibc@uclibc.org', should be: 'Alexandre Oliva <aoliva@redhat.com> (, uclibc@uclibc.org)'
#32: 
	Cc: Alexandre Oliva <aoliva@redhat.com>, uclibc@uclibc.org

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#64: 
Signed-Off-By: dhowells@redhat.com

CHECK:SPACING: No space is necessary after a cast
#144: FILE: fs/proc/task_nommu.c:24:
+			sbytes += kobjsize((void *) tblock->vma->vm_start);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#151: FILE: fs/proc/task_nommu.c:27:
+			bytes += kobjsize((void *) tblock->vma->vm_start);

CHECK:SPACING: No space is necessary after a cast
#153: FILE: fs/proc/task_nommu.c:29:
+			slack += kobjsize((void *) tblock->vma->vm_start) -

CHECK:SPACING: No space is necessary after a cast
#167: FILE: fs/proc/task_nommu.c:74:
+			vsize += kobjsize((void *) tbp->vma->vm_start);

CHECK:SPACING: No space is necessary after a cast
#185: FILE: fs/proc/task_nommu.c:91:
+			size += kobjsize((void *) tbp->vma->vm_start);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#279: FILE: mm/nommu.c:306:
+		printk("MAP_SHARED not completely supported (cannot detect page dirtying)\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*tblock)...) over kmalloc(sizeof(struct mm_tblock_struct)...)
#303: FILE: mm/nommu.c:332:
+	tblock = kmalloc(sizeof(struct mm_tblock_struct), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: space required after that ',' (ctx:VxV)
#313: FILE: mm/nommu.c:341:
+	vm_flags = calc_vm_flags(prot,flags) /* | mm->def_flags */
 	                             ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#328: FILE: mm/nommu.c:356:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#328: FILE: mm/nommu.c:356:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#367: FILE: mm/nommu.c:395:
+			result = (void *) vma->vm_start;

CHECK:SPACING: No space is necessary after a cast
#378: FILE: mm/nommu.c:406:
+	if (IS_ERR((void *) addr)) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*vma)...) over kmalloc(sizeof(struct vm_area_struct)...)
#384: FILE: mm/nommu.c:412:
+	vma = kmalloc(sizeof(struct vm_area_struct), GFP_KERNEL);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#428: FILE: mm/nommu.c:443:
+			printk("romptr mmap returned %d (st=%lx)\n",

CHECK:SPACING: No space is necessary after a cast
#435: FILE: mm/nommu.c:446:
+			result = (void *) vma->vm_start;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#438: FILE: mm/nommu.c:449:
+			else if (ret != -ENOSYS)

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#453: FILE: mm/nommu.c:460:
+			printk("f_op->mmap() returned %d (st=%lx)\n",

CHECK:SPACING: No space is necessary after a cast
#462: FILE: mm/nommu.c:463:
+			result = (void *) vma->vm_start;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#465: FILE: mm/nommu.c:466:
+			else if (ret != -ENOSYS)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#500: FILE: mm/nommu.c:481:
+		printk("Allocation of length %lu from process %d failed\n",

CHECK:SPACING: No space is necessary after a cast
#515: FILE: mm/nommu.c:487:
+	vma->vm_start = (unsigned long) result;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#523: FILE: mm/nommu.c:492:
+		printk("Allocation of %lu bytes from process %d has %lu bytes of slack\n",

CHECK:SPACING: No space is necessary after a cast
#538: FILE: mm/nommu.c:504:
+		ret = file->f_op->read(file, (char *) result, len, &fpos);

CHECK:SPACING: No space is necessary after a cast
#561: FILE: mm/nommu.c:516:
+		flush_icache_range((unsigned long) result, (unsigned long) result + len);

CHECK:SPACING: No space is necessary after a cast
#594: FILE: mm/nommu.c:544:
+	return (unsigned long) result;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#609: FILE: mm/nommu.c:559:
+	printk("Attempt to share mismatched mappings\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#617: FILE: mm/nommu.c:566:
+	printk("Allocation of tblock for %lu byte allocation from process %d failed\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#623: FILE: mm/nommu.c:572:
+	printk("Allocation of tblock for %lu byte allocation from process %d failed\n",

CHECK:SPACING: No space is necessary after a cast
#637: FILE: mm/nommu.c:586:
+				realalloc -= kobjsize((void *) vma->vm_start);

CHECK:SPACING: No space is necessary after a cast
#641: FILE: mm/nommu.c:590:
+				kfree((void *) vma->vm_start);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#664: FILE: mm/nommu.c:607:
+	/* For efficiency's sake, if the pointer is obviously in ROM,
+	   don't bother walking the lists to free it */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#664: FILE: mm/nommu.c:607:
+	   don't bother walking the lists to free it */

CHECK:SPACING: No space is necessary after a cast
#685: FILE: mm/nommu.c:623:
+		       current->pid, current->comm, (void *) addr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#731: FILE: mm/nommu.c:649:
+		printk("Exit_mmap:\n");

CHECK:SPACING: No space is necessary after a cast
#794: FILE: mm/nommu.c:703:
+		return (unsigned long) -EINVAL;

CHECK:SPACING: No space is necessary after a cast
#797: FILE: mm/nommu.c:706:
+		return (unsigned long) -EINVAL;

CHECK:SPACING: No space is necessary after a cast
#803: FILE: mm/nommu.c:712:
+	return (unsigned long) -EINVAL;

CHECK:SPACING: No space is necessary after a cast
#807: FILE: mm/nommu.c:716:
+		return (unsigned long) -EFAULT;

CHECK:SPACING: No space is necessary after a cast
#810: FILE: mm/nommu.c:719:
+		return (unsigned long) -EPERM;

CHECK:SPACING: No space is necessary after a cast
#812: FILE: mm/nommu.c:721:
+	if (new_len > kobjsize((void *) addr))

CHECK:SPACING: No space is necessary after a cast
#813: FILE: mm/nommu.c:722:
+		return (unsigned long) -ENOMEM;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#881: FILE: include/linux/mm.h:136:
+extern unsigned int kobjsize(const void *objp);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#892: FILE: include/linux/mm.h:631:
+extern unsigned long do_mremap(unsigned long addr,

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000234869.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 18 warnings, 28 checks, 791 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000234869.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
