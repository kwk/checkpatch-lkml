WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#54: FILE: include/linux/pi.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#73: FILE: include/linux/pi.h:20:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#75: FILE: include/linux/pi.h:22:
+ * must implement the functions in this callback structure. They must also $

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#80: FILE: include/linux/pi.h:27:
+struct rt_mutex_waiter_ops {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#81: FILE: include/linux/pi.h:28:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#83: FILE: include/linux/pi.h:30:
+^I * the lock owner. $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#86: FILE: include/linux/pi.h:33:
+	struct task_struct * (*lock_owner)(void* lock);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#94: FILE: include/linux/pi.h:41:
+	void (*waiter_changed_prio) (void* lock, struct rt_mutex_waiter* waiter);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#94: FILE: include/linux/pi.h:41:
+	void (*waiter_changed_prio) (void* lock, struct rt_mutex_waiter* waiter);

WARNING:SPACING: Unnecessary space before function pointer arguments
#94: FILE: include/linux/pi.h:41:
+	void (*waiter_changed_prio) (void* lock, struct rt_mutex_waiter* waiter);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#108: FILE: include/linux/pi.h:55:
+	struct rt_mutex_waiter_ops * mutex_ops;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#117: FILE: include/linux/pi.h:64:
+extern void zap_pi_lock(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#122: FILE: include/linux/pi.h:69:
+extern int pi_is_lock_waiter(void *lock, struct task_struct *owner);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#127: FILE: include/linux/pi.h:74:
+extern int pi_is_waiter(struct rt_mutex_waiter *waiter, struct task_struct *owner);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#129: FILE: include/linux/pi.h:76:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#133: FILE: include/linux/pi.h:80:
+extern void pi_remove_waiter(struct rt_mutex_waiter *waiter, struct task_struct *old_owner);

ERROR:CODE_INDENT: code indent should use tabs where possible
#140: FILE: include/linux/pi.h:87:
+                   struct task_struct *new_owner);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#140: FILE: include/linux/pi.h:87:
+pi_change_owner(void *lock, struct task_struct *old_owner,
+                   struct task_struct *new_owner);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: include/linux/pi.h:87:
+                   struct task_struct *new_owner);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#151: FILE: include/linux/pi.h:98:
+extern void pi_restore_task(void *lock, struct task_struct *old_owner);

WARNING:TYPO_SPELLING: 'nessesary' may be misspelled - perhaps 'necessary'?
#154: FILE: include/linux/pi.h:101:
+ * This function performs all nessesary PI when a new tasks blocks on a
                               ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#166: FILE: include/linux/pi.h:113:
+                   void *lock, unsigned long eip, int all_tasks_pi);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#166: FILE: include/linux/pi.h:113:
+pi_task_blocks_on_lock(struct rt_mutex_waiter *waiter, struct task_struct *task,
+                   void *lock, unsigned long eip, int all_tasks_pi);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: include/linux/pi.h:113:
+                   void *lock, unsigned long eip, int all_tasks_pi);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#173: FILE: include/linux/pi.h:120:
+#define pi_remove_waiter(waiter,old_owner)	{ /* */ }
                                ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'new_owner' may be better as '(new_owner)' to avoid precedence issues
#174: FILE: include/linux/pi.h:121:
+#define pi_change_owner(lock, old_owner, new_owner)	{ new_owner->blocked_on = NULL; }

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#176: FILE: include/linux/pi.h:123:
+#define pi_task_blocks_on_lock(waiter, task, lock, eip, all_tasks_pi)	{ (task)->blocked_on = waiter; }

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#178: FILE: include/linux/pi.h:125:
+#endif /* CONFIG_PRIORITY_INHERITANCE */ $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#243: FILE: kernel/rt.c:151:
+struct task_struct* rt_lock_owner (void* lock)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#243: FILE: kernel/rt.c:151:
+struct task_struct* rt_lock_owner (void* lock)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#243: FILE: kernel/rt.c:151:
+struct task_struct* rt_lock_owner (void* lock)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#245: FILE: kernel/rt.c:153:
+	return ((((struct rt_mutex*)lock)->owner));

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#248: FILE: kernel/rt.c:156:
+void rt_waiter_changed_prio (void* lock, struct rt_mutex_waiter* w)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#248: FILE: kernel/rt.c:156:
+void rt_waiter_changed_prio (void* lock, struct rt_mutex_waiter* w)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#248: FILE: kernel/rt.c:156:
+void rt_waiter_changed_prio (void* lock, struct rt_mutex_waiter* w)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#250: FILE: kernel/rt.c:158:
+	struct rt_mutex *rt_lock = (struct rt_mutex*)lock;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around waiter->list
#485: FILE: kernel/rt.c:535:
+	plist_add(&(waiter->list), &lock->wait_list);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#646: FILE: kernel/rt.c:1148:
+		printk("hm, PI interest but no waiter? Old owner:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#648: FILE: kernel/rt.c:1150:
+		printk("\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#693: FILE: lib/Kconfig.RT:91:
+^Idefault n if !PREEMPT_RT $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#697: FILE: lib/Kconfig.RT:95:
+^I  down to the task which is being waited on. This option will $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#725: FILE: lib/pi.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#754: FILE: lib/pi.c:30:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#769: FILE: lib/pi.c:45:
+        plist_del(&waiter->pi_list, &old_owner->pi_waiters);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#769: FILE: lib/pi.c:45:
+        plist_del(&waiter->pi_list, &old_owner->pi_waiters);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#770: FILE: lib/pi.c:46:
+        plist_init(&waiter->pi_list, waiter->task->prio);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#770: FILE: lib/pi.c:46:
+        plist_init(&waiter->pi_list, waiter->task->prio);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#779: FILE: lib/pi.c:55:
+pi_change_owner(void *lock, struct task_struct *old_owner,
+		   struct task_struct *new_owner)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#785: FILE: lib/pi.c:61:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#809: FILE: lib/pi.c:85:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#814: FILE: lib/pi.c:90:
+{
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#841: FILE: lib/pi.c:117:
+		BUG_ON(!lock);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#842: FILE: lib/pi.c:118:
+		BUG_ON(!lock_owner);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#844: FILE: lib/pi.c:120:
+			BUG_ON(was_rt);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#859: FILE: lib/pi.c:135:
+			BUG_ON(!was_rt);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#864: FILE: lib/pi.c:140:
+
+		}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#869: FILE: lib/pi.c:145:
+		BUG_ON(!p);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#890: FILE: lib/pi.c:166:
+		if (w->lock == lock) {
+			return 1;
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#898: FILE: lib/pi.c:174:
+ * Very expensive way to find out if a waiter is a pi_waiter $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#905: FILE: lib/pi.c:181:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#909: FILE: lib/pi.c:185:
+                        return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#909: FILE: lib/pi.c:185:
+                        return 1;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#938: FILE: lib/pi.c:214:
+		if (w->task->prio < prio)
+		prio = w->task->prio;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#955: FILE: lib/pi.c:231:
+ * @all_tasks_pi: boolean value dispense with PI on non-RT tasks $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#960: FILE: lib/pi.c:236:
+pi_task_blocks_on_lock(struct rt_mutex_waiter *waiter, struct task_struct *task,
+		   void *lock, unsigned long eip, int all_tasks_pi)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#963: FILE: lib/pi.c:239:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#968: FILE: lib/pi.c:244:
+^I * Some tasks don't need PI done on them. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#970: FILE: lib/pi.c:246:
+^Iif (!rt_task(task) && !all_tasks_pi) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#972: FILE: lib/pi.c:248:
+^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#984: FILE: lib/pi.c:260:
+
+}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000179600.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 29 errors, 21 warnings, 20 checks, 887 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000179600.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
