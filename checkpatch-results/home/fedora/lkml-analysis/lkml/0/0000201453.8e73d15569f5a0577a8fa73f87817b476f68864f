WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
the pools are not accidentally fragmented by having zero pages for userspace

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#143: FILE: include/linux/mmzone.h:291:
+#define inc_zeroblock_count(zone, order, flags) \
+	flags & __GFP_ZERO ? zone->zeroblock_count[order]++ : 0

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone' may be better as '(zone)' to avoid precedence issues
#143: FILE: include/linux/mmzone.h:291:
+#define inc_zeroblock_count(zone, order, flags) \
+	flags & __GFP_ZERO ? zone->zeroblock_count[order]++ : 0

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'flags' may be better as '(flags)' to avoid precedence issues
#143: FILE: include/linux/mmzone.h:291:
+#define inc_zeroblock_count(zone, order, flags) \
+	flags & __GFP_ZERO ? zone->zeroblock_count[order]++ : 0

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#167: FILE: mm/page_alloc.c:64:
+	BUG_ON((gfp_flags & (__GFP_WAIT | __GFP_HIGHMEM)) == __GFP_HIGHMEM);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required before the open parenthesis '('
#168: FILE: mm/page_alloc.c:65:
+	for(i = 0; i < (1 << order); i++)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#206: FILE: mm/page_alloc.c:165:
+	if (test_bit(bitidx+3, zone->free_area_usemap)) return ALLOC_USERZERO;
 	                   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#206: FILE: mm/page_alloc.c:165:
+	if (test_bit(bitidx+3, zone->free_area_usemap)) return ALLOC_USERZERO;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#209: FILE: mm/page_alloc.c:168:
+	if (test_bit(bitidx+4, zone->free_area_usemap)) return ALLOC_KERNZERO;
 	                   ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#209: FILE: mm/page_alloc.c:168:
+	if (test_bit(bitidx+4, zone->free_area_usemap)) return ALLOC_KERNZERO;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#218: FILE: mm/page_alloc.c:187:
+		clear_bit(bitidx+3, zone->free_area_usemap);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#219: FILE: mm/page_alloc.c:188:
+		clear_bit(bitidx+4, zone->free_area_usemap);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#227: FILE: mm/page_alloc.c:196:
+		clear_bit(bitidx+3, zone->free_area_usemap);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#228: FILE: mm/page_alloc.c:197:
+		clear_bit(bitidx+4, zone->free_area_usemap);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#236: FILE: mm/page_alloc.c:205:
+		clear_bit(bitidx+3, zone->free_area_usemap);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#237: FILE: mm/page_alloc.c:206:
+		clear_bit(bitidx+4, zone->free_area_usemap);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#242: FILE: mm/page_alloc.c:211:
+		clear_bit(bitidx+1, zone->free_area_usemap);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#243: FILE: mm/page_alloc.c:212:
+		clear_bit(bitidx+2, zone->free_area_usemap);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#244: FILE: mm/page_alloc.c:213:
+		set_bit(bitidx+3, zone->free_area_usemap);
 		              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#245: FILE: mm/page_alloc.c:214:
+		clear_bit(bitidx+4, zone->free_area_usemap);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#251: FILE: mm/page_alloc.c:220:
+		clear_bit(bitidx+1, zone->free_area_usemap);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#252: FILE: mm/page_alloc.c:221:
+		clear_bit(bitidx+2, zone->free_area_usemap);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#253: FILE: mm/page_alloc.c:222:
+		clear_bit(bitidx+3, zone->free_area_usemap);
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#254: FILE: mm/page_alloc.c:223:
+		set_bit(bitidx+4, zone->free_area_usemap);
 		              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#262: FILE: mm/page_alloc.c:231:
+	clear_bit(bitidx+3, zone->free_area_usemap);
 	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#263: FILE: mm/page_alloc.c:232:
+	clear_bit(bitidx+4, zone->free_area_usemap);
 	                ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#276: FILE: mm/page_alloc.c:396:
+	if (alloctype == ALLOC_KERNZERO) alloctype = ALLOC_KERNNORCLM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#277: FILE: mm/page_alloc.c:397:
+	if (alloctype == ALLOC_USERZERO) alloctype = ALLOC_USERRCLM;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#286: FILE: mm/page_alloc.c:593:
+static inline int steal_globallist(struct zone *zone, int alloctype, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#287: FILE: mm/page_alloc.c:594:
+static inline int steal_globallist(struct zone *zone, int alloctype, 
+		unsigned long flags, unsigned long *irq_flags) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#302: FILE: mm/page_alloc.c:614:
+		prep_zero_page(page, MAX_ORDER-1, flags);
 		                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#303: FILE: mm/page_alloc.c:615:
+		inc_zeroblock_count(zone, MAX_ORDER-1, flags);
 		                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#307: FILE: mm/page_alloc.c:619:
+			reserve_type=ALLOC_USERRCLM;
 			            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#309: FILE: mm/page_alloc.c:621:
+			reserve_type=ALLOC_KERNNORCLM;
 			            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#340: FILE: mm/page_alloc.c:656:
+static struct page *__rmqueue(struct zone *zone, unsigned int order, int flags,
+				unsigned long *irq_flags)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#363: FILE: mm/page_alloc.c:742:
+
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#366: FILE: mm/page_alloc.c:745:
+^I^Iif (flags & __GFP_ZERO && $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#367: FILE: mm/page_alloc.c:746:
+^I^I^I(alloctype != ALLOC_USERZERO && $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#367: FILE: mm/page_alloc.c:746:
+		if (flags & __GFP_ZERO && 
+			(alloctype != ALLOC_USERZERO && 

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#369: FILE: mm/page_alloc.c:748:
+			 alloctype != ALLOC_KERNZERO)) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#453: FILE: mm/page_alloc.c:1023:
+^I^Iif (gfp_flags & __GFP_ZERO) $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#496: FILE: mm/page_alloc.c:1594:
+				printk("cpu %d general-page %s: low %d, high %d, batch %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#497: FILE: mm/page_alloc.c:1595:
+				printk("cpu %d general-page %s: low %d, high %d, batch %d\n",
 					cpu,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#503: FILE: mm/page_alloc.c:1601:
+				printk("cpu %d zero-page %s: low %d, high %d, batch %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#504: FILE: mm/page_alloc.c:1602:
+				printk("cpu %d zero-page %s: low %d, high %d, batch %d\n",
+					cpu,

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#510: FILE: mm/page_alloc.c:1608:
+
+			}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#541: FILE: mm/page_alloc.c:2157:
+		memset((unsigned long *)zone->zeroblock_count, 0,
+				sizeof(zone->zeroblock_count));

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#565: FILE: mm/page_alloc.c:2338:
+		seq_printf(m, "Bulk requests   ");

WARNING:TYPO_SPELLING: 'alloced' may be misspelled - perhaps 'allocated'?
#571: FILE: mm/page_alloc.c:2343:
+		seq_printf(m, "\nBulk alloced    ");
 		                      ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#571: FILE: mm/page_alloc.c:2343:
+		seq_printf(m, "\nBulk alloced    ");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#578: FILE: mm/page_alloc.c:2350:
+		seq_printf(m, "Zeroblock count ");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#579: FILE: mm/page_alloc.c:2351:
+		for (i=0; i < MAX_ORDER; i++) {
 		      ^

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#583: FILE: mm/page_alloc.c:2355:
+		seq_printf(m, "\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#602: FILE: mm/page_alloc.c:2384:
+	seq_printf(m, "Bulk requests   ");

WARNING:TYPO_SPELLING: 'alloced' may be misspelled - perhaps 'allocated'?
#607: FILE: mm/page_alloc.c:2388:
+	seq_printf(m, "\nBulk alloced    ");
 	                      ^^^^^^^

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#607: FILE: mm/page_alloc.c:2388:
+	seq_printf(m, "\nBulk alloced    ");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#613: FILE: mm/page_alloc.c:2394:
+	seq_printf(m, "Zeroblock count ");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#614: FILE: mm/page_alloc.c:2395:
+	for (i=0; i < MAX_ORDER; i++) {
 	      ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#614: FILE: mm/page_alloc.c:2395:
+	for (i=0; i < MAX_ORDER; i++) {
+		seq_printf(m, "%7lu ", zeroblock_count[i]);
+	}

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#617: FILE: mm/page_alloc.c:2398:
+	seq_printf(m, "\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#619: FILE: mm/page_alloc.c:2400:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000201453.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 15 warnings, 32 checks, 481 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000201453.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
