WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#23: 
diff -u --new-file --recursive --exclude-from /usr/src/exclude linux-2.5.75/sound/oss/au1000.c linux-2.5.75-ac1/sound/oss/au1000.c

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#27: FILE: sound/oss/au1000.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#33: FILE: sound/oss/au1000.c:7:
+ *         ^Istevel@mvista.com or source@mvista.com$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#53: FILE: sound/oss/au1000.c:27:
+ *  675 Mass Ave, Cambridge, MA 02139, USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#97: FILE: sound/oss/au1000.c:71:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#98: FILE: sound/oss/au1000.c:72:
+#include <asm/uaccess.h>

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#115: FILE: sound/oss/au1000.c:89:
+#define dbg(format, arg...) printk(KERN_DEBUG PFX ": " format "\n" , ## arg)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#115: FILE: sound/oss/au1000.c:89:
+#define dbg(format, arg...) printk(KERN_DEBUG PFX ": " format "\n" , ## arg)
                                                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#119: FILE: sound/oss/au1000.c:93:
+#define err(format, arg...) printk(KERN_ERR PFX ": " format "\n" , ## arg)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#119: FILE: sound/oss/au1000.c:93:
+#define err(format, arg...) printk(KERN_ERR PFX ": " format "\n" , ## arg)
                                                                  ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#120: FILE: sound/oss/au1000.c:94:
+#define info(format, arg...) printk(KERN_INFO PFX ": " format "\n" , ## arg)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#120: FILE: sound/oss/au1000.c:94:
+#define info(format, arg...) printk(KERN_INFO PFX ": " format "\n" , ## arg)
                                                                    ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#121: FILE: sound/oss/au1000.c:95:
+#define warn(format, arg...) printk(KERN_WARNING PFX ": " format "\n" , ## arg)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#121: FILE: sound/oss/au1000.c:95:
+#define warn(format, arg...) printk(KERN_WARNING PFX ": " format "\n" , ## arg)
                                                                       ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#123: FILE: sound/oss/au1000.c:97:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#129: FILE: sound/oss/au1000.c:103:
+static int      vra = 0;	// 0 = no VRA, 1 = use VRA if codec supports it

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#133: FILE: sound/oss/au1000.c:107:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#147: FILE: sound/oss/au1000.c:121:
+	unsigned        codec_base_caps;// AC'97 reg 00h, "Reset Register"

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#148: FILE: sound/oss/au1000.c:122:
+	unsigned        codec_ext_caps;	// AC'97 reg 28h, "Extended Audio ID"

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#151: FILE: sound/oss/au1000.c:125:
+	spinlock_t      lock;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#159: FILE: sound/oss/au1000.c:133:
+		unsigned        sample_rate;	// Hz

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#160: FILE: sound/oss/au1000.c:134:
+		unsigned src_factor;     // SRC interp/decimation (no vra)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#161: FILE: sound/oss/au1000.c:135:
+		unsigned        sample_size;	// 8 or 16

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#169: FILE: sound/oss/au1000.c:143:
+		unsigned        buforder;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#170: FILE: sound/oss/au1000.c:144:
+		unsigned numfrag;        // # of DMA fragments in DMA buffer

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#171: FILE: sound/oss/au1000.c:145:
+		unsigned        fragshift;

CHECK:CAMELCASE: Avoid CamelCase: <nextIn>
#172: FILE: sound/oss/au1000.c:146:
+		void           *nextIn;	// ptr to next-in to DMA buffer

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <nextOut>
#173: FILE: sound/oss/au1000.c:147:
+		void           *nextOut;// ptr to next-out from DMA buffer

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#175: FILE: sound/oss/au1000.c:149:
+		unsigned        total_bytes;	// total bytes written or read

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#176: FILE: sound/oss/au1000.c:150:
+		unsigned        error;	// over/underrun

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#179: FILE: sound/oss/au1000.c:153:
+		unsigned fragsize;       // user perception of fragment size

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#180: FILE: sound/oss/au1000.c:154:
+		unsigned dma_fragsize;   // DMA (real) fragment size

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#181: FILE: sound/oss/au1000.c:155:
+		unsigned dmasize;        // Total DMA buffer size

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#187: FILE: sound/oss/au1000.c:161:
+		unsigned        ossfragshift;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#189: FILE: sound/oss/au1000.c:163:
+		unsigned        subdivision;

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#190: FILE: sound/oss/au1000.c:164:
+	} dma_dac      , dma_adc;
 	               ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#195: FILE: sound/oss/au1000.c:169:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#196: FILE: sound/oss/au1000.c:170:
+static inline unsigned ld2(unsigned int x)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#198: FILE: sound/oss/au1000.c:172:
+	unsigned        r = 0;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#221: FILE: sound/oss/au1000.c:195:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#223: FILE: sound/oss/au1000.c:197:
+static inline void * dma_alloc(size_t size, dma_addr_t * dma_handle)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#223: FILE: sound/oss/au1000.c:197:
+static inline void * dma_alloc(size_t size, dma_addr_t * dma_handle)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#225: FILE: sound/oss/au1000.c:199:
+	void* ret = (void *)__get_free_pages(GFP_ATOMIC | GFP_DMA,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ret"
#227: FILE: sound/oss/au1000.c:201:
+	if (ret != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#234: FILE: sound/oss/au1000.c:208:
+static inline void dma_free(size_t size, void* va, dma_addr_t dma_handle)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#239: FILE: sound/oss/au1000.c:213:
+static inline void * dma_alloc(size_t size, dma_addr_t * dma_handle)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#239: FILE: sound/oss/au1000.c:213:
+static inline void * dma_alloc(size_t size, dma_addr_t * dma_handle)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#244: FILE: sound/oss/au1000.c:218:
+static inline void dma_free(size_t size, void* va, dma_addr_t dma_handle)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#269: FILE: sound/oss/au1000.c:243:
+
+

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rdcodec', this function's name, in a string
#286: FILE: sound/oss/au1000.c:260:
+		err("rdcodec: codec cmd pending expired!");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: No space is necessary after a cast
#288: FILE: sound/oss/au1000.c:262:
+	cmd = (u32) addr & AC97C_INDEX_MASK;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rdcodec', this function's name, in a string
#297: FILE: sound/oss/au1000.c:271:
+		err("rdcodec: read poll expired!");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#308: FILE: sound/oss/au1000.c:282:
+
+

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'wrcodec', this function's name, in a string
#322: FILE: sound/oss/au1000.c:296:
+		err("wrcodec: codec cmd pending expired!");

CHECK:SPACING: No space is necessary after a cast
#324: FILE: sound/oss/au1000.c:298:
+	cmd = (u32) addr & AC97C_INDEX_MASK;

CHECK:SPACING: No space is necessary after a cast
#326: FILE: sound/oss/au1000.c:300:
+	cmd |= ((u32) data << AC97C_WD_BIT);	// OR in the data word

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#338: FILE: sound/oss/au1000.c:312:
+	/* codec_wait is used to wait for a ready state after
+	   an AC97C_RESET. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#338: FILE: sound/oss/au1000.c:312:
+	   an AC97C_RESET. */

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'waitcodec', this function's name, in a string
#346: FILE: sound/oss/au1000.c:320:
+		err("waitcodec: CODEC_READY poll expired!");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#360: FILE: sound/oss/au1000.c:334:
+    $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#360: FILE: sound/oss/au1000.c:334:
+    $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#366: FILE: sound/oss/au1000.c:340:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#370: FILE: sound/oss/au1000.c:344:
+static void set_adc_rate(struct au1000_state *s, unsigned rate)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#374: FILE: sound/oss/au1000.c:348:
+	unsigned        adc_rate, dac_rate;

CHECK:SPACING: No space is necessary after a cast
#394: FILE: sound/oss/au1000.c:368:
+	wrcodec(s->codec, AC97_PCM_LR_ADC_RATE, (u16) rate);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#399: FILE: sound/oss/au1000.c:373:
+	dbg(__FUNCTION__ ": set to %d Hz", adc_rate);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#415: FILE: sound/oss/au1000.c:389:
+static void set_dac_rate(struct au1000_state *s, unsigned rate)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#419: FILE: sound/oss/au1000.c:393:
+	unsigned        adc_rate, dac_rate;

CHECK:SPACING: No space is necessary after a cast
#439: FILE: sound/oss/au1000.c:413:
+	wrcodec(s->codec, AC97_PCM_FRONT_DAC_RATE, (u16) rate);

CHECK:SPACING: No space is necessary after a cast
#443: FILE: sound/oss/au1000.c:417:
+		wrcodec(s->codec, AC97_PCM_SURR_DAC_RATE, (u16) rate);

CHECK:SPACING: No space is necessary after a cast
#445: FILE: sound/oss/au1000.c:419:
+		wrcodec(s->codec, AC97_PCM_LFE_DAC_RATE, (u16) rate);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#450: FILE: sound/oss/au1000.c:424:
+	dbg(__FUNCTION__ ": set to %d Hz", dac_rate);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#495: FILE: sound/oss/au1000.c:469:
+
+

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#560: FILE: sound/oss/au1000.c:534:
+	set_dma_count(db->dmanr, db->dma_fragsize>>1);
 	                                         ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#605: FILE: sound/oss/au1000.c:579:
+	set_dma_count(db->dmanr, db->dma_fragsize>>1);
 	                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#621: FILE: sound/oss/au1000.c:595:
+#define DMABUF_DEFAULTORDER (17-PAGE_SHIFT)
                                ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#624: FILE: sound/oss/au1000.c:598:
+extern inline void dealloc_dmabuf(struct au1000_state *s, struct dmabuf *db)

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#636: FILE: sound/oss/au1000.c:610:
+	db->rawbuf = db->nextIn = db->nextOut = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#637: FILE: sound/oss/au1000.c:611:
+	db->mapped = db->ready = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#643: FILE: sound/oss/au1000.c:617:
+	unsigned user_bytes_per_sec;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#644: FILE: sound/oss/au1000.c:618:
+	unsigned        bufs;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#646: FILE: sound/oss/au1000.c:620:
+	unsigned        rate = db->sample_rate;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#649: FILE: sound/oss/au1000.c:623:
+		db->ready = db->mapped = 0;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#652: FILE: sound/oss/au1000.c:626:
+			if ((db->rawbuf = dma_alloc(PAGE_SIZE << order,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#653: FILE: sound/oss/au1000.c:627:
+			if ((db->rawbuf = dma_alloc(PAGE_SIZE << order,
+						  &db->dmaaddr)))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#659: FILE: sound/oss/au1000.c:633:
+		/* now mark the pages as reserved;
+		   otherwise remap_page_range doesn't do what we want */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#659: FILE: sound/oss/au1000.c:633:
+		   otherwise remap_page_range doesn't do what we want */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#674: FILE: sound/oss/au1000.c:648:
+	db->nextIn = db->nextOut = db->rawbuf;

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#676: FILE: sound/oss/au1000.c:650:
+	db->user_bytes_per_sample = (db->sample_size>>3) * db->num_channels;
 	                                            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#684: FILE: sound/oss/au1000.c:658:
+			db->fragshift = ld2(user_bytes_per_sec/1000);
 			                                      ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#723: FILE: sound/oss/au1000.c:697:
+extern inline int prog_dmabuf_adc(struct au1000_state *s)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#728: FILE: sound/oss/au1000.c:702:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#730: FILE: sound/oss/au1000.c:704:
+extern inline int prog_dmabuf_dac(struct au1000_state *s)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#736: FILE: sound/oss/au1000.c:710:
+
+

CHECK:SPACING: No space is necessary after a cast
#740: FILE: sound/oss/au1000.c:714:
+	struct au1000_state *s = (struct au1000_state *) dev_id;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#751: FILE: sound/oss/au1000.c:725:
+	if ((buff_done = get_dma_buffer_done(dac->dmanr)) == 0) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#757: FILE: sound/oss/au1000.c:731:
+^I$

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#782: FILE: sound/oss/au1000.c:756:
+			set_dma_count0(dac->dmanr, dac->dma_fragsize>>1);
 			                                            ^

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#784: FILE: sound/oss/au1000.c:758:
+			enable_dma_buffer0(dac->dmanr);	// reenable
 			                               	   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#787: FILE: sound/oss/au1000.c:761:
+			set_dma_count1(dac->dmanr, dac->dma_fragsize>>1);
 			                                            ^

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#789: FILE: sound/oss/au1000.c:763:
+			enable_dma_buffer1(dac->dmanr);	// reenable
 			                               	   ^^^^^^^^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#797: FILE: sound/oss/au1000.c:771:
+		dac->nextOut += 2*dac->dma_fragsize;
 		                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#801: FILE: sound/oss/au1000.c:775:
+		dac->count -= 2*dac->dma_fragsize;
 		               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#802: FILE: sound/oss/au1000.c:776:
+		dac->total_bytes += 2*dac->dma_fragsize;
 		                     ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#818: FILE: sound/oss/au1000.c:792:
+
+

CHECK:SPACING: No space is necessary after a cast
#821: FILE: sound/oss/au1000.c:795:
+	struct au1000_state *s = (struct au1000_state *) dev_id;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#832: FILE: sound/oss/au1000.c:806:
+	if ((buff_done = get_dma_buffer_done(adc->dmanr)) == 0) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#838: FILE: sound/oss/au1000.c:812:
+^I$

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#863: FILE: sound/oss/au1000.c:837:
+			set_dma_count0(adc->dmanr, adc->dma_fragsize>>1);
 			                                            ^

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#865: FILE: sound/oss/au1000.c:839:
+			enable_dma_buffer0(adc->dmanr);	// reenable
 			                               	   ^^^^^^^^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#868: FILE: sound/oss/au1000.c:842:
+			set_dma_count1(adc->dmanr, adc->dma_fragsize>>1);
 			                                            ^

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#870: FILE: sound/oss/au1000.c:844:
+			enable_dma_buffer1(adc->dmanr);	// reenable
 			                               	   ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#877: FILE: sound/oss/au1000.c:851:
+^I^I$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#878: FILE: sound/oss/au1000.c:852:
+		if (adc->count + 2*adc->dma_fragsize > adc->dmasize) {
 		                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#886: FILE: sound/oss/au1000.c:860:
+		adc->nextIn += 2*adc->dma_fragsize;
 		                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#890: FILE: sound/oss/au1000.c:864:
+		adc->count += 2*adc->dma_fragsize;
 		               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#891: FILE: sound/oss/au1000.c:865:
+		adc->total_bytes += 2*adc->dma_fragsize;
 		                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#892: FILE: sound/oss/au1000.c:866:
+^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#912: FILE: sound/oss/au1000.c:886:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#925: FILE: sound/oss/au1000.c:899:
+                        unsigned long arg)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#925: FILE: sound/oss/au1000.c:899:
+                        unsigned long arg)$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#939: FILE: sound/oss/au1000.c:913:
+static /*const */ struct file_operations au1000_mixer_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#940: FILE: sound/oss/au1000.c:914:
+	owner:THIS_MODULE,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#941: FILE: sound/oss/au1000.c:915:
+	llseek:au1000_llseek,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#941: FILE: sound/oss/au1000.c:915:
+	llseek:au1000_llseek,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#942: FILE: sound/oss/au1000.c:916:
+	ioctl:au1000_ioctl_mixdev,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#942: FILE: sound/oss/au1000.c:916:
+	ioctl:au1000_ioctl_mixdev,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#943: FILE: sound/oss/au1000.c:917:
+	open:au1000_open_mixdev,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#943: FILE: sound/oss/au1000.c:917:
+	open:au1000_open_mixdev,

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#944: FILE: sound/oss/au1000.c:918:
+	release:au1000_release_mixdev,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#944: FILE: sound/oss/au1000.c:918:
+	release:au1000_release_mixdev,

CHECK:SPACING: No space is necessary after a cast
#981: FILE: sound/oss/au1000.c:955:
+	return (u8) (ch >> 8) + 0x80;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#983: FILE: sound/oss/au1000.c:957:
+}
+static inline s16 U8_TO_S16(u8 ch)

CHECK:SPACING: No space is necessary after a cast
#985: FILE: sound/oss/au1000.c:959:
+	return (s16) (ch - 0x80) << 8;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#995: FILE: sound/oss/au1000.c:969:
+			       char* dmabuf,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#996: FILE: sound/oss/au1000.c:970:
+			       char* userbuf,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1019: FILE: sound/oss/au1000.c:993:
+			dbg(__FUNCTION__ ": fault");

CHECK:SPACING: No space is necessary after a cast
#1027: FILE: sound/oss/au1000.c:1001:
+				ch = *((s16 *) (&usersample[i * 2]));

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1051: FILE: sound/oss/au1000.c:1025:
+			     char* userbuf,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1052: FILE: sound/oss/au1000.c:1026:
+			     char* dmabuf,

CHECK:SPACING: No space is necessary after a cast
#1075: FILE: sound/oss/au1000.c:1049:
+					S16_TO_U8(*((s16 *) (&dmabuf[i * 2])));

CHECK:SPACING: No space is necessary after a cast
#1077: FILE: sound/oss/au1000.c:1051:
+				*((s16 *) (&usersample[i * 2])) =

CHECK:SPACING: No space is necessary after a cast
#1078: FILE: sound/oss/au1000.c:1052:
+					*((s16 *) (&dmabuf[i * 2]));

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1083: FILE: sound/oss/au1000.c:1057:
+			dbg(__FUNCTION__ ": fault");

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1099: FILE: sound/oss/au1000.c:1073:
+static int copy_dmabuf_user(struct dmabuf *db, char* userbuf,

CHECK:SPACING: No space is necessary after a cast
#1107: FILE: sound/oss/au1000.c:1081:
+		int             partial = (int) (bufend - bufptr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1108: FILE: sound/oss/au1000.c:1082:
+		int             partial = (int) (bufend - bufptr);
+		if (to_user) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1109: FILE: sound/oss/au1000.c:1083:
+			if ((cnt = translate_to_user(db, userbuf,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1113: FILE: sound/oss/au1000.c:1087:
+			if ((cnt = translate_to_user(db, userbuf + partial,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1119: FILE: sound/oss/au1000.c:1093:
+			if ((cnt = translate_from_user(db, bufptr, userbuf,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1123: FILE: sound/oss/au1000.c:1097:
+			if ((cnt = translate_from_user(db, db->rawbuf,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1139: FILE: sound/oss/au1000.c:1113:
+
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1191: FILE: sound/oss/au1000.c:1165:
+		if ((cnt = copy_dmabuf_user(db, buffer,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1221: FILE: sound/oss/au1000.c:1195:
+^I     ^I^I    size_t count, loff_t * ppos)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1221: FILE: sound/oss/au1000.c:1195:
+^I     ^I^I    size_t count, loff_t * ppos)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1221: FILE: sound/oss/au1000.c:1195:
+static ssize_t au1000_write(struct file *file, const char *buffer,
+	     		    size_t count, loff_t * ppos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1221: FILE: sound/oss/au1000.c:1195:
+	     		    size_t count, loff_t * ppos)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1243: FILE: sound/oss/au1000.c:1217:
+^Idown(&s->sem);^I$

CHECK:SPACING: No space is necessary after a cast
#1250: FILE: sound/oss/au1000.c:1224:
+			avail = (int) db->dmasize - db->count;

CHECK:SPACING: No space is necessary after a cast
#1272: FILE: sound/oss/au1000.c:1246:
+		if ((cnt = copy_dmabuf_user(db, (char *) buffer,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1272: FILE: sound/oss/au1000.c:1246:
+		if ((cnt = copy_dmabuf_user(db, (char *) buffer,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1303: FILE: sound/oss/au1000.c:1277:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1324: FILE: sound/oss/au1000.c:1298:
+^I$

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#1326: FILE: sound/oss/au1000.c:1300:
+		if (s->dma_adc.count >= (signed)s->dma_adc.dma_fragsize)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1332: FILE: sound/oss/au1000.c:1306:
+^I^I^I    (signed)s->dma_dac.dma_fragsize) $

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#1332: FILE: sound/oss/au1000.c:1306:
+			    (signed)s->dma_dac.dma_fragsize) 

CHECK:SPACING: No space is necessary after a cast
#1335: FILE: sound/oss/au1000.c:1309:
+			if ((signed) s->dma_dac.dmasize >=

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#1335: FILE: sound/oss/au1000.c:1309:
+			if ((signed) s->dma_dac.dmasize >=

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#1336: FILE: sound/oss/au1000.c:1310:
+			    s->dma_dac.count + (signed)s->dma_dac.dma_fragsize)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1351: FILE: sound/oss/au1000.c:1325:
+	dbg(__FUNCTION__);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1352: FILE: sound/oss/au1000.c:1326:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1352: FILE: sound/oss/au1000.c:1326:
+    $

CHECK:BRACES: braces {} should be used on all arms of this statement
#1355: FILE: sound/oss/au1000.c:1329:
+	if (vma->vm_flags & VM_WRITE)
[...]
+	else if (vma->vm_flags & VM_READ)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1359: FILE: sound/oss/au1000.c:1333:
+	else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1385: FILE: sound/oss/au1000.c:1359:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1437: FILE: sound/oss/au1000.c:1411:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1439: FILE: sound/oss/au1000.c:1413:
+                        unsigned int cmd, unsigned long arg)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1439: FILE: sound/oss/au1000.c:1413:
+                        unsigned int cmd, unsigned long arg)$

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(ioctl_str)
#1452: FILE: sound/oss/au1000.c:1426:
+	for (count=0; count<sizeof(ioctl_str)/sizeof(ioctl_str[0]); count++) {

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1452: FILE: sound/oss/au1000.c:1426:
+	for (count=0; count<sizeof(ioctl_str)/sizeof(ioctl_str[0]); count++) {
 	          ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1452: FILE: sound/oss/au1000.c:1426:
+	for (count=0; count<sizeof(ioctl_str)/sizeof(ioctl_str[0]); count++) {
 	                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1452: FILE: sound/oss/au1000.c:1426:
+	for (count=0; count<sizeof(ioctl_str)/sizeof(ioctl_str[0]); count++) {
 	                                     ^

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(ioctl_str)
#1456: FILE: sound/oss/au1000.c:1430:
+	if (count < sizeof(ioctl_str) / sizeof(ioctl_str[0]))

CHECK:SPACING: No space is necessary after a cast
#1464: FILE: sound/oss/au1000.c:1438:
+		return put_user(SOUND_VERSION, (int *) arg);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1482: FILE: sound/oss/au1000.c:1456:
+			s->dma_dac.count = s->dma_dac.total_bytes = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1483: FILE: sound/oss/au1000.c:1457:
+			s->dma_dac.nextIn = s->dma_dac.nextOut =

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1489: FILE: sound/oss/au1000.c:1463:
+			s->dma_adc.count = s->dma_adc.total_bytes = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1490: FILE: sound/oss/au1000.c:1464:
+			s->dma_adc.nextIn = s->dma_adc.nextOut =

CHECK:SPACING: No space is necessary after a cast
#1496: FILE: sound/oss/au1000.c:1470:
+		if (get_user(val, (int *) arg))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1508: FILE: sound/oss/au1000.c:1482:
+				if ((ret = prog_dmabuf_adc(s)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1511: FILE: sound/oss/au1000.c:1485:
+				if ((ret = prog_dmabuf_dac(s)))

CHECK:SPACING: No space is necessary after a cast
#1520: FILE: sound/oss/au1000.c:1494:
+		if (get_user(val, (int *) arg))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1525: FILE: sound/oss/au1000.c:1499:
+			if ((ret = prog_dmabuf_adc(s)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1540: FILE: sound/oss/au1000.c:1514:
+			if ((ret = prog_dmabuf_dac(s)))

CHECK:SPACING: No space is necessary after a cast
#1546: FILE: sound/oss/au1000.c:1520:
+		if (get_user(val, (int *) arg))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1554: FILE: sound/oss/au1000.c:1528:
+				if ((ret = prog_dmabuf_adc(s)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1609: FILE: sound/oss/au1000.c:1583:
+				if ((ret = prog_dmabuf_dac(s)))

CHECK:SPACING: No space is necessary after a cast
#1613: FILE: sound/oss/au1000.c:1587:
+		return put_user(val, (int *) arg);

CHECK:SPACING: No space is necessary after a cast
#1616: FILE: sound/oss/au1000.c:1590:
+		return put_user(AFMT_S16_LE | AFMT_U8, (int *) arg);

CHECK:SPACING: No space is necessary after a cast
#1619: FILE: sound/oss/au1000.c:1593:
+		if (get_user(val, (int *) arg))

CHECK:BRACES: braces {} should be used on all arms of this statement
#1624: FILE: sound/oss/au1000.c:1598:
+				if (val == AFMT_S16_LE)
[...]
+				else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1626: FILE: sound/oss/au1000.c:1600:
+				else {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1630: FILE: sound/oss/au1000.c:1604:
+				if ((ret = prog_dmabuf_adc(s)))

CHECK:BRACES: braces {} should be used on all arms of this statement
#1635: FILE: sound/oss/au1000.c:1609:
+				if (val == AFMT_S16_LE)
[...]
+				else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1637: FILE: sound/oss/au1000.c:1611:
+				else {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1641: FILE: sound/oss/au1000.c:1615:
+				if ((ret = prog_dmabuf_dac(s)))

CHECK:SPACING: No space is necessary after a cast
#1652: FILE: sound/oss/au1000.c:1626:
+		return put_user(val, (int *) arg);

CHECK:SPACING: No space is necessary after a cast
#1665: FILE: sound/oss/au1000.c:1639:
+		return put_user(val, (int *) arg);

CHECK:SPACING: No space is necessary after a cast
#1668: FILE: sound/oss/au1000.c:1642:
+		if (get_user(val, (int *) arg))

CHECK:SPACING: No space is necessary after a cast
#1701: FILE: sound/oss/au1000.c:1675:
+		return copy_to_user((void *) arg, &abinfo,

CHECK:SPACING: No space is necessary after a cast
#1717: FILE: sound/oss/au1000.c:1691:
+		return copy_to_user((void *) arg, &abinfo,

CHECK:SPACING: No space is necessary after a cast
#1734: FILE: sound/oss/au1000.c:1708:
+		return put_user(count, (int *) arg);

CHECK:BRACES: Unbalanced braces around else statement
#1748: FILE: sound/oss/au1000.c:1722:
+		} else

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1752: FILE: sound/oss/au1000.c:1726:
+			s->dma_adc.count &= (s->dma_adc.dma_fragsize-1);
 			                                            ^

CHECK:SPACING: No space is necessary after a cast
#1757: FILE: sound/oss/au1000.c:1731:
+		return copy_to_user((void *) arg, &cinfo, sizeof(cinfo));

CHECK:BRACES: Unbalanced braces around else statement
#1771: FILE: sound/oss/au1000.c:1745:
+		} else

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1775: FILE: sound/oss/au1000.c:1749:
+			s->dma_dac.count &= (s->dma_dac.dma_fragsize-1);
 			                                            ^

CHECK:SPACING: No space is necessary after a cast
#1780: FILE: sound/oss/au1000.c:1754:
+		return copy_to_user((void *) arg, &cinfo, sizeof(cinfo));

CHECK:SPACING: No space is necessary after a cast
#1784: FILE: sound/oss/au1000.c:1758:
+			return put_user(s->dma_dac.fragsize, (int *) arg);

CHECK:SPACING: No space is necessary after a cast
#1786: FILE: sound/oss/au1000.c:1760:
+			return put_user(s->dma_adc.fragsize, (int *) arg);

CHECK:SPACING: No space is necessary after a cast
#1789: FILE: sound/oss/au1000.c:1763:
+		if (get_user(val, (int *) arg))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1801: FILE: sound/oss/au1000.c:1775:
+			if ((ret = prog_dmabuf_adc(s)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1814: FILE: sound/oss/au1000.c:1788:
+			if ((ret = prog_dmabuf_dac(s)))

CHECK:SPACING: No space is necessary after a cast
#1823: FILE: sound/oss/au1000.c:1797:
+		if (get_user(val, (int *) arg))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1830: FILE: sound/oss/au1000.c:1804:
+			if ((ret = prog_dmabuf_adc(s)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1836: FILE: sound/oss/au1000.c:1810:
+			if ((ret = prog_dmabuf_dac(s)))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1868: FILE: sound/oss/au1000.c:1842:
+
+

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1878: FILE: sound/oss/au1000.c:1852:
+		dbg(__FUNCTION__ ": non-blocking");

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1880: FILE: sound/oss/au1000.c:1854:
+		dbg(__FUNCTION__ ": blocking");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1882: FILE: sound/oss/au1000.c:1856:
+^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1906: FILE: sound/oss/au1000.c:1880:
+		s->dma_adc.ossfragshift = s->dma_adc.ossmaxfrags =

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1907: FILE: sound/oss/au1000.c:1881:
+			s->dma_adc.subdivision = s->dma_adc.total_bytes = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1916: FILE: sound/oss/au1000.c:1890:
+		s->dma_dac.ossfragshift = s->dma_dac.ossmaxfrags =

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1917: FILE: sound/oss/au1000.c:1891:
+			s->dma_dac.subdivision = s->dma_dac.total_bytes = 0;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1926: FILE: sound/oss/au1000.c:1900:
+		if ((ret = prog_dmabuf_adc(s)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1930: FILE: sound/oss/au1000.c:1904:
+		if ((ret = prog_dmabuf_dac(s)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1945: FILE: sound/oss/au1000.c:1919:
+^I$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1961: FILE: sound/oss/au1000.c:1935:
+	s->open_mode &= ((~file->f_mode) & (FMODE_READ|FMODE_WRITE));
 	                                              ^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1968: FILE: sound/oss/au1000.c:1942:
+static /*const */ struct file_operations au1000_audio_fops = {

WARNING:INDENTED_LABEL: labels should not be indented
#1969: FILE: sound/oss/au1000.c:1943:
+	owner:		THIS_MODULE,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1970: FILE: sound/oss/au1000.c:1944:
+	llseek:		au1000_llseek,
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#1970: FILE: sound/oss/au1000.c:1944:
+	llseek:		au1000_llseek,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1971: FILE: sound/oss/au1000.c:1945:
+	read:		au1000_read,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#1971: FILE: sound/oss/au1000.c:1945:
+	read:		au1000_read,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1972: FILE: sound/oss/au1000.c:1946:
+	write:		au1000_write,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#1972: FILE: sound/oss/au1000.c:1946:
+	write:		au1000_write,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1973: FILE: sound/oss/au1000.c:1947:
+	poll:		au1000_poll,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#1973: FILE: sound/oss/au1000.c:1947:
+	poll:		au1000_poll,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1974: FILE: sound/oss/au1000.c:1948:
+	ioctl:		au1000_ioctl,
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#1974: FILE: sound/oss/au1000.c:1948:
+	ioctl:		au1000_ioctl,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1975: FILE: sound/oss/au1000.c:1949:
+	mmap:		au1000_mmap,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#1975: FILE: sound/oss/au1000.c:1949:
+	mmap:		au1000_mmap,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1976: FILE: sound/oss/au1000.c:1950:
+	open:		au1000_open,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#1976: FILE: sound/oss/au1000.c:1950:
+	open:		au1000_open,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1977: FILE: sound/oss/au1000.c:1951:
+	release:	au1000_release,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#1977: FILE: sound/oss/au1000.c:1951:
+	release:	au1000_release,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1980: FILE: sound/oss/au1000.c:1954:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1983: FILE: sound/oss/au1000.c:1957:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2004: FILE: sound/oss/au1000.c:1978:
+	len += sprintf (buf + len, "AC97C_CONFIG = %08x\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2006: FILE: sound/oss/au1000.c:1980:
+	len += sprintf (buf + len, "AC97C_STATUS = %08x\n",

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2008: FILE: sound/oss/au1000.c:1982:
+	len += sprintf (buf + len, "AC97C_CNTRL  = %08x\n",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2024: FILE: sound/oss/au1000.c:1998:
+	if ((len -= fpos) > length)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2029: FILE: sound/oss/au1000.c:2003:
+
+}

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#2039: FILE: sound/oss/au1000.c:2013:
+static int __devinit au1000_probe(void)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2052: FILE: sound/oss/au1000.c:2026:
+^I$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#2054: FILE: sound/oss/au1000.c:2028:
+	if(s->codec == NULL)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#2054: FILE: sound/oss/au1000.c:2028:
+	if(s->codec == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!s->codec"
#2054: FILE: sound/oss/au1000.c:2028:
+	if(s->codec == NULL)

CHECK:SPACING: No space is necessary after a cast
#2065: FILE: sound/oss/au1000.c:2039:
+	if (!request_region(virt_to_phys((void *) AC97C_CONFIG),

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2071: FILE: sound/oss/au1000.c:2045:
+	if ((s->dma_dac.dmanr = request_au1000_dma(DMA_ID_AC97C_TX,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2078: FILE: sound/oss/au1000.c:2052:
+	if ((s->dma_adc.dmanr = request_au1000_dma(DMA_ID_AC97C_RX,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2106: FILE: sound/oss/au1000.c:2080:
+	if ((s->dev_audio = register_sound_dsp(&au1000_audio_fops, -1)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2108: FILE: sound/oss/au1000.c:2082:
+	if ((s->codec->dev_mixer =

WARNING:TYPO_SPELLING: 'intialize' may be misspelled - perhaps 'initialize'?
#2113: FILE: sound/oss/au1000.c:2087:
+	/* intialize the debug proc device */
 	   ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2132: FILE: sound/oss/au1000.c:2106:
+	/* need to delay around 500msec(bleech) to give
+	   some CODECs enough time to wakeup */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2132: FILE: sound/oss/au1000.c:2106:
+	   some CODECs enough time to wakeup */

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#2137: FILE: sound/oss/au1000.c:2111:
+	udelay(100);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:SPACING: No space is necessary after a cast
#2163: FILE: sound/oss/au1000.c:2137:
+		     (unsigned long) &val);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2164: FILE: sound/oss/au1000.c:2138:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#2171: FILE: sound/oss/au1000.c:2145:
+		u16 ac97_extstat = rdcodec(s->codec, AC97_EXTENDED_STATUS);
+		wrcodec(s->codec, AC97_EXTENDED_STATUS,

CHECK:SPACING: No space is necessary after a cast
#2181: FILE: sound/oss/au1000.c:2155:
+		     (unsigned long) &val);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2186: FILE: sound/oss/au1000.c:2160:
+	s->ac97_ps = create_proc_read_entry (proc_str, 0, NULL,

CHECK:SPACING: No space is necessary after a cast
#2201: FILE: sound/oss/au1000.c:2175:
+	release_region(virt_to_phys((void *) AC97C_CONFIG), 0x14);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2203: FILE: sound/oss/au1000.c:2177:
+ ^Iac97_release_codec(s->codec);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2203: FILE: sound/oss/au1000.c:2177:
+ ^Iac97_release_codec(s->codec);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2203: FILE: sound/oss/au1000.c:2177:
+ ^Iac97_release_codec(s->codec);$

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#2207: FILE: sound/oss/au1000.c:2181:
+static void __devinit au1000_remove(void)

CHECK:SPACING: No space is necessary after a cast
#2220: FILE: sound/oss/au1000.c:2194:
+	release_region(virt_to_phys((void *) AC97C_CONFIG), 0x14);

ERROR:DATE_TIME: Use of the '__TIME__' macro makes the build non-deterministic
#2228: FILE: sound/oss/au1000.c:2202:
+	info("stevel@mvista.com, built " __TIME__ " on " __DATE__);

It is generally desirable that building the same source code with
the same set of tools is reproducible, i.e. the output is always
exactly the same.

The kernel does *not* use the ``__DATE__`` and ``__TIME__`` macros,
and enables warnings if they are used as they can lead to
non-deterministic builds.

See: https://www.kernel.org/doc/html/latest/kbuild/reproducible-builds.html#timestamps

ERROR:DATE_TIME: Use of the '__DATE__' macro makes the build non-deterministic
#2228: FILE: sound/oss/au1000.c:2202:
+	info("stevel@mvista.com, built " __TIME__ " on " __DATE__);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2252: FILE: sound/oss/au1000.c:2226:
+	for(this_opt=strtok(options, ",");
 	            ^

ERROR:SPACING: space required before the open parenthesis '('
#2252: FILE: sound/oss/au1000.c:2226:
+	for(this_opt=strtok(options, ",");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2253: FILE: sound/oss/au1000.c:2227:
+	    this_opt; this_opt=strtok(NULL, ",")) {
 	                      ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2254: FILE: sound/oss/au1000.c:2228:
+		if (!strncmp(this_opt, "vra", 3)) {
+			vra = 1;
+		}

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#2262: FILE: sound/oss/au1000.c:2236:
+__setup("au1000_audio=", au1000_setup);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000355759.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 82 errors, 96 warnings, 117 checks, 2238 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000355759.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
