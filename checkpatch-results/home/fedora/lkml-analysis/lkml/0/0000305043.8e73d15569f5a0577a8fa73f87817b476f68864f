WARNING:TYPO_SPELLING: 'preceeding' may be misspelled - perhaps 'preceding'?
#38: 
Heh.  I didn't look at the preceeding code; just fixed the MCFG code
                           ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#52: 
diff -urpNX build-tools/dontdiff linus-2.6/arch/i386/Kconfig pciexp-2.6/arch/i386/Kconfig

CHECK:SPACING: No space is necessary after a cast
#106: FILE: arch/i386/kernel/acpi/boot.c:106:
+	mcfg = (struct acpi_table_mcfg *) __acpi_map_table(phys_addr, size);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#108: FILE: arch/i386/kernel/acpi/boot.c:108:
+		printk(KERN_WARNING PREFIX "Unable to map MCFG\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#113: FILE: arch/i386/kernel/acpi/boot.c:113:
+		printk(KERN_ERR PREFIX "MMCONFIG not in low 4GB of memory\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#205: FILE: arch/i386/kernel/acpi/boot.c:491:
+	if (acpi_noirq) {
 		return 1;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#257: FILE: arch/i386/kernel/acpi/boot.c:567:
+acpi_boot_init (void)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#261: FILE: arch/i386/kernel/acpi/boot.c:571:
+	if (acpi_disabled && !acpi_ht)
+		 return 1;

WARNING:TABSTOP: Statements should start on a tabstop
#262: FILE: arch/i386/kernel/acpi/boot.c:572:
+		 return 1;

WARNING:TYPO_SPELLING: 'overriden' may be misspelled - perhaps 'overridden'?
#266: FILE: arch/i386/kernel/acpi/boot.c:576:
+	 * overriden if IOAPICs are enumerated (below).
 	   ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#270: FILE: arch/i386/kernel/acpi/boot.c:580:
+^I/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#281: FILE: arch/i386/kernel/acpi/boot.c:591:
+		printk(KERN_WARNING PREFIX "BIOS listed in blacklist, disabling ACPI support\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#291: FILE: arch/i386/kernel/acpi/boot.c:601:
+		printk(KERN_ERR PREFIX "Error %d parsing MCFG\n", result);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#295: FILE: arch/i386/kernel/acpi/boot.c:605:
+		printk(KERN_WARNING PREFIX "Multiple MCFG tables exist\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#303: FILE: arch/i386/kernel/acpi/boot.c:612:
+		printk(KERN_ERR PREFIX "Error %d parsing HPET\n", result);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#307: FILE: arch/i386/kernel/acpi/boot.c:616:
+		printk(KERN_WARNING PREFIX "Multiple HPET tables exist\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#355: FILE: arch/i386/pci/mmconfig.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LINE_SPACING: Missing a blank line after declarations
#378: FILE: arch/i386/pci/mmconfig.c:24:
+	u32 dev_base = pci_mmcfg_base_addr | (bus << 20) | (devfn << 12);
+	if (dev_base != mmcfg_last_accessed_device) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bus > 255'
#388: FILE: arch/i386/pci/mmconfig.c:34:
+	if (!value || (bus > 255) || (devfn > 255) || (reg > 4095))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'devfn > 255'
#388: FILE: arch/i386/pci/mmconfig.c:34:
+	if (!value || (bus > 255) || (devfn > 255) || (reg > 4095))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg > 4095'
#388: FILE: arch/i386/pci/mmconfig.c:34:
+	if (!value || (bus > 255) || (devfn > 255) || (reg > 4095))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#416: FILE: arch/i386/pci/mmconfig.c:62:
+^Iif ((bus > 255) || (devfn > 255) || (reg > 4095)) $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bus > 255'
#416: FILE: arch/i386/pci/mmconfig.c:62:
+	if ((bus > 255) || (devfn > 255) || (reg > 4095)) 

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'devfn > 255'
#416: FILE: arch/i386/pci/mmconfig.c:62:
+	if ((bus > 255) || (devfn > 255) || (reg > 4095)) 

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg > 4095'
#416: FILE: arch/i386/pci/mmconfig.c:62:
+	if ((bus > 255) || (devfn > 255) || (reg > 4095)) 

WARNING:CONST_STRUCT: struct pci_raw_ops should normally be const
#443: FILE: arch/i386/pci/mmconfig.c:89:
+static struct pci_raw_ops pci_mmcfg = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#455: FILE: arch/i386/pci/mmconfig.c:101:
+	printk(KERN_INFO "PCI: Using MMCONFIG\n");

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#487: FILE: arch/ia64/pci/pci.c:60:
+#define PCI_SAL_EXT_ADDRESS(seg, bus, devfn, reg) \
+	((u64)(seg << 28) | (u64)(bus << 20) | \
+	 (u64)(devfn << 12) | (u64)(reg)), 1

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'seg' may be better as '(seg)' to avoid precedence issues
#487: FILE: arch/ia64/pci/pci.c:60:
+#define PCI_SAL_EXT_ADDRESS(seg, bus, devfn, reg) \
+	((u64)(seg << 28) | (u64)(bus << 20) | \
+	 (u64)(devfn << 12) | (u64)(reg)), 1

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bus' may be better as '(bus)' to avoid precedence issues
#487: FILE: arch/ia64/pci/pci.c:60:
+#define PCI_SAL_EXT_ADDRESS(seg, bus, devfn, reg) \
+	((u64)(seg << 28) | (u64)(bus << 20) | \
+	 (u64)(devfn << 12) | (u64)(reg)), 1

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'devfn' may be better as '(devfn)' to avoid precedence issues
#487: FILE: arch/ia64/pci/pci.c:60:
+#define PCI_SAL_EXT_ADDRESS(seg, bus, devfn, reg) \
+	((u64)(seg << 28) | (u64)(bus << 20) | \
+	 (u64)(devfn << 12) | (u64)(reg)), 1

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'seg > 65535'
#498: FILE: arch/ia64/pci/pci.c:70:
+	if (!value || (seg > 65535) || (bus > 255) || (devfn > 255) || (reg > 4095))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bus > 255'
#498: FILE: arch/ia64/pci/pci.c:70:
+	if (!value || (seg > 65535) || (bus > 255) || (devfn > 255) || (reg > 4095))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'devfn > 255'
#498: FILE: arch/ia64/pci/pci.c:70:
+	if (!value || (seg > 65535) || (bus > 255) || (devfn > 255) || (reg > 4095))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg > 4095'
#498: FILE: arch/ia64/pci/pci.c:70:
+	if (!value || (seg > 65535) || (bus > 255) || (devfn > 255) || (reg > 4095))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'seg < 256'
#502: FILE: arch/ia64/pci/pci.c:73:
+	if ((seg < 256) && (reg < 256)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg < 256'
#502: FILE: arch/ia64/pci/pci.c:73:
+	if ((seg < 256) && (reg < 256)) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#502: FILE: arch/ia64/pci/pci.c:73:
+	if ((seg < 256) && (reg < 256)) {
[...]
+	} else {
[...]

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#503: FILE: arch/ia64/pci/pci.c:74:
+		result = ia64_sal_pci_config_read(PCI_SAL_ADDRESS(seg, bus, devfn, reg), len, &data);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#505: FILE: arch/ia64/pci/pci.c:76:
+		result = ia64_sal_pci_config_read(PCI_SAL_EXT_ADDRESS(seg, bus, devfn, reg), len, &data);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'seg > 65535'
#515: FILE: arch/ia64/pci/pci.c:87:
+	if ((seg > 65535) || (bus > 255) || (devfn > 255) || (reg > 4095))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bus > 255'
#515: FILE: arch/ia64/pci/pci.c:87:
+	if ((seg > 65535) || (bus > 255) || (devfn > 255) || (reg > 4095))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'devfn > 255'
#515: FILE: arch/ia64/pci/pci.c:87:
+	if ((seg > 65535) || (bus > 255) || (devfn > 255) || (reg > 4095))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg > 4095'
#515: FILE: arch/ia64/pci/pci.c:87:
+	if ((seg > 65535) || (bus > 255) || (devfn > 255) || (reg > 4095))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'seg < 256'
#519: FILE: arch/ia64/pci/pci.c:90:
+	if ((seg < 256) && (reg < 256)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg < 256'
#519: FILE: arch/ia64/pci/pci.c:90:
+	if ((seg < 256) && (reg < 256)) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#519: FILE: arch/ia64/pci/pci.c:90:
+	if ((seg < 256) && (reg < 256)) {
[...]
+	} else {
[...]

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#522: FILE: arch/ia64/pci/pci.c:93:
+		return ia64_sal_pci_config_write(PCI_SAL_EXT_ADDRESS(seg, bus, devfn, reg), len, value);

WARNING:CONST_STRUCT: struct pci_raw_ops should normally be const
#527: FILE: arch/ia64/pci/pci.c:97:
+static struct pci_raw_ops pci_sal_ops = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#575: FILE: drivers/pci/pci-sysfs.c:173:
+		.mode = S_IRUGO | S_IWUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#590: FILE: drivers/pci/pci-sysfs.c:192:
+	if (pdev->cfg_size < 4096) {
[...]
+	} else {
[...]

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'header == 0'
#639: FILE: drivers/pci/pci.c:203:
+	if ((header == 0) || ((header & 0xfff0ffff) == 0x0000ffff))

WARNING:LINE_SPACING: Missing a blank line after declarations
#681: FILE: drivers/pci/probe.c:541:
+	int is_pci_express_dev = pci_find_capability(dev, PCI_CAP_ID_EXP);
+	if (is_pci_express_dev)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#798: FILE: include/asm-ia64/sal.h:744:
+ia64_sal_pci_config_read (u64 pci_config_addr, int type, u64 size, u64 *value)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#811: FILE: include/asm-ia64/sal.h:755:
+ia64_sal_pci_config_write (u64 pci_config_addr, int type, u64 size, u64 value)

ERROR:CODE_INDENT: code indent should use tabs where possible
#816: FILE: include/asm-ia64/sal.h:759:
+^I         type, 0, 0, 0);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#834: FILE: include/linux/acpi.h:327:
+} __attribute__ ((packed));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#919: FILE: include/linux/pci.h:654:
+int pci_find_ext_capability (struct pci_dev *dev, int cap);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#927: FILE: include/linux/pci.h:814:
+static inline int pci_find_ext_capability (struct pci_dev *dev, int cap) {return 0; }

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000305043.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 4 errors, 32 warnings, 23 checks, 791 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000305043.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
