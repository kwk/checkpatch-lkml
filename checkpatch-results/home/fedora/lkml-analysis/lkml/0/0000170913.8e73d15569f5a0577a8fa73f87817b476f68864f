CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#96: FILE: crypto/aes.c:280:
+		t = E_KEY[5] = load_le32(in_key, 5);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#109: FILE: crypto/aes.c:289:
+		t = E_KEY[7] = load_le32(in_key, 7);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#203: FILE: crypto/anubis.c:487:
+	for (i = 0; i < N; i++) {
+		kappa[i] = load_be32(in_key, i);
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#228: FILE: crypto/anubis.c:586:
+	for (i = 0; i < 4; i++) {
+		state[i] = load_be32(plaintext, i) ^ roundKey[0][i];
 	}

CHECK:CAMELCASE: Avoid CamelCase: <roundKey>
#229: FILE: crypto/anubis.c:587:
+		state[i] = load_be32(plaintext, i) ^ roundKey[0][i];

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:BRACES: braces {} are not necessary for single statement blocks
#279: FILE: crypto/anubis.c:658:
+	for (i = 0; i < 4; i++) {
+		store_be32(ciphertext, i, inter[i]);
 	}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#704: FILE: crypto/helper.h:1:
+#ifndef _CRYPTO_HELPER_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#708: FILE: crypto/helper.h:5:
+/* These macros are intended for use on stack or memory
+** operands, not register ones.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#710: FILE: crypto/helper.h:7:
+** Provide special case for your arch if needed */

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#712: FILE: crypto/helper.h:9:
+#if 0

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#726: FILE: crypto/helper.h:23:
+  #define BYTE7(v) (((u8*)&v)[7])

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#726: FILE: crypto/helper.h:23:
+  #define BYTE7(v) (((u8*)&v)[7])

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#727: FILE: crypto/helper.h:24:
+  #define BYTE6(v) (((u8*)&v)[6])

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#727: FILE: crypto/helper.h:24:
+  #define BYTE6(v) (((u8*)&v)[6])

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#728: FILE: crypto/helper.h:25:
+  #define BYTE5(v) (((u8*)&v)[5])

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#728: FILE: crypto/helper.h:25:
+  #define BYTE5(v) (((u8*)&v)[5])

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#729: FILE: crypto/helper.h:26:
+  #define BYTE4(v) (((u8*)&v)[4])

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#729: FILE: crypto/helper.h:26:
+  #define BYTE4(v) (((u8*)&v)[4])

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#730: FILE: crypto/helper.h:27:
+  #define BYTE3(v) (((u8*)&v)[3])

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#730: FILE: crypto/helper.h:27:
+  #define BYTE3(v) (((u8*)&v)[3])

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#731: FILE: crypto/helper.h:28:
+  #define BYTE2(v) (((u8*)&v)[2])

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#731: FILE: crypto/helper.h:28:
+  #define BYTE2(v) (((u8*)&v)[2])

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#732: FILE: crypto/helper.h:29:
+  #define BYTE1(v) (((u8*)&v)[1])

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#732: FILE: crypto/helper.h:29:
+  #define BYTE1(v) (((u8*)&v)[1])

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#733: FILE: crypto/helper.h:30:
+  #define BYTE0(v) (((u8*)&v)[0])

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#733: FILE: crypto/helper.h:30:
+  #define BYTE0(v) (((u8*)&v)[0])

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#735: FILE: crypto/helper.h:32:
+  #define BYTE7(v) (((u8*)&v)[sizeof(v)-8])

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#735: FILE: crypto/helper.h:32:
+  #define BYTE7(v) (((u8*)&v)[sizeof(v)-8])
                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#735: FILE: crypto/helper.h:32:
+  #define BYTE7(v) (((u8*)&v)[sizeof(v)-8])

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#736: FILE: crypto/helper.h:33:
+  #define BYTE6(v) (((u8*)&v)[sizeof(v)-7])

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#736: FILE: crypto/helper.h:33:
+  #define BYTE6(v) (((u8*)&v)[sizeof(v)-7])
                                        ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#736: FILE: crypto/helper.h:33:
+  #define BYTE6(v) (((u8*)&v)[sizeof(v)-7])

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#737: FILE: crypto/helper.h:34:
+  #define BYTE5(v) (((u8*)&v)[sizeof(v)-6])

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#737: FILE: crypto/helper.h:34:
+  #define BYTE5(v) (((u8*)&v)[sizeof(v)-6])
                                        ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#737: FILE: crypto/helper.h:34:
+  #define BYTE5(v) (((u8*)&v)[sizeof(v)-6])

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#738: FILE: crypto/helper.h:35:
+  #define BYTE4(v) (((u8*)&v)[sizeof(v)-5])

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#738: FILE: crypto/helper.h:35:
+  #define BYTE4(v) (((u8*)&v)[sizeof(v)-5])
                                        ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#738: FILE: crypto/helper.h:35:
+  #define BYTE4(v) (((u8*)&v)[sizeof(v)-5])

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#739: FILE: crypto/helper.h:36:
+  #define BYTE3(v) (((u8*)&v)[sizeof(v)-4])

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#739: FILE: crypto/helper.h:36:
+  #define BYTE3(v) (((u8*)&v)[sizeof(v)-4])
                                        ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#739: FILE: crypto/helper.h:36:
+  #define BYTE3(v) (((u8*)&v)[sizeof(v)-4])

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#740: FILE: crypto/helper.h:37:
+  #define BYTE2(v) (((u8*)&v)[sizeof(v)-3])

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#740: FILE: crypto/helper.h:37:
+  #define BYTE2(v) (((u8*)&v)[sizeof(v)-3])
                                        ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#740: FILE: crypto/helper.h:37:
+  #define BYTE2(v) (((u8*)&v)[sizeof(v)-3])

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#741: FILE: crypto/helper.h:38:
+  #define BYTE1(v) (((u8*)&v)[sizeof(v)-2])

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#741: FILE: crypto/helper.h:38:
+  #define BYTE1(v) (((u8*)&v)[sizeof(v)-2])
                                        ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#741: FILE: crypto/helper.h:38:
+  #define BYTE1(v) (((u8*)&v)[sizeof(v)-2])

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#742: FILE: crypto/helper.h:39:
+  #define BYTE0(v) (((u8*)&v)[sizeof(v)-1])

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#742: FILE: crypto/helper.h:39:
+  #define BYTE0(v) (((u8*)&v)[sizeof(v)-1])
                                        ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#742: FILE: crypto/helper.h:39:
+  #define BYTE0(v) (((u8*)&v)[sizeof(v)-1])

CHECK:LINE_SPACING: Please don't use multiple blank lines
#748: FILE: crypto/helper.h:45:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#749: FILE: crypto/helper.h:46:
+#define load_le32(p, i) le32_to_cpu( ((__le32*)(p))[i] )

ERROR:SPACING: space prohibited after that open parenthesis '('
#749: FILE: crypto/helper.h:46:
+#define load_le32(p, i) le32_to_cpu( ((__le32*)(p))[i] )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#749: FILE: crypto/helper.h:46:
+#define load_le32(p, i) le32_to_cpu( ((__le32*)(p))[i] )

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#750: FILE: crypto/helper.h:47:
+#define load_be32(p, i) be32_to_cpu( ((__be32*)(p))[i] )

ERROR:SPACING: space prohibited after that open parenthesis '('
#750: FILE: crypto/helper.h:47:
+#define load_be32(p, i) be32_to_cpu( ((__be32*)(p))[i] )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#750: FILE: crypto/helper.h:47:
+#define load_be32(p, i) be32_to_cpu( ((__be32*)(p))[i] )

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#751: FILE: crypto/helper.h:48:
+#define load_le64(p, i) le64_to_cpu( ((__le64*)(p))[i] )

ERROR:SPACING: space prohibited after that open parenthesis '('
#751: FILE: crypto/helper.h:48:
+#define load_le64(p, i) le64_to_cpu( ((__le64*)(p))[i] )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#751: FILE: crypto/helper.h:48:
+#define load_le64(p, i) le64_to_cpu( ((__le64*)(p))[i] )

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#752: FILE: crypto/helper.h:49:
+#define load_be64(p, i) be64_to_cpu( ((__be64*)(p))[i] )

ERROR:SPACING: space prohibited after that open parenthesis '('
#752: FILE: crypto/helper.h:49:
+#define load_be64(p, i) be64_to_cpu( ((__be64*)(p))[i] )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#752: FILE: crypto/helper.h:49:
+#define load_be64(p, i) be64_to_cpu( ((__be64*)(p))[i] )

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#754: FILE: crypto/helper.h:51:
+#define store_le32(p, i, v) ((__le32*)(p))[i] = cpu_to_le32(v)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#754: FILE: crypto/helper.h:51:
+#define store_le32(p, i, v) ((__le32*)(p))[i] = cpu_to_le32(v)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#755: FILE: crypto/helper.h:52:
+#define store_be32(p, i, v) ((__be32*)(p))[i] = cpu_to_be32(v)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#755: FILE: crypto/helper.h:52:
+#define store_be32(p, i, v) ((__be32*)(p))[i] = cpu_to_be32(v)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#756: FILE: crypto/helper.h:53:
+#define store_le64(p, i, v) ((__le64*)(p))[i] = cpu_to_le64(v)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#756: FILE: crypto/helper.h:53:
+#define store_le64(p, i, v) ((__le64*)(p))[i] = cpu_to_le64(v)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#757: FILE: crypto/helper.h:54:
+#define store_be64(p, i, v) ((__be64*)(p))[i] = cpu_to_be64(v)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#757: FILE: crypto/helper.h:54:
+#define store_be64(p, i, v) ((__be64*)(p))[i] = cpu_to_be64(v)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#885: FILE: crypto/md4.c:55:
+#define ROUND1(a,b,c,d,k,s) (a = rol32(a + F(b,c,d) + k, s))
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#885: FILE: crypto/md4.c:55:
+#define ROUND1(a,b,c,d,k,s) (a = rol32(a + F(b,c,d) + k, s))
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#885: FILE: crypto/md4.c:55:
+#define ROUND1(a,b,c,d,k,s) (a = rol32(a + F(b,c,d) + k, s))
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#885: FILE: crypto/md4.c:55:
+#define ROUND1(a,b,c,d,k,s) (a = rol32(a + F(b,c,d) + k, s))
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#885: FILE: crypto/md4.c:55:
+#define ROUND1(a,b,c,d,k,s) (a = rol32(a + F(b,c,d) + k, s))
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#885: FILE: crypto/md4.c:55:
+#define ROUND1(a,b,c,d,k,s) (a = rol32(a + F(b,c,d) + k, s))
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#885: FILE: crypto/md4.c:55:
+#define ROUND1(a,b,c,d,k,s) (a = rol32(a + F(b,c,d) + k, s))
                                                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#885: FILE: crypto/md4.c:55:
+#define ROUND1(a,b,c,d,k,s) (a = rol32(a + F(b,c,d) + k, s))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'k' may be better as '(k)' to avoid precedence issues
#885: FILE: crypto/md4.c:55:
+#define ROUND1(a,b,c,d,k,s) (a = rol32(a + F(b,c,d) + k, s))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#886: FILE: crypto/md4.c:56:
+#define ROUND2(a,b,c,d,k,s) (a = rol32(a + G(b,c,d) + k + (u32)0x5A827999, s))
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#886: FILE: crypto/md4.c:56:
+#define ROUND2(a,b,c,d,k,s) (a = rol32(a + G(b,c,d) + k + (u32)0x5A827999, s))
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#886: FILE: crypto/md4.c:56:
+#define ROUND2(a,b,c,d,k,s) (a = rol32(a + G(b,c,d) + k + (u32)0x5A827999, s))
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#886: FILE: crypto/md4.c:56:
+#define ROUND2(a,b,c,d,k,s) (a = rol32(a + G(b,c,d) + k + (u32)0x5A827999, s))
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#886: FILE: crypto/md4.c:56:
+#define ROUND2(a,b,c,d,k,s) (a = rol32(a + G(b,c,d) + k + (u32)0x5A827999, s))
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#886: FILE: crypto/md4.c:56:
+#define ROUND2(a,b,c,d,k,s) (a = rol32(a + G(b,c,d) + k + (u32)0x5A827999, s))
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#886: FILE: crypto/md4.c:56:
+#define ROUND2(a,b,c,d,k,s) (a = rol32(a + G(b,c,d) + k + (u32)0x5A827999, s))
                                                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#886: FILE: crypto/md4.c:56:
+#define ROUND2(a,b,c,d,k,s) (a = rol32(a + G(b,c,d) + k + (u32)0x5A827999, s))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'k' may be better as '(k)' to avoid precedence issues
#886: FILE: crypto/md4.c:56:
+#define ROUND2(a,b,c,d,k,s) (a = rol32(a + G(b,c,d) + k + (u32)0x5A827999, s))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#887: FILE: crypto/md4.c:57:
+#define ROUND3(a,b,c,d,k,s) (a = rol32(a + H(b,c,d) + k + (u32)0x6ED9EBA1, s))
                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#887: FILE: crypto/md4.c:57:
+#define ROUND3(a,b,c,d,k,s) (a = rol32(a + H(b,c,d) + k + (u32)0x6ED9EBA1, s))
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#887: FILE: crypto/md4.c:57:
+#define ROUND3(a,b,c,d,k,s) (a = rol32(a + H(b,c,d) + k + (u32)0x6ED9EBA1, s))
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#887: FILE: crypto/md4.c:57:
+#define ROUND3(a,b,c,d,k,s) (a = rol32(a + H(b,c,d) + k + (u32)0x6ED9EBA1, s))
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#887: FILE: crypto/md4.c:57:
+#define ROUND3(a,b,c,d,k,s) (a = rol32(a + H(b,c,d) + k + (u32)0x6ED9EBA1, s))
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#887: FILE: crypto/md4.c:57:
+#define ROUND3(a,b,c,d,k,s) (a = rol32(a + H(b,c,d) + k + (u32)0x6ED9EBA1, s))
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#887: FILE: crypto/md4.c:57:
+#define ROUND3(a,b,c,d,k,s) (a = rol32(a + H(b,c,d) + k + (u32)0x6ED9EBA1, s))
                                                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#887: FILE: crypto/md4.c:57:
+#define ROUND3(a,b,c,d,k,s) (a = rol32(a + H(b,c,d) + k + (u32)0x6ED9EBA1, s))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'k' may be better as '(k)' to avoid precedence issues
#887: FILE: crypto/md4.c:57:
+#define ROUND3(a,b,c,d,k,s) (a = rol32(a + H(b,c,d) + k + (u32)0x6ED9EBA1, s))

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1101: FILE: crypto/sha1.c:90:
+	for (i = 0; i < 5; i++) {
+		store_be32(out, i, sctx->state[i]);
 	}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1122: FILE: crypto/sha256.c:62:
+	W[I] = load_be32(input,I);
 	                      ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1162: FILE: crypto/sha256.c:301:
+	for (i = 0; i < 8; i++) {
+		store_be32(out, i, sctx->state[i]);
 	}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1190: FILE: crypto/sha512.c:110:
+	W[I] = load_be64(input,I);
 	                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1202: FILE: crypto/sha512.c:249:
+        index = pad_len = t = i = 0;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1202: FILE: crypto/sha512.c:249:
+        index = pad_len = t = i = 0;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1202: FILE: crypto/sha512.c:249:
+        index = pad_len = t = i = 0;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1247: FILE: crypto/sha512.c:267:
+	for (i = 0; i < 8; i++) {
+		store_be64(hash, i, sctx->state[i]);
 	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1441: FILE: crypto/tgr192.c:472:
+	for (i = 0; i < 8; i++) {
+		x[i] = load_le64(data, i);
 	}

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1467: FILE: crypto/tgr192.c:588:
+	store_le32(tctx->hash, 56/4, lsb);
 	                         ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1468: FILE: crypto/tgr192.c:589:
+	store_le32(tctx->hash, 60/4, msb);
 	                         ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1496: FILE: crypto/tgr192.c:593:
+	((__be64*)out)[0] = ((__be64*)tctx->hash)[0] = cpu_to_be64(tctx->a);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1496: FILE: crypto/tgr192.c:593:
+	((__be64*)out)[0] = ((__be64*)tctx->hash)[0] = cpu_to_be64(tctx->a);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1497: FILE: crypto/tgr192.c:594:
+	((__be64*)out)[1] = ((__be64*)tctx->hash)[1] = cpu_to_be64(tctx->b);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1497: FILE: crypto/tgr192.c:594:
+	((__be64*)out)[1] = ((__be64*)tctx->hash)[1] = cpu_to_be64(tctx->b);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1498: FILE: crypto/tgr192.c:595:
+	((__be64*)out)[2] = ((__be64*)tctx->hash)[2] = cpu_to_be64(tctx->c);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1498: FILE: crypto/tgr192.c:595:
+	((__be64*)out)[2] = ((__be64*)tctx->hash)[2] = cpu_to_be64(tctx->c);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1518: FILE: crypto/twofish.c:544:
+   y = rol32(y, 8); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1521: FILE: crypto/twofish.c:546:
+   ctx->a[(j) + 1] = rol32(y, 9)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1530: FILE: crypto/twofish.c:557:
+   y = rol32(y, 8); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1533: FILE: crypto/twofish.c:559:
+   ctx->a[(j) + 1] = rol32(y, 9)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1542: FILE: crypto/twofish.c:570:
+   y = rol32(y, 8); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1545: FILE: crypto/twofish.c:572:
+   ctx->a[(j) + 1] = rol32(y, 9)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1557: FILE: crypto/twofish.c:625:
+   x = load_le32(in, n) ^ ctx->w[m]; \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1561: FILE: crypto/twofish.c:628:
+#define OUTUNPACK(n, x, m) { \
    x ^= ctx->w[m]; \
+   store_le32(out, n, x); \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#1561: FILE: crypto/twofish.c:628:
+#define OUTUNPACK(n, x, m) { \
    x ^= ctx->w[m]; \
+   store_le32(out, n, x); \
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1565: FILE: crypto/twofish.c:630:
+   store_le32(out, n, x); \$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1605: FILE: crypto/wp512.c:783:
+	for (i = 0; i < 8; i++) {
+		block[i] = load_be64(wctx->buffer, i);
 	}

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000170913.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 66 errors, 21 warnings, 39 checks, 1437 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000170913.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
