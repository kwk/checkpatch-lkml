WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#43: FILE: fs/cifs/inode.c:49:
+/*	dump_mem("\nUnixQPathInfo return data", &findData,
+		 sizeof(findData)); */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#43: FILE: fs/cifs/inode.c:49:
+		 sizeof(findData)); */

CHECK:CAMELCASE: Avoid CamelCase: <pTcon>
#50: FILE: fs/cifs/inode.c:53:
+			    kmalloc(strnlen(pTcon->treeName,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <treeName>
#50: FILE: fs/cifs/inode.c:53:
+			    kmalloc(strnlen(pTcon->treeName,

CHECK:CAMELCASE: Avoid CamelCase: <cifsInfo>
#90: FILE: fs/cifs/inode.c:99:
+		atomic_set(&cifsInfo->inUse, 1);	/* ok to set on every

CHECK:CAMELCASE: Avoid CamelCase: <inUse>
#90: FILE: fs/cifs/inode.c:99:
+		atomic_set(&cifsInfo->inUse, 1);	/* ok to set on every

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#91: FILE: fs/cifs/inode.c:100:
+		atomic_set(&cifsInfo->inUse, 1);	/* ok to set on every
+							   refresh of inode */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#91: FILE: fs/cifs/inode.c:100:
+							   refresh of inode */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#111: FILE: fs/cifs/inode.c:141:
+/*		inode->i_blksize = (pTcon->ses->server->maxBuf -
+				    MAX_CIFS_HDR_SIZE) & 0xFFFFFE00; */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#111: FILE: fs/cifs/inode.c:141:
+				    MAX_CIFS_HDR_SIZE) & 0xFFFFFE00; */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#121: FILE: fs/cifs/inode.c:148:
+/*		inode->i_blocks = (inode->i_blksize - 1 + num_of_bytes) >>
+				   inode->i_blkbits; */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#121: FILE: fs/cifs/inode.c:148:
+				   inode->i_blkbits; */

CHECK:CAMELCASE: Avoid CamelCase: <cFYI>
#133: FILE: fs/cifs/inode.c:156:
+			cFYI(1, ("Server inconsistency Error: it says "

WARNING:SPLIT_STRING: quoted string split across lines
#134: FILE: fs/cifs/inode.c:157:
+			cFYI(1, ("Server inconsistency Error: it says "
+				 "allocation size less than end of file "));

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pfindData == NULL'
#159: FILE: fs/cifs/inode.c:196:
+	if ((pfindData == NULL) && (*pinode != NULL)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:CAMELCASE: Avoid CamelCase: <pfindData>
#159: FILE: fs/cifs/inode.c:196:
+	if ((pfindData == NULL) && (*pinode != NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pfindData"
#159: FILE: fs/cifs/inode.c:196:
+	if ((pfindData == NULL) && (*pinode != NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pinode"
#159: FILE: fs/cifs/inode.c:196:
+	if ((pfindData == NULL) && (*pinode != NULL)) {

CHECK:CAMELCASE: Avoid CamelCase: <clientCanCacheRead>
#160: FILE: fs/cifs/inode.c:197:
+		if (CIFS_I(*pinode)->clientCanCacheRead) {

WARNING:SPLIT_STRING: quoted string split across lines
#162: FILE: fs/cifs/inode.c:199:
+			cFYI(1, ("No need to revalidate inode sizes on "
+				 "cached file "));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pfindData"
#169: FILE: fs/cifs/inode.c:205:
+	if (pfindData == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#172: FILE: fs/cifs/inode.c:207:
+		if (buf == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pinode"
#211: FILE: fs/cifs/inode.c:246:
+			if (*pinode == NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#221: FILE: fs/cifs/inode.c:259:
+/*			if (cifs_sb->mnt_cifs_flags &
+			    CIFS_MOUNT_SERVER_INUM) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#226: FILE: fs/cifs/inode.c:263:
+			} */ /* NB:
+				ino incremented to unique num in new_inode */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#226: FILE: fs/cifs/inode.c:263:
+				ino incremented to unique num in new_inode */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#237: FILE: fs/cifs/inode.c:277:
+/*		inode->i_blksize = (pTcon->ses->server->maxBuf -
+				    MAX_CIFS_HDR_SIZE) & 0xFFFFFE00; */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#237: FILE: fs/cifs/inode.c:277:
+				    MAX_CIFS_HDR_SIZE) & 0xFFFFFE00; */

CHECK:CAMELCASE: Avoid CamelCase: <cifsAttrs>
#260: FILE: fs/cifs/inode.c:303:
+			if (cifsInfo->cifsAttrs & ATTR_READONLY)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#275: FILE: fs/cifs/inode.c:314:
+			inode->i_blocks = (512 - 1 + le64_to_cpu(

CHECK:CAMELCASE: Avoid CamelCase: <AllocationSize>
#276: FILE: fs/cifs/inode.c:315:
+					   pfindData->AllocationSize)) >> 9;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#301: FILE: fs/cifs/inode.c:347:
+	if (buf)
 	    kfree(buf);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!full_path"
#319: FILE: fs/cifs/inode.c:389:
+	if (full_path == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <CIFSSMBOpen>
#333: FILE: fs/cifs/inode.c:403:
+		rc = CIFSSMBOpen(xid, pTcon, full_path, FILE_OPEN, DELETE,

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#336: FILE: fs/cifs/inode.c:406:
+		if (rc==0) {
 		      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <CIFSSMBRenameOpenFile>
#337: FILE: fs/cifs/inode.c:407:
+			CIFSSMBRenameOpenFile(xid, pTcon, netfid, NULL,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#368: FILE: fs/cifs/inode.c:431:
+			/*	rc = CIFSSMBSetAttrLegacy(xid, pTcon,
+							  full_path,

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#386: FILE: fs/cifs/inode.c:445:
+				if (rc==0) {
 				      ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#400: FILE: fs/cifs/inode.c:454:
+		if (rc==0) {
 		      ^

CHECK:CAMELCASE: Avoid CamelCase: <CIFSSMBDelFile>
#401: FILE: fs/cifs/inode.c:455:
+			rc = CIFSSMBDelFile(xid, pTcon, full_path,

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#420: FILE: fs/cifs/inode.c:469:
+				if (rc==0) {
 				      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#422: FILE: fs/cifs/inode.c:471:
+					CIFSSMBRenameOpenFile(xid, pTcon,
+						netfid, NULL,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!full_path"
#441: FILE: fs/cifs/inode.c:512:
+	if (full_path == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <CIFSSMBUnixSetPerms>
#465: FILE: fs/cifs/inode.c:536:
+				CIFSSMBUnixSetPerms(xid, pTcon, full_path,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#485: FILE: fs/cifs/inode.c:550:
+		/* eg CIFSSMBWinSetPerms(xid, pTcon, full_path, mode, -1, -1,
+					 local_nls); */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#485: FILE: fs/cifs/inode.c:550:
+					 local_nls); */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!full_path"
#494: FILE: fs/cifs/inode.c:579:
+	if (full_path == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <FreeXid>
#512: FILE: fs/cifs/inode.c:621:
+		FreeXid(xid);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fromName == NULL'
#521: FILE: fs/cifs/inode.c:630:
+	if ((fromName == NULL) || (toName == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'toName == NULL'
#521: FILE: fs/cifs/inode.c:630:
+	if ((fromName == NULL) || (toName == NULL)) {

CHECK:CAMELCASE: Avoid CamelCase: <fromName>
#521: FILE: fs/cifs/inode.c:630:
+	if ((fromName == NULL) || (toName == NULL)) {

CHECK:CAMELCASE: Avoid CamelCase: <toName>
#521: FILE: fs/cifs/inode.c:630:
+	if ((fromName == NULL) || (toName == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fromName"
#521: FILE: fs/cifs/inode.c:630:
+	if ((fromName == NULL) || (toName == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!toName"
#521: FILE: fs/cifs/inode.c:630:
+	if ((fromName == NULL) || (toName == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "info_buf_source"
#544: FILE: fs/cifs/inode.c:645:
+		if (info_buf_source != NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <CIFSSMBUnixQPathInfo>
#546: FILE: fs/cifs/inode.c:647:
+			rc = CIFSSMBUnixQPathInfo(xid, pTcon, fromName,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#547: FILE: fs/cifs/inode.c:648:
+			rc = CIFSSMBUnixQPathInfo(xid, pTcon, fromName,
 				info_buf_source, cifs_sb_source->local_nls);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#552: FILE: fs/cifs/inode.c:651:
+				rc = CIFSSMBUnixQPathInfo(xid, pTcon, toName,
 						info_buf_target,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc == 0'
#558: FILE: fs/cifs/inode.c:654:
+			if ((rc == 0) &&
+			    (info_buf_source->UniqueId ==
+			     info_buf_target->UniqueId)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info_buf_source->UniqueId ==
 			     info_buf_target->UniqueId'
#558: FILE: fs/cifs/inode.c:654:
+			if ((rc == 0) &&
+			    (info_buf_source->UniqueId ==
+			     info_buf_target->UniqueId)) {

CHECK:CAMELCASE: Avoid CamelCase: <UniqueId>
#559: FILE: fs/cifs/inode.c:655:
+			    (info_buf_source->UniqueId ==

CHECK:CAMELCASE: Avoid CamelCase: <CIFSSMBRename>
#570: FILE: fs/cifs/inode.c:665:
+				rc = CIFSSMBRename(xid, pTcon, fromName,

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#599: FILE: fs/cifs/inode.c:688:
+		if (rc==0) {
 		      ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!direntry->d_inode"
#610: FILE: fs/cifs/inode.c:716:
+	if (direntry->d_inode == NULL)

CHECK:CAMELCASE: Avoid CamelCase: <cifsInode>
#616: FILE: fs/cifs/inode.c:721:
+	if (cifsInode == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cifsInode"
#616: FILE: fs/cifs/inode.c:721:
+	if (cifsInode == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!full_path"
#630: FILE: fs/cifs/inode.c:735:
+	if (full_path == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#640: FILE: fs/cifs/inode.c:740:
+	cFYI(1, ("Revalidate: %s inode 0x%p count %d dentry: 0x%p d_time %ld "
+		 "jiffies %ld", full_path, direntry->d_inode,

CHECK:CAMELCASE: Avoid CamelCase: <lookupCacheEnabled>
#651: FILE: fs/cifs/inode.c:747:
+		   lookupCacheEnabled) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'direntry->d_inode->i_nlink == 1'
#652: FILE: fs/cifs/inode.c:748:
+		if ((S_ISREG(direntry->d_inode->i_mode) == 0) ||
+		    (direntry->d_inode->i_nlink == 1)) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#677: FILE: fs/cifs/inode.c:765:
+					      direntry->d_sb,xid);
 					                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#689: FILE: fs/cifs/inode.c:773:
+					 direntry->d_sb,xid);
 					               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#703: FILE: fs/cifs/inode.c:785:
+^Iif (timespec_equal(&local_mtime,&direntry->d_inode->i_mtime) && $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#703: FILE: fs/cifs/inode.c:785:
+	if (timespec_equal(&local_mtime,&direntry->d_inode->i_mtime) && 
 	                               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#703: FILE: fs/cifs/inode.c:785:
+	if (timespec_equal(&local_mtime,&direntry->d_inode->i_mtime) && 
 	                                ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'local_size == direntry->d_inode->i_size'
#703: FILE: fs/cifs/inode.c:785:
+	if (timespec_equal(&local_mtime,&direntry->d_inode->i_mtime) && 
+	    (local_size == direntry->d_inode->i_size)) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cifs_revalidate', this function's name, in a string
#705: FILE: fs/cifs/inode.c:787:
+		cFYI(1, ("cifs_revalidate - inode unchanged"));

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cifsInode->openFileList
#729: FILE: fs/cifs/inode.c:813:
+		if (list_empty(&(cifsInode->openFileList))) {

CHECK:CAMELCASE: Avoid CamelCase: <openFileList>
#729: FILE: fs/cifs/inode.c:813:
+		if (list_empty(&(cifsInode->openFileList))) {

WARNING:SPLIT_STRING: quoted string split across lines
#733: FILE: fs/cifs/inode.c:816:
+			cFYI(1, ("Invalidating read ahead data on "
+				 "closed file"));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#742: FILE: fs/cifs/inode.c:841:
+	unsigned offset = from & (PAGE_CACHE_SIZE - 1);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cifs_setattr', this function's name, in a string
#758: FILE: fs/cifs/inode.c:878:
+	cFYI(1, (" In cifs_setattr, name = %s attrs->iavalid 0x%x ",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!full_path"
#767: FILE: fs/cifs/inode.c:886:
+	if (full_path == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <GlobalSMBSeslock>
#781: FILE: fs/cifs/inode.c:899:
+		read_lock(&GlobalSMBSeslock);

CHECK:CAMELCASE: Avoid CamelCase: <cifsFileInfo>
#792: FILE: fs/cifs/inode.c:908:
+			open_file = list_entry(tmp, struct cifsFileInfo,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'open_file->pfile'
#799: FILE: fs/cifs/inode.c:911:
+			if ((open_file->pfile) &&
+			    ((open_file->pfile->f_flags & O_RDWR) ||
+			    (open_file->pfile->f_flags & O_WRONLY))) {

CHECK:CAMELCASE: Avoid CamelCase: <invalidHandle>
#802: FILE: fs/cifs/inode.c:914:
+				if (open_file->invalidHandle == FALSE) {

CHECK:BOOL_COMPARISON: Using comparison to FALSE is error prone
#802: FILE: fs/cifs/inode.c:914:
+				if (open_file->invalidHandle == FALSE) {

Comparisons of A to true and false are better written
as A and !A.

See: https://lore.kernel.org/lkml/1365563834.27174.12.camel@joe-AO722/

CHECK:CAMELCASE: Avoid CamelCase: <CIFSSMBSetFileSize>
#812: FILE: fs/cifs/inode.c:921:
+					rc = CIFSSMBSetFileSize(xid, pTcon,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#813: FILE: fs/cifs/inode.c:922:
+					rc = CIFSSMBSetFileSize(xid, pTcon,
+						attrs->ia_size, nfid, npid,

WARNING:SPLIT_STRING: quoted string split across lines
#816: FILE: fs/cifs/inode.c:925:
+					cFYI(1, ("SetFileSize by handle "
+						 "(setattrs) rc = %d", rc));

CHECK:BOOL_COMPARISON: Using comparison to FALSE is error prone
#825: FILE: fs/cifs/inode.c:934:
+		if (found == FALSE)

CHECK:CAMELCASE: Avoid CamelCase: <CIFSSMBSetEOF>
#838: FILE: fs/cifs/inode.c:941:
+			rc = CIFSSMBSetEOF(xid, pTcon, full_path,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#848: FILE: fs/cifs/inode.c:949:
+	/* CIFSSMBSetEOF(xid, pTcon, full_path, attrs->ia_size, TRUE,
+			 cifs_sb->local_nls); */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#848: FILE: fs/cifs/inode.c:949:
+			 cifs_sb->local_nls); */

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#876: FILE: fs/cifs/inode.c:980:
+		if ((mode & S_IWUGO) == 0) /* not writeable */ {

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:CAMELCASE: Avoid CamelCase: <Attributes>
#878: FILE: fs/cifs/inode.c:982:
+				time_buf.Attributes =

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#881: FILE: fs/cifs/inode.c:985:
+		} else if ((mode & S_IWUGO) == S_IWUGO) {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#881: FILE: fs/cifs/inode.c:985:
+		} else if ((mode & S_IWUGO) == S_IWUGO) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#888: FILE: fs/cifs/inode.c:992:
+		/* BB to be implemented -
+		   via Windows security descriptors or streams */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#888: FILE: fs/cifs/inode.c:992:
+		   via Windows security descriptors or streams */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#890: FILE: fs/cifs/inode.c:994:
+		/* CIFSSMBWinSetPerms(xid, pTcon, full_path, mode, uid, gid,
+				      cifs_sb->local_nls); */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#890: FILE: fs/cifs/inode.c:994:
+				      cifs_sb->local_nls); */

WARNING:SPLIT_STRING: quoted string split across lines
#913: FILE: fs/cifs/inode.c:1036:
+			cFYI(1, ("calling SetFileInfo since SetPathInfo for "
+				 "times not supported by this server"));

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#926: FILE: fs/cifs/inode.c:1043:
+			if (rc==0) {
 			      ^

CHECK:CAMELCASE: Avoid CamelCase: <CIFSSMBSetFileTimes>
#927: FILE: fs/cifs/inode.c:1044:
+				rc = CIFSSMBSetFileTimes(xid, pTcon, &time_buf,

ERROR:CODE_INDENT: code indent should use tabs where possible
#936: FILE: fs/cifs/inode.c:1052:
+        ^I        ^I^I&time_buf, cifs_sb->local_nls); */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#936: FILE: fs/cifs/inode.c:1052:
+        ^I        ^I^I&time_buf, cifs_sb->local_nls); */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#936: FILE: fs/cifs/inode.c:1052:
+        	        		&time_buf, cifs_sb->local_nls); */

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000195625.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 12 errors, 37 warnings, 60 checks, 869 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000195625.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
