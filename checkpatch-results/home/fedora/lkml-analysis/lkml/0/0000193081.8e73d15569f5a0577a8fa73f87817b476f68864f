WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
http://www.linuxtux.org/~juhl/kernel_patches/fs_cifs_cifsfs_h-whitespace.patch

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#47: FILE: fs/cifs/cifsfs.h:45:
+extern int cifs_create(struct inode *, struct dentry *, int,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#47: FILE: fs/cifs/cifsfs.h:45:
+extern int cifs_create(struct inode *, struct dentry *, int,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#47: FILE: fs/cifs/cifsfs.h:45:
+extern int cifs_create(struct inode *, struct dentry *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#47: FILE: fs/cifs/cifsfs.h:45:
+extern int cifs_create(struct inode *, struct dentry *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#47: FILE: fs/cifs/cifsfs.h:45:
+extern int cifs_create(struct inode *, struct dentry *, int,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#48: FILE: fs/cifs/cifsfs.h:46:
+extern int cifs_create(struct inode *, struct dentry *, int,
+	struct nameidata *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#49: FILE: fs/cifs/cifsfs.h:47:
+extern struct dentry *cifs_lookup(struct inode *, struct dentry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#49: FILE: fs/cifs/cifsfs.h:47:
+extern struct dentry *cifs_lookup(struct inode *, struct dentry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#49: FILE: fs/cifs/cifsfs.h:47:
+extern struct dentry *cifs_lookup(struct inode *, struct dentry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#49: FILE: fs/cifs/cifsfs.h:47:
+extern struct dentry *cifs_lookup(struct inode *, struct dentry *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#50: FILE: fs/cifs/cifsfs.h:48:
+extern struct dentry *cifs_lookup(struct inode *, struct dentry *,
+	struct nameidata *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#69: FILE: fs/cifs/cifsfs.h:70:
+	size_t read_size, loff_t * poffset);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#70: FILE: fs/cifs/cifsfs.h:71:
+extern ssize_t cifs_user_write(struct file *file,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#71: FILE: fs/cifs/cifsfs.h:72:
+extern ssize_t cifs_user_write(struct file *file,
+	const char __user *write_data, size_t write_size, loff_t * poffset);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#71: FILE: fs/cifs/cifsfs.h:72:
+	const char __user *write_data, size_t write_size, loff_t * poffset);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#81: FILE: fs/cifs/cifsfs.h:88:
+extern int cifs_readlink(struct dentry *direntry, char __user *buffer,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#82: FILE: fs/cifs/cifsfs.h:89:
+extern int cifs_readlink(struct dentry *direntry, char __user *buffer,
+	int buflen);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#91: FILE: fs/cifs/cifsfs.h:92:
+extern int cifs_removexattr(struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#91: FILE: fs/cifs/cifsfs.h:92:
+extern int cifs_removexattr(struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#91: FILE: fs/cifs/cifsfs.h:92:
+extern int cifs_removexattr(struct dentry *, const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#92: FILE: fs/cifs/cifsfs.h:93:
+extern int  cifs_setxattr(struct dentry *, const char *, const void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#92: FILE: fs/cifs/cifsfs.h:93:
+extern int  cifs_setxattr(struct dentry *, const char *, const void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#92: FILE: fs/cifs/cifsfs.h:93:
+extern int  cifs_setxattr(struct dentry *, const char *, const void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#92: FILE: fs/cifs/cifsfs.h:93:
+extern int  cifs_setxattr(struct dentry *, const char *, const void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#92: FILE: fs/cifs/cifsfs.h:93:
+extern int  cifs_setxattr(struct dentry *, const char *, const void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#92: FILE: fs/cifs/cifsfs.h:93:
+extern int  cifs_setxattr(struct dentry *, const char *, const void *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#93: FILE: fs/cifs/cifsfs.h:94:
+extern int  cifs_setxattr(struct dentry *, const char *, const void *,
+	size_t, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#94: FILE: fs/cifs/cifsfs.h:95:
+extern ssize_t cifs_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#94: FILE: fs/cifs/cifsfs.h:95:
+extern ssize_t cifs_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#94: FILE: fs/cifs/cifsfs.h:95:
+extern ssize_t cifs_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#94: FILE: fs/cifs/cifsfs.h:95:
+extern ssize_t cifs_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#94: FILE: fs/cifs/cifsfs.h:95:
+extern ssize_t cifs_getxattr(struct dentry *, const char *, void *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#95: FILE: fs/cifs/cifsfs.h:96:
+extern ssize_t cifs_listxattr(struct dentry *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#95: FILE: fs/cifs/cifsfs.h:96:
+extern ssize_t cifs_listxattr(struct dentry *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#95: FILE: fs/cifs/cifsfs.h:96:
+extern ssize_t cifs_listxattr(struct dentry *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#95: FILE: fs/cifs/cifsfs.h:96:
+extern ssize_t cifs_listxattr(struct dentry *, char *, size_t);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000193081.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 22 warnings, 13 checks, 62 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000193081.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
