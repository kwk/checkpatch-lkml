WARNING:TYPO_SPELLING: 'intialised' may be misspelled - perhaps 'initialised'?
#33: 
  the hierarchy in both directions. All these fields are intialised in 
                                                         ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
  kobject_attr and kobject_attr_group as we cannot link the struct attribute

ERROR:CODE_INDENT: code indent should use tabs where possible
#59: FILE: include/linux/kobject.h:35:
+ ^Istruct list_head^Ik_sibling;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#59: FILE: include/linux/kobject.h:35:
+ ^Istruct list_head^Ik_sibling;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#59: FILE: include/linux/kobject.h:35:
+ ^Istruct list_head^Ik_sibling;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#60: FILE: include/linux/kobject.h:36:
+ ^Istruct list_head^Ik_children;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#60: FILE: include/linux/kobject.h:36:
+ ^Istruct list_head^Ik_children;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#60: FILE: include/linux/kobject.h:36:
+ ^Istruct list_head^Ik_children;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#64: FILE: include/linux/kobject.h:40:
+^Ichar ^I^I^I*k_symlink;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#73: FILE: include/linux/kobject.h:67:
+^Istruct list_head ^Ilist;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#74: FILE: include/linux/kobject.h:68:
+^Iint ^I^I^Iflags;$

ERROR:POINTER_LOCATION: "foo	* bar" should be "foo	*bar"
#76: FILE: include/linux/kobject.h:70:
+		const struct attribute	* attr;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#77: FILE: include/linux/kobject.h:71:
+		const struct bin_attribute * bin_attr;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#84: FILE: include/linux/kobject.h:78:
+static inline const struct attribute * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#85: FILE: include/linux/kobject.h:79:
+kobject_attr(struct kobject_attr * k_attr) $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#85: FILE: include/linux/kobject.h:79:
+kobject_attr(struct kobject_attr * k_attr) 

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#87: FILE: include/linux/kobject.h:81:
+	return ((k_attr->flags & KOBJ_TEXT_ATTR) ? k_attr->attr_u.attr : &k_attr->attr_u.bin_attr->attr);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#91: FILE: include/linux/kobject.h:85:
+^Istruct list_head ^Ilist;$

ERROR:POINTER_LOCATION: "foo	* bar" should be "foo	*bar"
#92: FILE: include/linux/kobject.h:86:
+	const struct attribute_group	* attr_group;

ERROR:CODE_INDENT: code indent should use tabs where possible
#130: FILE: lib/kobject.c:224:
+ ^IINIT_LIST_HEAD(&kobj->k_children);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#130: FILE: lib/kobject.c:224:
+ ^IINIT_LIST_HEAD(&kobj->k_children);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: lib/kobject.c:224:
+ ^IINIT_LIST_HEAD(&kobj->k_children);$

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#160: FILE: lib/kobject.c:294:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#160: FILE: lib/kobject.c:294:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#171: FILE: lib/kobject.c:468:
+	struct list_head * tmp = kobj->attr.next;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#179: FILE: lib/kobject.c:476:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: lib/kobject.c:476:
+ $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#181: FILE: lib/kobject.c:478:
+		struct kobject_attr * k_attr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#182: FILE: lib/kobject.c:479:
+		struct kobject_attr * k_attr;
+		k_attr = list_entry(tmp, struct kobject_attr, list);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#189: FILE: lib/kobject.c:486:
+		struct kobject_attr_group * k_attr_group;

WARNING:LINE_SPACING: Missing a blank line after declarations
#190: FILE: lib/kobject.c:487:
+		struct kobject_attr_group * k_attr_group;
+		k_attr_group = list_entry(tmp, struct kobject_attr_group, list);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000332094.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 14 errors, 16 warnings, 1 checks, 159 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000332094.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
