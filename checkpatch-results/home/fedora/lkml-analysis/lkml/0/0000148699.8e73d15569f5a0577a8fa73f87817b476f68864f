WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#125: FILE: drivers/scsi/libata-core.c:3845:
+	BUG_ON(qc == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qc"
#125: FILE: drivers/scsi/libata-core.c:3845:
+	BUG_ON(qc == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#242: FILE: drivers/scsi/libata-core.c:4739:
+EXPORT_SYMBOL_GPL(ata_pci_device_resume);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#245: FILE: drivers/scsi/libata-core.c:4742:
+EXPORT_SYMBOL_GPL(ata_device_suspend);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#247: FILE: drivers/scsi/libata-core.c:4744:
+EXPORT_SYMBOL_GPL(ata_scsi_device_suspend);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#248: FILE: drivers/scsi/libata-core.c:4745:
+EXPORT_SYMBOL_GPL(ata_scsi_device_resume);

CHECK:SPACING: No space is necessary after a cast
#258: FILE: drivers/scsi/libata-scsi.c:407:
+	struct ata_port *ap = (struct ata_port *) &sdev->host->hostdata[0];

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#266: FILE: drivers/scsi/libata-scsi.c:415:
+	struct ata_port *ap = (struct ata_port *) &sdev->host->hostdata[0];

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#527: FILE: drivers/scsi/scsi_sysfs.c:266:
+static int scsi_bus_suspend(struct device * dev, pm_message_t state)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#543: FILE: drivers/scsi/scsi_sysfs.c:282:
+static int scsi_bus_resume(struct device * dev)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#591: FILE: include/linux/libata.h:395:
+extern int ata_pci_device_suspend(struct pci_dev *pdev, pm_message_t state);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#592: FILE: include/linux/libata.h:396:
+extern int ata_pci_device_resume(struct pci_dev *pdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#600: FILE: include/linux/libata.h:405:
+extern int ata_scsi_device_resume(struct scsi_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_device *' should also have an identifier name
#600: FILE: include/linux/libata.h:405:
+extern int ata_scsi_device_resume(struct scsi_device *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#601: FILE: include/linux/libata.h:406:
+extern int ata_scsi_device_suspend(struct scsi_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_device *' should also have an identifier name
#601: FILE: include/linux/libata.h:406:
+extern int ata_scsi_device_suspend(struct scsi_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#602: FILE: include/linux/libata.h:407:
+extern int ata_device_resume(struct ata_port *, struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_port *' should also have an identifier name
#602: FILE: include/linux/libata.h:407:
+extern int ata_device_resume(struct ata_port *, struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#602: FILE: include/linux/libata.h:407:
+extern int ata_device_resume(struct ata_port *, struct ata_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#603: FILE: include/linux/libata.h:408:
+extern int ata_device_suspend(struct ata_port *, struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_port *' should also have an identifier name
#603: FILE: include/linux/libata.h:408:
+extern int ata_device_suspend(struct ata_port *, struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_device *' should also have an identifier name
#603: FILE: include/linux/libata.h:408:
+extern int ata_device_suspend(struct ata_port *, struct ata_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_device *' should also have an identifier name
#616: FILE: include/scsi/scsi_host.h:300:
+	int (*resume)(struct scsi_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_device *' should also have an identifier name
#617: FILE: include/scsi/scsi_host.h:301:
+	int (*suspend)(struct scsi_device *);

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000148699.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 2 errors, 13 warnings, 9 checks, 463 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000148699.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
