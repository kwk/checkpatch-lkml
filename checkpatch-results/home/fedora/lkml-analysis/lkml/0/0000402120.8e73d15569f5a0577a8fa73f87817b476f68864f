ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#53: 
--- a/arch/i386/kernel/edd.c	Tue Jan  7 17:19:37 2003

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#118: FILE: arch/i386/kernel/edd.c:268:
+		len = sizeof (*info) - 4, found_pci=0;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#118: FILE: arch/i386/kernel/edd.c:268:
+		len = sizeof (*info) - 4, found_pci=0;
 		                                   ^

CHECK:SPACING: No space is necessary after a cast
#127: FILE: arch/i386/kernel/edd.c:281:
+	p += edd_dump_raw_data(p, left, ((char *) info) + 4, len);

CHECK:SPACING: No space is necessary after a cast
#144: FILE: arch/i386/kernel/edd.c:297:
+		c = *(((uint8_t *) info) + i + 4);

CHECK:SPACING: No space is necessary after a cast
#260: FILE: arch/i386/kernel/edd.c:535:
+		c = *(((uint8_t *) info) + i + 4);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#289: FILE: arch/i386/kernel/edd.c:595:
+static void edd_release(struct kobject * kobj)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#291: FILE: arch/i386/kernel/edd.c:597:
+	struct edd_device * dev = to_edd_device(kobj);

WARNING:LINE_SPACING: Missing a blank line after declarations
#292: FILE: arch/i386/kernel/edd.c:598:
+	struct edd_device * dev = to_edd_device(kobj);
+	kfree(dev);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'info->params.interface_path.pci.function'
#353: FILE: arch/i386/kernel/edd.c:645:
+					       info->params.interface_path.pci.
+					       function));

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#363: FILE: arch/i386/kernel/edd.c:660:
+#if defined(CONFIG_SCSI) || defined(CONFIG_SCSI_MODULE)

ERROR:POINTER_LOCATION: "foo	* bar" should be "foo	*bar"
#366: FILE: arch/i386/kernel/edd.c:663:
+	struct edd_device	* edev;

ERROR:POINTER_LOCATION: "foo	* bar" should be "foo	*bar"
#367: FILE: arch/i386/kernel/edd.c:664:
+	struct scsi_device	* sd;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#380: FILE: arch/i386/kernel/edd.c:674:
+static int edd_match_scsidev(struct device * dev, void * d)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#380: FILE: arch/i386/kernel/edd.c:674:
+static int edd_match_scsidev(struct device * dev, void * d)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#391: FILE: arch/i386/kernel/edd.c:676:
+	struct edd_match_data * data = (struct edd_match_data *)d;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#393: FILE: arch/i386/kernel/edd.c:678:
+	struct scsi_device * sd = to_scsi_device(dev);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sd->channel == info->params.interface_path.pci.channel'
#396: FILE: arch/i386/kernel/edd.c:681:
+		if ((sd->channel == info->params.interface_path.pci.channel) &&
+		    (sd->id == info->params.device_path.scsi.id) &&
+		    (sd->lun == info->params.device_path.scsi.lun)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sd->id == info->params.device_path.scsi.id'
#396: FILE: arch/i386/kernel/edd.c:681:
+		if ((sd->channel == info->params.interface_path.pci.channel) &&
+		    (sd->id == info->params.device_path.scsi.id) &&
+		    (sd->lun == info->params.device_path.scsi.lun)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sd->lun == info->params.device_path.scsi.lun'
#396: FILE: arch/i386/kernel/edd.c:681:
+		if ((sd->channel == info->params.interface_path.pci.channel) &&
+		    (sd->id == info->params.device_path.scsi.id) &&
+		    (sd->lun == info->params.device_path.scsi.lun)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#418: FILE: arch/i386/kernel/edd.c:695:
+ * Search the SCSI devices for a drive that matches the EDD $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#432: FILE: arch/i386/kernel/edd.c:704:
+	struct bus_type * scsi_bus = find_bus("scsi");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#440: FILE: arch/i386/kernel/edd.c:706:
+	if (!scsi_bus) {
 		return NULL;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#456: FILE: arch/i386/kernel/edd.c:713:
+		if (bus_for_each_dev(scsi_bus,NULL,&data,edd_match_scsidev))
 		                             ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#456: FILE: arch/i386/kernel/edd.c:713:
+		if (bus_for_each_dev(scsi_bus,NULL,&data,edd_match_scsidev))
 		                                  ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#456: FILE: arch/i386/kernel/edd.c:713:
+		if (bus_for_each_dev(scsi_bus,NULL,&data,edd_match_scsidev))
 		                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#456: FILE: arch/i386/kernel/edd.c:713:
+		if (bus_for_each_dev(scsi_bus,NULL,&data,edd_match_scsidev))
 		                                        ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#491: FILE: arch/i386/kernel/edd.c:727:
+		struct scsi_device * sdev = edd_find_matching_scsi_device(edev);

WARNING:LINE_SPACING: Missing a blank line after declarations
#492: FILE: arch/i386/kernel/edd.c:728:
+		struct scsi_device * sdev = edd_find_matching_scsi_device(edev);
+		if (sdev && get_device(&sdev->sdev_driverfs_dev)) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#513: FILE: arch/i386/kernel/edd.c:745:
+}
+static int

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#516: FILE: arch/i386/kernel/edd.c:748:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#528: FILE: arch/i386/kernel/edd.c:759:
+static void edd_populate_dir(struct edd_device * edev)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#561: FILE: arch/i386/kernel/edd.c:845:
+		if ((edev = edd_devices[i]))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000402120.commit.8e73d15569f5a0577a8fa73f87817b476f68864f total: 19 errors, 7 warnings, 7 checks, 490 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.EfiDkiSq0Q//home/fedora/lkml-analysis/lkml/0/patch.offset.0000402120.commit.8e73d15569f5a0577a8fa73f87817b476f68864f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
